1:61d3231: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:933eb2f:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
5:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
9:d29ca2a: 
1:61d3231: import static org.junit.Assert.assertEquals;
1:61d3231: import static org.junit.Assert.assertFalse;
1:61d3231: import static org.junit.Assert.assertTrue;
1:61d3231: import static org.junit.Assert.fail;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:61d3231: import javax.jms.MessageEOFException;
1:d29ca2a: import javax.jms.MessageFormatException;
1:d29ca2a: import javax.jms.MessageNotReadableException;
1:d29ca2a: import javax.jms.MessageNotWriteableException;
1:d29ca2a: 
1:61d3231: import org.junit.Test;
1:d29ca2a: 
1:933eb2f: /**
1:61d3231:  * Tests for the ActiveMQ StreamMessage implementation
1:933eb2f:  */
1:61d3231: public class ActiveMQStreamMessageTest {
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testGetDataStructureType() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_STREAM_MESSAGE);
1:933eb2f:     }
1:933eb2f: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadBoolean() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeBoolean(true);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readBoolean());
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readString().equals("true"));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readShort();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readInt();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readLong();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readDouble();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testreadByte() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:230a86c:             byte test = (byte)4;
1:d29ca2a:             msg.writeByte(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readByte() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readShort() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readInt() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readLong() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readString().equals(new Byte(test).toString()));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBoolean();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readDouble();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadShort() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:230a86c:             short test = (short)4;
1:d29ca2a:             msg.writeShort(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readShort() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readInt() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readLong() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readString().equals(new Short(test).toString()));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBoolean();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readDouble();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadChar() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             char test = 'z';
1:d29ca2a:             msg.writeChar(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readChar() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readString().equals(new Character(test).toString()));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBoolean();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readShort();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readInt();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readLong();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readDouble();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadInt() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             int test = 4;
1:d29ca2a:             msg.writeInt(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readInt() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readLong() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readString().equals(new Integer(test).toString()));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBoolean();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readShort();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readDouble();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadLong() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:74a7a8b:             long test = 4L;
1:d29ca2a:             msg.writeLong(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readLong() == test);
1:d29ca2a:             msg.reset();
1:d36c0d4:             assertTrue(msg.readString().equals(Long.valueOf(test).toString()));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBoolean();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readShort();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readInt();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readDouble();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:537b1b0:             msg = new ActiveMQStreamMessage();
1:537b1b0:             msg.writeObject(new Long("1"));
1:537b1b0:             // reset so it's readable now
1:537b1b0:             msg.reset();
1:537b1b0:             assertEquals(new Long("1"), msg.readObject());
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadFloat() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             float test = 4.4f;
1:d29ca2a:             msg.writeFloat(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readFloat() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readDouble() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readString().equals(new Float(test).toString()));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBoolean();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readShort();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readInt();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readLong();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:537b1b0:     public void testReadDouble()  {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             double test = 4.4d;
1:d29ca2a:             msg.writeDouble(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readDouble() == test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readString().equals(new Double(test).toString()));
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBoolean();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readShort();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readInt();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readLong();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[1]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadString() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:230a86c:             byte testByte = (byte)2;
1:d29ca2a:             msg.writeString(new Byte(testByte).toString());
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readByte() == testByte);
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             short testShort = 3;
1:d29ca2a:             msg.writeString(new Short(testShort).toString());
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readShort() == testShort);
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             int testInt = 4;
1:d29ca2a:             msg.writeString(new Integer(testInt).toString());
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readInt() == testInt);
1:d29ca2a:             msg.clearBody();
1:74a7a8b:             long testLong = 6L;
1:d29ca2a:             msg.writeString(new Long(testLong).toString());
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readLong() == testLong);
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             float testFloat = 6.6f;
1:d29ca2a:             msg.writeString(new Float(testFloat).toString());
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readFloat() == testFloat);
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             double testDouble = 7.7d;
1:d29ca2a:             msg.writeString(new Double(testDouble).toString());
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readDouble() == testDouble);
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             msg.writeString("true");
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readBoolean());
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             msg.writeString("a");
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException e) {
1:d29ca2a:             }
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             msg.writeString("777");
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readBytes(new byte[3]);
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException e) {
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:09ebb72:     public void testReadBigString() {
1:09ebb72:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:09ebb72:             // Test with a 1Meg String
1:230a86c:             StringBuffer bigSB = new StringBuffer(1024 * 1024);
1:230a86c:             for (int i = 0; i < 1024 * 1024; i++) {
1:61d3231:                 bigSB.append('a' + i % 26);
1:d29ca2a:             }
1:09ebb72:             String bigString = bigSB.toString();
1:d29ca2a: 
1:09ebb72:             msg.writeString(bigString);
1:09ebb72:             msg.reset();
1:09ebb72:             assertEquals(bigString, msg.readString());
1:230a86c: 
1:09ebb72:         } catch (JMSException jmsEx) {
1:09ebb72:             jmsEx.printStackTrace();
1:09ebb72:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadBytes() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             byte[] test = new byte[50];
1:d29ca2a:             for (int i = 0; i < test.length; i++) {
1:230a86c:                 test[i] = (byte)i;
1:d29ca2a:             }
1:d29ca2a:             msg.writeBytes(test);
1:d29ca2a:             msg.reset();
1:d29ca2a:             byte[] valid = new byte[test.length];
1:d29ca2a:             msg.readBytes(valid);
1:d29ca2a:             for (int i = 0; i < valid.length; i++) {
1:d29ca2a:                 assertTrue(valid[i] == test[i]);
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readByte();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readShort();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readInt();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readLong();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readFloat();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readChar();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:             msg.reset();
1:d29ca2a:             try {
1:d29ca2a:                 msg.readString();
1:d29ca2a:                 fail("Should have thrown exception");
1:d29ca2a:             } catch (MessageFormatException mfe) {
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadObject() {
1:d29ca2a:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:230a86c:             byte testByte = (byte)2;
1:d29ca2a:             msg.writeByte(testByte);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Byte)msg.readObject()).byteValue() == testByte);
1:d29ca2a:             msg.clearBody();
1:d29ca2a: 
1:d29ca2a:             short testShort = 3;
1:d29ca2a:             msg.writeShort(testShort);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Short)msg.readObject()).shortValue() == testShort);
1:d29ca2a:             msg.clearBody();
1:d29ca2a: 
1:d29ca2a:             int testInt = 4;
1:d29ca2a:             msg.writeInt(testInt);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Integer)msg.readObject()).intValue() == testInt);
1:d29ca2a:             msg.clearBody();
1:d29ca2a: 
1:74a7a8b:             long testLong = 6L;
1:d29ca2a:             msg.writeLong(testLong);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Long)msg.readObject()).longValue() == testLong);
1:d29ca2a:             msg.clearBody();
1:d29ca2a: 
1:d29ca2a:             float testFloat = 6.6f;
1:d29ca2a:             msg.writeFloat(testFloat);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Float)msg.readObject()).floatValue() == testFloat);
1:d29ca2a:             msg.clearBody();
1:d29ca2a: 
1:d29ca2a:             double testDouble = 7.7d;
1:d29ca2a:             msg.writeDouble(testDouble);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Double)msg.readObject()).doubleValue() == testDouble);
1:d29ca2a:             msg.clearBody();
1:d29ca2a: 
1:d29ca2a:             char testChar = 'z';
1:d29ca2a:             msg.writeChar(testChar);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Character)msg.readObject()).charValue() == testChar);
1:d29ca2a:             msg.clearBody();
1:d29ca2a: 
1:d29ca2a:             byte[] data = new byte[50];
1:d29ca2a:             for (int i = 0; i < data.length; i++) {
1:230a86c:                 data[i] = (byte)i;
1:d29ca2a:             }
1:d29ca2a:             msg.writeBytes(data);
1:d29ca2a:             msg.reset();
1:230a86c:             byte[] valid = (byte[])msg.readObject();
1:d29ca2a:             assertTrue(valid.length == data.length);
1:d29ca2a:             for (int i = 0; i < valid.length; i++) {
1:d29ca2a:                 assertTrue(valid[i] == data[i]);
1:d29ca2a:             }
1:d29ca2a:             msg.clearBody();
1:d29ca2a:             msg.writeBoolean(true);
1:d29ca2a:             msg.reset();
1:230a86c:             assertTrue(((Boolean)msg.readObject()).booleanValue());
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testClearBody() throws JMSException {
1:d29ca2a:         ActiveMQStreamMessage streamMessage = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:58b8d19:             streamMessage.writeObject(new Long(2));
1:d29ca2a:             streamMessage.clearBody();
1:d29ca2a:             assertFalse(streamMessage.isReadOnlyBody());
1:58b8d19:             streamMessage.writeObject(new Long(2));
1:d29ca2a:             streamMessage.readObject();
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotReadableException mnwe) {
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("should be writeable");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReset() throws JMSException {
1:d29ca2a:         ActiveMQStreamMessage streamMessage = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             streamMessage.writeDouble(24.5);
1:d29ca2a:             streamMessage.writeLong(311);
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("should be writeable");
1:d29ca2a:         }
1:d29ca2a:         streamMessage.reset();
1:d29ca2a:         try {
1:d29ca2a:             assertTrue(streamMessage.isReadOnlyBody());
1:d29ca2a:             assertEquals(streamMessage.readDouble(), 24.5, 0);
1:d29ca2a:             assertEquals(streamMessage.readLong(), 311);
1:d29ca2a:         } catch (MessageNotReadableException mnre) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             streamMessage.writeInt(33);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testReadOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:d29ca2a:         try {
1:d29ca2a:             message.writeBoolean(true);
1:230a86c:             message.writeByte((byte)1);
1:d29ca2a:             message.writeBytes(new byte[1]);
1:d29ca2a:             message.writeBytes(new byte[3], 0, 2);
1:d29ca2a:             message.writeChar('a');
1:d29ca2a:             message.writeDouble(1.5);
1:230a86c:             message.writeFloat((float)1.5);
1:d29ca2a:             message.writeInt(1);
1:d29ca2a:             message.writeLong(1);
1:d29ca2a:             message.writeObject("stringobj");
1:230a86c:             message.writeShort((short)1);
1:d29ca2a:             message.writeString("string");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("Should be writeable");
1:d29ca2a:         }
1:d29ca2a:         message.reset();
1:d29ca2a:         try {
1:d29ca2a:             message.readBoolean();
1:d29ca2a:             message.readByte();
1:d29ca2a:             assertEquals(1, message.readBytes(new byte[10]));
1:d29ca2a:             assertEquals(-1, message.readBytes(new byte[10]));
1:d29ca2a:             assertEquals(2, message.readBytes(new byte[10]));
1:d29ca2a:             assertEquals(-1, message.readBytes(new byte[10]));
1:d29ca2a:             message.readChar();
1:d29ca2a:             message.readDouble();
1:d29ca2a:             message.readFloat();
1:d29ca2a:             message.readInt();
1:d29ca2a:             message.readLong();
1:d29ca2a:             message.readString();
1:d29ca2a:             message.readShort();
1:d29ca2a:             message.readString();
1:d29ca2a:         } catch (MessageNotReadableException mnwe) {
1:d29ca2a:             fail("Should be readable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeBoolean(true);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:230a86c:             message.writeByte((byte)1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeBytes(new byte[1]);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeBytes(new byte[3], 0, 2);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeChar('a');
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeDouble(1.5);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:230a86c:             message.writeFloat((float)1.5);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeInt(1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeLong(1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeObject("stringobj");
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:230a86c:             message.writeShort((short)1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeString("string");
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:d29ca2a:     public void testWriteOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:d29ca2a:         message.clearBody();
1:d29ca2a:         try {
1:d29ca2a:             message.writeBoolean(true);
1:230a86c:             message.writeByte((byte)1);
1:d29ca2a:             message.writeBytes(new byte[1]);
1:d29ca2a:             message.writeBytes(new byte[3], 0, 2);
1:d29ca2a:             message.writeChar('a');
1:d29ca2a:             message.writeDouble(1.5);
1:230a86c:             message.writeFloat((float)1.5);
1:d29ca2a:             message.writeInt(1);
1:d29ca2a:             message.writeLong(1);
1:d29ca2a:             message.writeObject("stringobj");
1:230a86c:             message.writeShort((short)1);
1:d29ca2a:             message.writeString("string");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("Should be writeable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readBoolean();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readByte();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readBytes(new byte[1]);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readBytes(new byte[2]);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readChar();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readDouble();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readFloat();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readInt();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readLong();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readString();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readShort();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:09ebb72:         try {
1:d29ca2a:             message.readString();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:61d3231: 
1:61d3231:     @Test
1:58b8d19:     public void testWriteObject() {
1:58b8d19:         try {
1:58b8d19:             ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:58b8d19:             message.clearBody();
1:58b8d19:             message.writeObject("test");
1:58b8d19:             message.writeObject(new Character('a'));
1:58b8d19:             message.writeObject(new Boolean(false));
1:58b8d19:             message.writeObject(new Byte((byte) 2));
1:58b8d19:             message.writeObject(new Short((short) 2));
1:58b8d19:             message.writeObject(new Integer(2));
1:58b8d19:             message.writeObject(new Long(2l));
1:58b8d19:             message.writeObject(new Float(2.0f));
1:58b8d19:             message.writeObject(new Double(2.0d));
1:61d3231:         } catch(Exception e) {
1:58b8d19:             fail(e.getMessage());
1:d29ca2a:         }
1:58b8d19:         try {
1:58b8d19:             ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:58b8d19:             message.clearBody();
1:58b8d19:             message.writeObject(new Object());
1:58b8d19:             fail("should throw an exception");
1:61d3231:         } catch(MessageFormatException e) {
1:61d3231:         } catch(Exception e) {
1:58b8d19:             fail(e.getMessage());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:61d3231:     @Test
1:61d3231:     public void testReadEmptyBufferFromStream() throws JMSException {
1:61d3231:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:61d3231:         message.clearBody();
1:61d3231: 
1:61d3231:         final byte[] BYTE_LIST = {1, 2, 4};
1:61d3231: 
1:61d3231:         byte[] readList = new byte[BYTE_LIST.length - 1];
1:61d3231:         byte[] emptyList = {};
1:61d3231: 
1:61d3231:         message.writeBytes(emptyList);
1:61d3231:         message.reset();
1:61d3231: 
1:61d3231:         // First call should return zero as the array written was zero sized.
1:61d3231:         assertEquals(0, message.readBytes(readList));
1:61d3231: 
1:61d3231:         // Second call should return -1 as we've reached the end of element.
1:61d3231:         assertEquals(-1, message.readBytes(readList));
1:61d3231:     }
1:61d3231: 
1:61d3231:     @Test
1:61d3231:     public void testReadMixBufferValuesFromStream() throws JMSException {
1:61d3231:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:61d3231:         message.clearBody();
1:61d3231: 
1:61d3231:         final int size = 3;
1:61d3231: 
1:61d3231:         final byte[] BYTE_LIST_1 = {1, 2, 3};
1:61d3231:         final byte[] BYTE_LIST_2 = {4, 5, 6};
1:61d3231:         final byte[] EMPTY_LIST = {};
1:61d3231: 
1:61d3231:         byte[] bigBuffer = new byte[size + size];
1:61d3231:         byte[] smallBuffer = new byte[size - 1];
1:61d3231: 
1:61d3231:         message.writeBytes(BYTE_LIST_1);
1:61d3231:         message.writeBytes(EMPTY_LIST);
1:61d3231:         message.writeBytes(BYTE_LIST_2);
1:61d3231:         message.writeBytes(EMPTY_LIST);
1:61d3231:         message.reset();
1:61d3231: 
1:61d3231:         // Read first with big buffer
1:61d3231:         assertEquals(size, message.readBytes(bigBuffer));
1:61d3231:         assertEquals(1, bigBuffer[0]);
1:61d3231:         assertEquals(2, bigBuffer[1]);
1:61d3231:         assertEquals(3, bigBuffer[2]);
1:61d3231:         assertEquals(-1, message.readBytes(bigBuffer));
1:61d3231: 
1:61d3231:         // Read the empty buffer, should not be able to read anything else until
1:61d3231:         // the bytes read is completed.
1:61d3231:         assertEquals(0, message.readBytes(bigBuffer));
1:61d3231:         try {
1:61d3231:             message.readBoolean();
1:61d3231:         } catch (JMSException ex) {}
1:61d3231:         assertEquals(-1, message.readBytes(bigBuffer));
1:61d3231: 
1:61d3231:         // Read the third buffer with small buffer, anything that is attempted
1:61d3231:         // to be read in between reads or before read completion should throw.
1:61d3231:         assertEquals(smallBuffer.length, message.readBytes(smallBuffer));
1:61d3231:         assertEquals(4, smallBuffer[0]);
1:61d3231:         assertEquals(5, smallBuffer[1]);
1:61d3231:         try {
1:61d3231:             message.readByte();
1:61d3231:         } catch (JMSException ex) {}
1:61d3231:         assertEquals(1, message.readBytes(smallBuffer));
1:61d3231:         assertEquals(6, smallBuffer[0]);
1:61d3231:         try {
1:61d3231:             message.readBoolean();
1:61d3231:         } catch (JMSException ex) {}
1:61d3231:         assertEquals(-1, message.readBytes(bigBuffer));
1:61d3231: 
1:61d3231:         // Read the empty buffer, should not be able to read anything else until
1:61d3231:         // the bytes read is completed.
1:61d3231:         assertEquals(0, message.readBytes(bigBuffer));
1:61d3231:         try {
1:61d3231:             message.readBoolean();
1:61d3231:         } catch (JMSException ex) {}
1:61d3231:         assertEquals(-1, message.readBytes(bigBuffer));
1:61d3231: 
1:61d3231:         // Message should be empty now
1:61d3231:         try {
1:61d3231:             message.readBoolean();
1:61d3231:         } catch (MessageEOFException ex) {}
1:61d3231:     }
3:58b8d19: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61d3231
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: import javax.jms.MessageEOFException;
1: import org.junit.Test;
1:  * Tests for the ActiveMQ StreamMessage implementation
1: public class ActiveMQStreamMessageTest {
1:     @Test
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:                 bigSB.append('a' + i % 26);
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         } catch(Exception e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch(MessageFormatException e) {
1:         } catch(Exception e) {
1:     @Test
1:     public void testReadEmptyBufferFromStream() throws JMSException {
1:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:         message.clearBody();
1: 
1:         final byte[] BYTE_LIST = {1, 2, 4};
1: 
1:         byte[] readList = new byte[BYTE_LIST.length - 1];
1:         byte[] emptyList = {};
1: 
1:         message.writeBytes(emptyList);
1:         message.reset();
1: 
1:         // First call should return zero as the array written was zero sized.
1:         assertEquals(0, message.readBytes(readList));
1: 
1:         // Second call should return -1 as we've reached the end of element.
1:         assertEquals(-1, message.readBytes(readList));
1:     }
1: 
1:     @Test
1:     public void testReadMixBufferValuesFromStream() throws JMSException {
1:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:         message.clearBody();
1: 
1:         final int size = 3;
1: 
1:         final byte[] BYTE_LIST_1 = {1, 2, 3};
1:         final byte[] BYTE_LIST_2 = {4, 5, 6};
1:         final byte[] EMPTY_LIST = {};
1: 
1:         byte[] bigBuffer = new byte[size + size];
1:         byte[] smallBuffer = new byte[size - 1];
1: 
1:         message.writeBytes(BYTE_LIST_1);
1:         message.writeBytes(EMPTY_LIST);
1:         message.writeBytes(BYTE_LIST_2);
1:         message.writeBytes(EMPTY_LIST);
1:         message.reset();
1: 
1:         // Read first with big buffer
1:         assertEquals(size, message.readBytes(bigBuffer));
1:         assertEquals(1, bigBuffer[0]);
1:         assertEquals(2, bigBuffer[1]);
1:         assertEquals(3, bigBuffer[2]);
1:         assertEquals(-1, message.readBytes(bigBuffer));
1: 
1:         // Read the empty buffer, should not be able to read anything else until
1:         // the bytes read is completed.
1:         assertEquals(0, message.readBytes(bigBuffer));
1:         try {
1:             message.readBoolean();
1:         } catch (JMSException ex) {}
1:         assertEquals(-1, message.readBytes(bigBuffer));
1: 
1:         // Read the third buffer with small buffer, anything that is attempted
1:         // to be read in between reads or before read completion should throw.
1:         assertEquals(smallBuffer.length, message.readBytes(smallBuffer));
1:         assertEquals(4, smallBuffer[0]);
1:         assertEquals(5, smallBuffer[1]);
1:         try {
1:             message.readByte();
1:         } catch (JMSException ex) {}
1:         assertEquals(1, message.readBytes(smallBuffer));
1:         assertEquals(6, smallBuffer[0]);
1:         try {
1:             message.readBoolean();
1:         } catch (JMSException ex) {}
1:         assertEquals(-1, message.readBytes(bigBuffer));
1: 
1:         // Read the empty buffer, should not be able to read anything else until
1:         // the bytes read is completed.
1:         assertEquals(0, message.readBytes(bigBuffer));
1:         try {
1:             message.readBoolean();
1:         } catch (JMSException ex) {}
1:         assertEquals(-1, message.readBytes(bigBuffer));
1: 
1:         // Message should be empty now
1:         try {
1:             message.readBoolean();
1:         } catch (MessageEOFException ex) {}
1:     }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Constructor for ActiveMQStreamMessageTest.
1:      * 
0:      * @param name
1:      */
0:     public ActiveMQStreamMessageTest(String name) {
0:         super(name);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:             long test = 4L;
/////////////////////////////////////////////////////////////////////////
1:             long testLong = 6L;
/////////////////////////////////////////////////////////////////////////
1:             long testLong = 6L;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:             byte test = (byte)4;
/////////////////////////////////////////////////////////////////////////
1:             short test = (short)4;
/////////////////////////////////////////////////////////////////////////
1:             byte testByte = (byte)2;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             StringBuffer bigSB = new StringBuffer(1024 * 1024);
1:             for (int i = 0; i < 1024 * 1024; i++) {
0:                 bigSB.append((char)'a' + i % 26);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 test[i] = (byte)i;
/////////////////////////////////////////////////////////////////////////
1:             byte testByte = (byte)2;
1:             assertTrue(((Byte)msg.readObject()).byteValue() == testByte);
1:             assertTrue(((Short)msg.readObject()).shortValue() == testShort);
1:             assertTrue(((Integer)msg.readObject()).intValue() == testInt);
1:             assertTrue(((Long)msg.readObject()).longValue() == testLong);
1:             assertTrue(((Float)msg.readObject()).floatValue() == testFloat);
1:             assertTrue(((Double)msg.readObject()).doubleValue() == testDouble);
1:             assertTrue(((Character)msg.readObject()).charValue() == testChar);
1:                 data[i] = (byte)i;
1:             byte[] valid = (byte[])msg.readObject();
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(((Boolean)msg.readObject()).booleanValue());
/////////////////////////////////////////////////////////////////////////
1:             message.writeByte((byte)1);
1:             message.writeFloat((float)1.5);
1:             message.writeShort((short)1);
/////////////////////////////////////////////////////////////////////////
1:             message.writeByte((byte)1);
/////////////////////////////////////////////////////////////////////////
1:             message.writeFloat((float)1.5);
/////////////////////////////////////////////////////////////////////////
1:             message.writeShort((short)1);
/////////////////////////////////////////////////////////////////////////
1:             message.writeByte((byte)1);
1:             message.writeFloat((float)1.5);
1:             message.writeShort((short)1);
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import java.io.Serializable;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageFormatException;
1: import javax.jms.MessageNotReadableException;
1: import javax.jms.MessageNotWriteableException;
1: 
0: import org.apache.activemq.command.ActiveMQStreamMessage;
0: import org.apache.activemq.command.CommandTypes;
1: 
0: import junit.framework.TestCase;
1: 
0: /**
0:  * @version $Revision$
1:  */
0: public class ActiveMQStreamMessageTest extends TestCase {
1: 
0:     public static void main(String[] args) {
0:         junit.textui.TestRunner.run(ActiveMQStreamMessageTest.class);
1:     }
1: 
0:     /*
0:      * @see TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception {
0:         super.setUp();
1:     }
1: 
0:     /*
0:      * @see TestCase#tearDown()
1:      */
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:     }
1: 
0:     /**
0:      * Constructor for ActiveMQStreamMessageTest.
0:      *
0:      * @param arg0
1:      */
0:     public ActiveMQStreamMessageTest(String arg0) {
0:         super(arg0);
1:     }
1: 
1:     public void testGetDataStructureType() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_STREAM_MESSAGE);
1:     }
1: 
1:     public void testReadBoolean() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
1:             msg.writeBoolean(true);
1:             msg.reset();
1:             assertTrue(msg.readBoolean());
1:             msg.reset();
1:             assertTrue(msg.readString().equals("true"));
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readShort();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readInt();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readLong();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readDouble();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testreadByte() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
0:             byte test = (byte) 4;
1:             msg.writeByte(test);
1:             msg.reset();
1:             assertTrue(msg.readByte() == test);
1:             msg.reset();
1:             assertTrue(msg.readShort() == test);
1:             msg.reset();
1:             assertTrue(msg.readInt() == test);
1:             msg.reset();
1:             assertTrue(msg.readLong() == test);
1:             msg.reset();
1:             assertTrue(msg.readString().equals(new Byte(test).toString()));
1:             msg.reset();
1:             try {
1:                 msg.readBoolean();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readDouble();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadShort() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
0:             short test = (short) 4;
1:             msg.writeShort(test);
1:             msg.reset();
1:             assertTrue(msg.readShort() == test);
1:             msg.reset();
1:             assertTrue(msg.readInt() == test);
1:             msg.reset();
1:             assertTrue(msg.readLong() == test);
1:             msg.reset();
1:             assertTrue(msg.readString().equals(new Short(test).toString()));
1:             msg.reset();
1:             try {
1:                 msg.readBoolean();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readDouble();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadChar() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
1:             char test = 'z';
1:             msg.writeChar(test);
1:             msg.reset();
1:             assertTrue(msg.readChar() == test);
1:             msg.reset();
1:             assertTrue(msg.readString().equals(new Character(test).toString()));
1:             msg.reset();
1:             try {
1:                 msg.readBoolean();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readShort();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readInt();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readLong();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readDouble();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadInt() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
1:             int test = 4;
1:             msg.writeInt(test);
1:             msg.reset();
1:             assertTrue(msg.readInt() == test);
1:             msg.reset();
1:             assertTrue(msg.readLong() == test);
1:             msg.reset();
1:             assertTrue(msg.readString().equals(new Integer(test).toString()));
1:             msg.reset();
1:             try {
1:                 msg.readBoolean();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readShort();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readDouble();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadLong() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
0:             long test = 4l;
1:             msg.writeLong(test);
1:             msg.reset();
1:             assertTrue(msg.readLong() == test);
1:             msg.reset();
0:             assertTrue(msg.readString().equals(new Long(test).toString()));
1:             msg.reset();
1:             try {
1:                 msg.readBoolean();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readShort();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readInt();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readDouble();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadFloat() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
1:             float test = 4.4f;
1:             msg.writeFloat(test);
1:             msg.reset();
1:             assertTrue(msg.readFloat() == test);
1:             msg.reset();
1:             assertTrue(msg.readDouble() == test);
1:             msg.reset();
1:             assertTrue(msg.readString().equals(new Float(test).toString()));
1:             msg.reset();
1:             try {
1:                 msg.readBoolean();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readShort();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readInt();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readLong();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testReadDouble() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
1:             double test = 4.4d;
1:             msg.writeDouble(test);
1:             msg.reset();
1:             assertTrue(msg.readDouble() == test);
1:             msg.reset();
1:             assertTrue(msg.readString().equals(new Double(test).toString()));
1:             msg.reset();
1:             try {
1:                 msg.readBoolean();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readShort();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readInt();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readLong();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[1]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadString() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
0:             byte testByte = (byte) 2;
1:             msg.writeString(new Byte(testByte).toString());
1:             msg.reset();
1:             assertTrue(msg.readByte() == testByte);
1:             msg.clearBody();
1:             short testShort = 3;
1:             msg.writeString(new Short(testShort).toString());
1:             msg.reset();
1:             assertTrue(msg.readShort() == testShort);
1:             msg.clearBody();
1:             int testInt = 4;
1:             msg.writeString(new Integer(testInt).toString());
1:             msg.reset();
1:             assertTrue(msg.readInt() == testInt);
1:             msg.clearBody();
0:             long testLong = 6l;
1:             msg.writeString(new Long(testLong).toString());
1:             msg.reset();
1:             assertTrue(msg.readLong() == testLong);
1:             msg.clearBody();
1:             float testFloat = 6.6f;
1:             msg.writeString(new Float(testFloat).toString());
1:             msg.reset();
1:             assertTrue(msg.readFloat() == testFloat);
1:             msg.clearBody();
1:             double testDouble = 7.7d;
1:             msg.writeString(new Double(testDouble).toString());
1:             msg.reset();
1:             assertTrue(msg.readDouble() == testDouble);
1:             msg.clearBody();
1:             msg.writeString("true");
1:             msg.reset();
1:             assertTrue(msg.readBoolean());
1:             msg.clearBody();
1:             msg.writeString("a");
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException e) {
1:             }
1:             msg.clearBody();
1:             msg.writeString("777");
1:             msg.reset();
1:             try {
1:                 msg.readBytes(new byte[3]);
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException e) {
1:             }
1: 
1: 
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadBytes() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
1:             byte[] test = new byte[50];
1:             for (int i = 0; i < test.length; i++) {
0:                 test[i] = (byte) i;
1:             }
1:             msg.writeBytes(test);
1:             msg.reset();
1:             byte[] valid = new byte[test.length];
1:             msg.readBytes(valid);
1:             for (int i = 0; i < valid.length; i++) {
1:                 assertTrue(valid[i] == test[i]);
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readByte();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readShort();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readInt();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readLong();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readFloat();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readChar();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:             msg.reset();
1:             try {
1:                 msg.readString();
1:                 fail("Should have thrown exception");
1:             } catch (MessageFormatException mfe) {
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadObject() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
0:             byte testByte = (byte) 2;
1:             msg.writeByte(testByte);
1:             msg.reset();
0:             assertTrue(((Byte) msg.readObject()).byteValue() == testByte);
1:             msg.clearBody();
1: 
1:             short testShort = 3;
1:             msg.writeShort(testShort);
1:             msg.reset();
0:             assertTrue(((Short) msg.readObject()).shortValue() == testShort);
1:             msg.clearBody();
1: 
1:             int testInt = 4;
1:             msg.writeInt(testInt);
1:             msg.reset();
0:             assertTrue(((Integer) msg.readObject()).intValue() == testInt);
1:             msg.clearBody();
1: 
0:             long testLong = 6l;
1:             msg.writeLong(testLong);
1:             msg.reset();
0:             assertTrue(((Long) msg.readObject()).longValue() == testLong);
1:             msg.clearBody();
1: 
1:             float testFloat = 6.6f;
1:             msg.writeFloat(testFloat);
1:             msg.reset();
0:             assertTrue(((Float) msg.readObject()).floatValue() == testFloat);
1:             msg.clearBody();
1: 
1:             double testDouble = 7.7d;
1:             msg.writeDouble(testDouble);
1:             msg.reset();
0:             assertTrue(((Double) msg.readObject()).doubleValue() == testDouble);
1:             msg.clearBody();
1: 
1:             char testChar = 'z';
1:             msg.writeChar(testChar);
1:             msg.reset();
0:             assertTrue(((Character) msg.readObject()).charValue() == testChar);
1:             msg.clearBody();
1: 
1:             byte[] data = new byte[50];
1:             for (int i = 0; i < data.length; i++) {
0:                 data[i] = (byte) i;
1:             }
1:             msg.writeBytes(data);
1:             msg.reset();
0:             byte[] valid = (byte[]) msg.readObject();
1:             assertTrue(valid.length == data.length);
1:             for (int i = 0; i < valid.length; i++) {
1:                 assertTrue(valid[i] == data[i]);
1:             }
1:             msg.clearBody();
1:             msg.writeBoolean(true);
1:             msg.reset();
0:             assertTrue(((Boolean) msg.readObject()).booleanValue());
1: 
1: 
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testClearBody() throws JMSException {
1:         ActiveMQStreamMessage streamMessage = new ActiveMQStreamMessage();
1:         try {
0:             streamMessage.writeObject(new Serializable() {
0:                 private static final long serialVersionUID = -5181896809607968727L;
0:             });
1:             streamMessage.clearBody();
1:             assertFalse(streamMessage.isReadOnlyBody());
0:             streamMessage.writeObject(new Serializable() {
0:                 private static final long serialVersionUID = 5074177640797561141L;
0:             });
1:             streamMessage.readObject();
1:             fail("should throw exception");
1:         } catch (MessageNotReadableException mnwe) {
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("should be writeable");
1:         }
1:     }
1: 
1:     public void testReset() throws JMSException {
1:         ActiveMQStreamMessage streamMessage = new ActiveMQStreamMessage();
1:         try {
1:             streamMessage.writeDouble(24.5);
1:             streamMessage.writeLong(311);
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("should be writeable");
1:         }
1:         streamMessage.reset();
1:         try {
1:             assertTrue(streamMessage.isReadOnlyBody());
1:             assertEquals(streamMessage.readDouble(), 24.5, 0);
1:             assertEquals(streamMessage.readLong(), 311);
1:         } catch (MessageNotReadableException mnre) {
1:             fail("should be readable");
1:         }
1:         try {
1:             streamMessage.writeInt(33);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: 
1:     public void testReadOnlyBody() throws JMSException {
1:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:         try {
1:             message.writeBoolean(true);
0:             message.writeByte((byte) 1);
1:             message.writeBytes(new byte[1]);
1:             message.writeBytes(new byte[3], 0, 2);
1:             message.writeChar('a');
1:             message.writeDouble(1.5);
0:             message.writeFloat((float) 1.5);
1:             message.writeInt(1);
1:             message.writeLong(1);
1:             message.writeObject("stringobj");
0:             message.writeShort((short) 1);
1:             message.writeString("string");
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("Should be writeable");
1:         }
1:         message.reset();
1:         try {
1:             message.readBoolean();
1:             message.readByte();
1:             assertEquals(1, message.readBytes(new byte[10]));
1:             assertEquals(-1, message.readBytes(new byte[10]));
1:             assertEquals(2, message.readBytes(new byte[10]));
1:             assertEquals(-1, message.readBytes(new byte[10]));
1:             message.readChar();
1:             message.readDouble();
1:             message.readFloat();
1:             message.readInt();
1:             message.readLong();
1:             message.readString();
1:             message.readShort();
1:             message.readString();
1:         } catch (MessageNotReadableException mnwe) {
1:             fail("Should be readable");
1:         }
1:         try {
1:             message.writeBoolean(true);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
0:             message.writeByte((byte) 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeBytes(new byte[1]);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeBytes(new byte[3], 0, 2);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeChar('a');
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeDouble(1.5);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
0:             message.writeFloat((float) 1.5);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeInt(1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeLong(1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeObject("stringobj");
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
0:             message.writeShort((short) 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeString("string");
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: 
1:     public void testWriteOnlyBody() throws JMSException {
1:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:         message.clearBody();
1:         try {
1:             message.writeBoolean(true);
0:             message.writeByte((byte) 1);
1:             message.writeBytes(new byte[1]);
1:             message.writeBytes(new byte[3], 0, 2);
1:             message.writeChar('a');
1:             message.writeDouble(1.5);
0:             message.writeFloat((float) 1.5);
1:             message.writeInt(1);
1:             message.writeLong(1);
1:             message.writeObject("stringobj");
0:             message.writeShort((short) 1);
1:             message.writeString("string");
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("Should be writeable");
1:         }
1:         try {
1:             message.readBoolean();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException mnwe) {
1:         }
1:         try {
1:             message.readByte();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readBytes(new byte[1]);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readBytes(new byte[2]);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readChar();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readDouble();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readFloat();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readInt();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readLong();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readString();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readShort();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readString();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:     }
1: 
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:58b8d19
/////////////////////////////////////////////////////////////////////////
1:             streamMessage.writeObject(new Long(2));
1:             streamMessage.writeObject(new Long(2));
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testWriteObject() {
1:         try {
1:             ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:             message.clearBody();
1:             message.writeObject("test");
1:             message.writeObject(new Character('a'));
1:             message.writeObject(new Boolean(false));
1:             message.writeObject(new Byte((byte) 2));
1:             message.writeObject(new Short((short) 2));
1:             message.writeObject(new Integer(2));
1:             message.writeObject(new Long(2l));
1:             message.writeObject(new Float(2.0f));
1:             message.writeObject(new Double(2.0d));
0:         }catch(Exception e) {
1:             fail(e.getMessage());
1:         }
1:         try {
1:             ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:             message.clearBody();
1:             message.writeObject(new Object());
1:             fail("should throw an exception");
0:         }catch(MessageFormatException e) {
0:             
0:         }catch(Exception e) {
1:             fail(e.getMessage());
1:         }
1:     }
commit:537b1b0
/////////////////////////////////////////////////////////////////////////
1:             msg = new ActiveMQStreamMessage();
1:             msg.writeObject(new Long("1"));
1:             // reset so it's readable now
1:             msg.reset();
1:             assertEquals(new Long("1"), msg.readObject());
/////////////////////////////////////////////////////////////////////////
1:     public void testReadDouble()  {
/////////////////////////////////////////////////////////////////////////
0:       
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(msg.readString().equals(Long.valueOf(test).toString()));
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:09ebb72
/////////////////////////////////////////////////////////////////////////
1:     public void testReadBigString() {
1:         ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:         try {
1:             // Test with a 1Meg String
0:             StringBuffer bigSB = new StringBuffer(1024*1024);
0:             for( int i=0; i < 1024*1024; i++ ) {
0:                 bigSB.append((char)'a'+i%26);
0:             }
1:             String bigString = bigSB.toString();
0: 
1:             msg.writeString(bigString);
1:             msg.reset();
1:             assertEquals(bigString, msg.readString());
0:             
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
0:         }
0:     }
0: 
============================================================================