1:2a2dcd5: /**
1:2a2dcd5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a2dcd5:  * contributor license agreements.  See the NOTICE file distributed with
1:2a2dcd5:  * this work for additional information regarding copyright ownership.
1:2a2dcd5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a2dcd5:  * (the "License"); you may not use this file except in compliance with
1:2a2dcd5:  * the License.  You may obtain a copy of the License at
1:2a2dcd5:  *
1:2a2dcd5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a2dcd5:  *
1:2a2dcd5:  * Unless required by applicable law or agreed to in writing, software
1:2a2dcd5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a2dcd5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a2dcd5:  * See the License for the specific language governing permissions and
1:2a2dcd5:  * limitations under the License.
1:2a2dcd5:  */
1:2a2dcd5: package org.apache.activemq.network;
1:a80acbb: 
1:489f929: import java.util.Map;
1:489f929: import java.util.concurrent.ConcurrentHashMap;
1:489f929: 
1:a80acbb: import javax.management.MalformedObjectNameException;
1:a80acbb: import javax.management.ObjectName;
1:2a2dcd5: import org.apache.activemq.broker.BrokerService;
1:2a2dcd5: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1:7d7d6fa: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
1:2a2dcd5: import org.apache.activemq.broker.jmx.NetworkBridgeView;
1:489f929: import org.apache.activemq.command.Message;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:b2de5f3: 
1:2a2dcd5: public class MBeanNetworkListener implements NetworkBridgeListener {
1:b2de5f3: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MBeanNetworkListener.class);
1:a80acbb: 
1:374cab9:     private final BrokerService brokerService;
1:374cab9:     private final ObjectName connectorName;
1:374cab9:     private final NetworkBridgeConfiguration networkBridgeConfiguration;
1:374cab9:     private boolean createdByDuplex = false;
1:489f929:     private Map<NetworkBridge,MBeanBridgeDestination> destinationObjectNameMap = new ConcurrentHashMap<NetworkBridge,MBeanBridgeDestination>();
1:374cab9: 
1:374cab9:     public MBeanNetworkListener(BrokerService brokerService, NetworkBridgeConfiguration networkBridgeConfiguration, ObjectName connectorName) {
1:2a2dcd5:         this.brokerService = brokerService;
1:374cab9:         this.networkBridgeConfiguration = networkBridgeConfiguration;
1:2a2dcd5:         this.connectorName = connectorName;
2:2a2dcd5:     }
10:2a2dcd5: 
1:2a2dcd5:     @Override
1:2a2dcd5:     public void bridgeFailed() {
1:2a2dcd5:     }
1:2a2dcd5: 
1:2a2dcd5:     @Override
1:2a2dcd5:     public void onStart(NetworkBridge bridge) {
1:2a2dcd5:         if (!brokerService.isUseJmx()) {
1:2a2dcd5:             return;
1:2a2dcd5:         }
1:9b88902:         NetworkBridgeView view = new NetworkBridgeView(bridge);
1:9b88902:         view.setCreateByDuplex(createdByDuplex);
1:2a2dcd5:         try {
2:2a2dcd5:             ObjectName objectName = createNetworkBridgeObjectName(bridge);
1:2a2dcd5:             AnnotatedMBean.registerMBean(brokerService.getManagementContext(), view, objectName);
1:f793fbd:             bridge.setMbeanObjectName(objectName);
1:374cab9:             MBeanBridgeDestination mBeanBridgeDestination = new MBeanBridgeDestination(brokerService,networkBridgeConfiguration,bridge,view);
1:489f929:             destinationObjectNameMap.put(bridge,mBeanBridgeDestination);
1:374cab9:             mBeanBridgeDestination.start();
1:e1bbde7:             LOG.debug("registered: {} as: {}", bridge, objectName);
1:2a2dcd5:         } catch (Throwable e) {
1:e1bbde7:             LOG.debug("Network bridge could not be registered in JMX: {}", e.getMessage(), e);
1:f793fbd:         }
1:2a2dcd5:     }
1:2a2dcd5: 
1:2a2dcd5:     @Override
1:2a2dcd5:     public void onStop(NetworkBridge bridge) {
1:2a2dcd5:         if (!brokerService.isUseJmx()) {
1:2a2dcd5:             return;
1:2a2dcd5:         }
1:2a2dcd5:         try {
1:f793fbd:             ObjectName objectName = bridge.getMbeanObjectName();
1:f793fbd:             if (objectName != null) {
1:f793fbd:                 brokerService.getManagementContext().unregisterMBean(objectName);
1:f793fbd:             }
1:489f929:             MBeanBridgeDestination mBeanBridgeDestination = destinationObjectNameMap.remove(bridge);
1:489f929:             if (mBeanBridgeDestination != null){
1:374cab9:                 mBeanBridgeDestination.stop();
1:489f929:             }
1:2a2dcd5:         } catch (Throwable e) {
1:e1bbde7:             LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:2a2dcd5:         }
1:2a2dcd5:     }
1:489f929: 
1:489f929: 
1:2a2dcd5: 
1:2a2dcd5:     protected ObjectName createNetworkBridgeObjectName(NetworkBridge bridge) throws MalformedObjectNameException {
1:7d7d6fa:         return BrokerMBeanSupport.createNetworkBridgeObjectName(connectorName, bridge.getRemoteAddress());
1:2a2dcd5:     }
1:b2de5f3: 
1:2a2dcd5:     public void setCreatedByDuplex(boolean createdByDuplex) {
1:2a2dcd5:         this.createdByDuplex = createdByDuplex;
1:2a2dcd5:     }
1:489f929: 
1:489f929: 
1:489f929: 
1:489f929:     @Override
1:489f929:     public void onOutboundMessage(NetworkBridge bridge,Message message) {
1:489f929:         MBeanBridgeDestination mBeanBridgeDestination = destinationObjectNameMap.get(bridge);
1:489f929:         if (mBeanBridgeDestination != null){
1:489f929:             mBeanBridgeDestination.onOutboundMessage(message);
1:489f929:         }
1:489f929:     }
1:489f929: 
1:489f929:     @Override
1:489f929:     public void onInboundMessage(NetworkBridge bridge,Message message) {
1:489f929:         MBeanBridgeDestination mBeanBridgeDestination = destinationObjectNameMap.get(bridge);
1:489f929:         if (mBeanBridgeDestination != null){
1:489f929:             mBeanBridgeDestination.onInboundMessage(message);
1:489f929:         }
1:489f929:     }
1:489f929: 
1:2a2dcd5: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:374cab9
/////////////////////////////////////////////////////////////////////////
1:     private final BrokerService brokerService;
1:     private final ObjectName connectorName;
1:     private final NetworkBridgeConfiguration networkBridgeConfiguration;
1:     private boolean createdByDuplex = false;
1: 
1:     public MBeanNetworkListener(BrokerService brokerService, NetworkBridgeConfiguration networkBridgeConfiguration, ObjectName connectorName) {
1:         this.networkBridgeConfiguration = networkBridgeConfiguration;
/////////////////////////////////////////////////////////////////////////
1:             MBeanBridgeDestination mBeanBridgeDestination = new MBeanBridgeDestination(brokerService,networkBridgeConfiguration,bridge,view);
1:             mBeanBridgeDestination.start();
/////////////////////////////////////////////////////////////////////////
1:                 mBeanBridgeDestination.stop();
commit:9b88902
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         NetworkBridgeView view = new NetworkBridgeView(bridge);
1:         view.setCreateByDuplex(createdByDuplex);
0:             MBeanBridgeDestination mBeanBridgeDestination = new MBeanBridgeDestination(brokerService,bridge,view);
commit:489f929
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1:     private Map<NetworkBridge,MBeanBridgeDestination> destinationObjectNameMap = new ConcurrentHashMap<NetworkBridge,MBeanBridgeDestination>();
/////////////////////////////////////////////////////////////////////////
0:             MBeanBridgeDestination mBeanBridgeDestination = new MBeanBridgeDestination(brokerService,bridge);
1:             destinationObjectNameMap.put(bridge,mBeanBridgeDestination);
/////////////////////////////////////////////////////////////////////////
1:             MBeanBridgeDestination mBeanBridgeDestination = destinationObjectNameMap.remove(bridge);
1:             if (mBeanBridgeDestination != null){
0:                 mBeanBridgeDestination.close();
1:             }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     @Override
1:     public void onOutboundMessage(NetworkBridge bridge,Message message) {
1:         MBeanBridgeDestination mBeanBridgeDestination = destinationObjectNameMap.get(bridge);
1:         if (mBeanBridgeDestination != null){
1:             mBeanBridgeDestination.onOutboundMessage(message);
1:         }
1:     }
1: 
1:     @Override
1:     public void onInboundMessage(NetworkBridge bridge,Message message) {
1:         MBeanBridgeDestination mBeanBridgeDestination = destinationObjectNameMap.get(bridge);
1:         if (mBeanBridgeDestination != null){
1:             mBeanBridgeDestination.onInboundMessage(message);
1:         }
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("registered: {} as: {}", bridge, objectName);
1:             LOG.debug("Network bridge could not be registered in JMX: {}", e.getMessage(), e);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
author:Gary Tully
-------------------------------------------------------------------------------
commit:7d7d6fa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
/////////////////////////////////////////////////////////////////////////
1:         return BrokerMBeanSupport.createNetworkBridgeObjectName(connectorName, bridge.getRemoteAddress());
commit:e3626e1
/////////////////////////////////////////////////////////////////////////
0: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
0:         Hashtable<String, String> map = new Hashtable<String, String>(connectorName.getKeyPropertyList());
0:         map.put("networkBridge", JMXSupport.encodeObjectNamePart(bridge.getRemoteAddress()));
0:         return new ObjectName(connectorName.getDomain(), map);
commit:f793fbd
/////////////////////////////////////////////////////////////////////////
1:             bridge.setMbeanObjectName(objectName);
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug("registered: " + bridge + " as: " + objectName);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             ObjectName objectName = bridge.getMbeanObjectName();
1:             if (objectName != null) {
1:                 brokerService.getManagementContext().unregisterMBean(objectName);
1:             }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:63a660a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.BrokerMBeanSuppurt;
/////////////////////////////////////////////////////////////////////////
0:         return BrokerMBeanSuppurt.createNetworkBridgeObjectName(connectorName, bridge.getRemoteAddress());
commit:b2de5f3
/////////////////////////////////////////////////////////////////////////
1: 
0:         StringBuilder objectNameStr = new StringBuilder();
1: 
0:         objectNameStr.append(connectorName.getDomain()).append(":");
0:         objectNameStr.append("type=Broker").append(",");
0:         objectNameStr.append("brokerName=" + JMXSupport.encodeObjectNamePart(map.get("brokerName"))).append(",");
0:         objectNameStr.append("service=NetworkBridge").append(",");
0:         objectNameStr.append("networkConnectorName=" + JMXSupport.encodeObjectNamePart(map.get("networkConnectorName"))).append(",");
0:         objectNameStr.append("networkBridgeName=" + JMXSupport.encodeObjectNamePart(bridge.getRemoteAddress()));
1: 
0:         return new ObjectName(objectNameStr.toString());
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.Map;
1: 
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MBeanNetworkListener.class);
commit:2a2dcd5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1: import org.apache.activemq.broker.jmx.NetworkBridgeView;
0: import org.apache.activemq.broker.jmx.NetworkBridgeViewMBean;
0: import org.apache.activemq.util.JMXSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
0: import java.util.HashMap;
0: import java.util.Map;
1: 
1: public class MBeanNetworkListener implements NetworkBridgeListener {
1: 
0:     private static final Log LOG = LogFactory.getLog(MBeanNetworkListener.class);
1: 
0:     BrokerService brokerService;
0:     ObjectName connectorName;
0:     boolean createdByDuplex = false;
1: 
0:     public MBeanNetworkListener(BrokerService brokerService, ObjectName connectorName) {
1:         this.brokerService = brokerService;
1:         this.connectorName = connectorName;
1:     }
1: 
1:     @Override
1:     public void bridgeFailed() {
1: 
1:     }
1: 
1:     @Override
1:     public void onStart(NetworkBridge bridge) {
1:         if (!brokerService.isUseJmx()) {
1:             return;
1:         }
0:         NetworkBridgeViewMBean view = new NetworkBridgeView(bridge);
0:         ((NetworkBridgeView)view).setCreateByDuplex(createdByDuplex);
1:         try {
1:             ObjectName objectName = createNetworkBridgeObjectName(bridge);
1:             AnnotatedMBean.registerMBean(brokerService.getManagementContext(), view, objectName);
1:         } catch (Throwable e) {
0:             LOG.debug("Network bridge could not be registered in JMX: " + e.getMessage(), e);
1:         }
1:     }
1: 
1:     @Override
1:     public void onStop(NetworkBridge bridge) {
1:         if (!brokerService.isUseJmx()) {
1:             return;
1:         }
1:         try {
1:             ObjectName objectName = createNetworkBridgeObjectName(bridge);
0:             brokerService.getManagementContext().unregisterMBean(objectName);
1:         } catch (Throwable e) {
0:             LOG.debug("Network bridge could not be unregistered in JMX: " + e.getMessage(), e);
1:         }
1:     }
1: 
1: 
1:     protected ObjectName createNetworkBridgeObjectName(NetworkBridge bridge) throws MalformedObjectNameException {
0:         Map<String, String> map = new HashMap<String, String>(connectorName.getKeyPropertyList());
0:         return new ObjectName(connectorName.getDomain() + ":" + "BrokerName=" + JMXSupport.encodeObjectNamePart((String) map.get("BrokerName")) + "," + "Type=NetworkBridge,"
0:                               + "NetworkConnectorName=" + JMXSupport.encodeObjectNamePart((String)map.get("NetworkConnectorName")) + "," + "Name="
0:                               + JMXSupport.encodeObjectNamePart(JMXSupport.encodeObjectNamePart(bridge.getRemoteAddress())));
1:     }
1: 
1:     public void setCreatedByDuplex(boolean createdByDuplex) {
1:         this.createdByDuplex = createdByDuplex;
1:     }
1: }
============================================================================