1:1591960: /**
1:1591960:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1591960:  * contributor license agreements.  See the NOTICE file distributed with
1:1591960:  * this work for additional information regarding copyright ownership.
1:1591960:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1591960:  * (the "License"); you may not use this file except in compliance with
1:1591960:  * the License.  You may obtain a copy of the License at
1:1591960:  *
1:1591960:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1591960:  *
1:1591960:  * Unless required by applicable law or agreed to in writing, software
1:1591960:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1591960:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1591960:  * See the License for the specific language governing permissions and
1:1591960:  * limitations under the License.
1:1591960:  */
1:a38a7c0: package org.apache.activemq.security;
1:a38a7c0: 
1:a38a7c0: import java.util.Set;
1:a38a7c0: 
1:a38a7c0: import org.apache.activemq.broker.ConnectionContext;
1:a38a7c0: import org.apache.activemq.broker.region.Destination;
1:a38a7c0: import org.apache.activemq.broker.region.DestinationFilter;
1:a38a7c0: import org.apache.activemq.broker.region.Subscription;
1:a38a7c0: import org.apache.activemq.command.ActiveMQDestination;
1:a38a7c0: 
1:a38a7c0: /**
1:a38a7c0:  * Authorizes addSubscription calls.
1:a38a7c0:  */
1:a38a7c0: public class AuthorizationDestinationFilter extends DestinationFilter {
1:a38a7c0: 
1:a38a7c0:     private final AuthorizationBroker broker;
1:a38a7c0: 
1:a38a7c0:     public AuthorizationDestinationFilter(Destination destination, AuthorizationBroker broker) {
1:a38a7c0:         super(destination);
1:a38a7c0:         this.broker = broker;
1:a38a7c0:     }
1:a38a7c0: 
1:a38a7c0:     @Override
1:a38a7c0:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:a38a7c0:         // authorize subscription
1:a38a7c0:         final SecurityContext securityContext = broker.checkSecurityContext(context);
1:a38a7c0: 
1:a38a7c0:         final AuthorizationMap authorizationMap = broker.getAuthorizationMap();
1:a38a7c0:         // use the destination being filtered, instead of the destination from the consumerinfo in the subscription
1:a38a7c0:         // since that could be a wildcard destination
1:a38a7c0:         final ActiveMQDestination destination = next.getActiveMQDestination();
1:a38a7c0: 
1:a38a7c0:         Set<?> allowedACLs;
1:a38a7c0:         if (!destination.isTemporary()) {
1:a38a7c0:             allowedACLs = authorizationMap.getReadACLs(destination);
1:a38a7c0:         } else {
1:a38a7c0:             allowedACLs = authorizationMap.getTempDestinationReadACLs();
1:a38a7c0:         }
1:a38a7c0: 
1:a38a7c0:         if (!securityContext.isBrokerContext() && allowedACLs != null && !securityContext.isInOneOf(allowedACLs) ) {
1:a38a7c0:             throw new SecurityException("User " + securityContext.getUserName() + " is not authorized to read from: " + destination);
1:a38a7c0:         }
1:a38a7c0: 
1:a38a7c0:         super.addSubscription(context, sub);
1:a38a7c0:     }
1:a38a7c0: 
1:a38a7c0: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:5f8a3df
/////////////////////////////////////////////////////////////////////////
commit:1591960
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:a38a7c0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.security;
1: 
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
1:  * Authorizes addSubscription calls.
1:  */
1: public class AuthorizationDestinationFilter extends DestinationFilter {
1: 
1:     private final AuthorizationBroker broker;
1: 
1:     public AuthorizationDestinationFilter(Destination destination, AuthorizationBroker broker) {
1:         super(destination);
1:         this.broker = broker;
1:     }
1: 
1:     @Override
1:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:         // authorize subscription
1:         final SecurityContext securityContext = broker.checkSecurityContext(context);
1: 
1:         final AuthorizationMap authorizationMap = broker.getAuthorizationMap();
1:         // use the destination being filtered, instead of the destination from the consumerinfo in the subscription
1:         // since that could be a wildcard destination
1:         final ActiveMQDestination destination = next.getActiveMQDestination();
1: 
1:         Set<?> allowedACLs;
1:         if (!destination.isTemporary()) {
1:             allowedACLs = authorizationMap.getReadACLs(destination);
1:         } else {
1:             allowedACLs = authorizationMap.getTempDestinationReadACLs();
1:         }
1: 
1:         if (!securityContext.isBrokerContext() && allowedACLs != null && !securityContext.isInOneOf(allowedACLs) ) {
1:             throw new SecurityException("User " + securityContext.getUserName() + " is not authorized to read from: " + destination);
1:         }
0:         securityContext.getAuthorizedReadDests().put(destination, destination);
1: 
1:         super.addSubscription(context, sub);
1:     }
1: 
1: }
============================================================================