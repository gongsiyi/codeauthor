1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: 
1:74846bb: package org.apache.activemq.store.kahadb.scheduler;
1:74846bb: 
1:74846bb: import java.io.DataInput;
1:74846bb: import java.io.DataOutput;
1:74846bb: import java.io.IOException;
1:74846bb: import java.util.ArrayList;
1:74846bb: import java.util.Iterator;
1:74846bb: import java.util.List;
1:74846bb: import java.util.Map;
1:74846bb: import java.util.Map.Entry;
1:74846bb: import java.util.UUID;
1:74846bb: 
1:74846bb: import org.apache.activemq.store.kahadb.AbstractKahaDBMetaData;
1:74846bb: import org.apache.activemq.store.kahadb.disk.index.BTreeIndex;
1:74846bb: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller;
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.LocationMarshaller;
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.StringMarshaller;
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:74846bb: 
1:74846bb: /**
1:74846bb:  * The KahaDB MetaData used to house the Index data for the KahaDB implementation
1:74846bb:  * of a JobSchedulerStore.
1:74846bb:  */
1:74846bb: public class JobSchedulerKahaDBMetaData extends AbstractKahaDBMetaData<JobSchedulerKahaDBMetaData> {
1:74846bb: 
1:74846bb:     static final Logger LOG = LoggerFactory.getLogger(JobSchedulerKahaDBMetaData.class);
1:74846bb: 
1:74846bb:     private final JobSchedulerStoreImpl store;
1:74846bb: 
1:74846bb:     private UUID token = JobSchedulerStoreImpl.SCHEDULER_STORE_TOKEN;
1:74846bb:     private int version = JobSchedulerStoreImpl.CURRENT_VERSION;
1:74846bb: 
1:74846bb:     private BTreeIndex<Integer, List<Integer>> removeLocationTracker;
1:74846bb:     private BTreeIndex<Integer, Integer> journalRC;
1:74846bb:     private BTreeIndex<String, JobSchedulerImpl> storedSchedulers;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Creates a new instance of this meta data object with the assigned
1:74846bb:      * parent JobSchedulerStore instance.
1:74846bb:      *
1:74846bb:      * @param store
1:74846bb:      *        the store instance that owns this meta data.
1:74846bb:      */
1:74846bb:     public JobSchedulerKahaDBMetaData(JobSchedulerStoreImpl store) {
1:74846bb:         this.store = store;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the current value of the Scheduler store identification token.
1:74846bb:      */
1:74846bb:     public UUID getToken() {
1:74846bb:         return this.token;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * @return the current value of the version tag for this meta data instance.
1:74846bb:      */
1:74846bb:     public int getVersion() {
1:74846bb:         return this.version;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets the index that contains the location tracking information for Jobs
1:74846bb:      * that have been removed from the index but whose add operation has yet
1:74846bb:      * to be removed from the Journal.
1:74846bb:      *
1:74846bb:      * The Journal log file where a remove command is written cannot be released
1:74846bb:      * until the log file with the original add command has also been released,
1:74846bb:      * otherwise on a log replay the scheduled job could reappear in the scheduler
1:74846bb:      * since its corresponding remove might no longer be present.
1:74846bb:      *
1:74846bb:      * @return the remove command location tracker index.
1:74846bb:      */
1:74846bb:     public BTreeIndex<Integer, List<Integer>> getRemoveLocationTracker() {
1:74846bb:         return this.removeLocationTracker;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets the index used to track the number of reference to a Journal log file.
1:74846bb:      *
1:74846bb:      * A log file in the Journal can only be considered for removal after all the
1:74846bb:      * references to it have been released.
1:74846bb:      *
1:74846bb:      * @return the journal log file reference counter index.
1:74846bb:      */
1:74846bb:     public BTreeIndex<Integer, Integer> getJournalRC() {
1:74846bb:         return this.journalRC;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets the index of JobScheduler instances that have been created and stored
1:74846bb:      * in the JobSchedulerStore instance.
1:74846bb:      *
1:74846bb:      * @return the index of stored JobScheduler instances.
1:74846bb:      */
1:74846bb:     public BTreeIndex<String, JobSchedulerImpl> getJobSchedulers() {
1:74846bb:         return this.storedSchedulers;
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public void initialize(Transaction tx) throws IOException {
1:74846bb:         this.storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(store.getPageFile(), tx.allocate().getPageId());
1:74846bb:         this.journalRC = new BTreeIndex<Integer, Integer>(store.getPageFile(), tx.allocate().getPageId());
1:74846bb:         this.removeLocationTracker = new BTreeIndex<Integer, List<Integer>>(store.getPageFile(), tx.allocate().getPageId());
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public void load(Transaction tx) throws IOException {
1:74846bb:         this.storedSchedulers.setKeyMarshaller(StringMarshaller.INSTANCE);
1:74846bb:         this.storedSchedulers.setValueMarshaller(new JobSchedulerMarshaller(this.store));
1:74846bb:         this.storedSchedulers.load(tx);
1:74846bb:         this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:74846bb:         this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
1:74846bb:         this.journalRC.load(tx);
1:74846bb:         this.removeLocationTracker.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:74846bb:         this.removeLocationTracker.setValueMarshaller(new IntegerListMarshaller());
1:74846bb:         this.removeLocationTracker.load(tx);
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Loads all the stored JobScheduler instances into the provided map.
1:74846bb:      *
1:74846bb:      * @param tx
1:74846bb:      *        the Transaction under which the load operation should be executed.
1:74846bb:      * @param schedulers
1:74846bb:      *        a Map<String, JobSchedulerImpl> into which the loaded schedulers are stored.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while performing the load operation.
1:74846bb:      */
1:74846bb:     public void loadScheduler(Transaction tx, Map<String, JobSchedulerImpl> schedulers) throws IOException {
1:74846bb:         for (Iterator<Entry<String, JobSchedulerImpl>> i = this.storedSchedulers.iterator(tx); i.hasNext();) {
1:74846bb:             Entry<String, JobSchedulerImpl> entry = i.next();
1:74846bb:             entry.getValue().load(tx);
1:74846bb:             schedulers.put(entry.getKey(), entry.getValue());
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public void read(DataInput in) throws IOException {
1:74846bb:         try {
1:74846bb:             long msb = in.readLong();
1:74846bb:             long lsb = in.readLong();
1:74846bb:             this.token = new UUID(msb, lsb);
1:74846bb:         } catch (Exception e) {
1:74846bb:             throw new UnknownStoreVersionException(e);
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (!token.equals(JobSchedulerStoreImpl.SCHEDULER_STORE_TOKEN)) {
1:74846bb:             throw new UnknownStoreVersionException(token.toString());
1:74846bb:         }
1:74846bb:         this.version = in.readInt();
1:74846bb:         if (in.readBoolean()) {
1:74846bb:             setLastUpdateLocation(LocationMarshaller.INSTANCE.readPayload(in));
1:74846bb:         } else {
1:74846bb:             setLastUpdateLocation(null);
1:74846bb:         }
1:74846bb:         this.storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(store.getPageFile(), in.readLong());
1:74846bb:         this.storedSchedulers.setKeyMarshaller(StringMarshaller.INSTANCE);
1:74846bb:         this.storedSchedulers.setValueMarshaller(new JobSchedulerMarshaller(this.store));
1:74846bb:         this.journalRC = new BTreeIndex<Integer, Integer>(store.getPageFile(), in.readLong());
1:74846bb:         this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:74846bb:         this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
1:74846bb:         this.removeLocationTracker = new BTreeIndex<Integer, List<Integer>>(store.getPageFile(), in.readLong());
1:74846bb:         this.removeLocationTracker.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:74846bb:         this.removeLocationTracker.setValueMarshaller(new IntegerListMarshaller());
1:74846bb: 
1:74846bb:         LOG.info("Scheduler Store version {} loaded", this.version);
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public void write(DataOutput out) throws IOException {
1:74846bb:         out.writeLong(this.token.getMostSignificantBits());
1:74846bb:         out.writeLong(this.token.getLeastSignificantBits());
1:74846bb:         out.writeInt(this.version);
1:74846bb:         if (getLastUpdateLocation() != null) {
1:74846bb:             out.writeBoolean(true);
1:74846bb:             LocationMarshaller.INSTANCE.writePayload(getLastUpdateLocation(), out);
1:74846bb:         } else {
1:74846bb:             out.writeBoolean(false);
1:74846bb:         }
1:74846bb:         out.writeLong(this.storedSchedulers.getPageId());
1:74846bb:         out.writeLong(this.journalRC.getPageId());
1:74846bb:         out.writeLong(this.removeLocationTracker.getPageId());
1:74846bb:     }
1:74846bb: 
1:74846bb:     private class JobSchedulerMarshaller extends VariableMarshaller<JobSchedulerImpl> {
1:74846bb:         private final JobSchedulerStoreImpl store;
1:74846bb: 
1:74846bb:         JobSchedulerMarshaller(JobSchedulerStoreImpl store) {
1:74846bb:             this.store = store;
1:74846bb:         }
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public JobSchedulerImpl readPayload(DataInput dataIn) throws IOException {
1:74846bb:             JobSchedulerImpl result = new JobSchedulerImpl(this.store);
1:74846bb:             result.read(dataIn);
1:74846bb:             return result;
1:74846bb:         }
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public void writePayload(JobSchedulerImpl js, DataOutput dataOut) throws IOException {
1:74846bb:             js.write(dataOut);
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     private class IntegerListMarshaller extends VariableMarshaller<List<Integer>> {
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public List<Integer> readPayload(DataInput dataIn) throws IOException {
1:74846bb:             List<Integer> result = new ArrayList<Integer>();
1:74846bb:             int size = dataIn.readInt();
1:74846bb:             for (int i = 0; i < size; i++) {
1:74846bb:                 result.add(IntegerMarshaller.INSTANCE.readPayload(dataIn));
1:74846bb:             }
1:74846bb:             return result;
1:74846bb:         }
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public void writePayload(List<Integer> value, DataOutput dataOut) throws IOException {
1:74846bb:             dataOut.writeInt(value.size());
1:74846bb:             for (Integer integer : value) {
1:74846bb:                 IntegerMarshaller.INSTANCE.writePayload(integer, dataOut);
1:74846bb:             }
1:74846bb:         }
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.kahadb.scheduler;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: import java.util.UUID;
1: 
1: import org.apache.activemq.store.kahadb.AbstractKahaDBMetaData;
1: import org.apache.activemq.store.kahadb.disk.index.BTreeIndex;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller;
1: import org.apache.activemq.store.kahadb.disk.util.LocationMarshaller;
1: import org.apache.activemq.store.kahadb.disk.util.StringMarshaller;
1: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * The KahaDB MetaData used to house the Index data for the KahaDB implementation
1:  * of a JobSchedulerStore.
1:  */
1: public class JobSchedulerKahaDBMetaData extends AbstractKahaDBMetaData<JobSchedulerKahaDBMetaData> {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(JobSchedulerKahaDBMetaData.class);
1: 
1:     private final JobSchedulerStoreImpl store;
1: 
1:     private UUID token = JobSchedulerStoreImpl.SCHEDULER_STORE_TOKEN;
1:     private int version = JobSchedulerStoreImpl.CURRENT_VERSION;
1: 
1:     private BTreeIndex<Integer, List<Integer>> removeLocationTracker;
1:     private BTreeIndex<Integer, Integer> journalRC;
1:     private BTreeIndex<String, JobSchedulerImpl> storedSchedulers;
1: 
1:     /**
1:      * Creates a new instance of this meta data object with the assigned
1:      * parent JobSchedulerStore instance.
1:      *
1:      * @param store
1:      *        the store instance that owns this meta data.
1:      */
1:     public JobSchedulerKahaDBMetaData(JobSchedulerStoreImpl store) {
1:         this.store = store;
1:     }
1: 
1:     /**
1:      * @return the current value of the Scheduler store identification token.
1:      */
1:     public UUID getToken() {
1:         return this.token;
1:     }
1: 
1:     /**
1:      * @return the current value of the version tag for this meta data instance.
1:      */
1:     public int getVersion() {
1:         return this.version;
1:     }
1: 
1:     /**
1:      * Gets the index that contains the location tracking information for Jobs
1:      * that have been removed from the index but whose add operation has yet
1:      * to be removed from the Journal.
1:      *
1:      * The Journal log file where a remove command is written cannot be released
1:      * until the log file with the original add command has also been released,
1:      * otherwise on a log replay the scheduled job could reappear in the scheduler
1:      * since its corresponding remove might no longer be present.
1:      *
1:      * @return the remove command location tracker index.
1:      */
1:     public BTreeIndex<Integer, List<Integer>> getRemoveLocationTracker() {
1:         return this.removeLocationTracker;
1:     }
1: 
1:     /**
1:      * Gets the index used to track the number of reference to a Journal log file.
1:      *
1:      * A log file in the Journal can only be considered for removal after all the
1:      * references to it have been released.
1:      *
1:      * @return the journal log file reference counter index.
1:      */
1:     public BTreeIndex<Integer, Integer> getJournalRC() {
1:         return this.journalRC;
1:     }
1: 
1:     /**
1:      * Gets the index of JobScheduler instances that have been created and stored
1:      * in the JobSchedulerStore instance.
1:      *
1:      * @return the index of stored JobScheduler instances.
1:      */
1:     public BTreeIndex<String, JobSchedulerImpl> getJobSchedulers() {
1:         return this.storedSchedulers;
1:     }
1: 
1:     @Override
1:     public void initialize(Transaction tx) throws IOException {
1:         this.storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(store.getPageFile(), tx.allocate().getPageId());
1:         this.journalRC = new BTreeIndex<Integer, Integer>(store.getPageFile(), tx.allocate().getPageId());
1:         this.removeLocationTracker = new BTreeIndex<Integer, List<Integer>>(store.getPageFile(), tx.allocate().getPageId());
1:     }
1: 
1:     @Override
1:     public void load(Transaction tx) throws IOException {
1:         this.storedSchedulers.setKeyMarshaller(StringMarshaller.INSTANCE);
1:         this.storedSchedulers.setValueMarshaller(new JobSchedulerMarshaller(this.store));
1:         this.storedSchedulers.load(tx);
1:         this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:         this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
1:         this.journalRC.load(tx);
1:         this.removeLocationTracker.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:         this.removeLocationTracker.setValueMarshaller(new IntegerListMarshaller());
1:         this.removeLocationTracker.load(tx);
1:     }
1: 
1:     /**
1:      * Loads all the stored JobScheduler instances into the provided map.
1:      *
1:      * @param tx
1:      *        the Transaction under which the load operation should be executed.
1:      * @param schedulers
1:      *        a Map<String, JobSchedulerImpl> into which the loaded schedulers are stored.
1:      *
1:      * @throws IOException if an error occurs while performing the load operation.
1:      */
1:     public void loadScheduler(Transaction tx, Map<String, JobSchedulerImpl> schedulers) throws IOException {
1:         for (Iterator<Entry<String, JobSchedulerImpl>> i = this.storedSchedulers.iterator(tx); i.hasNext();) {
1:             Entry<String, JobSchedulerImpl> entry = i.next();
1:             entry.getValue().load(tx);
1:             schedulers.put(entry.getKey(), entry.getValue());
1:         }
1:     }
1: 
1:     @Override
1:     public void read(DataInput in) throws IOException {
1:         try {
1:             long msb = in.readLong();
1:             long lsb = in.readLong();
1:             this.token = new UUID(msb, lsb);
1:         } catch (Exception e) {
1:             throw new UnknownStoreVersionException(e);
1:         }
1: 
1:         if (!token.equals(JobSchedulerStoreImpl.SCHEDULER_STORE_TOKEN)) {
1:             throw new UnknownStoreVersionException(token.toString());
1:         }
1:         this.version = in.readInt();
1:         if (in.readBoolean()) {
1:             setLastUpdateLocation(LocationMarshaller.INSTANCE.readPayload(in));
1:         } else {
1:             setLastUpdateLocation(null);
1:         }
1:         this.storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(store.getPageFile(), in.readLong());
1:         this.storedSchedulers.setKeyMarshaller(StringMarshaller.INSTANCE);
1:         this.storedSchedulers.setValueMarshaller(new JobSchedulerMarshaller(this.store));
1:         this.journalRC = new BTreeIndex<Integer, Integer>(store.getPageFile(), in.readLong());
1:         this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:         this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
1:         this.removeLocationTracker = new BTreeIndex<Integer, List<Integer>>(store.getPageFile(), in.readLong());
1:         this.removeLocationTracker.setKeyMarshaller(IntegerMarshaller.INSTANCE);
1:         this.removeLocationTracker.setValueMarshaller(new IntegerListMarshaller());
1: 
1:         LOG.info("Scheduler Store version {} loaded", this.version);
1:     }
1: 
1:     @Override
1:     public void write(DataOutput out) throws IOException {
1:         out.writeLong(this.token.getMostSignificantBits());
1:         out.writeLong(this.token.getLeastSignificantBits());
1:         out.writeInt(this.version);
1:         if (getLastUpdateLocation() != null) {
1:             out.writeBoolean(true);
1:             LocationMarshaller.INSTANCE.writePayload(getLastUpdateLocation(), out);
1:         } else {
1:             out.writeBoolean(false);
1:         }
1:         out.writeLong(this.storedSchedulers.getPageId());
1:         out.writeLong(this.journalRC.getPageId());
1:         out.writeLong(this.removeLocationTracker.getPageId());
1:     }
1: 
1:     private class JobSchedulerMarshaller extends VariableMarshaller<JobSchedulerImpl> {
1:         private final JobSchedulerStoreImpl store;
1: 
1:         JobSchedulerMarshaller(JobSchedulerStoreImpl store) {
1:             this.store = store;
1:         }
1: 
1:         @Override
1:         public JobSchedulerImpl readPayload(DataInput dataIn) throws IOException {
1:             JobSchedulerImpl result = new JobSchedulerImpl(this.store);
1:             result.read(dataIn);
1:             return result;
1:         }
1: 
1:         @Override
1:         public void writePayload(JobSchedulerImpl js, DataOutput dataOut) throws IOException {
1:             js.write(dataOut);
1:         }
1:     }
1: 
1:     private class IntegerListMarshaller extends VariableMarshaller<List<Integer>> {
1: 
1:         @Override
1:         public List<Integer> readPayload(DataInput dataIn) throws IOException {
1:             List<Integer> result = new ArrayList<Integer>();
1:             int size = dataIn.readInt();
1:             for (int i = 0; i < size; i++) {
1:                 result.add(IntegerMarshaller.INSTANCE.readPayload(dataIn));
1:             }
1:             return result;
1:         }
1: 
1:         @Override
1:         public void writePayload(List<Integer> value, DataOutput dataOut) throws IOException {
1:             dataOut.writeInt(value.size());
1:             for (Integer integer : value) {
1:                 IntegerMarshaller.INSTANCE.writePayload(integer, dataOut);
1:             }
1:         }
1:     }
1: }
============================================================================