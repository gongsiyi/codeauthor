1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Keeps track of a message that is flowing through the Broker.  This 
1:d29ca2a:  * object may hold a hard reference to the message or only hold the
1:d29ca2a:  * id of the message if the message has been persisted on in a MessageStore.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public interface MessageReference {
1:d29ca2a:     
1:fc00993:     MessageId getMessageId();
1:fc00993:     Message getMessageHardRef();
1:00879cf:     Message getMessage();
1:fc00993:     boolean isPersistent();
1:d29ca2a:     
1:9a8f6e4:     Message.MessageDestination getRegionDestination();
1:d29ca2a:     
1:fc00993:     int getRedeliveryCounter();
1:fc00993:     void incrementRedeliveryCounter();
1:d29ca2a:     
1:fc00993:     int getReferenceCount();
1:d29ca2a:     
1:fc00993:     int incrementReferenceCount();
1:fc00993:     int decrementReferenceCount();
1:fc00993:     ConsumerId getTargetConsumerId();
1:fc00993:     int getSize();
1:fc00993:     long getExpiration();
1:fc00993:     String getGroupID();
1:fc00993:     int getGroupSequence();
1:d29ca2a:     
1:cc6fec6:     /**
1:cc6fec6:      * Returns true if this message is expired
1:cc6fec6:      */
1:fc00993:     boolean isExpired();
1:b732d3d: 
1:b732d3d:     /**
1:b732d3d:      * Returns true if this message is dropped.
1:b732d3d:      */
1:b732d3d:     boolean isDropped();
1:d29ca2a:     
1:cdc2fd3:     /**
1:cdc2fd3:      * @return true if the message is an advisory
1:cdc2fd3:      */
1:cdc2fd3:     boolean isAdvisory();
1:6cc2c11: 
1:6cc2c11:     boolean canProcessAsExpired();
1:cdc2fd3:     
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:6cc2c11
/////////////////////////////////////////////////////////////////////////
1: 
1:     boolean canProcessAsExpired();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1:     Message.MessageDestination getRegionDestination();
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:b732d3d
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns true if this message is dropped.
1:      */
1:     boolean isDropped();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     MessageId getMessageId();
1:     Message getMessageHardRef();
0:     Message getMessage() throws IOException;
1:     boolean isPersistent();
0:     Destination getRegionDestination();
1:     int getRedeliveryCounter();
1:     void incrementRedeliveryCounter();
1:     int getReferenceCount();
1:     int incrementReferenceCount();
1:     int decrementReferenceCount();
1:     ConsumerId getTargetConsumerId();
1:     int getSize();
1:     long getExpiration();
1:     String getGroupID();
1:     int getGroupSequence();
1:     boolean isExpired();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: 
1: /**
1:  * Keeps track of a message that is flowing through the Broker.  This 
1:  * object may hold a hard reference to the message or only hold the
1:  * id of the message if the message has been persisted on in a MessageStore.
1:  * 
0:  * @version $Revision: 1.15 $
1:  */
1: public interface MessageReference {
1:     
0:     public MessageId getMessageId();
0:     public Message getMessageHardRef();
0:     public Message getMessage() throws IOException;
0:     public boolean isPersistent();
1:     
0:     public Destination getRegionDestination();
1:     
0:     public int getRedeliveryCounter();
0:     public void incrementRedeliveryCounter();
1:     
0:     public int getReferenceCount();
1:     
0:     public int incrementReferenceCount();
0:     public int decrementReferenceCount();
0:     public ConsumerId getTargetConsumerId();
1:     
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Message getMessage();
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if the message is an advisory
1:      */
1:     boolean isAdvisory();
1:     
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
0:     public String getGroupID();
0:     public int getGroupSequence();
commit:8b04e15
/////////////////////////////////////////////////////////////////////////
0:     public int getSize();
author:James Strachan
-------------------------------------------------------------------------------
commit:cc6fec6
/////////////////////////////////////////////////////////////////////////
0:     public long getExpiration();
0:     
1:     /**
1:      * Returns true if this message is expired
1:      */
0:     public boolean isExpired();
============================================================================