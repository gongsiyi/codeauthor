1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
2:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
6:230a86c: 
1:1a88ac6: package org.apache.activemq.transport.tcp;
1:230a86c: 
1:1a88ac6: import java.io.IOException;
1:1a88ac6: import java.net.URI;
1:230a86c: 
1:74a7a8b: import junit.framework.TestCase;
1:74a7a8b: 
1:1a88ac6: public class SslTransportServerTest extends TestCase {
1:230a86c:     private SslTransportServer sslTransportServer;
1:230a86c:     private StubSSLServerSocket sslServerSocket;
1:230a86c: 
1:1a88ac6:     protected void setUp() throws Exception {
3:1a88ac6:     }
1:230a86c: 
1:1a88ac6:     protected void tearDown() throws Exception {
1:1a88ac6:         super.tearDown();
1:1a88ac6:     }
1:230a86c: 
1:230a86c:     private void createAndBindTransportServer(boolean wantClientAuth, boolean needClientAuth, String options) throws IOException {
1:1a88ac6:         sslServerSocket = new StubSSLServerSocket();
1:230a86c: 
1:1a88ac6:         StubSSLSocketFactory socketFactory = new StubSSLSocketFactory(sslServerSocket);
1:230a86c: 
1:1a88ac6:         try {
1:230a86c:             sslTransportServer = new SslTransportServer(null, new URI("ssl://localhost:61616?" + options), socketFactory);
1:1a88ac6:         } catch (Exception e) {
1:1a88ac6:             fail("Unable to create SslTransportServer.");
1:1a88ac6:         }
1:230a86c: 
1:1a88ac6:         sslTransportServer.setWantClientAuth(wantClientAuth);
1:1a88ac6:         sslTransportServer.setNeedClientAuth(needClientAuth);
1:230a86c: 
1:1a88ac6:         sslTransportServer.bind();
1:1a88ac6:     }
1:230a86c: 
1:1a88ac6:     public void testWantAndNeedClientAuthSetters() throws IOException {
1:1a88ac6:         for (int i = 0; i < 4; ++i) {
1:1da24aa:             String options = "";
1:1da24aa:             singleTest(i, options);
1:1da24aa:             }
1:230a86c:     }
1:230a86c: 
1:1a88ac6:     public void testWantAndNeedAuthReflection() throws IOException {
1:1a88ac6:         for (int i = 0; i < 4; ++i) {
1:1da24aa:             String options = "wantClientAuth=" + (getWantClientAuth(i) ? "true" : "false") +
1:1da24aa:                 "&needClientAuth=" + (getNeedClientAuth(i) ? "true" : "false");
1:1da24aa:             singleTest(i, options);
1:1a88ac6:         }
1:1a88ac6:     }
1:1da24aa: 
1:1da24aa:     private void singleTest(int i, String options) throws IOException {
1:1da24aa:         final boolean wantClientAuth = getWantClientAuth(i);
1:1da24aa:         final boolean needClientAuth = getNeedClientAuth(i);
1:1da24aa: 
1:1da24aa:         final int expectedWantStatus = (needClientAuth? StubSSLServerSocket.UNTOUCHED: wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.UNTOUCHED);
1:1da24aa:         final int expectedNeedStatus = (needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.UNTOUCHED );
1:1da24aa: 
1:1da24aa: 
1:1da24aa:         createAndBindTransportServer(wantClientAuth, needClientAuth, options);
1:1da24aa: 
1:1da24aa:         assertEquals("Created ServerSocket did not have correct wantClientAuth status. wantClientAuth: " + wantClientAuth + ", needClientAuth: " + needClientAuth,
1:1da24aa:             expectedWantStatus, sslServerSocket.getWantClientAuthStatus());
1:1da24aa: 
1:1da24aa:         assertEquals("Created ServerSocket did not have correct needClientAuth status. wantClientAuth: " + wantClientAuth + ", needClientAuth: " + needClientAuth,
1:1da24aa:             expectedNeedStatus, sslServerSocket.getNeedClientAuthStatus());
1:1da24aa:     }
1:1da24aa: 
1:1da24aa:     private boolean getNeedClientAuth(int i) {
1:1da24aa:         return ((i & 0x2) == 0x2);
1:1da24aa:     }
1:1da24aa: 
1:1da24aa:     private boolean getWantClientAuth(int i) {
1:1da24aa:         return ((i & 0x1) == 0x1);
1:1da24aa:     }
1:1a88ac6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:David Jencks
-------------------------------------------------------------------------------
commit:1da24aa
/////////////////////////////////////////////////////////////////////////
1:             String options = "";
1:             singleTest(i, options);
1:             }
1:             String options = "wantClientAuth=" + (getWantClientAuth(i) ? "true" : "false") +
1:                 "&needClientAuth=" + (getNeedClientAuth(i) ? "true" : "false");
1:             singleTest(i, options);
1: 
1:     private void singleTest(int i, String options) throws IOException {
1:         final boolean wantClientAuth = getWantClientAuth(i);
1:         final boolean needClientAuth = getNeedClientAuth(i);
1: 
1:         final int expectedWantStatus = (needClientAuth? StubSSLServerSocket.UNTOUCHED: wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.UNTOUCHED);
1:         final int expectedNeedStatus = (needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.UNTOUCHED );
1: 
1: 
1:         createAndBindTransportServer(wantClientAuth, needClientAuth, options);
1: 
1:         assertEquals("Created ServerSocket did not have correct wantClientAuth status. wantClientAuth: " + wantClientAuth + ", needClientAuth: " + needClientAuth,
1:             expectedWantStatus, sslServerSocket.getWantClientAuthStatus());
1: 
1:         assertEquals("Created ServerSocket did not have correct needClientAuth status. wantClientAuth: " + wantClientAuth + ", needClientAuth: " + needClientAuth,
1:             expectedNeedStatus, sslServerSocket.getNeedClientAuthStatus());
1:     }
1: 
1:     private boolean getNeedClientAuth(int i) {
1:         return ((i & 0x2) == 0x2);
1:     }
1: 
1:     private boolean getWantClientAuth(int i) {
1:         return ((i & 0x1) == 0x1);
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:             final boolean wantClientAuth = (i & 0x1) == 1;
0:             final boolean needClientAuth = (i & 0x2) == 1;
0:             final int expectedWantStatus = wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
0:             final int expectedNeedStatus = needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
/////////////////////////////////////////////////////////////////////////
0:             final boolean wantClientAuth = (i & 0x1) == 1;
0:             final boolean needClientAuth = (i & 0x2) == 1;
0:             final int expectedWantStatus = wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
0:             final int expectedNeedStatus = needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     private SslTransportServer sslTransportServer;
1:     private StubSSLServerSocket sslServerSocket;
1: 
1: 
1:     private void createAndBindTransportServer(boolean wantClientAuth, boolean needClientAuth, String options) throws IOException {
1: 
1: 
1:             sslTransportServer = new SslTransportServer(null, new URI("ssl://localhost:61616?" + options), socketFactory);
1: 
1: 
1: 
1: 
0:             final int expectedWantStatus = (wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE);
0:             final int expectedNeedStatus = (needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE);
1: 
1: 
0:             assertEquals("Created ServerSocket did not have correct wantClientAuth status.", sslServerSocket.getWantClientAuthStatus(), expectedWantStatus);
1: 
0:             assertEquals("Created ServerSocket did not have correct needClientAuth status.", sslServerSocket.getNeedClientAuthStatus(), expectedNeedStatus);
1:         }
1: 
1: 
0:             final int expectedWantStatus = (wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE);
0:             final int expectedNeedStatus = (needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE);
1: 
0:             String options = "wantClientAuth=" + (wantClientAuth ? "true" : "false") + "&needClientAuth=" + (needClientAuth ? "true" : "false");
1: 
1: 
0:             assertEquals("Created ServerSocket did not have correct wantClientAuth status.", sslServerSocket.getWantClientAuthStatus(), expectedWantStatus);
1: 
0:             assertEquals("Created ServerSocket did not have correct needClientAuth status.", sslServerSocket.getNeedClientAuthStatus(), expectedNeedStatus);
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.activemq.transport.tcp;
0: 
0: import junit.framework.TestCase;
0: 
1: import java.io.IOException;
1: import java.net.URI;
0: 
1: public class SslTransportServerTest extends TestCase {
0:     private SslTransportServer sslTransportServer = null;
0:     private StubSSLServerSocket sslServerSocket = null;
0:     
1:     protected void setUp() throws Exception {
1:     }
0: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
0:     
0:     private void createAndBindTransportServer(boolean wantClientAuth, boolean needClientAuth, String options)
0:             throws IOException {
1:         sslServerSocket = new StubSSLServerSocket();
0:         
1:         StubSSLSocketFactory socketFactory = new StubSSLSocketFactory(sslServerSocket);
0:         
1:         try {
0:             sslTransportServer =
0:                 new SslTransportServer(null, new URI("ssl://localhost:61616?" + options), socketFactory);
1:         } catch (Exception e) {
1:             fail("Unable to create SslTransportServer.");
1:         }
0:         
1:         sslTransportServer.setWantClientAuth(wantClientAuth);
1:         sslTransportServer.setNeedClientAuth(needClientAuth);
0:         
1:         sslTransportServer.bind();
1:     }
0:     
1:     public void testWantAndNeedClientAuthSetters() throws IOException {
1:         for (int i = 0; i < 4; ++i) {
0:             final boolean wantClientAuth = ((i & 0x1) == 1);
0:             final boolean needClientAuth = ((i & 0x2) == 1);
0:             
0:             final int expectedWantStatus = (wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE );
0:             final int expectedNeedStatus = (needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE );
0:             
0:             createAndBindTransportServer(wantClientAuth, needClientAuth, "");
0:             
0:             assertEquals("Created ServerSocket did not have correct wantClientAuth status.",
0:                 sslServerSocket.getWantClientAuthStatus(), expectedWantStatus);
0:             
0:             assertEquals("Created ServerSocket did not have correct needClientAuth status.",
0:                 sslServerSocket.getNeedClientAuthStatus(), expectedNeedStatus);
1:             }
1:     }
0:     
1:     public void testWantAndNeedAuthReflection() throws IOException {
1:         for (int i = 0; i < 4; ++i) {
0:             final boolean wantClientAuth = ((i & 0x1) == 1);
0:             final boolean needClientAuth = ((i & 0x2) == 1);
0:             
0:             final int expectedWantStatus = (wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE );
0:             final int expectedNeedStatus = (needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE );
0:             
0:             String options = "wantClientAuth=" + (wantClientAuth ? "true" : "false") +
0:                 "&needClientAuth=" + (needClientAuth ? "true" : "false");
0:             
0:             createAndBindTransportServer(wantClientAuth, needClientAuth, options);
0:             
0:             assertEquals("Created ServerSocket did not have correct wantClientAuth status.",
0:                 sslServerSocket.getWantClientAuthStatus(), expectedWantStatus);
0:             
0:             assertEquals("Created ServerSocket did not have correct needClientAuth status.",
0:                 sslServerSocket.getNeedClientAuthStatus(), expectedNeedStatus);
1:         }
1:     }
1: }
============================================================================