1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.env;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.shiro.authz.ActiveMQPermissionResolver;
1:f9451e5: import org.apache.activemq.shiro.mgt.DefaultActiveMqSecurityManager;
1:f9451e5: import org.apache.shiro.ShiroException;
1:f9451e5: import org.apache.shiro.config.ConfigurationException;
1:f9451e5: import org.apache.shiro.config.Ini;
1:f9451e5: import org.apache.shiro.config.IniSecurityManagerFactory;
1:f9451e5: import org.apache.shiro.env.DefaultEnvironment;
1:f9451e5: import org.apache.shiro.io.ResourceUtils;
1:f9451e5: import org.apache.shiro.mgt.SecurityManager;
1:f9451e5: import org.apache.shiro.realm.Realm;
1:f9451e5: import org.apache.shiro.realm.text.IniRealm;
1:f9451e5: import org.apache.shiro.util.Initializable;
1:f9451e5: import org.apache.shiro.util.LifecycleUtils;
1:f9451e5: 
1:f9451e5: import java.util.Map;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class IniEnvironment extends DefaultEnvironment implements Initializable {
1:f9451e5: 
1:f9451e5:     private Ini ini;
1:f9451e5:     private String iniConfig;
1:f9451e5:     private String iniResourePath;
1:f9451e5: 
1:f9451e5:     public IniEnvironment() {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public IniEnvironment(Ini ini) {
1:f9451e5:         this.ini = ini;
1:f9451e5:         init();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public IniEnvironment(String iniConfig) {
1:f9451e5:         Ini ini = new Ini();
1:f9451e5:         ini.load(iniConfig);
1:f9451e5:         this.ini = ini;
1:f9451e5:         init();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setIni(Ini ini) {
1:f9451e5:         this.ini = ini;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setIniConfig(String config) {
1:f9451e5:         this.iniConfig = config;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setIniResourcePath(String iniResourcePath) {
1:f9451e5:         this.iniResourePath = iniResourcePath;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void init() throws ShiroException {
1:f9451e5:         //this.environment and this.securityManager are null.  Try Ini config:
1:f9451e5:         Ini ini = this.ini;
1:f9451e5:         if (ini != null) {
1:f9451e5:             apply(ini);
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         if (this.objects.isEmpty() && this.iniConfig != null) {
1:f9451e5:             ini = new Ini();
1:f9451e5:             ini.load(this.iniConfig);
1:f9451e5:             apply(ini);
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         if (this.objects.isEmpty() && this.iniResourePath != null) {
1:f9451e5:             ini = new Ini();
1:f9451e5:             ini.loadFromPath(this.iniResourePath);
1:f9451e5:             apply(ini);
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         if (this.objects.isEmpty()) {
1:f9451e5:             if (ResourceUtils.resourceExists("classpath:shiro.ini")) {
1:f9451e5:                 ini = new Ini();
1:f9451e5:                 ini.loadFromPath("classpath:shiro.ini");
1:f9451e5:                 apply(ini);
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         if (this.objects.isEmpty()) {
1:f9451e5:             String msg = "Configuration error.  All heuristics for acquiring Shiro INI config " +
1:f9451e5:                     "have been exhausted.  Ensure you configure one of the following properties: " +
1:f9451e5:                     "1) ini 2) iniConfig 3) iniResourcePath and the Ini sections are not empty.";
1:f9451e5:             throw new ConfigurationException(msg);
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         LifecycleUtils.init(this.objects.values());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void apply(Ini ini) {
1:f9451e5:         if (ini != null && !ini.isEmpty()) {
1:f9451e5:             Map<String, ?> objects = createObjects(ini);
1:f9451e5:             this.ini = ini;
1:f9451e5:             this.objects.clear();
1:f9451e5:             this.objects.putAll(objects);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     private Map<String, ?> createObjects(Ini ini) {
1:f9451e5:         IniSecurityManagerFactory factory = new IniSecurityManagerFactory(ini) {
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             protected SecurityManager createDefaultInstance() {
1:f9451e5:                 return new DefaultActiveMqSecurityManager();
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             protected Realm createRealm(Ini ini) {
1:f9451e5:                 IniRealm realm = (IniRealm)super.createRealm(ini);
1:f9451e5:                 realm.setPermissionResolver(new ActiveMQPermissionResolver());
1:f9451e5:                 return realm;
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         factory.getInstance(); //trigger beans creation
1:f9451e5:         return factory.getBeans();
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.env;
1: 
1: import org.apache.activemq.shiro.authz.ActiveMQPermissionResolver;
1: import org.apache.activemq.shiro.mgt.DefaultActiveMqSecurityManager;
1: import org.apache.shiro.ShiroException;
1: import org.apache.shiro.config.ConfigurationException;
1: import org.apache.shiro.config.Ini;
1: import org.apache.shiro.config.IniSecurityManagerFactory;
1: import org.apache.shiro.env.DefaultEnvironment;
1: import org.apache.shiro.io.ResourceUtils;
1: import org.apache.shiro.mgt.SecurityManager;
1: import org.apache.shiro.realm.Realm;
1: import org.apache.shiro.realm.text.IniRealm;
1: import org.apache.shiro.util.Initializable;
1: import org.apache.shiro.util.LifecycleUtils;
1: 
1: import java.util.Map;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class IniEnvironment extends DefaultEnvironment implements Initializable {
1: 
1:     private Ini ini;
1:     private String iniConfig;
1:     private String iniResourePath;
1: 
1:     public IniEnvironment() {
1:     }
1: 
1:     public IniEnvironment(Ini ini) {
1:         this.ini = ini;
1:         init();
1:     }
1: 
1:     public IniEnvironment(String iniConfig) {
1:         Ini ini = new Ini();
1:         ini.load(iniConfig);
1:         this.ini = ini;
1:         init();
1:     }
1: 
1:     public void setIni(Ini ini) {
1:         this.ini = ini;
1:     }
1: 
1:     public void setIniConfig(String config) {
1:         this.iniConfig = config;
1:     }
1: 
1:     public void setIniResourcePath(String iniResourcePath) {
1:         this.iniResourePath = iniResourcePath;
1:     }
1: 
1:     @Override
1:     public void init() throws ShiroException {
1:         //this.environment and this.securityManager are null.  Try Ini config:
1:         Ini ini = this.ini;
1:         if (ini != null) {
1:             apply(ini);
1:         }
1: 
1:         if (this.objects.isEmpty() && this.iniConfig != null) {
1:             ini = new Ini();
1:             ini.load(this.iniConfig);
1:             apply(ini);
1:         }
1: 
1:         if (this.objects.isEmpty() && this.iniResourePath != null) {
1:             ini = new Ini();
1:             ini.loadFromPath(this.iniResourePath);
1:             apply(ini);
1:         }
1: 
1:         if (this.objects.isEmpty()) {
1:             if (ResourceUtils.resourceExists("classpath:shiro.ini")) {
1:                 ini = new Ini();
1:                 ini.loadFromPath("classpath:shiro.ini");
1:                 apply(ini);
1:             }
1:         }
1: 
1:         if (this.objects.isEmpty()) {
1:             String msg = "Configuration error.  All heuristics for acquiring Shiro INI config " +
1:                     "have been exhausted.  Ensure you configure one of the following properties: " +
1:                     "1) ini 2) iniConfig 3) iniResourcePath and the Ini sections are not empty.";
1:             throw new ConfigurationException(msg);
1:         }
1: 
1:         LifecycleUtils.init(this.objects.values());
1:     }
1: 
1:     protected void apply(Ini ini) {
1:         if (ini != null && !ini.isEmpty()) {
1:             Map<String, ?> objects = createObjects(ini);
1:             this.ini = ini;
1:             this.objects.clear();
1:             this.objects.putAll(objects);
1:         }
1:     }
1: 
1:     private Map<String, ?> createObjects(Ini ini) {
1:         IniSecurityManagerFactory factory = new IniSecurityManagerFactory(ini) {
1: 
1:             @Override
1:             protected SecurityManager createDefaultInstance() {
1:                 return new DefaultActiveMqSecurityManager();
1:             }
1: 
1:             @Override
1:             protected Realm createRealm(Ini ini) {
1:                 IniRealm realm = (IniRealm)super.createRealm(ini);
1:                 realm.setPermissionResolver(new ActiveMQPermissionResolver());
1:                 return realm;
1:             }
1:         };
1:         factory.getInstance(); //trigger beans creation
1:         return factory.getBeans();
1:     }
1: }
============================================================================