1:c9414c4: /**
1:c9414c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c9414c4:  * contributor license agreements.  See the NOTICE file distributed with
1:c9414c4:  * this work for additional information regarding copyright ownership.
1:c9414c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c9414c4:  * (the "License"); you may not use this file except in compliance with
1:c9414c4:  * the License.  You may obtain a copy of the License at
1:c9414c4:  *
1:c9414c4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c9414c4:  *
1:c9414c4:  * Unless required by applicable law or agreed to in writing, software
1:c9414c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c9414c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c9414c4:  * See the License for the specific language governing permissions and
1:c9414c4:  * limitations under the License.
1:c9414c4:  */
1:c9414c4: package org.apache.activemq.store.jdbc.adapter;
3:c9414c4: 
1:c9414c4: import java.sql.Blob;
1:c9414c4: import java.sql.ResultSet;
1:c9414c4: import java.sql.SQLException;
1:c9414c4: import org.apache.activemq.store.jdbc.Statements;
1:c9414c4: 
1:c9414c4: /**
1:c9414c4:  * Implements all the default JDBC operations that are used
1:c9414c4:  * by the JDBCPersistenceAdapter.
1:c9414c4:  * <p/>
1:c9414c4:  * Subclassing is encouraged to override the default
1:c9414c4:  * implementation of methods to account for differences
1:c9414c4:  * in JDBC Driver implementations.
1:c9414c4:  * <p/>
1:c9414c4:  * The JDBCAdapter inserts and extracts BLOB data using the
1:c9414c4:  * getBytes()/setBytes() operations.
1:c9414c4:  * <p/>
1:c9414c4:  * The databases/JDBC drivers that use this adapter are:
1:c9414c4:  * <ul>
1:c9414c4:  * <li></li>
1:c9414c4:  * </ul>
1:c9414c4:  *
1:c9414c4:  * @org.apache.xbean.XBean element="oracleBlobJDBCAdapter"
1:c9414c4:  *
1:c9414c4:  * 
1:c9414c4:  */
1:c9414c4: public class OracleBlobJDBCAdapter extends BlobJDBCAdapter {
1:c9414c4: 
1:c9414c4:     @Override
1:c9414c4:     public void setStatements(Statements statements) {
1:c9414c4:         statements.setLongDataType("NUMBER");
1:c9414c4:         statements.setSequenceDataType("NUMBER");
1:c9414c4: 
1:c9414c4:         super.setStatements(statements);
1:c9414c4:     }
1:c9414c4: 
1:c9414c4:     @Override
1:c9414c4:     protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException {
1:c9414c4:         // Get as a BLOB
1:c9414c4:         Blob aBlob = rs.getBlob(index);
1:c9414c4:         if (aBlob == null) {
1:c9414c4:             return null;
1:c9414c4:         }
1:c9414c4:         return aBlob.getBytes(1, (int) aBlob.length());
1:c9414c4:     }
1:c9414c4: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Gary Tully
-------------------------------------------------------------------------------
commit:64f3492
/////////////////////////////////////////////////////////////////////////
commit:c9414c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc.adapter;
1: 
1: import java.sql.Blob;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import org.apache.activemq.store.jdbc.Statements;
1: 
1: /**
1:  * Implements all the default JDBC operations that are used
1:  * by the JDBCPersistenceAdapter.
1:  * <p/>
1:  * Subclassing is encouraged to override the default
1:  * implementation of methods to account for differences
1:  * in JDBC Driver implementations.
1:  * <p/>
1:  * The JDBCAdapter inserts and extracts BLOB data using the
1:  * getBytes()/setBytes() operations.
1:  * <p/>
1:  * The databases/JDBC drivers that use this adapter are:
1:  * <ul>
1:  * <li></li>
1:  * </ul>
1:  *
1:  * @org.apache.xbean.XBean element="oracleBlobJDBCAdapter"
1:  *
1:  * 
1:  */
1: public class OracleBlobJDBCAdapter extends BlobJDBCAdapter {
1: 
1:     @Override
1:     public void setStatements(Statements statements) {
1:         statements.setLongDataType("NUMBER");
1:         statements.setSequenceDataType("NUMBER");
1: 
0:         String addMessageStatement = "INSERT INTO "
0:             + statements.getFullMessageTableName()
0:             + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, empty_blob())";
0:         statements.setAddMessageStatement(addMessageStatement);
1: 
0:         String findMessageByIdStatement = "SELECT MSG FROM " +
0:         	statements.getFullMessageTableName() + " WHERE ID=? FOR UPDATE";
0:         statements.setFindMessageByIdStatement(findMessageByIdStatement);
1: 
1:         super.setStatements(statements);
1:     }
1: 
1:     @Override
1:     protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException {
1:         // Get as a BLOB
1:         Blob aBlob = rs.getBlob(index);
1:         if (aBlob == null) {
1:             return null;
1:         }
1:         return aBlob.getBytes(1, (int) aBlob.length());
1:     }
1: }
============================================================================