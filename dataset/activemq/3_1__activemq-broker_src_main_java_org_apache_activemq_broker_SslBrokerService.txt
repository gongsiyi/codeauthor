1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
7:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
6:1a88ac6: 
1:1a88ac6: package org.apache.activemq.broker;
1:1a88ac6: 
1:1a88ac6: import java.io.IOException;
1:1a88ac6: import java.net.URI;
1:1a88ac6: import java.security.KeyManagementException;
1:1a88ac6: import java.security.SecureRandom;
1:1a88ac6: 
1:1a88ac6: import javax.net.ssl.KeyManager;
1:1a88ac6: import javax.net.ssl.TrustManager;
1:1a88ac6: 
1:9a8f6e4: import org.apache.activemq.transport.TransportFactorySupport;
1:74a7a8b: import org.apache.activemq.transport.TransportServer;
1:74a7a8b: import org.apache.activemq.transport.tcp.SslTransportFactory;
1:74a7a8b: 
1:1a88ac6: /**
1:230a86c:  * A BrokerService that allows access to the key and trust managers used by SSL
1:230a86c:  * connections. There is no reason to use this class unless SSL is being used
1:230a86c:  * AND the key and trust managers need to be specified from within code. In
1:230a86c:  * fact, if the URI passed to this class does not have an "ssl" scheme, this
1:230a86c:  * class will pass all work on to its superclass.
1:1a88ac6:  * 
1:1a88ac6:  * @author sepandm@gmail.com (Sepand)
1:1a88ac6:  */
1:1a88ac6: public class SslBrokerService extends BrokerService {
1:1a88ac6:     /**
1:230a86c:      * Adds a new transport connector for the given bind address. If the
1:230a86c:      * transport created uses SSL, it will also use the key and trust managers
1:230a86c:      * provided. Otherwise, this is the same as calling addConnector.
1:230a86c:      * 
1:1a88ac6:      * @param bindAddress The address to bind to.
1:1a88ac6:      * @param km The KeyManager to be used.
1:1a88ac6:      * @param tm The trustmanager to be used.
1:1a88ac6:      * @param random The source of randomness for the generator.
1:1a88ac6:      * @return the newly connected and added transport connector.
1:1a88ac6:      * @throws Exception
1:1a88ac6:      */
1:230a86c: 
1:230a86c:     public TransportConnector addSslConnector(String bindAddress, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws Exception {
1:230a86c:         return addSslConnector(new URI(bindAddress), km, tm, random);
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:230a86c:      * Adds a new transport connector for the given bind address. If the
1:230a86c:      * transport created uses SSL, it will also use the key and trust managers
1:230a86c:      * provided. Otherwise, this is the same as calling addConnector.
1:1a88ac6:      * 
1:1a88ac6:      * @param bindAddress The URI to bind to.
1:1a88ac6:      * @param km The KeyManager to be used.
1:1a88ac6:      * @param tm The trustmanager to be used.
1:1a88ac6:      * @param random The source of randomness for the generator.
1:1a88ac6:      * @return the newly created and added transport connector.
1:1a88ac6:      * @throws Exception
1:1a88ac6:      */
1:230a86c:     public TransportConnector addSslConnector(URI bindAddress, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws Exception {
1:1a88ac6:         return addConnector(createSslTransportServer(bindAddress, km, tm, random));
1:1a88ac6:     }
1:230a86c: 
1:1a88ac6:     /**
1:230a86c:      * Creates a TransportServer that uses the given key and trust managers. The
1:230a86c:      * last three parameters will be eventually passed to SSLContext.init.
1:1a88ac6:      * 
1:1a88ac6:      * @param brokerURI The URI to bind to.
1:1a88ac6:      * @param km The KeyManager to be used.
1:1a88ac6:      * @param tm The trustmanager to be used.
1:1a88ac6:      * @param random The source of randomness for the generator.
1:1a88ac6:      * @return A new TransportServer that uses the given managers.
1:1a88ac6:      * @throws IOException If cannot handle URI.
1:1a88ac6:      * @throws KeyManagementException Passed on from SSL.
1:1a88ac6:      */
1:230a86c:     protected TransportServer createSslTransportServer(URI brokerURI, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws IOException, KeyManagementException {
1:230a86c: 
1:1a88ac6:         if (brokerURI.getScheme().equals("ssl")) {
1:1a88ac6:             // If given an SSL URI, use an SSL TransportFactory and configure
1:230a86c:             // it to use the given key and trust managers.
1:1a88ac6:             SslTransportFactory transportFactory = new SslTransportFactory();
1:7d87837:             
1:7d87837:             SslContext ctx = new SslContext(km, tm, random);
1:7d87837:             SslContext.setCurrentSslContext(ctx);
1:7d87837:             try {
1:7d87837:                 return transportFactory.doBind(brokerURI);
1:7d87837:             } finally {
1:7d87837:                 SslContext.setCurrentSslContext(null);
1:7d87837:             }
1:7d87837:             
1:1a88ac6:         } else {
1:1a88ac6:             // Else, business as usual.
1:9a8f6e4:             return TransportFactorySupport.bind(this, brokerURI);
1:1a88ac6:         }
1:1a88ac6:     }
1:1a88ac6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.TransportFactorySupport;
/////////////////////////////////////////////////////////////////////////
1:             return TransportFactorySupport.bind(this, brokerURI);
commit:7d87837
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:             
1:             SslContext ctx = new SslContext(km, tm, random);
1:             SslContext.setCurrentSslContext(ctx);
1:             try {
1:                 return transportFactory.doBind(brokerURI);
1:             } finally {
1:                 SslContext.setCurrentSslContext(null);
1:             }
1:             
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
0:             return transportFactory.doBind(brokerURI);
commit:3910056
/////////////////////////////////////////////////////////////////////////
0:             return TransportFactory.bind(this, brokerURI);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A BrokerService that allows access to the key and trust managers used by SSL
1:  * connections. There is no reason to use this class unless SSL is being used
1:  * AND the key and trust managers need to be specified from within code. In
1:  * fact, if the URI passed to this class does not have an "ssl" scheme, this
1:  * class will pass all work on to its superclass.
1:      * Adds a new transport connector for the given bind address. If the
1:      * transport created uses SSL, it will also use the key and trust managers
1:      * provided. Otherwise, this is the same as calling addConnector.
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public TransportConnector addSslConnector(String bindAddress, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws Exception {
1:         return addSslConnector(new URI(bindAddress), km, tm, random);
1:      * Adds a new transport connector for the given bind address. If the
1:      * transport created uses SSL, it will also use the key and trust managers
1:      * provided. Otherwise, this is the same as calling addConnector.
/////////////////////////////////////////////////////////////////////////
1:     public TransportConnector addSslConnector(URI bindAddress, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws Exception {
1: 
1:      * Creates a TransportServer that uses the given key and trust managers. The
1:      * last three parameters will be eventually passed to SSLContext.init.
/////////////////////////////////////////////////////////////////////////
1:     protected TransportServer createSslTransportServer(URI brokerURI, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws IOException, KeyManagementException {
1:             // it to use the given key and trust managers.
1: 
0:             return transportFactory.doBind(getBrokerName(), brokerURI);
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker;
1: 
0: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.TransportServer;
0: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.security.KeyManagementException;
1: import java.security.SecureRandom;
1: 
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.TrustManager;
1: 
1: /**
0:  * A BrokerService that allows access to the key and trust managers used by SSL connections.
1:  * 
0:  * There is no reason to use this class unless SSL is being used AND the key and trust managers need to be specified
0:  *      from within code. In fact, if the URI passed to this class does not have an "ssl" scheme, this class will
0:  *      pass all work on to its superclass.
1:  * 
1:  * @author sepandm@gmail.com (Sepand)
1:  */
1: public class SslBrokerService extends BrokerService {
1:     /**
0:      * Adds a new transport connector for the given bind address.
1:      *
0:      * If the transport created uses SSL, it will also use the key and trust
0:      *      managers provided. Otherwise, this is the same as calling
0:      *      addConnector.
1:      *
1:      * @param bindAddress The address to bind to.
1:      * @param km The KeyManager to be used.
1:      * @param tm The trustmanager to be used.
1:      * @param random The source of randomness for the generator.
1:      * @return the newly connected and added transport connector.
1:      * @throws Exception
1:      */
1:     
0:     public TransportConnector addSslConnector(
0:             String bindAddress,
0:             KeyManager[] km,
0:             TrustManager[] tm,
0:             SecureRandom random) throws Exception {
0:         return addSslConnector( new URI(bindAddress), km, tm, random );
1:     }
1: 
1:     /**
0:      * Adds a new transport connector for the given bind address.
1:      * 
0:      * If the transport created uses SSL, it will also use the key and trust
0:      *      managers provided. Otherwise, this is the same as calling
0:      *      addConnector.
1:      *      
1:      * @param bindAddress The URI to bind to.
1:      * @param km The KeyManager to be used.
1:      * @param tm The trustmanager to be used.
1:      * @param random The source of randomness for the generator.
1:      * @return the newly created and added transport connector.
1:      * @throws Exception
1:      */
0:     public TransportConnector addSslConnector(
0:             URI bindAddress,
0:             KeyManager[] km,
0:             TrustManager[] tm,
0:             SecureRandom random) throws Exception {
1:         return addConnector(createSslTransportServer(bindAddress, km, tm, random));
1:     }
1:     
1:     /**
0:      * Creates a TransportServer that uses the given key and trust managers.
1:      * 
0:      * The last three parameters will be eventually passed to SSLContext.init.
1:      * 
1:      * @param brokerURI The URI to bind to.
1:      * @param km The KeyManager to be used.
1:      * @param tm The trustmanager to be used.
1:      * @param random The source of randomness for the generator.
1:      * @return A new TransportServer that uses the given managers.
1:      * @throws IOException If cannot handle URI.
1:      * @throws KeyManagementException Passed on from SSL.
1:      */
0:     protected TransportServer createSslTransportServer(
0:             URI brokerURI,
0:             KeyManager[] km,
0:             TrustManager[] tm,
0:             SecureRandom random) throws IOException, KeyManagementException {
1: 
1:         if (brokerURI.getScheme().equals("ssl")) {
1:             // If given an SSL URI, use an SSL TransportFactory and configure
0:             //      it to use the given key and trust managers.
1:             SslTransportFactory transportFactory = new SslTransportFactory();
0:             transportFactory.setKeyAndTrustManagers(km, tm, random);
1:             
0:             return transportFactory.doBind(getBrokerName(),brokerURI);
1:         } else {
1:             // Else, business as usual.
0:             return TransportFactory.bind(getBrokerName(), brokerURI);
1:         }
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:e10f75c
/////////////////////////////////////////////////////////////////////////
============================================================================