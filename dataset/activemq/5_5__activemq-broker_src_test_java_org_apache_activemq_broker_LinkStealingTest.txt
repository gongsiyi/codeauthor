1:6cf8bed: /*
1:497fbfc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:497fbfc:  * contributor license agreements.  See the NOTICE file distributed with
1:497fbfc:  * this work for additional information regarding copyright ownership.
1:497fbfc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:497fbfc:  * (the "License"); you may not use this file except in compliance with
1:497fbfc:  * the License.  You may obtain a copy of the License at
1:497fbfc:  *
1:497fbfc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:497fbfc:  *
1:497fbfc:  * Unless required by applicable law or agreed to in writing, software
1:497fbfc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:497fbfc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:497fbfc:  * See the License for the specific language governing permissions and
1:497fbfc:  * limitations under the License.
1:497fbfc:  */
1:497fbfc: package org.apache.activemq.broker;
9:497fbfc: 
1:e19293d: import java.util.concurrent.atomic.AtomicReference;
1:497fbfc: 
1:c53b99c: import javax.jms.Connection;
1:c53b99c: import javax.jms.InvalidClientIDException;
1:497fbfc: 
1:c53b99c: import org.apache.activemq.ActiveMQConnectionFactory;
1:c53b99c: import org.apache.activemq.command.ConnectionInfo;
1:d3ea5c4: import org.apache.activemq.util.Wait;
1:d3ea5c4: import org.apache.activemq.util.Wait.Condition;
1:c53b99c: import org.junit.After;
1:c53b99c: import org.junit.Before;
1:c53b99c: import org.junit.Test;
1:6cf8bed: import org.slf4j.Logger;
1:6cf8bed: import org.slf4j.LoggerFactory;
1:497fbfc: 
1:5076808: import static org.junit.Assert.assertTrue;
1:5076808: import static org.junit.Assert.fail;
1:5076808: 
1:5076808: 
1:c53b99c: public class LinkStealingTest {
1:c53b99c: 
1:6cf8bed:     private static final Logger LOG = LoggerFactory.getLogger(LinkStealingTest.class);
1:6cf8bed: 
1:c53b99c:     private BrokerService brokerService;
1:c53b99c:     private final AtomicReference<Throwable> removeException = new AtomicReference<Throwable>();
1:c53b99c: 
1:c53b99c:     private String stealableConnectionURI;
1:c53b99c:     private String unstealableConnectionURI;
1:c53b99c: 
1:c53b99c:     @Before
1:c53b99c:     public void setUp() throws Exception {
1:497fbfc:         brokerService = new BrokerService();
1:497fbfc:         brokerService.setPersistent(false);
1:6cf8bed:         brokerService.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:6cf8bed:             @Override
1:6cf8bed:             public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:6cf8bed:                 LOG.info("Remove Connection called for connection [{}] with error: {}", info.getConnectionId(), error);
1:6cf8bed:                 removeException.set(error);
1:6cf8bed:                 super.removeConnection(context, info, error);
1:c53b99c:             }
1:6cf8bed:         }});
1:c53b99c: 
1:c53b99c:         stealableConnectionURI = brokerService.addConnector("tcp://0.0.0.0:0?allowLinkStealing=true").getPublishableConnectString();
1:c53b99c:         unstealableConnectionURI = brokerService.addConnector("tcp://0.0.0.0:0?allowLinkStealing=false").getPublishableConnectString();
1:c53b99c: 
1:c53b99c:         brokerService.start();
1:e19293d:     }
1:c53b99c: 
1:c53b99c:     @After
1:c53b99c:     public void tearDown() throws Exception {
1:497fbfc:         if (brokerService != null) {
1:497fbfc:             brokerService.stop();
1:6cf8bed:             brokerService = null;
1:e19293d:         }
3:497fbfc:     }
1:497fbfc: 
1:6cf8bed:     @Test(timeout = 60000)
1:497fbfc:     public void testStealLinkFails() throws Exception {
1:497fbfc:         final String clientID = "ThisIsAClientId";
1:c53b99c:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(unstealableConnectionURI);
1:497fbfc:         Connection connection1 = factory.createConnection();
1:497fbfc:         connection1.setClientID(clientID);
1:497fbfc:         connection1.start();
1:497fbfc: 
1:497fbfc:         try {
1:497fbfc:             Connection connection2 = factory.createConnection();
1:497fbfc:             connection2.setClientID(clientID);
1:497fbfc:             connection2.start();
1:6cf8bed:             fail("Should not have been able to steal the link.");
1:497fbfc:         } catch (InvalidClientIDException e) {
1:6cf8bed:             LOG.info("Caught expected error on trying to steal link: {}", e.getMessage());
1:6cf8bed:             LOG.trace("Error: ", e);
1:497fbfc:         }
1:497fbfc:     }
1:497fbfc: 
1:6cf8bed:     @Test(timeout = 60000)
1:497fbfc:     public void testStealLinkSuccess() throws Exception {
1:497fbfc:         final String clientID = "ThisIsAClientId";
1:c53b99c:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(stealableConnectionURI);
1:497fbfc:         Connection connection1 = factory.createConnection();
1:497fbfc:         connection1.setClientID(clientID);
1:497fbfc:         connection1.start();
1:497fbfc: 
1:497fbfc:         try {
1:497fbfc:             Connection connection2 = factory.createConnection();
1:497fbfc:             connection2.setClientID(clientID);
1:497fbfc:             connection2.start();
1:497fbfc:         } catch (InvalidClientIDException e) {
1:6cf8bed:             LOG.info("Should not have failed while stealing the link: {}", e.getMessage());
1:6cf8bed:             LOG.info("Error details: ", e);
1:6cf8bed:             fail("Shouldn't have failed when stealing the link");
1:6cf8bed:         } catch (Throwable error) {
1:6cf8bed:             LOG.info("Unexpected exception ", error);
1:6cf8bed:             fail("Unexcpected exception causes test failure");
1:497fbfc:         }
1:497fbfc: 
1:d3ea5c4:         //Need to wait because removeConnection might not be called yet
1:d3ea5c4:         assertTrue(Wait.waitFor(new Condition() {
1:d3ea5c4:             @Override
1:d3ea5c4:             public boolean isSatisified() throws Exception {
1:d3ea5c4:                 return removeException.get() != null;
1:d3ea5c4:             }
1:d3ea5c4:         }, 5000, 100));
1:d3ea5c4: 
1:6cf8bed:         LOG.info("removeException: {}", removeException.get().getMessage());
1:497fbfc:     }
1:497fbfc: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d3ea5c4
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
/////////////////////////////////////////////////////////////////////////
1:         //Need to wait because removeConnection might not be called yet
1:         assertTrue(Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return removeException.get() != null;
1:             }
1:         }, 5000, 100));
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6cf8bed
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(LinkStealingTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:             @Override
1:             public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:                 LOG.info("Remove Connection called for connection [{}] with error: {}", info.getConnectionId(), error);
1:                 removeException.set(error);
1:                 super.removeConnection(context, info, error);
1:         }});
/////////////////////////////////////////////////////////////////////////
1:             brokerService = null;
1:     @Test(timeout = 60000)
1:             fail("Should not have been able to steal the link.");
1:             LOG.info("Caught expected error on trying to steal link: {}", e.getMessage());
1:             LOG.trace("Error: ", e);
1:     @Test(timeout = 60000)
1:             LOG.info("Should not have failed while stealing the link: {}", e.getMessage());
1:             LOG.info("Error details: ", e);
1:             fail("Shouldn't have failed when stealing the link");
1:         } catch (Throwable error) {
1:             LOG.info("Unexpected exception ", error);
1:             fail("Unexcpected exception causes test failure");
1:         LOG.info("removeException: {}", removeException.get().getMessage());
commit:c53b99c
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
1: import javax.jms.Connection;
1: import javax.jms.InvalidClientIDException;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class LinkStealingTest {
1: 
1:     private BrokerService brokerService;
1:     private final AtomicReference<Throwable> removeException = new AtomicReference<Throwable>();
1: 
1:     private String stealableConnectionURI;
1:     private String unstealableConnectionURI;
1: 
0:     @SuppressWarnings("unchecked")
1:     @Before
1:     public void setUp() throws Exception {
0:             new BrokerPluginSupport() {
0:                 @Override
0:                 public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
0:                     removeException.set(error);
0:                     super.removeConnection(context, info, error);
1:             }
1: 
1:         stealableConnectionURI = brokerService.addConnector("tcp://0.0.0.0:0?allowLinkStealing=true").getPublishableConnectString();
1:         unstealableConnectionURI = brokerService.addConnector("tcp://0.0.0.0:0?allowLinkStealing=false").getPublishableConnectString();
1: 
1:         brokerService.start();
1:     @After
1:     public void tearDown() throws Exception {
0:     @Test(timeout=60000)
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(unstealableConnectionURI);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(exceptionFlag.get());
0:     @Test(timeout=60000)
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(stealableConnectionURI);
/////////////////////////////////////////////////////////////////////////
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e19293d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ConnectionInfo;
1: import java.util.concurrent.atomic.AtomicReference;
0:     protected final AtomicReference<Throwable> removeException = new AtomicReference<Throwable>();
0:         brokerService.setPlugins(new BrokerPlugin[]{
0:                 new BrokerPluginSupport() {
0:                     @Override
0:                     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
0:                         removeException.set(error);
0:                         super.removeConnection(context, info, error);
1:                     }
1:                 }
0:         });
/////////////////////////////////////////////////////////////////////////
0:         assertNotNull(removeException.get());
author:Rob Davies
-------------------------------------------------------------------------------
commit:497fbfc
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.InvalidClientIDException;
0: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: public class LinkStealingTest extends TestCase {
0:     protected BrokerService brokerService;
0:     protected int timeOutInSeconds = 10;
1: 
1: 
0:     @Override
0:     protected void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1: 
1:     public void testStealLinkFails() throws Exception {
1: 
0:         brokerService.addConnector(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
0:         brokerService.start();
1: 
1:         final String clientID = "ThisIsAClientId";
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
1:         Connection connection1 = factory.createConnection();
1:         connection1.setClientID(clientID);
1:         connection1.start();
1: 
0:         AtomicBoolean exceptionFlag = new AtomicBoolean();
1:         try {
1:             Connection connection2 = factory.createConnection();
1:             connection2.setClientID(clientID);
1:             connection2.start();
1:         } catch (InvalidClientIDException e) {
0:             exceptionFlag.set(true);
1:         }
0:         assertTrue(exceptionFlag.get());
1: 
1:     }
1: 
1:     public void testStealLinkSuccess() throws Exception {
1: 
0:         brokerService.addConnector(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL+"?allowLinkStealing=true");
0:         brokerService.start();
1: 
1:         final String clientID = "ThisIsAClientId";
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
1:         Connection connection1 = factory.createConnection();
1:         connection1.setClientID(clientID);
1:         connection1.start();
1: 
0:         AtomicBoolean exceptionFlag = new AtomicBoolean();
1:         try {
1:             Connection connection2 = factory.createConnection();
1:             connection2.setClientID(clientID);
1:             connection2.start();
1:         } catch (InvalidClientIDException e) {
0:             e.printStackTrace();
0:             exceptionFlag.set(true);
1:         }
0:         assertFalse(exceptionFlag.get());
1: 
1:     }
1: }
============================================================================