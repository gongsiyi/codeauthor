1:3e945b5: /**
1:3e945b5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3e945b5:  * contributor license agreements.  See the NOTICE file distributed with
1:3e945b5:  * this work for additional information regarding copyright ownership.
1:3e945b5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3e945b5:  * (the "License"); you may not use this file except in compliance with
1:3e945b5:  * the License.  You may obtain a copy of the License at
4:3e945b5:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3e945b5:  *
1:3e945b5:  * Unless required by applicable law or agreed to in writing, software
1:3e945b5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3e945b5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3e945b5:  * See the License for the specific language governing permissions and
1:3e945b5:  * limitations under the License.
1:3e945b5:  */
1:3e945b5: package org.apache.activemq.security;
12:3e945b5: 
1:4743a20: import static org.junit.Assert.assertEquals;
1:4743a20: import static org.junit.Assert.assertTrue;
1:4743a20: 
1:4743a20: import java.text.MessageFormat;
1:4743a20: import java.util.HashSet;
1:4743a20: import java.util.Set;
1:4743a20: 
1:4743a20: import javax.naming.NameClassPair;
1:4743a20: import javax.naming.NamingEnumeration;
1:4743a20: import javax.naming.directory.DirContext;
1:4743a20: 
1:046130e: import org.apache.activemq.advisory.AdvisorySupport;
1:3e945b5: import org.apache.activemq.command.ActiveMQDestination;
1:3e945b5: import org.apache.activemq.command.ActiveMQQueue;
1:3e945b5: import org.apache.activemq.command.ActiveMQTopic;
1:3e945b5: import org.apache.activemq.jaas.GroupPrincipal;
1:26cf6a7: import org.apache.directory.server.annotations.CreateLdapServer;
1:26cf6a7: import org.apache.directory.server.annotations.CreateTransport;
1:26cf6a7: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1:26cf6a7: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1:26cf6a7: import org.apache.directory.server.core.integ.FrameworkRunner;
1:26cf6a7: import org.apache.directory.server.ldap.LdapServer;
1:26cf6a7: import org.junit.Before;
1:26cf6a7: import org.junit.Test;
1:26cf6a7: import org.junit.runner.RunWith;
1:26cf6a7: 
1:3e945b5: /**
1:4743a20:  * This test assumes setup like in file 'AMQauth.ldif'. Contents of this file is attached below in comments.
1:4743a20:  *
1:3e945b5:  * @author ngcutura
1:26cf6a7:  *
1:26cf6a7:  *
1:3e945b5:  */
1:4743a20: @RunWith(FrameworkRunner.class)
1:4743a20: @CreateLdapServer(transports = { @CreateTransport(protocol = "LDAP") })
1:4743a20: @ApplyLdifFiles("org/apache/activemq/security/AMQauth.ldif")
1:26cf6a7: public class LDAPAuthorizationMapTest extends AbstractLdapTestUnit {
1:26cf6a7:     private static LDAPAuthorizationMap authMap;
1:26cf6a7: 
1:26cf6a7:     public static LdapServer ldapServer;
1:3e945b5: 
1:26cf6a7:     @Before
1:26cf6a7:     public void setup() throws Exception {
1:3e945b5:         authMap = new LDAPAuthorizationMap();
1:1f862ba:         authMap.setConnectionURL("ldap://localhost:" + getLdapServer().getPort());
1:046130e:         authMap.setTopicSearchMatchingFormat(new MessageFormat("uid={0},ou=topics,ou=destinations,o=ActiveMQ,ou=system"));
1:046130e:         authMap.setQueueSearchMatchingFormat(new MessageFormat("uid={0},ou=queues,ou=destinations,o=ActiveMQ,ou=system"));
1:046130e:         authMap.setAdvisorySearchBase("uid=ActiveMQ.Advisory,ou=topics,ou=destinations,o=ActiveMQ,ou=system");
1:efcd57f:         authMap.setTempSearchBase("uid=ActiveMQ.Temp,ou=topics,ou=destinations,o=ActiveMQ,ou=system");
3:3e945b5:     }
1:3e945b5: 
1:efcd57f:     @Test
1:3e945b5:     public void testOpen() throws Exception {
1:3e945b5:         DirContext ctx = authMap.open();
1:933eb2f:         HashSet<String> set = new HashSet<String>();
1:4743a20:         NamingEnumeration<NameClassPair> list = ctx.list("ou=destinations,o=ActiveMQ,ou=system");
1:3e945b5:         while (list.hasMore()) {
1:4743a20:             NameClassPair ncp = list.next();
1:3e945b5:             set.add(ncp.getName());
1:3e945b5:         }
1:3e945b5:         assertTrue(set.contains("ou=topics"));
1:3e945b5:         assertTrue(set.contains("ou=queues"));
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     /*
1:4743a20:      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getAdminACLs(ActiveMQDestination)'
1:3e945b5:      */
1:046130e:     @Test
1:3e945b5:     public void testGetAdminACLs() {
1:3e945b5:         ActiveMQDestination q1 = new ActiveMQQueue("queue1");
1:4743a20:         Set<GroupPrincipal> aclsq1 = authMap.getAdminACLs(q1);
1:3e945b5:         assertEquals(1, aclsq1.size());
1:046130e:         assertTrue(aclsq1.contains(new GroupPrincipal("role1")));
1:3e945b5: 
1:3e945b5:         ActiveMQDestination t1 = new ActiveMQTopic("topic1");
1:4743a20:         Set<GroupPrincipal> aclst1 = authMap.getAdminACLs(t1);
1:3e945b5:         assertEquals(1, aclst1.size());
1:3e945b5:         assertTrue(aclst1.contains(new GroupPrincipal("role1")));
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     /*
1:4743a20:      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getReadACLs(ActiveMQDestination)'
1:3e945b5:      */
1:26cf6a7:     @Test
1:3e945b5:     public void testGetReadACLs() {
1:3e945b5:         ActiveMQDestination q1 = new ActiveMQQueue("queue1");
1:4743a20:         Set<GroupPrincipal> aclsq1 = authMap.getReadACLs(q1);
1:3e945b5:         assertEquals(1, aclsq1.size());
2:3e945b5:         assertTrue(aclsq1.contains(new GroupPrincipal("role1")));
1:3e945b5: 
1:3e945b5:         ActiveMQDestination t1 = new ActiveMQTopic("topic1");
1:4743a20:         Set<GroupPrincipal> aclst1 = authMap.getReadACLs(t1);
1:3e945b5:         assertEquals(1, aclst1.size());
1:3e945b5:         assertTrue(aclst1.contains(new GroupPrincipal("role2")));
1:3e945b5:     }
1:3e945b5: 
1:3e945b5:     /*
1:4743a20:      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getWriteACLs(ActiveMQDestination)'
1:3e945b5:      */
1:26cf6a7:     @Test
1:3e945b5:     public void testGetWriteACLs() {
1:3e945b5:         ActiveMQDestination q1 = new ActiveMQQueue("queue1");
1:4743a20:         Set<GroupPrincipal> aclsq1 = authMap.getWriteACLs(q1);
1:3e945b5:         assertEquals(2, aclsq1.size());
1:3e945b5:         assertTrue(aclsq1.contains(new GroupPrincipal("role1")));
1:046130e:         assertTrue(aclsq1.contains(new GroupPrincipal("role2")));
1:3e945b5: 
1:3e945b5:         ActiveMQDestination t1 = new ActiveMQTopic("topic1");
1:4743a20:         Set<GroupPrincipal> aclst1 = authMap.getWriteACLs(t1);
1:3e945b5:         assertEquals(1, aclst1.size());
1:3e945b5:         assertTrue(aclst1.contains(new GroupPrincipal("role3")));
1:3e945b5:     }
1:046130e: 
1:26cf6a7:     @Test
1:046130e:     public void testComposite() {
1:4743a20:         ActiveMQDestination q1 = new ActiveMQQueue("queue1,topic://topic1");
1:4743a20:         Set<GroupPrincipal> aclsq1 = authMap.getWriteACLs(q1);
1:4743a20:         assertEquals(0, aclsq1.size());
1:046130e:     }
1:046130e: 
1:046130e:     @Test
1:046130e:     public void testAdvisory() {
1:046130e:         ActiveMQDestination dest = AdvisorySupport.getConnectionAdvisoryTopic();
1:4743a20:         Set<GroupPrincipal> acls = authMap.getWriteACLs(dest);
1:046130e: 
1:046130e:         assertEquals(1, acls.size());
1:046130e:         assertTrue(acls.contains(new GroupPrincipal("role3")));
1:046130e:     }
1:efcd57f: 
1:4743a20:     @Test
1:efcd57f:     public void testTemp() {
1:4743a20:         Set<GroupPrincipal> acls = authMap.getTempDestinationAdminACLs();
1:efcd57f: 
1:efcd57f:         assertEquals(1, acls.size());
1:efcd57f:         assertTrue(acls.contains(new GroupPrincipal("role1")));
1:efcd57f:     }
1:046130e: 
1:3e945b5: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.text.MessageFormat;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import javax.naming.NameClassPair;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.directory.DirContext;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * This test assumes setup like in file 'AMQauth.ldif'. Contents of this file is attached below in comments.
1:  *
1: @RunWith(FrameworkRunner.class)
1: @CreateLdapServer(transports = { @CreateTransport(protocol = "LDAP") })
1: @ApplyLdifFiles("org/apache/activemq/security/AMQauth.ldif")
/////////////////////////////////////////////////////////////////////////
1:         NamingEnumeration<NameClassPair> list = ctx.list("ou=destinations,o=ActiveMQ,ou=system");
1:             NameClassPair ncp = list.next();
/////////////////////////////////////////////////////////////////////////
1:      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getAdminACLs(ActiveMQDestination)'
1:         Set<GroupPrincipal> aclsq1 = authMap.getAdminACLs(q1);
1:         Set<GroupPrincipal> aclst1 = authMap.getAdminACLs(t1);
1:      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getReadACLs(ActiveMQDestination)'
1:         Set<GroupPrincipal> aclsq1 = authMap.getReadACLs(q1);
1:         Set<GroupPrincipal> aclst1 = authMap.getReadACLs(t1);
1:      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getWriteACLs(ActiveMQDestination)'
1:         Set<GroupPrincipal> aclsq1 = authMap.getWriteACLs(q1);
1:         Set<GroupPrincipal> aclst1 = authMap.getWriteACLs(t1);
1:         ActiveMQDestination q1 = new ActiveMQQueue("queue1,topic://topic1");
1:         Set<GroupPrincipal> aclsq1 = authMap.getWriteACLs(q1);
1:         assertEquals(0, aclsq1.size());
1:         Set<GroupPrincipal> acls = authMap.getWriteACLs(dest);
1:     @Test
1:         Set<GroupPrincipal> acls = authMap.getTempDestinationAdminACLs();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         HashSet<String> set = new HashSet<String>();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f862ba
/////////////////////////////////////////////////////////////////////////
1:         authMap.setConnectionURL("ldap://localhost:" + getLdapServer().getPort());
commit:efcd57f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQTempQueue;
/////////////////////////////////////////////////////////////////////////
1:         authMap.setTempSearchBase("uid=ActiveMQ.Temp,ou=topics,ou=destinations,o=ActiveMQ,ou=system");
/////////////////////////////////////////////////////////////////////////
1:         @Test
1:     public void testTemp() {
0:         Set acls = authMap.getTempDestinationAdminACLs();
1: 
1:         assertEquals(1, acls.size());
1:         assertTrue(acls.contains(new GroupPrincipal("role1")));
1:     }
1: 
commit:046130e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
0: import org.apache.activemq.spring.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0: import java.text.MessageFormat;
/////////////////////////////////////////////////////////////////////////
1:         authMap.setTopicSearchMatchingFormat(new MessageFormat("uid={0},ou=topics,ou=destinations,o=ActiveMQ,ou=system"));
1:         authMap.setQueueSearchMatchingFormat(new MessageFormat("uid={0},ou=queues,ou=destinations,o=ActiveMQ,ou=system"));
1:         authMap.setAdvisorySearchBase("uid=ActiveMQ.Advisory,ou=topics,ou=destinations,o=ActiveMQ,ou=system");
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testComposite() {
0:        ActiveMQDestination q1 = new ActiveMQQueue("queue1,topic://topic1");
0:        Set aclsq1 = authMap.getWriteACLs(q1);
0:        assertEquals(3, aclsq1.size());
1:        assertTrue(aclsq1.contains(new GroupPrincipal("role1")));
1:        assertTrue(aclsq1.contains(new GroupPrincipal("role2")));
0:        assertTrue(aclsq1.contains(new GroupPrincipal("role3")));
1:     }
1: 
1:     @Test
1:     public void testAdvisory() {
1:         ActiveMQDestination dest = AdvisorySupport.getConnectionAdvisoryTopic();
0:         Set acls = authMap.getWriteACLs(dest);
1: 
1:         assertEquals(1, acls.size());
1:         assertTrue(acls.contains(new GroupPrincipal("role3")));
1:     }
1: 
1: 
commit:26cf6a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.directory.server.annotations.CreateLdapServer;
1: import org.apache.directory.server.annotations.CreateTransport;
1: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1: import org.apache.directory.server.core.integ.FrameworkRunner;
1: import org.apache.directory.server.ldap.LdapServer;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
0: import javax.naming.NameClassPair;
0: import javax.naming.NamingEnumeration;
0: import javax.naming.directory.DirContext;
0: import java.util.HashSet;
0: import java.util.Set;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1:  *
1:  *
0: @RunWith( FrameworkRunner.class )
0: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP")})
0: @ApplyLdifFiles(
0:    "org/apache/activemq/security/AMQauth.ldif"
0: )
1: public class LDAPAuthorizationMapTest extends AbstractLdapTestUnit {
1:     private static LDAPAuthorizationMap authMap;
1:     public static LdapServer ldapServer;
1:     @Before
1:     public void setup() throws Exception {
0:         authMap.setConnectionURL("ldap://localhost:1024");
1:     @Test
0:         NamingEnumeration list = ctx.list("ou=destinations,o=ActiveMQ,ou=system");
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
author:Gary Tully
-------------------------------------------------------------------------------
commit:df8d1e8
/////////////////////////////////////////////////////////////////////////
0:        assertEquals(0, aclsq1.size());
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:3e945b5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Properties;
0: import java.util.Set;
1: 
0: import javax.naming.Context;
0: import javax.naming.NameClassPair;
0: import javax.naming.NamingEnumeration;
0: import javax.naming.NamingException;
0: import javax.naming.directory.DirContext;
0: import javax.naming.directory.InitialDirContext;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.jaas.GroupPrincipal;
0: import org.apache.directory.server.core.configuration.StartupConfiguration;
0: import org.apache.directory.server.core.jndi.CoreContextFactory;
0: import org.springframework.context.ApplicationContext;
0: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
0:  * This test assumes setup like in file 'AMQauth.ldif'. Contents of this file is
0:  * attached below in comments.
1:  * 
1:  * @author ngcutura
1:  * 
1:  */
0: public class LDAPAuthorizationMapTest extends TestCase {
0:     private HashMap options;
0:     private LDAPAuthorizationMap authMap;
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
1: 
0:         startLdapServer();
1: 
1:         authMap = new LDAPAuthorizationMap();
1:     }
1: 
0:     protected void startLdapServer() throws Exception {
0:         ApplicationContext factory = new ClassPathXmlApplicationContext("org/apache/activemq/security/ldap-spring.xml");
0:         StartupConfiguration cfg = (StartupConfiguration) factory.getBean("configuration");
0:         Properties env = (Properties) factory.getBean("environment");
1: 
0:         env.setProperty(Context.PROVIDER_URL, "");
0:         env.setProperty(Context.INITIAL_CONTEXT_FACTORY, CoreContextFactory.class.getName());
0:         env.putAll(cfg.toJndiEnvironment());
1: 
0:         new InitialDirContext(env);
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:     }
1: 
1:     public void testOpen() throws Exception {
1:         DirContext ctx = authMap.open();
0:         HashSet set = new HashSet();
0:         NamingEnumeration list = ctx.list("ou=destinations,o=ActiveMQ,dc=example,dc=com");
1:         while (list.hasMore()) {
0:             NameClassPair ncp = (NameClassPair) list.next();
1:             set.add(ncp.getName());
1:         }
1:         assertTrue(set.contains("ou=topics"));
1:         assertTrue(set.contains("ou=queues"));
1:     }
1: 
1:     /*
0:      * Test method for
0:      * 'org.apache.activemq.security.LDAPAuthorizationMap.getAdminACLs(ActiveMQDestination)'
1:      */
1:     public void testGetAdminACLs() {
1:         ActiveMQDestination q1 = new ActiveMQQueue("queue1");
0:         Set aclsq1 = authMap.getAdminACLs(q1);
1:         assertEquals(1, aclsq1.size());
1:         assertTrue(aclsq1.contains(new GroupPrincipal("role1")));
1: 
1:         ActiveMQDestination t1 = new ActiveMQTopic("topic1");
0:         Set aclst1 = authMap.getAdminACLs(t1);
1:         assertEquals(1, aclst1.size());
1:         assertTrue(aclst1.contains(new GroupPrincipal("role1")));
1:     }
1: 
1:     /*
0:      * Test method for
0:      * 'org.apache.activemq.security.LDAPAuthorizationMap.getReadACLs(ActiveMQDestination)'
1:      */
1:     public void testGetReadACLs() {
1:         ActiveMQDestination q1 = new ActiveMQQueue("queue1");
0:         Set aclsq1 = authMap.getReadACLs(q1);
1:         assertEquals(1, aclsq1.size());
1:         assertTrue(aclsq1.contains(new GroupPrincipal("role1")));
1: 
1:         ActiveMQDestination t1 = new ActiveMQTopic("topic1");
0:         Set aclst1 = authMap.getReadACLs(t1);
1:         assertEquals(1, aclst1.size());
1:         assertTrue(aclst1.contains(new GroupPrincipal("role2")));
1:     }
1: 
1:     /*
0:      * Test method for
0:      * 'org.apache.activemq.security.LDAPAuthorizationMap.getWriteACLs(ActiveMQDestination)'
1:      */
1:     public void testGetWriteACLs() {
1:         ActiveMQDestination q1 = new ActiveMQQueue("queue1");
0:         Set aclsq1 = authMap.getWriteACLs(q1);
1:         assertEquals(2, aclsq1.size());
1:         assertTrue(aclsq1.contains(new GroupPrincipal("role1")));
0:         assertTrue(aclsq1.contains(new GroupPrincipal("role2")));
1: 
1:         ActiveMQDestination t1 = new ActiveMQTopic("topic1");
0:         Set aclst1 = authMap.getWriteACLs(t1);
1:         assertEquals(1, aclst1.size());
1:         assertTrue(aclst1.contains(new GroupPrincipal("role3")));
1:     }
1: 
1: }
============================================================================