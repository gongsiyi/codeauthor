1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
2:0bb9013: 
1:c84e58a: import java.util.concurrent.atomic.AtomicReference;
1:8d3ca90: 
1:d29ca2a: /**
1:230a86c:  * Like a BrokerFilter but it allows you to switch the getNext().broker. This
1:230a86c:  * has more overhead than a BrokerFilter since access to the getNext().broker
1:230a86c:  * has to synchronized since it is mutable
1:0bb9013:  *
1:0bb9013:  *
1:d29ca2a:  */
1:5076808: public class MutableBrokerFilter extends BrokerFilter {
1:0bb9013: 
1:1096564:     protected AtomicReference<Broker> next = new AtomicReference<Broker>();
1:0bb9013: 
1:d29ca2a:     public MutableBrokerFilter(Broker next) {
1:5076808:     	super(null); // prevent future code from using the inherited 'next'
1:0bb9013:         this.next.set(next);
1:cc81680:     }
1:cc81680: 
2:cc81680:     @Override
1:5076808:     public Broker getAdaptor(Class<?> type) {
1:230a86c:         if (type.isInstance(this)) {
1:4098942:             return this;
1:cc81680:         }
1:c84e58a:         return next.get().getAdaptor(type);
1:27b3a7c:     }
1:cc81680: 
1:d29ca2a:     public Broker getNext() {
1:c84e58a:         return next.get();
1:55da9bc:     }
1:27b3a7c: 
1:d29ca2a:     public void setNext(Broker next) {
2:c84e58a:         this.next.set(next);
1:8d3ca90:     }
1:55da9bc: 
1:230a86c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class MutableBrokerFilter extends BrokerFilter {
1:     	super(null); // prevent future code from using the inherited 'next'
1:     public Broker getAdaptor(Class<?> type) {
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.virtual.VirtualDestination;
/////////////////////////////////////////////////////////////////////////
0:     public void virtualDestinationAdded(ConnectionContext context,
0:             VirtualDestination virtualDestination) {
0:         getNext().virtualDestinationAdded(context, virtualDestination);
1:     }
1: 
1:     @Override
0:     public void virtualDestinationRemoved(ConnectionContext context,
0:             VirtualDestination virtualDestination) {
0:         getNext().virtualDestinationRemoved(context, virtualDestination);
1:     }
1: 
1:     @Override
author:gtully
-------------------------------------------------------------------------------
commit:27b3a7c
/////////////////////////////////////////////////////////////////////////
0:     public Map<ActiveMQDestination, Destination> getDestinationMap(ActiveMQDestination destination) {
0:         return getNext().getDestinationMap(destination);
1:     }
1: 
0:     @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:55da9bc
/////////////////////////////////////////////////////////////////////////
0:     public void reapplyInterceptor() {
0:         getNext().reapplyInterceptor();
1:     }
1: 
0:     @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
0:                                          Subscription subscription, Throwable poisonCause) {
0:         return getNext().sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
0:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {
0:         getNext().fastProducer(context, producerInfo, destination);
commit:27c1719
/////////////////////////////////////////////////////////////////////////
0:     public void messageExpired(ConnectionContext context, MessageReference message, Subscription subscription) {
0:         getNext().messageExpired(context, message, subscription);
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:                                       Subscription subscription) {
0:         getNext().sendToDeadLetterQueue(context, messageReference, subscription);
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
0:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
0:         getNext().messageDiscarded(context, sub, messageReference);
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ConsumerControl;
/////////////////////////////////////////////////////////////////////////
0:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange,
0:             ConsumerControl control) {
0:         getNext().processConsumerControl(consumerExchange, control);
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
1:         this.next.set(next);
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:                                          Subscription subscription) {
0:         return getNext().sendToDeadLetterQueue(context, messageReference, subscription);
0:     @Override
1: 
0:     @Override
1: 
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
1: 
0:     @Override
0:     public void nowMasterBroker() {
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.PListStore;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:1096564
/////////////////////////////////////////////////////////////////////////
1:     protected AtomicReference<Broker> next = new AtomicReference<Broker>();
commit:c84e58a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
0: 
/////////////////////////////////////////////////////////////////////////
0:     private AtomicReference<Broker> next = new AtomicReference<Broker>();
1:         this.next.set(next);
1:         return next.get().getAdaptor(type);
1:         return next.get();
1:     	this.next.set(next);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
/////////////////////////////////////////////////////////////////////////
0:     public Set<ActiveMQDestination> getDurableDestinations() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Like a BrokerFilter but it allows you to switch the getNext().broker. This
1:  * has more overhead than a BrokerFilter since access to the getNext().broker
1:  * has to synchronized since it is mutable
0: 
0: 
0:     public Broker getAdaptor(Class type) {
1:         if (type.isInstance(this)) {
0: 
0:         synchronized (mutext) {
0: 
0:         synchronized (mutext) {
0:             this.next = next;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void addBroker(Connection connection, BrokerInfo info) {
0:         getNext().addBroker(connection, info);
0: 
0:     public void removeBroker(Connection connection, BrokerInfo info) {
0:     public BrokerInfo[] getPeerBrokerInfos() {
0:         return getNext().getPeerBrokerInfos();
0: 
0:     public void preProcessDispatch(MessageDispatch messageDispatch) {
0: 
0:     public void postProcessDispatch(MessageDispatch messageDispatch) {
0: 
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
0: 
0:     public boolean isStopped() {
0: 
0:     public Set getDurableDestinations() {
0:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0: 
0:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0: 
0:     public boolean isFaultTolerantConfiguration() {
0:         return getNext().isFaultTolerantConfiguration();
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     public URI getVmConnectorURI() {
0: 
0:     public void brokerServiceStarted() {
1:     }
0: 
0:     public BrokerService getBrokerService() {
0: 
0:     public void messageExpired(ConnectionContext context, MessageReference message) {
0:         getNext().messageExpired(context, message);
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference) {
0:         getNext().sendToDeadLetterQueue(context, messageReference);
0: 
0:     public Broker getRoot() {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     public void send(ConnectionContext context, Message messageSend) throws Exception {
0:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
0:     public Connection[] getClients() throws Exception {
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
0:     public ActiveMQDestination[] getDestinations() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
0:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception{
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
0: 
0: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.BrokerId;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.ProducerInfo;
0: import org.apache.activemq.command.RemoveSubscriptionInfo;
0: import org.apache.activemq.command.SessionInfo;
0: import org.apache.activemq.command.TransactionId;
0: 
1: /**
0:  * Like a BrokerFilter but it allows you to switch the getNext().broker.  This has more 
0:  * overhead than a BrokerFilter since access to the getNext().broker has to synchronized
0:  * since it is mutable
1:  * 
0:  * @version $Revision: 1.10 $
1:  */
0: public class MutableBrokerFilter implements Broker {
0:     
0:     private Broker next;
0:     private final Object mutext = new Object();
0: 
1:     public MutableBrokerFilter(Broker next) {
0:         this.next = next;
0:     }
0:     
1:     public Broker getNext() {
0:         synchronized(mutext) {
0:             return next;
0:         }
0:     }
0:     
1:     public void setNext(Broker next) {
0:         synchronized(mutext) {
0:             this.next=next;
0:         }
0:     }
0:     
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Throwable {
0:         getNext().acknowledge(context, ack);
0:     }
0: 
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Throwable {
0:         getNext().addConnection(context, info);
0:     }
0: 
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
0:         getNext().addConsumer(context, info);
0:     }
0: 
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
0:         getNext().addProducer(context, info);
0:     }
0: 
0:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Throwable {
0:         getNext().commitTransaction(context, xid, onePhase);
0:     }
0: 
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Throwable {
0:         getNext().removeSubscription(context, info);
0:     }
0: 
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Throwable {
0:         return getNext().getPreparedTransactions(context);
0:     }
0: 
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Throwable {
0:         return getNext().prepareTransaction(context, xid);
0:     }
0: 
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Throwable {
0:         getNext().removeConnection(context, info, error);
0:     }
0: 
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
0:         getNext().removeConsumer(context, info);
0:     }
0: 
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
0:         getNext().removeProducer(context, info);
0:     }
0: 
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Throwable {
0:         getNext().rollbackTransaction(context, xid);
0:     }
0: 
0:     public void send(ConnectionContext context, Message messageSend) throws Throwable {
0:         getNext().send(context, messageSend);
0:     }
0: 
0:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Throwable {
0:         getNext().beginTransaction(context, xid);
0:     }
0: 
0:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Throwable {
0:         getNext().forgetTransaction(context, transactionId);
0:     }
0: 
0:     public Connection[] getClients() throws Throwable {
0:         return getNext().getClients();
0:     }
0: 
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
0:         return getNext().addDestination(context, destination);
0:     }
0: 
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Throwable {
0:         getNext().removeDestination(context, destination, timeout);
0:     }
0: 
0:     public ActiveMQDestination[] getDestinations() throws Throwable {
0:         return getNext().getDestinations();
0:     }
0: 
0:     public void start() throws Exception {
0:         getNext().start();
0:     }
0: 
0:     public void stop() throws Exception {
0:         getNext().stop();
0:     }
0: 
0:     public void addSession(ConnectionContext context, SessionInfo info) throws Throwable {
0:         getNext().addSession(context, info);
0:     }
0: 
0:     public void removeSession(ConnectionContext context, SessionInfo info) throws Throwable {
0:         getNext().removeSession(context, info);
0:     }
0: 
0:     public BrokerId getBrokerId() {
0:         return getNext().getBrokerId();
0:     }
0: 
0:     public String getBrokerName() {
0:         return getNext().getBrokerName();
0:     }
0: 	
0:     public void gc() {
0:         getNext().gc();
0:     }
0: 
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:37384a1
/////////////////////////////////////////////////////////////////////////
0:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp) {
0:         getNext().networkBridgeStarted(brokerInfo, createdByDuplex, remoteIp);
commit:bd49b52
/////////////////////////////////////////////////////////////////////////
0:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex) {
0:         getNext().networkBridgeStarted(brokerInfo, createdByDuplex);
commit:663d5db
/////////////////////////////////////////////////////////////////////////
0:     public void networkBridgeStarted(BrokerInfo brokerInfo) {
0:         getNext().networkBridgeStarted(brokerInfo);
0:     }
0: 
0:     public void networkBridgeStopped(BrokerInfo brokerInfo) {
0:         getNext().networkBridgeStopped(brokerInfo);
0:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ThreadPoolExecutor;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.thread.Scheduler;
/////////////////////////////////////////////////////////////////////////
0:     public Scheduler getScheduler() {
0:        return getNext().getScheduler();
0:     }
0: 
0:     public ThreadPoolExecutor getExecutor() {
0:        return getNext().getExecutor();
0:     }
0: 
commit:204f91f
/////////////////////////////////////////////////////////////////////////
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean createIfTemporary) throws Exception {
0:         return getNext().addDestination(context, destination,createIfTemporary);
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.plist.PListStore;
/////////////////////////////////////////////////////////////////////////
0:     public PListStore getTempDataStore() {
commit:4ee029e
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void nowMasterBroker() {   
0:        getNext().nowMasterBroker();
0:     }
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.usage.Usage;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
0:         getNext().fastProducer(context, producerInfo);
0:     }
0: 
0:     public void isFull(ConnectionContext context,Destination destination, Usage usage) {
0:         getNext().isFull(context,destination, usage);
0:     }
0: 
0:     public void messageConsumed(ConnectionContext context,MessageReference messageReference) {
0:         getNext().messageConsumed(context, messageReference);
0:     }
0: 
0:     public void messageDelivered(ConnectionContext context,MessageReference messageReference) {
0:         getNext().messageDelivered(context, messageReference);
0:     }
0: 
0:     public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
0:         getNext().messageDiscarded(context, messageReference);
0:     }
0: 
0:     public void slowConsumer(ConnectionContext context, Destination dest, Subscription subs) {
0:         getNext().slowConsumer(context, dest,subs);
0:     }
commit:dfcf776
/////////////////////////////////////////////////////////////////////////
0:     
0:     public long getBrokerSequenceId() {
0:         return getNext().getBrokerSequenceId();
0:     }
commit:a401575
/////////////////////////////////////////////////////////////////////////
0:     public void preProcessDispatch(MessageDispatch messageDispatch){
0:         getNext().preProcessDispatch(messageDispatch);
0:     }
0:     
0:     public void postProcessDispatch(MessageDispatch messageDispatch){
0:         getNext().postProcessDispatch(messageDispatch);
/////////////////////////////////////////////////////////////////////////
0:     public boolean isExpired(MessageReference messageReference) {
0:         return getNext().isExpired(messageReference);
0:     }
commit:a414c20
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
0: import java.util.Map;
0: import java.util.Set;
0: import org.apache.activemq.broker.region.MessageReference;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:    
0:     public void messageExpired(ConnectionContext context,MessageReference message){
0:         getNext().messageExpired(context,message);        
0:     }
0: 
0:     public void sendToDeadLetterQueue(ConnectionContext context,MessageReference messageReference) {
0:        getNext().sendToDeadLetterQueue(context,messageReference);
0:     }
0:     
0:     public Broker getRoot(){
0:         return getNext().getRoot();
0:     }
0: 
commit:83a6eff
/////////////////////////////////////////////////////////////////////////
0:        
commit:25a252f
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void brokerServiceStarted(){
0:         getNext().brokerServiceStarted();
0:     } 
0:     
0:     public BrokerService getBrokerService(){
0:         return getNext().getBrokerService();
0:     }
commit:4741136
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public URI getVmConnectorURI(){
0:         return getNext().getVmConnectorURI();
0:     }
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
0:         getNext().acknowledge(consumerExchange, ack);
/////////////////////////////////////////////////////////////////////////
0:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
0:         getNext().send(producerExchange, messageSend);
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy;
/////////////////////////////////////////////////////////////////////////
0:     public PendingDurableSubscriberMessageStoragePolicy getPendingDurableSubscriberPolicy() {
0:         return getNext().getPendingDurableSubscriberPolicy();
0:     }
0:   
0:     public void setPendingDurableSubscriberPolicy(PendingDurableSubscriberMessageStoragePolicy pendingDurableSubscriberPolicy) {
0:         getNext().setPendingDurableSubscriberPolicy(pendingDurableSubscriberPolicy);
0:     }
0:     
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.kaha.Store;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Store getTempDataStore() {
0:         return getNext().getTempDataStore();
0:     }
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
0:     public boolean isFaultTolerantConfiguration(){
0:        return getNext().isFaultTolerantConfiguration();
0:     }
0: 
commit:a9c49a7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.DestinationInfo;
/////////////////////////////////////////////////////////////////////////
0:     public void addDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{
0:         getNext().addDestinationInfo(context, info);
0:         
0:     }
0: 
0:     public void removeDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{
0:         getNext().removeDestinationInfo(context, info);
0:         
0:     }
0: 
commit:debd0cc
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Set getDurableDestinations(){
0:         return getNext().getDurableDestinations();
0:     }
commit:233b604
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isStopped(){
0:         return getNext().isStopped();
0:     }
commit:4098942
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.command.MessageDispatch;
0: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
0:     public Broker getAdaptor(Class type){
0:         if (type.isInstance(this)){
1:             return this;
0:         }
0:         return next.getAdaptor(type);
0:     }
0:     
/////////////////////////////////////////////////////////////////////////
0:     public void addBroker(Connection connection,BrokerInfo info){
0:         getNext().addBroker(connection, info);      
0:     }
0:     
0:     public void removeBroker(Connection connection,BrokerInfo info){
0:         getNext().removeBroker(connection, info);
0:     }
0: 
0:     public BrokerInfo[] getPeerBrokerInfos(){
0:        return getNext().getPeerBrokerInfos();
0:     }
0:     
0:     public void processDispatch(MessageDispatch messageDispatch){
0:         getNext().processDispatch(messageDispatch);
0:     }
0:     
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Throwable{
0:         getNext().processDispatchNotification(messageDispatchNotification);
0:     }
0:     
0:     public boolean isSlaveBroker(){
0:         return getNext().isSlaveBroker();
0:     }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.MessagePull;
0: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
0:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
0:         return getNext().messagePull(context, pull);
0:     }
0: 
commit:8abb655
/////////////////////////////////////////////////////////////////////////
0:     public ConnectionContext getAdminConnectionContext() {
0:         return getNext().getAdminConnectionContext();
0:     }
0: 
0:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext) {
0:         getNext().setAdminConnectionContext(adminConnectionContext);
0:     }
0: 
commit:06a5829
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import java.util.Set;
0: 
/////////////////////////////////////////////////////////////////////////
0:     public Set getDestinations(ActiveMQDestination destination) {
0:         return getNext().getDestinations(destination);
0:     }
0: 
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:         
0:     public Map getDestinationMap() {
0:         return getNext().getDestinationMap();
0:     }
0: 
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:         return getNext().addConsumer(context, info);
============================================================================