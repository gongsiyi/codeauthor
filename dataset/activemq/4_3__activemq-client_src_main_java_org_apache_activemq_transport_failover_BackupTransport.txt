1:5f83e62: /**
1:5f83e62:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f83e62:  * contributor license agreements.  See the NOTICE file distributed with
1:5f83e62:  * this work for additional information regarding copyright ownership.
1:5f83e62:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f83e62:  * (the "License"); you may not use this file except in compliance with
1:5f83e62:  * the License.  You may obtain a copy of the License at
1:5f83e62:  *
1:5f83e62:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f83e62:  *
1:5f83e62:  * Unless required by applicable law or agreed to in writing, software
1:5f83e62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f83e62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f83e62:  * See the License for the specific language governing permissions and
1:5f83e62:  * limitations under the License.
1:5f83e62:  */
3:5f83e62: 
1:5f83e62: 
1:5f83e62: package org.apache.activemq.transport.failover;
1:5f83e62: 
1:db1506a: import org.apache.activemq.command.BrokerInfo;
1:3ac0537: import org.apache.activemq.transport.DefaultTransportListener;
1:5f83e62: import org.apache.activemq.transport.Transport;
1:3ac0537: 
1:91059de: import java.io.IOException;
1:91059de: import java.net.URI;
1:91059de: 
1:3ac0537: class BackupTransport extends DefaultTransportListener{
1:f392884: 	private final FailoverTransport failoverTransport;
1:5f83e62: 	private Transport transport;
1:5f83e62: 	private URI uri;
1:3ac0537: 	private boolean disposed;
1:db1506a: 	private BrokerInfo brokerInfo;
1:db1506a: 
1:3ac0537: 	BackupTransport(FailoverTransport ft){
1:3ac0537: 		this.failoverTransport=ft;
1:3ac0537: 	}
1:db1506a: 
1:db1506a: 	@Override
1:f392884:     public void onException(IOException error) {
1:3ac0537: 		this.disposed=true;
1:3ac0537: 		if (failoverTransport!=null) {
1:f392884: 			this.failoverTransport.reconnect(false);
1:3ac0537: 		}
1:3ac0537: 	}
1:3ac0537: 
1:f392884: 	@Override
1:db1506a: 	public void onCommand(Object command) {
1:db1506a: 		if (command instanceof BrokerInfo) {
1:db1506a: 			brokerInfo = (BrokerInfo) command;
1:db1506a: 		}
1:db1506a: 	}
1:db1506a: 
1:db1506a: 	public BrokerInfo getBrokerInfo() {
1:db1506a: 		return brokerInfo;
1:db1506a: 	}
1:db1506a: 
1:5f83e62: 	public Transport getTransport() {
1:5f83e62: 		return transport;
1:5f83e62: 	}
1:5f83e62: 	public void setTransport(Transport transport) {
1:5f83e62: 		this.transport = transport;
1:f559236: 		this.transport.setTransportListener(this);
1:5f83e62: 	}
1:5f83e62: 	public URI getUri() {
1:5f83e62: 		return uri;
1:5f83e62: 	}
1:5f83e62: 	public void setUri(URI uri) {
1:5f83e62: 		this.uri = uri;
1:5f83e62: 	}
1:5f83e62: 	
1:3ac0537: 	public boolean isDisposed() {
1:3ac0537: 		return disposed || transport != null && transport.isDisposed();
1:3ac0537: 	}
1:3ac0537: 	
1:3ac0537: 	public void setDisposed(boolean disposed) {
1:3ac0537: 		this.disposed = disposed;
1:3ac0537: 	}
1:3ac0537: 	
1:f392884: 	@Override
1:f392884:     public int hashCode() {
1:5f83e62: 		return uri != null ? uri.hashCode():-1;
1:5f83e62: 	}
1:5f83e62: 	
1:f392884: 	@Override
1:f392884:     public boolean equals(Object obj) {
1:5f83e62: 		if (obj instanceof BackupTransport) {
1:5f83e62: 			BackupTransport other = (BackupTransport) obj;
1:5f83e62: 			return uri== null && other.uri==null || 
1:5f83e62: 				(uri != null && other.uri != null && uri.equals(other.uri));
1:5f83e62: 		}
1:5f83e62: 		return false;
1:5f83e62: 	}
1:91059de: 
1:91059de:     @Override
1:91059de:     public String toString() {
1:91059de:         return "Backup transport: " + uri;
1:91059de:     }
1:5f83e62: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:db1506a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerInfo;
/////////////////////////////////////////////////////////////////////////
1: 	private BrokerInfo brokerInfo;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void onCommand(Object command) {
1: 		if (command instanceof BrokerInfo) {
1: 			brokerInfo = (BrokerInfo) command;
1: 		}
1: 	}
1: 
1: 	public BrokerInfo getBrokerInfo() {
1: 		return brokerInfo;
1: 	}
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:91059de
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return "Backup transport: " + uri;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
1: 	private final FailoverTransport failoverTransport;
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1:     public void onException(IOException error) {
1: 			this.failoverTransport.reconnect(false);
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1:     public int hashCode() {
1: 	@Override
1:     public boolean equals(Object obj) {
commit:f559236
/////////////////////////////////////////////////////////////////////////
1: 		this.transport.setTransportListener(this);
commit:3ac0537
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: import org.apache.activemq.transport.DefaultTransportListener;
1: class BackupTransport extends DefaultTransportListener{
0: 	private FailoverTransport failoverTransport;
1: 	private boolean disposed;
1: 	
1: 	BackupTransport(FailoverTransport ft){
1: 		this.failoverTransport=ft;
1: 	}
0: 	public void onException(IOException error) {
1: 		this.disposed=true;
1: 		if (failoverTransport!=null) {
0: 			this.failoverTransport.reconnect();
1: 		}
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isDisposed() {
1: 		return disposed || transport != null && transport.isDisposed();
1: 	}
1: 	
1: 	public void setDisposed(boolean disposed) {
1: 		this.disposed = disposed;
1: 	}
1: 	
commit:5f83e62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: package org.apache.activemq.transport.failover;
1: 
0: import java.net.URI;
1: 
1: import org.apache.activemq.transport.Transport;
1: 
0: public class BackupTransport {
1: 	private Transport transport;
1: 	private URI uri;
1: 	public Transport getTransport() {
1: 		return transport;
1: 	}
1: 	public void setTransport(Transport transport) {
1: 		this.transport = transport;
1: 	}
1: 	public URI getUri() {
1: 		return uri;
1: 	}
1: 	public void setUri(URI uri) {
1: 		this.uri = uri;
1: 	}
1: 	
0: 	public int hashCode() {
1: 		return uri != null ? uri.hashCode():-1;
1: 	}
1: 	
0: 	public boolean equals(Object obj) {
1: 		if (obj instanceof BackupTransport) {
1: 			BackupTransport other = (BackupTransport) obj;
1: 			return uri== null && other.uri==null || 
1: 				(uri != null && other.uri != null && uri.equals(other.uri));
1: 		}
1: 		return false;
1: 	}
1: }
============================================================================