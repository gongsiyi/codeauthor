1:f490ab5: /**
1:f490ab5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f490ab5:  * contributor license agreements.  See the NOTICE file distributed with
1:f490ab5:  * this work for additional information regarding copyright ownership.
1:f490ab5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f490ab5:  * (the "License"); you may not use this file except in compliance with
1:f490ab5:  * the License.  You may obtain a copy of the License at
1:f490ab5:  * <p/>
1:f490ab5:  * http://www.apache.org/licenses/LICENSE-2.0
1:f490ab5:  * <p/>
1:f490ab5:  * Unless required by applicable law or agreed to in writing, software
1:f490ab5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f490ab5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f490ab5:  * See the License for the specific language governing permissions and
1:f490ab5:  * limitations under the License.
1:f490ab5:  */
1:f490ab5: package org.apache.activemq.camel.component;
1:f490ab5: 
1:f490ab5: import javax.jms.Message;
1:f490ab5: 
1:f490ab5: import org.apache.activemq.command.ActiveMQDestination;
1:f490ab5: import org.apache.activemq.command.ActiveMQMessage;
1:f490ab5: import org.apache.camel.CamelContext;
1:f490ab5: import org.apache.camel.Exchange;
1:f490ab5: import org.apache.camel.builder.RouteBuilder;
1:f490ab5: import org.apache.camel.component.jms.JmsMessage;
1:f490ab5: import org.apache.camel.component.mock.MockEndpoint;
1:f490ab5: import org.apache.camel.test.junit4.CamelTestSupport;
1:f490ab5: import org.junit.Test;
1:f490ab5: 
1:f490ab5: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
1:f490ab5: 
1:f490ab5: public class ActiveMQOriginalDestinationTest extends CamelTestSupport {
1:f490ab5: 
1:f490ab5:     @Test
1:f490ab5:     public void testActiveMQOriginalDestination() throws Exception {
1:f490ab5:         MockEndpoint mock = getMockEndpoint("mock:result");
1:f490ab5:         mock.expectedMessageCount(1);
1:f490ab5: 
1:f490ab5:         template.sendBody("activemq:queue:foo", "Hello World");
1:f490ab5: 
1:f490ab5:         assertMockEndpointsSatisfied();
1:f490ab5: 
1:f490ab5:         // consume from bar
1:f490ab5:         Exchange out = consumer.receive("activemq:queue:bar", 5000);
1:f490ab5:         assertNotNull(out);
1:f490ab5: 
1:f490ab5:         // and we should have foo as the original destination
1:f490ab5:         JmsMessage msg = out.getIn(JmsMessage.class);
1:f490ab5:         Message jms = msg.getJmsMessage();
1:f490ab5:         ActiveMQMessage amq = assertIsInstanceOf(ActiveMQMessage.class, jms);
1:f490ab5:         ActiveMQDestination original = amq.getOriginalDestination();
1:f490ab5:         assertNotNull(original);
1:f490ab5:         assertEquals("foo", original.getPhysicalName());
1:f490ab5:         assertEquals("Queue", original.getDestinationTypeAsString());
1:f490ab5:     }
1:f490ab5: 
1:f490ab5:     protected CamelContext createCamelContext() throws Exception {
1:f490ab5:         CamelContext camelContext = super.createCamelContext();
1:f490ab5:         camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false"));
1:f490ab5:         return camelContext;
1:f490ab5:     }
1:f490ab5: 
1:f490ab5:     @Override
1:f490ab5:     protected RouteBuilder createRouteBuilder() throws Exception {
1:f490ab5:         return new RouteBuilder() {
1:f490ab5:             @Override
1:f490ab5:             public void configure() throws Exception {
1:f490ab5:                 from("activemq:queue:foo")
1:f490ab5:                         .to("activemq:queue:bar")
1:f490ab5:                         .to("mock:result");
1:f490ab5:             }
1:f490ab5:         };
1:f490ab5:     }
1:f490ab5: 
1:f490ab5: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:f490ab5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import javax.jms.Message;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.component.jms.JmsMessage;
1: import org.apache.camel.component.mock.MockEndpoint;
1: import org.apache.camel.test.junit4.CamelTestSupport;
1: import org.junit.Test;
1: 
1: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
1: 
1: public class ActiveMQOriginalDestinationTest extends CamelTestSupport {
1: 
1:     @Test
1:     public void testActiveMQOriginalDestination() throws Exception {
1:         MockEndpoint mock = getMockEndpoint("mock:result");
1:         mock.expectedMessageCount(1);
1: 
1:         template.sendBody("activemq:queue:foo", "Hello World");
1: 
1:         assertMockEndpointsSatisfied();
1: 
1:         // consume from bar
1:         Exchange out = consumer.receive("activemq:queue:bar", 5000);
1:         assertNotNull(out);
1: 
1:         // and we should have foo as the original destination
1:         JmsMessage msg = out.getIn(JmsMessage.class);
1:         Message jms = msg.getJmsMessage();
1:         ActiveMQMessage amq = assertIsInstanceOf(ActiveMQMessage.class, jms);
1:         ActiveMQDestination original = amq.getOriginalDestination();
1:         assertNotNull(original);
1:         assertEquals("foo", original.getPhysicalName());
1:         assertEquals("Queue", original.getDestinationTypeAsString());
1:     }
1: 
1:     protected CamelContext createCamelContext() throws Exception {
1:         CamelContext camelContext = super.createCamelContext();
1:         camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false"));
1:         return camelContext;
1:     }
1: 
1:     @Override
1:     protected RouteBuilder createRouteBuilder() throws Exception {
1:         return new RouteBuilder() {
1:             @Override
1:             public void configure() throws Exception {
1:                 from("activemq:queue:foo")
1:                         .to("activemq:queue:bar")
1:                         .to("mock:result");
1:             }
1:         };
1:     }
1: 
1: }
============================================================================