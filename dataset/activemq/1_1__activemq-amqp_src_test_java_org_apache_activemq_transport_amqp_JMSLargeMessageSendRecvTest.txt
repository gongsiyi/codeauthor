1:12202c9: /**
1:12202c9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:12202c9:  * contributor license agreements.  See the NOTICE file distributed with
1:12202c9:  * this work for additional information regarding copyright ownership.
1:12202c9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:12202c9:  * (the "License"); you may not use this file except in compliance with
1:12202c9:  * the License.  You may obtain a copy of the License at
1:12202c9:  *
1:12202c9:  * http://www.apache.org/licenses/LICENSE-2.0
1:12202c9:  *
1:12202c9:  * Unless required by applicable law or agreed to in writing, software
1:12202c9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:12202c9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:12202c9:  * See the License for the specific language governing permissions and
1:12202c9:  * limitations under the License.
1:12202c9:  */
1:12202c9: package org.apache.activemq.transport.amqp;
1:12202c9: 
1:12202c9: import static org.junit.Assert.assertEquals;
1:12202c9: import static org.junit.Assert.assertNotNull;
1:12202c9: import static org.junit.Assert.assertTrue;
1:12202c9: 
1:2e2d5dd: import java.util.Arrays;
1:2e2d5dd: import java.util.Collection;
1:2e2d5dd: 
1:12202c9: import javax.jms.Connection;
1:12202c9: import javax.jms.JMSException;
1:12202c9: import javax.jms.Message;
1:12202c9: import javax.jms.MessageConsumer;
1:12202c9: import javax.jms.MessageProducer;
1:12202c9: import javax.jms.Queue;
1:12202c9: import javax.jms.Session;
1:12202c9: import javax.jms.TextMessage;
1:12202c9: 
1:2e2d5dd: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:12202c9: import org.junit.Rule;
1:12202c9: import org.junit.Test;
1:12202c9: import org.junit.rules.TestName;
1:2e2d5dd: import org.junit.runner.RunWith;
1:2e2d5dd: import org.junit.runners.Parameterized;
1:2e2d5dd: import org.junit.runners.Parameterized.Parameters;
1:12202c9: import org.slf4j.Logger;
1:12202c9: import org.slf4j.LoggerFactory;
1:12202c9: 
1:2e2d5dd: @RunWith(Parameterized.class)
1:2e2d5dd: public class JMSLargeMessageSendRecvTest extends AmqpClientTestSupport {
1:2e2d5dd: 
1:2e2d5dd:     @Parameters(name="{0}")
1:2e2d5dd:     public static Collection<Object[]> data() {
1:2e2d5dd:         return Arrays.asList(new Object[][] {
1:2e2d5dd:             {"amqp", false},
1:2e2d5dd:             {"amqp+ws", false},
1:2e2d5dd:             {"amqp+ssl", true},
1:2e2d5dd:             {"amqp+wss", true}
1:2e2d5dd:         });
1:2e2d5dd:     }
1:2e2d5dd: 
1:2e2d5dd:     public JMSLargeMessageSendRecvTest(String connectorScheme, boolean secure) {
1:2e2d5dd:         super(connectorScheme, secure);
1:2e2d5dd:     }
1:12202c9: 
1:12202c9:     @Rule
1:12202c9:     public TestName testName = new TestName();
1:12202c9: 
1:12202c9:     protected static final Logger LOG = LoggerFactory.getLogger(JMSLargeMessageSendRecvTest.class);
1:12202c9: 
1:12202c9:     private String createLargeString(int sizeInBytes) {
1:12202c9:         byte[] base = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
1:12202c9:         StringBuilder builder = new StringBuilder();
1:12202c9:         for (int i = 0; i < sizeInBytes; i++) {
1:12202c9:             builder.append(base[i % base.length]);
1:12202c9:         }
1:12202c9: 
1:12202c9:         LOG.debug("Created string with size : " + builder.toString().getBytes().length + " bytes");
1:12202c9:         return builder.toString();
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Test(timeout = 60 * 1000)
1:12202c9:     public void testSendSmallerMessages() throws JMSException {
1:12202c9:         for (int i = 512; i <= (8 * 1024); i += 512) {
1:12202c9:             doTestSendLargeMessage(i);
1:12202c9:         }
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Test(timeout = 60 * 1000)
1:12202c9:     public void testSendFixedSizedMessages() throws JMSException {
1:12202c9:         doTestSendLargeMessage(65536);
1:12202c9:         doTestSendLargeMessage(65536 * 2);
1:12202c9:         doTestSendLargeMessage(65536 * 4);
1:12202c9:     }
1:12202c9: 
1:12202c9:     @Test(timeout = 60 * 1000)
1:12202c9:     public void testSendHugeMessage() throws JMSException {
1:12202c9:         doTestSendLargeMessage(1024 * 1024 * 10);
1:12202c9:     }
1:12202c9: 
1:12202c9:     public void doTestSendLargeMessage(int expectedSize) throws JMSException{
1:12202c9:         LOG.info("doTestSendLargeMessage called with expectedSize " + expectedSize);
1:12202c9:         String payload = createLargeString(expectedSize);
1:12202c9:         assertEquals(expectedSize, payload.getBytes().length);
1:12202c9: 
1:2e2d5dd:         Connection connection = JMSClientContext.INSTANCE.createConnection(getBrokerAmqpConnectionURI());
1:12202c9:         long startTime = System.currentTimeMillis();
1:12202c9:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:12202c9:         Queue queue = session.createQueue(testName.getMethodName());
1:12202c9:         MessageProducer producer = session.createProducer(queue);
1:12202c9:         TextMessage message = session.createTextMessage();
1:12202c9:         message.setText(payload);
1:12202c9:         producer.send(message);
1:12202c9:         long endTime = System.currentTimeMillis();
1:12202c9:         LOG.info("Returned from send after {} ms", endTime - startTime);
1:12202c9: 
1:12202c9:         startTime = System.currentTimeMillis();
1:12202c9:         MessageConsumer consumer = session.createConsumer(queue);
1:12202c9:         connection.start();
1:12202c9:         LOG.info("Calling receive");
1:12202c9:         Message receivedMessage = consumer.receive();
1:12202c9:         assertNotNull(receivedMessage);
1:12202c9:         assertTrue(receivedMessage instanceof TextMessage);
1:12202c9:         TextMessage receivedTextMessage = (TextMessage) receivedMessage;
1:12202c9:         assertNotNull(receivedMessage);
1:12202c9:         endTime = System.currentTimeMillis();
1:12202c9:         LOG.info("Returned from receive after {} ms", endTime - startTime);
1:12202c9:         String receivedText = receivedTextMessage.getText();
1:12202c9:         assertEquals(expectedSize, receivedText.getBytes().length);
1:12202c9:         assertEquals(payload, receivedText);
1:12202c9:         connection.close();
1:12202c9:     }
1:12202c9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
1: public class JMSLargeMessageSendRecvTest extends AmqpClientTestSupport {
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             {"amqp", false},
1:             {"amqp+ws", false},
1:             {"amqp+ssl", true},
1:             {"amqp+wss", true}
1:         });
1:     }
1: 
1:     public JMSLargeMessageSendRecvTest(String connectorScheme, boolean secure) {
1:         super(connectorScheme, secure);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = JMSClientContext.INSTANCE.createConnection(getBrokerAmqpConnectionURI());
commit:240278d
/////////////////////////////////////////////////////////////////////////
0:         Connection connection = JMSClientContext.INSTANCE.createConnection(amqpURI);
commit:12202c9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class JMSLargeMessageSendRecvTest extends AmqpTestSupport {
1: 
1:     @Rule
1:     public TestName testName = new TestName();
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSLargeMessageSendRecvTest.class);
1: 
1:     private String createLargeString(int sizeInBytes) {
1:         byte[] base = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
1:         StringBuilder builder = new StringBuilder();
1:         for (int i = 0; i < sizeInBytes; i++) {
1:             builder.append(base[i % base.length]);
1:         }
1: 
1:         LOG.debug("Created string with size : " + builder.toString().getBytes().length + " bytes");
1:         return builder.toString();
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testSendSmallerMessages() throws JMSException {
1:         for (int i = 512; i <= (8 * 1024); i += 512) {
1:             doTestSendLargeMessage(i);
1:         }
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testSendFixedSizedMessages() throws JMSException {
1:         doTestSendLargeMessage(65536);
1:         doTestSendLargeMessage(65536 * 2);
1:         doTestSendLargeMessage(65536 * 4);
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testSendHugeMessage() throws JMSException {
1:         doTestSendLargeMessage(1024 * 1024 * 10);
1:     }
1: 
1:     public void doTestSendLargeMessage(int expectedSize) throws JMSException{
1:         LOG.info("doTestSendLargeMessage called with expectedSize " + expectedSize);
1:         String payload = createLargeString(expectedSize);
1:         assertEquals(expectedSize, payload.getBytes().length);
1: 
0:         Connection connection = JmsClientContext.INSTANCE.createConnection(amqpURI);
1:         long startTime = System.currentTimeMillis();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(testName.getMethodName());
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage message = session.createTextMessage();
1:         message.setText(payload);
1:         producer.send(message);
1:         long endTime = System.currentTimeMillis();
1:         LOG.info("Returned from send after {} ms", endTime - startTime);
1: 
1:         startTime = System.currentTimeMillis();
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         connection.start();
1:         LOG.info("Calling receive");
1:         Message receivedMessage = consumer.receive();
1:         assertNotNull(receivedMessage);
1:         assertTrue(receivedMessage instanceof TextMessage);
1:         TextMessage receivedTextMessage = (TextMessage) receivedMessage;
1:         assertNotNull(receivedMessage);
1:         endTime = System.currentTimeMillis();
1:         LOG.info("Returned from receive after {} ms", endTime - startTime);
1:         String receivedText = receivedTextMessage.getText();
1:         assertEquals(expectedSize, receivedText.getBytes().length);
1:         assertEquals(payload, receivedText);
1:         connection.close();
1:     }
1: }
============================================================================