1:e47edd7: /*
1:e47edd7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e47edd7:  * contributor license agreements.  See the NOTICE file distributed with
1:e47edd7:  * this work for additional information regarding copyright ownership.
1:e47edd7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e47edd7:  * (the "License"); you may not use this file except in compliance with
1:e47edd7:  * the License.  You may obtain a copy of the License at
1:e47edd7:  *
1:e47edd7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e47edd7:  *
1:e47edd7:  * Unless required by applicable law or agreed to in writing, software
1:e47edd7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e47edd7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e47edd7:  * See the License for the specific language governing permissions and
1:e47edd7:  * limitations under the License.
1:e47edd7:  */
1:e47edd7: package org.apache.activemq.transport.http;
1:e47edd7: 
1:e47edd7: import static org.junit.Assert.assertFalse;
1:e47edd7: import static org.junit.Assert.assertNotNull;
1:e47edd7: 
1:e47edd7: import java.util.concurrent.CountDownLatch;
1:e47edd7: import java.util.concurrent.TimeUnit;
1:e47edd7: 
1:e47edd7: import javax.jms.Connection;
1:e47edd7: import javax.jms.ExceptionListener;
1:e47edd7: import javax.jms.JMSException;
1:e47edd7: import javax.jms.MessageConsumer;
1:e47edd7: import javax.jms.MessageProducer;
1:e47edd7: import javax.jms.Queue;
1:e47edd7: import javax.jms.Session;
1:e47edd7: 
1:e47edd7: import org.apache.activemq.ActiveMQConnectionFactory;
1:e47edd7: import org.apache.activemq.broker.BrokerService;
1:e47edd7: import org.apache.activemq.broker.TransportConnector;
1:e47edd7: import org.junit.After;
1:e47edd7: import org.junit.Before;
1:e47edd7: import org.junit.Test;
1:e47edd7: import org.slf4j.Logger;
1:e47edd7: import org.slf4j.LoggerFactory;
1:e47edd7: 
1:e47edd7: public class HttpTransportConnectTimeoutTest {
1:e47edd7: 
1:e47edd7:     private static final Logger LOG = LoggerFactory.getLogger(HttpTransportConnectTimeoutTest.class);
1:e47edd7: 
1:e47edd7:     private BrokerService broker;
1:e47edd7:     private ActiveMQConnectionFactory factory;
1:e47edd7: 
1:e47edd7:     @Before
1:e47edd7:     public void setUp() throws Exception {
1:e47edd7:         broker = new BrokerService();
1:e47edd7:         TransportConnector connector = broker.addConnector(
1:e47edd7:             "http://localhost:0?trace=true&transport.connectAttemptTimeout=2000");
1:e47edd7:         broker.setPersistent(false);
1:e47edd7:         broker.setUseJmx(false);
1:e47edd7:         broker.start();
1:e47edd7: 
1:e47edd7:         String connectionUri = connector.getPublishableConnectString();
1:e47edd7:         factory = new ActiveMQConnectionFactory(connectionUri + "?trace=true");
1:e47edd7:     }
1:e47edd7: 
1:e47edd7:     @After
1:e47edd7:     public void tearDown() throws Exception {
1:e47edd7:         broker.stop();
1:e47edd7:     }
1:e47edd7: 
1:e47edd7:     @Test(timeout = 60000)
1:e47edd7:     public void testSendReceiveAfterPause() throws Exception {
1:e47edd7:         final CountDownLatch failed = new CountDownLatch(1);
1:e47edd7: 
1:e47edd7:         Connection connection = factory.createConnection();
1:e47edd7:         connection.start();
1:e47edd7:         connection.setExceptionListener(new ExceptionListener() {
1:e47edd7: 
1:e47edd7:             @Override
1:e47edd7:             public void onException(JMSException exception) {
1:e47edd7:                 LOG.info("Connection failed due to: {}", exception.getMessage());
1:e47edd7:                 failed.countDown();
1:e47edd7:             }
1:e47edd7:         });
1:e47edd7: 
1:e47edd7:         assertFalse(failed.await(3, TimeUnit.SECONDS));
1:e47edd7: 
1:e47edd7:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e47edd7:         Queue queue = session.createTemporaryQueue();
1:e47edd7:         MessageProducer producer = session.createProducer(queue);
1:e47edd7:         MessageConsumer consumer = session.createConsumer(queue);
1:e47edd7: 
1:e47edd7:         producer.send(session.createMessage());
1:e47edd7: 
1:e47edd7:         assertNotNull(consumer.receive(5000));
1:e47edd7:     }
1:e47edd7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47edd7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.http;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class HttpTransportConnectTimeoutTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(HttpTransportConnectTimeoutTest.class);
1: 
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         TransportConnector connector = broker.addConnector(
1:             "http://localhost:0?trace=true&transport.connectAttemptTimeout=2000");
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.start();
1: 
1:         String connectionUri = connector.getPublishableConnectString();
1:         factory = new ActiveMQConnectionFactory(connectionUri + "?trace=true");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendReceiveAfterPause() throws Exception {
1:         final CountDownLatch failed = new CountDownLatch(1);
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         connection.setExceptionListener(new ExceptionListener() {
1: 
1:             @Override
1:             public void onException(JMSException exception) {
1:                 LOG.info("Connection failed due to: {}", exception.getMessage());
1:                 failed.countDown();
1:             }
1:         });
1: 
1:         assertFalse(failed.await(3, TimeUnit.SECONDS));
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createTemporaryQueue();
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         producer.send(session.createMessage());
1: 
1:         assertNotNull(consumer.receive(5000));
1:     }
1: }
============================================================================