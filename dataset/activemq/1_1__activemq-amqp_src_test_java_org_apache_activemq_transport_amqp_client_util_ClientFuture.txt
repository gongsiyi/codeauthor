1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client.util;
2:72839b7: 
1:72839b7: import java.io.IOException;
1:72839b7: import java.util.concurrent.CountDownLatch;
1:72839b7: import java.util.concurrent.TimeUnit;
1:272fb2b: import java.util.concurrent.atomic.AtomicBoolean;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Asynchronous Client Future class.
1:72839b7:  */
1:272fb2b: public class ClientFuture implements AsyncResult {
1:72839b7: 
1:272fb2b:     private final AtomicBoolean completer = new AtomicBoolean();
1:272fb2b:     private final CountDownLatch latch = new CountDownLatch(1);
1:272fb2b:     private final ClientFutureSynchronization synchronization;
1:272fb2b:     private volatile Throwable error;
1:72839b7: 
1:72839b7:     public ClientFuture() {
1:272fb2b:         this(null);
1:72839b7:     }
1:72839b7: 
1:272fb2b:     public ClientFuture(ClientFutureSynchronization synchronization) {
1:272fb2b:         this.synchronization = synchronization;
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public boolean isComplete() {
1:72839b7:         return latch.getCount() == 0;
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void onFailure(Throwable result) {
1:272fb2b:         if (completer.compareAndSet(false, true)) {
1:272fb2b:             error = result;
1:272fb2b:             if (synchronization != null) {
1:272fb2b:                 synchronization.onPendingFailure(error);
1:272fb2b:             }
1:272fb2b:             latch.countDown();
1:272fb2b:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void onSuccess() {
1:272fb2b:         if (completer.compareAndSet(false, true)) {
1:272fb2b:             if (synchronization != null) {
1:272fb2b:                 synchronization.onPendingSuccess();
1:272fb2b:             }
1:272fb2b:             latch.countDown();
1:272fb2b:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Timed wait for a response to a pending operation.
1:72839b7:      *
1:72839b7:      * @param amount
1:72839b7:      *        The amount of time to wait before abandoning the wait.
1:72839b7:      * @param unit
1:72839b7:      *        The unit to use for this wait period.
1:72839b7:      *
1:72839b7:      * @throws IOException if an error occurs while waiting for the response.
1:72839b7:      */
1:72839b7:     public void sync(long amount, TimeUnit unit) throws IOException {
1:72839b7:         try {
1:72839b7:             latch.await(amount, unit);
1:72839b7:         } catch (InterruptedException e) {
1:72839b7:             Thread.interrupted();
1:72839b7:             throw IOExceptionSupport.create(e);
1:72839b7:         }
1:72839b7: 
1:72839b7:         failOnError();
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Waits for a response to some pending operation.
1:72839b7:      *
1:72839b7:      * @throws IOException if an error occurs while waiting for the response.
1:72839b7:      */
1:72839b7:     public void sync() throws IOException {
1:72839b7:         try {
1:72839b7:             latch.await();
1:72839b7:         } catch (InterruptedException e) {
1:72839b7:             Thread.interrupted();
1:72839b7:             throw IOExceptionSupport.create(e);
1:72839b7:         }
1:72839b7: 
1:72839b7:         failOnError();
1:72839b7:     }
1:72839b7: 
1:72839b7:     private void failOnError() throws IOException {
1:72839b7:         Throwable cause = error;
1:72839b7:         if (cause != null) {
1:72839b7:             throw IOExceptionSupport.create(cause);
1:72839b7:         }
1:72839b7:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:272fb2b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: public class ClientFuture implements AsyncResult {
1:     private final AtomicBoolean completer = new AtomicBoolean();
1:     private final CountDownLatch latch = new CountDownLatch(1);
1:     private final ClientFutureSynchronization synchronization;
1:     private volatile Throwable error;
1:         this(null);
1:     public ClientFuture(ClientFutureSynchronization synchronization) {
1:         this.synchronization = synchronization;
/////////////////////////////////////////////////////////////////////////
1:         if (completer.compareAndSet(false, true)) {
1:             error = result;
1:             if (synchronization != null) {
1:                 synchronization.onPendingFailure(error);
1:             }
1:             latch.countDown();
1:         }
1:         if (completer.compareAndSet(false, true)) {
1:             if (synchronization != null) {
1:                 synchronization.onPendingSuccess();
1:             }
1:             latch.countDown();
1:         }
commit:82a5839
/////////////////////////////////////////////////////////////////////////
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.util;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
0: import org.apache.activemq.util.IOExceptionSupport;
1: 
1: /**
1:  * Asynchronous Client Future class.
1:  */
0: public class ClientFuture extends WrappedAsyncResult {
1: 
0:     protected final CountDownLatch latch = new CountDownLatch(1);
0:     protected Throwable error;
1: 
1:     public ClientFuture() {
0:         super(null);
1:     }
1: 
0:     public ClientFuture(AsyncResult watcher) {
0:         super(watcher);
1:     }
1: 
1:     @Override
1:     public boolean isComplete() {
1:         return latch.getCount() == 0;
1:     }
1: 
1:     @Override
1:     public void onFailure(Throwable result) {
0:         error = result;
0:         latch.countDown();
0:         super.onFailure(result);
1:     }
1: 
1:     @Override
1:     public void onSuccess() {
0:         latch.countDown();
0:         super.onSuccess();
1:     }
1: 
1:     /**
1:      * Timed wait for a response to a pending operation.
1:      *
1:      * @param amount
1:      *        The amount of time to wait before abandoning the wait.
1:      * @param unit
1:      *        The unit to use for this wait period.
1:      *
1:      * @throws IOException if an error occurs while waiting for the response.
1:      */
1:     public void sync(long amount, TimeUnit unit) throws IOException {
1:         try {
1:             latch.await(amount, unit);
1:         } catch (InterruptedException e) {
1:             Thread.interrupted();
1:             throw IOExceptionSupport.create(e);
1:         }
1: 
1:         failOnError();
1:     }
1: 
1:     /**
1:      * Waits for a response to some pending operation.
1:      *
1:      * @throws IOException if an error occurs while waiting for the response.
1:      */
1:     public void sync() throws IOException {
1:         try {
1:             latch.await();
1:         } catch (InterruptedException e) {
1:             Thread.interrupted();
1:             throw IOExceptionSupport.create(e);
1:         }
1: 
1:         failOnError();
1:     }
1: 
1:     private void failOnError() throws IOException {
1:         Throwable cause = error;
1:         if (cause != null) {
1:             throw IOExceptionSupport.create(cause);
1:         }
1:     }
1: }
============================================================================