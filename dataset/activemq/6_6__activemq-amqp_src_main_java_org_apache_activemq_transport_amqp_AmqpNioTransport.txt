1:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
1:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
1:78265ea: 
1:cdd5150: import java.io.DataOutputStream;
1:cdd5150: import java.io.EOFException;
1:cdd5150: import java.io.IOException;
1:cdd5150: import java.net.Socket;
1:cdd5150: import java.net.URI;
1:cdd5150: import java.net.UnknownHostException;
1:cdd5150: import java.nio.ByteBuffer;
1:cdd5150: import java.nio.channels.SelectionKey;
1:cdd5150: import java.nio.channels.SocketChannel;
1:8d5b9a5: 
1:f2653e6: import javax.net.SocketFactory;
1:f2653e6: 
1:f2653e6: import org.apache.activemq.transport.nio.NIOOutputStream;
1:f2653e6: import org.apache.activemq.transport.nio.SelectorManager;
1:f2653e6: import org.apache.activemq.transport.nio.SelectorSelection;
1:f2653e6: import org.apache.activemq.transport.tcp.TcpTransport;
1:f2653e6: import org.apache.activemq.util.IOExceptionSupport;
1:f2653e6: import org.apache.activemq.util.ServiceStopper;
1:f2653e6: import org.apache.activemq.wireformat.WireFormat;
1:f2653e6: import org.slf4j.Logger;
1:f2653e6: import org.slf4j.LoggerFactory;
1:f2653e6: 
1:cdd5150: /**
1:cdd5150:  * An implementation of the {@link org.apache.activemq.transport.Transport} interface for using AMQP over NIO
1:cdd5150:  */
1:cdd5150: public class AmqpNioTransport extends TcpTransport {
1:f2653e6: 
1:87420cc:     private static final Logger LOG = LoggerFactory.getLogger(AmqpNioTransport.class);
1:f2653e6: 
1:cdd5150:     private SocketChannel channel;
1:cdd5150:     private SelectorSelection selection;
1:61a3eab:     private final AmqpFrameParser frameReader = new AmqpFrameParser(this);
1:87420cc: 
1:cdd5150:     private ByteBuffer inputBuffer;
1:78265ea: 
1:cdd5150:     public AmqpNioTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:cdd5150:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:61a3eab: 
1:61a3eab:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:8d5b9a5:     }
1:da63f3f: 
1:cdd5150:     public AmqpNioTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:cdd5150:         super(wireFormat, socket);
1:61a3eab: 
1:61a3eab:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
6:cdd5150:     }
1:da63f3f: 
1:04ee70a:     public AmqpNioTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:04ee70a:         super(wireFormat, socket, initBuffer);
1:04ee70a: 
1:04ee70a:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:04ee70a:     }
1:04ee70a: 
1:da5d0d8:     @Override
1:cdd5150:     protected void initializeStreams() throws IOException {
1:cdd5150:         channel = socket.getChannel();
1:cdd5150:         channel.configureBlocking(false);
1:cdd5150:         // listen for events telling us when the socket is readable.
1:cdd5150:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:da5d0d8:             @Override
1:cdd5150:             public void onSelect(SelectorSelection selection) {
1:cdd5150:                 if (!isStopped()) {
1:cdd5150:                     serviceRead();
1:cdd5150:                 }
1:cdd5150:             }
1:78265ea: 
1:da5d0d8:             @Override
1:cdd5150:             public void onError(SelectorSelection selection, Throwable error) {
1:f2653e6:                 LOG.trace("Error detected: {}", error.getMessage());
1:cdd5150:                 if (error instanceof IOException) {
1:cdd5150:                     onException((IOException) error);
1:8d5b9a5:                 } else {
1:cdd5150:                     onException(IOExceptionSupport.create(error));
1:8d5b9a5:                 }
1:8d5b9a5:             }
1:cdd5150:         });
1:8d5b9a5: 
1:cdd5150:         inputBuffer = ByteBuffer.allocate(8 * 1024);
1:cdd5150:         NIOOutputStream outPutStream = new NIOOutputStream(channel, 8 * 1024);
1:cdd5150:         this.dataOut = new DataOutputStream(outPutStream);
1:cdd5150:         this.buffOut = outPutStream;
1:04ee70a: 
1:04ee70a:         try {
1:04ee70a:             if (initBuffer != null) {
1:04ee70a:                 processBuffer(initBuffer.buffer, initBuffer.readSize);
1:04ee70a:             }
1:04ee70a:         } catch (IOException e) {
1:04ee70a:             onException(e);
1:04ee70a:         } catch (Throwable e) {
1:04ee70a:             onException(IOExceptionSupport.create(e));
1:04ee70a:         }
1:04ee70a: 
1:cdd5150:     }
1:8d5b9a5: 
1:8d5b9a5:     boolean magicRead = false;
1:8d5b9a5: 
1:cdd5150:     private void serviceRead() {
1:cdd5150:         try {
14:cdd5150: 
1:cdd5150:             while (isStarted()) {
1:cdd5150:                 // read channel
1:cdd5150:                 int readSize = channel.read(inputBuffer);
1:04ee70a: 
1:cdd5150:                 // channel is closed, cleanup
1:cdd5150:                 if (readSize == -1) {
1:cdd5150:                     onException(new EOFException());
1:cdd5150:                     selection.close();
1:da63f3f:                     break;
1:da63f3f:                 }
1:cdd5150:                 // nothing more to read, break
1:cdd5150:                 if (readSize == 0) {
2:cdd5150:                     break;
1:da63f3f:                 }
1:da63f3f: 
1:04ee70a:                 processBuffer(inputBuffer, readSize);
1:cdd5150:             }
1:cdd5150:         } catch (IOException e) {
1:cdd5150:             onException(e);
1:cdd5150:         } catch (Throwable e) {
1:cdd5150:             onException(IOExceptionSupport.create(e));
1:cdd5150:         }
1:cdd5150:     }
1:cdd5150: 
1:04ee70a:     protected void processBuffer(ByteBuffer buffer, int readSize) throws Exception {
1:04ee70a:         receiveCounter += readSize;
1:04ee70a: 
1:04ee70a:         buffer.flip();
1:04ee70a:         frameReader.parse(buffer);
1:04ee70a:         buffer.clear();
1:04ee70a:     }
1:04ee70a: 
1:da5d0d8:     @Override
1:cdd5150:     protected void doStart() throws Exception {
1:cdd5150:         connect();
1:cdd5150:         selection.setInterestOps(SelectionKey.OP_READ);
1:cdd5150:         selection.enable();
1:cdd5150:     }
1:cdd5150: 
1:da5d0d8:     @Override
1:cdd5150:     protected void doStop(ServiceStopper stopper) throws Exception {
1:cdd5150:         try {
1:cdd5150:             if (selection != null) {
1:cdd5150:                 selection.close();
1:cdd5150:             }
1:cdd5150:         } finally {
1:cdd5150:             super.doStop(stopper);
1:cdd5150:         }
1:cdd5150:     }
1:cdd5150: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e8a0d04
/////////////////////////////////////////////////////////////////////////
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
1:     private final AmqpFrameParser frameReader = new AmqpFrameParser(this);
1: 
1:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1: 
1:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
/////////////////////////////////////////////////////////////////////////
0:                 frameReader.parse(inputBuffer);
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.net.SocketFactory;
1: 
1: import org.apache.activemq.transport.nio.NIOOutputStream;
1: import org.apache.activemq.transport.nio.SelectorManager;
1: import org.apache.activemq.transport.nio.SelectorSelection;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: 
0:     private final AmqpNioTransportHelper amqpNioTransportHelper = new AmqpNioTransportHelper(this);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Error detected: {}", error.getMessage());
commit:da5d0d8
/////////////////////////////////////////////////////////////////////////
0:     private final DataInputStream amqpHeaderValue = new DataInputStream(new ByteArrayInputStream(new byte[]{'A', 'M', 'Q', 'P'}));
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
1:     public AmqpNioTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:         super(wireFormat, socket, initBuffer);
1: 
1:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             if (initBuffer != null) {
1:                 processBuffer(initBuffer.buffer, initBuffer.readSize);
1:             }
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (Throwable e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 processBuffer(inputBuffer, readSize);
/////////////////////////////////////////////////////////////////////////
1:     protected void processBuffer(ByteBuffer buffer, int readSize) throws Exception {
1:         receiveCounter += readSize;
1: 
1:         buffer.flip();
1:         frameReader.parse(buffer);
1:         buffer.clear();
1:     }
1: 
author:Kevin Earls
-------------------------------------------------------------------------------
commit:87420cc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.nio.NIOOutputStream;
0: import org.apache.activemq.transport.nio.SelectorManager;
0: import org.apache.activemq.transport.nio.SelectorSelection;
0: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.net.SocketFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpNioTransport.class);
0:     private AmqpNioTransportHelper amqpNioTransportHelper = new AmqpNioTransportHelper(this);
/////////////////////////////////////////////////////////////////////////
0:                 amqpNioTransportHelper.processCommand(inputBuffer);
commit:da63f3f
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private DataInputStream amqpHeaderValue = new DataInputStream(new ByteArrayInputStream(new byte[]{'A', 'M', 'Q', 'P'}));
0:     private final Integer AMQP_HEADER_VALUE = amqpHeaderValue.readInt();
/////////////////////////////////////////////////////////////////////////
0:                 while(inputBuffer.position() < inputBuffer.limit()) {
0:                     inputBuffer.mark();
0:                     int commandSize = inputBuffer.getInt();
0:                     inputBuffer.reset();
1: 
0:                     // handles buffers starting with 'A','M','Q','P' rather than size
0:                     if (commandSize == AMQP_HEADER_VALUE) {
0:                         doConsume(AmqpSupport.toBuffer(inputBuffer));
1:                         break;
1:                     }
1: 
0:                     byte[] bytes = new byte[commandSize];
0:                     ByteBuffer commandBuffer = ByteBuffer.allocate(commandSize);
0:                     inputBuffer.get(bytes, 0, commandSize);
0:                     commandBuffer.put(bytes);
0:                     commandBuffer.flip();
0:                     doConsume(AmqpSupport.toBuffer(commandBuffer));
0:                     commandBuffer.clear();
1:                 }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:8d5b9a5
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInputStream;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.nio.NIOInputStream;
/////////////////////////////////////////////////////////////////////////
0: import org.fusesource.hawtbuf.Buffer;
/////////////////////////////////////////////////////////////////////////
1:     boolean magicRead = false;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:                 if( !magicRead ) {
0:                     if( inputBuffer.remaining()>= 8 ) {
0:                         magicRead = true;
0:                         Buffer magic = new Buffer(8);
0:                         for (int i = 0; i < 8; i++) {
0:                             magic.data[i] = inputBuffer.get();
1:                         }
0:                         doConsume(new AmqpHeader(magic));
1:                     } else {
0:                         inputBuffer.flip();
0:                         continue;
1:                     }
1:                 }
1: 
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:78265ea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.net.SocketFactory;
1: 
0: import org.apache.activemq.transport.nio.NIOOutputStream;
0: import org.apache.activemq.transport.nio.SelectorManager;
0: import org.apache.activemq.transport.nio.SelectorSelection;
0: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.activemq.wireformat.WireFormat;
1: 
/////////////////////////////////////////////////////////////////////////
0:                 receiveCounter += readSize;
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
0: import org.apache.activemq.transport.nio.NIOOutputStream;
0: import org.apache.activemq.transport.nio.SelectorManager;
0: import org.apache.activemq.transport.nio.SelectorSelection;
0: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1: 
0: import javax.net.SocketFactory;
1: import java.io.DataOutputStream;
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.SelectionKey;
1: import java.nio.channels.SocketChannel;
1: 
1: /**
1:  * An implementation of the {@link org.apache.activemq.transport.Transport} interface for using AMQP over NIO
1:  */
1: public class AmqpNioTransport extends TcpTransport {
1: 
1:     private SocketChannel channel;
1:     private SelectorSelection selection;
1: 
1:     private ByteBuffer inputBuffer;
1: 
1:     public AmqpNioTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:     }
1: 
1:     public AmqpNioTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:         super(wireFormat, socket);
1:     }
1: 
1:     protected void initializeStreams() throws IOException {
1:         channel = socket.getChannel();
1:         channel.configureBlocking(false);
1:         // listen for events telling us when the socket is readable.
1:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:             public void onSelect(SelectorSelection selection) {
1:                 if (!isStopped()) {
1:                     serviceRead();
1:                 }
1:             }
1: 
1:             public void onError(SelectorSelection selection, Throwable error) {
1:                 if (error instanceof IOException) {
1:                     onException((IOException) error);
0:                 } else {
1:                     onException(IOExceptionSupport.create(error));
1:                 }
1:             }
1:         });
1: 
1:         inputBuffer = ByteBuffer.allocate(8 * 1024);
1:         NIOOutputStream outPutStream = new NIOOutputStream(channel, 8 * 1024);
1:         this.dataOut = new DataOutputStream(outPutStream);
1:         this.buffOut = outPutStream;
1:     }
1: 
1:     private void serviceRead() {
1:         try {
1: 
1:             while (isStarted()) {
1:                 // read channel
1:                 int readSize = channel.read(inputBuffer);
1:                 // channel is closed, cleanup
1:                 if (readSize == -1) {
1:                     onException(new EOFException());
1:                     selection.close();
1:                     break;
1:                 }
1:                 // nothing more to read, break
1:                 if (readSize == 0) {
1:                     break;
1:                 }
1: 
0:                 inputBuffer.flip();
0:                 doConsume(AmqpSupport.toBuffer(inputBuffer));
0:                 // clear the buffer
0:                 inputBuffer.clear();
1: 
1:             }
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (Throwable e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     protected void doStart() throws Exception {
1:         connect();
1:         selection.setInterestOps(SelectionKey.OP_READ);
1:         selection.enable();
1:     }
1: 
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         try {
1:             if (selection != null) {
1:                 selection.close();
1:             }
1:         } finally {
1:             super.doStop(stopper);
1:         }
1:     }
1: }
============================================================================