1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:6b1682f:  *      http://www.apache.org/licenses/LICENSE-2.0
4:6b1682f:  *
1:6b1682f:  * Unless required by applicable law or agreed to in writing, software
1:6b1682f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b1682f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b1682f:  * See the License for the specific language governing permissions and
1:6b1682f:  * limitations under the License.
2:6b1682f:  */
1:6b1682f: package org.apache.activemq.bugs;
5:6b1682f: 
1:6b1682f: import javax.jms.Connection;
1:6b1682f: import javax.jms.JMSException;
1:6b1682f: import javax.jms.MessageConsumer;
1:6b1682f: import javax.jms.Session;
1:6b1682f: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:74a7a8b: import org.apache.activemq.command.ActiveMQQueue;
1:74a7a8b: 
1:6b1682f: public class CraigsBugTest extends EmbeddedBrokerTestSupport {
1:74a7a8b: 
1:42e51a3:     private String connectionUri;
1:42e51a3: 
1:6b1682f:     public void testConnectionFactory() throws Exception {
1:42e51a3:         final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
1:6b1682f:         final ActiveMQQueue queue = new ActiveMQQueue("testqueue");
1:6b1682f:         final Connection conn = cf.createConnection();
1:6b1682f: 
1:6b1682f:         Runnable r = new Runnable() {
1:6b1682f:             public void run() {
1:6b1682f:                 try {
1:6b1682f:                     Session session = conn.createSession(false, 1);
1:6b1682f:                     MessageConsumer consumer = session.createConsumer(queue, null);
1:933eb2f:                     consumer.receive(1000);
1:74a7a8b:                 } catch (JMSException e) {
1:6b1682f:                     e.printStackTrace();
4:6b1682f:                 }
1:86cbdfd:             }
1:6b1682f:         };
1:6b1682f:         new Thread(r).start();
1:6b1682f:         conn.start();
1:6b1682f: 
1:6b1682f:         try {
1:6b1682f:             synchronized (this) {
1:6b1682f:                 wait(3000);
1:6b1682f:             }
1:74a7a8b:         } catch (InterruptedException e) {
1:6b1682f:             e.printStackTrace();
1:6b1682f:         }
1:6b1682f:     }
1:6b1682f: 
1:6b1682f:     protected void setUp() throws Exception {
1:42e51a3:         bindAddress = "tcp://localhost:0";
1:6b1682f:         super.setUp();
1:42e51a3: 
1:42e51a3:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:6b1682f:     }
1:74a7a8b: 
1:6b1682f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private String connectionUri;
1: 
1:         final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
/////////////////////////////////////////////////////////////////////////
1:         bindAddress = "tcp://localhost:0";
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:                     consumer.receive(1000);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (InterruptedException e) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:6b1682f
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
0: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
0: /**
1:  * 
0:  * @version $Revision: $
1:  */
1: public class CraigsBugTest extends EmbeddedBrokerTestSupport {
1:     
1:     public void testConnectionFactory() throws Exception {
0:         final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         final ActiveMQQueue queue = new ActiveMQQueue("testqueue");
1:         final Connection conn = cf.createConnection();
1: 
1:         Runnable r = new Runnable() {
1:             public void run() {
1:                 try {
1:                     Session session = conn.createSession(false, 1);
1:                     MessageConsumer consumer = session.createConsumer(queue, null);
0:                     Message msg = consumer.receive(1000);
1:                 }
0:                 catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1:         new Thread(r).start();
1:         conn.start();
1: 
1:         try {
1:             synchronized (this) {
1:                 wait(3000);
1:             }
1:         }
0:         catch (InterruptedException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://localhost:61616";
1:         super.setUp();
1:     }
1:     
1:     
1: }
============================================================================