1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
6:d29ca2a: 
1:d29ca2a: import java.util.List;
1:d29ca2a: import java.util.Vector;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:fe89b02: import javax.jms.TemporaryQueue;
1:fe89b02: import javax.jms.TemporaryTopic;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.test.TestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsTopicRequestReplyTest extends TestSupport implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicRequestReplyTest.class);
1:d29ca2a: 
1:933eb2f:     protected boolean useAsyncConsume;
1:d29ca2a:     private Connection serverConnection;
1:d29ca2a:     private Connection clientConnection;
1:d29ca2a:     private MessageProducer replyProducer;
1:d29ca2a:     private Session serverSession;
1:d29ca2a:     private Destination requestDestination;
1:933eb2f:     private List<JMSException> failures = new Vector<JMSException>();
1:d29ca2a:     private boolean dynamicallyCreateProducer;
1:d29ca2a:     private String clientSideClientID;
1:d29ca2a: 
1:d29ca2a:     public void testSendAndReceive() throws Exception {
1:d29ca2a:         clientConnection = createConnection();
1:d29ca2a:         clientConnection.setClientID("ClientConnection:" + getSubject());
1:d29ca2a: 
1:74a7a8b:         Session session = clientConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:d29ca2a:         clientConnection.start();
1:d29ca2a: 
1:d29ca2a:         Destination replyDestination = createTemporaryDestination(session);
1:d29ca2a: 
1:d29ca2a:         // lets test the destination
1:d29ca2a:         clientSideClientID = clientConnection.getClientID();
1:74a7a8b: 
1:74a7a8b:         // TODO
1:74a7a8b:         // String value = ActiveMQDestination.getClientId((ActiveMQDestination)
1:74a7a8b:         // replyDestination);
1:74a7a8b:         // assertEquals("clientID from the temporary destination must be the
1:74a7a8b:         // same", clientSideClientID, value);
1:933eb2f:         LOG.info("Both the clientID and destination clientID match properly: " + clientSideClientID);
1:d29ca2a: 
1:d29ca2a:         /* build queues */
1:74a7a8b:         MessageProducer requestProducer = session.createProducer(requestDestination);
1:74a7a8b:         MessageConsumer replyConsumer = session.createConsumer(replyDestination);
1:d29ca2a: 
1:d29ca2a:         /* build requestmessage */
1:d29ca2a:         TextMessage requestMessage = session.createTextMessage("Olivier");
1:d29ca2a:         requestMessage.setJMSReplyTo(replyDestination);
1:d29ca2a:         requestProducer.send(requestMessage);
1:d29ca2a: 
1:933eb2f:         LOG.info("Sent request.");
1:933eb2f:         LOG.info(requestMessage.toString());
1:d29ca2a: 
1:d29ca2a:         Message msg = replyConsumer.receive(5000);
1:d29ca2a: 
1:d29ca2a:         if (msg instanceof TextMessage) {
1:74a7a8b:             TextMessage replyMessage = (TextMessage)msg;
1:933eb2f:             LOG.info("Received reply.");
1:933eb2f:             LOG.info(replyMessage.toString());
1:d29ca2a:             assertEquals("Wrong message content", "Hello: Olivier", replyMessage.getText());
1:74a7a8b:         } else {
1:d29ca2a:             fail("Should have received a reply by now");
5:d29ca2a:         }
1:fe89b02:         replyConsumer.close();
1:fe89b02:         deleteTemporaryDestination(replyDestination);
1:d29ca2a: 
1:d29ca2a:         assertEquals("Should not have had any failures: " + failures, 0, failures.size());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSendAndReceiveWithDynamicallyCreatedProducer() throws Exception {
1:d29ca2a:         dynamicallyCreateProducer = true;
1:d29ca2a:         testSendAndReceive();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Use the asynchronous subscription mechanism
1:d29ca2a:      */
1:d29ca2a:     public void onMessage(Message message) {
1:d29ca2a:         try {
1:74a7a8b:             TextMessage requestMessage = (TextMessage)message;
1:d29ca2a: 
1:933eb2f:             LOG.info("Received request.");
1:933eb2f:             LOG.info(requestMessage.toString());
1:d29ca2a: 
1:d29ca2a:             Destination replyDestination = requestMessage.getJMSReplyTo();
1:d29ca2a: 
1:74a7a8b:             // TODO
1:74a7a8b:             // String value =
1:74a7a8b:             // ActiveMQDestination.getClientId((ActiveMQDestination)
1:74a7a8b:             // replyDestination);
1:74a7a8b:             // assertEquals("clientID from the temporary destination must be the
1:74a7a8b:             // same", clientSideClientID, value);
1:d29ca2a: 
1:d29ca2a:             TextMessage replyMessage = serverSession.createTextMessage("Hello: " + requestMessage.getText());
1:d29ca2a: 
1:d29ca2a:             replyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());
1:d29ca2a: 
1:d29ca2a:             if (dynamicallyCreateProducer) {
1:d29ca2a:                 replyProducer = serverSession.createProducer(replyDestination);
1:d29ca2a:                 replyProducer.send(replyMessage);
1:74a7a8b:             } else {
1:d29ca2a:                 replyProducer.send(replyDestination, replyMessage);
1:d29ca2a:             }
1:d29ca2a: 
1:933eb2f:             LOG.info("Sent reply.");
1:933eb2f:             LOG.info(replyMessage.toString());
1:74a7a8b:         } catch (JMSException e) {
1:d29ca2a:             onException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Use the synchronous subscription mechanism
1:d29ca2a:      */
1:d29ca2a:     protected void syncConsumeLoop(MessageConsumer requestConsumer) {
1:d29ca2a:         try {
1:d29ca2a:             Message message = requestConsumer.receive(5000);
1:d29ca2a:             if (message != null) {
1:d29ca2a:                 onMessage(message);
1:74a7a8b:             } else {
1:933eb2f:                 LOG.error("No message received");
1:d29ca2a:             }
1:74a7a8b:         } catch (JMSException e) {
1:d29ca2a:             onException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a: 
1:d29ca2a:         serverConnection = createConnection();
1:d29ca2a:         serverConnection.setClientID("serverConnection:" + getSubject());
1:d29ca2a:         serverSession = serverConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:d29ca2a:         replyProducer = serverSession.createProducer(null);
1:d29ca2a: 
1:d29ca2a:         requestDestination = createDestination(serverSession);
1:d29ca2a: 
1:d29ca2a:         /* build queues */
1:d29ca2a:         final MessageConsumer requestConsumer = serverSession.createConsumer(requestDestination);
1:d29ca2a:         if (useAsyncConsume) {
1:d29ca2a:             requestConsumer.setMessageListener(this);
1:230a86c:         } else {
1:d29ca2a:             Thread thread = new Thread(new Runnable() {
1:d29ca2a:                 public void run() {
1:d29ca2a:                     syncConsumeLoop(requestConsumer);
1:d29ca2a:                 }
1:d29ca2a:             });
1:d29ca2a:             thread.start();
1:d29ca2a:         }
1:d29ca2a:         serverConnection.start();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a: 
1:d29ca2a:         serverConnection.close();
1:d29ca2a:         clientConnection.stop();
1:d29ca2a:         clientConnection.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void onException(JMSException e) {
1:933eb2f:         LOG.info("Caught: " + e);
1:d29ca2a:         e.printStackTrace();
1:d29ca2a:         failures.add(e);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Destination createDestination(Session session) throws JMSException {
1:d29ca2a:         if (topic) {
1:d29ca2a:             return session.createTopic(getSubject());
1:d29ca2a:         }
1:d29ca2a:         return session.createQueue(getSubject());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Destination createTemporaryDestination(Session session) throws JMSException {
1:d29ca2a:         if (topic) {
1:d29ca2a:             return session.createTemporaryTopic();
1:d29ca2a:         }
1:d29ca2a:         return session.createTemporaryQueue();
1:d29ca2a:     }
1:d29ca2a:     
1:fe89b02:     protected void deleteTemporaryDestination(Destination dest) throws JMSException {
1:fe89b02:         if (topic) {
1:fe89b02:             ((TemporaryTopic)dest).delete();
1:fe89b02:         } else {
1:fe89b02:             ((TemporaryQueue)dest).delete();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(JmsTopicRequestReplyTest.class);
1:     protected boolean useAsyncConsume;
1:     private List<JMSException> failures = new Vector<JMSException>();
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Both the clientID and destination clientID match properly: " + clientSideClientID);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sent request.");
1:         LOG.info(requestMessage.toString());
1:             LOG.info("Received reply.");
1:             LOG.info(replyMessage.toString());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Received request.");
1:             LOG.info(requestMessage.toString());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Sent reply.");
1:             LOG.info(replyMessage.toString());
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("No message received");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Caught: " + e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         Session session = clientConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         // TODO
1:         // String value = ActiveMQDestination.getClientId((ActiveMQDestination)
1:         // replyDestination);
1:         // assertEquals("clientID from the temporary destination must be the
1:         // same", clientSideClientID, value);
1:         MessageProducer requestProducer = session.createProducer(requestDestination);
1:         MessageConsumer replyConsumer = session.createConsumer(replyDestination);
/////////////////////////////////////////////////////////////////////////
1:             TextMessage replyMessage = (TextMessage)msg;
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             TextMessage requestMessage = (TextMessage)message;
1:             // TODO
1:             // String value =
1:             // ActiveMQDestination.getClientId((ActiveMQDestination)
1:             // replyDestination);
1:             // assertEquals("clientID from the temporary destination must be the
1:             // same", clientSideClientID, value);
/////////////////////////////////////////////////////////////////////////
1:             } else {
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:             } else {
1:         } catch (JMSException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     protected boolean useAsyncConsume;
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.List;
1: import java.util.Vector;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.test.TestSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class JmsTopicRequestReplyTest extends TestSupport implements MessageListener {
0:     private final Log log = LogFactory.getLog(getClass());
1: 
1:     private Connection serverConnection;
1:     private Connection clientConnection;
1:     private MessageProducer replyProducer;
1:     private Session serverSession;
1:     private Destination requestDestination;
0:     private List failures = new Vector();
1:     private boolean dynamicallyCreateProducer;
0:     protected boolean useAsyncConsume = false;
1:     private String clientSideClientID;
1: 
1:     public void testSendAndReceive() throws Exception {
1:         clientConnection = createConnection();
1:         clientConnection.setClientID("ClientConnection:" + getSubject());
1: 
0:         Session session = clientConnection.createSession(false,
0:                 Session.AUTO_ACKNOWLEDGE);
1: 
1:         clientConnection.start();
1: 
1:         Destination replyDestination = createTemporaryDestination(session);
1: 
1: 
1:         // lets test the destination
1:         clientSideClientID = clientConnection.getClientID();
1:         
0:         //TODO
0:        //String value = ActiveMQDestination.getClientId((ActiveMQDestination) replyDestination);
0:         //assertEquals("clientID from the temporary destination must be the same", clientSideClientID, value);
0:         log.info("Both the clientID and destination clientID match properly: " + clientSideClientID);
1: 
1: 
1:         /* build queues */
0:         MessageProducer requestProducer =
0:                 session.createProducer(requestDestination);
0:         MessageConsumer replyConsumer =
0:                 session.createConsumer(replyDestination);
1: 
1: 
1:         /* build requestmessage */
1:         TextMessage requestMessage = session.createTextMessage("Olivier");
1:         requestMessage.setJMSReplyTo(replyDestination);
1:         requestProducer.send(requestMessage);
1: 
0:         log.info("Sent request.");
0:         log.info(requestMessage.toString());
1: 
1:         Message msg = replyConsumer.receive(5000);
1: 
1: 
1:         if (msg instanceof TextMessage) {
0:             TextMessage replyMessage = (TextMessage) msg;
0:             log.info("Received reply.");
0:             log.info(replyMessage.toString());
1:             assertEquals("Wrong message content", "Hello: Olivier", replyMessage.getText());
1:         }
0:         else {
1:             fail("Should have received a reply by now");
1:         }
1: 
1:         assertEquals("Should not have had any failures: " + failures, 0, failures.size());
1:     }
1: 
1:     public void testSendAndReceiveWithDynamicallyCreatedProducer() throws Exception {
1:         dynamicallyCreateProducer = true;
1:         testSendAndReceive();
1:     }
1: 
1:     /**
1:      * Use the asynchronous subscription mechanism
1:      */
1:     public void onMessage(Message message) {
1:         try {
0:             TextMessage requestMessage = (TextMessage) message;
1: 
0:             log.info("Received request.");
0:             log.info(requestMessage.toString());
1: 
1:             Destination replyDestination = requestMessage.getJMSReplyTo();
1: 
0:             //TODO 
0:             //String value = ActiveMQDestination.getClientId((ActiveMQDestination) replyDestination);
0:             //assertEquals("clientID from the temporary destination must be the same", clientSideClientID, value);
1: 
1:             TextMessage replyMessage = serverSession.createTextMessage("Hello: " + requestMessage.getText());
1: 
1:             replyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());
1: 
1:             if (dynamicallyCreateProducer) {
1:                 replyProducer = serverSession.createProducer(replyDestination);
1:                 replyProducer.send(replyMessage);
1:             }
0:             else {
1:                 replyProducer.send(replyDestination, replyMessage);
1:             }
1: 
0:             log.info("Sent reply.");
0:             log.info(replyMessage.toString());
1:         }
0:         catch (JMSException e) {
1:             onException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Use the synchronous subscription mechanism
1:      */
1:     protected void syncConsumeLoop(MessageConsumer requestConsumer) {
1:         try {
1:             Message message = requestConsumer.receive(5000);
1:             if (message != null) {
1:                 onMessage(message);
1:             }
0:             else {
0:                 log.error("No message received");
1:             }
1:         }
0:         catch (JMSException e) {
1:             onException(e);
1:         }
1:     }
1: 
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         serverConnection = createConnection();
1:         serverConnection.setClientID("serverConnection:" + getSubject());
1:         serverSession = serverConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         replyProducer = serverSession.createProducer(null);
1: 
1:         requestDestination = createDestination(serverSession);
1: 
1:         /* build queues */
1:         final MessageConsumer requestConsumer = serverSession.createConsumer(requestDestination);
1:         if (useAsyncConsume) {
1:             requestConsumer.setMessageListener(this);
1:         }
0:         else {
1:             Thread thread = new Thread(new Runnable() {
1:                 public void run() {
1:                     syncConsumeLoop(requestConsumer);
1:                 }
1:             });
1:             thread.start();
1:         }
1:         serverConnection.start();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1: 
1:         serverConnection.close();
1:         clientConnection.stop();
1:         clientConnection.close();
1:     }
1: 
1:     protected void onException(JMSException e) {
0:         log.info("Caught: " + e);
1:         e.printStackTrace();
1:         failures.add(e);
1:     }
1: 
1:     protected Destination createDestination(Session session) throws JMSException {
1:         if (topic) {
1:             return session.createTopic(getSubject());
1:         }
1:         return session.createQueue(getSubject());
1:     }
1: 
1:     protected Destination createTemporaryDestination(Session session) throws JMSException {
1:         if (topic) {
1:             return session.createTemporaryTopic();
1:         }
1:         return session.createTemporaryQueue();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicRequestReplyTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:fe89b02
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
/////////////////////////////////////////////////////////////////////////
1:         replyConsumer.close();
1:         deleteTemporaryDestination(replyDestination);
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected void deleteTemporaryDestination(Destination dest) throws JMSException {
1:         if (topic) {
1:             ((TemporaryTopic)dest).delete();
1:         } else {
1:             ((TemporaryQueue)dest).delete();
0:         }
0:     }
============================================================================