1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq.java;
2:43c3cae: 
1:43c3cae: import static org.junit.Assert.assertEquals;
1:bab0887: import static org.junit.Assert.assertFalse;
1:bab0887: import static org.junit.Assert.assertNotNull;
1:43c3cae: import static org.junit.Assert.assertSame;
1:43c3cae: import static org.junit.Assert.assertTrue;
1:bab0887: import static org.junit.Assert.fail;
1:43c3cae: 
1:43c3cae: import java.net.URI;
1:43c3cae: import java.util.Arrays;
1:43c3cae: import java.util.HashSet;
1:43c3cae: import java.util.concurrent.TimeUnit;
1:43c3cae: 
1:bab0887: import javax.management.InstanceNotFoundException;
1:bab0887: 
1:43c3cae: import org.apache.activemq.RuntimeConfigTestSupport;
1:43c3cae: import org.apache.activemq.broker.BrokerPlugin;
1:43c3cae: import org.apache.activemq.broker.BrokerService;
1:43c3cae: import org.apache.activemq.command.ActiveMQDestination;
1:43c3cae: import org.apache.activemq.command.ActiveMQQueue;
1:43c3cae: import org.apache.activemq.command.ActiveMQTopic;
1:43c3cae: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:43c3cae: import org.apache.activemq.network.NetworkConnector;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1:43c3cae: import org.apache.activemq.util.Wait;
1:43c3cae: import org.junit.Test;
1:43c3cae: 
1:43c3cae: public class JavaNetworkConnectorTest extends RuntimeConfigTestSupport {
1:43c3cae: 
1:43c3cae:     public static final int SLEEP = 2; // seconds
1:43c3cae:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1:43c3cae: 
1:43c3cae:     public void startBroker(BrokerService brokerService) throws Exception {
1:43c3cae:         this.brokerService = brokerService;
1:43c3cae:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin()});
1:43c3cae:         brokerService.setPersistent(false);
1:43c3cae:         brokerService.start();
1:43c3cae:         brokerService.waitUntilStarted();
1:43c3cae: 
1:43c3cae:         javaConfigBroker =
1:43c3cae:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1:43c3cae: 
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testNew() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1:43c3cae:         DiscoveryNetworkConnector nc = createNetworkConnector();
1:43c3cae: 
1:43c3cae:         javaConfigBroker.addNetworkConnector(nc);
1:43c3cae: 
1:43c3cae:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:43c3cae:             @Override
1:43c3cae:             public boolean isSatisified() throws Exception {
1:43c3cae:                 return 1 == brokerService.getNetworkConnectors().size();
1:43c3cae:             }
1:43c3cae:         }));
1:43c3cae: 
1:43c3cae:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:43c3cae:         javaConfigBroker.addNetworkConnector(nc);
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
1:43c3cae:         assertSame("same instance", networkConnector, brokerService.getNetworkConnectors().get(0));
1:43c3cae: 
1:43c3cae:         // verify nested elements
1:43c3cae:         assertEquals("has exclusions", 2, networkConnector.getExcludedDestinations().size());
1:43c3cae: 
1:43c3cae:         assertEquals("one statically included", 1, networkConnector.getStaticallyIncludedDestinations().size());
1:43c3cae:         assertEquals("one dynamically included", 1, networkConnector.getDynamicallyIncludedDestinations().size());
1:43c3cae:         assertEquals("one durable", 1, networkConnector.getDurableDestinations().size());
1:bab0887:         assertFalse(networkConnector.getBrokerName().isEmpty());
1:bab0887: 
1:bab0887:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(networkConnector)));
1:43c3cae: 
1:43c3cae:     }
1:43c3cae: 
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testMod() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1:43c3cae: 
1:43c3cae:         DiscoveryNetworkConnector nc = createNetworkConnector();
1:43c3cae:         javaConfigBroker.addNetworkConnector(nc);
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         assertEquals("one network connectors", 1, brokerService.getNetworkConnectors().size());
1:43c3cae: 
1:43c3cae:         // track the original
1:43c3cae:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:43c3cae:         assertEquals("network ttl is default", 1, networkConnector.getNetworkTTL());
1:bab0887:         assertNotNull(networkConnector.getBrokerName());
1:bab0887:         assertNotNull(networkConnector.getBrokerURL());
1:43c3cae: 
1:43c3cae:         nc.setNetworkTTL(2);
1:43c3cae:         javaConfigBroker.updateNetworkConnector(nc);
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         assertEquals("still one network connectors", 1, brokerService.getNetworkConnectors().size());
1:43c3cae: 
1:43c3cae:         NetworkConnector modNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:43c3cae:         assertEquals("got ttl update", 2, modNetworkConnector.getNetworkTTL());
1:43c3cae: 
1:43c3cae:         // apply again - ensure no change
1:43c3cae:         javaConfigBroker.updateNetworkConnector(nc);
1:43c3cae:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
1:43c3cae:         assertSame("same instance", modNetworkConnector, brokerService.getNetworkConnectors().get(0));
1:bab0887:         assertFalse(modNetworkConnector.getBrokerName().isEmpty());
1:bab0887: 
1:bab0887:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(modNetworkConnector)));
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testRemove() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1:43c3cae: 
1:43c3cae:         DiscoveryNetworkConnector nc1 = new DiscoveryNetworkConnector();
1:43c3cae:         nc1.setUri(new URI("static:(tcp://localhost:5555)"));
1:43c3cae:         nc1.setNetworkTTL(1);
1:43c3cae:         nc1.setName("one");
1:43c3cae: 
1:43c3cae:         DiscoveryNetworkConnector nc2 = new DiscoveryNetworkConnector();
1:43c3cae:         nc2.setUri(new URI("static:(tcp://localhost:5555)"));
1:43c3cae:         nc2.setNetworkTTL(1);
1:bab0887:         nc2.setName("two");
1:43c3cae: 
1:43c3cae:         javaConfigBroker.addNetworkConnector(nc1);
1:43c3cae:         javaConfigBroker.addNetworkConnector(nc2);
1:43c3cae: 
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         assertEquals("correct network connectors", 2, brokerService.getNetworkConnectors().size());
1:43c3cae: 
1:43c3cae:         javaConfigBroker.removeNetworkConnector(nc2);
1:43c3cae: 
1:43c3cae:         assertTrue("expected mod on time", Wait.waitFor(new Wait.Condition() {
1:43c3cae:             @Override
1:43c3cae:             public boolean isSatisified() throws Exception {
1:43c3cae:                 return 1 == brokerService.getNetworkConnectors().size();
1:43c3cae:             }
1:43c3cae:         }));
1:43c3cae: 
1:43c3cae:         NetworkConnector remainingNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:43c3cae:         assertEquals("name match", "one", remainingNetworkConnector.getName());
1:bab0887: 
1:bab0887:         try {
1:bab0887:             brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(nc2));
1:bab0887:             fail("mbean for nc2 should not exist");
1:bab0887:         } catch (InstanceNotFoundException e) {
1:bab0887:             //should throw exception
1:bab0887:         }
1:bab0887: 
1:bab0887:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(nc1)));
1:bab0887: 
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     private DiscoveryNetworkConnector createNetworkConnector() throws Exception {
1:43c3cae:         DiscoveryNetworkConnector nc = new DiscoveryNetworkConnector();
1:43c3cae:         nc.setUri(new URI("static:(tcp://localhost:5555)"));
1:43c3cae:         nc.setNetworkTTL(1);
1:43c3cae:         nc.setName("one");
1:43c3cae:         nc.setExcludedDestinations(Arrays.asList(new ActiveMQTopic("LAN.>"), new ActiveMQQueue("LAN.>")));
1:43c3cae:         nc.setDynamicallyIncludedDestinations(Arrays.<ActiveMQDestination>asList(new ActiveMQQueue("DynamicallyIncluded.*")));
1:43c3cae:         nc.setStaticallyIncludedDestinations(Arrays.<ActiveMQDestination>asList(new ActiveMQTopic("StaticallyIncluded.*")));
1:43c3cae:         nc.setDurableDestinations(new HashSet<>(Arrays.<ActiveMQDestination>asList(new ActiveMQTopic("durableDest"))));
1:43c3cae:         return nc;
1:43c3cae:     }
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bab0887
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: import javax.management.InstanceNotFoundException;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(networkConnector.getBrokerName().isEmpty());
1: 
1:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(networkConnector)));
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(networkConnector.getBrokerName());
1:         assertNotNull(networkConnector.getBrokerURL());
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(modNetworkConnector.getBrokerName().isEmpty());
1: 
1:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(modNetworkConnector)));
/////////////////////////////////////////////////////////////////////////
1:         nc2.setName("two");
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(nc2));
1:             fail("mbean for nc2 should not exist");
1:         } catch (InstanceNotFoundException e) {
1:             //should throw exception
1:         }
1: 
1:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(nc1)));
1: 
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.java;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URI;
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.RuntimeConfigTestSupport;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
1: public class JavaNetworkConnectorTest extends RuntimeConfigTestSupport {
1: 
1:     public static final int SLEEP = 2; // seconds
1:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1: 
1:     public void startBroker(BrokerService brokerService) throws Exception {
1:         this.brokerService = brokerService;
1:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin()});
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         javaConfigBroker =
1:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1: 
1:     }
1: 
1:     @Test
1:     public void testNew() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1: 
1:         DiscoveryNetworkConnector nc = createNetworkConnector();
1: 
1:         javaConfigBroker.addNetworkConnector(nc);
1: 
1:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == brokerService.getNetworkConnectors().size();
1:             }
1:         }));
1: 
1:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:         javaConfigBroker.addNetworkConnector(nc);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
1:         assertSame("same instance", networkConnector, brokerService.getNetworkConnectors().get(0));
1: 
1:         // verify nested elements
1:         assertEquals("has exclusions", 2, networkConnector.getExcludedDestinations().size());
1: 
1:         assertEquals("one statically included", 1, networkConnector.getStaticallyIncludedDestinations().size());
1:         assertEquals("one dynamically included", 1, networkConnector.getDynamicallyIncludedDestinations().size());
1:         assertEquals("one durable", 1, networkConnector.getDurableDestinations().size());
1: 
1:     }
1: 
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1: 
1:         DiscoveryNetworkConnector nc = createNetworkConnector();
1:         javaConfigBroker.addNetworkConnector(nc);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         assertEquals("one network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         // track the original
1:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:         assertEquals("network ttl is default", 1, networkConnector.getNetworkTTL());
1: 
1:         nc.setNetworkTTL(2);
1:         javaConfigBroker.updateNetworkConnector(nc);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         assertEquals("still one network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         NetworkConnector modNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:         assertEquals("got ttl update", 2, modNetworkConnector.getNetworkTTL());
1: 
1:         // apply again - ensure no change
1:         javaConfigBroker.updateNetworkConnector(nc);
1:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
1:         assertSame("same instance", modNetworkConnector, brokerService.getNetworkConnectors().get(0));
1:     }
1: 
1:     @Test
1:     public void testRemove() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1: 
1:         DiscoveryNetworkConnector nc1 = new DiscoveryNetworkConnector();
1:         nc1.setUri(new URI("static:(tcp://localhost:5555)"));
1:         nc1.setNetworkTTL(1);
1:         nc1.setName("one");
1: 
1:         DiscoveryNetworkConnector nc2 = new DiscoveryNetworkConnector();
1:         nc2.setUri(new URI("static:(tcp://localhost:5555)"));
1:         nc2.setNetworkTTL(1);
0:         nc2.setName("one");
1: 
1:         javaConfigBroker.addNetworkConnector(nc1);
1:         javaConfigBroker.addNetworkConnector(nc2);
1: 
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         assertEquals("correct network connectors", 2, brokerService.getNetworkConnectors().size());
1: 
1:         javaConfigBroker.removeNetworkConnector(nc2);
1: 
1:         assertTrue("expected mod on time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == brokerService.getNetworkConnectors().size();
1:             }
1:         }));
1: 
1:         NetworkConnector remainingNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:         assertEquals("name match", "one", remainingNetworkConnector.getName());
1:     }
1: 
1:     private DiscoveryNetworkConnector createNetworkConnector() throws Exception {
1:         DiscoveryNetworkConnector nc = new DiscoveryNetworkConnector();
1:         nc.setUri(new URI("static:(tcp://localhost:5555)"));
1:         nc.setNetworkTTL(1);
1:         nc.setName("one");
1:         nc.setExcludedDestinations(Arrays.asList(new ActiveMQTopic("LAN.>"), new ActiveMQQueue("LAN.>")));
1:         nc.setDynamicallyIncludedDestinations(Arrays.<ActiveMQDestination>asList(new ActiveMQQueue("DynamicallyIncluded.*")));
1:         nc.setStaticallyIncludedDestinations(Arrays.<ActiveMQDestination>asList(new ActiveMQTopic("StaticallyIncluded.*")));
1:         nc.setDurableDestinations(new HashSet<>(Arrays.<ActiveMQDestination>asList(new ActiveMQTopic("durableDest"))));
1:         return nc;
1:     }
1: }
============================================================================