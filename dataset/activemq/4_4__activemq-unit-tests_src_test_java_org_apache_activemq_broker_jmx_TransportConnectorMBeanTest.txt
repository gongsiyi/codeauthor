1:c051381: /**
1:c051381:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c051381:  * contributor license agreements.  See the NOTICE file distributed with
1:c051381:  * this work for additional information regarding copyright ownership.
1:c051381:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c051381:  * (the "License"); you may not use this file except in compliance with
1:c051381:  * the License.  You may obtain a copy of the License at
1:c051381:  *
1:c051381:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c051381:  *
1:c051381:  * Unless required by applicable law or agreed to in writing, software
1:c051381:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c051381:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c051381:  * See the License for the specific language governing permissions and
1:c051381:  * limitations under the License.
1:c051381:  */
1:c051381: package org.apache.activemq.broker.jmx;
2:c051381: 
1:50ec158: import static junit.framework.TestCase.assertTrue;
1:c7d559f: import static org.junit.Assert.assertEquals;
1:c7d559f: 
1:c051381: import java.net.Socket;
1:c051381: import java.util.Set;
1:c7d559f: 
1:c051381: import javax.management.ObjectName;
1:c7d559f: 
1:c051381: import org.apache.activemq.ActiveMQConnection;
1:c051381: import org.apache.activemq.ActiveMQConnectionFactory;
1:c051381: import org.apache.activemq.broker.BrokerService;
1:50ec158: import org.apache.activemq.network.NetworkConnector;
1:c051381: import org.apache.activemq.util.JMXSupport;
1:50ec158: import org.apache.activemq.util.Wait;
1:c051381: import org.junit.After;
1:c051381: import org.junit.Test;
1:c051381: import org.slf4j.Logger;
1:c051381: import org.slf4j.LoggerFactory;
1:c051381: 
1:c051381: public class TransportConnectorMBeanTest {
1:c051381:     private static final Logger LOG = LoggerFactory.getLogger(TransportConnectorMBeanTest.class);
1:c051381: 
1:c051381:     BrokerService broker;
1:c051381: 
1:c051381:     @Test
1:c051381:     public void verifyRemoteAddressInMbeanName() throws Exception {
1:c051381:         doVerifyRemoteAddressInMbeanName(true);
1:c051381:     }
1:c051381: 
1:c051381:     @Test
1:c051381:     public void verifyRemoteAddressNotInMbeanName() throws Exception {
1:c051381:         doVerifyRemoteAddressInMbeanName(false);
1:c051381:     }
1:c051381: 
1:50ec158:     @Test
1:50ec158:     public void verifyClientIdNetwork() throws Exception {
1:50ec158:         doVerifyClientIdNetwork(false);
1:50ec158:     }
1:50ec158: 
1:50ec158:     @Test
1:50ec158:     public void verifyClientIdDuplexNetwork() throws Exception {
1:50ec158:         doVerifyClientIdNetwork(true);
1:50ec158:     }
1:50ec158: 
1:50ec158:     private void doVerifyClientIdNetwork(boolean duplex) throws Exception {
1:50ec158:         createBroker(true);
1:50ec158: 
1:50ec158:         BrokerService networked = new BrokerService();
1:50ec158:         networked.setBrokerName("networked");
1:50ec158:         networked.setPersistent(false);
1:50ec158:         NetworkConnector nc = networked.addNetworkConnector("static:" + broker.getTransportConnectors().get(0).getPublishableConnectString());
1:50ec158:         nc.setDuplex(duplex);
1:50ec158:         networked.start();
1:50ec158: 
1:50ec158:         try {
1:50ec158:             assertTrue("presence of mbean with clientId", Wait.waitFor(new Wait.Condition() {
1:50ec158:                 @Override
1:50ec158:                 public boolean isSatisified() throws Exception {
1:50ec158:                     Set<ObjectName> registeredMbeans = getRegisteredMbeans();
1:50ec158:                     return match("_outbound", registeredMbeans);
1:50ec158:                 }
1:50ec158:             }));
1:50ec158: 
1:50ec158:         } finally {
1:50ec158:             networked.stop();
1:50ec158:         }
1:50ec158:     }
1:50ec158: 
1:c051381:     private void doVerifyRemoteAddressInMbeanName(boolean allowRemoteAddress) throws Exception {
1:c051381:         createBroker(allowRemoteAddress);
1:c051381:         ActiveMQConnection connection = createConnection();
1:c051381:         Set<ObjectName> registeredMbeans = getRegisteredMbeans();
1:aaa81de:         assertEquals("presence of mbean with clientId", true, match(connection.getClientID(), registeredMbeans));
1:c051381:         assertEquals("presence of mbean with local port", allowRemoteAddress, match(extractLocalPort(connection), registeredMbeans));
1:c051381:     }
1:c051381: 
1:c051381:     @After
1:c051381:     public void stopBroker() throws Exception {
1:c051381:         if (broker != null) {
1:c051381:             broker.stop();
1:c051381:         }
1:c051381:     }
1:c051381: 
1:c051381:     private boolean match(String s, Set<ObjectName> registeredMbeans) {
1:c051381:         String encodedName = JMXSupport.encodeObjectNamePart(s);
1:c051381:         for (ObjectName name : registeredMbeans) {
1:c051381:             LOG.info("checking for match:" + encodedName + ", with: " + name.toString());
1:c051381:             if (name.toString().contains(encodedName)) {
1:c051381:                 return true;
1:c051381:             }
1:c051381:         }
1:c051381:         return false;
1:c051381:     }
1:c051381: 
1:c051381:     private String extractLocalPort(ActiveMQConnection connection) throws Exception {
1:c7d559f:         Socket socket = connection.getTransport().narrow(Socket.class);
1:c051381:         return String.valueOf(socket.getLocalPort());
1:c051381:     }
1:c051381: 
1:c051381:     private Set<ObjectName> getRegisteredMbeans() throws Exception {
1:8f20756:         // need a little sleep to ensure JMX is up to date
1:8f20756:         Thread.sleep(200);
1:c051381:         return broker.getManagementContext().queryNames(null, null);
1:c051381:     }
1:c051381: 
1:c051381:     private ActiveMQConnection createConnection() throws Exception {
1:9968209:         final String opts = "?jms.watchTopicAdvisories=false";
1:c051381:         ActiveMQConnection connection = (ActiveMQConnection)
1:9968209:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri() + opts).createConnection();
1:c051381:         connection.start();
1:c051381:         return connection;
1:c051381:     }
1:c051381: 
1:c051381:     private void createBroker(boolean allowRemoteAddressInMbeanNames) throws Exception {
1:c051381:         broker = new BrokerService();
1:c051381:         broker.setPersistent(false);
1:c051381:         broker.addConnector("tcp://localhost:0");
1:c051381:         broker.getManagementContext().setAllowRemoteAddressInMBeanNames(allowRemoteAddressInMbeanNames);
1:c051381:         broker.start();
1:c051381:     }
1:c051381: 
1:c051381: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:50ec158
/////////////////////////////////////////////////////////////////////////
1: import static junit.framework.TestCase.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void verifyClientIdNetwork() throws Exception {
1:         doVerifyClientIdNetwork(false);
1:     }
1: 
1:     @Test
1:     public void verifyClientIdDuplexNetwork() throws Exception {
1:         doVerifyClientIdNetwork(true);
1:     }
1: 
1:     private void doVerifyClientIdNetwork(boolean duplex) throws Exception {
1:         createBroker(true);
1: 
1:         BrokerService networked = new BrokerService();
1:         networked.setBrokerName("networked");
1:         networked.setPersistent(false);
1:         NetworkConnector nc = networked.addNetworkConnector("static:" + broker.getTransportConnectors().get(0).getPublishableConnectString());
1:         nc.setDuplex(duplex);
1:         networked.start();
1: 
1:         try {
1:             assertTrue("presence of mbean with clientId", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     Set<ObjectName> registeredMbeans = getRegisteredMbeans();
1:                     return match("_outbound", registeredMbeans);
1:                 }
1:             }));
1: 
1:         } finally {
1:             networked.stop();
1:         }
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Socket socket = connection.getTransport().narrow(Socket.class);
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:aaa81de
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("presence of mbean with clientId", true, match(connection.getClientID(), registeredMbeans));
commit:9968209
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("presence of mbean with clientId", !allowRemoteAddress, match(connection.getClientID(), registeredMbeans));
/////////////////////////////////////////////////////////////////////////
1:         final String opts = "?jms.watchTopicAdvisories=false";
1:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri() + opts).createConnection();
commit:c051381
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.net.Socket;
1: import java.util.Set;
1: import javax.management.ObjectName;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.JMXSupport;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
1: public class TransportConnectorMBeanTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(TransportConnectorMBeanTest.class);
1: 
1:     BrokerService broker;
1: 
1:     @Test
1:     public void verifyRemoteAddressInMbeanName() throws Exception {
1:         doVerifyRemoteAddressInMbeanName(true);
1:     }
1: 
1:     @Test
1:     public void verifyRemoteAddressNotInMbeanName() throws Exception {
1:         doVerifyRemoteAddressInMbeanName(false);
1:     }
1: 
1:     private void doVerifyRemoteAddressInMbeanName(boolean allowRemoteAddress) throws Exception {
1:         createBroker(allowRemoteAddress);
1:         ActiveMQConnection connection = createConnection();
1:         Set<ObjectName> registeredMbeans = getRegisteredMbeans();
0:         assertTrue("found mbean with clientId", match(connection.getClientID(), registeredMbeans));
1:         assertEquals("presence of mbean with local port", allowRemoteAddress, match(extractLocalPort(connection), registeredMbeans));
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     private boolean match(String s, Set<ObjectName> registeredMbeans) {
1:         String encodedName = JMXSupport.encodeObjectNamePart(s);
1:         for (ObjectName name : registeredMbeans) {
1:             LOG.info("checking for match:" + encodedName + ", with: " + name.toString());
1:             if (name.toString().contains(encodedName)) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     private String extractLocalPort(ActiveMQConnection connection) throws Exception {
0:         Socket socket = (Socket) connection.getTransport().narrow(Socket.class);
1:         return String.valueOf(socket.getLocalPort());
1:     }
1: 
1:     private Set<ObjectName> getRegisteredMbeans() throws Exception {
1:         return broker.getManagementContext().queryNames(null, null);
1:     }
1: 
1:     private ActiveMQConnection createConnection() throws Exception {
1:         ActiveMQConnection connection = (ActiveMQConnection)
0:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
1:         connection.start();
1:         return connection;
1:     }
1: 
1:     private void createBroker(boolean allowRemoteAddressInMbeanNames) throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.getManagementContext().setAllowRemoteAddressInMBeanNames(allowRemoteAddressInMbeanNames);
1:         broker.start();
1:     }
1: 
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8f20756
/////////////////////////////////////////////////////////////////////////
1:         // need a little sleep to ensure JMX is up to date
1:         Thread.sleep(200);
============================================================================