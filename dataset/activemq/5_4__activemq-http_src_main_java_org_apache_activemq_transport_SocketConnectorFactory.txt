1:39da37d: /**
1:39da37d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39da37d:  * contributor license agreements.  See the NOTICE file distributed with
1:39da37d:  * this work for additional information regarding copyright ownership.
1:39da37d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39da37d:  * (the "License"); you may not use this file except in compliance with
1:39da37d:  * the License.  You may obtain a copy of the License at
1:39da37d:  *
1:39da37d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:39da37d:  *
1:39da37d:  * Unless required by applicable law or agreed to in writing, software
1:39da37d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39da37d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39da37d:  * See the License for the specific language governing permissions and
1:39da37d:  * limitations under the License.
1:39da37d:  */
1:39da37d: package org.apache.activemq.transport;
3:39da37d: 
1:3b4aadc: import java.util.Map;
1:3b4aadc: 
1:9b0316b: import org.apache.activemq.util.IntrospectionSupport;
1:39da37d: import org.eclipse.jetty.server.Connector;
1:bc2e2d9: import org.eclipse.jetty.server.Server;
1:f44c3d2: import org.eclipse.jetty.server.ServerConnector;
1:39da37d: 
1:39da37d: public class SocketConnectorFactory {
1:39da37d: 
1:39da37d:     private Map<String, Object> transportOptions;
1:3f82625: 
1:bc2e2d9:     public Connector createConnector(Server server) throws Exception {
1:f44c3d2:         ServerConnector connector = new ServerConnector(server);
1:f44c3d2:         server.setStopTimeout(500);
1:f44c3d2:         connector.setStopTimeout(500);
1:3f82625:         if (transportOptions != null) {
1:3f82625:             IntrospectionSupport.setProperties(connector, transportOptions, "");
1:3f82625:         }
1:9b0316b:         return connector;
1:3f82625:     }
1:39da37d: 
1:39da37d:     public Map<String, Object> getTransportOptions() {
1:39da37d:         return transportOptions;
2:39da37d:     }
1:39da37d: 
1:39da37d:     public void setTransportOptions(Map<String, Object> transportOptions) {
1:39da37d:         this.transportOptions = transportOptions;
1:39da37d:     }
1:39da37d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.ServerConnector;
1:         ServerConnector connector = new ServerConnector(server);
1:         server.setStopTimeout(500);
1:         connector.setStopTimeout(500);
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
0:         Connector connector = null;
1:         
0:         try {
0:             connector = (Connector)Class.forName("org.eclipse.jetty.server.nio.SelectChannelConnector", true, Server.class.getClassLoader()).newInstance();
0:         } catch (Throwable t) {
0:             Class<?> c = Class.forName("org.eclipse.jetty.server.ServerConnector", true, Server.class.getClassLoader());
0:             connector = (Connector)c.getConstructor(Server.class).newInstance(server);
0:             Server.class.getMethod("setStopTimeout", Long.TYPE).invoke(server, 500);
0:             connector.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(connector, 500);
1:         }
0:         System.out.println(transportOptions);
1:         if (transportOptions != null) {
1:             IntrospectionSupport.setProperties(connector, transportOptions, "");
1:         }
commit:bc2e2d9
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.Server;
1:     public Connector createConnector(Server server) throws Exception {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9b0316b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
0:         SelectChannelConnector connector = new SelectChannelConnector();
0:         IntrospectionSupport.setProperties(connector, transportOptions, "");
1:         return connector;
commit:39da37d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import org.eclipse.jetty.server.Connector;
0: import org.eclipse.jetty.server.Server;
0: import org.eclipse.jetty.server.nio.SelectChannelConnector;
1: 
0: import java.util.Map;
1: 
1: public class SocketConnectorFactory {
1: 
1:     private Map<String, Object> transportOptions;
1: 
0:     public Connector createConnector() throws Exception {
0:        return new SelectChannelConnector();
1:     }
1: 
1:     public Map<String, Object> getTransportOptions() {
1:         return transportOptions;
1:     }
1: 
1:     public void setTransportOptions(Map<String, Object> transportOptions) {
1:         this.transportOptions = transportOptions;
1:     }
1: }
============================================================================