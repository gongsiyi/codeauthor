1:0890672: /**
1:0890672:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0890672:  * contributor license agreements.  See the NOTICE file distributed with
1:0890672:  * this work for additional information regarding copyright ownership.
1:0890672:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0890672:  * (the "License"); you may not use this file except in compliance with
1:0890672:  * the License.  You may obtain a copy of the License at
1:0890672:  *
1:0890672:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0890672:  *
1:0890672:  * Unless required by applicable law or agreed to in writing, software
1:0890672:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0890672:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0890672:  * See the License for the specific language governing permissions and
1:0890672:  * limitations under the License.
1:0890672:  */
1:633428c: package org.apache.activemq.bugs;
1:633428c: 
1:633428c: import java.io.IOException;
1:633428c: import java.net.URI;
1:633428c: import java.util.ArrayList;
1:633428c: import java.util.Collections;
1:633428c: import java.util.List;
1:633428c: 
1:633428c: import org.apache.activemq.broker.BrokerService;
1:633428c: import org.apache.activemq.broker.Connection;
1:633428c: import org.apache.activemq.broker.TransportConnector;
1:633428c: import org.apache.activemq.command.BrokerInfo;
1:633428c: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:633428c: import org.apache.activemq.thread.Task;
1:633428c: import org.apache.activemq.thread.TaskRunner;
1:633428c: import org.apache.activemq.thread.TaskRunnerFactory;
1:9a8f6e4: import org.apache.activemq.transport.*;
1:633428c: import org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent;
1:633428c: import org.junit.After;
1:633428c: import org.junit.Assert;
1:633428c: import org.junit.Before;
1:633428c: import org.junit.Test;
1:633428c: 
3:633428c: /**
1:633428c:  * This test involves the creation of a local and remote broker, both of which
1:633428c:  * communicate over VM and TCP. The local broker establishes a bridge to the
1:633428c:  * remote broker for the purposes of verifying that broker info is only
1:633428c:  * transfered once the local broker's ID is known to the bridge support.
3:633428c:  */
1:633428c: public class AMQ3014Test {
1:0890672:     // Change this URL to be an unused port.
1:044b119:     private static final String BROKER_URL = "tcp://localhost:0";
1:633428c: 
1:0890672:     private List<BrokerInfo> remoteBrokerInfos = Collections
1:0890672:             .synchronizedList(new ArrayList<BrokerInfo>());
1:633428c: 
1:0890672:     private BrokerService localBroker = new BrokerService();
1:633428c: 
1:0890672:     // Override the "remote" broker so that it records all (remote) BrokerInfos
1:0890672:     // that it receives.
1:0890672:     private BrokerService remoteBroker = new BrokerService() {
1:0890672:         @Override
1:0890672:         protected TransportConnector createTransportConnector(URI brokerURI)
1:0890672:                 throws Exception {
1:9a8f6e4:             TransportServer transport = TransportFactorySupport.bind(this, brokerURI);
1:0890672:             return new TransportConnector(transport) {
1:0890672:                 @Override
1:0890672:                 protected Connection createConnection(Transport transport)
1:0890672:                         throws IOException {
1:0890672:                     Connection connection = super.createConnection(transport);
1:0890672:                     final TransportListener proxiedListener = transport
1:0890672:                             .getTransportListener();
1:0890672:                     transport.setTransportListener(new TransportListener() {
1:633428c: 
1:0890672:                         @Override
1:0890672:                         public void onCommand(Object command) {
1:0890672:                             if (command instanceof BrokerInfo) {
1:0890672:                                 remoteBrokerInfos.add((BrokerInfo) command);
1:0890672:                             }
1:0890672:                             proxiedListener.onCommand(command);
1:0890672:                         }
1:633428c: 
1:0890672:                         @Override
1:0890672:                         public void onException(IOException error) {
1:0890672:                             proxiedListener.onException(error);
1:0890672:                         }
1:633428c: 
1:0890672:                         @Override
1:0890672:                         public void transportInterupted() {
1:0890672:                             proxiedListener.transportInterupted();
1:0890672:                         }
1:633428c: 
1:0890672:                         @Override
1:0890672:                         public void transportResumed() {
1:0890672:                             proxiedListener.transportResumed();
1:0890672:                         }
1:0890672:                     });
1:0890672:                     return connection;
1:0890672:                 }
1:633428c: 
1:0890672:             };
1:0890672:         }
1:0890672:     };
1:633428c: 
1:0890672:     @Before
1:0890672:     public void init() throws Exception {
1:0890672:         localBroker.setBrokerName("localBroker");
1:0890672:         localBroker.setPersistent(false);
1:0890672:         localBroker.setUseJmx(false);
1:0890672:         localBroker.setSchedulerSupport(false);
1:633428c: 
1:0890672:         remoteBroker.setBrokerName("remoteBroker");
1:0890672:         remoteBroker.setPersistent(false);
1:0890672:         remoteBroker.setUseJmx(false);
1:044b119:         remoteBroker.addConnector(BROKER_URL);
1:0890672:         remoteBroker.setSchedulerSupport(false);
1:0890672:     }
1:633428c: 
1:0890672:     @After
1:0890672:     public void cleanup() throws Exception {
1:0890672:         try {
1:0890672:             localBroker.stop();
1:0890672:         } finally {
1:0890672:             remoteBroker.stop();
1:0890672:         }
1:0890672:     }
1:633428c: 
1:0890672:     /**
1:0890672:      * This test verifies that the local broker's ID is typically known by the
1:0890672:      * bridge support before the local broker's BrokerInfo is sent to the remote
1:0890672:      * broker.
1:0890672:      */
1:0890672:     @Test
1:0890672:     public void NormalCaseTest() throws Exception {
1:0890672:         runTest(0, 3000);
1:0890672:     }
1:633428c: 
1:0890672:     /**
1:0890672:      * This test verifies that timing can arise under which the local broker's
1:0890672:      * ID is not known by the bridge support before the local broker's
1:0890672:      * BrokerInfo is sent to the remote broker.
1:0890672:      */
1:0890672:     @Test
1:0890672:     public void DelayedCaseTest() throws Exception {
1:0890672:         runTest(500, 3000);
1:0890672:     }
1:633428c: 
1:0890672:     private void runTest(final long taskRunnerDelay, long timeout)
1:0890672:             throws Exception {
1:0890672:         // Add a network connector to the local broker that will create a bridge
1:0890672:         // to the remote broker.
1:0890672:         DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector();
1:0890672:         SimpleDiscoveryAgent da = new SimpleDiscoveryAgent();
1:044b119:         da.setServices(remoteBroker.getTransportConnectors().get(0).getPublishableConnectString());
1:0890672:         dnc.setDiscoveryAgent(da);
1:0890672:         localBroker.addNetworkConnector(dnc);
1:633428c: 
1:0890672:         // Before starting the local broker, intercept the task runner factory
1:0890672:         // so that the
1:0890672:         // local VMTransport dispatcher is artificially delayed.
1:0890672:         final TaskRunnerFactory realTaskRunnerFactory = localBroker
1:0890672:                 .getTaskRunnerFactory();
1:0890672:         localBroker.setTaskRunnerFactory(new TaskRunnerFactory() {
1:0890672:             public TaskRunner createTaskRunner(Task task, String name) {
1:0890672:                 final TaskRunner realTaskRunner = realTaskRunnerFactory
1:0890672:                         .createTaskRunner(task, name);
1:0890672:                 if (name.startsWith("ActiveMQ Connection Dispatcher: ")) {
1:0890672:                     return new TaskRunner() {
1:0890672:                         @Override
1:0890672:                         public void shutdown() throws InterruptedException {
1:0890672:                             realTaskRunner.shutdown();
1:0890672:                         }
1:633428c: 
1:0890672:                         @Override
1:0890672:                         public void shutdown(long timeout)
1:0890672:                                 throws InterruptedException {
1:0890672:                             realTaskRunner.shutdown(timeout);
1:0890672:                         }
1:633428c: 
1:0890672:                         @Override
1:0890672:                         public void wakeup() throws InterruptedException {
1:0890672:                             Thread.sleep(taskRunnerDelay);
1:0890672:                             realTaskRunner.wakeup();
1:0890672:                         }
1:0890672:                     };
1:0890672:                 } else {
1:0890672:                     return realTaskRunnerFactory.createTaskRunner(task, name);
1:0890672:                 }
1:0890672:             }
1:0890672:         });
1:633428c: 
1:0890672:         // Start the brokers and wait for the bridge to be created; the remote
1:0890672:         // broker is started first to ensure it is available for the local
1:0890672:         // broker to connect to.
1:0890672:         remoteBroker.start();
1:0890672:         localBroker.start();
1:633428c: 
1:0890672:         // Wait for the remote broker to receive the local broker's BrokerInfo
1:0890672:         // and then verify the local broker's ID is known.
1:0890672:         long startTimeMillis = System.currentTimeMillis();
1:0890672:         while (remoteBrokerInfos.isEmpty()
1:0890672:                 && (System.currentTimeMillis() - startTimeMillis) < timeout) {
1:0890672:             Thread.sleep(100);
1:0890672:         }
1:633428c: 
1:0890672:         Assert.assertFalse("Timed out waiting for bridge to form.",
1:0890672:                 remoteBrokerInfos.isEmpty());
1:0890672:         ;
1:0890672:         Assert.assertNotNull("Local broker ID is null.", remoteBrokerInfos.get(
1:0890672:                 0).getBrokerId());
1:0890672:     }
20:633428c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0890672
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1:     // Change this URL to be an unused port.
0:     private static final String REMOTE_BROKER_URL = "tcp://localhost:50000";
1:     private List<BrokerInfo> remoteBrokerInfos = Collections
1:             .synchronizedList(new ArrayList<BrokerInfo>());
1:     private BrokerService localBroker = new BrokerService();
1:     // Override the "remote" broker so that it records all (remote) BrokerInfos
1:     // that it receives.
1:     private BrokerService remoteBroker = new BrokerService() {
1:         @Override
1:         protected TransportConnector createTransportConnector(URI brokerURI)
1:                 throws Exception {
0:             TransportServer transport = TransportFactory.bind(this, brokerURI);
1:             return new TransportConnector(transport) {
1:                 @Override
1:                 protected Connection createConnection(Transport transport)
1:                         throws IOException {
1:                     Connection connection = super.createConnection(transport);
1:                     final TransportListener proxiedListener = transport
1:                             .getTransportListener();
1:                     transport.setTransportListener(new TransportListener() {
1:                         @Override
1:                         public void onCommand(Object command) {
1:                             if (command instanceof BrokerInfo) {
1:                                 remoteBrokerInfos.add((BrokerInfo) command);
1:                             }
1:                             proxiedListener.onCommand(command);
1:                         }
1:                         @Override
1:                         public void onException(IOException error) {
1:                             proxiedListener.onException(error);
1:                         }
1:                         @Override
1:                         public void transportInterupted() {
1:                             proxiedListener.transportInterupted();
1:                         }
1:                         @Override
1:                         public void transportResumed() {
1:                             proxiedListener.transportResumed();
1:                         }
1:                     });
1:                     return connection;
1:                 }
1:             };
1:         }
1:     };
1:     @Before
1:     public void init() throws Exception {
1:         localBroker.setBrokerName("localBroker");
1:         localBroker.setPersistent(false);
1:         localBroker.setUseJmx(false);
1:         localBroker.setSchedulerSupport(false);
1:         remoteBroker.setBrokerName("remoteBroker");
1:         remoteBroker.setPersistent(false);
1:         remoteBroker.setUseJmx(false);
0:         remoteBroker.addConnector(REMOTE_BROKER_URL);
1:         remoteBroker.setSchedulerSupport(false);
1:     }
1:     @After
1:     public void cleanup() throws Exception {
1:         try {
1:             localBroker.stop();
1:         } finally {
1:             remoteBroker.stop();
1:         }
1:     }
1:     /**
1:      * This test verifies that the local broker's ID is typically known by the
1:      * bridge support before the local broker's BrokerInfo is sent to the remote
1:      * broker.
1:      */
1:     @Test
1:     public void NormalCaseTest() throws Exception {
1:         runTest(0, 3000);
1:     }
1:     /**
1:      * This test verifies that timing can arise under which the local broker's
1:      * ID is not known by the bridge support before the local broker's
1:      * BrokerInfo is sent to the remote broker.
1:      */
1:     @Test
1:     public void DelayedCaseTest() throws Exception {
1:         runTest(500, 3000);
1:     }
1:     private void runTest(final long taskRunnerDelay, long timeout)
1:             throws Exception {
1:         // Add a network connector to the local broker that will create a bridge
1:         // to the remote broker.
1:         DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector();
1:         SimpleDiscoveryAgent da = new SimpleDiscoveryAgent();
0:         da.setServices(REMOTE_BROKER_URL);
1:         dnc.setDiscoveryAgent(da);
1:         localBroker.addNetworkConnector(dnc);
1:         // Before starting the local broker, intercept the task runner factory
1:         // so that the
1:         // local VMTransport dispatcher is artificially delayed.
1:         final TaskRunnerFactory realTaskRunnerFactory = localBroker
1:                 .getTaskRunnerFactory();
1:         localBroker.setTaskRunnerFactory(new TaskRunnerFactory() {
1:             public TaskRunner createTaskRunner(Task task, String name) {
1:                 final TaskRunner realTaskRunner = realTaskRunnerFactory
1:                         .createTaskRunner(task, name);
1:                 if (name.startsWith("ActiveMQ Connection Dispatcher: ")) {
1:                     return new TaskRunner() {
1:                         @Override
1:                         public void shutdown() throws InterruptedException {
1:                             realTaskRunner.shutdown();
1:                         }
1:                         @Override
1:                         public void shutdown(long timeout)
1:                                 throws InterruptedException {
1:                             realTaskRunner.shutdown(timeout);
1:                         }
1:                         @Override
1:                         public void wakeup() throws InterruptedException {
1:                             Thread.sleep(taskRunnerDelay);
1:                             realTaskRunner.wakeup();
1:                         }
1:                     };
1:                 } else {
1:                     return realTaskRunnerFactory.createTaskRunner(task, name);
1:                 }
1:             }
1:         });
1:         // Start the brokers and wait for the bridge to be created; the remote
1:         // broker is started first to ensure it is available for the local
1:         // broker to connect to.
1:         remoteBroker.start();
1:         localBroker.start();
1:         // Wait for the remote broker to receive the local broker's BrokerInfo
1:         // and then verify the local broker's ID is known.
1:         long startTimeMillis = System.currentTimeMillis();
1:         while (remoteBrokerInfos.isEmpty()
1:                 && (System.currentTimeMillis() - startTimeMillis) < timeout) {
1:             Thread.sleep(100);
1:         }
1:         Assert.assertFalse("Timed out waiting for bridge to form.",
1:                 remoteBrokerInfos.isEmpty());
1:         ;
1:         Assert.assertNotNull("Local broker ID is null.", remoteBrokerInfos.get(
1:                 0).getBrokerId());
1:     }
commit:633428c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.Connection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.thread.Task;
1: import org.apache.activemq.thread.TaskRunner;
1: import org.apache.activemq.thread.TaskRunnerFactory;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.TransportListener;
0: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * This test involves the creation of a local and remote broker, both of which
1:  * communicate over VM and TCP. The local broker establishes a bridge to the
1:  * remote broker for the purposes of verifying that broker info is only
1:  * transfered once the local broker's ID is known to the bridge support.
1:  */
1: public class AMQ3014Test {
0: 	// Change this URL to be an unused port.
0: 	private static final String REMOTE_BROKER_URL = "tcp://localhost:50000";
1: 
0: 	private List<BrokerInfo> remoteBrokerInfos = Collections
0: 			.synchronizedList(new ArrayList<BrokerInfo>());
1: 
0: 	private BrokerService localBroker = new BrokerService();
1: 
0: 	// Override the "remote" broker so that it records all (remote) BrokerInfos
0: 	// that it receives.
0: 	private BrokerService remoteBroker = new BrokerService() {
0: 		@Override
0: 		protected TransportConnector createTransportConnector(URI brokerURI)
0: 				throws Exception {
0: 			TransportServer transport = TransportFactory.bind(this, brokerURI);
0: 			return new TransportConnector(transport) {
0: 				@Override
0: 				protected Connection createConnection(Transport transport)
0: 						throws IOException {
0: 					Connection connection = super.createConnection(transport);
0: 					final TransportListener proxiedListener = transport
0: 							.getTransportListener();
0: 					transport.setTransportListener(new TransportListener() {
1: 
0: 						@Override
0: 						public void onCommand(Object command) {
0: 							if (command instanceof BrokerInfo) {
0: 								remoteBrokerInfos.add((BrokerInfo) command);
1: 							}
0: 							proxiedListener.onCommand(command);
1: 						}
1: 
0: 						@Override
0: 						public void onException(IOException error) {
0: 							proxiedListener.onException(error);
1: 						}
1: 
0: 						@Override
0: 						public void transportInterupted() {
0: 							proxiedListener.transportInterupted();
1: 						}
1: 
0: 						@Override
0: 						public void transportResumed() {
0: 							proxiedListener.transportResumed();
1: 						}
0: 					});
0: 					return connection;
1: 				}
1: 
0: 			};
1: 		}
0: 	};
1: 
0: 	@Before
0: 	public void init() throws Exception {
0: 		localBroker.setBrokerName("localBroker");
0: 		localBroker.setPersistent(false);
0: 		localBroker.setUseJmx(false);
0: 		localBroker.setSchedulerSupport(false);
1: 
0: 		remoteBroker.setBrokerName("remoteBroker");
0: 		remoteBroker.setPersistent(false);
0: 		remoteBroker.setUseJmx(false);
0: 		remoteBroker.addConnector(REMOTE_BROKER_URL);
0: 		remoteBroker.setSchedulerSupport(false);
1: 	}
1: 
0: 	@After
0: 	public void cleanup() throws Exception {
0: 		try {
0: 			localBroker.stop();
0: 		} finally {
0: 			remoteBroker.stop();
1: 		}
1: 	}
1: 
1: 	/**
0: 	 * This test verifies that the local broker's ID is typically known by the
0: 	 * bridge support before the local broker's BrokerInfo is sent to the remote
0: 	 * broker.
1: 	 */
0: 	@Test
0: 	public void NormalCaseTest() throws Exception {
0: 		runTest(0, 3000);
1: 	}
1: 
1: 	/**
0: 	 * This test verifies that timing can arise under which the local broker's
0: 	 * ID is not known by the bridge support before the local broker's
0: 	 * BrokerInfo is sent to the remote broker.
1: 	 */
0: 	@Test
0: 	public void DelayedCaseTest() throws Exception {
0: 		runTest(500, 3000);
1: 	}
1: 
0: 	private void runTest(final long taskRunnerDelay, long timeout)
0: 			throws Exception {
0: 		// Add a network connector to the local broker that will create a bridge
0: 		// to the remote broker.
0: 		DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector();
0: 		SimpleDiscoveryAgent da = new SimpleDiscoveryAgent();
0: 		da.setServices(REMOTE_BROKER_URL);
0: 		dnc.setDiscoveryAgent(da);
0: 		localBroker.addNetworkConnector(dnc);
1: 
0: 		// Before starting the local broker, intercept the task runner factory
0: 		// so that the
0: 		// local VMTransport dispatcher is artificially delayed.
0: 		final TaskRunnerFactory realTaskRunnerFactory = localBroker
0: 				.getTaskRunnerFactory();
0: 		localBroker.setTaskRunnerFactory(new TaskRunnerFactory() {
0: 			public TaskRunner createTaskRunner(Task task, String name) {
0: 				final TaskRunner realTaskRunner = realTaskRunnerFactory
0: 						.createTaskRunner(task, name);
0: 				if (name.startsWith("ActiveMQ Connection Dispatcher: ")) {
0: 					return new TaskRunner() {
0: 						@Override
0: 						public void shutdown() throws InterruptedException {
0: 							realTaskRunner.shutdown();
1: 						}
1: 
0: 						@Override
0: 						public void shutdown(long timeout)
0: 								throws InterruptedException {
0: 							realTaskRunner.shutdown(timeout);
1: 						}
1: 
0: 						@Override
0: 						public void wakeup() throws InterruptedException {
0: 							Thread.sleep(taskRunnerDelay);
0: 							realTaskRunner.wakeup();
1: 						}
0: 					};
0: 				} else {
0: 					return realTaskRunnerFactory.createTaskRunner(task, name);
1: 				}
1: 			}
0: 		});
1: 
0: 		// Start the brokers and wait for the bridge to be created; the remote
0: 		// broker is started first to ensure it is available for the local
0: 		// broker to connect to.
0: 		remoteBroker.start();
0: 		localBroker.start();
1: 
0: 		// Wait for the remote broker to receive the local broker's BrokerInfo
0: 		// and then verify the local broker's ID is known.
0: 		long startTimeMillis = System.currentTimeMillis();
0: 		while (remoteBrokerInfos.isEmpty()
0: 				&& (System.currentTimeMillis() - startTimeMillis) < timeout) {
0: 			Thread.sleep(100);
1: 		}
1: 
0: 		Assert.assertFalse("Timed out waiting for bridge to form.",
0: 				remoteBrokerInfos.isEmpty());
0: 		;
0: 		Assert.assertNotNull("Local broker ID is null.", remoteBrokerInfos.get(
0: 				0).getBrokerId());
1: 	}
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.*;
/////////////////////////////////////////////////////////////////////////
1:             TransportServer transport = TransportFactorySupport.bind(this, brokerURI);
author:Gary Tully
-------------------------------------------------------------------------------
commit:044b119
/////////////////////////////////////////////////////////////////////////
1:     private static final String BROKER_URL = "tcp://localhost:0";
/////////////////////////////////////////////////////////////////////////
1:         remoteBroker.addConnector(BROKER_URL);
/////////////////////////////////////////////////////////////////////////
1:         da.setServices(remoteBroker.getTransportConnectors().get(0).getPublishableConnectString());
============================================================================