1:7343337: /**
1:7343337:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7343337:  * contributor license agreements.  See the NOTICE file distributed with
1:7343337:  * this work for additional information regarding copyright ownership.
1:7343337:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7343337:  * (the "License"); you may not use this file except in compliance with
1:7343337:  * the License.  You may obtain a copy of the License at
1:7343337:  *
1:7343337:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7343337:  *
1:7343337:  * Unless required by applicable law or agreed to in writing, software
1:7343337:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7343337:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7343337:  * See the License for the specific language governing permissions and
1:7343337:  * limitations under the License.
1:7343337:  */
8:7343337: 
1:7343337: package org.apache.bugs;
1:7343337: 
1:600f209: import java.util.concurrent.CountDownLatch;
1:7343337: 
1:7343337: import javax.jms.Connection;
1:7343337: import javax.jms.ConnectionFactory;
1:7343337: import javax.jms.JMSException;
1:7343337: import javax.jms.Message;
1:7343337: import javax.jms.MessageListener;
1:7343337: import javax.jms.MessageProducer;
1:7343337: import javax.jms.Queue;
1:7343337: import javax.jms.Session;
1:7343337: import javax.jms.TextMessage;
1:600f209: 
1:600f209: import junit.framework.TestCase;
1:600f209: 
1:600f209: import org.apache.activemq.ActiveMQConnectionFactory;
1:600f209: import org.apache.activemq.broker.BrokerService;
1:600f209: import org.slf4j.Logger;
1:600f209: import org.slf4j.LoggerFactory;
1:600f209: import org.springframework.jms.listener.DefaultMessageListenerContainer;
1:7343337: 
1:7343337: 
1:7343337: public class AMQ1730Test extends TestCase {
1:7343337: 
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(AMQ1730Test.class);
1:7343337:     private static final String JMSX_DELIVERY_COUNT = "JMSXDeliveryCount";
1:7343337:     BrokerService brokerService;
1:7343337: 
1:7343337:     private static final int MESSAGE_COUNT = 250;
1:7343337: 
1:7343337:     public AMQ1730Test() {
1:7343337:         super();
1:7343337:     }
1:7343337: 
1:7343337:     @Override
1:7343337:     protected void setUp() throws Exception {
1:7343337:         super.setUp();
1:600f209: 
1:7343337:         brokerService = new BrokerService();
1:7343337:         brokerService.addConnector("tcp://localhost:0");
1:7343337:         brokerService.setUseJmx(false);
1:7343337:         brokerService.start();
1:7343337:     }
1:7343337: 
1:7343337:     @Override
1:7343337:     protected void tearDown() throws Exception {
1:7343337:         super.tearDown();
1:7343337:         brokerService.stop();
1:600f209:         brokerService.waitUntilStopped();
1:7343337:     }
1:7343337: 
1:7343337:     public void testRedelivery() throws Exception {
1:7343337: 
1:7343337:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:7343337:                 brokerService.getTransportConnectors().get(0).getConnectUri().toString() + "?jms.prefetchPolicy.queuePrefetch=100");
1:7343337: 
1:7343337:         Connection connection = connectionFactory.createConnection();
1:7343337:         connection.start();
1:7343337: 
1:7343337:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:7343337:         Queue queue = session.createQueue("queue.test");
1:7343337: 
1:7343337:         MessageProducer producer = session.createProducer(queue);
1:7343337: 
1:7343337:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:7343337:             log.info("Sending message " + i);
1:7343337:             TextMessage message = session.createTextMessage("Message " + i);
1:7343337:             producer.send(message);
1:7343337:         }
1:7343337: 
1:7343337:         producer.close();
1:7343337:         session.close();
1:7343337:         connection.stop();
1:7343337:         connection.close();
1:7343337: 
1:7343337:         final CountDownLatch countDownLatch = new CountDownLatch(MESSAGE_COUNT);
1:7343337: 
1:7343337:         final ValueHolder<Boolean> messageRedelivered = new ValueHolder<Boolean>(false);
1:7343337: 
1:7343337:         DefaultMessageListenerContainer messageListenerContainer = new DefaultMessageListenerContainer();
1:7343337:         messageListenerContainer.setConnectionFactory(connectionFactory);
1:7343337:         messageListenerContainer.setDestination(queue);
1:7343337:         messageListenerContainer.setAutoStartup(false);
1:7343337:         messageListenerContainer.setConcurrentConsumers(1);
1:7343337:         messageListenerContainer.setMaxConcurrentConsumers(16);
1:7343337:         messageListenerContainer.setMaxMessagesPerTask(10);
1:7343337:         messageListenerContainer.setReceiveTimeout(10000);
1:7343337:         messageListenerContainer.setRecoveryInterval(5000);
1:7343337:         messageListenerContainer.setAcceptMessagesWhileStopping(false);
1:7343337:         messageListenerContainer.setCacheLevel(DefaultMessageListenerContainer.CACHE_NONE);
1:7343337:         messageListenerContainer.setSessionTransacted(false);
1:7343337:         messageListenerContainer.setMessageListener(new MessageListener() {
1:7343337: 
1:600f209:             @Override
1:7343337:             public void onMessage(Message message) {
1:7343337:                 if (!(message instanceof TextMessage)) {
1:7343337:                     throw new RuntimeException();
1:7343337:                 }
1:7343337:                 try {
1:7343337:                     TextMessage textMessage = (TextMessage) message;
1:7343337:                     String text = textMessage.getText();
1:7343337:                     int messageDeliveryCount = message.getIntProperty(JMSX_DELIVERY_COUNT);
1:7343337:                     if (messageDeliveryCount > 1) {
1:7343337:                         messageRedelivered.set(true);
1:7343337:                     }
1:7343337:                     log.info("[Count down latch: " + countDownLatch.getCount() + "][delivery count: " + messageDeliveryCount + "] - " + "Received message with id: " + message.getJMSMessageID() + " with text: " + text);
1:7343337: 
1:7343337:                 } catch (JMSException e) {
1:7343337:                     e.printStackTrace();
1:7343337:                 }
1:7343337:                 finally {
1:7343337:                     countDownLatch.countDown();
1:7343337:                 }
1:7343337:             }
1:7343337: 
1:7343337:         });
1:7343337:         messageListenerContainer.afterPropertiesSet();
1:7343337: 
1:7343337:         messageListenerContainer.start();
1:7343337: 
1:7343337:         countDownLatch.await();
1:7343337:         messageListenerContainer.stop();
1:7343337:         messageListenerContainer.destroy();
1:7343337: 
1:7343337:         assertFalse("no message has redelivery > 1", messageRedelivered.get());
1:7343337:     }
1:7343337: 
1:7343337:     private class ValueHolder<T> {
1:7343337: 
1:7343337:         private T value;
1:7343337: 
1:7343337:         public ValueHolder(T value) {
1:7343337:             super();
1:7343337:             this.value = value;
1:7343337:         }
1:7343337: 
1:7343337:         void set(T value) {
1:7343337:             this.value = value;
1:7343337:         }
1:7343337: 
1:7343337:         T get() {
1:7343337:             return value;
1:7343337:         }
1:7343337:     }
1:7343337: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:600f209
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.jms.listener.DefaultMessageListenerContainer;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         brokerService.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(AMQ1730Test.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:7343337
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.bugs;
1: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.springframework.jms.listener.DefaultMessageListenerContainer;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import java.util.concurrent.CountDownLatch;
1: 
1: 
1: public class AMQ1730Test extends TestCase {
1: 
0:     private static final Log log = LogFactory.getLog(AMQ1730Test.class);
1: 
1: 
1:     private static final String JMSX_DELIVERY_COUNT = "JMSXDeliveryCount";
1: 
1: 
1:     BrokerService brokerService;
1: 
1:     private static final int MESSAGE_COUNT = 250;
1: 
1:     public AMQ1730Test() {
1:         super();
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         brokerService = new BrokerService();
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.setUseJmx(false);
1:         brokerService.start();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         brokerService.stop();
1:     }
1: 
1:     public void testRedelivery() throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:                 brokerService.getTransportConnectors().get(0).getConnectUri().toString() + "?jms.prefetchPolicy.queuePrefetch=100");
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("queue.test");
1: 
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             log.info("Sending message " + i);
1:             TextMessage message = session.createTextMessage("Message " + i);
1:             producer.send(message);
1:         }
1: 
1:         producer.close();
1:         session.close();
1:         connection.stop();
1:         connection.close();
1: 
1:         final CountDownLatch countDownLatch = new CountDownLatch(MESSAGE_COUNT);
1: 
1:         final ValueHolder<Boolean> messageRedelivered = new ValueHolder<Boolean>(false);
1: 
1:         DefaultMessageListenerContainer messageListenerContainer = new DefaultMessageListenerContainer();
1:         messageListenerContainer.setConnectionFactory(connectionFactory);
1:         messageListenerContainer.setDestination(queue);
1:         messageListenerContainer.setAutoStartup(false);
1:         messageListenerContainer.setConcurrentConsumers(1);
1:         messageListenerContainer.setMaxConcurrentConsumers(16);
1:         messageListenerContainer.setMaxMessagesPerTask(10);
1:         messageListenerContainer.setReceiveTimeout(10000);
1:         messageListenerContainer.setRecoveryInterval(5000);
1:         messageListenerContainer.setAcceptMessagesWhileStopping(false);
1:         messageListenerContainer.setCacheLevel(DefaultMessageListenerContainer.CACHE_NONE);
1:         messageListenerContainer.setSessionTransacted(false);
1:         messageListenerContainer.setMessageListener(new MessageListener() {
1: 
1: 
1:             public void onMessage(Message message) {
1:                 if (!(message instanceof TextMessage)) {
1:                     throw new RuntimeException();
1:                 }
1:                 try {
1:                     TextMessage textMessage = (TextMessage) message;
1:                     String text = textMessage.getText();
1:                     int messageDeliveryCount = message.getIntProperty(JMSX_DELIVERY_COUNT);
1:                     if (messageDeliveryCount > 1) {
1:                         messageRedelivered.set(true);
1:                     }
1:                     log.info("[Count down latch: " + countDownLatch.getCount() + "][delivery count: " + messageDeliveryCount + "] - " + "Received message with id: " + message.getJMSMessageID() + " with text: " + text);
1: 
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:                 finally {
1:                     countDownLatch.countDown();
1:                 }
1:             }
1: 
1:         });
1:         messageListenerContainer.afterPropertiesSet();
1: 
1:         messageListenerContainer.start();
1: 
1:         countDownLatch.await();
1:         messageListenerContainer.stop();
1:         messageListenerContainer.destroy();
1: 
1:         assertFalse("no message has redelivery > 1", messageRedelivered.get());
1:     }
1: 
1:     private class ValueHolder<T> {
1: 
1:         private T value;
1: 
1:         public ValueHolder(T value) {
1:             super();
1:             this.value = value;
1:         }
1: 
1:         void set(T value) {
1:             this.value = value;
1:         }
1: 
1:         T get() {
1:             return value;
1:         }
1: 
1:     }
1: 
1: }
============================================================================