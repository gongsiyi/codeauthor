3:bf310ef: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:00879cf:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:09fab74:  *
1:bf310ef:  * Unless required by applicable law or agreed to in writing, software
1:bf310ef:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf310ef:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf310ef:  * See the License for the specific language governing permissions and
1:bf310ef:  * limitations under the License.
3:bf310ef:  */
1:bf310ef: package org.apache.activemq.broker.util;
1:681d149: 
1:681d149: import java.util.Set;
1:0bb9013: 
1:09fab74: import javax.annotation.PostConstruct;
1:0bb9013: 
1:bf310ef: import org.apache.activemq.broker.BrokerPluginSupport;
1:681d149: import org.apache.activemq.broker.Connection;
1:681d149: import org.apache.activemq.broker.ConnectionContext;
1:84eb9f8: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:84eb9f8: import org.apache.activemq.broker.ProducerBrokerExchange;
1:681d149: import org.apache.activemq.broker.region.Destination;
1:681d149: import org.apache.activemq.broker.region.MessageReference;
1:681d149: import org.apache.activemq.broker.region.Subscription;
1:174fe15: import org.apache.activemq.command.*;
1:681d149: import org.apache.activemq.usage.Usage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:09fab74: 
1:09fab74: /**
1:681d149:  * A simple Broker intercepter which allows you to enable/disable logging.
1:951d870:  *
1:bf310ef:  * @org.apache.xbean.XBean
1:09fab74:  */
1:09fab74: public class LoggingBrokerPlugin extends BrokerPluginSupport {
1:681d149: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(LoggingBrokerPlugin.class);
8:bf310ef: 
1:681d149:     private boolean logAll = false;
1:681d149:     private boolean logConnectionEvents = true;
1:951d870:     private boolean logSessionEvents = true;
1:681d149:     private boolean logTransactionEvents = false;
1:681d149:     private boolean logConsumerEvents = false;
1:681d149:     private boolean logProducerEvents = false;
1:681d149:     private boolean logInternalEvents = false;
1:3222767:     private boolean perDestinationLogger = false;
1:681d149: 
1:681d149:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:09fab74:      * @throws Exception
1:09fab74:      * @org.apache.xbean.InitMethod
1:681d149:      */
1:681d149:     public void afterPropertiesSet() throws Exception {
1:e1bbde7:         LOG.info("Created LoggingBrokerPlugin: {}", this.toString());
1:681d149:     }
1:681d149: 
1:681d149:     public boolean isLogAll() {
1:681d149:         return logAll;
1:681d149:     }
1:681d149: 
1:681d149:     /**
1:8bf987b:      * Logger all Events that go through the Plugin
1:681d149:      */
1:681d149:     public void setLogAll(boolean logAll) {
1:681d149:         this.logAll = logAll;
1:681d149:     }
1:681d149: 
1:681d149: 
1:681d149:     public boolean isLogConnectionEvents() {
1:681d149:         return logConnectionEvents;
1:681d149:     }
1:681d149: 
1:681d149:     /**
1:951d870:      * Logger Events that are related to connections
1:681d149:      */
1:681d149:     public void setLogConnectionEvents(boolean logConnectionEvents) {
1:681d149:         this.logConnectionEvents = logConnectionEvents;
1:681d149:     }
1:681d149: 
1:951d870:     public boolean isLogSessionEvents() {
1:951d870:         return logSessionEvents;
1:951d870:     }
1:951d870: 
1:951d870:     /**
1:951d870:      * Logger Events that are related to sessions
1:951d870:      */
1:951d870:     public void setLogSessionEvents(boolean logSessionEvents) {
1:951d870:         this.logSessionEvents = logSessionEvents;
1:951d870:     }
1:951d870: 
1:681d149:     public boolean isLogTransactionEvents() {
1:681d149:         return logTransactionEvents;
1:681d149:     }
1:681d149: 
1:681d149:     /**
1:8bf987b:      * Logger Events that are related to transaction processing
1:681d149:      */
1:681d149:     public void setLogTransactionEvents(boolean logTransactionEvents) {
1:681d149:         this.logTransactionEvents = logTransactionEvents;
1:681d149:     }
1:681d149: 
1:681d149:     public boolean isLogConsumerEvents() {
1:681d149:         return logConsumerEvents;
1:681d149:     }
1:681d149: 
1:681d149:     /**
1:8bf987b:      * Logger Events that are related to Consumers
1:681d149:      */
1:681d149:     public void setLogConsumerEvents(boolean logConsumerEvents) {
1:681d149:         this.logConsumerEvents = logConsumerEvents;
1:681d149:     }
1:681d149: 
1:681d149:     public boolean isLogProducerEvents() {
1:681d149:         return logProducerEvents;
1:681d149:     }
1:681d149: 
1:681d149:     /**
1:8bf987b:      * Logger Events that are related to Producers
1:681d149:      */
1:681d149:     public void setLogProducerEvents(boolean logProducerEvents) {
1:681d149:         this.logProducerEvents = logProducerEvents;
1:681d149:     }
1:681d149: 
1:681d149:     public boolean isLogInternalEvents() {
1:681d149:         return logInternalEvents;
1:681d149:     }
1:681d149: 
1:681d149:     /**
1:8bf987b:      * Logger Events that are normally internal to the broker
1:681d149:      */
1:681d149:     public void setLogInternalEvents(boolean logInternalEvents) {
1:681d149:         this.logInternalEvents = logInternalEvents;
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:681d149:         if (isLogAll() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("Acknowledging message for client ID: {}{}", consumerExchange.getConnectionContext().getClientId(), (ack.getMessageCount() == 1 ? ", " + ack.getLastMessageId() : ""));
1:e1bbde7:             if (ack.getMessageCount() > 1) {
1:e1bbde7:                 LOG.trace("Message count: {}, First Message Id: {}, Last Message Id: {}", new Object[]{ ack.getMessageCount(), ack.getFirstMessageId(), ack.getLastMessageId() });
1:681d149:             }
1:681d149:         }
1:84eb9f8:         super.acknowledge(consumerExchange, ack);
1:681d149:     }
1:00879cf: 
1:204f91f:     @Override
1:00879cf:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:681d149:         if (isLogAll() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("Message Pull from: {} on {}", context.getClientId(), pull.getDestination().getPhysicalName());
12:bf310ef:         }
1:681d149:         return super.messagePull(context, pull);
1:bf310ef:     }
1:bf310ef: 
1:204f91f:     @Override
1:00879cf:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
3:681d149:         if (isLogAll() || isLogConnectionEvents()) {
1:e1bbde7:             LOG.info("Adding Connection: {}", info);
1:681d149:         }
1:681d149:         super.addConnection(context, info);
1:681d149:     }
1:bf310ef: 
1:204f91f:     @Override
1:00879cf:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:681d149:         if (isLogAll() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("Adding Consumer: {}", info);
1:bf310ef:         }
1:681d149:         return super.addConsumer(context, info);
1:681d149:     }
1:bf310ef: 
1:204f91f:     @Override
1:00879cf:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:681d149:         if (isLogAll() || isLogProducerEvents()) {
1:e1bbde7:             LOG.info("Adding Producer: {}", info);
1:681d149:         }
1:681d149:         super.addProducer(context, info);
1:681d149:     }
1:bf310ef: 
1:204f91f:     @Override
1:00879cf:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:681d149:         if (isLogAll() || isLogTransactionEvents()) {
1:e1bbde7:             LOG.info("Committing transaction: {}", xid.getTransactionKey());
1:681d149:         }
1:681d149:         super.commitTransaction(context, xid, onePhase);
1:681d149:     }
1:bf310ef: 
1:204f91f:     @Override
1:00879cf:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:681d149:         if (isLogAll() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("Removing subscription: {}", info);
1:681d149:         }
1:681d149:         super.removeSubscription(context, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
1:bf310ef: 
1:681d149:         TransactionId[] result = super.getPreparedTransactions(context);
1:681d149:         if ((isLogAll() || isLogTransactionEvents()) && result != null) {
1:681d149:             StringBuffer tids = new StringBuffer();
1:681d149:             for (TransactionId tid : result) {
1:681d149:                 if (tids.length() > 0) {
1:681d149:                     tids.append(", ");
1:681d149:                 }
1:681d149:                 tids.append(tid.getTransactionKey());
1:681d149:             }
1:e1bbde7:             LOG.info("Prepared transactions: {}", tids);
1:681d149:         }
1:681d149:         return result;
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:681d149:         if (isLogAll() || isLogTransactionEvents()) {
1:e1bbde7:             LOG.info("Preparing transaction: {}", xid.getTransactionKey());
1:681d149:         }
1:681d149:         return super.prepareTransaction(context, xid);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:681d149:         if (isLogAll() || isLogConnectionEvents()) {
1:e1bbde7:             LOG.info("Removing Connection: {}", info);
1:681d149:         }
1:681d149:         super.removeConnection(context, info, error);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:681d149:         if (isLogAll() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("Removing Consumer: {}", info);
1:681d149:         }
1:681d149:         super.removeConsumer(context, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:681d149:         if (isLogAll() || isLogProducerEvents()) {
1:e1bbde7:             LOG.info("Removing Producer: {}", info);
1:681d149:         }
1:681d149:         super.removeProducer(context, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:681d149:         if (isLogAll() || isLogTransactionEvents()) {
1:e1bbde7:             LOG.info("Rolling back Transaction: {}", xid.getTransactionKey());
1:681d149:         }
1:681d149:         super.rollbackTransaction(context, xid);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:681d149:         if (isLogAll() || isLogProducerEvents()) {
1:3222767:             logSend(messageSend.copy());
1:681d149:         }
1:681d149:         super.send(producerExchange, messageSend);
1:681d149:     }
1:681d149: 
1:3222767:     private void logSend(Message copy) {
1:9249315:         copy.getSize();
1:3222767:         Logger perDestinationsLogger = LOG;
1:3222767:         if (isPerDestinationLogger()) {
1:3222767:             ActiveMQDestination destination = copy.getDestination();
1:3222767:             perDestinationsLogger = LoggerFactory.getLogger(LOG.getName() +
1:3222767:                     "." + destination.getDestinationTypeAsString() + "." + destination.getPhysicalName());
1:3222767:         }
1:e1bbde7:         perDestinationsLogger.info("Sending message: {}", copy);
1:3222767:     }
1:3222767: 
1:204f91f:     @Override
1:00879cf:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:681d149:         if (isLogAll() || isLogTransactionEvents()) {
1:e1bbde7:             LOG.info("Beginning transaction: {}", xid.getTransactionKey());
1:681d149:         }
1:681d149:         super.beginTransaction(context, xid);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
1:681d149:         if (isLogAll() || isLogTransactionEvents()) {
1:e1bbde7:             LOG.info("Forgetting transaction: {}", transactionId.getTransactionKey());
1:681d149:         }
1:681d149:         super.forgetTransaction(context, transactionId);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public Connection[] getClients() throws Exception {
1:681d149:         Connection[] result = super.getClients();
1:681d149: 
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:681d149:             if (result == null) {
1:681d149:                 LOG.info("Get Clients returned empty list.");
1:681d149:             } else {
1:681d149:                 StringBuffer cids = new StringBuffer();
1:681d149:                 for (Connection c : result) {
1:681d149:                     cids.append(cids.length() > 0 ? ", " : "");
1:681d149:                     cids.append(c.getConnectionId());
1:681d149:                 }
1:e1bbde7:                 LOG.info("Connected clients: {}", cids);
1:681d149:             }
1:681d149:         }
1:681d149:         return super.getClients();
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public org.apache.activemq.broker.region.Destination addDestination(ConnectionContext context,
1:00879cf:             ActiveMQDestination destination, boolean create) throws Exception {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Adding destination: {}:{}", destination.getDestinationTypeAsString(), destination.getPhysicalName());
1:681d149:         }
1:00879cf:         return super.addDestination(context, destination, create);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout)
14:681d149:             throws Exception {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Removing destination: {}:{}", destination.getDestinationTypeAsString(), destination.getPhysicalName());
1:681d149:         }
1:681d149:         super.removeDestination(context, destination, timeout);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public ActiveMQDestination[] getDestinations() throws Exception {
1:681d149:         ActiveMQDestination[] result = super.getDestinations();
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:681d149:             if (result == null) {
1:681d149:                 LOG.info("Get Destinations returned empty list.");
1:681d149:             } else {
1:681d149:                 StringBuffer destinations = new StringBuffer();
1:681d149:                 for (ActiveMQDestination dest : result) {
1:681d149:                     destinations.append(destinations.length() > 0 ? ", " : "");
1:681d149:                     destinations.append(dest.getPhysicalName());
1:681d149:                 }
1:e1bbde7:                 LOG.info("Get Destinations: {}", destinations);
1:681d149:             }
1:681d149:         }
1:681d149:         return result;
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public void start() throws Exception {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Starting {}", getBrokerName());
1:681d149:         }
1:681d149:         super.start();
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public void stop() throws Exception {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Stopping {}", getBrokerName());
1:681d149:         }
1:681d149:         super.stop();
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:951d870:         if (isLogAll() || isLogSessionEvents()) {
1:e1bbde7:             LOG.info("Adding Session: {}", info);
1:681d149:         }
1:681d149:         super.addSession(context, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:951d870:         if (isLogAll() || isLogSessionEvents()) {
1:e1bbde7:             LOG.info("Removing Session: {}", info);
1:681d149:         }
1:681d149:         super.removeSession(context, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public void addBroker(Connection connection, BrokerInfo info) {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Adding Broker {}", info.getBrokerName());
1:681d149:         }
1:681d149:         super.addBroker(connection, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public void removeBroker(Connection connection, BrokerInfo info) {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Removing Broker {}", info.getBrokerName());
1:681d149:         }
1:681d149:         super.removeBroker(connection, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public BrokerInfo[] getPeerBrokerInfos() {
1:681d149:         BrokerInfo[] result = super.getPeerBrokerInfos();
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:681d149:             if (result == null) {
1:681d149:                 LOG.info("Get Peer Broker Infos returned empty list.");
1:681d149:             } else {
1:681d149:                 StringBuffer peers = new StringBuffer();
1:681d149:                 for (BrokerInfo bi : result) {
1:681d149:                     peers.append(peers.length() > 0 ? ", " : "");
1:681d149:                     peers.append(bi.getBrokerName());
1:681d149:                 }
1:e1bbde7:                 LOG.info("Get Peer Broker Infos: {}", peers);
1:681d149:             }
1:681d149:         }
1:681d149:         return result;
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:681d149:         if (isLogAll() || isLogInternalEvents() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("preProcessDispatch: {}", messageDispatch);
1:681d149:         }
1:681d149:         super.preProcessDispatch(messageDispatch);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:681d149:         if (isLogAll() || isLogInternalEvents() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("postProcessDispatch: {}", messageDispatch);
1:681d149:         }
1:681d149:         super.postProcessDispatch(messageDispatch);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:681d149:         if (isLogAll() || isLogInternalEvents() || isLogConsumerEvents()) {
1:e1bbde7:             LOG.info("ProcessDispatchNotification: {}", messageDispatchNotification);
1:681d149:         }
1:681d149:         super.processDispatchNotification(messageDispatchNotification);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public Set<ActiveMQDestination> getDurableDestinations() {
1:681d149:         Set<ActiveMQDestination> result = super.getDurableDestinations();
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:681d149:             if (result == null) {
1:681d149:                 LOG.info("Get Durable Destinations returned empty list.");
1:681d149:             } else {
1:681d149:                 StringBuffer destinations = new StringBuffer();
1:681d149:                 for (ActiveMQDestination dest : result) {
1:681d149:                     destinations.append(destinations.length() > 0 ? ", " : "");
1:681d149:                     destinations.append(dest.getPhysicalName());
1:681d149:                 }
1:e1bbde7:                 LOG.info("Get Durable Destinations: {}", destinations);
1:681d149:             }
1:681d149:         }
1:681d149:         return result;
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Adding destination info: {}", info);
1:681d149:         }
1:681d149:         super.addDestinationInfo(context, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Removing destination info: {}", info);
1:681d149:         }
1:681d149:         super.removeDestinationInfo(context, info);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:27c1719:     public void messageExpired(ConnectionContext context, MessageReference message, Subscription subscription) {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:681d149:             String msg = "Unable to display message.";
1:00879cf: 
1:681d149:             msg = message.getMessage().toString();
1:681d149: 
1:e1bbde7:             LOG.info("Message has expired: {}", msg);
1:681d149:         }
1:27c1719:         super.messageExpired(context, message, subscription);
1:681d149:     }
1:00879cf: 
1:204f91f:     @Override
1:0bb9013:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
1:708be6d:                                          Subscription subscription, Throwable poisonCause) {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:681d149:             String msg = "Unable to display message.";
1:00879cf: 
1:681d149:             msg = messageReference.getMessage().toString();
1:681d149: 
1:e1bbde7:             LOG.info("Sending to DLQ: {}", msg);
1:681d149:         }
1:708be6d:         return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:681d149:     }
1:00879cf: 
1:204f91f:     @Override
1:db1f6fe:     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo,ActiveMQDestination destination) {
1:681d149:         if (isLogAll() || isLogProducerEvents() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Fast Producer: {}", producerInfo);
1:681d149:         }
1:db1f6fe:         super.fastProducer(context, producerInfo, destination);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:5076808:     public void isFull(ConnectionContext context, Destination destination, Usage<?> usage) {
1:681d149:         if (isLogAll() || isLogProducerEvents() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Destination is full: {}", destination.getName());
1:681d149:         }
1:681d149:         super.isFull(context, destination, usage);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1:681d149:         if (isLogAll() || isLogConsumerEvents() || isLogInternalEvents()) {
1:681d149:             String msg = "Unable to display message.";
1:00879cf: 
1:681d149:             msg = messageReference.getMessage().toString();
1:00879cf: 
1:e1bbde7:             LOG.info("Message consumed: {}", msg);
1:681d149:         }
1:681d149:         super.messageConsumed(context, messageReference);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
1:681d149:         if (isLogAll() || isLogConsumerEvents() || isLogInternalEvents()) {
1:681d149:             String msg = "Unable to display message.";
1:00879cf: 
1:681d149:             msg = messageReference.getMessage().toString();
1:00879cf: 
1:e1bbde7:             LOG.info("Message delivered: {}", msg);
1:681d149:         }
1:681d149:         super.messageDelivered(context, messageReference);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:00879cf:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:681d149:             String msg = "Unable to display message.";
1:681d149: 
1:681d149:             msg = messageReference.getMessage().toString();
1:00879cf: 
1:e1bbde7:             LOG.info("Message discarded: {}", msg);
1:681d149:         }
1:3e4fc0a:         super.messageDiscarded(context, sub, messageReference);
1:681d149:     }
1:00879cf: 
1:204f91f:     @Override
1:00879cf:     public void slowConsumer(ConnectionContext context, Destination destination, Subscription subs) {
1:681d149:         if (isLogAll() || isLogConsumerEvents() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Detected slow consumer on {}", destination.getName());
1:681d149:             StringBuffer buf = new StringBuffer("Connection(");
1:681d149:             buf.append(subs.getConsumerInfo().getConsumerId().getConnectionId());
1:681d149:             buf.append(") Session(");
1:681d149:             buf.append(subs.getConsumerInfo().getConsumerId().getSessionId());
1:681d149:             buf.append(")");
1:8bf987b:             LOG.info(buf.toString());
1:681d149:         }
1:681d149:         super.slowConsumer(context, destination, subs);
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public void nowMasterBroker() {
1:681d149:         if (isLogAll() || isLogInternalEvents()) {
1:e1bbde7:             LOG.info("Is now the master broker: {}", getBrokerName());
1:681d149:         }
1:681d149:         super.nowMasterBroker();
1:681d149:     }
1:681d149: 
1:204f91f:     @Override
1:681d149:     public String toString() {
1:681d149:         StringBuffer buf = new StringBuffer();
1:681d149:         buf.append("LoggingBrokerPlugin(");
1:681d149:         buf.append("logAll=");
1:681d149:         buf.append(isLogAll());
1:681d149:         buf.append(", logConnectionEvents=");
1:681d149:         buf.append(isLogConnectionEvents());
1:951d870:         buf.append(", logSessionEvents=");
1:951d870:         buf.append(isLogSessionEvents());
1:681d149:         buf.append(", logConsumerEvents=");
1:681d149:         buf.append(isLogConsumerEvents());
1:681d149:         buf.append(", logProducerEvents=");
1:681d149:         buf.append(isLogProducerEvents());
1:681d149:         buf.append(", logTransactionEvents=");
1:681d149:         buf.append(isLogTransactionEvents());
1:681d149:         buf.append(", logInternalEvents=");
1:681d149:         buf.append(isLogInternalEvents());
1:681d149:         buf.append(")");
1:681d149:         return buf.toString();
1:681d149:     }
1:3222767: 
1:3222767:     public void setPerDestinationLogger(boolean perDestinationLogger) {
1:3222767:         this.perDestinationLogger = perDestinationLogger;
1:3222767:     }
1:3222767: 
1:3222767:     public boolean isPerDestinationLogger() {
1:3222767:         return perDestinationLogger;
1:3222767:     }
1:681d149: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1:     public void isFull(ConnectionContext context, Destination destination, Usage<?> usage) {
author:gtully
-------------------------------------------------------------------------------
commit:9249315
/////////////////////////////////////////////////////////////////////////
1:         copy.getSize();
commit:3222767
/////////////////////////////////////////////////////////////////////////
1:     private boolean perDestinationLogger = false;
/////////////////////////////////////////////////////////////////////////
1:             logSend(messageSend.copy());
1:     private void logSend(Message copy) {
1:         Logger perDestinationsLogger = LOG;
1:         if (isPerDestinationLogger()) {
1:             ActiveMQDestination destination = copy.getDestination();
1:             perDestinationsLogger = LoggerFactory.getLogger(LOG.getName() +
1:                     "." + destination.getDestinationTypeAsString() + "." + destination.getPhysicalName());
1:         }
0:         perDestinationsLogger.info("Sending message : " + copy);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setPerDestinationLogger(boolean perDestinationLogger) {
1:         this.perDestinationLogger = perDestinationLogger;
1:     }
1: 
1:     public boolean isPerDestinationLogger() {
1:         return perDestinationLogger;
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:999385e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created LoggingBrokerPlugin: {}", this.toString());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Acknowledging message for client ID: {}{}", consumerExchange.getConnectionContext().getClientId(), (ack.getMessageCount() == 1 ? ", " + ack.getLastMessageId() : ""));
1:             if (ack.getMessageCount() > 1) {
1:                 LOG.trace("Message count: {}, First Message Id: {}, Last Message Id: {}", new Object[]{ ack.getMessageCount(), ack.getFirstMessageId(), ack.getLastMessageId() });
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Message Pull from: {} on {}", context.getClientId(), pull.getDestination().getPhysicalName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Adding Connection: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Adding Consumer: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Adding Producer: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Committing transaction: {}", xid.getTransactionKey());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing subscription: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Prepared transactions: {}", tids);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Preparing transaction: {}", xid.getTransactionKey());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing Connection: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing Consumer: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing Producer: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Rolling back Transaction: {}", xid.getTransactionKey());
/////////////////////////////////////////////////////////////////////////
1:         perDestinationsLogger.info("Sending message: {}", copy);
1:             LOG.info("Beginning transaction: {}", xid.getTransactionKey());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Forgetting transaction: {}", transactionId.getTransactionKey());
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Connected clients: {}", cids);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Adding destination: {}:{}", destination.getDestinationTypeAsString(), destination.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing destination: {}:{}", destination.getDestinationTypeAsString(), destination.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Get Destinations: {}", destinations);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Starting {}", getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Stopping {}", getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Adding Session: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing Session: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Adding Broker {}", info.getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing Broker {}", info.getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Get Peer Broker Infos: {}", peers);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("preProcessDispatch: {}", messageDispatch);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("postProcessDispatch: {}", messageDispatch);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("ProcessDispatchNotification: {}", messageDispatchNotification);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Get Durable Destinations: {}", destinations);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Adding destination info: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Removing destination info: {}", info);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Message has expired: {}", msg);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Sending to DLQ: {}", msg);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Fast Producer: {}", producerInfo);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Destination is full: {}", destination.getName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Message consumed: {}", msg);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Message delivered: {}", msg);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Message discarded: {}", msg);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Detected slow consumer on {}", destination.getName());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Is now the master broker: {}", getBrokerName());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.*;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
/////////////////////////////////////////////////////////////////////////
0:         return super.sendToDeadLetterQueue(context, messageReference, subscription);
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
1:                                          Subscription subscription, Throwable poisonCause) {
/////////////////////////////////////////////////////////////////////////
1:         return super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo,ActiveMQDestination destination) {
1:         super.fastProducer(context, producerInfo, destination);
commit:951d870
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private boolean logSessionEvents = true;
/////////////////////////////////////////////////////////////////////////
1:      * Logger Events that are related to connections
1:     public boolean isLogSessionEvents() {
1:         return logSessionEvents;
1:     }
1: 
1:     /**
1:      * Logger Events that are related to sessions
1:      */
1:     public void setLogSessionEvents(boolean logSessionEvents) {
1:         this.logSessionEvents = logSessionEvents;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (isLogAll() || isLogSessionEvents()) {
/////////////////////////////////////////////////////////////////////////
1:         if (isLogAll() || isLogSessionEvents()) {
/////////////////////////////////////////////////////////////////////////
1:         buf.append(", logSessionEvents=");
1:         buf.append(isLogSessionEvents());
commit:27c1719
/////////////////////////////////////////////////////////////////////////
1:     public void messageExpired(ConnectionContext context, MessageReference message, Subscription subscription) {
/////////////////////////////////////////////////////////////////////////
1:         super.messageExpired(context, message, subscription);
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:                                       Subscription subscription) {
/////////////////////////////////////////////////////////////////////////
0:         super.sendToDeadLetterQueue(context, messageReference, subscription);
commit:610c5bf
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Adding Connection : " + info);
commit:607f1ef
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Sending message : " + messageSend.copy());
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
0:     public void messageDiscarded(ConnectionContext context,  Subscription sub,
/////////////////////////////////////////////////////////////////////////
1:         super.messageDiscarded(context, sub, messageReference);
commit:b896467
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Acknowledging message for client ID : "
0:                     + consumerExchange.getConnectionContext().getClientId() 
0:                     + (ack.getMessageCount() == 1 ? ", " + ack.getLastMessageId() : ""));
0:             if (LOG.isTraceEnabled() && ack.getMessageCount() > 1) {
0:                 LOG.trace("Message count: " + ack.getMessageCount()
0:                         + ", First Message Id: " + ack.getFirstMessageId()
commit:681d149
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.Connection;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Subscription;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.DestinationInfo;
0: import org.apache.activemq.command.MessageDispatch;
0: import org.apache.activemq.command.MessageDispatchNotification;
0: import org.apache.activemq.command.MessagePull;
0: import org.apache.activemq.command.ProducerInfo;
0: import org.apache.activemq.command.RemoveSubscriptionInfo;
0: import org.apache.activemq.command.Response;
0: import org.apache.activemq.command.SessionInfo;
0: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.usage.Usage;
0: import org.springframework.beans.factory.InitializingBean;
1:  * A simple Broker intercepter which allows you to enable/disable logging.
0: public class LoggingBrokerPlugin extends BrokerPluginSupport implements
0:         InitializingBean {
0:     private static final Log LOG = LogFactory.getLog(LoggingBrokerPlugin.class);
1: 
1:     private boolean logAll = false;
0:     private boolean logMessageEvents = false;
1:     private boolean logConnectionEvents = true;
1:     private boolean logTransactionEvents = false;
1:     private boolean logConsumerEvents = false;
1:     private boolean logProducerEvents = false;
1:     private boolean logInternalEvents = false;
1: 
1:     public void afterPropertiesSet() throws Exception {
0:         LOG.info("Created LoggingBrokerPlugin: " + this.toString());
1:     public boolean isLogAll() {
1:         return logAll;
1:     }
1:     
1:     /**
0:      * Log all Events that go through the Plugin
1:      */
1:     public void setLogAll(boolean logAll) {
1:         this.logAll = logAll;
1:     }
1: 
0:     public boolean isLogMessageEvents() {
0:         return logMessageEvents;
1:     }
1: 
1:     /**
0:      * Log Events that are related to message processing
1:      */
0:     public void setLogMessageEvents(boolean logMessageEvents) {
0:         this.logMessageEvents = logMessageEvents;
1:     }
1: 
1:     public boolean isLogConnectionEvents() {
1:         return logConnectionEvents;
1:     }
1: 
1:     /**
0:      * Log Events that are related to connections and sessions
1:      */
1:     public void setLogConnectionEvents(boolean logConnectionEvents) {
1:         this.logConnectionEvents = logConnectionEvents;
1:     }
1: 
1:     public boolean isLogTransactionEvents() {
1:         return logTransactionEvents;
1:     }
1: 
1:     /**
0:      * Log Events that are related to transaction processing
1:      */
1:     public void setLogTransactionEvents(boolean logTransactionEvents) {
1:         this.logTransactionEvents = logTransactionEvents;
1:     }
1: 
1:     public boolean isLogConsumerEvents() {
1:         return logConsumerEvents;
1:     }
1: 
1:     /**
0:      * Log Events that are related to Consumers
1:      */
1:     public void setLogConsumerEvents(boolean logConsumerEvents) {
1:         this.logConsumerEvents = logConsumerEvents;
1:     }
1: 
1:     public boolean isLogProducerEvents() {
1:         return logProducerEvents;
1:     }
1: 
1:     /**
0:      * Log Events that are related to Producers
1:      */
1:     public void setLogProducerEvents(boolean logProducerEvents) {
1:         this.logProducerEvents = logProducerEvents;
1:     }
1: 
1:     public boolean isLogInternalEvents() {
1:         return logInternalEvents;
1:     }
1: 
1:     /**
0:      * Log Events that are normally internal to the broker
1:      */
1:     public void setLogInternalEvents(boolean logInternalEvents) {
1:         this.logInternalEvents = logInternalEvents;
1:     }
1: 
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange,
0:             MessageAck ack) throws Exception {
1:         if (isLogAll() || isLogConsumerEvents()) {
0:             LOG.info("Achknowledging message for client ID : "
0:                     + consumerExchange.getConnectionContext().getClientId());
0:             if (LOG.isTraceEnabled()) {
0:                 LOG.trace("First Message Id: " + ack.getFirstMessageId()
0:                         + ", Last Message Id: " + ack.getLastMessageId());
1:             }
0:     public Response messagePull(ConnectionContext context, MessagePull pull)
1:             throws Exception {
1:         if (isLogAll() || isLogConsumerEvents()) {
0:             LOG.info("Message Pull from : " + context.getClientId() + " on "
0:                     + pull.getDestination().getPhysicalName());
1:         }
1:         return super.messagePull(context, pull);
0:     public void addConnection(ConnectionContext context, ConnectionInfo info)
1:             throws Exception {
1:         if (isLogAll() || isLogConnectionEvents()) {
0:             LOG.info("Adding Connection : " + context);
1:         }
1:         super.addConnection(context, info);
0:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info)
1:             throws Exception {
1:         if (isLogAll() || isLogConsumerEvents()) {
0:             LOG.info("Adding Consumer : " + info);
1:         }
1:         return super.addConsumer(context, info);
0:     public void addProducer(ConnectionContext context, ProducerInfo info)
1:             throws Exception {
1:         if (isLogAll() || isLogProducerEvents()) {
0:             LOG.info("Adding Producer :" + info);
1:         }
1:         super.addProducer(context, info);
0:     public void commitTransaction(ConnectionContext context, TransactionId xid,
0:             boolean onePhase) throws Exception {
1:         if (isLogAll() || isLogTransactionEvents()) {
0:             LOG.info("Commiting transaction : " + xid.getTransactionKey());
1:         }
1:         super.commitTransaction(context, xid, onePhase);
0:     public void removeSubscription(ConnectionContext context,
0:             RemoveSubscriptionInfo info) throws Exception {
1:         if (isLogAll() || isLogConsumerEvents()) {
0:             LOG.info("Removing subscription : " + info);
1:         }
1:         super.removeSubscription(context, info);
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context)
1:             throws Exception {
1: 
1:         TransactionId[] result = super.getPreparedTransactions(context);
1:         if ((isLogAll() || isLogTransactionEvents()) && result != null) {
1:             StringBuffer tids = new StringBuffer();
1:             for (TransactionId tid : result) {
1:                 if (tids.length() > 0) {
1:                     tids.append(", ");
1:                 }
1:                 tids.append(tid.getTransactionKey());
1:             }
0:             LOG.info("Prepared transactions : " + tids);
1:         }
1:         return result;
1:     }
1: 
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid)
1:             throws Exception {
1:         if (isLogAll() || isLogTransactionEvents()) {
0:             LOG.info("Preparing transaction : " + xid.getTransactionKey());
1:         }
1:         return super.prepareTransaction(context, xid);
1:     }
1: 
0:     public void removeConnection(ConnectionContext context,
0:             ConnectionInfo info, Throwable error) throws Exception {
1:         if (isLogAll() || isLogConnectionEvents()) {
0:             LOG.info("Removing Connection : " + info);
1:         }
1:         super.removeConnection(context, info, error);
1:     }
1: 
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info)
1:             throws Exception {
1:         if (isLogAll() || isLogConsumerEvents()) {
0:             LOG.info("Removing Consumer : " + info);
1:         }
1:         super.removeConsumer(context, info);
1:     }
1: 
0:     public void removeProducer(ConnectionContext context, ProducerInfo info)
1:             throws Exception {
1:         if (isLogAll() || isLogProducerEvents()) {
0:             LOG.info("Removing Producer : " + info);
1:         }
1:         super.removeProducer(context, info);
1:     }
1: 
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid)
1:             throws Exception {
1:         if (isLogAll() || isLogTransactionEvents()) {
0:             LOG.info("Rolling back Transaction : " + xid.getTransactionKey());
1:         }
1:         super.rollbackTransaction(context, xid);
1:     }
1: 
0:     public void send(ProducerBrokerExchange producerExchange,
0:             Message messageSend) throws Exception {
1:         if (isLogAll() || isLogProducerEvents()) {
0:             LOG.info("Sending message : " + messageSend);
1:         }
1:         super.send(producerExchange, messageSend);
1:     }
1: 
0:     public void beginTransaction(ConnectionContext context, TransactionId xid)
1:             throws Exception {
1:         if (isLogAll() || isLogTransactionEvents()) {
0:             LOG.info("Beginning transaction : " + xid.getTransactionKey());
1:         }
1:         super.beginTransaction(context, xid);
1:     }
1: 
0:     public void forgetTransaction(ConnectionContext context,
0:             TransactionId transactionId) throws Exception {
1:         if (isLogAll() || isLogTransactionEvents()) {
0:             LOG.info("Forgetting transaction : "
0:                     + transactionId.getTransactionKey());
1:         }
1:         super.forgetTransaction(context, transactionId);
1:     }
1: 
1:     public Connection[] getClients() throws Exception {
1:         Connection[] result = super.getClients();
1: 
1:         if (isLogAll() || isLogInternalEvents()) {
1:             if (result == null) {
1:                 LOG.info("Get Clients returned empty list.");
1:             } else {
1:                 StringBuffer cids = new StringBuffer();
1:                 for (Connection c : result) {
1:                     cids.append(cids.length() > 0 ? ", " : "");
1:                     cids.append(c.getConnectionId());
1:                 }
0:                 LOG.info("Connected clients : " + cids);
1:             }
1:         }
1:         return super.getClients();
1:     }
1: 
0:     public org.apache.activemq.broker.region.Destination addDestination(
0:             ConnectionContext context, ActiveMQDestination destination)
1:             throws Exception {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Adding destination : "
0:                     + destination.getDestinationTypeAsString() + ":"
0:                     + destination.getPhysicalName());
1:         }
0:         return super.addDestination(context, destination);
1:     }
1: 
0:     public void removeDestination(ConnectionContext context,
0:             ActiveMQDestination destination, long timeout) throws Exception {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Removing destination : "
0:                     + destination.getDestinationTypeAsString() + ":"
0:                     + destination.getPhysicalName());
1:         }
1:         super.removeDestination(context, destination, timeout);
1:     }
1: 
1:     public ActiveMQDestination[] getDestinations() throws Exception {
1:         ActiveMQDestination[] result = super.getDestinations();
1:         if (isLogAll() || isLogInternalEvents()) {
1:             if (result == null) {
1:                 LOG.info("Get Destinations returned empty list.");
1:             } else {
1:                 StringBuffer destinations = new StringBuffer();
1:                 for (ActiveMQDestination dest : result) {
1:                     destinations.append(destinations.length() > 0 ? ", " : "");
1:                     destinations.append(dest.getPhysicalName());
1:                 }
0:                 LOG.info("Get Destinations : " + destinations);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     public void start() throws Exception {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Starting " + getBrokerName());
1:         }
1:         super.start();
1:     }
1: 
1:     public void stop() throws Exception {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Stopping " + getBrokerName());
1:         }
1:         super.stop();
1:     }
1: 
0:     public void addSession(ConnectionContext context, SessionInfo info)
1:             throws Exception {
1:         if (isLogAll() || isLogConnectionEvents()) {
0:             LOG.info("Adding Session : " + info);
1:         }
1:         super.addSession(context, info);
1:     }
1: 
0:     public void removeSession(ConnectionContext context, SessionInfo info)
1:             throws Exception {
1:         if (isLogAll() || isLogConnectionEvents()) {
0:             LOG.info("Removing Session : " + info);
1:         }
1:         super.removeSession(context, info);
1:     }
1: 
1:     public void addBroker(Connection connection, BrokerInfo info) {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Adding Broker " + info.getBrokerName());
1:         }
1:         super.addBroker(connection, info);
1:     }
1: 
1:     public void removeBroker(Connection connection, BrokerInfo info) {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Removing Broker " + info.getBrokerName());
1:         }
1:         super.removeBroker(connection, info);
1:     }
1: 
1:     public BrokerInfo[] getPeerBrokerInfos() {
1:         BrokerInfo[] result = super.getPeerBrokerInfos();
1:         if (isLogAll() || isLogInternalEvents()) {
1:             if (result == null) {
1:                 LOG.info("Get Peer Broker Infos returned empty list.");
1:             } else {
1:                 StringBuffer peers = new StringBuffer();
1:                 for (BrokerInfo bi : result) {
1:                     peers.append(peers.length() > 0 ? ", " : "");
1:                     peers.append(bi.getBrokerName());
1:                 }
0:                 LOG.info("Get Peer Broker Infos : " + peers);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:         if (isLogAll() || isLogInternalEvents() || isLogConsumerEvents()) {
0:             LOG.info("preProcessDispatch :" + messageDispatch);
1:         }
1:         super.preProcessDispatch(messageDispatch);
1:     }
1: 
1:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:         if (isLogAll() || isLogInternalEvents() || isLogConsumerEvents()) {
0:             LOG.info("postProcessDispatch :" + messageDispatch);
1:         }
1:         super.postProcessDispatch(messageDispatch);
1:     }
1: 
0:     public void processDispatchNotification(
0:             MessageDispatchNotification messageDispatchNotification)
1:             throws Exception {
1:         if (isLogAll() || isLogInternalEvents() || isLogConsumerEvents()) {
0:             LOG.info("ProcessDispatchNotification :"
0:                     + messageDispatchNotification);
1:         }
1:         super.processDispatchNotification(messageDispatchNotification);
1:     }
1: 
1:     public Set<ActiveMQDestination> getDurableDestinations() {
1:         Set<ActiveMQDestination> result = super.getDurableDestinations();
1:         if (isLogAll() || isLogInternalEvents()) {
1:             if (result == null) {
1:                 LOG.info("Get Durable Destinations returned empty list.");
1:             } else {
1:                 StringBuffer destinations = new StringBuffer();
1:                 for (ActiveMQDestination dest : result) {
1:                     destinations.append(destinations.length() > 0 ? ", " : "");
1:                     destinations.append(dest.getPhysicalName());
1:                 }
0:                 LOG.info("Get Durable Destinations : " + destinations);
1:             }
1:         }
1:         return result;
1:     }
1: 
0:     public void addDestinationInfo(ConnectionContext context,
0:             DestinationInfo info) throws Exception {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Adding destination info : " + info);
1:         }
1:         super.addDestinationInfo(context, info);
1:     }
1: 
0:     public void removeDestinationInfo(ConnectionContext context,
0:             DestinationInfo info) throws Exception {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Removing destination info : " + info);
1:         }
1:         super.removeDestinationInfo(context, info);
1:     }
1: 
0:     public void messageExpired(ConnectionContext context,
0:             MessageReference message) {
1:         if (isLogAll() || isLogInternalEvents()) {
1:             String msg = "Unable to display message.";
0:             try {
1:                 msg = message.getMessage().toString();
0:             } catch (IOException ioe) {
1:             }
0:             LOG.info("Message has expired : " + msg);
1:         }
0:         super.messageExpired(context, message);
1:     }
1: 
0:     public void sendToDeadLetterQueue(ConnectionContext context,
0:             MessageReference messageReference) {
1:         if (isLogAll() || isLogInternalEvents()) {
1:             String msg = "Unable to display message.";
0:             try {
1:                 msg = messageReference.getMessage().toString();
0:             } catch (IOException ioe) {
1:             }
0:             LOG.info("Sending to DLQ : " + msg);
1:         }
1:     }
1: 
0:     public void fastProducer(ConnectionContext context,
0:             ProducerInfo producerInfo) {
1:         if (isLogAll() || isLogProducerEvents() || isLogInternalEvents()) {
0:             LOG.info("Fast Producer : " + producerInfo);
1:         }
0:         super.fastProducer(context, producerInfo);
1:     }
1: 
0:     public void isFull(ConnectionContext context, Destination destination,
0:             Usage usage) {
1:         if (isLogAll() || isLogProducerEvents() || isLogInternalEvents()) {
0:             LOG.info("Destination is full : " + destination.getName());
1:         }
1:         super.isFull(context, destination, usage);
1:     }
1: 
0:     public void messageConsumed(ConnectionContext context,
0:             MessageReference messageReference) {
1:         if (isLogAll() || isLogConsumerEvents() || isLogInternalEvents()) {
1:             String msg = "Unable to display message.";
0:             try {
1:                 msg = messageReference.getMessage().toString();
0:             } catch (IOException ioe) {
1:             }
0:             LOG.info("Message consumed : " + msg);
1:         }
1:         super.messageConsumed(context, messageReference);
1:     }
1: 
0:     public void messageDelivered(ConnectionContext context,
0:             MessageReference messageReference) {
1:         if (isLogAll() || isLogConsumerEvents() || isLogInternalEvents()) {
1:             String msg = "Unable to display message.";
0:             try {
1:                 msg = messageReference.getMessage().toString();
0:             } catch (IOException ioe) {
1:             }
0:             LOG.info("Message delivered : " + msg);
1:         }
1:         super.messageDelivered(context, messageReference);
1:     }
1: 
0:     public void messageDiscarded(ConnectionContext context,
0:             MessageReference messageReference) {
1:         if (isLogAll() || isLogInternalEvents()) {
1:             String msg = "Unable to display message.";
0:             try {
1:                 msg = messageReference.getMessage().toString();
0:             } catch (IOException ioe) {
1:             }
0:             LOG.info("Message discarded : " + msg);
1:         }
0:         super.messageDiscarded(context, messageReference);
1:     }
1: 
0:     public void slowConsumer(ConnectionContext context,
0:             Destination destination, Subscription subs) {
1:         if (isLogAll() || isLogConsumerEvents() || isLogInternalEvents()) {
0:             LOG.info("Detected slow consumer on " + destination.getName());
1:             StringBuffer buf = new StringBuffer("Connection(");
1:             buf.append(subs.getConsumerInfo().getConsumerId().getConnectionId());
1:             buf.append(") Session(");
1:             buf.append(subs.getConsumerInfo().getConsumerId().getSessionId());
1:             buf.append(")");
0:             LOG.info(buf);
1:         }
1:         super.slowConsumer(context, destination, subs);
1:     }
1: 
1:     public void nowMasterBroker() {
1:         if (isLogAll() || isLogInternalEvents()) {
0:             LOG.info("Is now the master broker : " + getBrokerName());
1:         }
1:         super.nowMasterBroker();
1:     }
1: 
1:     public String toString() {
1:         StringBuffer buf = new StringBuffer();
1:         buf.append("LoggingBrokerPlugin(");
1:         buf.append("logAll=");
1:         buf.append(isLogAll());
1:         buf.append(", logConnectionEvents=");
1:         buf.append(isLogConnectionEvents());
1:         buf.append(", logConsumerEvents=");
1:         buf.append(isLogConsumerEvents());
1:         buf.append(", logProducerEvents=");
1:         buf.append(isLogProducerEvents());
0:         buf.append(", logMessageEvents=");
0:         buf.append(isLogMessageEvents());
1:         buf.append(", logTransactionEvents=");
1:         buf.append(isLogTransactionEvents());
1:         buf.append(", logInternalEvents=");
1:         buf.append(isLogInternalEvents());
1:         buf.append(")");
1:         return buf.toString();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private Log sendLog = LogFactory.getLog(LoggingBrokerPlugin.class.getName() + ".Send");
0:     private Log ackLog = LogFactory.getLog(LoggingBrokerPlugin.class.getName() + ".Ack");
commit:4c1cc95
/////////////////////////////////////////////////////////////////////////
0:     private Log sendLog = LogFactory.getLog(LoggingBrokerPlugin.class.getName()+".Send");
0:     private Log ackLog = LogFactory.getLog(LoggingBrokerPlugin.class.getName()+".Ack");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(LoggingBrokerPlugin.class);
/////////////////////////////////////////////////////////////////////////
1:      * Logger all Events that go through the Plugin
/////////////////////////////////////////////////////////////////////////
0:      * Logger Events that are related to message processing
/////////////////////////////////////////////////////////////////////////
0:      * Logger Events that are related to connections and sessions
/////////////////////////////////////////////////////////////////////////
1:      * Logger Events that are related to transaction processing
/////////////////////////////////////////////////////////////////////////
1:      * Logger Events that are related to Consumers
/////////////////////////////////////////////////////////////////////////
1:      * Logger Events that are related to Producers
/////////////////////////////////////////////////////////////////////////
1:      * Logger Events that are normally internal to the broker
/////////////////////////////////////////////////////////////////////////
1:             LOG.info(buf.toString());
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
0:             LOG.info("Acknowledging message for client ID : " + consumerExchange.getConnectionContext().getClientId()
0:                 LOG.trace("Message count: " + ack.getMessageCount() + ", First Message Id: " + ack.getFirstMessageId()
/////////////////////////////////////////////////////////////////////////
1:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
0:             LOG.info("Message Pull from : " + context.getClientId() + " on " + pull.getDestination().getPhysicalName());
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
0:             LOG.info("Forgetting transaction : " + transactionId.getTransactionKey());
/////////////////////////////////////////////////////////////////////////
1:     public org.apache.activemq.broker.region.Destination addDestination(ConnectionContext context,
1:             ActiveMQDestination destination, boolean create) throws Exception {
0:             LOG.info("Adding destination : " + destination.getDestinationTypeAsString() + ":"
1:         return super.addDestination(context, destination, create);
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout)
0:             throws Exception {
0:             LOG.info("Removing destination : " + destination.getDestinationTypeAsString() + ":"
/////////////////////////////////////////////////////////////////////////
1:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
0:             LOG.info("ProcessDispatchNotification :" + messageDispatchNotification);
/////////////////////////////////////////////////////////////////////////
1:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void messageExpired(ConnectionContext context, MessageReference message) {
1: 
0:             msg = message.getMessage().toString();
1: 
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference) {
1: 
0:             msg = messageReference.getMessage().toString();
1: 
0:     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {
/////////////////////////////////////////////////////////////////////////
0:     public void isFull(ConnectionContext context, Destination destination, Usage usage) {
/////////////////////////////////////////////////////////////////////////
1:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1: 
0:             msg = messageReference.getMessage().toString();
1: 
1:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
1: 
0:             msg = messageReference.getMessage().toString();
1: 
1:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1: 
0:             msg = messageReference.getMessage().toString();
1: 
1:     public void slowConsumer(ConnectionContext context, Destination destination, Subscription subs) {
commit:a65881c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         super.sendToDeadLetterQueue(context, messageReference);
commit:204f91f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:             ConnectionContext context, ActiveMQDestination destination,boolean create)
0:         return super.addDestination(context, destination,create);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
0:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
0:         super.send(producerExchange, messageSend);
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:         super.acknowledge(consumerExchange, ack);
author:David Jencks
-------------------------------------------------------------------------------
commit:09fab74
/////////////////////////////////////////////////////////////////////////
1: 
1: import javax.annotation.PostConstruct;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class LoggingBrokerPlugin extends BrokerPluginSupport {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *
1:      * @throws Exception
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
author:James Strachan
-------------------------------------------------------------------------------
commit:bf310ef
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import org.apache.activemq.broker.BrokerPluginSupport;
0: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageAck;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * A simple Broker interceptor which allows you to enable/disable logging.
0:  * 
1:  * @org.apache.xbean.XBean
0:  * 
0:  * @version $Revision$
1:  */
0: public class LoggingBrokerPlugin extends BrokerPluginSupport {
1: 
0:     private Log log = LogFactory.getLog(LoggingBrokerPlugin.class);
0:     private Log sendLog;
0:     private Log ackLog;
1: 
0:     public void send(ConnectionContext context, Message messageSend) throws Exception {
0:         if (sendLog == null) {
0:             sendLog = createLog("Send");
1:         }
0:         if (sendLog.isInfoEnabled()) {
0:             sendLog.info("Sending: " + messageSend);
1:         }
0:         super.send(context, messageSend);
1:     }
1: 
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
0:         if (ackLog == null) {
0:             ackLog = createLog("Ack");
1:         }
0:         if (ackLog.isInfoEnabled()) {
0:             ackLog.info("Acknowledge: " + ack);
1:         }
0:         super.acknowledge(context, ack);
1:     }
1: 
0:     // Properties
0:     // -------------------------------------------------------------------------
0:     public Log getAckLog() {
0:         return ackLog;
1:     }
1: 
0:     public void setAckLog(Log ackLog) {
0:         this.ackLog = ackLog;
1:     }
1: 
0:     public Log getLog() {
0:         return log;
1:     }
1: 
0:     public void setLog(Log log) {
0:         this.log = log;
1:     }
1: 
0:     public Log getSendLog() {
0:         return sendLog;
1:     }
1: 
0:     public void setSendLog(Log sendLog) {
0:         this.sendLog = sendLog;
1:     }
1: 
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
1: 
1:     /**
0:      * Lazily creates a new child log
1:      */
0:     protected Log createLog(String name) {
0:         return LogFactory.getLog(log.toString() + "." + name);
1:     }
1: 
1: }
============================================================================