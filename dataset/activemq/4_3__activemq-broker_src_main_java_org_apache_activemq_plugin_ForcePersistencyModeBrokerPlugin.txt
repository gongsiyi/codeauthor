4:d779c4a: /**
1:d779c4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d779c4a:  * contributor license agreements.  See the NOTICE file distributed with
1:d779c4a:  * this work for additional information regarding copyright ownership.
1:d779c4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d779c4a:  * (the "License"); you may not use this file except in compliance with
1:d779c4a:  * the License.  You may obtain a copy of the License at
3:d779c4a:  *
1:d779c4a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d779c4a:  *
1:d779c4a:  * Unless required by applicable law or agreed to in writing, software
1:d779c4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d779c4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d779c4a:  * See the License for the specific language governing permissions and
1:d779c4a:  * limitations under the License.
5:d779c4a:  */
1:d779c4a: package org.apache.activemq.plugin;
6:d779c4a: 
1:d779c4a: import org.apache.activemq.broker.Broker;
1:d779c4a: import org.apache.activemq.broker.BrokerPlugin;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d779c4a: 
1:6fc3744: /**
1:5e05df1:  * A Plugin which allows to force every incoming message to be PERSISTENT or
1:5e05df1:  * NON-PERSISTENT.
1:5e05df1:  *
1:5e05df1:  * Useful, if you have set the broker usage policy to process ONLY persistent or
1:5e05df1:  * ONLY non-persistent messages.
1:5e05df1:  *
1:5e05df1:  * @org.apache.xbean.XBean element="forcePersistencyModeBrokerPlugin"
1:6fc3744:  */
1:d779c4a: public class ForcePersistencyModeBrokerPlugin implements BrokerPlugin {
1:5e05df1:     private static Logger LOG = LoggerFactory.getLogger(ForcePersistencyModeBrokerPlugin.class);
1:5e05df1:     private boolean persistenceFlag = false;
1:d779c4a: 
1:5e05df1:     /**
1:5e05df1:      * Constructor
1:5e05df1:      */
1:5e05df1:     public ForcePersistencyModeBrokerPlugin() {}
1:d779c4a: 
1:5e05df1:     /**
1:5e05df1:      * @param broker
1:5e05df1:      *
1:5e05df1:      * @return the Broker
1:5e05df1:      *
1:5e05df1:      * @throws Exception
1:5e05df1:      *
1:5e05df1:      * @see org.apache.activemq.broker.BrokerPlugin#installPlugin(org.apache.activemq.broker.Broker)
1:5e05df1:      */
1:5e05df1:     @Override
1:5e05df1:     public Broker installPlugin(Broker broker) throws Exception {
1:5e05df1:         ForcePersistencyModeBroker pB = new ForcePersistencyModeBroker(broker);
1:5e05df1:         pB.setPersistenceFlag(isPersistenceForced());
1:5e05df1:         LOG.info("Installing ForcePersistencyModeBroker plugin: persistency enforced={}", pB.isPersistent());
1:5e05df1:         return pB;
1:5e05df1:     }
1:d779c4a: 
1:5e05df1:     /**
1:5e05df1:      * Sets the persistence mode.
1:5e05df1:      *
1:5e05df1:      * @param persistenceFlag
1:5e05df1:      */
1:5e05df1:     public void setPersistenceFlag(final boolean persistenceFlag) {
1:5e05df1:         this.persistenceFlag = persistenceFlag;
1:5e05df1:     }
1:d779c4a: 
1:5e05df1:     /**
1:5e05df1:      * @return the mode the (activated) plugin will set the message delivery
1:5e05df1:      *         mode
1:5e05df1:      */
1:5e05df1:     public final boolean isPersistenceForced() {
1:5e05df1:         return persistenceFlag;
1:5e05df1:     }
5:d779c4a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:  * A Plugin which allows to force every incoming message to be PERSISTENT or
1:  * NON-PERSISTENT.
1:  *
1:  * Useful, if you have set the broker usage policy to process ONLY persistent or
1:  * ONLY non-persistent messages.
1:  *
1:  * @org.apache.xbean.XBean element="forcePersistencyModeBrokerPlugin"
1:     private static Logger LOG = LoggerFactory.getLogger(ForcePersistencyModeBrokerPlugin.class);
1:     private boolean persistenceFlag = false;
1:     /**
1:      * Constructor
1:      */
1:     public ForcePersistencyModeBrokerPlugin() {}
1:     /**
1:      * @param broker
1:      *
1:      * @return the Broker
1:      *
1:      * @throws Exception
1:      *
1:      * @see org.apache.activemq.broker.BrokerPlugin#installPlugin(org.apache.activemq.broker.Broker)
1:      */
1:     @Override
1:     public Broker installPlugin(Broker broker) throws Exception {
1:         ForcePersistencyModeBroker pB = new ForcePersistencyModeBroker(broker);
1:         pB.setPersistenceFlag(isPersistenceForced());
1:         LOG.info("Installing ForcePersistencyModeBroker plugin: persistency enforced={}", pB.isPersistent());
1:         return pB;
1:     }
1:     /**
1:      * Sets the persistence mode.
1:      *
1:      * @param persistenceFlag
1:      */
1:     public void setPersistenceFlag(final boolean persistenceFlag) {
1:         this.persistenceFlag = persistenceFlag;
1:     }
1:     /**
1:      * @return the mode the (activated) plugin will set the message delivery
1:      *         mode
1:      */
1:     public final boolean isPersistenceForced() {
1:         return persistenceFlag;
1:     }
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
0:     LOG.info("Installing ForcePersistencyModeBroker plugin: persistency enforced={}", pB.isPersistent());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:   private static Logger LOG = LoggerFactory.getLogger(ForcePersistencyModeBrokerPlugin.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:6fc3744
/////////////////////////////////////////////////////////////////////////
0:  *  @org.apache.xbean.XBean element="forcePersistencyModeBrokerPlugin"
0:   private static Log LOG = LogFactory.getLog(ForcePersistencyModeBrokerPlugin.class);
1:   /**
0:  * Constructor
1:  */
0: public ForcePersistencyModeBrokerPlugin() {
/////////////////////////////////////////////////////////////////////////
0:     LOG.info("Installing ForcePersistencyModeBroker plugin: persistency enforced=" + pB.isPersistent());
commit:d779c4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: /**
0:  * A Plugin which allows to force every incoming message to be PERSISTENT or NON-PERSISTENT. 
1:  * 
0:  * Useful, if you have set the broker usage policy to process ONLY persistent or ONLY non-persistent
0:  * messages. 
1:  */
1: public class ForcePersistencyModeBrokerPlugin implements BrokerPlugin {
0:   public static Log log = LogFactory.getLog(ForcePersistencyModeBrokerPlugin.class);
0:   private boolean persistenceFlag = false;
1:   
0:   public ForcePersistencyModeBrokerPlugin() {
1:   }
1: 
1:   /** 
0:  * @param broker
0:  * @return the Broker
0:  * @throws Exception
0:  * @see org.apache.activemq.broker.BrokerPlugin#installPlugin(org.apache.activemq.broker.Broker)
1:  */
1: 
0:   public Broker installPlugin(Broker broker) throws Exception{
0:     ForcePersistencyModeBroker pB = new ForcePersistencyModeBroker(broker);
0:     pB.setPersistenceFlag(isPersistenceForced());
0:     log.info("Installing ForcePersistencyModeBroker plugin: persistency enforced=" + pB.isPersistent());
0:     return pB;
1:   }
1: 
0:   /** Sets the persistency mode.
1:    *  
0:    * @param persistenceFlag
1:    */
0:   public void setPersistenceFlag(final boolean persistenceFlag) {
0:     this.persistenceFlag = persistenceFlag;
1:   }
1: 
1:   /**
0:    * @return the mode the (activated) plugin will set the message delivery mode 
1:    */
0:   public final boolean isPersistenceForced() {
0:     return persistenceFlag;
1:   }
1:   
1: }
1: 
============================================================================