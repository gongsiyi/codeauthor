1:bf62dc8: /**
1:bf62dc8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf62dc8:  * contributor license agreements.  See the NOTICE file distributed with
1:bf62dc8:  * this work for additional information regarding copyright ownership.
1:bf62dc8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf62dc8:  * (the "License"); you may not use this file except in compliance with
1:bf62dc8:  * the License.  You may obtain a copy of the License at
1:bf62dc8:  *
1:bf62dc8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf62dc8:  *
1:bf62dc8:  * Unless required by applicable law or agreed to in writing, software
1:bf62dc8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf62dc8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf62dc8:  * See the License for the specific language governing permissions and
1:bf62dc8:  * limitations under the License.
1:bf62dc8:  */
3:bf62dc8: 
1:bf62dc8: package org.apache.activemq.bugs;
1:bf62dc8: 
1:bf62dc8: import javax.jms.Connection;
1:bf62dc8: import javax.jms.Destination;
1:bf62dc8: import javax.jms.JMSException;
1:bf62dc8: import javax.jms.Message;
1:bf62dc8: import javax.jms.MessageProducer;
1:bf62dc8: import javax.jms.Session;
1:bf62dc8: import javax.management.MalformedObjectNameException;
1:bf62dc8: import javax.management.ObjectName;
1:bf62dc8: import javax.management.openmbean.CompositeData;
1:bf62dc8: import org.apache.activemq.ActiveMQConnectionFactory;
1:bf62dc8: import org.apache.activemq.broker.BrokerService;
1:bf62dc8: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:bf62dc8: import org.apache.activemq.command.ActiveMQQueue;
1:bf62dc8: import org.junit.After;
1:bf62dc8: import org.junit.Before;
1:bf62dc8: import org.junit.Test;
1:bf62dc8: import org.slf4j.Logger;
1:bf62dc8: import org.slf4j.LoggerFactory;
1:bf62dc8: import static org.junit.Assert.assertNotNull;
1:bf62dc8: import static org.junit.Assert.assertNull;
1:bf62dc8: 
1:bf62dc8: public class AMQ3934Test {
1:bf62dc8: 
1:bf62dc8:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3934Test.class);
1:bf62dc8:     private static BrokerService brokerService;
1:bf62dc8:     private static String TEST_QUEUE = "testQueue";
1:bf62dc8:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1:bf62dc8:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:bf62dc8: 
1:bf62dc8:     private ActiveMQConnectionFactory connectionFactory;
1:bf62dc8:     private String connectionUri;
1:bf62dc8:     private String messageID;
1:bf62dc8: 
1:bf62dc8:     @Before
1:bf62dc8:     public void setUp() throws Exception {
1:bf62dc8:         brokerService = new BrokerService();
1:bf62dc8:         brokerService.setPersistent(false);
1:bf62dc8:         brokerService.setUseJmx(true);
1:bf62dc8:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:bf62dc8:         brokerService.start();
1:bf62dc8:         brokerService.waitUntilStarted();
1:bf62dc8: 
1:bf62dc8:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:bf62dc8:         sendMessage();
1:bf62dc8:     }
1:bf62dc8: 
1:bf62dc8:     public void sendMessage() throws Exception {
1:bf62dc8:         final Connection conn = connectionFactory.createConnection();
1:bf62dc8:         try {
1:bf62dc8:             conn.start();
1:bf62dc8:             final Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bf62dc8:             final Destination queue = session.createQueue(TEST_QUEUE);
1:bf62dc8:             final Message toSend = session.createMessage();
1:bf62dc8:             final MessageProducer producer = session.createProducer(queue);
1:bf62dc8:             producer.send(queue, toSend);
1:bf62dc8:         } finally {
1:bf62dc8:             conn.close();
1:bf62dc8:         }
1:bf62dc8:     }
1:bf62dc8: 
1:bf62dc8:     @After
1:bf62dc8:     public void tearDown() throws Exception {
1:bf62dc8:         brokerService.stop();
1:bf62dc8:         brokerService.waitUntilStopped();
1:bf62dc8:     }
1:bf62dc8: 
1:bf62dc8:     @Test
1:bf62dc8:     public void getMessage() throws Exception {
1:bf62dc8:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:bf62dc8:         final CompositeData messages[] = queueView.browse();
1:bf62dc8:         messageID = (String) messages[0].get("JMSMessageID");
1:bf62dc8:         assertNotNull(messageID);
1:bf62dc8:         assertNotNull(queueView.getMessage(messageID));
1:bf62dc8:         LOG.debug("Attempting to remove message ID: " + messageID);
1:bf62dc8:         queueView.removeMessage(messageID);
1:bf62dc8:         assertNull(queueView.getMessage(messageID));
1:bf62dc8:     }
1:bf62dc8: 
1:bf62dc8:     private QueueViewMBean getProxyToQueueViewMBean() throws MalformedObjectNameException, NullPointerException,
1:bf62dc8:             JMSException {
1:cb7b657:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
1:bf62dc8:         final QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:bf62dc8:                 queueViewMBeanName, QueueViewMBean.class, true);
1:bf62dc8:         return proxy;
1:bf62dc8:     }
1:bf62dc8: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:bf62dc8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3934Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3934Test.class);
1:     private static BrokerService brokerService;
1:     private static String TEST_QUEUE = "testQueue";
1:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1: 
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private String connectionUri;
1:     private String messageID;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         sendMessage();
1:     }
1: 
1:     public void sendMessage() throws Exception {
1:         final Connection conn = connectionFactory.createConnection();
1:         try {
1:             conn.start();
1:             final Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             final Destination queue = session.createQueue(TEST_QUEUE);
1:             final Message toSend = session.createMessage();
1:             final MessageProducer producer = session.createProducer(queue);
1:             producer.send(queue, toSend);
1:         } finally {
1:             conn.close();
1:         }
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void getMessage() throws Exception {
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:         final CompositeData messages[] = queueView.browse();
1:         messageID = (String) messages[0].get("JMSMessageID");
1:         assertNotNull(messageID);
1:         assertNotNull(queueView.getMessage(messageID));
1:         LOG.debug("Attempting to remove message ID: " + messageID);
1:         queueView.removeMessage(messageID);
1:         assertNull(queueView.getMessage(messageID));
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean() throws MalformedObjectNameException, NullPointerException,
1:             JMSException {
0:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:Type=Queue,Destination="
0:                 + queue.getQueueName() + ",BrokerName=localhost");
1:         final QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:                 queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
1:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
============================================================================