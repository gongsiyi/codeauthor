1:261ccab: /**
1:261ccab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:261ccab:  * contributor license agreements.  See the NOTICE file distributed with
1:261ccab:  * this work for additional information regarding copyright ownership.
1:261ccab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:261ccab:  * (the "License"); you may not use this file except in compliance with
1:261ccab:  * the License.  You may obtain a copy of the License at
1:261ccab:  *
1:261ccab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:261ccab:  *
1:261ccab:  * Unless required by applicable law or agreed to in writing, software
1:261ccab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:261ccab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:261ccab:  * See the License for the specific language governing permissions and
1:261ccab:  * limitations under the License.
1:261ccab:  */
1:3536b1e: package org.apache.activemq.util;
1:3536b1e: 
1:3536b1e: import java.util.HashMap;
1:3536b1e: import java.util.Map.Entry;
1:3536b1e: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:3536b1e: 
1:3536b1e: /**
1:3536b1e:  * Debugging tool to track entry points through code, useful to see runtime call paths
1:3536b1e:  * To use, add to a method as follows:<code>
1:3536b1e:  *  public void someMethod() {
1:3536b1e:  *      ThreadTracker.track("someMethod");
1:3536b1e:  *      ...
1:3536b1e:  *  }</code>
1:3536b1e:  *  and at some stage call <code>result</code> to get a LOG
1:3536b1e:  *  output of the callers with an associated call count
1:3536b1e:  *      
1:3536b1e:  */
1:3536b1e: public class ThreadTracker {
1:3536b1e: 
1:8bf987b:     static final Logger LOG = LoggerFactory.getLogger(ThreadTracker.class);  
1:3536b1e:     static HashMap<String, Tracker> trackers = new HashMap<String, Tracker>();
1:3536b1e:     
1:3536b1e:     /**
1:3536b1e:      * track the stack trace of callers
1:3536b1e:      * @param name the method being tracked
1:3536b1e:      */
1:5619cd0:     public static void track(final String name) {
1:3536b1e:         Tracker t;
1:5619cd0:         final String key = name.intern();
1:3536b1e:         synchronized(trackers) {
1:5619cd0:             t = trackers.get(key);
1:3536b1e:             if (t == null) {
1:3536b1e:                 t = new Tracker();
1:5619cd0:                 trackers.put(key, t);
1:3536b1e:             }
1:3536b1e:         }
1:3536b1e:         t.track();
1:3536b1e:     }
1:3536b1e:     
1:3536b1e:     /**
1:3536b1e:      * output the result of stack trace capture to the log
1:3536b1e:      */
1:3536b1e:     public static void result() {
1:a2af47b:         synchronized(trackers) {
1:a2af47b:             for (Entry<String, Tracker> t: trackers.entrySet()) {
1:a2af47b:                 LOG.info("Tracker: " + t.getKey() + ", " + t.getValue().size() + " entry points...");
1:a2af47b:                 for (Trace trace : t.getValue().values()) {
1:a2af47b:                     LOG.info("count: " + trace.count, trace);
1:a2af47b:                 }
1:a2af47b:                 LOG.info("Tracker: " + t.getKey() + ", done.");
1:3536b1e:             }
1:3536b1e:         }
1:3536b1e:     }
1:3536b1e: 
1:3536b1e: }
1:3536b1e: 
1:3536b1e: @SuppressWarnings("serial")
1:3536b1e: class Trace extends Throwable {
1:c808beb:     public int count = 1;
1:5619cd0:     public final long id;
1:3536b1e:     Trace() {
1:3536b1e:         super();
1:5619cd0:         id = calculateIdentifier();
1:5619cd0:     }
1:5619cd0:     private long calculateIdentifier() {
1:5619cd0:         int len = 0;
1:5619cd0:         for (int i=0; i<this.getStackTrace().length; i++) {
1:5619cd0:             len += this.getStackTrace()[i].toString().intern().hashCode();
1:5619cd0:         }
1:5619cd0:         return len;
1:3536b1e:     }
1:3536b1e: }
1:3536b1e: 
1:3536b1e: @SuppressWarnings("serial")
1:5619cd0: class Tracker extends HashMap<Long, Trace> {
1:3536b1e:     public void track() {
1:3536b1e:         Trace current = new Trace();
1:3536b1e:         synchronized(this) {
1:5619cd0:             Trace exist = get(current.id);
1:3536b1e:             if (exist != null) {
1:3536b1e:                 exist.count++;
1:3536b1e:             } else {
1:5619cd0:                 put(current.id, current);
1:3536b1e:             }
1:3536b1e:         }
1:3536b1e:     }
1:3536b1e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     static final Logger LOG = LoggerFactory.getLogger(ThreadTracker.class);  
commit:261ccab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Gary Tully
-------------------------------------------------------------------------------
commit:a2af47b
/////////////////////////////////////////////////////////////////////////
1:         synchronized(trackers) {
1:             for (Entry<String, Tracker> t: trackers.entrySet()) {
1:                 LOG.info("Tracker: " + t.getKey() + ", " + t.getValue().size() + " entry points...");
1:                 for (Trace trace : t.getValue().values()) {
1:                     LOG.info("count: " + trace.count, trace);
1:                 }
1:                 LOG.info("Tracker: " + t.getKey() + ", done.");
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
1:     public static void track(final String name) {
1:         final String key = name.intern();
1:             t = trackers.get(key);
1:                 trackers.put(key, t);
/////////////////////////////////////////////////////////////////////////
1:     public final long id;
1:         id = calculateIdentifier();
1:     }
1:     private long calculateIdentifier() {
1:         int len = 0;
1:         for (int i=0; i<this.getStackTrace().length; i++) {
1:             len += this.getStackTrace()[i].toString().intern().hashCode();
1:         }
1:         return len;
1: class Tracker extends HashMap<Long, Trace> {
1:             Trace exist = get(current.id);
1:                 put(current.id, current);
commit:c808beb
/////////////////////////////////////////////////////////////////////////
1:     public int count = 1;
commit:3536b1e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.util;
1: 
1: import java.util.HashMap;
1: import java.util.Map.Entry;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Debugging tool to track entry points through code, useful to see runtime call paths
1:  * To use, add to a method as follows:<code>
1:  *  public void someMethod() {
1:  *      ThreadTracker.track("someMethod");
1:  *      ...
1:  *  }</code>
1:  *  and at some stage call <code>result</code> to get a LOG
1:  *  output of the callers with an associated call count
1:  *      
1:  */
1: public class ThreadTracker {
1: 
0:     static final Log LOG = LogFactory.getLog(ThreadTracker.class);  
1:     static HashMap<String, Tracker> trackers = new HashMap<String, Tracker>();
1:     
1:     /**
1:      * track the stack trace of callers
1:      * @param name the method being tracked
1:      */
0:     public static void track(String name) {
1:         Tracker t;
1:         synchronized(trackers) {
0:             t = trackers.get(name);
1:             if (t == null) {
1:                 t = new Tracker();
0:                 trackers.put(name, t);
1:             }
1:         }
1:         t.track();
1:     }
1:     
1:     /**
1:      * output the result of stack trace capture to the log
1:      */
1:     public static void result() {
0:         for (Entry<String, Tracker> t: trackers.entrySet()) {
0:             LOG.info("Tracker: " + t.getKey() + ", " + t.getValue().size() + " entry points...");
0:             for (Trace trace : t.getValue().values()) {
0:                 LOG.info("count: " + trace.count, trace);
1:             }
0:             LOG.info("Tracker: " + t.getKey() + ", done.");
1:         }
1:     }
1: 
1: }
1: 
1: @SuppressWarnings("serial")
1: class Trace extends Throwable {
0:     public int count;
0:     public final int size;
1:     Trace() {
1:         super();
0:         size = this.getStackTrace().length;
1:     }
1: }
1: 
1: @SuppressWarnings("serial")
0: class Tracker extends HashMap<Integer, Trace> {
1:     public void track() {
1:         Trace current = new Trace();
1:         synchronized(this) {
0:             Trace exist = get(current.size);
1:             if (exist != null) {
1:                 exist.count++;
1:             } else {
0:                 put(current.size, current);
1:             }
1:         }
1:     }
1: }
============================================================================