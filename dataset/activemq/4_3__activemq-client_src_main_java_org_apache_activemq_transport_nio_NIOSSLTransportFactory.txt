1:e504086: /**
1:e504086:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e504086:  * contributor license agreements.  See the NOTICE file distributed with
1:e504086:  * this work for additional information regarding copyright ownership.
1:e504086:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e504086:  * (the "License"); you may not use this file except in compliance with
1:e504086:  * the License.  You may obtain a copy of the License at
1:e504086:  *
1:e504086:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e504086:  *
1:e504086:  * Unless required by applicable law or agreed to in writing, software
1:e504086:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e504086:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e504086:  * See the License for the specific language governing permissions and
1:e504086:  * limitations under the License.
1:e504086:  */
4:e504086: 
1:e504086: package org.apache.activemq.transport.nio;
1:e504086: 
1:e504086: import java.io.IOException;
1:04ee70a: import java.net.Socket;
1:e504086: import java.net.URI;
1:e504086: import java.net.URISyntaxException;
1:e504086: import java.net.UnknownHostException;
1:04ee70a: import java.nio.ByteBuffer;
1:e504086: import java.util.Map;
1:e504086: 
1:0fffe21: import javax.net.ServerSocketFactory;
1:0fffe21: import javax.net.SocketFactory;
1:0fffe21: import javax.net.ssl.SSLContext;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:0fffe21: import javax.net.ssl.SSLSocketFactory;
1:0fffe21: 
1:0fffe21: import org.apache.activemq.broker.SslContext;
1:0fffe21: import org.apache.activemq.transport.Transport;
1:0fffe21: import org.apache.activemq.transport.TransportServer;
1:0fffe21: import org.apache.activemq.transport.tcp.SslTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:0fffe21: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:0fffe21: import org.apache.activemq.util.IOExceptionSupport;
1:0fffe21: import org.apache.activemq.util.IntrospectionSupport;
1:0fffe21: import org.apache.activemq.wireformat.WireFormat;
1:0fffe21: import org.slf4j.Logger;
1:0fffe21: import org.slf4j.LoggerFactory;
1:0fffe21: 
1:e504086: public class NIOSSLTransportFactory extends NIOTransportFactory {
1:e504086:     private static final Logger LOG = LoggerFactory.getLogger(NIOSSLTransportFactory.class);
1:e6285b7: 
1:e6285b7:     protected SSLContext context;
1:e504086: 
1:04ee70a:     @Override
1:e504086:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:e6285b7:         return new NIOSSLTransportServer(context, this, location, serverSocketFactory);
6:e504086:     }
1:0fffe21: 
1:0fffe21:     @Override
1:e504086:     public TransportServer doBind(URI location) throws IOException {
1:e6285b7:         if (SslContext.getCurrentSslContext() != null) {
1:e6285b7:             try {
1:e6285b7:                 context = SslContext.getCurrentSslContext().getSSLContext();
1:e6285b7:             } catch (Exception e) {
1:e6285b7:                 throw new IOException(e);
1:e6285b7:             }
1:e6285b7:         }
1:e504086:         return super.doBind(location);
1:0fffe21:     }
1:e504086: 
1:e504086:     /**
1:e6285b7:      * Overriding to allow for proper configuration through reflection but
1:e6285b7:      * delegate to get common configuration
1:e504086:      */
1:04ee70a:     @Override
1:e504086:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:e6285b7:         if (transport instanceof SslTransport) {
1:e6285b7:             SslTransport sslTransport = (SslTransport) transport.narrow(SslTransport.class);
1:e504086:             IntrospectionSupport.setProperties(sslTransport, options);
1:e504086:         } else if (transport instanceof NIOSSLTransport) {
1:e6285b7:             NIOSSLTransport sslTransport = (NIOSSLTransport) transport.narrow(NIOSSLTransport.class);
1:e504086:             IntrospectionSupport.setProperties(sslTransport, options);
1:e504086:         }
1:e504086: 
1:e504086:         return super.compositeConfigure(transport, format, options);
1:e504086:     }
1:e504086: 
1:e504086:     /**
1:e504086:      * Overriding to use SslTransports.
1:e504086:      */
1:04ee70a:     @Override
1:e504086:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
1:e504086: 
1:e504086:         URI localLocation = null;
1:e504086:         String path = location.getPath();
1:e504086:         // see if the path is a local URI location
1:e504086:         if (path != null && path.length() > 0) {
1:e504086:             int localPortIndex = path.indexOf(':');
2:e504086:             try {
1:e504086:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
1:e504086:                 String localString = location.getScheme() + ":/" + path;
1:e504086:                 localLocation = new URI(localString);
2:e504086:             } catch (Exception e) {
1:e504086:                 LOG.warn("path isn't a valid local location for SslTransport to use", e);
1:e504086:             }
1:e504086:         }
1:e504086:         SocketFactory socketFactory = createSocketFactory();
1:e6285b7:         return new SslTransport(wf, (SSLSocketFactory) socketFactory, location, localLocation, false);
1:e504086:     }
1:e504086: 
1:04ee70a:     @Override
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer)
1:04ee70a:             throws IOException {
1:04ee70a:         return new NIOSSLTransport(wireFormat, socket, engine, initBuffer, inputBuffer);
1:04ee70a:     }
1:04ee70a: 
1:e504086:     /**
1:e504086:      * Creates a new SSL SocketFactory. The given factory will use user-provided
1:e504086:      * key and trust managers (if the user provided them).
1:e504086:      *
1:e504086:      * @return Newly created (Ssl)SocketFactory.
1:e504086:      * @throws IOException
1:e504086:      */
1:04ee70a:     @Override
1:e504086:     protected SocketFactory createSocketFactory() throws IOException {
1:e6285b7:         if (SslContext.getCurrentSslContext() != null) {
1:e504086:             SslContext ctx = SslContext.getCurrentSslContext();
1:e504086:             try {
1:e504086:                 return ctx.getSSLContext().getSocketFactory();
1:e504086:             } catch (Exception e) {
1:e504086:                 throw IOExceptionSupport.create(e);
1:e504086:             }
1:e504086:         } else {
1:e504086:             return SSLSocketFactory.getDefault();
1:e504086:         }
1:e504086: 
1:e504086:     }
1:e504086: 
1:e504086: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
1: import java.nio.ByteBuffer;
1: import javax.net.ssl.SSLEngine;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer)
1:             throws IOException {
1:         return new NIOSSLTransport(wireFormat, socket, engine, initBuffer, inputBuffer);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:e6285b7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected SSLContext context;
1:         return new NIOSSLTransportServer(context, this, location, serverSocketFactory);
1:         if (SslContext.getCurrentSslContext() != null) {
1:             try {
1:                 context = SslContext.getCurrentSslContext().getSSLContext();
1:             } catch (Exception e) {
1:                 throw new IOException(e);
1:             }
1:         }
1:      * Overriding to allow for proper configuration through reflection but
1:      * delegate to get common configuration
1:         if (transport instanceof SslTransport) {
1:             SslTransport sslTransport = (SslTransport) transport.narrow(SslTransport.class);
1:             NIOSSLTransport sslTransport = (NIOSSLTransport) transport.narrow(NIOSSLTransport.class);
/////////////////////////////////////////////////////////////////////////
1:         return new SslTransport(wf, (SSLSocketFactory) socketFactory, location, localLocation, false);
/////////////////////////////////////////////////////////////////////////
1:         if (SslContext.getCurrentSslContext() != null) {
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.tcp.SslTransport;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
0:             public boolean isSslServer() {
0:                 return true;
1:             }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e504086
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.nio;
1: 
0: import org.apache.activemq.broker.SslContext;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportServer;
0: import org.apache.activemq.transport.tcp.SslTransport;
0: import org.apache.activemq.transport.tcp.SslTransportFactory;
0: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.activemq.transport.tcp.TcpTransportServer;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.net.ServerSocketFactory;
0: import javax.net.SocketFactory;
0: import javax.net.ssl.SSLContext;
0: import javax.net.ssl.SSLSocketFactory;
1: import java.io.IOException;
0: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: import java.util.Map;
1: 
1: public class NIOSSLTransportFactory extends NIOTransportFactory {
1:     private static final Logger LOG = LoggerFactory.getLogger(NIOSSLTransportFactory.class);
0:      SSLContext context;
1: 
1:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0:         return new TcpTransportServer(this, location, serverSocketFactory) {
0:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
0:                 NIOSSLTransport transport = new NIOSSLTransport(format, socket);
0:                 if (context != null) {
0:                     transport.setSslContext(context);
1:                 }
0:                 return transport;
1:             }
0:         };
1:     }
1: 
0:     @Override
1:     public TransportServer doBind(URI location) throws IOException {
0:          if (SslContext.getCurrentSslContext() != null) {
1:              try {
0:                  context = SslContext.getCurrentSslContext().getSSLContext();
1:              } catch (Exception e) {
0:                  throw new IOException(e);
1:              }
1:          }
1:         return super.doBind(location);
1:     }
1: 
1: 
1:     /**
0:      * Overriding to allow for proper configuration through reflection but delegate to get common
0:      * configuration
1:      */
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:         if (transport instanceof SslTransport)  {
0:             SslTransport sslTransport = (SslTransport)transport.narrow(SslTransport.class);
1:             IntrospectionSupport.setProperties(sslTransport, options);
1:         } else if (transport instanceof NIOSSLTransport) {
0:             NIOSSLTransport sslTransport = (NIOSSLTransport)transport.narrow(NIOSSLTransport.class);
1:             IntrospectionSupport.setProperties(sslTransport, options);
1:         }
1: 
1:         return super.compositeConfigure(transport, format, options);
1:     }
1: 
1:     /**
1:      * Overriding to use SslTransports.
1:      */
1:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
1: 
1:         URI localLocation = null;
1:         String path = location.getPath();
1:         // see if the path is a local URI location
1:         if (path != null && path.length() > 0) {
1:             int localPortIndex = path.indexOf(':');
1:             try {
1:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
1:                 String localString = location.getScheme() + ":/" + path;
1:                 localLocation = new URI(localString);
1:             } catch (Exception e) {
1:                 LOG.warn("path isn't a valid local location for SslTransport to use", e);
1:             }
1:         }
1:         SocketFactory socketFactory = createSocketFactory();
0:         return new SslTransport(wf, (SSLSocketFactory)socketFactory, location, localLocation, false);
1:     }
1: 
1:     /**
1:      * Creates a new SSL SocketFactory. The given factory will use user-provided
1:      * key and trust managers (if the user provided them).
1:      *
1:      * @return Newly created (Ssl)SocketFactory.
1:      * @throws IOException
1:      */
1:     protected SocketFactory createSocketFactory() throws IOException {
0:         if( SslContext.getCurrentSslContext()!=null ) {
1:             SslContext ctx = SslContext.getCurrentSslContext();
1:             try {
1:                 return ctx.getSSLContext().getSocketFactory();
1:             } catch (Exception e) {
1:                 throw IOExceptionSupport.create(e);
1:             }
1:         } else {
1:             return SSLSocketFactory.getDefault();
1:         }
1: 
1:     }
1: 
1: }
============================================================================