1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authz;
1:f9451e5: 
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: import static org.junit.Assert.*;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class ActiveMQPermissionResolverTest {
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testDefault() {
1:f9451e5:         ActiveMQPermissionResolver resolver = new ActiveMQPermissionResolver();
1:f9451e5:         assertTrue(resolver.isCaseSensitive());
1:f9451e5:         Permission p = resolver.resolvePermission("Foo:Bar");
1:f9451e5:         assertNotNull(p);
1:f9451e5:         assertTrue(p instanceof ActiveMQWildcardPermission);
1:f9451e5:         assertTrue(p.implies(new ActiveMQWildcardPermission("Foo:Bar")));
1:f9451e5:         assertFalse(p.implies(new ActiveMQWildcardPermission("foo:bar")));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testCaseInsensitive() {
1:f9451e5:         ActiveMQPermissionResolver resolver = new ActiveMQPermissionResolver();
1:f9451e5:         resolver.setCaseSensitive(false);
1:f9451e5:         assertFalse(resolver.isCaseSensitive());
1:f9451e5:         Permission p = resolver.resolvePermission("Foo:Bar");
1:f9451e5:         assertNotNull(p);
1:f9451e5:         assertTrue(p instanceof ActiveMQWildcardPermission);
1:f9451e5:         assertTrue(p.implies(new ActiveMQWildcardPermission("foo:bar")));
1:f9451e5:         assertTrue(p.implies(new ActiveMQWildcardPermission("Foo:Bar", true)));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5: 
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authz;
1: 
1: import org.apache.shiro.authz.Permission;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class ActiveMQPermissionResolverTest {
1: 
1:     @Test
1:     public void testDefault() {
1:         ActiveMQPermissionResolver resolver = new ActiveMQPermissionResolver();
1:         assertTrue(resolver.isCaseSensitive());
1:         Permission p = resolver.resolvePermission("Foo:Bar");
1:         assertNotNull(p);
1:         assertTrue(p instanceof ActiveMQWildcardPermission);
1:         assertTrue(p.implies(new ActiveMQWildcardPermission("Foo:Bar")));
1:         assertFalse(p.implies(new ActiveMQWildcardPermission("foo:bar")));
1:     }
1: 
1:     @Test
1:     public void testCaseInsensitive() {
1:         ActiveMQPermissionResolver resolver = new ActiveMQPermissionResolver();
1:         resolver.setCaseSensitive(false);
1:         assertFalse(resolver.isCaseSensitive());
1:         Permission p = resolver.resolvePermission("Foo:Bar");
1:         assertNotNull(p);
1:         assertTrue(p instanceof ActiveMQWildcardPermission);
1:         assertTrue(p.implies(new ActiveMQWildcardPermission("foo:bar")));
1:         assertTrue(p.implies(new ActiveMQWildcardPermission("Foo:Bar", true)));
1:     }
1: 
1: 
1: }
============================================================================