1:50ea308: /**
1:50ea308:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:50ea308:  * contributor license agreements.  See the NOTICE file distributed with
1:50ea308:  * this work for additional information regarding copyright ownership.
1:50ea308:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:50ea308:  * (the "License"); you may not use this file except in compliance with
1:50ea308:  * the License.  You may obtain a copy of the License at
1:50ea308:  *
1:50ea308:  *      http://www.apache.org/licenses/LICENSE-2.0
1:50ea308:  *
1:50ea308:  * Unless required by applicable law or agreed to in writing, software
1:50ea308:  * distributed under the License is distributed on an "AS IS" BASIS,
1:50ea308:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50ea308:  * See the License for the specific language governing permissions and
1:50ea308:  * limitations under the License.
1:50ea308:  */
1:50ea308: package org.apache.activemq.karaf.itest;
1:50ea308: 
1:50ea308: import static org.junit.Assert.assertEquals;
1:50ea308: import static org.junit.Assert.assertNotNull;
1:50ea308: 
1:50ea308: import java.io.Closeable;
1:50ea308: 
1:50ea308: import javax.jms.Connection;
1:50ea308: import javax.jms.JMSException;
1:50ea308: import javax.jms.Message;
1:50ea308: import javax.jms.MessageConsumer;
1:50ea308: import javax.jms.Session;
1:50ea308: import javax.jms.TemporaryQueue;
1:50ea308: import javax.jms.TextMessage;
1:50ea308: 
1:50ea308: import org.apache.activemq.ActiveMQConnectionFactory;
1:50ea308: import org.apache.karaf.shell.api.console.SessionFactory;
1:50ea308: 
1:50ea308: /**
1:50ea308:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:50ea308:  * contributor license agreements.  See the NOTICE file distributed with
1:50ea308:  * this work for additional information regarding copyright ownership.
1:50ea308:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:50ea308:  * (the "License"); you may not use this file except in compliance with
1:50ea308:  * the License.  You may obtain a copy of the License at
1:50ea308:  *
1:50ea308:  *      http://www.apache.org/licenses/LICENSE-2.0
1:50ea308:  *
1:50ea308:  * Unless required by applicable law or agreed to in writing, software
1:50ea308:  * distributed under the License is distributed on an "AS IS" BASIS,
1:50ea308:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50ea308:  * See the License for the specific language governing permissions and
1:50ea308:  * limitations under the License.
1:50ea308:  */
1:50ea308: public class JMSTester implements Closeable {
1:50ea308: 	
1:50ea308: 	private Connection connection;
1:50ea308: 	
1:50ea308: 	public JMSTester(Connection connection) {
1:50ea308: 		this.connection = connection;
1:50ea308: 	}
1:50ea308: 
1:50ea308: 	public JMSTester() {
1:50ea308:         try {
1:50ea308: 			ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:50ea308: 			connection = factory.createConnection(KarafShellHelper.USER, KarafShellHelper.PASSWORD);
1:50ea308: 			connection.start();
1:50ea308: 		} catch (JMSException e) {
1:50ea308: 			throw new RuntimeException(e);
1:50ea308: 		}
1:50ea308: 	}
1:50ea308: 
1:50ea308:     public String consumeMessage(String nameAndPayload) {
1:50ea308:         try {
1:50ea308: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:50ea308: 			MessageConsumer consumer = session.createConsumer(session.createQueue(nameAndPayload));
1:50ea308: 			TextMessage message = (TextMessage) consumer.receive(10000);
1:50ea308: 			System.err.println("message: " + message);
1:50ea308: 			return message.getText();
1:50ea308: 		} catch (JMSException e) {
1:50ea308: 			throw new RuntimeException(e);
1:50ea308: 		}
1:50ea308:     }
1:50ea308: 
1:50ea308:     public void produceMessage(String nameAndPayload) {
1:50ea308:         try {
1:50ea308: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:50ea308: 			session.createProducer(session.createQueue(nameAndPayload)).send(session.createTextMessage(nameAndPayload));
1:50ea308: 		} catch (JMSException e) {
1:50ea308: 			throw new RuntimeException(e);
1:50ea308: 		}
1:50ea308:     }
1:50ea308:     
1:50ea308: 	public void produceAndConsume(SessionFactory sf) {
1:50ea308: 		final String nameAndPayload = String.valueOf(System.currentTimeMillis());
1:50ea308:       	produceMessage(nameAndPayload);
1:50ea308: 
1:50ea308:         KarafShellHelper.executeCommand(sf, "activemq:bstat").trim();
1:50ea308: 
1:50ea308:         AbstractFeatureTest.withinReason(new Runnable() {
1:50ea308:             public void run() {
1:50ea308:                 assertEquals("JMS_BODY_FIELD:JMSText = " + nameAndPayload, KarafShellHelper.executeCommand(sf, "activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody " + nameAndPayload).trim());
1:50ea308:             }
1:50ea308:         });
1:50ea308: 
1:50ea308:         assertEquals("got our message", nameAndPayload, consumeMessage(nameAndPayload));
1:50ea308: 	}
1:50ea308:     
1:50ea308:     public void tempSendReceive() throws JMSException {
1:50ea308:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:50ea308:         TemporaryQueue temporaryQueue = session.createTemporaryQueue();
1:50ea308:         session.createProducer(temporaryQueue).send(session.createTextMessage("TEST"));
1:50ea308:         Message msg = session.createConsumer(temporaryQueue).receive(3000);
1:50ea308:         assertNotNull("Didn't receive the message", msg);
1:50ea308: 
1:50ea308:     }
1:50ea308: 
1:50ea308:     public void close() {
1:50ea308:     	try {
1:50ea308: 			connection.close();
1:50ea308: 		} catch (JMSException e) {
1:50ea308: 			throw new RuntimeException(e);
1:50ea308: 		}
1:50ea308: 	}
1:50ea308: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.itest;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.io.Closeable;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.karaf.shell.api.console.SessionFactory;
1: 
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: public class JMSTester implements Closeable {
1: 	
1: 	private Connection connection;
1: 	
1: 	public JMSTester(Connection connection) {
1: 		this.connection = connection;
1: 	}
1: 
1: 	public JMSTester() {
1:         try {
1: 			ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1: 			connection = factory.createConnection(KarafShellHelper.USER, KarafShellHelper.PASSWORD);
1: 			connection.start();
1: 		} catch (JMSException e) {
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1: 
1:     public String consumeMessage(String nameAndPayload) {
1:         try {
1: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 			MessageConsumer consumer = session.createConsumer(session.createQueue(nameAndPayload));
1: 			TextMessage message = (TextMessage) consumer.receive(10000);
1: 			System.err.println("message: " + message);
1: 			return message.getText();
1: 		} catch (JMSException e) {
1: 			throw new RuntimeException(e);
1: 		}
1:     }
1: 
1:     public void produceMessage(String nameAndPayload) {
1:         try {
1: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 			session.createProducer(session.createQueue(nameAndPayload)).send(session.createTextMessage(nameAndPayload));
1: 		} catch (JMSException e) {
1: 			throw new RuntimeException(e);
1: 		}
1:     }
1:     
1: 	public void produceAndConsume(SessionFactory sf) {
1: 		final String nameAndPayload = String.valueOf(System.currentTimeMillis());
1:       	produceMessage(nameAndPayload);
1: 
1:         KarafShellHelper.executeCommand(sf, "activemq:bstat").trim();
1: 
1:         AbstractFeatureTest.withinReason(new Runnable() {
1:             public void run() {
1:                 assertEquals("JMS_BODY_FIELD:JMSText = " + nameAndPayload, KarafShellHelper.executeCommand(sf, "activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody " + nameAndPayload).trim());
1:             }
1:         });
1: 
1:         assertEquals("got our message", nameAndPayload, consumeMessage(nameAndPayload));
1: 	}
1:     
1:     public void tempSendReceive() throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue temporaryQueue = session.createTemporaryQueue();
1:         session.createProducer(temporaryQueue).send(session.createTextMessage("TEST"));
1:         Message msg = session.createConsumer(temporaryQueue).receive(3000);
1:         assertNotNull("Didn't receive the message", msg);
1: 
1:     }
1: 
1:     public void close() {
1:     	try {
1: 			connection.close();
1: 		} catch (JMSException e) {
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1: }
============================================================================