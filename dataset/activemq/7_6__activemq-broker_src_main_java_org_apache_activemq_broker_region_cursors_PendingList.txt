1:00879cf: /**
1:00879cf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:00879cf:  * contributor license agreements.  See the NOTICE file distributed with
1:00879cf:  * this work for additional information regarding copyright ownership.
1:00879cf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:00879cf:  * (the "License"); you may not use this file except in compliance with
1:00879cf:  * the License.  You may obtain a copy of the License at
1:00879cf:  *
1:00879cf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:00879cf:  *
1:00879cf:  * Unless required by applicable law or agreed to in writing, software
1:00879cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:00879cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:00879cf:  * See the License for the specific language governing permissions and
1:00879cf:  * limitations under the License.
1:00879cf:  */
1:00879cf: package org.apache.activemq.broker.region.cursors;
2:00879cf: 
1:cb1b92b: import java.util.Collection;
1:00879cf: import java.util.Iterator;
1:f47b370: import java.util.List;
1:cb1b92b: 
1:00879cf: import org.apache.activemq.broker.region.MessageReference;
1:e947927: import org.apache.activemq.command.MessageId;
1:00879cf: 
1:cb1b92b: public interface PendingList extends Iterable<MessageReference> {
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Returns true if there are no Messages in the PendingList currently.
1:cb1b92b:      * @return true if the PendingList is currently empty.
1:cb1b92b:      */
1:00879cf:     public boolean isEmpty();
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Discards all Messages currently held in the PendingList.
1:cb1b92b:      */
1:00879cf:     public void clear();
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Adds the given message to the head of the list.
1:cb1b92b:      *
1:cb1b92b:      * @param message
1:cb1b92b:      *      The MessageReference that is to be added to this list.
1:cb1b92b:      *
1:cb1b92b:      * @return the PendingNode that contains the newly added message.
1:cb1b92b:      */
1:00879cf:     public PendingNode addMessageFirst(MessageReference message);
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Adds the given message to the tail of the list.
1:cb1b92b:      *
1:cb1b92b:      * @param message
1:cb1b92b:      *      The MessageReference that is to be added to this list.
1:cb1b92b:      *
1:cb1b92b:      * @return the PendingNode that contains the newly added message.
1:cb1b92b:      */
1:00879cf:     public PendingNode addMessageLast(MessageReference message);
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Removes the given MessageReference from the PendingList if it is
1:cb1b92b:      * contained within.
1:cb1b92b:      *
1:cb1b92b:      * @param message
1:cb1b92b:      *      The MessageReference that is to be removed to this list.
1:cb1b92b:      *
1:cb1b92b:      * @return the PendingNode that contains the removed message or null if the
1:cb1b92b:      *         message was not present in this list.
1:cb1b92b:      */
1:9c9b856:     public PendingNode remove(MessageReference message);
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Returns the number of MessageReferences that are awaiting dispatch.
1:cb1b92b:      * @return current count of the pending messages.
1:cb1b92b:      */
1:00879cf:     public int size();
1:cb1b92b: 
1:734fb7d:     public long messageSize();
1:734fb7d: 
1:cb1b92b:     /**
1:cb1b92b:      * Returns an iterator over the pending Messages.  The subclass controls how
1:cb1b92b:      * the returned iterator actually traverses the list of pending messages allowing
1:cb1b92b:      * for the order to vary based on factors like Message priority or some other
1:cb1b92b:      * mechanism.
1:cb1b92b:      *
1:cb1b92b:      * @return an Iterator that returns MessageReferences contained in this list.
1:cb1b92b:      */
1:734fb7d:     @Override
1:00879cf:     public Iterator<MessageReference> iterator();
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Query the PendingList to determine if the given message is contained within.
1:cb1b92b:      *
1:cb1b92b:      * @param message
1:cb1b92b:      *      The Message that is the target of this query.
1:cb1b92b:      *
1:cb1b92b:      * @return true if the MessageReference is contained in this list.
1:cb1b92b:      */
1:cb1b92b:     public boolean contains(MessageReference message);
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Returns a new Collection that contains all the MessageReferences currently
1:cb1b92b:      * held in this PendingList.  The elements of the list are ordered using the
1:cb1b92b:      * same rules as the subclass uses for iteration.
1:cb1b92b:      *
1:cb1b92b:      * @return a new Collection containing this lists MessageReferences.
1:cb1b92b:      */
1:cb1b92b:     public Collection<MessageReference> values();
1:cb1b92b: 
1:cb1b92b:     /**
1:cb1b92b:      * Adds all the elements of the given PendingList to this PendingList.
1:cb1b92b:      *
1:cb1b92b:      * @param pendingList
1:cb1b92b:      *      The PendingList that is to be added to this collection.
1:cb1b92b:      */
1:cb1b92b:     public void addAll(PendingList pendingList);
1:e947927: 
1:e947927:     public MessageReference get(MessageId messageId);
1:f47b370: 
1:00879cf: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:604f707
/////////////////////////////////////////////////////////////////////////
commit:f47b370
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void insertAtHead(List<MessageReference> list);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:     public long messageSize();
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e947927
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public MessageReference get(MessageId messageId);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:cb1b92b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 
1: public interface PendingList extends Iterable<MessageReference> {
1: 
1:     /**
1:      * Returns true if there are no Messages in the PendingList currently.
1:      * @return true if the PendingList is currently empty.
1:      */
1: 
1:     /**
1:      * Discards all Messages currently held in the PendingList.
1:      */
1: 
1:     /**
1:      * Adds the given message to the head of the list.
1:      *
1:      * @param message
1:      *      The MessageReference that is to be added to this list.
1:      *
1:      * @return the PendingNode that contains the newly added message.
1:      */
1: 
1:     /**
1:      * Adds the given message to the tail of the list.
1:      *
1:      * @param message
1:      *      The MessageReference that is to be added to this list.
1:      *
1:      * @return the PendingNode that contains the newly added message.
1:      */
1: 
1:     /**
1:      * Removes the given MessageReference from the PendingList if it is
1:      * contained within.
1:      *
1:      * @param message
1:      *      The MessageReference that is to be removed to this list.
1:      *
1:      * @return the PendingNode that contains the removed message or null if the
1:      *         message was not present in this list.
1:      */
1: 
1:     /**
1:      * Returns the number of MessageReferences that are awaiting dispatch.
1:      * @return current count of the pending messages.
1:      */
1: 
1:     /**
1:      * Returns an iterator over the pending Messages.  The subclass controls how
1:      * the returned iterator actually traverses the list of pending messages allowing
1:      * for the order to vary based on factors like Message priority or some other
1:      * mechanism.
1:      *
1:      * @return an Iterator that returns MessageReferences contained in this list.
1:      */
1: 
1:     /**
1:      * Query the PendingList to determine if the given message is contained within.
1:      *
1:      * @param message
1:      *      The Message that is the target of this query.
1:      *
1:      * @return true if the MessageReference is contained in this list.
1:      */
1:     public boolean contains(MessageReference message);
1: 
1:     /**
1:      * Returns a new Collection that contains all the MessageReferences currently
1:      * held in this PendingList.  The elements of the list are ordered using the
1:      * same rules as the subclass uses for iteration.
1:      *
1:      * @return a new Collection containing this lists MessageReferences.
1:      */
1:     public Collection<MessageReference> values();
1: 
1:     /**
1:      * Adds all the elements of the given PendingList to this PendingList.
1:      *
1:      * @param pendingList
1:      *      The PendingList that is to be added to this collection.
1:      */
1:     public void addAll(PendingList pendingList);
author:Gary Tully
-------------------------------------------------------------------------------
commit:9c9b856
/////////////////////////////////////////////////////////////////////////
1:     public PendingNode remove(MessageReference message);
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import java.util.Iterator;
1: import org.apache.activemq.broker.region.MessageReference;
1: 
0: public interface PendingList {
1:     
1:     public boolean isEmpty();
1:     public void clear();
1:     public PendingNode addMessageFirst(MessageReference message);
1:     public PendingNode addMessageLast(MessageReference message);
0:     public void remove(MessageReference message);
1:     public int size();
1:     public Iterator<MessageReference> iterator();
1: }
============================================================================