1:53fff52: /**
1:53fff52:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:53fff52:  * contributor license agreements.  See the NOTICE file distributed with
1:53fff52:  * this work for additional information regarding copyright ownership.
1:53fff52:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:53fff52:  * (the "License"); you may not use this file except in compliance with
1:53fff52:  * the License.  You may obtain a copy of the License at
1:53fff52:  *
1:53fff52:  *      http://www.apache.org/licenses/LICENSE-2.0
1:53fff52:  *
1:53fff52:  * Unless required by applicable law or agreed to in writing, software
1:53fff52:  * distributed under the License is distributed on an "AS IS" BASIS,
1:53fff52:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:53fff52:  * See the License for the specific language governing permissions and
1:53fff52:  * limitations under the License.
1:53fff52:  * 
1:53fff52:  */
1:53fff52: package org.apache.activemq.broker.util;
1:53fff52: 
1:53fff52: import javax.jms.Connection;
1:53fff52: import javax.jms.DeliveryMode;
1:53fff52: import javax.jms.Message;
1:53fff52: import javax.jms.MessageConsumer;
1:53fff52: import javax.jms.MessageProducer;
1:53fff52: import javax.jms.Session;
1:53fff52: 
1:53fff52: import junit.framework.TestCase;
1:53fff52: 
1:53fff52: import org.apache.activemq.ActiveMQConnectionFactory;
1:53fff52: import org.apache.activemq.broker.BrokerPlugin;
1:53fff52: import org.apache.activemq.broker.BrokerService;
1:53fff52: import org.apache.activemq.broker.TransportConnector;
1:53fff52: import org.junit.After;
1:53fff52: import org.junit.Before;
1:53fff52: import org.junit.Test;
1:53fff52: 
1:53fff52: /**
1:53fff52:  * Tests TraceBrokerPathPlugin by creating two brokers linked by a network connector, and checking to see if the consuming end receives the expected value in the trace property
1:53fff52:  * @author Raul Kripalani
1:53fff52:  *
1:53fff52:  */
1:53fff52: public class TraceBrokerPathPluginTest extends TestCase {
1:53fff52: 
1:53fff52: 	BrokerService brokerA;
1:53fff52: 	BrokerService brokerB;
1:53fff52: 	TransportConnector tcpConnectorA;
1:53fff52: 	TransportConnector tcpConnectorB;
1:53fff52: 	MessageProducer producer;
1:53fff52: 	MessageConsumer consumer;
1:53fff52: 	Connection connectionA;
1:53fff52: 	Connection connectionB;
1:53fff52: 	Session sessionA;
1:53fff52: 	Session sessionB;
1:53fff52: 	String queue = "TEST.FOO";
1:53fff52: 	String traceProperty = "BROKER_PATH";
1:53fff52: 	
1:53fff52: 	@Before
1:53fff52: 	public void setUp() throws Exception {
1:53fff52: 		TraceBrokerPathPlugin tbppA = new TraceBrokerPathPlugin();
1:53fff52: 		tbppA.setStampProperty(traceProperty);
1:53fff52: 		
1:53fff52: 		TraceBrokerPathPlugin tbppB = new TraceBrokerPathPlugin();
1:53fff52: 		tbppB.setStampProperty(traceProperty);
1:53fff52:     	
1:53fff52:         brokerA = new BrokerService();
1:53fff52:         brokerA.setBrokerName("brokerA");
1:53fff52:         brokerA.setPersistent(false);
1:53fff52:         brokerA.setUseJmx(true);
1:53fff52:         brokerA.setPlugins(new BrokerPlugin[] {tbppA});
1:53fff52:         tcpConnectorA = brokerA.addConnector("tcp://localhost:0");
1:53fff52: 
1:53fff52:         brokerB = new BrokerService();
1:53fff52:         brokerB.setBrokerName("brokerB");
1:53fff52:         brokerB.setPersistent(false);
1:53fff52:         brokerB.setUseJmx(true);
1:53fff52:         brokerB.setPlugins(new BrokerPlugin[] {tbppB});
1:53fff52:         tcpConnectorB = brokerB.addConnector("tcp://localhost:0");
1:53fff52:         
1:53fff52:         brokerA.addNetworkConnector("static:(" + tcpConnectorB.getConnectUri().toString() + ")");
1:53fff52:         
1:53fff52:         brokerB.start();
1:53fff52:         brokerB.waitUntilStarted();
1:53fff52:         brokerA.start();
1:53fff52:         brokerA.waitUntilStarted();
1:53fff52:         
1:53fff52:         // Initialise connection to A and MessageProducer
1:53fff52:         connectionA = new ActiveMQConnectionFactory(tcpConnectorA.getConnectUri()).createConnection();
1:53fff52:         connectionA.start();
1:53fff52:         sessionA = connectionA.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:53fff52:         producer = sessionA.createProducer(sessionA.createQueue(queue));
1:53fff52:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:53fff52:         
1:53fff52:         // Initialise connection to B and MessageConsumer
1:53fff52:         connectionB = new ActiveMQConnectionFactory(tcpConnectorB.getConnectUri()).createConnection();
1:53fff52:         connectionB.start();
1:53fff52:         sessionB = connectionB.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:53fff52:         consumer = sessionB.createConsumer(sessionB.createQueue(queue));
1:53fff52:         
1:53fff52: 	}
1:53fff52: 	
1:53fff52: 	@After
1:53fff52: 	public void tearDown() throws Exception {
1:53fff52: 	     // Clean up
1:53fff52:         producer.close();
1:53fff52:         consumer.close();
1:53fff52:         sessionA.close();
1:53fff52:         sessionB.close();
1:53fff52:         connectionA.close();
1:53fff52:         connectionB.close();
1:53fff52:         brokerA.stop();
1:53fff52:         brokerB.stop();
1:53fff52: 	}
1:53fff52: 	
1:53fff52: 	@Test
1:53fff52:     public void testTraceBrokerPathPlugin() throws Exception {
1:53fff52:         Message sentMessage = sessionA.createMessage();
1:53fff52:         producer.send(sentMessage);
1:53fff52:         Message receivedMessage = consumer.receive(1000);
1:53fff52: 
1:53fff52:         // assert we got the message
1:53fff52:         assertNotNull(receivedMessage);
1:53fff52:         
1:53fff52:         // assert we got the same message ID we sent
1:53fff52:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:53fff52:         
1:53fff52:         assertEquals("brokerA,brokerB", receivedMessage.getStringProperty(traceProperty));
1:53fff52:         
1:53fff52: 	}
1:53fff52: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:53fff52
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  * 
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Tests TraceBrokerPathPlugin by creating two brokers linked by a network connector, and checking to see if the consuming end receives the expected value in the trace property
1:  * @author Raul Kripalani
1:  *
1:  */
1: public class TraceBrokerPathPluginTest extends TestCase {
1: 
1: 	BrokerService brokerA;
1: 	BrokerService brokerB;
1: 	TransportConnector tcpConnectorA;
1: 	TransportConnector tcpConnectorB;
1: 	MessageProducer producer;
1: 	MessageConsumer consumer;
1: 	Connection connectionA;
1: 	Connection connectionB;
1: 	Session sessionA;
1: 	Session sessionB;
1: 	String queue = "TEST.FOO";
1: 	String traceProperty = "BROKER_PATH";
1: 	
1: 	@Before
1: 	public void setUp() throws Exception {
1: 		TraceBrokerPathPlugin tbppA = new TraceBrokerPathPlugin();
1: 		tbppA.setStampProperty(traceProperty);
1: 		
1: 		TraceBrokerPathPlugin tbppB = new TraceBrokerPathPlugin();
1: 		tbppB.setStampProperty(traceProperty);
1:     	
1:         brokerA = new BrokerService();
1:         brokerA.setBrokerName("brokerA");
1:         brokerA.setPersistent(false);
1:         brokerA.setUseJmx(true);
1:         brokerA.setPlugins(new BrokerPlugin[] {tbppA});
1:         tcpConnectorA = brokerA.addConnector("tcp://localhost:0");
1: 
1:         brokerB = new BrokerService();
1:         brokerB.setBrokerName("brokerB");
1:         brokerB.setPersistent(false);
1:         brokerB.setUseJmx(true);
1:         brokerB.setPlugins(new BrokerPlugin[] {tbppB});
1:         tcpConnectorB = brokerB.addConnector("tcp://localhost:0");
1:         
1:         brokerA.addNetworkConnector("static:(" + tcpConnectorB.getConnectUri().toString() + ")");
1:         
1:         brokerB.start();
1:         brokerB.waitUntilStarted();
1:         brokerA.start();
1:         brokerA.waitUntilStarted();
1:         
1:         // Initialise connection to A and MessageProducer
1:         connectionA = new ActiveMQConnectionFactory(tcpConnectorA.getConnectUri()).createConnection();
1:         connectionA.start();
1:         sessionA = connectionA.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = sessionA.createProducer(sessionA.createQueue(queue));
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         
1:         // Initialise connection to B and MessageConsumer
1:         connectionB = new ActiveMQConnectionFactory(tcpConnectorB.getConnectUri()).createConnection();
1:         connectionB.start();
1:         sessionB = connectionB.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer = sessionB.createConsumer(sessionB.createQueue(queue));
1:         
1: 	}
1: 	
1: 	@After
1: 	public void tearDown() throws Exception {
1: 	     // Clean up
1:         producer.close();
1:         consumer.close();
1:         sessionA.close();
1:         sessionB.close();
1:         connectionA.close();
1:         connectionB.close();
1:         brokerA.stop();
1:         brokerB.stop();
1: 	}
1: 	
1: 	@Test
1:     public void testTraceBrokerPathPlugin() throws Exception {
1:         Message sentMessage = sessionA.createMessage();
1:         producer.send(sentMessage);
1:         Message receivedMessage = consumer.receive(1000);
1: 
1:         // assert we got the message
1:         assertNotNull(receivedMessage);
1:         
1:         // assert we got the same message ID we sent
1:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:         
1:         assertEquals("brokerA,brokerB", receivedMessage.getStringProperty(traceProperty));
1:         
1: 	}
1: }
============================================================================