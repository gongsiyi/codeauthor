1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client;
1:72839b7: 
1:7c41ebc: import java.io.IOException;
1:72839b7: import java.net.URI;
1:1ac8954: import java.util.ArrayList;
1:1ac8954: import java.util.List;
1:72839b7: 
1:72839b7: import org.apache.activemq.transport.amqp.AmqpTestSupport;
1:1ac8954: import org.junit.After;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Test support class for tests that will be using the AMQP Proton wrapper client.
1:72839b7:  */
1:72839b7: public class AmqpClientTestSupport extends AmqpTestSupport {
1:72839b7: 
1:7c41ebc:     private String connectorScheme = "amqp";
1:7c41ebc:     private boolean useSSL;
1:7c41ebc: 
1:1ac8954:     private List<AmqpConnection> connections = new ArrayList<AmqpConnection>();
1:1ac8954: 
1:7c41ebc:     public AmqpClientTestSupport() {
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     public AmqpClientTestSupport(String connectorScheme, boolean useSSL) {
1:7c41ebc:         this.connectorScheme = connectorScheme;
1:7c41ebc:         this.useSSL = useSSL;
1:7c41ebc:     }
1:7c41ebc: 
1:1ac8954:     @Override
1:1ac8954:     @After
1:1ac8954:     public void tearDown() throws Exception {
1:1ac8954:         for (AmqpConnection connection : connections) {
1:1ac8954:             try {
1:1ac8954:                 connection.close();
1:1ac8954:             } catch (Exception ex) {}
1:1ac8954:         }
1:1ac8954: 
1:1ac8954:         super.tearDown();
1:1ac8954:     }
1:1ac8954: 
1:7c41ebc:     public String getConnectorScheme() {
1:7c41ebc:         return connectorScheme;
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     public boolean isUseSSL() {
1:7c41ebc:         return useSSL;
1:7c41ebc:     }
1:7c41ebc: 
1:72839b7:     public String getAmqpConnectionURIOptions() {
1:72839b7:         return "";
1:72839b7:     }
1:72839b7: 
1:7c41ebc:     @Override
1:7c41ebc:     protected boolean isUseTcpConnector() {
1:31c55f7:         return !isUseSSL() && !connectorScheme.contains("nio") && !connectorScheme.contains("ws");
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     @Override
1:7c41ebc:     protected boolean isUseSslConnector() {
1:31c55f7:         return isUseSSL() && !connectorScheme.contains("nio") && !connectorScheme.contains("wss");
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     @Override
1:7c41ebc:     protected boolean isUseNioConnector() {
1:7c41ebc:         return !isUseSSL() && connectorScheme.contains("nio");
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     @Override
1:7c41ebc:     protected boolean isUseNioPlusSslConnector() {
1:7c41ebc:         return isUseSSL() && connectorScheme.contains("nio");
1:7c41ebc:     }
1:7c41ebc: 
1:31c55f7:     @Override
1:31c55f7:     protected boolean isUseWsConnector() {
1:31c55f7:         return !isUseSSL() && connectorScheme.contains("ws");
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     protected boolean isUseWssConnector() {
1:31c55f7:         return isUseSSL() && connectorScheme.contains("wss");
1:31c55f7:     }
1:31c55f7: 
1:72839b7:     public URI getBrokerAmqpConnectionURI() {
1:31c55f7:         boolean webSocket = false;
1:31c55f7: 
1:72839b7:         try {
1:7c41ebc:             int port = 0;
1:7c41ebc:             switch (connectorScheme) {
1:7c41ebc:                 case "amqp":
1:7c41ebc:                     port = this.amqpPort;
1:7c41ebc:                     break;
1:31c55f7:                 case "amqp+ws":
1:31c55f7:                     port = this.amqpWsPort;
1:31c55f7:                     webSocket = true;
1:31c55f7:                     break;
1:31c55f7:                 case "amqp+wss":
1:31c55f7:                     port = this.amqpWssPort;
1:31c55f7:                     webSocket = true;
1:31c55f7:                     break;
1:7c41ebc:                 case "amqp+ssl":
1:7c41ebc:                     port = this.amqpSslPort;
1:7c41ebc:                     break;
1:7c41ebc:                 case "amqp+nio":
1:7c41ebc:                     port = this.amqpNioPort;
1:7c41ebc:                     break;
1:7c41ebc:                 case "amqp+nio+ssl":
1:7c41ebc:                     port = this.amqpNioPlusSslPort;
1:7c41ebc:                     break;
1:7c41ebc:                 default:
1:7c41ebc:                     throw new IOException("Invalid AMQP connector scheme passed to test.");
1:7c41ebc:             }
1:7c41ebc: 
1:7c41ebc:             String uri = null;
1:7c41ebc: 
1:7c41ebc:             if (isUseSSL()) {
1:31c55f7:                 if (webSocket) {
1:31c55f7:                     uri = "wss://127.0.0.1:" + port;
1:31c55f7:                 } else {
1:31c55f7:                     uri = "ssl://127.0.0.1:" + port;
1:31c55f7:                 }
1:7c41ebc:             } else {
1:31c55f7:                 if (webSocket) {
1:31c55f7:                     uri = "ws://127.0.0.1:" + port;
1:31c55f7:                 } else {
1:31c55f7:                     uri = "tcp://127.0.0.1:" + port;
1:31c55f7:                 }
1:7c41ebc:             }
1:72839b7: 
1:72839b7:             if (!getAmqpConnectionURIOptions().isEmpty()) {
1:72839b7:                 uri = uri + "?" + getAmqpConnectionURIOptions();
1:72839b7:             }
1:72839b7: 
1:72839b7:             return new URI(uri);
1:72839b7:         } catch (Exception e) {
1:72839b7:             throw new RuntimeException();
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:1ac8954:     public AmqpConnection trackConnection(AmqpConnection connection) {
1:1ac8954:         connections.add(connection);
1:1ac8954:         return connection;
1:1ac8954:     }
1:1ac8954: 
1:72839b7:     public AmqpConnection createAmqpConnection() throws Exception {
1:72839b7:         return createAmqpConnection(getBrokerAmqpConnectionURI());
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AmqpConnection createAmqpConnection(String username, String password) throws Exception {
1:72839b7:         return createAmqpConnection(getBrokerAmqpConnectionURI(), username, password);
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AmqpConnection createAmqpConnection(URI brokerURI) throws Exception {
1:72839b7:         return createAmqpConnection(brokerURI, null, null);
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AmqpConnection createAmqpConnection(URI brokerURI, String username, String password) throws Exception {
1:1ac8954:         return trackConnection(createAmqpClient(brokerURI, username, password).connect());
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AmqpClient createAmqpClient() throws Exception {
1:72839b7:         return createAmqpClient(getBrokerAmqpConnectionURI(), null, null);
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AmqpClient createAmqpClient(URI brokerURI) throws Exception {
1:72839b7:         return createAmqpClient(brokerURI, null, null);
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AmqpClient createAmqpClient(String username, String password) throws Exception {
1:72839b7:         return createAmqpClient(getBrokerAmqpConnectionURI(), username, password);
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AmqpClient createAmqpClient(URI brokerURI, String username, String password) throws Exception {
1:72839b7:         return new AmqpClient(brokerURI, username, password);
1:72839b7:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     private List<AmqpConnection> connections = new ArrayList<AmqpConnection>();
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         for (AmqpConnection connection : connections) {
1:             try {
1:                 connection.close();
1:             } catch (Exception ex) {}
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public AmqpConnection trackConnection(AmqpConnection connection) {
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return trackConnection(createAmqpClient(brokerURI, username, password).connect());
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1:         return !isUseSSL() && !connectorScheme.contains("nio") && !connectorScheme.contains("ws");
1:         return isUseSSL() && !connectorScheme.contains("nio") && !connectorScheme.contains("wss");
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected boolean isUseWsConnector() {
1:         return !isUseSSL() && connectorScheme.contains("ws");
1:     }
1: 
1:     @Override
1:     protected boolean isUseWssConnector() {
1:         return isUseSSL() && connectorScheme.contains("wss");
1:     }
1: 
1:         boolean webSocket = false;
1: 
1:                 case "amqp+ws":
1:                     port = this.amqpWsPort;
1:                     webSocket = true;
1:                     break;
1:                 case "amqp+wss":
1:                     port = this.amqpWssPort;
1:                     webSocket = true;
1:                     break;
/////////////////////////////////////////////////////////////////////////
1:                 if (webSocket) {
1:                     uri = "wss://127.0.0.1:" + port;
1:                 } else {
1:                     uri = "ssl://127.0.0.1:" + port;
1:                 }
1:                 if (webSocket) {
1:                     uri = "ws://127.0.0.1:" + port;
1:                 } else {
1:                     uri = "tcp://127.0.0.1:" + port;
1:                 }
commit:7c41ebc
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:     private String connectorScheme = "amqp";
1:     private boolean useSSL;
1: 
1:     public AmqpClientTestSupport() {
1:     }
1: 
1:     public AmqpClientTestSupport(String connectorScheme, boolean useSSL) {
1:         this.connectorScheme = connectorScheme;
1:         this.useSSL = useSSL;
1:     }
1: 
1:     public String getConnectorScheme() {
1:         return connectorScheme;
1:     }
1: 
1:     public boolean isUseSSL() {
1:         return useSSL;
1:     }
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
0:         return !isUseSSL() && !connectorScheme.contains("nio");
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
0:         return isUseSSL() && !connectorScheme.contains("nio");
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return !isUseSSL() && connectorScheme.contains("nio");
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return isUseSSL() && connectorScheme.contains("nio");
1:     }
1: 
1:             int port = 0;
1:             switch (connectorScheme) {
1:                 case "amqp":
1:                     port = this.amqpPort;
1:                     break;
1:                 case "amqp+ssl":
1:                     port = this.amqpSslPort;
1:                     break;
1:                 case "amqp+nio":
1:                     port = this.amqpNioPort;
1:                     break;
1:                 case "amqp+nio+ssl":
1:                     port = this.amqpNioPlusSslPort;
1:                     break;
1:                 default:
1:                     throw new IOException("Invalid AMQP connector scheme passed to test.");
1:             }
1: 
1:             String uri = null;
1: 
1:             if (isUseSSL()) {
0:                 uri = "ssl://127.0.0.1:" + port;
1:             } else {
0:                 uri = "tcp://127.0.0.1:" + port;
1:             }
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import java.net.URI;
1: 
1: import org.apache.activemq.transport.amqp.AmqpTestSupport;
1: 
1: /**
1:  * Test support class for tests that will be using the AMQP Proton wrapper client.
1:  */
1: public class AmqpClientTestSupport extends AmqpTestSupport {
1: 
1:     public String getAmqpConnectionURIOptions() {
1:         return "";
1:     }
1: 
1:     public URI getBrokerAmqpConnectionURI() {
1:         try {
0:             String uri = "tcp://127.0.0.1:" + amqpPort;
1: 
1:             if (!getAmqpConnectionURIOptions().isEmpty()) {
1:                 uri = uri + "?" + getAmqpConnectionURIOptions();
1:             }
1: 
1:             return new URI(uri);
1:         } catch (Exception e) {
1:             throw new RuntimeException();
1:         }
1:     }
1: 
1:     public AmqpConnection createAmqpConnection() throws Exception {
1:         return createAmqpConnection(getBrokerAmqpConnectionURI());
1:     }
1: 
1:     public AmqpConnection createAmqpConnection(String username, String password) throws Exception {
1:         return createAmqpConnection(getBrokerAmqpConnectionURI(), username, password);
1:     }
1: 
1:     public AmqpConnection createAmqpConnection(URI brokerURI) throws Exception {
1:         return createAmqpConnection(brokerURI, null, null);
1:     }
1: 
1:     public AmqpConnection createAmqpConnection(URI brokerURI, String username, String password) throws Exception {
0:         return createAmqpClient(brokerURI, username, password).connect();
1:     }
1: 
1:     public AmqpClient createAmqpClient() throws Exception {
1:         return createAmqpClient(getBrokerAmqpConnectionURI(), null, null);
1:     }
1: 
1:     public AmqpClient createAmqpClient(URI brokerURI) throws Exception {
1:         return createAmqpClient(brokerURI, null, null);
1:     }
1: 
1:     public AmqpClient createAmqpClient(String username, String password) throws Exception {
1:         return createAmqpClient(getBrokerAmqpConnectionURI(), username, password);
1:     }
1: 
1:     public AmqpClient createAmqpClient(URI brokerURI, String username, String password) throws Exception {
1:         return new AmqpClient(brokerURI, username, password);
1:     }
1: }
============================================================================