1:82a5839: /**
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.util;
1:82a5839: 
1:82a5839: import java.util.Date;
1:82a5839: import java.util.HashMap;
1:82a5839: 
1:82a5839: public final class TypeConversionSupport {
1:82a5839: 
1:82a5839:     static class ConversionKey {
1:82a5839:         final Class<?> from;
1:82a5839:         final Class<?> to;
1:82a5839:         final int hashCode;
1:82a5839: 
1:82a5839:         public ConversionKey(Class<?> from, Class<?> to) {
1:82a5839:             this.from = from;
1:82a5839:             this.to = to;
1:82a5839:             this.hashCode = from.hashCode() ^ (to.hashCode() << 1);
1:82a5839:         }
1:82a5839: 
1:82a5839:         @Override
1:82a5839:         public boolean equals(Object o) {
1:82a5839:             if (this == o) {
1:82a5839:                 return true;
1:82a5839:             }
1:82a5839: 
1:82a5839:             if (o == null || o.getClass() != this.getClass()) {
1:82a5839:                 return false;
1:82a5839:             }
1:82a5839: 
1:82a5839:             ConversionKey x = (ConversionKey) o;
1:82a5839:             return x.from == from && x.to == to;
1:82a5839:         }
1:82a5839: 
1:82a5839:         @Override
1:82a5839:         public int hashCode() {
1:82a5839:             return hashCode;
1:82a5839:         }
1:82a5839:     }
1:82a5839: 
1:82a5839:     interface Converter {
1:82a5839:         Object convert(Object value);
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static final HashMap<ConversionKey, Converter> CONVERSION_MAP = new HashMap<ConversionKey, Converter>();
1:82a5839: 
1:82a5839:     static {
1:82a5839:         Converter toStringConverter = new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return value.toString();
1:82a5839:             }
1:82a5839:         };
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Boolean.class, String.class), toStringConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Byte.class, String.class), toStringConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Short.class, String.class), toStringConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Integer.class, String.class), toStringConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Long.class, String.class), toStringConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Float.class, String.class), toStringConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Double.class, String.class), toStringConverter);
1:82a5839: 
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(String.class, Boolean.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Boolean.valueOf((String) value);
1:82a5839:             }
1:82a5839:         });
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(String.class, Byte.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Byte.valueOf((String) value);
1:82a5839:             }
1:82a5839:         });
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(String.class, Short.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Short.valueOf((String) value);
1:82a5839:             }
1:82a5839:         });
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(String.class, Integer.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Integer.valueOf((String) value);
1:82a5839:             }
1:82a5839:         });
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(String.class, Long.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Long.valueOf((String) value);
1:82a5839:             }
1:82a5839:         });
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(String.class, Float.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Float.valueOf((String) value);
1:82a5839:             }
1:82a5839:         });
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(String.class, Double.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Double.valueOf((String) value);
1:82a5839:             }
1:82a5839:         });
1:82a5839: 
1:82a5839:         Converter longConverter = new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Long.valueOf(((Number) value).longValue());
1:82a5839:             }
1:82a5839:         };
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Long.class), longConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Short.class, Long.class), longConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Integer.class, Long.class), longConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Date.class, Long.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Long.valueOf(((Date) value).getTime());
1:82a5839:             }
1:82a5839:         });
1:82a5839: 
1:82a5839:         Converter intConverter = new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Integer.valueOf(((Number) value).intValue());
1:82a5839:             }
1:82a5839:         };
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Integer.class), intConverter);
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Short.class, Integer.class), intConverter);
1:82a5839: 
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Short.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return Short.valueOf(((Number) value).shortValue());
1:82a5839:             }
1:82a5839:         });
1:82a5839: 
1:82a5839:         CONVERSION_MAP.put(new ConversionKey(Float.class, Double.class), new Converter() {
1:82a5839:             @Override
1:82a5839:             public Object convert(Object value) {
1:82a5839:                 return new Double(((Number) value).doubleValue());
1:82a5839:             }
1:82a5839:         });
1:82a5839:     }
1:82a5839: 
1:82a5839:     public static Object convert(Object value, Class<?> toClass) {
1:82a5839: 
1:82a5839:         assert value != null && toClass != null;
1:82a5839: 
1:82a5839:         if (value.getClass() == toClass) {
1:82a5839:             return value;
1:82a5839:         }
1:82a5839: 
1:82a5839:         Class<?> fromClass = value.getClass();
1:82a5839: 
1:82a5839:         if (fromClass.isPrimitive()) {
1:82a5839:             fromClass = convertPrimitiveTypeToWrapperType(fromClass);
1:82a5839:         }
1:82a5839: 
1:82a5839:         if (toClass.isPrimitive()) {
1:82a5839:             toClass = convertPrimitiveTypeToWrapperType(toClass);
1:82a5839:         }
1:82a5839: 
1:82a5839:         Converter c = CONVERSION_MAP.get(new ConversionKey(fromClass, toClass));
1:82a5839:         if (c == null) {
1:82a5839:             return null;
1:82a5839:         }
1:82a5839: 
1:82a5839:         return c.convert(value);
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static Class<?> convertPrimitiveTypeToWrapperType(Class<?> type) {
1:82a5839:         Class<?> rc = type;
1:82a5839:         if (type.isPrimitive()) {
1:82a5839:             if (type == int.class) {
1:82a5839:                 rc = Integer.class;
1:82a5839:             } else if (type == long.class) {
1:82a5839:                 rc = Long.class;
1:82a5839:             } else if (type == double.class) {
1:82a5839:                 rc = Double.class;
1:82a5839:             } else if (type == float.class) {
1:82a5839:                 rc = Float.class;
1:82a5839:             } else if (type == short.class) {
1:82a5839:                 rc = Short.class;
1:82a5839:             } else if (type == byte.class) {
1:82a5839:                 rc = Byte.class;
1:82a5839:             } else if (type == boolean.class) {
1:82a5839:                 rc = Boolean.class;
1:82a5839:             }
1:82a5839:         }
1:82a5839: 
1:82a5839:         return rc;
1:82a5839:     }
1:82a5839: 
1:82a5839:     private TypeConversionSupport() {}
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.util;
1: 
1: import java.util.Date;
1: import java.util.HashMap;
1: 
1: public final class TypeConversionSupport {
1: 
1:     static class ConversionKey {
1:         final Class<?> from;
1:         final Class<?> to;
1:         final int hashCode;
1: 
1:         public ConversionKey(Class<?> from, Class<?> to) {
1:             this.from = from;
1:             this.to = to;
1:             this.hashCode = from.hashCode() ^ (to.hashCode() << 1);
1:         }
1: 
1:         @Override
1:         public boolean equals(Object o) {
1:             if (this == o) {
1:                 return true;
1:             }
1: 
1:             if (o == null || o.getClass() != this.getClass()) {
1:                 return false;
1:             }
1: 
1:             ConversionKey x = (ConversionKey) o;
1:             return x.from == from && x.to == to;
1:         }
1: 
1:         @Override
1:         public int hashCode() {
1:             return hashCode;
1:         }
1:     }
1: 
1:     interface Converter {
1:         Object convert(Object value);
1:     }
1: 
1:     private static final HashMap<ConversionKey, Converter> CONVERSION_MAP = new HashMap<ConversionKey, Converter>();
1: 
1:     static {
1:         Converter toStringConverter = new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return value.toString();
1:             }
1:         };
1:         CONVERSION_MAP.put(new ConversionKey(Boolean.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Short.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Integer.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Long.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Float.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Double.class, String.class), toStringConverter);
1: 
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Boolean.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Boolean.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Byte.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Byte.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Short.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Short.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Integer.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Integer.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Long.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Long.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Float.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Float.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Double.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Double.valueOf((String) value);
1:             }
1:         });
1: 
1:         Converter longConverter = new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Long.valueOf(((Number) value).longValue());
1:             }
1:         };
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Long.class), longConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Short.class, Long.class), longConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Integer.class, Long.class), longConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Date.class, Long.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Long.valueOf(((Date) value).getTime());
1:             }
1:         });
1: 
1:         Converter intConverter = new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Integer.valueOf(((Number) value).intValue());
1:             }
1:         };
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Integer.class), intConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Short.class, Integer.class), intConverter);
1: 
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Short.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return Short.valueOf(((Number) value).shortValue());
1:             }
1:         });
1: 
1:         CONVERSION_MAP.put(new ConversionKey(Float.class, Double.class), new Converter() {
1:             @Override
1:             public Object convert(Object value) {
1:                 return new Double(((Number) value).doubleValue());
1:             }
1:         });
1:     }
1: 
1:     public static Object convert(Object value, Class<?> toClass) {
1: 
1:         assert value != null && toClass != null;
1: 
1:         if (value.getClass() == toClass) {
1:             return value;
1:         }
1: 
1:         Class<?> fromClass = value.getClass();
1: 
1:         if (fromClass.isPrimitive()) {
1:             fromClass = convertPrimitiveTypeToWrapperType(fromClass);
1:         }
1: 
1:         if (toClass.isPrimitive()) {
1:             toClass = convertPrimitiveTypeToWrapperType(toClass);
1:         }
1: 
1:         Converter c = CONVERSION_MAP.get(new ConversionKey(fromClass, toClass));
1:         if (c == null) {
1:             return null;
1:         }
1: 
1:         return c.convert(value);
1:     }
1: 
1:     private static Class<?> convertPrimitiveTypeToWrapperType(Class<?> type) {
1:         Class<?> rc = type;
1:         if (type.isPrimitive()) {
1:             if (type == int.class) {
1:                 rc = Integer.class;
1:             } else if (type == long.class) {
1:                 rc = Long.class;
1:             } else if (type == double.class) {
1:                 rc = Double.class;
1:             } else if (type == float.class) {
1:                 rc = Float.class;
1:             } else if (type == short.class) {
1:                 rc = Short.class;
1:             } else if (type == byte.class) {
1:                 rc = Byte.class;
1:             } else if (type == boolean.class) {
1:                 rc = Boolean.class;
1:             }
1:         }
1: 
1:         return rc;
1:     }
1: 
1:     private TypeConversionSupport() {}
1: }
============================================================================