2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:3dbc9c9:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3dbc9c9:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.security;
1:f812e34: 
1:3dbc9c9: import java.security.Principal;
1:67ccfca: import java.security.cert.X509Certificate;
1:eeacd65: import java.util.HashSet;
1:d29ca2a: import java.util.Map;
1:d29ca2a: import java.util.Set;
1:f812e34: 
1:d29ca2a: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:eeacd65: import org.apache.activemq.jaas.GroupPrincipal;
1:f812e34: 
1:d29ca2a: /**
1:d29ca2a:  * Handles authenticating a users against a simple user name/password map.
1:d29ca2a:  */
1:8b3761c: public class SimpleAuthenticationBroker extends AbstractAuthenticationBroker {
1:f812e34: 
1:eeacd65:     private boolean anonymousAccessAllowed = false;
1:eeacd65:     private String anonymousUser;
1:eeacd65:     private String anonymousGroup;
1:67a7d30:     private Map<String,String> userPasswords;
1:67a7d30:     private Map<String,Set<Principal>> userGroups;
1:f812e34: 
1:3dbc9c9:     public SimpleAuthenticationBroker(Broker next, Map<String,String> userPasswords, Map<String,Set<Principal>> userGroups) {
1:d29ca2a:         super(next);
1:d29ca2a:         this.userPasswords = userPasswords;
1:d29ca2a:         this.userGroups = userGroups;
1:ecf89a6:     }
1:8b3761c: 
1:eeacd65:     public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) {
1:eeacd65:         this.anonymousAccessAllowed = anonymousAccessAllowed;
3:d29ca2a:     }
1:3dbc9c9: 
1:eeacd65:     public void setAnonymousUser(String anonymousUser) {
1:eeacd65:         this.anonymousUser = anonymousUser;
1:d29ca2a:     }
1:f812e34: 
1:eeacd65:     public void setAnonymousGroup(String anonymousGroup) {
1:eeacd65:         this.anonymousGroup = anonymousGroup;
1:d29ca2a:     }
1:f812e34: 
1:67a7d30:     public void setUserPasswords(Map<String,String> value) {
1:67a7d30:         userPasswords = value;
1:67a7d30:     }
1:67a7d30: 
1:67a7d30:     public void setUserGroups(Map<String, Set<Principal>> value) {
1:67a7d30:         userGroups = value;
1:67a7d30:     }
1:67a7d30: 
1:8b3761c:     @Override
1:7f5213b:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:67ccfca:         SecurityContext securityContext = context.getSecurityContext();
1:67ccfca:         if (securityContext == null) {
1:67ccfca:             securityContext = authenticate(info.getUserName(), info.getPassword(), null);
1:67ccfca:             context.setSecurityContext(securityContext);
1:67ccfca:             securityContexts.add(securityContext);
1:d29ca2a:         }
1:f812e34: 
1:9862d93:         try {
1:d29ca2a:             super.addConnection(context, info);
1:9862d93:         } catch (Exception e) {
1:67ccfca:             securityContexts.remove(securityContext);
1:d29ca2a:             context.setSecurityContext(null);
1:9862d93:             throw e;
1:d29ca2a:         }
1:d29ca2a:     }
1:67ccfca: 
1:67ccfca:     @Override
1:67ccfca:     public SecurityContext authenticate(String username, String password, X509Certificate[] certificates) throws SecurityException {
1:67ccfca:         SecurityContext securityContext = null;
1:67ccfca: 
1:67ccfca:         // Check the username and password.
1:67ccfca:         if (anonymousAccessAllowed && username == null && password == null) {
1:67ccfca:             username = anonymousUser;
1:67ccfca:             securityContext = new SecurityContext(username) {
1:67ccfca:                 @Override
1:67ccfca:                 public Set<Principal> getPrincipals() {
1:67ccfca:                     Set<Principal> groups = new HashSet<Principal>();
1:67ccfca:                     groups.add(new GroupPrincipal(anonymousGroup));
1:67ccfca:                     return groups;
1:67ccfca:                 }
1:67ccfca:             };
1:67ccfca:         } else {
1:67ccfca:             String pw = userPasswords.get(username);
1:67ccfca:             if (pw == null || !pw.equals(password)) {
1:67ccfca:                 throw new SecurityException("User name [" + username + "] or password is invalid.");
1:67ccfca:             }
1:67ccfca: 
1:67ccfca:             final Set<Principal> groups = userGroups.get(username);
1:67ccfca:             securityContext = new SecurityContext(username) {
1:67ccfca:                 @Override
1:67ccfca:                 public Set<Principal> getPrincipals() {
1:67ccfca:                     return groups;
1:67ccfca:                 }
1:67ccfca:             };
1:67ccfca:         }
1:67ccfca: 
1:67ccfca:         return securityContext;
1:67ccfca:     }
1:d29ca2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
/////////////////////////////////////////////////////////////////////////
1:         SecurityContext securityContext = context.getSecurityContext();
1:         if (securityContext == null) {
1:             securityContext = authenticate(info.getUserName(), info.getPassword(), null);
1:             context.setSecurityContext(securityContext);
1:             securityContexts.add(securityContext);
1:             securityContexts.remove(securityContext);
1: 
1:     @Override
1:     public SecurityContext authenticate(String username, String password, X509Certificate[] certificates) throws SecurityException {
1:         SecurityContext securityContext = null;
1: 
1:         // Check the username and password.
1:         if (anonymousAccessAllowed && username == null && password == null) {
1:             username = anonymousUser;
1:             securityContext = new SecurityContext(username) {
1:                 @Override
1:                 public Set<Principal> getPrincipals() {
1:                     Set<Principal> groups = new HashSet<Principal>();
1:                     groups.add(new GroupPrincipal(anonymousGroup));
1:                     return groups;
1:                 }
1:             };
1:         } else {
1:             String pw = userPasswords.get(username);
1:             if (pw == null || !pw.equals(password)) {
1:                 throw new SecurityException("User name [" + username + "] or password is invalid.");
1:             }
1: 
1:             final Set<Principal> groups = userGroups.get(username);
1:             securityContext = new SecurityContext(username) {
1:                 @Override
1:                 public Set<Principal> getPrincipals() {
1:                     return groups;
1:                 }
1:             };
1:         }
1: 
1:         return securityContext;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:67a7d30
/////////////////////////////////////////////////////////////////////////
1:     private Map<String,String> userPasswords;
1:     private Map<String,Set<Principal>> userGroups;
/////////////////////////////////////////////////////////////////////////
1:     public void setUserPasswords(Map<String,String> value) {
1:         userPasswords = value;
1:     }
1: 
1:     public void setUserGroups(Map<String, Set<Principal>> value) {
1:         userGroups = value;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8b3761c
/////////////////////////////////////////////////////////////////////////
1: public class SimpleAuthenticationBroker extends AbstractAuthenticationBroker {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:                     @Override
/////////////////////////////////////////////////////////////////////////
0:                     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
0:     private final Map<String,String> userPasswords;
0:     private final Map<String,Set<Principal>> userGroups;
1:     public SimpleAuthenticationBroker(Broker next, Map<String,String> userPasswords, Map<String,Set<Principal>> userGroups) {
1: 
/////////////////////////////////////////////////////////////////////////
0:         SecurityContext s = context.getSecurityContext();
0:                     public Set<Principal> getPrincipals() {
0:                         Set<Principal> groups = new HashSet<Principal>();
0:                 String pw = userPasswords.get(info.getUserName());
0:                 final Set<Principal> groups = userGroups.get(info.getUserName());
0:                     public Set<Principal> getPrincipals() {
commit:2a0b489
/////////////////////////////////////////////////////////////////////////
0:                             "User name [" + info.getUserName() + "] or password is invalid.");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:                 public Set<?> getPrincipals() {
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private final CopyOnWriteArrayList<SecurityContext> securityContexts = new CopyOnWriteArrayList<SecurityContext>();
/////////////////////////////////////////////////////////////////////////
0:             if (pw == null || !pw.equals(info.getPassword())) {
1:             }
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator<SecurityContext> iter = securityContexts.iterator(); iter.hasNext();) {
0:             SecurityContext sc = iter.next();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:         if (context.getSecurityContext() == null) {
0:             String pw = (String)userPasswords.get(info.getUserName());
0:             if (pw == null || !pw.equals(info.getPassword()))
1: 
1: 
1: 
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error)
0:         throws Exception {
0:         if (securityContexts.remove(context.getSecurityContext())) {
1: 
0:      * Previously logged in users may no longer have the same access anymore.
0:      * Refresh all the logged into users.
0:             SecurityContext sc = (SecurityContext)iter.next();
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
0: 
0: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.Set;
0: 
1: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
0: 
0: 
1: /**
1:  * Handles authenticating a users against a simple user name/password map.
0:  * 
0:  * @version $Revision$
1:  */
0: public class SimpleAuthenticationBroker extends BrokerFilter {
0:     
0:     private final Map userPasswords;
0:     private final Map userGroups;
0:     private final CopyOnWriteArrayList securityContexts = new CopyOnWriteArrayList();
0:     
0:     public SimpleAuthenticationBroker(Broker next, Map userPasswords, Map userGroups) {
1:         super(next);
1:         this.userPasswords = userPasswords;
1:         this.userGroups = userGroups;
1:     }
0:     
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Throwable {
0: 
0:         if( context.getSecurityContext()==null ) {
0:             // Check the username and password.
0:             String pw = (String) userPasswords.get(info.getUserName());
0:             if( pw == null || !pw.equals(info.getPassword()) )
0:                 throw new SecurityException("User name or password is invalid.");
0:         
0:             final Set groups = (Set)userGroups.get(info.getUserName());
0:             SecurityContext s = new SecurityContext(info.getUserName()) {
0:                 public Set getPrincipals() {
0:                     return groups;
1:                 }
0:             };
0:             
0:             context.setSecurityContext(s);
0:             securityContexts.add(s);
1:         }
1:         super.addConnection(context, info);
1:     }
0:     
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Throwable {
0:         super.removeConnection(context, info, error);
0:         if( securityContexts.remove(context.getSecurityContext()) ) {
1:             context.setSecurityContext(null);
1:         }
1:     }
0:     
1:     /**
0:      * Previously logged in users may no longer have the same access anymore.  Refresh
0:      * all the logged into users. 
1:      */
0:     public void refresh() {
0:         for (Iterator iter = securityContexts.iterator(); iter.hasNext();) {
0:             SecurityContext sc = (SecurityContext) iter.next();
0:             sc.getAuthorizedReadDests().clear();
0:             sc.getAuthorizedWriteDests().clear();
1:         }
1:     }
0:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9862d93
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             super.addConnection(context, info);
1:         } catch (Exception e) {
0:             securityContexts.remove(s);
0:             context.setSecurityContext(null);
1:             throw e;
0:         }
commit:eeacd65
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jaas.GroupPrincipal;
/////////////////////////////////////////////////////////////////////////
1:     private boolean anonymousAccessAllowed = false;
1:     private String anonymousUser;
1:     private String anonymousGroup;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) {
1:         this.anonymousAccessAllowed = anonymousAccessAllowed;
0:     }
0: 
1:     public void setAnonymousUser(String anonymousUser) {
1:         this.anonymousUser = anonymousUser;
0:     }
0: 
1:     public void setAnonymousGroup(String anonymousGroup) {
1:         this.anonymousGroup = anonymousGroup;
0:     }
0:     	SecurityContext s = context.getSecurityContext();
0:         if (s == null) {
0:             if (anonymousAccessAllowed && info.getUserName() == null && info.getPassword() == null) {
0:                 info.setUserName(anonymousUser);
0:                 s = new SecurityContext(info.getUserName()) {
0:                     public Set getPrincipals() {
0:                         Set groups = new HashSet();
0:                         groups.add(new GroupPrincipal(anonymousGroup));
0:                         return groups;
0:                     }
0:                 };
0:             } else {
0:                 String pw = (String) userPasswords.get(info.getUserName());
0:                 if (pw == null || !pw.equals(info.getPassword())) {
0:                     throw new SecurityException(
0:                             "User name or password is invalid.");
0: 
0:                 final Set groups = (Set) userGroups.get(info.getUserName());
0:                 s = new SecurityContext(info.getUserName()) {
0:                     public Set<?> getPrincipals() {
0:                         return groups;
0:                     }
0:                 };
0:             }
============================================================================