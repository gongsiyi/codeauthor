1:ef85089: /**
1:ef85089:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ef85089:  * contributor license agreements.  See the NOTICE file distributed with
1:ef85089:  * this work for additional information regarding copyright ownership.
1:ef85089:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ef85089:  * (the "License"); you may not use this file except in compliance with
1:ef85089:  * the License.  You may obtain a copy of the License at
1:ef85089:  *
1:ef85089:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ef85089:  *
1:ef85089:  * Unless required by applicable law or agreed to in writing, software
1:ef85089:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef85089:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef85089:  * See the License for the specific language governing permissions and
1:ef85089:  * limitations under the License.
1:ef85089:  */
2:ef85089: 
1:ef85089: package org.apache.activemq.transport.http;
1:ef85089: 
1:ef85089: import java.net.URISyntaxException;
1:ef85089: import java.util.concurrent.atomic.AtomicInteger;
1:ef85089: import javax.jms.BytesMessage;
1:ef85089: import javax.jms.Connection;
1:ef85089: import javax.jms.ConnectionFactory;
1:ef85089: import javax.jms.Destination;
1:ef85089: import javax.jms.JMSException;
1:ef85089: import javax.jms.MapMessage;
1:ef85089: import javax.jms.Message;
1:ef85089: import javax.jms.MessageConsumer;
1:ef85089: import javax.jms.MessageProducer;
1:ef85089: import javax.jms.ObjectMessage;
1:ef85089: import javax.jms.Session;
1:ef85089: import javax.jms.StreamMessage;
1:ef85089: import javax.jms.TextMessage;
1:ef85089: 
1:ef85089: import org.apache.activemq.ActiveMQConnectionFactory;
1:ef85089: import org.apache.activemq.broker.BrokerService;
1:ef85089: import org.junit.After;
1:ef85089: import org.junit.Assert;
1:ef85089: import org.junit.Before;
1:ef85089: import org.junit.Test;
1:ef85089: 
1:ef85089: public class HttpJMSMessagesWithCompressionTest {
1:ef85089: 
1:ef85089:     private static final AtomicInteger counter = new AtomicInteger(1);
1:ef85089: 
1:ef85089:     enum DESTINATION_TYPE { TOPIC, QUEUE };
1:ef85089: 
1:ef85089:     protected BrokerService broker;
1:ef85089:     protected Connection connection;
1:ef85089:     protected DESTINATION_TYPE destinationType = DESTINATION_TYPE.QUEUE;
1:ef85089: 
1:ef85089:     @Before
1:ef85089:     public void setUp() throws Exception {
1:ef85089:         broker = createBroker();
1:ef85089:         broker.start();
1:ef85089:         WaitForJettyListener.waitForJettySocketToAccept(getBrokerURL());
1:ef85089:         ConnectionFactory factory = createConnectionFactory();
1:ef85089:         connection = factory.createConnection();
1:ef85089:     }
1:ef85089: 
1:ef85089:     @After
1:ef85089:     public void tearDown() throws Exception {
1:ef85089:         if (connection != null) {
1:ef85089:             connection.close();
1:ef85089:         }
1:ef85089:         if (broker != null) {
1:ef85089:             broker.stop();
1:ef85089:         }
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException {
1:ef85089:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(getBrokerURL());
1:ef85089:         return factory;
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected String getBrokerURL() {
1:ef85089:         return "http://localhost:8161?useCompression=true";
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected BrokerService createBroker() throws Exception {
1:ef85089:         BrokerService answer = new BrokerService();
1:ef85089:         answer.setPersistent(false);
1:ef85089:         answer.setUseJmx(false);
1:ef85089:         answer.setManagementContext(null);
1:ef85089:         answer.addConnector(getBrokerURL());
1:ef85089:         return answer;
1:ef85089:     }
1:ef85089: 
1:ef85089:     protected Destination createDestination(Session session, DESTINATION_TYPE destinationType) throws JMSException {
1:ef85089:         switch(destinationType) {
1:ef85089:         case TOPIC:
1:ef85089:             return session.createTopic("TOPIC." + counter.getAndIncrement());
1:ef85089:         case QUEUE:
1:ef85089:             return session.createQueue("QUEUE." + counter.getAndIncrement());
1:ef85089:         }
1:ef85089:         Assert.fail("Invalid destination type: " + destinationType);
1:ef85089:         return null;
1:ef85089:     }
1:ef85089: 
1:ef85089:     abstract class MessageCommand<M extends Message> {
1:ef85089: 
1:ef85089:         public final void assertMessage(M message) throws JMSException {
1:ef85089:             Assert.assertNotNull(message);
1:ef85089:             completeCheck(message);
1:ef85089:         }
1:ef85089: 
1:ef85089:         public abstract void completeCheck(M message) throws JMSException;
1:ef85089: 
1:ef85089:         public abstract M createMessage(Session session) throws JMSException;
1:ef85089:     }
1:ef85089: 
1:ef85089:     @SuppressWarnings("unchecked")
1:ef85089:     private <E extends Message> void executeTest(MessageCommand<E> messageCommand) throws JMSException {
1:ef85089: 
1:ef85089:         // Receive a message with the JMS API
1:ef85089:         connection.start();
1:ef85089:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ef85089:         Destination destination = createDestination(session, destinationType);
1:ef85089:         MessageConsumer consumer = session.createConsumer(destination);
1:ef85089:         MessageProducer producer = session.createProducer(destination);
1:ef85089: 
1:ef85089:         {
1:ef85089:             E message = messageCommand.createMessage(session);
1:ef85089:             producer.send(message);
1:ef85089:         }
1:ef85089: 
1:ef85089:         {
1:ef85089:             E message = (E)consumer.receive(1000);
1:ef85089:             messageCommand.assertMessage(message);
1:ef85089:         }
1:ef85089: 
1:ef85089:         Assert.assertNull(consumer.receiveNoWait());
1:ef85089:     }
1:ef85089: 
1:ef85089:     @Test
1:ef85089:     public void testTextMessage() throws Exception {
1:ef85089:         executeTest(new MessageCommand<TextMessage>() {
1:ef85089:             private String textString = "This is a simple text string";
1:ef85089: 
1:ef85089:             public TextMessage createMessage(Session session) throws JMSException {
1:ef85089:                 return session.createTextMessage(textString);
1:ef85089:             }
1:ef85089: 
1:ef85089:             public void completeCheck(TextMessage message) throws JMSException {
1:ef85089:                 Assert.assertEquals("The returned text string was different", textString, message.getText());
1:ef85089:             }
1:ef85089:         });
1:ef85089:     }
1:ef85089: 
1:ef85089:     @Test
1:ef85089:     public void testBytesMessage() throws Exception {
1:ef85089:         executeTest(new MessageCommand<BytesMessage>() {
1:ef85089:             private byte[] bytes = "This is a simple text string".getBytes();
1:ef85089: 
1:ef85089:             public BytesMessage createMessage(Session session) throws JMSException {
1:ef85089:                 BytesMessage message =  session.createBytesMessage();
1:ef85089:                 message.writeBytes(bytes);
1:ef85089:                 return message;
1:ef85089:             }
1:ef85089: 
1:ef85089:             public void completeCheck(BytesMessage message) throws JMSException {
1:ef85089:                 byte[] result = new byte[bytes.length];
1:ef85089:                 message.readBytes(result);
1:ef85089:                 Assert.assertArrayEquals("The returned byte array was different", bytes, result);
1:ef85089:             }
1:ef85089:         });
1:ef85089:     }
1:ef85089: 
1:ef85089:     @Test
1:ef85089:     public void testMapMessage() throws Exception {
1:ef85089:         executeTest(new MessageCommand<MapMessage>() {
1:ef85089:             public MapMessage createMessage(Session session) throws JMSException {
1:ef85089:                 MapMessage message =  session.createMapMessage();
1:ef85089:                 message.setInt("value", 13);
1:ef85089:                 return message;
1:ef85089:             }
1:ef85089: 
1:ef85089:             public void completeCheck(MapMessage message) throws JMSException {
1:ef85089:                 Assert.assertEquals("The returned mapped value was different", 13, message.getInt("value"));
1:ef85089:             }
1:ef85089:         });
1:ef85089:     }
1:ef85089: 
1:ef85089:     @Test
1:ef85089:     public void testObjectMessage() throws Exception {
1:ef85089:         executeTest(new MessageCommand<ObjectMessage>() {
1:ef85089:             private Long value = new Long(101);
1:ef85089: 
1:ef85089:             public ObjectMessage createMessage(Session session) throws JMSException {
1:ef85089:                 return session.createObjectMessage(value);
1:ef85089:             }
1:ef85089: 
1:ef85089:             public void completeCheck(ObjectMessage message) throws JMSException {
1:ef85089:                 Assert.assertEquals("The returned object was different", value, message.getObject());
1:ef85089:             }
1:ef85089:         });
1:ef85089:     }
1:ef85089: 
1:ef85089:     @Test
1:ef85089:     public void testStreamMessage() throws Exception {
1:ef85089:         executeTest(new MessageCommand<StreamMessage>() {
1:ef85089:             private Long value = new Long(1013);
1:ef85089: 
1:ef85089:             public StreamMessage createMessage(Session session) throws JMSException {
1:ef85089:                 StreamMessage message = session.createStreamMessage();
1:ef85089:                 message.writeObject(value);
1:ef85089:                 return message;
1:ef85089:             }
1:ef85089: 
1:ef85089:             public void completeCheck(StreamMessage message) throws JMSException {
1:ef85089:                 Assert.assertEquals("The returned stream object was different", value, message.readObject());
1:ef85089:             }
1:ef85089:         });
1:ef85089:     }
1:ef85089: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef85089
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.http;
1: 
1: import java.net.URISyntaxException;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class HttpJMSMessagesWithCompressionTest {
1: 
1:     private static final AtomicInteger counter = new AtomicInteger(1);
1: 
1:     enum DESTINATION_TYPE { TOPIC, QUEUE };
1: 
1:     protected BrokerService broker;
1:     protected Connection connection;
1:     protected DESTINATION_TYPE destinationType = DESTINATION_TYPE.QUEUE;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         WaitForJettyListener.waitForJettySocketToAccept(getBrokerURL());
1:         ConnectionFactory factory = createConnectionFactory();
1:         connection = factory.createConnection();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(getBrokerURL());
1:         return factory;
1:     }
1: 
1:     protected String getBrokerURL() {
1:         return "http://localhost:8161?useCompression=true";
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.setUseJmx(false);
1:         answer.setManagementContext(null);
1:         answer.addConnector(getBrokerURL());
1:         return answer;
1:     }
1: 
1:     protected Destination createDestination(Session session, DESTINATION_TYPE destinationType) throws JMSException {
1:         switch(destinationType) {
1:         case TOPIC:
1:             return session.createTopic("TOPIC." + counter.getAndIncrement());
1:         case QUEUE:
1:             return session.createQueue("QUEUE." + counter.getAndIncrement());
1:         }
1:         Assert.fail("Invalid destination type: " + destinationType);
1:         return null;
1:     }
1: 
1:     abstract class MessageCommand<M extends Message> {
1: 
1:         public final void assertMessage(M message) throws JMSException {
1:             Assert.assertNotNull(message);
1:             completeCheck(message);
1:         }
1: 
1:         public abstract void completeCheck(M message) throws JMSException;
1: 
1:         public abstract M createMessage(Session session) throws JMSException;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private <E extends Message> void executeTest(MessageCommand<E> messageCommand) throws JMSException {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         {
1:             E message = messageCommand.createMessage(session);
1:             producer.send(message);
1:         }
1: 
1:         {
1:             E message = (E)consumer.receive(1000);
1:             messageCommand.assertMessage(message);
1:         }
1: 
1:         Assert.assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     @Test
1:     public void testTextMessage() throws Exception {
1:         executeTest(new MessageCommand<TextMessage>() {
1:             private String textString = "This is a simple text string";
1: 
1:             public TextMessage createMessage(Session session) throws JMSException {
1:                 return session.createTextMessage(textString);
1:             }
1: 
1:             public void completeCheck(TextMessage message) throws JMSException {
1:                 Assert.assertEquals("The returned text string was different", textString, message.getText());
1:             }
1:         });
1:     }
1: 
1:     @Test
1:     public void testBytesMessage() throws Exception {
1:         executeTest(new MessageCommand<BytesMessage>() {
1:             private byte[] bytes = "This is a simple text string".getBytes();
1: 
1:             public BytesMessage createMessage(Session session) throws JMSException {
1:                 BytesMessage message =  session.createBytesMessage();
1:                 message.writeBytes(bytes);
1:                 return message;
1:             }
1: 
1:             public void completeCheck(BytesMessage message) throws JMSException {
1:                 byte[] result = new byte[bytes.length];
1:                 message.readBytes(result);
1:                 Assert.assertArrayEquals("The returned byte array was different", bytes, result);
1:             }
1:         });
1:     }
1: 
1:     @Test
1:     public void testMapMessage() throws Exception {
1:         executeTest(new MessageCommand<MapMessage>() {
1:             public MapMessage createMessage(Session session) throws JMSException {
1:                 MapMessage message =  session.createMapMessage();
1:                 message.setInt("value", 13);
1:                 return message;
1:             }
1: 
1:             public void completeCheck(MapMessage message) throws JMSException {
1:                 Assert.assertEquals("The returned mapped value was different", 13, message.getInt("value"));
1:             }
1:         });
1:     }
1: 
1:     @Test
1:     public void testObjectMessage() throws Exception {
1:         executeTest(new MessageCommand<ObjectMessage>() {
1:             private Long value = new Long(101);
1: 
1:             public ObjectMessage createMessage(Session session) throws JMSException {
1:                 return session.createObjectMessage(value);
1:             }
1: 
1:             public void completeCheck(ObjectMessage message) throws JMSException {
1:                 Assert.assertEquals("The returned object was different", value, message.getObject());
1:             }
1:         });
1:     }
1: 
1:     @Test
1:     public void testStreamMessage() throws Exception {
1:         executeTest(new MessageCommand<StreamMessage>() {
1:             private Long value = new Long(1013);
1: 
1:             public StreamMessage createMessage(Session session) throws JMSException {
1:                 StreamMessage message = session.createStreamMessage();
1:                 message.writeObject(value);
1:                 return message;
1:             }
1: 
1:             public void completeCheck(StreamMessage message) throws JMSException {
1:                 Assert.assertEquals("The returned stream object was different", value, message.readObject());
1:             }
1:         });
1:     }
1: }
============================================================================