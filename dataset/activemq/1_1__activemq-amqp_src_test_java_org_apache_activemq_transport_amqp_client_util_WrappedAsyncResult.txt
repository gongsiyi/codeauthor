1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client.util;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Base class used to wrap one AsyncResult with another.
1:72839b7:  */
1:72839b7: public abstract class WrappedAsyncResult implements AsyncResult {
1:72839b7: 
1:72839b7:     protected final AsyncResult wrapped;
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Create a new WrappedAsyncResult for the target AsyncResult
1:72839b7:      */
1:72839b7:     public WrappedAsyncResult(AsyncResult wrapped) {
1:72839b7:         this.wrapped = wrapped;
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void onFailure(Throwable result) {
1:72839b7:         if (wrapped != null) {
1:72839b7:             wrapped.onFailure(result);
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void onSuccess() {
1:72839b7:         if (wrapped != null) {
1:72839b7:             wrapped.onSuccess();
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public boolean isComplete() {
1:72839b7:         if (wrapped != null) {
1:72839b7:             return wrapped.isComplete();
1:72839b7:         }
1:72839b7: 
1:72839b7:         return false;
1:72839b7:     }
1:72839b7: 
1:72839b7:     public AsyncResult getWrappedRequest() {
1:72839b7:         return wrapped;
1:72839b7:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.util;
1: 
1: /**
1:  * Base class used to wrap one AsyncResult with another.
1:  */
1: public abstract class WrappedAsyncResult implements AsyncResult {
1: 
1:     protected final AsyncResult wrapped;
1: 
1:     /**
1:      * Create a new WrappedAsyncResult for the target AsyncResult
1:      */
1:     public WrappedAsyncResult(AsyncResult wrapped) {
1:         this.wrapped = wrapped;
1:     }
1: 
1:     @Override
1:     public void onFailure(Throwable result) {
1:         if (wrapped != null) {
1:             wrapped.onFailure(result);
1:         }
1:     }
1: 
1:     @Override
1:     public void onSuccess() {
1:         if (wrapped != null) {
1:             wrapped.onSuccess();
1:         }
1:     }
1: 
1:     @Override
1:     public boolean isComplete() {
1:         if (wrapped != null) {
1:             return wrapped.isComplete();
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public AsyncResult getWrappedRequest() {
1:         return wrapped;
1:     }
1: }
============================================================================