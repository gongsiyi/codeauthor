1:ed88600: /*
1:ed88600:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed88600:  * contributor license agreements.  See the NOTICE file distributed with
1:ed88600:  * this work for additional information regarding copyright ownership.
1:ed88600:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed88600:  * (the "License"); you may not use this file except in compliance with
1:ed88600:  * the License.  You may obtain a copy of the License at
1:ed88600:  *
1:ed88600:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ed88600:  *
1:ed88600:  * Unless required by applicable law or agreed to in writing, software
1:ed88600:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed88600:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed88600:  * See the License for the specific language governing permissions and
1:ed88600:  * limitations under the License.
1:ed88600:  */
1:ed88600: package org.apache.activemq.transport.amqp.interop;
1:ed88600: 
1:ed88600: import org.apache.activemq.ActiveMQConnectionFactory;
1:ed88600: import org.apache.activemq.command.ActiveMQQueue;
1:ed88600: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:ed88600: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:ed88600: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:ed88600: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:ed88600: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:ed88600: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:ed88600: import org.junit.Ignore;
1:ed88600: import org.junit.Test;
1:ed88600: import org.junit.runner.RunWith;
1:ed88600: import org.junit.runners.Parameterized;
1:ed88600: import org.junit.runners.Parameterized.Parameters;
1:ed88600: import org.slf4j.Logger;
1:ed88600: import org.slf4j.LoggerFactory;
1:ed88600: 
1:ed88600: import javax.jms.BytesMessage;
1:ed88600: import javax.jms.Connection;
1:ed88600: import javax.jms.JMSException;
1:ed88600: import javax.jms.MessageProducer;
1:ed88600: import javax.jms.Session;
1:ed88600: import java.util.Arrays;
1:ed88600: import java.util.Collection;
1:ed88600: import java.util.Random;
1:ed88600: import java.util.concurrent.ExecutorService;
1:ed88600: import java.util.concurrent.Executors;
1:ed88600: import java.util.concurrent.TimeUnit;
1:ed88600: import java.util.concurrent.atomic.AtomicBoolean;
1:ed88600: import java.util.concurrent.atomic.AtomicInteger;
1:ed88600: 
1:ed88600: import static org.apache.activemq.store.kahadb.KahaDBStore.PROPERTY_CANCELED_TASK_MOD_METRIC;
1:ed88600: import static org.junit.Assert.assertEquals;
1:ed88600: import static org.junit.Assert.assertFalse;
1:ed88600: 
1:ed88600: @RunWith(Parameterized.class)
1:ed88600: public class OpenWireToAmqpConcurrentStoreAndDispatchTest extends AmqpClientTestSupport {
1:ed88600: 
1:ed88600:     protected static final Logger LOG = LoggerFactory.getLogger(OpenWireToAmqpConcurrentStoreAndDispatchTest.class);
1:ed88600: 
1:ed88600:     private final String transformer;
1:ed88600: 
1:ed88600:     @Parameters(name="Transformer->{0}")
1:ed88600:     public static Collection<Object[]> data() {
1:ed88600:         System.setProperty(PROPERTY_CANCELED_TASK_MOD_METRIC, "100");
1:ed88600:         return Arrays.asList(new Object[][] {
1:ed88600:                 {"jms"}
1:ed88600:             });
1:ed88600:     }
1:ed88600: 
1:ed88600:     public OpenWireToAmqpConcurrentStoreAndDispatchTest(String transformer) {
1:ed88600:         this.transformer = transformer;
1:ed88600:     }
1:ed88600: 
1:ed88600:     @Override
1:ed88600:     protected String getAmqpTransformer() {
1:ed88600:         return transformer;
1:ed88600:     }
1:ed88600: 
1:ed88600:     @Override
1:ed88600:     protected boolean isPersistent() {
1:ed88600:         return true;
1:ed88600:     }
1:ed88600: 
1:ed88600:     @Override
1:ed88600:     protected boolean isUseOpenWireConnector() {
1:ed88600:         return true;
1:ed88600:     }
1:ed88600: 
1:ed88600:     @Test(timeout = 6000000)
1:ed88600:     @Ignore("takes more than 6 mins to complete but fails earlier without fix")
1:ed88600:     public void testNoErrorOnSend() throws Exception {
1:ed88600: 
1:ed88600:         final int numIterations = 100;
1:ed88600:         int numConsumers = 3;
1:ed88600:         final int numProducers = 10;
1:ed88600:         final int numMessages = 2000;
1:ed88600:         final AtomicBoolean done = new AtomicBoolean(false);
1:ed88600:         final AtomicInteger sent = new AtomicInteger();
1:ed88600:         final AtomicInteger received = new AtomicInteger();
1:ed88600:         final AtomicBoolean errorOnSend = new AtomicBoolean(false);
1:ed88600: 
1:ed88600:         final AtomicInteger toSend = new AtomicInteger(numMessages);
1:ed88600: 
1:ed88600:         final Random random = new Random();
1:ed88600:         for (int i=0; i<numIterations; i++) {
1:ed88600:             done.set(false);
1:ed88600:             sent.set(0);
1:ed88600:             received.set(0);
1:ed88600:             toSend.set(numMessages);
1:ed88600: 
1:ed88600:             ExecutorService executorService = Executors.newCachedThreadPool();
1:ed88600:             for (int j = 0; j < numConsumers; j++) {
1:ed88600:                 executorService.execute(new Runnable() {
1:ed88600:                     @Override
1:ed88600:                     public void run() {
1:ed88600:                         AmqpConnection connection = null;
1:ed88600:                         try {
1:ed88600:                             AmqpClient client = createAmqpClient();
1:ed88600:                             connection = trackConnection(client.connect());
1:ed88600:                             AmqpSession session = connection.createSession();
1:ed88600: 
1:ed88600:                             AmqpReceiver receiver = session.createReceiver("queue://" + getTestName(), null, false, true);
1:ed88600: 
1:ed88600:                             while (!done.get() && received.get() < numMessages) {
1:ed88600:                                 receiver.flow(1);
1:ed88600:                                 AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:ed88600:                                 if (message != null) {
1:ed88600:                                     received.incrementAndGet();
1:ed88600:                                 }
1:ed88600:                             }
1:ed88600:                         } catch (Exception e) {
1:ed88600:                             e.printStackTrace();
1:ed88600:                         } finally {
1:ed88600:                             if (connection != null) {
1:ed88600:                                 connection.close();
1:ed88600:                             }
1:ed88600:                         }
1:ed88600:                     }
1:ed88600:                 });
1:ed88600:             }
1:ed88600: 
1:ed88600:             final byte[] payload = new byte[100];
1:ed88600:             for (int k = 0; k < numProducers; k++) {
1:ed88600:                 executorService.execute(new Runnable() {
1:ed88600:                     @Override
1:ed88600:                     public void run() {
1:ed88600:                         Connection connection = null;
1:ed88600:                         try {
1:ed88600:                             ActiveMQConnectionFactory connectionFactory =
1:ed88600:                                     new ActiveMQConnectionFactory(brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:ed88600:                             connection = connectionFactory.createConnection();
1:ed88600:                             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ed88600:                             MessageProducer producer = session.createProducer(new ActiveMQQueue(getTestName()));
1:ed88600:                             BytesMessage bytesMessage = session.createBytesMessage();
1:ed88600:                             bytesMessage.writeBytes(payload);
1:ed88600:                             bytesMessage.setStringProperty("PP", "VALUE");
1:ed88600:                             while (!done.get() && toSend.decrementAndGet() >= 0) {
1:ed88600:                                 producer.send(bytesMessage);
1:ed88600:                                 sent.incrementAndGet();
1:ed88600:                             }
1:ed88600:                         } catch (Exception e) {
1:ed88600:                             e.printStackTrace();
1:ed88600:                             errorOnSend.set(true);
1:ed88600:                         } finally {
1:ed88600:                             if (connection != null) {
1:ed88600:                                 try {
1:ed88600:                                     connection.close();
1:ed88600:                                 } catch (JMSException ignored) {}
1:ed88600:                             }
1:ed88600:                         }
1:ed88600:                     }
1:ed88600:                 });
1:ed88600:             }
1:ed88600: 
1:ed88600:             executorService.shutdown();
1:ed88600:             executorService.awaitTermination(30, TimeUnit.SECONDS);
1:ed88600: 
1:ed88600:             done.set(true);
1:ed88600:             assertEquals("[" + i + "] sent all requested", numMessages, sent.get());
1:ed88600:             assertEquals("[" + i + "] got all sent", numMessages, received.get());
1:ed88600:             assertFalse("[" + i + "] no error on send", errorOnSend.get());
1:ed88600:         }
1:ed88600:     }
1:ed88600: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ed88600
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Random;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import static org.apache.activemq.store.kahadb.KahaDBStore.PROPERTY_CANCELED_TASK_MOD_METRIC;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: 
1: @RunWith(Parameterized.class)
1: public class OpenWireToAmqpConcurrentStoreAndDispatchTest extends AmqpClientTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(OpenWireToAmqpConcurrentStoreAndDispatchTest.class);
1: 
1:     private final String transformer;
1: 
1:     @Parameters(name="Transformer->{0}")
1:     public static Collection<Object[]> data() {
1:         System.setProperty(PROPERTY_CANCELED_TASK_MOD_METRIC, "100");
1:         return Arrays.asList(new Object[][] {
1:                 {"jms"}
1:             });
1:     }
1: 
1:     public OpenWireToAmqpConcurrentStoreAndDispatchTest(String transformer) {
1:         this.transformer = transformer;
1:     }
1: 
1:     @Override
1:     protected String getAmqpTransformer() {
1:         return transformer;
1:     }
1: 
1:     @Override
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     }
1: 
1:     @Test(timeout = 6000000)
1:     @Ignore("takes more than 6 mins to complete but fails earlier without fix")
1:     public void testNoErrorOnSend() throws Exception {
1: 
1:         final int numIterations = 100;
1:         int numConsumers = 3;
1:         final int numProducers = 10;
1:         final int numMessages = 2000;
1:         final AtomicBoolean done = new AtomicBoolean(false);
1:         final AtomicInteger sent = new AtomicInteger();
1:         final AtomicInteger received = new AtomicInteger();
1:         final AtomicBoolean errorOnSend = new AtomicBoolean(false);
1: 
1:         final AtomicInteger toSend = new AtomicInteger(numMessages);
1: 
1:         final Random random = new Random();
1:         for (int i=0; i<numIterations; i++) {
1:             done.set(false);
1:             sent.set(0);
1:             received.set(0);
1:             toSend.set(numMessages);
1: 
1:             ExecutorService executorService = Executors.newCachedThreadPool();
1:             for (int j = 0; j < numConsumers; j++) {
1:                 executorService.execute(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         AmqpConnection connection = null;
1:                         try {
1:                             AmqpClient client = createAmqpClient();
1:                             connection = trackConnection(client.connect());
1:                             AmqpSession session = connection.createSession();
1: 
1:                             AmqpReceiver receiver = session.createReceiver("queue://" + getTestName(), null, false, true);
1: 
1:                             while (!done.get() && received.get() < numMessages) {
1:                                 receiver.flow(1);
1:                                 AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:                                 if (message != null) {
1:                                     received.incrementAndGet();
1:                                 }
1:                             }
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                         } finally {
1:                             if (connection != null) {
1:                                 connection.close();
1:                             }
1:                         }
1:                     }
1:                 });
1:             }
1: 
1:             final byte[] payload = new byte[100];
1:             for (int k = 0; k < numProducers; k++) {
1:                 executorService.execute(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         Connection connection = null;
1:                         try {
1:                             ActiveMQConnectionFactory connectionFactory =
1:                                     new ActiveMQConnectionFactory(brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:                             connection = connectionFactory.createConnection();
1:                             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                             MessageProducer producer = session.createProducer(new ActiveMQQueue(getTestName()));
1:                             BytesMessage bytesMessage = session.createBytesMessage();
1:                             bytesMessage.writeBytes(payload);
1:                             bytesMessage.setStringProperty("PP", "VALUE");
1:                             while (!done.get() && toSend.decrementAndGet() >= 0) {
1:                                 producer.send(bytesMessage);
1:                                 sent.incrementAndGet();
1:                             }
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                             errorOnSend.set(true);
1:                         } finally {
1:                             if (connection != null) {
1:                                 try {
1:                                     connection.close();
1:                                 } catch (JMSException ignored) {}
1:                             }
1:                         }
1:                     }
1:                 });
1:             }
1: 
1:             executorService.shutdown();
1:             executorService.awaitTermination(30, TimeUnit.SECONDS);
1: 
1:             done.set(true);
1:             assertEquals("[" + i + "] sent all requested", numMessages, sent.get());
1:             assertEquals("[" + i + "] got all sent", numMessages, received.get());
1:             assertFalse("[" + i + "] no error on send", errorOnSend.get());
1:         }
1:     }
1: }
============================================================================