1:ccbbecb: /**
1:ccbbecb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ccbbecb:  * contributor license agreements.  See the NOTICE file distributed with
1:ccbbecb:  * this work for additional information regarding copyright ownership.
1:ccbbecb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ccbbecb:  * (the "License"); you may not use this file except in compliance with
1:ccbbecb:  * the License.  You may obtain a copy of the License at
1:ccbbecb:  *
1:ccbbecb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ccbbecb:  *
1:ccbbecb:  * Unless required by applicable law or agreed to in writing, software
1:ccbbecb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ccbbecb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ccbbecb:  * See the License for the specific language governing permissions and
1:ccbbecb:  * limitations under the License.
1:ccbbecb:  */
1:ccbbecb: package org.apache.activemq.store.kahadb;
1:ccbbecb: 
1:ccbbecb: import org.apache.activemq.broker.BrokerService;
1:ccbbecb: import org.apache.activemq.util.Wait;
1:ccbbecb: import org.junit.After;
1:ccbbecb: import org.junit.Before;
1:ccbbecb: import org.junit.Test;
1:5e36f65: import org.slf4j.Logger;
1:5e36f65: import org.slf4j.LoggerFactory;
1:ccbbecb: 
1:ccbbecb: import java.io.File;
1:ccbbecb: import java.io.RandomAccessFile;
1:5e36f65: import java.util.Date;
1:ccbbecb: import java.util.concurrent.TimeUnit;
1:ccbbecb: 
1:ccbbecb: 
1:ccbbecb: import static org.junit.Assert.assertTrue;
1:ccbbecb: 
1:ccbbecb: public class KahaDBDeleteLockTest {
1:5e36f65:     static final Logger LOG = LoggerFactory.getLogger(KahaDBDeleteLockTest.class);
1:ccbbecb: 
1:ccbbecb:     protected BrokerService master;
1:ccbbecb: 
1:ccbbecb:     protected KahaDBPersistenceAdapter masterPersistenceAdapter = new KahaDBPersistenceAdapter();
1:ccbbecb: 
1:ccbbecb:     private final File testDataDir = new File("target/activemq-data/KahaDBDeleteLockTest");
1:ccbbecb:     private final File kahaDataDir = new File(testDataDir, "kahadb");
1:ccbbecb: 
1:ccbbecb:     @Before
1:ccbbecb:     public void createMaster() throws Exception{
1:ccbbecb:         master = new BrokerService();
1:fee7c1c:         master.setDeleteAllMessagesOnStartup(true);
1:ccbbecb:         master.setBrokerName("Master");
1:ccbbecb:         master.setDataDirectoryFile(testDataDir);
1:ccbbecb: 
1:ccbbecb:         masterPersistenceAdapter.setDirectory(kahaDataDir);
1:ccbbecb:         masterPersistenceAdapter.setLockKeepAlivePeriod(500);
1:ccbbecb: 
1:5e36f65:         // ensure broker creates the file
1:5e36f65:         File lockFile = new File(kahaDataDir, "lock");
1:5e36f65:         if (lockFile.exists()) {
1:5e36f65:             lockFile.delete();
1:5e36f65:         }
1:5e36f65: 
1:ccbbecb:         master.setPersistenceAdapter(masterPersistenceAdapter);
1:ccbbecb:         master.start();
1:ccbbecb:         master.waitUntilStarted();
2:ccbbecb:     }
1:ccbbecb: 
1:ccbbecb:     @After
1:ccbbecb:     public void stopBrokerJustInCase() throws Exception {
1:ccbbecb:         if (master != null) {
1:ccbbecb:             master.stop();
1:fee7c1c:             master.waitUntilStopped();
1:ccbbecb:         }
1:ccbbecb:     }
1:ccbbecb: 
1:ccbbecb:     /**
1:ccbbecb:      * Deletes the lock file and makes sure that the broken stops.
1:ccbbecb:      * @throws Exception
1:ccbbecb:      */
1:ccbbecb:     @Test
1:ccbbecb:     public void testLockFileDelete() throws Exception {
1:ccbbecb:         assertTrue(master.isStarted());
1:ccbbecb: 
1:ccbbecb:         //Delete the lock file
1:ccbbecb:         File lockFile = new File(kahaDataDir, "lock");
1:ccbbecb: 
1:ccbbecb:         if(lockFile.exists()) {
1:ccbbecb:             lockFile.delete();
1:ccbbecb:         }
1:ccbbecb: 
1:ccbbecb:         assertTrue("Master stops on lock file delete", Wait.waitFor(new Wait.Condition() {
1:ccbbecb:             @Override
1:ccbbecb:             public boolean isSatisified() throws Exception {
1:ccbbecb:                 return master.isStopped();
1:ccbbecb:             }
1:ccbbecb:         }));
1:ccbbecb:     }
1:ccbbecb: 
1:ccbbecb:     /**
1:ccbbecb:      * Modifies the lock file so that the last modified date is not the same when the broker obtained the lock.
1:ccbbecb:      * This should force the broker to stop.
1:ccbbecb:      * @throws Exception
1:ccbbecb:      */
1:ccbbecb:     @Test
1:ccbbecb:     public void testModifyLockFile() throws Exception {
1:ccbbecb:         assertTrue(master.isStarted());
1:ccbbecb: 
1:fee7c1c:         final File lockFile = new File(kahaDataDir, "lock");
1:fee7c1c:         assertTrue("lock file exists via modification time", Wait.waitFor(new Wait.Condition() {
1:fee7c1c:             @Override
1:fee7c1c:             public boolean isSatisified() throws Exception {
1:5e36f65:                 LOG.info("Lock file " + lockFile.getAbsolutePath() + ", last mod at: " + new Date(lockFile.lastModified()));
1:fee7c1c:                 return lockFile.lastModified() > 0;
1:fee7c1c:             }
1:fee7c1c:         }));
1:fee7c1c: 
1:5e36f65:         // ensure modification will be seen, second granularity on some nix
1:5e36f65:         TimeUnit.SECONDS.sleep(2);
1:fee7c1c:         RandomAccessFile file = new RandomAccessFile(lockFile, "rw");
1:ccbbecb:         file.write(4);
1:fee7c1c:         file.getChannel().force(true);
1:ccbbecb:         file.close();
1:ccbbecb: 
1:ccbbecb:         assertTrue("Master stops on lock file modification", Wait.waitFor(new Wait.Condition() {
1:ccbbecb:             @Override
1:ccbbecb:             public boolean isSatisified() throws Exception {
1:ccbbecb:                 return master.isStopped();
1:ccbbecb:             }
1:fee7c1c:         }, 10000));
1:ccbbecb: 
1:fee7c1c:     }
1:ccbbecb: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5e36f65
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import java.util.Date;
1:     static final Logger LOG = LoggerFactory.getLogger(KahaDBDeleteLockTest.class);
/////////////////////////////////////////////////////////////////////////
1:         // ensure broker creates the file
1:         File lockFile = new File(kahaDataDir, "lock");
1:         if (lockFile.exists()) {
1:             lockFile.delete();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Lock file " + lockFile.getAbsolutePath() + ", last mod at: " + new Date(lockFile.lastModified()));
1:         // ensure modification will be seen, second granularity on some nix
1:         TimeUnit.SECONDS.sleep(2);
commit:fee7c1c
/////////////////////////////////////////////////////////////////////////
1:         master.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
1:             master.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
1:         final File lockFile = new File(kahaDataDir, "lock");
1:         assertTrue("lock file exists via modification time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return lockFile.lastModified() > 0;
1:             }
1:         }));
1: 
0:         TimeUnit.MILLISECONDS.sleep(10);
1:         RandomAccessFile file = new RandomAccessFile(lockFile, "rw");
1:         file.getChannel().force(true);
/////////////////////////////////////////////////////////////////////////
1:         }, 10000));
1: }
commit:ccbbecb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.io.File;
1: import java.io.RandomAccessFile;
1: import java.util.concurrent.TimeUnit;
1: 
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class KahaDBDeleteLockTest {
1: 
1:     protected BrokerService master;
1: 
1:     protected KahaDBPersistenceAdapter masterPersistenceAdapter = new KahaDBPersistenceAdapter();
1: 
1:     private final File testDataDir = new File("target/activemq-data/KahaDBDeleteLockTest");
1:     private final File kahaDataDir = new File(testDataDir, "kahadb");
1: 
1:     @Before
1:     public void createMaster() throws Exception{
1:         master = new BrokerService();
1:         master.setBrokerName("Master");
1:         master.setDataDirectoryFile(testDataDir);
1: 
1:         masterPersistenceAdapter.setDirectory(kahaDataDir);
1:         masterPersistenceAdapter.setLockKeepAlivePeriod(500);
1: 
1:         master.setPersistenceAdapter(masterPersistenceAdapter);
1:         master.start();
1:         master.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBrokerJustInCase() throws Exception {
1:         if (master != null) {
1:             master.stop();
1:         }
1:     }
1: 
1:     /**
1:      * Deletes the lock file and makes sure that the broken stops.
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testLockFileDelete() throws Exception {
1:         assertTrue(master.isStarted());
1: 
1:         //Delete the lock file
1:         File lockFile = new File(kahaDataDir, "lock");
1: 
1:         if(lockFile.exists()) {
1:             lockFile.delete();
1:         }
1: 
1:         assertTrue("Master stops on lock file delete", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return master.isStopped();
1:             }
1:         }));
1:     }
1: 
1:     /**
1:      * Modifies the lock file so that the last modified date is not the same when the broker obtained the lock.
1:      * This should force the broker to stop.
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testModifyLockFile() throws Exception {
1:         assertTrue(master.isStarted());
1: 
0:         // ensure modification will be seen, milisecond granularity
0:         TimeUnit.MILLISECONDS.sleep(1);
0:         RandomAccessFile file = new RandomAccessFile(new File(kahaDataDir, "lock"), "rw");
1:         file.write(4);
1:         file.close();
1: 
1:         assertTrue("Master stops on lock file modification", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return master.isStopped();
1:             }
0:         }, 5000));
1: 
1:     }
1: }
============================================================================