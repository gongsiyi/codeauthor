1:8c70e4a: /**
1:8c70e4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c70e4a:  * contributor license agreements.  See the NOTICE file distributed with
1:8c70e4a:  * this work for additional information regarding copyright ownership.
1:8c70e4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c70e4a:  * (the "License"); you may not use this file except in compliance with
1:8c70e4a:  * the License.  You may obtain a copy of the License at
2:8c70e4a:  *
1:8c70e4a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8c70e4a:  *
1:8c70e4a:  * Unless required by applicable law or agreed to in writing, software
1:8c70e4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c70e4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c70e4a:  * See the License for the specific language governing permissions and
1:8c70e4a:  * limitations under the License.
1:8c70e4a:  */
1:8c70e4a: package org.apache.activemq.bugs;
1:8c70e4a: 
1:8c70e4a: import javax.jms.Connection;
1:8c70e4a: import javax.jms.ConnectionFactory;
1:8c70e4a: import javax.jms.JMSException;
1:8c70e4a: import javax.jms.MapMessage;
1:8c70e4a: import javax.jms.Session;
1:5219fa1: 
1:8c70e4a: import junit.framework.TestCase;
1:5219fa1: 
1:5219fa1: import org.apache.activemq.ActiveMQConnectionFactory;
1:5219fa1: 
1:8c70e4a: /**
1:8c70e4a:  * An AMQ-1282 Test
1:8c70e4a:  */
1:8c70e4a: public class AMQ1282 extends TestCase {
1:8c70e4a:     private ConnectionFactory factory;
1:8c70e4a:     private Connection connection;
1:8c70e4a:     private MapMessage message;
1:8c70e4a: 
1:5219fa1:     @Override
1:8c70e4a:     protected void setUp() throws Exception {
1:8c70e4a:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:8c70e4a:         connection = factory.createConnection();
1:8c70e4a:         connection.start();
1:8c70e4a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8c70e4a:         message = session.createMapMessage();
1:8c70e4a:         super.setUp();
1:8c70e4a:     }
1:8c70e4a: 
1:5219fa1:     @Override
1:8c70e4a:     protected void tearDown() throws Exception {
1:8c70e4a:         connection.close();
1:8c70e4a:         super.tearDown();
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedBooleanMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = Boolean.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             Boolean actual = message.getBoolean("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             assertEquals(expected, ex);
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedIntegerMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = Integer.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             Integer actual = message.getInt("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:5219fa1:             Class<?> aClass = expected.getClass();
1:8c70e4a:             assertTrue(aClass.isInstance(ex));
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedShortMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = Short.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             Short actual = message.getShort("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:5219fa1:             Class<?> aClass = expected.getClass();
1:8c70e4a:             assertTrue(aClass.isInstance(ex));
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedLongMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = Long.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             Long actual = message.getLong("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:5219fa1:             Class<?> aClass = expected.getClass();
1:8c70e4a:             assertTrue(aClass.isInstance(ex));
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedStringMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = String.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             String actual = message.getString("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:5219fa1:             Class<?> aClass = expected.getClass();
1:8c70e4a:             assertTrue(aClass.isInstance(ex));
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedCharMessage() throws JMSException {
1:8c70e4a:         try {
1:8c70e4a:             message.getChar("foo");
1:8c70e4a:             fail("should have thrown NullPointerException");
1:8c70e4a:         } catch (NullPointerException success) {
1:8c70e4a:             assertNotNull(success);
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedByteMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = Byte.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             Byte actual = message.getByte("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:5219fa1:             Class<?> aClass = expected.getClass();
1:8c70e4a:             assertTrue(aClass.isInstance(ex));
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedDoubleMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = Double.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             Double actual = message.getDouble("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:5219fa1:             Class<?> aClass = expected.getClass();
1:8c70e4a:             assertTrue(aClass.isInstance(ex));
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: 
1:8c70e4a:     public void testUnmappedFloatMessage() throws JMSException {
1:8c70e4a:         Object expected;
1:8c70e4a:         try {
1:8c70e4a:             expected = Float.valueOf(null);
1:8c70e4a:         } catch (Exception ex) {
1:8c70e4a:             expected = ex;
1:8c70e4a:         }
1:8c70e4a:         try {
1:8c70e4a:             Float actual = message.getFloat("foo");
1:8c70e4a:             assertEquals(expected, actual);
1:8c70e4a:         } catch (Exception ex) {
1:5219fa1:             Class<?> aClass = expected.getClass();
1:8c70e4a:             assertTrue(aClass.isInstance(ex));
1:8c70e4a:         }
1:8c70e4a:     }
1:8c70e4a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             Class<?> aClass = expected.getClass();
/////////////////////////////////////////////////////////////////////////
1:             Class<?> aClass = expected.getClass();
/////////////////////////////////////////////////////////////////////////
1:             Class<?> aClass = expected.getClass();
/////////////////////////////////////////////////////////////////////////
1:             Class<?> aClass = expected.getClass();
/////////////////////////////////////////////////////////////////////////
1:             Class<?> aClass = expected.getClass();
/////////////////////////////////////////////////////////////////////////
1:             Class<?> aClass = expected.getClass();
/////////////////////////////////////////////////////////////////////////
1:             Class<?> aClass = expected.getClass();
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:8c70e4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Session;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import junit.framework.TestCase;
1: /**
1:  * An AMQ-1282 Test
1:  * 
1:  */
1: public class AMQ1282 extends TestCase {
1:     private ConnectionFactory factory;
1:     private Connection connection;
1:     private MapMessage message;
1: 
1:     protected void setUp() throws Exception {
1:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         message = session.createMapMessage();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         connection.close();
1:         super.tearDown();
1:     }
1: 
1:     public void testUnmappedBooleanMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = Boolean.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             Boolean actual = message.getBoolean("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
1:             assertEquals(expected, ex);
1:         }
1:     }
1: 
1:     public void testUnmappedIntegerMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = Integer.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             Integer actual = message.getInt("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
0:             Class aClass = expected.getClass();
1:             assertTrue(aClass.isInstance(ex));
1:         }
1:     }
1: 
1:     public void testUnmappedShortMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = Short.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             Short actual = message.getShort("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
0:             Class aClass = expected.getClass();
1:             assertTrue(aClass.isInstance(ex));
1:         }
1:     }
1: 
1:     public void testUnmappedLongMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = Long.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             Long actual = message.getLong("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
0:             Class aClass = expected.getClass();
1:             assertTrue(aClass.isInstance(ex));
1:         }
1:     }
1: 
1:     public void testUnmappedStringMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = String.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             String actual = message.getString("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
0:             Class aClass = expected.getClass();
1:             assertTrue(aClass.isInstance(ex));
1:         }
1:     }
1: 
1:     public void testUnmappedCharMessage() throws JMSException {
1:         try {
1:             message.getChar("foo");
1:             fail("should have thrown NullPointerException");
1:         } catch (NullPointerException success) {
1:             assertNotNull(success);
1:         }
1:     }
1: 
1:     public void testUnmappedByteMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = Byte.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             Byte actual = message.getByte("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
0:             Class aClass = expected.getClass();
1:             assertTrue(aClass.isInstance(ex));
1:         }
1:     }
1: 
1:     public void testUnmappedDoubleMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = Double.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             Double actual = message.getDouble("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
0:             Class aClass = expected.getClass();
1:             assertTrue(aClass.isInstance(ex));
1:         }
1:     }
1: 
1:     public void testUnmappedFloatMessage() throws JMSException {
1:         Object expected;
1:         try {
1:             expected = Float.valueOf(null);
1:         } catch (Exception ex) {
1:             expected = ex;
1:         }
1:         try {
1:             Float actual = message.getFloat("foo");
1:             assertEquals(expected, actual);
1:         } catch (Exception ex) {
0:             Class aClass = expected.getClass();
1:             assertTrue(aClass.isInstance(ex));
1:         }
1:     }
1: }
============================================================================