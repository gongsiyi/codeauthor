1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.failover;
1:93dc39b: 
1:93dc39b: import java.io.IOException;
1:93dc39b: import java.net.URI;
1:93dc39b: 
1:93dc39b: import junit.framework.TestCase;
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:9c1a5fa: import org.apache.activemq.transport.TransportListener;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
9:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class BadConnectionTest extends TestCase {
1:74a7a8b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(BadConnectionTest.class);
1:93dc39b: 
1:d29ca2a:     protected Transport transport;
1:d29ca2a: 
1:d29ca2a:     public void testConnectingToUnavailableServer() throws Exception {
1:d29ca2a:         try {
1:84fd773:             transport.asyncRequest(new ActiveMQMessage(), null);
1:d29ca2a:             fail("This should never succeed");
1:74a7a8b:         } catch (IOException e) {
1:fc00993:             LOG.info("Caught expected exception: " + e, e);
2:d29ca2a:         }
1:d29ca2a:     }
1:74a7a8b: 
1:d29ca2a:     protected Transport createTransport() throws Exception {
1:d29ca2a:         return TransportFactory.connect(new URI("failover://(tcp://doesNotExist:1234)?useExponentialBackOff=false&maxReconnectAttempts=3&initialReconnectDelay=100"));
1:d29ca2a:     }
1:9c1a5fa: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         transport = createTransport();
1:9c1a5fa:         transport.setTransportListener(new TransportListener() {
1:9c1a5fa: 
1:9ca56a0:             public void onCommand(Object command) {
1:9c1a5fa:             }
1:9c1a5fa: 
1:9c1a5fa:             public void onException(IOException error) {
1:9c1a5fa:             }
1:9c1a5fa: 
1:9c1a5fa:             public void transportInterupted() {
1:9c1a5fa:             }
1:9c1a5fa: 
1:9c1a5fa:             public void transportResumed() {
1:9c1a5fa:             }
1:9c1a5fa:         });
1:9c1a5fa:         transport.start();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:74a7a8b:         if (transport != null) {
1:d29ca2a:             transport.stop();
1:d29ca2a:         }
1:d29ca2a:     }
1:74a7a8b: 
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(BadConnectionTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Caught expected exception: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException e) {
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (transport != null) {
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:1b9276d
/////////////////////////////////////////////////////////////////////////
0:             log.info("Caught expected exception: " + e, e);
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object command) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: import junit.framework.TestCase;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1:     
0:     protected static final Log log = LogFactory.getLog(BadConnectionTest.class);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Caught expected exception: " + e);
commit:84fd773
/////////////////////////////////////////////////////////////////////////
1:             transport.asyncRequest(new ActiveMQMessage(), null);
commit:9c1a5fa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.TransportListener;
/////////////////////////////////////////////////////////////////////////
1:         transport.setTransportListener(new TransportListener() {
1: 
0:             public void onCommand(Command command) {
1:             }
1: 
1:             public void onException(IOException error) {
1:             }
1: 
1:             public void transportInterupted() {
1:             }
1: 
1:             public void transportResumed() {
1:             }
1:         });
1:         transport.start();
/////////////////////////////////////////////////////////////////////////
1:         
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: 
0: import java.io.IOException;
0: import java.net.URI;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
1:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public class BadConnectionTest extends TestCase {
1: 
1:     protected Transport transport;
1: 
1:     public void testConnectingToUnavailableServer() throws Exception {
1:         try {
0:             transport.asyncRequest(new ActiveMQMessage());
1:             fail("This should never succeed");
1:         }
0:         catch (IOException e) {
0:             System.out.println("Caught expected exception: " + e);
0:             e.printStackTrace();
1:         }
1:     }
1:     protected Transport createTransport() throws Exception {
1:         return TransportFactory.connect(new URI("failover://(tcp://doesNotExist:1234)?useExponentialBackOff=false&maxReconnectAttempts=3&initialReconnectDelay=100"));
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         transport = createTransport();
1:     }
1: 
1:     protected void tearDown() throws Exception {
0:         if (transport != null) { 
1:             transport.stop();
1:         }
1:     }
1:     
1:     
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(BadConnectionTest.class);
============================================================================