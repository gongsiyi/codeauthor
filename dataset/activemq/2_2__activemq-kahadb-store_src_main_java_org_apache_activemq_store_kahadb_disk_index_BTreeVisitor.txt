1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  * http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.index;
2:d761e80: 
1:456a2ba: import java.util.List;
1:d761e80: 
1:456a2ba: /**
1:456a2ba:  * Interface used to selectively visit the entries in a BTree.
1:456a2ba:  * 
1:456a2ba:  * @param <Key>
1:456a2ba:  * @param <Value>
1:456a2ba:  */
1:456a2ba: public interface BTreeVisitor<Key,Value> {
1:76d3b46: 
1:456a2ba:     /**
1:456a2ba:      * Do you want to visit the range of BTree entries between the first and and second key?
1:456a2ba:      * 
1:456a2ba:      * @param first if null indicates the range of values before the second key. 
1:456a2ba:      * @param second if null indicates the range of values after the first key.
1:456a2ba:      * @return true if you want to visit the values between the first and second key.
1:456a2ba:      */
1:456a2ba:     boolean isInterestedInKeysBetween(Key first, Key second);
1:76d3b46: 
1:456a2ba:     /**
1:456a2ba:      * The keys and values of a BTree leaf node.
1:456a2ba:      * 
1:456a2ba:      * @param keys
1:456a2ba:      * @param values
1:456a2ba:      */
1:456a2ba:     void visit(List<Key> keys, List<Value> values);
1:d761e80: 
1:76d3b46:     public interface Predicate<Key> {
1:76d3b46:         boolean isInterestedInKeysBetween(Key first, Key second);
1:76d3b46:         boolean isInterestedInKey(Key key);
1:76d3b46:     }
1:fbc5eb5: 
1:76d3b46:     abstract class PredicateVisitor<Key, Value> implements BTreeVisitor<Key, Value>, Predicate<Key> {
1:fbc5eb5: 		public void visit(List<Key> keys, List<Value> values) {
1:fbc5eb5: 			for( int i=0; i < keys.size(); i++) {
1:fbc5eb5: 				Key key = keys.get(i);
1:76d3b46: 				if( isInterestedInKey(key) ) {
1:fbc5eb5: 					matched(key, values.get(i));
14:d761e80: 				}
1:d761e80: 			}
1:d761e80: 		}
1:d761e80: 
1:76d3b46: 		protected void matched(Key key, Value value) {
1:76d3b46:         }
1:d761e80:     }
1:76d3b46: 
1:76d3b46:     class OrVisitor<Key, Value> extends PredicateVisitor<Key, Value> {
1:76d3b46:         private final List<Predicate<Key>> conditions;
1:76d3b46: 
1:76d3b46:         public OrVisitor(List<Predicate<Key>> conditions) {
1:76d3b46:             this.conditions = conditions;
1:76d3b46:         }
1:76d3b46: 
1:76d3b46: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:76d3b46:             for (Predicate<Key> condition : conditions) {
1:76d3b46:                 if( condition.isInterestedInKeysBetween(first, second) ) {
1:76d3b46:                     return true;
1:76d3b46:                 }
1:76d3b46:             }
1:76d3b46:             return false;
1:76d3b46: 		}
1:76d3b46: 
1:76d3b46:         public boolean isInterestedInKey(Key key) {
1:76d3b46:             for (Predicate<Key> condition : conditions) {
1:76d3b46:                 if( condition.isInterestedInKey(key) ) {
1:76d3b46:                     return true;
1:76d3b46:                 }
1:76d3b46:             }
1:76d3b46:             return false;
1:76d3b46:         }
1:76d3b46: 
1:76d3b46:         @Override
1:76d3b46:         public String toString() {
1:76d3b46:             StringBuilder sb = new StringBuilder();
1:76d3b46:             boolean first=true;
1:76d3b46:             for (Predicate<Key> condition : conditions) {
1:76d3b46:                 if( !first ) {
1:76d3b46:                     sb.append(" OR ");
1:76d3b46:                 }
1:76d3b46:                 first=false;
1:76d3b46:                 sb.append("(");
1:76d3b46:                 sb.append(condition);
1:76d3b46:                 sb.append(")");
1:76d3b46:             }
1:76d3b46:             return sb.toString();
1:76d3b46:         }
1:76d3b46:     }
1:76d3b46: 
1:76d3b46:     class AndVisitor<Key, Value> extends PredicateVisitor<Key, Value> {
1:76d3b46:         private final List<Predicate<Key>> conditions;
1:76d3b46: 
1:76d3b46:         public AndVisitor(List<Predicate<Key>> conditions) {
1:76d3b46:             this.conditions = conditions;
1:76d3b46:         }
1:76d3b46: 
1:76d3b46: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:76d3b46:             for (Predicate<Key> condition : conditions) {
1:76d3b46:                 if( !condition.isInterestedInKeysBetween(first, second) ) {
1:76d3b46:                     return false;
1:76d3b46:                 }
1:76d3b46:             }
1:76d3b46:             return true;
1:76d3b46: 		}
1:76d3b46: 
1:76d3b46:         public boolean isInterestedInKey(Key key) {
1:76d3b46:             for (Predicate<Key> condition : conditions) {
1:76d3b46:                 if( !condition.isInterestedInKey(key) ) {
1:76d3b46:                     return false;
1:76d3b46:                 }
1:76d3b46:             }
1:76d3b46:             return true;
1:76d3b46:         }
1:76d3b46: 
1:76d3b46:         @Override
1:76d3b46:         public String toString() {
1:76d3b46:             StringBuilder sb = new StringBuilder();
1:76d3b46:             boolean first=true;
1:76d3b46:             for (Predicate<Key> condition : conditions) {
1:76d3b46:                 if( !first ) {
1:76d3b46:                     sb.append(" AND ");
1:76d3b46:                 }
1:76d3b46:                 first=false;
1:76d3b46:                 sb.append("(");
1:76d3b46:                 sb.append(condition);
1:76d3b46:                 sb.append(")");
1:76d3b46:             }
1:76d3b46:             return sb.toString();
1:76d3b46:         }
1:76d3b46:     }
1:76d3b46: 
1:76d3b46:     class BetweenVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
1:fbc5eb5: 		private final Key first;
1:fbc5eb5:         private final Key last;
1:d761e80: 
1:fbc5eb5:         public BetweenVisitor(Key first, Key last) {
1:fbc5eb5: 			this.first = first;
1:fbc5eb5:             this.last = last;
1:fbc5eb5:         }
1:fbc5eb5: 
1:fbc5eb5: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:fbc5eb5:         	return (second==null || second.compareTo(this.first)>=0)
1:fbc5eb5:                    && (first==null || first.compareTo(last)<0);
1:fbc5eb5: 		}
1:fbc5eb5: 
1:76d3b46:         public boolean isInterestedInKey(Key key) {
1:76d3b46:             return key.compareTo(first) >=0 && key.compareTo(last) <0;
1:76d3b46:         }
1:fbc5eb5: 
1:76d3b46:         @Override
1:76d3b46:         public String toString() {
1:5db5f3e:             return first+" >= key < "+last;
1:76d3b46:         }
1:fbc5eb5:     }
1:fbc5eb5: 
1:76d3b46:     class GTVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
1:76d3b46: 		final private Key value;
1:76d3b46: 
1:76d3b46: 		public GTVisitor(Key value) {
1:76d3b46: 			this.value = value;
1:76d3b46: 		}
1:76d3b46: 
1:76d3b46: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:76d3b46:         	return second==null || second.compareTo(value)>0;
1:76d3b46: 		}
1:76d3b46: 
1:76d3b46:         public boolean isInterestedInKey(Key key) {
1:76d3b46:             return key.compareTo(value)>0;
1:76d3b46:         }
1:76d3b46: 
1:76d3b46:         @Override
1:76d3b46:         public String toString() {
1:76d3b46:             return "key > "+ value;
1:76d3b46:         }
1:76d3b46:     }
1:76d3b46: 
1:76d3b46:     class GTEVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
2:d761e80: 		final private Key value;
1:d761e80: 
1:d761e80: 		public GTEVisitor(Key value) {
2:d761e80: 			this.value = value;
1:fbc5eb5: 		}
1:d761e80: 
2:d761e80: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:d761e80:         	return second==null || second.compareTo(value)>=0;
1:fbc5eb5: 		}
1:d761e80: 
1:76d3b46:         public boolean isInterestedInKey(Key key) {
1:76d3b46:             return key.compareTo(value)>=0;
1:76d3b46:         }
1:d761e80: 
1:76d3b46:         @Override
1:76d3b46:         public String toString() {
1:76d3b46:             return "key >= "+ value;
1:76d3b46:         }
1:fbc5eb5:     }
1:d761e80:     
1:76d3b46:     class LTVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
1:d761e80: 		final private Key value;
1:d761e80: 
1:d761e80: 		public LTVisitor(Key value) {
1:d761e80: 			this.value = value;
1:d761e80: 		}
1:d761e80: 
1:d761e80: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:d761e80:         	return first==null || first.compareTo(value)<0;
1:d761e80: 		}
1:d761e80: 
1:76d3b46:         public boolean isInterestedInKey(Key key) {
1:76d3b46:             return key.compareTo(value)<0;
1:76d3b46:         }
1:d761e80: 
1:76d3b46:         @Override
1:76d3b46:         public String toString() {
1:76d3b46:             return "key < "+ value;
1:76d3b46:         }
1:d761e80:     }
1:d761e80:     
1:76d3b46:     class LTEVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
1:d761e80: 		final private Key value;
1:d761e80: 
1:d761e80: 		public LTEVisitor(Key value) {
1:d761e80: 			this.value = value;
1:d761e80: 		}
1:d761e80: 
1:d761e80: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:d761e80:         	return first==null || first.compareTo(value)<=0;
1:d761e80: 		}
1:d761e80: 
1:76d3b46:         public boolean isInterestedInKey(Key key) {
1:76d3b46:             return key.compareTo(value)<=0;
1:76d3b46:         }
1:d761e80: 
1:76d3b46:         @Override
1:76d3b46:         public String toString() {
1:76d3b46:             return "key <= "+ value;
1:76d3b46:         }
1:d761e80:     }
1:d761e80: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5db5f3e
/////////////////////////////////////////////////////////////////////////
1:             return first+" >= key < "+last;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.index;
commit:715010a
commit:76d3b46
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public interface Predicate<Key> {
1:         boolean isInterestedInKeysBetween(Key first, Key second);
1:         boolean isInterestedInKey(Key key);
1:     }
1:     abstract class PredicateVisitor<Key, Value> implements BTreeVisitor<Key, Value>, Predicate<Key> {
1: 				if( isInterestedInKey(key) ) {
1: 		protected void matched(Key key, Value value) {
1:         }
1: 
1:     class OrVisitor<Key, Value> extends PredicateVisitor<Key, Value> {
1:         private final List<Predicate<Key>> conditions;
1: 
1:         public OrVisitor(List<Predicate<Key>> conditions) {
1:             this.conditions = conditions;
1:         }
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:             for (Predicate<Key> condition : conditions) {
1:                 if( condition.isInterestedInKeysBetween(first, second) ) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1: 		}
1: 
1:         public boolean isInterestedInKey(Key key) {
1:             for (Predicate<Key> condition : conditions) {
1:                 if( condition.isInterestedInKey(key) ) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         }
1: 
1:         @Override
1:         public String toString() {
1:             StringBuilder sb = new StringBuilder();
1:             boolean first=true;
1:             for (Predicate<Key> condition : conditions) {
1:                 if( !first ) {
1:                     sb.append(" OR ");
1:                 }
1:                 first=false;
1:                 sb.append("(");
1:                 sb.append(condition);
1:                 sb.append(")");
1:             }
1:             return sb.toString();
1:         }
1:     }
1: 
1:     class AndVisitor<Key, Value> extends PredicateVisitor<Key, Value> {
1:         private final List<Predicate<Key>> conditions;
1: 
1:         public AndVisitor(List<Predicate<Key>> conditions) {
1:             this.conditions = conditions;
1:         }
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:             for (Predicate<Key> condition : conditions) {
1:                 if( !condition.isInterestedInKeysBetween(first, second) ) {
1:                     return false;
1:                 }
1:             }
1:             return true;
1: 		}
1: 
1:         public boolean isInterestedInKey(Key key) {
1:             for (Predicate<Key> condition : conditions) {
1:                 if( !condition.isInterestedInKey(key) ) {
1:                     return false;
1:                 }
1:             }
1:             return true;
1:         }
1: 
1:         @Override
1:         public String toString() {
1:             StringBuilder sb = new StringBuilder();
1:             boolean first=true;
1:             for (Predicate<Key> condition : conditions) {
1:                 if( !first ) {
1:                     sb.append(" AND ");
1:                 }
1:                 first=false;
1:                 sb.append("(");
1:                 sb.append(condition);
1:                 sb.append(")");
1:             }
1:             return sb.toString();
1:         }
1:     }
1: 
1:     class BetweenVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
/////////////////////////////////////////////////////////////////////////
1:         public boolean isInterestedInKey(Key key) {
1:             return key.compareTo(first) >=0 && key.compareTo(last) <0;
1:         }
1:         @Override
1:         public String toString() {
0:             return first+" <= key < "+last;
1:         }
1:     class GTVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
1: 		final private Key value;
1: 
1: 		public GTVisitor(Key value) {
1: 			this.value = value;
1: 		}
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:         	return second==null || second.compareTo(value)>0;
1: 		}
1: 
1:         public boolean isInterestedInKey(Key key) {
1:             return key.compareTo(value)>0;
1:         }
1: 
1:         @Override
1:         public String toString() {
1:             return "key > "+ value;
1:         }
1:     }
1: 
1:     class GTEVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
/////////////////////////////////////////////////////////////////////////
1:         public boolean isInterestedInKey(Key key) {
1:             return key.compareTo(value)>=0;
1:         }
1:         @Override
1:         public String toString() {
1:             return "key >= "+ value;
1:         }
1:     class LTVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
/////////////////////////////////////////////////////////////////////////
1:         public boolean isInterestedInKey(Key key) {
1:             return key.compareTo(value)<0;
1:         }
1:         @Override
1:         public String toString() {
1:             return "key < "+ value;
1:         }
1:     class LTEVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> {
/////////////////////////////////////////////////////////////////////////
1:         public boolean isInterestedInKey(Key key) {
1:             return key.compareTo(value)<=0;
1:         }
1:         @Override
1:         public String toString() {
1:             return "key <= "+ value;
1:         }
commit:fbc5eb5
/////////////////////////////////////////////////////////////////////////
0:     abstract class BetweenVisitor<Key extends Comparable<Key>, Value> implements BTreeVisitor<Key, Value>{
1: 		private final Key first;
1:         private final Key last;
1: 
1:         public BetweenVisitor(Key first, Key last) {
1: 			this.first = first;
1:             this.last = last;
1:         }
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:         	return (second==null || second.compareTo(this.first)>=0)
1:                    && (first==null || first.compareTo(last)<0);
1: 		}
1: 
1: 		public void visit(List<Key> keys, List<Value> values) {
1: 			for( int i=0; i < keys.size(); i++) {
1: 				Key key = keys.get(i);
0: 				if( key.compareTo(first)>=0 && key.compareTo(last)<0 ) {
1: 					matched(key, values.get(i));
1: 				}
1: 			}
1: 		}
1: 
0: 		abstract protected void matched(Key key, Value value);
1:     }
1: 
commit:d761e80
/////////////////////////////////////////////////////////////////////////
1:     
0:     abstract class GTVisitor<Key extends Comparable<Key>, Value> implements BTreeVisitor<Key, Value>{
1: 		final private Key value;
1: 
0: 		public GTVisitor(Key value) {
1: 			this.value = value;
1: 		}
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
0:         	return second==null || second.compareTo(value)>0;
1: 		}
1: 
0: 		public void visit(List<Key> keys, List<Value> values) {
0: 			for( int i=0; i < keys.size(); i++) {
0: 				Key key = keys.get(i);
0: 				if( key.compareTo(value)>0 ) {
0: 					matched(key, values.get(i));
1: 				}
1: 			}
1: 		}
1: 
0: 		abstract protected void matched(Key key, Value value);
1:     }
1:     
0:     abstract class GTEVisitor<Key extends Comparable<Key>, Value> implements BTreeVisitor<Key, Value>{
1: 		final private Key value;
1: 
1: 		public GTEVisitor(Key value) {
1: 			this.value = value;
1: 		}
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:         	return second==null || second.compareTo(value)>=0;
1: 		}
1: 
0: 		public void visit(List<Key> keys, List<Value> values) {
0: 			for( int i=0; i < keys.size(); i++) {
0: 				Key key = keys.get(i);
0: 				if( key.compareTo(value)>=0 ) {
0: 					matched(key, values.get(i));
1: 				}
1: 			}
1: 		}
1: 
0: 		abstract protected void matched(Key key, Value value);
1:     }
1:     
0:     abstract class LTVisitor<Key extends Comparable<Key>, Value> implements BTreeVisitor<Key, Value>{
1: 		final private Key value;
1: 
1: 		public LTVisitor(Key value) {
1: 			this.value = value;
1: 		}
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:         	return first==null || first.compareTo(value)<0;
1: 		}
1: 
0: 		public void visit(List<Key> keys, List<Value> values) {
0: 			for( int i=0; i < keys.size(); i++) {
0: 				Key key = keys.get(i);
0: 				if( key.compareTo(value)<0 ) {
0: 					matched(key, values.get(i));
1: 				}
1: 			}
1: 		}
1: 
0: 		abstract protected void matched(Key key, Value value);
1:     }
1:     
0:     abstract class LTEVisitor<Key extends Comparable<Key>, Value> implements BTreeVisitor<Key, Value>{
1: 		final private Key value;
1: 
1: 		public LTEVisitor(Key value) {
1: 			this.value = value;
1: 		}
1: 
1: 		public boolean isInterestedInKeysBetween(Key first, Key second) {
1:         	return first==null || first.compareTo(value)<=0;
1: 		}
1: 
0: 		public void visit(List<Key> keys, List<Value> values) {
0: 			for( int i=0; i < keys.size(); i++) {
0: 				Key key = keys.get(i);
0: 				if( key.compareTo(value)<=0 ) {
0: 					matched(key, values.get(i));
1: 				}
1: 			}
1: 		}
1: 
0: 		abstract protected void matched(Key key, Value value);
1:     }
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.index;
0: 
1: import java.util.List;
0: 
1: /**
1:  * Interface used to selectively visit the entries in a BTree.
1:  * 
1:  * @param <Key>
1:  * @param <Value>
1:  */
1: public interface BTreeVisitor<Key,Value> {
0:     
1:     /**
1:      * Do you want to visit the range of BTree entries between the first and and second key?
1:      * 
1:      * @param first if null indicates the range of values before the second key. 
1:      * @param second if null indicates the range of values after the first key.
1:      * @return true if you want to visit the values between the first and second key.
1:      */
1:     boolean isInterestedInKeysBetween(Key first, Key second);
0:     
1:     /**
1:      * The keys and values of a BTree leaf node.
1:      * 
1:      * @param keys
1:      * @param values
1:      */
1:     void visit(List<Key> keys, List<Value> values);
0:     
0: }
============================================================================