1:5a5056e: /**
1:5a5056e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a5056e:  * contributor license agreements.  See the NOTICE file distributed with
1:5a5056e:  * this work for additional information regarding copyright ownership.
1:5a5056e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a5056e:  * (the "License"); you may not use this file except in compliance with
1:5a5056e:  * the License.  You may obtain a copy of the License at
1:5a5056e:  *
1:5a5056e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a5056e:  *
1:5a5056e:  * Unless required by applicable law or agreed to in writing, software
1:5a5056e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a5056e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a5056e:  * See the License for the specific language governing permissions and
1:5a5056e:  * limitations under the License.
1:5a5056e:  */
1:5a5056e: package org.apache.activemq.web;
3:5a5056e: 
1:5a5056e: import java.util.Enumeration;
1:5a5056e: import java.util.HashMap;
1:5a5056e: import java.util.Map;
1:c720601: import javax.jms.BytesMessage;
1:5a5056e: import javax.jms.JMSException;
1:5a5056e: import javax.jms.MapMessage;
1:5a5056e: import javax.jms.Message;
1:5a5056e: import javax.jms.ObjectMessage;
1:512ca88: import javax.jms.QueueBrowser;
1:c720601: import javax.jms.StreamMessage;
1:5a5056e: import javax.jms.TextMessage;
1:5a5056e: 
1:5a5056e: /**
1:5a5056e:  * Allow the user to browse a message on a queue by its ID
1:0bbc0ac:  * 
1:5a5056e:  * 
1:5a5056e:  */
1:5a5056e: public class MessageQuery extends QueueBrowseQuery {
1:5a5056e: 
1:5a5056e:     private String id;
1:5a5056e:     private Message message;
1:5a5056e: 
1:5a5056e:     public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
1:5a5056e:         super(brokerFacade, sessionPool);
2:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public String getId() {
1:5a5056e:         return id;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void setId(String id) {
1:5a5056e:         this.id = id;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void setMessage(Message message) {
1:5a5056e:         this.message = message;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public Message getMessage() throws JMSException {
1:5a5056e:         if (message == null) {
1:5a5056e:             if (id != null) {
1:512ca88:                 QueueBrowser tempBrowser=getBrowser();
1:512ca88:                 Enumeration iter = tempBrowser.getEnumeration();
2:5a5056e:                 while (iter.hasMoreElements()) {
1:5a5056e:                     Message item = (Message) iter.nextElement();
1:5a5056e:                     if (id.equals(item.getJMSMessageID())) {
1:5a5056e:                         message = item;
1:5a5056e:                         break;
1:5a5056e:                     }
1:5a5056e:                 }
1:512ca88:                 tempBrowser.close();
1:5a5056e:             }
1:5a5056e: 
1:5a5056e:         }
1:5a5056e:         return message;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public Object getBody() throws JMSException {
1:5a5056e:         Message message = getMessage();
1:5a5056e:         if (message instanceof TextMessage) {
1:5a5056e:             return ((TextMessage) message).getText();
1:5a5056e:         }
1:5a5056e:         if (message instanceof ObjectMessage) {
1:7b16aec:             try {
1:7b16aec:                 return ((ObjectMessage) message).getObject();
1:a7e2a44:             } catch (Exception e) {
1:7b16aec:                 //message could not be parsed, make the reason available
1:a7e2a44:                 return new String("Cannot display ObjectMessage body. Reason: " + e.getMessage());
1:7b16aec:             }
1:5a5056e:         }
1:5a5056e:         if (message instanceof MapMessage) {
1:5a5056e:             return createMapBody((MapMessage) message);
1:5a5056e:         }
1:c720601:         if (message instanceof BytesMessage) {
1:c720601:             BytesMessage msg = (BytesMessage) message;
1:c720601:             int len = (int) msg.getBodyLength();
1:c720601:             if (len > -1) {
1:c720601:                 byte[] data = new byte[len];
1:c720601:                 msg.readBytes(data);
1:c720601:                 return new String(data);
1:c720601:             } else {
1:c720601:                 return "";
1:5a5056e:             }
1:5a5056e:         }
1:c720601:         if (message instanceof StreamMessage) {
1:c720601:             return "StreamMessage is not viewable";
1:c720601:         }
1:c720601: 
1:c720601:         // unknown message type
1:c720601:         if (message != null) {
1:c720601:             return "Unknown message type [" + message.getClass().getName() + "] " + message;
1:c720601:         }
1:c720601: 
1:c720601:         return null;
1:5a5056e:     }
1:478d28f:     
1:478d28f:     public boolean isDLQ() throws Exception {
1:478d28f:     	return getQueueView().isDLQ();
1:478d28f:     }
1:5a5056e: 
1:76153ff:     public Map<String, Object> getPropertiesMap() throws JMSException {
1:76153ff:         Map<String, Object> answer = new HashMap<String, Object>();
1:76153ff:         Message aMessage = getMessage();
1:76153ff:         Enumeration iter = aMessage.getPropertyNames();
1:76153ff:         while (iter.hasMoreElements()) {
1:76153ff:             String name = (String) iter.nextElement();
1:76153ff:             Object value = aMessage.getObjectProperty(name);
1:76153ff:             if (value != null) {
1:76153ff:                 answer.put(name, value);
1:76153ff:             }
1:76153ff:         }
1:76153ff:         return answer;
1:76153ff:     }
1:76153ff: 
1:5a5056e:     protected Map<String, Object> createMapBody(MapMessage mapMessage) throws JMSException {
2:5a5056e:         Map<String, Object> answer = new HashMap<String, Object>();
1:5a5056e:         Enumeration iter = mapMessage.getMapNames();
1:5a5056e:         while (iter.hasMoreElements()) {
2:5a5056e:             String name = (String) iter.nextElement();
1:5a5056e:             Object value = mapMessage.getObject(name);
2:5a5056e:             if (value != null) {
2:5a5056e:                 answer.put(name, value);
1:5a5056e:             }
1:5a5056e:         }
2:5a5056e:         return answer;
1:5a5056e:     }
1:5a5056e: }
============================================================================
author:Petter Nordlander
-------------------------------------------------------------------------------
commit:478d28f
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isDLQ() throws Exception {
1:     	return getQueueView().isDLQ();
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a7e2a44
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
1:                 return new String("Cannot display ObjectMessage body. Reason: " + e.getMessage());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:76153ff
/////////////////////////////////////////////////////////////////////////
1:     public Map<String, Object> getPropertiesMap() throws JMSException {
1:         Map<String, Object> answer = new HashMap<String, Object>();
1:         Message aMessage = getMessage();
1:         Enumeration iter = aMessage.getPropertyNames();
1:         while (iter.hasMoreElements()) {
1:             String name = (String) iter.nextElement();
1:             Object value = aMessage.getObjectProperty(name);
1:             if (value != null) {
1:                 answer.put(name, value);
1:             }
1:         }
1:         return answer;
1:     }
1: 
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:c720601
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
1: import javax.jms.StreamMessage;
/////////////////////////////////////////////////////////////////////////
1:         if (message instanceof BytesMessage) {
1:             BytesMessage msg = (BytesMessage) message;
1:             int len = (int) msg.getBodyLength();
1:             if (len > -1) {
1:                 byte[] data = new byte[len];
1:                 msg.readBytes(data);
1:                 return new String(data);
1:             } else {
1:                 return "";
1:         if (message instanceof StreamMessage) {
1:             return "StreamMessage is not viewable";
1:         }
1: 
1:         // unknown message type
1:         if (message != null) {
1:             return "Unknown message type [" + message.getClass().getName() + "] " + message;
1:         }
1: 
1:         return null;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:7b16aec
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 return ((ObjectMessage) message).getObject();
0:             } catch (JMSException e) {
1:                 //message could not be parsed, make the reason available
0:                 return e;
1:             }
author:Robert Davies
-------------------------------------------------------------------------------
commit:512ca88
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.QueueBrowser;
/////////////////////////////////////////////////////////////////////////
1:                 QueueBrowser tempBrowser=getBrowser();
1:                 Enumeration iter = tempBrowser.getEnumeration();
/////////////////////////////////////////////////////////////////////////
1:                 tempBrowser.close();
author:James Strachan
-------------------------------------------------------------------------------
commit:5a5056e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.ObjectMessage;
1: import javax.jms.TextMessage;
1: 
1: /**
1:  * Allow the user to browse a message on a queue by its ID
1:  * 
0:  * @version $Revision$
1:  */
1: public class MessageQuery extends QueueBrowseQuery {
1: 
1:     private String id;
1:     private Message message;
1: 
1:     public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
1:         super(brokerFacade, sessionPool);
1:     }
1: 
1:     public String getId() {
1:         return id;
1:     }
1: 
1:     public void setId(String id) {
1:         this.id = id;
1:     }
1: 
1:     public void setMessage(Message message) {
1:         this.message = message;
1:     }
1: 
1:     public Message getMessage() throws JMSException {
1:         if (message == null) {
1:             if (id != null) {
0:                 Enumeration iter = getBrowser().getEnumeration();
1:                 while (iter.hasMoreElements()) {
1:                     Message item = (Message) iter.nextElement();
1:                     if (id.equals(item.getJMSMessageID())) {
1:                         message = item;
1:                         break;
1:                     }
1:                 }
1:             }
1: 
1:         }
1:         return message;
1:     }
1: 
1:     public Object getBody() throws JMSException {
1:         Message message = getMessage();
1:         if (message instanceof TextMessage) {
1:             return ((TextMessage) message).getText();
1:         }
1:         if (message instanceof ObjectMessage) {
0:             return ((ObjectMessage) message).getObject();
1:         }
1:         if (message instanceof MapMessage) {
1:             return createMapBody((MapMessage) message);
1:         }
0:         return null;
1:     }
1: 
0:     public Map<String, Object> getPropertiesMap() throws JMSException {
1:         Map<String, Object> answer = new HashMap<String, Object>();
0:         Message aMessage = getMessage();
0:         Enumeration iter = aMessage.getPropertyNames();
1:         while (iter.hasMoreElements()) {
1:             String name = (String) iter.nextElement();
0:             Object value = aMessage.getObjectProperty(name);
1:             if (value != null) {
1:                 answer.put(name, value);
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     protected Map<String, Object> createMapBody(MapMessage mapMessage) throws JMSException {
1:         Map<String, Object> answer = new HashMap<String, Object>();
1:         Enumeration iter = mapMessage.getMapNames();
1:         while (iter.hasMoreElements()) {
1:             String name = (String) iter.nextElement();
1:             Object value = mapMessage.getObject(name);
1:             if (value != null) {
1:                 answer.put(name, value);
1:             }
1:         }
1:         return answer;
1:     }
1: }
============================================================================