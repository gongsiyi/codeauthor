1:43982af: /**
1:43982af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43982af:  * contributor license agreements.  See the NOTICE file distributed with
1:43982af:  * this work for additional information regarding copyright ownership.
1:43982af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43982af:  * (the "License"); you may not use this file except in compliance with
1:43982af:  * the License.  You may obtain a copy of the License at
1:43982af:  *
1:43982af:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43982af:  *
1:43982af:  * Unless required by applicable law or agreed to in writing, software
1:43982af:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43982af:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43982af:  * See the License for the specific language governing permissions and
1:43982af:  * limitations under the License.
1:43982af:  */
1:a321204: package org.apache.activemq.usecases;
28:a321204: 
1:a321204: import java.util.HashMap;
1:a321204: import java.util.HashSet;
1:a321204: import java.util.Set;
1:a321204: import java.util.concurrent.CountDownLatch;
1:a321204: 
1:a321204: import javax.jms.Connection;
1:a321204: import javax.jms.Destination;
1:a321204: import javax.jms.Message;
1:a321204: import javax.jms.MessageConsumer;
1:a321204: import javax.jms.MessageProducer;
1:a321204: import javax.jms.Session;
1:a321204: 
1:a321204: import junit.framework.Test;
1:a321204: 
1:a321204: import org.apache.activemq.ActiveMQConnectionFactory;
1:a321204: import org.apache.activemq.JmsTestSupport;
1:a321204: import org.apache.activemq.broker.BrokerService;
1:a321204: import org.apache.activemq.broker.TransportConnector;
1:a321204: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a321204: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a321204: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a321204: 
1:a321204: public class MessageGroupDelayedTest extends JmsTestSupport {
1:4743a20:     public static final Logger log = LoggerFactory.getLogger(MessageGroupDelayedTest.class);
1:4743a20:     protected Connection connection;
1:4743a20:     protected Session session;
1:4743a20:     protected MessageProducer producer;
1:4743a20:     protected Destination destination;
1:a321204: 
1:4743a20:     public int consumersBeforeDispatchStarts;
1:4743a20:     public int timeBeforeDispatchStarts;
1:a321204: 
1:4743a20:     BrokerService broker;
1:4743a20:     protected TransportConnector connector;
1:a321204: 
1:4743a20:     protected HashMap<String, Integer> messageCount = new HashMap<String, Integer>();
1:4743a20:     protected HashMap<String, Set<String>> messageGroups = new HashMap<String, Set<String>>();
1:a321204: 
1:4743a20:     public static Test suite() {
1:4743a20:         return suite(MessageGroupDelayedTest.class);
16:a321204:     }
1:a321204: 
1:4743a20:     public static void main(String[] args) {
1:4743a20:         junit.textui.TestRunner.run(suite());
1:a321204:     }
1:4743a20: 
1:4743a20:     @Override
1:4743a20:     public void setUp() throws Exception {
1:4743a20:         broker = createBroker();
1:4743a20:         broker.start();
1:4743a20:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=1");
1:4743a20:         connection = connFactory.createConnection();
1:4743a20:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:4743a20:         destination = new ActiveMQQueue("test-queue2");
1:4743a20:         producer = session.createProducer(destination);
1:4743a20:         connection.start();
1:a321204:     }
1:a321204: 
1:4743a20:     @Override
1:4743a20:     protected BrokerService createBroker() throws Exception {
1:4743a20:         BrokerService service = new BrokerService();
1:4743a20:         service.setPersistent(false);
1:4743a20:         service.setUseJmx(false);
1:4743a20: 
1:4743a20:         // Setup a destination policy where it takes only 1 message at a time.
1:4743a20:         PolicyMap policyMap = new PolicyMap();
1:4743a20:         PolicyEntry policy = new PolicyEntry();
1:4743a20:         log.info("testing with consumersBeforeDispatchStarts=" + consumersBeforeDispatchStarts + " and timeBeforeDispatchStarts=" + timeBeforeDispatchStarts);
1:4743a20:         policy.setConsumersBeforeDispatchStarts(consumersBeforeDispatchStarts);
1:4743a20:         policy.setTimeBeforeDispatchStarts(timeBeforeDispatchStarts);
1:4743a20:         policyMap.setDefaultEntry(policy);
1:4743a20:         service.setDestinationPolicy(policyMap);
1:4743a20: 
1:4743a20:         connector = service.addConnector("tcp://localhost:0");
1:4743a20:         return service;
1:a321204:     }
1:4743a20: 
1:4743a20:     @Override
1:4743a20:     public void tearDown() throws Exception {
1:4743a20:         producer.close();
1:4743a20:         session.close();
1:4743a20:         connection.close();
1:4743a20:         broker.stop();
1:a321204:     }
1:a321204: 
1:4743a20:     public void initCombosForTestDelayedDirectConnectionListener() {
1:4743a20:         addCombinationValues("consumersBeforeDispatchStarts", new Object[] { 0, 3, 5 });
1:4743a20:         addCombinationValues("timeBeforeDispatchStarts", new Object[] { 0, 100 });
1:4743a20:     }
1:a321204: 
1:4743a20:     public void testDelayedDirectConnectionListener() throws Exception {
1:a321204: 
1:4743a20:         for (int i = 0; i < 10; i++) {
1:4743a20:             Message msga = session.createTextMessage("hello a");
1:4743a20:             msga.setStringProperty("JMSXGroupID", "A");
1:4743a20:             producer.send(msga);
1:4743a20:             Message msgb = session.createTextMessage("hello b");
1:4743a20:             msgb.setStringProperty("JMSXGroupID", "B");
1:4743a20:             producer.send(msgb);
1:4743a20:             Message msgc = session.createTextMessage("hello c");
1:4743a20:             msgc.setStringProperty("JMSXGroupID", "C");
1:4743a20:             producer.send(msgc);
1:a321204:         }
1:4743a20:         log.info("30 messages sent to group A/B/C");
1:4743a20: 
1:4743a20:         int[] counters = { 10, 10, 10 };
1:4743a20: 
1:4743a20:         CountDownLatch startSignal = new CountDownLatch(1);
1:4743a20:         CountDownLatch doneSignal = new CountDownLatch(1);
1:4743a20: 
1:4743a20:         messageCount.put("worker1", 0);
1:4743a20:         messageGroups.put("worker1", new HashSet<String>());
1:4743a20:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups);
1:4743a20:         messageCount.put("worker2", 0);
1:4743a20:         messageGroups.put("worker2", new HashSet<String>());
1:4743a20:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups);
1:4743a20:         messageCount.put("worker3", 0);
1:4743a20:         messageGroups.put("worker3", new HashSet<String>());
1:4743a20:         Worker worker3 = new Worker(connection, destination, "worker3", startSignal, doneSignal, counters, messageCount, messageGroups);
1:4743a20: 
1:4743a20:         new Thread(worker1).start();
1:4743a20:         new Thread(worker2).start();
1:4743a20:         new Thread(worker3).start();
1:4743a20: 
1:4743a20:         startSignal.countDown();
1:4743a20:         doneSignal.await();
1:4743a20: 
1:4743a20:         // check results
1:4743a20:         if (consumersBeforeDispatchStarts == 0 && timeBeforeDispatchStarts == 0) {
1:4743a20:             log.info("Ignoring results because both parameters are 0");
1:4743a20:             return;
1:4743a20:         }
1:4743a20: 
1:4743a20:         for (String worker : messageCount.keySet()) {
1:4743a20:             log.info("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker));
1:4743a20:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker), 10, messageCount
1:4743a20:                 .get(worker).intValue());
1:4743a20:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker), 1, messageGroups
1:4743a20:                 .get(worker).size());
1:4743a20:         }
1:4743a20: 
1:a321204:     }
1:4743a20: 
1:4743a20:     private static final class Worker implements Runnable {
1:4743a20:         private Connection connection = null;
1:4743a20:         private Destination queueName = null;
1:4743a20:         private String workerName = null;
1:4743a20:         private CountDownLatch startSignal = null;
1:4743a20:         private CountDownLatch doneSignal = null;
1:4743a20:         private int[] counters = null;
1:4743a20:         private final HashMap<String, Integer> messageCount;
1:4743a20:         private final HashMap<String, Set<String>> messageGroups;
1:4743a20: 
1:4743a20:         private Worker(Connection connection, Destination queueName, String workerName, CountDownLatch startSignal, CountDownLatch doneSignal, int[] counters,
1:4743a20:             HashMap<String, Integer> messageCount, HashMap<String, Set<String>> messageGroups) {
1:4743a20:             this.connection = connection;
1:4743a20:             this.queueName = queueName;
1:4743a20:             this.workerName = workerName;
1:4743a20:             this.startSignal = startSignal;
1:4743a20:             this.doneSignal = doneSignal;
1:4743a20:             this.counters = counters;
1:4743a20:             this.messageCount = messageCount;
1:4743a20:             this.messageGroups = messageGroups;
1:4743a20:         }
1:4743a20: 
1:4743a20:         private void update(String group) {
1:4743a20:             int msgCount = messageCount.get(workerName);
1:4743a20:             messageCount.put(workerName, msgCount + 1);
1:4743a20:             Set<String> groups = messageGroups.get(workerName);
1:4743a20:             groups.add(group);
1:4743a20:             messageGroups.put(workerName, groups);
1:4743a20:         }
1:4743a20: 
1:4743a20:         @Override
1:4743a20:         public void run() {
1:4743a20: 
1:4743a20:             try {
1:4743a20:                 log.info(workerName);
1:4743a20:                 startSignal.await();
1:4743a20:                 Session sess = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:4743a20:                 MessageConsumer consumer = sess.createConsumer(queueName);
1:4743a20: 
1:4743a20:                 while (true) {
1:4743a20:                     if (counters[0] == 0 && counters[1] == 0 && counters[2] == 0) {
1:4743a20:                         doneSignal.countDown();
1:4743a20:                         log.info(workerName + " done...");
1:4743a20:                         break;
1:4743a20:                     }
1:4743a20: 
1:4743a20:                     Message msg = consumer.receive(500);
1:4743a20:                     if (msg == null)
1:4743a20:                         continue;
1:4743a20: 
1:4743a20:                     String group = msg.getStringProperty("JMSXGroupID");
1:4743a20:                     msg.getBooleanProperty("JMSXGroupFirstForConsumer");
1:4743a20: 
1:4743a20:                     if ("A".equals(group)) {
1:4743a20:                         --counters[0];
1:4743a20:                         update(group);
1:4743a20:                         Thread.sleep(500);
1:4743a20:                     } else if ("B".equals(group)) {
1:4743a20:                         --counters[1];
1:4743a20:                         update(group);
1:4743a20:                         Thread.sleep(100);
1:4743a20:                     } else if ("C".equals(group)) {
1:4743a20:                         --counters[2];
1:4743a20:                         update(group);
1:4743a20:                         Thread.sleep(10);
1:4743a20:                     } else {
1:4743a20:                         log.warn("unknown group");
1:4743a20:                     }
1:4743a20:                     if (counters[0] != 0 || counters[1] != 0 || counters[2] != 0) {
1:4743a20:                         msg.acknowledge();
1:4743a20:                     }
1:4743a20:                 }
1:4743a20:                 consumer.close();
1:4743a20:                 sess.close();
1:4743a20:             } catch (Exception e) {
1:4743a20:                 e.printStackTrace();
1:4743a20:             }
1:4743a20:         }
1:4743a20:     }
1:a321204: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:     public static final Logger log = LoggerFactory.getLogger(MessageGroupDelayedTest.class);
1:     protected Connection connection;
1:     protected Session session;
1:     protected MessageProducer producer;
1:     protected Destination destination;
1:     public int consumersBeforeDispatchStarts;
1:     public int timeBeforeDispatchStarts;
1:     BrokerService broker;
1:     protected TransportConnector connector;
1:     protected HashMap<String, Integer> messageCount = new HashMap<String, Integer>();
1:     protected HashMap<String, Set<String>> messageGroups = new HashMap<String, Set<String>>();
1:     public static Test suite() {
1:         return suite(MessageGroupDelayedTest.class);
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=1");
1:         connection = connFactory.createConnection();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         destination = new ActiveMQQueue("test-queue2");
1:         producer = session.createProducer(destination);
1:         connection.start();
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1: 
1:         // Setup a destination policy where it takes only 1 message at a time.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         log.info("testing with consumersBeforeDispatchStarts=" + consumersBeforeDispatchStarts + " and timeBeforeDispatchStarts=" + timeBeforeDispatchStarts);
1:         policy.setConsumersBeforeDispatchStarts(consumersBeforeDispatchStarts);
1:         policy.setTimeBeforeDispatchStarts(timeBeforeDispatchStarts);
1:         policyMap.setDefaultEntry(policy);
1:         service.setDestinationPolicy(policyMap);
1: 
1:         connector = service.addConnector("tcp://localhost:0");
1:         return service;
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         producer.close();
1:         session.close();
1:         connection.close();
1:         broker.stop();
1:     public void initCombosForTestDelayedDirectConnectionListener() {
1:         addCombinationValues("consumersBeforeDispatchStarts", new Object[] { 0, 3, 5 });
1:         addCombinationValues("timeBeforeDispatchStarts", new Object[] { 0, 100 });
1:     }
1:     public void testDelayedDirectConnectionListener() throws Exception {
1:         for (int i = 0; i < 10; i++) {
1:             Message msga = session.createTextMessage("hello a");
1:             msga.setStringProperty("JMSXGroupID", "A");
1:             producer.send(msga);
1:             Message msgb = session.createTextMessage("hello b");
1:             msgb.setStringProperty("JMSXGroupID", "B");
1:             producer.send(msgb);
1:             Message msgc = session.createTextMessage("hello c");
1:             msgc.setStringProperty("JMSXGroupID", "C");
1:             producer.send(msgc);
1:         log.info("30 messages sent to group A/B/C");
1: 
1:         int[] counters = { 10, 10, 10 };
1: 
1:         CountDownLatch startSignal = new CountDownLatch(1);
1:         CountDownLatch doneSignal = new CountDownLatch(1);
1: 
1:         messageCount.put("worker1", 0);
1:         messageGroups.put("worker1", new HashSet<String>());
1:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups);
1:         messageCount.put("worker2", 0);
1:         messageGroups.put("worker2", new HashSet<String>());
1:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups);
1:         messageCount.put("worker3", 0);
1:         messageGroups.put("worker3", new HashSet<String>());
1:         Worker worker3 = new Worker(connection, destination, "worker3", startSignal, doneSignal, counters, messageCount, messageGroups);
1: 
1:         new Thread(worker1).start();
1:         new Thread(worker2).start();
1:         new Thread(worker3).start();
1: 
1:         startSignal.countDown();
1:         doneSignal.await();
1: 
1:         // check results
1:         if (consumersBeforeDispatchStarts == 0 && timeBeforeDispatchStarts == 0) {
1:             log.info("Ignoring results because both parameters are 0");
1:             return;
1:         }
1: 
1:         for (String worker : messageCount.keySet()) {
1:             log.info("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker));
1:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker), 10, messageCount
1:                 .get(worker).intValue());
1:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker), 1, messageGroups
1:                 .get(worker).size());
1:         }
1: 
1: 
1:     private static final class Worker implements Runnable {
1:         private Connection connection = null;
1:         private Destination queueName = null;
1:         private String workerName = null;
1:         private CountDownLatch startSignal = null;
1:         private CountDownLatch doneSignal = null;
1:         private int[] counters = null;
1:         private final HashMap<String, Integer> messageCount;
1:         private final HashMap<String, Set<String>> messageGroups;
1: 
1:         private Worker(Connection connection, Destination queueName, String workerName, CountDownLatch startSignal, CountDownLatch doneSignal, int[] counters,
1:             HashMap<String, Integer> messageCount, HashMap<String, Set<String>> messageGroups) {
1:             this.connection = connection;
1:             this.queueName = queueName;
1:             this.workerName = workerName;
1:             this.startSignal = startSignal;
1:             this.doneSignal = doneSignal;
1:             this.counters = counters;
1:             this.messageCount = messageCount;
1:             this.messageGroups = messageGroups;
1:         }
1: 
1:         private void update(String group) {
1:             int msgCount = messageCount.get(workerName);
1:             messageCount.put(workerName, msgCount + 1);
1:             Set<String> groups = messageGroups.get(workerName);
1:             groups.add(group);
1:             messageGroups.put(workerName, groups);
1:         }
1: 
1:         @Override
1:         public void run() {
1: 
1:             try {
1:                 log.info(workerName);
1:                 startSignal.await();
1:                 Session sess = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:                 MessageConsumer consumer = sess.createConsumer(queueName);
1: 
1:                 while (true) {
1:                     if (counters[0] == 0 && counters[1] == 0 && counters[2] == 0) {
1:                         doneSignal.countDown();
1:                         log.info(workerName + " done...");
1:                         break;
1:                     }
1: 
1:                     Message msg = consumer.receive(500);
1:                     if (msg == null)
1:                         continue;
1: 
1:                     String group = msg.getStringProperty("JMSXGroupID");
1:                     msg.getBooleanProperty("JMSXGroupFirstForConsumer");
1: 
1:                     if ("A".equals(group)) {
1:                         --counters[0];
1:                         update(group);
1:                         Thread.sleep(500);
1:                     } else if ("B".equals(group)) {
1:                         --counters[1];
1:                         update(group);
1:                         Thread.sleep(100);
1:                     } else if ("C".equals(group)) {
1:                         --counters[2];
1:                         update(group);
1:                         Thread.sleep(10);
1:                     } else {
1:                         log.warn("unknown group");
1:                     }
1:                     if (counters[0] != 0 || counters[1] != 0 || counters[2] != 0) {
1:                         msg.acknowledge();
1:                     }
1:                 }
1:                 consumer.close();
1:                 sess.close();
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0:   public static final Logger log = LoggerFactory.getLogger(MessageGroupDelayedTest.class);
commit:51f68fb
/////////////////////////////////////////////////////////////////////////
0:       log.info("testing with consumersBeforeDispatchStarts=" + consumersBeforeDispatchStarts + " and timeBeforeDispatchStarts=" + timeBeforeDispatchStarts);
/////////////////////////////////////////////////////////////////////////
0: 	for(int i = 0; i < 10; i++) {
/////////////////////////////////////////////////////////////////////////
0:     	assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker)
0:     			, 10, messageCount.get(worker).intValue());
0:     	assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker)
0:     			, 1, messageGroups.get(worker).size());
commit:43982af
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:977393d
/////////////////////////////////////////////////////////////////////////
0:     ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=1");
commit:a321204
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.usecases;
1: 
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.JMSConsumerTest;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: 
1: public class MessageGroupDelayedTest extends JmsTestSupport {
0:   public static final Log log = LogFactory.getLog(MessageGroupDelayedTest.class);
0:   protected Connection connection;
0:   protected Session session;
0:   protected MessageProducer producer;
0:   protected Destination destination;
1:   
0:   public int consumersBeforeDispatchStarts;
0:   public int timeBeforeDispatchStarts;
1:   
0:   BrokerService broker;
0:   protected TransportConnector connector;
1:   
0:   protected HashMap<String, Integer> messageCount = new HashMap<String, Integer>();
0:   protected HashMap<String, Set<String>> messageGroups = new HashMap<String, Set<String>>();
1:   
0:   public static Test suite() {
0:       return suite(MessageGroupDelayedTest.class);
1:   }
1: 
0:   public static void main(String[] args) {
0:       junit.textui.TestRunner.run(suite());
1:   }
1: 
0:   public void setUp() throws Exception {
0: 	broker = createBroker();  
0: 	broker.start();
0:     ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri());
0: 	//ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");  
0:     connection = connFactory.createConnection();
0:     session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:     destination = new ActiveMQQueue("test-queue2");
0:     producer = session.createProducer(destination);
0:     connection.start();
1:   }
1:   
0:   protected BrokerService createBroker() throws Exception {
0:       BrokerService service = new BrokerService();
0:       service.setPersistent(false);
0:       service.setUseJmx(false);
1: 
0:       // Setup a destination policy where it takes only 1 message at a time.
0:       PolicyMap policyMap = new PolicyMap();
0:       PolicyEntry policy = new PolicyEntry();
0:       policy.setConsumersBeforeDispatchStarts(consumersBeforeDispatchStarts);
0:       policy.setTimeBeforeDispatchStarts(timeBeforeDispatchStarts);
0:       policyMap.setDefaultEntry(policy);
0:       service.setDestinationPolicy(policyMap);
1: 
0:       connector = service.addConnector("tcp://localhost:0");
0:       return service;
1:   }
1:   
0:   public void tearDown() throws Exception {
0:       producer.close();
0:       session.close();
0:       connection.close();
1:   }
1:   
1:   
1:   
0:   public void initCombosForTestDelayedDirectConnectionListener() {
0: 	  addCombinationValues("consumersBeforeDispatchStarts", new Object[] {0, 3, 5});
0: 	  addCombinationValues("timeBeforeDispatchStarts", new Object[] {0, 100});
1:   }
1:   
0:   public void testDelayedDirectConnectionListener() throws Exception {
1: 	  
0: 	  for(int i = 0; i < 10; i++) {
0:       Message msga = session.createTextMessage("hello a");
0:       msga.setStringProperty("JMSXGroupID", "A");
0:       producer.send(msga);
0:       Message msgb = session.createTextMessage("hello b");
0:       msgb.setStringProperty("JMSXGroupID", "B");
0:       producer.send(msgb);
0:       Message msgc = session.createTextMessage("hello c");
0:       msgc.setStringProperty("JMSXGroupID", "C");
0:       producer.send(msgc);
1:     }
0:     log.info("30 messages sent to group A/B/C");
1:    
0:     int[] counters = {10, 10, 10};
1:     
0:     CountDownLatch startSignal = new CountDownLatch(1);
0:     CountDownLatch doneSignal = new CountDownLatch(1);
1: 
0:     messageCount.put("worker1", 0);
0:     messageGroups.put("worker1", new HashSet<String>());
0:     Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups);
0:     messageCount.put("worker2", 0);
0:     messageGroups.put("worker2", new HashSet<String>());
0:     Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups);
0:     messageCount.put("worker3", 0);
0:     messageGroups.put("worker3", new HashSet<String>());
0:     Worker worker3 = new Worker(connection, destination, "worker3", startSignal, doneSignal, counters, messageCount, messageGroups);
1: 
1: 
0:     new Thread(worker1).start();
0:     new Thread(worker2).start();
0:     new Thread(worker3).start();
1: 
0:     startSignal.countDown();
0:     doneSignal.await();
1:     
0:     // check results
0:     if (consumersBeforeDispatchStarts == 0 && timeBeforeDispatchStarts == 0) {
0:     	log.info("Ignoring results because both parameters are 0");
0:     	return;
1:     }
1:     
0:     for (String worker: messageCount.keySet()) {
0:     	log.info("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker));
0:     	assertEquals(10, messageCount.get(worker).intValue());
0:     	assertEquals(1, messageGroups.get(worker).size());
1:     }
1:     
1:   }
1: 
0:   private static final class Worker implements Runnable {
0:     private Connection connection = null;
0:     private Destination queueName = null;
0:     private String workerName = null;
0:     private CountDownLatch startSignal = null;
0:     private CountDownLatch doneSignal = null;
0:     private int[] counters = null;
0:     private HashMap<String, Integer> messageCount;
0:     private HashMap<String, Set<String>>messageGroups;
1:     
1:     
0:     private Worker(Connection connection, Destination queueName, String workerName, CountDownLatch startSignal, CountDownLatch doneSignal, int[] counters, HashMap<String, Integer> messageCount, HashMap<String, Set<String>>messageGroups) {
0:       this.connection = connection;
0:       this.queueName = queueName;
0:       this.workerName = workerName;
0:       this.startSignal = startSignal;
0:       this.doneSignal = doneSignal;
0:       this.counters = counters;
0:       this.messageCount = messageCount;
0:       this.messageGroups = messageGroups;
1:     }
1:     
0:     private void update(String group) {
0:         int msgCount = messageCount.get(workerName);
0:         messageCount.put(workerName, msgCount + 1);
0:         Set<String> groups = messageGroups.get(workerName);
0:         groups.add(group);
0:         messageGroups.put(workerName, groups);
1:     }
1:     
0:     public void run() {
1: 
0:       try {
0:         log.info(workerName);
0:         startSignal.await();
0:         Session sess = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         MessageConsumer consumer = sess.createConsumer(queueName);
1: 
0:         while(true) {
0:           if(counters[0] == 0 && counters[1] == 0 && counters[2] == 0 ) {
0:             doneSignal.countDown();
0:             log.info(workerName + " done...");
0:             break;
1:           }
1:           
0:           Message msg = consumer.receive(500);
0:           if(msg == null)
0:             continue;
1: 
0:           String group = msg.getStringProperty("JMSXGroupID");
0:           boolean first = msg.getBooleanProperty("JMSXGroupFirstForConsumer");
1: 
0:           if("A".equals(group)){
0:         	--counters[0];
0:             update(group);
0:             Thread.sleep(500);
1:           }
0:           else if("B".equals(group)) {
0:         	--counters[1];
0:             update(group);
0:             Thread.sleep(100);
1:           }
0:           else if("C".equals(group)) {
0:         	--counters[2];
0:             update(group);
0:             Thread.sleep(10);
1:           }
0:           else {
0:             log.warn("unknown group");
1:           }
0:           if (counters[0] != 0 || counters[1] != 0 || counters[2] != 0 ) {
0:         	  msg.acknowledge();
1:           }
1:         }
0:         consumer.close();
0:         sess.close();
0:       } catch (Exception e) {
0:         e.printStackTrace();
1:       }
1:     }
1:   }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:f2816de
/////////////////////////////////////////////////////////////////////////
0:       broker.stop();
commit:3b08860
/////////////////////////////////////////////////////////////////////////
============================================================================