1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authz;
1:f9451e5: 
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.apache.shiro.authz.permission.WildcardPermission;
1:f9451e5: 
1:f9451e5: import java.lang.reflect.Method;
1:f9451e5: import java.util.List;
1:f9451e5: import java.util.Set;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class ActiveMQWildcardPermission extends WildcardPermission {
1:f9451e5: 
1:f9451e5:     private final boolean caseSensitive;
1:f9451e5: 
1:f9451e5:     public ActiveMQWildcardPermission(String wildcardString) {
1:f9451e5:         this(wildcardString, true);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public ActiveMQWildcardPermission(String wildcardString, boolean caseSensitive) {
1:f9451e5:         super(wildcardString, caseSensitive);
1:f9451e5:         this.caseSensitive = caseSensitive;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean implies(Permission p) {
1:f9451e5:         // By default only supports comparisons with other WildcardPermissions
1:f9451e5:         if (!(p instanceof WildcardPermission)) {
1:f9451e5:             return false;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         WildcardPermission wp = (WildcardPermission) p;
1:f9451e5: 
1:f9451e5:         List<Set<String>> otherParts = getParts(wp);
1:f9451e5: 
1:f9451e5:         int i = 0;
1:f9451e5:         for (Set<String> otherPart : otherParts) {
1:f9451e5:             // If this permission has less parts than the other permission, everything after the number of parts contained
1:f9451e5:             // in this permission is automatically implied, so return true
1:f9451e5:             if (getParts().size() - 1 < i) {
1:f9451e5:                 return true;
1:f9451e5:             } else {
1:f9451e5:                 Set<String> thisPart = getParts().get(i);
1:f9451e5: 
1:f9451e5:                 for (String token : thisPart) {
1:f9451e5:                     if (token.equals(WILDCARD_TOKEN)) {
1:f9451e5:                         continue;
1:f9451e5:                     }
1:f9451e5:                     for (String otherToken : otherPart) {
1:f9451e5:                         if (!caseSensitive) {
1:f9451e5:                             otherToken = otherToken.toLowerCase();
1:f9451e5:                         }
1:f9451e5:                         if (!matches(token, otherToken)) {
1:f9451e5:                             return false;
1:f9451e5:                         }
1:f9451e5:                     }
1:f9451e5:                 }
1:f9451e5:                 i++;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         // If this permission has more parts than the other parts, only imply it if all of the other parts are wildcards
1:f9451e5:         for (; i < getParts().size(); i++) {
1:f9451e5:             Set<String> part = getParts().get(i);
1:f9451e5:             if (!part.contains(WILDCARD_TOKEN)) {
1:f9451e5:                 return false;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         return true;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Tests whether or not a string matches against a pattern.
1:f9451e5:      * The pattern may contain two special characters:<br>
1:f9451e5:      * '*' means zero or more characters<br>
1:f9451e5:      * '?' means one and only one character
1:f9451e5:      *
1:f9451e5:      * @param pattern pattern to match against.
1:f9451e5:      *                Must not be <code>null</code>.
1:f9451e5:      * @param value   string which must be matched against the pattern.
1:f9451e5:      *                Must not be <code>null</code>.
1:f9451e5:      * @return <code>true</code> if the string matches against the
1:f9451e5:      *         pattern, or <code>false</code> otherwise.
1:f9451e5:      */
1:f9451e5:     protected boolean matches(String pattern, String value) {
1:f9451e5: 
1:f9451e5:         char[] patArr = pattern.toCharArray();
1:f9451e5:         char[] valArr = value.toCharArray();
1:f9451e5:         int patIndex = 0;
1:f9451e5:         int patEndIndex = patArr.length - 1;
1:f9451e5:         int valIndex = 0;
1:f9451e5:         int valEndIndex = valArr.length - 1;
1:f9451e5:         char ch;
1:f9451e5: 
1:f9451e5:         boolean patternContainsStar = false;
1:f9451e5:         for (char patternChar : patArr) {
1:f9451e5:             if (patternChar == '*') {
1:f9451e5:                 patternContainsStar = true;
1:f9451e5:                 break;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         if (!patternContainsStar) {
1:f9451e5:             // No '*'s, so we make a shortcut
1:f9451e5:             if (patEndIndex != valEndIndex) {
1:f9451e5:                 return false; // Pattern and string do not have the same size
1:f9451e5:             }
1:f9451e5:             for (int i = 0; i <= patEndIndex; i++) {
1:f9451e5:                 ch = patArr[i];
1:f9451e5:                 if (ch != '?') {
1:f9451e5:                     if (ch != valArr[i]) {
1:f9451e5:                         return false;// Character mismatch
1:f9451e5:                     }
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:             return true; // String matches against pattern
1:f9451e5:         }
1:f9451e5: 
1:f9451e5: 
1:f9451e5:         // Process characters before first star
1:f9451e5:         while ((ch = patArr[patIndex]) != '*' && valIndex <= valEndIndex) {
1:f9451e5:             if (ch != '?') {
1:f9451e5:                 if (ch != valArr[valIndex]) {
1:f9451e5:                     return false;// Character mismatch
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:             patIndex++;
1:f9451e5:             valIndex++;
1:f9451e5:         }
1:f9451e5:         if (valIndex > valEndIndex) {
1:f9451e5:             // All characters in the value are used. Check if only '*'s remain
1:f9451e5:             // in the pattern. If so, we succeeded. Otherwise failure.
1:f9451e5:             for (int i = patIndex; i <= patEndIndex; i++) {
1:f9451e5:                 if (patArr[i] != '*') {
1:f9451e5:                     return false;
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:             return true;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         // Process characters after last star
1:f9451e5:         while ((ch = patArr[patEndIndex]) != '*' && valIndex <= valEndIndex) {
1:f9451e5:             if (ch != '?') {
1:f9451e5:                 if (ch != valArr[valEndIndex]) {
1:f9451e5:                     return false;// Character mismatch
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:             patEndIndex--;
1:f9451e5:             valEndIndex--;
1:f9451e5:         }
1:f9451e5:         if (valIndex > valEndIndex) {
1:f9451e5:             // All characters in the value are used. Check if only '*'s remain
1:f9451e5:             // in the pattern. If so, we succeeded. Otherwise failure.
1:f9451e5:             for (int i = patIndex; i <= patEndIndex; i++) {
1:f9451e5:                 if (patArr[i] != '*') {
1:f9451e5:                     return false;
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:             return true;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         // process pattern between stars. patIndex and patEndIndex always point to a '*'.
1:f9451e5:         while (patIndex != patEndIndex && valIndex <= valEndIndex) {
1:f9451e5:             int innerPatternIndex = -1;
1:f9451e5:             for (int i = patIndex + 1; i <= patEndIndex; i++) {
1:f9451e5:                 if (patArr[i] == '*') {
1:f9451e5:                     innerPatternIndex = i;
1:f9451e5:                     break;
1:f9451e5:                 }
1:f9451e5:             }
1:f9451e5:             if (innerPatternIndex == patIndex + 1) {
1:f9451e5:                 // Two stars next to each other, skip the first one.
1:f9451e5:                 patIndex++;
1:f9451e5:                 continue;
1:f9451e5:             }
1:f9451e5:             // Find the pattern between patIndex & innerPatternIndex in the value between
1:f9451e5:             // valIndex and valEndIndex
1:f9451e5:             int innerPatternLength = (innerPatternIndex - patIndex - 1);
1:f9451e5:             int innerValueLength = (valEndIndex - valIndex + 1);
1:f9451e5:             int foundIndex = -1;
1:f9451e5:             innerValueLoop:
1:f9451e5:             for (int i = 0; i <= innerValueLength - innerPatternLength; i++) {
1:f9451e5:                 for (int j = 0; j < innerPatternLength; j++) {
1:f9451e5:                     ch = patArr[patIndex + j + 1];
1:f9451e5:                     if (ch != '?') {
1:f9451e5:                         if (ch != valArr[valIndex + i + j]) {
1:f9451e5:                             continue innerValueLoop;
1:f9451e5:                         }
1:f9451e5:                     }
1:f9451e5:                 }
1:f9451e5: 
1:f9451e5:                 foundIndex = valIndex + i;
1:f9451e5:                 break;
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             if (foundIndex == -1) {
1:f9451e5:                 return false;
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             patIndex = innerPatternIndex;
1:f9451e5:             valIndex = foundIndex + innerPatternLength;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         // All characters in the string are used. Check if only '*'s are left
1:f9451e5:         // in the pattern. If so, we succeeded. Otherwise failure.
1:f9451e5:         for (int i = patIndex; i <= patEndIndex; i++) {
1:f9451e5:             if (patArr[i] != '*') {
1:f9451e5:                 return false;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         return true;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected List<Set<String>> getParts(WildcardPermission wp) {
1:f9451e5:         if (wp instanceof ActiveMQWildcardPermission) {
1:f9451e5:             return ((ActiveMQWildcardPermission) wp).getParts();
1:f9451e5:         } else {
1:f9451e5:             return getPartsByReflection(wp);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected List<Set<String>> getPartsByReflection(WildcardPermission wp) {
1:f9451e5:         try {
1:f9451e5:             return doGetPartsByReflection(wp);
1:f9451e5:         } catch (Exception e) {
1:f9451e5:             String msg = "Unable to obtain WildcardPermission instance's 'parts' value.";
1:f9451e5:             throw new IllegalStateException(msg, e);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @SuppressWarnings("unchecked")
1:f9451e5:     protected List<Set<String>> doGetPartsByReflection(WildcardPermission wp) throws Exception {
1:f9451e5:         Method getParts = WildcardPermission.class.getDeclaredMethod("getParts");
1:f9451e5:         getParts.setAccessible(true);
1:f9451e5:         return (List<Set<String>>) getParts.invoke(wp);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public String toString() {
1:f9451e5:         StringBuilder buffer = new StringBuilder();
1:f9451e5:         for (Set<String> part : getParts()) {
1:f9451e5:             if (buffer.length() > 0) {
1:f9451e5:                 buffer.append(":");
1:f9451e5:             }
1:f9451e5:             boolean first = true;
1:f9451e5:             for (String token : part) {
1:f9451e5:                 if (!first) {
1:f9451e5:                     buffer.append(",");
1:f9451e5:                 }
1:f9451e5:                 buffer.append(token);
1:f9451e5:                 first = false;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5:         return buffer.toString();
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authz;
1: 
1: import org.apache.shiro.authz.Permission;
1: import org.apache.shiro.authz.permission.WildcardPermission;
1: 
1: import java.lang.reflect.Method;
1: import java.util.List;
1: import java.util.Set;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class ActiveMQWildcardPermission extends WildcardPermission {
1: 
1:     private final boolean caseSensitive;
1: 
1:     public ActiveMQWildcardPermission(String wildcardString) {
1:         this(wildcardString, true);
1:     }
1: 
1:     public ActiveMQWildcardPermission(String wildcardString, boolean caseSensitive) {
1:         super(wildcardString, caseSensitive);
1:         this.caseSensitive = caseSensitive;
1:     }
1: 
1:     @Override
1:     public boolean implies(Permission p) {
1:         // By default only supports comparisons with other WildcardPermissions
1:         if (!(p instanceof WildcardPermission)) {
1:             return false;
1:         }
1: 
1:         WildcardPermission wp = (WildcardPermission) p;
1: 
1:         List<Set<String>> otherParts = getParts(wp);
1: 
1:         int i = 0;
1:         for (Set<String> otherPart : otherParts) {
1:             // If this permission has less parts than the other permission, everything after the number of parts contained
1:             // in this permission is automatically implied, so return true
1:             if (getParts().size() - 1 < i) {
1:                 return true;
1:             } else {
1:                 Set<String> thisPart = getParts().get(i);
1: 
1:                 for (String token : thisPart) {
1:                     if (token.equals(WILDCARD_TOKEN)) {
1:                         continue;
1:                     }
1:                     for (String otherToken : otherPart) {
1:                         if (!caseSensitive) {
1:                             otherToken = otherToken.toLowerCase();
1:                         }
1:                         if (!matches(token, otherToken)) {
1:                             return false;
1:                         }
1:                     }
1:                 }
1:                 i++;
1:             }
1:         }
1: 
1:         // If this permission has more parts than the other parts, only imply it if all of the other parts are wildcards
1:         for (; i < getParts().size(); i++) {
1:             Set<String> part = getParts().get(i);
1:             if (!part.contains(WILDCARD_TOKEN)) {
1:                 return false;
1:             }
1:         }
1: 
1:         return true;
1:     }
1: 
1:     /**
1:      * Tests whether or not a string matches against a pattern.
1:      * The pattern may contain two special characters:<br>
1:      * '*' means zero or more characters<br>
1:      * '?' means one and only one character
1:      *
1:      * @param pattern pattern to match against.
1:      *                Must not be <code>null</code>.
1:      * @param value   string which must be matched against the pattern.
1:      *                Must not be <code>null</code>.
1:      * @return <code>true</code> if the string matches against the
1:      *         pattern, or <code>false</code> otherwise.
1:      */
1:     protected boolean matches(String pattern, String value) {
1: 
1:         char[] patArr = pattern.toCharArray();
1:         char[] valArr = value.toCharArray();
1:         int patIndex = 0;
1:         int patEndIndex = patArr.length - 1;
1:         int valIndex = 0;
1:         int valEndIndex = valArr.length - 1;
1:         char ch;
1: 
1:         boolean patternContainsStar = false;
1:         for (char patternChar : patArr) {
1:             if (patternChar == '*') {
1:                 patternContainsStar = true;
1:                 break;
1:             }
1:         }
1: 
1:         if (!patternContainsStar) {
1:             // No '*'s, so we make a shortcut
1:             if (patEndIndex != valEndIndex) {
1:                 return false; // Pattern and string do not have the same size
1:             }
1:             for (int i = 0; i <= patEndIndex; i++) {
1:                 ch = patArr[i];
1:                 if (ch != '?') {
1:                     if (ch != valArr[i]) {
1:                         return false;// Character mismatch
1:                     }
1:                 }
1:             }
1:             return true; // String matches against pattern
1:         }
1: 
1: 
1:         // Process characters before first star
1:         while ((ch = patArr[patIndex]) != '*' && valIndex <= valEndIndex) {
1:             if (ch != '?') {
1:                 if (ch != valArr[valIndex]) {
1:                     return false;// Character mismatch
1:                 }
1:             }
1:             patIndex++;
1:             valIndex++;
1:         }
1:         if (valIndex > valEndIndex) {
1:             // All characters in the value are used. Check if only '*'s remain
1:             // in the pattern. If so, we succeeded. Otherwise failure.
1:             for (int i = patIndex; i <= patEndIndex; i++) {
1:                 if (patArr[i] != '*') {
1:                     return false;
1:                 }
1:             }
1:             return true;
1:         }
1: 
1:         // Process characters after last star
1:         while ((ch = patArr[patEndIndex]) != '*' && valIndex <= valEndIndex) {
1:             if (ch != '?') {
1:                 if (ch != valArr[valEndIndex]) {
1:                     return false;// Character mismatch
1:                 }
1:             }
1:             patEndIndex--;
1:             valEndIndex--;
1:         }
1:         if (valIndex > valEndIndex) {
1:             // All characters in the value are used. Check if only '*'s remain
1:             // in the pattern. If so, we succeeded. Otherwise failure.
1:             for (int i = patIndex; i <= patEndIndex; i++) {
1:                 if (patArr[i] != '*') {
1:                     return false;
1:                 }
1:             }
1:             return true;
1:         }
1: 
1:         // process pattern between stars. patIndex and patEndIndex always point to a '*'.
1:         while (patIndex != patEndIndex && valIndex <= valEndIndex) {
1:             int innerPatternIndex = -1;
1:             for (int i = patIndex + 1; i <= patEndIndex; i++) {
1:                 if (patArr[i] == '*') {
1:                     innerPatternIndex = i;
1:                     break;
1:                 }
1:             }
1:             if (innerPatternIndex == patIndex + 1) {
1:                 // Two stars next to each other, skip the first one.
1:                 patIndex++;
1:                 continue;
1:             }
1:             // Find the pattern between patIndex & innerPatternIndex in the value between
1:             // valIndex and valEndIndex
1:             int innerPatternLength = (innerPatternIndex - patIndex - 1);
1:             int innerValueLength = (valEndIndex - valIndex + 1);
1:             int foundIndex = -1;
1:             innerValueLoop:
1:             for (int i = 0; i <= innerValueLength - innerPatternLength; i++) {
1:                 for (int j = 0; j < innerPatternLength; j++) {
1:                     ch = patArr[patIndex + j + 1];
1:                     if (ch != '?') {
1:                         if (ch != valArr[valIndex + i + j]) {
1:                             continue innerValueLoop;
1:                         }
1:                     }
1:                 }
1: 
1:                 foundIndex = valIndex + i;
1:                 break;
1:             }
1: 
1:             if (foundIndex == -1) {
1:                 return false;
1:             }
1: 
1:             patIndex = innerPatternIndex;
1:             valIndex = foundIndex + innerPatternLength;
1:         }
1: 
1:         // All characters in the string are used. Check if only '*'s are left
1:         // in the pattern. If so, we succeeded. Otherwise failure.
1:         for (int i = patIndex; i <= patEndIndex; i++) {
1:             if (patArr[i] != '*') {
1:                 return false;
1:             }
1:         }
1: 
1:         return true;
1:     }
1: 
1:     protected List<Set<String>> getParts(WildcardPermission wp) {
1:         if (wp instanceof ActiveMQWildcardPermission) {
1:             return ((ActiveMQWildcardPermission) wp).getParts();
1:         } else {
1:             return getPartsByReflection(wp);
1:         }
1:     }
1: 
1:     protected List<Set<String>> getPartsByReflection(WildcardPermission wp) {
1:         try {
1:             return doGetPartsByReflection(wp);
1:         } catch (Exception e) {
1:             String msg = "Unable to obtain WildcardPermission instance's 'parts' value.";
1:             throw new IllegalStateException(msg, e);
1:         }
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     protected List<Set<String>> doGetPartsByReflection(WildcardPermission wp) throws Exception {
1:         Method getParts = WildcardPermission.class.getDeclaredMethod("getParts");
1:         getParts.setAccessible(true);
1:         return (List<Set<String>>) getParts.invoke(wp);
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         StringBuilder buffer = new StringBuilder();
1:         for (Set<String> part : getParts()) {
1:             if (buffer.length() > 0) {
1:                 buffer.append(":");
1:             }
1:             boolean first = true;
1:             for (String token : part) {
1:                 if (!first) {
1:                     buffer.append(",");
1:                 }
1:                 buffer.append(token);
1:                 first = false;
1:             }
1:         }
1:         return buffer.toString();
1:     }
1: }
============================================================================