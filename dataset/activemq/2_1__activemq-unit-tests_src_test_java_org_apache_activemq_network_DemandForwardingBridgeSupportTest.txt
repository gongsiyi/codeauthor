1:5b1412d: /**
1:5b1412d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5b1412d:  * contributor license agreements.  See the NOTICE file distributed with
1:5b1412d:  * this work for additional information regarding copyright ownership.
1:5b1412d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5b1412d:  * (the "License"); you may not use this file except in compliance with
1:5b1412d:  * the License.  You may obtain a copy of the License at
1:5b1412d:  *
1:5b1412d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5b1412d:  *
1:5b1412d:  * Unless required by applicable law or agreed to in writing, software
1:5b1412d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5b1412d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5b1412d:  * See the License for the specific language governing permissions and
1:5b1412d:  * limitations under the License.
1:5b1412d:  */
1:5b1412d: package org.apache.activemq.network;
5:5b1412d: 
1:5b1412d: import junit.framework.Test;
1:5b1412d: import org.apache.activemq.broker.StubConnection;
1:5b1412d: import org.apache.activemq.command.*;
1:5b1412d: 
1:5b1412d: import java.io.IOException;
1:5b1412d: import java.net.ServerSocket;
1:5b1412d: import java.util.Arrays;
1:5b1412d: 
1:5b1412d: public class DemandForwardingBridgeSupportTest extends NetworkTestSupport {
1:5b1412d: 
1:5b1412d:     private DemandForwardingBridge bridge;
1:5b1412d:     private StubConnection producerConnection;
1:5b1412d:     private ProducerInfo producerInfo;
1:5b1412d:     private StubConnection consumerConnection;
1:5b1412d:     private SessionInfo consumerSessionInfo;
1:5b1412d: 
1:5b1412d: 
1:5b1412d:     public void testOverflow() throws Exception {
1:5b1412d:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:5b1412d: 
1:5b1412d:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>",
1:5b1412d:                 ActiveMQDestination.TOPIC_TYPE)));
1:5b1412d:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:5b1412d:                 "TEST", ActiveMQDestination.QUEUE_TYPE)));
1:5b1412d: 
1:5b1412d:         configureAndStartBridge(configuration);
1:5b1412d:         assertReceiveMessageOn("TEST", ActiveMQDestination.QUEUE_TYPE);
1:5b1412d:         assertReceiveNoMessageOn("OTHER.T1", ActiveMQDestination.TOPIC_TYPE);
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     private void assertReceiveMessageOn(String destinationName, byte destinationType) throws Exception,
1:5b1412d:             InterruptedException {
1:5b1412d: 
1:5b1412d:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1:5b1412d: 
1:5b1412d:         // Send the message to the local broker.
1:5b1412d:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1:5b1412d: 
1:5b1412d:         // Make sure the message was delivered via the remote.
1:5b1412d:         Message m = createConsumerAndReceiveMessage(destination);
1:5b1412d: 
1:5b1412d:         assertNotNull(m);
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     private void assertReceiveNoMessageOn(String destinationName, byte destinationType) throws Exception,
1:5b1412d:             InterruptedException {
1:5b1412d: 
1:5b1412d:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1:5b1412d: 
1:5b1412d:         // Send the message to the local broker.
1:5b1412d:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1:5b1412d: 
1:5b1412d:         // Make sure the message was delivered via the remote.
1:5b1412d:         Message m = createConsumerAndReceiveMessage(destination);
1:5b1412d:         assertNull(m);
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     private Message createConsumerAndReceiveMessage(ActiveMQDestination destination) throws Exception {
1:5b1412d:         // Now create remote consumer that should cause message to move to this
1:5b1412d:         // remote consumer.
1:5b1412d:         ConsumerInfo consumerInfo = createConsumerInfo(consumerSessionInfo, destination);
1:5b1412d:         consumerConnection.send(consumerInfo);
1:5b1412d: 
1:5b1412d:         Message m = receiveMessage(consumerConnection);
1:5b1412d:         return m;
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     private void configureAndStartBridge(NetworkBridgeConfiguration configuration) throws Exception {
1:5b1412d:         bridge = new DemandForwardingBridge(configuration, createTransport(), createRemoteTransport());
1:5b1412d:         bridge.setBrokerService(broker);
1:5b1412d:         bridge.setDynamicallyIncludedDestinations(configuration.getDynamicallyIncludedDestinations().toArray(
1:5b1412d:                 new ActiveMQDestination[configuration.getDynamicallyIncludedDestinations().size()]
1:5b1412d:         ));
1:5b1412d:         bridge.setExcludedDestinations(configuration.getExcludedDestinations().toArray(
1:5b1412d:                 new ActiveMQDestination[configuration.getExcludedDestinations().size()]
1:5b1412d:         ));
1:5b1412d:         bridge.setStaticallyIncludedDestinations(configuration.getStaticallyIncludedDestinations().toArray(
1:5b1412d:                 new ActiveMQDestination[configuration.getStaticallyIncludedDestinations().size()]
1:5b1412d:         ));
1:5b1412d:         bridge.start();
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     public NetworkBridgeConfiguration getDefaultBridgeConfiguration() {
1:5b1412d:         NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
1:5b1412d:         config.setBrokerName("local");
1:5b1412d:         config.setDispatchAsync(false);
1:5b1412d:         return config;
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     // create sockets with max waiting value accepted
1:5b1412d:     @Override
1:5b1412d:     protected String getLocalURI() {
1:5b1412d:         int port = findFreePort();
1:5b1412d:         return String.format("tcp://localhost:%d?connectionTimeout=2147483647", port);
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     @Override
1:5b1412d:     protected String getRemoteURI() {
1:5b1412d:         int port = findFreePort();
1:5b1412d:         return String.format("tcp://localhost:%d?connectionTimeout=2147483647",port);
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     private static int findFreePort() {
1:5b1412d:         ServerSocket socket = null;
1:5b1412d:         try {
1:5b1412d:             socket = new ServerSocket(0);
1:5b1412d:             socket.setReuseAddress(true);
1:5b1412d:             int port = socket.getLocalPort();
1:5b1412d:             try {
1:5b1412d:                 socket.close();
1:5b1412d:             } catch (IOException e) {
1:5b1412d:                 // Ignore IOException on close()
1:5b1412d:             }
1:5b1412d:             return port;
1:5b1412d:         } catch (IOException e) {
1:5b1412d:         } finally {
1:5b1412d:             if (socket != null) {
1:5b1412d:                 try {
1:5b1412d:                     socket.close();
1:5b1412d:                 } catch (IOException e) {
1:5b1412d:                 }
1:5b1412d:             }
1:5b1412d:         }
1:5b1412d:         throw new IllegalStateException("Could not find a free TCP/IP port to start embedded Jetty HTTP Server on");
1:5b1412d:     }
1:5b1412d: 
1:5b1412d: 
1:5b1412d:     @Override
1:5b1412d:     protected void setUp() throws Exception {
1:5b1412d:         super.setUp();
1:5b1412d: 
1:5b1412d:         producerConnection = createConnection();
1:5b1412d:         ConnectionInfo producerConnectionInfo = createConnectionInfo();
1:5b1412d:         SessionInfo producerSessionInfo = createSessionInfo(producerConnectionInfo);
1:5b1412d:         producerInfo = createProducerInfo(producerSessionInfo);
1:5b1412d:         producerConnection.send(producerConnectionInfo);
1:5b1412d:         producerConnection.send(producerSessionInfo);
1:5b1412d:         producerConnection.send(producerInfo);
1:5b1412d: 
1:5b1412d:         consumerConnection = createRemoteConnection();
1:5b1412d:         ConnectionInfo consumerConnectionInfo = createConnectionInfo();
1:5b1412d:         consumerSessionInfo = createSessionInfo(consumerConnectionInfo);
1:5b1412d:         consumerConnection.send(consumerConnectionInfo);
1:5b1412d:         consumerConnection.send(consumerSessionInfo);
1:5b1412d:     }
1:5b1412d: 
1:5b1412d: 
1:5b1412d:     @Override
1:5b1412d:     protected void tearDown() throws Exception {
1:5b1412d:         super.tearDown();
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     public static Test suite() {
1:5b1412d:         return suite(DemandForwardingBridgeSupportTest.class);
1:5b1412d:     }
1:5b1412d: 
1:5b1412d:     public static void main(String[] args) {
1:5b1412d:         junit.textui.TestRunner.run(suite());
1:5b1412d:     }
1:5b1412d: 
1:5b1412d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:525fd29
/////////////////////////////////////////////////////////////////////////
author:giliva
-------------------------------------------------------------------------------
commit:5b1412d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import junit.framework.Test;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.*;
1: 
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: import java.util.Arrays;
1: 
1: public class DemandForwardingBridgeSupportTest extends NetworkTestSupport {
1: 
1:     private DemandForwardingBridge bridge;
1: 
1:     private StubConnection producerConnection;
1: 
1:     private ProducerInfo producerInfo;
1: 
1:     private StubConnection consumerConnection;
1: 
1:     private SessionInfo consumerSessionInfo;
1: 
1: 
1:     public void testOverflow() throws Exception {
1:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1: 
1:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>",
1:                 ActiveMQDestination.TOPIC_TYPE)));
1:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:                 "TEST", ActiveMQDestination.QUEUE_TYPE)));
1: 
1:         configureAndStartBridge(configuration);
1:         assertReceiveMessageOn("TEST", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveNoMessageOn("OTHER.T1", ActiveMQDestination.TOPIC_TYPE);
1:     }
1: 
1:     private void assertReceiveMessageOn(String destinationName, byte destinationType) throws Exception,
1:             InterruptedException {
1: 
1:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1: 
1:         // Send the message to the local broker.
1:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1: 
1:         // Make sure the message was delivered via the remote.
1:         Message m = createConsumerAndReceiveMessage(destination);
1: 
1:         assertNotNull(m);
1:     }
1: 
1:     private void assertReceiveNoMessageOn(String destinationName, byte destinationType) throws Exception,
1:             InterruptedException {
1: 
1:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1: 
1:         // Send the message to the local broker.
1:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1: 
1:         // Make sure the message was delivered via the remote.
1:         Message m = createConsumerAndReceiveMessage(destination);
1:         assertNull(m);
1:     }
1: 
1:     private Message createConsumerAndReceiveMessage(ActiveMQDestination destination) throws Exception {
1:         // Now create remote consumer that should cause message to move to this
1:         // remote consumer.
1:         ConsumerInfo consumerInfo = createConsumerInfo(consumerSessionInfo, destination);
1:         consumerConnection.send(consumerInfo);
1: 
1:         Message m = receiveMessage(consumerConnection);
1:         return m;
1:     }
1: 
1:     private void configureAndStartBridge(NetworkBridgeConfiguration configuration) throws Exception {
1:         bridge = new DemandForwardingBridge(configuration, createTransport(), createRemoteTransport());
1:         bridge.setBrokerService(broker);
1:         bridge.setDynamicallyIncludedDestinations(configuration.getDynamicallyIncludedDestinations().toArray(
1:                 new ActiveMQDestination[configuration.getDynamicallyIncludedDestinations().size()]
1:         ));
1:         bridge.setExcludedDestinations(configuration.getExcludedDestinations().toArray(
1:                 new ActiveMQDestination[configuration.getExcludedDestinations().size()]
1:         ));
1:         bridge.setStaticallyIncludedDestinations(configuration.getStaticallyIncludedDestinations().toArray(
1:                 new ActiveMQDestination[configuration.getStaticallyIncludedDestinations().size()]
1:         ));
1:         bridge.start();
1:     }
1: 
1:     public NetworkBridgeConfiguration getDefaultBridgeConfiguration() {
1:         NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
1:         config.setBrokerName("local");
1:         config.setDispatchAsync(false);
1:         return config;
1:     }
1: 
1:     // create sockets with max waiting value accepted
1:     @Override
1:     protected String getLocalURI() {
1:         int port = findFreePort();
1:         return String.format("tcp://localhost:%d?connectionTimeout=2147483647", port);
1:     }
1: 
1:     @Override
1:     protected String getRemoteURI() {
1:         int port = findFreePort();
1:         return String.format("tcp://localhost:%d?connectionTimeout=2147483647",port);
1:     }
1: 
1:     private static int findFreePort() {
1:         ServerSocket socket = null;
1:         try {
1:             socket = new ServerSocket(0);
1:             socket.setReuseAddress(true);
1:             int port = socket.getLocalPort();
1:             try {
1:                 socket.close();
1:             } catch (IOException e) {
1:                 // Ignore IOException on close()
1:             }
1:             return port;
1:         } catch (IOException e) {
1:         } finally {
1:             if (socket != null) {
1:                 try {
1:                     socket.close();
1:                 } catch (IOException e) {
1:                 }
1:             }
1:         }
1:         throw new IllegalStateException("Could not find a free TCP/IP port to start embedded Jetty HTTP Server on");
1:     }
1: 
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         producerConnection = createConnection();
1:         ConnectionInfo producerConnectionInfo = createConnectionInfo();
1:         SessionInfo producerSessionInfo = createSessionInfo(producerConnectionInfo);
1:         producerInfo = createProducerInfo(producerSessionInfo);
1:         producerConnection.send(producerConnectionInfo);
1:         producerConnection.send(producerSessionInfo);
1:         producerConnection.send(producerInfo);
1: 
1:         consumerConnection = createRemoteConnection();
1:         ConnectionInfo consumerConnectionInfo = createConnectionInfo();
1:         consumerSessionInfo = createSessionInfo(consumerConnectionInfo);
1:         consumerConnection.send(consumerConnectionInfo);
1:         consumerConnection.send(consumerSessionInfo);
1:     }
1: 
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     public static Test suite() {
1:         return suite(DemandForwardingBridgeSupportTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
============================================================================