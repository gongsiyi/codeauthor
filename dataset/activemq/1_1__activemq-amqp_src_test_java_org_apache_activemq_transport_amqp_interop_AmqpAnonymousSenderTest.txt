1:0050f22: /*
1:0050f22:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0050f22:  * contributor license agreements.  See the NOTICE file distributed with
1:0050f22:  * this work for additional information regarding copyright ownership.
1:0050f22:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0050f22:  * (the "License"); you may not use this file except in compliance with
1:0050f22:  * the License.  You may obtain a copy of the License at
1:0050f22:  *
1:0050f22:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0050f22:  *
1:0050f22:  * Unless required by applicable law or agreed to in writing, software
1:0050f22:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0050f22:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0050f22:  * See the License for the specific language governing permissions and
1:0050f22:  * limitations under the License.
1:0050f22:  */
1:0050f22: package org.apache.activemq.transport.amqp.interop;
1:0050f22: 
1:0050f22: import static org.junit.Assert.assertEquals;
1:0050f22: import static org.junit.Assert.assertNotNull;
1:0050f22: 
1:0050f22: import java.util.concurrent.TimeUnit;
1:0050f22: 
1:0050f22: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:0050f22: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:0050f22: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:0050f22: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:0050f22: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:0050f22: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:0050f22: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:0050f22: import org.junit.Test;
1:0050f22: 
1:0050f22: /**
1:0050f22:  * Test for support of Anonymous sender links.
1:0050f22:  */
1:0050f22: public class AmqpAnonymousSenderTest extends AmqpClientTestSupport {
1:0050f22: 
1:0050f22:     @Test(timeout = 60000)
1:0050f22:     public void testSendMessageOnAnonymousRelayLinkUsingMessageTo() throws Exception {
1:0050f22: 
1:0050f22:         AmqpClient client = createAmqpClient();
1:84cd815:         client.setTraceFrames(false);
1:84cd815: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:0050f22:         AmqpSession session = connection.createSession();
1:0050f22: 
1:0050f22:         AmqpSender sender = session.createSender();
1:0050f22: 
1:0050f22:         assertEquals(1, getProxyToBroker().getDynamicDestinationProducers().length);
1:0050f22: 
1:0050f22:         AmqpMessage message = new AmqpMessage();
1:0050f22: 
1:0050f22:         message.setAddress("queue://" + getTestName());
1:0050f22:         message.setMessageId("msg" + 1);
1:0050f22:         message.setMessageAnnotation("serialNo", 1);
1:0050f22:         message.setText("Test-Message");
1:0050f22: 
1:0050f22:         sender.send(message);
1:0050f22:         sender.close();
1:0050f22: 
1:0050f22:         LOG.info("Attempting to read message with receiver");
1:0050f22:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:0050f22:         receiver.flow(1);
1:0050f22:         AmqpMessage received = receiver.receive(10, TimeUnit.SECONDS);
1:0050f22:         assertNotNull("Should have read message", received);
1:0050f22:         assertEquals("msg1", received.getMessageId());
1:0050f22:         received.accept();
1:0050f22: 
1:0050f22:         receiver.close();
1:0050f22: 
1:0050f22:         connection.close();
1:0050f22:     }
1:0050f22: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:84cd815
/////////////////////////////////////////////////////////////////////////
1:         client.setTraceFrames(false);
1: 
commit:0050f22
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: 
1: /**
1:  * Test for support of Anonymous sender links.
1:  */
1: public class AmqpAnonymousSenderTest extends AmqpClientTestSupport {
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageOnAnonymousRelayLinkUsingMessageTo() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender();
1: 
1:         assertEquals(1, getProxyToBroker().getDynamicDestinationProducers().length);
1: 
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setAddress("queue://" + getTestName());
1:         message.setMessageId("msg" + 1);
1:         message.setMessageAnnotation("serialNo", 1);
1:         message.setText("Test-Message");
1: 
1:         sender.send(message);
1:         sender.close();
1: 
1:         LOG.info("Attempting to read message with receiver");
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(10, TimeUnit.SECONDS);
1:         assertNotNull("Should have read message", received);
1:         assertEquals("msg1", received.getMessageId());
1:         received.accept();
1: 
1:         receiver.close();
1: 
1:         connection.close();
1:     }
1: }
============================================================================