1:3b06e12: /**
1:3b06e12:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3b06e12:  * contributor license agreements.  See the NOTICE file distributed with
1:3b06e12:  * this work for additional information regarding copyright ownership.
1:3b06e12:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3b06e12:  * (the "License"); you may not use this file except in compliance with
1:3b06e12:  * the License.  You may obtain a copy of the License at
1:3b06e12:  *
1:3b06e12:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3b06e12:  *
1:3b06e12:  * Unless required by applicable law or agreed to in writing, software
1:3b06e12:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3b06e12:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3b06e12:  * See the License for the specific language governing permissions and
1:3b06e12:  * limitations under the License.
1:3b06e12:  */
1:3b06e12: package org.apache.activemq.broker.virtual;
1:3b06e12: 
1:3b06e12: import javax.jms.Connection;
1:3b06e12: import javax.jms.MessageConsumer;
1:3b06e12: import javax.jms.MessageProducer;
1:3b06e12: import javax.jms.Session;
1:3b06e12: 
1:3b06e12: import org.apache.activemq.broker.jmx.MBeanTest;
1:3b06e12: import org.apache.activemq.command.ActiveMQQueue;
1:3b06e12: import org.apache.activemq.command.ActiveMQTopic;
1:3b06e12: import org.apache.activemq.spring.ConsumerBean;
1:3b06e12: 
1:3b06e12: public class VirtualTopicsAndDurableSubsTest extends MBeanTest {
1:3b06e12: 
1:3b06e12:     private Connection connection;
1:3b06e12: 
1:3b06e12:     public void testVirtualTopicCreationAndDurableSubs() throws Exception {
1:3b06e12:         if (connection == null) {
1:3b06e12:             connection = createConnection();
1:3b06e12:         }
1:3b06e12:         connection.setClientID(getAClientID());
1:3b06e12:         connection.start();
1:3b06e12: 
1:3b06e12:         ConsumerBean messageList = new ConsumerBean();
1:3b06e12:         messageList.setVerbose(true);
1:3b06e12:         
1:3b06e12:         String queueAName = getVirtualTopicConsumerName();
1:3b06e12:         // create consumer 'cluster'
1:3b06e12:         ActiveMQQueue queue1 = new ActiveMQQueue(queueAName);
1:3b06e12:         ActiveMQQueue queue2 = new ActiveMQQueue(queueAName);
1:3b06e12: 
1:3b06e12:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3b06e12:         MessageConsumer c1 = session.createConsumer(queue1);
1:3b06e12:         MessageConsumer c2 = session.createConsumer(queue2);
1:3b06e12: 
1:3b06e12:         c1.setMessageListener(messageList);
1:3b06e12:         c2.setMessageListener(messageList);
1:3b06e12: 
1:3b06e12:         // create topic producer
1:3b06e12:         MessageProducer producer = session.createProducer(new ActiveMQTopic(getVirtualTopicName()));
1:3b06e12:         assertNotNull(producer);
1:3b06e12: 
1:3b06e12:         int total = 10;
1:3b06e12:         for (int i = 0; i < total; i++) {
1:3b06e12:             producer.send(session.createTextMessage("message: " + i));
1:3b06e12:         }
1:3b06e12:         messageList.assertMessagesArrived(total);
1:3b06e12:         
1:3b06e12:         //Add and remove durable subscriber after using VirtualTopics
1:3b06e12:         assertCreateAndDestroyDurableSubscriptions();
1:3b06e12:     }
1:3b06e12: 
1:3b06e12:     protected String getAClientID(){
1:3b06e12:     	return "VirtualTopicCreationAndDurableSubs";
1:3b06e12:     }
1:3b06e12: 
1:3b06e12:     protected String getVirtualTopicName() {
1:3b06e12:         return "VirtualTopic.TEST";
1:3b06e12:     }
1:3b06e12: 
1:3b06e12: 
1:3b06e12:     protected String getVirtualTopicConsumerName() {
1:3b06e12:         return "Consumer.A.VirtualTopic.TEST";
1:3b06e12:     }
1:3b06e12: 
1:3b06e12:     protected String getDurableSubscriberName(){
1:3b06e12:     	return "Sub1";
1:3b06e12:     }
1:3b06e12:     
1:3b06e12:     protected String getDurableSubscriberTopicName(){
1:3b06e12:     	return "simple.topic";
1:3b06e12:     }
1:3b06e12: 
1:3b06e12:     protected void tearDown() throws Exception {
1:3b06e12:         if (connection != null) {
1:3b06e12:             connection.close();
1:3b06e12:         }
1:3b06e12:         super.tearDown();
1:3b06e12:     }
1:3b06e12:     
1:3b06e12:     //Overrides test cases from MBeanTest to avoid having them run.
1:3b06e12:     public void testMBeans() throws Exception {}
1:3b06e12:     public void testMoveMessages() throws Exception {}
1:3b06e12:     public void testRetryMessages() throws Exception {}
1:3b06e12:     public void testMoveMessagesBySelector() throws Exception {}
1:3b06e12:     public void testCopyMessagesBySelector() throws Exception {}
1:3b06e12: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:3b06e12
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.jmx.MBeanTest;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
1: 
1: public class VirtualTopicsAndDurableSubsTest extends MBeanTest {
1: 
1:     private Connection connection;
1: 
1:     public void testVirtualTopicCreationAndDurableSubs() throws Exception {
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.setClientID(getAClientID());
1:         connection.start();
1: 
1:         ConsumerBean messageList = new ConsumerBean();
1:         messageList.setVerbose(true);
1:         
1:         String queueAName = getVirtualTopicConsumerName();
1:         // create consumer 'cluster'
1:         ActiveMQQueue queue1 = new ActiveMQQueue(queueAName);
1:         ActiveMQQueue queue2 = new ActiveMQQueue(queueAName);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer c1 = session.createConsumer(queue1);
1:         MessageConsumer c2 = session.createConsumer(queue2);
1: 
1:         c1.setMessageListener(messageList);
1:         c2.setMessageListener(messageList);
1: 
1:         // create topic producer
1:         MessageProducer producer = session.createProducer(new ActiveMQTopic(getVirtualTopicName()));
1:         assertNotNull(producer);
1: 
1:         int total = 10;
1:         for (int i = 0; i < total; i++) {
1:             producer.send(session.createTextMessage("message: " + i));
1:         }
1:         messageList.assertMessagesArrived(total);
1:         
1:         //Add and remove durable subscriber after using VirtualTopics
1:         assertCreateAndDestroyDurableSubscriptions();
1:     }
1: 
1:     protected String getAClientID(){
1:     	return "VirtualTopicCreationAndDurableSubs";
1:     }
1: 
1:     protected String getVirtualTopicName() {
1:         return "VirtualTopic.TEST";
1:     }
1: 
1: 
1:     protected String getVirtualTopicConsumerName() {
1:         return "Consumer.A.VirtualTopic.TEST";
1:     }
1: 
1:     protected String getDurableSubscriberName(){
1:     	return "Sub1";
1:     }
1:     
1:     protected String getDurableSubscriberTopicName(){
1:     	return "simple.topic";
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1:     
1:     //Overrides test cases from MBeanTest to avoid having them run.
1:     public void testMBeans() throws Exception {}
1:     public void testMoveMessages() throws Exception {}
1:     public void testRetryMessages() throws Exception {}
1:     public void testMoveMessagesBySelector() throws Exception {}
1:     public void testCopyMessagesBySelector() throws Exception {}
1: }
============================================================================