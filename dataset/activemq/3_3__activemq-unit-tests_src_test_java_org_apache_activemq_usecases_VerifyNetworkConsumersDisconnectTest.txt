1:a95c6db: /**
1:a95c6db:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a95c6db:  * contributor license agreements.  See the NOTICE file distributed with
1:a95c6db:  * this work for additional information regarding copyright ownership.
1:a95c6db:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a95c6db:  * (the "License"); you may not use this file except in compliance with
1:a95c6db:  * the License.  You may obtain a copy of the License at
1:a95c6db:  *
1:a95c6db:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a95c6db:  *
1:a95c6db:  * Unless required by applicable law or agreed to in writing, software
1:a95c6db:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a95c6db:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a95c6db:  * See the License for the specific language governing permissions and
1:a95c6db:  * limitations under the License.
1:a95c6db:  */
1:a95c6db: package org.apache.activemq.usecases;
2:a95c6db: 
1:a95c6db: import java.lang.Thread.UncaughtExceptionHandler;
1:a95c6db: import java.net.URI;
1:a95c6db: import java.util.HashMap;
1:a95c6db: import java.util.LinkedHashMap;
1:6c5732b: import java.util.LinkedList;
1:a95c6db: import java.util.Map;
1:a95c6db: import java.util.Map.Entry;
1:a95c6db: import java.util.concurrent.TimeUnit;
1:6c5732b: import java.util.concurrent.atomic.AtomicInteger;
1:a95c6db: import javax.jms.Destination;
1:a95c6db: import javax.jms.MessageConsumer;
1:6c5732b: import javax.management.ObjectName;
1:a95c6db: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:a95c6db: import org.apache.activemq.broker.BrokerService;
1:a95c6db: import org.apache.activemq.broker.jmx.ManagementContext;
1:a95c6db: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:a95c6db: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a95c6db: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a95c6db: import org.apache.activemq.network.NetworkConnector;
1:a95c6db: import org.apache.activemq.util.Wait;
1:a95c6db: import org.slf4j.Logger;
1:a95c6db: import org.slf4j.LoggerFactory;
1:a95c6db: 
1:a95c6db: public class VerifyNetworkConsumersDisconnectTest extends JmsMultipleBrokersTestSupport implements UncaughtExceptionHandler {
1:a95c6db:     public static final int BROKER_COUNT = 3;
1:6c5732b:     public static final int CONSUMER_COUNT = 5;
1:a95c6db:     public static final int MESSAGE_COUNT = 0;
1:a95c6db:     public static final boolean DUPLEX = false;
1:a95c6db:     public static final boolean CONDUIT = true;
1:a95c6db: 
1:6c5732b:     public static final int NETWORK_TTL = 6;
1:a95c6db:     private static final Logger LOG = LoggerFactory.getLogger(VerifyNetworkConsumersDisconnectTest.class);
1:a95c6db:     public static final int TIMEOUT = 30000;
1:a95c6db: 
1:a95c6db:     protected Map<String, MessageConsumer> consumerMap;
1:6c5732b:     Map<Thread, Throwable> unhandledExceptions = new HashMap<Thread, Throwable>();
1:a95c6db: 
1:6c5732b:     private void assertNoUnhandledExceptions() {
1:6c5732b:         for( Entry<Thread, Throwable> e: unhandledExceptions.entrySet()) {
1:a95c6db:             LOG.error("Thread:" + e.getKey() + " Had unexpected: " + e.getValue());
1:a95c6db:         }
1:6c5732b:         assertTrue("There are no unhandled exceptions, see: log for detail on: " + unhandledExceptions,
1:6c5732b:                 unhandledExceptions.isEmpty());
1:a95c6db:     }
1:a95c6db: 
1:96ce14b:     public NetworkConnector bridge(String from, String to, boolean conduitNetworkQueueSubscriptions) throws Exception {
1:a95c6db:         NetworkConnector networkConnector = bridgeBrokers(from, to, true, NETWORK_TTL, CONDUIT);
1:a95c6db:         networkConnector.setSuppressDuplicateQueueSubscriptions(true);
1:a95c6db:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:a95c6db:         networkConnector.setDuplex(DUPLEX);
1:96ce14b:         networkConnector.setConduitNetworkQueueSubscriptions(conduitNetworkQueueSubscriptions);
1:a95c6db:         return networkConnector;
1:a95c6db:     }
1:a95c6db: 
1:96ce14b:     public NetworkConnector bridge(String from, String to) throws Exception {
1:96ce14b:         return bridge(from, to, false);
1:96ce14b:     }
1:96ce14b: 
1:6c5732b:     /*why conduit proxy proxy consumers gets us in a knot w.r.t removal
1:6c5732b:     DC-7 for CA-9, add DB-15, remove CA-9, add CB-8
1:6c5732b:     CB-8 add DC-7
1:6c5732b:     CB-8 - why not dead?
1:6c5732b:     CB-8 for BA-6, add BD-15, remove BA-6
1:6c5732b:     BD-15 for DA-11, add DC-7
1:6c5732b:     */
1:6c5732b:     public void testConsumerOnEachBroker() throws Exception {
1:a95c6db:         bridge("Broker0", "Broker1");
1:a95c6db:         if (!DUPLEX) bridge("Broker1", "Broker0");
1:a95c6db: 
1:a95c6db:         bridge("Broker1", "Broker2");
1:a95c6db:         if (!DUPLEX) bridge("Broker2", "Broker1");
1:a95c6db: 
1:a95c6db:         startAllBrokers();
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 0);
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 0);
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 0);
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 1);
1:a95c6db: 
1:a95c6db:         Destination dest = createDestination("TEST.FOO", false);
1:a95c6db: 
1:a95c6db:         // Setup consumers
1:a95c6db:         for (int i = 0; i < BROKER_COUNT; i++) {
1:a95c6db:             consumerMap.put("Consumer:" + i + ":0", createConsumer("Broker" + i, dest));
1:a95c6db:         }
1:a95c6db: 
1:6c5732b:         assertExactConsumersConnect("Broker0", 3, 1, TIMEOUT);
1:6c5732b:         assertExactConsumersConnect("Broker2", 3, 1, TIMEOUT);
1:a95c6db:         // piggy in the middle
1:6c5732b:         assertExactConsumersConnect("Broker1", 3, 1, TIMEOUT);
1:a95c6db: 
1:6c5732b:         assertNoUnhandledExceptions();
1:a95c6db: 
1:6c5732b:         LOG.info("Complete the mesh - 0->2");
1:a95c6db: 
1:a95c6db:         // shorter route
1:a95c6db:         NetworkConnector nc = bridge("Broker0", "Broker2");
1:a95c6db:         nc.setBrokerName("Broker0");
1:a95c6db:         nc.start();
1:a95c6db: 
1:a95c6db: 
1:a95c6db:         if (!DUPLEX) {
1:6c5732b:             LOG.info("... complete the mesh - 2->0");
1:a95c6db:             nc = bridge("Broker2", "Broker0");
1:a95c6db:             nc.setBrokerName("Broker2");
1:a95c6db:             nc.start();
1:a95c6db:         }
1:a95c6db: 
1:a95c6db:         // wait for consumers to get propagated
1:a95c6db:         for (int i = 0; i < BROKER_COUNT; i++) {
1:6c5732b:         	assertExactConsumersConnect("Broker" + i, 3, 1, TIMEOUT);
1:a95c6db:         }
1:a95c6db: 
1:a95c6db:         // reverse order close
1:a95c6db:         consumerMap.get("Consumer:" + 2 + ":0").close();
1:a95c6db:         TimeUnit.SECONDS.sleep(1);
1:a95c6db:         consumerMap.get("Consumer:" + 1 + ":0").close();
1:a95c6db:         TimeUnit.SECONDS.sleep(1);
1:a95c6db:         consumerMap.get("Consumer:" + 0 + ":0").close();
1:a95c6db: 
1:a95c6db:         LOG.info("Check for no consumers..");
1:a95c6db:         for (int i = 0; i < BROKER_COUNT; i++) {
1:6c5732b:         	assertExactConsumersConnect("Broker" + i, 0, 0, TIMEOUT);
1:a95c6db:         }
1:6c5732b: 
1:a95c6db:     }
1:6c5732b: 
1:96ce14b:     public void testConsumerOnEachBrokerNetworkQueueConduitSubs() throws Exception {
1:96ce14b:         bridge("Broker0", "Broker1", true);
1:96ce14b:         if (!DUPLEX) bridge("Broker1", "Broker0", true);
1:96ce14b: 
1:96ce14b:         bridge("Broker1", "Broker2", true);
1:96ce14b:         if (!DUPLEX) bridge("Broker2", "Broker1", true);
1:96ce14b: 
1:96ce14b:         startAllBrokers();
1:96ce14b:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 0);
1:96ce14b:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 0);
1:96ce14b:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 0);
1:96ce14b:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 1);
1:96ce14b: 
1:96ce14b:         Destination dest = createDestination("TEST.FOO", false);
1:96ce14b: 
1:96ce14b:         // Setup consumers
1:96ce14b:         for (int i = 0; i < BROKER_COUNT; i++) {
1:96ce14b:             consumerMap.put("Consumer:" + i + ":0", createConsumer("Broker" + i, dest));
1:96ce14b:         }
1:96ce14b: 
1:96ce14b:         //Conduit network queue conduit subs is true so should only be 2 subs
1:96ce14b:         assertExactConsumersConnect("Broker0", 2, 1, TIMEOUT);
1:96ce14b:         assertExactConsumersConnect("Broker2", 2, 1, TIMEOUT);
1:96ce14b:         // still should be 3 subs for the middle broker, 1 for each direction
1:96ce14b:         assertExactConsumersConnect("Broker1", 3, 1, TIMEOUT);
1:96ce14b: 
1:96ce14b:         assertNoUnhandledExceptions();
1:96ce14b: 
1:96ce14b:         LOG.info("Complete the mesh - 0->2");
1:96ce14b: 
1:96ce14b:         // shorter route
1:96ce14b:         NetworkConnector nc = bridge("Broker0", "Broker2");
1:96ce14b:         nc.setBrokerName("Broker0");
1:96ce14b:         nc.start();
1:96ce14b: 
1:96ce14b: 
1:96ce14b:         if (!DUPLEX) {
1:96ce14b:             LOG.info("... complete the mesh - 2->0");
1:96ce14b:             nc = bridge("Broker2", "Broker0");
1:96ce14b:             nc.setBrokerName("Broker2");
1:96ce14b:             nc.start();
1:96ce14b:         }
1:96ce14b: 
1:96ce14b:         // reverse order close
1:96ce14b:         consumerMap.get("Consumer:" + 2 + ":0").close();
1:96ce14b:         TimeUnit.SECONDS.sleep(1);
1:96ce14b:         consumerMap.get("Consumer:" + 1 + ":0").close();
1:96ce14b:         TimeUnit.SECONDS.sleep(1);
1:96ce14b:         consumerMap.get("Consumer:" + 0 + ":0").close();
1:96ce14b: 
1:96ce14b:         LOG.info("Check for no consumers..");
1:96ce14b:         for (int i = 0; i < BROKER_COUNT; i++) {
1:96ce14b:             assertExactConsumersConnect("Broker" + i, 0, 0, TIMEOUT);
1:96ce14b:         }
1:96ce14b: 
1:96ce14b:     }
1:96ce14b: 
1:6c5732b:     public void testXConsumerOnEachBroker() throws Exception {
1:6c5732b:         bridge("Broker0", "Broker1");
1:6c5732b:         if (!DUPLEX) bridge("Broker1", "Broker0");
1:6c5732b: 
1:6c5732b:         bridge("Broker1", "Broker2");
1:6c5732b:         if (!DUPLEX) bridge("Broker2", "Broker1");
1:6c5732b: 
1:6c5732b:         startAllBrokers();
1:6c5732b: 
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 0);
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 0);
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 0);
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 1);
1:6c5732b: 
1:6c5732b:         Destination dest = createDestination("TEST.FOO", false);
1:6c5732b: 
1:6c5732b:         // Setup consumers
1:6c5732b:         for (int i = 0; i < BROKER_COUNT; i++) {
1:6c5732b:             for (int j=0; j< CONSUMER_COUNT; j++)
1:6c5732b:             consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest));
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         for (int i = 0; i < BROKER_COUNT; i++) {
1:6c5732b:             assertExactConsumersConnect("Broker" + i, CONSUMER_COUNT + (BROKER_COUNT -1), 1, TIMEOUT);
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         assertNoUnhandledExceptions();
1:6c5732b: 
1:6c5732b:         LOG.info("Complete the mesh - 0->2");
1:6c5732b: 
1:6c5732b:         // shorter route
1:6c5732b:         NetworkConnector nc = bridge("Broker0", "Broker2");
1:6c5732b:         nc.setBrokerName("Broker0");
1:6c5732b:         nc.start();
1:a95c6db: 
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 1);
1:6c5732b: 
1:6c5732b:         if (!DUPLEX) {
1:6c5732b:             LOG.info("... complete the mesh - 2->0");
1:6c5732b:             nc = bridge("Broker2", "Broker0");
1:6c5732b:             nc.setBrokerName("Broker2");
1:6c5732b:             nc.start();
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 1);
1:6c5732b: 
1:6c5732b:         for (int i = 0; i < BROKER_COUNT; i++) {
1:6c5732b:             assertExactConsumersConnect("Broker" + i, CONSUMER_COUNT + (BROKER_COUNT -1), 1, TIMEOUT);
1:6c5732b:         }
1:a95c6db: 
1:6c5732b:         // reverse order close
1:6c5732b:         for (int i=0; i<CONSUMER_COUNT; i++) {
1:6c5732b:             consumerMap.get("Consumer:" + 2 + ":" + i).close();
1:6c5732b:             TimeUnit.SECONDS.sleep(1);
1:6c5732b:             consumerMap.get("Consumer:" + 1 + ":" + i).close();
1:6c5732b:             TimeUnit.SECONDS.sleep(1);
1:6c5732b:             consumerMap.get("Consumer:" + 0 + ":" + i).close();
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         LOG.info("Check for no consumers..");
1:6c5732b:         for (int i = 0; i < BROKER_COUNT; i++) {
1:6c5732b:         	assertExactConsumersConnect("Broker" + i, 0, 0, TIMEOUT);
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     protected void assertExactConsumersConnect(final String brokerName, final int count, final int numChecks, long timeout) throws Exception {
1:a95c6db:         final ManagementContext context = brokers.get(brokerName).broker.getManagementContext();
1:6c5732b:         final AtomicInteger stability = new AtomicInteger(0);
1:6c5732b:         assertTrue("Expected consumers count: " + count + " on: " + brokerName, Wait.waitFor(new Wait.Condition() {
1:a95c6db:             @Override
1:a95c6db:             public boolean isSatisified() throws Exception {
1:a95c6db:                 try {
1:a95c6db:                     QueueViewMBean queueViewMBean = (QueueViewMBean) context.newProxyInstance(brokers.get(brokerName).broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1:a95c6db:                     long currentCount = queueViewMBean.getConsumerCount();
1:a95c6db:                     LOG.info("On " + brokerName + " current consumer count for " + queueViewMBean + ", " + currentCount);
1:6c5732b:                     LinkedList<String> consumerIds = new LinkedList<String>();
1:6c5732b:                     for (ObjectName objectName : queueViewMBean.getSubscriptions()) {
1:6c5732b:                         consumerIds.add(objectName.getKeyProperty("consumerId"));
1:a95c6db:                     }
1:6c5732b:                     LOG.info("Sub IDs: " + consumerIds);
1:6c5732b:                     if (currentCount == count) {
1:6c5732b:                         stability.incrementAndGet();
1:6c5732b:                     } else {
1:6c5732b:                         stability.set(0);
1:6c5732b:                     }
1:6c5732b:                     return stability.get() > numChecks;
1:a95c6db:                 } catch (Exception e) {
1:a95c6db:                     LOG.warn(": ", e);
1:a95c6db:                     return false;
1:a95c6db:                 }
1:a95c6db:             }
1:a95c6db:         }, timeout));
1:a95c6db:     }
1:a95c6db: 
1:96ce14b:     @Override
1:a95c6db:     public void setUp() throws Exception {
1:a95c6db:         super.setAutoFail(true);
1:a95c6db:         super.setUp();
1:a95c6db: 
1:6c5732b:         unhandledExceptions.clear();
1:a95c6db:         Thread.setDefaultUncaughtExceptionHandler(this);
1:96ce14b: 
1:a95c6db:         // Setup n brokers
1:a95c6db:         for (int i = 0; i < BROKER_COUNT; i++) {
1:a95c6db:             createBroker(new URI("broker:(tcp://localhost:6161" + i + ")/Broker" + i + "?persistent=false&useJmx=true&brokerId=Broker" + i));
1:a95c6db:         }
1:a95c6db: 
1:a95c6db:         consumerMap = new LinkedHashMap<String, MessageConsumer>();
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     @Override
1:a95c6db:     protected void configureBroker(BrokerService brokerService) {
1:a95c6db:         PolicyEntry policyEntry = new PolicyEntry();
1:a95c6db:         policyEntry.setExpireMessagesPeriod(0);
1:a95c6db:         PolicyMap policyMap = new PolicyMap();
1:a95c6db:         policyMap.setDefaultEntry(policyEntry);
1:a95c6db:         brokerService.setDestinationPolicy(policyMap);
1:a95c6db:     }
1:a95c6db: 
1:96ce14b:     @Override
1:a95c6db:     public void uncaughtException(Thread t, Throwable e) {
1:6c5732b:         synchronized(unhandledExceptions) {
1:6c5732b:             unhandledExceptions.put(t, e);
1:a95c6db:         }
1:a95c6db:     }
1:a95c6db: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:96ce14b
/////////////////////////////////////////////////////////////////////////
1:     public NetworkConnector bridge(String from, String to, boolean conduitNetworkQueueSubscriptions) throws Exception {
1:         networkConnector.setConduitNetworkQueueSubscriptions(conduitNetworkQueueSubscriptions);
1:     public NetworkConnector bridge(String from, String to) throws Exception {
1:         return bridge(from, to, false);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testConsumerOnEachBrokerNetworkQueueConduitSubs() throws Exception {
1:         bridge("Broker0", "Broker1", true);
1:         if (!DUPLEX) bridge("Broker1", "Broker0", true);
1: 
1:         bridge("Broker1", "Broker2", true);
1:         if (!DUPLEX) bridge("Broker2", "Broker1", true);
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 1);
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         // Setup consumers
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             consumerMap.put("Consumer:" + i + ":0", createConsumer("Broker" + i, dest));
1:         }
1: 
1:         //Conduit network queue conduit subs is true so should only be 2 subs
1:         assertExactConsumersConnect("Broker0", 2, 1, TIMEOUT);
1:         assertExactConsumersConnect("Broker2", 2, 1, TIMEOUT);
1:         // still should be 3 subs for the middle broker, 1 for each direction
1:         assertExactConsumersConnect("Broker1", 3, 1, TIMEOUT);
1: 
1:         assertNoUnhandledExceptions();
1: 
1:         LOG.info("Complete the mesh - 0->2");
1: 
1:         // shorter route
1:         NetworkConnector nc = bridge("Broker0", "Broker2");
1:         nc.setBrokerName("Broker0");
1:         nc.start();
1: 
1: 
1:         if (!DUPLEX) {
1:             LOG.info("... complete the mesh - 2->0");
1:             nc = bridge("Broker2", "Broker0");
1:             nc.setBrokerName("Broker2");
1:             nc.start();
1:         }
1: 
1:         // reverse order close
1:         consumerMap.get("Consumer:" + 2 + ":0").close();
1:         TimeUnit.SECONDS.sleep(1);
1:         consumerMap.get("Consumer:" + 1 + ":0").close();
1:         TimeUnit.SECONDS.sleep(1);
1:         consumerMap.get("Consumer:" + 0 + ":0").close();
1: 
1:         LOG.info("Check for no consumers..");
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             assertExactConsumersConnect("Broker" + i, 0, 0, TIMEOUT);
1:         }
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:gtully
-------------------------------------------------------------------------------
commit:6c5732b
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:     public static final int CONSUMER_COUNT = 5;
1:     public static final int NETWORK_TTL = 6;
1:     Map<Thread, Throwable> unhandledExceptions = new HashMap<Thread, Throwable>();
1:     private void assertNoUnhandledExceptions() {
1:         for( Entry<Thread, Throwable> e: unhandledExceptions.entrySet()) {
1:         assertTrue("There are no unhandled exceptions, see: log for detail on: " + unhandledExceptions,
1:                 unhandledExceptions.isEmpty());
/////////////////////////////////////////////////////////////////////////
1:     /*why conduit proxy proxy consumers gets us in a knot w.r.t removal
1:     DC-7 for CA-9, add DB-15, remove CA-9, add CB-8
1:     CB-8 add DC-7
1:     CB-8 - why not dead?
1:     CB-8 for BA-6, add BD-15, remove BA-6
1:     BD-15 for DA-11, add DC-7
1:     */
1:     public void testConsumerOnEachBroker() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 1);
/////////////////////////////////////////////////////////////////////////
1:         assertExactConsumersConnect("Broker0", 3, 1, TIMEOUT);
1:         assertExactConsumersConnect("Broker2", 3, 1, TIMEOUT);
1:         assertExactConsumersConnect("Broker1", 3, 1, TIMEOUT);
1:         assertNoUnhandledExceptions();
1:         LOG.info("Complete the mesh - 0->2");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("... complete the mesh - 2->0");
/////////////////////////////////////////////////////////////////////////
1:         	assertExactConsumersConnect("Broker" + i, 3, 1, TIMEOUT);
/////////////////////////////////////////////////////////////////////////
1:         	assertExactConsumersConnect("Broker" + i, 0, 0, TIMEOUT);
1:     public void testXConsumerOnEachBroker() throws Exception {
1:         bridge("Broker0", "Broker1");
1:         if (!DUPLEX) bridge("Broker1", "Broker0");
1: 
1:         bridge("Broker1", "Broker2");
1:         if (!DUPLEX) bridge("Broker2", "Broker1");
1: 
1:         startAllBrokers();
1: 
1:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 0);
1:         waitForBridgeFormation(brokers.get("Broker1").broker, 1, 1);
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         // Setup consumers
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             for (int j=0; j< CONSUMER_COUNT; j++)
1:             consumerMap.put("Consumer:" + i + ":" + j, createConsumer("Broker" + i, dest));
1:         }
1: 
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             assertExactConsumersConnect("Broker" + i, CONSUMER_COUNT + (BROKER_COUNT -1), 1, TIMEOUT);
1:         }
1: 
1:         assertNoUnhandledExceptions();
1: 
1:         LOG.info("Complete the mesh - 0->2");
1: 
1:         // shorter route
1:         NetworkConnector nc = bridge("Broker0", "Broker2");
1:         nc.setBrokerName("Broker0");
1:         nc.start();
1: 
1:         waitForBridgeFormation(brokers.get("Broker0").broker, 1, 1);
1: 
1:         if (!DUPLEX) {
1:             LOG.info("... complete the mesh - 2->0");
1:             nc = bridge("Broker2", "Broker0");
1:             nc.setBrokerName("Broker2");
1:             nc.start();
1:         }
1: 
1:         waitForBridgeFormation(brokers.get("Broker2").broker, 1, 1);
1: 
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             assertExactConsumersConnect("Broker" + i, CONSUMER_COUNT + (BROKER_COUNT -1), 1, TIMEOUT);
1:         }
1: 
1:         // reverse order close
1:         for (int i=0; i<CONSUMER_COUNT; i++) {
1:             consumerMap.get("Consumer:" + 2 + ":" + i).close();
1:             TimeUnit.SECONDS.sleep(1);
1:             consumerMap.get("Consumer:" + 1 + ":" + i).close();
1:             TimeUnit.SECONDS.sleep(1);
1:             consumerMap.get("Consumer:" + 0 + ":" + i).close();
1:         }
1: 
1:         LOG.info("Check for no consumers..");
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:         	assertExactConsumersConnect("Broker" + i, 0, 0, TIMEOUT);
1:         }
1: 
1:     }
1: 
1:     protected void assertExactConsumersConnect(final String brokerName, final int count, final int numChecks, long timeout) throws Exception {
1:         final AtomicInteger stability = new AtomicInteger(0);
1:         assertTrue("Expected consumers count: " + count + " on: " + brokerName, Wait.waitFor(new Wait.Condition() {
1:                     LinkedList<String> consumerIds = new LinkedList<String>();
1:                     for (ObjectName objectName : queueViewMBean.getSubscriptions()) {
1:                         consumerIds.add(objectName.getKeyProperty("consumerId"));
1:                     LOG.info("Sub IDs: " + consumerIds);
1:                     if (currentCount == count) {
1:                         stability.incrementAndGet();
1:                     } else {
1:                         stability.set(0);
1:                     }
1:                     return stability.get() > numChecks;
/////////////////////////////////////////////////////////////////////////
1:         unhandledExceptions.clear();
/////////////////////////////////////////////////////////////////////////
1:         synchronized(unhandledExceptions) {
1:             unhandledExceptions.put(t, e);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.lang.Thread.UncaughtExceptionHandler;
1: import java.net.URI;
0: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class VerifyNetworkConsumersDisconnectTest extends JmsMultipleBrokersTestSupport implements UncaughtExceptionHandler {
1:     public static final int BROKER_COUNT = 3;
0:     public static final int CONSUMER_COUNT = 1;
1:     public static final int MESSAGE_COUNT = 0;
1:     public static final boolean DUPLEX = false;
1:     public static final boolean CONDUIT = true;
1: 
0:     // NETWORK_TTL=4 is problematic for consumer/demand propagation
0:     // needs setConsumerTTL=1 to override
0:     public static final int NETWORK_TTL = 4;
1:     private static final Logger LOG = LoggerFactory.getLogger(VerifyNetworkConsumersDisconnectTest.class);
1:     public static final int TIMEOUT = 30000;
1: 
1:     protected Map<String, MessageConsumer> consumerMap;
0:     Map<Thread, Throwable> unhandeledExceptions = new HashMap<Thread, Throwable>();
1: 
0:     private void assertNoUnhandeledExceptions() {
0:         for( Entry<Thread, Throwable> e: unhandeledExceptions.entrySet()) {
1:             LOG.error("Thread:" + e.getKey() + " Had unexpected: " + e.getValue());
1:         }
0:         assertTrue("There are no unhandelled exceptions, see: log for detail on: " + unhandeledExceptions,
0:                 unhandeledExceptions.isEmpty());
1:     }
1: 
0:     public NetworkConnector bridge(String from, String to) throws Exception {
1:         NetworkConnector networkConnector = bridgeBrokers(from, to, true, NETWORK_TTL, CONDUIT);
1:         networkConnector.setSuppressDuplicateQueueSubscriptions(true);
1:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:         networkConnector.setDuplex(DUPLEX);
0:         // infinite ttl for messages in a mesh
0:         networkConnector.setMessageTTL(-1);
0:         // one hop for consumers in a mesh
0:         networkConnector.setConsumerTTL(1);
1:         return networkConnector;
1:     }
1: 
0:     public void testQueueAllConnected() throws Exception {
1:         bridge("Broker0", "Broker1");
1:         if (!DUPLEX) bridge("Broker1", "Broker0");
1: 
1:         bridge("Broker1", "Broker2");
1:         if (!DUPLEX) bridge("Broker2", "Broker1");
1: 
1:         startAllBrokers();
0:         this.waitForBridgeFormation();
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         // Setup consumers
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             consumerMap.put("Consumer:" + i + ":0", createConsumer("Broker" + i, dest));
1:         }
1: 
0:         assertExactConsumersConnect("Broker0", dest, 2, TIMEOUT);
0:         assertExactConsumersConnect("Broker2", dest, 2, TIMEOUT);
1:         // piggy in the middle
0:         assertExactConsumersConnect("Broker1", dest, 3, TIMEOUT);
1: 
0:         assertNoUnhandeledExceptions();
1: 
0:         LOG.info("Complate the mesh - 0->2");
1: 
1:         // shorter route
1:         NetworkConnector nc = bridge("Broker0", "Broker2");
1:         nc.setBrokerName("Broker0");
1:         nc.start();
1: 
1: 
1:         if (!DUPLEX) {
0:             LOG.info("... complate the mesh - 2->0");
1:             nc = bridge("Broker2", "Broker0");
1:             nc.setBrokerName("Broker2");
1:             nc.start();
1:         }
1: 
1:         // wait for consumers to get propagated
1:         for (int i = 0; i < BROKER_COUNT; i++) {
0:         	assertExactConsumersConnect("Broker" + i, dest, 3, TIMEOUT);
1:         }
1: 
1:         // reverse order close
1:         consumerMap.get("Consumer:" + 2 + ":0").close();
1:         TimeUnit.SECONDS.sleep(1);
1:         consumerMap.get("Consumer:" + 1 + ":0").close();
1:         TimeUnit.SECONDS.sleep(1);
1:         consumerMap.get("Consumer:" + 0 + ":0").close();
1: 
1:         LOG.info("Check for no consumers..");
1:         for (int i = 0; i < BROKER_COUNT; i++) {
0:         	assertExactConsumersConnect("Broker" + i, dest, 0, TIMEOUT);
1:         }
1: 
1:     }
1: 
0:     protected void assertExactConsumersConnect(final String brokerName, Destination destination, final int count, long timeout) throws Exception {
1:         final ManagementContext context = brokers.get(brokerName).broker.getManagementContext();
0:         assertTrue("Excepected consumers count: " + count + " on: " + brokerName, Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 try {
1:                     QueueViewMBean queueViewMBean = (QueueViewMBean) context.newProxyInstance(brokers.get(brokerName).broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1:                     long currentCount = queueViewMBean.getConsumerCount();
1:                     LOG.info("On " + brokerName + " current consumer count for " + queueViewMBean + ", " + currentCount);
0:                     if (count != currentCount) {
0:                         LOG.info("Sub IDs: " + Arrays.asList(queueViewMBean.getSubscriptions()));
1:                     }
0:                     return currentCount == count;
1:                 } catch (Exception e) {
1:                     LOG.warn(": ", e);
1:                     return false;
1:                 }
1:             }
1:         }, timeout));
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1: 
0:         unhandeledExceptions.clear();
1:         Thread.setDefaultUncaughtExceptionHandler(this);
1:         
1:         // Setup n brokers
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             createBroker(new URI("broker:(tcp://localhost:6161" + i + ")/Broker" + i + "?persistent=false&useJmx=true&brokerId=Broker" + i));
1:         }
1: 
1:         consumerMap = new LinkedHashMap<String, MessageConsumer>();
1:     }
1: 
1:     @Override
1:     protected void configureBroker(BrokerService brokerService) {
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setExpireMessagesPeriod(0);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policyEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1:     }
1: 
1:     public void uncaughtException(Thread t, Throwable e) {
0:         synchronized(unhandeledExceptions) {
0:             unhandeledExceptions.put(t,e);
1:         }
1:     }
1: }
============================================================================