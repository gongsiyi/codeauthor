1:e6285b7: /**
1:e6285b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6285b7:  * contributor license agreements.  See the NOTICE file distributed with
1:e6285b7:  * this work for additional information regarding copyright ownership.
1:e6285b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6285b7:  * (the "License"); you may not use this file except in compliance with
1:e6285b7:  * the License.  You may obtain a copy of the License at
1:e6285b7:  *
1:e6285b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e6285b7:  *
1:e6285b7:  * Unless required by applicable law or agreed to in writing, software
1:e6285b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6285b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6285b7:  * See the License for the specific language governing permissions and
1:e6285b7:  * limitations under the License.
1:e6285b7:  */
1:e6285b7: package org.apache.activemq.bugs;
14:e6285b7: 
1:e6285b7: import junit.framework.TestCase;
1:e6285b7: import org.apache.activemq.broker.BrokerFactory;
1:e6285b7: import org.apache.activemq.broker.BrokerService;
1:f09b920: import org.apache.activemq.spring.SpringSslContext;
1:e6285b7: import org.apache.activemq.transport.stomp.Stomp;
1:e6285b7: import org.apache.activemq.transport.stomp.StompConnection;
1:e6285b7: import org.apache.activemq.transport.stomp.StompFrame;
1:f09b920: import org.fusesource.mqtt.client.MQTT;
1:e6285b7: import org.junit.After;
1:e6285b7: import org.junit.Before;
1:e6285b7: import org.junit.Test;
1:1d9b347: 
1:f09b920: import javax.net.SocketFactory;
1:f09b920: import javax.net.ssl.SSLContext;
1:f09b920: import javax.net.ssl.SSLSocketFactory;
1:f09b920: import java.net.Socket;
1:f09b920: 
1:e6285b7: public class AMQ4133Test {
1:1d9b347: 
1:1d9b347:     protected String java_security_auth_login_config = "java.security.auth.login.config";
1:e6285b7:     protected String xbean = "xbean:";
1:e6285b7:     protected String confBase = "src/test/resources/org/apache/activemq/bugs/amq4126";
1:e6285b7:     protected String certBase = "src/test/resources/org/apache/activemq/security";
1:e6285b7:     protected String activemqXml = "InconsistentConnectorPropertiesBehaviour.xml";
1:1d9b347:     protected BrokerService broker;
1:1d9b347: 
1:1d9b347:     protected String oldLoginConf = null;
1:1d9b347: 
1:e6285b7:     @Before
1:e6285b7:     public void before() throws Exception {
1:1d9b347:         if (System.getProperty(java_security_auth_login_config) != null) {
1:e6285b7:             oldLoginConf = System.getProperty(java_security_auth_login_config);
1:e6285b7:         }
1:1d9b347:         System.setProperty(java_security_auth_login_config, confBase + "/" + "login.config");
1:1d9b347:         broker = BrokerFactory.createBroker(xbean + confBase + "/" + activemqXml);
1:1d9b347: 
1:e6285b7:         broker.start();
1:e6285b7:         broker.waitUntilStarted();
1:f09b920: 
1:f09b920:         System.setProperty("javax.net.ssl.trustStore", certBase + "/" + "broker1.ks");
1:f09b920:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:f09b920:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:f09b920:         System.setProperty("javax.net.ssl.keyStore", certBase + "/" + "client.ks");
1:f09b920:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:f09b920:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:e6285b7:     }
1:e6285b7: 
1:e6285b7:     @After
1:e6285b7:     public void after() throws Exception {
1:1d9b347:         if (broker != null) {
1:e6285b7:             broker.stop();
1:e6285b7:             broker.waitUntilStopped();
1:e6285b7:         }
1:e6285b7:     }
1:1d9b347: 
1:e6285b7:     @Test
1:e6285b7:     public void stompSSLTransportNeedClientAuthTrue() throws Exception {
1:1d9b347:         stompConnectTo("localhost", broker.getConnectorByName("stomp+ssl").getConnectUri().getPort());
1:e6285b7:     }
1:1d9b347: 
1:e6285b7:     @Test
1:e6285b7:     public void stompSSLNeedClientAuthTrue() throws Exception {
1:1d9b347:         stompConnectTo("localhost", broker.getConnectorByName("stomp+ssl+special").getConnectUri().getPort());
1:e6285b7:     }
1:1d9b347: 
1:e6285b7:     @Test
1:e6285b7:     public void stompNIOSSLTransportNeedClientAuthTrue() throws Exception {
1:1d9b347:         stompConnectTo("localhost", broker.getConnectorByName("stomp+nio+ssl").getConnectUri().getPort());
1:e6285b7:     }
1:1d9b347: 
1:e6285b7:     @Test
1:e6285b7:     public void stompNIOSSLNeedClientAuthTrue() throws Exception {
1:1d9b347:         stompConnectTo("localhost", broker.getConnectorByName("stomp+nio+ssl+special").getConnectUri().getPort());
1:e6285b7:     }
1:1d9b347: 
1:f09b920:     @Test
1:f09b920:     public void mqttSSLNeedClientAuthTrue() throws Exception {
1:f09b920:         mqttConnectTo("localhost", broker.getConnectorByName("mqtt+ssl").getConnectUri().getPort());
1:f09b920:     }
1:e6285b7: 
1:f09b920:     @Test
1:f09b920:     public void mqttNIOSSLNeedClientAuthTrue() throws Exception {
1:f09b920:         mqttConnectTo("localhost", broker.getConnectorByName("mqtt+nio+ssl").getConnectUri().getPort());
1:f09b920:     }
1:f09b920: 
1:f09b920:     public Socket createSocket(String host, int port) throws Exception {
1:e6285b7:         SocketFactory factory = SSLSocketFactory.getDefault();
1:e6285b7:         return factory.createSocket(host, port);
1:e6285b7:     }
1:1d9b347: 
1:e6285b7:     public void stompConnectTo(String host, int port) throws Exception {
1:1d9b347:         StompConnection stompConnection = new StompConnection();
1:1d9b347:         stompConnection.open(createSocket(host, port));
1:e6285b7:         stompConnection.sendFrame("CONNECT\n" + "\n" + Stomp.NULL);
1:e6285b7:         StompFrame f = stompConnection.receive();
1:e6285b7:         TestCase.assertEquals(f.getBody(), "CONNECTED", f.getAction());
1:e6285b7:         stompConnection.close();
1:e6285b7:     }
1:e6285b7: 
1:f09b920:     public void mqttConnectTo(String host, int port) throws Exception {
1:f09b920:         MQTT mqtt = new MQTT();
1:f09b920:         mqtt.setConnectAttemptsMax(1);
1:f09b920:         mqtt.setReconnectAttemptsMax(0);
1:f09b920:         mqtt.setHost("tls://" + host + ":" + port);
1:f09b920:         mqtt.setClientId("test");
1:f09b920:         mqtt.setCleanSession(true);
1:f09b920: 
1:f09b920:         SpringSslContext context = new SpringSslContext();
1:f09b920:         context.setKeyStore(certBase + "/" + "client.ks");
1:f09b920:         context.setKeyStorePassword("password");
1:f09b920:         context.setTrustStore(certBase + "/" + "broker1.ks");
1:f09b920:         context.setTrustStorePassword("password");
1:f09b920:         context.afterPropertiesSet();
1:f09b920: 
1:f09b920:         mqtt.setSslContext(SSLContext.getDefault());
1:f09b920:         mqtt.blockingConnection().connect();
1:f09b920:     }
1:f09b920: 
1:e6285b7: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f09b920
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.spring.SpringSslContext;
1: import org.fusesource.mqtt.client.MQTT;
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLSocketFactory;
1: import java.net.Socket;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         System.setProperty("javax.net.ssl.trustStore", certBase + "/" + "broker1.ks");
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", certBase + "/" + "client.ks");
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void mqttSSLNeedClientAuthTrue() throws Exception {
1:         mqttConnectTo("localhost", broker.getConnectorByName("mqtt+ssl").getConnectUri().getPort());
1:     }
1:     @Test
1:     public void mqttNIOSSLNeedClientAuthTrue() throws Exception {
1:         mqttConnectTo("localhost", broker.getConnectorByName("mqtt+nio+ssl").getConnectUri().getPort());
1:     }
1: 
1:     public Socket createSocket(String host, int port) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void mqttConnectTo(String host, int port) throws Exception {
1:         MQTT mqtt = new MQTT();
1:         mqtt.setConnectAttemptsMax(1);
1:         mqtt.setReconnectAttemptsMax(0);
1:         mqtt.setHost("tls://" + host + ":" + port);
1:         mqtt.setClientId("test");
1:         mqtt.setCleanSession(true);
1: 
1:         SpringSslContext context = new SpringSslContext();
1:         context.setKeyStore(certBase + "/" + "client.ks");
1:         context.setKeyStorePassword("password");
1:         context.setTrustStore(certBase + "/" + "broker1.ks");
1:         context.setTrustStorePassword("password");
1:         context.afterPropertiesSet();
1: 
1:         mqtt.setSslContext(SSLContext.getDefault());
1:         mqtt.blockingConnection().connect();
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1d9b347
/////////////////////////////////////////////////////////////////////////
0: import javax.net.SocketFactory;
0: import javax.net.ssl.SSLSocketFactory;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected String java_security_auth_login_config = "java.security.auth.login.config";
1:     protected BrokerService broker;
1: 
1:     protected String oldLoginConf = null;
1:         if (System.getProperty(java_security_auth_login_config) != null) {
1:         System.setProperty(java_security_auth_login_config, confBase + "/" + "login.config");
1:         broker = BrokerFactory.createBroker(xbean + confBase + "/" + activemqXml);
1: 
1:         if (broker != null) {
1: 
1:         stompConnectTo("localhost", broker.getConnectorByName("stomp+ssl").getConnectUri().getPort());
1: 
1:         stompConnectTo("localhost", broker.getConnectorByName("stomp+ssl+special").getConnectUri().getPort());
1: 
1:         stompConnectTo("localhost", broker.getConnectorByName("stomp+nio+ssl").getConnectUri().getPort());
1: 
1:         stompConnectTo("localhost", broker.getConnectorByName("stomp+nio+ssl+special").getConnectUri().getPort());
1: 
0:         System.setProperty("javax.net.ssl.trustStore", certBase + "/" + "broker1.ks");
0:         System.setProperty("javax.net.ssl.keyStore", certBase + "/" + "client.ks");
1: 
1:         StompConnection stompConnection = new StompConnection();
1:         stompConnection.open(createSocket(host, port));
commit:ef24cc9
commit:e6285b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import java.io.File;
0: import java.net.Socket;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: import org.apache.activemq.transport.stomp.StompFrame;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import javax.net.SocketFactory;
0: import javax.net.ssl.SSLSocketFactory;
1: 
1: public class AMQ4133Test {
1: 	
0: 	protected String java_security_auth_login_config = "java.security.auth.login.config";
1:     protected String xbean = "xbean:";
1:     protected String confBase = "src/test/resources/org/apache/activemq/bugs/amq4126";
1:     protected String certBase = "src/test/resources/org/apache/activemq/security";
0:     protected String sep  = File.separator;
1:     protected String activemqXml = "InconsistentConnectorPropertiesBehaviour.xml";
0: 	protected BrokerService broker;
1: 	
0: 	protected String oldLoginConf = null;
1: 
1:     @Before
1:     public void before() throws Exception {
0:     	if (System.getProperty(java_security_auth_login_config) != null) {
1:             oldLoginConf = System.getProperty(java_security_auth_login_config);
1:         }
0:         System.setProperty(java_security_auth_login_config, confBase + sep + "login.config");
0:         broker = BrokerFactory.createBroker(xbean + confBase + sep + activemqXml);
1:         
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
0:     	if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1:     
1:     @Test
1:     public void stompSSLTransportNeedClientAuthTrue() throws Exception {
0:     	stompConnectTo("localhost", broker.getConnectorByName("stomp+ssl").getConnectUri().getPort());
1:     }
1:     
1:     @Test
1:     public void stompSSLNeedClientAuthTrue() throws Exception {
0:     	stompConnectTo("localhost", broker.getConnectorByName("stomp+ssl+special").getConnectUri().getPort());
1:     }
1:     
1:     @Test
1:     public void stompNIOSSLTransportNeedClientAuthTrue() throws Exception {
0:     	stompConnectTo("localhost", broker.getConnectorByName("stomp+nio+ssl").getConnectUri().getPort());
1:     }
1:     
1:     @Test
1:     public void stompNIOSSLNeedClientAuthTrue() throws Exception {
0:     	stompConnectTo("localhost", broker.getConnectorByName("stomp+nio+ssl+special").getConnectUri().getPort());
1:     }
1:     
0:     public Socket createSocket(String host, int port) throws Exception {
0:     	System.setProperty("javax.net.ssl.trustStore", certBase + sep + "broker1.ks");
0:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
0:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
0:         System.setProperty("javax.net.ssl.keyStore", certBase + sep + "client.ks");
0:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
0:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
1:         SocketFactory factory = SSLSocketFactory.getDefault();
1:         return factory.createSocket(host, port);
1:     }
1:     
1:     public void stompConnectTo(String host, int port) throws Exception {
0:     	StompConnection stompConnection = new StompConnection();
0:     	stompConnection.open(createSocket(host, port));
1:         stompConnection.sendFrame("CONNECT\n" + "\n" + Stomp.NULL);
1:         StompFrame f = stompConnection.receive();
1:         TestCase.assertEquals(f.getBody(), "CONNECTED", f.getAction());
1:         stompConnection.close();
1:     }
1: 
1: }
============================================================================