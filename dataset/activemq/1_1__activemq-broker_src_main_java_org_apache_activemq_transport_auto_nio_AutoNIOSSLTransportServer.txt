1:e14aca8: package org.apache.activemq.transport.auto.nio;
6:04ee70a: 
1:04ee70a: import java.io.IOException;
1:04ee70a: import java.net.Socket;
1:04ee70a: import java.net.URI;
1:04ee70a: import java.net.URISyntaxException;
1:04ee70a: import java.nio.ByteBuffer;
1:98c5866: import java.util.HashMap;
1:04ee70a: import java.util.Set;
1:e14aca8: import java.util.concurrent.Future;
1:04ee70a: 
1:04ee70a: import javax.net.ServerSocketFactory;
1:04ee70a: import javax.net.ssl.SSLContext;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:04ee70a: 
1:04ee70a: import org.apache.activemq.broker.BrokerService;
1:04ee70a: import org.apache.activemq.broker.BrokerServiceAware;
1:04ee70a: import org.apache.activemq.transport.Transport;
1:e14aca8: import org.apache.activemq.transport.auto.AutoTcpTransportServer;
1:04ee70a: import org.apache.activemq.transport.nio.AutoInitNioSSLTransport;
1:04ee70a: import org.apache.activemq.transport.nio.NIOSSLTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:98c5866: import org.apache.activemq.util.IntrospectionSupport;
1:04ee70a: import org.apache.activemq.wireformat.WireFormat;
1:04ee70a: 
1:e14aca8: /**
1:e14aca8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e14aca8:  * contributor license agreements.  See the NOTICE file distributed with
1:e14aca8:  * this work for additional information regarding copyright ownership.
1:e14aca8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e14aca8:  * (the "License"); you may not use this file except in compliance with
1:e14aca8:  * the License.  You may obtain a copy of the License at
1:e14aca8:  *
1:e14aca8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e14aca8:  *
1:e14aca8:  * Unless required by applicable law or agreed to in writing, software
1:e14aca8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e14aca8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e14aca8:  * See the License for the specific language governing permissions and
1:e14aca8:  * limitations under the License.
1:e14aca8:  */
1:04ee70a: public class AutoNIOSSLTransportServer extends AutoTcpTransportServer {
1:04ee70a: 
1:04ee70a:     private SSLContext context;
1:04ee70a: 
1:04ee70a:     public AutoNIOSSLTransportServer(SSLContext context, TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory,
1:04ee70a:             BrokerService brokerService, Set<String> enabledProtocols) throws IOException, URISyntaxException {
1:04ee70a:         super(transportFactory, location, serverSocketFactory, brokerService, enabledProtocols);
1:04ee70a: 
1:04ee70a:         this.context = context;
2:04ee70a:     }
1:04ee70a: 
1:04ee70a:     private boolean needClientAuth;
1:04ee70a:     private boolean wantClientAuth;
1:04ee70a: 
1:04ee70a:     protected Transport createTransport(Socket socket, WireFormat format, SSLEngine engine,
1:04ee70a:             InitBuffer initBuffer, ByteBuffer inputBuffer, TcpTransportFactory detectedFactory) throws IOException {
1:04ee70a:         NIOSSLTransport transport = new NIOSSLTransport(format, socket, engine, initBuffer, inputBuffer);
1:04ee70a:         if (context != null) {
1:04ee70a:             transport.setSslContext(context);
1:04ee70a:         }
1:04ee70a: 
1:04ee70a:         transport.setNeedClientAuth(needClientAuth);
1:04ee70a:         transport.setWantClientAuth(wantClientAuth);
1:04ee70a: 
1:04ee70a: 
1:04ee70a:         return transport;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     protected TcpTransport createTransport(Socket socket, WireFormat format) throws IOException {
1:04ee70a:         throw new UnsupportedOperationException("method not supported");
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     public boolean isSslServer() {
1:04ee70a:         return true;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public boolean isNeedClientAuth() {
1:04ee70a:         return this.needClientAuth;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public void setNeedClientAuth(boolean value) {
1:04ee70a:         this.needClientAuth = value;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public boolean isWantClientAuth() {
1:04ee70a:         return this.wantClientAuth;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public void setWantClientAuth(boolean value) {
1:04ee70a:         this.wantClientAuth = value;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     protected TransportInfo configureTransport(final TcpTransportServer server, final Socket socket) throws Exception {
1:04ee70a:         //The SSLEngine needs to be initialized and handshake done to get the first command and detect the format
1:9ab9488:         //The wireformat doesn't need properties set here because we aren't using this format during the SSL handshake
1:e14aca8:         final AutoInitNioSSLTransport in = new AutoInitNioSSLTransport(wireFormatFactory.createWireFormat(), socket);
1:04ee70a:         if (context != null) {
1:04ee70a:             in.setSslContext(context);
1:e14aca8:         }
1:98c5866:         //We need to set the transport options on the init transport so that the SSL options are set
1:98c5866:         if (transportOptions != null) {
1:98c5866:             //Clone the map because we will need to set the options later on the actual transport
1:98c5866:             IntrospectionSupport.setProperties(in, new HashMap<>(transportOptions));
1:98c5866:         }
1:e14aca8: 
1:27238b2:         //Attempt to read enough bytes to detect the protocol until the timeout period
1:27238b2:         //is reached
1:27238b2:         Future<?> future = protocolDetectionExecutor.submit(new Runnable() {
1:e14aca8:             @Override
1:3c358b3:             public void run() {
1:2a0b785:                 try {
1:2a0b785:                     in.start();
1:2a0b785:                 } catch (Exception e) {
1:2a0b785:                     throw new IllegalStateException("Could not complete Transport start", e);
1:2a0b785:                 }
1:2a0b785: 
1:27238b2:                 int attempts = 0;
1:e14aca8:                 do {
1:27238b2:                     if(attempts > 0) {
1:27238b2:                         try {
1:27238b2:                             //increase sleep period each attempt to prevent high cpu usage
1:27238b2:                             //if the client is hung and not sending bytes
1:27238b2:                             int sleep = attempts >= 1024 ? 1024 : 4 * attempts;
1:27238b2:                             Thread.sleep(sleep);
1:27238b2:                         } catch (InterruptedException e) {
1:27238b2:                             break;
1:27238b2:                         }
1:27238b2:                     }
1:27238b2:                     //In the future it might be better to register a nonblocking selector
1:27238b2:                     //to be told when bytes are ready
1:e14aca8:                     in.serviceRead();
1:27238b2:                     attempts++;
1:27238b2:                 } while(in.getReadSize().get() < 8 && !Thread.interrupted());
1:e14aca8:             }
1:e14aca8:         });
1:e14aca8: 
1:27238b2:         try {
1:27238b2:             //If this fails and throws an exception and the socket will be closed
1:27238b2:             waitForProtocolDetectionFinish(future, in.getReadSize());
1:27238b2:         } finally {
1:27238b2:             //call cancel in case task didn't complete which will interrupt the task
1:27238b2:             future.cancel(true);
1:27238b2:         }
1:04ee70a:         in.stop();
1:04ee70a: 
1:7e648d5:         InitBuffer initBuffer = new InitBuffer(in.getReadSize().get(), ByteBuffer.allocate(in.getReadData().length));
1:3c358b3:         initBuffer.buffer.put(in.getReadData());
1:04ee70a: 
1:3c358b3:         ProtocolInfo protocolInfo = detectProtocol(in.getReadData());
1:04ee70a: 
1:04ee70a:         if (protocolInfo.detectedTransportFactory instanceof BrokerServiceAware) {
1:04ee70a:             ((BrokerServiceAware) protocolInfo.detectedTransportFactory).setBrokerService(brokerService);
1:04ee70a:         }
1:04ee70a: 
1:04ee70a:         WireFormat format = protocolInfo.detectedWireFormatFactory.createWireFormat();
1:2a0b785:         Transport transport = createTransport(socket, format, in.getSslSession(), initBuffer, in.getInputBuffer(), protocolInfo.detectedTransportFactory);
1:04ee70a: 
1:04ee70a:         return new TransportInfo(format, transport, protocolInfo.detectedTransportFactory);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: }
1:04ee70a: 
1:04ee70a: 
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2a0b785
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     in.start();
1:                 } catch (Exception e) {
1:                     throw new IllegalStateException("Could not complete Transport start", e);
1:                 }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Transport transport = createTransport(socket, format, in.getSslSession(), initBuffer, in.getInputBuffer(), protocolInfo.detectedTransportFactory);
commit:27238b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         //Attempt to read enough bytes to detect the protocol until the timeout period
1:         //is reached
1:         Future<?> future = protocolDetectionExecutor.submit(new Runnable() {
1:                 int attempts = 0;
1:                     if(attempts > 0) {
1:                         try {
1:                             //increase sleep period each attempt to prevent high cpu usage
1:                             //if the client is hung and not sending bytes
1:                             int sleep = attempts >= 1024 ? 1024 : 4 * attempts;
1:                             Thread.sleep(sleep);
1:                         } catch (InterruptedException e) {
1:                             break;
1:                         }
1:                     }
1:                     //In the future it might be better to register a nonblocking selector
1:                     //to be told when bytes are ready
1:                     attempts++;
1:                 } while(in.getReadSize().get() < 8 && !Thread.interrupted());
1:         try {
1:             //If this fails and throws an exception and the socket will be closed
1:             waitForProtocolDetectionFinish(future, in.getReadSize());
1:         } finally {
1:             //call cancel in case task didn't complete which will interrupt the task
1:             future.cancel(true);
1:         }
commit:7e648d5
/////////////////////////////////////////////////////////////////////////
1:         InitBuffer initBuffer = new InitBuffer(in.getReadSize().get(), ByteBuffer.allocate(in.getReadData().length));
commit:9ab9488
/////////////////////////////////////////////////////////////////////////
1:         //The wireformat doesn't need properties set here because we aren't using this format during the SSL handshake
/////////////////////////////////////////////////////////////////////////
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         //We need to set the transport options on the init transport so that the SSL options are set
1:         if (transportOptions != null) {
1:             //Clone the map because we will need to set the options later on the actual transport
1:             IntrospectionSupport.setProperties(in, new HashMap<>(transportOptions));
1:         }
commit:3c358b3
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Future<?> future = executor.submit(new Runnable() {
1:             public void run() {
0:                 } while(in.getReadSize().get() < 8);
0:         waitForProtocolDetectionFinish(future, in.getReadSize());
0:         initBuffer = new InitBuffer(in.getReadSize().get(), ByteBuffer.allocate(in.getReadData().length));
1:         initBuffer.buffer.put(in.getReadData());
1:         ProtocolInfo protocolInfo = detectProtocol(in.getReadData());
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.auto.nio;
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.TimeoutException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.InactivityIOException;
1: import org.apache.activemq.transport.auto.AutoTcpTransportServer;
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
0:         ExecutorService executor = Executors.newSingleThreadExecutor();
1:         final AutoInitNioSSLTransport in = new AutoInitNioSSLTransport(wireFormatFactory.createWireFormat(), socket);
0:         Future<Integer> future = executor.submit(new Callable<Integer>() {
1:             @Override
0:             public Integer call() throws Exception {
0:                 //Wait for handshake to finish initializing
1:                 do {
1:                     in.serviceRead();
0:                 } while(in.readSize < 8);
1: 
0:                 return in.readSize;
1:             }
1:         });
1: 
0:         try {
0:             future.get(protocolDetectionTimeOut, TimeUnit.MILLISECONDS);
0:         } catch (TimeoutException e) {
0:             throw new InactivityIOException("Client timed out before wire format could be detected. " +
0:                     " 8 bytes are required to detect the protocol but only: " + in.readSize + " were sent.");
1:         }
0:         initBuffer = new InitBuffer(in.readSize, ByteBuffer.allocate(in.read.length));
0:         initBuffer.buffer.put(in.read);
0:         ProtocolInfo protocolInfo = detectProtocol(in.read);
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.broker.transport.auto.nio;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.nio.ByteBuffer;
1: import java.util.Set;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLEngine;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
0: import org.apache.activemq.broker.transport.auto.AutoTcpTransportServer;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.nio.AutoInitNioSSLTransport;
1: import org.apache.activemq.transport.nio.NIOSSLTransport;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: public class AutoNIOSSLTransportServer extends AutoTcpTransportServer {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AutoNIOSSLTransportServer.class);
1: 
1:     private SSLContext context;
1: 
1:     public AutoNIOSSLTransportServer(SSLContext context, TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory,
1:             BrokerService brokerService, Set<String> enabledProtocols) throws IOException, URISyntaxException {
1:         super(transportFactory, location, serverSocketFactory, brokerService, enabledProtocols);
1: 
1:         this.context = context;
1:     }
1: 
1:     private boolean needClientAuth;
1:     private boolean wantClientAuth;
1: 
1:     protected Transport createTransport(Socket socket, WireFormat format, SSLEngine engine,
1:             InitBuffer initBuffer, ByteBuffer inputBuffer, TcpTransportFactory detectedFactory) throws IOException {
1:         NIOSSLTransport transport = new NIOSSLTransport(format, socket, engine, initBuffer, inputBuffer);
1:         if (context != null) {
1:             transport.setSslContext(context);
1:         }
1: 
1:         transport.setNeedClientAuth(needClientAuth);
1:         transport.setWantClientAuth(wantClientAuth);
1: 
1: 
1:         return transport;
1:     }
1: 
1:     @Override
1:     protected TcpTransport createTransport(Socket socket, WireFormat format) throws IOException {
1:         throw new UnsupportedOperationException("method not supported");
1:     }
1: 
1:     @Override
1:     public boolean isSslServer() {
1:         return true;
1:     }
1: 
1:     public boolean isNeedClientAuth() {
1:         return this.needClientAuth;
1:     }
1: 
1:     public void setNeedClientAuth(boolean value) {
1:         this.needClientAuth = value;
1:     }
1: 
1:     public boolean isWantClientAuth() {
1:         return this.wantClientAuth;
1:     }
1: 
1:     public void setWantClientAuth(boolean value) {
1:         this.wantClientAuth = value;
1:     }
1: 
1: 
1:     @Override
1:     protected TransportInfo configureTransport(final TcpTransportServer server, final Socket socket) throws Exception {
1: 
1:         //The SSLEngine needs to be initialized and handshake done to get the first command and detect the format
0:         AutoInitNioSSLTransport in = new AutoInitNioSSLTransport(wireFormatFactory.createWireFormat(), socket);
1:         if (context != null) {
1:             in.setSslContext(context);
1:         }
0:         in.start();
0:         SSLEngine engine = in.getSslSession();
1: 
0:         //Wait for handshake to finish initializing
0:         byte[] read = null;
0:         do {
0:             in.serviceRead();
0:         } while((read = in.read) == null);
1: 
1:         in.stop();
1: 
0:         initBuffer = new InitBuffer(in.readSize, ByteBuffer.allocate(read.length));
0:         initBuffer.buffer.put(read);
1: 
0:         ProtocolInfo protocolInfo = detectProtocol(read);
1: 
1:         if (protocolInfo.detectedTransportFactory instanceof BrokerServiceAware) {
1:             ((BrokerServiceAware) protocolInfo.detectedTransportFactory).setBrokerService(brokerService);
1:         }
1: 
1:         WireFormat format = protocolInfo.detectedWireFormatFactory.createWireFormat();
0:         Transport transport = createTransport(socket, format, engine, initBuffer, in.getInputBuffer(), protocolInfo.detectedTransportFactory);
1: 
1:         return new TransportInfo(format, transport, protocolInfo.detectedTransportFactory);
1:     }
1: 
1: 
1: }
1: 
1: 
============================================================================