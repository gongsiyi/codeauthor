1:ba1bd26: /**
1:ba1bd26:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ba1bd26:  * contributor license agreements.  See the NOTICE file distributed with
1:ba1bd26:  * this work for additional information regarding copyright ownership.
1:ba1bd26:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ba1bd26:  * (the "License"); you may not use this file except in compliance with
1:ba1bd26:  * the License.  You may obtain a copy of the License at
1:ba1bd26:  *
1:ba1bd26:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ba1bd26:  *
1:ba1bd26:  * Unless required by applicable law or agreed to in writing, software
1:ba1bd26:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ba1bd26:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ba1bd26:  * See the License for the specific language governing permissions and
1:ba1bd26:  * limitations under the License.
2:8733d17:  */
1:8733d17: package org.apache.activemq.ra;
10:8733d17: 
1:ba1bd26: import static org.junit.Assert.assertEquals;
1:ba1bd26: import static org.junit.Assert.assertFalse;
1:ba1bd26: import static org.junit.Assert.assertNotNull;
1:ba1bd26: import static org.junit.Assert.assertTrue;
1:ba1bd26: 
1:8733d17: import java.io.ByteArrayInputStream;
1:8733d17: import java.io.ByteArrayOutputStream;
1:8733d17: import java.io.ObjectInputStream;
1:8733d17: import java.io.ObjectOutputStream;
1:ba1bd26: 
1:8733d17: import javax.jms.Connection;
1:86e9527: import javax.jms.Session;
1:86e9527: import javax.jms.TopicSubscriber;
1:f2b01a7: import javax.transaction.xa.XAResource;
1:ba1bd26: 
1:2027c87: import org.apache.activemq.ActiveMQConnection;
1:86e9527: import org.apache.activemq.ActiveMQTopicSubscriber;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:86e9527: 
1:ba1bd26: public class ActiveMQConnectionFactoryTest {
1:8733d17: 
1:ba1bd26:     private ActiveMQManagedConnectionFactory mcf;
1:ba1bd26:     private ActiveMQConnectionRequestInfo info;
1:ba1bd26:     private String url = "vm://localhost?broker.persistent=false";
1:ba1bd26:     private String user = "defaultUser";
1:ba1bd26:     private String pwd = "defaultPasswd";
1:ba1bd26: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:8733d17:         mcf = new ActiveMQManagedConnectionFactory();
1:8733d17:         info = new ActiveMQConnectionRequestInfo();
1:86e9527:         info.setServerUrl(url);
1:86e9527:         info.setUserName(user);
1:86e9527:         info.setPassword(pwd);
1:2027c87:         info.setAllPrefetchValues(new Integer(100));
3:8733d17:     }
1:f2b01a7: 
1:ba1bd26:     @Test(timeout = 60000)
1:ba1bd26:     public void testSerializability() throws Exception {
1:86e9527:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(mcf, new ConnectionManagerAdapter(), info);
1:ba1bd26: 
1:8733d17:         ByteArrayOutputStream bos = new ByteArrayOutputStream();
1:8733d17:         ObjectOutputStream oos = new ObjectOutputStream(bos);
1:8733d17:         oos.writeObject(factory);
1:8733d17:         oos.close();
1:8733d17:         byte[] byteArray = bos.toByteArray();
1:ba1bd26: 
1:8733d17:         ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(byteArray));
1:8733d17:         ActiveMQConnectionFactory deserializedFactory = (ActiveMQConnectionFactory) ois.readObject();
1:8733d17:         ois.close();
1:ba1bd26: 
1:8733d17:         Connection con = deserializedFactory.createConnection("defaultUser", "defaultPassword");
1:ba1bd26:         ActiveMQConnection connection = ((ActiveMQConnection) ((ManagedConnectionProxy) con).getManagedConnection().getPhysicalConnection());
1:2027c87:         assertEquals(100, connection.getPrefetchPolicy().getQueuePrefetch());
1:8733d17:         assertNotNull("Connection object returned by ActiveMQConnectionFactory.createConnection() is null", con);
1:c9b208f: 
1:c9b208f:         connection.close();
1:8733d17:     }
1:8733d17: 
1:ba1bd26:     @Test(timeout = 60000)
1:86e9527:     public void testOptimizeDurablePrefetch() throws Exception {
1:1e57750:         ActiveMQResourceAdapter ra = new ActiveMQResourceAdapter();
1:1e57750:         ra.setServerUrl(url);
1:1e57750:         ra.setUserName(user);
1:1e57750:         ra.setPassword(pwd);
1:1e57750: 
1:1e57750:         ra.setOptimizeDurableTopicPrefetch(0);
1:1e57750:         ra.setDurableTopicPrefetch(0);
1:1e57750: 
1:1e57750:         Connection con = ra.makeConnection();
1:1e57750: 
1:86e9527:         con.setClientID("x");
1:86e9527:         Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:86e9527:         TopicSubscriber sub = sess.createDurableSubscriber(sess.createTopic("TEST"), "x");
1:86e9527:         con.start();
1:86e9527: 
1:ba1bd26:         assertEquals(0, ((ActiveMQTopicSubscriber) sub).getPrefetchNumber());
1:c9b208f: 
1:c9b208f:         con.close();
1:86e9527:     }
1:86e9527: 
1:ba1bd26:     @Test(timeout = 60000)
1:f2b01a7:     public void testGetXAResource() throws Exception {
1:f2b01a7:         ActiveMQResourceAdapter ra = new ActiveMQResourceAdapter();
1:f2b01a7:         ra.setServerUrl(url);
1:f2b01a7:         ra.setUserName(user);
1:f2b01a7:         ra.setPassword(pwd);
1:f2b01a7: 
1:3826a23:         XAResource[] resources = ra.getXAResources(null);
1:3826a23:         assertEquals("one resource", 1, resources.length);
1:f2b01a7: 
1:3826a23:         assertEquals("no pending transactions", 0, resources[0].recover(100).length);
1:e8818fa: 
1:e8818fa:         // validate equality
1:e8818fa:         XAResource[] resource2 = ra.getXAResources(null);
1:e8818fa:         assertEquals("one resource", 1, resource2.length);
1:e8818fa:         assertTrue("isSameRM true", resources[0].isSameRM(resource2[0]));
1:e8818fa:         assertFalse("no tthe same instance", resources[0].equals(resource2[0]));
1:f2b01a7:     }
1:8733d17: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c9b208f
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:         con.close();
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: public class ActiveMQConnectionFactoryTest {
1:     private ActiveMQManagedConnectionFactory mcf;
1:     private ActiveMQConnectionRequestInfo info;
1:     private String url = "vm://localhost?broker.persistent=false";
1:     private String user = "defaultUser";
1:     private String pwd = "defaultPasswd";
1: 
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void testSerializability() throws Exception {
1: 
1: 
1: 
1:         ActiveMQConnection connection = ((ActiveMQConnection) ((ManagedConnectionProxy) con).getManagedConnection().getPhysicalConnection());
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, ((ActiveMQTopicSubscriber) sub).getPrefetchNumber());
1:     @Test(timeout = 60000)
author:gtully
-------------------------------------------------------------------------------
commit:e8818fa
/////////////////////////////////////////////////////////////////////////
1: 
1:         // validate equality
1:         XAResource[] resource2 = ra.getXAResources(null);
1:         assertEquals("one resource", 1, resource2.length);
1:         assertTrue("isSameRM true", resources[0].isSameRM(resource2[0]));
1:         assertFalse("no tthe same instance", resources[0].equals(resource2[0]));
commit:3826a23
/////////////////////////////////////////////////////////////////////////
1:         XAResource[] resources = ra.getXAResources(null);
1:         assertEquals("one resource", 1, resources.length);
1:         assertEquals("no pending transactions", 0, resources[0].recover(100).length);
author:Gary Tully
-------------------------------------------------------------------------------
commit:f2b01a7
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.XAResource;
/////////////////////////////////////////////////////////////////////////
1:     public void testGetXAResource() throws Exception {
1: 
1:         ActiveMQResourceAdapter ra = new ActiveMQResourceAdapter();
1:         ra.setServerUrl(url);
1:         ra.setUserName(user);
1:         ra.setPassword(pwd);
1: 
0:         XAResource[] resoruces = ra.getXAResources(null);
0:         assertEquals("one resource", 1, resoruces.length);
1: 
0:         assertEquals("no pending transactions", 0, resoruces[0].recover(100).length);
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1e57750
/////////////////////////////////////////////////////////////////////////
0: import java.util.Timer;
0: import javax.resource.spi.BootstrapContext;
0: import javax.resource.spi.UnavailableException;
0: import javax.resource.spi.XATerminator;
0: import javax.resource.spi.work.WorkManager;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQResourceAdapter ra = new ActiveMQResourceAdapter();
1:         ra.setServerUrl(url);
1:         ra.setUserName(user);
1:         ra.setPassword(pwd);
1: 
1:         ra.setOptimizeDurableTopicPrefetch(0);
1:         ra.setDurableTopicPrefetch(0);
1: 
1:         Connection con = ra.makeConnection();
1: 
0:         assertEquals(0, ((ActiveMQTopicSubscriber)sub).getPrefetchNumber());
commit:86e9527
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQTopicSubscriber;
/////////////////////////////////////////////////////////////////////////
1:     public void testOptimizeDurablePrefetch() throws Exception {
0:         ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
1:         info.setServerUrl(url);
1:         info.setUserName(user);
1:         info.setPassword(pwd);
0:         info.setOptimizeDurableTopicPrefetch(new Integer(500));
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(mcf, new ConnectionManagerAdapter(), info);
0:         Connection con = factory.createConnection("defaultUser", "defaultPassword");
1:         con.setClientID("x");
1:         Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber sub = sess.createDurableSubscriber(sess.createTopic("TEST"), "x");
1:         con.start();
1: 
0:         assertEquals(500, ((ActiveMQTopicSubscriber)sub).getPrefetchNumber());
1:     }
1: 
commit:2027c87
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
/////////////////////////////////////////////////////////////////////////
1:         info.setAllPrefetchValues(new Integer(100));
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnection connection = ((ActiveMQConnection)((ManagedConnectionProxy)con).getManagedConnection().getPhysicalConnection());
1:         assertEquals(100, connection.getPrefetchPolicy().getQueuePrefetch());
author:Robert Davies
-------------------------------------------------------------------------------
commit:8733d17
/////////////////////////////////////////////////////////////////////////
0: /*
0:  *  Copyright 2008 hak8fe.
0:  * 
0:  *  Licensed under the Apache License, Version 2.0 (the "License");
0:  *  you may not use this file except in compliance with the License.
0:  *  You may obtain a copy of the License at
0:  * 
0:  *       http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  *  under the License.
1:  */
1: 
1: package org.apache.activemq.ra;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: import javax.jms.Connection;
0: import junit.framework.TestCase;
1: 
0: /**
0:  *
0:  * @author hak8fe
1:  */
0: public class ActiveMQConnectionFactoryTest extends TestCase {
1:     
0:     ActiveMQManagedConnectionFactory mcf;
0:     ActiveMQConnectionRequestInfo info;
0:     String url = "vm://localhost";
0:     String user = "defaultUser";
0:     String pwd = "defaultPasswd";
1:     
0:     public ActiveMQConnectionFactoryTest(String testName) {
0:         super(testName);
1:     }            
1: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
1:         mcf = new ActiveMQManagedConnectionFactory();
1:         info = new ActiveMQConnectionRequestInfo();
0:         info.setServerUrl(url);
0:         info.setUserName(user);
0:         info.setPassword(pwd);
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:     }
1: 
0:     public void testSerializability() throws Exception
0:     {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(mcf, new ConnectionManagerAdapter(), info);
1:         
1:         ByteArrayOutputStream bos = new ByteArrayOutputStream();
1:         ObjectOutputStream oos = new ObjectOutputStream(bos);
1:         oos.writeObject(factory);
1:         oos.close();
1:         byte[] byteArray = bos.toByteArray();
1:         
1:         ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(byteArray));
1:         ActiveMQConnectionFactory deserializedFactory = (ActiveMQConnectionFactory) ois.readObject();
1:         ois.close();
1:         
1:         Connection con = deserializedFactory.createConnection("defaultUser", "defaultPassword");
1:         assertNotNull("Connection object returned by ActiveMQConnectionFactory.createConnection() is null", con);
1:     }
1: 
1: }
============================================================================