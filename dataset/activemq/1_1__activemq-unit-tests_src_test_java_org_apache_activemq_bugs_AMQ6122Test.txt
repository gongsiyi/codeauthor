1:66cfc7b: /**
1:66cfc7b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:66cfc7b:  * contributor license agreements.  See the NOTICE file distributed with
1:66cfc7b:  * this work for additional information regarding copyright ownership.
1:66cfc7b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:66cfc7b:  * (the "License"); you may not use this file except in compliance with
1:66cfc7b:  * the License.  You may obtain a copy of the License at
1:66cfc7b:  *
1:66cfc7b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:66cfc7b:  *
1:66cfc7b:  * Unless required by applicable law or agreed to in writing, software
1:66cfc7b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:66cfc7b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:66cfc7b:  * See the License for the specific language governing permissions and
1:66cfc7b:  * limitations under the License.
1:66cfc7b:  */
1:66cfc7b: package org.apache.activemq.bugs;
1:66cfc7b: 
1:66cfc7b: import static org.junit.Assert.assertNotNull;
1:66cfc7b: 
1:66cfc7b: import java.util.ArrayList;
1:66cfc7b: import java.util.List;
1:66cfc7b: 
1:66cfc7b: import javax.jms.JMSException;
1:66cfc7b: import javax.jms.Message;
1:66cfc7b: import javax.jms.MessageConsumer;
1:66cfc7b: import javax.jms.Session;
1:66cfc7b: 
1:66cfc7b: import org.apache.activemq.ActiveMQConnection;
1:66cfc7b: import org.apache.activemq.ActiveMQConnectionFactory;
1:66cfc7b: import org.apache.activemq.ActiveMQMessageProducer;
1:66cfc7b: import org.apache.activemq.ActiveMQSession;
1:66cfc7b: import org.apache.activemq.broker.BrokerService;
1:66cfc7b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:66cfc7b: import org.apache.activemq.broker.region.policy.PolicyMap;
1:66cfc7b: import org.apache.activemq.command.ActiveMQQueue;
1:66cfc7b: import org.apache.activemq.command.ActiveMQTextMessage;
1:66cfc7b: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1:66cfc7b: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:66cfc7b: import org.apache.activemq.util.IOHelper;
1:66cfc7b: import org.apache.derby.jdbc.EmbeddedDataSource;
1:66cfc7b: import org.junit.After;
1:66cfc7b: import org.junit.Before;
1:66cfc7b: import org.junit.Test;
1:66cfc7b: 
1:66cfc7b: public class AMQ6122Test {
1:66cfc7b: 
1:66cfc7b:     private BrokerService brokerService;
1:66cfc7b:     private EmbeddedDataSource embeddedDataSource;
1:66cfc7b: 
1:66cfc7b:     @Before
1:66cfc7b:     public void setUp() throws Exception {
1:66cfc7b:         brokerService = new BrokerService();
1:66cfc7b:         brokerService.deleteAllMessages();
1:66cfc7b: 
1:66cfc7b:         // turn off the cache
1:66cfc7b:         PolicyMap policyMap = new PolicyMap();
1:66cfc7b:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:66cfc7b:         PolicyEntry pe = new PolicyEntry();
1:66cfc7b: 
1:66cfc7b:         pe.setUseCache(false);
1:66cfc7b:         pe.setExpireMessagesPeriod(0);
1:66cfc7b: 
1:66cfc7b:         pe.setQueue(">");
1:66cfc7b:         entries.add(pe);
1:66cfc7b:         policyMap.setPolicyEntries(entries);
1:66cfc7b:         brokerService.setDestinationPolicy(policyMap);
1:66cfc7b: 
1:66cfc7b:         embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
1:66cfc7b:         embeddedDataSource.setCreateDatabase("create");
1:66cfc7b:         embeddedDataSource.getConnection().close();
1:66cfc7b: 
1:66cfc7b:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:66cfc7b:         jdbc.setDataSource(embeddedDataSource);
1:66cfc7b:         brokerService.setPersistenceAdapter(jdbc);
1:66cfc7b: 
1:66cfc7b:         jdbc.deleteAllMessages();
1:66cfc7b: 
1:66cfc7b:         brokerService.addConnector("tcp://localhost:0");
1:66cfc7b:         brokerService.setAdvisorySupport(false);
1:66cfc7b:         brokerService.start();
1:66cfc7b:         brokerService.waitUntilStarted();
1:66cfc7b:     }
1:66cfc7b: 
1:66cfc7b:     @After
1:66cfc7b:     public void tearDown() throws Exception {
1:66cfc7b:         if (brokerService != null) {
1:66cfc7b:             brokerService.stop();
1:66cfc7b:             brokerService.waitUntilStopped();
1:66cfc7b:         }
1:66cfc7b: 
1:66cfc7b:         if (embeddedDataSource != null) {
1:66cfc7b:             DataSourceServiceSupport.shutdownDefaultDataSource(embeddedDataSource);
1:66cfc7b:         }
1:66cfc7b:     }
1:66cfc7b: 
1:66cfc7b:     @Test
1:66cfc7b:     public void deadlockOnDuplicateInDLQ() throws Exception {
1:66cfc7b: 
1:66cfc7b:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString()
1:66cfc7b:             + "?wireFormat.maxInactivityDuration=0");
1:66cfc7b:         connectionFactory.setCopyMessageOnSend(false);
1:66cfc7b:         connectionFactory.setWatchTopicAdvisories(false);
1:66cfc7b: 
1:66cfc7b:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:66cfc7b:         activeMQConnection.start();
1:66cfc7b:         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:66cfc7b: 
1:66cfc7b:         ActiveMQQueue dest = new ActiveMQQueue("ActiveMQ.DLQ");
1:66cfc7b: 
1:66cfc7b:         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:66cfc7b:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:66cfc7b:         message.setDestination(dest);
1:66cfc7b:         activeMQMessageProducer.send(message, null);
1:66cfc7b: 
1:66cfc7b:         // send a duplicate
1:66cfc7b:         activeMQConnection.syncSendPacket(message);
1:66cfc7b: 
1:66cfc7b:         // send another "real" message. block the send on the broker (use
1:66cfc7b:         // asyncSend to allow client to continue)
1:66cfc7b:         message.setCorrelationId("blockme");
1:66cfc7b:         SendTask sendTask = new SendTask(activeMQMessageProducer, message);
1:66cfc7b:         new Thread(sendTask).start();
1:66cfc7b: 
1:66cfc7b:         // create consumer to trigger fill batch (no cache)
1:66cfc7b:         // release the previous send.
1:66cfc7b:         ActiveMQConnection connectionForConsumer = (ActiveMQConnection) connectionFactory.createConnection();
1:66cfc7b:         connectionForConsumer.start();
1:66cfc7b:         ActiveMQSession sessionForConsumer = (ActiveMQSession) connectionForConsumer.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:66cfc7b:         MessageConsumer messageConsumer = sessionForConsumer.createConsumer(dest);
1:66cfc7b: 
1:66cfc7b:         Message received = messageConsumer.receive();
1:66cfc7b:         assertNotNull("Got message", received);
1:66cfc7b:         messageConsumer.close();
1:66cfc7b: 
1:66cfc7b:         activeMQConnection.close();
1:66cfc7b:     }
1:66cfc7b: 
1:66cfc7b:     class SendTask implements Runnable {
1:66cfc7b: 
1:66cfc7b:         private final Message message;
1:66cfc7b:         private final ActiveMQMessageProducer producer;
1:66cfc7b: 
1:66cfc7b:         SendTask(ActiveMQMessageProducer producer, Message message) {
1:66cfc7b:             this.producer = producer;
1:66cfc7b:             this.message = message;
1:66cfc7b:         }
1:66cfc7b: 
1:66cfc7b:         @Override
1:66cfc7b:         public void run() {
1:66cfc7b:             try {
1:66cfc7b:                 producer.send(message, null);
1:66cfc7b:             } catch (JMSException e) {
1:66cfc7b:                 e.printStackTrace();
1:66cfc7b:             }
1:66cfc7b:         }
1:66cfc7b:     }
1:66cfc7b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:66cfc7b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageProducer;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ6122Test {
1: 
1:     private BrokerService brokerService;
1:     private EmbeddedDataSource embeddedDataSource;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.deleteAllMessages();
1: 
1:         // turn off the cache
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         pe.setUseCache(false);
1:         pe.setExpireMessagesPeriod(0);
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
1:         embeddedDataSource.setCreateDatabase("create");
1:         embeddedDataSource.getConnection().close();
1: 
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:         jdbc.setDataSource(embeddedDataSource);
1:         brokerService.setPersistenceAdapter(jdbc);
1: 
1:         jdbc.deleteAllMessages();
1: 
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1: 
1:         if (embeddedDataSource != null) {
1:             DataSourceServiceSupport.shutdownDefaultDataSource(embeddedDataSource);
1:         }
1:     }
1: 
1:     @Test
1:     public void deadlockOnDuplicateInDLQ() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString()
1:             + "?wireFormat.maxInactivityDuration=0");
1:         connectionFactory.setCopyMessageOnSend(false);
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:         activeMQConnection.start();
1:         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         ActiveMQQueue dest = new ActiveMQQueue("ActiveMQ.DLQ");
1: 
1:         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setDestination(dest);
1:         activeMQMessageProducer.send(message, null);
1: 
1:         // send a duplicate
1:         activeMQConnection.syncSendPacket(message);
1: 
1:         // send another "real" message. block the send on the broker (use
1:         // asyncSend to allow client to continue)
1:         message.setCorrelationId("blockme");
1:         SendTask sendTask = new SendTask(activeMQMessageProducer, message);
1:         new Thread(sendTask).start();
1: 
1:         // create consumer to trigger fill batch (no cache)
1:         // release the previous send.
1:         ActiveMQConnection connectionForConsumer = (ActiveMQConnection) connectionFactory.createConnection();
1:         connectionForConsumer.start();
1:         ActiveMQSession sessionForConsumer = (ActiveMQSession) connectionForConsumer.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer messageConsumer = sessionForConsumer.createConsumer(dest);
1: 
1:         Message received = messageConsumer.receive();
1:         assertNotNull("Got message", received);
1:         messageConsumer.close();
1: 
1:         activeMQConnection.close();
1:     }
1: 
1:     class SendTask implements Runnable {
1: 
1:         private final Message message;
1:         private final ActiveMQMessageProducer producer;
1: 
1:         SendTask(ActiveMQMessageProducer producer, Message message) {
1:             this.producer = producer;
1:             this.message = message;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 producer.send(message, null);
1:             } catch (JMSException e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: }
============================================================================