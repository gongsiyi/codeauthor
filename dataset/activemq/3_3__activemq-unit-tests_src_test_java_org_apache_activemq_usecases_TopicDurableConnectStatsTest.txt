1:d41f40a: /**
1:d41f40a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d41f40a:  * contributor license agreements.  See the NOTICE file distributed with
1:d41f40a:  * this work for additional information regarding copyright ownership.
1:d41f40a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d41f40a:  * (the "License"); you may not use this file except in compliance with
1:d41f40a:  * the License.  You may obtain a copy of the License at
1:d41f40a:  *
1:d41f40a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d41f40a:  *
1:d41f40a:  * Unless required by applicable law or agreed to in writing, software
1:d41f40a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d41f40a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d41f40a:  * See the License for the specific language governing permissions and
1:d41f40a:  * limitations under the License.
1:d41f40a:  */
1:d41f40a: package org.apache.activemq.usecases;
1:d41f40a: 
1:d41f40a: import java.io.IOException;
1:d41f40a: import java.lang.management.ManagementFactory;
1:d41f40a: import java.util.Date;
1:d41f40a: import java.util.Vector;
1:cb7b657: 
1:d41f40a: import javax.jms.Connection;
1:d41f40a: import javax.jms.DeliveryMode;
1:d41f40a: import javax.jms.JMSException;
1:d41f40a: import javax.jms.Message;
1:d41f40a: import javax.jms.MessageConsumer;
1:d41f40a: import javax.jms.MessageListener;
1:d41f40a: import javax.jms.MessageProducer;
1:d41f40a: import javax.jms.Session;
1:d41f40a: import javax.jms.TextMessage;
1:d41f40a: import javax.management.MBeanServerConnection;
1:d41f40a: import javax.management.MBeanServerInvocationHandler;
1:d41f40a: import javax.management.MalformedObjectNameException;
1:d41f40a: import javax.management.ObjectName;
1:4743a20: 
1:d41f40a: import junit.framework.Test;
1:4743a20: 
1:d41f40a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d41f40a: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:d41f40a: import org.apache.activemq.broker.BrokerFactory;
1:d41f40a: import org.apache.activemq.broker.BrokerService;
1:d41f40a: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:d41f40a: import org.apache.activemq.command.ActiveMQTopic;
1:d41f40a: import org.apache.activemq.util.Wait;
1:d41f40a: import org.slf4j.Logger;
1:d41f40a: import org.slf4j.LoggerFactory;
1:d41f40a: 
1:d41f40a: public class TopicDurableConnectStatsTest extends org.apache.activemq.TestSupport {
1:d41f40a: 
1:d41f40a:     private static final Logger LOG = LoggerFactory.getLogger(TopicDurableConnectStatsTest.class);
1:d41f40a:     private BrokerService broker;
1:d41f40a:     private ActiveMQTopic topic;
1:4743a20:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
1:4743a20:     private final int messageSize = 4000;
1:d41f40a:     protected MBeanServerConnection mbeanServer;
1:d41f40a:     protected String domain = "org.apache.activemq";
1:d41f40a:     private ActiveMQConnectionFactory connectionFactory = null;
1:d41f40a:     final int numMessages = 20;
1:d41f40a: 
1:d41f40a:     private static Session session2 = null;
1:d41f40a: 
1:4743a20:     @Override
1:d41f40a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:d41f40a: 
1:d41f40a:         connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:d41f40a: 
1:d41f40a:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:d41f40a:         prefetchPolicy.setAll(10);
1:d41f40a:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:d41f40a: 
1:d41f40a:         connectionFactory.setWatchTopicAdvisories(false);
1:d41f40a:         return connectionFactory;
1:d41f40a:     }
1:d41f40a: 
2:d41f40a:     @Override
1:d41f40a:     protected Connection createConnection() throws Exception {
1:d41f40a:         return createConnection("cliName");
1:d41f40a:     }
1:d41f40a: 
1:d41f40a:     protected Connection createConnection(String name) throws Exception {
1:d41f40a:         Connection con = super.createConnection();
1:d41f40a:         con.setClientID(name);
1:d41f40a:         con.start();
1:d41f40a:         return con;
1:d41f40a:     }
1:d41f40a: 
1:d41f40a:     public static Test suite() {
1:d41f40a:         return suite(TopicDurableConnectStatsTest.class);
1:d41f40a:     }
1:d41f40a: 
1:4743a20:     @Override
1:d41f40a:     protected void setUp() throws Exception {
1:d41f40a:         exceptions.clear();
1:d41f40a:         topic = (ActiveMQTopic) createDestination();
1:d41f40a: 
1:d41f40a:         createBroker();
1:d41f40a:         mbeanServer = ManagementFactory.getPlatformMBeanServer();
1:d41f40a:         super.setUp();
1:d41f40a:     }
1:d41f40a: 
1:4743a20:     @Override
1:d41f40a:     protected void tearDown() throws Exception {
1:d41f40a:         super.tearDown();
1:d41f40a:         destroyBroker();
1:d41f40a:     }
1:d41f40a: 
1:d41f40a:     private void createBroker() throws Exception {
1:d41f40a:         createBroker(true);
1:d41f40a:     }
1:d41f40a: 
1:d41f40a:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:d41f40a:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:d41f40a:         broker.setBrokerName(getName(true));
1:d41f40a:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:d41f40a:         broker.setAdvisorySupport(false);
1:d41f40a:         broker.addConnector("tcp://0.0.0.0:0");
1:d41f40a: 
1:d41f40a:         setDefaultPersistenceAdapter(broker);
1:d41f40a:         broker.start();
1:d41f40a:     }
1:d41f40a: 
1:d41f40a:     private void destroyBroker() throws Exception {
1:d41f40a:         if (broker != null)
1:d41f40a:             broker.stop();
1:d41f40a:     }
1:d41f40a: 
1:d41f40a:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:d41f40a:         ObjectName objectName = new ObjectName(name);
1:d41f40a: 
1:d41f40a:         LOG.info("** Looking for " + name);
1:d41f40a:         try {
1:d41f40a:             if (mbeanServer.isRegistered(objectName)) {
1:d41f40a:                 LOG.info("Bean Registered: " + objectName);
1:d41f40a:             } else {
1:d41f40a:                 LOG.info("Couldn't find Mbean! " + objectName);
1:d41f40a: 
1:d41f40a:             }
1:d41f40a:         } catch (IOException e) {
1:d41f40a:             e.printStackTrace();
1:d41f40a:         }
1:d41f40a:         return objectName;
1:d41f40a:     }
1:d41f40a: 
1:d41f40a:     public void testPendingTopicStat() throws Exception {
1:d41f40a: 
1:d41f40a:         Connection consumerCon = createConnection("cliId1");
1:d41f40a:         Session consumerSession = consumerCon.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:d41f40a:         MessageConsumer consumer1 = consumerSession.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:4743a20:         assertNotNull(consumer1);
1:d41f40a: 
1:d41f40a:         DurableSubscriptionViewMBean subscriber1 = null;
1:d41f40a: 
1:cb7b657:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=" + getName(true) + ",destinationType=Topic,destinationName=" + topic.getTopicName() + ",endpoint=Consumer,clientId=cliId1,consumerId=*");
1:cb7b657: 
1:cb7b657:         java.util.Set<ObjectName>set = mbeanServer.queryNames(query,null);
1:cb7b657: 
1:cb7b657:         ObjectName subscriberObjName1 = set.iterator().next();
1:cb7b657:         subscriber1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, subscriberObjName1, DurableSubscriptionViewMBean.class, true);
1:d41f40a: 
1:d41f40a:         LOG.info("Beginning Pending Queue Size count: " + subscriber1.getPendingQueueSize());
1:d41f40a:         LOG.info("Prefetch Limit: " + subscriber1.getPrefetchSize());
1:d41f40a: 
1:d41f40a:         assertEquals("no pending", 0, subscriber1.getPendingQueueSize());
1:d41f40a:         assertEquals("Prefetch Limit ", 10, subscriber1.getPrefetchSize());
1:d41f40a: 
1:d41f40a: 
1:d41f40a:         Connection producerCon = createConnection("x");
1:d41f40a:         Session producerSessions = producerCon.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:d41f40a: 
1:d41f40a: 
1:d41f40a:         MessageProducer producer = producerSessions.createProducer(topic);
1:d41f40a:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:d41f40a: 
1:d41f40a:         int i = 0;
1:d41f40a:         for (; i < numMessages; i++) {
1:d41f40a: 
1:d41f40a:             if (i == 15) {
1:d41f40a:                 // kill consumer
1:d41f40a: 
1:d41f40a:                 LOG.info("Killing consumer at 15");
1:d41f40a:                 consumerSession.close();
1:d41f40a:                 consumerCon.close();
1:d41f40a:             }
1:d41f40a: 
1:d41f40a:             TextMessage message = producerSessions.createTextMessage(createMessageText(i));
1:d41f40a:             message.setJMSExpiration(0);
1:d41f40a:             message.setStringProperty("filter", "true");
1:d41f40a:             producer.send(topic, message);
1:d41f40a:             producerSessions.commit();
1:d41f40a: 
1:d41f40a:         }
1:d41f40a:         LOG.info("Sent " + i + " messages in total");
1:d41f40a:         producerCon.close();
1:d41f40a: 
1:d41f40a:         LOG.info("Pending Queue Size count: " + subscriber1.getPendingQueueSize());
1:d41f40a:         assertEquals("pending as expected", 20, subscriber1.getPendingQueueSize());
1:d41f40a: 
1:d41f40a:         LOG.info("Re-connect client and consume messages");
1:d41f40a:         Connection con2 = createConnection("cliId1");
1:d41f40a:         session2 = con2.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:d41f40a:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:d41f40a: 
1:d41f40a: 
1:d41f40a:         final Listener listener = new Listener();
1:d41f40a:         consumer2.setMessageListener(listener);
1:d41f40a: 
1:d41f40a:         assertTrue("received all sent", Wait.waitFor(new Wait.Condition() {
1:4743a20:             @Override
1:d41f40a:             public boolean isSatisified() throws Exception {
1:d41f40a:                 return numMessages == listener.count;
1:d41f40a:             }
1:d41f40a:         }));
1:d41f40a: 
1:d41f40a:         LOG.info("Received: " + listener.count);
1:d41f40a: 
1:d41f40a:         int pq = subscriber1.getPendingQueueSize();
1:d41f40a:         LOG.info("Pending Queue Size count: " + pq);
1:d41f40a:         assertEquals("Pending queue after consumed", 0, pq);
1:d41f40a: 
1:d41f40a:         session2.close();
1:d41f40a:         con2.close();
1:d41f40a:         LOG.info("FINAL Pending Queue Size count (after consumer close): " + subscriber1.getPendingQueueSize());
1:d41f40a:     }
1:d41f40a: 
1:d41f40a: 
1:d41f40a:     private String createMessageText(int index) {
1:d41f40a:         StringBuffer buffer = new StringBuffer(messageSize);
1:d41f40a:         buffer.append("Message: " + index + " sent at: " + new Date());
1:d41f40a:         if (buffer.length() > messageSize) {
1:d41f40a:             return buffer.substring(0, messageSize);
1:d41f40a:         }
1:d41f40a:         for (int i = buffer.length(); i < messageSize; i++) {
1:d41f40a:             buffer.append(' ');
1:d41f40a:         }
1:d41f40a:         return buffer.toString();
1:d41f40a:     }
1:d41f40a: 
1:d41f40a: 
1:d41f40a:     public static class Listener implements MessageListener {
1:d41f40a:         int count = 0;
1:d41f40a:         String id = null;
1:d41f40a: 
1:d41f40a:         Listener() {
1:d41f40a:         }
1:d41f40a: 
1:4743a20:         @Override
1:d41f40a:         public void onMessage(Message message) {
1:d41f40a:             count++;
1:d41f40a:             try {
1:d41f40a:                 session2.commit();
1:d41f40a:             } catch (JMSException e1) {
1:d41f40a:                 e1.printStackTrace();
1:d41f40a:             }
1:d41f40a: 
1:d41f40a:             if (id != null) {
1:d41f40a:                 try {
1:d41f40a:                     LOG.info(id + ", " + message.getJMSMessageID());
1:d41f40a:                 } catch (Exception ignored) {
1:d41f40a:                 }
1:d41f40a:             }
1:d41f40a: 
1:d41f40a:             try {
1:d41f40a:                 Thread.sleep(2);
1:d41f40a:             } catch (InterruptedException e) {
1:d41f40a:                 e.printStackTrace();
1:d41f40a:             }
1:d41f40a:         }
1:d41f40a:     }
1:d41f40a: }
1:d41f40a: 
1:d41f40a: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
1:     private final int messageSize = 4000;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(consumer1);
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=" + getName(true) + ",destinationType=Topic,destinationName=" + topic.getTopicName() + ",endpoint=Consumer,clientId=cliId1,consumerId=*");
1: 
1:         java.util.Set<ObjectName>set = mbeanServer.queryNames(query,null);
1: 
1:         ObjectName subscriberObjName1 = set.iterator().next();
1:         subscriber1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, subscriberObjName1, DurableSubscriptionViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:d41f40a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.IOException;
1: import java.lang.management.ManagementFactory;
1: import java.util.Date;
1: import java.util.Vector;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.MBeanServerConnection;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class TopicDurableConnectStatsTest extends org.apache.activemq.TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicDurableConnectStatsTest.class);
1:     private BrokerService broker;
1:     private ActiveMQTopic topic;
0:     private Vector<Throwable> exceptions = new Vector<Throwable>();
0:     private int messageSize = 4000;
1:     protected MBeanServerConnection mbeanServer;
1:     protected String domain = "org.apache.activemq";
1:     private ActiveMQConnectionFactory connectionFactory = null;
1:     final int numMessages = 20;
1: 
1:     private static Session session2 = null;
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1: 
1:         connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1: 
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setAll(10);
1:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1: 
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         return connectionFactory;
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         return createConnection("cliName");
1:     }
1: 
1:     protected Connection createConnection(String name) throws Exception {
1:         Connection con = super.createConnection();
1:         con.setClientID(name);
1:         con.start();
1:         return con;
1:     }
1: 
1:     public static Test suite() {
1:         return suite(TopicDurableConnectStatsTest.class);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         exceptions.clear();
1:         topic = (ActiveMQTopic) createDestination();
1: 
1:         createBroker();
1:         mbeanServer = ManagementFactory.getPlatformMBeanServer();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:         broker.setBrokerName(getName(true));
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         broker.setAdvisorySupport(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1: 
1:         setDefaultPersistenceAdapter(broker);
1:         broker.start();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1: 
1:         LOG.info("** Looking for " + name);
1:         try {
1:             if (mbeanServer.isRegistered(objectName)) {
1:                 LOG.info("Bean Registered: " + objectName);
1:             } else {
1:                 LOG.info("Couldn't find Mbean! " + objectName);
1: 
1:             }
1:         } catch (IOException e) {
1:             e.printStackTrace();
1:         }
1:         return objectName;
1:     }
1: 
1:     public void testPendingTopicStat() throws Exception {
1: 
1:         Connection consumerCon = createConnection("cliId1");
1:         Session consumerSession = consumerCon.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer1 = consumerSession.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1: 
1:         DurableSubscriptionViewMBean subscriber1 = null;
1: 
0:         ObjectName subscriberObjName1 = assertRegisteredObjectName(domain + ":BrokerName=" + getName(true) + ",Type=Subscription,persistentMode=Durable,subscriptionID=SubsId,destinationType=Topic,destinationName=" + topic.getTopicName() + ",clientId=cliId1");
0:         subscriber1 = (DurableSubscriptionViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, subscriberObjName1, DurableSubscriptionViewMBean.class, true);
1: 
1:         LOG.info("Beginning Pending Queue Size count: " + subscriber1.getPendingQueueSize());
1:         LOG.info("Prefetch Limit: " + subscriber1.getPrefetchSize());
1: 
1:         assertEquals("no pending", 0, subscriber1.getPendingQueueSize());
1:         assertEquals("Prefetch Limit ", 10, subscriber1.getPrefetchSize());
1: 
1: 
1:         Connection producerCon = createConnection("x");
1:         Session producerSessions = producerCon.createSession(true, Session.AUTO_ACKNOWLEDGE);
1: 
1: 
1:         MessageProducer producer = producerSessions.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         int i = 0;
1:         for (; i < numMessages; i++) {
1: 
1:             if (i == 15) {
1:                 // kill consumer
1: 
1:                 LOG.info("Killing consumer at 15");
1:                 consumerSession.close();
1:                 consumerCon.close();
1:             }
1: 
1:             TextMessage message = producerSessions.createTextMessage(createMessageText(i));
1:             message.setJMSExpiration(0);
1:             message.setStringProperty("filter", "true");
1:             producer.send(topic, message);
1:             producerSessions.commit();
1: 
1:         }
1:         LOG.info("Sent " + i + " messages in total");
1:         producerCon.close();
1: 
1:         LOG.info("Pending Queue Size count: " + subscriber1.getPendingQueueSize());
1:         assertEquals("pending as expected", 20, subscriber1.getPendingQueueSize());
1: 
1:         LOG.info("Re-connect client and consume messages");
1:         Connection con2 = createConnection("cliId1");
1:         session2 = con2.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1: 
1: 
1:         final Listener listener = new Listener();
1:         consumer2.setMessageListener(listener);
1: 
1:         assertTrue("received all sent", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return numMessages == listener.count;
1:             }
1:         }));
1: 
1:         LOG.info("Received: " + listener.count);
1: 
1:         int pq = subscriber1.getPendingQueueSize();
1:         LOG.info("Pending Queue Size count: " + pq);
1:         assertEquals("Pending queue after consumed", 0, pq);
1: 
1:         session2.close();
1:         con2.close();
1:         LOG.info("FINAL Pending Queue Size count (after consumer close): " + subscriber1.getPendingQueueSize());
1:     }
1: 
1: 
1:     private String createMessageText(int index) {
1:         StringBuffer buffer = new StringBuffer(messageSize);
1:         buffer.append("Message: " + index + " sent at: " + new Date());
1:         if (buffer.length() > messageSize) {
1:             return buffer.substring(0, messageSize);
1:         }
1:         for (int i = buffer.length(); i < messageSize; i++) {
1:             buffer.append(' ');
1:         }
1:         return buffer.toString();
1:     }
1: 
1: 
1:     public static class Listener implements MessageListener {
1:         int count = 0;
1:         String id = null;
1: 
1:         Listener() {
1:         }
1: 
1:         public void onMessage(Message message) {
1:             count++;
1:             try {
1:                 session2.commit();
1:             } catch (JMSException e1) {
1:                 e1.printStackTrace();
1:             }
1: 
1:             if (id != null) {
1:                 try {
1:                     LOG.info(id + ", " + message.getJMSMessageID());
1:                 } catch (Exception ignored) {
1:                 }
1:             }
1: 
1:             try {
1:                 Thread.sleep(2);
1:             } catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: }
1: 
1: 
============================================================================