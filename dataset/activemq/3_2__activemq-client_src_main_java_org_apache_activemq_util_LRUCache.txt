1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
4:d29ca2a: 
1:d29ca2a: import java.util.LinkedHashMap;
1:d29ca2a: import java.util.Map;
1:f812e34: 
1:d29ca2a: /**
1:d29ca2a:  * A Simple LRU Cache
1:b0c2a40:  * 
1:d29ca2a:  * 
1:f812e34:  * @param <K>
1:f812e34:  * @param <V>
1:d29ca2a:  */
1:d29ca2a: 
1:0afb7f9: public class LRUCache<K, V> extends LinkedHashMap<K, V> {
1:f812e34:     private static final long serialVersionUID = -342098639681884413L;
1:f812e34:     protected int maxCacheSize = 10000;
1:d29ca2a: 
1:d29ca2a:     /**
1:69a5e00:      * Default constructor for an LRU Cache The default capacity is 10000
1:d29ca2a:      */
1:f812e34:     public LRUCache() {
1:69a5e00:         this(0,10000, 0.75f, true);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:791d78b:      * Constructs a LRUCache with a maximum capacity
1:f812e34:      * 
1:791d78b:      * @param maximumCacheSize
1:791d78b:      */
1:791d78b:     public LRUCache(int maximumCacheSize) {
1:69a5e00:         this(0, maximumCacheSize, 0.75f, true);
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     /**
1:f812e34:      * Constructs an empty <tt>LRUCache</tt> instance with the specified
1:f812e34:      * initial capacity, maximumCacheSize,load factor and ordering mode.
1:f812e34:      * 
1:f812e34:      * @param initialCapacity the initial capacity.
1:f812e34:      * @param maximumCacheSize
1:f812e34:      * @param loadFactor the load factor.
1:f812e34:      * @param accessOrder the ordering mode - <tt>true</tt> for access-order,
1:f812e34:      *                <tt>false</tt> for insertion-order.
1:f812e34:      * @throws IllegalArgumentException if the initial capacity is negative or
1:69a5e00:      *                 the load factor is non-positive.
1:f812e34:      */
1:f812e34: 
1:f812e34:     public LRUCache(int initialCapacity, int maximumCacheSize, float loadFactor, boolean accessOrder) {
1:f812e34:         super(initialCapacity, loadFactor, accessOrder);
1:f812e34:         this.maxCacheSize = maximumCacheSize;
1:f812e34:     }
1:d29ca2a: 
1:791d78b:     /**
1:d29ca2a:      * @return Returns the maxCacheSize.
1:d29ca2a:      */
1:f812e34:     public int getMaxCacheSize() {
1:d29ca2a:         return maxCacheSize;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param maxCacheSize The maxCacheSize to set.
1:d29ca2a:      */
1:f812e34:     public void setMaxCacheSize(int maxCacheSize) {
1:f812e34:         this.maxCacheSize = maxCacheSize;
1:d29ca2a:     }
1:f812e34: 
1:69a5e00:     protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {
1:d95658f:         if( size() > maxCacheSize ) {
1:d95658f:             onCacheEviction(eldest);
1:d95658f:             return true;
1:d95658f:         }
1:d95658f:         return false;
1:d29ca2a:     }
1:d95658f: 
1:d95658f:     protected void onCacheEviction(Map.Entry<K,V> eldest) {
1:d95658f:     }
1:d95658f: 
1:791d78b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:d95658f
/////////////////////////////////////////////////////////////////////////
1:         if( size() > maxCacheSize ) {
1:             onCacheEviction(eldest);
1:             return true;
1:         }
1:         return false;
1: 
1:     protected void onCacheEviction(Map.Entry<K,V> eldest) {
1:     }
1: 
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:  * @param <K>
1:  * @param <V>
1:     private static final long serialVersionUID = -342098639681884413L;
1:     protected int maxCacheSize = 10000;
0:      * Default constructorfor an LRU Cache The default capacity is 10000
1:     public LRUCache() {
0:         super(1000, 0.75f, true);
1: 
1:      * 
0:         this(maximumCacheSize, maximumCacheSize, 0.75f, true);
1:     /**
1:      * Constructs an empty <tt>LRUCache</tt> instance with the specified
1:      * initial capacity, maximumCacheSize,load factor and ordering mode.
1:      * 
1:      * @param initialCapacity the initial capacity.
1:      * @param maximumCacheSize
1:      * @param loadFactor the load factor.
1:      * @param accessOrder the ordering mode - <tt>true</tt> for access-order,
1:      *                <tt>false</tt> for insertion-order.
1:      * @throws IllegalArgumentException if the initial capacity is negative or
0:      *                 the load factor is nonpositive.
1:      */
1: 
1:     public LRUCache(int initialCapacity, int maximumCacheSize, float loadFactor, boolean accessOrder) {
1:         super(initialCapacity, loadFactor, accessOrder);
1:         this.maxCacheSize = maximumCacheSize;
1:     }
1:     public int getMaxCacheSize() {
1:      * @param maxCacheSize The maxCacheSize to set.
1:     public void setMaxCacheSize(int maxCacheSize) {
1:         this.maxCacheSize = maxCacheSize;
1: 
0:     protected boolean removeEldestEntry(Map.Entry entry) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
1: public class LRUCache<K, V> extends LinkedHashMap<K, V> {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: /**
1:  * A Simple LRU Cache
1:  * 
0:  * @version $Revision$
1:  */
1: 
0: public class LRUCache extends LinkedHashMap{
0:     private static final long serialVersionUID=-342098639681884413L;
0:     protected int maxCacheSize=10000;
1: 
1:     
1:     /**
0:      * Constructs LRU Cache
1:      * 
1:      */
0:     public LRUCache(){
0:         super(1000,0.75f,true);
1:     }
1: 
1:     
1: 
1:     /**
1:      * @return Returns the maxCacheSize.
1:      */
0:     public int getMaxCacheSize(){
1:         return maxCacheSize;
1:     }
1: 
1:     /**
0:      * @param maxCacheSize
0:      *            The maxCacheSize to set.
1:      */
0:     public void setMaxCacheSize(int maxCacheSize){
0:         this.maxCacheSize=maxCacheSize;
1:     }
1:     
0:     protected boolean removeEldestEntry(Map.Entry entry){
0:         return size() > maxCacheSize;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:69a5e00
/////////////////////////////////////////////////////////////////////////
1:      * Default constructor for an LRU Cache The default capacity is 10000
1:         this(0,10000, 0.75f, true);
/////////////////////////////////////////////////////////////////////////
1:         this(0, maximumCacheSize, 0.75f, true);
/////////////////////////////////////////////////////////////////////////
1:      *                 the load factor is non-positive.
/////////////////////////////////////////////////////////////////////////
1:     protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {
commit:791d78b
/////////////////////////////////////////////////////////////////////////
0:  * @param <K> 
0:  * @param <V> 
/////////////////////////////////////////////////////////////////////////
0:      * Default constructorfor an LRU Cache
0:      * The default capacity is 10000
/////////////////////////////////////////////////////////////////////////
1:      * Constructs a LRUCache with a maximum capacity
1:      * @param maximumCacheSize
1:      */
1:     public LRUCache(int maximumCacheSize) {
0:         this(maximumCacheSize,maximumCacheSize,0.75f,true);
1:     }
1:     /**
commit:fc6ab9c
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
0:      * Constructs an empty <tt>LRUCache</tt> instance with the
0:      * specified initial capacity, maximumCacheSize,load factor and ordering mode.
0:      *
0:      * @param  initialCapacity the initial capacity.
0:      * @param maximumCacheSize 
0:      * @param  loadFactor      the load factor.
0:      * @param  accessOrder     the ordering mode - <tt>true</tt> for
0:      *         access-order, <tt>false</tt> for insertion-order.
0:      * @throws IllegalArgumentException if the initial capacity is negative
0:      *         or the load factor is nonpositive.
0:      */
0:     
0:     public LRUCache(int initialCapacity,int maximumCacheSize,float loadFactor, boolean accessOrder) {
0:         super(initialCapacity,loadFactor,accessOrder);
0:         this.maxCacheSize = maximumCacheSize;
0:     }
============================================================================