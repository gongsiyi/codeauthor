1:6d8e2c5: /**
1:6d8e2c5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6d8e2c5:  * contributor license agreements.  See the NOTICE file distributed with
1:6d8e2c5:  * this work for additional information regarding copyright ownership.
1:6d8e2c5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6d8e2c5:  * (the "License"); you may not use this file except in compliance with
1:6d8e2c5:  * the License.  You may obtain a copy of the License at
10:6d8e2c5:  *
1:6d8e2c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:6d8e2c5:  * Unless required by applicable law or agreed to in writing, software
1:6d8e2c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d8e2c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d8e2c5:  * See the License for the specific language governing permissions and
1:6d8e2c5:  * limitations under the License.
1:6d8e2c5:  */
1:6d8e2c5: package org.apache.activemq.usage;
4:6d8e2c5: 
1:b820ac2: import java.util.concurrent.TimeUnit;
1:b820ac2: 
1:6d8e2c5: /**
1:6d8e2c5:  * Used to keep track of how much of something is being used so that a
1:2b0024c:  * productive working set usage can be controlled. Main use case is manage
1:2b0024c:  * memory usage.
1:8e388b8:  *
1:6d8e2c5:  * @org.apache.xbean.XBean
1:8e388b8:  *
1:6d8e2c5:  */
1:2b0024c: public class MemoryUsage extends Usage<MemoryUsage> {
1:6d8e2c5: 
1:6d8e2c5:     private long usage;
1:6d8e2c5: 
1:2b0024c:     public MemoryUsage() {
1:2b0024c:         this(null, null);
3:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     /**
1:6d8e2c5:      * Create the memory manager linked to a parent. When the memory manager is
1:6d8e2c5:      * linked to a parent then when usage increased or decreased, the parent's
1:6d8e2c5:      * usage is also increased or decreased.
1:8e388b8:      *
1:6d8e2c5:      * @param parent
1:6d8e2c5:      */
1:2b0024c:     public MemoryUsage(MemoryUsage parent) {
1:2b0024c:         this(parent, "default");
1:6d8e2c5:     }
1:6d8e2c5: 
1:2b0024c:     public MemoryUsage(String name) {
1:2b0024c:         this(null, name);
1:6d8e2c5:     }
1:6d8e2c5: 
1:2b0024c:     public MemoryUsage(MemoryUsage parent, String name) {
1:2b0024c:         this(parent, name, 1.0f);
1:6d8e2c5:     }
1:6d8e2c5: 
1:2b0024c:     public MemoryUsage(MemoryUsage parent, String name, float portion) {
1:2b0024c:         super(parent, name, portion);
1:6d8e2c5:     }
1:2b0024c: 
1:6d8e2c5:     /**
1:6d8e2c5:      * @throws InterruptedException
1:6d8e2c5:      */
1:8e388b8:     @Override
1:2b0024c:     public void waitForSpace() throws InterruptedException {
1:2b0024c:         if (parent != null) {
1:6d8e2c5:             parent.waitForSpace();
1:6d8e2c5:         }
1:b820ac2:         usageLock.readLock().lock();
1:b820ac2:         try {
1:b820ac2:             if (percentUsage >= 100 && isStarted()) {
1:b820ac2:                 usageLock.readLock().unlock();
1:b820ac2:                 usageLock.writeLock().lock();
1:b820ac2:                 try {
1:b820ac2:                     while (percentUsage >= 100 && isStarted()) {
1:b820ac2:                         waitForSpaceCondition.await();
1:b820ac2:                     }
1:b820ac2:                 } finally {
1:b820ac2:                     usageLock.writeLock().unlock();
1:9ddd162:                     usageLock.readLock().lock();
1:b820ac2:                 }
1:6d8e2c5:             }
1:8e388b8: 
1:8e388b8:             if (percentUsage >= 100 && !isStarted()) {
1:8e388b8:                 throw new InterruptedException("waitForSpace stopped during wait.");
1:8e388b8:             }
1:b820ac2:         } finally {
1:b820ac2:             usageLock.readLock().unlock();
1:6d8e2c5:         }
1:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     /**
1:2b0024c:      * @param timeout
1:6d8e2c5:      * @throws InterruptedException
1:6d8e2c5:      * @return true if space
1:6d8e2c5:      */
1:8e388b8:     @Override
1:2b0024c:     public boolean waitForSpace(long timeout) throws InterruptedException {
1:2b0024c:         if (parent != null) {
1:2b0024c:             if (!parent.waitForSpace(timeout)) {
1:6d8e2c5:                 return false;
1:6d8e2c5:             }
1:6d8e2c5:         }
1:b820ac2:         usageLock.readLock().lock();
1:b820ac2:         try {
1:2b0024c:             if (percentUsage >= 100) {
1:b820ac2:                 usageLock.readLock().unlock();
1:b820ac2:                 usageLock.writeLock().lock();
1:b820ac2:                 try {
1:b820ac2:                     while (percentUsage >= 100 ) {
1:b820ac2:                         waitForSpaceCondition.await(timeout, TimeUnit.MILLISECONDS);
1:b820ac2:                     }
1:b820ac2:                     usageLock.readLock().lock();
1:b820ac2:                 } finally {
1:b820ac2:                     usageLock.writeLock().unlock();
1:b820ac2:                 }
1:6d8e2c5:             }
1:b820ac2: 
1:2b0024c:             return percentUsage < 100;
1:b820ac2:         } finally {
1:b820ac2:             usageLock.readLock().unlock();
1:6d8e2c5:         }
1:6d8e2c5:     }
1:2b0024c: 
1:8e388b8:     @Override
1:2b0024c:     public boolean isFull() {
1:2b0024c:         if (parent != null && parent.isFull()) {
1:6d8e2c5:             return true;
1:6d8e2c5:         }
1:b820ac2:         usageLock.readLock().lock();
1:b820ac2:         try {
1:2b0024c:             return percentUsage >= 100;
1:b820ac2:         } finally {
1:b820ac2:             usageLock.readLock().unlock();
1:6d8e2c5:         }
1:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     /**
1:6d8e2c5:      * Tries to increase the usage by value amount but blocks if this object is
1:6d8e2c5:      * currently full.
1:8e388b8:      *
1:2b0024c:      * @param value
1:6d8e2c5:      * @throws InterruptedException
1:6d8e2c5:      */
1:2b0024c:     public void enqueueUsage(long value) throws InterruptedException {
1:6d8e2c5:         waitForSpace();
1:6d8e2c5:         increaseUsage(value);
1:6d8e2c5:     }
1:6d8e2c5: 
1:6d8e2c5:     /**
1:6d8e2c5:      * Increases the usage by the value amount.
1:8e388b8:      *
2:6d8e2c5:      * @param value
1:6d8e2c5:      */
1:2b0024c:     public void increaseUsage(long value) {
1:2b0024c:         if (value == 0) {
1:6d8e2c5:             return;
1:6d8e2c5:         }
1:b820ac2: 
1:b820ac2:         usageLock.writeLock().lock();
1:b820ac2:         try {
1:2b0024c:             usage += value;
1:b820ac2:             setPercentUsage(caclPercentUsage());
1:b820ac2:         } finally {
1:b820ac2:             usageLock.writeLock().unlock();
1:9dd11cb:         }
1:b820ac2: 
1:2b0024c:         if (parent != null) {
1:8e388b8:             parent.increaseUsage(value);
1:6d8e2c5:         }
1:6d8e2c5:     }
1:b820ac2: 
1:6d8e2c5:     /**
1:6d8e2c5:      * Decreases the usage by the value amount.
1:8e388b8:      *
1:6d8e2c5:      * @param value
1:6d8e2c5:      */
1:2b0024c:     public void decreaseUsage(long value) {
1:2b0024c:         if (value == 0) {
1:6d8e2c5:             return;
1:6d8e2c5:         }
1:6d8e2c5: 
1:b820ac2:         usageLock.writeLock().lock();
1:b820ac2:         try {
1:2b0024c:             usage -= value;
1:b820ac2:             setPercentUsage(caclPercentUsage());
1:b820ac2:         } finally {
1:b820ac2:             usageLock.writeLock().unlock();
1:6d8e2c5:         }
1:b820ac2: 
1:2b0024c:         if (parent != null) {
1:9dd11cb:             parent.decreaseUsage(value);
1:9dd11cb:         }
1:6d8e2c5:     }
1:6d8e2c5: 
1:8e388b8:     @Override
1:2b0024c:     protected long retrieveUsage() {
1:6d8e2c5:         return usage;
1:6d8e2c5:     }
1:2b0024c: 
1:8e388b8:     @Override
1:2b0024c:     public long getUsage() {
1:2b0024c:         return usage;
1:2b0024c:     }
1:2b0024c: 
1:2b0024c:     public void setUsage(long usage) {
1:2b0024c:         this.usage = usage;
1:2b0024c:     }
1:feb71c3: 
1:feb71c3:     public void setPercentOfJvmHeap(int percentOfJvmHeap) {
1:feb71c3:         if (percentOfJvmHeap > 0) {
1:feb71c3:             setLimit(Math.round(Runtime.getRuntime().maxMemory() * percentOfJvmHeap / 100.0));
1:feb71c3:         }
1:feb71c3:     }
1:6d8e2c5: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:9ddd162
/////////////////////////////////////////////////////////////////////////
1:                     usageLock.readLock().lock();
author:Gary Tully
-------------------------------------------------------------------------------
commit:feb71c3
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setPercentOfJvmHeap(int percentOfJvmHeap) {
1:         if (percentOfJvmHeap > 0) {
1:             setLimit(Math.round(Runtime.getRuntime().maxMemory() * percentOfJvmHeap / 100.0));
1:         }
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b820ac2
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1:         usageLock.readLock().lock();
1:         try {
1:             if (percentUsage >= 100 && isStarted()) {
1:                 usageLock.readLock().unlock();
1:                 usageLock.writeLock().lock();
1:                 try {
1:                     while (percentUsage >= 100 && isStarted()) {
1:                         waitForSpaceCondition.await();
1:                     }
1:                     usageLock.readLock().lock();
1:                 } finally {
1:                     usageLock.writeLock().unlock();
1:                 }
1:         } finally {
1:             usageLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
1:         usageLock.readLock().lock();
1:         try {
1:                 usageLock.readLock().unlock();
1:                 usageLock.writeLock().lock();
1:                 try {
1:                     while (percentUsage >= 100 ) {
1:                         waitForSpaceCondition.await(timeout, TimeUnit.MILLISECONDS);
1:                     }
1:                     usageLock.readLock().lock();
1:                 } finally {
1:                     usageLock.writeLock().unlock();
1:                 }
1: 
1:         } finally {
1:             usageLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
0:         usageLock.readLock().lock();
1:         try {
1:         } finally {
1:             usageLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
1: 
1:         usageLock.writeLock().lock();
1:         try {
1:             setPercentUsage(caclPercentUsage());
1:         } finally {
1:             usageLock.writeLock().unlock();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         usageLock.writeLock().lock();
1:         try {
1:             setPercentUsage(caclPercentUsage());
1:         } finally {
1:             usageLock.writeLock().unlock();
1: 
commit:8e388b8
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:             while (percentUsage >= 100 && isStarted()) {
1: 
1:             if (percentUsage >= 100 && !isStarted()) {
1:                 throw new InterruptedException("waitForSpace stopped during wait.");
1:             }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:             parent.increaseUsage(value);
1:      *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:  * productive working set usage can be controlled. Main use case is manage
1:  * memory usage.
1: public class MemoryUsage extends Usage<MemoryUsage> {
1:     public MemoryUsage() {
1:         this(null, null);
/////////////////////////////////////////////////////////////////////////
1:     public MemoryUsage(MemoryUsage parent) {
1:         this(parent, "default");
1:     public MemoryUsage(String name) {
1:         this(null, name);
1:     public MemoryUsage(MemoryUsage parent, String name) {
1:         this(parent, name, 1.0f);
1:     public MemoryUsage(MemoryUsage parent, String name, float portion) {
1:         super(parent, name, portion);
1: 
1:     public void waitForSpace() throws InterruptedException {
1:         if (parent != null) {
0:         synchronized (usageMutex) {
0:             for (int i = 0; percentUsage >= 100; i++) {
1:      * @param timeout
1:     public boolean waitForSpace(long timeout) throws InterruptedException {
1:         if (parent != null) {
1:             if (!parent.waitForSpace(timeout)) {
0:         synchronized (usageMutex) {
1:             if (percentUsage >= 100) {
1:             return percentUsage < 100;
1: 
1:     public boolean isFull() {
1:         if (parent != null && parent.isFull()) {
0:         synchronized (usageMutex) {
1:             return percentUsage >= 100;
1:      * @param value
1:     public void enqueueUsage(long value) throws InterruptedException {
/////////////////////////////////////////////////////////////////////////
1:     public void increaseUsage(long value) {
1:         if (value == 0) {
1:         if (parent != null) {
0:             ((MemoryUsage)parent).increaseUsage(value);
0:         synchronized (usageMutex) {
1:             usage += value;
0:             percentUsage = caclPercentUsage();
/////////////////////////////////////////////////////////////////////////
1:     public void decreaseUsage(long value) {
1:         if (value == 0) {
1:         if (parent != null) {
0:         synchronized (usageMutex) {
1:             usage -= value;
0:             percentUsage = caclPercentUsage();
1:     protected long retrieveUsage() {
1: 
1:     public long getUsage() {
1:         return usage;
1:     }
1: 
1:     public void setUsage(long usage) {
1:         this.usage = usage;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
0:         if (parent != null) {
0:             ((MemoryUsage)parent).increaseUsage(value);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (parent != null) {
1:             parent.decreaseUsage(value);
1:         }
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
1: 
1: 
1: /**
1:  * Used to keep track of how much of something is being used so that a
0:  * productive working set usage can be controlled.
1:  * 
0:  * Main use case is manage memory usage.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision: 1.3 $
1:  */
0: public class MemoryUsage extends Usage{
1: 
0:     private MemoryUsage parent;
1:     private long usage;
1: 
0:     public MemoryUsage(){
0:         this(null,"default");
1:     }
1: 
1:     /**
1:      * Create the memory manager linked to a parent. When the memory manager is
1:      * linked to a parent then when usage increased or decreased, the parent's
1:      * usage is also increased or decreased.
1:      * 
1:      * @param parent
1:      */
0:     public MemoryUsage(MemoryUsage parent){
0:         this(parent,"default");
1:     }
1: 
0:     public MemoryUsage(String name){
0:         this(null,name);
1:     }
1: 
0:     public MemoryUsage(MemoryUsage parent,String name){
0:         this(parent,name,1.0f);
1:     }
1: 
0:     public MemoryUsage(MemoryUsage parent,String name,float portion){
0:         super(parent,name,portion);
1:     }
1:     
1:     /**
1:      * @throws InterruptedException
1:      */
0:     public void waitForSpace() throws InterruptedException{
0:         if(parent!=null){
1:             parent.waitForSpace();
1:         }
0:         synchronized(usageMutex){
0:             for(int i=0;percentUsage>=100;i++){
0:                 usageMutex.wait();
1:             }
1:         }
1:     }
1: 
1:     /**
0:      * @param timeout 
1:      * @throws InterruptedException
1:      * 
1:      * @return true if space
1:      */
0:     public boolean waitForSpace(long timeout) throws InterruptedException{
0:         if(parent!=null){
0:             if(!parent.waitForSpace(timeout)){
1:                 return false;
1:             }
1:         }
0:         synchronized(usageMutex){
0:             if(percentUsage>=100){
0:                 usageMutex.wait(timeout);
1:             }
0:             return percentUsage<100;
1:         }
1:     }
1:     
0:     public boolean isFull(){
0:         if(parent!=null&&parent.isFull()){
1:             return true;
1:         }
0:         synchronized(usageMutex){
0:             return percentUsage>=100;
1:         }
1:     }
1: 
1:     /**
1:      * Tries to increase the usage by value amount but blocks if this object is
1:      * currently full.
1:      * @param value 
1:      * 
1:      * @throws InterruptedException
1:      */
0:     public void enqueueUsage(long value) throws InterruptedException{
1:         waitForSpace();
1:         increaseUsage(value);
1:     }
1: 
1:     /**
1:      * Increases the usage by the value amount.
1:      * 
1:      * @param value
1:      */
0:     public void increaseUsage(long value){
0:         if(value==0){
1:             return;
1:         }
0:         if(parent!=null){
0:             parent.increaseUsage(value);
1:         }
0:         int percentUsage;
0:         synchronized(usageMutex){
0:             usage+=value;
0:             percentUsage=caclPercentUsage();
1:         }
0:         setPercentUsage(percentUsage);
1:     }
1: 
1:     /**
1:      * Decreases the usage by the value amount.
1:      * 
1:      * @param value
1:      */
0:     public void decreaseUsage(long value){
0:         if(value==0){
1:             return;
1:         }
0:         if(parent!=null){
0:             parent.decreaseUsage(value);
1:         }
0:         int percentUsage;
0:         synchronized(usageMutex){
0:             usage-=value;
0:             percentUsage=caclPercentUsage();
1:         }
0:         setPercentUsage(percentUsage);
1:     }
1: 
0:     protected long retrieveUsage(){
1:         return usage;
1:     }
1: }
============================================================================