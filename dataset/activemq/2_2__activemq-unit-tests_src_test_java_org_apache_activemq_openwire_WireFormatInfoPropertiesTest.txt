1:8d5e84b: /**
1:8d5e84b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8d5e84b:  * contributor license agreements.  See the NOTICE file distributed with
1:8d5e84b:  * this work for additional information regarding copyright ownership.
1:8d5e84b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8d5e84b:  * (the "License"); you may not use this file except in compliance with
1:8d5e84b:  * the License.  You may obtain a copy of the License at
1:8d5e84b:  *
1:8d5e84b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d5e84b:  *
1:8d5e84b:  * Unless required by applicable law or agreed to in writing, software
1:8d5e84b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d5e84b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d5e84b:  * See the License for the specific language governing permissions and
1:8d5e84b:  * limitations under the License.
1:8d5e84b:  */
1:8d5e84b: package org.apache.activemq.openwire;
4:8d5e84b: 
1:8d5e84b: import static org.junit.Assert.assertTrue;
1:8d5e84b: import static org.junit.Assert.fail;
1:8d5e84b: 
1:8d5e84b: import java.io.ByteArrayInputStream;
1:8d5e84b: import java.io.ByteArrayOutputStream;
1:8d5e84b: import java.io.DataInputStream;
1:8d5e84b: import java.io.DataOutputStream;
1:8d5e84b: import java.io.IOException;
1:8d5e84b: import java.net.URI;
1:8d5e84b: 
1:8d5e84b: import org.apache.activemq.ActiveMQConnection;
1:8d5e84b: import org.apache.activemq.ActiveMQConnectionFactory;
1:8d5e84b: import org.apache.activemq.ActiveMQConnectionMetaData;
1:8d5e84b: import org.apache.activemq.broker.BrokerService;
1:7118247: import org.apache.activemq.broker.TransportConnector;
1:8d5e84b: import org.apache.activemq.command.WireFormatInfo;
1:5fa0bbd: import org.junit.After;
1:5fa0bbd: import org.junit.Before;
1:8d5e84b: import org.junit.Test;
1:8d5e84b: import org.slf4j.Logger;
1:8d5e84b: import org.slf4j.LoggerFactory;
1:8d5e84b: 
1:8d5e84b: public class WireFormatInfoPropertiesTest {
1:8d5e84b: 
1:8d5e84b:     static final Logger LOG = LoggerFactory.getLogger(WireFormatInfoPropertiesTest.class);
1:8d5e84b: 
1:5fa0bbd:     private BrokerService service;
1:5fa0bbd:     private String brokerUri;
1:5fa0bbd:     private TransportConnector connector;
1:5fa0bbd: 
1:5fa0bbd:     @Before
1:5fa0bbd:     public void before() throws Exception {
1:5fa0bbd:         service = new BrokerService();
1:5fa0bbd:         connector = service.addConnector("tcp://localhost:0");
1:5fa0bbd:         brokerUri = connector.getPublishableConnectString();
1:5fa0bbd:         service.setPersistent(false);
1:5fa0bbd:         service.setUseJmx(false);
1:5fa0bbd:         service.setBrokerName("Master");
1:5fa0bbd:         service.start();
1:5fa0bbd:         service.waitUntilStarted();
1:5fa0bbd:     }
1:5fa0bbd: 
1:5fa0bbd:     @After
1:5fa0bbd:     public void after() throws Exception {
1:5fa0bbd:         if (service != null) {
1:5fa0bbd:             service.stop();
1:5fa0bbd:             service.waitUntilStopped();
1:5fa0bbd:         }
1:5fa0bbd:     }
1:8d5e84b: 
1:8d5e84b:     @Test
1:5fa0bbd:     public void testClientPropertiesWithDefaultPlatformDetails() throws Exception{
1:5fa0bbd:         WireFormatInfo clientWf = testClientProperties(brokerUri);
1:5fa0bbd:         assertTrue(clientWf.getPlatformDetails().equals(ActiveMQConnectionMetaData.DEFAULT_PLATFORM_DETAILS));
1:5fa0bbd:     }
1:5fa0bbd: 
1:5fa0bbd:     @Test
1:5fa0bbd:     public void testClientPropertiesWithPlatformDetails() throws Exception{
1:5fa0bbd:         WireFormatInfo clientWf = testClientProperties(brokerUri + "?wireFormat.includePlatformDetails=true");
1:5fa0bbd:         assertTrue(clientWf.getPlatformDetails().equals(ActiveMQConnectionMetaData.PLATFORM_DETAILS));
1:5fa0bbd:     }
1:5fa0bbd: 
1:5fa0bbd:     private WireFormatInfo testClientProperties(String brokerUri) throws Exception {
1:5fa0bbd:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(new URI(brokerUri));
1:5fa0bbd:         ActiveMQConnection conn = (ActiveMQConnection)factory.createConnection();
1:5fa0bbd:         conn.start();
1:5fa0bbd: 
1:5fa0bbd:         assertTrue(connector.getConnections().size() == 1);
1:5fa0bbd:         final WireFormatInfo clientWf = connector.getConnections().get(0).getRemoteWireFormatInfo();
1:5fa0bbd:         if (clientWf == null) {
1:5fa0bbd:             fail("Wire format info is null");
7:8d5e84b:         }
1:5fa0bbd: 
1:5fa0bbd:         //verify properties that the client sends to the broker
1:5fa0bbd:         assertTrue(clientWf.getProperties().containsKey("ProviderName"));
1:5fa0bbd:         assertTrue(clientWf.getProperties().containsKey("ProviderVersion"));
1:5fa0bbd:         assertTrue(clientWf.getProperties().containsKey("PlatformDetails"));
1:5fa0bbd:         assertTrue(clientWf.getProviderName().equals(ActiveMQConnectionMetaData.PROVIDER_NAME));
1:5fa0bbd: 
1:5fa0bbd:         return clientWf;
1:8d5e84b:     }
1:8d5e84b: 
1:8d5e84b:     @Test
1:8d5e84b:     public void testMarshalClientProperties() throws IOException {
1:8d5e84b:         // marshal object
1:8d5e84b:         OpenWireFormatFactory factory = new OpenWireFormatFactory();
1:8d5e84b:         OpenWireFormat wf = (OpenWireFormat)factory.createWireFormat();
1:8d5e84b:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:8d5e84b:         DataOutputStream ds = new DataOutputStream(buffer);
1:8d5e84b:         WireFormatInfo orig = wf.getPreferedWireFormatInfo();
1:8d5e84b:         wf.marshal(orig, ds);
1:8d5e84b:         ds.close();
1:8d5e84b: 
1:8d5e84b:         // unmarshal object and check that the properties are present.
1:8d5e84b:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:8d5e84b:         DataInputStream dis = new DataInputStream(in);
1:8d5e84b:         Object actual = wf.unmarshal(dis);
1:8d5e84b: 
1:8d5e84b:         if (!(actual instanceof WireFormatInfo)) {
1:8d5e84b:             fail("Unknown type");
1:8d5e84b:         }
1:8d5e84b:         WireFormatInfo result = (WireFormatInfo)actual;
1:8d5e84b:         assertTrue(result.getProviderName().equals(orig.getProviderName()));
2:8d5e84b:         // the version won't be valid until runtime
1:8d5e84b:         assertTrue(result.getProviderVersion() == null || result.getProviderVersion().equals(orig.getProviderVersion()));
1:8d5e84b:         assertTrue(result.getPlatformDetails().equals(orig.getPlatformDetails()));
1:8d5e84b:     }
1:8d5e84b: 
1:8d5e84b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:5fa0bbd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1:     private BrokerService service;
1:     private String brokerUri;
1:     private TransportConnector connector;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         service = new BrokerService();
1:         connector = service.addConnector("tcp://localhost:0");
1:         brokerUri = connector.getPublishableConnectString();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         service.setBrokerName("Master");
1:         service.start();
1:         service.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (service != null) {
1:             service.stop();
1:             service.waitUntilStopped();
1:         }
1:     }
1:     public void testClientPropertiesWithDefaultPlatformDetails() throws Exception{
1:         WireFormatInfo clientWf = testClientProperties(brokerUri);
1:         assertTrue(clientWf.getPlatformDetails().equals(ActiveMQConnectionMetaData.DEFAULT_PLATFORM_DETAILS));
1:     }
1: 
1:     @Test
1:     public void testClientPropertiesWithPlatformDetails() throws Exception{
1:         WireFormatInfo clientWf = testClientProperties(brokerUri + "?wireFormat.includePlatformDetails=true");
1:         assertTrue(clientWf.getPlatformDetails().equals(ActiveMQConnectionMetaData.PLATFORM_DETAILS));
1:     }
1: 
1:     private WireFormatInfo testClientProperties(String brokerUri) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(new URI(brokerUri));
1:         ActiveMQConnection conn = (ActiveMQConnection)factory.createConnection();
1:         conn.start();
1: 
1:         assertTrue(connector.getConnections().size() == 1);
1:         final WireFormatInfo clientWf = connector.getConnections().get(0).getRemoteWireFormatInfo();
1:         if (clientWf == null) {
1:             fail("Wire format info is null");
1: 
1:         //verify properties that the client sends to the broker
1:         assertTrue(clientWf.getProperties().containsKey("ProviderName"));
1:         assertTrue(clientWf.getProperties().containsKey("ProviderVersion"));
1:         assertTrue(clientWf.getProperties().containsKey("PlatformDetails"));
1:         assertTrue(clientWf.getProviderName().equals(ActiveMQConnectionMetaData.PROVIDER_NAME));
1: 
1:         return clientWf;
/////////////////////////////////////////////////////////////////////////
commit:dd971a0
/////////////////////////////////////////////////////////////////////////
commit:7118247
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
0:     protected String brokerUri;
/////////////////////////////////////////////////////////////////////////
0:         TransportConnector connector = service.addConnector("tcp://localhost:0");
0:         brokerUri = connector.getPublishableConnectString();
author:Michael L. Bloom
-------------------------------------------------------------------------------
commit:8d5e84b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.net.URI;
0: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQConnectionMetaData;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.WireFormatInfo;
0: import org.apache.activemq.transport.DefaultTransportListener;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class WireFormatInfoPropertiesTest {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(WireFormatInfoPropertiesTest.class);
1: 
0:     protected BrokerService master;
1: 
0:     protected final String brokerUri = "tcp://localhost:61616";
1: 
1:     @Test
0:     public void testClientProperties() throws Exception{
0:         BrokerService service = createBrokerService();
0:         try {
0:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(new URI(brokerUri));
0:             ActiveMQConnection conn = (ActiveMQConnection)factory.createConnection();
0:             final AtomicReference<WireFormatInfo> clientWf = new AtomicReference<WireFormatInfo>();
0:             conn.addTransportListener(new DefaultTransportListener() {
0:                 @Override
0:                 public void onCommand(Object command) {
0:                     if (command instanceof WireFormatInfo) {
0:                         clientWf.set((WireFormatInfo)command);
1:                     }
1:                 }
0:             });
0:             conn.start();
0:             if (clientWf.get() == null) {
0:                 fail("Wire format info is null");
1:             }
0:             assertTrue(clientWf.get().getProperties().containsKey("ProviderName"));
0:             assertTrue(clientWf.get().getProperties().containsKey("ProviderVersion"));
0:             assertTrue(clientWf.get().getProperties().containsKey("PlatformDetails"));
0:             assertTrue(clientWf.get().getProviderName().equals(ActiveMQConnectionMetaData.PROVIDER_NAME));
0:             assertTrue(clientWf.get().getPlatformDetails().equals(ActiveMQConnectionMetaData.PLATFORM_DETAILS));
1:             // the version won't be valid until runtime
0:             assertTrue(clientWf.get().getProviderVersion() == null);
0:         } finally {
0:             stopBroker(service);
1:         }
1:     }
1: 
1:     @Test
1:     public void testMarshalClientProperties() throws IOException {
1:         // marshal object
1:         OpenWireFormatFactory factory = new OpenWireFormatFactory();
1:         OpenWireFormat wf = (OpenWireFormat)factory.createWireFormat();
1:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:         DataOutputStream ds = new DataOutputStream(buffer);
1:         WireFormatInfo orig = wf.getPreferedWireFormatInfo();
1:         wf.marshal(orig, ds);
1:         ds.close();
1: 
1:         // unmarshal object and check that the properties are present.
1:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:         DataInputStream dis = new DataInputStream(in);
1:         Object actual = wf.unmarshal(dis);
1: 
1:         if (!(actual instanceof WireFormatInfo)) {
1:             fail("Unknown type");
1:         }
1:         WireFormatInfo result = (WireFormatInfo)actual;
1:         assertTrue(result.getProviderName().equals(orig.getProviderName()));
1:         // the version won't be valid until runtime
1:         assertTrue(result.getProviderVersion() == null || result.getProviderVersion().equals(orig.getProviderVersion()));
1:         assertTrue(result.getPlatformDetails().equals(orig.getPlatformDetails()));
1:     }
1: 
0:     private BrokerService createBrokerService() throws Exception {
0:         BrokerService service = new BrokerService();
0:         service.addConnector(brokerUri);
0:         service.setPersistent(false);
0:         service.setUseJmx(false);
0:         service.setBrokerName("Master");
0:         service.start();
0:         service.waitUntilStarted();
0:         return service;
1:     }
1: 
0:     private void stopBroker(BrokerService service) throws Exception {
0:         if (service != null) {
0:             service.stop();
0:             service.waitUntilStopped();
1:         }
1:     }
1: 
1: }
============================================================================