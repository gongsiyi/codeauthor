1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
4:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Test cases used to test the JMS message exclusive consumers.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class JMSExclusiveConsumerTest extends JmsTestSupport {
1:d29ca2a: 
1:933eb2f:     public int deliveryMode;
1:933eb2f: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(JMSExclusiveConsumerTest.class);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestRoundRobinDispatchOnNonExclusive() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Shows that by default messages are round robined across a set of
1:f812e34:      * consumers.
1:d29ca2a:      * 
1:7f5213b:      * @throws Exception
1:d29ca2a:      */
1:7f5213b:     public void testRoundRobinDispatchOnNonExclusive() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a:         producer.setDeliveryMode(deliveryMode);
1:f812e34: 
1:d29ca2a:         MessageConsumer consumer1 = session.createConsumer(destination);
1:d29ca2a:         MessageConsumer consumer2 = session.createConsumer(destination);
1:d29ca2a: 
1:d29ca2a:         // Send the messages
1:d29ca2a:         producer.send(session.createTextMessage("1st"));
1:d29ca2a:         producer.send(session.createTextMessage("2nd"));
1:f812e34: 
1:d29ca2a:         Message m;
1:d29ca2a:         m = consumer2.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:f812e34: 
1:d29ca2a:         m = consumer1.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a: 
1:d29ca2a:         assertNull(consumer1.receiveNoWait());
1:d29ca2a:         assertNull(consumer2.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestDispatchExclusive() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Shows that if the "?consumer.exclusive=true" option is added to
1:f812e34:      * destination, then all messages are routed to 1 consumer.
1:d29ca2a:      * 
1:7f5213b:      * @throws Exception
1:d29ca2a:      */
1:7f5213b:     public void testDispatchExclusive() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         ActiveMQQueue destination = new ActiveMQQueue("TEST?consumer.exclusive=true");
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a:         producer.setDeliveryMode(deliveryMode);
1:f812e34: 
1:d29ca2a:         MessageConsumer consumer1 = session.createConsumer(destination);
1:d29ca2a:         MessageConsumer consumer2 = session.createConsumer(destination);
1:d29ca2a: 
1:d29ca2a:         // Send the messages
1:d29ca2a:         producer.send(session.createTextMessage("1st"));
1:d29ca2a:         producer.send(session.createTextMessage("2nd"));
1:d29ca2a:         producer.send(session.createTextMessage("3nd"));
1:f812e34: 
1:d29ca2a:         Message m;
1:d29ca2a:         m = consumer2.receive(1000);
1:f812e34:         if (m != null) {
1:d29ca2a:             // Consumer 2 should get all the messages.
1:d29ca2a:             for (int i = 0; i < 2; i++) {
1:d29ca2a:                 m = consumer2.receive(1000);
1:d29ca2a:                 assertNotNull(m);
1:d29ca2a:             }
1:d29ca2a:         } else {
1:d29ca2a:             // Consumer 1 should get all the messages.
1:d29ca2a:             for (int i = 0; i < 3; i++) {
1:d29ca2a:                 m = consumer1.receive(1000);
1:d29ca2a:                 assertNotNull(m);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         assertNull(consumer1.receiveNoWait());
1:d29ca2a:         assertNull(consumer2.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:8951023:     public void testMixExclusiveWithNonExclusive() throws Exception {
1:8951023:         ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.FOO?consumer.exclusive=true");
1:8951023:         ActiveMQQueue nonExclusiveQueue = new ActiveMQQueue("TEST.FOO?consumer.exclusive=false");
1:d29ca2a: 
1:8951023:         connection.start();
1:8951023:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:8951023:         MessageConsumer nonExCon = session.createConsumer(nonExclusiveQueue);
1:8951023:         MessageConsumer exCon = session.createConsumer(exclusiveQueue);
1:d29ca2a: 
1:8951023:         MessageProducer prod = session.createProducer(exclusiveQueue);
1:8951023:         prod.send(session.createMessage());
1:8951023:         prod.send(session.createMessage());
1:8951023:         prod.send(session.createMessage());
1:d29ca2a: 
1:8951023:         Message m;
1:f812e34:         for (int i = 0; i < 3; i++) {
1:8951023:             m = exCon.receive(1000);
1:8951023:             assertNotNull(m);
1:8951023:             m = nonExCon.receive(1000);
1:8951023:             assertNull(m);
1:d29ca2a:         }
1:8951023:     }
1:8951023: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public int deliveryMode;
1: 
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:      * Shows that by default messages are round robined across a set of
1:      * consumers.
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:      * Shows that if the "?consumer.exclusive=true" option is added to
1:      * destination, then all messages are routed to 1 consumer.
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (m != null) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 3; i++) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
1:     public void testRoundRobinDispatchOnNonExclusive() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
1:     public void testDispatchExclusive() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: /**
1:  * Test cases used to test the JMS message exclusive consumers.
1:  * 
0:  * @version $Revision$
1:  */
1: public class JMSExclusiveConsumerTest extends JmsTestSupport {
1: 
1:     public static Test suite() {
1:         return suite(JMSExclusiveConsumerTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
0:     public int deliveryMode;
1:     
1:     public void initCombosForTestRoundRobinDispatchOnNonExclusive() {
0:         addCombinationValues("deliveryMode", new Object[] { new Integer(DeliveryMode.NON_PERSISTENT),
0:                 new Integer(DeliveryMode.PERSISTENT) });
1:     }
1: 
1:     /**
0:      * Shows that by default messages are round robined across a set of consumers.
1:      * 
0:      * @throws Throwable
1:      */
0:     public void testRoundRobinDispatchOnNonExclusive() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1:         
1:         MessageConsumer consumer1 = session.createConsumer(destination);
1:         MessageConsumer consumer2 = session.createConsumer(destination);
1: 
1:         // Send the messages
1:         producer.send(session.createTextMessage("1st"));
1:         producer.send(session.createTextMessage("2nd"));
1:         
1:         Message m;
1:         m = consumer2.receive(1000);
1:         assertNotNull(m);
1:         
1:         m = consumer1.receive(1000);
1:         assertNotNull(m);
1: 
1:         assertNull(consumer1.receiveNoWait());
1:         assertNull(consumer2.receiveNoWait());
1:     }
1: 
1:     public void initCombosForTestDispatchExclusive() {
0:         addCombinationValues("deliveryMode", new Object[] { new Integer(DeliveryMode.NON_PERSISTENT),
0:                 new Integer(DeliveryMode.PERSISTENT) });
1:     }
1: 
1:     /**
0:      * Shows that if the "?consumer.exclusive=true" option is added to destination,
0:      * then all messages are routed to 1 consumer.
1:      * 
0:      * @throws Throwable
1:      */
0:     public void testDispatchExclusive() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue destination = new ActiveMQQueue("TEST?consumer.exclusive=true");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1:         
1:         MessageConsumer consumer1 = session.createConsumer(destination);
1:         MessageConsumer consumer2 = session.createConsumer(destination);
1: 
1:         // Send the messages
1:         producer.send(session.createTextMessage("1st"));
1:         producer.send(session.createTextMessage("2nd"));
1:         producer.send(session.createTextMessage("3nd"));
1:         
1:         Message m;
1:         m = consumer2.receive(1000);
0:         if( m!=null ) {
1:             // Consumer 2 should get all the messages.
1:             for (int i = 0; i < 2; i++) {
1:                 m = consumer2.receive(1000);
1:                 assertNotNull(m);
1:             }
1:         } else {
1:             // Consumer 1 should get all the messages.
1:             for (int i = 0; i < 3; i++) {
1:                 m = consumer1.receive(1000);
1:                 assertNotNull(m);
1:             }
1:         }
1: 
1:         assertNull(consumer1.receiveNoWait());
1:         assertNull(consumer2.receiveNoWait());
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("deliveryMode", new Object[] { Integer.valueOf(DeliveryMode.NON_PERSISTENT),
0:         		Integer.valueOf(DeliveryMode.PERSISTENT) });
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("deliveryMode", new Object[] { Integer.valueOf(DeliveryMode.NON_PERSISTENT),
0:         		Integer.valueOf(DeliveryMode.PERSISTENT) });
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:8951023
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void testMixExclusiveWithNonExclusive() throws Exception {
1:         ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.FOO?consumer.exclusive=true");
1:         ActiveMQQueue nonExclusiveQueue = new ActiveMQQueue("TEST.FOO?consumer.exclusive=false");
0: 
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:         MessageConsumer nonExCon = session.createConsumer(nonExclusiveQueue);
1:         MessageConsumer exCon = session.createConsumer(exclusiveQueue);
0: 
0: 
1:         MessageProducer prod = session.createProducer(exclusiveQueue);
1:         prod.send(session.createMessage());
1:         prod.send(session.createMessage());
1:         prod.send(session.createMessage());
0: 
1:         Message m;
0:         for (int i=0; i<3; i++) {
1:             m = exCon.receive(1000);
1:             assertNotNull(m);
1:             m = nonExCon.receive(1000);
1:             assertNull(m);
1:         }
1:     }
============================================================================