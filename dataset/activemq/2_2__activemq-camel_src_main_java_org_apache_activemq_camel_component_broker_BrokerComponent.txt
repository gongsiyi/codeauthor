1:b92a315: /**
1:b92a315:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b92a315:  * contributor license agreements.  See the NOTICE file distributed with
1:b92a315:  * this work for additional information regarding copyright ownership.
1:b92a315:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b92a315:  * (the "License"); you may not use this file except in compliance with
1:b92a315:  * the License.  You may obtain a copy of the License at
1:b92a315:  *
1:b92a315:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b92a315:  *
1:b92a315:  * Unless required by applicable law or agreed to in writing, software
1:b92a315:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b92a315:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b92a315:  * See the License for the specific language governing permissions and
1:b92a315:  * limitations under the License.
1:b92a315:  */
1:b92a315: package org.apache.activemq.camel.component.broker;
3:b92a315: 
1:b92a315: import java.util.ArrayList;
1:b92a315: import java.util.List;
1:b92a315: import java.util.Map;
1:b92a315: import java.util.Set;
1:b92a315: 
1:b92a315: import org.apache.activemq.broker.view.MessageBrokerView;
1:b92a315: import org.apache.activemq.broker.view.MessageBrokerViewRegistry;
1:b92a315: import org.apache.activemq.command.ActiveMQDestination;
1:b92a315: import org.apache.camel.ComponentConfiguration;
1:b92a315: import org.apache.camel.Endpoint;
1:b92a315: import org.apache.camel.component.jms.JmsConfiguration;
1:b92a315: import org.apache.camel.impl.UriEndpointComponent;
1:b92a315: import org.apache.camel.spi.EndpointCompleter;
1:0e98ed6: 
1:b92a315: import static org.apache.camel.util.ObjectHelper.removeStartingCharacters;
1:b92a315: 
1:0e98ed6: /**
1:0e98ed6:  * The <a href="http://activemq.apache.org/broker-camel-component.html">Broker Camel component</a> allows to use Camel
1:0e98ed6:  * routing to move messages through the broker.
1:0e98ed6:  */
1:b92a315: public class BrokerComponent extends UriEndpointComponent implements EndpointCompleter {
1:b92a315: 
1:b92a315:     public BrokerComponent() {
1:b92a315:         super(BrokerEndpoint.class);
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
1:b92a315:         BrokerConfiguration brokerConfiguration = new BrokerConfiguration();
1:b92a315:         setProperties(brokerConfiguration, parameters);
1:b92a315: 
1:b92a315:         byte destinationType = ActiveMQDestination.QUEUE_TYPE;
1:b92a315: 
1:b92a315:         if (remaining.startsWith(JmsConfiguration.QUEUE_PREFIX)) {
1:b92a315:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.QUEUE_PREFIX.length()), '/');
1:b92a315:         } else if (remaining.startsWith(JmsConfiguration.TOPIC_PREFIX)) {
1:b92a315:             destinationType = ActiveMQDestination.TOPIC_TYPE;
1:b92a315:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.TOPIC_PREFIX.length()), '/');
1:b92a315:         } else if (remaining.startsWith(JmsConfiguration.TEMP_QUEUE_PREFIX)) {
1:b92a315:             destinationType = ActiveMQDestination.TEMP_QUEUE_TYPE;
1:b92a315:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.TEMP_QUEUE_PREFIX.length()), '/');
1:b92a315:         } else if (remaining.startsWith(JmsConfiguration.TEMP_TOPIC_PREFIX)) {
1:b92a315:             destinationType = ActiveMQDestination.TEMP_TOPIC_TYPE;
1:b92a315:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.TEMP_TOPIC_PREFIX.length()), '/');
1:b92a315:         }
1:b92a315: 
1:b92a315:         ActiveMQDestination destination = ActiveMQDestination.createDestination(remaining, destinationType);
1:6097401:         BrokerEndpoint brokerEndpoint = new BrokerEndpoint(uri, this, remaining, destination, brokerConfiguration);
1:5469d80:         setProperties(brokerEndpoint, parameters);
1:b92a315:         return brokerEndpoint;
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     public List<String> completeEndpointPath(ComponentConfiguration componentConfiguration, String completionText) {
1:b92a315:         String brokerName = String.valueOf(componentConfiguration.getParameter("brokerName"));
1:b92a315:         MessageBrokerView messageBrokerView = MessageBrokerViewRegistry.getInstance().lookup(brokerName);
1:b92a315:         if (messageBrokerView != null) {
1:b92a315:             String destinationName = completionText;
1:b92a315:             Set<? extends ActiveMQDestination> set = messageBrokerView.getQueues();
1:b92a315:             if (completionText.startsWith("topic:")) {
1:b92a315:                 set = messageBrokerView.getTopics();
1:b92a315:                 destinationName = completionText.substring(6);
1:b92a315:             } else if (completionText.startsWith("queue:")) {
1:b92a315:                 destinationName = completionText.substring(6);
1:b92a315:             }
1:b92a315:             ArrayList<String> answer = new ArrayList<String>();
1:b92a315:             for (ActiveMQDestination destination : set) {
1:b92a315:                 if (destination.getPhysicalName().startsWith(destinationName)) {
1:b92a315:                     answer.add(destination.getPhysicalName());
1:b92a315:                 }
1:b92a315:             }
1:b92a315:             return answer;
1:b92a315: 
1:b92a315:         }
1:b92a315:         return null;
1:b92a315:     }
1:b92a315: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:6097401
/////////////////////////////////////////////////////////////////////////
1:         BrokerEndpoint brokerEndpoint = new BrokerEndpoint(uri, this, remaining, destination, brokerConfiguration);
commit:0e98ed6
/////////////////////////////////////////////////////////////////////////
1: 
1: /**
1:  * The <a href="http://activemq.apache.org/broker-camel-component.html">Broker Camel component</a> allows to use Camel
1:  * routing to move messages through the broker.
1:  */
commit:5469d80
/////////////////////////////////////////////////////////////////////////
1:         setProperties(brokerEndpoint, parameters);
author:Robert Davies
-------------------------------------------------------------------------------
commit:b92a315
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component.broker;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.view.MessageBrokerView;
1: import org.apache.activemq.broker.view.MessageBrokerViewRegistry;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.camel.ComponentConfiguration;
1: import org.apache.camel.Endpoint;
1: import org.apache.camel.component.jms.JmsConfiguration;
1: import org.apache.camel.impl.UriEndpointComponent;
1: import org.apache.camel.spi.EndpointCompleter;
1: import static org.apache.camel.util.ObjectHelper.removeStartingCharacters;
1: 
1: public class BrokerComponent extends UriEndpointComponent implements EndpointCompleter {
1: 
1:     public BrokerComponent() {
1:         super(BrokerEndpoint.class);
1:     }
1: 
1:     @Override
1:     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
1:         BrokerConfiguration brokerConfiguration = new BrokerConfiguration();
1:         setProperties(brokerConfiguration, parameters);
1: 
1:         byte destinationType = ActiveMQDestination.QUEUE_TYPE;
1: 
1:         if (remaining.startsWith(JmsConfiguration.QUEUE_PREFIX)) {
1:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.QUEUE_PREFIX.length()), '/');
1:         } else if (remaining.startsWith(JmsConfiguration.TOPIC_PREFIX)) {
1:             destinationType = ActiveMQDestination.TOPIC_TYPE;
1:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.TOPIC_PREFIX.length()), '/');
1:         } else if (remaining.startsWith(JmsConfiguration.TEMP_QUEUE_PREFIX)) {
1:             destinationType = ActiveMQDestination.TEMP_QUEUE_TYPE;
1:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.TEMP_QUEUE_PREFIX.length()), '/');
1:         } else if (remaining.startsWith(JmsConfiguration.TEMP_TOPIC_PREFIX)) {
1:             destinationType = ActiveMQDestination.TEMP_TOPIC_TYPE;
1:             remaining = removeStartingCharacters(remaining.substring(JmsConfiguration.TEMP_TOPIC_PREFIX.length()), '/');
1:         }
1: 
1: 
1:         ActiveMQDestination destination = ActiveMQDestination.createDestination(remaining, destinationType);
0:         BrokerEndpoint brokerEndpoint = new BrokerEndpoint(uri, this, destination, brokerConfiguration);
1:         return brokerEndpoint;
1:     }
1: 
1: 
1:     @Override
1:     public List<String> completeEndpointPath(ComponentConfiguration componentConfiguration, String completionText) {
1:         String brokerName = String.valueOf(componentConfiguration.getParameter("brokerName"));
1:         MessageBrokerView messageBrokerView = MessageBrokerViewRegistry.getInstance().lookup(brokerName);
1:         if (messageBrokerView != null) {
1:             String destinationName = completionText;
1:             Set<? extends ActiveMQDestination> set = messageBrokerView.getQueues();
1:             if (completionText.startsWith("topic:")) {
1:                 set = messageBrokerView.getTopics();
1:                 destinationName = completionText.substring(6);
1:             } else if (completionText.startsWith("queue:")) {
1:                 destinationName = completionText.substring(6);
1:             }
1:             ArrayList<String> answer = new ArrayList<String>();
1:             for (ActiveMQDestination destination : set) {
1:                 if (destination.getPhysicalName().startsWith(destinationName)) {
1:                     answer.add(destination.getPhysicalName());
1:                 }
1:             }
1:             return answer;
1: 
1:         }
1:         return null;
1:     }
1: }
============================================================================