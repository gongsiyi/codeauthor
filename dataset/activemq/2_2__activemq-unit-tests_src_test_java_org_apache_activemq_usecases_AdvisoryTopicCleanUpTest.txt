1:6a631a9: /**
1:6a631a9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6a631a9:  * contributor license agreements.  See the NOTICE file distributed with
1:6a631a9:  * this work for additional information regarding copyright ownership.
1:6a631a9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6a631a9:  * (the "License"); you may not use this file except in compliance with
1:6a631a9:  * the License.  You may obtain a copy of the License at
1:6a631a9:  *
1:6a631a9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6a631a9:  *
1:6a631a9:  * Unless required by applicable law or agreed to in writing, software
1:6a631a9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6a631a9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6a631a9:  * See the License for the specific language governing permissions and
1:6a631a9:  * limitations under the License.
1:6a631a9:  */
1:6a631a9: package org.apache.activemq.usecases;
1:6a631a9: 
1:6a631a9: import static org.junit.Assert.*;
1:6a631a9: 
1:6a631a9: import java.util.concurrent.TimeUnit;
1:6a631a9: 
1:6a631a9: import org.apache.activemq.ActiveMQConnectionFactory;
1:6a631a9: import org.apache.activemq.broker.BrokerService;
1:6a631a9: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6a631a9: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6a631a9: import org.apache.activemq.command.ActiveMQDestination;
1:6a631a9: import org.junit.After;
1:6a631a9: import org.junit.Before;
1:6a631a9: import org.junit.Test;
1:6a631a9: import org.slf4j.Logger;
1:6a631a9: import org.slf4j.LoggerFactory;
1:6a631a9: 
1:6a631a9: import javax.jms.*;
1:6a631a9: 
1:6a631a9: public class AdvisoryTopicCleanUpTest {
1:6a631a9: 
1:6a631a9:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryTopicCleanUpTest.class);
1:6a631a9: 
1:6a631a9:     private BrokerService broker;
1:6a631a9:     private String connectionUri;
1:6a631a9: 
1:6a631a9:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:6a631a9:         return new ActiveMQConnectionFactory(connectionUri + "?jms.redeliveryPolicy.maximumRedeliveries=2");
1:6a631a9:     }
1:6a631a9: 
1:6a631a9:     @Before
1:6a631a9:     public void setUp() throws Exception {
1:6a631a9:         createBroker();
1:6a631a9:     }
1:6a631a9: 
1:6a631a9:     @After
1:6a631a9:     public void tearDown() throws Exception {
1:6a631a9:         destroyBroker();
1:6a631a9:     }
1:6a631a9: 
1:6a631a9:     private void createBroker() throws Exception {
1:6a631a9:         broker = new BrokerService();
1:6a631a9:         broker.setPersistent(false);
1:6a631a9:         broker.setDeleteAllMessagesOnStartup(true);
1:6a631a9:         broker.setUseJmx(true);
1:6a631a9:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:6a631a9: 
1:6a631a9:         PolicyEntry policy = new PolicyEntry();
1:db1f6fe:         policy.setAdvisoryForFastProducers(true);
1:6a631a9:         policy.setAdvisoryForConsumed(true);
1:6a631a9:         policy.setAdvisoryForDelivery(true);
1:6a631a9:         policy.setAdvisoryForDiscardingMessages(true);
1:6a631a9:         policy.setAdvisoryForSlowConsumers(true);
1:6a631a9:         policy.setAdvisoryWhenFull(true);
1:6a631a9:         policy.setProducerFlowControl(false);
1:6a631a9:         PolicyMap pMap = new PolicyMap();
1:6a631a9:         pMap.setDefaultEntry(policy);
1:6a631a9:         broker.setDestinationPolicy(pMap);
1:6a631a9: 
1:6a631a9:         broker.start();
1:6a631a9:     }
1:6a631a9: 
1:6a631a9:     protected Connection createConnection() throws Exception {
1:6a631a9:         Connection con = createConnectionFactory().createConnection();
1:6a631a9:         con.start();
1:6a631a9:         return con;
1:6a631a9:     }
1:6a631a9: 
1:6a631a9:     private void destroyBroker() throws Exception {
1:6a631a9:         if (broker != null)
1:6a631a9:             broker.stop();
1:6a631a9:     }
1:6a631a9: 
1:6a631a9:     @Test
1:6a631a9:     public void testAdvisoryTopic() throws Exception {
1:6a631a9:         Connection connection = createConnection();
1:6a631a9:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6a631a9:         ActiveMQDestination queue = (ActiveMQDestination) session.createQueue("AdvisoryTopicCleanUpTestQueue");
1:6a631a9:         MessageProducer prod = session.createProducer(queue);
1:6a631a9:         Message message = session.createMessage();
1:6a631a9:         prod.send(message);
1:6a631a9:         message = session.createMessage();
1:6a631a9:         prod.send(message);
1:6a631a9:         message = session.createMessage();
1:6a631a9:         prod.send(message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 1000);
1:6a631a9:         connection.close();
1:6a631a9:         connection = createConnection();
1:6a631a9: 
1:6a631a9:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:6a631a9:         MessageConsumer consumer = session.createConsumer(queue);
1:6a631a9:         message = consumer.receive(60 * 1000);
1:6a631a9:         message.acknowledge();
1:6a631a9:         connection.close();
1:6a631a9:         connection = null;
1:6a631a9: 
1:6a631a9:         for (int i = 0; i < 2; i++) {
1:6a631a9:             connection = createConnection();
1:6a631a9:             session = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:6a631a9:             consumer = session.createConsumer(queue);
1:6a631a9:             message = consumer.receive(60 * 1000);
1:6a631a9:             session.rollback();
1:6a631a9:             connection.close();
1:6a631a9:             connection = null;
1:6a631a9:         }
1:6a631a9: 
1:6a631a9:         Thread.sleep(2 * 1000);
1:6a631a9: 
1:6a631a9:         connection = createConnection();
1:6a631a9:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:6a631a9:         consumer = session.createConsumer(queue);
1:6a631a9:         message = consumer.receive(1000);
1:6a631a9:         if (message != null)
1:6a631a9:             message.acknowledge();
1:6a631a9:         connection.close();
1:6a631a9:         connection = null;
1:6a631a9: 
1:6a631a9:         TimeUnit.SECONDS.sleep(1);
1:6a631a9: 
1:6a631a9:         ActiveMQDestination dests[] = broker.getRegionBroker().getDestinations();
1:6a631a9: 
1:6a631a9:         for (ActiveMQDestination destination: dests) {
1:6a631a9:             String name = destination.getPhysicalName();
1:6a631a9:             if (name.contains(queue.getPhysicalName())) {
1:c6c3b23:                 LOG.info("Destination on Broker before removing the Queue: " + name);
1:6a631a9:             }
1:6a631a9:         }
1:6a631a9: 
1:6a631a9:         dests = broker.getRegionBroker().getDestinations();
1:6a631a9:         if (dests == null) {
1:6a631a9:             fail("Should have Destination for: " + queue.getPhysicalName());
1:6a631a9:         }
1:6a631a9: 
1:6a631a9:         broker.getAdminView().removeQueue(queue.getPhysicalName());
1:6a631a9: 
1:6a631a9:         dests = broker.getRegionBroker().getDestinations();
1:6a631a9:         if (dests != null)
1:6a631a9:         {
1:6a631a9:             for (ActiveMQDestination destination: dests) {
1:6a631a9:                 String name = destination.getPhysicalName();
1:c6c3b23:                 LOG.info("Destination on broker after removing the Queue: " + name);
1:6a631a9:                 assertFalse("Advisory topic should not exist. " + name,
1:6a631a9:                             name.startsWith("ActiveMQ.Advisory") && name.contains(queue.getPhysicalName()));
1:6a631a9:             }
1:6a631a9:         }
1:6a631a9:     }
1:6a631a9: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:c6c3b23
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Destination on Broker before removing the Queue: " + name);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Destination on broker after removing the Queue: " + name);
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:         policy.setAdvisoryForFastProducers(true);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:6a631a9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: 
1: public class AdvisoryTopicCleanUpTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryTopicCleanUpTest.class);
1: 
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri + "?jms.redeliveryPolicy.maximumRedeliveries=2");
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         createBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setUseJmx(true);
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1: 
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setAdvisdoryForFastProducers(true);
1:         policy.setAdvisoryForConsumed(true);
1:         policy.setAdvisoryForDelivery(true);
1:         policy.setAdvisoryForDiscardingMessages(true);
1:         policy.setAdvisoryForSlowConsumers(true);
1:         policy.setAdvisoryWhenFull(true);
1:         policy.setProducerFlowControl(false);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1: 
1:         broker.start();
1:     }
1: 
1:     protected Connection createConnection() throws Exception {
1:         Connection con = createConnectionFactory().createConnection();
1:         con.start();
1:         return con;
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     @Test
1:     public void testAdvisoryTopic() throws Exception {
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQDestination queue = (ActiveMQDestination) session.createQueue("AdvisoryTopicCleanUpTestQueue");
1:         MessageProducer prod = session.createProducer(queue);
1:         Message message = session.createMessage();
1:         prod.send(message);
1:         message = session.createMessage();
1:         prod.send(message);
1:         message = session.createMessage();
1:         prod.send(message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 1000);
1:         connection.close();
1:         connection = createConnection();
1: 
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         message = consumer.receive(60 * 1000);
1:         message.acknowledge();
1:         connection.close();
1:         connection = null;
1: 
1:         for (int i = 0; i < 2; i++) {
1:             connection = createConnection();
1:             session = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:             consumer = session.createConsumer(queue);
1:             message = consumer.receive(60 * 1000);
1:             session.rollback();
1:             connection.close();
1:             connection = null;
1:         }
1: 
1:         Thread.sleep(2 * 1000);
1: 
1:         connection = createConnection();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumer = session.createConsumer(queue);
1:         message = consumer.receive(1000);
1:         if (message != null)
1:             message.acknowledge();
1:         connection.close();
1:         connection = null;
1: 
1:         TimeUnit.SECONDS.sleep(1);
1: 
1:         ActiveMQDestination dests[] = broker.getRegionBroker().getDestinations();
1: 
1:         for (ActiveMQDestination destination: dests) {
1:             String name = destination.getPhysicalName();
1:             if (name.contains(queue.getPhysicalName())) {
0:                 LOG.debug("Destination on Broker before removing the Queue: " + name);
1:             }
1:         }
1: 
1:         dests = broker.getRegionBroker().getDestinations();
1:         if (dests == null) {
1:             fail("Should have Destination for: " + queue.getPhysicalName());
1:         }
1: 
1:         broker.getAdminView().removeQueue(queue.getPhysicalName());
1: 
1:         dests = broker.getRegionBroker().getDestinations();
1:         if (dests != null)
1:         {
1:             for (ActiveMQDestination destination: dests) {
1:                 String name = destination.getPhysicalName();
0:                 LOG.debug("Destination on broker after removing the Queue: " + name);
1:                 assertFalse("Advisory topic should not exist. " + name,
1:                             name.startsWith("ActiveMQ.Advisory") && name.contains(queue.getPhysicalName()));
1:             }
1:         }
1:     }
1: }
============================================================================