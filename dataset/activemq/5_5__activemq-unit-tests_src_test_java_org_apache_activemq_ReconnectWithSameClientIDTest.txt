3:de23149: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
3:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:de23149:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:de23149: package org.apache.activemq;
1:de23149: 
1:33cdefa: import java.util.concurrent.atomic.AtomicBoolean;
1:de23149: import javax.jms.Connection;
1:42e51a3: import javax.jms.ConnectionFactory;
1:de23149: import javax.jms.InvalidClientIDException;
1:de23149: import javax.jms.JMSException;
1:de23149: import javax.jms.Session;
1:fc00993: 
1:33cdefa: import junit.framework.Test;
1:33cdefa: import org.apache.activemq.util.DefaultTestAppender;
1:33cdefa: import org.apache.log4j.Appender;
1:33cdefa: import org.apache.log4j.spi.LoggingEvent;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:de23149: 
1:de23149: public class ReconnectWithSameClientIDTest extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ReconnectWithSameClientIDTest.class);
1:de23149: 
1:de23149:     protected Connection connection;
1:de23149:     protected boolean transacted;
1:de23149:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:33cdefa:     public boolean useFailover = false;
1:33cdefa: 
1:33cdefa:     public static Test suite() {
1:33cdefa:         return suite(ReconnectWithSameClientIDTest.class);
1:33cdefa:     }
1:33cdefa: 
1:33cdefa:     public void initCombosForTestReconnectMultipleTimesWithSameClientID() {
1:33cdefa:         addCombinationValues("useFailover", new Object[]{Boolean.FALSE, Boolean.TRUE});
1:33cdefa:     }
1:de23149: 
1:de23149:     public void testReconnectMultipleTimesWithSameClientID() throws Exception {
1:de23149: 
1:33cdefa:         org.apache.log4j.Logger log4jLogger =
1:33cdefa:                 org.apache.log4j.Logger.getLogger(org.apache.activemq.broker.jmx.ManagedTransportConnection.class);
1:33cdefa:         final AtomicBoolean failed = new AtomicBoolean(false);
1:33cdefa: 
1:33cdefa:         Appender appender = new DefaultTestAppender() {
1:33cdefa:             @Override
1:33cdefa:             public void doAppend(LoggingEvent event) {
1:33cdefa:                 if (event.getMessage().toString().startsWith("Failed to register MBean")) {
1:33cdefa:                     LOG.info("received unexpected log message: " + event.getMessage());
1:33cdefa:                     failed.set(true);
1:33cdefa:                 }
4:de23149:             }
1:33cdefa:         };
1:33cdefa:         log4jLogger.addAppender(appender);
1:33cdefa:         try {
1:33cdefa:             connection = connectionFactory.createConnection();
1:33cdefa:             useConnection(connection);
1:de23149: 
1:33cdefa:             // now lets create another which should fail
1:33cdefa:             for (int i = 1; i < 11; i++) {
1:33cdefa:                 Connection connection2 = connectionFactory.createConnection();
1:33cdefa:                 try {
1:33cdefa:                     useConnection(connection2);
1:33cdefa:                     fail("Should have thrown InvalidClientIDException on attempt" + i);
1:33cdefa:                 } catch (InvalidClientIDException e) {
1:33cdefa:                     LOG.info("Caught expected: " + e);
1:33cdefa:                 } finally {
1:33cdefa:                     connection2.close();
1:33cdefa:                 }
1:33cdefa:             }
1:33cdefa: 
1:33cdefa:             // now lets try closing the original connection and creating a new
1:33cdefa:             // connection with the same ID
1:33cdefa:             connection.close();
1:33cdefa:             connection = connectionFactory.createConnection();
1:33cdefa:             useConnection(connection);
1:33cdefa:         } finally {
1:33cdefa:             log4jLogger.removeAppender(appender);
1:33cdefa:         }
1:33cdefa:         assertFalse("failed on unexpected log event", failed.get());
1:f812e34:     }
1:de23149: 
1:42e51a3:     @Override
1:42e51a3:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:33cdefa:         return new ActiveMQConnectionFactory((useFailover ? "failover:" : "") +
1:33cdefa:                 broker.getTransportConnectors().get(0).getPublishableConnectString());
1:42e51a3:     }
1:42e51a3: 
1:de23149:     protected void setUp() throws Exception {
1:42e51a3:         bindAddress = "tcp://localhost:0";
1:de23149:         super.setUp();
1:de23149:     }
1:de23149: 
1:de23149:     protected void tearDown() throws Exception {
1:de23149:         if (connection != null) {
2:de23149:             connection.close();
1:de23149:             connection = null;
1:de23149:         }
1:de23149:         super.tearDown();
1:de23149:     }
1:de23149: 
1:de23149:     protected void useConnection(Connection connection) throws JMSException {
1:de23149:         connection.setClientID("foo");
1:de23149:         connection.start();
1:de23149:     }
1:de23149: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
1:         bindAddress = "tcp://localhost:0";
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:33cdefa
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import junit.framework.Test;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
1:     public boolean useFailover = false;
1: 
1:     public static Test suite() {
1:         return suite(ReconnectWithSameClientIDTest.class);
1:     }
1: 
1:     public void initCombosForTestReconnectMultipleTimesWithSameClientID() {
1:         addCombinationValues("useFailover", new Object[]{Boolean.FALSE, Boolean.TRUE});
1:     }
1:         org.apache.log4j.Logger log4jLogger =
1:                 org.apache.log4j.Logger.getLogger(org.apache.activemq.broker.jmx.ManagedTransportConnection.class);
1:         final AtomicBoolean failed = new AtomicBoolean(false);
1: 
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getMessage().toString().startsWith("Failed to register MBean")) {
1:                     LOG.info("received unexpected log message: " + event.getMessage());
1:                     failed.set(true);
1:                 }
1:         };
1:         log4jLogger.addAppender(appender);
1:         try {
1:             connection = connectionFactory.createConnection();
1:             useConnection(connection);
1:             // now lets create another which should fail
1:             for (int i = 1; i < 11; i++) {
1:                 Connection connection2 = connectionFactory.createConnection();
1:                 try {
1:                     useConnection(connection2);
1:                     fail("Should have thrown InvalidClientIDException on attempt" + i);
1:                 } catch (InvalidClientIDException e) {
1:                     LOG.info("Caught expected: " + e);
1:                 } finally {
1:                     connection2.close();
1:                 }
1:             }
1: 
1:             // now lets try closing the original connection and creating a new
1:             // connection with the same ID
1:             connection.close();
1:             connection = connectionFactory.createConnection();
1:             useConnection(connection);
1:         } finally {
1:             log4jLogger.removeAppender(appender);
1:         }
1:         assertFalse("failed on unexpected log event", failed.get());
1:         return new ActiveMQConnectionFactory((useFailover ? "failover:" : "") +
1:                 broker.getTransportConnectors().get(0).getPublishableConnectString());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(ReconnectWithSameClientIDTest.class);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:             Connection connection2 = connectionFactory.createConnection();
0:             try {
0:                 useConnection(connection2);
0:                 fail("Should have thrown InvalidClientIDException on attempt" + i);
0:             } catch (InvalidClientIDException e) {
0:                 connection2.close();
0:                 LOG.info("Caught expected: " + e);
1:             }
0:         // now lets try closing the original connection and creating a new
0:         // connection with the same ID
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Caught expected: " + e);
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:             log.info("Caught expected: " + e);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ReconnectWithSameClientIDTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:de23149
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.InvalidClientIDException;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: /**
0:  * 
0:  * @version $Revision$
0:  */
1: public class ReconnectWithSameClientIDTest extends EmbeddedBrokerTestSupport {
1: 
1:     protected Connection connection;
1:     protected boolean transacted;
1:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1: 
1:     public void testReconnectMultipleTimesWithSameClientID() throws Exception {
0:         connection = connectionFactory.createConnection();
0:         useConnection(connection);
1: 
0:         // now lets create another which should fail
0:         for (int i = 1; i < 11; i++) {
0:         Connection connection2 = connectionFactory.createConnection();
0:         try {
0:             useConnection(connection2);
0:             fail("Should have thrown InvalidClientIDException on attempt" + i);
1:         }
0:         catch (InvalidClientIDException e) {
0:             connection2.close();
0:             System.out.println("Caught expected: " + e);
1:         }
1:         }
1: 
0:         // now lets try closing the original connection and creating a new connection with the same ID
1:         connection.close();
0:         connection = connectionFactory.createConnection();
0:         useConnection(connection);
1:     }
1: 
1:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://localhost:61616";
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected void useConnection(Connection connection) throws JMSException {
1:         connection.setClientID("foo");
1:         connection.start();
1:         /**
0:          * Session session = connection.createSession(transacted, authMode);
0:          * return session;
0:          */
1:     }
1: }
============================================================================