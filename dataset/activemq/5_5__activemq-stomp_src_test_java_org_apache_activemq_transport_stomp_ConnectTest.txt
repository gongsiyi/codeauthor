1:4cf6dae: /**
1:4cf6dae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4cf6dae:  * contributor license agreements.  See the NOTICE file distributed with
1:4cf6dae:  * this work for additional information regarding copyright ownership.
1:4cf6dae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4cf6dae:  * (the "License"); you may not use this file except in compliance with
1:4cf6dae:  * the License.  You may obtain a copy of the License at
1:4cf6dae:  *
1:4cf6dae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4cf6dae:  *
1:4cf6dae:  * Unless required by applicable law or agreed to in writing, software
1:4cf6dae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4cf6dae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4cf6dae:  * See the License for the specific language governing permissions and
1:4cf6dae:  * limitations under the License.
1:4cf6dae:  */
1:4cf6dae: package org.apache.activemq.transport.stomp;
1:7fe431b: 
1:1b38caa: import static org.junit.Assert.assertTrue;
1:1b38caa: 
1:49e7044: import java.net.InetAddress;
1:49e7044: import java.net.InetSocketAddress;
1:49e7044: import java.net.ServerSocket;
1:4cf6dae: import java.util.Vector;
1:bae0e60: import java.util.concurrent.CountDownLatch;
1:bae0e60: import java.util.concurrent.TimeUnit;
1:1b38caa: 
1:49e7044: import javax.net.ServerSocketFactory;
1:1b38caa: 
1:49e7044: import org.apache.activemq.broker.BrokerPlugin;
1:4cf6dae: import org.apache.activemq.broker.BrokerService;
1:49e7044: import org.apache.activemq.security.JaasDualAuthenticationPlugin;
1:4cf6dae: import org.apache.activemq.util.Wait;
1:4cf6dae: import org.junit.After;
1:4cf6dae: import org.junit.Before;
1:4cf6dae: import org.junit.Test;
1:4cf6dae: import org.slf4j.Logger;
1:4cf6dae: import org.slf4j.LoggerFactory;
1:7fe431b: 
1:4cf6dae: // https://issues.apache.org/jira/browse/AMQ-3393
1:4cf6dae: public class ConnectTest {
1:540a66b: 
1:4cf6dae:     private static final Logger LOG = LoggerFactory.getLogger(ConnectTest.class);
1:540a66b: 
1:540a66b:     private BrokerService brokerService;
1:540a66b:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
7:4cf6dae: 
1:4cf6dae:     @Before
1:4cf6dae:     public void startBroker() throws Exception {
1:4cf6dae:         exceptions.clear();
1:4cf6dae:         brokerService = new BrokerService();
1:4cf6dae:         brokerService.setPersistent(false);
1:4cf6dae:         brokerService.setAdvisorySupport(false);
4:4cf6dae:     }
1:49e7044: 
1:4cf6dae:     @After
1:4cf6dae:     public void stopBroker() throws Exception {
1:4cf6dae:         if (brokerService != null) {
1:4cf6dae:             brokerService.stop();
1:4cf6dae:         }
1:4cf6dae:     }
1:49e7044: 
1:388c16d:     @Test(timeout = 60000)
1:4cf6dae:     public void testStompConnectLeak() throws Exception {
1:4cf6dae: 
1:49e7044:         brokerService.addConnector("stomp://0.0.0.0:0?transport.soLinger=0");
1:49e7044:         brokerService.start();
1:49e7044: 
1:7fe431b:         StompConnection connection = new StompConnection();
1:7fe431b:         //test 500 connect/disconnects
1:7fe431b:         for (int x = 0; x < 500; x++) {
1:7fe431b:             try {
1:7fe431b:                 connection.open("localhost", brokerService.getTransportConnectors().get(0).getConnectUri().getPort());
1:7fe431b:                 connection.connect("system", "manager");
1:7fe431b:                 connection.disconnect();
1:7fe431b:             } catch (Exception ex) {
1:7fe431b:                 LOG.error("unexpected exception on connect/disconnect", ex);
1:7fe431b:                 exceptions.add(ex);
1:4cf6dae:             }
1:4cf6dae:         }
1:4cf6dae: 
1:4cf6dae:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:1b38caa:             @Override
1:49e7044:             public boolean isSatisified() throws Exception {
1:4cf6dae:                 return 0 == brokerService.getTransportConnectors().get(0).connectionCount();
1:4cf6dae:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
1:388c16d: 
1:4cf6dae:         assertTrue("no exceptions", exceptions.isEmpty());
1:49e7044:     }
1:388c16d: 
1:388c16d:     @Test(timeout = 60000)
1:49e7044:     public void testJaasDualStopWithOpenConnection() throws Exception {
1:33edc99: 
1:49e7044:         brokerService.setPlugins(new BrokerPlugin[]{new JaasDualAuthenticationPlugin()});
1:49e7044:         brokerService.addConnector("stomp://0.0.0.0:0?transport.closeAsync=false");
1:49e7044:         brokerService.start();
1:49e7044: 
1:bae0e60:         final CountDownLatch doneConnect = new CountDownLatch(1);
1:49e7044:         final int listenPort = brokerService.getTransportConnectors().get(0).getConnectUri().getPort();
1:49e7044:         Thread t1 = new Thread() {
1:49e7044:             StompConnection connection = new StompConnection();
1:49e7044: 
1:1b38caa:             @Override
1:49e7044:             public void run() {
1:49e7044:                 try {
1:49e7044:                     connection.open("localhost", listenPort);
1:49e7044:                     connection.connect("system", "manager");
1:bae0e60:                     doneConnect.countDown();
1:49e7044:                 } catch (Exception ex) {
1:49e7044:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:49e7044:                     exceptions.add(ex);
1:49e7044:                 }
1:49e7044:             }
1:49e7044:         };
1:49e7044: 
1:7fe431b:         t1.start();
1:49e7044: 
1:49e7044:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:388c16d:             @Override
1:388c16d:             public boolean isSatisified() throws Exception {
1:388c16d:                 return 1 == brokerService.getTransportConnectors().get(0).connectionCount();
1:388c16d:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
1:49e7044: 
1:bae0e60:         assertTrue("connected on time", doneConnect.await(5, TimeUnit.SECONDS));
1:49e7044:         brokerService.stop();
1:49e7044: 
1:49e7044:         // server socket should be available after stop
1:49e7044:         ServerSocket socket = ServerSocketFactory.getDefault().createServerSocket();
1:49e7044:         socket.setReuseAddress(true);
1:49e7044:         InetAddress address = InetAddress.getLocalHost();
1:49e7044:         socket.bind(new InetSocketAddress(address, listenPort));
1:49e7044:         LOG.info("bound address: " + socket);
1:49e7044:         socket.close();
1:49e7044:         assertTrue("no exceptions", exceptions.isEmpty());
1:49e7044:     }
1:33edc99: 
1:388c16d:     @Test(timeout = 60000)
1:33edc99:     public void testInactivityMonitor() throws Exception {
1:33edc99: 
1:7fe431b:         brokerService.addConnector("stomp://0.0.0.0:0?transport.defaultHeartBeat=1000,0&transport.useKeepAlive=false");
1:33edc99:         brokerService.start();
1:33edc99: 
1:33edc99:         Thread t1 = new Thread() {
1:33edc99:             StompConnection connection = new StompConnection();
1:33edc99: 
1:1b38caa:             @Override
1:33edc99:             public void run() {
1:33edc99:                 try {
1:33edc99:                     connection.open("localhost",  brokerService.getTransportConnectors().get(0).getConnectUri().getPort());
1:33edc99:                     connection.connect("system", "manager");
1:33edc99:                 } catch (Exception ex) {
1:33edc99:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:33edc99:                     exceptions.add(ex);
1:33edc99:                 }
1:33edc99:             }
1:33edc99:         };
1:33edc99: 
1:7fe431b:         t1.start();
1:33edc99: 
1:33edc99:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:33edc99:              @Override
1:33edc99:              public boolean isSatisified() throws Exception {
1:33edc99:                  return 1 == brokerService.getTransportConnectors().get(0).connectionCount();
1:33edc99:              }
1:388c16d:          }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
1:4cf6dae: 
1:33edc99:         // and it should be closed due to inactivity
1:33edc99:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:33edc99:             @Override
1:33edc99:             public boolean isSatisified() throws Exception {
1:33edc99:                 return 0 == brokerService.getTransportConnectors().get(0).connectionCount();
1:33edc99:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
1:4cf6dae: 
1:33edc99:         assertTrue("no exceptions", exceptions.isEmpty());
1:33edc99:     }
1:4cf6dae: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private BrokerService brokerService;
1:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
commit:388c16d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:              @Override
1:              public boolean isSatisified() throws Exception {
1:                  return 1 == brokerService.getTransportConnectors().get(0).connectionCount();
1:              }
1:          }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));
1: 
author:gtully
-------------------------------------------------------------------------------
commit:bae0e60
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch doneConnect = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:                     doneConnect.countDown();
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("connected on time", doneConnect.await(5, TimeUnit.SECONDS));
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:7fe431b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         StompConnection connection = new StompConnection();
1:         //test 500 connect/disconnects
1:         for (int x = 0; x < 500; x++) {
1:             try {
1:                 connection.open("localhost", brokerService.getTransportConnectors().get(0).getConnectUri().getPort());
1:                 connection.connect("system", "manager");
1:                 connection.disconnect();
1:             } catch (Exception ex) {
1:                 LOG.error("unexpected exception on connect/disconnect", ex);
1:                 exceptions.add(ex);
/////////////////////////////////////////////////////////////////////////
1:         t1.start();
/////////////////////////////////////////////////////////////////////////
1:         brokerService.addConnector("stomp://0.0.0.0:0?transport.defaultHeartBeat=1000,0&transport.useKeepAlive=false");
/////////////////////////////////////////////////////////////////////////
1:         t1.start();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:1236bbf
author:Gary Tully
-------------------------------------------------------------------------------
commit:33edc99
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Test
1:     public void testInactivityMonitor() throws Exception {
1: 
0:         brokerService.addConnector("stomp://0.0.0.0:0?transport.defaultHeartBeat=5000,0&transport.useKeepAlive=false");
1:         brokerService.start();
1: 
1:         Thread t1 = new Thread() {
1:             StompConnection connection = new StompConnection();
1: 
1:             public void run() {
1:                 try {
1:                     connection.open("localhost",  brokerService.getTransportConnectors().get(0).getConnectUri().getPort());
1:                     connection.connect("system", "manager");
1:                 } catch (Exception ex) {
1:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1: 
0:         t1.run();
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:                  @Override
1:                  public boolean isSatisified() throws Exception {
1:                      return 1 == brokerService.getTransportConnectors().get(0).connectionCount();
1:                  }
0:              }));
1: 
1:         // and it should be closed due to inactivity
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 0 == brokerService.getTransportConnectors().get(0).connectionCount();
1:             }
0:         }));
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
commit:49e7044
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import java.net.InetSocketAddress;
1: import java.net.ServerSocket;
1: import javax.net.ServerSocketFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.security.JaasDualAuthenticationPlugin;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         brokerService.addConnector("stomp://0.0.0.0:0?transport.soLinger=0");
1:         brokerService.start();
1: 
0:                     connection.open("localhost", brokerService.getTransportConnectors().get(0).getConnectUri().getPort());
/////////////////////////////////////////////////////////////////////////
0:         long done = System.currentTimeMillis() + (15 * 1000);
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Test
1:     public void testJaasDualStopWithOpenConnection() throws Exception {
1: 
1:         brokerService.setPlugins(new BrokerPlugin[]{new JaasDualAuthenticationPlugin()});
1:         brokerService.addConnector("stomp://0.0.0.0:0?transport.closeAsync=false");
1:         brokerService.start();
1: 
1:         final int listenPort = brokerService.getTransportConnectors().get(0).getConnectUri().getPort();
1:         Thread t1 = new Thread() {
1:             StompConnection connection = new StompConnection();
1: 
1:             public void run() {
1:                 try {
1:                     connection.open("localhost", listenPort);
1:                     connection.connect("system", "manager");
1:                 } catch (Exception ex) {
1:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1: 
0:         t1.run();
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
0:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return 1 == brokerService.getTransportConnectors().get(0).connectionCount();
1:             }
0:         }));
1: 
1:         brokerService.stop();
1: 
1:         // server socket should be available after stop
1:         ServerSocket socket = ServerSocketFactory.getDefault().createServerSocket();
1:         socket.setReuseAddress(true);
1:         InetAddress address = InetAddress.getLocalHost();
1:         socket.bind(new InetSocketAddress(address, listenPort));
1:         LOG.info("bound address: " + socket);
1:         socket.close();
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
commit:ac1c44f
/////////////////////////////////////////////////////////////////////////
0:         brokerService.addConnector("stomp://0.0.0.0:61612?transport.soLinger=0");
commit:4cf6dae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.util.Vector;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static junit.framework.Assert.assertTrue;
1: 
1: // https://issues.apache.org/jira/browse/AMQ-3393
1: public class ConnectTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(ConnectTest.class);
0:     BrokerService brokerService;
0:     Vector<Throwable> exceptions = new Vector<Throwable>();
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         exceptions.clear();
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setAdvisorySupport(false);
0:         brokerService.addConnector("stomp://0.0.0.0:61612");
0:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
0:     @Test
1:     public void testStompConnectLeak() throws Exception {
1: 
0:         Thread t1 = new Thread() {
0:             StompConnection connection = new StompConnection();
1: 
0:             public void run() {
0:                 try {
0:                     connection.open("localhost", 61612);
0:                     connection.connect("system", "manager");
0:                     connection.disconnect();
0:                 } catch (Exception ex) {
0:                     LOG.error("unexpected exception on connect/disconnect", ex);
0:                     exceptions.add(ex);
1:                 }
1:             }
0:         };
1: 
0:         int i = 0;
0:         long done = System.currentTimeMillis() + (60 * 1000 * 2);
0:         while (System.currentTimeMillis() < done) {
0:             t1.run();
0:             if (++i % 5000 == 0) {
0:                 LOG.info("connection count on stomp connector:" + brokerService.getTransportConnectors().get(0).connectionCount());
1:             }
1:         }
1: 
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
0:             @Override
0:             public boolean isSatisified() throws Exception {
1:                 return 0 == brokerService.getTransportConnectors().get(0).connectionCount();
1:             }
0:         }));
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: }
============================================================================