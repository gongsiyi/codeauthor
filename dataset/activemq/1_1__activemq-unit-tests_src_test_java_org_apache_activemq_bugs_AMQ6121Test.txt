1:66cfc7b: /**
1:66cfc7b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:66cfc7b:  * contributor license agreements.  See the NOTICE file distributed with
1:66cfc7b:  * this work for additional information regarding copyright ownership.
1:66cfc7b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:66cfc7b:  * (the "License"); you may not use this file except in compliance with
1:66cfc7b:  * the License.  You may obtain a copy of the License at
1:66cfc7b:  *
1:66cfc7b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:66cfc7b:  *
1:66cfc7b:  * Unless required by applicable law or agreed to in writing, software
1:66cfc7b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:66cfc7b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:66cfc7b:  * See the License for the specific language governing permissions and
1:66cfc7b:  * limitations under the License.
1:66cfc7b:  */
1:66cfc7b: package org.apache.activemq.bugs;
1:66cfc7b: 
1:66cfc7b: import static org.junit.Assert.assertEquals;
1:66cfc7b: import static org.junit.Assert.assertTrue;
1:66cfc7b: 
1:66cfc7b: import java.io.File;
1:66cfc7b: import java.util.ArrayList;
1:66cfc7b: import java.util.List;
1:66cfc7b: 
1:66cfc7b: import javax.jms.Connection;
1:66cfc7b: import javax.jms.ConnectionFactory;
1:66cfc7b: import javax.jms.DeliveryMode;
1:66cfc7b: import javax.jms.Destination;
1:66cfc7b: import javax.jms.JMSException;
1:66cfc7b: import javax.jms.MessageProducer;
1:66cfc7b: import javax.jms.Session;
1:66cfc7b: import javax.jms.TextMessage;
1:66cfc7b: import javax.management.MalformedObjectNameException;
1:66cfc7b: import javax.management.ObjectName;
1:66cfc7b: 
1:66cfc7b: import org.apache.activemq.ActiveMQConnectionFactory;
1:66cfc7b: import org.apache.activemq.broker.BrokerService;
1:66cfc7b: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:66cfc7b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:66cfc7b: import org.apache.activemq.broker.region.policy.PolicyMap;
1:66cfc7b: import org.apache.activemq.leveldb.LevelDBStore;
1:66cfc7b: import org.apache.activemq.util.IOHelper;
1:66cfc7b: import org.apache.activemq.util.Wait;
1:66cfc7b: import org.junit.After;
1:66cfc7b: import org.junit.Before;
1:66cfc7b: import org.junit.Test;
1:66cfc7b: import org.slf4j.Logger;
1:66cfc7b: import org.slf4j.LoggerFactory;
1:66cfc7b: 
1:66cfc7b: /**
1:66cfc7b:  * Test to ensure DLQ expiring message is not in recursive loop.
1:66cfc7b:  */
1:66cfc7b: public class AMQ6121Test {
1:66cfc7b: 
1:66cfc7b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6121Test.class);
1:66cfc7b: 
1:66cfc7b:     private BrokerService broker;
1:66cfc7b: 
1:66cfc7b:     @Before
1:66cfc7b:     public void startBroker() throws Exception {
1:66cfc7b:         broker = new BrokerService();
1:66cfc7b: 
1:66cfc7b:         LevelDBStore levelDBStore = new LevelDBStore();
1:66cfc7b:         File directory = new File("target/activemq-data/myleveldb");
1:66cfc7b:         IOHelper.deleteChildren(directory);
1:66cfc7b:         levelDBStore.setDirectory(directory);
1:66cfc7b:         levelDBStore.deleteAllMessages();
1:66cfc7b: 
1:66cfc7b:         PolicyMap policyMap = new PolicyMap();
1:66cfc7b:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:66cfc7b:         PolicyEntry pe = new PolicyEntry();
1:66cfc7b: 
1:66cfc7b:         pe.setExpireMessagesPeriod(8000);
1:66cfc7b:         pe.setMaxAuditDepth(25);
1:66cfc7b:         pe.setUseCache(false);
1:66cfc7b:         pe.setLazyDispatch(false);
1:66cfc7b:         pe.setOptimizedDispatch(true);
1:66cfc7b:         pe.setProducerFlowControl(false);
1:66cfc7b:         pe.setEnableAudit(true);
1:66cfc7b: 
1:66cfc7b:         pe.setQueue(">");
1:66cfc7b:         entries.add(pe);
1:66cfc7b: 
1:66cfc7b:         policyMap.setPolicyEntries(entries);
1:66cfc7b: 
1:66cfc7b:         broker.setDestinationPolicy(policyMap);
1:66cfc7b:         broker.setPersistenceAdapter(levelDBStore);
1:66cfc7b:         // broker.setPersistent(false);
1:66cfc7b: 
1:66cfc7b:         broker.start();
1:66cfc7b:         broker.waitUntilStarted();
1:66cfc7b:     }
1:66cfc7b: 
1:66cfc7b:     @After
1:66cfc7b:     public void stopBroker() throws Exception {
1:66cfc7b:         if (broker != null) {
1:66cfc7b:             broker.stop();
1:66cfc7b:         }
1:66cfc7b:     }
1:66cfc7b: 
1:66cfc7b:     @Test(timeout = 30000)
1:66cfc7b:     public void sendToDLQ() throws Exception {
1:66cfc7b: 
1:66cfc7b:         final int MSG_COUNT = 50;
1:66cfc7b: 
1:66cfc7b:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:66cfc7b:         Connection connection = connectionFactory.createConnection();
1:66cfc7b:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:66cfc7b:         Destination destination = session.createQueue("ActiveMQ.DLQ");
1:66cfc7b:         MessageProducer producer = session.createProducer(destination);
1:66cfc7b:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:66cfc7b: 
1:66cfc7b:         TextMessage txtMessage = session.createTextMessage();
1:66cfc7b:         txtMessage.setText("Test_Message");
1:66cfc7b: 
1:66cfc7b:         // Exceed audit so that the entries beyond audit aren't detected as duplicate
1:66cfc7b:         for (int i = 0; i < MSG_COUNT; ++i) {
1:66cfc7b:             producer.send(txtMessage, DeliveryMode.PERSISTENT, 4, 1000l);
1:66cfc7b:         }
1:66cfc7b: 
1:66cfc7b:         final QueueViewMBean view = getProxyToQueue("ActiveMQ.DLQ");
1:66cfc7b: 
1:66cfc7b:         LOG.info("WAITING for expiry...");
1:66cfc7b: 
1:66cfc7b:         assertTrue("Queue drained of expired", Wait.waitFor(new Wait.Condition() {
1:66cfc7b: 
1:66cfc7b:             @Override
1:66cfc7b:             public boolean isSatisified() throws Exception {
1:66cfc7b:                 return view.getQueueSize() == 0;
1:66cfc7b:             }
1:66cfc7b:         }));
1:66cfc7b: 
1:66cfc7b:         LOG.info("FINISHED WAITING for expiry.");
1:66cfc7b: 
1:66cfc7b:         // check the enqueue counter
1:66cfc7b:         LOG.info("Queue enqueue counter ==>>>" + view.getEnqueueCount());
1:66cfc7b:         assertEquals("Enqueue size ", MSG_COUNT, view.getEnqueueCount());
1:66cfc7b: 
1:66cfc7b:         connection.close();
1:66cfc7b:     }
1:66cfc7b: 
1:66cfc7b:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:66cfc7b:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:66cfc7b:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:66cfc7b:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:66cfc7b:         return proxy;
1:66cfc7b:     }
1:66cfc7b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:66cfc7b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test to ensure DLQ expiring message is not in recursive loop.
1:  */
1: public class AMQ6121Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6121Test.class);
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1: 
1:         LevelDBStore levelDBStore = new LevelDBStore();
1:         File directory = new File("target/activemq-data/myleveldb");
1:         IOHelper.deleteChildren(directory);
1:         levelDBStore.setDirectory(directory);
1:         levelDBStore.deleteAllMessages();
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         pe.setExpireMessagesPeriod(8000);
1:         pe.setMaxAuditDepth(25);
1:         pe.setUseCache(false);
1:         pe.setLazyDispatch(false);
1:         pe.setOptimizedDispatch(true);
1:         pe.setProducerFlowControl(false);
1:         pe.setEnableAudit(true);
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1: 
1:         policyMap.setPolicyEntries(entries);
1: 
1:         broker.setDestinationPolicy(policyMap);
1:         broker.setPersistenceAdapter(levelDBStore);
1:         // broker.setPersistent(false);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void sendToDLQ() throws Exception {
1: 
1:         final int MSG_COUNT = 50;
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("ActiveMQ.DLQ");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         TextMessage txtMessage = session.createTextMessage();
1:         txtMessage.setText("Test_Message");
1: 
1:         // Exceed audit so that the entries beyond audit aren't detected as duplicate
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             producer.send(txtMessage, DeliveryMode.PERSISTENT, 4, 1000l);
1:         }
1: 
1:         final QueueViewMBean view = getProxyToQueue("ActiveMQ.DLQ");
1: 
1:         LOG.info("WAITING for expiry...");
1: 
1:         assertTrue("Queue drained of expired", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getQueueSize() == 0;
1:             }
1:         }));
1: 
1:         LOG.info("FINISHED WAITING for expiry.");
1: 
1:         // check the enqueue counter
1:         LOG.info("Queue enqueue counter ==>>>" + view.getEnqueueCount());
1:         assertEquals("Enqueue size ", MSG_COUNT, view.getEnqueueCount());
1: 
1:         connection.close();
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================