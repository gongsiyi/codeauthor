1:f38908e: /**
1:f38908e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f38908e:  * contributor license agreements.  See the NOTICE file distributed with
1:f38908e:  * this work for additional information regarding copyright ownership.
1:f38908e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f38908e:  * (the "License"); you may not use this file except in compliance with
1:f38908e:  * the License.  You may obtain a copy of the License at
1:f38908e:  *
1:f38908e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f38908e:  *
1:f38908e:  * Unless required by applicable law or agreed to in writing, software
1:f38908e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f38908e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f38908e:  * See the License for the specific language governing permissions and
1:f38908e:  * limitations under the License.
1:f38908e:  */
1:f38908e: package org.apache.activemq.usecases;
1:f38908e: 
1:f38908e: import java.net.URI;
1:f38908e: import java.util.concurrent.Executor;
1:f38908e: import java.util.concurrent.Executors;
1:ed0e786: 
1:f38908e: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:f38908e: import org.apache.activemq.broker.BrokerService;
1:f38908e: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:f38908e: import org.apache.activemq.network.NetworkConnector;
1:f38908e: import org.apache.activemq.util.SocketProxy;
1:f38908e: import org.slf4j.Logger;
1:f38908e: import org.slf4j.LoggerFactory;
1:f38908e: 
1:f38908e: public class NetworkAsyncStartTest extends JmsMultipleBrokersTestSupport {
1:f38908e:     private static final Logger LOG = LoggerFactory.getLogger(NetworkAsyncStartTest.class);
1:f38908e: 
1:ed0e786:     private String brokerBDomain = "localhost:61617";
1:ed0e786:     private String brokerCDomain = "localhost:61618";
1:f38908e:     int bridgeCount=0;
1:f38908e: 
1:ed0e786:     public static final String KEYSTORE_TYPE = "jks";
1:ed0e786:     public static final String PASSWORD = "password";
1:ed0e786:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:ed0e786:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:ed0e786: 
1:ed0e786:     static {
1:ed0e786:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:ed0e786:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:ed0e786:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:ed0e786:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:ed0e786:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:ed0e786:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupTcp() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("tcp");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationTcp() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("tcp");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupNio() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("nio");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationNio() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("nio");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupAuto() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("auto");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationAuto() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("auto");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupAutoNio() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("auto+nio");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationAutoNio() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("auto+nio");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupAutoSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("auto+ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationAutoSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("auto+ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupNioSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("nio+ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationNioSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("nio+ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupAutoNioSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartup("auto+nio+ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     public void testAsyncNetworkStartupWithSlowConnectionCreationAutoNioSsl() throws Exception {
1:ed0e786:         testAsyncNetworkStartupWithSlowConnectionCreation("auto+nio+ssl");
1:ed0e786:     }
1:ed0e786: 
1:ed0e786:     protected void testAsyncNetworkStartup(String transport) throws Exception {
1:ed0e786:         String brokerBUri = transport + "://" + brokerBDomain;
1:ed0e786:         String brokerCUri = transport + "://" + brokerCDomain;
1:f38908e: 
1:f38908e:         BrokerService brokerA = brokers.get("BrokerA").broker;
1:f38908e:         bridgeBroker(brokerA, brokerBUri);
1:f38908e:         bridgeBroker(brokerA, brokerCUri);
1:f38908e: 
1:f38908e:         LOG.info("starting A, no blocking on failed network connectors");
1:f38908e:         brokerA.start();
1:f38908e: 
1:f38908e:         LOG.info("starting C transport connector");
1:f38908e:         BrokerService brokerC = brokers.get("BrokerC").broker;
1:f38908e:         brokerC.addConnector(brokerCUri);
2:f38908e:         brokerC.start();
1:f38908e: 
1:f38908e:         assertTrue("got bridge to C", waitForBridgeFormation(brokerA, 1, 1));
1:f38908e:         LOG.info("Got bridge A->C");
1:f38908e: 
1:f38908e:         LOG.info("starting B transport connector");
1:f38908e:         BrokerService brokerB = brokers.get("BrokerB").broker;
1:f38908e:         brokerB.addConnector(brokerBUri);
1:254d920:         brokerB.start();
1:f38908e: 
1:f38908e:         assertTrue("got bridge to B", waitForBridgeFormation(brokerA, 1, 0));
1:f38908e:         assertTrue("got bridge to B&C", waitForBridgeFormation(brokerA, 1, 1));
1:f38908e:     }
1:f38908e: 
1:ed0e786:     protected void testAsyncNetworkStartupWithSlowConnectionCreation(String transport) throws Exception {
1:ed0e786:         String brokerBUri = transport + "://" + brokerBDomain;
1:ed0e786:         String brokerCUri = transport + "://" + brokerCDomain;
1:f38908e: 
1:f38908e:         final BrokerService brokerA = brokers.get("BrokerA").broker;
1:f38908e: 
1:f38908e:         SocketProxy proxyToB = new SocketProxy();
1:f38908e:         // don't accept any connections so limited to one connection with backlog
1:f38908e:         proxyToB.setPauseAtStart(true);
1:f38908e:         proxyToB.setAcceptBacklog(1);
1:f38908e:         proxyToB.setTarget(new URI(brokerBUri));
1:f38908e:         proxyToB.open();
1:f38908e:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:f38908e:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:f38908e:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:f38908e:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:f38908e:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:f38908e:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:f38908e:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:f38908e:         bridgeBroker(brokerA, brokerCUri);
1:f38908e: 
1:f38908e:         Executor e = Executors.newCachedThreadPool();
1:f38908e:         e.execute(new Runnable() {
1:ed0e786:             @Override
1:f38908e:             public void run() {
1:f38908e:                 LOG.info("starting A");
1:f38908e:                 try {
1:f38908e:                     brokerA.setNetworkConnectorStartAsync(true);
1:f38908e:                     brokerA.start();
1:f38908e:                 } catch (Exception e) {
1:f38908e:                     LOG.error("start failed", e);
1:f38908e:                 }
1:f38908e:             }
1:f38908e:         });
1:f38908e: 
1:f38908e:         LOG.info("starting transport connector on C");
1:f38908e:         BrokerService brokerC = brokers.get("BrokerC").broker;
1:f38908e:         brokerC.addConnector(brokerCUri);
1:f38908e:         brokerC.start();
1:f38908e: 
1:f38908e:         final long maxWaitMillis = 20*1000;
1:f38908e:         assertTrue("got bridge to C in 10 seconds", waitForBridgeFormation(brokerA, 1, 7, maxWaitMillis));
1:f38908e:     }
1:f38908e: 
1:f38908e:     private void bridgeBroker(BrokerService localBroker, String remoteURI) throws Exception {
1:f38908e:         String uri = "static:(" + remoteURI + ")";
1:f38908e:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:f38908e:         connector.setName("bridge-" + bridgeCount++);
1:f38908e:         localBroker.addNetworkConnector(connector);
1:f38908e:     }
1:f38908e: 
1:f38908e:     @Override
1:f38908e:     public void setUp() throws Exception {
1:f38908e:         super.setAutoFail(true);
1:f38908e:         super.setUp();
1:f38908e:         // initially with no tcp transport connector
1:f38908e:         createBroker(new URI("broker:()BrokerA?persistent=false&useJmx=false"));
1:f38908e:         createBroker(new URI("broker:()BrokerB?persistent=false&useJmx=false"));
1:f38908e:         createBroker(new URI("broker:()BrokerC?persistent=false&useJmx=false"));
1:f38908e:     }
1:f38908e: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ed0e786
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private String brokerBDomain = "localhost:61617";
1:     private String brokerCDomain = "localhost:61618";
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     static {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:     }
1: 
1:     public void testAsyncNetworkStartupTcp() throws Exception {
1:         testAsyncNetworkStartup("tcp");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationTcp() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("tcp");
1:     }
1: 
1:     public void testAsyncNetworkStartupNio() throws Exception {
1:         testAsyncNetworkStartup("nio");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationNio() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("nio");
1:     }
1: 
1:     public void testAsyncNetworkStartupAuto() throws Exception {
1:         testAsyncNetworkStartup("auto");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationAuto() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("auto");
1:     }
1: 
1:     public void testAsyncNetworkStartupAutoNio() throws Exception {
1:         testAsyncNetworkStartup("auto+nio");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationAutoNio() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("auto+nio");
1:     }
1: 
1:     public void testAsyncNetworkStartupSsl() throws Exception {
1:         testAsyncNetworkStartup("ssl");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationSsl() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("ssl");
1:     }
1: 
1:     public void testAsyncNetworkStartupAutoSsl() throws Exception {
1:         testAsyncNetworkStartup("auto+ssl");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationAutoSsl() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("auto+ssl");
1:     }
1: 
1:     public void testAsyncNetworkStartupNioSsl() throws Exception {
1:         testAsyncNetworkStartup("nio+ssl");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationNioSsl() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("nio+ssl");
1:     }
1: 
1:     public void testAsyncNetworkStartupAutoNioSsl() throws Exception {
1:         testAsyncNetworkStartup("auto+nio+ssl");
1:     }
1: 
1:     public void testAsyncNetworkStartupWithSlowConnectionCreationAutoNioSsl() throws Exception {
1:         testAsyncNetworkStartupWithSlowConnectionCreation("auto+nio+ssl");
1:     }
1: 
1:     protected void testAsyncNetworkStartup(String transport) throws Exception {
1:         String brokerBUri = transport + "://" + brokerBDomain;
1:         String brokerCUri = transport + "://" + brokerCDomain;
/////////////////////////////////////////////////////////////////////////
1:     protected void testAsyncNetworkStartupWithSlowConnectionCreation(String transport) throws Exception {
1:         String brokerBUri = transport + "://" + brokerBDomain;
1:         String brokerCUri = transport + "://" + brokerCDomain;
/////////////////////////////////////////////////////////////////////////
1:             @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:254d920
/////////////////////////////////////////////////////////////////////////
1:         brokerB.start();
commit:f38908e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.Executors;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.SocketProxy;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class NetworkAsyncStartTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkAsyncStartTest.class);
1: 
0:     private String brokerBUri = "tcp://localhost:61617";
0:     private String brokerCUri = "tcp://localhost:61618";
1:     int bridgeCount=0;
1: 
0:     public void testAsyncNetworkStartup() throws Exception {
1: 
1:         BrokerService brokerA = brokers.get("BrokerA").broker;
1:         bridgeBroker(brokerA, brokerBUri);
1:         bridgeBroker(brokerA, brokerCUri);
1: 
1:         LOG.info("starting A, no blocking on failed network connectors");
1:         brokerA.start();
1: 
1:         LOG.info("starting C transport connector");
1:         BrokerService brokerC = brokers.get("BrokerC").broker;
1:         brokerC.addConnector(brokerCUri);
1:         brokerC.start();
1: 
1:         assertTrue("got bridge to C", waitForBridgeFormation(brokerA, 1, 1));
1:         LOG.info("Got bridge A->C");
1: 
1:         LOG.info("starting B transport connector");
1:         BrokerService brokerB = brokers.get("BrokerB").broker;
1:         brokerB.addConnector(brokerBUri);
1:         brokerC.start();
1: 
1:         assertTrue("got bridge to B", waitForBridgeFormation(brokerA, 1, 0));
1:         assertTrue("got bridge to B&C", waitForBridgeFormation(brokerA, 1, 1));
1:     }
1: 
0:     public void testAsyncNetworkStartupWithSlowConnectionCreation() throws Exception {
1: 
1:         final BrokerService brokerA = brokers.get("BrokerA").broker;
1: 
1:         SocketProxy proxyToB = new SocketProxy();
1:         // don't accept any connections so limited to one connection with backlog
1:         proxyToB.setPauseAtStart(true);
1:         proxyToB.setAcceptBacklog(1);
1:         proxyToB.setTarget(new URI(brokerBUri));
1:         proxyToB.open();
1:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:         bridgeBroker(brokerA, proxyToB.getUrl().toString());
1:         bridgeBroker(brokerA, brokerCUri);
1: 
1:         Executor e = Executors.newCachedThreadPool();
1:         e.execute(new Runnable() {
1:             public void run() {
1:                 LOG.info("starting A");
1:                 try {
1:                     brokerA.setNetworkConnectorStartAsync(true);
1:                     brokerA.start();
1:                 } catch (Exception e) {
1:                     LOG.error("start failed", e);
1:                 }
1:             }
1:         });
1: 
1:         LOG.info("starting transport connector on C");
1:         BrokerService brokerC = brokers.get("BrokerC").broker;
1:         brokerC.addConnector(brokerCUri);
1:         brokerC.start();
1: 
1:         final long maxWaitMillis = 20*1000;
1:         assertTrue("got bridge to C in 10 seconds", waitForBridgeFormation(brokerA, 1, 7, maxWaitMillis));
1:     }
1: 
1:     private void bridgeBroker(BrokerService localBroker, String remoteURI) throws Exception {
1:         String uri = "static:(" + remoteURI + ")";
1:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:         connector.setName("bridge-" + bridgeCount++);
1:         localBroker.addNetworkConnector(connector);
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         // initially with no tcp transport connector
1:         createBroker(new URI("broker:()BrokerA?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:()BrokerB?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:()BrokerC?persistent=false&useJmx=false"));
1:     }
1: }
============================================================================