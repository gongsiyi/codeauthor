1:3f32507: /*
1:3f32507:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:3f32507:  *
1:3f32507:  * Licensed under the Apache License, Version 2.0 (the "License");
1:3f32507:  * you may not use this file except in compliance with the License.
1:3f32507:  * You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  
1:3f32507: Sample Application
1:3f32507: 
1:3f32507: Writing a Basic JMS Application Using
1:3f32507:     Subscribe
1:3f32507: 
1:3f32507: When you run this program, it will
1:3f32507: subscribe to any group of messages specified
1:3f32507: in a properties file. [See comments in
1:3f32507: MessageMonitor.properties for information on
1:3f32507: this file.]
1:3f32507: 
1:3f32507: Every message topic being monitored will be
1:3f32507: displayed to a Java window.
1:3f32507: 
1:3f32507: Usage:
1:3f32507:   java MessageMonitor
1:3f32507: 
1:3f32507: Suggested demonstration:
1:3f32507:   - Start one instance of this application:
1:3f32507:         java MessageMonitor
1:3f32507:   - Run one or more Chat and/or DurableChat window(s).
1:3f32507:   - Enter messages on the various chat windows.
1:3f32507:   - Watch the MessageMonitor display the messages.
1:3f32507: */
1:3f32507: import org.apache.activemq.*;
1:3f32507: 
1:3f32507: import javax.swing.JTextArea;
1:3f32507: import javax.swing.JFrame;
1:3f32507: import javax.swing.JScrollPane;
1:3f32507: import javax.swing.JButton;
1:3f32507: 
1:3f32507: import javax.swing.text.Highlighter;
1:3f32507: import javax.swing.text.DefaultHighlighter;
1:3f32507: import javax.swing.text.BadLocationException;
1:3f32507: 
1:3f32507: import javax.swing.border.CompoundBorder;
1:3f32507: import javax.swing.border.EmptyBorder;
1:3f32507: import javax.swing.border.BevelBorder;
1:3f32507: import javax.swing.border.SoftBevelBorder;
1:3f32507: 
1:3f32507: import java.awt.Toolkit;
1:3f32507: import java.awt.Dimension;
1:3f32507: import java.awt.BorderLayout;
1:3f32507: import java.awt.Rectangle;
1:3f32507: 
1:3f32507: import java.awt.event.WindowAdapter;
1:3f32507: import java.awt.event.WindowEvent;
1:3f32507: import java.awt.event.ActionListener;
1:3f32507: import java.awt.event.ActionEvent;
1:3f32507: 
1:3f32507: import javax.jms.Topic;
1:3f32507: import javax.jms.Session;
1:3f32507: import javax.jms.Connection;
1:3f32507: import javax.jms.MessageConsumer;
1:3f32507: import javax.jms.MessageListener;
1:3f32507: 
1:3f32507: 
1:3f32507: import java.io.FileInputStream;
1:3f32507: 
1:3f32507: import java.util.Vector;
1:3f32507: import java.util.Properties;
1:3f32507: import java.util.StringTokenizer;
1:3f32507: 
1:3f32507: public class MessageMonitor
1:3f32507: extends JFrame
1:3f32507: {
1:3f32507:     private static final String DEFAULT_PROPERTIES_FILE = "MessageMonitor.properties";
1:3f32507: 
1:3f32507:     String propertiesFile = DEFAULT_PROPERTIES_FILE;
1:3f32507:     String brokerHostPort = "localhost";
1:3f32507:     String connectID = "MessageMonitor";
1:3f32507:     String userID = "Administrator";
1:3f32507:     
1:3f32507:     String subscriptionTopics = "jms.samples.chat";
1:3f32507:     String textFontName = "Dialog";
1:3f32507:     String textFontStyle = "PLAIN";
1:3f32507:     String textFontSize = "12";
1:3f32507:     String title = "MessageMonitor";
1:3f32507: 
1:3f32507:     JTextArea textArea = new JTextArea();
1:3f32507:     JScrollPane scrollPane = new JScrollPane(textArea);
1:3f32507:     JButton clearButton = new JButton("Clear");
1:3f32507: 
1:3f32507:     Connection connection = null;
1:3f32507:     Session session = null;
1:3f32507: 
1:3f32507:     private String user = ActiveMQConnection.DEFAULT_USER;
1:3f32507:     private String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:3f32507:     private String url = ActiveMQConnection.DEFAULT_BROKER_URL;
1:3f32507: 
1:3f32507: 
1:3f32507:     /** Constructor for MessageMonitor window. */
1:3f32507:     public MessageMonitor()
1:3f32507:     {
1:3f32507:         loadProperties();
1:3f32507: 
1:3f32507:         setTitle(title);
1:3f32507: 
1:3f32507:         // Connect to Message Broker
1:3f32507:         try
1:3f32507:         {
1:3f32507:             javax.jms.ConnectionFactory factory;
1:3f32507:             factory = new ActiveMQConnectionFactory(user, password, url);
1:3f32507: 
1:3f32507:             connection = factory.createConnection (userID, password);
1:3f32507:             session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println("Cannot connect to Broker");
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Subscribe to Topics
1:3f32507:         StringTokenizer topics = new StringTokenizer(subscriptionTopics, ",");
1:3f32507:         while (topics.hasMoreTokens())
1:3f32507:         {
1:3f32507:             try
1:3f32507:             {
1:3f32507:                 String topicName = topics.nextToken();
1:3f32507:                 System.out.println ("Subscribing to: " + topicName);
1:3f32507:                 new Subscription(session.createTopic(topicName));
1:3f32507:             }
1:3f32507:             catch (javax.jms.JMSException jmse)
1:3f32507:             {
1:3f32507:                 jmse.printStackTrace();
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Set up the viewing area.
1:3f32507:         textArea.setEditable(false);
1:3f32507:         scrollPane.setBorder(new CompoundBorder(new EmptyBorder(6,6,6,6),
1:3f32507:                                                 new SoftBevelBorder(BevelBorder.LOWERED)));
1:3f32507:         getContentPane().add(scrollPane,BorderLayout.CENTER);
1:3f32507:         getContentPane().add(clearButton,BorderLayout.SOUTH);
1:3f32507:         clearButton.addActionListener(new OnClear());
1:3f32507:         // Start the connection so that we can now receive messages.
1:3f32507:         try
1:3f32507:         {
1:3f32507:             connection.start();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println("Cannot start connection");
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Class to handle the subsciption to messages. */
1:3f32507:     public class Subscription implements javax.jms.MessageListener
1:3f32507:     {
1:3f32507:         public Subscription(Topic topic)
1:3f32507:         {
1:3f32507:             try
1:3f32507:             {
1:3f32507:                 topicSubscriber = session.createConsumer(topic);
1:3f32507:                 topicSubscriber.setMessageListener(this);
1:3f32507:             }
1:3f32507:             catch (javax.jms.JMSException jmse)
1:3f32507:             {
1:3f32507:                 jmse.printStackTrace();
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:        /**
1:3f32507:         * Handle the text message
1:3f32507:         * (as specified in the javax.jms.MessageListener interface).
1:3f32507:         */
1:3f32507: 
1:3f32507:         public void onMessage(javax.jms.Message message)
1:3f32507:         {
1:3f32507:             String msgBody = null;
1:3f32507:             String msgClass = null;
1:3f32507: 
1:3f32507:             if (message instanceof javax.jms.TextMessage)
1:3f32507:             {
1:3f32507:                 msgClass = "javax.jms.TextMessage";
1:3f32507:                 try
1:3f32507:                 {
1:3f32507:                     msgBody = ((javax.jms.TextMessage)message).getText();
1:3f32507:                 }
1:3f32507:                 catch (javax.jms.JMSException jmse)
1:3f32507:                 {
1:3f32507:                     msgBody = "";
1:3f32507:                 }
1:3f32507:             }
1:3f32507:             else
1:3f32507:             {
1:3f32507:                 return;
1:3f32507:             }
1:3f32507:             try
1:3f32507:             {
1:3f32507:                 textArea.append("\n");
1:3f32507:                 textArea.append("-----------------------------------------------------------------------------------------------------\n");
1:3f32507:                 // textArea.append("Class: " + msgClass + "\n");
1:3f32507:                 textArea.append("The following message, received on topic " + ((Topic)message.getJMSDestination()).getTopicName() + ", was sent by\n");
1:3f32507:                 //textArea.append("\n");
1:3f32507:                 textArea.append(msgBody);
1:3f32507: 
1:3f32507:                 // Ensure Appended Text is Visible
1:3f32507:                 Rectangle area = textArea.modelToView(textArea.getText().length());
1:3f32507:                 if (area != null) textArea.scrollRectToVisible(area);
1:3f32507: 
1:3f32507:             }
1:3f32507:             catch (javax.jms.JMSException jmse)
1:3f32507:             {
1:3f32507:                 jmse.printStackTrace();
1:3f32507:             }
1:3f32507:             catch (BadLocationException ble)
1:3f32507:             {
1:3f32507:                 ble.printStackTrace();
1:3f32507:             }
1:3f32507: 
1:3f32507:         }
1:3f32507: 
1:3f32507:         MessageConsumer topicSubscriber = null;
1:3f32507:     }
1:3f32507: 
1:3f32507:     //
1:3f32507:     // NOTE: the remainder of this sample deals with reading arguments
1:3f32507:     // and does not utilize any JMS classes or code.
1:3f32507:     //
1:3f32507: 
1:3f32507:     /** Main program entry point. */
1:3f32507:     public static void main(String[] args)
1:3f32507:     {
1:3f32507:         // There should be no arguments to this program.
1:3f32507:         if (args.length > 0) {
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         MessageMonitor messageMonitor = new MessageMonitor();
1:3f32507: 
1:3f32507:         messageMonitor.addWindowListener(new WindowAdapter() {
1:3f32507:             public void windowClosing(WindowEvent e)
1:3f32507:             {
1:3f32507:                 System.exit(0);
1:3f32507:             }
1:3f32507:         });
1:3f32507: 
1:3f32507:         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
1:3f32507:         screenSize.height = screenSize.height / 2 ;
1:3f32507:         screenSize.width = screenSize.width / 2 ;
1:3f32507:         messageMonitor.setSize(screenSize);
1:3f32507:         messageMonitor.setVisible(true);
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Prints the usage. */
1:3f32507:     private static void printUsage()
1:3f32507:     {
1:3f32507:         StringBuffer use = new StringBuffer();
1:3f32507:         use.append("\nusage: MessageMonitor\n\n");
1:3f32507:         use.append("Properties for this sample can be set in a properties file.\n");
1:3f32507:         String dfltFile = System.getProperty("propertiesFile", DEFAULT_PROPERTIES_FILE);
1:3f32507:         use.append("[Default file: " + dfltFile +"]\n\n");
1:3f32507: 
1:3f32507:         System.out.print(use);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Load the window and JMS properties from a file. */
1:3f32507:     private void loadProperties()
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             Properties properties = new Properties();
1:3f32507: 
1:3f32507:             propertiesFile = System.getProperty("propertiesFile", propertiesFile);
1:3f32507: 
1:3f32507:             properties.load(new FileInputStream(propertiesFile));
1:3f32507: 
1:3f32507:             // Connection Properties
1:3f32507:             brokerHostPort = properties.getProperty("brokerHostPort",brokerHostPort).trim();
1:3f32507:             connectID = properties.getProperty("connectID",connectID).trim();
1:3f32507:             userID = properties.getProperty("userID",userID).trim();
1:3f32507:             password = properties.getProperty("password",password).trim();
1:3f32507: 
1:3f32507:             // Subscription Properties
1:3f32507:             subscriptionTopics = properties.getProperty("subscriptionTopics", subscriptionTopics).trim();
1:3f32507: 
1:3f32507:             // Text Properties
1:3f32507:             textFontName = properties.getProperty("textFontName", textFontName).trim();
1:3f32507:             textFontStyle = properties.getProperty("textFontSize", textFontStyle).trim();
1:3f32507:             textFontSize = properties.getProperty("textFontSize", textFontSize).trim();
1:3f32507: 
1:3f32507:             // Window Properties
1:3f32507:             title = properties.getProperty("title", title).trim();
1:3f32507: 
1:3f32507:         }
1:3f32507:         catch (java.io.FileNotFoundException fnfe)
1:3f32507:         {
1:3f32507:             System.out.println (propertiesFile + " not found: using defaults"); // Use Defaults
1:3f32507:         }
1:3f32507:         catch (java.io.IOException ioe)
1:3f32507:         {
1:3f32507:             ioe.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Class to handle the "Clear" button action. */
1:3f32507:     public class OnClear implements ActionListener
1:3f32507:     {
1:3f32507:         public void actionPerformed(ActionEvent evt)
1:3f32507:         {
1:3f32507:             textArea.setText("");
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  
1: Sample Application
1: 
1: Writing a Basic JMS Application Using
1:     Subscribe
1: 
1: When you run this program, it will
1: subscribe to any group of messages specified
1: in a properties file. [See comments in
1: MessageMonitor.properties for information on
1: this file.]
1: 
1: Every message topic being monitored will be
1: displayed to a Java window.
1: 
1: Usage:
1:   java MessageMonitor
1: 
1: Suggested demonstration:
1:   - Start one instance of this application:
1:         java MessageMonitor
1:   - Run one or more Chat and/or DurableChat window(s).
1:   - Enter messages on the various chat windows.
1:   - Watch the MessageMonitor display the messages.
1: */
1: import org.apache.activemq.*;
1: 
1: import javax.swing.JTextArea;
1: import javax.swing.JFrame;
1: import javax.swing.JScrollPane;
1: import javax.swing.JButton;
1: 
1: import javax.swing.text.Highlighter;
1: import javax.swing.text.DefaultHighlighter;
1: import javax.swing.text.BadLocationException;
1: 
1: import javax.swing.border.CompoundBorder;
1: import javax.swing.border.EmptyBorder;
1: import javax.swing.border.BevelBorder;
1: import javax.swing.border.SoftBevelBorder;
1: 
1: import java.awt.Toolkit;
1: import java.awt.Dimension;
1: import java.awt.BorderLayout;
1: import java.awt.Rectangle;
1: 
1: import java.awt.event.WindowAdapter;
1: import java.awt.event.WindowEvent;
1: import java.awt.event.ActionListener;
1: import java.awt.event.ActionEvent;
1: 
1: import javax.jms.Topic;
1: import javax.jms.Session;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: 
1: 
1: import java.io.FileInputStream;
1: 
1: import java.util.Vector;
1: import java.util.Properties;
1: import java.util.StringTokenizer;
1: 
1: public class MessageMonitor
1: extends JFrame
1: {
1:     private static final String DEFAULT_PROPERTIES_FILE = "MessageMonitor.properties";
1: 
1:     String propertiesFile = DEFAULT_PROPERTIES_FILE;
1:     String brokerHostPort = "localhost";
1:     String connectID = "MessageMonitor";
1:     String userID = "Administrator";
1:     
1:     String subscriptionTopics = "jms.samples.chat";
1:     String textFontName = "Dialog";
1:     String textFontStyle = "PLAIN";
1:     String textFontSize = "12";
1:     String title = "MessageMonitor";
1: 
1:     JTextArea textArea = new JTextArea();
1:     JScrollPane scrollPane = new JScrollPane(textArea);
1:     JButton clearButton = new JButton("Clear");
1: 
1:     Connection connection = null;
1:     Session session = null;
1: 
1:     private String user = ActiveMQConnection.DEFAULT_USER;
1:     private String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:     private String url = ActiveMQConnection.DEFAULT_BROKER_URL;
1: 
1: 
1:     /** Constructor for MessageMonitor window. */
1:     public MessageMonitor()
1:     {
1:         loadProperties();
1: 
1:         setTitle(title);
1: 
1:         // Connect to Message Broker
1:         try
1:         {
1:             javax.jms.ConnectionFactory factory;
1:             factory = new ActiveMQConnectionFactory(user, password, url);
1: 
1:             connection = factory.createConnection (userID, password);
1:             session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println("Cannot connect to Broker");
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         // Subscribe to Topics
1:         StringTokenizer topics = new StringTokenizer(subscriptionTopics, ",");
1:         while (topics.hasMoreTokens())
1:         {
1:             try
1:             {
1:                 String topicName = topics.nextToken();
1:                 System.out.println ("Subscribing to: " + topicName);
1:                 new Subscription(session.createTopic(topicName));
1:             }
1:             catch (javax.jms.JMSException jmse)
1:             {
1:                 jmse.printStackTrace();
1:             }
1:         }
1: 
1:         // Set up the viewing area.
1:         textArea.setEditable(false);
1:         scrollPane.setBorder(new CompoundBorder(new EmptyBorder(6,6,6,6),
1:                                                 new SoftBevelBorder(BevelBorder.LOWERED)));
1:         getContentPane().add(scrollPane,BorderLayout.CENTER);
1:         getContentPane().add(clearButton,BorderLayout.SOUTH);
1:         clearButton.addActionListener(new OnClear());
1:         // Start the connection so that we can now receive messages.
1:         try
1:         {
1:             connection.start();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println("Cannot start connection");
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:     }
1: 
1:     /** Class to handle the subsciption to messages. */
1:     public class Subscription implements javax.jms.MessageListener
1:     {
1:         public Subscription(Topic topic)
1:         {
1:             try
1:             {
1:                 topicSubscriber = session.createConsumer(topic);
1:                 topicSubscriber.setMessageListener(this);
1:             }
1:             catch (javax.jms.JMSException jmse)
1:             {
1:                 jmse.printStackTrace();
1:             }
1:         }
1: 
1:        /**
1:         * Handle the text message
1:         * (as specified in the javax.jms.MessageListener interface).
1:         */
1: 
1:         public void onMessage(javax.jms.Message message)
1:         {
1:             String msgBody = null;
1:             String msgClass = null;
1: 
1:             if (message instanceof javax.jms.TextMessage)
1:             {
1:                 msgClass = "javax.jms.TextMessage";
1:                 try
1:                 {
1:                     msgBody = ((javax.jms.TextMessage)message).getText();
1:                 }
1:                 catch (javax.jms.JMSException jmse)
1:                 {
1:                     msgBody = "";
1:                 }
1:             }
1:             else
1:             {
1:                 return;
1:             }
1:             try
1:             {
1:                 textArea.append("\n");
1:                 textArea.append("-----------------------------------------------------------------------------------------------------\n");
1:                 // textArea.append("Class: " + msgClass + "\n");
1:                 textArea.append("The following message, received on topic " + ((Topic)message.getJMSDestination()).getTopicName() + ", was sent by\n");
1:                 //textArea.append("\n");
1:                 textArea.append(msgBody);
1: 
1:                 // Ensure Appended Text is Visible
1:                 Rectangle area = textArea.modelToView(textArea.getText().length());
1:                 if (area != null) textArea.scrollRectToVisible(area);
1: 
1:             }
1:             catch (javax.jms.JMSException jmse)
1:             {
1:                 jmse.printStackTrace();
1:             }
1:             catch (BadLocationException ble)
1:             {
1:                 ble.printStackTrace();
1:             }
1: 
1:         }
1: 
1:         MessageConsumer topicSubscriber = null;
1:     }
1: 
1:     //
1:     // NOTE: the remainder of this sample deals with reading arguments
1:     // and does not utilize any JMS classes or code.
1:     //
1: 
1:     /** Main program entry point. */
1:     public static void main(String[] args)
1:     {
1:         // There should be no arguments to this program.
1:         if (args.length > 0) {
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         MessageMonitor messageMonitor = new MessageMonitor();
1: 
1:         messageMonitor.addWindowListener(new WindowAdapter() {
1:             public void windowClosing(WindowEvent e)
1:             {
1:                 System.exit(0);
1:             }
1:         });
1: 
1:         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
1:         screenSize.height = screenSize.height / 2 ;
1:         screenSize.width = screenSize.width / 2 ;
1:         messageMonitor.setSize(screenSize);
1:         messageMonitor.setVisible(true);
1: 
1:     }
1: 
1:     /** Prints the usage. */
1:     private static void printUsage()
1:     {
1:         StringBuffer use = new StringBuffer();
1:         use.append("\nusage: MessageMonitor\n\n");
1:         use.append("Properties for this sample can be set in a properties file.\n");
1:         String dfltFile = System.getProperty("propertiesFile", DEFAULT_PROPERTIES_FILE);
1:         use.append("[Default file: " + dfltFile +"]\n\n");
1: 
1:         System.out.print(use);
1:     }
1: 
1:     /** Load the window and JMS properties from a file. */
1:     private void loadProperties()
1:     {
1:         try
1:         {
1:             Properties properties = new Properties();
1: 
1:             propertiesFile = System.getProperty("propertiesFile", propertiesFile);
1: 
1:             properties.load(new FileInputStream(propertiesFile));
1: 
1:             // Connection Properties
1:             brokerHostPort = properties.getProperty("brokerHostPort",brokerHostPort).trim();
1:             connectID = properties.getProperty("connectID",connectID).trim();
1:             userID = properties.getProperty("userID",userID).trim();
1:             password = properties.getProperty("password",password).trim();
1: 
1:             // Subscription Properties
1:             subscriptionTopics = properties.getProperty("subscriptionTopics", subscriptionTopics).trim();
1: 
1:             // Text Properties
1:             textFontName = properties.getProperty("textFontName", textFontName).trim();
1:             textFontStyle = properties.getProperty("textFontSize", textFontStyle).trim();
1:             textFontSize = properties.getProperty("textFontSize", textFontSize).trim();
1: 
1:             // Window Properties
1:             title = properties.getProperty("title", title).trim();
1: 
1:         }
1:         catch (java.io.FileNotFoundException fnfe)
1:         {
1:             System.out.println (propertiesFile + " not found: using defaults"); // Use Defaults
1:         }
1:         catch (java.io.IOException ioe)
1:         {
1:             ioe.printStackTrace();
1:         }
1:     }
1: 
1:     /** Class to handle the "Clear" button action. */
1:     public class OnClear implements ActionListener
1:     {
1:         public void actionPerformed(ActionEvent evt)
1:         {
1:             textArea.setText("");
1:         }
1:     }
1: 
1: }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  
0: Sample Application
0: 
0: Writing a Basic JMS Application Using
0:     Subscribe
0: 
0: When you run this program, it will
0: subscribe to any group of messages specified
0: in a properties file. [See comments in
0: MessageMonitor.properties for information on
0: this file.]
0: 
0: Every message topic being monitored will be
0: displayed to a Java window.
0: 
0: Usage:
0:   java MessageMonitor
0: 
0: Suggested demonstration:
0:   - Start one instance of this application:
0:         java MessageMonitor
0:   - Run one or more Chat and/or DurableChat window(s).
0:   - Enter messages on the various chat windows.
0:   - Watch the MessageMonitor display the messages.
0: */
0: import org.apache.activemq.*;
0: 
0: import javax.swing.JTextArea;
0: import javax.swing.JFrame;
0: import javax.swing.JScrollPane;
0: import javax.swing.JButton;
0: 
0: import javax.swing.text.Highlighter;
0: import javax.swing.text.DefaultHighlighter;
0: import javax.swing.text.BadLocationException;
0: 
0: import javax.swing.border.CompoundBorder;
0: import javax.swing.border.EmptyBorder;
0: import javax.swing.border.BevelBorder;
0: import javax.swing.border.SoftBevelBorder;
0: 
0: import java.awt.Toolkit;
0: import java.awt.Dimension;
0: import java.awt.BorderLayout;
0: import java.awt.Rectangle;
0: 
0: import java.awt.event.WindowAdapter;
0: import java.awt.event.WindowEvent;
0: import java.awt.event.ActionListener;
0: import java.awt.event.ActionEvent;
0: 
0: import javax.jms.Topic;
0: import javax.jms.Session;
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: 
0: 
0: import java.io.FileInputStream;
0: 
0: import java.util.Vector;
0: import java.util.Properties;
0: import java.util.StringTokenizer;
0: 
0: public class MessageMonitor
0: extends JFrame
0: {
0:     private static final String DEFAULT_PROPERTIES_FILE = "MessageMonitor.properties";
0: 
0:     String propertiesFile = DEFAULT_PROPERTIES_FILE;
0:     String brokerHostPort = "localhost";
0:     String connectID = "MessageMonitor";
0:     String userID = "Administrator";
0:     
0:     String subscriptionTopics = "jms.samples.chat";
0:     String textFontName = "Dialog";
0:     String textFontStyle = "PLAIN";
0:     String textFontSize = "12";
0:     String title = "MessageMonitor";
0: 
0:     JTextArea textArea = new JTextArea();
0:     JScrollPane scrollPane = new JScrollPane(textArea);
0:     JButton clearButton = new JButton("Clear");
0: 
0:     Connection connection = null;
0:     Session session = null;
0: 
0:     private String user = ActiveMQConnection.DEFAULT_USER;
0:     private String password = ActiveMQConnection.DEFAULT_PASSWORD;
0:     private String url = ActiveMQConnection.DEFAULT_BROKER_URL;
0: 
0: 
0:     /** Constructor for MessageMonitor window. */
0:     public MessageMonitor()
0:     {
0:         loadProperties();
0: 
0:         setTitle(title);
0: 
0:         // Connect to Message Broker
0:         try
0:         {
0:             javax.jms.ConnectionFactory factory;
0:             factory = new ActiveMQConnectionFactory(user, password, url);
0: 
0:             connection = factory.createConnection (userID, password);
0:             session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println("Cannot connect to Broker");
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         // Subscribe to Topics
0:         StringTokenizer topics = new StringTokenizer(subscriptionTopics, ",");
0:         while (topics.hasMoreTokens())
0:         {
0:             try
0:             {
0:                 String topicName = topics.nextToken();
0:                 System.out.println ("Subscribing to: " + topicName);
0:                 new Subscription(session.createTopic(topicName));
0:             }
0:             catch (javax.jms.JMSException jmse)
0:             {
0:                 jmse.printStackTrace();
0:             }
0:         }
0: 
0:         // Set up the viewing area.
0:         textArea.setEditable(false);
0:         scrollPane.setBorder(new CompoundBorder(new EmptyBorder(6,6,6,6),
0:                                                 new SoftBevelBorder(BevelBorder.LOWERED)));
0:         getContentPane().add(scrollPane,BorderLayout.CENTER);
0:         getContentPane().add(clearButton,BorderLayout.SOUTH);
0:         clearButton.addActionListener(new OnClear());
0:         // Start the connection so that we can now receive messages.
0:         try
0:         {
0:             connection.start();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println("Cannot start connection");
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:     }
0: 
0:     /** Class to handle the subsciption to messages. */
0:     public class Subscription implements javax.jms.MessageListener
0:     {
0:         public Subscription(Topic topic)
0:         {
0:             try
0:             {
0:                 topicSubscriber = session.createConsumer(topic);
0:                 topicSubscriber.setMessageListener(this);
0:             }
0:             catch (javax.jms.JMSException jmse)
0:             {
0:                 jmse.printStackTrace();
0:             }
0:         }
0: 
0:        /**
0:         * Handle the text message
0:         * (as specified in the javax.jms.MessageListener interface).
0:         */
0: 
0:         public void onMessage(javax.jms.Message message)
0:         {
0:             String msgBody = null;
0:             String msgClass = null;
0: 
0:             if (message instanceof javax.jms.TextMessage)
0:             {
0:                 msgClass = "javax.jms.TextMessage";
0:                 try
0:                 {
0:                     msgBody = ((javax.jms.TextMessage)message).getText();
0:                 }
0:                 catch (javax.jms.JMSException jmse)
0:                 {
0:                     msgBody = "";
0:                 }
0:             }
0:             else
0:             {
0:                 return;
0:             }
0:             try
0:             {
0:                 textArea.append("\n");
0:                 textArea.append("-----------------------------------------------------------------------------------------------------\n");
0:                 // textArea.append("Class: " + msgClass + "\n");
0:                 textArea.append("The following message, received on topic " + ((Topic)message.getJMSDestination()).getTopicName() + ", was sent by\n");
0:                 //textArea.append("\n");
0:                 textArea.append(msgBody);
0: 
0:                 // Ensure Appended Text is Visible
0:                 Rectangle area = textArea.modelToView(textArea.getText().length());
0:                 if (area != null) textArea.scrollRectToVisible(area);
0: 
0:             }
0:             catch (javax.jms.JMSException jmse)
0:             {
0:                 jmse.printStackTrace();
0:             }
0:             catch (BadLocationException ble)
0:             {
0:                 ble.printStackTrace();
0:             }
0: 
0:         }
0: 
0:         MessageConsumer topicSubscriber = null;
0:     }
0: 
0:     //
0:     // NOTE: the remainder of this sample deals with reading arguments
0:     // and does not utilize any JMS classes or code.
0:     //
0: 
0:     /** Main program entry point. */
0:     public static void main(String[] args)
0:     {
0:         // There should be no arguments to this program.
0:         if (args.length > 0) {
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         MessageMonitor messageMonitor = new MessageMonitor();
0: 
0:         messageMonitor.addWindowListener(new WindowAdapter() {
0:             public void windowClosing(WindowEvent e)
0:             {
0:                 System.exit(0);
0:             }
0:         });
0: 
0:         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
0:         screenSize.height = screenSize.height / 2 ;
0:         screenSize.width = screenSize.width / 2 ;
0:         messageMonitor.setSize(screenSize);
0:         messageMonitor.setVisible(true);
0: 
0:     }
0: 
0:     /** Prints the usage. */
0:     private static void printUsage()
0:     {
0:         StringBuffer use = new StringBuffer();
0:         use.append("\nusage: MessageMonitor\n\n");
0:         use.append("Properties for this sample can be set in a properties file.\n");
0:         String dfltFile = System.getProperty("propertiesFile", DEFAULT_PROPERTIES_FILE);
0:         use.append("[Default file: " + dfltFile +"]\n\n");
0: 
0:         System.out.print(use);
0:     }
0: 
0:     /** Load the window and JMS properties from a file. */
0:     private void loadProperties()
0:     {
0:         try
0:         {
0:             Properties properties = new Properties();
0: 
0:             propertiesFile = System.getProperty("propertiesFile", propertiesFile);
0: 
0:             properties.load(new FileInputStream(propertiesFile));
0: 
0:             // Connection Properties
0:             brokerHostPort = properties.getProperty("brokerHostPort",brokerHostPort).trim();
0:             connectID = properties.getProperty("connectID",connectID).trim();
0:             userID = properties.getProperty("userID",userID).trim();
0:             password = properties.getProperty("password",password).trim();
0: 
0:             // Subscription Properties
0:             subscriptionTopics = properties.getProperty("subscriptionTopics", subscriptionTopics).trim();
0: 
0:             // Text Properties
0:             textFontName = properties.getProperty("textFontName", textFontName).trim();
0:             textFontStyle = properties.getProperty("textFontSize", textFontStyle).trim();
0:             textFontSize = properties.getProperty("textFontSize", textFontSize).trim();
0: 
0:             // Window Properties
0:             title = properties.getProperty("title", title).trim();
0: 
0:         }
0:         catch (java.io.FileNotFoundException fnfe)
0:         {
0:             System.out.println (propertiesFile + " not found: using defaults"); // Use Defaults
0:         }
0:         catch (java.io.IOException ioe)
0:         {
0:             ioe.printStackTrace();
0:         }
0:     }
0: 
0:     /** Class to handle the "Clear" button action. */
0:     public class OnClear implements ActionListener
0:     {
0:         public void actionPerformed(ActionEvent evt)
0:         {
0:             textArea.setText("");
0:         }
0:     }
0: 
0: }
============================================================================