1:ad06a5f: /**
1:ad06a5f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ad06a5f:  * contributor license agreements.  See the NOTICE file distributed with
1:ad06a5f:  * this work for additional information regarding copyright ownership.
1:ad06a5f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ad06a5f:  * (the "License"); you may not use this file except in compliance with
1:ad06a5f:  * the License.  You may obtain a copy of the License at
1:ad06a5f:  *
1:ad06a5f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ad06a5f:  *
1:ad06a5f:  * Unless required by applicable law or agreed to in writing, software
1:ad06a5f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad06a5f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad06a5f:  * See the License for the specific language governing permissions and
1:ad06a5f:  * limitations under the License.
1:ad06a5f:  */
1:ad06a5f: package org.apache.activemq.ra;
17:ad06a5f: 
1:ba1bd26: import static org.junit.Assert.assertTrue;
1:ba1bd26: 
1:ad06a5f: import java.io.ByteArrayOutputStream;
1:ad06a5f: import java.io.DataOutputStream;
1:ad06a5f: import java.io.IOException;
1:ad06a5f: import java.lang.reflect.Method;
1:ad06a5f: import java.util.Timer;
1:ad06a5f: import java.util.concurrent.CountDownLatch;
1:ad06a5f: import java.util.concurrent.TimeUnit;
1:ad06a5f: 
1:ad06a5f: import javax.jms.Connection;
1:ad06a5f: import javax.jms.Message;
1:ad06a5f: import javax.jms.MessageListener;
1:ad06a5f: import javax.jms.MessageProducer;
1:ad06a5f: import javax.jms.Queue;
1:ad06a5f: import javax.jms.Session;
1:ad06a5f: import javax.resource.ResourceException;
1:ad06a5f: import javax.resource.spi.BootstrapContext;
1:ad06a5f: import javax.resource.spi.UnavailableException;
1:ad06a5f: import javax.resource.spi.XATerminator;
1:ad06a5f: import javax.resource.spi.endpoint.MessageEndpoint;
1:ad06a5f: import javax.resource.spi.endpoint.MessageEndpointFactory;
1:ad06a5f: import javax.resource.spi.work.ExecutionContext;
1:ad06a5f: import javax.resource.spi.work.Work;
1:ad06a5f: import javax.resource.spi.work.WorkException;
1:ad06a5f: import javax.resource.spi.work.WorkListener;
1:ad06a5f: import javax.resource.spi.work.WorkManager;
1:ad06a5f: import javax.transaction.xa.XAResource;
1:ad06a5f: import javax.transaction.xa.Xid;
1:ad06a5f: 
1:ad06a5f: import org.apache.activemq.ActiveMQConnectionFactory;
1:ad06a5f: import org.apache.activemq.broker.BrokerService;
1:ad06a5f: import org.apache.activemq.command.ActiveMQQueue;
1:ba1bd26: import org.junit.After;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e85dda9: 
1:ba1bd26: public class FailoverManagedClusterTest {
1:ba1bd26: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(FailoverManagedClusterTest.class);
1:5d9a6b6: 
1:ad06a5f:     long txGenerator = System.currentTimeMillis();
1:5d9a6b6: 
1:ba1bd26:     private static final String MASTER_BIND_ADDRESS = "tcp://localhost:0";
1:ba1bd26:     private static final String SLAVE_BIND_ADDRESS = "tcp://localhost:0";
1:ba1bd26:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
1:ad06a5f: 
1:5d9a6b6:     private String masterConnectionUri;
1:5d9a6b6:     private String slaveConnectionUri;
1:5d9a6b6: 
1:5d9a6b6:     private String brokerUri;
1:5d9a6b6: 
1:ad06a5f:     private BrokerService master;
1:ad06a5f:     private BrokerService slave;
1:5d9a6b6:     private final CountDownLatch slaveThreadStarted = new CountDownLatch(1);
1:ad06a5f: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:ad06a5f:         createAndStartMaster();
1:5d9a6b6:         createAndStartSlave();
1:5d9a6b6: 
1:5d9a6b6:         brokerUri = "failover://(" + masterConnectionUri + "," + slaveConnectionUri + ")?randomize=false";
2:ad06a5f:     }
1:5d9a6b6: 
1:ba1bd26:     @After
1:ba1bd26:     public void tearDown() throws Exception {
1:e85dda9:         if (slave != null) {
1:e85dda9:             slave.stop();
1:e85dda9:         }
1:5d9a6b6: 
1:e85dda9:         if (master != null) {
1:e85dda9:             master.stop();
1:e85dda9:         }
1:e85dda9:     }
1:e85dda9: 
1:ad06a5f:     private void createAndStartMaster() throws Exception {
1:ad06a5f:         master = new BrokerService();
1:ad06a5f:         master.setDeleteAllMessagesOnStartup(true);
1:ad06a5f:         master.setUseJmx(false);
1:ba1bd26:         master.setDataDirectory(KAHADB_DIRECTORY);
1:ad06a5f:         master.setBrokerName("BROKER");
1:5d9a6b6:         masterConnectionUri = master.addConnector(MASTER_BIND_ADDRESS).getPublishableConnectString();
1:ad06a5f:         master.start();
1:ad06a5f:         master.waitUntilStarted();
1:ad06a5f:     }
1:ad06a5f: 
1:ad06a5f:     private void createAndStartSlave() throws Exception {
1:ad06a5f:         slave = new BrokerService();
1:ad06a5f:         slave.setUseJmx(false);
1:ba1bd26:         slave.setDataDirectory(KAHADB_DIRECTORY);
1:ad06a5f:         slave.setBrokerName("BROKER");
1:5d9a6b6:         slaveConnectionUri = slave.addConnector(SLAVE_BIND_ADDRESS).getPublishableConnectString();
1:ad06a5f: 
1:ad06a5f:         // Start the slave asynchronously, since this will block
1:ad06a5f:         new Thread(new Runnable() {
1:5d9a6b6:             @Override
1:ad06a5f:             public void run() {
2:ad06a5f:                 try {
1:e85dda9:                     slaveThreadStarted.countDown();
1:ad06a5f:                     slave.start();
1:e85dda9:                     LOG.info("slave has started");
1:ad06a5f:                 } catch (Exception e) {
1:ad06a5f:                     e.printStackTrace();
1:ad06a5f:                 }
1:ad06a5f:             }
1:e85dda9: 
1:ad06a5f:         }).start();
1:ad06a5f:     }
1:ad06a5f: 
1:ba1bd26:     @Test(timeout = 60000)
1:ad06a5f:     public void testFailover() throws Exception {
1:5d9a6b6: 
1:5d9a6b6:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUri);
1:ad06a5f:         Connection connection = factory.createConnection();
1:ad06a5f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ad06a5f: 
1:ad06a5f:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:5d9a6b6:         adapter.setServerUrl(brokerUri);
1:ad06a5f:         adapter.start(new StubBootstrapContext());
1:ad06a5f: 
1:ad06a5f:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1:ad06a5f: 
1:ad06a5f:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:5d9a6b6:             @Override
1:ad06a5f:             public void onMessage(Message message) {
1:e85dda9:                 LOG.info("Received message " + message);
1:ad06a5f:                 super.onMessage(message);
1:ad06a5f:                 messageDelivered.countDown();
1:ad06a5f:             };
1:ad06a5f:         };
1:ad06a5f: 
1:ad06a5f:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:ad06a5f:         activationSpec.setDestinationType(Queue.class.getName());
1:ad06a5f:         activationSpec.setDestination("TEST");
1:ad06a5f:         activationSpec.setResourceAdapter(adapter);
1:ad06a5f:         activationSpec.validate();
1:ad06a5f: 
1:ad06a5f:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:5d9a6b6:             @Override
1:ad06a5f:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:ad06a5f:                 endpoint.xaresource = resource;
1:ad06a5f:                 return endpoint;
1:ad06a5f:             }
1:ad06a5f: 
1:5d9a6b6:             @Override
1:ad06a5f:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:ad06a5f:                 return true;
1:ad06a5f:             }
1:ad06a5f:         };
1:ad06a5f: 
1:ad06a5f:         // Activate an Endpoint
1:ad06a5f:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:ad06a5f: 
1:ad06a5f:         // Give endpoint a moment to setup and register its listeners
1:ad06a5f:         try {
2:ad06a5f:             Thread.sleep(2000);
1:ad06a5f:         } catch (InterruptedException e) {
1:ad06a5f:         }
1:e85dda9: 
1:ad06a5f:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:e85dda9:         slaveThreadStarted.await(10, TimeUnit.SECONDS);
1:5d9a6b6: 
1:e85dda9:         // force a failover before send
1:e85dda9:         LOG.info("Stopping master to force failover..");
1:ad06a5f:         master.stop();
1:e85dda9:         master = null;
1:e85dda9:         assertTrue("slave started ok", slave.waitUntilStarted());
1:ad06a5f: 
1:ad06a5f:         producer.send(session.createTextMessage("Hello, again!"));
1:ad06a5f: 
1:ad06a5f:         // Wait for the message to be delivered.
1:5d9a6b6:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1:ad06a5f:     }
1:ad06a5f: 
1:ad06a5f:     private static final class StubBootstrapContext implements BootstrapContext {
1:5d9a6b6:         @Override
1:ad06a5f:         public WorkManager getWorkManager() {
1:ad06a5f:             return new WorkManager() {
1:5d9a6b6:                 @Override
1:ad06a5f:                 public void doWork(Work work) throws WorkException {
1:ad06a5f:                     new Thread(work).start();
1:ad06a5f:                 }
1:ad06a5f: 
1:5d9a6b6:                 @Override
1:ad06a5f:                 public void doWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:ad06a5f:                     new Thread(work).start();
1:ad06a5f:                 }
1:ad06a5f: 
1:5d9a6b6:                 @Override
1:ad06a5f:                 public long startWork(Work work) throws WorkException {
1:ad06a5f:                     new Thread(work).start();
1:ad06a5f:                     return 0;
1:ad06a5f:                 }
1:ad06a5f: 
1:5d9a6b6:                 @Override
1:ad06a5f:                 public long startWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:ad06a5f:                     new Thread(work).start();
1:ad06a5f:                     return 0;
1:ad06a5f:                 }
1:ad06a5f: 
1:5d9a6b6:                 @Override
1:ad06a5f:                 public void scheduleWork(Work work) throws WorkException {
1:ad06a5f:                     new Thread(work).start();
1:ad06a5f:                 }
1:ad06a5f: 
1:5d9a6b6:                 @Override
1:ad06a5f:                 public void scheduleWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:ad06a5f:                     new Thread(work).start();
1:ad06a5f:                 }
1:ad06a5f:             };
1:ad06a5f:         }
1:ad06a5f: 
1:5d9a6b6:         @Override
1:ad06a5f:         public XATerminator getXATerminator() {
1:ad06a5f:             return null;
1:ad06a5f:         }
1:ad06a5f: 
1:5d9a6b6:         @Override
1:ad06a5f:         public Timer createTimer() throws UnavailableException {
1:ad06a5f:             return null;
1:ad06a5f:         }
1:ad06a5f:     }
1:ad06a5f: 
1:ad06a5f:     public class StubMessageEndpoint implements MessageEndpoint, MessageListener {
1:ad06a5f:         public int messageCount;
1:ad06a5f:         public XAResource xaresource;
1:ad06a5f:         public Xid xid;
1:ad06a5f: 
1:5d9a6b6:         @Override
1:ad06a5f:         public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
1:ad06a5f:             try {
1:ad06a5f:                 if (xid == null) {
1:ad06a5f:                     xid = createXid();
1:ad06a5f:                 }
1:ad06a5f:                 xaresource.start(xid, 0);
1:ad06a5f:             } catch (Throwable e) {
1:ad06a5f:                 throw new ResourceException(e);
1:ad06a5f:             }
1:ad06a5f:         }
1:ad06a5f: 
1:5d9a6b6:         @Override
1:ad06a5f:         public void afterDelivery() throws ResourceException {
1:ad06a5f:             try {
1:ad06a5f:                 xaresource.end(xid, XAResource.TMSUCCESS);
1:ad06a5f:                 xaresource.prepare(xid);
1:ad06a5f:                 xaresource.commit(xid, false);
1:ad06a5f:             } catch (Throwable e) {
1:ad06a5f:                 e.printStackTrace();
1:ad06a5f:                 throw new ResourceException(e);
1:ad06a5f:             }
1:ad06a5f:         }
1:ad06a5f: 
1:5d9a6b6:         @Override
1:ad06a5f:         public void release() {
1:ad06a5f:         }
1:ad06a5f: 
1:5d9a6b6:         @Override
1:ad06a5f:         public void onMessage(Message message) {
1:ad06a5f:             messageCount++;
1:ad06a5f:         }
1:ad06a5f:     }
1:5d9a6b6: 
1:ad06a5f:     public Xid createXid() throws IOException {
1:ad06a5f:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:ad06a5f:         DataOutputStream os = new DataOutputStream(baos);
1:ad06a5f:         os.writeLong(++txGenerator);
1:ad06a5f:         os.close();
1:ad06a5f:         final byte[] bs = baos.toByteArray();
1:ad06a5f: 
1:ad06a5f:         return new Xid() {
1:5d9a6b6:             @Override
1:ad06a5f:             public int getFormatId() {
1:ad06a5f:                 return 86;
1:ad06a5f:             }
1:ad06a5f: 
1:5d9a6b6:             @Override
1:ad06a5f:             public byte[] getGlobalTransactionId() {
1:ad06a5f:                 return bs;
1:ad06a5f:             }
1:ad06a5f: 
1:5d9a6b6:             @Override
1:ad06a5f:             public byte[] getBranchQualifier() {
1:ad06a5f:                 return bs;
1:ad06a5f:             }
1:ad06a5f:         };
1:ad06a5f:     }
1:ad06a5f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class FailoverManagedClusterTest {
1: 
1:     private static final String MASTER_BIND_ADDRESS = "tcp://localhost:0";
1:     private static final String SLAVE_BIND_ADDRESS = "tcp://localhost:0";
1:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
1:     @After
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         master.setDataDirectory(KAHADB_DIRECTORY);
/////////////////////////////////////////////////////////////////////////
1:         slave.setDataDirectory(KAHADB_DIRECTORY);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5d9a6b6
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private String masterConnectionUri;
1:     private String slaveConnectionUri;
1: 
1:     private String brokerUri;
1: 
1:     private final CountDownLatch slaveThreadStarted = new CountDownLatch(1);
1:         createAndStartSlave();
1: 
1:         brokerUri = "failover://(" + masterConnectionUri + "," + slaveConnectionUri + ")?randomize=false";
1: 
1: 
1:         masterConnectionUri = master.addConnector(MASTER_BIND_ADDRESS).getPublishableConnectString();
/////////////////////////////////////////////////////////////////////////
1:         slaveConnectionUri = slave.addConnector(SLAVE_BIND_ADDRESS).getPublishableConnectString();
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUri);
1:         adapter.setServerUrl(brokerUri);
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1:         @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1: 
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverManagedClusterTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:e85dda9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(FailoverManagedClusterTest.class);
1:     
/////////////////////////////////////////////////////////////////////////
0:     private CountDownLatch slaveThreadStarted = new CountDownLatch(1);
0:     @Override
0:     @Override
0:     protected void tearDown() throws Exception {
1:         if (slave != null) {
1:             slave.stop();
1:         }
1:         if (master != null) {
1:             master.stop();
1:         }
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                     slaveThreadStarted.countDown();
1:                     LOG.info("slave has started");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Received message " + message);
/////////////////////////////////////////////////////////////////////////
1:         slaveThreadStarted.await(10, TimeUnit.SECONDS);
1:         
1:         // force a failover before send
1:         LOG.info("Stopping master to force failover..");
1:         master = null;
1:         assertTrue("slave started ok", slave.waitUntilStarted());
commit:ad06a5f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.ra;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.lang.reflect.Method;
1: import java.util.Timer;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.BootstrapContext;
1: import javax.resource.spi.UnavailableException;
1: import javax.resource.spi.XATerminator;
1: import javax.resource.spi.endpoint.MessageEndpoint;
1: import javax.resource.spi.endpoint.MessageEndpointFactory;
1: import javax.resource.spi.work.ExecutionContext;
1: import javax.resource.spi.work.Work;
1: import javax.resource.spi.work.WorkException;
1: import javax.resource.spi.work.WorkListener;
1: import javax.resource.spi.work.WorkManager;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: public class FailoverManagedClusterTest extends TestCase {
1: 
1:     long txGenerator = System.currentTimeMillis();
1:     
0:     private static final String MASTER_BIND_ADDRESS = "tcp://0.0.0.0:61616";
0:     private static final String SLAVE_BIND_ADDRESS = "tcp://0.0.0.0:61617";
1: 
0:     private static final String BROKER_URL = "failover://(" + MASTER_BIND_ADDRESS + "," + SLAVE_BIND_ADDRESS + ")?randomize=false";
1:     
1:     private BrokerService master;
1:     private BrokerService slave;
1: 
0:     protected void setUp() throws Exception {
1:         createAndStartMaster();
0:         createAndStartSlave();    
1:     }
1:     
1: 
1:     private void createAndStartMaster() throws Exception {
1:         master = new BrokerService();
1:         master.setDeleteAllMessagesOnStartup(true);
1:         master.setUseJmx(false);
1:         master.setBrokerName("BROKER");
0:         master.addConnector(MASTER_BIND_ADDRESS);
1:         master.start();
1:         master.waitUntilStarted();
1:     }
1: 
1:     private void createAndStartSlave() throws Exception {
1:         slave = new BrokerService();
1:         slave.setUseJmx(false);
1:         slave.setBrokerName("BROKER");
0:         slave.addConnector(SLAVE_BIND_ADDRESS);
1: 
1:         // Start the slave asynchronously, since this will block
1:         new Thread(new Runnable() {
1:             public void run() {
1:                 try {
1:                     slave.start();
0:                     System.out.println("slave has started");
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1: 
1:         }).start();
1:     }
1: 
1:     public void testFailover() throws Exception {
1:         
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(BROKER_URL);
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
0:         adapter.setServerUrl(BROKER_URL);
1:         adapter.start(new StubBootstrapContext());
1: 
1:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             public void onMessage(Message message) {
0:                 System.out.println("Received message " + message);
1:                 super.onMessage(message);
1:                 messageDelivered.countDown();
1:             };
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1:         // Give endpoint a moment to setup and register its listeners
1:         try {
1:             Thread.sleep(2000);
1:         } catch (InterruptedException e) {
1:         }
1: 
0:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1: 
0:         // force a failover
1:         master.stop();
0:         slave.waitUntilStarted();
1: 
1:         try {
1:             Thread.sleep(2000);
0:         } catch (InterruptedException ie) {
0:             // ignore
1:         }
1: 
1:         producer.send(session.createTextMessage("Hello, again!"));
1: 
1:         // Wait for the message to be delivered.
0:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));                
1:     }
1: 
1: 
1:     private static final class StubBootstrapContext implements BootstrapContext {
1:         public WorkManager getWorkManager() {
1:             return new WorkManager() {
1:                 public void doWork(Work work) throws WorkException {
1:                     new Thread(work).start();
1:                 }
1: 
1:                 public void doWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:                     new Thread(work).start();
1:                 }
1: 
1:                 public long startWork(Work work) throws WorkException {
1:                     new Thread(work).start();
1:                     return 0;
1:                 }
1: 
1:                 public long startWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:                     new Thread(work).start();
1:                     return 0;
1:                 }
1: 
1:                 public void scheduleWork(Work work) throws WorkException {
1:                     new Thread(work).start();
1:                 }
1: 
1:                 public void scheduleWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:                     new Thread(work).start();
1:                 }
1:             };
1:         }
1: 
1:         public XATerminator getXATerminator() {
1:             return null;
1:         }
1: 
1:         public Timer createTimer() throws UnavailableException {
1:             return null;
1:         }
1:     }
1: 
1:     public class StubMessageEndpoint implements MessageEndpoint, MessageListener {
1:         public int messageCount;
1:         public XAResource xaresource;
1:         public Xid xid;
1: 
1:         public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
1:             try {
1:                 if (xid == null) {
1:                     xid = createXid();
1:                 }
1:                 xaresource.start(xid, 0);
1:             } catch (Throwable e) {
1:                 throw new ResourceException(e);
1:             }
1:         }
1: 
1:         public void afterDelivery() throws ResourceException {
1:             try {
1:                 xaresource.end(xid, XAResource.TMSUCCESS);
1:                 xaresource.prepare(xid);
1:                 xaresource.commit(xid, false);
1:             } catch (Throwable e) {
1:                 e.printStackTrace();
1:                 throw new ResourceException(e);
1:             }
1:         }
1: 
1:         public void release() {
1:         }
1: 
1:         public void onMessage(Message message) {
1:             messageCount++;
1:         }
1: 
1:     }
1:     
1:     public Xid createXid() throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1:     }
1: 
1: }
============================================================================