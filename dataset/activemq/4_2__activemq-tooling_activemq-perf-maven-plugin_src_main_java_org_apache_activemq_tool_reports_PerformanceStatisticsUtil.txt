1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.reports;
1:a88906f: 
1:a88906f: import java.util.Iterator;
1:540dd5c: import java.util.List;
1:a88906f: 
1:a88906f: public final class PerformanceStatisticsUtil {
1:a88906f:     private PerformanceStatisticsUtil() {
1:a88906f:     }
1:a88906f: 
1:fddc01d:     public static long getSum(List numList) {
1:fddc01d:         long sum = 0;
1:fddc01d:         if (numList != null) {
1:540dd5c:             for (Iterator i = numList.iterator(); i.hasNext();) {
1:fddc01d:                 sum += ((Long)i.next()).longValue();
1:a88906f:             }
1:a88906f:         } else {
1:fddc01d:             sum = -1;
1:a88906f:         }
1:fddc01d:         return sum;
1:a88906f:     }
1:a88906f: 
1:fddc01d:     public static long getMin(List numList) {
1:fddc01d:         long min = Long.MAX_VALUE;
1:fddc01d:         if (numList != null) {
1:540dd5c:             for (Iterator i = numList.iterator(); i.hasNext();) {
1:fddc01d:                 min = Math.min(((Long)i.next()).longValue(), min);
1:a88906f:             }
1:a88906f:         } else {
1:fddc01d:             min = -1;
1:a88906f:         }
1:fddc01d:         return min;
1:a88906f:     }
1:a88906f: 
1:fddc01d:     public static long getMax(List numList) {
1:fddc01d:         long max = Long.MIN_VALUE;
1:fddc01d:         if (numList != null) {
1:540dd5c:             for (Iterator i = numList.iterator(); i.hasNext();) {
1:fddc01d:                 max = Math.max(((Long)i.next()).longValue(), max);
1:a88906f:             }
1:a88906f:         } else {
1:fddc01d:             max = -1;
1:a88906f:         }
1:fddc01d:         return max;
1:a88906f:     }
1:a88906f: 
1:fddc01d:     public static double getAve(List numList) {
1:fddc01d:         double ave;
1:fddc01d:         if (numList != null) {
1:a88906f:             int sampleCount = 0;
2:a88906f:             long totalTP = 0;
1:540dd5c:             for (Iterator i = numList.iterator(); i.hasNext();) {
1:a88906f:                 sampleCount++;
2:a88906f:                 totalTP += ((Long)i.next()).longValue();
1:a88906f:             }
1:a88906f:             return (double)totalTP / (double)sampleCount;
1:a88906f:         } else {
1:fddc01d:             ave = -1;
1:a88906f:         }
1:fddc01d:         return ave;
1:a88906f:     }
1:a88906f: 
1:fddc01d:     public static double getAveEx(List numList) {
1:fddc01d:         double ave;
1:fddc01d:         long minTP = getMin(numList);
1:fddc01d:         long maxTP = getMax(numList);
1:fddc01d:         if (numList != null) {
1:a88906f:             int sampleCount = 0;
1:a88906f:             long totalTP = 0;
1:a88906f:             long sampleTP;
1:540dd5c:             for (Iterator i = numList.iterator(); i.hasNext();) {
1:a88906f:                 sampleCount++;
1:a88906f:                 sampleTP = ((Long)i.next()).longValue();
1:a88906f:                 if (sampleTP != minTP && sampleTP != maxTP) {
1:a88906f:                     totalTP += sampleTP;
1:a88906f:                 }
1:a88906f:             }
1:a88906f:             return (double)totalTP / (double)sampleCount;
1:a88906f:         } else {
1:fddc01d:             ave = -1;
1:a88906f:         }
1:fddc01d:         return ave;
1:a88906f:     }
1:a88906f: 
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator i = numList.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator i = numList.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator i = numList.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator i = numList.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator i = numList.iterator(); i.hasNext();) {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.reports;
1: 
0: import java.util.List;
1: import java.util.Iterator;
1: 
1: public final class PerformanceStatisticsUtil {
1:     private PerformanceStatisticsUtil() {
1:     }
1: 
0:     public static long getTotalThroughput(List totalTPList) {
1:         long totalTP = 0;
0:         if (totalTPList != null) {
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
1:                 totalTP += ((Long)i.next()).longValue();
1:             }
1:         } else {
0:             totalTP = -1;
1:         }
0:         return totalTP;
1:     }
1: 
0:     public static long getMinThroughput(List totalTPList) {
0:         long minTP = Long.MAX_VALUE;
0:         if (totalTPList != null) {
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
0:                 minTP = Math.min(((Long)i.next()).longValue(), minTP);
1:             }
1:         } else {
0:             minTP = -1;
1:         }
0:         return minTP;
1:     }
1: 
0:     public static long getMaxThroughput(List totalTPList) {
0:         long maxTP = Long.MIN_VALUE;
0:         if (totalTPList != null) {
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
0:                 maxTP = Math.max(((Long)i.next()).longValue(), maxTP);
1:             }
1:         } else {
0:             maxTP = -1;
1:         }
0:         return maxTP;
1:     }
1: 
0:     public static double getAveThroughput(List totalTPList) {
0:         double aveTP;
0:         if (totalTPList != null) {
1:             int sampleCount = 0;
1:             long totalTP = 0;
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
1:                 sampleCount++;
1:                 totalTP += ((Long)i.next()).longValue();
1:             }
1:             return (double)totalTP / (double)sampleCount;
1:         } else {
0:             aveTP = -1;
1:         }
0:         return aveTP;
1:     }
1: 
0:     public static double getAveThroughputExcludingMinMax(List totalTPList) {
0:         double aveTP;
0:         long minTP = getMinThroughput(totalTPList);
0:         long maxTP = getMaxThroughput(totalTPList);
0:         if (totalTPList != null) {
1:             int sampleCount = 0;
1:             long totalTP = 0;
1:             long sampleTP;
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
1:                 sampleCount++;
1:                 sampleTP = ((Long)i.next()).longValue();
1:                 if (sampleTP != minTP && sampleTP != maxTP) {
1:                     totalTP += sampleTP;
1:                 }
1:             }
1:             return (double)totalTP / (double)sampleCount;
1:         } else {
0:             aveTP = -1;
1:         }
0:         return aveTP;
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:fddc01d
/////////////////////////////////////////////////////////////////////////
1:     public static long getSum(List numList) {
1:         long sum = 0;
1:         if (numList != null) {
0:             for (Iterator i=numList.iterator(); i.hasNext();) {
1:                 sum += ((Long)i.next()).longValue();
1:             sum = -1;
1:         return sum;
1:     public static long getMin(List numList) {
1:         long min = Long.MAX_VALUE;
1:         if (numList != null) {
0:             for (Iterator i=numList.iterator(); i.hasNext();) {
1:                 min = Math.min(((Long)i.next()).longValue(), min);
1:             min = -1;
1:         return min;
1:     public static long getMax(List numList) {
1:         long max = Long.MIN_VALUE;
1:         if (numList != null) {
0:             for (Iterator i=numList.iterator(); i.hasNext();) {
1:                 max = Math.max(((Long)i.next()).longValue(), max);
1:             max = -1;
1:         return max;
1:     public static double getAve(List numList) {
1:         double ave;
1:         if (numList != null) {
0:             for (Iterator i=numList.iterator(); i.hasNext();) {
1:             ave = -1;
1:         return ave;
1:     public static double getAveEx(List numList) {
1:         double ave;
1:         long minTP = getMin(numList);
1:         long maxTP = getMax(numList);
1:         if (numList != null) {
0:             for (Iterator i=numList.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             ave = -1;
1:         return ave;
commit:77c889d
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool.reports;
0: 
0: import java.util.List;
0: import java.util.Iterator;
0: 
0: public final class PerformanceStatisticsUtil {
0:     private PerformanceStatisticsUtil() {
0:     }
0: 
0:     public static long getTotalThroughput(List totalTPList) {
0:         long totalTP = 0;
0:         if (totalTPList != null) {
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
0:                 totalTP += ((Long)i.next()).longValue();
0:             }
0:         } else {
0:             totalTP = -1;
0:         }
0:         return totalTP;
0:     }
0: 
0:     public static long getMinThroughput(List totalTPList) {
0:         long minTP = Long.MAX_VALUE;
0:         if (totalTPList != null) {
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
0:                 minTP = Math.min(((Long)i.next()).longValue(), minTP);
0:             }
0:         } else {
0:             minTP = -1;
0:         }
0:         return minTP;
0:     }
0: 
0:     public static long getMaxThroughput(List totalTPList) {
0:         long maxTP = Long.MIN_VALUE;
0:         if (totalTPList != null) {
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
0:                 maxTP = Math.max(((Long)i.next()).longValue(), maxTP);
0:             }
0:         } else {
0:             maxTP = -1;
0:         }
0:         return maxTP;
0:     }
0: 
0:     public static double getAveThroughput(List totalTPList) {
0:         double aveTP;
0:         if (totalTPList != null) {
0:             int sampleCount = 0;
0:             long totalTP = 0;
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
0:                 sampleCount++;
0:                 totalTP += ((Long)i.next()).longValue();
0:             }
0:             return (double)totalTP / (double)sampleCount;
0:         } else {
0:             aveTP = -1;
0:         }
0:         return aveTP;
0:     }
0: 
0:     public static double getAveThroughputExcludingMinMax(List totalTPList) {
0:         double aveTP;
0:         long minTP = getMinThroughput(totalTPList);
0:         long maxTP = getMaxThroughput(totalTPList);
0:         if (totalTPList != null) {
0:             int sampleCount = 0;
0:             long totalTP = 0;
0:             long sampleTP;
0:             for (Iterator i=totalTPList.iterator(); i.hasNext();) {
0:                 sampleCount++;
0:                 sampleTP = ((Long)i.next()).longValue();
0:                 if (sampleTP != minTP && sampleTP != maxTP) {
0:                     totalTP += sampleTP;
0:                 }
0:             }
0:             return (double)totalTP / (double)sampleCount;
0:         } else {
0:             aveTP = -1;
0:         }
0:         return aveTP;
0:     }
0: 
0: }
============================================================================