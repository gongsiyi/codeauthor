1:946e62d: /*
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
3:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:1aab71b: 
1:456a2ba: import java.io.DataInput;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.io.InputStream;
1:456a2ba: import java.io.UTFDataFormatException;
1:456a2ba: 
1:946e62d: import org.apache.activemq.util.ByteSequence;
1:172c290: import org.apache.activemq.util.MarshallingSupport;
1:946e62d: 
2:456a2ba: /**
1:456a2ba:  * Optimized ByteArrayInputStream that can be used more than once
1:456a2ba:  */
1:946e62d: public final class DataByteArrayInputStream extends InputStream implements DataInput, AutoCloseable {
1:946e62d: 
1:456a2ba:     private byte[] buf;
1:456a2ba:     private int pos;
1:456a2ba:     private int offset;
1:456a2ba:     private int length;
1:456a2ba: 
1:199c683:     private byte[] work;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Creates a <code>StoreByteArrayInputStream</code>.
1:0bbc0ac:      *
1:456a2ba:      * @param buf the input buffer.
1:456a2ba:      */
1:456a2ba:     public DataByteArrayInputStream(byte buf[]) {
1:456a2ba:         this.buf = buf;
1:456a2ba:         this.pos = 0;
1:456a2ba:         this.offset = 0;
1:456a2ba:         this.length = buf.length;
1:199c683:         this.work = new byte[8];
8:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Creates a <code>StoreByteArrayInputStream</code>.
1:456a2ba:      *
1:456a2ba:      * @param sequence the input buffer.
1:456a2ba:      */
1:456a2ba:     public DataByteArrayInputStream(ByteSequence sequence) {
1:456a2ba:         this.buf = sequence.getData();
1:456a2ba:         this.offset = sequence.getOffset();
1:456a2ba:         this.pos =  this.offset;
1:456a2ba:         this.length = sequence.length;
1:199c683:         this.work = new byte[8];
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Creates <code>WireByteArrayInputStream</code> with a minmalist byte
1:456a2ba:      * array
1:456a2ba:      */
1:456a2ba:     public DataByteArrayInputStream() {
1:456a2ba:         this(new byte[0]);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return the size
1:456a2ba:      */
1:456a2ba:     public int size() {
1:456a2ba:         return pos - offset;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return the underlying data array
1:456a2ba:      */
1:456a2ba:     public byte[] getRawData() {
1:456a2ba:         return buf;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * reset the <code>StoreByteArrayInputStream</code> to use an new byte
1:456a2ba:      * array
1:456a2ba:      *
1:456a2ba:      * @param newBuff
1:456a2ba:      */
1:456a2ba:     public void restart(byte[] newBuff) {
1:456a2ba:         buf = newBuff;
1:456a2ba:         pos = 0;
1:456a2ba:         length = newBuff.length;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void restart() {
1:456a2ba:         pos = 0;
1:456a2ba:         length = buf.length;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * reset the <code>StoreByteArrayInputStream</code> to use an new
1:456a2ba:      * ByteSequence
1:456a2ba:      *
1:456a2ba:      * @param sequence
1:456a2ba:      */
1:456a2ba:     public void restart(ByteSequence sequence) {
1:456a2ba:         this.buf = sequence.getData();
1:456a2ba:         this.pos = sequence.getOffset();
1:456a2ba:         this.length = sequence.getLength();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * re-start the input stream - reusing the current buffer
1:456a2ba:      *
1:456a2ba:      * @param size
1:456a2ba:      */
1:456a2ba:     public void restart(int size) {
1:456a2ba:         if (buf == null || buf.length < size) {
1:456a2ba:             buf = new byte[size];
1:456a2ba:         }
1:456a2ba:         restart(buf);
1:456a2ba:         this.length = size;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Reads the next byte of data from this input stream. The value byte is
1:456a2ba:      * returned as an <code>int</code> in the range <code>0</code> to
1:456a2ba:      * <code>255</code>. If no byte is available because the end of the
1:456a2ba:      * stream has been reached, the value <code>-1</code> is returned.
1:456a2ba:      * <p>
1:456a2ba:      * This <code>read</code> method cannot block.
1:456a2ba:      *
1:456a2ba:      * @return the next byte of data, or <code>-1</code> if the end of the
1:456a2ba:      *         stream has been reached.
1:456a2ba:      */
1:946e62d:     @Override
1:456a2ba:     public int read() {
1:456a2ba:         return (pos < length) ? (buf[pos++] & 0xff) : -1;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Reads up to <code>len</code> bytes of data into an array of bytes from
1:456a2ba:      * this input stream.
1:456a2ba:      *
1:456a2ba:      * @param b the buffer into which the data is read.
1:456a2ba:      * @param off the start offset of the data.
1:456a2ba:      * @param len the maximum number of bytes read.
1:456a2ba:      * @return the total number of bytes read into the buffer, or
1:456a2ba:      *         <code>-1</code> if there is no more data because the end of the
1:456a2ba:      *         stream has been reached.
1:456a2ba:      */
1:946e62d:     @Override
1:456a2ba:     public int read(byte b[], int off, int len) {
1:456a2ba:         if (b == null) {
1:456a2ba:             throw new NullPointerException();
1:456a2ba:         }
1:456a2ba:         if (pos >= length) {
1:456a2ba:             return -1;
1:456a2ba:         }
1:456a2ba:         if (pos + len > length) {
1:456a2ba:             len = length - pos;
1:456a2ba:         }
1:456a2ba:         if (len <= 0) {
1:456a2ba:             return 0;
1:456a2ba:         }
1:456a2ba:         System.arraycopy(buf, pos, b, off, len);
1:456a2ba:         pos += len;
1:456a2ba:         return len;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return the number of bytes that can be read from the input stream
1:456a2ba:      *         without blocking.
1:456a2ba:      */
1:946e62d:     @Override
1:456a2ba:     public int available() {
1:456a2ba:         return length - pos;
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void readFully(byte[] b) {
1:456a2ba:         read(b, 0, b.length);
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public void readFully(byte[] b, int off, int len) {
1:456a2ba:         read(b, off, len);
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public int skipBytes(int n) {
1:456a2ba:         if (pos + n > length) {
1:456a2ba:             n = length - pos;
1:456a2ba:         }
1:456a2ba:         if (n < 0) {
1:456a2ba:             return 0;
1:456a2ba:         }
1:456a2ba:         pos += n;
1:456a2ba:         return n;
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public boolean readBoolean() {
1:456a2ba:         return read() != 0;
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public byte readByte() {
1:456a2ba:         return (byte)read();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public int readUnsignedByte() {
1:456a2ba:         return read();
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public short readShort() {
1:199c683:         this.read(work, 0, 2);
1:199c683:         return (short) (((work[0] & 0xff) << 8) | (work[1] & 0xff));
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public int readUnsignedShort() {
1:199c683:         this.read(work, 0, 2);
1:946e62d:         return ((work[0] & 0xff) << 8) | (work[1] & 0xff);
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public char readChar() {
1:199c683:         this.read(work, 0, 2);
1:199c683:         return (char) (((work[0] & 0xff) << 8) | (work[1] & 0xff));
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public int readInt() {
1:199c683:         this.read(work, 0, 4);
1:199c683:         return ((work[0] & 0xff) << 24) | ((work[1] & 0xff) << 16) |
1:199c683:                ((work[2] & 0xff) << 8) | (work[3] & 0xff);
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public long readLong() {
1:199c683:         this.read(work, 0, 8);
1:456a2ba: 
1:199c683:         int i1 = ((work[0] & 0xff) << 24) | ((work[1] & 0xff) << 16) |
1:199c683:             ((work[2] & 0xff) << 8) | (work[3] & 0xff);
1:199c683:         int i2 = ((work[4] & 0xff) << 24) | ((work[5] & 0xff) << 16) |
1:199c683:             ((work[6] & 0xff) << 8) | (work[7] & 0xff);
1:199c683: 
1:199c683:         return ((i1 & 0xffffffffL) << 32) | (i2 & 0xffffffffL);
1:456a2ba:     }
2:199c683: 
1:946e62d:     @Override
1:456a2ba:     public float readFloat() throws IOException {
1:456a2ba:         return Float.intBitsToFloat(readInt());
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public double readDouble() throws IOException {
1:456a2ba:         return Double.longBitsToDouble(readLong());
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public String readLine() {
1:456a2ba:         int start = pos;
1:456a2ba:         while (pos < length) {
1:456a2ba:             int c = read();
1:456a2ba:             if (c == '\n') {
5:456a2ba:                 break;
1:456a2ba:             }
1:456a2ba:             if (c == '\r') {
1:456a2ba:                 c = read();
1:456a2ba:                 if (c != '\n' && c != -1) {
1:456a2ba:                     pos--;
1:456a2ba:                 }
1:456a2ba:                 break;
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:         return new String(buf, start, pos);
1:456a2ba:     }
1:456a2ba: 
1:946e62d:     @Override
1:456a2ba:     public String readUTF() throws IOException {
1:456a2ba:         int length = readUnsignedShort();
1:172c290:         if (pos + length > buf.length) {
1:172c290:             throw new UTFDataFormatException("bad string");
1:456a2ba:         }
1:172c290:         char chararr[] = new char[length];
1:172c290:         String result = MarshallingSupport.convertUTF8WithBuf(buf, chararr, pos, length);
1:172c290:         pos += length;
1:172c290:         return result;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int getPos() {
1:456a2ba:         return pos;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setPos(int pos) {
1:456a2ba:         this.pos = pos;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int getLength() {
1:456a2ba:         return length;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setLength(int length) {
1:456a2ba:         this.length = length;
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:172c290
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MarshallingSupport;
/////////////////////////////////////////////////////////////////////////
1:         if (pos + length > buf.length) {
1:             throw new UTFDataFormatException("bad string");
1:         char chararr[] = new char[length];
1:         String result = MarshallingSupport.convertUTF8WithBuf(buf, chararr, pos, length);
1:         pos += length;
1:         return result;
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:946e62d
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
1: 
1: public final class DataByteArrayInputStream extends InputStream implements DataInput, AutoCloseable {
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:         return ((work[0] & 0xff) << 8) | (work[1] & 0xff);
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
1: 
0: import org.apache.activemq.util.ByteSequence;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.io.DataInput;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.UTFDataFormatException;
1: 
1: /**
1:  * Optimized ByteArrayInputStream that can be used more than once
1:  * 
0:  * @version $Revision$
1:  */
0: public final class DataByteArrayInputStream extends InputStream implements DataInput {
1:     private byte[] buf;
1:     private int pos;
1:     private int offset;
1:     private int length;
1: 
1:     /**
1:      * Creates a <code>StoreByteArrayInputStream</code>.
1:      * 
1:      * @param buf the input buffer.
1:      */
1:     public DataByteArrayInputStream(byte buf[]) {
1:         this.buf = buf;
1:         this.pos = 0;
1:         this.offset = 0;
1:         this.length = buf.length;
1:     }
1: 
1:     /**
1:      * Creates a <code>StoreByteArrayInputStream</code>.
1:      * 
1:      * @param sequence the input buffer.
1:      */
1:     public DataByteArrayInputStream(ByteSequence sequence) {
1:         this.buf = sequence.getData();
1:         this.offset = sequence.getOffset();
1:         this.pos =  this.offset;
1:         this.length = sequence.length;
1:     }
1: 
1:     /**
1:      * Creates <code>WireByteArrayInputStream</code> with a minmalist byte
1:      * array
1:      */
1:     public DataByteArrayInputStream() {
1:         this(new byte[0]);
1:     }
1: 
1:     /**
1:      * @return the size
1:      */
1:     public int size() {
1:         return pos - offset;
1:     }
1: 
1:     /**
1:      * @return the underlying data array
1:      */
1:     public byte[] getRawData() {
1:         return buf;
1:     }
1: 
1:     /**
1:      * reset the <code>StoreByteArrayInputStream</code> to use an new byte
1:      * array
1:      * 
1:      * @param newBuff
1:      */
1:     public void restart(byte[] newBuff) {
1:         buf = newBuff;
1:         pos = 0;
1:         length = newBuff.length;
1:     }
1: 
1:     public void restart() {
1:         pos = 0;
1:         length = buf.length;
1:     }
1: 
1:     /**
1:      * reset the <code>StoreByteArrayInputStream</code> to use an new
1:      * ByteSequence
1:      * 
1:      * @param sequence
1:      */
1:     public void restart(ByteSequence sequence) {
1:         this.buf = sequence.getData();
1:         this.pos = sequence.getOffset();
1:         this.length = sequence.getLength();
1:     }
1: 
1:     /**
1:      * re-start the input stream - reusing the current buffer
1:      * 
1:      * @param size
1:      */
1:     public void restart(int size) {
1:         if (buf == null || buf.length < size) {
1:             buf = new byte[size];
1:         }
1:         restart(buf);
1:         this.length = size;
1:     }
1: 
1:     /**
1:      * Reads the next byte of data from this input stream. The value byte is
1:      * returned as an <code>int</code> in the range <code>0</code> to
1:      * <code>255</code>. If no byte is available because the end of the
1:      * stream has been reached, the value <code>-1</code> is returned.
1:      * <p>
1:      * This <code>read</code> method cannot block.
1:      * 
1:      * @return the next byte of data, or <code>-1</code> if the end of the
1:      *         stream has been reached.
1:      */
1:     public int read() {
1:         return (pos < length) ? (buf[pos++] & 0xff) : -1;
1:     }
1: 
1:     /**
1:      * Reads up to <code>len</code> bytes of data into an array of bytes from
1:      * this input stream.
1:      * 
1:      * @param b the buffer into which the data is read.
1:      * @param off the start offset of the data.
1:      * @param len the maximum number of bytes read.
1:      * @return the total number of bytes read into the buffer, or
1:      *         <code>-1</code> if there is no more data because the end of the
1:      *         stream has been reached.
1:      */
1:     public int read(byte b[], int off, int len) {
1:         if (b == null) {
1:             throw new NullPointerException();
1:         }
1:         if (pos >= length) {
1:             return -1;
1:         }
1:         if (pos + len > length) {
1:             len = length - pos;
1:         }
1:         if (len <= 0) {
1:             return 0;
1:         }
1:         System.arraycopy(buf, pos, b, off, len);
1:         pos += len;
1:         return len;
1:     }
1: 
1:     /**
1:      * @return the number of bytes that can be read from the input stream
1:      *         without blocking.
1:      */
1:     public int available() {
1:         return length - pos;
1:     }
1: 
1:     public void readFully(byte[] b) {
1:         read(b, 0, b.length);
1:     }
1: 
1:     public void readFully(byte[] b, int off, int len) {
1:         read(b, off, len);
1:     }
1: 
1:     public int skipBytes(int n) {
1:         if (pos + n > length) {
1:             n = length - pos;
1:         }
1:         if (n < 0) {
1:             return 0;
1:         }
1:         pos += n;
1:         return n;
1:     }
1: 
1:     public boolean readBoolean() {
1:         return read() != 0;
1:     }
1: 
1:     public byte readByte() {
1:         return (byte)read();
1:     }
1: 
1:     public int readUnsignedByte() {
1:         return read();
1:     }
1: 
1:     public short readShort() {
0:         int ch1 = read();
0:         int ch2 = read();
0:         return (short)((ch1 << 8) + (ch2 << 0));
1:     }
1: 
1:     public int readUnsignedShort() {
0:         int ch1 = read();
0:         int ch2 = read();
0:         return (ch1 << 8) + (ch2 << 0);
1:     }
1: 
1:     public char readChar() {
0:         int ch1 = read();
0:         int ch2 = read();
0:         return (char)((ch1 << 8) + (ch2 << 0));
1:     }
1: 
1:     public int readInt() {
0:         int ch1 = read();
0:         int ch2 = read();
0:         int ch3 = read();
0:         int ch4 = read();
0:         return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0);
1:     }
1: 
1:     public long readLong() {
0:         long rc = ((long)buf[pos++] << 56) + ((long)(buf[pos++] & 255) << 48) + ((long)(buf[pos++] & 255) << 40) + ((long)(buf[pos++] & 255) << 32);
0:         return rc + ((long)(buf[pos++] & 255) << 24) + ((buf[pos++] & 255) << 16) + ((buf[pos++] & 255) << 8) + ((buf[pos++] & 255) << 0);
1:     }
1: 
1:     public float readFloat() throws IOException {
1:         return Float.intBitsToFloat(readInt());
1:     }
1: 
1:     public double readDouble() throws IOException {
1:         return Double.longBitsToDouble(readLong());
1:     }
1: 
1:     public String readLine() {
1:         int start = pos;
1:         while (pos < length) {
1:             int c = read();
1:             if (c == '\n') {
1:                 break;
1:             }
1:             if (c == '\r') {
1:                 c = read();
1:                 if (c != '\n' && c != -1) {
1:                     pos--;
1:                 }
1:                 break;
1:             }
1:         }
1:         return new String(buf, start, pos);
1:     }
1: 
1:     public String readUTF() throws IOException {
1:         int length = readUnsignedShort();
0:         char[] characters = new char[length];
0:         int c;
0:         int c2;
0:         int c3;
0:         int count = 0;
0:         int total = pos + length;
0:         while (pos < total) {
0:             c = (int)buf[pos] & 0xff;
0:             if (c > 127) {
1:                 break;
1:             }
0:             pos++;
0:             characters[count++] = (char)c;
1:         }
0:         while (pos < total) {
0:             c = (int)buf[pos] & 0xff;
0:             switch (c >> 4) {
0:             case 0:
0:             case 1:
0:             case 2:
0:             case 3:
0:             case 4:
0:             case 5:
0:             case 6:
0:             case 7:
0:                 pos++;
0:                 characters[count++] = (char)c;
1:                 break;
0:             case 12:
0:             case 13:
0:                 pos += 2;
0:                 if (pos > length) {
0:                     throw new UTFDataFormatException("bad string");
1:                 }
0:                 c2 = (int)buf[pos - 1];
0:                 if ((c2 & 0xC0) != 0x80) {
0:                     throw new UTFDataFormatException("bad string");
1:                 }
0:                 characters[count++] = (char)(((c & 0x1F) << 6) | (c2 & 0x3F));
1:                 break;
0:             case 14:
0:                 pos += 3;
0:                 if (pos > length) {
0:                     throw new UTFDataFormatException("bad string");
1:                 }
0:                 c2 = (int)buf[pos - 2];
0:                 c3 = (int)buf[pos - 1];
0:                 if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
0:                     throw new UTFDataFormatException("bad string");
1:                 }
0:                 characters[count++] = (char)(((c & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F) << 0));
1:                 break;
0:             default:
0:                 throw new UTFDataFormatException("bad string");
1:             }
1:         }
0:         return new String(characters, 0, count);
1:     }
1: 
1:     public int getPos() {
1:         return pos;
1:     }
1: 
1:     public void setPos(int pos) {
1:         this.pos = pos;
1:     }
1: 
1:     public int getLength() {
1:         return length;
1:     }
1: 
1:     public void setLength(int length) {
1:         this.length = length;
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:199c683
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:     private byte[] work;
1: 
0:      *
/////////////////////////////////////////////////////////////////////////
1:         this.work = new byte[8];
0:      *
/////////////////////////////////////////////////////////////////////////
1:         this.work = new byte[8];
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:         this.read(work, 0, 2);
1:         return (short) (((work[0] & 0xff) << 8) | (work[1] & 0xff));
1:         this.read(work, 0, 2);
0:         return (int) (((work[0] & 0xff) << 8) | (work[1] & 0xff));
1:         this.read(work, 0, 2);
1:         return (char) (((work[0] & 0xff) << 8) | (work[1] & 0xff));
1:         this.read(work, 0, 4);
1:         return ((work[0] & 0xff) << 24) | ((work[1] & 0xff) << 16) |
1:                ((work[2] & 0xff) << 8) | (work[3] & 0xff);
1:         this.read(work, 0, 8);
1: 
1:         int i1 = ((work[0] & 0xff) << 24) | ((work[1] & 0xff) << 16) |
1:             ((work[2] & 0xff) << 8) | (work[3] & 0xff);
1:         int i2 = ((work[4] & 0xff) << 24) | ((work[5] & 0xff) << 16) |
1:             ((work[6] & 0xff) << 8) | (work[7] & 0xff);
1: 
1:         return ((i1 & 0xffffffffL) << 32) | (i2 & 0xffffffffL);
/////////////////////////////////////////////////////////////////////////
0:         int endPos = pos + length;
0:         int count = 0, a;
0:         while (pos < endPos) {
0:             if ((characters[count] = (char) buf[pos++]) < '\u0080')
0:                 count++;
0:             else if (((a = characters[count]) & 0xE0) == 0xC0) {
0:                 if (pos >= endPos) {
0:                 int b = buf[pos++];
0:                 if ((b & 0xC0) != 0x80) {
0:                 characters[count++] = (char) (((a & 0x1F) << 6) | (b & 0x3F));
0:             } else if ((a & 0xf0) == 0xe0) {
0:                 if (pos + 1 >= endPos) {
0:                 int b = buf[pos++];
0:                 int c = buf[pos++];
0:                 if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {
0:                 characters[count++] = (char) (((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
0:             } else {
============================================================================