1:3454a8b: /**
1:3454a8b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3454a8b:  * contributor license agreements.  See the NOTICE file distributed with
1:3454a8b:  * this work for additional information regarding copyright ownership.
1:3454a8b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3454a8b:  * (the "License"); you may not use this file except in compliance with
1:3454a8b:  * the License.  You may obtain a copy of the License at
1:3454a8b:  *
1:3454a8b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3454a8b:  *
1:3454a8b:  * Unless required by applicable law or agreed to in writing, software
1:3454a8b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3454a8b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3454a8b:  * See the License for the specific language governing permissions and
1:3454a8b:  * limitations under the License.
1:3454a8b:  */
1:3454a8b: package org.apache.activemq.transport.mqtt;
1:3454a8b: 
1:3454a8b: import static org.junit.Assert.fail;
1:3454a8b: 
1:3454a8b: import java.util.Arrays;
1:3454a8b: import java.util.Collection;
1:3454a8b: 
1:3454a8b: import org.fusesource.mqtt.client.BlockingConnection;
1:3454a8b: import org.fusesource.mqtt.client.MQTT;
1:3454a8b: import org.fusesource.mqtt.client.QoS;
1:3454a8b: import org.junit.Test;
1:3454a8b: import org.junit.runner.RunWith;
1:3454a8b: import org.junit.runners.Parameterized;
1:3454a8b: import org.junit.runners.Parameterized.Parameters;
1:3454a8b: import org.slf4j.Logger;
1:3454a8b: import org.slf4j.LoggerFactory;
1:3454a8b: 
1:3454a8b: /**
1:3454a8b:  * Test that the maxFrameSize configuration value is applied across the transports.
1:3454a8b:  */
1:3454a8b: @RunWith(Parameterized.class)
1:3454a8b: public class MQTTMaxFrameSizeTest extends MQTTTestSupport {
1:3454a8b: 
1:3454a8b:     private static final Logger LOG = LoggerFactory.getLogger(MQTTMaxFrameSizeTest.class);
1:3454a8b: 
1:3454a8b:     private final int maxFrameSize;
1:3454a8b: 
1:3454a8b:     @Parameters(name="{0}")
1:3454a8b:     public static Collection<Object[]> data() {
1:3454a8b:         return Arrays.asList(new Object[][] {
1:3454a8b:                 { "mqtt", false, 1024 },
1:3454a8b:                 { "mqtt+ssl", true, 1024 },
1:3454a8b:                 { "mqtt+nio", false, 1024 },
1:3454a8b:                 { "mqtt+nio+ssl", true, 1024 }
1:3454a8b:             });
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     public MQTTMaxFrameSizeTest(String connectorScheme, boolean useSSL, int maxFrameSize) {
1:3454a8b:         super(connectorScheme, useSSL);
1:3454a8b: 
1:3454a8b:         this.maxFrameSize = maxFrameSize;
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     @Override
1:3454a8b:     public String getProtocolConfig() {
1:f37b005:         return "?wireFormat.maxFrameSize=" + maxFrameSize;
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     @Test(timeout = 30000)
1:3454a8b:     public void testFrameSizeToLargeClosesConnection() throws Exception {
1:3454a8b: 
1:3454a8b:         LOG.debug("Starting test on connector {} for frame size: {}", getProtocolScheme(), maxFrameSize);
1:3454a8b: 
1:3454a8b:         MQTT mqtt = createMQTTConnection();
1:455f1ca:         mqtt.setClientId(getTestName());
1:3454a8b:         mqtt.setKeepAlive((short) 10);
1:3454a8b:         mqtt.setVersion("3.1.1");
1:3454a8b: 
1:3454a8b:         BlockingConnection connection = mqtt.blockingConnection();
1:3454a8b:         connection.connect();
1:3454a8b: 
1:3454a8b:         final int payloadSize = maxFrameSize + 100;
1:3454a8b: 
1:3454a8b:         byte[] payload = new byte[payloadSize];
1:3454a8b:         for (int i = 0; i < payloadSize; ++i) {
1:3454a8b:             payload[i] = 42;
1:3454a8b:         }
1:3454a8b: 
1:3454a8b:         try {
1:3454a8b:             connection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);
1:3454a8b:             fail("should have thrown an exception");
1:3454a8b:         } catch (Exception ex) {
1:3454a8b:         } finally {
1:3454a8b:             connection.disconnect();
1:3454a8b:         }
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     @Test(timeout = 30000)
1:3454a8b:     public void testFrameSizeNotExceededWorks() throws Exception {
1:3454a8b: 
1:3454a8b:         LOG.debug("Starting test on connector {} for frame size: {}", getProtocolScheme(), maxFrameSize);
1:3454a8b: 
1:3454a8b:         MQTT mqtt = createMQTTConnection();
1:455f1ca:         mqtt.setClientId(getTestName());
1:3454a8b:         mqtt.setKeepAlive((short) 10);
1:3454a8b:         mqtt.setVersion("3.1.1");
1:3454a8b: 
1:3454a8b:         BlockingConnection connection = mqtt.blockingConnection();
1:3454a8b:         connection.connect();
1:3454a8b: 
1:3454a8b:         final int payloadSize = maxFrameSize / 2;
1:3454a8b: 
1:3454a8b:         byte[] payload = new byte[payloadSize];
1:3454a8b:         for (int i = 0; i < payloadSize; ++i) {
1:3454a8b:             payload[i] = 42;
1:3454a8b:         }
1:3454a8b: 
1:3454a8b:         try {
1:3454a8b:             connection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);
1:3454a8b:         } catch (Exception ex) {
1:3454a8b:             fail("should not have thrown an exception");
1:3454a8b:         } finally {
1:3454a8b:             connection.disconnect();
1:3454a8b:         }
1:3454a8b:     }
1:3454a8b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:455f1ca
/////////////////////////////////////////////////////////////////////////
1:         mqtt.setClientId(getTestName());
/////////////////////////////////////////////////////////////////////////
1:         mqtt.setClientId(getTestName());
commit:f37b005
/////////////////////////////////////////////////////////////////////////
1:         return "?wireFormat.maxFrameSize=" + maxFrameSize;
commit:3454a8b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.QoS;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that the maxFrameSize configuration value is applied across the transports.
1:  */
1: @RunWith(Parameterized.class)
1: public class MQTTMaxFrameSizeTest extends MQTTTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTMaxFrameSizeTest.class);
1: 
1:     private final int maxFrameSize;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 { "mqtt", false, 1024 },
1:                 { "mqtt+ssl", true, 1024 },
1:                 { "mqtt+nio", false, 1024 },
1:                 { "mqtt+nio+ssl", true, 1024 }
1:             });
1:     }
1: 
1:     public MQTTMaxFrameSizeTest(String connectorScheme, boolean useSSL, int maxFrameSize) {
1:         super(connectorScheme, useSSL);
1: 
1:         this.maxFrameSize = maxFrameSize;
1:     }
1: 
1:     @Override
1:     public String getProtocolConfig() {
0:         return "?transport.maxFrameSize=" + maxFrameSize;
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testFrameSizeToLargeClosesConnection() throws Exception {
1: 
1:         LOG.debug("Starting test on connector {} for frame size: {}", getProtocolScheme(), maxFrameSize);
1: 
1:         MQTT mqtt = createMQTTConnection();
0:         mqtt.setClientId(getName());
1:         mqtt.setKeepAlive((short) 10);
1:         mqtt.setVersion("3.1.1");
1: 
1:         BlockingConnection connection = mqtt.blockingConnection();
1:         connection.connect();
1: 
1:         final int payloadSize = maxFrameSize + 100;
1: 
1:         byte[] payload = new byte[payloadSize];
1:         for (int i = 0; i < payloadSize; ++i) {
1:             payload[i] = 42;
1:         }
1: 
1:         try {
1:             connection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);
1:             fail("should have thrown an exception");
1:         } catch (Exception ex) {
1:         } finally {
1:             connection.disconnect();
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testFrameSizeNotExceededWorks() throws Exception {
1: 
1:         LOG.debug("Starting test on connector {} for frame size: {}", getProtocolScheme(), maxFrameSize);
1: 
1:         MQTT mqtt = createMQTTConnection();
0:         mqtt.setClientId(getName());
1:         mqtt.setKeepAlive((short) 10);
1:         mqtt.setVersion("3.1.1");
1: 
1:         BlockingConnection connection = mqtt.blockingConnection();
1:         connection.connect();
1: 
1:         final int payloadSize = maxFrameSize / 2;
1: 
1:         byte[] payload = new byte[payloadSize];
1:         for (int i = 0; i < payloadSize; ++i) {
1:             payload[i] = 42;
1:         }
1: 
1:         try {
1:             connection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);
1:         } catch (Exception ex) {
1:             fail("should not have thrown an exception");
1:         } finally {
1:             connection.disconnect();
1:         }
1:     }
1: }
============================================================================