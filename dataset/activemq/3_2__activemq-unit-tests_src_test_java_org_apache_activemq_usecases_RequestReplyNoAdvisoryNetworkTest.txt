1:b9045db: /**
1:b9045db:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b9045db:  * contributor license agreements.  See the NOTICE file distributed with
1:b9045db:  * this work for additional information regarding copyright ownership.
1:b9045db:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b9045db:  * (the "License"); you may not use this file except in compliance with
1:b9045db:  * the License.  You may obtain a copy of the License at
1:b9045db:  *
1:b9045db:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b9045db:  *
1:b9045db:  * Unless required by applicable law or agreed to in writing, software
1:b9045db:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b9045db:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b9045db:  * See the License for the specific language governing permissions and
1:b9045db:  * limitations under the License.
1:b9045db:  */
1:b9045db: package org.apache.activemq.usecases;
3:b9045db: 
1:b9045db: 
1:b9045db: import java.io.ByteArrayInputStream;
1:b9045db: import java.io.IOException;
1:b9045db: import java.io.InputStream;
1:b9045db: import java.net.URI;
1:b9045db: import java.net.URL;
1:b9045db: import java.net.URLConnection;
1:b9045db: import java.net.URLStreamHandler;
1:b9045db: import java.net.URLStreamHandlerFactory;
1:b9045db: import java.util.Map;
1:254d920: import java.util.Vector;
1:4743a20: 
1:b9045db: import javax.jms.MessageConsumer;
1:b9045db: import javax.jms.MessageProducer;
1:b9045db: import javax.jms.Session;
1:b9045db: import javax.jms.TextMessage;
1:4743a20: 
1:b9045db: import org.apache.activemq.ActiveMQConnection;
1:b9045db: import org.apache.activemq.ActiveMQConnectionFactory;
1:b9045db: import org.apache.activemq.ActiveMQSession;
1:b9045db: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:b9045db: import org.apache.activemq.broker.BrokerService;
1:b9045db: import org.apache.activemq.broker.TransportConnector;
1:b9045db: import org.apache.activemq.broker.region.RegionBroker;
1:b9045db: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b9045db: import org.apache.activemq.broker.region.policy.PolicyMap;
1:b9045db: import org.apache.activemq.command.ActiveMQQueue;
1:b9045db: import org.apache.activemq.command.ActiveMQTempQueue;
1:b9045db: import org.apache.activemq.network.NetworkConnector;
1:b9045db: import org.apache.activemq.util.Wait;
1:b9045db: import org.apache.activemq.xbean.XBeanBrokerFactory;
1:b9045db: import org.slf4j.Logger;
1:b9045db: import org.slf4j.LoggerFactory;
1:b9045db: 
1:b9045db: public class RequestReplyNoAdvisoryNetworkTest extends JmsMultipleBrokersTestSupport {
1:b9045db:     private static final transient Logger LOG = LoggerFactory.getLogger(RequestReplyNoAdvisoryNetworkTest.class);
1:b9045db: 
1:254d920:     Vector<BrokerService> brokers = new Vector<BrokerService>();
1:b9045db:     BrokerService a, b;
1:b9045db:     ActiveMQQueue sendQ = new ActiveMQQueue("sendQ");
1:b9045db:     static final String connectionIdMarker = "ID:marker.";
1:b9045db:     ActiveMQTempQueue replyQWildcard = new ActiveMQTempQueue(connectionIdMarker + ">");
1:4743a20:     private final long receiveTimeout = 30000;
1:b9045db: 
1:b9045db:     public void testNonAdvisoryNetworkRequestReplyXmlConfig() throws Exception {
1:b9045db:         final String xmlConfigString = new String(
1:b9045db:                 "<beans" +
1:b9045db:                 " xmlns=\"http://www.springframework.org/schema/beans\"" +
1:b9045db:                 " xmlns:amq=\"http://activemq.apache.org/schema/core\"" +
1:b9045db:                 " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +
1:b9045db:                 " xsi:schemaLocation=\"http://www.springframework.org/schema/beans" +
1:b9045db:                 " http://www.springframework.org/schema/beans/spring-beans-2.0.xsd" +
1:b9045db:                 " http://activemq.apache.org/schema/core" +
1:b9045db:                 " http://activemq.apache.org/schema/core/activemq-core.xsd\">" +
1:b9045db:                 "  <broker xmlns=\"http://activemq.apache.org/schema/core\" id=\"broker\"" +
1:179d95e:                 "    allowTempAutoCreationOnSend=\"true\" schedulePeriodForDestinationPurge=\"1000\"" +
1:b9045db:                 "    brokerName=\"%HOST%\" persistent=\"false\" advisorySupport=\"false\" useJmx=\"false\" >" +
1:b9045db:                 "   <destinationPolicy>" +
1:b9045db:                 "    <policyMap>" +
1:b9045db:                 "     <policyEntries>" +
1:179d95e:                 "      <policyEntry optimizedDispatch=\"true\"  gcInactiveDestinations=\"true\" gcWithNetworkConsumers=\"true\" inactiveTimoutBeforeGC=\"1000\">"+
1:b9045db:                 "       <destination>"+
1:b9045db:                 "        <tempQueue physicalName=\"" + replyQWildcard.getPhysicalName() + "\"/>" +
1:b9045db:                 "       </destination>" +
1:b9045db:                 "      </policyEntry>" +
1:b9045db:                 "     </policyEntries>" +
1:b9045db:                 "    </policyMap>" +
1:b9045db:                 "   </destinationPolicy>" +
1:b9045db:                 "   <networkConnectors>" +
1:b9045db:                 "    <networkConnector uri=\"multicast://default\">" +
1:b9045db:                 "     <staticallyIncludedDestinations>" +
1:b9045db:                 "      <queue physicalName=\"" + sendQ.getPhysicalName() + "\"/>" +
1:b9045db:                 "      <tempQueue physicalName=\"" + replyQWildcard.getPhysicalName() + "\"/>" +
1:b9045db:                 "     </staticallyIncludedDestinations>" +
1:b9045db:                 "    </networkConnector>" +
1:b9045db:                 "   </networkConnectors>" +
1:b9045db:                 "   <transportConnectors>" +
1:b9045db:                 "     <transportConnector uri=\"tcp://0.0.0.0:0\" discoveryUri=\"multicast://default\" />" +
1:b9045db:                 "   </transportConnectors>" +
1:b9045db:                 "  </broker>" +
1:b9045db:                 "</beans>");
1:b9045db:         final String localProtocolScheme = "inline";
1:b9045db:         URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() {
1:b9045db:             @Override
1:b9045db:             public URLStreamHandler createURLStreamHandler(String protocol) {
1:b9045db:                 if (localProtocolScheme.equalsIgnoreCase(protocol)) {
1:b9045db:                     return new URLStreamHandler() {
1:b9045db:                         @Override
1:b9045db:                         protected URLConnection openConnection(URL u) throws IOException {
1:b9045db:                             return new URLConnection(u) {
1:b9045db:                                 @Override
1:b9045db:                                 public void connect() throws IOException {
3:b9045db:                                 }
1:4743a20:                                 @Override
1:b9045db:                                 public InputStream getInputStream() throws IOException {
1:b9045db:                                     return new ByteArrayInputStream(xmlConfigString.replace("%HOST%", url.getFile()).getBytes("UTF-8"));
1:b9045db:                                 }
1:b9045db:                             };
1:b9045db:                         }
1:b9045db:                     };
1:b9045db:                 }
1:b9045db:                 return null;
1:b9045db:             }
1:b9045db:         });
1:b9045db:         a = new XBeanBrokerFactory().createBroker(new URI("xbean:" + localProtocolScheme + ":A"));
1:b9045db:         b = new XBeanBrokerFactory().createBroker(new URI("xbean:" + localProtocolScheme + ":B"));
1:254d920:         brokers.add(a);
1:254d920:         brokers.add(b);
1:b9045db: 
1:b9045db:         doTestNonAdvisoryNetworkRequestReply();
1:b9045db:     }
1:b9045db: 
1:b9045db:     public void testNonAdvisoryNetworkRequestReply() throws Exception {
1:b9045db:         createBridgeAndStartBrokers();
1:b9045db:         doTestNonAdvisoryNetworkRequestReply();
1:b9045db:     }
1:b9045db: 
1:254d920:     public void testNonAdvisoryNetworkRequestReplyWithPIM() throws Exception {
1:254d920:         a = configureBroker("A");
1:254d920:         b = configureBroker("B");
1:254d920:         BrokerService hub = configureBroker("M");
1:254d920:         hub.setAllowTempAutoCreationOnSend(true);
1:254d920:         configureForPiggyInTheMiddle(bridge(a, hub));
1:254d920:         configureForPiggyInTheMiddle(bridge(b, hub));
1:254d920: 
1:254d920:         startBrokers();
1:254d920: 
1:254d920:         waitForBridgeFormation(hub, 2, 0);
1:254d920:         doTestNonAdvisoryNetworkRequestReply();
1:254d920:     }
1:254d920: 
1:254d920:     private void configureForPiggyInTheMiddle(NetworkConnector bridge) {
1:254d920:         bridge.setDuplex(true);
1:254d920:         bridge.setNetworkTTL(2);
1:254d920:     }
1:254d920: 
1:b9045db:     public void doTestNonAdvisoryNetworkRequestReply() throws Exception {
1:b9045db: 
1:b9045db:         waitForBridgeFormation(a, 1, 0);
1:b9045db:         waitForBridgeFormation(b, 1, 0);
1:b9045db: 
1:b9045db:         ActiveMQConnectionFactory sendFactory = createConnectionFactory(a);
1:b9045db:         ActiveMQConnection sendConnection = createConnection(sendFactory);
1:b9045db: 
1:b9045db:         ActiveMQSession sendSession = (ActiveMQSession)sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b9045db:         MessageProducer producer = sendSession.createProducer(sendQ);
1:b9045db:         ActiveMQTempQueue realReplyQ = (ActiveMQTempQueue) sendSession.createTemporaryQueue();
1:b9045db:         TextMessage message = sendSession.createTextMessage("1");
1:b9045db:         message.setJMSReplyTo(realReplyQ);
1:b9045db:         producer.send(message);
1:254d920:         LOG.info("request sent");
1:b9045db: 
1:b9045db:         // responder
1:b9045db:         ActiveMQConnectionFactory consumerFactory = createConnectionFactory(b);
1:b9045db:         ActiveMQConnection consumerConnection = createConnection(consumerFactory);
1:b9045db: 
1:b9045db:         ActiveMQSession consumerSession = (ActiveMQSession)consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b9045db:         MessageConsumer consumer = consumerSession.createConsumer(sendQ);
1:b9045db:         TextMessage received = (TextMessage) consumer.receive(receiveTimeout);
1:254d920:         assertNotNull("got request from sender ok", received);
1:b9045db: 
1:b9045db:         LOG.info("got request, sending reply");
1:b9045db: 
1:b9045db:         MessageProducer consumerProducer = consumerSession.createProducer(received.getJMSReplyTo());
1:b9045db:         consumerProducer.send(consumerSession.createTextMessage("got " + received.getText()));
1:b9045db:         // temp dest on reply broker tied to this connection, setOptimizedDispatch=true ensures
1:b9045db:         // message gets delivered before destination is removed
1:b9045db:         consumerConnection.close();
1:b9045db: 
1:b9045db:         // reply consumer
1:b9045db:         MessageConsumer replyConsumer = sendSession.createConsumer(realReplyQ);
1:b9045db:         TextMessage reply = (TextMessage) replyConsumer.receive(receiveTimeout);
1:b9045db:         assertNotNull("expected reply message", reply);
1:b9045db:         assertEquals("text is as expected", "got 1", reply.getText());
1:b9045db:         sendConnection.close();
1:b9045db: 
1:254d920:         LOG.info("checking for dangling temp destinations");
1:254d920:         // ensure all temp dests get cleaned up on all brokers
1:254d920:         for (BrokerService brokerService : brokers) {
1:254d920:             final RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:254d920:             assertTrue("all temps are gone on " + regionBroker.getBrokerName(), Wait.waitFor(new Wait.Condition(){
1:254d920:                 @Override
1:254d920:                 public boolean isSatisified() throws Exception {
1:4743a20:                     Map<?,?> tempTopics = regionBroker.getTempTopicRegion().getDestinationMap();
1:254d920:                     LOG.info("temp topics on " + regionBroker.getBrokerName() + ", " + tempTopics);
1:4743a20:                     Map<?,?> tempQ = regionBroker.getTempQueueRegion().getDestinationMap();
1:254d920:                     LOG.info("temp queues on " + regionBroker.getBrokerName() + ", " + tempQ);
1:254d920:                     return tempQ.isEmpty() && tempTopics.isEmpty();
1:254d920:                 }
1:254d920:             }));
1:b9045db:         }
1:b9045db:     }
1:b9045db: 
1:b9045db:     private ActiveMQConnection createConnection(ActiveMQConnectionFactory factory) throws Exception {
1:b9045db:         ActiveMQConnection c =(ActiveMQConnection) factory.createConnection();
1:b9045db:         c.start();
1:b9045db:         return c;
1:b9045db:     }
1:b9045db: 
1:b9045db:     private ActiveMQConnectionFactory createConnectionFactory(BrokerService brokerService) throws Exception {
1:b9045db:         String target = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:b9045db:         ActiveMQConnectionFactory factory =
1:b9045db:                 new ActiveMQConnectionFactory(target);
1:b9045db:         factory.setWatchTopicAdvisories(false);
1:b9045db:         factory.setConnectionIDPrefix(connectionIdMarker + brokerService.getBrokerName());
1:b9045db:         return factory;
1:b9045db:     }
1:b9045db: 
1:b9045db:     public void createBridgeAndStartBrokers() throws Exception {
1:b9045db:         a = configureBroker("A");
1:b9045db:         b = configureBroker("B");
1:b9045db:         bridge(a, b);
1:b9045db:         bridge(b, a);
1:254d920:         startBrokers();
1:b9045db:     }
1:b9045db: 
1:254d920:     private void startBrokers() throws Exception {
1:254d920:         for (BrokerService broker: brokers) {
1:254d920:             broker.start();
1:b9045db:         }
1:b9045db:     }
1:b9045db: 
1:b9045db:     @Override
1:254d920:     public void tearDown() throws Exception {
1:254d920:         for (BrokerService broker: brokers) {
1:254d920:             broker.stop();
1:254d920:         }
1:254d920:         brokers.clear();
1:254d920:     }
1:254d920: 
1:254d920: 
1:254d920:     private NetworkConnector bridge(BrokerService from, BrokerService to) throws Exception {
1:254d920:         TransportConnector toConnector = to.getTransportConnectors().get(0);
1:b9045db:         NetworkConnector bridge =
1:b9045db:                 from.addNetworkConnector("static://" + toConnector.getPublishableConnectString());
1:b9045db:         bridge.addStaticallyIncludedDestination(sendQ);
1:b9045db:         bridge.addStaticallyIncludedDestination(replyQWildcard);
1:254d920:         return bridge;
1:b9045db:     }
1:b9045db: 
1:b9045db:     private BrokerService configureBroker(String brokerName) throws Exception {
1:b9045db:         BrokerService broker = new BrokerService();
1:b9045db:         broker.setBrokerName(brokerName);
1:b9045db:         broker.setAdvisorySupport(false);
1:b9045db:         broker.setPersistent(false);
1:b9045db:         broker.setUseJmx(false);
1:6813691:         broker.setSchedulePeriodForDestinationPurge(1000);
1:179d95e:         broker.setAllowTempAutoCreationOnSend(true);
1:b9045db: 
1:b9045db:         PolicyMap map = new PolicyMap();
1:b9045db:         PolicyEntry tempReplyQPolicy = new PolicyEntry();
1:b9045db:         tempReplyQPolicy.setOptimizedDispatch(true);
1:254d920:         tempReplyQPolicy.setGcInactiveDestinations(true);
1:d55a392:         tempReplyQPolicy.setGcWithNetworkConsumers(true);
1:179d95e:         tempReplyQPolicy.setInactiveTimoutBeforeGC(1000);
1:b9045db:         map.put(replyQWildcard, tempReplyQPolicy);
1:b9045db:         broker.setDestinationPolicy(map);
1:254d920: 
1:254d920:         broker.addConnector("tcp://localhost:0");
1:254d920:         brokers.add(broker);
1:b9045db:         return broker;
1:b9045db:     }
1:b9045db: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final long receiveTimeout = 30000;
/////////////////////////////////////////////////////////////////////////
1:                     Map<?,?> tempTopics = regionBroker.getTempTopicRegion().getDestinationMap();
1:                     Map<?,?> tempQ = regionBroker.getTempQueueRegion().getDestinationMap();
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:179d95e
/////////////////////////////////////////////////////////////////////////
1:                 "    allowTempAutoCreationOnSend=\"true\" schedulePeriodForDestinationPurge=\"1000\"" +
1:                 "      <policyEntry optimizedDispatch=\"true\"  gcInactiveDestinations=\"true\" gcWithNetworkConsumers=\"true\" inactiveTimoutBeforeGC=\"1000\">"+
/////////////////////////////////////////////////////////////////////////
1:         broker.setAllowTempAutoCreationOnSend(true);
1:         tempReplyQPolicy.setInactiveTimoutBeforeGC(1000);
commit:6813691
/////////////////////////////////////////////////////////////////////////
1:         broker.setSchedulePeriodForDestinationPurge(1000);
commit:d55a392
/////////////////////////////////////////////////////////////////////////
1:         tempReplyQPolicy.setGcWithNetworkConsumers(true);
commit:254d920
/////////////////////////////////////////////////////////////////////////
1: import java.util.Vector;
/////////////////////////////////////////////////////////////////////////
1:     Vector<BrokerService> brokers = new Vector<BrokerService>();
/////////////////////////////////////////////////////////////////////////
1:         brokers.add(a);
1:         brokers.add(b);
/////////////////////////////////////////////////////////////////////////
1:     public void testNonAdvisoryNetworkRequestReplyWithPIM() throws Exception {
1:         a = configureBroker("A");
1:         b = configureBroker("B");
1:         BrokerService hub = configureBroker("M");
1:         hub.setAllowTempAutoCreationOnSend(true);
1:         configureForPiggyInTheMiddle(bridge(a, hub));
1:         configureForPiggyInTheMiddle(bridge(b, hub));
1: 
1:         startBrokers();
1: 
1:         waitForBridgeFormation(hub, 2, 0);
1:         doTestNonAdvisoryNetworkRequestReply();
1:     }
1: 
1:     private void configureForPiggyInTheMiddle(NetworkConnector bridge) {
1:         bridge.setDuplex(true);
1:         bridge.setNetworkTTL(2);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("request sent");
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("got request from sender ok", received);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("checking for dangling temp destinations");
1:         // ensure all temp dests get cleaned up on all brokers
1:         for (BrokerService brokerService : brokers) {
1:             final RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:             assertTrue("all temps are gone on " + regionBroker.getBrokerName(), Wait.waitFor(new Wait.Condition(){
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
0:                     Map tempTopics = regionBroker.getTempTopicRegion().getDestinationMap();
1:                     LOG.info("temp topics on " + regionBroker.getBrokerName() + ", " + tempTopics);
0:                     Map tempQ = regionBroker.getTempQueueRegion().getDestinationMap();
1:                     LOG.info("temp queues on " + regionBroker.getBrokerName() + ", " + tempQ);
1:                     return tempQ.isEmpty() && tempTopics.isEmpty();
1:                 }
1:             }));
/////////////////////////////////////////////////////////////////////////
1:         startBrokers();
1:     private void startBrokers() throws Exception {
1:         for (BrokerService broker: brokers) {
1:             broker.start();
1:     public void tearDown() throws Exception {
1:         for (BrokerService broker: brokers) {
1:             broker.stop();
1:         }
1:         brokers.clear();
1:     }
1: 
1: 
1:     private NetworkConnector bridge(BrokerService from, BrokerService to) throws Exception {
1:         TransportConnector toConnector = to.getTransportConnectors().get(0);
1:         return bridge;
/////////////////////////////////////////////////////////////////////////
1:         tempReplyQPolicy.setGcInactiveDestinations(true);
0:         tempReplyQPolicy.setInactiveTimoutBeforeGC(10*1000);
1: 
1:         broker.addConnector("tcp://localhost:0");
1:         brokers.add(broker);
commit:b9045db
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.net.URL;
1: import java.net.URLConnection;
1: import java.net.URLStreamHandler;
1: import java.net.URLStreamHandlerFactory;
1: import java.util.Map;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
0: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTempQueue;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.xbean.XBeanBrokerFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class RequestReplyNoAdvisoryNetworkTest extends JmsMultipleBrokersTestSupport {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(RequestReplyNoAdvisoryNetworkTest.class);
1: 
1:     BrokerService a, b;
1:     ActiveMQQueue sendQ = new ActiveMQQueue("sendQ");
1:     static final String connectionIdMarker = "ID:marker.";
1:     ActiveMQTempQueue replyQWildcard = new ActiveMQTempQueue(connectionIdMarker + ">");
0:     private long receiveTimeout = 30000;
1: 
1:     public void testNonAdvisoryNetworkRequestReplyXmlConfig() throws Exception {
1:         final String xmlConfigString = new String(
1:                 "<beans" +
1:                 " xmlns=\"http://www.springframework.org/schema/beans\"" +
1:                 " xmlns:amq=\"http://activemq.apache.org/schema/core\"" +
1:                 " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +
1:                 " xsi:schemaLocation=\"http://www.springframework.org/schema/beans" +
1:                 " http://www.springframework.org/schema/beans/spring-beans-2.0.xsd" +
1:                 " http://activemq.apache.org/schema/core" +
1:                 " http://activemq.apache.org/schema/core/activemq-core.xsd\">" +
1:                 "  <broker xmlns=\"http://activemq.apache.org/schema/core\" id=\"broker\"" +
1:                 "    brokerName=\"%HOST%\" persistent=\"false\" advisorySupport=\"false\" useJmx=\"false\" >" +
1:                 "   <destinationPolicy>" +
1:                 "    <policyMap>" +
1:                 "     <policyEntries>" +
0:                 "      <policyEntry optimizedDispatch=\"true\">"+
1:                 "       <destination>"+
1:                 "        <tempQueue physicalName=\"" + replyQWildcard.getPhysicalName() + "\"/>" +
1:                 "       </destination>" +
1:                 "      </policyEntry>" +
1:                 "     </policyEntries>" +
1:                 "    </policyMap>" +
1:                 "   </destinationPolicy>" +
1:                 "   <networkConnectors>" +
1:                 "    <networkConnector uri=\"multicast://default\">" +
1:                 "     <staticallyIncludedDestinations>" +
1:                 "      <queue physicalName=\"" + sendQ.getPhysicalName() + "\"/>" +
1:                 "      <tempQueue physicalName=\"" + replyQWildcard.getPhysicalName() + "\"/>" +
1:                 "     </staticallyIncludedDestinations>" +
1:                 "    </networkConnector>" +
1:                 "   </networkConnectors>" +
1:                 "   <transportConnectors>" +
1:                 "     <transportConnector uri=\"tcp://0.0.0.0:0\" discoveryUri=\"multicast://default\" />" +
1:                 "   </transportConnectors>" +
1:                 "  </broker>" +
1:                 "</beans>");
1:         final String localProtocolScheme = "inline";
1:         URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() {
1:             @Override
1:             public URLStreamHandler createURLStreamHandler(String protocol) {
1:                 if (localProtocolScheme.equalsIgnoreCase(protocol)) {
1:                     return new URLStreamHandler() {
1:                         @Override
1:                         protected URLConnection openConnection(URL u) throws IOException {
1:                             return new URLConnection(u) {
1:                                 @Override
1:                                 public void connect() throws IOException {
1:                                 }
1:                                 @Override
1:                                 public InputStream getInputStream() throws IOException {
1:                                     return new ByteArrayInputStream(xmlConfigString.replace("%HOST%", url.getFile()).getBytes("UTF-8"));
1:                                 }
1:                             };
1:                         }
1:                     };
1:                 }
1:                 return null;
1:             }
1:         });
1:         a = new XBeanBrokerFactory().createBroker(new URI("xbean:" + localProtocolScheme + ":A"));
1:         b = new XBeanBrokerFactory().createBroker(new URI("xbean:" + localProtocolScheme + ":B"));
1: 
1:         doTestNonAdvisoryNetworkRequestReply();
1:     }
1: 
1:     public void testNonAdvisoryNetworkRequestReply() throws Exception {
1:         createBridgeAndStartBrokers();
1:         doTestNonAdvisoryNetworkRequestReply();
1:     }
1: 
1:     public void doTestNonAdvisoryNetworkRequestReply() throws Exception {
1: 
1:         waitForBridgeFormation(a, 1, 0);
1:         waitForBridgeFormation(b, 1, 0);
1: 
1:         ActiveMQConnectionFactory sendFactory = createConnectionFactory(a);
1:         ActiveMQConnection sendConnection = createConnection(sendFactory);
1: 
1:         ActiveMQSession sendSession = (ActiveMQSession)sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = sendSession.createProducer(sendQ);
1:         ActiveMQTempQueue realReplyQ = (ActiveMQTempQueue) sendSession.createTemporaryQueue();
1:         TextMessage message = sendSession.createTextMessage("1");
1:         message.setJMSReplyTo(realReplyQ);
1:         producer.send(message);
1: 
1:         // responder
1:         ActiveMQConnectionFactory consumerFactory = createConnectionFactory(b);
1:         ActiveMQConnection consumerConnection = createConnection(consumerFactory);
1: 
1:         ActiveMQSession consumerSession = (ActiveMQSession)consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(sendQ);
1:         TextMessage received = (TextMessage) consumer.receive(receiveTimeout);
0:         assertNotNull(received);
1: 
1:         LOG.info("got request, sending reply");
1: 
1:         MessageProducer consumerProducer = consumerSession.createProducer(received.getJMSReplyTo());
1:         consumerProducer.send(consumerSession.createTextMessage("got " + received.getText()));
1:         // temp dest on reply broker tied to this connection, setOptimizedDispatch=true ensures
1:         // message gets delivered before destination is removed
1:         consumerConnection.close();
1: 
1:         // reply consumer
1:         MessageConsumer replyConsumer = sendSession.createConsumer(realReplyQ);
1:         TextMessage reply = (TextMessage) replyConsumer.receive(receiveTimeout);
1:         assertNotNull("expected reply message", reply);
1:         assertEquals("text is as expected", "got 1", reply.getText());
1:         sendConnection.close();
1: 
0:         verifyAllTempQueuesAreGone();
1:     }
1: 
0:     private void verifyAllTempQueuesAreGone() throws Exception {
0:         for (BrokerService brokerService : new BrokerService[]{a, b}) {
0:             RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
0:             Map temps = regionBroker.getTempTopicRegion().getDestinationMap();
0:             assertTrue("no temp topics on " + brokerService + ", " + temps, temps.isEmpty());
0:             temps = regionBroker.getTempQueueRegion().getDestinationMap();
0:             assertTrue("no temp queues on " + brokerService + ", " + temps, temps.isEmpty());
1:         }
1:     }
1: 
1:     private ActiveMQConnection createConnection(ActiveMQConnectionFactory factory) throws Exception {
1:         ActiveMQConnection c =(ActiveMQConnection) factory.createConnection();
1:         c.start();
1:         return c;
1:     }
1: 
1:     private ActiveMQConnectionFactory createConnectionFactory(BrokerService brokerService) throws Exception {
1:         String target = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:         ActiveMQConnectionFactory factory =
1:                 new ActiveMQConnectionFactory(target);
1:         factory.setWatchTopicAdvisories(false);
1:         factory.setConnectionIDPrefix(connectionIdMarker + brokerService.getBrokerName());
1:         return factory;
1:     }
1: 
1:     public void createBridgeAndStartBrokers() throws Exception {
1:         a = configureBroker("A");
1:         b = configureBroker("B");
1:         bridge(a, b);
1:         bridge(b, a);
0:         a.start();
0:         b.start();
1:     }
1: 
0:     public void tearDown() throws Exception {
0:         stop(a);
0:         stop(b);
1:     }
1: 
0:     private void stop(BrokerService broker) throws Exception {
0:         if (broker != null) {
0:             broker.stop();
1:         }
1:     }
1: 
0:     private void bridge(BrokerService from, BrokerService to) throws Exception {
0:         TransportConnector toConnector = to.addConnector("tcp://localhost:0");
1:         NetworkConnector bridge =
1:                 from.addNetworkConnector("static://" + toConnector.getPublishableConnectString());
1:         bridge.addStaticallyIncludedDestination(sendQ);
1:         bridge.addStaticallyIncludedDestination(replyQWildcard);
1:     }
1: 
1:     private BrokerService configureBroker(String brokerName) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName(brokerName);
1:         broker.setAdvisorySupport(false);
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1: 
1:         PolicyMap map = new PolicyMap();
1:         PolicyEntry tempReplyQPolicy = new PolicyEntry();
1:         tempReplyQPolicy.setOptimizedDispatch(true);
1:         map.put(replyQWildcard, tempReplyQPolicy);
1:         broker.setDestinationPolicy(map);
1:         return broker;
1:     }
1: }
============================================================================