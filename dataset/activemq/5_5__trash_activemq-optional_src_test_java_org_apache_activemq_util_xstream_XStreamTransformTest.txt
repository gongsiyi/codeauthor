1:86faaef: /**
1:86faaef:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:86faaef:  * contributor license agreements.  See the NOTICE file distributed with
1:86faaef:  * this work for additional information regarding copyright ownership.
1:86faaef:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:86faaef:  * (the "License"); you may not use this file except in compliance with
1:86faaef:  * the License.  You may obtain a copy of the License at
2:86faaef:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:86faaef:  *
1:86faaef:  * Unless required by applicable law or agreed to in writing, software
1:86faaef:  * distributed under the License is distributed on an "AS IS" BASIS,
1:86faaef:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86faaef:  * See the License for the specific language governing permissions and
1:86faaef:  * limitations under the License.
1:86faaef:  */
1:86faaef: package org.apache.activemq.util.xstream;
10:86faaef: 
1:ebfe94e: import javax.jms.Connection;
1:ebfe94e: import javax.jms.Destination;
1:ebfe94e: import javax.jms.Message;
1:ebfe94e: import javax.jms.MessageConsumer;
1:ebfe94e: import javax.jms.MessageProducer;
1:ebfe94e: import javax.jms.ObjectMessage;
1:ebfe94e: import javax.jms.Session;
1:ebfe94e: import javax.jms.TextMessage;
1:ebfe94e: 
1:3b4aadc: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1:86faaef: import junit.framework.TestCase;
1:ebfe94e: import org.apache.activemq.ActiveMQConnectionFactory;
1:ebfe94e: import org.apache.activemq.ActiveMQMessageConsumer;
1:8242a3f: 
1:3b4aadc: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.ADAPTIVE;
1:3b4aadc: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.OBJECT;
1:3b4aadc: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.XML;
1:d2fe512: 
1:86faaef: /**
1:0bbc0ac:  * 
1:86faaef:  */
1:86faaef: public class XStreamTransformTest extends TestCase {
1:be4d64b:     protected ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
1:86faaef:     protected Connection connection;
1:86faaef:     protected long timeout = 5000;
1:86faaef: 
1:86faaef:     public void testSendObjectMessageReceiveAsTextMessageAndObjectMessage() throws Exception {
1:7055fb9:         org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:7055fb9:         transformer.setTransformType(XML);
1:7055fb9:         connectionFactory.setTransformer(transformer);
1:34a8028:         connection = connectionFactory.createConnection();
1:34a8028:         connection.start();
1:34a8028: 
1:86faaef:         // lets create the consumers
1:86faaef:         Session objectSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:86faaef:         Destination destination = objectSession.createTopic(getClass().getName());
1:86faaef:         MessageConsumer objectConsumer = objectSession.createConsumer(destination);
1:86faaef: 
1:86faaef:         Session textSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:86faaef:         MessageConsumer textConsumer = textSession.createConsumer(destination);
1:540dd5c:         // lets clear the transformer on this consumer so we see the message as
1:540dd5c:         // it really is
1:540dd5c:         ((ActiveMQMessageConsumer)textConsumer).setTransformer(null);
1:86faaef: 
1:86faaef:         // send a message
1:86faaef:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:86faaef:         MessageProducer producer = producerSession.createProducer(destination);
1:86faaef: 
1:86faaef:         ObjectMessage request = producerSession.createObjectMessage(new SamplePojo("James", "London"));
1:86faaef:         producer.send(request);
1:86faaef: 
1:86faaef:         // lets consume it as an object message
1:86faaef:         Message message = objectConsumer.receive(timeout);
1:86faaef:         assertNotNull("Should have received a message!", message);
1:86faaef:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:540dd5c:         ObjectMessage objectMessage = (ObjectMessage)message;
1:86faaef:         Object object = objectMessage.getObject();
1:86faaef:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:540dd5c:         SamplePojo body = (SamplePojo)object;
1:86faaef:         assertEquals("name", "James", body.getName());
1:86faaef:         assertEquals("city", "London", body.getCity());
1:86faaef: 
1:86faaef:         // lets consume it as a text message
1:86faaef:         message = textConsumer.receive(timeout);
1:86faaef:         assertNotNull("Should have received a message!", message);
1:86faaef:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:540dd5c:         TextMessage textMessage = (TextMessage)message;
1:86faaef:         String text = textMessage.getText();
1:34a8028:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:86faaef:         System.out.println("Received XML...");
1:86faaef:         System.out.println(text);
2:86faaef:     }
1:8242a3f: 
1:34a8028:     public void testSendTextMessageReceiveAsObjectMessageAndTextMessage() throws Exception {
1:7055fb9:         org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:7055fb9:         transformer.setTransformType(OBJECT);
1:7055fb9:         connectionFactory.setTransformer(transformer);
1:86faaef:         connection = connectionFactory.createConnection();
1:86faaef:         connection.start();
1:8242a3f: 
1:34a8028:         // lets create the consumers
1:34a8028:         Session textSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:34a8028:         Destination destination = textSession.createTopic(getClass().getName());
1:34a8028:         MessageConsumer textConsumer = textSession.createConsumer(destination);
1:34a8028: 
1:34a8028:         Session objectSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:34a8028:         MessageConsumer objectConsumer = objectSession.createConsumer(destination);
1:540dd5c:         // lets clear the transformer on this consumer so we see the message as
1:540dd5c:         // it really is
1:540dd5c:         ((ActiveMQMessageConsumer)objectConsumer).setTransformer(null);
1:34a8028: 
1:34a8028:         // send a message
1:34a8028:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:34a8028:         MessageProducer producer = producerSession.createProducer(destination);
1:34a8028: 
1:540dd5c:         String xmlText = "<org.apache.activemq.util.xstream.SamplePojo>" 
1:540dd5c:             + "<name>James</name>" 
1:540dd5c:             + "<city>London</city>" 
1:540dd5c:             + "</org.apache.activemq.util.xstream.SamplePojo>";
1:34a8028: 
1:34a8028:         TextMessage request = producerSession.createTextMessage(xmlText);
1:34a8028:         producer.send(request);
1:34a8028: 
1:34a8028:         Message message;
1:34a8028:         // lets consume it as a text message
1:34a8028:         message = textConsumer.receive(timeout);
1:34a8028:         assertNotNull("Should have received a message!", message);
1:34a8028:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:540dd5c:         TextMessage textMessage = (TextMessage)message;
1:34a8028:         String text = textMessage.getText();
1:d2fe512:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:34a8028: 
1:34a8028:         // lets consume it as an object message
1:34a8028:         message = objectConsumer.receive(timeout);
1:34a8028:         assertNotNull("Should have received a message!", message);
1:34a8028:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:540dd5c:         ObjectMessage objectMessage = (ObjectMessage)message;
1:34a8028:         Object object = objectMessage.getObject();
1:34a8028:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:540dd5c:         SamplePojo body = (SamplePojo)object;
1:34a8028:         assertEquals("name", "James", body.getName());
1:34a8028:         assertEquals("city", "London", body.getCity());
1:34a8028: 
1:34a8028:     }
1:34a8028: 
1:d2fe512:     public void testAdaptiveTransform() throws Exception {
1:7055fb9:         org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:7055fb9:         transformer.setTransformType(ADAPTIVE);
1:7055fb9:         connectionFactory.setTransformer(transformer);
1:d2fe512:         connection = connectionFactory.createConnection();
1:d2fe512:         connection.start();
1:d2fe512: 
1:d2fe512:         // lets create the consumers
1:d2fe512:         Session adaptiveSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d2fe512:         Destination destination = adaptiveSession.createTopic(getClass().getName());
1:d2fe512:         MessageConsumer adaptiveConsumer = adaptiveSession.createConsumer(destination);
1:8242a3f: 
1:d2fe512:         Session origSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d2fe512:         MessageConsumer origConsumer = origSession.createConsumer(destination);
1:540dd5c:         // lets clear the transformer on this consumer so we see the message as
1:540dd5c:         // it really is
1:540dd5c:         ((ActiveMQMessageConsumer)origConsumer).setTransformer(null);
1:8242a3f: 
1:d2fe512:         // Create producer
1:d2fe512:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d2fe512:         MessageProducer producer = producerSession.createProducer(destination);
1:d2fe512: 
1:d2fe512:         Message message;
1:d2fe512:         ObjectMessage objectMessage;
1:d2fe512:         TextMessage textMessage;
1:d2fe512:         SamplePojo body;
1:d2fe512:         Object object;
1:d2fe512:         String text;
1:d2fe512: 
1:d2fe512:         // Send a text message
1:540dd5c:         String xmlText = "<org.apache.activemq.util.xstream.SamplePojo>" 
1:540dd5c:             + "<name>James</name>" 
1:540dd5c:             + "<city>London</city>" 
1:540dd5c:             + "</org.apache.activemq.util.xstream.SamplePojo>";
1:d2fe512: 
1:d2fe512:         TextMessage txtRequest = producerSession.createTextMessage(xmlText);
1:d2fe512:         producer.send(txtRequest);
1:d2fe512: 
1:d2fe512:         // lets consume it as a text message
1:8242a3f:         message = adaptiveConsumer.receive(timeout);
1:d2fe512:         assertNotNull("Should have received a message!", message);
1:d2fe512:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:540dd5c:         textMessage = (TextMessage)message;
1:8242a3f:         text = textMessage.getText();
1:8242a3f:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:d2fe512: 
1:d2fe512:         // lets consume it as an object message
1:8242a3f:         message = origConsumer.receive(timeout);
1:d2fe512:         assertNotNull("Should have received a message!", message);
1:d2fe512:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:540dd5c:         objectMessage = (ObjectMessage)message;
1:d2fe512:         object = objectMessage.getObject();
1:8242a3f:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:540dd5c:         body = (SamplePojo)object;
1:d2fe512:         assertEquals("name", "James", body.getName());
1:8242a3f:         assertEquals("city", "London", body.getCity());
1:d2fe512: 
1:d2fe512:         // Send object message
1:d2fe512:         ObjectMessage objRequest = producerSession.createObjectMessage(new SamplePojo("James", "London"));
1:d2fe512:         producer.send(objRequest);
1:d2fe512: 
1:d2fe512:         // lets consume it as an object message
1:d2fe512:         message = adaptiveConsumer.receive(timeout);
1:8242a3f:         assertNotNull("Should have received a message!", message);
1:d2fe512:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:540dd5c:         objectMessage = (ObjectMessage)message;
1:d2fe512:         object = objectMessage.getObject();
1:d2fe512:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:540dd5c:         body = (SamplePojo)object;
1:d2fe512:         assertEquals("name", "James", body.getName());
1:d2fe512:         assertEquals("city", "London", body.getCity());
1:d2fe512: 
1:d2fe512:         // lets consume it as a text message
1:d2fe512:         message = origConsumer.receive(timeout);
1:d2fe512:         assertNotNull("Should have received a message!", message);
1:d2fe512:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:540dd5c:         textMessage = (TextMessage)message;
1:d2fe512:         text = textMessage.getText();
1:d2fe512:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:d2fe512:         System.out.println("Received XML...");
1:d2fe512:         System.out.println(text);
1:d2fe512: 
1:d2fe512:     }
1:d2fe512:     
1:8242a3f:     public void testStreamDriverTransform() throws Exception {
1:7055fb9:     	org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:7055fb9:         transformer.setTransformType(ADAPTIVE);
1:8242a3f:     	transformer.setStreamDriver(new JettisonMappedXmlDriver());
1:8242a3f:         connectionFactory.setTransformer(transformer);
1:8242a3f:         connection = connectionFactory.createConnection();
1:8242a3f:         connection.start();
1:8242a3f: 
1:8242a3f:         // lets create the consumers
1:8242a3f:         Session adaptiveSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8242a3f:         Destination destination = adaptiveSession.createTopic(getClass().getName());
1:8242a3f:         MessageConsumer adaptiveConsumer = adaptiveSession.createConsumer(destination);
1:8242a3f: 
1:8242a3f:         Session origSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8242a3f:         MessageConsumer origConsumer = origSession.createConsumer(destination);
1:8242a3f:         // lets clear the transformer on this consumer so we see the message as
1:8242a3f:         // it really is
1:8242a3f:         ((ActiveMQMessageConsumer)origConsumer).setTransformer(null);
1:8242a3f: 
1:8242a3f:         // Create producer
1:8242a3f:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8242a3f:         MessageProducer producer = producerSession.createProducer(destination);
1:8242a3f: 
1:8242a3f:         Message message;
1:8242a3f:         ObjectMessage objectMessage;
1:8242a3f:         TextMessage textMessage;
1:8242a3f:         SamplePojo body;
1:8242a3f:         Object object;
1:8242a3f:         String text;
1:d2fe512: 
1:8242a3f:         // Send a text message
1:8242a3f:         String xmlText = "{\"org.apache.activemq.util.xstream.SamplePojo\":{\"name\":\"James\",\"city\":\"London\"}}";
1:8242a3f: 
1:8242a3f:         TextMessage txtRequest = producerSession.createTextMessage(xmlText);
1:8242a3f:         producer.send(txtRequest);
1:8242a3f: 
1:8242a3f:         // lets consume it as a text message
1:8242a3f:         message = adaptiveConsumer.receive(timeout);
1:8242a3f:         assertNotNull("Should have received a message!", message);
1:8242a3f:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:8242a3f:         textMessage = (TextMessage)message;
1:8242a3f:         text = textMessage.getText();
1:8242a3f:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:8242a3f: 
1:8242a3f:         // lets consume it as an object message
1:8242a3f:         message = origConsumer.receive(timeout);
1:8242a3f:         assertNotNull("Should have received a message!", message);
1:8242a3f:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:8242a3f:         objectMessage = (ObjectMessage)message;
1:8242a3f:         object = objectMessage.getObject();
1:8242a3f:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:8242a3f:         body = (SamplePojo)object;
1:8242a3f:         assertEquals("name", "James", body.getName());
1:8242a3f:         assertEquals("city", "London", body.getCity());
1:8242a3f:         
1:8242a3f:         // Send object message
1:8242a3f:         ObjectMessage objRequest = producerSession.createObjectMessage(new SamplePojo("James", "London"));
1:8242a3f:         producer.send(objRequest);
1:d2fe512: 
1:8242a3f:         // lets consume it as an object message
1:d2fe512:         message = adaptiveConsumer.receive(timeout);
1:8242a3f:         assertNotNull("Should have received a message!", message);
1:8242a3f:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:8242a3f:         objectMessage = (ObjectMessage)message;
1:8242a3f:         object = objectMessage.getObject();
1:d2fe512:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:8242a3f:         body = (SamplePojo)object;
1:8242a3f:         assertEquals("name", "James", body.getName());
1:d2fe512:         assertEquals("city", "London", body.getCity());
1:d2fe512: 
1:8242a3f:         // lets consume it as a text message
1:d2fe512:         message = origConsumer.receive(timeout);
1:d2fe512:         assertNotNull("Should have received a message!", message);
1:8242a3f:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:8242a3f:         textMessage = (TextMessage)message;
1:d2fe512:         text = textMessage.getText();
1:86faaef:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:8242a3f:         System.out.println("Received JSON...");
1:8242a3f:         System.out.println(text);
1:8242a3f: 
1:8242a3f:     }
1:86faaef: 
1:86faaef:     protected void tearDown() throws Exception {
1:86faaef:         if (connection != null) {
1:86faaef:             connection.close();
1:86faaef:         }
1:86faaef:     }
1:86faaef: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:         // lets clear the transformer on this consumer so we see the message as
1:         // it really is
1:         ((ActiveMQMessageConsumer)textConsumer).setTransformer(null);
/////////////////////////////////////////////////////////////////////////
1:         ObjectMessage objectMessage = (ObjectMessage)message;
1:         SamplePojo body = (SamplePojo)object;
1:         TextMessage textMessage = (TextMessage)message;
/////////////////////////////////////////////////////////////////////////
1:         // lets clear the transformer on this consumer so we see the message as
1:         // it really is
1:         ((ActiveMQMessageConsumer)objectConsumer).setTransformer(null);
1:         String xmlText = "<org.apache.activemq.util.xstream.SamplePojo>" 
1:             + "<name>James</name>" 
1:             + "<city>London</city>" 
1:             + "</org.apache.activemq.util.xstream.SamplePojo>";
/////////////////////////////////////////////////////////////////////////
1:         TextMessage textMessage = (TextMessage)message;
/////////////////////////////////////////////////////////////////////////
1:         ObjectMessage objectMessage = (ObjectMessage)message;
1:         SamplePojo body = (SamplePojo)object;
/////////////////////////////////////////////////////////////////////////
1:         // lets clear the transformer on this consumer so we see the message as
1:         // it really is
1:         ((ActiveMQMessageConsumer)origConsumer).setTransformer(null);
/////////////////////////////////////////////////////////////////////////
1:         String xmlText = "<org.apache.activemq.util.xstream.SamplePojo>" 
1:             + "<name>James</name>" 
1:             + "<city>London</city>" 
1:             + "</org.apache.activemq.util.xstream.SamplePojo>";
/////////////////////////////////////////////////////////////////////////
1:         textMessage = (TextMessage)message;
/////////////////////////////////////////////////////////////////////////
1:         objectMessage = (ObjectMessage)message;
1:         body = (SamplePojo)object;
/////////////////////////////////////////////////////////////////////////
1:         objectMessage = (ObjectMessage)message;
1:         body = (SamplePojo)object;
1:         textMessage = (TextMessage)message;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ebfe94e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageConsumer;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.ADAPTIVE;
1: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.OBJECT;
1: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.XML;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7055fb9
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.*;
/////////////////////////////////////////////////////////////////////////
1:         org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:         transformer.setTransformType(XML);
1:         connectionFactory.setTransformer(transformer);
/////////////////////////////////////////////////////////////////////////
1:         org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:         transformer.setTransformType(OBJECT);
1:         connectionFactory.setTransformer(transformer);
/////////////////////////////////////////////////////////////////////////
1:         org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:         transformer.setTransformType(ADAPTIVE);
1:         connectionFactory.setTransformer(transformer);
/////////////////////////////////////////////////////////////////////////
1:     	org.apache.activemq.util.oxm.XStreamMessageTransformer transformer = new org.apache.activemq.util.oxm.XStreamMessageTransformer();
1:         transformer.setTransformType(ADAPTIVE);
commit:be4d64b
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
commit:8242a3f
/////////////////////////////////////////////////////////////////////////
0: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testStreamDriverTransform() throws Exception {
0:     	XStreamMessageTransformer transformer = new XStreamMessageTransformer(ADAPTIVE);
1:     	transformer.setStreamDriver(new JettisonMappedXmlDriver());
1:         connectionFactory.setTransformer(transformer);
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         // lets create the consumers
1:         Session adaptiveSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = adaptiveSession.createTopic(getClass().getName());
1:         MessageConsumer adaptiveConsumer = adaptiveSession.createConsumer(destination);
1: 
1:         Session origSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer origConsumer = origSession.createConsumer(destination);
1:         // lets clear the transformer on this consumer so we see the message as
1:         // it really is
1:         ((ActiveMQMessageConsumer)origConsumer).setTransformer(null);
1: 
1:         // Create producer
1:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1: 
1:         Message message;
1:         ObjectMessage objectMessage;
1:         TextMessage textMessage;
1:         SamplePojo body;
1:         Object object;
1:         String text;
1: 
1:         // Send a text message
1:         String xmlText = "{\"org.apache.activemq.util.xstream.SamplePojo\":{\"name\":\"James\",\"city\":\"London\"}}";
1: 
1:         TextMessage txtRequest = producerSession.createTextMessage(xmlText);
1:         producer.send(txtRequest);
1: 
1:         // lets consume it as a text message
1:         message = adaptiveConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:         textMessage = (TextMessage)message;
1:         text = textMessage.getText();
1:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1: 
1:         // lets consume it as an object message
1:         message = origConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:         objectMessage = (ObjectMessage)message;
1:         object = objectMessage.getObject();
1:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:         body = (SamplePojo)object;
1:         assertEquals("name", "James", body.getName());
1:         assertEquals("city", "London", body.getCity());
1:         
1:         // Send object message
1:         ObjectMessage objRequest = producerSession.createObjectMessage(new SamplePojo("James", "London"));
1:         producer.send(objRequest);
1: 
1:         // lets consume it as an object message
1:         message = adaptiveConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
1:         objectMessage = (ObjectMessage)message;
1:         object = objectMessage.getObject();
1:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
1:         body = (SamplePojo)object;
1:         assertEquals("name", "James", body.getName());
1:         assertEquals("city", "London", body.getCity());
1: 
1:         // lets consume it as a text message
1:         message = origConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
1:         textMessage = (TextMessage)message;
1:         text = textMessage.getText();
1:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:         System.out.println("Received JSON...");
1:         System.out.println(text);
1: 
1:     }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:d2fe512
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.util.xstream.XStreamMessageTransformer.MessageTransform.*;
1: 
/////////////////////////////////////////////////////////////////////////
0:         connectionFactory.setTransformer(new XStreamMessageTransformer(XML));
/////////////////////////////////////////////////////////////////////////
0:         connectionFactory.setTransformer(new XStreamMessageTransformer(OBJECT));
/////////////////////////////////////////////////////////////////////////
1:     public void testAdaptiveTransform() throws Exception {
0:         connectionFactory.setTransformer(new XStreamMessageTransformer(ADAPTIVE));
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         // lets create the consumers
1:         Session adaptiveSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = adaptiveSession.createTopic(getClass().getName());
1:         MessageConsumer adaptiveConsumer = adaptiveSession.createConsumer(destination);
1: 
1:         Session origSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer origConsumer = origSession.createConsumer(destination);
0:         // lets clear the transformer on this consumer so we see the message as it really is
0:         ((ActiveMQMessageConsumer) origConsumer).setTransformer(null);
1: 
1:         // Create producer
1:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1: 
1:         Message message;
1:         ObjectMessage objectMessage;
1:         TextMessage textMessage;
1:         SamplePojo body;
1:         Object object;
1:         String text;
1: 
1:         // Send a text message
0:         String xmlText =
0:                 "<org.apache.activemq.util.xstream.SamplePojo>" +
0:                 "<name>James</name>" +
0:                 "<city>London</city>" +
0:                 "</org.apache.activemq.util.xstream.SamplePojo>";
1: 
1:         TextMessage txtRequest = producerSession.createTextMessage(xmlText);
1:         producer.send(txtRequest);
1: 
1:         // lets consume it as a text message
1:         message = adaptiveConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
0:         textMessage = (TextMessage) message;
1:         text = textMessage.getText();
1:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1: 
1:         // lets consume it as an object message
1:         message = origConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
0:         objectMessage = (ObjectMessage) message;
1:         object = objectMessage.getObject();
1:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
0:         body = (SamplePojo) object;
1:         assertEquals("name", "James", body.getName());
1:         assertEquals("city", "London", body.getCity());
1: 
1:         // Send object message
1:         ObjectMessage objRequest = producerSession.createObjectMessage(new SamplePojo("James", "London"));
1:         producer.send(objRequest);
1: 
1:         // lets consume it as an object message
1:         message = adaptiveConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
0:         objectMessage = (ObjectMessage) message;
1:         object = objectMessage.getObject();
1:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
0:         body = (SamplePojo) object;
1:         assertEquals("name", "James", body.getName());
1:         assertEquals("city", "London", body.getCity());
1: 
1: 
1:         // lets consume it as a text message
1:         message = origConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
0:         textMessage = (TextMessage) message;
1:         text = textMessage.getText();
1:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:         System.out.println("Received XML...");
1:         System.out.println(text);
1: 
1:     }
1: 
commit:34a8028
/////////////////////////////////////////////////////////////////////////
0:         connectionFactory.setTransformer(new XStreamMessageTransformer());
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testSendTextMessageReceiveAsObjectMessageAndTextMessage() throws Exception {
0:         // Set reverse to true
0:         connectionFactory.setTransformer(new XStreamMessageTransformer(true));
1:         // lets create the consumers
1:         Session textSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = textSession.createTopic(getClass().getName());
1:         MessageConsumer textConsumer = textSession.createConsumer(destination);
1: 
1:         Session objectSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer objectConsumer = objectSession.createConsumer(destination);
0:         // lets clear the transformer on this consumer so we see the message as it really is
0:         ((ActiveMQMessageConsumer) objectConsumer).setTransformer(null);
1: 
1: 
1:         // send a message
1:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1: 
0:         String xmlText =
0:                 "<org.apache.activemq.util.xstream.SamplePojo>" +
0:                 "<name>James</name>" +
0:                 "<city>London</city>" +
0:                 "</org.apache.activemq.util.xstream.SamplePojo>";
1: 
1:         TextMessage request = producerSession.createTextMessage(xmlText);
1:         producer.send(request);
1: 
1:         Message message;
1:         // lets consume it as a text message
1:         message = textConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
0:         TextMessage textMessage = (TextMessage) message;
1:         String text = textMessage.getText();
1:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1: 
1:         // lets consume it as an object message
1:         message = objectConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
0:         ObjectMessage objectMessage = (ObjectMessage) message;
1:         Object object = objectMessage.getObject();
1:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
0:         SamplePojo body = (SamplePojo) object;
1:         assertEquals("name", "James", body.getName());
1:         assertEquals("city", "London", body.getCity());
1: 
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:86faaef
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util.xstream;
1: 
1: import junit.framework.TestCase;
1: 
0: import javax.jms.*;
1: 
0: import org.apache.activemq.*;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class XStreamTransformTest extends TestCase {
0:     protected ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:     protected Connection connection;
1:     protected long timeout = 5000;
1: 
1:     public void testSendObjectMessageReceiveAsTextMessageAndObjectMessage() throws Exception {
1:         // lets create the consumers
1:         Session objectSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = objectSession.createTopic(getClass().getName());
1:         MessageConsumer objectConsumer = objectSession.createConsumer(destination);
1: 
1:         Session textSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer textConsumer = textSession.createConsumer(destination);
0:         // lets clear the transformer on this consumer so we see the message as it really is
0:         ((ActiveMQMessageConsumer) textConsumer).setTransformer(null);
1: 
1: 
1:         // send a message
1:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1: 
1:         ObjectMessage request = producerSession.createObjectMessage(new SamplePojo("James", "London"));
1:         producer.send(request);
1: 
1: 
1:         // lets consume it as an object message
1:         Message message = objectConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be an ObjectMessage but was: " + message, message instanceof ObjectMessage);
0:         ObjectMessage objectMessage = (ObjectMessage) message;
1:         Object object = objectMessage.getObject();
1:         assertTrue("object payload of wrong type: " + object, object instanceof SamplePojo);
0:         SamplePojo body = (SamplePojo) object;
1:         assertEquals("name", "James", body.getName());
1:         assertEquals("city", "London", body.getCity());
1: 
1: 
1:         // lets consume it as a text message
1:         message = textConsumer.receive(timeout);
1:         assertNotNull("Should have received a message!", message);
1:         assertTrue("Should be a TextMessage but was: " + message, message instanceof TextMessage);
0:         TextMessage textMessage = (TextMessage) message;
1:         String text = textMessage.getText();
1:         assertTrue("Text should be non-empty!", text != null && text.length() > 0);
1:         System.out.println("Received XML...");
1:         System.out.println(text);
1:     }
1: 
1: 
0:     protected void setUp() throws Exception {
0:         connectionFactory.setTransformer(new XStreamMessageTransformer());
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:     }
1: 
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:     }
1: }
============================================================================