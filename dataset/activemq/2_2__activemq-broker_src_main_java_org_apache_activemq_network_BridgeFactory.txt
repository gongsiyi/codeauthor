1:e5de25f: /**
1:e5de25f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e5de25f:  * contributor license agreements.  See the NOTICE file distributed with
1:e5de25f:  * this work for additional information regarding copyright ownership.
1:e5de25f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e5de25f:  * (the "License"); you may not use this file except in compliance with
1:e5de25f:  * the License.  You may obtain a copy of the License at
1:e5de25f:  *
1:e5de25f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e5de25f:  *
1:e5de25f:  * Unless required by applicable law or agreed to in writing, software
1:e5de25f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e5de25f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e5de25f:  * See the License for the specific language governing permissions and
1:e5de25f:  * limitations under the License.
1:e5de25f:  */
1:a8a032a: package org.apache.activemq.network;
1:a8a032a: 
1:a8a032a: import org.apache.activemq.transport.Transport;
1:a8a032a: 
1:a8a032a: /**
1:a8a032a:  * Encapsulation of bridge creation logic.
1:a8a032a:  *
1:a8a032a:  * This SPI interface is intended to customize or decorate existing bridge implementations.
1:a8a032a:  */
1:a8a032a: public interface BridgeFactory {
1:a8a032a: 
1:a8a032a:     /**
1:a8a032a:      * Create a network bridge between two specified transports.
1:a8a032a:      *
1:a8a032a:      * @param configuration Bridge configuration.
1:a8a032a:      * @param localTransport Local side of bridge.
1:a8a032a:      * @param remoteTransport Remote side of bridge.
1:a8a032a:      * @param listener Bridge listener.
1:a8a032a:      * @return the NetworkBridge
1:a8a032a:      */
1:a8a032a:     DemandForwardingBridge createNetworkBridge(NetworkBridgeConfiguration configuration, Transport localTransport, Transport remoteTransport, final NetworkBridgeListener listener);
1:a8a032a: 
1:a8a032a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e5de25f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:?ukasz Dywicki
-------------------------------------------------------------------------------
commit:a8a032a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.transport.Transport;
1: 
1: /**
1:  * Encapsulation of bridge creation logic.
1:  *
1:  * This SPI interface is intended to customize or decorate existing bridge implementations.
1:  */
1: public interface BridgeFactory {
1: 
1:     /**
1:      * Create a network bridge between two specified transports.
1:      *
1:      * @param configuration Bridge configuration.
1:      * @param localTransport Local side of bridge.
1:      * @param remoteTransport Remote side of bridge.
1:      * @param listener Bridge listener.
1:      * @return the NetworkBridge
1:      */
1:     DemandForwardingBridge createNetworkBridge(NetworkBridgeConfiguration configuration, Transport localTransport, Transport remoteTransport, final NetworkBridgeListener listener);
1: 
1: }
============================================================================