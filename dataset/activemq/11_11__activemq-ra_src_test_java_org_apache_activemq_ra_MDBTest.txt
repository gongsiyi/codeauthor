1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
34:40a7d3b: 
1:ba1bd26: import static org.junit.Assert.assertEquals;
1:ba1bd26: import static org.junit.Assert.assertFalse;
1:ba1bd26: import static org.junit.Assert.assertNotNull;
1:ba1bd26: import static org.junit.Assert.assertTrue;
1:ba1bd26: import static org.junit.Assert.fail;
1:ba1bd26: 
1:40a7d3b: import java.io.ByteArrayOutputStream;
1:40a7d3b: import java.io.DataOutputStream;
1:40a7d3b: import java.io.IOException;
1:40a7d3b: import java.lang.reflect.Method;
1:91d4828: import java.util.ArrayList;
1:91d4828: import java.util.List;
1:40a7d3b: import java.util.Timer;
1:540dd5c: import java.util.concurrent.CountDownLatch;
1:540dd5c: import java.util.concurrent.TimeUnit;
1:20832f1: import java.util.concurrent.atomic.AtomicBoolean;
1:91d4828: import java.util.concurrent.atomic.AtomicInteger;
1:20832f1: import java.util.concurrent.atomic.AtomicLong;
1:757a2f1: import java.util.concurrent.atomic.AtomicReference;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Connection;
1:50a98e3: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:50a98e3: import javax.jms.MessageConsumer;
1:40a7d3b: import javax.jms.MessageListener;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.Queue;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.BootstrapContext;
1:40a7d3b: import javax.resource.spi.UnavailableException;
1:40a7d3b: import javax.resource.spi.XATerminator;
1:40a7d3b: import javax.resource.spi.endpoint.MessageEndpoint;
1:40a7d3b: import javax.resource.spi.endpoint.MessageEndpointFactory;
1:40a7d3b: import javax.resource.spi.work.ExecutionContext;
1:40a7d3b: import javax.resource.spi.work.Work;
1:40a7d3b: import javax.resource.spi.work.WorkException;
1:40a7d3b: import javax.resource.spi.work.WorkListener;
1:40a7d3b: import javax.resource.spi.work.WorkManager;
1:40a7d3b: import javax.transaction.xa.XAResource;
1:40a7d3b: import javax.transaction.xa.Xid;
1:40a7d3b: 
1:fd4bb60: import org.apache.activemq.ActiveMQConnectionFactory;
1:ee2069f: import org.apache.activemq.advisory.AdvisorySupport;
1:757a2f1: import org.apache.activemq.broker.BrokerService;
1:757a2f1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:757a2f1: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ee2069f: import org.apache.activemq.command.ActiveMQMessage;
1:fd4bb60: import org.apache.activemq.command.ActiveMQQueue;
1:ee2069f: import org.apache.activemq.command.ConsumerInfo;
1:91d4828: import org.apache.activemq.util.Wait;
1:757a2f1: import org.apache.log4j.Appender;
1:757a2f1: import org.apache.log4j.Layout;
1:757a2f1: import org.apache.log4j.Level;
1:757a2f1: import org.apache.log4j.LogManager;
1:757a2f1: import org.apache.log4j.spi.ErrorHandler;
1:757a2f1: import org.apache.log4j.spi.Filter;
1:757a2f1: import org.apache.log4j.spi.LoggingEvent;
1:91d4828: import org.junit.Test;
1:91d4828: import org.slf4j.Logger;
1:91d4828: import org.slf4j.LoggerFactory;
1:91d4828: 
1:91d4828: public class MDBTest {
1:91d4828: 
1:91d4828:     private static final Logger LOG = LoggerFactory.getLogger(MDBTest.class);
1:91d4828: 
1:ba1bd26:     private long txGenerator = System.currentTimeMillis();
1:ba1bd26:     private AtomicInteger id = new AtomicInteger(0);
1:540dd5c: 
1:2256ec0:     private static final class StubBootstrapContext implements BootstrapContext {
1:ba1bd26:         @Override
1:40a7d3b:         public WorkManager getWorkManager() {
1:40a7d3b:             return new WorkManager() {
1:ba1bd26:                 @Override
1:40a7d3b:                 public void doWork(Work work) throws WorkException {
1:40a7d3b:                     new Thread(work).start();
1:40a7d3b:                 }
1:1408e7f: 
1:ba1bd26:                 @Override
1:540dd5c:                 public void doWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:40a7d3b:                     new Thread(work).start();
1:757a2f1:                 }
1:757a2f1: 
1:ba1bd26:                 @Override
1:40a7d3b:                 public long startWork(Work work) throws WorkException {
1:40a7d3b:                     new Thread(work).start();
1:40a7d3b:                     return 0;
1:40a7d3b:                 }
1:540dd5c: 
1:ba1bd26:                 @Override
1:540dd5c:                 public long startWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:40a7d3b:                     new Thread(work).start();
1:40a7d3b:                     return 0;
1:40a7d3b:                 }
1:540dd5c: 
1:ba1bd26:                 @Override
1:40a7d3b:                 public void scheduleWork(Work work) throws WorkException {
1:40a7d3b:                     new Thread(work).start();
1:40a7d3b:                 }
1:540dd5c: 
1:ba1bd26:                 @Override
1:540dd5c:                 public void scheduleWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1:40a7d3b:                     new Thread(work).start();
1:40a7d3b:                 }
1:40a7d3b:             };
1:40a7d3b:         }
1:540dd5c: 
1:ba1bd26:         @Override
1:40a7d3b:         public XATerminator getXATerminator() {
1:40a7d3b:             return null;
1:40a7d3b:         }
1:540dd5c: 
1:ba1bd26:         @Override
1:40a7d3b:         public Timer createTimer() throws UnavailableException {
1:40a7d3b:             return null;
1:40a7d3b:         }
1:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     public class StubMessageEndpoint implements MessageEndpoint, MessageListener {
1:540dd5c:         public int messageCount;
1:40a7d3b:         public XAResource xaresource;
1:540dd5c:         public Xid xid;
1:540dd5c: 
1:ba1bd26:         @Override
1:40a7d3b:         public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
2:40a7d3b:             try {
1:540dd5c:                 if (xid == null) {
1:40a7d3b:                     xid = createXid();
1:540dd5c:                 }
1:540dd5c:                 xaresource.start(xid, 0);
1:40a7d3b:             } catch (Throwable e) {
1:91d4828:                 LOG.info("beforeDelivery, messageCount: " + messageCount + " ex", e);
1:40a7d3b:                 throw new ResourceException(e);
1:40a7d3b:             }
1:40a7d3b:         }
1:540dd5c: 
1:ba1bd26:         @Override
1:40a7d3b:         public void afterDelivery() throws ResourceException {
1:50a98e3:             try {
1:540dd5c:                 xaresource.end(xid, 0);
1:40a7d3b:                 xaresource.prepare(xid);
1:540dd5c:                 xaresource.commit(xid, false);
1:91d4828:                 xid = null;
1:40a7d3b:             } catch (Throwable e) {
1:91d4828:                 LOG.info("afterDelivery, messageCount: " + messageCount + " ex", e);
1:40a7d3b:                 throw new ResourceException(e);
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b: 
1:ba1bd26:         @Override
1:40a7d3b:         public void release() {
1:91d4828:             LOG.info("In release, messageCount: " + messageCount + ", xid:" + xid);
1:40a7d3b:         }
1:40a7d3b: 
1:ba1bd26:         @Override
1:40a7d3b:         public void onMessage(Message message) {
1:40a7d3b:             messageCount++;
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 90000)
1:7bc7178:     public void testDestinationInJndi() throws Exception{
1:7bc7178:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:7bc7178:         Connection connection = factory.createConnection();
1:7bc7178:         connection.start();
1:c96cdf0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7bc7178: 
1:7bc7178:         MessageConsumer advisory = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(new ActiveMQQueue("TEST")));
1:7bc7178: 
1:a1062c2:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:a1062c2:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:7bc7178:         adapter.setQueuePrefetch(1);
1:a1062c2:         adapter.start(new StubBootstrapContext());
1:7bc7178: 
1:7bc7178:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1:7bc7178: 
1:7bc7178:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:ba1bd26:             @Override
1:7bc7178:             public void onMessage(Message message) {
1:7bc7178:                 super.onMessage(message);
1:7bc7178:                 messageDelivered.countDown();
1:7bc7178:             };
1:7bc7178:         };
1:7bc7178: 
1:7bc7178:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:7bc7178:         activationSpec.setDestinationType(Queue.class.getName());
1:7bc7178:         activationSpec.setDestination("MyQueue");
1:7bc7178:         activationSpec.setUseJndi(true);
1:7bc7178:         activationSpec.setResourceAdapter(adapter);
1:7bc7178:         activationSpec.validate();
1:7bc7178: 
1:7bc7178:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:ba1bd26:             @Override
1:7bc7178:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:7bc7178:                 endpoint.xaresource = resource;
1:7bc7178:                 return endpoint;
1:7bc7178:             }
1:7bc7178: 
1:ba1bd26:             @Override
1:7bc7178:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:7bc7178:                 return true;
1:7bc7178:             }
1:7bc7178:         };
1:7bc7178: 
1:7bc7178:         // Activate an Endpoint
1:7bc7178:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:7bc7178: 
1:7bc7178:         ActiveMQMessage msg = (ActiveMQMessage)advisory.receive(1000);
1:7bc7178:         if (msg != null) {
1:7bc7178:             assertEquals("Prefetch size hasn't been set", 1, ((ConsumerInfo)msg.getDataStructure()).getPrefetchSize());
1:7bc7178:         } else {
1:7bc7178:             fail("Consumer hasn't been created");
1:7bc7178:         }
1:7bc7178: 
1:7bc7178:         // Send the broker a message to that endpoint
1:7bc7178:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:7bc7178:         producer.send(session.createTextMessage("Hello!"));
1:7bc7178: 
1:7bc7178:         connection.close();
1:7bc7178: 
1:7bc7178:         // Wait for the message to be delivered.
1:7bc7178:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1:7bc7178: 
1:7bc7178:         // Shut the Endpoint down.
1:7bc7178:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:7bc7178:         adapter.stop();
1:7bc7178:     }
1:85181d6: 
1:85181d6:     @Test(timeout = 90000)
1:40a7d3b:     public void testMessageDelivery() throws Exception {
1:85181d6: 
1:40a7d3b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:40a7d3b:         Connection connection = factory.createConnection();
1:ee2069f:         connection.start();
1:7bc7178:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85181d6: 
1:ee2069f:         MessageConsumer advisory = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(new ActiveMQQueue("TEST")));
1:c85c7c1: 
1:7bc7178:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:7bc7178:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:ee2069f:         adapter.setQueuePrefetch(1);
1:7bc7178:         adapter.start(new StubBootstrapContext());
1:7bc7178: 
1:40a7d3b:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1:540dd5c: 
1:40a7d3b:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:85181d6:             @Override
1:40a7d3b:             public void onMessage(Message message) {
1:40a7d3b:                 super.onMessage(message);
1:40a7d3b:                 messageDelivered.countDown();
1:40a7d3b:             };
1:40a7d3b:         };
1:540dd5c: 
1:40a7d3b:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:40a7d3b:         activationSpec.setDestinationType(Queue.class.getName());
1:40a7d3b:         activationSpec.setDestination("TEST");
1:40a7d3b:         activationSpec.setResourceAdapter(adapter);
1:40a7d3b:         activationSpec.validate();
1:540dd5c: 
1:40a7d3b:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:ba1bd26:             @Override
1:40a7d3b:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:40a7d3b:                 endpoint.xaresource = resource;
1:40a7d3b:                 return endpoint;
1:40a7d3b:             }
1:540dd5c: 
1:ba1bd26:             @Override
1:40a7d3b:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:40a7d3b:                 return true;
1:40a7d3b:             }
1:40a7d3b:         };
1:540dd5c: 
1:40a7d3b:         // Activate an Endpoint
1:40a7d3b:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:540dd5c: 
1:757a2f1:         ActiveMQMessage msg = (ActiveMQMessage)advisory.receive(1000);
1:ee2069f:         if (msg != null) {
1:ee2069f:             assertEquals("Prefetch size hasn't been set", 1, ((ConsumerInfo)msg.getDataStructure()).getPrefetchSize());
1:ee2069f:         } else {
1:ee2069f:             fail("Consumer hasn't been created");
1:40a7d3b:         }
1:540dd5c: 
1:40a7d3b:         // Send the broker a message to that endpoint
1:40a7d3b:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:40a7d3b:         producer.send(session.createTextMessage("Hello!"));
1:540dd5c: 
1:40a7d3b:         connection.close();
1:540dd5c: 
1:40a7d3b:         // Wait for the message to be delivered.
1:40a7d3b:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1:540dd5c: 
1:40a7d3b:         // Shut the Endpoint down.
1:40a7d3b:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:540dd5c:         adapter.stop();
1:40a7d3b:     }
1:540dd5c: 
1:c85c7c1:     @Test
1:c85c7c1:     public void testParallelMessageDelivery() throws Exception {
1:c85c7c1: 
1:c85c7c1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:c85c7c1:         Connection connection = factory.createConnection();
1:c85c7c1:         connection.start();
1:c85c7c1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c85c7c1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:c85c7c1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:c85c7c1:         adapter.start(new StubBootstrapContext());
1:c85c7c1: 
1:c85c7c1:         final CountDownLatch messageDelivered = new CountDownLatch(10);
1:c85c7c1: 
1:c85c7c1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:c85c7c1: 
1:c85c7c1: 
1:c85c7c1:             @Override
1:c85c7c1:             public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
1:c85c7c1:             }
1:c85c7c1: 
1:c85c7c1:             @Override
1:c85c7c1:             public void afterDelivery() throws ResourceException {
1:c85c7c1:             }
1:91d4828: 
1:c85c7c1:             public void onMessage(Message message) {
1:c85c7c1:                 LOG.info("Message:" + message);
1:c85c7c1:                 super.onMessage(message);
1:85181d6:                 try {
1:c85c7c1:                     TimeUnit.SECONDS.sleep(1);
1:c85c7c1:                 } catch (InterruptedException e) {
1:c85c7c1:                     e.printStackTrace();
1:c85c7c1:                 }
1:c85c7c1:                 messageDelivered.countDown();
1:c85c7c1:             };
1:c85c7c1:         };
1:c85c7c1: 
1:c85c7c1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:c85c7c1:         activationSpec.setDestinationType(Queue.class.getName());
1:c85c7c1:         activationSpec.setDestination("TEST");
1:c85c7c1:         activationSpec.setResourceAdapter(adapter);
1:c85c7c1:         activationSpec.validate();
1:c85c7c1: 
1:c85c7c1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:c85c7c1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:c85c7c1:                 endpoint.xaresource = resource;
1:c85c7c1:                 return endpoint;
1:c85c7c1:             }
1:c85c7c1: 
1:c85c7c1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:c85c7c1:                 return false;
1:c85c7c1:             }
1:c85c7c1:         };
1:c85c7c1: 
1:c85c7c1:         // Activate an Endpoint
1:c85c7c1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:c85c7c1: 
1:c85c7c1: 
1:c85c7c1:         // Send the broker a message to that endpoint
1:c85c7c1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:c85c7c1:         for (int i=0;i<10;i++) {
1:c85c7c1:             producer.send(session.createTextMessage(i+"-Hello!"));
1:c85c7c1:         }
1:c85c7c1: 
1:c85c7c1:         connection.close();
1:c85c7c1: 
1:c85c7c1:         // Wait for the message to be delivered.
1:c85c7c1:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1:c85c7c1: 
1:c85c7c1:         // Shut the Endpoint down.
1:c85c7c1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:c85c7c1:         adapter.stop();
1:c85c7c1: 
1:c85c7c1:     }
1:c85c7c1: 
1:a1062c2:     //https://issues.apache.org/jira/browse/AMQ-5811
1:ba1bd26:     @Test(timeout = 90000)
1:a1062c2:     public void testAsyncStop() throws Exception {
1:a1062c2:         for (int repeat = 0; repeat < 10; repeat++) {
1:91d4828:             ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:91d4828:             adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:a1062c2:             adapter.setQueuePrefetch(1);
1:91d4828:             adapter.start(new StubBootstrapContext());
1:a1062c2: 
1:a1062c2:             final int num = 20;
1:a1062c2:             MessageEndpointFactory[] endpointFactories = new MessageEndpointFactory[num];
1:a1062c2:             ActiveMQActivationSpec[] activationSpecs = new ActiveMQActivationSpec[num];
1:a1062c2: 
1:a1062c2:             for (int i = 0; i < num; i++) {
1:a1062c2: 
1:a1062c2:                 final StubMessageEndpoint endpoint = new StubMessageEndpoint()
1:a1062c2:                 {
1:ba1bd26:                     @Override
1:a1062c2:                     public void onMessage(Message message)
1:a1062c2:                     {
1:a1062c2:                         super.onMessage(message);
1:91d4828:                     }
1:a1062c2:                 };
1:a1062c2: 
1:a1062c2:                 activationSpecs[i] = new ActiveMQActivationSpec();
1:a1062c2:                 activationSpecs[i].setDestinationType(Queue.class.getName());
1:a1062c2:                 activationSpecs[i].setDestination("TEST" + i);
1:a1062c2:                 activationSpecs[i].setResourceAdapter(adapter);
1:a1062c2:                 activationSpecs[i].validate();
1:a1062c2: 
1:a1062c2:                 endpointFactories[i] = new MessageEndpointFactory() {
1:ba1bd26:                     @Override
1:a1062c2:                     public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:a1062c2:                         endpoint.xaresource = resource;
1:a1062c2:                         return endpoint;
1:a1062c2:                     }
1:a1062c2: 
1:ba1bd26:                     @Override
1:a1062c2:                     public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:a1062c2:                         return true;
1:a1062c2:                     }
1:a1062c2:                 };
1:a1062c2: 
1:a1062c2:                 // Activate an Endpoint
1:a1062c2:                 adapter.endpointActivation(endpointFactories[i], activationSpecs[i]);
1:a1062c2:             }
1:a1062c2: 
1:a1062c2:             //spawn num threads to deactivate
1:a1062c2:             Thread[] threads = asyncDeactivate(adapter, endpointFactories, activationSpecs);
1:a1062c2:             for (int i = 0; i < threads.length; i++) {
1:a1062c2:                 threads[i].start();
1:a1062c2:             }
1:a1062c2:             adapter.stop();
1:a1062c2:             for (int i = 0; i < threads.length; i++) {
1:a1062c2:                 threads[i].join();
1:a1062c2:             }
1:a1062c2:         }
1:a1062c2:     }
1:a1062c2: 
1:a1062c2:     private Thread[] asyncDeactivate(final ActiveMQResourceAdapter adapter,
1:a1062c2:                                      final MessageEndpointFactory[] endpointFactories,
1:a1062c2:                                      final ActiveMQActivationSpec[] activationSpecs) {
1:a1062c2:         Thread[] threads = new Thread[endpointFactories.length];
1:a1062c2:         for (int i = 0; i < threads.length; i++) {
1:a1062c2:             final MessageEndpointFactory endpointFactory = endpointFactories[i];
1:a1062c2:             final ActiveMQActivationSpec activationSpec = activationSpecs[i];
1:a1062c2: 
1:a1062c2:             threads[i] = new Thread() {
1:ba1bd26:                 @Override
1:a1062c2:                 public void run() {
1:a1062c2:                     adapter.endpointDeactivation(endpointFactory, activationSpec);
1:a1062c2:                 }
1:a1062c2:             };
1:a1062c2:         }
1:a1062c2:         return threads;
1:a1062c2:     }
1:a1062c2: 
1:ba1bd26:     @Test(timeout = 90000)
1:757a2f1:     public void testErrorOnNoMessageDeliveryBrokerZeroPrefetchConfig() throws Exception {
1:ee2069f: 
1:757a2f1:         final BrokerService brokerService = new BrokerService();
1:757a2f1:         final String brokerUrl = "vm://zeroPrefetch?create=false";
1:757a2f1:         brokerService.setBrokerName("zeroPrefetch");
1:757a2f1:         brokerService.setPersistent(false);
1:757a2f1:         PolicyMap policyMap = new PolicyMap();
1:757a2f1:         PolicyEntry zeroPrefetchPolicy = new PolicyEntry();
1:757a2f1:         zeroPrefetchPolicy.setQueuePrefetch(0);
1:757a2f1:         policyMap.setDefaultEntry(zeroPrefetchPolicy);
1:757a2f1:         brokerService.setDestinationPolicy(policyMap);
1:757a2f1:         brokerService.start();
1:757a2f1: 
1:757a2f1:         final AtomicReference<String> errorMessage = new AtomicReference<String>();
1:757a2f1:         final Appender testAppender = new Appender() {
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public void addFilter(Filter filter) {
1:a1062c2:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public Filter getFilter() {
1:757a2f1:                 return null;
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public void clearFilters() {
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public void close() {
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public void doAppend(LoggingEvent event) {
1:757a2f1:                 if (event.getLevel().isGreaterOrEqual(Level.ERROR)) {
1:eb6c082:                     System.err.println("Event :" + event.getRenderedMessage());
1:757a2f1:                     errorMessage.set(event.getRenderedMessage());
1:757a2f1:                 }
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public String getName() {
1:757a2f1:                 return null;
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public void setErrorHandler(ErrorHandler errorHandler) {
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public ErrorHandler getErrorHandler() {
1:757a2f1:                 return null;
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public void setLayout(Layout layout) {
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public Layout getLayout() {
1:757a2f1:                 return null;
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public void setName(String s) {
1:757a2f1:             }
1:757a2f1: 
1:ba1bd26:             @Override
1:757a2f1:             public boolean requiresLayout() {
1:757a2f1:                 return false;
1:757a2f1:             }
1:757a2f1:         };
1:757a2f1: 
1:ba1bd26:         LogManager.getRootLogger().addAppender(testAppender);
1:757a2f1: 
1:757a2f1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);
1:91d4828:         Connection connection = factory.createConnection();
1:757a2f1:         connection.start();
1:91d4828:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:757a2f1: 
1:757a2f1:         MessageConsumer advisory = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(new ActiveMQQueue("TEST")));
1:757a2f1: 
1:757a2f1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:757a2f1:         adapter.setServerUrl(brokerUrl);
1:757a2f1:         adapter.start(new StubBootstrapContext());
1:757a2f1: 
1:757a2f1:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1:757a2f1: 
1:757a2f1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:757a2f1:             @Override
1:757a2f1:             public void onMessage(Message message) {
1:757a2f1:                 super.onMessage(message);
1:757a2f1:                 messageDelivered.countDown();
1:757a2f1:             };
1:757a2f1:         };
1:757a2f1: 
1:757a2f1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:757a2f1:         activationSpec.setDestinationType(Queue.class.getName());
1:757a2f1:         activationSpec.setDestination("TEST");
1:757a2f1:         activationSpec.setResourceAdapter(adapter);
1:757a2f1:         activationSpec.validate();
1:757a2f1: 
1:757a2f1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:757a2f1:             @Override
1:757a2f1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:757a2f1:                 endpoint.xaresource = resource;
1:757a2f1:                 return endpoint;
1:757a2f1:             }
1:757a2f1: 
1:757a2f1:             @Override
1:757a2f1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:757a2f1:                 return true;
1:757a2f1:             }
1:757a2f1:         };
1:757a2f1: 
1:757a2f1:         // Activate an Endpoint
1:757a2f1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:757a2f1: 
1:eb6c082:         ActiveMQMessage msg = (ActiveMQMessage)advisory.receive(4000);
1:757a2f1:         if (msg != null) {
1:757a2f1:             assertEquals("Prefetch size hasn't been set", 0, ((ConsumerInfo)msg.getDataStructure()).getPrefetchSize());
1:757a2f1:         } else {
1:757a2f1:             fail("Consumer hasn't been created");
1:757a2f1:         }
1:757a2f1: 
1:757a2f1:         // Send the broker a message to that endpoint
1:757a2f1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:757a2f1:         producer.send(session.createTextMessage("Hello!"));
1:757a2f1: 
1:757a2f1:         connection.close();
1:757a2f1: 
1:757a2f1:         // Wait for the message to be delivered.
1:757a2f1:         assertFalse(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1:757a2f1: 
1:757a2f1:         // Shut the Endpoint down.
1:757a2f1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:757a2f1:         adapter.stop();
1:757a2f1: 
1:757a2f1:         assertNotNull("We got an error message", errorMessage.get());
1:eb6c082:         assertTrue("correct message: " +  errorMessage.get(), errorMessage.get().contains("zero"));
1:757a2f1: 
1:757a2f1:         LogManager.getRootLogger().removeAppender(testAppender);
1:757a2f1:         brokerService.stop();
1:757a2f1:     }
1:ee2069f: 
1:91d4828:     @Test
1:50a98e3:     public void testMessageExceptionReDelivery() throws Exception {
1:50a98e3: 
1:50a98e3:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:757a2f1:         Connection connection = factory.createConnection();
1:757a2f1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:50a98e3: 
1:50a98e3:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:50a98e3:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:50a98e3:         adapter.start(new StubBootstrapContext());
1:50a98e3: 
1:20832f1:         final CountDownLatch messageDelivered = new CountDownLatch(5);
1:20832f1:         final AtomicLong timeReceived = new AtomicLong();
1:20832f1:         final AtomicBoolean failed = new AtomicBoolean(false);
1:50a98e3: 
1:50a98e3:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:ba1bd26:             @Override
1:50a98e3:             public void onMessage(Message message) {
1:50a98e3:                 super.onMessage(message);
1:c85c7c1:                 try {
1:20832f1:                     long now = System.currentTimeMillis();
1:51b4133:                     if (timeReceived.get() == 0) {
1:51b4133:                         timeReceived.set(now);
1:51b4133:                     }
1:51b4133:                     if ((now - timeReceived.getAndSet(now)) >= 1000) {
1:20832f1:                         failed.set(true);
1:20832f1:                     }
1:50a98e3:                     messageDelivered.countDown();
1:50a98e3:                     if (!messageDelivered.await(1, TimeUnit.MILLISECONDS)) {
1:51b4133:                         throw new RuntimeException("ex on delivery: " + messageDelivered.getCount());
1:50a98e3:                     } else {
1:1408e7f:                         try {
1:50a98e3:                             assertTrue(message.getJMSRedelivered());
1:50a98e3:                         } catch (JMSException e) {
1:50a98e3:                             e.printStackTrace();
1:50a98e3:                         }
1:50a98e3:                     }
1:50a98e3:                 } catch (InterruptedException ignored) {
1:50a98e3:                 }
1:50a98e3:             };
1:ba1bd26: 
1:ba1bd26:             @Override
1:50a98e3:             public void afterDelivery() throws ResourceException {
1:50a98e3:                 try {
1:50a98e3:                     if (!messageDelivered.await(1, TimeUnit.MILLISECONDS)) {
1:50a98e3:                         xaresource.end(xid, XAResource.TMFAIL);
1:50a98e3:                         xaresource.rollback(xid);
1:50a98e3:                     } else {
1:50a98e3:                         xaresource.end(xid, XAResource.TMSUCCESS);
1:50a98e3:                         xaresource.prepare(xid);
1:50a98e3:                         xaresource.commit(xid, false);
1:50a98e3:                     }
1:50a98e3:                 } catch (Throwable e) {
1:50a98e3:                     throw new ResourceException(e);
1:50a98e3:                 }
1:50a98e3:             }
1:50a98e3:         };
1:50a98e3: 
1:50a98e3:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:50a98e3:         activationSpec.setDestinationType(Queue.class.getName());
1:50a98e3:         activationSpec.setDestination("TEST");
1:20832f1:         activationSpec.setInitialRedeliveryDelay(100);
1:50a98e3:         activationSpec.setResourceAdapter(adapter);
1:50a98e3:         activationSpec.validate();
1:50a98e3: 
1:50a98e3:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:757a2f1:             @Override
1:50a98e3:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:50a98e3:                 endpoint.xaresource = resource;
1:50a98e3:                 return endpoint;
1:50a98e3:             }
1:50a98e3: 
1:757a2f1:             @Override
1:50a98e3:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:50a98e3:                 return true;
1:40a7d3b:             }
1:50a98e3:         };
1:50a98e3: 
1:50a98e3:         // Activate an Endpoint
1:50a98e3:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:50a98e3: 
1:50a98e3:         // Give endpoint a chance to setup and register its listeners
1:50a98e3:         try {
1:50a98e3:             Thread.sleep(1000);
1:50a98e3:         } catch (Exception e) {
1:1408e7f: 
1:1408e7f:         }
1:51b4133:         timeReceived.set(0);
1:50a98e3:         // Send the broker a message to that endpoint
1:50a98e3:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:50a98e3:         producer.send(session.createTextMessage("Hello!"));
1:50a98e3:         connection.close();
1:50a98e3: 
1:51b4133:         // Wait for the message to be delivered.
1:50a98e3:         assertTrue(messageDelivered.await(10000, TimeUnit.MILLISECONDS));
1:20832f1:         assertFalse("Delivery policy delay not working", failed.get());
1:50a98e3: 
1:50a98e3:         // Shut the Endpoint down.
1:50a98e3:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:50a98e3:         adapter.stop();
1:50a98e3:     }
1:50a98e3: 
1:ba1bd26:     @Test(timeout = 90000)
1:91d4828:     public void testOrderOfMessageExceptionReDelivery() throws Exception {
1:50a98e3: 
1:91d4828:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:50a98e3:         Connection connection = factory.createConnection();
1:50a98e3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:50a98e3: 
1:40a7d3b:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:40a7d3b:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:40a7d3b:         adapter.start(new StubBootstrapContext());
1:91d4828:         final String ORDER_PROP = "Order";
1:91d4828:         final List<Integer> orderedReceipt = new ArrayList<Integer>();
1:91d4828: 
1:91d4828:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:ba1bd26:             @Override
1:91d4828:             public void onMessage(Message message) {
1:91d4828:                 super.onMessage(message);
1:91d4828:                 if (messageCount == 2) {
1:91d4828:                     throw new RuntimeException("Throwing on two");
1:91d4828:                 }
1:91d4828:                 try {
1:91d4828:                     orderedReceipt.add(message.getIntProperty(ORDER_PROP));
1:91d4828:                 } catch (JMSException e) {
1:91d4828:                     e.printStackTrace();
1:91d4828:                 }
1:91d4828:             };
1:91d4828: 
1:757a2f1:             @Override
1:91d4828:             public void afterDelivery() throws ResourceException {
1:91d4828:                 try {
1:91d4828:                     if (messageCount == 2) {
1:91d4828:                         xaresource.end(xid, XAResource.TMFAIL);
1:91d4828:                         xaresource.rollback(xid);
1:91d4828:                     } else {
1:91d4828:                         xaresource.end(xid, XAResource.TMSUCCESS);
1:91d4828:                         xaresource.prepare(xid);
1:91d4828:                         xaresource.commit(xid, false);
1:50a98e3:                     }
1:91d4828:                 } catch (Throwable e) {
1:91d4828:                     LOG.info("afterDelivery messageCount: " + messageCount + " ex", e);
1:91d4828:                     throw new ResourceException(e);
1:91d4828:                 } finally {
1:91d4828:                     xid = null;
1:91d4828:                 }
1:91d4828:             }
1:91d4828:         };
1:91d4828: 
1:91d4828:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:91d4828:         activationSpec.setDestinationType(Queue.class.getName());
1:91d4828:         activationSpec.setDestination("TEST");
1:91d4828:         activationSpec.setInitialRedeliveryDelay(100);
1:91d4828:         activationSpec.setMaxSessions("1");
1:91d4828:         activationSpec.setResourceAdapter(adapter);
1:91d4828:         activationSpec.validate();
1:91d4828: 
1:91d4828:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:757a2f1:             @Override
1:91d4828:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:91d4828:                 endpoint.xaresource = resource;
1:91d4828:                 return endpoint;
1:91d4828:             }
1:91d4828: 
1:757a2f1:             @Override
1:91d4828:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:91d4828:                 return true;
1:91d4828:             }
1:91d4828:         };
1:91d4828: 
1:91d4828:         // Activate an Endpoint
1:91d4828:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:91d4828: 
1:91d4828:         // Give endpoint a chance to setup and register its listeners
1:91d4828:         try {
1:91d4828:             Thread.sleep(1000);
1:91d4828:         } catch (Exception e) {
1:91d4828: 
1:91d4828:         }
1:91d4828:         // Send the broker a message to that endpoint
1:91d4828:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:91d4828:         for (int i=0; i<5; i++) {
1:91d4828:             Message message = session.createTextMessage("Hello!");
1:91d4828:             message.setIntProperty(ORDER_PROP, i);
1:91d4828:             producer.send(message);
1:91d4828:         }
1:91d4828:         connection.close();
1:91d4828: 
1:91d4828:         assertTrue("Got 5", Wait.waitFor(new Wait.Condition() {
1:91d4828:             @Override
1:91d4828:             public boolean isSatisified() throws Exception {
1:91d4828:                 LOG.info("Ordered size: " + orderedReceipt.size());
1:91d4828:                 return orderedReceipt.size() == 5;
1:91d4828:             }
1:91d4828:         }));
1:91d4828: 
1:91d4828:         for (int i=0; i<5; i++) {
1:91d4828:             assertEquals("in order", Integer.valueOf(i), orderedReceipt.remove(0));
1:91d4828:         }
1:91d4828: 
1:91d4828:         // Shut the Endpoint down.
1:91d4828:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:91d4828:         adapter.stop();
1:91d4828:     }
1:91d4828: 
1:ba1bd26:     @Test(timeout = 90000)
1:1408e7f:     public void testXaTimeoutRedelivery() throws Exception {
1:91d4828: 
1:1408e7f:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:1408e7f:         Connection connection = factory.createConnection();
1:1408e7f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1408e7f: 
1:1408e7f:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:1408e7f:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:1408e7f:         adapter.start(new StubBootstrapContext());
1:1408e7f: 
1:1408e7f:         final CountDownLatch messageDelivered = new CountDownLatch(2);
1:1408e7f: 
1:1408e7f:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:ba1bd26:             @Override
1:1408e7f:             public void onMessage(Message message) {
1:1408e7f:                 super.onMessage(message);
1:1408e7f:                 try {
1:1408e7f:                     messageDelivered.countDown();
1:1408e7f:                     if (!messageDelivered.await(1, TimeUnit.MILLISECONDS)) {
1:1408e7f:                         // simulate abort, timeout
1:1408e7f:                         try {
1:1408e7f:                             xaresource.end(xid, XAResource.TMFAIL);
1:1408e7f:                             xaresource.rollback(xid);
1:1408e7f:                         } catch (Exception e) {
1:1408e7f:                             e.printStackTrace();
1:1408e7f:                             throw new RuntimeException(e);
1:1408e7f:                         }
1:1408e7f:                     } else {
1:1408e7f:                         try {
1:1408e7f:                             assertTrue(message.getJMSRedelivered());
1:1408e7f:                         } catch (JMSException e) {
1:1408e7f:                             e.printStackTrace();
1:1408e7f:                         }
1:1408e7f:                     }
1:1408e7f:                 } catch (InterruptedException ignored) {
1:50a98e3:                 }
1:1408e7f:             };
1:1408e7f: 
1:757a2f1:             @Override
1:1408e7f:             public void afterDelivery() throws ResourceException {
1:50a98e3:                 try {
1:1408e7f:                     xaresource.end(xid, XAResource.TMSUCCESS);
1:1408e7f:                     xaresource.commit(xid, true);
1:1408e7f:                 } catch (Throwable e) {
1:1408e7f:                     throw new ResourceException(e);
1:85181d6:                 }
1:1408e7f:             }
1:1408e7f:         };
1:85181d6: 
1:1408e7f:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:1408e7f:         activationSpec.setDestinationType(Queue.class.getName());
1:1408e7f:         activationSpec.setDestination("TEST");
1:1408e7f:         activationSpec.setResourceAdapter(adapter);
1:1408e7f:         activationSpec.validate();
1:1408e7f: 
1:1408e7f:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:757a2f1:             @Override
1:1408e7f:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:1408e7f:                 endpoint.xaresource = resource;
1:1408e7f:                 return endpoint;
1:1408e7f:             }
1:1408e7f: 
1:757a2f1:             @Override
1:1408e7f:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:1408e7f:                 return true;
1:1408e7f:             }
1:1408e7f:         };
1:1408e7f: 
1:1408e7f:         // Activate an Endpoint
1:1408e7f:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:1408e7f: 
1:1408e7f:         // Give endpoint a chance to setup and register its listeners
1:1408e7f:         try {
1:1408e7f:             Thread.sleep(1000);
1:1408e7f:         } catch (Exception e) {
1:1408e7f:         }
1:1408e7f: 
1:1408e7f:         // Send the broker a message to that endpoint
1:1408e7f:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:1408e7f:         producer.send(session.createTextMessage("Hello!"));
1:1408e7f:         connection.close();
1:1408e7f: 
1:1408e7f:         // Wait for the message to be delivered twice.
1:1408e7f:         assertTrue(messageDelivered.await(10000, TimeUnit.MILLISECONDS));
1:1408e7f: 
1:1408e7f:         // Shut the Endpoint down.
1:1408e7f:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:1408e7f:         adapter.stop();
1:1408e7f:     }
1:1408e7f: 
1:ba1bd26:     @Test(timeout = 90000)
1:85181d6:     public void testXaOnMessageExceptionRollback() throws Exception {
1:85181d6: 
1:85181d6:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:85181d6:         Connection connection = factory.createConnection();
1:85181d6:         connection.start();
1:85181d6:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85181d6: 
1:85181d6:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:85181d6:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:85181d6:         adapter.start(new StubBootstrapContext());
1:85181d6: 
1:85181d6:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1:85181d6: 
1:85181d6:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:85181d6:             @Override
1:85181d6:             public void onMessage(Message message) {
1:85181d6:                 super.onMessage(message);
1:85181d6:                 messageDelivered.countDown();
1:85181d6:                 throw new RuntimeException("Failure");
1:85181d6:             };
1:85181d6: 
1:85181d6:             @Override
1:85181d6:             public void afterDelivery() throws ResourceException {
1:85181d6:                 try {
1:85181d6:                     xaresource.end(xid, XAResource.TMSUCCESS);
1:85181d6:                     xaresource.commit(xid, true);
1:85181d6:                 } catch (Throwable e) {
1:85181d6:                     throw new ResourceException(e);
1:85181d6:                 }
1:85181d6:             }
1:85181d6:         };
1:85181d6: 
1:85181d6:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:85181d6:         activationSpec.setDestinationType(Queue.class.getName());
1:85181d6:         activationSpec.setDestination("TEST");
1:85181d6:         activationSpec.setResourceAdapter(adapter);
1:85181d6:         activationSpec.validate();
1:85181d6: 
1:85181d6:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:85181d6:             @Override
1:85181d6:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:85181d6:                 endpoint.xaresource = resource;
1:85181d6:                 return endpoint;
1:85181d6:             }
1:85181d6: 
1:757a2f1:             @Override
1:85181d6:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:85181d6:                 return true;
1:85181d6:             }
1:85181d6:         };
1:85181d6: 
1:85181d6:         // Activate an Endpoint
1:85181d6:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:85181d6: 
1:85181d6:         // Give endpoint a chance to setup and register its listeners
1:40a7d3b:         try {
1:85181d6:             Thread.sleep(1000);
1:85181d6:         } catch (Exception e) {
1:1408e7f:         }
1:1408e7f: 
1:85181d6:         // Send the broker a message to that endpoint
1:85181d6:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:85181d6:         producer.send(session.createTextMessage("Hello!"));
1:1408e7f: 
1:85181d6:         // Wait for the message to be delivered twice.
1:85181d6:         assertTrue(messageDelivered.await(10000, TimeUnit.MILLISECONDS));
1:50a98e3: 
1:85181d6:         // Shut the Endpoint down.
1:85181d6:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:85181d6:         adapter.stop();
1:50a98e3: 
1:85181d6:         // assert message still available
1:85181d6:         MessageConsumer messageConsumer = session.createConsumer(new ActiveMQQueue("TEST"));
1:85181d6:         assertNotNull("got the message", messageConsumer.receive(5000));
1:85181d6:         connection.close();
1:85181d6: 
1:85181d6:     }
1:85181d6: 
1:540dd5c:     public Xid createXid() throws IOException {
1:40a7d3b:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:40a7d3b:         DataOutputStream os = new DataOutputStream(baos);
1:40a7d3b:         os.writeLong(++txGenerator);
1:91d4828:         os.writeLong(id.getAndIncrement());
1:40a7d3b:         os.close();
1:40a7d3b:         final byte[] bs = baos.toByteArray();
1:50a98e3: 
1:40a7d3b:         return new Xid() {
1:91d4828:             final int lid = id.get();
1:ba1bd26:             @Override
1:40a7d3b:             public int getFormatId() {
1:40a7d3b:                 return 86;
1:40a7d3b:             }
1:540dd5c: 
1:ba1bd26:             @Override
1:40a7d3b:             public byte[] getGlobalTransactionId() {
1:40a7d3b:                 return bs;
1:40a7d3b:             }
1:91d4828: 
1:ba1bd26:             @Override
1:40a7d3b:             public byte[] getBranchQualifier() {
1:40a7d3b:                 return bs;
1:40a7d3b:             }
1:540dd5c: 
1:ba1bd26:             @Override
1:91d4828:             public String toString() {
1:91d4828:                 return "DummyIdXID:" + lid;
1:91d4828:             }
1:40a7d3b:         };
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:85181d6
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
1:     public void testXaOnMessageExceptionRollback() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:         adapter.start(new StubBootstrapContext());
1: 
1:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 messageDelivered.countDown();
1:                 throw new RuntimeException("Failure");
1:             };
1: 
1:             @Override
1:             public void afterDelivery() throws ResourceException {
1:                 try {
1:                     xaresource.end(xid, XAResource.TMSUCCESS);
1:                     xaresource.commit(xid, true);
1:                 } catch (Throwable e) {
1:                     throw new ResourceException(e);
1:                 }
1:             }
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             @Override
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             @Override
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1:         // Give endpoint a chance to setup and register its listeners
1:         try {
1:             Thread.sleep(1000);
1:         } catch (Exception e) {
1:         }
1: 
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         producer.send(session.createTextMessage("Hello!"));
1: 
1:         // Wait for the message to be delivered twice.
1:         assertTrue(messageDelivered.await(10000, TimeUnit.MILLISECONDS));
1: 
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:         adapter.stop();
1: 
1:         // assert message still available
1:         MessageConsumer messageConsumer = session.createConsumer(new ActiveMQQueue("TEST"));
1:         assertNotNull("got the message", messageConsumer.receive(5000));
1:         connection.close();
1: 
1:     }
1: 
commit:51b4133
/////////////////////////////////////////////////////////////////////////
1:                     if (timeReceived.get() == 0) {
1:                         timeReceived.set(now);
1:                     }
1:                     if ((now - timeReceived.getAndSet(now)) >= 1000) {
1:                         throw new RuntimeException("ex on delivery: " + messageDelivered.getCount());
/////////////////////////////////////////////////////////////////////////
1:         timeReceived.set(0);
1:         // Wait for the message to be delivered.
commit:c85c7c1
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testParallelMessageDelivery() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:         adapter.start(new StubBootstrapContext());
1: 
1:         final CountDownLatch messageDelivered = new CountDownLatch(10);
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1: 
1: 
1:             @Override
1:             public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
1:             }
1: 
1:             @Override
1:             public void afterDelivery() throws ResourceException {
1:             }
1: 
1:             public void onMessage(Message message) {
1:                 LOG.info("Message:" + message);
1:                 super.onMessage(message);
1:                 try {
1:                     TimeUnit.SECONDS.sleep(1);
1:                 } catch (InterruptedException e) {
1:                     e.printStackTrace();
1:                 }
1:                 messageDelivered.countDown();
1:             };
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return false;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1: 
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         for (int i=0;i<10;i++) {
1:             producer.send(session.createTextMessage(i+"-Hello!"));
1:         }
1: 
1:         connection.close();
1: 
1:         // Wait for the message to be delivered.
1:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1: 
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:         adapter.stop();
1: 
1:     }
1: 
commit:91d4828
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class MDBTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MDBTest.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("beforeDelivery, messageCount: " + messageCount + " ex", e);
/////////////////////////////////////////////////////////////////////////
1:                 xid = null;
1:                 LOG.info("afterDelivery, messageCount: " + messageCount + " ex", e);
1:             LOG.info("In release, messageCount: " + messageCount + ", xid:" + xid);
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:                         throw new RuntimeException("ex on first delivery");
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testOrderOfMessageExceptionReDelivery() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:         adapter.start(new StubBootstrapContext());
1:         final String ORDER_PROP = "Order";
1:         final List<Integer> orderedReceipt = new ArrayList<Integer>();
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             public void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 if (messageCount == 2) {
1:                     throw new RuntimeException("Throwing on two");
1:                 }
1:                 try {
1:                     orderedReceipt.add(message.getIntProperty(ORDER_PROP));
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             };
1: 
1:             public void afterDelivery() throws ResourceException {
1:                 try {
1:                     if (messageCount == 2) {
1:                         xaresource.end(xid, XAResource.TMFAIL);
1:                         xaresource.rollback(xid);
1:                     } else {
1:                         xaresource.end(xid, XAResource.TMSUCCESS);
1:                         xaresource.prepare(xid);
1:                         xaresource.commit(xid, false);
1:                     }
1:                 } catch (Throwable e) {
1:                     LOG.info("afterDelivery messageCount: " + messageCount + " ex", e);
1:                     throw new ResourceException(e);
1:                 } finally {
1:                     xid = null;
1:                 }
1:             }
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setInitialRedeliveryDelay(100);
1:         activationSpec.setMaxSessions("1");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1:         // Give endpoint a chance to setup and register its listeners
1:         try {
1:             Thread.sleep(1000);
1:         } catch (Exception e) {
1: 
1:         }
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         for (int i=0; i<5; i++) {
1:             Message message = session.createTextMessage("Hello!");
1:             message.setIntProperty(ORDER_PROP, i);
1:             producer.send(message);
1:         }
1:         connection.close();
1: 
1:         assertTrue("Got 5", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Ordered size: " + orderedReceipt.size());
1:                 return orderedReceipt.size() == 5;
1:             }
1:         }));
1: 
1:         for (int i=0; i<5; i++) {
1:             assertEquals("in order", Integer.valueOf(i), orderedReceipt.remove(0));
1:         }
1: 
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:         adapter.stop();
1: 
1:     }
1: 
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     AtomicInteger id = new AtomicInteger(0);
1:         os.writeLong(id.getAndIncrement());
1:             final int lid = id.get();
/////////////////////////////////////////////////////////////////////////
1: 
1:             public String toString() {
1:                 return "DummyIdXID:" + lid;
1:             }
commit:eb6c082
/////////////////////////////////////////////////////////////////////////
1:                     System.err.println("Event :" + event.getRenderedMessage());
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQMessage msg = (ActiveMQMessage)advisory.receive(4000);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("correct message: " +  errorMessage.get(), errorMessage.get().contains("zero"));
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Test;
1:     private long txGenerator = System.currentTimeMillis();
1:     private AtomicInteger id = new AtomicInteger(0);
1:         @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:                 @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:     @Test(timeout = 90000)
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
/////////////////////////////////////////////////////////////////////////
1:         LogManager.getRootLogger().addAppender(testAppender);
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
1:             @Override
author:Howard Gao
-------------------------------------------------------------------------------
commit:a1062c2
/////////////////////////////////////////////////////////////////////////
1:     //https://issues.apache.org/jira/browse/AMQ-5811
1:     public void testAsyncStop() throws Exception {
1:         for (int repeat = 0; repeat < 10; repeat++) {
1:             ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:             adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:             adapter.setQueuePrefetch(1);
1:             adapter.start(new StubBootstrapContext());
1: 
1:             final int num = 20;
1:             MessageEndpointFactory[] endpointFactories = new MessageEndpointFactory[num];
1:             ActiveMQActivationSpec[] activationSpecs = new ActiveMQActivationSpec[num];
1: 
1:             for (int i = 0; i < num; i++) {
1: 
1:                 final StubMessageEndpoint endpoint = new StubMessageEndpoint()
1:                 {
1:                     public void onMessage(Message message)
1:                     {
1:                         super.onMessage(message);
1:                     }
1:                 };
1: 
1:                 activationSpecs[i] = new ActiveMQActivationSpec();
1:                 activationSpecs[i].setDestinationType(Queue.class.getName());
1:                 activationSpecs[i].setDestination("TEST" + i);
1:                 activationSpecs[i].setResourceAdapter(adapter);
1:                 activationSpecs[i].validate();
1: 
1:                 endpointFactories[i] = new MessageEndpointFactory() {
1:                     public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                         endpoint.xaresource = resource;
1:                         return endpoint;
1:                     }
1: 
1:                     public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                         return true;
1:                     }
1:                 };
1: 
1:                 // Activate an Endpoint
1:                 adapter.endpointActivation(endpointFactories[i], activationSpecs[i]);
1:             }
1: 
1:             //spawn num threads to deactivate
1:             Thread[] threads = asyncDeactivate(adapter, endpointFactories, activationSpecs);
1:             for (int i = 0; i < threads.length; i++) {
1:                 threads[i].start();
1:             }
1:             adapter.stop();
1:             for (int i = 0; i < threads.length; i++) {
1:                 threads[i].join();
1:             }
1:         }
1:     }
1: 
1:     private Thread[] asyncDeactivate(final ActiveMQResourceAdapter adapter,
1:                                      final MessageEndpointFactory[] endpointFactories,
1:                                      final ActiveMQActivationSpec[] activationSpecs) {
1:         Thread[] threads = new Thread[endpointFactories.length];
1:         for (int i = 0; i < threads.length; i++) {
1:             final MessageEndpointFactory endpointFactory = endpointFactories[i];
1:             final ActiveMQActivationSpec activationSpec = activationSpecs[i];
1: 
1:             threads[i] = new Thread() {
1:                 public void run() {
1:                     adapter.endpointDeactivation(endpointFactory, activationSpec);
1:                 }
1:             };
1:         }
1:         return threads;
1:     }
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:20832f1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch messageDelivered = new CountDownLatch(5);
1:         final AtomicLong timeReceived = new AtomicLong();
1:         final AtomicBoolean failed = new AtomicBoolean(false);
1:                     long now = System.currentTimeMillis();
0:                     if ((now - timeReceived.getAndSet(now)) > 1000) {
1:                         failed.set(true);
1:                     }
/////////////////////////////////////////////////////////////////////////
1:         activationSpec.setInitialRedeliveryDelay(100);
/////////////////////////////////////////////////////////////////////////
0:         timeReceived.set(System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
1:         assertFalse("Delivery policy delay not working", failed.get());
author:Gary Tully
-------------------------------------------------------------------------------
commit:1408e7f
/////////////////////////////////////////////////////////////////////////
1:     public void testXaTimeoutRedelivery() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:         adapter.start(new StubBootstrapContext());
1: 
1:         final CountDownLatch messageDelivered = new CountDownLatch(2);
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             public void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 try {
1:                     messageDelivered.countDown();
1:                     if (!messageDelivered.await(1, TimeUnit.MILLISECONDS)) {
1:                         // simulate abort, timeout
1:                         try {
1:                             xaresource.end(xid, XAResource.TMFAIL);
1:                             xaresource.rollback(xid);
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                             throw new RuntimeException(e);
1:                         }
1:                     } else {
1:                         try {
1:                             assertTrue(message.getJMSRedelivered());
1:                         } catch (JMSException e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1:                 } catch (InterruptedException ignored) {
1:                 }
1:             };
1: 
1:             public void afterDelivery() throws ResourceException {
1:                 try {
1:                     xaresource.end(xid, XAResource.TMSUCCESS);
1:                     xaresource.commit(xid, true);
1:                 } catch (Throwable e) {
1:                     throw new ResourceException(e);
1:                 }
1:             }
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1:         // Give endpoint a chance to setup and register its listeners
1:         try {
1:             Thread.sleep(1000);
1:         } catch (Exception e) {
1: 
1:         }
1: 
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         producer.send(session.createTextMessage("Hello!"));
1:         connection.close();
1: 
1:         // Wait for the message to be delivered twice.
1:         assertTrue(messageDelivered.await(10000, TimeUnit.MILLISECONDS));
1: 
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:         adapter.stop();
1: 
1:     }
1: 
commit:757a2f1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Layout;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.LogManager;
1: import org.apache.log4j.spi.ErrorHandler;
1: import org.apache.log4j.spi.Filter;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
1:     public void testErrorOnNoMessageDeliveryBrokerZeroPrefetchConfig() throws Exception {
1: 
1:         final BrokerService brokerService = new BrokerService();
1:         final String brokerUrl = "vm://zeroPrefetch?create=false";
1:         brokerService.setBrokerName("zeroPrefetch");
1:         brokerService.setPersistent(false);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry zeroPrefetchPolicy = new PolicyEntry();
1:         zeroPrefetchPolicy.setQueuePrefetch(0);
1:         policyMap.setDefaultEntry(zeroPrefetchPolicy);
1:         brokerService.setDestinationPolicy(policyMap);
1:         brokerService.start();
1: 
1:         final AtomicReference<String> errorMessage = new AtomicReference<String>();
1:         final Appender testAppender = new Appender() {
1: 
1:             @Override
1:             public void addFilter(Filter filter) {
1:             }
1: 
1:             @Override
1:             public Filter getFilter() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public void clearFilters() {
1:             }
1: 
1:             @Override
1:             public void close() {
1:             }
1: 
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel().isGreaterOrEqual(Level.ERROR)) {
1:                     errorMessage.set(event.getRenderedMessage());
1:                 }
1:             }
1: 
1:             @Override
1:             public String getName() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public void setErrorHandler(ErrorHandler errorHandler) {
1:             }
1: 
1:             @Override
1:             public ErrorHandler getErrorHandler() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public void setLayout(Layout layout) {
1:             }
1: 
1:             @Override
1:             public Layout getLayout() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public void setName(String s) {
1:             }
1: 
1:             @Override
1:             public boolean requiresLayout() {
1:                 return false;
1:             }
1:         };
0:         LogManager.getRootLogger().addAppender(testAppender);
1: 
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer advisory = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(new ActiveMQQueue("TEST")));
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl(brokerUrl);
1:         adapter.start(new StubBootstrapContext());
1: 
1:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             public void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 messageDelivered.countDown();
1:             };
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1:         ActiveMQMessage msg = (ActiveMQMessage)advisory.receive(1000);
1:         if (msg != null) {
1:             assertEquals("Prefetch size hasn't been set", 0, ((ConsumerInfo)msg.getDataStructure()).getPrefetchSize());
1:         } else {
1:             fail("Consumer hasn't been created");
1:         }
1: 
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         producer.send(session.createTextMessage("Hello!"));
1: 
1:         connection.close();
1: 
1:         // Wait for the message to be delivered.
1:         assertFalse(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1: 
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:         adapter.stop();
1: 
1:         assertNotNull("We got an error message", errorMessage.get());
0:         assertTrue("correct message", errorMessage.get().contains("zero"));
1: 
1:         LogManager.getRootLogger().removeAppender(testAppender);
1:         brokerService.stop();
1:     }
commit:50a98e3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
/////////////////////////////////////////////////////////////////////////
1:     public void testMessageExceptionReDelivery() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:         adapter.start(new StubBootstrapContext());
1: 
0:         final CountDownLatch messageDelivered = new CountDownLatch(2);
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             public void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 try {
1:                     messageDelivered.countDown();
1:                     if (!messageDelivered.await(1, TimeUnit.MILLISECONDS)) {
0:                         throw new RuntimeException(getName() + " ex on first delivery");
1:                     } else {
1:                         try {
1:                             assertTrue(message.getJMSRedelivered());
1:                         } catch (JMSException e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1:                 } catch (InterruptedException ignored) {
1:                 }
1:             };
1:             
1:             public void afterDelivery() throws ResourceException {
1:                 try {
1:                     if (!messageDelivered.await(1, TimeUnit.MILLISECONDS)) {
1:                         xaresource.end(xid, XAResource.TMFAIL);
1:                         xaresource.rollback(xid);
1:                     } else {
1:                         xaresource.end(xid, XAResource.TMSUCCESS);
1:                         xaresource.prepare(xid);
1:                         xaresource.commit(xid, false);
1:                     }
1:                 } catch (Throwable e) {
1:                     throw new ResourceException(e);
1:                 }
1:             }
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1:         // Give endpoint a chance to setup and register its listeners
1:         try {
1:             Thread.sleep(1000);
1:         } catch (Exception e) {
1: 
1:         }
1: 
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         producer.send(session.createTextMessage("Hello!"));
1:         connection.close();
1: 
0:         // Wait for the message to be delivered twice.
1:         assertTrue(messageDelivered.await(10000, TimeUnit.MILLISECONDS));
1: 
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:         adapter.stop();
1: 
1:     }
1: 
1: 
commit:c96cdf0
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Christian Posta
-------------------------------------------------------------------------------
commit:7bc7178
/////////////////////////////////////////////////////////////////////////
1:     public void testDestinationInJndi() throws Exception{
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer advisory = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(new ActiveMQQueue("TEST")));
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:         adapter.setQueuePrefetch(1);
1:         adapter.start(new StubBootstrapContext());
1: 
1:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1: 
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             public void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 messageDelivered.countDown();
1:             };
1:         };
1: 
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("MyQueue");
1:         activationSpec.setUseJndi(true);
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1: 
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1: 
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1: 
1:         ActiveMQMessage msg = (ActiveMQMessage)advisory.receive(1000);
1:         if (msg != null) {
1:             assertEquals("Prefetch size hasn't been set", 1, ((ConsumerInfo)msg.getDataStructure()).getPrefetchSize());
1:         } else {
1:             fail("Consumer hasn't been created");
1:         }
1: 
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         producer.send(session.createTextMessage("Hello!"));
1: 
1:         connection.close();
1: 
1:         // Wait for the message to be delivered.
1:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1: 
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
1:         adapter.stop();
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0:     long txGenerator = System.currentTimeMillis();
1: 
1: 
1:                 public void doWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1: 
1: 
1:                 public long startWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
1: 
1: 
1:                 public void scheduleWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException {
/////////////////////////////////////////////////////////////////////////
1:         public int messageCount;
1:         public Xid xid;
1: 
1:                 if (xid == null) {
1:                 }
1:                 xaresource.start(xid, 0);
/////////////////////////////////////////////////////////////////////////
1:                 xaresource.end(xid, 0);
1:                 xaresource.commit(xid, false);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         adapter.stop();
1: 
1: 
1: 
1:     public Xid createXid() throws IOException {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.ra.ActiveMQActivationSpec;
0: import org.apache.activemq.ra.ActiveMQResourceAdapter;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ee2069f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
0: import org.apache.activemq.broker.BrokerRegistry;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConsumerInfo;
/////////////////////////////////////////////////////////////////////////
1:         connection.start();
1:         MessageConsumer advisory = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(new ActiveMQQueue("TEST")));
1: 
1:         adapter.setQueuePrefetch(1);
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQMessage msg = (ActiveMQMessage)advisory.receive(1000);
1:         if (msg != null) {
1:             assertEquals("Prefetch size hasn't been set", 1, ((ConsumerInfo)msg.getDataStructure()).getPrefetchSize());
1:         } else {
1:             fail("Consumer hasn't been created");
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:2256ec0
/////////////////////////////////////////////////////////////////////////
1:     private static final class StubBootstrapContext implements BootstrapContext {
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /** 
0:  * 
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.lang.reflect.Method;
1: import java.util.Timer;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.BootstrapContext;
1: import javax.resource.spi.UnavailableException;
1: import javax.resource.spi.XATerminator;
1: import javax.resource.spi.endpoint.MessageEndpoint;
1: import javax.resource.spi.endpoint.MessageEndpointFactory;
1: import javax.resource.spi.work.ExecutionContext;
1: import javax.resource.spi.work.Work;
1: import javax.resource.spi.work.WorkException;
1: import javax.resource.spi.work.WorkListener;
1: import javax.resource.spi.work.WorkManager;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.activemq.ActiveMQConnectionFactory;
0: import org.activemq.command.ActiveMQQueue;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
0: public class MDBTest extends TestCase {
1: 
0:     private final class StubBootstrapContext implements BootstrapContext {
1:         public WorkManager getWorkManager() {
1:             return new WorkManager() {
1:                 public void doWork(Work work) throws WorkException {
1:                     new Thread(work).start();
1:                 }
1:         
0:                 public void doWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3)
0:                         throws WorkException {
1:                     new Thread(work).start();
1:                 }
1:         
1:                 public long startWork(Work work) throws WorkException {
1:                     new Thread(work).start();
1:                     return 0;
1:                 }
1:         
0:                 public long startWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3)
0:                         throws WorkException {
1:                     new Thread(work).start();
1:                     return 0;
1:                 }
1:         
1:                 public void scheduleWork(Work work) throws WorkException {
1:                     new Thread(work).start();
1:                 }
1:         
0:                 public void scheduleWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3)
0:                         throws WorkException {
1:                     new Thread(work).start();
1:                 }
1:             };
1:         }
1: 
1:         public XATerminator getXATerminator() {
1:             return null;
1:         }
1: 
1:         public Timer createTimer() throws UnavailableException {
1:             return null;
1:         }
1:     }
1: 
1:     public class StubMessageEndpoint implements MessageEndpoint, MessageListener {
0:         public int messageCount; 
1:         public XAResource xaresource;
0:         public Xid xid=null;
1:         
1:         public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
1:             try {
0:                 if( xid==null )
1:                     xid = createXid();
0:                 xaresource.start(xid,0);
1:             } catch (Throwable e) {
1:                 throw new ResourceException(e);
1:             }
1:         }
1: 
1:         public void afterDelivery() throws ResourceException {
1:             try {
0:                 xaresource.end(xid,0);
1:                 xaresource.prepare(xid);
0:                 xaresource.commit(xid,false);
1:             } catch (Throwable e) {
1:                 throw new ResourceException(e);
1:             }
1:         }
1: 
1:         public void release() {
1:         }
1: 
1:         public void onMessage(Message message) {
1:             messageCount++;
1:         }
1: 
1:     }
1:     
1:     public void testMessageDelivery() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         Connection connection = factory.createConnection();
0:         Session session = connection.createSession(false, 0);
1: 
1:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
1:         adapter.setServerUrl("vm://localhost?broker.persistent=false");
1:         adapter.start(new StubBootstrapContext());
1: 
1:         final CountDownLatch messageDelivered = new CountDownLatch(1);
1:         
1:         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {
1:             public void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 messageDelivered.countDown();
1:             };
1:         };
1:         
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination("TEST");
1:         activationSpec.setResourceAdapter(adapter);
1:         activationSpec.validate();
1:         
1:         MessageEndpointFactory messageEndpointFactory = new MessageEndpointFactory() {
1:             public MessageEndpoint createEndpoint(XAResource resource) throws UnavailableException {
1:                 endpoint.xaresource = resource;
1:                 return endpoint;
1:             }
1:             public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {
1:                 return true;
1:             }
1:         };
1: 
1:         // Activate an Endpoint
1:         adapter.endpointActivation(messageEndpointFactory, activationSpec);
1:         
0:         // Give endpoint a chance to setup and register its listeners
1:         try {
0:             Thread.sleep(1000);
0:         } catch (Exception e) {
1: 
1:         }
1:         
1:         // Send the broker a message to that endpoint
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:         producer.send(session.createTextMessage("Hello!"));
1:         connection.close();
1:         
1:         // Wait for the message to be delivered.
1:         assertTrue(messageDelivered.await(5000, TimeUnit.MILLISECONDS));
1:         
1:         // Shut the Endpoint down.
1:         adapter.endpointDeactivation(messageEndpointFactory, activationSpec);
0:         adapter.stop();        
1:         
1:     }
1:     
0:     long txGenerator = System.currentTimeMillis();
1:     
0:     public Xid createXid() throws IOException {        
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1:             public int getFormatId() {
1:                 return 86;
1:             }
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1:         
1:     }
1: 
1: }
============================================================================