1:a0a1e64: /**
1:a0a1e64:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a0a1e64:  * contributor license agreements.  See the NOTICE file distributed with
1:a0a1e64:  * this work for additional information regarding copyright ownership.
1:a0a1e64:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a0a1e64:  * (the "License"); you may not use this file except in compliance with
1:a0a1e64:  * the License.  You may obtain a copy of the License at
1:a0a1e64:  *
1:a0a1e64:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a0a1e64:  *
1:a0a1e64:  * Unless required by applicable law or agreed to in writing, software
1:a0a1e64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0a1e64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0a1e64:  * See the License for the specific language governing permissions and
1:a0a1e64:  * limitations under the License.
1:a0a1e64:  */
1:a0a1e64: package org.apache.activemq.broker.region;
2:a0a1e64: 
1:00e4b25: import static org.junit.Assert.assertEquals;
1:552c0f0: import static org.junit.Assert.assertFalse;
1:00e4b25: import static org.junit.Assert.assertTrue;
1:6ac3138: 
1:6ac3138: import javax.jms.Connection;
1:6ac3138: import javax.jms.Message;
1:6ac3138: import javax.jms.MessageConsumer;
1:6ac3138: import javax.jms.MessageListener;
1:552c0f0: import javax.jms.MessageProducer;
1:6ac3138: import javax.jms.Session;
1:6ac3138: 
1:6ac3138: import org.apache.activemq.ActiveMQConnectionFactory;
1:a0a1e64: import org.apache.activemq.broker.BrokerService;
1:a0a1e64: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a0a1e64: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a0a1e64: import org.apache.activemq.command.ActiveMQDestination;
1:a0a1e64: import org.apache.activemq.command.ActiveMQQueue;
1:f0ed5d0: import org.apache.activemq.util.Wait;
1:f0ed5d0: import org.apache.activemq.util.Wait.Condition;
1:00e4b25: import org.junit.After;
1:00e4b25: import org.junit.Before;
1:00e4b25: import org.junit.Test;
1:552c0f0: import org.slf4j.Logger;
1:552c0f0: import org.slf4j.LoggerFactory;
1:552c0f0: 
1:00e4b25: public class DestinationGCTest {
1:a0a1e64: 
1:552c0f0:     protected static final Logger logger = LoggerFactory.getLogger(DestinationGCTest.class);
1:552c0f0: 
1:00e4b25:     private final ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:00e4b25:     private final ActiveMQQueue otherQueue = new ActiveMQQueue("TEST-OTHER");
1:a0a1e64: 
1:00e4b25:     private BrokerService brokerService;
1:00e4b25: 
1:00e4b25:     @Before
1:00e4b25:     public void setUp() throws Exception {
1:00e4b25:         brokerService = createBroker();
1:00e4b25:         brokerService.start();
1:00e4b25:         brokerService.waitUntilStarted();
1:00e4b25:     }
1:00e4b25: 
1:00e4b25:     @After
1:00e4b25:     public void tearDown() throws Exception {
1:00e4b25:         if (brokerService != null) {
1:00e4b25:             brokerService.stop();
1:00e4b25:             brokerService.waitUntilStopped();
1:00e4b25:         }
1:00e4b25:     }
1:00e4b25: 
1:a0a1e64:     protected BrokerService createBroker() throws Exception {
1:00e4b25:         PolicyEntry entry = new PolicyEntry();
1:00e4b25:         entry.setGcInactiveDestinations(true);
1:00e4b25:         entry.setInactiveTimeoutBeforeGC(3000);
1:00e4b25:         PolicyMap map = new PolicyMap();
1:00e4b25:         map.setDefaultEntry(entry);
1:00e4b25: 
1:00e4b25:         BrokerService broker = new BrokerService();
1:00e4b25:         broker.setPersistent(false);
1:00e4b25:         broker.setUseJmx(true);
1:a0a1e64:         broker.setDestinations(new ActiveMQDestination[] {queue});
1:a0a1e64:         broker.setSchedulePeriodForDestinationPurge(1000);
1:f0d9f83:         broker.setMaxPurgedDestinationsPerSweep(1);
1:a0a1e64:         broker.setDestinationPolicy(map);
1:00e4b25: 
1:a0a1e64:         return broker;
1:a0a1e64:     }
1:f0d9f83: 
1:00e4b25:     @Test(timeout = 60000)
1:6ac3138:     public void testDestinationGCWithActiveConsumers() throws Exception {
1:00e4b25:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:6ac3138: 
1:6ac3138:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:6ac3138:         Connection connection = factory.createConnection();
1:6ac3138:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6ac3138:         session.createProducer(otherQueue).close();
1:6ac3138:         MessageConsumer consumer = session.createConsumer(queue);
1:6ac3138:         consumer.setMessageListener(new MessageListener() {
1:6ac3138: 
1:6ac3138:             @Override
1:6ac3138:             public void onMessage(Message message) {
1:6ac3138:             }
1:6ac3138:         });
1:6ac3138: 
1:00e4b25:         connection.start();
1:6ac3138: 
1:6ac3138:         assertTrue("After GC runs there should be one Queue.", Wait.waitFor(new Condition() {
1:6ac3138:             @Override
1:6ac3138:             public boolean isSatisified() throws Exception {
1:00e4b25:                 return brokerService.getAdminView().getQueues().length == 1;
1:6ac3138:             }
1:6ac3138:         }));
1:6ac3138: 
1:6ac3138:         connection.close();
1:6ac3138:     }
1:6ac3138: 
1:00e4b25:     @Test(timeout = 60000)
1:a0a1e64:     public void testDestinationGc() throws Exception {
1:00e4b25:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:f0ed5d0:         assertTrue("After GC runs the Queue should be empty.", Wait.waitFor(new Condition() {
1:f0ed5d0:             @Override
1:f0ed5d0:             public boolean isSatisified() throws Exception {
1:00e4b25:                 return brokerService.getAdminView().getQueues().length == 0;
1:f0ed5d0:             }
1:f0ed5d0:         }));
1:a0a1e64:     }
1:552c0f0: 
1:00e4b25:     @Test(timeout = 60000)
1:f0d9f83:     public void testDestinationGcLimit() throws Exception {
1:f0d9f83: 
1:00e4b25:         brokerService.getAdminView().addQueue("TEST1");
1:00e4b25:         brokerService.getAdminView().addQueue("TEST2");
1:00e4b25:         brokerService.getAdminView().addQueue("TEST3");
1:00e4b25:         brokerService.getAdminView().addQueue("TEST4");
1:f0d9f83: 
1:00e4b25:         assertEquals(5, brokerService.getAdminView().getQueues().length);
1:f0d9f83:         Thread.sleep(7000);
1:00e4b25: 
1:00e4b25:         int queues = brokerService.getAdminView().getQueues().length;
1:f0d9f83:         assertTrue(queues > 0 && queues < 5);
1:00e4b25: 
1:f0ed5d0:         assertTrue("After GC runs the Queue should be empty.", Wait.waitFor(new Condition() {
1:f0ed5d0:             @Override
1:f0ed5d0:             public boolean isSatisified() throws Exception {
1:00e4b25:                 return brokerService.getAdminView().getQueues().length == 0;
1:f0ed5d0:             }
1:f0ed5d0:         }));
1:f0d9f83:     }
1:a0a1e64: 
1:552c0f0:     @Test(timeout = 60000)
1:552c0f0:     public void testDestinationGcAnonymousProducer() throws Exception {
1:552c0f0: 
1:552c0f0:         final ActiveMQQueue q = new ActiveMQQueue("Q.TEST.ANONYMOUS.PRODUCER");
1:552c0f0: 
1:552c0f0:         brokerService.getAdminView().addQueue(q.getPhysicalName());
1:552c0f0:         assertEquals(2, brokerService.getAdminView().getQueues().length);
1:552c0f0: 
1:552c0f0:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:552c0f0:         final Connection connection = factory.createConnection();
1:552c0f0:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:552c0f0: 
1:552c0f0:         // wait for the queue to be marked for GC
1:552c0f0:         logger.info("Waiting for '{}' to be marked for GC...", q);
1:552c0f0:         Wait.waitFor(new Condition() {
1:552c0f0:             @Override
1:552c0f0:             public boolean isSatisified() throws Exception {
1:552c0f0:                 return brokerService.getDestination(q).canGC();
1:552c0f0:             }
1:552c0f0:         }, Wait.MAX_WAIT_MILLIS, 500L);
1:552c0f0: 
1:552c0f0:         // create anonymous producer and send a message
1:552c0f0:         logger.info("Sending PERSISTENT message to QUEUE '{}'", q.getPhysicalName());
1:552c0f0:         final MessageProducer producer = session.createProducer(null);
1:552c0f0:         producer.send(q, session.createTextMessage());
1:552c0f0:         producer.close();
1:552c0f0: 
1:552c0f0:         assertFalse(brokerService.getDestination(q).canGC());
1:9f5fff7: 
1:9f5fff7:         connection.close();
1:552c0f0:     }
1:a0a1e64: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9f5fff7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
commit:00e4b25
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class DestinationGCTest {
1:     private final ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:     private final ActiveMQQueue otherQueue = new ActiveMQQueue("TEST-OTHER");
1:     private BrokerService brokerService;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setGcInactiveDestinations(true);
1:         entry.setInactiveTimeoutBeforeGC(3000);
1:         PolicyMap map = new PolicyMap();
1:         map.setDefaultEntry(entry);
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1: 
1:     @Test(timeout = 60000)
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
/////////////////////////////////////////////////////////////////////////
1:         connection.start();
1:                 return brokerService.getAdminView().getQueues().length == 1;
1:     @Test(timeout = 60000)
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:                 return brokerService.getAdminView().getQueues().length == 0;
1:     @Test(timeout = 60000)
1:         brokerService.getAdminView().addQueue("TEST1");
1:         brokerService.getAdminView().addQueue("TEST2");
1:         brokerService.getAdminView().addQueue("TEST3");
1:         brokerService.getAdminView().addQueue("TEST4");
1:         assertEquals(5, brokerService.getAdminView().getQueues().length);
1: 
1:         int queues = brokerService.getAdminView().getQueues().length;
1: 
1:                 return brokerService.getAdminView().getQueues().length == 0;
commit:6ac3138
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0:     ActiveMQQueue otherQueue = new ActiveMQQueue("TEST-OTHER");
/////////////////////////////////////////////////////////////////////////
1:     public void testDestinationGCWithActiveConsumers() throws Exception {
0:         assertEquals(1, broker.getAdminView().getQueues().length);
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createProducer(otherQueue).close();
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:             }
1:         });
0:         connection.start();
1: 
0:         TimeUnit.SECONDS.sleep(5);
1: 
1:         assertTrue("After GC runs there should be one Queue.", Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getAdminView().getQueues().length == 1;
1:             }
1:         }));
1: 
1:         connection.close();
1:     }
1: 
author:Brian D. Johnson
-------------------------------------------------------------------------------
commit:552c0f0
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import javax.jms.MessageProducer;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     protected static final Logger logger = LoggerFactory.getLogger(DestinationGCTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testDestinationGcAnonymousProducer() throws Exception {
1: 
1:         final ActiveMQQueue q = new ActiveMQQueue("Q.TEST.ANONYMOUS.PRODUCER");
1: 
1:         brokerService.getAdminView().addQueue(q.getPhysicalName());
1:         assertEquals(2, brokerService.getAdminView().getQueues().length);
1: 
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         final Connection connection = factory.createConnection();
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         // wait for the queue to be marked for GC
1:         logger.info("Waiting for '{}' to be marked for GC...", q);
1:         Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getDestination(q).canGC();
1:             }
1:         }, Wait.MAX_WAIT_MILLIS, 500L);
1: 
1:         // create anonymous producer and send a message
1:         logger.info("Sending PERSISTENT message to QUEUE '{}'", q.getPhysicalName());
1:         final MessageProducer producer = session.createProducer(null);
1:         producer.send(q, session.createTextMessage());
1:         producer.close();
1: 
1:         assertFalse(brokerService.getDestination(q).canGC());
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:f0ed5d0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("After GC runs the Queue should be empty.", Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getAdminView().getQueues().length == 0;
1:             }
1:         }));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("After GC runs the Queue should be empty.", Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getAdminView().getQueues().length == 0;
1:             }
1:         }));
commit:f0d9f83
/////////////////////////////////////////////////////////////////////////
1:         broker.setMaxPurgedDestinationsPerSweep(1);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testDestinationGcLimit() throws Exception {
1: 
0:         broker.getAdminView().addQueue("TEST1");
0:         broker.getAdminView().addQueue("TEST2");
0:         broker.getAdminView().addQueue("TEST3");
0:         broker.getAdminView().addQueue("TEST4");
1: 
0:         assertEquals(5, broker.getAdminView().getQueues().length);
1:         Thread.sleep(7000);
0:         int queues = broker.getAdminView().getQueues().length;
1:         assertTrue(queues > 0 && queues < 5);
0:         Thread.sleep(10000);
0:         assertEquals(0, broker.getAdminView().getQueues().length);
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a0a1e64
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: public class DestinationGCTest extends EmbeddedBrokerTestSupport {
1: 
0:     ActiveMQQueue queue = new ActiveMQQueue("TEST");
1: 
0:     @Override
1:     protected BrokerService createBroker() throws Exception {
0:         BrokerService broker = super.createBroker();
1:         broker.setDestinations(new ActiveMQDestination[] {queue});
1:         broker.setSchedulePeriodForDestinationPurge(1000);
0:         PolicyEntry entry = new PolicyEntry();
0:         entry.setGcInactiveDestinations(true);
0:         entry.setInactiveTimoutBeforeGC(3000);
0:         PolicyMap map = new PolicyMap();
0:         map.setDefaultEntry(entry);
1:         broker.setDestinationPolicy(map);
1:         return broker;
1:     }
1: 
1:     public void testDestinationGc() throws Exception {
0:         assertEquals(1, broker.getAdminView().getQueues().length);
0:         Thread.sleep(7000);
0:         assertEquals(0, broker.getAdminView().getQueues().length);
1:     }
1: }
============================================================================