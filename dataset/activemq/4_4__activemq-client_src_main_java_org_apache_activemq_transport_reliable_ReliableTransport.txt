1:e6954f1: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:e6954f1:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:e6954f1:  * Unless required by applicable law or agreed to in writing, software
1:e6954f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6954f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6954f1:  * See the License for the specific language governing permissions and
1:e6954f1:  * limitations under the License.
1:e6954f1:  */
1:e6954f1: package org.apache.activemq.transport.reliable;
1:72b382d: 
1:9ca56a0: import java.io.IOException;
1:9ca56a0: import java.util.SortedSet;
1:9ca56a0: import java.util.TreeSet;
1:9ca56a0: 
1:e6954f1: import org.apache.activemq.command.Command;
1:8d589ec: import org.apache.activemq.command.ReplayCommand;
1:72b382d: import org.apache.activemq.command.Response;
1:e6954f1: import org.apache.activemq.openwire.CommandIdComparator;
1:72b382d: import org.apache.activemq.transport.FutureResponse;
1:72b382d: import org.apache.activemq.transport.ResponseCorrelator;
1:e6954f1: import org.apache.activemq.transport.Transport;
1:f3ef1a9: import org.apache.activemq.transport.udp.UdpTransport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:65fdf07: 
1:e6954f1: /**
1:e6954f1:  * This interceptor deals with out of order commands together with being able to
1:e6954f1:  * handle dropped commands and the re-requesting dropped commands.
1:d977b0c:  *
1:d977b0c:  * @deprecated
1:e6954f1:  */
1:d977b0c: @Deprecated
1:72b382d: public class ReliableTransport extends ResponseCorrelator {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ReliableTransport.class);
1:72b382d: 
1:e6954f1:     private ReplayStrategy replayStrategy;
1:d977b0c:     private final SortedSet<Command> commands = new TreeSet<Command>(new CommandIdComparator());
1:e6954f1:     private int expectedCounter = 1;
1:8d589ec:     private int replayBufferCommandCount = 50;
1:72b382d:     private int requestTimeout = 2000;
1:8d589ec:     private ReplayBuffer replayBuffer;
1:8d589ec:     private Replayer replayer;
1:f3ef1a9:     private UdpTransport udpTransport;
1:72b382d: 
1:e6954f1:     public ReliableTransport(Transport next, ReplayStrategy replayStrategy) {
1:e6954f1:         super(next);
1:364337b:         this.replayStrategy = replayStrategy;
1:364337b:     }
1:8d589ec: 
1:f812e34:     public ReliableTransport(Transport next, UdpTransport udpTransport) throws IOException {
1:f3ef1a9:         super(next, udpTransport.getSequenceGenerator());
1:f3ef1a9:         this.udpTransport = udpTransport;
1:f3ef1a9:         this.replayer = udpTransport.createReplayer();
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     /**
1:8d589ec:      * Requests that a range of commands be replayed
1:8d589ec:      */
1:8d589ec:     public void requestReplay(int fromCommandId, int toCommandId) {
1:8d589ec:         ReplayCommand replay = new ReplayCommand();
1:8d589ec:         replay.setFirstNakNumber(fromCommandId);
1:8d589ec:         replay.setLastNakNumber(toCommandId);
1:8d589ec:         try {
1:8d589ec:             oneway(replay);
1:f812e34:         } catch (IOException e) {
1:8d589ec:             getTransportListener().onException(e);
1:8d589ec:         }
1:8d589ec:     }
1:8d589ec: 
1:d977b0c:     @Override
1:9ca56a0:     public Object request(Object o) throws IOException {
1:f812e34:         final Command command = (Command)o;
1:84fd773:         FutureResponse response = asyncRequest(command, null);
1:72b382d:         while (true) {
1:72b382d:             Response result = response.getResult(requestTimeout);
1:72b382d:             if (result != null) {
1:72b382d:                 return result;
1:8d589ec:             }
1:8d589ec:             onMissingResponse(command, response);
1:72b382d:         }
1:72b382d:     }
1:8d589ec: 
1:d977b0c:     @Override
1:9ca56a0:     public Object request(Object o, int timeout) throws IOException {
1:f812e34:         final Command command = (Command)o;
1:84fd773:         FutureResponse response = asyncRequest(command, null);
1:72b382d:         while (timeout > 0) {
1:72b382d:             int time = timeout;
1:f3ef1a9:             if (timeout > requestTimeout) {
1:72b382d:                 time = requestTimeout;
1:72b382d:             }
1:72b382d:             Response result = response.getResult(time);
1:72b382d:             if (result != null) {
1:72b382d:                 return result;
1:72b382d:             }
1:8d589ec:             onMissingResponse(command, response);
1:72b382d:             timeout -= time;
1:72b382d:         }
1:72b382d:         return response.getResult(0);
1:72b382d:     }
1:8d589ec: 
1:d977b0c:     @Override
1:9ca56a0:     public void onCommand(Object o) {
1:f812e34:         Command command = (Command)o;
1:72b382d:         // lets pass wireformat through
1:72b382d:         if (command.isWireFormatInfo()) {
1:72b382d:             super.onCommand(command);
1:72b382d:             return;
1:f812e34:         } else if (command.getDataStructureType() == ReplayCommand.DATA_STRUCTURE_TYPE) {
1:f812e34:             replayCommands((ReplayCommand)command);
1:8d589ec:             return;
1:8d589ec:         }
1:8d589ec: 
1:e6954f1:         int actualCounter = command.getCommandId();
1:e6954f1:         boolean valid = expectedCounter == actualCounter;
1:364337b: 
1:e6954f1:         if (!valid) {
1:e6954f1:             synchronized (commands) {
1:f3ef1a9:                 int nextCounter = actualCounter;
1:f3ef1a9:                 boolean empty = commands.isEmpty();
1:f3ef1a9:                 if (!empty) {
1:933eb2f:                     Command nextAvailable = commands.first();
1:f3ef1a9:                     nextCounter = nextAvailable.getCommandId();
1:f3ef1a9:                 }
1:f812e34: 
1:e6954f1:                 try {
1:f3ef1a9:                     boolean keep = replayStrategy.onDroppedPackets(this, expectedCounter, actualCounter, nextCounter);
1:f3ef1a9: 
1:65fdf07:                     if (keep) {
1:65fdf07:                         // lets add it to the list for later on
1:fc00993:                         if (LOG.isDebugEnabled()) {
1:fc00993:                             LOG.debug("Received out of order command which is being buffered for later: " + command);
1:72b382d:                         }
1:65fdf07:                         commands.add(command);
1:72b382d:                     }
1:f812e34:                 } catch (IOException e) {
1:8d589ec:                     onException(e);
1:72b382d:                 }
1:364337b: 
1:f3ef1a9:                 if (!empty) {
1:e6954f1:                     // lets see if the first item in the set is the next
1:e6954f1:                     // expected
1:933eb2f:                     command = commands.first();
1:e6954f1:                     valid = expectedCounter == command.getCommandId();
1:e6954f1:                     if (valid) {
1:e6954f1:                         commands.remove(command);
1:65fdf07:                     }
5:e6954f1:                 }
1:e6954f1:             }
1:e6954f1:         }
1:72b382d: 
1:e6954f1:         while (valid) {
1:e6954f1:             // we've got a valid header so increment counter
1:e6954f1:             replayStrategy.onReceivedPacket(this, expectedCounter);
1:e6954f1:             expectedCounter++;
1:72b382d:             super.onCommand(command);
1:72b382d: 
1:e6954f1:             synchronized (commands) {
1:e6954f1:                 // we could have more commands left
1:e6954f1:                 valid = !commands.isEmpty();
1:e6954f1:                 if (valid) {
1:e6954f1:                     // lets see if the first item in the set is the next
1:e6954f1:                     // expected
1:933eb2f:                     command = commands.first();
1:e6954f1:                     valid = expectedCounter == command.getCommandId();
1:e6954f1:                     if (valid) {
1:e6954f1:                         commands.remove(command);
1:e6954f1:                     }
1:e6954f1:                 }
1:e6954f1:             }
1:e6954f1:         }
1:e6954f1:     }
1:72b382d: 
1:65fdf07:     public int getBufferedCommandCount() {
1:65fdf07:         synchronized (commands) {
1:65fdf07:             return commands.size();
1:65fdf07:         }
1:65fdf07:     }
1:72b382d: 
1:65fdf07:     public int getExpectedCounter() {
1:65fdf07:         return expectedCounter;
1:65fdf07:     }
3:65fdf07: 
1:65fdf07:     /**
1:72b382d:      * This property should never really be set - but is mutable primarily for
1:72b382d:      * test cases
1:65fdf07:      */
1:65fdf07:     public void setExpectedCounter(int expectedCounter) {
1:65fdf07:         this.expectedCounter = expectedCounter;
1:65fdf07:     }
1:364337b: 
1:364337b:     public int getRequestTimeout() {
1:364337b:         return requestTimeout;
1:364337b:     }
1:364337b: 
1:364337b:     /**
1:f3ef1a9:      * Sets the default timeout of requests before starting to request commands
1:f3ef1a9:      * are replayed
1:364337b:      */
1:364337b:     public void setRequestTimeout(int requestTimeout) {
1:364337b:         this.requestTimeout = requestTimeout;
1:e6954f1:     }
1:364337b: 
1:364337b:     public ReplayStrategy getReplayStrategy() {
1:364337b:         return replayStrategy;
1:364337b:     }
1:364337b: 
1:8d589ec:     public ReplayBuffer getReplayBuffer() {
1:f3ef1a9:         if (replayBuffer == null) {
1:f3ef1a9:             replayBuffer = createReplayBuffer();
1:f3ef1a9:         }
1:8d589ec:         return replayBuffer;
1:e6954f1:     }
1:8d589ec: 
1:8d589ec:     public void setReplayBuffer(ReplayBuffer replayBuffer) {
1:8d589ec:         this.replayBuffer = replayBuffer;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public int getReplayBufferCommandCount() {
1:8d589ec:         return replayBufferCommandCount;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     /**
1:8d589ec:      * Sets the default number of commands which are buffered
1:8d589ec:      */
1:8d589ec:     public void setReplayBufferCommandCount(int replayBufferSize) {
1:8d589ec:         this.replayBufferCommandCount = replayBufferSize;
1:8d589ec:     }
1:8d589ec: 
1:f3ef1a9:     public void setReplayStrategy(ReplayStrategy replayStrategy) {
1:f3ef1a9:         this.replayStrategy = replayStrategy;
1:f3ef1a9:     }
1:f3ef1a9: 
1:f3ef1a9:     public Replayer getReplayer() {
1:f3ef1a9:         return replayer;
1:f3ef1a9:     }
1:f3ef1a9: 
1:f3ef1a9:     public void setReplayer(Replayer replayer) {
1:f3ef1a9:         this.replayer = replayer;
1:f3ef1a9:     }
1:f3ef1a9: 
1:d977b0c:     @Override
1:364337b:     public String toString() {
1:364337b:         return next.toString();
1:364337b:     }
1:f3ef1a9: 
1:d977b0c:     @Override
1:8d589ec:     public void start() throws Exception {
1:f3ef1a9:         if (udpTransport != null) {
1:f3ef1a9:             udpTransport.setReplayBuffer(getReplayBuffer());
1:8d589ec:         }
1:f3ef1a9:         if (replayStrategy == null) {
1:f3ef1a9:             throw new IllegalArgumentException("Property replayStrategy not specified");
1:f3ef1a9:         }
1:f3ef1a9:         super.start();
1:8d589ec:     }
1:8d589ec: 
1:72b382d:     /**
1:72b382d:      * Lets attempt to replay the request as a command may have disappeared
1:72b382d:      */
1:8d589ec:     protected void onMissingResponse(Command command, FutureResponse response) {
1:fc00993:         LOG.debug("Still waiting for response on: " + this + " to command: " + command + " sending replay message");
1:f3ef1a9: 
1:8d589ec:         int commandId = command.getCommandId();
1:8d589ec:         requestReplay(commandId, commandId);
1:72b382d:     }
1:f3ef1a9: 
1:8d589ec:     protected ReplayBuffer createReplayBuffer() {
1:8d589ec:         return new DefaultReplayBuffer(getReplayBufferCommandCount());
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     protected void replayCommands(ReplayCommand command) {
1:8d589ec:         try {
1:f3ef1a9:             if (replayer == null) {
1:f3ef1a9:                 onException(new IOException("Cannot replay commands. No replayer property configured"));
1:f3ef1a9:             }
1:fc00993:             if (LOG.isDebugEnabled()) {
1:fc00993:                 LOG.debug("Processing replay command: " + command);
1:f3ef1a9:             }
1:f3ef1a9:             getReplayBuffer().replayMessages(command.getFirstNakNumber(), command.getLastNakNumber(), replayer);
1:f3ef1a9: 
1:f3ef1a9:             // TODO we could proactively remove ack'd stuff from the replay
1:f3ef1a9:             // buffer
1:8d589ec:             // if we only have a single client talking to us
1:f812e34:         } catch (IOException e) {
1:8d589ec:             onException(e);
1:8d589ec:         }
1:8d589ec:     }
1:8d589ec: 
1:8d589ec: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d977b0c
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * @deprecated
1: @Deprecated
1:     private final SortedSet<Command> commands = new TreeSet<Command>(new CommandIdComparator());
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private SortedSet<Command> commands = new TreeSet<Command>(new CommandIdComparator());
/////////////////////////////////////////////////////////////////////////
1:                     Command nextAvailable = commands.first();
/////////////////////////////////////////////////////////////////////////
1:                     command = commands.first();
/////////////////////////////////////////////////////////////////////////
1:                     command = commands.first();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ReliableTransport.class);
/////////////////////////////////////////////////////////////////////////
1:                         if (LOG.isDebugEnabled()) {
1:                             LOG.debug("Received out of order command which is being buffered for later: " + command);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Still waiting for response on: " + this + " to command: " + command + " sending replay message");
/////////////////////////////////////////////////////////////////////////
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug("Processing replay command: " + command);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     public ReliableTransport(Transport next, UdpTransport udpTransport) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException e) {
1:         final Command command = (Command)o;
/////////////////////////////////////////////////////////////////////////
1:         final Command command = (Command)o;
/////////////////////////////////////////////////////////////////////////
1:         Command command = (Command)o;
1:         } else if (command.getDataStructureType() == ReplayCommand.DATA_STRUCTURE_TYPE) {
1:             replayCommands((ReplayCommand)command);
/////////////////////////////////////////////////////////////////////////
0:                     Command nextAvailable = (Command)commands.first();
1: 
/////////////////////////////////////////////////////////////////////////
1:                 } catch (IOException e) {
0:                     command = (Command)commands.first();
/////////////////////////////////////////////////////////////////////////
0:                     command = (Command)commands.first();
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Object request(Object o) throws IOException {
0:     	final Command command = (Command) o;
/////////////////////////////////////////////////////////////////////////
1:     public Object request(Object o, int timeout) throws IOException {
0:     	final Command command = (Command) o;
/////////////////////////////////////////////////////////////////////////
1:     public void onCommand(Object o) {
0:     	Command command = (Command) o;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:84fd773
/////////////////////////////////////////////////////////////////////////
1:         FutureResponse response = asyncRequest(command, null);
/////////////////////////////////////////////////////////////////////////
1:         FutureResponse response = asyncRequest(command, null);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ReliableTransport.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.udp.UdpTransport;
/////////////////////////////////////////////////////////////////////////
1:     private UdpTransport udpTransport;
0:     public ReliableTransport(Transport next, UdpTransport udpTransport)
0:             throws IOException {
1:         super(next, udpTransport.getSequenceGenerator());
1:         this.udpTransport = udpTransport;
1:         this.replayer = udpTransport.createReplayer();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (timeout > requestTimeout) {
/////////////////////////////////////////////////////////////////////////
1:                 int nextCounter = actualCounter;
1:                 boolean empty = commands.isEmpty();
1:                 if (!empty) {
0:                     Command nextAvailable = (Command) commands.first();
1:                     nextCounter = nextAvailable.getCommandId();
1:                 }
1:                 
1:                     boolean keep = replayStrategy.onDroppedPackets(this, expectedCounter, actualCounter, nextCounter);
/////////////////////////////////////////////////////////////////////////
1:                 if (!empty) {
/////////////////////////////////////////////////////////////////////////
1:      * Sets the default timeout of requests before starting to request commands
1:      * are replayed
1:         if (replayBuffer == null) {
1:             replayBuffer = createReplayBuffer();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void setReplayStrategy(ReplayStrategy replayStrategy) {
1:         this.replayStrategy = replayStrategy;
1:     }
1: 
1:     public Replayer getReplayer() {
1:         return replayer;
1:     }
1: 
1:     public void setReplayer(Replayer replayer) {
1:         this.replayer = replayer;
1:     }
1: 
1: 
1:         if (udpTransport != null) {
1:             udpTransport.setReplayBuffer(getReplayBuffer());
1:         if (replayStrategy == null) {
1:             throw new IllegalArgumentException("Property replayStrategy not specified");
1:         }
1:         super.start();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             if (replayer == null) {
1:                 onException(new IOException("Cannot replay commands. No replayer property configured"));
1:             }
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Processing replay command: " + command);
1:             }
1:             getReplayBuffer().replayMessages(command.getFirstNakNumber(), command.getLastNakNumber(), replayer);
1: 
1:             // TODO we could proactively remove ack'd stuff from the replay
1:             // buffer
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ReplayCommand;
/////////////////////////////////////////////////////////////////////////
1:     private int replayBufferCommandCount = 50;
1:     private ReplayBuffer replayBuffer;
1:     private Replayer replayer;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Requests that a range of commands be replayed
1:      */
1:     public void requestReplay(int fromCommandId, int toCommandId) {
1:         ReplayCommand replay = new ReplayCommand();
1:         replay.setFirstNakNumber(fromCommandId);
1:         replay.setLastNakNumber(toCommandId);
1:         try {
1:             oneway(replay);
1:         }
0:         catch (IOException e) {
1:             getTransportListener().onException(e);
1:         }
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:             onMissingResponse(command, response);
/////////////////////////////////////////////////////////////////////////
1:             onMissingResponse(command, response);
/////////////////////////////////////////////////////////////////////////
0:         else if (command.getDataStructureType() == ReplayCommand.DATA_STRUCTURE_TYPE) {
0:             replayCommands((ReplayCommand) command);
1:             return;
1:         }
/////////////////////////////////////////////////////////////////////////
1:                     onException(e);
/////////////////////////////////////////////////////////////////////////
1:     public ReplayBuffer getReplayBuffer() {
1:         return replayBuffer;
1:     }
1: 
1:     public void setReplayBuffer(ReplayBuffer replayBuffer) {
1:         this.replayBuffer = replayBuffer;
1:     }
1: 
1:     public int getReplayBufferCommandCount() {
1:         return replayBufferCommandCount;
1:     }
1: 
1:     /**
1:      * Sets the default number of commands which are buffered
1:      */
1:     public void setReplayBufferCommandCount(int replayBufferSize) {
1:         this.replayBufferCommandCount = replayBufferSize;
1:     }
1: 
1:     
1:     
1:     public void start() throws Exception {
0:         super.start();
0:         if (replayBuffer == null) {
0:             replayBuffer = createReplayBuffer();
1:         }
1:     }
1: 
1:     protected void onMissingResponse(Command command, FutureResponse response) {
0:         log.debug("Still waiting for response on: " + this + " to command: " + command + " sending replay message");
1:         
1:         int commandId = command.getCommandId();
1:         requestReplay(commandId, commandId);
1:     
1:     protected ReplayBuffer createReplayBuffer() {
1:         return new DefaultReplayBuffer(getReplayBufferCommandCount());
1:     }
1: 
1:     protected void replayCommands(ReplayCommand command) {
1:         try {
0:             replayBuffer.replayMessages(command.getFirstNakNumber(), command.getLastNakNumber(), replayer);
1:             
0:             // TODO we could proactively remove ack'd stuff from the replay buffer
1:             // if we only have a single client talking to us
1:         }
0:         catch (IOException e) {
1:             onException(e);
1:         }
1:     }
1: 
commit:364337b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.IntSequenceGenerator;
/////////////////////////////////////////////////////////////////////////
0:     public ReliableTransport(Transport next, IntSequenceGenerator sequenceGenerator, ReplayStrategy replayStrategy) {
0:         super(next, sequenceGenerator);
1:         this.replayStrategy = replayStrategy;
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public int getRequestTimeout() {
1:         return requestTimeout;
1:     }
1: 
1:     /**
0:      * Sets the default timeout of requests before starting to request commands are replayed
1:      */
1:     public void setRequestTimeout(int requestTimeout) {
1:         this.requestTimeout = requestTimeout;
1:     public ReplayStrategy getReplayStrategy() {
1:         return replayStrategy;
1:     }
1: 
1: 
1:     public String toString() {
1:         return next.toString();
1:     }
0:         log.debug("Still waiting for response on: " + this + " to command: " + command);
commit:72b382d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.transport.FutureResponse;
1: import org.apache.activemq.transport.ResponseCorrelator;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1: public class ReliableTransport extends ResponseCorrelator {
0:     private static final Log log = LogFactory.getLog(ReliableTransport.class);
1: 
1:     private int requestTimeout = 2000;
0:     public Response request(Command command) throws IOException {
0:         FutureResponse response = asyncRequest(command);
1:         while (true) {
1:             Response result = response.getResult(requestTimeout);
1:             if (result != null) {
1:                 return result;
1:             }
0:             replayRequest(command, response);
1:         }
1:     }
1: 
0:     public Response request(Command command, int timeout) throws IOException {
0:         FutureResponse response = asyncRequest(command);
1:         while (timeout > 0) {
1:             int time = timeout;
0:             if (timeout > requestTimeout) { 
1:                 time = requestTimeout;
1:             }
1:             Response result = response.getResult(time);
1:             if (result != null) {
1:                 return result;
1:             }
0:             replayRequest(command, response);
1:             timeout -= time;
1:         }
1:         return response.getResult(0);
1:     }
1: 
1:         // lets pass wireformat through
1:         if (command.isWireFormatInfo()) {
1:             super.onCommand(command);
1:             return;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:                         if (log.isDebugEnabled()) {
0:                             log.debug("Received out of order command which is being buffered for later: " + command);
1:                         }
/////////////////////////////////////////////////////////////////////////
1:             super.onCommand(command);
/////////////////////////////////////////////////////////////////////////
1: 
1:      * This property should never really be set - but is mutable primarily for
1:      * test cases
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Lets attempt to replay the request as a command may have disappeared
1:      */
0:     protected void replayRequest(Command command, FutureResponse response) {
1:     }
commit:65fdf07
/////////////////////////////////////////////////////////////////////////
0:                     boolean keep = replayStrategy.onDroppedPackets(this, expectedCounter, actualCounter);
1:                     
1:                     if (keep) {
1:                         // lets add it to the list for later on
1:                         commands.add(command);
1:                     }
/////////////////////////////////////////////////////////////////////////
1:     public int getBufferedCommandCount() {
1:         synchronized (commands) {
1:             return commands.size();
1:         }
1:     }
1:     
1:     public int getExpectedCounter() {
1:         return expectedCounter;
1:     }
1: 
1:     /**
0:      * This property should never really be set - but is mutable primarily for test cases
1:      */
1:     public void setExpectedCounter(int expectedCounter) {
1:         this.expectedCounter = expectedCounter;
1:     }
1: 
commit:e6954f1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.reliable;
0: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.openwire.CommandIdComparator;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportFilter;
0: 
0: import java.io.IOException;
0: import java.util.SortedSet;
0: import java.util.TreeSet;
0: 
1: /**
1:  * This interceptor deals with out of order commands together with being able to
1:  * handle dropped commands and the re-requesting dropped commands.
1:  * 
0:  * @version $Revision$
1:  */
0: public class ReliableTransport extends TransportFilter {
1:     private ReplayStrategy replayStrategy;
0:     private SortedSet commands = new TreeSet(new CommandIdComparator());
1:     private int expectedCounter = 1;
0: 
1:     public ReliableTransport(Transport next, ReplayStrategy replayStrategy) {
1:         super(next);
0:         this.replayStrategy = replayStrategy;
1:     }
0: 
0:     public void onCommand(Command command) {
1:         int actualCounter = command.getCommandId();
1:         boolean valid = expectedCounter == actualCounter;
0: 
1:         if (!valid) {
1:             synchronized (commands) {
0:                 // lets add it to the list for later on
0:                 commands.add(command);
0: 
1:                 try {
0:                     replayStrategy.onDroppedPackets(this, expectedCounter, actualCounter);
1:                 }
0:                 catch (IOException e) {
0:                     getTransportListener().onException(e);
1:                 }
0: 
0:                 if (!commands.isEmpty()) {
1:                     // lets see if the first item in the set is the next
1:                     // expected
0:                     command = (Command) commands.first();
1:                     valid = expectedCounter == command.getCommandId();
1:                     if (valid) {
1:                         commands.remove(command);
1:                     }
1:                 }
1:             }
1:         }
0: 
1:         while (valid) {
1:             // we've got a valid header so increment counter
1:             replayStrategy.onReceivedPacket(this, expectedCounter);
1:             expectedCounter++;
0:             getTransportListener().onCommand(command);
0: 
1:             synchronized (commands) {
1:                 // we could have more commands left
1:                 valid = !commands.isEmpty();
1:                 if (valid) {
1:                     // lets see if the first item in the set is the next
1:                     // expected
0:                     command = (Command) commands.first();
1:                     valid = expectedCounter == command.getCommandId();
1:                     if (valid) {
1:                         commands.remove(command);
1:                     }
1:                 }
1:             }
1:         }
1:     }
0: 
0:     public String toString() {
0:         return next.toString();
1:     }
0: 
1: }
============================================================================