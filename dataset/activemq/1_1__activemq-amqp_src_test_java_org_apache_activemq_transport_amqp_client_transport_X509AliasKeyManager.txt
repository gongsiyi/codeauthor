1:82a5839: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one
1:82a5839:  * or more contributor license agreements.  See the NOTICE file
1:82a5839:  * distributed with this work for additional information
1:82a5839:  * regarding copyright ownership.  The ASF licenses this file
1:82a5839:  * to you under the Apache License, Version 2.0 (the
1:82a5839:  * "License"); you may not use this file except in compliance
1:82a5839:  * with the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *   http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing,
1:82a5839:  * software distributed under the License is distributed on an
1:82a5839:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:82a5839:  * KIND, either express or implied.  See the License for the
1:82a5839:  * specific language governing permissions and limitations
1:82a5839:  * under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
1:82a5839: 
1:82a5839: import java.net.Socket;
1:82a5839: import java.security.Principal;
1:82a5839: import java.security.PrivateKey;
1:82a5839: import java.security.cert.X509Certificate;
1:82a5839: 
1:82a5839: import javax.net.ssl.SSLEngine;
1:82a5839: import javax.net.ssl.X509ExtendedKeyManager;
1:82a5839: 
1:82a5839: /**
1:82a5839:  * An X509ExtendedKeyManager wrapper which always chooses and only
1:82a5839:  * returns the given alias, and defers retrieval to the delegate
1:82a5839:  * key manager.
1:82a5839:  */
1:82a5839: public class X509AliasKeyManager extends X509ExtendedKeyManager {
1:82a5839:     private X509ExtendedKeyManager delegate;
1:82a5839:     private String alias;
1:82a5839: 
1:82a5839:     public X509AliasKeyManager(String alias, X509ExtendedKeyManager delegate) throws IllegalArgumentException {
1:82a5839:         if (alias == null) {
1:82a5839:             throw new IllegalArgumentException("The given key alias must not be null.");
1:82a5839:         }
1:82a5839: 
1:82a5839:         this.alias = alias;
1:82a5839:         this.delegate = delegate;
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
1:82a5839:         return alias;
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
1:82a5839:         return alias;
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public X509Certificate[] getCertificateChain(String alias) {
1:82a5839:         return delegate.getCertificateChain(alias);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public String[] getClientAliases(String keyType, Principal[] issuers) {
1:82a5839:         return new String[] { alias };
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public PrivateKey getPrivateKey(String alias) {
1:82a5839:         return delegate.getPrivateKey(alias);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public String[] getServerAliases(String keyType, Principal[] issuers) {
1:82a5839:         return new String[] { alias };
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {
1:82a5839:         return alias;
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine) {
1:82a5839:         return alias;
1:82a5839:     }
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: import java.net.Socket;
1: import java.security.Principal;
1: import java.security.PrivateKey;
1: import java.security.cert.X509Certificate;
1: 
1: import javax.net.ssl.SSLEngine;
1: import javax.net.ssl.X509ExtendedKeyManager;
1: 
1: /**
1:  * An X509ExtendedKeyManager wrapper which always chooses and only
1:  * returns the given alias, and defers retrieval to the delegate
1:  * key manager.
1:  */
1: public class X509AliasKeyManager extends X509ExtendedKeyManager {
1:     private X509ExtendedKeyManager delegate;
1:     private String alias;
1: 
1:     public X509AliasKeyManager(String alias, X509ExtendedKeyManager delegate) throws IllegalArgumentException {
1:         if (alias == null) {
1:             throw new IllegalArgumentException("The given key alias must not be null.");
1:         }
1: 
1:         this.alias = alias;
1:         this.delegate = delegate;
1:     }
1: 
1:     @Override
1:     public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
1:         return alias;
1:     }
1: 
1:     @Override
1:     public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
1:         return alias;
1:     }
1: 
1:     @Override
1:     public X509Certificate[] getCertificateChain(String alias) {
1:         return delegate.getCertificateChain(alias);
1:     }
1: 
1:     @Override
1:     public String[] getClientAliases(String keyType, Principal[] issuers) {
1:         return new String[] { alias };
1:     }
1: 
1:     @Override
1:     public PrivateKey getPrivateKey(String alias) {
1:         return delegate.getPrivateKey(alias);
1:     }
1: 
1:     @Override
1:     public String[] getServerAliases(String keyType, Principal[] issuers) {
1:         return new String[] { alias };
1:     }
1: 
1:     @Override
1:     public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {
1:         return alias;
1:     }
1: 
1:     @Override
1:     public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine) {
1:         return alias;
1:     }
1: }
============================================================================