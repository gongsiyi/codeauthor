1:04968b6: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:04968b6:  */
1:04968b6: package org.apache.activemq.broker.region.policy;
1:74a7a8b: 
1:2748ae1: import java.util.ArrayList;
1:2748ae1: import java.util.List;
1:1a5ad28: import org.apache.activemq.broker.Broker;
1:04968b6: import org.apache.activemq.broker.ConnectionContext;
1:04968b6: import org.apache.activemq.broker.region.MessageReference;
1:a110604: import org.apache.activemq.broker.region.SubscriptionRecovery;
1:04968b6: import org.apache.activemq.broker.region.Topic;
1:2748ae1: import org.apache.activemq.command.ActiveMQDestination;
1:2748ae1: import org.apache.activemq.command.Message;
1:2748ae1: import org.apache.activemq.filter.DestinationFilter;
1:230a86c: 
1:04968b6: /**
1:230a86c:  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a fixed
1:230a86c:  * count of last messages.
1:7f883f6:  * 
1:68d245f:  * @org.apache.xbean.XBean
1:b0c2a40:  * 
1:04968b6:  */
1:230a86c: public class FixedCountSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1:230a86c:     private volatile MessageReference messages[];
1:230a86c:     private int maximumSize = 100;
1:230a86c:     private int tail;
1:230a86c: 
1:c1a0cd6:     public SubscriptionRecoveryPolicy copy() {
1:230a86c:         FixedCountSubscriptionRecoveryPolicy rc = new FixedCountSubscriptionRecoveryPolicy();
1:c1a0cd6:         rc.setMaximumSize(maximumSize);
1:c1a0cd6:         return rc;
1:c1a0cd6:     }
1:c1a0cd6: 
1:fc00993:     public synchronized boolean add(ConnectionContext context, MessageReference node) throws Exception {
1:230a86c:         messages[tail++] = node;
1:ecf89a6:         if (tail >= messages.length) {
1:230a86c:             tail = 0;
1:ecf89a6:         }
1:04968b6:         return true;
1:04968b6:     }
1:c1a0cd6: 
1:fc00993:     public synchronized void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:04968b6:         // Re-dispatch the last message seen.
1:230a86c:         int t = tail;
1:04968b6:         // The buffer may not have rolled over yet..., start from the front
1:ecf89a6:         if (messages[t] == null) {
1:230a86c:             t = 0;
1:ecf89a6:         }
1:04968b6:         // Well the buffer is really empty then.
1:ecf89a6:         if (messages[t] == null) {
1:04968b6:             return;
1:ecf89a6:         }
1:04968b6:         // Keep dispatching until t hit's tail again.
1:230a86c:         do {
1:230a86c:             MessageReference node = messages[t];
1:230a86c:             sub.addRecoveredMessage(context, node);
1:04968b6:             t++;
1:ecf89a6:             if (t >= messages.length) {
1:230a86c:                 t = 0;
1:ecf89a6:             }
1:230a86c:         } while (t != tail);
1:04968b6:     }
7:04968b6: 
1:230a86c:     public void start() throws Exception {
1:230a86c:         messages = new MessageReference[maximumSize];
1:04968b6:     }
1:04968b6: 
1:230a86c:     public void stop() throws Exception {
1:230a86c:         messages = null;
1:04968b6:     }
1:04968b6: 
1:230a86c:     public int getMaximumSize() {
1:04968b6:         return maximumSize;
1:04968b6:     }
1:04968b6: 
1:04968b6:     /**
1:230a86c:      * Sets the maximum number of messages that this destination will hold
1:230a86c:      * around in RAM
1:04968b6:      */
1:230a86c:     public void setMaximumSize(int maximumSize) {
1:230a86c:         this.maximumSize = maximumSize;
1:04968b6:     }
1:04968b6: 
1:230a86c:     public synchronized Message[] browse(ActiveMQDestination destination) throws Exception {
1:ecf89a6:         List<Message> result = new ArrayList<Message>();
1:230a86c:         DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:230a86c:         int t = tail;
1:ecf89a6:         if (messages[t] == null) {
1:230a86c:             t = 0;
1:ecf89a6:         }
1:230a86c:         if (messages[t] != null) {
1:230a86c:             do {
1:230a86c:                 MessageReference ref = messages[t];
1:230a86c:                 Message message = ref.getMessage();
1:230a86c:                 if (filter.matches(message.getDestination())) {
1:2748ae1:                     result.add(message);
1:ecf89a6:                 }
2:2748ae1:                 t++;
1:ecf89a6:                 if (t >= messages.length) {
1:230a86c:                     t = 0;
1:04968b6:                 }
1:230a86c:             } while (t != tail);
1:04968b6:         }
1:ecf89a6:         return result.toArray(new Message[result.size()]);
1:04968b6:     }
1:04968b6: 
1:1a5ad28:     public void setBroker(Broker broker) {        
1:1a5ad28:     }
1:04968b6: 
5:2748ae1: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (tail >= messages.length) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (messages[t] == null) {
1:         }
1:         if (messages[t] == null) {
1:         }
1:             if (t >= messages.length) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:         List<Message> result = new ArrayList<Message>();
1:         if (messages[t] == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 if (t >= messages.length) {
1:                 }
1:         return result.toArray(new Message[result.size()]);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean add(ConnectionContext context, MessageReference node) throws Exception {
1:     public synchronized void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a fixed
1:  * count of last messages.
1: public class FixedCountSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1:     private volatile MessageReference messages[];
1:     private int maximumSize = 100;
1:     private int tail;
1: 
1:         FixedCountSubscriptionRecoveryPolicy rc = new FixedCountSubscriptionRecoveryPolicy();
0:     synchronized public boolean add(ConnectionContext context, MessageReference node) throws Exception {
1:         messages[tail++] = node;
0:         if (tail >= messages.length)
1:             tail = 0;
0:     synchronized public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:         int t = tail;
0:         if (messages[t] == null)
1:             t = 0;
0:         if (messages[t] == null)
1:         do {
1:             MessageReference node = messages[t];
1:             sub.addRecoveredMessage(context, node);
0:             if (t >= messages.length)
1:                 t = 0;
1:         } while (t != tail);
1:     public void start() throws Exception {
1:         messages = new MessageReference[maximumSize];
1:     public void stop() throws Exception {
1:         messages = null;
1:     public int getMaximumSize() {
1:      * Sets the maximum number of messages that this destination will hold
1:      * around in RAM
1:     public void setMaximumSize(int maximumSize) {
1:         this.maximumSize = maximumSize;
1:     public synchronized Message[] browse(ActiveMQDestination destination) throws Exception {
0:         List result = new ArrayList();
1:         DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:         int t = tail;
0:         if (messages[t] == null)
1:             t = 0;
1:         if (messages[t] != null) {
1:             do {
1:                 MessageReference ref = messages[t];
1:                 Message message = ref.getMessage();
1:                 if (filter.matches(message.getDestination())) {
0:                 if (t >= messages.length)
1:                     t = 0;
1:             } while (t != tail);
0:         return (Message[])result.toArray(new Message[result.size()]);
commit:b3001f2
/////////////////////////////////////////////////////////////////////////
0:  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a fixed count 
0:  * of last messages.
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:c1a0cd6
/////////////////////////////////////////////////////////////////////////
1:     
1:     public SubscriptionRecoveryPolicy copy() {
0:         FixedCountSubscriptionRecoveryPolicy rc = new  FixedCountSubscriptionRecoveryPolicy();
1:         rc.setMaximumSize(maximumSize);
1:         return rc;
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     synchronized public boolean add(ConnectionContext context,MessageReference node) throws Exception{
0:     synchronized public void recover(ConnectionContext context,Topic topic,Subscription sub) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public Message[] browse(ActiveMQDestination destination) throws Exception{
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:04968b6
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.Topic;
0: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
1: /**
0:  * This implementation of {@link SubscriptionRecoveryPolicy} will only keep 
0:  * the last message.
0:  * 
0:  * @org.xbean.XBean
0:  * 
0:  * @version $Revision$
1:  */
0: public class FixedCountSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1: 
0:     volatile private MessageReference messages[];
0:     private int maximumSize=100;
0:     private int tail=0;
1: 
0:     synchronized public boolean add(ConnectionContext context, MessageReference node) throws Throwable {
0:         messages[tail++] = node;
0:         if( tail >= messages.length )
0:             tail = 0;
1:         return true;
1:     }
1: 
0:     synchronized public void recover(ConnectionContext context, Topic topic, Subscription sub) throws Throwable {
1:         // Re-dispatch the last message seen.
0:         int t = tail;
1:         // The buffer may not have rolled over yet..., start from the front
0:         if( messages[t]==null )
0:             t=0;
1:         // Well the buffer is really empty then.
0:         if( messages[t]==null )
1:             return;
1:         
1:         // Keep dispatching until t hit's tail again.
0:         MessageEvaluationContext msgContext = context.getMessageEvaluationContext();
0:         do {            
0:              MessageReference node = messages[t];
0:              try {
0:                  msgContext.setDestination(node.getRegionDestination().getActiveMQDestination());
0:                  msgContext.setMessageReference(node);                        
0:                  if (sub.matches(node, msgContext)) {
0:                      sub.add(node);
1:                  }
0:              } finally {
0:                  msgContext.clear();
1:              }
1:              t++;
0:              if( t >= messages.length )
0:                  t = 0;
0:         } while( t!=tail );
1:         
1:     }
1: 
0:     public void start() throws Exception {
0:         messages = new MessageReference[maximumSize];
1:     }
1: 
0:     public void stop() throws Exception {
0:         messages = null;
1:     }
1:     
0:     public int getMaximumSize() {
1:         return maximumSize;
1:     }
1: 
1:     /**
0:      * Sets the maximum number of messages that this destination will hold around in RAM
1:      */
0:     public void setMaximumSize(int maximumSize) {
0:         this.maximumSize = maximumSize;
1:     }
1: 
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
1:     public void setBroker(Broker broker) {        
1:     }
0: 
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
0:     public synchronized Message[] browse(ActiveMQDestination destination) throws Exception{
commit:a110604
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.SubscriptionRecovery;
/////////////////////////////////////////////////////////////////////////
0:     synchronized public void recover(ConnectionContext context,Topic topic,SubscriptionRecovery sub) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:             sub.addRecoveredMessage(context,node);
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.DestinationFilter;
0:  * This implementation of {@link SubscriptionRecoveryPolicy} will only keep the last message.
0: public class FixedCountSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy{
0:     synchronized public boolean add(ConnectionContext context,MessageReference node) throws Throwable{
0:         messages[tail++]=node;
0:         if(tail>=messages.length)
0:             tail=0;
0:     synchronized public void recover(ConnectionContext context,Topic topic,Subscription sub) throws Throwable{
0:         int t=tail;
0:         if(messages[t]==null)
0:         if(messages[t]==null)
0:         MessageEvaluationContext msgContext=context.getMessageEvaluationContext();
0:         do{
0:             MessageReference node=messages[t];
0:             try{
0:                 msgContext.setDestination(node.getRegionDestination().getActiveMQDestination());
0:                 msgContext.setMessageReference(node);
0:                 if(sub.matches(node,msgContext)){
0:                     sub.add(node);
1:                 }
0:             }finally{
0:                 msgContext.clear();
1:             }
1:             t++;
0:             if(t>=messages.length)
0:                 t=0;
0:         }while(t!=tail);
0:     public void start() throws Exception{
0:         messages=new MessageReference[maximumSize];
0:     public void stop() throws Exception{
0:         messages=null;
0: 
0:     public int getMaximumSize(){
0:     public void setMaximumSize(int maximumSize){
0:         this.maximumSize=maximumSize;
0:     public Message[] browse(ActiveMQDestination destination) throws Throwable{
0:         List result=new ArrayList();
0:         DestinationFilter filter=DestinationFilter.parseFilter(destination);
0:         int t=tail;
0:         if(messages[t]==null)
0:             t=0;
0:         if(messages[t]!=null){
0:             do{
0:                 MessageReference ref=messages[t];
0:                 Message message=ref.getMessage();
0:                 if(filter.matches(message.getDestination())){
1:                     result.add(message);
1:                 }
1:                 t++;
0:                 if(t>=messages.length)
0:                     t=0;
0:             }while(t!=tail);
1:         }
0:         return (Message[]) result.toArray(new Message[result.size()]);
1:     }
============================================================================