1:cfc6917: /**
1:cfc6917:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfc6917:  * contributor license agreements.  See the NOTICE file distributed with
1:cfc6917:  * this work for additional information regarding copyright ownership.
1:cfc6917:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfc6917:  * (the "License"); you may not use this file except in compliance with
1:cfc6917:  * the License.  You may obtain a copy of the License at
1:cfc6917:  *
1:cfc6917:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cfc6917:  *
1:cfc6917:  * Unless required by applicable law or agreed to in writing, software
1:cfc6917:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfc6917:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfc6917:  * See the License for the specific language governing permissions and
1:cfc6917:  * limitations under the License.
1:cfc6917:  */
1:cfc6917: package org.apache.activemq.transport.mqtt;
5:cfc6917: 
1:cfc6917: import java.io.DataInput;
1:cfc6917: import java.io.DataInputStream;
1:cfc6917: import java.io.DataOutput;
1:cfc6917: import java.io.DataOutputStream;
1:cfc6917: import java.io.IOException;
1:cfc6917: 
1:cfc6917: import org.apache.activemq.util.ByteArrayInputStream;
1:cfc6917: import org.apache.activemq.util.ByteArrayOutputStream;
1:cfc6917: import org.apache.activemq.util.ByteSequence;
1:cfc6917: import org.apache.activemq.wireformat.WireFormat;
1:cfc6917: import org.fusesource.hawtbuf.Buffer;
1:cfc6917: import org.fusesource.mqtt.codec.MQTTFrame;
1:cfc6917: 
1:cfc6917: /**
1:cfc6917:  * Implements marshalling and unmarsalling the <a
1:cfc6917:  * href="http://mqtt.org/">MQTT</a> protocol.
1:cfc6917:  */
1:cfc6917: public class MQTTWireFormat implements WireFormat {
1:cfc6917: 
1:4c38438:     static final int MAX_MESSAGE_LENGTH = 1024 * 1024 * 256;
1:4b7131f:     static final long DEFAULT_CONNECTION_TIMEOUT = 30000L;
1:cfc6917: 
1:cfc6917:     private int version = 1;
1:cfc6917: 
1:3454a8b:     private int maxFrameSize = MAX_MESSAGE_LENGTH;
1:27edaff:     private long connectAttemptTimeout = MQTTWireFormat.DEFAULT_CONNECTION_TIMEOUT;
1:3454a8b: 
1:4b7131f:     @Override
1:cfc6917:     public ByteSequence marshal(Object command) throws IOException {
1:cfc6917:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:cfc6917:         DataOutputStream dos = new DataOutputStream(baos);
1:cfc6917:         marshal(command, dos);
1:cfc6917:         dos.close();
1:cfc6917:         return baos.toByteSequence();
1:cfc6917:     }
1:cfc6917: 
1:4b7131f:     @Override
1:cfc6917:     public Object unmarshal(ByteSequence packet) throws IOException {
1:cfc6917:         ByteArrayInputStream stream = new ByteArrayInputStream(packet);
1:cfc6917:         DataInputStream dis = new DataInputStream(stream);
1:cfc6917:         return unmarshal(dis);
1:cfc6917:     }
1:cfc6917: 
1:4b7131f:     @Override
1:cfc6917:     public void marshal(Object command, DataOutput dataOut) throws IOException {
1:cfc6917:         MQTTFrame frame = (MQTTFrame) command;
1:cfc6917:         dataOut.write(frame.header());
1:cfc6917: 
1:cfc6917:         int remaining = 0;
1:cfc6917:         for (Buffer buffer : frame.buffers) {
1:cfc6917:             remaining += buffer.length;
1:cfc6917:         }
1:cfc6917:         do {
1:cfc6917:             byte digit = (byte) (remaining & 0x7F);
1:cfc6917:             remaining >>>= 7;
1:cfc6917:             if (remaining > 0) {
1:cfc6917:                 digit |= 0x80;
1:cfc6917:             }
1:cfc6917:             dataOut.write(digit);
1:cfc6917:         } while (remaining > 0);
1:cfc6917:         for (Buffer buffer : frame.buffers) {
1:cfc6917:             dataOut.write(buffer.data, buffer.offset, buffer.length);
1:cfc6917:         }
1:cfc6917:     }
1:cfc6917: 
1:4b7131f:     @Override
1:cfc6917:     public Object unmarshal(DataInput dataIn) throws IOException {
1:cfc6917:         byte header = dataIn.readByte();
1:cfc6917: 
1:4c38438:         byte digit;
1:cfc6917:         int multiplier = 1;
1:cfc6917:         int length = 0;
1:cfc6917:         do {
1:cfc6917:             digit = dataIn.readByte();
1:cfc6917:             length += (digit & 0x7F) * multiplier;
1:cfc6917:             multiplier <<= 7;
1:cfc6917:         }
1:cfc6917:         while ((digit & 0x80) != 0);
1:4c38438: 
1:cfc6917:         if (length >= 0) {
1:3454a8b:             if (length > getMaxFrameSize()) {
1:cfc6917:                 throw new IOException("The maximum message length was exceeded");
1:cfc6917:             }
1:cfc6917: 
1:cfc6917:             if (length > 0) {
1:cfc6917:                 byte[] data = new byte[length];
1:cfc6917:                 dataIn.readFully(data);
1:cfc6917:                 Buffer body = new Buffer(data);
1:cfc6917:                 return new MQTTFrame(body).header(header);
1:cfc6917:             } else {
1:cfc6917:                 return new MQTTFrame().header(header);
1:cfc6917:             }
1:cfc6917:         }
1:cfc6917:         return null;
1:cfc6917:     }
1:cfc6917: 
1:cfc6917:     /**
1:cfc6917:      * @param the version of the wire format
1:cfc6917:      */
1:4b7131f:     @Override
1:cfc6917:     public void setVersion(int version) {
1:cfc6917:         this.version = version;
1:cfc6917:     }
1:cfc6917: 
1:cfc6917:     /**
1:cfc6917:      * @return the version of the wire format
1:cfc6917:      */
1:4b7131f:     @Override
1:cfc6917:     public int getVersion() {
1:cfc6917:         return this.version;
1:cfc6917:     }
1:3454a8b: 
1:3454a8b:     /**
1:3454a8b:      * @return the maximum number of bytes a single MQTT message frame is allowed to be.
1:3454a8b:      */
1:3454a8b:     public int getMaxFrameSize() {
1:3454a8b:         return maxFrameSize;
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     /**
1:3454a8b:      * Sets the maximum frame size for an incoming MQTT frame.  The protocl limit is
1:3454a8b:      * 256 megabytes and this value cannot be set higher.
1:3454a8b:      *
1:3454a8b:      * @param maxFrameSize
1:3454a8b:      *        the maximum allowed frame size for a single MQTT frame.
1:3454a8b:      */
1:3454a8b:     public void setMaxFrameSize(int maxFrameSize) {
1:3454a8b:         this.maxFrameSize = Math.min(MAX_MESSAGE_LENGTH, maxFrameSize);
1:3454a8b:     }
1:27edaff: 
1:27edaff:     /**
1:27edaff:      * @return the timeout value used to fail a connection if no CONNECT frame read.
1:27edaff:      */
1:27edaff:     public long getConnectAttemptTimeout() {
1:27edaff:         return connectAttemptTimeout;
1:27edaff:     }
1:27edaff: 
1:27edaff:     /**
1:27edaff:      * Sets the timeout value used to fail a connection if no CONNECT frame is read
1:27edaff:      * in the given interval.
1:27edaff:      *
1:27edaff:      * @param connectTimeout
1:27edaff:      *        the connection frame received timeout value.
1:27edaff:      */
1:27edaff:     public void setConnectAttemptTimeout(long connectTimeout) {
1:27edaff:         this.connectAttemptTimeout = connectTimeout;
1:27edaff:     }
1:cfc6917: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27edaff
/////////////////////////////////////////////////////////////////////////
1:     private long connectAttemptTimeout = MQTTWireFormat.DEFAULT_CONNECTION_TIMEOUT;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the timeout value used to fail a connection if no CONNECT frame read.
1:      */
1:     public long getConnectAttemptTimeout() {
1:         return connectAttemptTimeout;
1:     }
1: 
1:     /**
1:      * Sets the timeout value used to fail a connection if no CONNECT frame is read
1:      * in the given interval.
1:      *
1:      * @param connectTimeout
1:      *        the connection frame received timeout value.
1:      */
1:     public void setConnectAttemptTimeout(long connectTimeout) {
1:         this.connectAttemptTimeout = connectTimeout;
1:     }
commit:3454a8b
/////////////////////////////////////////////////////////////////////////
1:     private int maxFrameSize = MAX_MESSAGE_LENGTH;
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (length > getMaxFrameSize()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the maximum number of bytes a single MQTT message frame is allowed to be.
1:      */
1:     public int getMaxFrameSize() {
1:         return maxFrameSize;
1:     }
1: 
1:     /**
1:      * Sets the maximum frame size for an incoming MQTT frame.  The protocl limit is
1:      * 256 megabytes and this value cannot be set higher.
1:      *
1:      * @param maxFrameSize
1:      *        the maximum allowed frame size for a single MQTT frame.
1:      */
1:     public void setMaxFrameSize(int maxFrameSize) {
1:         this.maxFrameSize = Math.min(MAX_MESSAGE_LENGTH, maxFrameSize);
1:     }
commit:4b7131f
/////////////////////////////////////////////////////////////////////////
1:     static final long DEFAULT_CONNECTION_TIMEOUT = 30000L;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2ad13d6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:4c38438
/////////////////////////////////////////////////////////////////////////
1:     static final int MAX_MESSAGE_LENGTH = 1024 * 1024 * 256;
/////////////////////////////////////////////////////////////////////////
1:         byte digit;
/////////////////////////////////////////////////////////////////////////
1: 
commit:cfc6917
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.DataOutput;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: 
1: /**
1:  * Implements marshalling and unmarsalling the <a
1:  * href="http://mqtt.org/">MQTT</a> protocol.
1:  */
1: public class MQTTWireFormat implements WireFormat {
1: 
1: 
0:     private static final int MAX_MESSAGE_LENGTH = 1024 * 1024 * 256;
1: 
0:     private boolean encodingEnabled = false;
1:     private int version = 1;
1: 
1:     public ByteSequence marshal(Object command) throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream dos = new DataOutputStream(baos);
1:         marshal(command, dos);
1:         dos.close();
1:         return baos.toByteSequence();
1:     }
1: 
1:     public Object unmarshal(ByteSequence packet) throws IOException {
1:         ByteArrayInputStream stream = new ByteArrayInputStream(packet);
1:         DataInputStream dis = new DataInputStream(stream);
1:         return unmarshal(dis);
1:     }
1: 
1:     public void marshal(Object command, DataOutput dataOut) throws IOException {
1:         MQTTFrame frame = (MQTTFrame) command;
1:         dataOut.write(frame.header());
1: 
1:         int remaining = 0;
1:         for (Buffer buffer : frame.buffers) {
1:             remaining += buffer.length;
1:         }
1:         do {
1:             byte digit = (byte) (remaining & 0x7F);
1:             remaining >>>= 7;
1:             if (remaining > 0) {
1:                 digit |= 0x80;
1:             }
1:             dataOut.write(digit);
1:         } while (remaining > 0);
1:         for (Buffer buffer : frame.buffers) {
1:             dataOut.write(buffer.data, buffer.offset, buffer.length);
1:         }
1:     }
1: 
1:     public Object unmarshal(DataInput dataIn) throws IOException {
1:         byte header = dataIn.readByte();
1: 
0:         byte digit = 0;
1: 
1:         int multiplier = 1;
1:         int length = 0;
1:         do {
1:             digit = dataIn.readByte();
1:             length += (digit & 0x7F) * multiplier;
1:             multiplier <<= 7;
1:         }
1:         while ((digit & 0x80) != 0);
1:         if (length >= 0) {
0:             if (length > MAX_MESSAGE_LENGTH) {
1:                 throw new IOException("The maximum message length was exceeded");
1:             }
1: 
1:             if (length > 0) {
1:                 byte[] data = new byte[length];
1:                 dataIn.readFully(data);
1:                 Buffer body = new Buffer(data);
1:                 return new MQTTFrame(body).header(header);
1:             } else {
1:                 return new MQTTFrame().header(header);
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @param the version of the wire format
1:      */
1:     public void setVersion(int version) {
1:         this.version = version;
1:     }
1: 
1:     /**
1:      * @return the version of the wire format
1:      */
1:     public int getVersion() {
1:         return this.version;
1:     }
1: 
1: 
1: }
============================================================================