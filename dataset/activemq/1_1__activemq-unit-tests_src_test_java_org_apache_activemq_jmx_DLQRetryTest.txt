1:1ebf186: /**
1:1ebf186:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1ebf186:  * contributor license agreements.  See the NOTICE file distributed with
1:1ebf186:  * this work for additional information regarding copyright ownership.
1:1ebf186:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1ebf186:  * (the "License"); you may not use this file except in compliance with
1:1ebf186:  * the License.  You may obtain a copy of the License at
1:1ebf186:  * <p>
1:1ebf186:  * http://www.apache.org/licenses/LICENSE-2.0
1:1ebf186:  * <p>
1:1ebf186:  * Unless required by applicable law or agreed to in writing, software
1:1ebf186:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1ebf186:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1ebf186:  * See the License for the specific language governing permissions and
1:1ebf186:  * limitations under the License.
1:1ebf186:  */
1:1ebf186: package org.apache.activemq.jmx;
1:1ebf186: 
1:1ebf186: import javax.jms.Connection;
1:1ebf186: import javax.jms.ConnectionFactory;
1:1ebf186: import javax.jms.JMSException;
1:1ebf186: import javax.jms.Message;
1:1ebf186: import javax.jms.MessageConsumer;
1:1ebf186: import javax.jms.MessageProducer;
1:1ebf186: import javax.jms.Session;
1:1ebf186: import javax.management.MBeanServer;
1:1ebf186: import javax.management.MBeanServerInvocationHandler;
1:1ebf186: import javax.management.MalformedObjectNameException;
1:1ebf186: import javax.management.ObjectName;
1:1ebf186: import java.util.ArrayList;
1:1ebf186: import java.util.List;
1:1ebf186: 
1:1ebf186: import org.apache.activemq.ActiveMQConnectionFactory;
1:1ebf186: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:1ebf186: import org.apache.activemq.RedeliveryPolicy;
1:1ebf186: import org.apache.activemq.broker.BrokerService;
1:1ebf186: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:1ebf186: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:1ebf186: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:1ebf186: import org.apache.activemq.broker.region.policy.PolicyMap;
1:1ebf186: import org.apache.activemq.command.ActiveMQQueue;
1:1ebf186: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:1ebf186: import org.slf4j.Logger;
1:1ebf186: import org.slf4j.LoggerFactory;
1:1ebf186: 
1:1ebf186: 
1:1ebf186: public class DLQRetryTest extends EmbeddedBrokerTestSupport {
1:1ebf186: 
1:1ebf186:     private static final Logger LOG = LoggerFactory.getLogger(DLQRetryTest.class);
1:1ebf186: 
1:1ebf186:     protected MBeanServer mbeanServer;
1:1ebf186:     protected String domain = "org.apache.activemq";
1:1ebf186:     protected String bindAddress;
1:1ebf186: 
1:1ebf186:     protected Connection connection;
1:1ebf186: 
1:1ebf186:     public void testDefaultDLQ() throws Exception {
1:1ebf186: 
1:1ebf186:         // broker uses DLQ defined for this destination
1:1ebf186:         String destinationName = "retry.test.default";
1:1ebf186: 
1:1ebf186:         String objectNameStr = broker.getBrokerObjectName().toString();
1:1ebf186:         objectNameStr += ",destinationType=Queue,destinationName=ActiveMQ.DLQ";
1:1ebf186: 
1:1ebf186:         invokeRetryDLQ(destinationName, objectNameStr);
1:1ebf186:     }
1:1ebf186: 
1:1ebf186: 
1:1ebf186:     public void testIndividualDLQ() throws Exception {
1:1ebf186: 
1:1ebf186:         // broker has an individual DLQ defined for this destination
1:1ebf186:         String destinationName = "retry.test.individual";
1:1ebf186: 
1:1ebf186:         String objectNameStr = broker.getBrokerObjectName().toString();
1:1ebf186:         objectNameStr += ",destinationType=Queue,destinationName=DLQ." + destinationName;
1:1ebf186: 
1:1ebf186:         invokeRetryDLQ(destinationName, objectNameStr);
1:1ebf186: 
1:1ebf186:     }
1:1ebf186: 
1:1ebf186: 
1:1ebf186:     private void invokeRetryDLQ(String destinationName, String mbeanName) throws Exception {
1:1ebf186:         // Send some messages
1:1ebf186:         connection = connectionFactory.createConnection();
1:1ebf186:         try {
1:1ebf186: 
1:1ebf186:             connection.start();
1:1ebf186:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1ebf186:             MessageProducer producer = session.createProducer(new ActiveMQQueue(destinationName));
1:1ebf186:             Message message = session.createTextMessage("Message testing default DLQ");
1:1ebf186:             producer.send(message);
1:1ebf186:             producer.close();
1:1ebf186: 
1:1ebf186:             //create a consumer to rollback
1:1ebf186:             String mesageID = consumeRollbackMessage(destinationName);
1:1ebf186: 
1:1ebf186: 
1:1ebf186:             ObjectName queueViewMBeanName = assertRegisteredObjectName(mbeanName);
1:1ebf186:             final QueueViewMBean DLQProxy = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:1ebf186: 
1:1ebf186:             assertEquals("Check message is on DLQ", 1, DLQProxy.getQueueSize());
1:1ebf186: 
1:1ebf186:             boolean moveSuccess = DLQProxy.retryMessage(mesageID);
1:1ebf186:             assertEquals("moveSuccess", true, moveSuccess);
1:1ebf186: 
1:1ebf186:             assertEquals("Check message is off DLQ (after retry invoked)", 0, DLQProxy.getQueueSize());
1:1ebf186: 
1:1ebf186:             // do rollbacks again, so it gets placed in the DLQ again
1:1ebf186:             String mesageID_secondAttempt = consumeRollbackMessage(destinationName);
1:1ebf186: 
1:1ebf186:             assertEquals("Ensure messageID is the same for first and second attempt", mesageID, mesageID_secondAttempt);
1:1ebf186: 
1:1ebf186:             // check the DLQ as the message
1:1ebf186:             assertEquals("Check message is on DLQ for second time", 1, DLQProxy.getQueueSize());
1:1ebf186: 
1:1ebf186:         } finally {
1:1ebf186: 
1:1ebf186:             connection.close();
1:1ebf186: 
1:1ebf186:         }
1:1ebf186:     }
1:1ebf186: 
1:1ebf186:     private String consumeRollbackMessage(String destination) throws JMSException {
1:1ebf186:         Session consumerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:1ebf186:         MessageConsumer messageConsumer = consumerSession.createConsumer(new ActiveMQQueue(destination));
1:1ebf186: 
1:1ebf186:         Message message = null;
1:1ebf186:         String messageID = null;
1:1ebf186:         do {
1:1ebf186:             message = messageConsumer.receive(3000);
1:1ebf186:             if (message != null) {
1:1ebf186:                 LOG.info("rolling back " + message.getJMSMessageID());
1:1ebf186:                 messageID = message.getJMSMessageID();
1:1ebf186:                 consumerSession.rollback();
1:1ebf186:             }
1:1ebf186: 
1:1ebf186:         } while (message != null);
1:1ebf186: 
1:1ebf186:         messageConsumer.close();
1:1ebf186:         return messageID;
1:1ebf186:     }
1:1ebf186: 
1:1ebf186:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:1ebf186:         ObjectName objectName = new ObjectName(name);
1:1ebf186:         if (mbeanServer.isRegistered(objectName)) {
1:1ebf186:             LOG.info("Bean Registered: " + objectName);
1:1ebf186:         } else {
1:1ebf186:             fail("Could not find MBean!: " + objectName);
1:1ebf186:         }
1:1ebf186:         return objectName;
1:1ebf186:     }
1:1ebf186: 
1:1ebf186:     protected void setUp() throws Exception {
1:1ebf186:         bindAddress = "tcp://localhost:0";
1:1ebf186:         useTopic = false;
1:1ebf186:         super.setUp();
1:1ebf186:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:1ebf186:     }
1:1ebf186: 
1:1ebf186:     protected void tearDown() throws Exception {
1:1ebf186:         if (connection != null) {
1:1ebf186:             connection.close();
1:1ebf186:             connection = null;
1:1ebf186:         }
1:1ebf186:         super.tearDown();
1:1ebf186:     }
1:1ebf186: 
1:1ebf186:     protected BrokerService createBroker() throws Exception {
1:1ebf186:         BrokerService answer = new BrokerService();
1:1ebf186:         answer.setUseJmx(true);
1:1ebf186:         answer.setEnableStatistics(true);
1:1ebf186:         answer.addConnector(bindAddress);
1:1ebf186: 
1:1ebf186:         PolicyMap policyMap = new PolicyMap();
1:1ebf186:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:1ebf186:         PolicyEntry pe = new PolicyEntry();
1:1ebf186: 
1:1ebf186:         IndividualDeadLetterStrategy individualDeadLetterStrategy = new IndividualDeadLetterStrategy();
1:1ebf186:         individualDeadLetterStrategy.setQueuePrefix("DLQ.");
1:1ebf186:         pe.setDeadLetterStrategy(individualDeadLetterStrategy);
1:1ebf186: 
1:1ebf186:         pe.setQueue("retry.test.individual");
1:1ebf186:         entries.add(pe);
1:1ebf186: 
1:1ebf186:         policyMap.setPolicyEntries(entries);
1:1ebf186:         answer.setDestinationPolicy(policyMap);
1:1ebf186: 
1:1ebf186:         ((KahaDBPersistenceAdapter) answer.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(false);
1:1ebf186:         answer.deleteAllMessages();
1:1ebf186:         return answer;
1:1ebf186:     }
1:1ebf186: 
1:1ebf186:     @Override
1:1ebf186:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:1ebf186:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:1ebf186:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:1ebf186:         redeliveryPolicy.setMaximumRedeliveries(1);
1:1ebf186:         activeMQConnectionFactory.setRedeliveryPolicy(redeliveryPolicy);
1:1ebf186:         return activeMQConnectionFactory;
1:1ebf186:     }
1:1ebf186: 
1:1ebf186: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1ebf186
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jmx;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class DLQRetryTest extends EmbeddedBrokerTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DLQRetryTest.class);
1: 
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1:     protected String bindAddress;
1: 
1:     protected Connection connection;
1: 
1:     public void testDefaultDLQ() throws Exception {
1: 
1:         // broker uses DLQ defined for this destination
1:         String destinationName = "retry.test.default";
1: 
1:         String objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",destinationType=Queue,destinationName=ActiveMQ.DLQ";
1: 
1:         invokeRetryDLQ(destinationName, objectNameStr);
1:     }
1: 
1: 
1:     public void testIndividualDLQ() throws Exception {
1: 
1:         // broker has an individual DLQ defined for this destination
1:         String destinationName = "retry.test.individual";
1: 
1:         String objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",destinationType=Queue,destinationName=DLQ." + destinationName;
1: 
1:         invokeRetryDLQ(destinationName, objectNameStr);
1: 
1:     }
1: 
1: 
1:     private void invokeRetryDLQ(String destinationName, String mbeanName) throws Exception {
1:         // Send some messages
1:         connection = connectionFactory.createConnection();
1:         try {
1: 
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(new ActiveMQQueue(destinationName));
1:             Message message = session.createTextMessage("Message testing default DLQ");
1:             producer.send(message);
1:             producer.close();
1: 
1:             //create a consumer to rollback
1:             String mesageID = consumeRollbackMessage(destinationName);
1: 
1: 
1:             ObjectName queueViewMBeanName = assertRegisteredObjectName(mbeanName);
1:             final QueueViewMBean DLQProxy = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:             assertEquals("Check message is on DLQ", 1, DLQProxy.getQueueSize());
1: 
1:             boolean moveSuccess = DLQProxy.retryMessage(mesageID);
1:             assertEquals("moveSuccess", true, moveSuccess);
1: 
1:             assertEquals("Check message is off DLQ (after retry invoked)", 0, DLQProxy.getQueueSize());
1: 
1:             // do rollbacks again, so it gets placed in the DLQ again
1:             String mesageID_secondAttempt = consumeRollbackMessage(destinationName);
1: 
1:             assertEquals("Ensure messageID is the same for first and second attempt", mesageID, mesageID_secondAttempt);
1: 
1:             // check the DLQ as the message
1:             assertEquals("Check message is on DLQ for second time", 1, DLQProxy.getQueueSize());
1: 
1:         } finally {
1: 
1:             connection.close();
1: 
1:         }
1:     }
1: 
1:     private String consumeRollbackMessage(String destination) throws JMSException {
1:         Session consumerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer messageConsumer = consumerSession.createConsumer(new ActiveMQQueue(destination));
1: 
1:         Message message = null;
1:         String messageID = null;
1:         do {
1:             message = messageConsumer.receive(3000);
1:             if (message != null) {
1:                 LOG.info("rolling back " + message.getJMSMessageID());
1:                 messageID = message.getJMSMessageID();
1:                 consumerSession.rollback();
1:             }
1: 
1:         } while (message != null);
1: 
1:         messageConsumer.close();
1:         return messageID;
1:     }
1: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             LOG.info("Bean Registered: " + objectName);
1:         } else {
1:             fail("Could not find MBean!: " + objectName);
1:         }
1:         return objectName;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         bindAddress = "tcp://localhost:0";
1:         useTopic = false;
1:         super.setUp();
1:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(true);
1:         answer.setEnableStatistics(true);
1:         answer.addConnector(bindAddress);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         IndividualDeadLetterStrategy individualDeadLetterStrategy = new IndividualDeadLetterStrategy();
1:         individualDeadLetterStrategy.setQueuePrefix("DLQ.");
1:         pe.setDeadLetterStrategy(individualDeadLetterStrategy);
1: 
1:         pe.setQueue("retry.test.individual");
1:         entries.add(pe);
1: 
1:         policyMap.setPolicyEntries(entries);
1:         answer.setDestinationPolicy(policyMap);
1: 
1:         ((KahaDBPersistenceAdapter) answer.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(false);
1:         answer.deleteAllMessages();
1:         return answer;
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:         redeliveryPolicy.setMaximumRedeliveries(1);
1:         activeMQConnectionFactory.setRedeliveryPolicy(redeliveryPolicy);
1:         return activeMQConnectionFactory;
1:     }
1: 
1: }
============================================================================