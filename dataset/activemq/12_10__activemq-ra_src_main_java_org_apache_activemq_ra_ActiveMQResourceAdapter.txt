38:3bd948f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:540dd5c:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:3bd948f:  * Unless required by applicable law or agreed to in writing, software
1:3bd948f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bd948f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bd948f:  * See the License for the specific language governing permissions and
1:3bd948f:  * limitations under the License.
38:3bd948f:  */
1:fd4bb60: package org.apache.activemq.ra;
55:3bd948f: 
1:d983d52: import java.io.Serializable;
1:3bd948f: import java.net.URI;
1:3bd948f: import java.util.HashMap;
1:3bd948f: 
1:3bd948f: import javax.jms.JMSException;
1:3bd948f: import javax.resource.NotSupportedException;
1:3bd948f: import javax.resource.ResourceException;
1:3bd948f: import javax.resource.spi.ActivationSpec;
1:3bd948f: import javax.resource.spi.BootstrapContext;
1:3bd948f: import javax.resource.spi.ResourceAdapterInternalException;
1:3bd948f: import javax.resource.spi.endpoint.MessageEndpointFactory;
1:e8818fa: import javax.transaction.xa.XAException;
1:3bd948f: import javax.transaction.xa.XAResource;
1:e8818fa: import javax.transaction.xa.Xid;
1:d983d52: 
1:fd4bb60: import org.apache.activemq.ActiveMQConnection;
1:fd4bb60: import org.apache.activemq.ActiveMQConnectionFactory;
1:3bd948f: import org.apache.activemq.RedeliveryPolicy;
1:f2b01a7: import org.apache.activemq.TransactionContext;
1:fd4bb60: import org.apache.activemq.broker.BrokerFactory;
1:fd4bb60: import org.apache.activemq.broker.BrokerService;
1:fd4bb60: import org.apache.activemq.util.ServiceSupport;
1:e8818fa: import org.slf4j.Logger;
1:e8818fa: import org.slf4j.LoggerFactory;
1:3bd948f: 
1:3bd948f: /**
1:3bd948f:  * Knows how to connect to one ActiveMQ server. It can then activate endpoints
1:540dd5c:  * and deliver messages to those end points using the connection configure in
1:540dd5c:  * the resource adapter. <p/>Must override equals and hashCode (JCA spec 16.4)
1:d983d52:  *
1:68d245f:  * @org.apache.xbean.XBean element="resourceAdapter" rootElement="true"
1:540dd5c:  *                         description="The JCA Resource Adaptor for ActiveMQ"
1:d983d52:  *
1:3bd948f:  */
1:d983d52: public class ActiveMQResourceAdapter extends ActiveMQConnectionSupport implements Serializable, MessageResourceAdapter {
1:d983d52:     private static final long serialVersionUID = 360805587169336959L;
1:e8818fa:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQResourceAdapter.class);
1:d983d52:     private transient final HashMap<ActiveMQEndpointActivationKey, ActiveMQEndpointWorker> endpointWorkers = new HashMap<ActiveMQEndpointActivationKey, ActiveMQEndpointWorker>();
1:540dd5c: 
1:d983d52:     private transient BootstrapContext bootstrapContext;
1:3bd948f:     private String brokerXmlConfig;
1:d983d52:     private transient BrokerService broker;
1:d983d52:     private transient Thread brokerStartThread;
1:aa62069:     private ActiveMQConnectionFactory connectionFactory;
1:d983d52: 
1:3bd948f:     /**
1:d983d52:      *
1:3bd948f:      */
1:3bd948f:     public ActiveMQResourceAdapter() {
1:540dd5c:         super();
55:3bd948f:     }
1:aa62069: 
1:3bd948f:     /**
1:3bd948f:      * @see javax.resource.spi.ResourceAdapter#start(javax.resource.spi.BootstrapContext)
1:3bd948f:      */
1:d983d52:     @Override
1:3bd948f:     public void start(BootstrapContext bootstrapContext) throws ResourceAdapterInternalException {
1:3bd948f:         this.bootstrapContext = bootstrapContext;
1:540dd5c:         if (brokerXmlConfig != null && brokerXmlConfig.trim().length() > 0) {
1:43d58b5:             brokerStartThread = new Thread("Starting ActiveMQ Broker") {
1:3826a23:                 @Override
1:43d58b5:                 public void run () {
1:43d58b5:                     try {
1:a259bab:                         // ensure RAR resources are available to xbean (needed for weblogic)
1:a259bab:                         log.debug("original thread context classLoader: " + Thread.currentThread().getContextClassLoader());
1:a259bab:                         Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
1:a259bab:                         log.debug("current (from getClass()) thread context classLoader: " + Thread.currentThread().getContextClassLoader());
1:d983d52: 
1:43d58b5:                         synchronized( ActiveMQResourceAdapter.this ) {
1:43d58b5:                             broker = BrokerFactory.createBroker(new URI(brokerXmlConfig));
1:43d58b5:                         }
1:43d58b5:                         broker.start();
1:1999ddf:                         // Default the ServerUrl to the local broker if not specified in the ra.xml
1:1999ddf:                         if (getServerUrl() == null) {
1:1999ddf:                             setServerUrl("vm://" + broker.getBrokerName() + "?create=false");
1:1999ddf:                         }
1:43d58b5:                     } catch (Throwable e) {
1:8733d17:                         log.warn("Could not start up embeded ActiveMQ Broker '"+brokerXmlConfig+"': "+e.getMessage());
1:8733d17:                         log.debug("Reason for: "+e.getMessage(), e);
1:43d58b5:                     }
1:43d58b5:                 }
1:43d58b5:             };
1:43d58b5:             brokerStartThread.setDaemon(true);
1:43d58b5:             brokerStartThread.start();
1:d983d52: 
1:43d58b5:             // Wait up to 5 seconds for the broker to start up in the async thread.. otherwise keep going without it..
1:3826a23:             try {
1:43d58b5:                 brokerStartThread.join(1000*5);
1:43d58b5:             } catch (InterruptedException e) {
1:43d58b5:                 Thread.currentThread().interrupt();
1:d983d52:             }
1:43d58b5:         }
1:540dd5c:     }
1:a259bab: 
1:3bd948f:     public ActiveMQConnection makeConnection() throws JMSException {
1:aa62069:         if( connectionFactory == null ) {
1:aa62069:             return makeConnection(getInfo());
1:aa62069:         } else {
1:aa62069:             return makeConnection(getInfo(), connectionFactory);
1:aa62069:         }
1:3bd948f:     }
1:43d58b5: 
1:3bd948f:     /**
1:3bd948f:      * @param activationSpec
1:3bd948f:      */
1:d983d52:     @Override
1:3bd948f:     public ActiveMQConnection makeConnection(MessageActivationSpec activationSpec) throws JMSException {
1:58e5b9a:         ActiveMQConnectionFactory cf = getConnectionFactory();
1:58e5b9a:         if (cf == null) {
1:9becfc0:             cf = createConnectionFactory(getInfo(), activationSpec);
1:aa62069:         }
1:8733d17:         String userName = defaultValue(activationSpec.getUserName(), getInfo().getUserName());
1:8733d17:         String password = defaultValue(activationSpec.getPassword(), getInfo().getPassword());
1:3bd948f:         String clientId = activationSpec.getClientId();
1:3bd948f:         if (clientId != null) {
1:58e5b9a:             cf.setClientID(clientId);
1:540dd5c:         } else {
1:3bd948f:             if (activationSpec.isDurableSubscription()) {
1:8733d17:                 log.warn("No clientID specified for durable subscription: " + activationSpec);
1:3bd948f:             }
1:3bd948f:         }
1:58e5b9a:         ActiveMQConnection physicalConnection = (ActiveMQConnection) cf.createConnection(userName, password);
1:43d58b5: 
1:3bd948f:         // have we configured a redelivery policy
1:3bd948f:         RedeliveryPolicy redeliveryPolicy = activationSpec.redeliveryPolicy();
1:3bd948f:         if (redeliveryPolicy != null) {
1:3bd948f:             physicalConnection.setRedeliveryPolicy(redeliveryPolicy);
1:3bd948f:         }
2:3bd948f:         return physicalConnection;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see javax.resource.spi.ResourceAdapter#stop()
1:3bd948f:      */
1:d983d52:     @Override
1:3bd948f:     public void stop() {
1:a1062c2:         synchronized (endpointWorkers) {
1:a1062c2:             while (endpointWorkers.size() > 0) {
1:a1062c2:                 ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
1:a1062c2:                 endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
1:a1062c2:             }
1:3bd948f:         }
1:d983d52: 
1:43d58b5:         synchronized( this ) {
1:43d58b5:             if (broker != null) {
1:43d58b5:                 if( brokerStartThread.isAlive() ) {
1:43d58b5:                     brokerStartThread.interrupt();
1:43d58b5:                 }
1:43d58b5:                 ServiceSupport.dispose(broker);
1:43d58b5:                 broker = null;
1:43d58b5:             }
1:3bd948f:         }
1:d983d52: 
1:3bd948f:         this.bootstrapContext = null;
1:3bd948f:     }
1:43d58b5: 
1:3bd948f:     /**
1:3bd948f:      * @see org.apache.activemq.ra.MessageResourceAdapter#getBootstrapContext()
1:3bd948f:      */
1:d983d52:     @Override
1:3bd948f:     public BootstrapContext getBootstrapContext() {
1:3bd948f:         return bootstrapContext;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see javax.resource.spi.ResourceAdapter#endpointActivation(javax.resource.spi.endpoint.MessageEndpointFactory,
1:3bd948f:      *      javax.resource.spi.ActivationSpec)
1:3bd948f:      */
1:d983d52:     @Override
1:540dd5c:     public void endpointActivation(MessageEndpointFactory endpointFactory, ActivationSpec activationSpec) throws ResourceException {
1:3bd948f: 
1:3bd948f:         // spec section 5.3.3
1:3bd948f:         if (!equals(activationSpec.getResourceAdapter())) {
1:3bd948f:             throw new ResourceException("Activation spec not initialized with this ResourceAdapter instance (" + activationSpec.getResourceAdapter() + " != " + this + ")");
1:3bd948f:         }
1:3bd948f: 
1:3bd948f:         if (!(activationSpec instanceof MessageActivationSpec)) {
1:757a2f1:             throw new NotSupportedException("That type of ActivationSpec not supported: " + activationSpec.getClass());
1:3bd948f:         }
1:3bd948f: 
1:540dd5c:         ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory, (MessageActivationSpec)activationSpec);
1:3bd948f:         // This is weird.. the same endpoint activated twice.. must be a
1:3bd948f:         // container error.
1:3bd948f:         if (endpointWorkers.containsKey(key)) {
1:3bd948f:             throw new IllegalStateException("Endpoint previously activated");
1:3bd948f:         }
1:3bd948f: 
1:3bd948f:         ActiveMQEndpointWorker worker = new ActiveMQEndpointWorker(this, key);
1:3bd948f: 
1:3bd948f:         endpointWorkers.put(key, worker);
1:3bd948f:         worker.start();
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see javax.resource.spi.ResourceAdapter#endpointDeactivation(javax.resource.spi.endpoint.MessageEndpointFactory,
1:3bd948f:      *      javax.resource.spi.ActivationSpec)
1:3bd948f:      */
1:d983d52:     @Override
1:3bd948f:     public void endpointDeactivation(MessageEndpointFactory endpointFactory, ActivationSpec activationSpec) {
1:3bd948f:         if (activationSpec instanceof MessageActivationSpec) {
1:540dd5c:             ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory, (MessageActivationSpec)activationSpec);
1:a1062c2:             ActiveMQEndpointWorker worker = null;
1:a1062c2:             synchronized (endpointWorkers) {
1:a1062c2:                 worker = endpointWorkers.remove(key);
1:a1062c2:             }
1:3bd948f:             if (worker == null) {
1:3bd948f:                 // This is weird.. that endpoint was not activated.. oh well..
1:3bd948f:                 // this method
1:3bd948f:                 // does not throw exceptions so just return.
1:3bd948f:                 return;
1:3bd948f:             }
1:f2b01a7:             try {
1:3bd948f:                 worker.stop();
1:3bd948f:             } catch (InterruptedException e) {
1:3bd948f:                 // We interrupted.. we won't throw an exception but will stop
1:3bd948f:                 // waiting for the worker
1:3bd948f:                 // to stop.. we tried our best. Keep trying to interrupt the
1:3bd948f:                 // thread.
1:3bd948f:                 Thread.currentThread().interrupt();
1:3bd948f:             }
1:3bd948f: 
1:3bd948f:         }
1:3bd948f: 
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * We only connect to one resource manager per ResourceAdapter instance, so
1:3bd948f:      * any ActivationSpec will return the same XAResource.
1:d983d52:      *
1:3bd948f:      * @see javax.resource.spi.ResourceAdapter#getXAResources(javax.resource.spi.ActivationSpec[])
1:3bd948f:      */
1:d983d52:     @Override
1:3bd948f:     public XAResource[] getXAResources(ActivationSpec[] activationSpecs) throws ResourceException {
1:3826a23:         try {
1:e8818fa:             return new XAResource[]{
1:e8818fa:                     new TransactionContext() {
1:e8818fa: 
1:e8818fa:                         @Override
1:e8818fa:                         public boolean isSameRM(XAResource xaresource) throws XAException {
1:e8818fa:                             ActiveMQConnection original = null;
1:e8818fa:                             try {
1:e8818fa:                                 original = setConnection(newConnection());
1:e8818fa:                                 boolean result = super.isSameRM(xaresource);
1:e8818fa:                                 LOG.trace("{}.recover({})={}", getConnection(), xaresource, result);
1:e8818fa:                                 return result;
1:e8818fa: 
1:e8818fa:                             } catch (JMSException e) {
1:e8818fa:                                 LOG.trace("isSameRM({}) failed", xaresource, e);
1:e8818fa:                                 XAException xaException = new XAException(e.getMessage());
1:e8818fa:                                 throw xaException;
2:e8818fa:                             } finally {
1:e8818fa:                                 closeConnection(original);
1:e8818fa:                             }
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         @Override
1:e8818fa:                         protected String getResourceManagerId() throws JMSException {
1:e8818fa:                             ActiveMQConnection original = null;
1:e8818fa:                             try {
1:e8818fa:                                 original = setConnection(newConnection());
1:e8818fa:                                 return super.getResourceManagerId();
1:e8818fa:                             } finally {
1:e8818fa:                                 closeConnection(original);
1:e8818fa:                             }
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         @Override
1:e8818fa:                         public void commit(Xid xid, boolean onePhase) throws XAException {
1:e8818fa:                             ActiveMQConnection original = null;
1:e8818fa:                             try {
1:e8818fa:                                 setConnection(newConnection());
1:e8818fa:                                 super.commit(xid, onePhase);
1:e8818fa:                                 LOG.trace("{}.commit({},{})", getConnection(), xid);
1:e8818fa: 
1:e8818fa:                             } catch (JMSException e) {
1:e8818fa:                                 LOG.trace("{}.commit({},{}) failed", getConnection(), xid, onePhase, e);
1:e8818fa:                                 throwXAException(e);
1:e8818fa:                             } finally {
1:e8818fa:                                 closeConnection(original);
1:e8818fa:                             }
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         @Override
1:e8818fa:                         public void rollback(Xid xid) throws XAException {
1:e8818fa:                             ActiveMQConnection original = null;
1:e8818fa:                             try {
1:e8818fa:                                 original = setConnection(newConnection());
1:e8818fa:                                 super.rollback(xid);
1:e8818fa:                                 LOG.trace("{}.rollback({})", getConnection(), xid);
1:e8818fa: 
1:e8818fa:                             } catch (JMSException e) {
1:e8818fa:                                 LOG.trace("{}.rollback({}) failed", getConnection(), xid, e);
1:e8818fa:                                 throwXAException(e);
1:e8818fa:                             } finally {
1:e8818fa:                                closeConnection(original);
1:e8818fa:                             }
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         @Override
1:e8818fa:                         public Xid[] recover(int flags) throws XAException {
1:e8818fa:                             Xid[] result = new Xid[]{};
1:e8818fa:                             ActiveMQConnection original = null;
1:e8818fa:                             try {
1:e8818fa:                                 original = setConnection(newConnection());
1:e8818fa:                                 result = super.recover(flags);
1:e8818fa:                                 LOG.trace("{}.recover({})={}", getConnection(), flags, result);
1:e8818fa: 
1:e8818fa:                             } catch (JMSException e) {
1:e8818fa:                                 LOG.trace("{}.recover({}) failed", getConnection(), flags, e);
1:e8818fa:                                 throwXAException(e);
1:e8818fa:                             } finally {
1:e8818fa:                                 closeConnection(original);
1:e8818fa:                             }
1:e8818fa:                             return result;
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         @Override
1:e8818fa:                         public void forget(Xid xid) throws XAException {
1:e8818fa:                             ActiveMQConnection original = null;
1:e8818fa:                             try {
1:e8818fa:                                 original = setConnection(newConnection());
1:e8818fa:                                 super.forget(xid);
1:e8818fa:                                 LOG.trace("{}.forget({})", getConnection(), xid);
1:e8818fa: 
1:e8818fa:                             } catch (JMSException e) {
1:e8818fa:                                 LOG.trace("{}.forget({}) failed", getConnection(), xid, e);
1:e8818fa:                                 throwXAException(e);
1:e8818fa:                             } finally {
1:e8818fa:                                 closeConnection(original);
1:e8818fa:                             }
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         private void throwXAException(JMSException e) throws XAException {
1:e8818fa:                             XAException xaException = new XAException(e.getMessage());
1:e8818fa:                             xaException.errorCode = XAException.XAER_RMFAIL;
1:e8818fa:                             throw xaException;
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         private ActiveMQConnection newConnection() throws JMSException {
1:a1e595c:                             ActiveMQConnection connection = null;
1:a1e595c:                             try {
1:a1e595c:                                 connection = makeConnection();
1:a1e595c:                                 connection.start();
1:a1e595c:                             } catch (JMSException ex) {
1:a1e595c:                                 if (connection != null) {
1:a1e595c:                                     try {
1:a1e595c:                                         connection.close();
1:a1e595c:                                     } catch (JMSException ignore) { }
1:a1e595c:                                 }
1:a1e595c:                                 throw ex;
1:a1e595c:                             }
1:e8818fa:                             return connection;
1:e8818fa:                         }
1:e8818fa: 
1:e8818fa:                         private void closeConnection(ActiveMQConnection original) {
1:e8818fa:                             ActiveMQConnection connection = getConnection();
1:e8818fa:                             if (connection != null) {
1:e8818fa:                                 try {
1:e8818fa:                                     connection.close();
1:e1cd19e:                                 } catch (JMSException ignored) {}
1:e8818fa:                             }
1:e1cd19e:                             setConnection(original);
1:e8818fa:                         }
1:e8818fa:                     }};
1:e8818fa: 
1:3826a23:         } catch (Exception e) {
1:3bd948f:             throw new ResourceException(e);
1:3826a23:         }
1:3826a23:     }
1:3826a23: 
1:3bd948f:     // ///////////////////////////////////////////////////////////////////////
1:540dd5c:     //
1:3bd948f:     // Java Bean getters and setters for this ResourceAdapter class.
3:3bd948f:     //
1:3bd948f:     // ///////////////////////////////////////////////////////////////////////
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see org.apache.activemq.ra.MessageResourceAdapter#getBrokerXmlConfig()
1:3bd948f:      */
1:d983d52:     @Override
1:3bd948f:     public String getBrokerXmlConfig() {
1:3bd948f:         return brokerXmlConfig;
1:f2b01a7:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * Sets the <a href="http://activemq.org/Xml+Configuration">XML
1:3bd948f:      * configuration file </a> used to configure the ActiveMQ broker via Spring
1:3bd948f:      * if using embedded mode.
1:d983d52:      *
1:540dd5c:      * @param brokerXmlConfig is the filename which is assumed to be on the
1:540dd5c:      *                classpath unless a URL is specified. So a value of
1:540dd5c:      *                <code>foo/bar.xml</code> would be assumed to be on the
1:540dd5c:      *                classpath whereas <code>file:dir/file.xml</code> would
1:540dd5c:      *                use the file system. Any valid URL string is supported.
1:3bd948f:      */
1:3bd948f:     public void setBrokerXmlConfig(String brokerXmlConfig) {
1:540dd5c:         this.brokerXmlConfig = brokerXmlConfig;
1:f2b01a7:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see java.lang.Object#equals(java.lang.Object)
1:3bd948f:      */
1:58e5b9a:     @Override
1:3bd948f:     public boolean equals(Object o) {
1:3bd948f:         if (this == o) {
1:3bd948f:             return true;
1:3bd948f:         }
1:3bd948f:         if (!(o instanceof MessageResourceAdapter)) {
1:3bd948f:             return false;
1:3bd948f:         }
1:3bd948f: 
1:540dd5c:         final MessageResourceAdapter activeMQResourceAdapter = (MessageResourceAdapter)o;
1:3bd948f: 
1:8733d17:         if (!getInfo().equals(activeMQResourceAdapter.getInfo())) {
1:3bd948f:             return false;
1:3bd948f:         }
1:540dd5c:         if (notEqual(brokerXmlConfig, activeMQResourceAdapter.getBrokerXmlConfig())) {
1:3bd948f:             return false;
1:3bd948f:         }
1:3bd948f: 
1:3bd948f:         return true;
1:3bd948f:     }
1:3bd948f: 
1:3bd948f:     /**
1:3bd948f:      * @see java.lang.Object#hashCode()
1:3bd948f:      */
2:3bd948f:     @Override
1:3bd948f:     public int hashCode() {
1:3bd948f:         int result;
1:8733d17:         result = getInfo().hashCode();
1:540dd5c:         if (brokerXmlConfig != null) {
1:3bd948f:             result ^= brokerXmlConfig.hashCode();
1:3bd948f:         }
1:3bd948f:         return result;
1:3bd948f:     }
1:3bd948f: 
1:aa62069:     public ActiveMQConnectionFactory getConnectionFactory() {
1:aa62069:         return connectionFactory;
1:aa62069:     }
1:aa62069: 
1:58e5b9a:     public void setConnectionFactory(ActiveMQConnectionFactory aConnectionFactory) {
1:58e5b9a:         this.connectionFactory = aConnectionFactory;
1:aa62069:     }
1:aa62069: 
1:3bd948f: 
1:3bd948f:     }
============================================================================
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:a1e595c
/////////////////////////////////////////////////////////////////////////
1:                             ActiveMQConnection connection = null;
1:                             try {
1:                                 connection = makeConnection();
1:                                 connection.start();
1:                             } catch (JMSException ex) {
1:                                 if (connection != null) {
1:                                     try {
1:                                         connection.close();
1:                                     } catch (JMSException ignore) { }
1:                                 }
1:                                 throw ex;
1:                             }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d983d52
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: public class ActiveMQResourceAdapter extends ActiveMQConnectionSupport implements Serializable, MessageResourceAdapter {
1:     private static final long serialVersionUID = 360805587169336959L;
1:     private transient final HashMap<ActiveMQEndpointActivationKey, ActiveMQEndpointWorker> endpointWorkers = new HashMap<ActiveMQEndpointActivationKey, ActiveMQEndpointWorker>();
1:     private transient BootstrapContext bootstrapContext;
1:     private transient BrokerService broker;
1:     private transient Thread brokerStartThread;
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
author:Howard Gao
-------------------------------------------------------------------------------
commit:a1062c2
/////////////////////////////////////////////////////////////////////////
1:         synchronized (endpointWorkers) {
1:             while (endpointWorkers.size() > 0) {
1:                 ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
1:                 endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
1:             }
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQEndpointWorker worker = null;
1:             synchronized (endpointWorkers) {
1:                 worker = endpointWorkers.remove(key);
1:             }
author:Andy Taylor
-------------------------------------------------------------------------------
commit:9becfc0
/////////////////////////////////////////////////////////////////////////
1:             cf = createConnectionFactory(getInfo(), activationSpec);
author:gtully
-------------------------------------------------------------------------------
commit:e1cd19e
/////////////////////////////////////////////////////////////////////////
1:                                 } catch (JMSException ignored) {}
1:                             setConnection(original);
commit:e8818fa
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.Xid;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQResourceAdapter.class);
/////////////////////////////////////////////////////////////////////////
1:             return new XAResource[]{
1:                     new TransactionContext() {
1: 
1:                         @Override
1:                         public boolean isSameRM(XAResource xaresource) throws XAException {
1:                             ActiveMQConnection original = null;
1:                             try {
1:                                 original = setConnection(newConnection());
1:                                 boolean result = super.isSameRM(xaresource);
1:                                 LOG.trace("{}.recover({})={}", getConnection(), xaresource, result);
1:                                 return result;
1: 
1:                             } catch (JMSException e) {
1:                                 LOG.trace("isSameRM({}) failed", xaresource, e);
1:                                 XAException xaException = new XAException(e.getMessage());
1:                                 throw xaException;
1:                             } finally {
1:                                 closeConnection(original);
1:                             }
1:                         }
1: 
1:                         @Override
1:                         protected String getResourceManagerId() throws JMSException {
1:                             ActiveMQConnection original = null;
1:                             try {
1:                                 original = setConnection(newConnection());
1:                                 return super.getResourceManagerId();
1:                             } finally {
1:                                 closeConnection(original);
1:                             }
1:                         }
1: 
1:                         @Override
1:                         public void commit(Xid xid, boolean onePhase) throws XAException {
1:                             ActiveMQConnection original = null;
1:                             try {
1:                                 setConnection(newConnection());
1:                                 super.commit(xid, onePhase);
1:                                 LOG.trace("{}.commit({},{})", getConnection(), xid);
1: 
1:                             } catch (JMSException e) {
1:                                 LOG.trace("{}.commit({},{}) failed", getConnection(), xid, onePhase, e);
1:                                 throwXAException(e);
1:                             } finally {
1:                                 closeConnection(original);
1:                             }
1:                         }
1: 
1:                         @Override
1:                         public void rollback(Xid xid) throws XAException {
1:                             ActiveMQConnection original = null;
1:                             try {
1:                                 original = setConnection(newConnection());
1:                                 super.rollback(xid);
1:                                 LOG.trace("{}.rollback({})", getConnection(), xid);
1: 
1:                             } catch (JMSException e) {
1:                                 LOG.trace("{}.rollback({}) failed", getConnection(), xid, e);
1:                                 throwXAException(e);
1:                             } finally {
1:                                closeConnection(original);
1:                             }
1:                         }
1: 
1:                         @Override
1:                         public Xid[] recover(int flags) throws XAException {
1:                             Xid[] result = new Xid[]{};
1:                             ActiveMQConnection original = null;
1:                             try {
1:                                 original = setConnection(newConnection());
1:                                 result = super.recover(flags);
1:                                 LOG.trace("{}.recover({})={}", getConnection(), flags, result);
1: 
1:                             } catch (JMSException e) {
1:                                 LOG.trace("{}.recover({}) failed", getConnection(), flags, e);
1:                                 throwXAException(e);
1:                             } finally {
1:                                 closeConnection(original);
1:                             }
1:                             return result;
1:                         }
1: 
1:                         @Override
1:                         public void forget(Xid xid) throws XAException {
1:                             ActiveMQConnection original = null;
1:                             try {
1:                                 original = setConnection(newConnection());
1:                                 super.forget(xid);
1:                                 LOG.trace("{}.forget({})", getConnection(), xid);
1: 
1:                             } catch (JMSException e) {
1:                                 LOG.trace("{}.forget({}) failed", getConnection(), xid, e);
1:                                 throwXAException(e);
1:                             } finally {
1:                                 closeConnection(original);
1:                             }
1:                         }
1: 
1:                         private void throwXAException(JMSException e) throws XAException {
1:                             XAException xaException = new XAException(e.getMessage());
1:                             xaException.errorCode = XAException.XAER_RMFAIL;
1:                             throw xaException;
1:                         }
1: 
1:                         private ActiveMQConnection newConnection() throws JMSException {
0:                             ActiveMQConnection connection = makeConnection();
0:                             connection.start();
1:                             return connection;
1:                         }
1: 
1:                         private void closeConnection(ActiveMQConnection original) {
1:                             ActiveMQConnection connection = getConnection();
1:                             if (connection != null) {
1:                                 try {
1:                                     connection.close();
0:                                 } catch (JMSException ignored) {
1: 
1:                                 } finally {
0:                                     setConnection(original);
1:                             }
1:                         }
1:                     }};
commit:3826a23
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return new XAResource[]{(XAResource)
0:                     java.lang.reflect.Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{XAResource.class},
0:                             new java.lang.reflect.InvocationHandler () {
1:                                 @Override
0:                                 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
0:                                     ActiveMQConnection connection = makeConnection();
1:                                     try {
0:                                         return method.invoke(new TransactionContext(connection), args);
0:                                     } finally {
1:                                         try {
0:                                             connection.close();
0:                                         } catch (Throwable ignore) {}
1:                                     }
1:                                 }
0:                             })};
1: 
1:         } catch (Exception e) {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:1999ddf
/////////////////////////////////////////////////////////////////////////
1:                         // Default the ServerUrl to the local broker if not specified in the ra.xml
1:                         if (getServerUrl() == null) {
1:                             setServerUrl("vm://" + broker.getBrokerName() + "?create=false");
1:                         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:f2b01a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TransactionContext;
/////////////////////////////////////////////////////////////////////////
0:             final ActiveMQConnection connection = makeConnection();
0:             return new XAResource[]{new LocalAndXATransaction(new TransactionContext(connection)) {
0:                 public void finalize() throws Throwable {
1:                     try {
0:                         connection.close();
0:                     } catch (Throwable ignore) {
0:                     } finally {
0:                         super.finalize();
1:                     }
1:                 }
0:             }};
commit:757a2f1
/////////////////////////////////////////////////////////////////////////
1:             throw new NotSupportedException("That type of ActivationSpec not supported: " + activationSpec.getClass());
commit:a259bab
/////////////////////////////////////////////////////////////////////////
1:                         // ensure RAR resources are available to xbean (needed for weblogic)
1:                         log.debug("original thread context classLoader: " + Thread.currentThread().getContextClassLoader());
1:                         Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
1:                         log.debug("current (from getClass()) thread context classLoader: " + Thread.currentThread().getContextClassLoader());
1:                         
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:aa62069
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQConnectionFactory connectionFactory;
1:     
/////////////////////////////////////////////////////////////////////////
1:         if( connectionFactory == null ) {
1:             return makeConnection(getInfo());
1:         } else {
1:             return makeConnection(getInfo(), connectionFactory);
1:     }
0:         ActiveMQConnectionFactory connectionFactory = this.connectionFactory;
0:         if (connectionFactory == null) {
0:             connectionFactory = createConnectionFactory(getInfo());
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public ActiveMQConnectionFactory getConnectionFactory() {
1:         return connectionFactory;
1:     }
1: 
0:     public void setConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
0:         this.connectionFactory = connectionFactory;
1:     }
1: 
commit:43d58b5
/////////////////////////////////////////////////////////////////////////
0:     private Thread brokerStartThread;
/////////////////////////////////////////////////////////////////////////
1:             brokerStartThread = new Thread("Starting ActiveMQ Broker") {
1:                 public void run () {
1:                     try {
1:                         synchronized( ActiveMQResourceAdapter.this ) {
1:                             broker = BrokerFactory.createBroker(new URI(brokerXmlConfig));
1:                         }
1:                         broker.start();
1:                     } catch (Throwable e) {
0:                         LOG.warn("Could not start up embeded ActiveMQ Broker '"+brokerXmlConfig+"': "+e.getMessage());
0:                         LOG.debug("Reason for: "+e.getMessage(), e);
1:                     }
1:                 }
1:             };
1:             brokerStartThread.setDaemon(true);
1:             brokerStartThread.start();
1:             
1:             // Wait up to 5 seconds for the broker to start up in the async thread.. otherwise keep going without it..
1:                 brokerStartThread.join(1000*5);
1:             } catch (InterruptedException e) {
1:                 Thread.currentThread().interrupt();
1:             }                
/////////////////////////////////////////////////////////////////////////
1:         
1:         synchronized( this ) {
1:             if (broker != null) {
1:                 if( brokerStartThread.isAlive() ) {
1:                     brokerStartThread.interrupt();
1:                 }
1:                 ServiceSupport.dispose(broker);
1:                 broker = null;
1:             }
1:         
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * and deliver messages to those end points using the connection configure in
1:  * the resource adapter. <p/>Must override equals and hashCode (JCA spec 16.4)
1:  * 
1:  *                         description="The JCA Resource Adaptor for ActiveMQ"
0:     private static final Log LOG = LogFactory.getLog(ActiveMQResourceAdapter.class);
1: 
0:     private final HashMap<ActiveMQEndpointActivationKey, ActiveMQEndpointWorker> endpointWorkers = new HashMap<ActiveMQEndpointActivationKey, ActiveMQEndpointWorker>();
/////////////////////////////////////////////////////////////////////////
1:         super();
/////////////////////////////////////////////////////////////////////////
1:         if (brokerXmlConfig != null && brokerXmlConfig.trim().length() > 0) {
0:                 throw new ResourceAdapterInternalException("Failed to startup an embedded broker: " + brokerXmlConfig + ", due to: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.activemq.ra.MessageResourceAdapter#makeConnection(org.apache.activemq.ra.ActiveMQConnectionRequestInfo,
0:      *      org.apache.activemq.ActiveMQConnectionFactory)
0:         ActiveMQConnection physicalConnection = (ActiveMQConnection)connectionFactory.createConnection(userName, password);
/////////////////////////////////////////////////////////////////////////
1:         } else {
0:                 LOG.warn("No clientID specified for durable subscription: " + activationSpec);
0:         ActiveMQConnection physicalConnection = (ActiveMQConnection)connectionFactory.createConnection(userName, password);
/////////////////////////////////////////////////////////////////////////
0:     private synchronized ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo info) throws JMSException {
0:         } else if (factory == null) {
/////////////////////////////////////////////////////////////////////////
0:         if (value != null) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
/////////////////////////////////////////////////////////////////////////
1:     public void endpointActivation(MessageEndpointFactory endpointFactory, ActivationSpec activationSpec) throws ResourceException {
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory, (MessageActivationSpec)activationSpec);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory, (MessageActivationSpec)activationSpec);
0:             ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:                 XASession session = ((XAConnection)connection).createXASession();
0:                 return new XAResource[] {
0:                     xaResource
0:                 };
/////////////////////////////////////////////////////////////////////////
1:                 //
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param brokerXmlConfig is the filename which is assumed to be on the
1:      *                classpath unless a URL is specified. So a value of
1:      *                <code>foo/bar.xml</code> would be assumed to be on the
1:      *                classpath whereas <code>file:dir/file.xml</code> would
1:      *                use the file system. Any valid URL string is supported.
1:         this.brokerXmlConfig = brokerXmlConfig;
/////////////////////////////////////////////////////////////////////////
1:         final MessageResourceAdapter activeMQResourceAdapter = (MessageResourceAdapter)o;
1:         if (notEqual(brokerXmlConfig, activeMQResourceAdapter.getBrokerXmlConfig())) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (brokerXmlConfig != null) {
/////////////////////////////////////////////////////////////////////////
0:      * This allows a connection factory to be configured and shared between a
0:      * ResourceAdaptor and outbound messaging. Note that setting the
0:      * connectionFactory will overload many of the properties on this POJO such
0:      * as the redelivery and prefetch policies; the properties on the
0:      * connectionFactory will be used instead.
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:3263205
/////////////////////////////////////////////////////////////////////////
0:                 throw new ResourceAdapterInternalException("Failed to startup an embedded broker: "+brokerXmlConfig+", due to: "+e, e);
commit:68d245f
/////////////////////////////////////////////////////////////////////////
0: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="resourceAdapter" rootElement="true"
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.ServiceSupport;
author:Robert Davies
-------------------------------------------------------------------------------
commit:58e5b9a
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = getConnectionFactory();
1:         if (cf == null) {
0:             cf = createConnectionFactory(getInfo());
1:             cf.setClientID(clientId);
1:         ActiveMQConnection physicalConnection = (ActiveMQConnection) cf.createConnection(userName, password);
/////////////////////////////////////////////////////////////////////////
1:     public void setConnectionFactory(ActiveMQConnectionFactory aConnectionFactory) {
1:         this.connectionFactory = aConnectionFactory;
commit:8733d17
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class ActiveMQResourceAdapter extends ActiveMQConnectionSupport implements MessageResourceAdapter {
/////////////////////////////////////////////////////////////////////////
1:                         log.warn("Could not start up embeded ActiveMQ Broker '"+brokerXmlConfig+"': "+e.getMessage());
1:                         log.debug("Reason for: "+e.getMessage(), e);
/////////////////////////////////////////////////////////////////////////
0:         return makeConnection(getInfo());
0:         ActiveMQConnectionFactory connectionFactory = createConnectionFactory(getInfo());
1:         String userName = defaultValue(activationSpec.getUserName(), getInfo().getUserName());
1:         String password = defaultValue(activationSpec.getPassword(), getInfo().getPassword());
1:                 log.warn("No clientID specified for durable subscription: " + activationSpec);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!getInfo().equals(activeMQResourceAdapter.getInfo())) {
/////////////////////////////////////////////////////////////////////////
1:         result = getInfo().hashCode();
author:James Strachan
-------------------------------------------------------------------------------
commit:3bd948f
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.ra;
1: 
0: import java.io.Serializable;
1: import java.net.URI;
0: import java.net.URISyntaxException;
1: import java.util.HashMap;
1: 
0: import javax.jms.Connection;
1: import javax.jms.JMSException;
0: import javax.jms.XAConnection;
0: import javax.jms.XASession;
1: import javax.resource.NotSupportedException;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.ActivationSpec;
1: import javax.resource.spi.BootstrapContext;
1: import javax.resource.spi.ResourceAdapterInternalException;
1: import javax.resource.spi.endpoint.MessageEndpointFactory;
1: import javax.transaction.xa.XAResource;
1: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.util.ServiceSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Knows how to connect to one ActiveMQ server. It can then activate endpoints
0:  * and deliver messages to those end points using the connection configure in the
0:  * resource adapter. <p/>Must override equals and hashCode (JCA spec 16.4)
0:  *
0:  * @org.apache.xbean.XBean element="resourceAdapter" rootElement="true"
0:  * description="The JCA Resource Adaptor for ActiveMQ"
0:  *
0:  * @version $Revision$
1:  */
0: public class ActiveMQResourceAdapter implements MessageResourceAdapter, Serializable {
1: 
0:     private static final long serialVersionUID = -5417363537865649130L;
0:     private static final Log log = LogFactory.getLog(ActiveMQResourceAdapter.class);
1:     
0:     private final HashMap endpointWorkers = new HashMap();
0:     private final ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
1: 
0:     private BootstrapContext bootstrapContext;
1:     private String brokerXmlConfig;
0:     private BrokerService broker;
0:     private ActiveMQConnectionFactory connectionFactory;
1: 
1:     /**
0:      * 
1:      */
1:     public ActiveMQResourceAdapter() {
0:     	super();
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ResourceAdapter#start(javax.resource.spi.BootstrapContext)
1:      */
1:     public void start(BootstrapContext bootstrapContext) throws ResourceAdapterInternalException {
1:         this.bootstrapContext = bootstrapContext;
0:         if (brokerXmlConfig!=null && brokerXmlConfig.trim().length()>0 ) {
0:             try {
0:                 broker = BrokerFactory.createBroker(new URI(brokerXmlConfig));
0:                 broker.start();
0:             } catch (Throwable e) {
0:                 throw new ResourceAdapterInternalException("Failed to startup an embedded broker: "+brokerXmlConfig+", due to: "+e, e);
1:             }
1:         }
1:     }
1: 
1:     /**
0:      * @see org.apache.activemq.ra.MessageResourceAdapter#makeConnection()
1:      */
1:     public ActiveMQConnection makeConnection() throws JMSException {
0:         if (connectionFactory != null) {
0:             return makeConnection(info, connectionFactory);
1:         }
0:         return makeConnection(info);
1:     }
1: 
1:     /**
1:      */
0:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo info) throws JMSException {
1: 
0:         ActiveMQConnectionFactory connectionFactory = createConnectionFactory(info);
0:         return makeConnection(info, connectionFactory);
1:     }
1: 
1:     /**
0:      * @see org.apache.activemq.ra.MessageResourceAdapter#makeConnection(org.apache.activemq.ra.ActiveMQConnectionRequestInfo, org.apache.activemq.ActiveMQConnectionFactory)
1:      */
0:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo info, ActiveMQConnectionFactory connectionFactory) throws JMSException {
0:         String userName = info.getUserName();
0:         String password = info.getPassword();
0:         ActiveMQConnection physicalConnection = (ActiveMQConnection) connectionFactory.createConnection(userName, password);
1: 
0:         String clientId = info.getClientid();
0:         if (clientId != null && clientId.length() > 0) {
0:             physicalConnection.setClientID(clientId);
1:         }
1:         return physicalConnection;
1:     }
1: 
1:     /**
1:      * @param activationSpec
1:      */
1:     public ActiveMQConnection makeConnection(MessageActivationSpec activationSpec) throws JMSException {
0:         ActiveMQConnectionFactory connectionFactory = createConnectionFactory(info);
0:         String userName = defaultValue(activationSpec.getUserName(), info.getUserName());
0:         String password = defaultValue(activationSpec.getPassword(), info.getPassword());
1:         String clientId = activationSpec.getClientId();
1:         if (clientId != null) {
0:             connectionFactory.setClientID(clientId);
1:         }
0:         else {
1:             if (activationSpec.isDurableSubscription()) {
0:                 log.warn("No clientID specified for durable subscription: " + activationSpec);
1:             }
1:         }
0:         ActiveMQConnection physicalConnection = (ActiveMQConnection) connectionFactory.createConnection(userName, password);
1: 
1:         // have we configured a redelivery policy
1:         RedeliveryPolicy redeliveryPolicy = activationSpec.redeliveryPolicy();
1:         if (redeliveryPolicy != null) {
1:             physicalConnection.setRedeliveryPolicy(redeliveryPolicy);
1:         }
1:         return physicalConnection;
1:     }
1: 
1:     /**
0:      * @param info
0:      * @throws JMSException
0:      * @throws URISyntaxException
1:      */
0:     synchronized private ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo info) throws JMSException {
0:         ActiveMQConnectionFactory factory = connectionFactory;
0:         if (factory != null && info.isConnectionFactoryConfigured()) {
0:             factory = factory.copy();
1:         }
0:         else if (factory == null) {
0:             factory = new ActiveMQConnectionFactory();
1:         }
0:         info.configure(factory);
0:         return factory;
1:     }
1: 
0:     private String defaultValue(String value, String defaultValue) {
0:         if (value != null)
0:             return value;
0:         return defaultValue;
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ResourceAdapter#stop()
1:      */
1:     public void stop() {
0:         while (endpointWorkers.size() > 0) {
0:             ActiveMQEndpointActivationKey key = (ActiveMQEndpointActivationKey) endpointWorkers.keySet().iterator().next();
0:             endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
1:         }
0:         if (broker != null) {
0:             ServiceSupport.dispose(broker);
0:             broker = null;
1:         }
1:         this.bootstrapContext = null;
1:     }
1: 
1:     /**
1:      * @see org.apache.activemq.ra.MessageResourceAdapter#getBootstrapContext()
1:      */
1:     public BootstrapContext getBootstrapContext() {
1:         return bootstrapContext;
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ResourceAdapter#endpointActivation(javax.resource.spi.endpoint.MessageEndpointFactory,
1:      *      javax.resource.spi.ActivationSpec)
1:      */
0:     public void endpointActivation(MessageEndpointFactory endpointFactory, ActivationSpec activationSpec)
0:             throws ResourceException {
1: 
1:         // spec section 5.3.3
1:         if (!equals(activationSpec.getResourceAdapter())) {
1:             throw new ResourceException("Activation spec not initialized with this ResourceAdapter instance (" + activationSpec.getResourceAdapter() + " != " + this + ")");
1:         }
1: 
1:         if (!(activationSpec instanceof MessageActivationSpec)) {
0:             throw new NotSupportedException("That type of ActicationSpec not supported: " + activationSpec.getClass());
1:         }
1: 
0:         ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory,
0:                 (MessageActivationSpec) activationSpec);
1:         // This is weird.. the same endpoint activated twice.. must be a
1:         // container error.
1:         if (endpointWorkers.containsKey(key)) {
1:             throw new IllegalStateException("Endpoint previously activated");
1:         }
1: 
1:         ActiveMQEndpointWorker worker = new ActiveMQEndpointWorker(this, key);
1: 
1:         endpointWorkers.put(key, worker);
1:         worker.start();
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ResourceAdapter#endpointDeactivation(javax.resource.spi.endpoint.MessageEndpointFactory,
1:      *      javax.resource.spi.ActivationSpec)
1:      */
1:     public void endpointDeactivation(MessageEndpointFactory endpointFactory, ActivationSpec activationSpec) {
1: 
1:         if (activationSpec instanceof MessageActivationSpec) {
0:             ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory, (MessageActivationSpec) activationSpec);
0:             ActiveMQEndpointWorker worker = (ActiveMQEndpointWorker) endpointWorkers.remove(key);
1:             if (worker == null) {
1:                 // This is weird.. that endpoint was not activated.. oh well..
1:                 // this method
1:                 // does not throw exceptions so just return.
1:                 return;
1:             }
0:             try {
1:                 worker.stop();
1:             } catch (InterruptedException e) {
1:                 // We interrupted.. we won't throw an exception but will stop
1:                 // waiting for the worker
1:                 // to stop.. we tried our best. Keep trying to interrupt the
1:                 // thread.
1:                 Thread.currentThread().interrupt();
1:             }
1: 
1:         }
1: 
1:     }
1: 
1:     /**
1:      * We only connect to one resource manager per ResourceAdapter instance, so
1:      * any ActivationSpec will return the same XAResource.
0:      *
1:      * @see javax.resource.spi.ResourceAdapter#getXAResources(javax.resource.spi.ActivationSpec[])
1:      */
1:     public XAResource[] getXAResources(ActivationSpec[] activationSpecs) throws ResourceException {
0:         Connection connection = null;
0:         try {
0:             connection = makeConnection();
0:             if (connection instanceof XAConnection) {
0:                 XASession session = ((XAConnection) connection).createXASession();
0:                 XAResource xaResource = session.getXAResource();
0:                 return new XAResource[] { xaResource };
1:             }
0:             return new XAResource[] {};
0:         } catch (JMSException e) {
1:             throw new ResourceException(e);
0:         } finally {
0:             try {
0:                 connection.close();
0:             } catch (Throwable ignore) {
1:             	//
1:             }
1:         }
1:     }
1: 
1:     // ///////////////////////////////////////////////////////////////////////
1:     //
1:     // Java Bean getters and setters for this ResourceAdapter class.
1:     //
1:     // ///////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * @return client id
1:      */
0:     public String getClientid() {
0:         return emptyToNull(info.getClientid());
1:     }
1: 
1:     /**
0:      * @return password
1:      */
0:     public String getPassword() {
0:         return emptyToNull(info.getPassword());
1:     }
1: 
1:     /**
0:      * @return server URL
1:      */
0:     public String getServerUrl() {
0:         return info.getServerUrl();
1:     }
1: 
1:     /**
0:      * @return user name
1:      */
0:     public String getUserName() {
0:         return emptyToNull(info.getUserName());
1:     }
1: 
1:     /**
0:      * @param clientid
1:      */
0:     public void setClientid(String clientid) {
0:         info.setClientid(clientid);
1:     }
1: 
1:     /**
0:      * @param password
1:      */
0:     public void setPassword(String password) {
0:         info.setPassword(password);
1:     }
1: 
1:     /**
0:      * @param url
1:      */
0:     public void setServerUrl(String url) {
0:         info.setServerUrl(url);
1:     }
1: 
1:     /**
0:      * @param userid
1:      */
0:     public void setUserName(String userid) {
0:         info.setUserName(userid);
1:     }
1: 
1:     /**
1:      * @see org.apache.activemq.ra.MessageResourceAdapter#getBrokerXmlConfig()
1:      */
1:     public String getBrokerXmlConfig() {
1:         return brokerXmlConfig;
1:     }
1: 
1:     /**
1:      * Sets the <a href="http://activemq.org/Xml+Configuration">XML
1:      * configuration file </a> used to configure the ActiveMQ broker via Spring
1:      * if using embedded mode.
0:      *
0:      * @param brokerXmlConfig
0:      *            is the filename which is assumed to be on the classpath unless
0:      *            a URL is specified. So a value of <code>foo/bar.xml</code>
0:      *            would be assumed to be on the classpath whereas
0:      *            <code>file:dir/file.xml</code> would use the file system.
0:      *            Any valid URL string is supported.
1:      */
1:     public void setBrokerXmlConfig(String brokerXmlConfig) {
0:         this.brokerXmlConfig=brokerXmlConfig;
1:     }
1: 
1:     /**
0:      * @return durable topic prefetch
1:      */
0:     public Integer getDurableTopicPrefetch() {
0:         return info.getDurableTopicPrefetch();
1:     }
1: 
1:     /**
0:      * @return initial redelivery delay
1:      */
0:     public Long getInitialRedeliveryDelay() {
0:         return info.getInitialRedeliveryDelay();
1:     }
1: 
1:     /**
0:      * @return input stream prefetch
1:      */
0:     public Integer getInputStreamPrefetch() {
0:         return info.getInputStreamPrefetch();
1:     }
1: 
1:     /**
0:      * @return maximum redeliveries
1:      */
0:     public Integer getMaximumRedeliveries() {
0:         return info.getMaximumRedeliveries();
1:     }
1: 
1:     /**
0:      * @return queue browser prefetch
1:      */
0:     public Integer getQueueBrowserPrefetch() {
0:         return info.getQueueBrowserPrefetch();
1:     }
1: 
1:     /**
0:      * @return queue prefetch
1:      */
0:     public Integer getQueuePrefetch() {
0:         return info.getQueuePrefetch();
1:     }
1: 
1:     /**
0:      * @return redelivery backoff multiplier
1:      */
0:     public Short getRedeliveryBackOffMultiplier() {
0:         return info.getRedeliveryBackOffMultiplier();
1:     }
1: 
1:     /**
0:      * @return redelivery use exponential backoff
1:      */
0:     public Boolean getRedeliveryUseExponentialBackOff() {
0:         return info.getRedeliveryUseExponentialBackOff();
1:     }
1: 
1:     /**
0:      * @return topic prefetch
1:      */
0:     public Integer getTopicPrefetch() {
0:         return info.getTopicPrefetch();
1:     }
1: 
1:     /**
0:      * @return use inbound session enabled
1:      */
0:     public boolean isUseInboundSessionEnabled() {
0:         return info.isUseInboundSessionEnabled();
1:     }
1: 
1:     /**
0:      * @param i
1:      */
0:     public void setAllPrefetchValues(Integer i) {
0:         info.setAllPrefetchValues(i);
1:     }
1: 
1:     /**
0:      * @param durableTopicPrefetch
1:      */
0:     public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
0:         info.setDurableTopicPrefetch(durableTopicPrefetch);
1:     }
1: 
1:     /**
0:      * @param value
1:      */
0:     public void setInitialRedeliveryDelay(Long value) {
0:         info.setInitialRedeliveryDelay(value);
1:     }
1: 
1:     /**
0:      * @param inputStreamPrefetch
1:      */
0:     public void setInputStreamPrefetch(Integer inputStreamPrefetch) {
0:         info.setInputStreamPrefetch(inputStreamPrefetch);
1:     }
1: 
1:     /**
0:      * @param value
1:      */
0:     public void setMaximumRedeliveries(Integer value) {
0:         info.setMaximumRedeliveries(value);
1:     }
1: 
1:     /**
0:      * @param queueBrowserPrefetch
1:      */
0:     public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
0:         info.setQueueBrowserPrefetch(queueBrowserPrefetch);
1:     }
1: 
1:     /**
0:      * @param queuePrefetch
1:      */
0:     public void setQueuePrefetch(Integer queuePrefetch) {
0:         info.setQueuePrefetch(queuePrefetch);
1:     }
1: 
1:     /**
0:      * @param value
1:      */
0:     public void setRedeliveryBackOffMultiplier(Short value) {
0:         info.setRedeliveryBackOffMultiplier(value);
1:     }
1: 
1:     /**
0:      * @param value
1:      */
0:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
0:         info.setRedeliveryUseExponentialBackOff(value);
1:     }
1: 
1:     /**
0:      * @param topicPrefetch
1:      */
0:     public void setTopicPrefetch(Integer topicPrefetch) {
0:         info.setTopicPrefetch(topicPrefetch);
1:     }
1: 
1:     /**
0:      * @return Returns the info.
1:      */
0:     public ActiveMQConnectionRequestInfo getInfo() {
0:         return info;
1:     }
1: 
1:     /**
1:      * @see java.lang.Object#equals(java.lang.Object)
1:      */
1:     @Override
1:     public boolean equals(Object o) {
1:         if (this == o) {
1:             return true;
1:         }
1:         if (!(o instanceof MessageResourceAdapter)) {
1:             return false;
1:         }
1: 
0:         final MessageResourceAdapter activeMQResourceAdapter = (MessageResourceAdapter) o;
1: 
0:         if (!info.equals(activeMQResourceAdapter.getInfo())) {
1:             return false;
1:         }
0:         if ( notEqual(brokerXmlConfig, activeMQResourceAdapter.getBrokerXmlConfig()) ) {
1:             return false;
1:         }
1: 
1:         return true;
1:     }
1: 
0:     private boolean notEqual(Object o1, Object o2) {
0:         return (o1 == null ^ o2 == null) || (o1 != null && !o1.equals(o2));
1:     }
1: 
1: 
1:     /**
1:      * @see java.lang.Object#hashCode()
1:      */
1:     @Override
1:     public int hashCode() {
1:         int result;
0:         result = info.hashCode();
0:         if( brokerXmlConfig !=null ) {
1:             result ^= brokerXmlConfig.hashCode();
1:         }
1:         return result;
1:     }
1: 
0:     private String emptyToNull(String value) {
0:         if (value == null || value.length() == 0) {
0:             return null;
1:         }
0:         return value;
1:     }
1: 
1:     /**
0:      * @return use inbound session
1:      */
0:     public Boolean getUseInboundSession() {
0:         return info.getUseInboundSession();
1:     }
1: 
1:     /**
0:      * @param useInboundSession
1:      */
0:     public void setUseInboundSession(Boolean useInboundSession) {
0:         info.setUseInboundSession(useInboundSession);
1:     }
1: 
1:     /**
0:      * @see org.apache.activemq.ra.MessageResourceAdapter#getConnectionFactory()
1:      */
0:     public ActiveMQConnectionFactory getConnectionFactory() {
0:         return connectionFactory;
1:     }
1: 
1:     /**
0:      * This allows a connection factory to be configured and shared between a ResourceAdaptor and outbound messaging.
0:      * Note that setting the connectionFactory will overload many of the properties on this POJO such as the redelivery
0:      * and prefetch policies; the properties on the connectionFactory will be used instead.
1:      */
0:     public void setConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
0:         this.connectionFactory = connectionFactory;
1:     }
1: 
1: 
1: }
commit:d7355e7
/////////////////////////////////////////////////////////////////////////
commit:27a677f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.RedeliveryPolicy;
/////////////////////////////////////////////////////////////////////////
0: 
0:         // have we configured a redelivery policy
0:         RedeliveryPolicy redeliveryPolicy = activationSpec.redeliveryPolicy();
0:         if (redeliveryPolicy != null) {
0:             physicalConnection.setRedeliveryPolicy(redeliveryPolicy);
0:         }
commit:149a929
/////////////////////////////////////////////////////////////////////////
0:         if (clientId != null && clientId.length() > 0) {
commit:4759540
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.util.ServiceSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0: import java.io.Serializable;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0:     private static final long serialVersionUID = -5417363537865649130L;
0:     private static final Log log = LogFactory.getLog(ActiveMQResourceAdapter.class);
0:     
/////////////////////////////////////////////////////////////////////////
0:         String clientId = activationSpec.getClientId();
0:         if (clientId != null) {
0:             connectionFactory.setClientID(clientId);
0:         else {
0:             if (activationSpec.isDurableSubscription()) {
0:                 log.warn("No clientID specified for durable subscription: " + activationSpec);
0:             }
0:         }
0:         ActiveMQConnection physicalConnection = (ActiveMQConnection) connectionFactory.createConnection(userName, password);
commit:c91724c
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnectionFactory factory = connectionFactory;
0:         if (factory != null && info.isConnectionFactoryConfigured()) {
0:             factory = factory.copy();
0:         }
0:         else if (factory == null) {
0:             factory = new ActiveMQConnectionFactory();
0:         }
0:         info.configure(factory);
commit:cc1de0e
/////////////////////////////////////////////////////////////////////////
0:     private ActiveMQConnectionFactory connectionFactory;
/////////////////////////////////////////////////////////////////////////
0:         if (connectionFactory != null) {
0:             return makeConnection(info, connectionFactory);
0:         }
0:         else {
0:             return makeConnection(info);
0:         }
/////////////////////////////////////////////////////////////////////////
0:         return makeConnection(info, connectionFactory);
0:     }
0: 
0:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo info, ActiveMQConnectionFactory connectionFactory) throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:     public ActiveMQConnectionFactory getConnectionFactory() {
0:         return connectionFactory;
0:     }
0: 
0:     /**
0:      * This allows a connection factory to be configured and shared between a ResourceAdaptor and outbound messaging.
0:      * Note that setting the connectionFactory will overload many of the properties on this POJO such as the redelivery
0:      * and prefetch policies; the properties on the connectionFactory will be used instead.
0:      */
0:     public void setConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
0:         this.connectionFactory = connectionFactory;
0:     }
0: 
commit:205ac11
/////////////////////////////////////////////////////////////////////////
0:         factory.setRedeliveryPolicy(info.redeliveryPolicy());
0:         factory.setPrefetchPolicy(info.prefetchPolicy());
/////////////////////////////////////////////////////////////////////////
0:     public Integer getDurableTopicPrefetch() {
0:         return info.getDurableTopicPrefetch();
0:     }
0: 
0:     public Long getInitialRedeliveryDelay() {
0:         return info.getInitialRedeliveryDelay();
0:     }
0: 
0:     public Integer getInputStreamPrefetch() {
0:         return info.getInputStreamPrefetch();
0:     }
0: 
0:     public Integer getMaximumRedeliveries() {
0:         return info.getMaximumRedeliveries();
0:     }
0: 
0:     public Integer getQueueBrowserPrefetch() {
0:         return info.getQueueBrowserPrefetch();
0:     }
0: 
0:     public Integer getQueuePrefetch() {
0:         return info.getQueuePrefetch();
0:     }
0: 
0:     public Short getRedeliveryBackOffMultiplier() {
0:         return info.getRedeliveryBackOffMultiplier();
0:     }
0: 
0:     public Boolean getRedeliveryUseExponentialBackOff() {
0:         return info.getRedeliveryUseExponentialBackOff();
0:     }
0: 
0:     public Integer getTopicPrefetch() {
0:         return info.getTopicPrefetch();
0:     }
0: 
0:     public boolean isUseInboundSessionEnabled() {
0:         return info.isUseInboundSessionEnabled();
0:     }
0: 
0:     public void setAllPrefetchValues(Integer i) {
0:         info.setAllPrefetchValues(i);
0:     }
0: 
0:     public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
0:         info.setDurableTopicPrefetch(durableTopicPrefetch);
0:     }
0: 
0:     public void setInitialRedeliveryDelay(Long value) {
0:         info.setInitialRedeliveryDelay(value);
0:     }
0: 
0:     public void setInputStreamPrefetch(Integer inputStreamPrefetch) {
0:         info.setInputStreamPrefetch(inputStreamPrefetch);
0:     }
0: 
0:     public void setMaximumRedeliveries(Integer value) {
0:         info.setMaximumRedeliveries(value);
0:     }
0: 
0:     public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
0:         info.setQueueBrowserPrefetch(queueBrowserPrefetch);
0:     }
0: 
0:     public void setQueuePrefetch(Integer queuePrefetch) {
0:         info.setQueuePrefetch(queuePrefetch);
0:     }
0: 
0:     public void setRedeliveryBackOffMultiplier(Short value) {
0:         info.setRedeliveryBackOffMultiplier(value);
0:     }
0: 
0:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
0:         info.setRedeliveryUseExponentialBackOff(value);
0:     }
0: 
0:     public void setTopicPrefetch(Integer topicPrefetch) {
0:         info.setTopicPrefetch(topicPrefetch);
0:     }
0: 
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  *
0:  **/
0: package org.activemq.ra;
0: 
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.HashMap;
0: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.XAConnection;
0: import javax.jms.XASession;
0: import javax.resource.NotSupportedException;
0: import javax.resource.ResourceException;
0: import javax.resource.spi.ActivationSpec;
0: import javax.resource.spi.BootstrapContext;
0: import javax.resource.spi.ResourceAdapter;
0: import javax.resource.spi.ResourceAdapterInternalException;
0: import javax.resource.spi.endpoint.MessageEndpointFactory;
0: import javax.transaction.xa.XAResource;
0: 
0: import org.activemq.ActiveMQConnection;
0: import org.activemq.ActiveMQConnectionFactory;
0: import org.activemq.broker.BrokerFactory;
0: import org.activemq.broker.BrokerService;
0: import org.activemq.util.ServiceSupport;
0: 
0: /**
0:  * Knows how to connect to one ActiveMQ server. It can then activate endpoints
0:  * and deliver messages to those end points using the connection configure in the
0:  * resource adapter. <p/>Must override equals and hashCode (JCA spec 16.4)
0:  * 
0:  * @org.xbean.XBean element="resourceAdapter" rootElement="true"
0:  * description="The JCA Resource Adaptor for ActiveMQ"
0:  * 
0:  * @version $Revision$
0:  */
0: public class ActiveMQResourceAdapter implements ResourceAdapter {
0: 
0:     private final HashMap endpointWorkers = new HashMap();
0:     private final ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
0: 
0:     private BootstrapContext bootstrapContext;
0:     private String brokerXmlConfig;
0:     private BrokerService broker;
0: 
0:     public ActiveMQResourceAdapter() {
0:     }
0: 
0:     /**
0:      * @see javax.resource.spi.ResourceAdapter#start(javax.resource.spi.BootstrapContext)
0:      */
0:     public void start(BootstrapContext bootstrapContext) throws ResourceAdapterInternalException {
0:         this.bootstrapContext = bootstrapContext;
0:         if (brokerXmlConfig!=null && brokerXmlConfig.trim().length()>0 ) {
0:             try {
0:                 broker = BrokerFactory.createBroker(new URI(brokerXmlConfig));
0:                 broker.start();
0:             } catch (Throwable e) {
0:                 throw new ResourceAdapterInternalException("Failed to startup an embedded broker: "+e, e);
0:             }
0:         }
0:     }
0: 
0:     public ActiveMQConnection makeConnection() throws JMSException {
0:         return makeConnection(info);
0:     }
0:     
0:     /**
0:      */
0:     public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo info) throws JMSException {
0: 
0:         ActiveMQConnectionFactory connectionFactory = createConnectionFactory(info);
0:         String userName = info.getUserName();
0:         String password = info.getPassword();
0:         ActiveMQConnection physicalConnection = (ActiveMQConnection) connectionFactory.createConnection(userName, password);
0: 
0:         String clientId = info.getClientid();
0:         if (clientId != null) {
0:             physicalConnection.setClientID(clientId);
0:         }
0:         return physicalConnection;
0:     }
0: 
0:     /**
0:      * @param activationSpec
0:      */
0:     public ActiveMQConnection makeConnection(ActiveMQActivationSpec activationSpec) throws JMSException {
0:         ActiveMQConnectionFactory connectionFactory = createConnectionFactory(info);
0:         String userName = defaultValue(activationSpec.getUserName(), info.getUserName());
0:         String password = defaultValue(activationSpec.getPassword(), info.getPassword());
0:         ActiveMQConnection physicalConnection = (ActiveMQConnection) connectionFactory.createConnection(userName, password);
0:         if (activationSpec.isDurableSubscription()) {
0:             physicalConnection.setClientID(activationSpec.getClientId());
0:         }
0:         return physicalConnection;
0:     }
0: 
0:     /**
0:      * @param info 
0:      * @return
0:      * @throws JMSException 
0:      * @throws URISyntaxException 
0:      */
0:     synchronized private ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo info) throws JMSException {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(info.getServerUrl());
0:         
0:         return factory;
0:     }
0: 
0:     private String defaultValue(String value, String defaultValue) {
0:         if (value != null)
0:             return value;
0:         return defaultValue;
0:     }
0: 
0:     /**
0:      * @see javax.resource.spi.ResourceAdapter#stop()
0:      */
0:     public void stop() {
0:         while (endpointWorkers.size() > 0) {
0:             ActiveMQEndpointActivationKey key = (ActiveMQEndpointActivationKey) endpointWorkers.keySet().iterator().next();
0:             endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
0:         }
0:         if (broker != null) {
0:             ServiceSupport.dispose(broker);
0:             broker = null;
0:         }
0:         this.bootstrapContext = null;
0:     }
0: 
0:     /**
0:      * @return
0:      */
0:     public BootstrapContext getBootstrapContext() {
0:         return bootstrapContext;
0:     }
0: 
0:     /**
0:      * @see javax.resource.spi.ResourceAdapter#endpointActivation(javax.resource.spi.endpoint.MessageEndpointFactory,
0:      *      javax.resource.spi.ActivationSpec)
0:      */
0:     public void endpointActivation(MessageEndpointFactory endpointFactory, ActivationSpec activationSpec)
0:             throws ResourceException {
0: 
0:         // spec section 5.3.3
0:         if (activationSpec.getResourceAdapter() != this) {
0:             throw new ResourceException("Activation spec not initialized with this ResourceAdapter instance");
0:         }
0: 
0:         if (activationSpec.getClass().equals(ActiveMQActivationSpec.class)) {
0: 
0:             ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory,
0:                     (ActiveMQActivationSpec) activationSpec);
0:             // This is weird.. the same endpoint activated twice.. must be a
0:             // container error.
0:             if (endpointWorkers.containsKey(key)) {
0:                 throw new IllegalStateException("Endpoint previously activated");
0:             }
0: 
0:             ActiveMQEndpointWorker worker = new ActiveMQEndpointWorker(this, key);
0: 
0:             endpointWorkers.put(key, worker);
0:             worker.start();
0: 
0:         } else {
0:             throw new NotSupportedException("That type of ActicationSpec not supported: " + activationSpec.getClass());
0:         }
0: 
0:     }
0: 
0:     /**
0:      * @see javax.resource.spi.ResourceAdapter#endpointDeactivation(javax.resource.spi.endpoint.MessageEndpointFactory,
0:      *      javax.resource.spi.ActivationSpec)
0:      */
0:     public void endpointDeactivation(MessageEndpointFactory endpointFactory, ActivationSpec activationSpec) {
0: 
0:         if (activationSpec.getClass().equals(ActiveMQActivationSpec.class)) {
0:             ActiveMQEndpointActivationKey key = new ActiveMQEndpointActivationKey(endpointFactory, (ActiveMQActivationSpec) activationSpec);
0:             ActiveMQEndpointWorker worker = (ActiveMQEndpointWorker) endpointWorkers.remove(key);
0:             if (worker == null) {
0:                 // This is weird.. that endpoint was not activated.. oh well..
0:                 // this method
0:                 // does not throw exceptions so just return.
0:                 return;
0:             }
0:             try {
0:                 worker.stop();
0:             } catch (InterruptedException e) {
0:                 // We interrupted.. we won't throw an exception but will stop
0:                 // waiting for the worker
0:                 // to stop.. we tried our best. Keep trying to interrupt the
0:                 // thread.
0:                 Thread.currentThread().interrupt();
0:             }
0: 
0:         }
0: 
0:     }
0: 
0:     /**
0:      * We only connect to one resource manager per ResourceAdapter instance, so
0:      * any ActivationSpec will return the same XAResource.
0:      * 
0:      * @see javax.resource.spi.ResourceAdapter#getXAResources(javax.resource.spi.ActivationSpec[])
0:      */
0:     public XAResource[] getXAResources(ActivationSpec[] activationSpecs) throws ResourceException {
0:         Connection connection = null;
0:         try {
0:             connection = makeConnection();
0:             if (connection instanceof XAConnection) {
0:                 XASession session = ((XAConnection) connection).createXASession();
0:                 XAResource xaResource = session.getXAResource();
0:                 return new XAResource[] { xaResource };
0:             } else {
0:                 return new XAResource[] {};
0:             }
0:         } catch (JMSException e) {
0:             throw new ResourceException(e);
0:         } finally {
0:             try {
0:                 connection.close();
0:             } catch (Throwable ignore) {
0:             }
0:         }
0:     }
0: 
0:     // ///////////////////////////////////////////////////////////////////////
0:     //
0:     // Java Bean getters and setters for this ResourceAdapter class.
0:     //
0:     // ///////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * @return
0:      */
0:     public String getClientid() {
0:         return emptyToNull(info.getClientid());
0:     }
0: 
0:     /**
0:      * @return
0:      */
0:     public String getPassword() {
0:         return emptyToNull(info.getPassword());
0:     }
0: 
0:     /**
0:      * @return
0:      */
0:     public String getServerUrl() {
0:         return info.getServerUrl();
0:     }
0: 
0:     /**
0:      * @return
0:      */
0:     public String getUserName() {
0:         return emptyToNull(info.getUserName());
0:     }
0: 
0:     /**
0:      * @param clientid
0:      */
0:     public void setClientid(String clientid) {
0:         info.setClientid(clientid);
0:     }
0: 
0:     /**
0:      * @param password
0:      */
0:     public void setPassword(String password) {
0:         info.setPassword(password);
0:     }
0: 
0:     /**
0:      * @param url
0:      */
0:     public void setServerUrl(String url) {
0:         info.setServerUrl(url);
0:     }
0: 
0:     /**
0:      * @param userid
0:      */
0:     public void setUserName(String userid) {
0:         info.setUserName(userid);
0:     }
0: 
0:     public String getBrokerXmlConfig() {
0:         return brokerXmlConfig;
0:     }
0: 
0:     /**
0:      * Sets the <a href="http://activemq.org/Xml+Configuration">XML
0:      * configuration file </a> used to configure the ActiveMQ broker via Spring
0:      * if using embedded mode.
0:      * 
0:      * @param brokerXmlConfig
0:      *            is the filename which is assumed to be on the classpath unless
0:      *            a URL is specified. So a value of <code>foo/bar.xml</code>
0:      *            would be assumed to be on the classpath whereas
0:      *            <code>file:dir/file.xml</code> would use the file system.
0:      *            Any valid URL string is supported.
0:      * @see #setUseEmbeddedBroker(Boolean)
0:      */
0:     public void setBrokerXmlConfig(String brokerXmlConfig) {
0:         this.brokerXmlConfig=brokerXmlConfig;
0:     }
0: 
0:     /**
0:      * @return Returns the info.
0:      */
0:     public ActiveMQConnectionRequestInfo getInfo() {
0:         return info;
0:     }
0: 
0:     public boolean equals(Object o) {
0:         if (this == o) {
0:             return true;
0:         }
0:         if (!(o instanceof ActiveMQResourceAdapter)) {
0:             return false;
0:         }
0: 
0:         final ActiveMQResourceAdapter activeMQResourceAdapter = (ActiveMQResourceAdapter) o;
0: 
0:         if (!info.equals(activeMQResourceAdapter.info)) {
0:             return false;
0:         }
0:         if ( notEqual(brokerXmlConfig, activeMQResourceAdapter.brokerXmlConfig) ) {
0:             return false;
0:         }
0: 
0:         return true;
0:     }
0:     
0:     private boolean notEqual(Object o1, Object o2) {
0:         return (o1 == null ^ o2 == null) || (o1 != null && !o1.equals(o2));
0:     }
0: 
0: 
0:     public int hashCode() {
0:         int result;
0:         result = info.hashCode();
0:         if( brokerXmlConfig !=null ) {
0:             result ^= brokerXmlConfig.hashCode();
0:         }
0:         return result;
0:     }
0: 
0:     private String emptyToNull(String value) {
0:         if (value == null || value.length() == 0) {
0:             return null;
0:         }
0:         return value;
0:     }
0: 
0:     public Boolean getUseInboundSession() {
0:         return info.getUseInboundSession();
0:     }
0: 
0:     public void setUseInboundSession(Boolean useInboundSession) {
0:         info.setUseInboundSession(useInboundSession);
0:     }
0: 
0: 
0: }
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:b2b1e80
/////////////////////////////////////////////////////////////////////////
0: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0: public class ActiveMQResourceAdapter implements ResourceAdapter, Serializable {
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      * @param info
0:      * @throws JMSException
0:      * @throws URISyntaxException
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
/////////////////////////////////////////////////////////////////////////
0:  */
============================================================================