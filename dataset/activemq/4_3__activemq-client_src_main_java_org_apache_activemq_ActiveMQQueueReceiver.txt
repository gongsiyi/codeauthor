1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f812e34:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
6:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.QueueReceiver;
1:d29ca2a: 
1:f812e34: import org.apache.activemq.command.ActiveMQDestination;
1:f812e34: import org.apache.activemq.command.ConsumerId;
1:f812e34: 
1:d29ca2a: /**
1:d29ca2a:  * A client uses a <CODE>QueueReceiver</CODE> object to receive messages that
1:f812e34:  * have been delivered to a queue. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Although it is possible to have multiple <CODE>QueueReceiver</CODE> s for
1:d29ca2a:  * the same queue, the JMS API does not define how messages are distributed
1:f812e34:  * between the <CODE>QueueReceiver</CODE>s. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * If a <CODE>QueueReceiver</CODE> specifies a message selector, the messages
1:d29ca2a:  * that are not selected remain on the queue. By definition, a message selector
1:d29ca2a:  * allows a <CODE>QueueReceiver</CODE> to skip messages. This means that when
1:d29ca2a:  * the skipped messages are eventually read, the total ordering of the reads
1:d29ca2a:  * does not retain the partial order defined by each message producer. Only
1:d29ca2a:  * <CODE>QueueReceiver</CODE> s without a message selector will read messages
1:f812e34:  * in message producer order. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Creating a <CODE>MessageConsumer</CODE> provides the same features as
1:d29ca2a:  * creating a <CODE>QueueReceiver</CODE>. A <CODE>MessageConsumer</CODE>
1:d29ca2a:  * object is recommended for creating new code. The <CODE>QueueReceiver
1:f812e34:  * </CODE>
1:f812e34:  * is provided to support existing code.
1:61b2f6b:  *
1:d29ca2a:  * @see javax.jms.Session#createConsumer(javax.jms.Destination, String)
1:d29ca2a:  * @see javax.jms.Session#createConsumer(javax.jms.Destination)
1:d29ca2a:  * @see javax.jms.QueueSession#createReceiver(Queue, String)
1:d29ca2a:  * @see javax.jms.QueueSession#createReceiver(Queue)
1:d29ca2a:  * @see javax.jms.MessageConsumer
1:d29ca2a:  */
1:f812e34: public class ActiveMQQueueReceiver extends ActiveMQMessageConsumer implements QueueReceiver {
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param theSession
1:61b2f6b:      * @param consumerId
1:d29ca2a:      * @param destination
1:61b2f6b:      * @param selector
1:d29ca2a:      * @param prefetch
1:61b2f6b:      * @param maximumPendingMessageCount
1:f812e34:      * @param asyncDispatch
1:61b2f6b:      *
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:f812e34:     protected ActiveMQQueueReceiver(ActiveMQSession theSession, ConsumerId consumerId,
1:f812e34:                                     ActiveMQDestination destination, String selector, int prefetch,
1:61b2f6b:                                     int maximumPendingMessageCount, boolean asyncDispatch) throws JMSException {
1:f812e34:         super(theSession, consumerId, destination, null, selector, prefetch, maximumPendingMessageCount,
1:fba0742:               false, false, asyncDispatch, null);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the <CODE>Queue</CODE> associated with this queue receiver.
1:61b2f6b:      *
1:d29ca2a:      * @return this receiver's <CODE>Queue</CODE>
1:f812e34:      * @throws JMSException if the JMS provider fails to get the queue for this
1:f812e34:      *                 queue receiver due to some internal error.
1:d29ca2a:      */
1:61b2f6b:     @Override
1:d29ca2a:     public Queue getQueue() throws JMSException {
1:d29ca2a:         checkClosed();
1:f812e34:         return (Queue)super.getDestination();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61b2f6b
/////////////////////////////////////////////////////////////////////////
1:  *
1:      * @param consumerId
1:      * @param selector
1:      * @param maximumPendingMessageCount
1:      *
1:                                     int maximumPendingMessageCount, boolean asyncDispatch) throws JMSException {
1:      *
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerId;
1: 
1:  * have been delivered to a queue. <p/>
1:  * between the <CODE>QueueReceiver</CODE>s. <p/>
/////////////////////////////////////////////////////////////////////////
1:  * in message producer order. <p/>
1:  * </CODE>
1:  * is provided to support existing code.
1:  * 
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQQueueReceiver extends ActiveMQMessageConsumer implements QueueReceiver {
/////////////////////////////////////////////////////////////////////////
1:      * @param asyncDispatch
1:     protected ActiveMQQueueReceiver(ActiveMQSession theSession, ConsumerId consumerId,
1:                                     ActiveMQDestination destination, String selector, int prefetch,
0:                                     int maximumPendingMessageCount, boolean asyncDispatch)
0:         throws JMSException {
1:         super(theSession, consumerId, destination, null, selector, prefetch, maximumPendingMessageCount,
0:               false, false, asyncDispatch);
1:      * 
1:      * @throws JMSException if the JMS provider fails to get the queue for this
1:      *                 queue receiver due to some internal error.
1:         return (Queue)super.getDestination();
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c59246d
/////////////////////////////////////////////////////////////////////////
0:      * @param value
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ConsumerId;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.QueueReceiver;
1: 
1: /**
1:  * A client uses a <CODE>QueueReceiver</CODE> object to receive messages that
0:  * have been delivered to a queue.
0:  * <p/>
1:  * <P>
1:  * Although it is possible to have multiple <CODE>QueueReceiver</CODE> s for
1:  * the same queue, the JMS API does not define how messages are distributed
0:  * between the <CODE>QueueReceiver</CODE>s.
0:  * <p/>
1:  * <P>
1:  * If a <CODE>QueueReceiver</CODE> specifies a message selector, the messages
1:  * that are not selected remain on the queue. By definition, a message selector
1:  * allows a <CODE>QueueReceiver</CODE> to skip messages. This means that when
1:  * the skipped messages are eventually read, the total ordering of the reads
1:  * does not retain the partial order defined by each message producer. Only
1:  * <CODE>QueueReceiver</CODE> s without a message selector will read messages
0:  * in message producer order.
0:  * <p/>
1:  * <P>
1:  * Creating a <CODE>MessageConsumer</CODE> provides the same features as
1:  * creating a <CODE>QueueReceiver</CODE>. A <CODE>MessageConsumer</CODE>
1:  * object is recommended for creating new code. The <CODE>QueueReceiver
0:  * </CODE> is provided to support existing code.
0:  *
1:  * @see javax.jms.Session#createConsumer(javax.jms.Destination, String)
1:  * @see javax.jms.Session#createConsumer(javax.jms.Destination)
1:  * @see javax.jms.QueueSession#createReceiver(Queue, String)
1:  * @see javax.jms.QueueSession#createReceiver(Queue)
1:  * @see javax.jms.MessageConsumer
1:  */
1: 
0: public class ActiveMQQueueReceiver extends ActiveMQMessageConsumer implements
0:         QueueReceiver {
1: 
1:     /**
1:      * @param theSession
0:      * @param consumerId
1:      * @param destination
0:      * @param messageSelector
1:      * @param prefetch
0:      * @param asyncDispatch 
1:      * @throws JMSException
1:      */
0:     protected ActiveMQQueueReceiver(ActiveMQSession theSession,
0:                                     ConsumerId consumerId, ActiveMQDestination destination, String selector, int prefetch, boolean asyncDispatch)
0:             throws JMSException {
0:         super(theSession, consumerId, destination, null, selector, prefetch, false, false, asyncDispatch);
1:     }
1: 
1:     /**
1:      * Gets the <CODE>Queue</CODE> associated with this queue receiver.
0:      *
1:      * @return this receiver's <CODE>Queue</CODE>
0:      * @throws JMSException if the JMS provider fails to get the queue for this queue
0:      *                      receiver due to some internal error.
1:      */
1: 
1:     public Queue getQueue() throws JMSException {
1:         checkClosed();
0:         return (Queue) super.getDestination();
1:     }
1:     
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:fba0742
/////////////////////////////////////////////////////////////////////////
1:               false, false, asyncDispatch, null);
commit:bed10aa
/////////////////////////////////////////////////////////////////////////
0:                                     ConsumerId consumerId, ActiveMQDestination destination, String selector, int prefetch, int maximumPendingMessageCount, boolean asyncDispatch)
0:         super(theSession, consumerId, destination, null, selector, prefetch, maximumPendingMessageCount, false, false, asyncDispatch);
============================================================================