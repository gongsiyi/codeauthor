1:e69367f: /*
1:27edaff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27edaff:  * contributor license agreements.  See the NOTICE file distributed with
1:27edaff:  * this work for additional information regarding copyright ownership.
1:27edaff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27edaff:  * (the "License"); you may not use this file except in compliance with
1:27edaff:  * the License.  You may obtain a copy of the License at
1:27edaff:  *
1:27edaff:  *      http://www.apache.org/licenses/LICENSE-2.0
1:27edaff:  *
1:27edaff:  * Unless required by applicable law or agreed to in writing, software
1:27edaff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27edaff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27edaff:  * See the License for the specific language governing permissions and
1:27edaff:  * limitations under the License.
1:27edaff:  */
1:27edaff: package org.apache.activemq.transport.ws;
1:27edaff: 
1:27edaff: import static org.junit.Assert.assertTrue;
1:27edaff: import static org.junit.Assert.fail;
1:27edaff: 
1:27edaff: import java.io.IOException;
1:e69367f: import java.util.Arrays;
1:e69367f: import java.util.Collection;
1:27edaff: import java.util.UUID;
1:27edaff: import java.util.concurrent.TimeUnit;
1:27edaff: import java.util.concurrent.atomic.AtomicBoolean;
1:27edaff: 
1:27edaff: import org.apache.activemq.util.Wait;
1:f8bfff0: import org.eclipse.jetty.util.ssl.SslContextFactory;
1:f44c3d2: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1:f44c3d2: import org.eclipse.jetty.websocket.client.WebSocketClient;
1:27edaff: import org.fusesource.hawtbuf.UTF8Buffer;
1:27edaff: import org.fusesource.mqtt.codec.CONNACK;
1:27edaff: import org.fusesource.mqtt.codec.CONNECT;
1:27edaff: import org.fusesource.mqtt.codec.MQTTFrame;
1:27edaff: import org.fusesource.mqtt.codec.PINGREQ;
1:27edaff: import org.junit.After;
1:27edaff: import org.junit.Before;
1:27edaff: import org.junit.Test;
1:e69367f: import org.junit.runner.RunWith;
1:e69367f: import org.junit.runners.Parameterized;
1:e69367f: import org.junit.runners.Parameterized.Parameters;
1:27edaff: 
1:e69367f: @RunWith(Parameterized.class)
1:27edaff: public class MQTTWSTransportTest extends WSTransportTestSupport {
1:27edaff: 
1:27edaff:     protected WebSocketClient wsClient;
1:27edaff:     protected MQTTWSConnection wsMQTTConnection;
1:f44c3d2:     protected ClientUpgradeRequest request;
1:27edaff: 
1:e69367f:     protected boolean partialFrames;
1:e69367f: 
1:e69367f:     @Parameters(name="{0}")
1:e69367f:     public static Collection<Object[]> data() {
1:e69367f:         return Arrays.asList(new Object[][] {
1:e69367f:             {"complete-frames", false},
1:e69367f:             {"partial-frames", true}
1:e69367f:         });
1:e69367f:     }
1:e69367f: 
1:e69367f:     public MQTTWSTransportTest(String testName, boolean partialFrames) {
1:e69367f:         this.partialFrames = partialFrames;
1:e69367f:     }
1:e69367f: 
1:27edaff:     @Override
1:27edaff:     @Before
1:27edaff:     public void setUp() throws Exception {
1:27edaff:         super.setUp();
1:27edaff: 
1:f8bfff0:         wsClient = new WebSocketClient(new SslContextFactory(true));
1:f44c3d2:         wsClient.start();
1:27edaff: 
1:f44c3d2:         request = new ClientUpgradeRequest();
1:f44c3d2:         request.setSubProtocols("mqttv3.1");
1:27edaff: 
1:e69367f:         wsMQTTConnection = new MQTTWSConnection().setWritePartialFrames(partialFrames);
1:27edaff: 
1:f44c3d2:         wsClient.connect(wsMQTTConnection, wsConnectUri, request);
1:27edaff:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:27edaff:             throw new IOException("Could not connect to MQTT WS endpoint");
1:27edaff:         }
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Override
1:27edaff:     @After
1:27edaff:     public void tearDown() throws Exception {
1:27edaff:         if (wsMQTTConnection != null) {
1:27edaff:             wsMQTTConnection.close();
1:27edaff:             wsMQTTConnection = null;
1:27edaff:             wsClient = null;
1:27edaff:         }
1:27edaff: 
1:27edaff:         super.tearDown();
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Test(timeout = 60000)
1:10ae0d9:     public void testConnectCycles() throws Exception {
1:10ae0d9:         for (int i = 0; i < 10; ++i) {
1:10ae0d9:             testConnect();
1:10ae0d9: 
1:e69367f:             wsMQTTConnection = new MQTTWSConnection().setWritePartialFrames(partialFrames);
1:10ae0d9: 
1:f44c3d2:             wsClient.connect(wsMQTTConnection, wsConnectUri, request);
1:10ae0d9:             if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:10ae0d9:                 throw new IOException("Could not connect to MQTT WS endpoint");
1:10ae0d9:             }
1:10ae0d9:         }
1:10ae0d9:     }
1:10ae0d9: 
1:10ae0d9:     @Test(timeout = 60000)
1:27edaff:     public void testConnect() throws Exception {
1:27edaff: 
1:27edaff:         wsMQTTConnection.connect();
1:27edaff: 
1:27edaff:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         wsMQTTConnection.disconnect();
1:27edaff:         wsMQTTConnection.close();
1:27edaff: 
1:27edaff:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:27edaff:             }
1:27edaff:         }));
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Test(timeout = 60000)
1:27edaff:     public void testConnectWithNoHeartbeatsClosesConnection() throws Exception {
1:27edaff: 
1:27edaff:         CONNECT command = new CONNECT();
1:27edaff: 
1:27edaff:         command.clientId(new UTF8Buffer(UUID.randomUUID().toString()));
1:27edaff:         command.cleanSession(false);
1:27edaff:         command.version(3);
1:27edaff:         command.keepAlive((short) 2);
1:27edaff: 
1:27edaff:         wsMQTTConnection.sendFrame(command.encode());
1:27edaff: 
1:27edaff:         MQTTFrame received = wsMQTTConnection.receive(15, TimeUnit.SECONDS);
1:27edaff:         if (received == null || received.messageType() != CONNACK.TYPE) {
1:27edaff:             fail("Client did not get expected CONNACK");
1:27edaff:         }
1:27edaff: 
1:27edaff:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         assertTrue("Client Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return !wsMQTTConnection.isConnected();
1:27edaff:             }
1:27edaff:         }));
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Test(timeout = 60000)
1:27edaff:     public void testConnectWithHeartbeatsKeepsConnectionAlive() throws Exception {
1:27edaff: 
1:27edaff:         final AtomicBoolean done = new AtomicBoolean();
1:27edaff: 
1:27edaff:         CONNECT command = new CONNECT();
1:27edaff: 
1:27edaff:         command.clientId(new UTF8Buffer(UUID.randomUUID().toString()));
1:27edaff:         command.cleanSession(false);
1:27edaff:         command.version(3);
1:27edaff:         command.keepAlive((short) 2);
1:27edaff: 
1:27edaff:         wsMQTTConnection.sendFrame(command.encode());
1:27edaff: 
1:27edaff:         MQTTFrame received = wsMQTTConnection.receive(15, TimeUnit.SECONDS);
1:27edaff:         if (received == null || received.messageType() != CONNACK.TYPE) {
1:27edaff:             fail("Client did not get expected CONNACK");
1:27edaff:         }
1:27edaff: 
1:27edaff:         Thread pinger = new Thread(new Runnable() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public void run() {
1:27edaff:                 try {
1:27edaff:                     while (!done.get()) {
1:27edaff:                         TimeUnit.SECONDS.sleep(1);
1:27edaff:                         wsMQTTConnection.sendFrame(new PINGREQ().encode());
1:27edaff:                     }
1:27edaff:                 } catch (Exception e) {
1:27edaff:                 }
1:27edaff:             }
1:27edaff:         });
1:27edaff: 
1:27edaff:         pinger.start();
1:27edaff: 
1:27edaff:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         TimeUnit.SECONDS.sleep(10);
1:27edaff: 
1:27edaff:         assertTrue("Connection should still open", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         wsMQTTConnection.disconnect();
1:27edaff:         wsMQTTConnection.close();
1:27edaff: 
1:27edaff:         done.set(true);
1:27edaff: 
1:27edaff:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         assertTrue("Client Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return !wsMQTTConnection.isConnected();
1:27edaff:             }
1:27edaff:         }));
1:27edaff:     }
1:27edaff: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e69367f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
1:     protected boolean partialFrames;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             {"complete-frames", false},
1:             {"partial-frames", true}
1:         });
1:     }
1: 
1:     public MQTTWSTransportTest(String testName, boolean partialFrames) {
1:         this.partialFrames = partialFrames;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         wsMQTTConnection = new MQTTWSConnection().setWritePartialFrames(partialFrames);
/////////////////////////////////////////////////////////////////////////
1:             wsMQTTConnection = new MQTTWSConnection().setWritePartialFrames(partialFrames);
commit:10ae0d9
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectCycles() throws Exception {
1:         for (int i = 0; i < 10; ++i) {
1:             testConnect();
1: 
0:             wsMQTTConnection = new MQTTWSConnection();
1: 
0:             wsClient.open(wsConnectUri, wsMQTTConnection);
1:             if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:                 throw new IOException("Could not connect to MQTT WS endpoint");
1:             }
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
commit:27edaff
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.UUID;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.apache.activemq.util.Wait;
0: import org.eclipse.jetty.websocket.WebSocketClient;
0: import org.eclipse.jetty.websocket.WebSocketClientFactory;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: import org.fusesource.mqtt.codec.CONNACK;
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.fusesource.mqtt.codec.PINGREQ;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MQTTWSTransportTest extends WSTransportTestSupport {
1: 
1:     protected WebSocketClient wsClient;
1:     protected MQTTWSConnection wsMQTTConnection;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
0:         WebSocketClientFactory clientFactory = new WebSocketClientFactory();
0:         clientFactory.start();
1: 
0:         wsClient = clientFactory.newWebSocketClient();
0:         wsClient.setProtocol("mqttv3.1");
1: 
0:         wsMQTTConnection = new MQTTWSConnection();
1: 
0:         wsClient.open(wsConnectUri, wsMQTTConnection);
1:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to MQTT WS endpoint");
1:         }
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (wsMQTTConnection != null) {
1:             wsMQTTConnection.close();
1:             wsMQTTConnection = null;
1:             wsClient = null;
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnect() throws Exception {
1: 
1:         wsMQTTConnection.connect();
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }));
1: 
1:         wsMQTTConnection.disconnect();
1:         wsMQTTConnection.close();
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectWithNoHeartbeatsClosesConnection() throws Exception {
1: 
1:         CONNECT command = new CONNECT();
1: 
1:         command.clientId(new UTF8Buffer(UUID.randomUUID().toString()));
1:         command.cleanSession(false);
1:         command.version(3);
1:         command.keepAlive((short) 2);
1: 
1:         wsMQTTConnection.sendFrame(command.encode());
1: 
1:         MQTTFrame received = wsMQTTConnection.receive(15, TimeUnit.SECONDS);
1:         if (received == null || received.messageType() != CONNACK.TYPE) {
1:             fail("Client did not get expected CONNACK");
1:         }
1: 
1:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }));
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1: 
1:         assertTrue("Client Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !wsMQTTConnection.isConnected();
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectWithHeartbeatsKeepsConnectionAlive() throws Exception {
1: 
1:         final AtomicBoolean done = new AtomicBoolean();
1: 
1:         CONNECT command = new CONNECT();
1: 
1:         command.clientId(new UTF8Buffer(UUID.randomUUID().toString()));
1:         command.cleanSession(false);
1:         command.version(3);
1:         command.keepAlive((short) 2);
1: 
1:         wsMQTTConnection.sendFrame(command.encode());
1: 
1:         MQTTFrame received = wsMQTTConnection.receive(15, TimeUnit.SECONDS);
1:         if (received == null || received.messageType() != CONNACK.TYPE) {
1:             fail("Client did not get expected CONNACK");
1:         }
1: 
1:         Thread pinger = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     while (!done.get()) {
1:                         TimeUnit.SECONDS.sleep(1);
1:                         wsMQTTConnection.sendFrame(new PINGREQ().encode());
1:                     }
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         });
1: 
1:         pinger.start();
1: 
1:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }));
1: 
1:         TimeUnit.SECONDS.sleep(10);
1: 
1:         assertTrue("Connection should still open", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }));
1: 
1:         wsMQTTConnection.disconnect();
1:         wsMQTTConnection.close();
1: 
1:         done.set(true);
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1: 
1:         assertTrue("Client Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !wsMQTTConnection.isConnected();
1:             }
1:         }));
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
/////////////////////////////////////////////////////////////////////////
1:         wsClient = new WebSocketClient(new SslContextFactory(true));
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1: import org.eclipse.jetty.websocket.client.WebSocketClient;
/////////////////////////////////////////////////////////////////////////
1:     protected ClientUpgradeRequest request;
0:         wsClient = new WebSocketClient();
1:         wsClient.start();
1:         request = new ClientUpgradeRequest();
1:         request.setSubProtocols("mqttv3.1");
1:         wsClient.connect(wsMQTTConnection, wsConnectUri, request);
/////////////////////////////////////////////////////////////////////////
1:             wsClient.connect(wsMQTTConnection, wsConnectUri, request);
============================================================================