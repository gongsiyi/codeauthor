1:ef0b33e: /**
1:ef0b33e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ef0b33e:  * contributor license agreements.  See the NOTICE file distributed with
1:ef0b33e:  * this work for additional information regarding copyright ownership.
1:ef0b33e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ef0b33e:  * (the "License"); you may not use this file except in compliance with
1:ef0b33e:  * the License.  You may obtain a copy of the License at
2:ef0b33e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ef0b33e:  *
1:ef0b33e:  * Unless required by applicable law or agreed to in writing, software
1:ef0b33e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef0b33e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef0b33e:  * See the License for the specific language governing permissions and
1:ef0b33e:  * limitations under the License.
1:ef0b33e:  */
8:ef0b33e: 
1:ef0b33e: package org.apache.activemq.usecases;
1:ef0b33e: 
1:ef0b33e: import java.net.URI;
1:ef0b33e: import java.util.ArrayList;
1:933eb2f: import java.util.List;
1:f812e34: 
1:ef0b33e: import javax.jms.JMSException;
1:ef0b33e: import javax.jms.Message;
1:ef0b33e: import javax.jms.Session;
1:ef0b33e: import javax.jms.TextMessage;
1:f812e34: 
1:ef0b33e: import junit.framework.TestCase;
1:4743a20: 
1:ef0b33e: import org.apache.activemq.ActiveMQConnectionFactory;
1:ef0b33e: import org.apache.activemq.broker.BrokerService;
1:ef0b33e: import org.apache.activemq.broker.TransportConnector;
1:ef0b33e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ef0b33e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ef0b33e: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:ef0b33e: import org.apache.activemq.network.NetworkConnector;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:ef0b33e: import org.springframework.jms.core.JmsTemplate;
1:ef0b33e: import org.springframework.jms.core.MessageCreator;
1:ef0b33e: 
1:ef0b33e: public class AMQStackOverFlowTest extends TestCase {
1:ef0b33e: 
1:f812e34:     private static final String URL1 = "tcp://localhost:61616";
1:ef0b33e: 
1:f812e34:     private static final String URL2 = "tcp://localhost:61617";
1:ef0b33e: 
1:f812e34:     public void testStackOverflow() throws Exception {
1:f812e34:         BrokerService brokerService1 = null;
1:f812e34:         BrokerService brokerService2 = null;
1:ef0b33e: 
1:f812e34:         try {
1:f812e34:             brokerService1 = createBrokerService("broker1", URL1, URL2);
1:f812e34:             brokerService1.start();
1:f812e34:             brokerService2 = createBrokerService("broker2", URL2, URL1);
1:f812e34:             brokerService2.start();
1:ef0b33e: 
1:f812e34:             final ActiveMQConnectionFactory cf1 = new ActiveMQConnectionFactory(URL1);
1:f812e34:             cf1.setUseAsyncSend(false);
1:ef0b33e: 
1:f812e34:             final ActiveMQConnectionFactory cf2 = new ActiveMQConnectionFactory(URL2);
1:f812e34:             cf2.setUseAsyncSend(false);
1:ef0b33e: 
1:f812e34:             final JmsTemplate template1 = new JmsTemplate(cf1);
1:f812e34:             template1.setReceiveTimeout(10000);
1:ef0b33e: 
1:f812e34:             template1.send("test.q", new MessageCreator() {
1:ef0b33e: 
1:4743a20:                 @Override
1:f812e34:                 public Message createMessage(Session session) throws JMSException {
1:f812e34:                     return session.createTextMessage("test");
1:f812e34:                 }
1:ef0b33e: 
1:f812e34:             });
1:ef0b33e: 
1:f812e34:             final JmsTemplate template2 = new JmsTemplate(cf2);
1:f812e34:             template2.setReceiveTimeout(10000);
1:ef0b33e: 
1:f812e34:             final Message m = template2.receive("test.q");
1:f812e34:             assertTrue(m instanceof TextMessage);
1:ef0b33e: 
1:f812e34:             final TextMessage tm = (TextMessage)m;
1:ef0b33e: 
1:4743a20:             assertEquals("test", tm.getText());
1:ef0b33e: 
1:f812e34:             template2.send("test2.q", new MessageCreator() {
1:ef0b33e: 
1:4743a20:                 @Override
1:f812e34:                 public Message createMessage(Session session) throws JMSException {
1:f812e34:                     return session.createTextMessage("test2");
1:f812e34:                 }
1:f812e34:             });
1:f812e34: 
1:f812e34:             final Message m2 = template1.receive("test2.q");
1:c24574c:             assertNotNull(m2);
1:ef0b33e:             assertTrue(m2 instanceof TextMessage);
1:ef0b33e: 
1:f812e34:             final TextMessage tm2 = (TextMessage)m2;
1:ef0b33e: 
1:4743a20:             assertEquals("test2", tm2.getText());
1:ef0b33e: 
1:f812e34:         } finally {
1:f812e34:             brokerService1.stop();
1:f812e34:             brokerService1 = null;
1:f812e34:             brokerService2.stop();
1:f812e34:             brokerService2 = null;
1:f812e34:         }
1:f812e34:     }
1:ef0b33e: 
1:f812e34:     private BrokerService createBrokerService(final String brokerName, final String uri1, final String uri2)
1:f812e34:         throws Exception {
1:f812e34:         final BrokerService brokerService = new BrokerService();
1:ef0b33e: 
1:f812e34:         brokerService.setBrokerName(brokerName);
1:f812e34:         brokerService.setPersistent(false);
1:f812e34:         brokerService.setUseJmx(true);
1:ef0b33e: 
1:6d8e2c5:         final SystemUsage memoryManager = new SystemUsage();
1:c24574c:         //memoryManager.getMemoryUsage().setLimit(10);
1:2b0024c:         brokerService.setSystemUsage(memoryManager);
1:ef0b33e: 
1:933eb2f:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:ef0b33e: 
1:f812e34:         final PolicyEntry entry = new PolicyEntry();
1:f812e34:         entry.setQueue(">");
1:c24574c:         //entry.setMemoryLimit(1);
1:f812e34:         policyEntries.add(entry);
1:ef0b33e: 
1:f812e34:         final PolicyMap policyMap = new PolicyMap();
1:f812e34:         policyMap.setPolicyEntries(policyEntries);
1:f812e34:         brokerService.setDestinationPolicy(policyMap);
1:ef0b33e: 
1:f812e34:         final TransportConnector tConnector = new TransportConnector();
1:f812e34:         tConnector.setUri(new URI(uri1));
1:f812e34:         tConnector.setName(brokerName + ".transportConnector");
1:f812e34:         brokerService.addConnector(tConnector);
1:ef0b33e: 
1:f812e34:         if (uri2 != null) {
1:f812e34:             final NetworkConnector nc = new DiscoveryNetworkConnector(new URI("static:" + uri2));
1:f812e34:             nc.setBridgeTempDestinations(true);
1:f812e34:             nc.setBrokerName(brokerName);
1:c24574c:             //nc.setPrefetchSize(1);
1:f812e34:             brokerService.addNetworkConnector(nc);
1:f812e34:         }
1:ef0b33e: 
1:f812e34:         return brokerService;
1:f812e34:     }
7:ef0b33e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("test", tm.getText());
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("test2", tm2.getText());
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setSystemUsage(memoryManager);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final String URL1 = "tcp://localhost:61616";
1:     private static final String URL2 = "tcp://localhost:61617";
1:     public void testStackOverflow() throws Exception {
1:         BrokerService brokerService1 = null;
1:         BrokerService brokerService2 = null;
1:         try {
1:             brokerService1 = createBrokerService("broker1", URL1, URL2);
1:             brokerService1.start();
1:             brokerService2 = createBrokerService("broker2", URL2, URL1);
1:             brokerService2.start();
1:             final ActiveMQConnectionFactory cf1 = new ActiveMQConnectionFactory(URL1);
1:             cf1.setUseAsyncSend(false);
1:             final ActiveMQConnectionFactory cf2 = new ActiveMQConnectionFactory(URL2);
1:             cf2.setUseAsyncSend(false);
1:             final JmsTemplate template1 = new JmsTemplate(cf1);
1:             template1.setReceiveTimeout(10000);
1:             template1.send("test.q", new MessageCreator() {
1:                 public Message createMessage(Session session) throws JMSException {
1:                     return session.createTextMessage("test");
1:                 }
1:             });
1:             final JmsTemplate template2 = new JmsTemplate(cf2);
1:             template2.setReceiveTimeout(10000);
1:             final Message m = template2.receive("test.q");
1:             assertTrue(m instanceof TextMessage);
1:             final TextMessage tm = (TextMessage)m;
0:             Assert.assertEquals("test", tm.getText());
1:             template2.send("test2.q", new MessageCreator() {
1:                 public Message createMessage(Session session) throws JMSException {
1:                     return session.createTextMessage("test2");
1:                 }
1:             });
1: 
1:             final Message m2 = template1.receive("test2.q");
1:             final TextMessage tm2 = (TextMessage)m2;
0:             Assert.assertEquals("test2", tm2.getText());
1:         } finally {
1:             brokerService1.stop();
1:             brokerService1 = null;
1:             brokerService2.stop();
1:             brokerService2 = null;
1:         }
1:     }
1:     private BrokerService createBrokerService(final String brokerName, final String uri1, final String uri2)
1:         throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         brokerService.setBrokerName(brokerName);
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
0:         final UsageManager memoryManager = new UsageManager();
0:         memoryManager.setLimit(10);
0:         brokerService.setMemoryManager(memoryManager);
0:         final ArrayList<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         entry.setQueue(">");
0:         entry.setMemoryLimit(1);
1:         policyEntries.add(entry);
1:         final PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         brokerService.setDestinationPolicy(policyMap);
1:         final TransportConnector tConnector = new TransportConnector();
1:         tConnector.setUri(new URI(uri1));
0:         tConnector.setBrokerName(brokerName);
1:         tConnector.setName(brokerName + ".transportConnector");
1:         brokerService.addConnector(tConnector);
1:         if (uri2 != null) {
1:             final NetworkConnector nc = new DiscoveryNetworkConnector(new URI("static:" + uri2));
1:             nc.setBridgeTempDestinations(true);
1:             nc.setBrokerName(brokerName);
0:             nc.setPrefetchSize(1);
1:             brokerService.addNetworkConnector(nc);
1:         }
1:         return brokerService;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Robert Davies
-------------------------------------------------------------------------------
commit:c24574c
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(m2);
/////////////////////////////////////////////////////////////////////////
1:         //memoryManager.getMemoryUsage().setLimit(10);
1:         //entry.setMemoryLimit(1);
/////////////////////////////////////////////////////////////////////////
1:             //nc.setPrefetchSize(1);
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:         final SystemUsage memoryManager = new SystemUsage();
0:         memoryManager.getMemoryUsage().setLimit(10);
0:         brokerService.setUsageManager(memoryManager);
commit:54114cc
/////////////////////////////////////////////////////////////////////////
commit:ef0b33e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import junit.framework.Assert;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.memory.UsageManager;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.springframework.jms.core.JmsTemplate;
1: import org.springframework.jms.core.MessageCreator;
1: 
1: public class AMQStackOverFlowTest extends TestCase {
1: 
0: 	private static final String URL1 = "tcp://localhost:61616";
1: 
0: 	private static final String URL2 = "tcp://localhost:61617";
1: 
0: 	public void testStackOverflow() throws Exception {
0: 		BrokerService brokerService1 = null;
0: 		BrokerService brokerService2 = null;
1: 
0: 		try {
0: 			brokerService1 = createBrokerService("broker1", URL1, URL2);
0: 			brokerService1.start();
0: 			brokerService2 = createBrokerService("broker2", URL2, URL1);
0: 			brokerService2.start();
1: 
0: 			final ActiveMQConnectionFactory cf1 = new ActiveMQConnectionFactory(
0: 					URL1);
0: 			cf1.setUseAsyncSend(false);
1: 
0: 			final ActiveMQConnectionFactory cf2 = new ActiveMQConnectionFactory(
0: 					URL2);
0: 			cf2.setUseAsyncSend(false);
1: 
0: 			final JmsTemplate template1 = new JmsTemplate(cf1);
0: 			template1.setReceiveTimeout(10000);
1: 
0: 			template1.send("test.q", new MessageCreator() {
1: 
0: 				public Message createMessage(Session session)
0: 						throws JMSException {
0: 					return session.createTextMessage("test");
1: 				}
1: 
0: 			});
1: 
0: 			final JmsTemplate template2 = new JmsTemplate(cf2);
0: 			template2.setReceiveTimeout(10000);
1: 
0: 			final Message m = template2.receive("test.q");
0: 			assertTrue(m instanceof TextMessage);
1: 		
0: 			final TextMessage tm = (TextMessage) m;
1: 
0: 			Assert.assertEquals("test", tm.getText());
1: 
0: 			template2.send("test2.q", new MessageCreator() {
1: 
0: 				public Message createMessage(Session session)
0: 						throws JMSException {
0: 					return session.createTextMessage("test2");
1: 				}
1: 
0: 			});
1: 
0: 			final Message m2 = template1.receive("test2.q");
1: 
1:             assertTrue(m2 instanceof TextMessage);
1: 
0: 			final TextMessage tm2 = (TextMessage) m2;
1: 
0: 			Assert.assertEquals("test2", tm2.getText());
1: 
0: 		} finally {
1: 
0: 			brokerService1.stop();
0: 			brokerService1 = null;
0: 			brokerService2.stop();
0: 			brokerService2 = null;
1: 
1: 		}
1: 
1: 	}
1: 
0: 	private BrokerService createBrokerService(final String brokerName,
0: 			final String uri1, final String uri2) throws Exception {
0: 		final BrokerService brokerService = new BrokerService();
1: 
0: 		brokerService.setBrokerName(brokerName);
0: 		brokerService.setPersistent(false);
0: 		brokerService.setUseJmx(true);
1: 
0: 		final UsageManager memoryManager = new UsageManager();
0: 		memoryManager.setLimit(10);
0: 		brokerService.setMemoryManager(memoryManager);
1: 
0: 		final ArrayList<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1: 
0: 		final PolicyEntry entry = new PolicyEntry();
0: 		entry.setQueue(">");
0: 		entry.setMemoryLimit(1);
0: 		policyEntries.add(entry);
1: 
0: 		final PolicyMap policyMap = new PolicyMap();
0: 		policyMap.setPolicyEntries(policyEntries);
0: 		brokerService.setDestinationPolicy(policyMap);
1: 
0: 		final TransportConnector tConnector = new TransportConnector();
0: 		tConnector.setUri(new URI(uri1));
0: 		tConnector.setBrokerName(brokerName);
0: 		tConnector.setName(brokerName + ".transportConnector");
0: 		brokerService.addConnector(tConnector);
1: 
0: 		if (uri2 != null) {
0: 			final NetworkConnector nc = new DiscoveryNetworkConnector(new URI(
0: 					"static:" + uri2));
0: 			nc.setBridgeTempDestinations(true);
0: 			nc.setBrokerName(brokerName);
0: 			nc.setName(brokerName + ".nc");
0: 			nc.setPrefetchSize(1);
0: 			brokerService.addNetworkConnector(nc);
1: 		}
1: 
0: 		return brokerService;
1: 
1: 	}
1: }
============================================================================