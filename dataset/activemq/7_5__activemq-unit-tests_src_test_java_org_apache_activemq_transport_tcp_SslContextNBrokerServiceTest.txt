1:7d87837: /**
1:7d87837:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7d87837:  * contributor license agreements.  See the NOTICE file distributed with
1:7d87837:  * this work for additional information regarding copyright ownership.
1:7d87837:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7d87837:  * (the "License"); you may not use this file except in compliance with
1:7d87837:  * the License.  You may obtain a copy of the License at
1:7d87837:  *
1:7d87837:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7d87837:  *
1:7d87837:  * Unless required by applicable law or agreed to in writing, software
1:7d87837:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d87837:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d87837:  * See the License for the specific language governing permissions and
1:7d87837:  * limitations under the License.
1:7d87837:  */
1:7d87837: package org.apache.activemq.transport.tcp;
15:7d87837: 
1:7d87837: import java.net.URI;
1:7d87837: import java.security.cert.CertificateException;
1:7d87837: import java.security.cert.X509Certificate;
1:7d87837: import java.util.Iterator;
1:7d87837: import java.util.Map;
1:7d87837: 
1:7d87837: import javax.net.ssl.SSLContext;
1:7d87837: import javax.net.ssl.SSLSocket;
1:7d87837: import javax.net.ssl.SSLSocketFactory;
1:7d87837: import javax.net.ssl.TrustManager;
1:7d87837: import javax.net.ssl.X509TrustManager;
1:7d87837: 
1:6540f04: import org.junit.After;
1:6540f04: import org.junit.Before;
1:6540f04: import org.junit.Test;
1:7d87837: 
1:7d87837: import org.apache.activemq.broker.BrokerService;
1:7d87837: import org.apache.activemq.broker.TransportConnector;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:7d87837: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:4743a20: 
1:6540f04: import static org.junit.Assert.*;
1:6540f04: 
1:6540f04: public class SslContextNBrokerServiceTest {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(SslContextNBrokerServiceTest.class);
1:4743a20: 
1:7d87837:     private ClassPathXmlApplicationContext context;
1:4743a20:     Map<String, BrokerService> beansOfType;
1:4743a20: 
1:c646fac:     @Test(timeout = 3 * 60 * 1000)
1:6540f04:     public void testDummyConfigurationIsolation() throws Exception {
1:7d87837:         assertTrue("dummy bean has dummy cert", verifyCredentials("dummy"));
1:6540f04:     }
1:6540f04: 
1:c646fac:     @Test(timeout = 3 * 60 * 1000)
1:6540f04:     public void testActiveMQDotOrgConfigurationIsolation() throws Exception {
1:7d87837:         assertTrue("good bean has amq cert", verifyCredentials("activemq.org"));
1:7d87837:     }
1:4743a20: 
1:7d87837:     private boolean verifyCredentials(String name) throws Exception {
1:7d87837:         boolean result = false;
1:7d87837:         BrokerService broker = getBroker(name);
1:7d87837:         assertNotNull(name, broker);
1:7d87837:         broker.start();
1:6540f04:         broker.waitUntilStarted();
1:7d87837:         try {
1:7d87837:             result = verifySslCredentials(broker);
1:7d87837:         } finally {
1:7d87837:             broker.stop();
1:7d87837:         }
1:7d87837:         return result;
1:7d87837:     }
1:7d87837: 
1:7d87837:     private boolean verifySslCredentials(BrokerService broker) throws Exception {
1:7d87837:         TransportConnector connector = broker.getTransportConnectors().get(0);
1:7d87837:         URI brokerUri = connector.getConnectUri();
1:7d87837: 
1:4743a20:         SSLContext context = SSLContext.getInstance("TLS");
1:4743a20:         CertChainCatcher catcher = new CertChainCatcher();
1:4743a20:         context.init(null, new TrustManager[] { catcher }, null);
1:4743a20: 
1:7d87837:         SSLSocketFactory factory = context.getSocketFactory();
1:4743a20:         LOG.info("Connecting to broker: " + broker.getBrokerName() + " on: " + brokerUri.getHost() + ":" + brokerUri.getPort());
1:4743a20:         SSLSocket socket = (SSLSocket) factory.createSocket(brokerUri.getHost(), brokerUri.getPort());
1:c646fac:         socket.setSoTimeout(2 * 60 * 1000);
1:7d87837:         socket.startHandshake();
1:7d87837:         socket.close();
1:4743a20: 
1:7d87837:         boolean matches = false;
1:7d87837:         if (catcher.serverCerts != null) {
1:7d87837:             for (int i = 0; i < catcher.serverCerts.length; i++) {
1:7d87837:                 X509Certificate cert = catcher.serverCerts[i];
1:7d87837:                 LOG.info(" " + (i + 1) + " Issuer " + cert.getIssuerDN());
1:7d87837:             }
1:7d87837:             if (catcher.serverCerts.length > 0) {
1:7d87837:                 String issuer = catcher.serverCerts[0].getIssuerDN().toString();
1:7d87837:                 if (issuer.indexOf(broker.getBrokerName()) != -1) {
1:7d87837:                     matches = true;
1:7d87837:                 }
1:7d87837:             }
1:7d87837:         }
1:4743a20:         return matches;
1:7d87837:     }
1:7d87837: 
1:7d87837:     private BrokerService getBroker(String name) {
1:7d87837:         BrokerService result = null;
1:4743a20:         Iterator<BrokerService> iterator = beansOfType.values().iterator();
1:4743a20:         while (iterator.hasNext()) {
1:4743a20:             BrokerService candidate = iterator.next();
1:7d87837:             if (candidate.getBrokerName().equals(name)) {
1:7d87837:                 result = candidate;
1:7d87837:                 break;
1:7d87837:             }
1:7d87837:         }
1:7d87837:         return result;
1:7d87837:     }
1:7d87837: 
1:6540f04:     @Before
1:6540f04:     public void setUp() throws Exception {
1:4743a20:         // System.setProperty("javax.net.debug", "ssl");
1:7d87837:         Thread.currentThread().setContextClassLoader(SslContextNBrokerServiceTest.class.getClassLoader());
1:7d87837:         context = new ClassPathXmlApplicationContext("org/apache/activemq/transport/tcp/n-brokers-ssl.xml");
1:7d87837:         beansOfType = context.getBeansOfType(BrokerService.class);
1:7d87837:     }
1:4743a20: 
1:6540f04:     @After
1:6540f04:     public void tearDown() throws Exception {
1:7d87837:         context.destroy();
1:7d87837:     }
1:7d87837: 
1:4743a20:     class CertChainCatcher implements X509TrustManager {
1:7d87837:         X509Certificate[] serverCerts;
1:4743a20: 
2:4743a20:         @Override
1:7d87837:         public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
1:7d87837:         }
1:4743a20: 
1:4743a20:         @Override
1:7d87837:         public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
1:7d87837:             serverCerts = arg0;
1:7d87837:         }
1:4743a20: 
1:4743a20:         @Override
1:7d87837:         public X509Certificate[] getAcceptedIssuers() {
1:7d87837:             return null;
1:7d87837:         }
1:7d87837:     }
1:7d87837: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:c646fac
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 3 * 60 * 1000)
1:     @Test(timeout = 3 * 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:         socket.setSoTimeout(2 * 60 * 1000);
author:Kevin Earls
-------------------------------------------------------------------------------
commit:6540f04
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
1: 
1: public class SslContextNBrokerServiceTest {
0:     @Test(timeout = 2 * 60 * 1000)
1:     public void testDummyConfigurationIsolation() throws Exception {
1:     }
1: 
0:     @Test(timeout = 2 * 60 * 1000)
1:     public void testActiveMQDotOrgConfigurationIsolation() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
0:         socket.setSoTimeout(60 * 1000);
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
1:     @After
1:     public void tearDown() throws Exception {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1:     Map<String, BrokerService> beansOfType;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         SSLContext context = SSLContext.getInstance("TLS");
1:         CertChainCatcher catcher = new CertChainCatcher();
1:         context.init(null, new TrustManager[] { catcher }, null);
1: 
1:         LOG.info("Connecting to broker: " + broker.getBrokerName() + " on: " + brokerUri.getHost() + ":" + brokerUri.getPort());
1:         SSLSocket socket = (SSLSocket) factory.createSocket(brokerUri.getHost(), brokerUri.getPort());
1: 
/////////////////////////////////////////////////////////////////////////
1:         return matches;
1:         Iterator<BrokerService> iterator = beansOfType.values().iterator();
1:         while (iterator.hasNext()) {
1:             BrokerService candidate = iterator.next();
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     protected void setUp() throws Exception {
1:         // System.setProperty("javax.net.debug", "ssl");
1: 
1:     class CertChainCatcher implements X509TrustManager {
1: 
1:         @Override
1: 
1:         @Override
1: 
1:         @Override
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(SslContextNBrokerServiceTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:b56cb8f
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Connecting to broker: " + broker.getBrokerName()
0:                 + " on: " + brokerUri.getHost() + ":" + brokerUri.getPort());
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7d87837
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.net.URI;
1: import java.security.cert.CertificateException;
1: import java.security.cert.X509Certificate;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLSocket;
1: import javax.net.ssl.SSLSocketFactory;
1: import javax.net.ssl.TrustManager;
1: import javax.net.ssl.X509TrustManager;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.AMQDeadlockTest3;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: 
0: public class SslContextNBrokerServiceTest extends TestCase {
0:     private static final transient Log LOG = LogFactory.getLog(SslContextNBrokerServiceTest.class);
1:     
1:     private ClassPathXmlApplicationContext context;
0:     Map beansOfType;
1:     
0:     public void testConfigurationIsolation() throws Exception {
1:         
1:         assertTrue("dummy bean has dummy cert", verifyCredentials("dummy"));
1:         assertTrue("good bean has amq cert", verifyCredentials("activemq.org"));
1:     }
1:     
1:     private boolean verifyCredentials(String name) throws Exception {
1:         boolean result = false;
1:         BrokerService broker = getBroker(name);
1:         assertNotNull(name, broker);
1:         broker.start();
1:         try {
1:             result = verifySslCredentials(broker);
1:         } finally {
1:             broker.stop();
1:         }
1:         return result;
1:     }
1: 
1:     private boolean verifySslCredentials(BrokerService broker) throws Exception {
1:         TransportConnector connector = broker.getTransportConnectors().get(0);
1:         URI brokerUri = connector.getConnectUri();
1: 
0:         SSLContext context = SSLContext.getInstance("TLS");        
0:         CertChainCatcher catcher = new CertChainCatcher(); 
0:         context.init(null, new TrustManager[] {catcher}, null);
1:         
1:         SSLSocketFactory factory = context.getSocketFactory();
0:         SSLSocket socket = (SSLSocket)factory.createSocket(brokerUri.getHost(), brokerUri.getPort());
0:         socket.setSoTimeout(5000);
1:         socket.startHandshake();
1:         socket.close();
1:         
1:         boolean matches = false;
1:         if (catcher.serverCerts != null) {
1:             for (int i = 0; i < catcher.serverCerts.length; i++) {
1:                 X509Certificate cert = catcher.serverCerts[i];
1:                 LOG.info(" " + (i + 1) + " Issuer " + cert.getIssuerDN());
1:             }
1:             if (catcher.serverCerts.length > 0) {
1:                 String issuer = catcher.serverCerts[0].getIssuerDN().toString();
1:                 if (issuer.indexOf(broker.getBrokerName()) != -1) {
1:                     matches = true;
1:                 }
1:             }
1:         }
0:         return matches; 
1:     }
1: 
1: 
1:     private BrokerService getBroker(String name) {
1:         BrokerService result = null;
0:         Iterator iterator = beansOfType.values().iterator();
0:         while(iterator.hasNext()) {
0:             BrokerService candidate = (BrokerService)iterator.next();
1:             if (candidate.getBrokerName().equals(name)) {
1:                 result = candidate;
1:                 break;
1:             }
1:         }
1:         return result;
1:     }
1: 
1: 
0:     protected void setUp() throws Exception {     
0:         //System.setProperty("javax.net.debug", "ssl");
1:         Thread.currentThread().setContextClassLoader(SslContextNBrokerServiceTest.class.getClassLoader());
1:         context = new ClassPathXmlApplicationContext("org/apache/activemq/transport/tcp/n-brokers-ssl.xml");
1:         beansOfType = context.getBeansOfType(BrokerService.class);
1:         
1:     }
1:     
0:     @Override
0:     protected void tearDown() throws Exception {
1:         context.destroy();
1:     }
1: 
1: 
0:     class CertChainCatcher implements  X509TrustManager {  
1:         X509Certificate[] serverCerts;
1:         
1:         public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
1:         }
1:         public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
1:             serverCerts = arg0;
1:         }
1:         public X509Certificate[] getAcceptedIssuers() {
1:             return null;
1:         }
1:     }
1: }
============================================================================