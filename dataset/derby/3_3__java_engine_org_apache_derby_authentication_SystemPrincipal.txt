1:c0052e0: /*
1:c0052e0: 
1:c0052e0:    Derby - Class org.apache.derby.authentication.SystemPrincipal
1:c0052e0: 
1:c0052e0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c0052e0:    contributor license agreements.  See the NOTICE file distributed with
1:c0052e0:    this work for additional information regarding copyright ownership.
1:c0052e0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c0052e0:    (the "License"); you may not use this file except in compliance with
1:c0052e0:    the License.  You may obtain a copy of the License at
1:c0052e0: 
1:c0052e0:       http://www.apache.org/licenses/LICENSE-2.0
1:c0052e0: 
1:c0052e0:    Unless required by applicable law or agreed to in writing, software
1:c0052e0:    distributed under the License is distributed on an "AS IS" BASIS,
1:c0052e0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0052e0:    See the License for the specific language governing permissions and
1:c0052e0:    limitations under the License.
1:c0052e0: 
1:c0052e0:  */
1:c0052e0: 
1:c0052e0: package org.apache.derby.authentication;
1:c0052e0: 
1:44ea8af: import java.io.IOException;
1:44ea8af: import java.io.ObjectInputStream;
1:c0052e0: import java.io.Serializable;
1:c0052e0: import java.security.Principal;
1:c0052e0: 
1:c0052e0: 
1:c0052e0: /**
1:c0052e0:  * This class represents Derby's notion of a principal, a concept of
1:c0052e0:  * user identity with controlled access to Derby System Privileges.
1:c0052e0:  * An authenticated user may have other identities which make sense in
1:c0052e0:  * other code domains.
1:c0052e0:  * <p>
1:c0052e0:  * Note that principal names do NOT follow Authorization Identifier rules.
1:c0052e0:  * For instance, although edward and edWard both match the normalized
1:c0052e0:  * authorization identifier EDWARD, the instances
1:c0052e0:  * <code>SystemPrincipal("edward")</code> and
1:c0052e0:  * <code>SystemPrincipal("edWard")</code> represent different principals
1:c0052e0:  * under the methods <code>getName()</code>, <code>equals()</code>, and
1:c0052e0:  * <code>hashCode()</code>.
1:c0052e0:  * <p>
1:c0052e0:  * According to JAASRefGuide, Principal classes must implement Serializable.
1:c0052e0:  *
1:acfc688:  * @see Principal#getName
1:c0052e0:  * @see <a href="http://java.sun.com/javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html#Principals">JAASRefGuide on Principals</a> 
1:c0052e0:  */
1:c0052e0: final public class SystemPrincipal implements Principal, Serializable {
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * BTW, this class currently does not require special handling during
1:c0052e0:      * serialization/deserialization, so, there's no need to define methods
1:c0052e0:      * <code>readObject(ObjectInputStream)</code> and 
1:c0052e0:      * <code>writeObject(ObjectOutputStream)</code>.
1:c0052e0:      */
1:c0052e0:     static final long serialVersionUID = 925380094921530190L;
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * The name of the principal.
1:c0052e0:      * <p>
1:c0052e0:      * Note that the name is not a "normalized" Authorization Identifier.
1:c0052e0:      * This is due to peculiarities of the Java Security Runtime, which
1:c0052e0:      * compares a <code>javax.security.auth.Subject</code>'s Principals
1:c0052e0:      * against the literal Principal name as declared in the policy files,
1:c0052e0:      * and not against the return value of method <code>getName()</code>.
1:c0052e0:      * So, a normalization of names within SystemPrincipal doesn't affect
1:c0052e0:      * permission checking by the SecurityManager.
1:c0052e0:      * <p>
1:c0052e0:      * In order for a <code>javax.security.auth.Subject</code> to be
1:c0052e0:      * granted permissions on the basis Authorization Identifier rules, e.g.,
1:c0052e0:      * for a Subject authenticated as edWard to fall under a policy clause
1:c0052e0:      * declared for EDWARD, the Subject has to be constructed (or augmented)
1:c0052e0:      * with both the literal name and the normalized Authorization Identifier.
1:c0052e0:      * <p>
1:c0052e0:      * As an alternative approach, class <code>SystemPrincipal</code> could
1:c0052e0:      * implement the non-standard interface
1:c0052e0:      * <code>com.sun.security.auth.PrincipalComparator</code>, which declares
1:c0052e0:      * a method <code>implies(Subject)<code> that would allow for Principals
1:c0052e0:      * to match Subjects on the basis of normalized Authorization Identifiers.
1:c0052e0:      * But then we'd be relying upon non-standard Security Runtime behaviour.
1:c0052e0:      *
1:c0052e0:      * @see <a href="http://wiki.apache.org/db-derby/UserIdentifiers">User Names & Authorization Identifiers in Derby</a>
1:c0052e0:      */
1:c0052e0:     private final String name;
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * Constructs a principal for a given name.
1:c0052e0:      *
1:c0052e0:      * @param name the name of the principal
1:c0052e0:      * @throws NullPointerException if name is null
1:c0052e0:      * @throws IllegalArgumentException if name is not a legal Principal name
1:c0052e0:      */
1:c0052e0:     public SystemPrincipal(String name) {
1:44ea8af:         validateName(name);
1:44ea8af:         this.name = name;
1:44ea8af:     }
1:44ea8af: 
1:44ea8af:     /**
1:44ea8af:      * Verify that the specified name of the principal is valid.
1:44ea8af:      * @param name the name of the principal
1:44ea8af:      * @throws NullPointerException if name is null
1:44ea8af:      * @throws IllegalArgumentException if name is not a legal Principal name
1:44ea8af:      */
1:44ea8af:     private static void validateName(String name) {
1:c0052e0:         // RuntimeException messages not localized
1:c0052e0:         if (name == null) {
1:c0052e0:             throw new NullPointerException("name can't be null");
1:c0052e0:         }
1:c0052e0:         if (name.length() == 0) {
1:c0052e0:             throw new IllegalArgumentException("name can't be empty");
1:c0052e0:         }
1:c0052e0:     }
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * Compares this principal to the specified object. Returns true if
1:c0052e0:      * the object passed in matches the principal represented by the
1:c0052e0:      * implementation of this interface.
1:c0052e0:      *
1:c0052e0:      * @param other principal to compare with
1:c0052e0:      * @return true if the principal passed in is the same as that
1:c0052e0:      *         encapsulated by this principal, and false otherwise
1:c0052e0:      * @see Principal#equals
1:c0052e0:      */
1:c0052e0:     public boolean equals(Object other) {
1:c0052e0:         if (other == null) {
1:c0052e0:             return false;
1:c0052e0:         }
1:c0052e0:         if (!(other instanceof SystemPrincipal)) {
1:c0052e0:             return false;
1:c0052e0:         }
1:c0052e0:         final SystemPrincipal that = (SystemPrincipal)other;
1:c0052e0:         return name.equals(that.name);
1:c0052e0:     }
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * Returns the name of this principal.
1:c0052e0:      *
1:c0052e0:      * @return the name of this principal
1:c0052e0:      * @see Principal#getName()
1:c0052e0:      */
1:c0052e0:     public String getName() {
1:c0052e0:         return name;
1:c0052e0:     }
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * Returns a hashcode for this principal.
1:c0052e0:      *
1:c0052e0:      * @return a hashcode for this principal
1:c0052e0:      * @see Principal#hashCode()
1:c0052e0:      */
1:c0052e0:     public int hashCode() {
1:c0052e0:         return name.hashCode();
1:c0052e0:     }
1:c0052e0: 
1:c0052e0:     /**
1:c0052e0:      * Returns a string representation of this principal.
1:c0052e0:      *
1:c0052e0:      * @return a string representation of this principal
1:c0052e0:      * @see Principal#toString()
1:c0052e0:      */
1:c0052e0:     public String toString() {
1:c0052e0:         return getClass().getName() + "(" + name + ")";
1:c0052e0:     }
1:44ea8af: 
1:44ea8af:     /**
1:44ea8af:      * Called upon deserialization for restoring the state of this
1:44ea8af:      * SystemPrincipal from a stream.
1:44ea8af:      */
1:44ea8af:     private void readObject(ObjectInputStream s)
1:44ea8af:             throws IOException, ClassNotFoundException {
1:44ea8af:         // Read the fields from the stream.
1:44ea8af:         s.defaultReadObject();
1:44ea8af: 
1:44ea8af:         // Make sure name is valid.
1:44ea8af:         validateName(name);
1:44ea8af:     }
1:44ea8af: 
1:c0052e0: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:44ea8af
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
/////////////////////////////////////////////////////////////////////////
1:         validateName(name);
1:         this.name = name;
1:     }
1: 
1:     /**
1:      * Verify that the specified name of the principal is valid.
1:      * @param name the name of the principal
1:      * @throws NullPointerException if name is null
1:      * @throws IllegalArgumentException if name is not a legal Principal name
1:      */
1:     private static void validateName(String name) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Called upon deserialization for restoring the state of this
1:      * SystemPrincipal from a stream.
1:      */
1:     private void readObject(ObjectInputStream s)
1:             throws IOException, ClassNotFoundException {
1:         // Read the fields from the stream.
1:         s.defaultReadObject();
1: 
1:         // Make sure name is valid.
1:         validateName(name);
1:     }
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:acfc688
/////////////////////////////////////////////////////////////////////////
1:  * @see Principal#getName
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:c0052e0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.authentication.SystemPrincipal
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.authentication;
1: 
1: import java.io.Serializable;
1: import java.security.Principal;
1: 
1: 
1: /**
1:  * This class represents Derby's notion of a principal, a concept of
1:  * user identity with controlled access to Derby System Privileges.
1:  * An authenticated user may have other identities which make sense in
1:  * other code domains.
1:  * <p>
1:  * Note that principal names do NOT follow Authorization Identifier rules.
1:  * For instance, although edward and edWard both match the normalized
1:  * authorization identifier EDWARD, the instances
1:  * <code>SystemPrincipal("edward")</code> and
1:  * <code>SystemPrincipal("edWard")</code> represent different principals
1:  * under the methods <code>getName()</code>, <code>equals()</code>, and
1:  * <code>hashCode()</code>.
1:  * <p>
1:  * According to JAASRefGuide, Principal classes must implement Serializable.
1:  *
0:  * @see Principal#name
1:  * @see <a href="http://java.sun.com/javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html#Principals">JAASRefGuide on Principals</a> 
1:  */
1: final public class SystemPrincipal implements Principal, Serializable {
1: 
1:     /**
1:      * BTW, this class currently does not require special handling during
1:      * serialization/deserialization, so, there's no need to define methods
1:      * <code>readObject(ObjectInputStream)</code> and 
1:      * <code>writeObject(ObjectOutputStream)</code>.
1:      */
1:     static final long serialVersionUID = 925380094921530190L;
1: 
1:     /**
1:      * The name of the principal.
1:      * <p>
1:      * Note that the name is not a "normalized" Authorization Identifier.
1:      * This is due to peculiarities of the Java Security Runtime, which
1:      * compares a <code>javax.security.auth.Subject</code>'s Principals
1:      * against the literal Principal name as declared in the policy files,
1:      * and not against the return value of method <code>getName()</code>.
1:      * So, a normalization of names within SystemPrincipal doesn't affect
1:      * permission checking by the SecurityManager.
1:      * <p>
1:      * In order for a <code>javax.security.auth.Subject</code> to be
1:      * granted permissions on the basis Authorization Identifier rules, e.g.,
1:      * for a Subject authenticated as edWard to fall under a policy clause
1:      * declared for EDWARD, the Subject has to be constructed (or augmented)
1:      * with both the literal name and the normalized Authorization Identifier.
1:      * <p>
1:      * As an alternative approach, class <code>SystemPrincipal</code> could
1:      * implement the non-standard interface
1:      * <code>com.sun.security.auth.PrincipalComparator</code>, which declares
1:      * a method <code>implies(Subject)<code> that would allow for Principals
1:      * to match Subjects on the basis of normalized Authorization Identifiers.
1:      * But then we'd be relying upon non-standard Security Runtime behaviour.
1:      *
1:      * @see <a href="http://wiki.apache.org/db-derby/UserIdentifiers">User Names & Authorization Identifiers in Derby</a>
1:      */
1:     private final String name;
1: 
1:     /**
1:      * Constructs a principal for a given name.
1:      *
1:      * @param name the name of the principal
1:      * @throws NullPointerException if name is null
1:      * @throws IllegalArgumentException if name is not a legal Principal name
1:      */
1:     public SystemPrincipal(String name) {
1:         // RuntimeException messages not localized
1:         if (name == null) {
1:             throw new NullPointerException("name can't be null");
1:         }
1:         if (name.length() == 0) {
1:             throw new IllegalArgumentException("name can't be empty");
1:         }
0:         this.name = name;
1:     }
1: 
1:     /**
1:      * Compares this principal to the specified object. Returns true if
1:      * the object passed in matches the principal represented by the
1:      * implementation of this interface.
1:      *
1:      * @param other principal to compare with
1:      * @return true if the principal passed in is the same as that
1:      *         encapsulated by this principal, and false otherwise
1:      * @see Principal#equals
1:      */
1:     public boolean equals(Object other) {
1:         if (other == null) {
1:             return false;
1:         }
1:         if (!(other instanceof SystemPrincipal)) {
1:             return false;
1:         }
1:         final SystemPrincipal that = (SystemPrincipal)other;
1:         return name.equals(that.name);
1:     }
1: 
1:     /**
1:      * Returns the name of this principal.
1:      *
1:      * @return the name of this principal
1:      * @see Principal#getName()
1:      */
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     /**
1:      * Returns a hashcode for this principal.
1:      *
1:      * @return a hashcode for this principal
1:      * @see Principal#hashCode()
1:      */
1:     public int hashCode() {
1:         return name.hashCode();
1:     }
1: 
1:     /**
1:      * Returns a string representation of this principal.
1:      *
1:      * @return a string representation of this principal
1:      * @see Principal#toString()
1:      */
1:     public String toString() {
1:         return getClass().getName() + "(" + name + ")";
1:     }
1: }
============================================================================