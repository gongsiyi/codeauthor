1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.GenericColumnDescriptor
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:000d4bc: import org.apache.derby.catalog.types.RoutineAliasInfo;
1:eac0369: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableIntHolder;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
2:eac0369: /**
1:eac0369:  * This is a stripped down implementation of a column
1:eac0369:  * descriptor that is intended for generic use.  It
1:eac0369:  * can be seralized and attached to plans.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public final class GenericColumnDescriptor
1:eac0369: 	implements ResultColumnDescriptor, Formatable
1:eac0369: {
1:eac0369: 
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	private String				name;
1:eac0369: 	private String				schemaName;
1:eac0369: 	private String				tableName;
1:eac0369: 	private int					columnPos;
1:eac0369: 	private DataTypeDescriptor	type;
1:eac0369: 	private boolean 			isAutoincrement;
1:b57ee34: 	private boolean 			updatableByCursor;
1:ec4aa98:     private boolean             hasGenerationClause;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formatable
1:eac0369: 	 */
1:eac0369: 	public GenericColumnDescriptor()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public GenericColumnDescriptor(String name, DataTypeDescriptor	type) {
1:eac0369: 		this.name = name;
1:eac0369: 		this.type = type;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * This constructor is used to build a generic (and
1:eac0369: 	 * formatable) ColumnDescriptor.  The idea is that
1:eac0369: 	 * it can be passed a ColumnDescriptor from a query
1:eac0369: 	 * tree and convert it to something that can be used
1:eac0369: 	 * anywhere.
1:eac0369: 	 *
1:eac0369: 	 * @param rcd the ResultColumnDescriptor
1:eac0369: 	 */
1:eac0369: 	public GenericColumnDescriptor(ResultColumnDescriptor rcd)
1:eac0369: 	{
1:eac0369: 		name = rcd.getName();
1:eac0369: 		tableName = rcd.getSourceTableName();
1:b57ee34:  		schemaName = rcd.getSourceSchemaName();
1:eac0369: 		columnPos = rcd.getColumnPosition();
1:eac0369: 		type = rcd.getType();
1:eac0369: 		isAutoincrement = rcd.isAutoincrement();
1:b57ee34: 		updatableByCursor = rcd.updatableByCursor();
1:ec4aa98:         hasGenerationClause = rcd.hasGenerationClause();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor
1:eac0369: 	 * will not represent an actual value, it will only represent the type
1:eac0369: 	 * that all values in the column will have.
1:eac0369: 	 *
1:eac0369: 	 * @return	A DataTypeDescriptor describing the type of the column.
1:eac0369: 	 */
1:eac0369: 	public DataTypeDescriptor	getType()
1:eac0369: 	{
1:eac0369: 		return type;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the name of the Column.
1:eac0369: 	 *
1:eac0369: 	 * @return	A String containing the name of the column.
1:eac0369: 	 */
1:eac0369: 	public String	getName()
1:eac0369: 	{
1:eac0369: 		return name;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:b57ee34: 	 * Get the name of the schema for the Column's base table, if any.
1:b57ee34: 	 * Following example queries will all return APP (assuming user is in schema APP)
1:b57ee34: 	 * select t.a from t
1:b57ee34: 	 * select b.a from t as b
1:b57ee34: 	 * select app.t.a from t
1:eac0369: 	 *
1:b57ee34: 	 * @return	A String containing the name of the schema of the Column's table.
1:b57ee34: 	 *		If the column is not in a schema (i.e. is a derived column), it returns NULL.
1:eac0369: 	 */
1:b57ee34: 	public String	getSourceSchemaName()
1:eac0369: 	{
1:eac0369: 		return schemaName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:b57ee34: 	 * Get the name of the underlying(base) table this column comes from, if any.
1:b57ee34: 	 * Following example queries will all return T
1:b57ee34: 	 * select a from t
1:b57ee34: 	 * select b.a from t as b
1:b57ee34: 	 * select t.a from t
1:eac0369: 	 *
1:b57ee34: 	 * @return	A String containing the name of the Column's base table.
1:b57ee34: 	 *		If the column is not in a table (i.e. is a derived column), it returns NULL.
1:eac0369: 	 */
1:eac0369: 	public String	getSourceTableName()
1:eac0369: 	{
1:eac0369: 		return tableName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the position of the Column.
1:eac0369: 	 * NOTE - position is 1-based.
1:eac0369: 	 *
1:eac0369: 	 * @return	An int containing the position of the Column
1:eac0369: 	 *		within the table.
1:eac0369: 	 */
1:eac0369: 	public int	getColumnPosition()
1:eac0369: 	{
1:eac0369: 		return columnPos;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean isAutoincrement()
1:eac0369: 	{
1:eac0369: 		return isAutoincrement;
1:eac0369: 	}
1:eac0369: 
1:b57ee34: 	public boolean updatableByCursor()
1:b57ee34: 	{
1:b57ee34: 		return updatableByCursor;
1:b57ee34: 	}
1:b57ee34: 
1:ec4aa98:     public boolean hasGenerationClause() { return hasGenerationClause; }
1:ec4aa98: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		FormatableHashtable fh = new FormatableHashtable();
1:eac0369: 		fh.put("name", name);
1:eac0369: 		fh.put("tableName", tableName);
1:eac0369: 		fh.put("schemaName", schemaName);
1:eac0369: 		fh.putInt("columnPos", columnPos);
1:eac0369: 		fh.put("type", type);
1:eac0369: 		fh.putBoolean("isAutoincrement", isAutoincrement);
1:b57ee34: 		fh.putBoolean("updatableByCursor", updatableByCursor);
1:eac0369: 		out.writeObject(fh);
1:eac0369: 		return;
1:eac0369: 	}	
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();		
1:eac0369: 		name = (String)fh.get("name");
1:eac0369: 		tableName = (String)fh.get("tableName");
1:eac0369: 		schemaName = (String)fh.get("schemaName");
1:eac0369: 		columnPos = fh.getInt("columnPos");
1:000d4bc: 		type = getStoredDataTypeDescriptor(fh.get("type"));
1:eac0369: 		isAutoincrement = fh.getBoolean("isAutoincrement");
1:b57ee34: 		updatableByCursor = fh.getBoolean("updatableByCursor");
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int getTypeFormatId()	{ return StoredFormatIds.GENERIC_COLUMN_DESCRIPTOR_V02_ID; }
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "GenericColumnDescriptor\n\tname: "+name+
1:eac0369: 				"\n\tTable: "+schemaName+"."+tableName+
1:eac0369: 				"\n\tcolumnPos: "+columnPos+
1:9d24308: 				"\n\tType: "+type+
1:9d24308: 				"\n\tisAutoincrement: " + isAutoincrement +
1:9d24308: 				"\n\thasGenerationClause: " + hasGenerationClause;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:000d4bc: 
1:000d4bc:     /**
1:000d4bc:      * When retrieving a DataTypeDescriptor, it might just be a regular
1:000d4bc:      * DataTypeDescriptor or may be an OldRoutineType, as used for Routine
1:000d4bc:      * parameters and return values prior to DERBY-2775. If it is not a regular
1:000d4bc:      * DataTypeDescriptor, it must be an OldRoutineType, so convert it to a
1:000d4bc:      * DataTypeDescriptor DERBY-4913
1:000d4bc:      * 
1:000d4bc:      * @param o
1:000d4bc:      *            object as obtained by fh.get("type") in readExternal
1:000d4bc:      * @return DataTypeDescriptor
1:000d4bc:      */
1:000d4bc:     private DataTypeDescriptor getStoredDataTypeDescriptor(Object o) {
1:000d4bc: 
1:000d4bc:         if (o instanceof DataTypeDescriptor)
1:000d4bc:             return (DataTypeDescriptor) o;
1:000d4bc:         else
1:000d4bc:             // Must be an OldRoutineType, so we will convert it to a
1:000d4bc:             // DataTypeDescriptor for our purposes
1:000d4bc:             return DataTypeDescriptor
1:000d4bc:                     .getType(RoutineAliasInfo.getStoredType(o));
1:000d4bc:     }
1:000d4bc: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:000d4bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.types.RoutineAliasInfo;
/////////////////////////////////////////////////////////////////////////
1: 		type = getStoredDataTypeDescriptor(fh.get("type"));
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * When retrieving a DataTypeDescriptor, it might just be a regular
1:      * DataTypeDescriptor or may be an OldRoutineType, as used for Routine
1:      * parameters and return values prior to DERBY-2775. If it is not a regular
1:      * DataTypeDescriptor, it must be an OldRoutineType, so convert it to a
1:      * DataTypeDescriptor DERBY-4913
1:      * 
1:      * @param o
1:      *            object as obtained by fh.get("type") in readExternal
1:      * @return DataTypeDescriptor
1:      */
1:     private DataTypeDescriptor getStoredDataTypeDescriptor(Object o) {
1: 
1:         if (o instanceof DataTypeDescriptor)
1:             return (DataTypeDescriptor) o;
1:         else
1:             // Must be an OldRoutineType, so we will convert it to a
1:             // DataTypeDescriptor for our purposes
1:             return DataTypeDescriptor
1:                     .getType(RoutineAliasInfo.getStoredType(o));
1:     }
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9d24308
/////////////////////////////////////////////////////////////////////////
1: 				"\n\tType: "+type+
1: 				"\n\tisAutoincrement: " + isAutoincrement +
1: 				"\n\thasGenerationClause: " + hasGenerationClause;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ec4aa98
/////////////////////////////////////////////////////////////////////////
1:     private boolean             hasGenerationClause;
/////////////////////////////////////////////////////////////////////////
1:         hasGenerationClause = rcd.hasGenerationClause();
/////////////////////////////////////////////////////////////////////////
1:     public boolean hasGenerationClause() { return hasGenerationClause; }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f512b2f
/////////////////////////////////////////////////////////////////////////
commit:b57ee34
/////////////////////////////////////////////////////////////////////////
1: 	private boolean 			updatableByCursor;
/////////////////////////////////////////////////////////////////////////
1:  		schemaName = rcd.getSourceSchemaName();
1: 		updatableByCursor = rcd.updatableByCursor();
/////////////////////////////////////////////////////////////////////////
1: 	 * Get the name of the schema for the Column's base table, if any.
1: 	 * Following example queries will all return APP (assuming user is in schema APP)
1: 	 * select t.a from t
1: 	 * select b.a from t as b
1: 	 * select app.t.a from t
1: 	 * @return	A String containing the name of the schema of the Column's table.
1: 	 *		If the column is not in a schema (i.e. is a derived column), it returns NULL.
1: 	public String	getSourceSchemaName()
1: 	 * Get the name of the underlying(base) table this column comes from, if any.
1: 	 * Following example queries will all return T
1: 	 * select a from t
1: 	 * select b.a from t as b
1: 	 * select t.a from t
1: 	 * @return	A String containing the name of the Column's base table.
1: 	 *		If the column is not in a table (i.e. is a derived column), it returns NULL.
/////////////////////////////////////////////////////////////////////////
1: 	public boolean updatableByCursor()
1: 	{
1: 		return updatableByCursor;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 		fh.putBoolean("updatableByCursor", updatableByCursor);
/////////////////////////////////////////////////////////////////////////
1: 		updatableByCursor = fh.getBoolean("updatableByCursor");
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.GenericColumnDescriptor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: import org.apache.derby.iapi.services.io.FormatableIntHolder;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: /**
1:  * This is a stripped down implementation of a column
1:  * descriptor that is intended for generic use.  It
1:  * can be seralized and attached to plans.
1:  *
0:  * @author jamie
1:  */
1: public final class GenericColumnDescriptor
1: 	implements ResultColumnDescriptor, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	private String				name;
1: 	private String				schemaName;
1: 	private String				tableName;
1: 	private int					columnPos;
1: 	private DataTypeDescriptor	type;
1: 	private boolean 			isAutoincrement;
1: 
1: 	/**
1: 	 * Niladic constructor for Formatable
1: 	 */
1: 	public GenericColumnDescriptor()
1: 	{
1: 	}
1: 
1: 	public GenericColumnDescriptor(String name, DataTypeDescriptor	type) {
1: 		this.name = name;
1: 		this.type = type;
1: 	}
1: 
1: 	/** 
1: 	 * This constructor is used to build a generic (and
1: 	 * formatable) ColumnDescriptor.  The idea is that
1: 	 * it can be passed a ColumnDescriptor from a query
1: 	 * tree and convert it to something that can be used
1: 	 * anywhere.
1: 	 *
1: 	 * @param rcd the ResultColumnDescriptor
1: 	 */
1: 	public GenericColumnDescriptor(ResultColumnDescriptor rcd)
1: 	{
1: 		name = rcd.getName();
1: 		tableName = rcd.getSourceTableName();
0: 		schemaName = rcd.getSchemaName();
1: 		columnPos = rcd.getColumnPosition();
1: 		type = rcd.getType();
1: 		isAutoincrement = rcd.isAutoincrement();
1: 	}
1: 
1: 	/**
1: 	 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor
1: 	 * will not represent an actual value, it will only represent the type
1: 	 * that all values in the column will have.
1: 	 *
1: 	 * @return	A DataTypeDescriptor describing the type of the column.
1: 	 */
1: 	public DataTypeDescriptor	getType()
1: 	{
1: 		return type;
1: 	}
1: 
1: 	/**
1: 	 * Returns the name of the Column.
1: 	 *
1: 	 * @return	A String containing the name of the column.
1: 	 */
1: 	public String	getName()
1: 	{
1: 		return name;
1: 	}
1: 
1: 	/**
0: 	 * Get the name of the schema the Column is in, if any.
1: 	 *
0: 	 * @return	A String containing the name of the schema the Column
0: 	 *		is in.  If the column is not in a schema (i.e. is a
0: 	 * 		derived column), it returns NULL.
1: 	 */
0: 	public String	getSchemaName()
1: 	{
1: 		return schemaName;
1: 	}
1: 
1: 	/**
0: 	 * Get the name of the table the Column is in, if any.
1: 	 *
0: 	 * @return	A String containing the name of the table the Column
0: 	 *		is in. If the column is not in a table (i.e. is a
0: 	 * 		derived column), it returns NULL.
1: 	 */
1: 	public String	getSourceTableName()
1: 	{
1: 		return tableName;
1: 	}
1: 
1: 	/**
1: 	 * Get the position of the Column.
1: 	 * NOTE - position is 1-based.
1: 	 *
1: 	 * @return	An int containing the position of the Column
1: 	 *		within the table.
1: 	 */
1: 	public int	getColumnPosition()
1: 	{
1: 		return columnPos;
1: 	}
1: 
1: 	public boolean isAutoincrement()
1: 	{
1: 		return isAutoincrement;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		FormatableHashtable fh = new FormatableHashtable();
1: 		fh.put("name", name);
1: 		fh.put("tableName", tableName);
1: 		fh.put("schemaName", schemaName);
1: 		fh.putInt("columnPos", columnPos);
1: 		fh.put("type", type);
1: 		fh.putBoolean("isAutoincrement", isAutoincrement);
1: 		out.writeObject(fh);
1: 		return;
1: 	}	
1: 
0: 	public void djdrcd() {}
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();		
1: 		name = (String)fh.get("name");
1: 		tableName = (String)fh.get("tableName");
1: 		schemaName = (String)fh.get("schemaName");
1: 		columnPos = fh.getInt("columnPos");
0: 		type = (DataTypeDescriptor)fh.get("type");
1: 		isAutoincrement = fh.getBoolean("isAutoincrement");
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int getTypeFormatId()	{ return StoredFormatIds.GENERIC_COLUMN_DESCRIPTOR_V02_ID; }
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "GenericColumnDescriptor\n\tname: "+name+
1: 				"\n\tTable: "+schemaName+"."+tableName+
1: 				"\n\tcolumnPos: "+columnPos+
0: 				"\n\tType: "+type;
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableIntHolder;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: /**
0:  * This is a stripped down implementation of a column
0:  * descriptor that is intended for generic use.  It
0:  * can be seralized and attached to plans.
0:  *
0:  * @author jamie
0:  */
0: public final class GenericColumnDescriptor
0: 	implements ResultColumnDescriptor, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	private String				name;
0: 	private String				schemaName;
0: 	private String				tableName;
0: 	private int					columnPos;
0: 	private DataTypeDescriptor	type;
0: 	private boolean 			isAutoincrement;
0: 
0: 	/**
0: 	 * Niladic constructor for Formatable
0: 	 */
0: 	public GenericColumnDescriptor()
0: 	{
0: 	}
0: 
0: 	public GenericColumnDescriptor(String name, DataTypeDescriptor	type) {
0: 		this.name = name;
0: 		this.type = type;
0: 	}
0: 
0: 	/** 
0: 	 * This constructor is used to build a generic (and
0: 	 * formatable) ColumnDescriptor.  The idea is that
0: 	 * it can be passed a ColumnDescriptor from a query
0: 	 * tree and convert it to something that can be used
0: 	 * anywhere.
0: 	 *
0: 	 * @param rcd the ResultColumnDescriptor
0: 	 */
0: 	public GenericColumnDescriptor(ResultColumnDescriptor rcd)
0: 	{
0: 		name = rcd.getName();
0: 		tableName = rcd.getSourceTableName();
0: 		schemaName = rcd.getSchemaName();
0: 		columnPos = rcd.getColumnPosition();
0: 		type = rcd.getType();
0: 		isAutoincrement = rcd.isAutoincrement();
0: 	}
0: 
0: 	/**
0: 	 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor
0: 	 * will not represent an actual value, it will only represent the type
0: 	 * that all values in the column will have.
0: 	 *
0: 	 * @return	A DataTypeDescriptor describing the type of the column.
0: 	 */
0: 	public DataTypeDescriptor	getType()
0: 	{
0: 		return type;
0: 	}
0: 
0: 	/**
0: 	 * Returns the name of the Column.
0: 	 *
0: 	 * @return	A String containing the name of the column.
0: 	 */
0: 	public String	getName()
0: 	{
0: 		return name;
0: 	}
0: 
0: 	/**
0: 	 * Get the name of the schema the Column is in, if any.
0: 	 *
0: 	 * @return	A String containing the name of the schema the Column
0: 	 *		is in.  If the column is not in a schema (i.e. is a
0: 	 * 		derived column), it returns NULL.
0: 	 */
0: 	public String	getSchemaName()
0: 	{
0: 		return schemaName;
0: 	}
0: 
0: 	/**
0: 	 * Get the name of the table the Column is in, if any.
0: 	 *
0: 	 * @return	A String containing the name of the table the Column
0: 	 *		is in. If the column is not in a table (i.e. is a
0: 	 * 		derived column), it returns NULL.
0: 	 */
0: 	public String	getSourceTableName()
0: 	{
0: 		return tableName;
0: 	}
0: 
0: 	/**
0: 	 * Get the position of the Column.
0: 	 * NOTE - position is 1-based.
0: 	 *
0: 	 * @return	An int containing the position of the Column
0: 	 *		within the table.
0: 	 */
0: 	public int	getColumnPosition()
0: 	{
0: 		return columnPos;
0: 	}
0: 
0: 	public boolean isAutoincrement()
0: 	{
0: 		return isAutoincrement;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		FormatableHashtable fh = new FormatableHashtable();
0: 		fh.put("name", name);
0: 		fh.put("tableName", tableName);
0: 		fh.put("schemaName", schemaName);
0: 		fh.putInt("columnPos", columnPos);
0: 		fh.put("type", type);
0: 		fh.putBoolean("isAutoincrement", isAutoincrement);
0: 		out.writeObject(fh);
0: 		return;
0: 	}	
0: 
0: 	public void djdrcd() {}
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();		
0: 		name = (String)fh.get("name");
0: 		tableName = (String)fh.get("tableName");
0: 		schemaName = (String)fh.get("schemaName");
0: 		columnPos = fh.getInt("columnPos");
0: 		type = (DataTypeDescriptor)fh.get("type");
0: 		isAutoincrement = fh.getBoolean("isAutoincrement");
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.GENERIC_COLUMN_DESCRIPTOR_V02_ID; }
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "GenericColumnDescriptor\n\tname: "+name+
0: 				"\n\tTable: "+schemaName+"."+tableName+
0: 				"\n\tcolumnPos: "+columnPos+
0: 				"\n\tType: "+type;
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================