1:eac0369: /*
1:d7258ed: 
1:d7258ed:    Derby - Class org.apache.derby.impl.drda.EbcdicCcsidManager
1:d7258ed: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
5:eac0369: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.drda;
1:eac0369: 
1:a1f0068: import java.nio.ByteBuffer;
1:a1f0068: 
1:eac0369: /**
1:eac0369:  * A concrete implementation of a CcsidMgr used to convert
1:eac0369:  * between Java UCS2 and Ebcdic as needed to handle character
1:eac0369:  * DDM Parameters.  This implementation only supports converting
1:eac0369:  * from the ASCII invariant of UNICODE to Ebcdic.  This should
1:eac0369:  * be fine since this class is intended for converting
1:eac0369:  * DDM Parameter data only.
1:eac0369:  */
1:7df5ffe: class EbcdicCcsidManager extends CcsidManager
6:eac0369: {
1:4f996a4:     private static final int[] conversionArrayToEbcdic = {
1:4f996a4:         0x0000,0x0001,0x0002,0x0003,0x0037,0x002d,0x002e,0x002f
1:4f996a4:         ,0x0016,0x0005,0x0025,0x000b,0x000c,0x000d,0x000e,0x000f
1:4f996a4:         ,0x0010,0x0011,0x0012,0x0013,0x003c,0x003d,0x0032,0x0026
1:4f996a4:         ,0x0018,0x0019,0x003f,0x0027,0x001c,0x001d,0x001e,0x001f
1:4f996a4:         ,0x0040,0x004f,0x007f,0x007b,0x005b,0x006c,0x0050,0x007d
1:4f996a4:         ,0x004d,0x005d,0x005c,0x004e,0x006b,0x0060,0x004b,0x0061
1:4f996a4:         ,0x00f0,0x00f1,0x00f2,0x00f3,0x00f4,0x00f5,0x00f6,0x00f7
1:4f996a4:         ,0x00f8,0x00f9,0x007a,0x005e,0x004c,0x007e,0x006e,0x006f
1:4f996a4:         ,0x007c,0x00c1,0x00c2,0x00c3,0x00c4,0x00c5,0x00c6,0x00c7
1:4f996a4:         ,0x00c8,0x00c9,0x00d1,0x00d2,0x00d3,0x00d4,0x00d5,0x00d6
1:4f996a4:         ,0x00d7,0x00d8,0x00d9,0x00e2,0x00e3,0x00e4,0x00e5,0x00e6
1:4f996a4:         ,0x00e7,0x00e8,0x00e9,0x004a,0x00e0,0x005a,0x005f,0x006d
1:4f996a4:         ,0x0079,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087
1:4f996a4:         ,0x0088,0x0089,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096
1:4f996a4:         ,0x0097,0x0098,0x0099,0x00a2,0x00a3,0x00a4,0x00a5,0x00a6
1:4f996a4:         ,0x00a7,0x00a8,0x00a9,0x00c0,0x00bb,0x00d0,0x00a1,0x0007
1:4f996a4:         ,0x0020,0x0021,0x0022,0x0023,0x0024,0x0015,0x0006,0x0017
1:4f996a4:         ,0x0028,0x0029,0x002a,0x002b,0x002c,0x0009,0x000a,0x001b
1:4f996a4:         ,0x0030,0x0031,0x001a,0x0033,0x0034,0x0035,0x0036,0x0008
1:4f996a4:         ,0x0038,0x0039,0x003a,0x003b,0x0004,0x0014,0x003e,0x00ff
1:4f996a4:         ,0x0041,0x00aa,0x00b0,0x00b1,0x009f,0x00b2,0x006a,0x00b5
1:4f996a4:         ,0x00bd,0x00b4,0x009a,0x008a,0x00ba,0x00ca,0x00af,0x00bc
1:4f996a4:         ,0x0090,0x008f,0x00ea,0x00fa,0x00be,0x00a0,0x00b6,0x00b3
1:4f996a4:         ,0x009d,0x00da,0x009b,0x008b,0x00b7,0x00b8,0x00b9,0x00ab
1:4f996a4:         ,0x0064,0x0065,0x0062,0x0066,0x0063,0x0067,0x009e,0x0068
1:4f996a4:         ,0x0074,0x0071,0x0072,0x0073,0x0078,0x0075,0x0076,0x0077
1:4f996a4:         ,0x00ac,0x0069,0x00ed,0x00ee,0x00eb,0x00ef,0x00ec,0x00bf
1:4f996a4:         ,0x0080,0x00fd,0x00fe,0x00fb,0x00fc,0x00ad,0x00ae,0x0059
1:4f996a4:         ,0x0044,0x0045,0x0042,0x0046,0x0043,0x0047,0x009c,0x0048
1:4f996a4:         ,0x0054,0x0051,0x0052,0x0053,0x0058,0x0055,0x0056,0x0057
1:4f996a4:         ,0x008c,0x0049,0x00cd,0x00ce,0x00cb,0x00cf,0x00cc,0x00e1
1:4f996a4:         ,0x0070,0x00dd,0x00de,0x00db,0x00dc,0x008d,0x008e,0x00df
1:4f996a4:     };
1:eac0369: 
1:4f996a4:     private static final int[] conversionArrayToUCS2 = {
1:4f996a4:         0x0000,0x0001,0x0002,0x0003,0x009C,0x0009,0x0086,0x007F
1:4f996a4:         ,0x0097,0x008D,0x008E,0x000B,0x000C,0x000D,0x000E,0x000F
1:4f996a4:         ,0x0010,0x0011,0x0012,0x0013,0x009D,0x0085,0x0008,0x0087
1:4f996a4:         ,0x0018,0x0019,0x0092,0x008F,0x001C,0x001D,0x001E,0x001F
1:4f996a4:         ,0x0080,0x0081,0x0082,0x0083,0x0084,0x000A,0x0017,0x001B
1:4f996a4:         ,0x0088,0x0089,0x008A,0x008B,0x008C,0x0005,0x0006,0x0007
1:4f996a4:         ,0x0090,0x0091,0x0016,0x0093,0x0094,0x0095,0x0096,0x0004
1:4f996a4:         ,0x0098,0x0099,0x009A,0x009B,0x0014,0x0015,0x009E,0x001A
1:4f996a4:         ,0x0020,0x00A0,0x00E2,0x00E4,0x00E0,0x00E1,0x00E3,0x00E5
1:4f996a4:         ,0x00E7,0x00F1,0x005B,0x002E,0x003C,0x0028,0x002B,0x0021
1:4f996a4:         ,0x0026,0x00E9,0x00EA,0x00EB,0x00E8,0x00ED,0x00EE,0x00EF
1:4f996a4:         ,0x00EC,0x00DF,0x005D,0x0024,0x002A,0x0029,0x003B,0x005E
1:4f996a4:         ,0x002D,0x002F,0x00C2,0x00C4,0x00C0,0x00C1,0x00C3,0x00C5
1:4f996a4:         ,0x00C7,0x00D1,0x00A6,0x002C,0x0025,0x005F,0x003E,0x003F
1:4f996a4:         ,0x00F8,0x00C9,0x00CA,0x00CB,0x00C8,0x00CD,0x00CE,0x00CF
1:4f996a4:         ,0x00CC,0x0060,0x003A,0x0023,0x0040,0x0027,0x003D,0x0022
1:4f996a4:         ,0x00D8,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067
1:4f996a4:         ,0x0068,0x0069,0x00AB,0x00BB,0x00F0,0x00FD,0x00FE,0x00B1
1:4f996a4:         ,0x00B0,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,0x0070
1:4f996a4:         ,0x0071,0x0072,0x00AA,0x00BA,0x00E6,0x00B8,0x00C6,0x00A4
1:4f996a4:         ,0x00B5,0x007E,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078
1:4f996a4:         ,0x0079,0x007A,0x00A1,0x00BF,0x00D0,0x00DD,0x00DE,0x00AE
1:4f996a4:         ,0x00A2,0x00A3,0x00A5,0x00B7,0x00A9,0x00A7,0x00B6,0x00BC
1:4f996a4:         ,0x00BD,0x00BE,0x00AC,0x007C,0x00AF,0x00A8,0x00B4,0x00D7
1:4f996a4:         ,0x007B,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047
1:4f996a4:         ,0x0048,0x0049,0x00AD,0x00F4,0x00F6,0x00F2,0x00F3,0x00F5
1:4f996a4:         ,0x007D,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,0x0050
1:4f996a4:         ,0x0051,0x0052,0x00B9,0x00FB,0x00FC,0x00F9,0x00FA,0x00FF
1:4f996a4:         ,0x005C,0x00F7,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058
1:4f996a4:         ,0x0059,0x005A,0x00B2,0x00D4,0x00D6,0x00D2,0x00D3,0x00D5
1:4f996a4:         ,0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037
1:4f996a4:         ,0x0038,0x0039,0x00B3,0x00DB,0x00DC,0x00D9,0x00DA,0x009F
1:4f996a4:     };
1:eac0369: 
1:4f996a4:     EbcdicCcsidManager ()
1:4f996a4:     {
1:4f996a4:         super ((byte) 0x40, // 0x40 is the ebcdic space character
1:4f996a4:                (byte) 0x4B,
1:4f996a4:                new byte[] {
1:4f996a4:         //      '0',       '1',      '2',        '3',      '4',
1:4f996a4:           (byte)0xf0,(byte)0xf1,(byte)0xf2,(byte)0xf3,(byte)0xf4,
1:4f996a4:         //      '5',       '6',       '7',       '8',      '9',
1:4f996a4:           (byte)0xf5,(byte)0xf6,(byte)0xf7,(byte)0xf8,(byte)0xf9,
1:4f996a4:         //      'A',       'B',       'C',       'D',      'E',
1:4f996a4:           (byte)0xc1,(byte)0xc2,(byte)0xc3,(byte)0xc4,(byte)0xc5,
1:4f996a4:         //      'F',       'G',       'H',      'I',       'J',
1:db9a013:           (byte)0xc6,(byte)0xc7,(byte)0xc8,(byte)0xc9,(byte)0xd1,
1:4f996a4:         //     'K',        'L',       'M',       'N',      'O',
1:4f996a4:           (byte)0xd2,(byte)0xd3,(byte)0xd4,(byte)0xd5,(byte)0xd6,
1:4f996a4:         //     'P'
1:4f996a4:           (byte)0xd7
1:4f996a4:         }
1:4f996a4:       );
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     byte[] convertFromJavaString (String sourceString)
1:4f996a4:     {
1:a1f0068:         ByteBuffer buf = ByteBuffer.allocate(sourceString.length());
1:4f996a4:         convertFromJavaString(sourceString, buf);
1:a1f0068:         return buf.array();
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     void convertFromJavaString (String sourceString, ByteBuffer buffer)
1:4f996a4:     {
1:4f996a4:         for (int i=0; i < sourceString.length(); i++) {
1:4f996a4:             char c = sourceString.charAt (i);
1:4f996a4:             if (c > 0xff)
1:a1f0068:                 buffer.put((byte) 63); // what's this ???
1:4f996a4:             else
1:a1f0068:                 buffer.put((byte) conversionArrayToEbcdic[c]);
1:4f996a4:         }
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     String convertToJavaString (byte[] sourceBytes)
1:4f996a4:     {
1:4f996a4:         int i = 0;
1:4f996a4:         char[] theChars = new char[sourceBytes.length];
1:4f996a4:         int num = 0;
1:eac0369: 
1:4f996a4:         for (i=0; i < sourceBytes.length; i++) {
1:4f996a4:             num = (sourceBytes[i] < 0) ? (sourceBytes[i] + 256) : sourceBytes[i];
1:4f996a4:             theChars[i] = (char) conversionArrayToUCS2[num];
1:4f996a4:         }
1:eac0369: 
1:4f996a4:         return new String (theChars);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     String convertToJavaString (byte[] sourceBytes, int offset, int numToConvert)
1:4f996a4:     {
1:4f996a4:         int i = 0,j = 0;
1:4f996a4:         char[] theChars = new char[numToConvert];
1:4f996a4:         int num = 0;
1:eac0369: 
1:4f996a4:         for (i = offset; i < (offset + numToConvert); i++) {
1:4f996a4:             num = (sourceBytes[i] < 0 ) ? (sourceBytes[i] + 256) : sourceBytes[i];
1:4f996a4:             theChars[j] = (char) conversionArrayToUCS2[num];
1:4f996a4:             j++;
1:4f996a4:         }
1:4f996a4:         return new String (theChars);
1:4f996a4:     }
1:eac0369: 
1:9b816c6:     int getByteLength(String str) {
1:9b816c6:         return str.length();
1:9b816c6:     }
1:9b816c6: 
10:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db9a013
/////////////////////////////////////////////////////////////////////////
1:           (byte)0xc6,(byte)0xc7,(byte)0xc8,(byte)0xc9,(byte)0xd1,
commit:a1f0068
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		ByteBuffer buf = ByteBuffer.allocate(sourceString.length());
0: 		convertFromUCS2(sourceString, buf);
1: 		return buf.array();
0: 	void convertFromUCS2 (String sourceString, ByteBuffer buffer)
1: 				buffer.put((byte) 63); // what's this ???
1: 				buffer.put((byte) conversionArrayToEbcdic[c]);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     private static final int[] conversionArrayToEbcdic = {
1:         0x0000,0x0001,0x0002,0x0003,0x0037,0x002d,0x002e,0x002f
1:         ,0x0016,0x0005,0x0025,0x000b,0x000c,0x000d,0x000e,0x000f
1:         ,0x0010,0x0011,0x0012,0x0013,0x003c,0x003d,0x0032,0x0026
1:         ,0x0018,0x0019,0x003f,0x0027,0x001c,0x001d,0x001e,0x001f
1:         ,0x0040,0x004f,0x007f,0x007b,0x005b,0x006c,0x0050,0x007d
1:         ,0x004d,0x005d,0x005c,0x004e,0x006b,0x0060,0x004b,0x0061
1:         ,0x00f0,0x00f1,0x00f2,0x00f3,0x00f4,0x00f5,0x00f6,0x00f7
1:         ,0x00f8,0x00f9,0x007a,0x005e,0x004c,0x007e,0x006e,0x006f
1:         ,0x007c,0x00c1,0x00c2,0x00c3,0x00c4,0x00c5,0x00c6,0x00c7
1:         ,0x00c8,0x00c9,0x00d1,0x00d2,0x00d3,0x00d4,0x00d5,0x00d6
1:         ,0x00d7,0x00d8,0x00d9,0x00e2,0x00e3,0x00e4,0x00e5,0x00e6
1:         ,0x00e7,0x00e8,0x00e9,0x004a,0x00e0,0x005a,0x005f,0x006d
1:         ,0x0079,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087
1:         ,0x0088,0x0089,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096
1:         ,0x0097,0x0098,0x0099,0x00a2,0x00a3,0x00a4,0x00a5,0x00a6
1:         ,0x00a7,0x00a8,0x00a9,0x00c0,0x00bb,0x00d0,0x00a1,0x0007
1:         ,0x0020,0x0021,0x0022,0x0023,0x0024,0x0015,0x0006,0x0017
1:         ,0x0028,0x0029,0x002a,0x002b,0x002c,0x0009,0x000a,0x001b
1:         ,0x0030,0x0031,0x001a,0x0033,0x0034,0x0035,0x0036,0x0008
1:         ,0x0038,0x0039,0x003a,0x003b,0x0004,0x0014,0x003e,0x00ff
1:         ,0x0041,0x00aa,0x00b0,0x00b1,0x009f,0x00b2,0x006a,0x00b5
1:         ,0x00bd,0x00b4,0x009a,0x008a,0x00ba,0x00ca,0x00af,0x00bc
1:         ,0x0090,0x008f,0x00ea,0x00fa,0x00be,0x00a0,0x00b6,0x00b3
1:         ,0x009d,0x00da,0x009b,0x008b,0x00b7,0x00b8,0x00b9,0x00ab
1:         ,0x0064,0x0065,0x0062,0x0066,0x0063,0x0067,0x009e,0x0068
1:         ,0x0074,0x0071,0x0072,0x0073,0x0078,0x0075,0x0076,0x0077
1:         ,0x00ac,0x0069,0x00ed,0x00ee,0x00eb,0x00ef,0x00ec,0x00bf
1:         ,0x0080,0x00fd,0x00fe,0x00fb,0x00fc,0x00ad,0x00ae,0x0059
1:         ,0x0044,0x0045,0x0042,0x0046,0x0043,0x0047,0x009c,0x0048
1:         ,0x0054,0x0051,0x0052,0x0053,0x0058,0x0055,0x0056,0x0057
1:         ,0x008c,0x0049,0x00cd,0x00ce,0x00cb,0x00cf,0x00cc,0x00e1
1:         ,0x0070,0x00dd,0x00de,0x00db,0x00dc,0x008d,0x008e,0x00df
1:     };
1:     private static final int[] conversionArrayToUCS2 = {
1:         0x0000,0x0001,0x0002,0x0003,0x009C,0x0009,0x0086,0x007F
1:         ,0x0097,0x008D,0x008E,0x000B,0x000C,0x000D,0x000E,0x000F
1:         ,0x0010,0x0011,0x0012,0x0013,0x009D,0x0085,0x0008,0x0087
1:         ,0x0018,0x0019,0x0092,0x008F,0x001C,0x001D,0x001E,0x001F
1:         ,0x0080,0x0081,0x0082,0x0083,0x0084,0x000A,0x0017,0x001B
1:         ,0x0088,0x0089,0x008A,0x008B,0x008C,0x0005,0x0006,0x0007
1:         ,0x0090,0x0091,0x0016,0x0093,0x0094,0x0095,0x0096,0x0004
1:         ,0x0098,0x0099,0x009A,0x009B,0x0014,0x0015,0x009E,0x001A
1:         ,0x0020,0x00A0,0x00E2,0x00E4,0x00E0,0x00E1,0x00E3,0x00E5
1:         ,0x00E7,0x00F1,0x005B,0x002E,0x003C,0x0028,0x002B,0x0021
1:         ,0x0026,0x00E9,0x00EA,0x00EB,0x00E8,0x00ED,0x00EE,0x00EF
1:         ,0x00EC,0x00DF,0x005D,0x0024,0x002A,0x0029,0x003B,0x005E
1:         ,0x002D,0x002F,0x00C2,0x00C4,0x00C0,0x00C1,0x00C3,0x00C5
1:         ,0x00C7,0x00D1,0x00A6,0x002C,0x0025,0x005F,0x003E,0x003F
1:         ,0x00F8,0x00C9,0x00CA,0x00CB,0x00C8,0x00CD,0x00CE,0x00CF
1:         ,0x00CC,0x0060,0x003A,0x0023,0x0040,0x0027,0x003D,0x0022
1:         ,0x00D8,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067
1:         ,0x0068,0x0069,0x00AB,0x00BB,0x00F0,0x00FD,0x00FE,0x00B1
1:         ,0x00B0,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,0x0070
1:         ,0x0071,0x0072,0x00AA,0x00BA,0x00E6,0x00B8,0x00C6,0x00A4
1:         ,0x00B5,0x007E,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078
1:         ,0x0079,0x007A,0x00A1,0x00BF,0x00D0,0x00DD,0x00DE,0x00AE
1:         ,0x00A2,0x00A3,0x00A5,0x00B7,0x00A9,0x00A7,0x00B6,0x00BC
1:         ,0x00BD,0x00BE,0x00AC,0x007C,0x00AF,0x00A8,0x00B4,0x00D7
1:         ,0x007B,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047
1:         ,0x0048,0x0049,0x00AD,0x00F4,0x00F6,0x00F2,0x00F3,0x00F5
1:         ,0x007D,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,0x0050
1:         ,0x0051,0x0052,0x00B9,0x00FB,0x00FC,0x00F9,0x00FA,0x00FF
1:         ,0x005C,0x00F7,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058
1:         ,0x0059,0x005A,0x00B2,0x00D4,0x00D6,0x00D2,0x00D3,0x00D5
1:         ,0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037
1:         ,0x0038,0x0039,0x00B3,0x00DB,0x00DC,0x00D9,0x00DA,0x009F
1:     };
1:     EbcdicCcsidManager ()
1:     {
1:         super ((byte) 0x40, // 0x40 is the ebcdic space character
1:                (byte) 0x4B,
1:                new byte[] {
1:         //      '0',       '1',      '2',        '3',      '4',
1:           (byte)0xf0,(byte)0xf1,(byte)0xf2,(byte)0xf3,(byte)0xf4,
1:         //      '5',       '6',       '7',       '8',      '9',
1:           (byte)0xf5,(byte)0xf6,(byte)0xf7,(byte)0xf8,(byte)0xf9,
1:         //      'A',       'B',       'C',       'D',      'E',
1:           (byte)0xc1,(byte)0xc2,(byte)0xc3,(byte)0xc4,(byte)0xc5,
1:         //      'F',       'G',       'H',      'I',       'J',
0:             (byte)0xc6,(byte)0xc7,(byte)0xc8,(byte)0xc9,(byte)0xd1,
1:         //     'K',        'L',       'M',       'N',      'O',
1:           (byte)0xd2,(byte)0xd3,(byte)0xd4,(byte)0xd5,(byte)0xd6,
1:         //     'P'
1:           (byte)0xd7
1:         }
1:       );
1:     }
1:     byte[] convertFromJavaString (String sourceString)
1:     {
0:         ByteBuffer buf = ByteBuffer.allocate(sourceString.length());
1:         convertFromJavaString(sourceString, buf);
0:         return buf.array();
1:     }
1:     void convertFromJavaString (String sourceString, ByteBuffer buffer)
1:     {
1:         for (int i=0; i < sourceString.length(); i++) {
1:             char c = sourceString.charAt (i);
1:             if (c > 0xff)
0:                 buffer.put((byte) 63); // what's this ???
1:             else
0:                 buffer.put((byte) conversionArrayToEbcdic[c]);
1:         }
1:     }
1:     String convertToJavaString (byte[] sourceBytes)
1:     {
1:         int i = 0;
1:         char[] theChars = new char[sourceBytes.length];
1:         int num = 0;
1:         for (i=0; i < sourceBytes.length; i++) {
1:             num = (sourceBytes[i] < 0) ? (sourceBytes[i] + 256) : sourceBytes[i];
1:             theChars[i] = (char) conversionArrayToUCS2[num];
1:         }
1:         return new String (theChars);
1:     }
1:     String convertToJavaString (byte[] sourceBytes, int offset, int numToConvert)
1:     {
1:         int i = 0,j = 0;
1:         char[] theChars = new char[numToConvert];
1:         int num = 0;
1:         for (i = offset; i < (offset + numToConvert); i++) {
1:             num = (sourceBytes[i] < 0 ) ? (sourceBytes[i] + 256) : sourceBytes[i];
1:             theChars[j] = (char) conversionArrayToUCS2[num];
1:             j++;
1:         }
1:         return new String (theChars);
1:     }
commit:9b816c6
/////////////////////////////////////////////////////////////////////////
1:     int getByteLength(String str) {
1:         return str.length();
1:     }
1: 
commit:cdfb2d1
/////////////////////////////////////////////////////////////////////////
0: 	byte[] convertFromJavaString (String sourceString)
0: 		convertFromJavaString(sourceString, buf);
0: 	void convertFromJavaString (String sourceString, ByteBuffer buffer)
/////////////////////////////////////////////////////////////////////////
0: 	String convertToJavaString (byte[] sourceBytes)
/////////////////////////////////////////////////////////////////////////
0: 	String convertToJavaString (byte[] sourceBytes, int offset, int numToConvert)
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:1523324
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
1: class EbcdicCcsidManager extends CcsidManager
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.drda.EbcdicCcsidManager
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
0:    This program and the accompanying materials 
0:    are made available under the terms of the Common Public License v1.0
0:    which accompanies this distribution, and is available at
0:    http://www.ibm.com/developerworks/oss/CPLv1.0.htm
1: 
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
1: /**
1:  * A concrete implementation of a CcsidMgr used to convert
1:  * between Java UCS2 and Ebcdic as needed to handle character
1:  * DDM Parameters.  This implementation only supports converting
1:  * from the ASCII invariant of UNICODE to Ebcdic.  This should
1:  * be fine since this class is intended for converting
1:  * DDM Parameter data only.
1:  */
0: public class EbcdicCcsidManager extends CcsidManager
1: {
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 
0: 	private static final int[] conversionArrayToEbcdic = {
0: 		0x0000,0x0001,0x0002,0x0003,0x0037,0x002d,0x002e,0x002f
0: 		,0x0016,0x0005,0x0025,0x000b,0x000c,0x000d,0x000e,0x000f
0: 		,0x0010,0x0011,0x0012,0x0013,0x003c,0x003d,0x0032,0x0026
0: 		,0x0018,0x0019,0x003f,0x0027,0x001c,0x001d,0x001e,0x001f
0: 		,0x0040,0x004f,0x007f,0x007b,0x005b,0x006c,0x0050,0x007d
0: 		,0x004d,0x005d,0x005c,0x004e,0x006b,0x0060,0x004b,0x0061
0: 		,0x00f0,0x00f1,0x00f2,0x00f3,0x00f4,0x00f5,0x00f6,0x00f7
0: 		,0x00f8,0x00f9,0x007a,0x005e,0x004c,0x007e,0x006e,0x006f
0: 		,0x007c,0x00c1,0x00c2,0x00c3,0x00c4,0x00c5,0x00c6,0x00c7
0: 		,0x00c8,0x00c9,0x00d1,0x00d2,0x00d3,0x00d4,0x00d5,0x00d6
0: 		,0x00d7,0x00d8,0x00d9,0x00e2,0x00e3,0x00e4,0x00e5,0x00e6
0: 		,0x00e7,0x00e8,0x00e9,0x004a,0x00e0,0x005a,0x005f,0x006d
0: 		,0x0079,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087
0: 		,0x0088,0x0089,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096
0: 		,0x0097,0x0098,0x0099,0x00a2,0x00a3,0x00a4,0x00a5,0x00a6
0: 		,0x00a7,0x00a8,0x00a9,0x00c0,0x00bb,0x00d0,0x00a1,0x0007
0: 		,0x0020,0x0021,0x0022,0x0023,0x0024,0x0015,0x0006,0x0017
0: 		,0x0028,0x0029,0x002a,0x002b,0x002c,0x0009,0x000a,0x001b
0: 		,0x0030,0x0031,0x001a,0x0033,0x0034,0x0035,0x0036,0x0008
0: 		,0x0038,0x0039,0x003a,0x003b,0x0004,0x0014,0x003e,0x00ff
0: 		,0x0041,0x00aa,0x00b0,0x00b1,0x009f,0x00b2,0x006a,0x00b5
0: 		,0x00bd,0x00b4,0x009a,0x008a,0x00ba,0x00ca,0x00af,0x00bc
0: 		,0x0090,0x008f,0x00ea,0x00fa,0x00be,0x00a0,0x00b6,0x00b3
0: 		,0x009d,0x00da,0x009b,0x008b,0x00b7,0x00b8,0x00b9,0x00ab
0: 		,0x0064,0x0065,0x0062,0x0066,0x0063,0x0067,0x009e,0x0068
0: 		,0x0074,0x0071,0x0072,0x0073,0x0078,0x0075,0x0076,0x0077
0: 		,0x00ac,0x0069,0x00ed,0x00ee,0x00eb,0x00ef,0x00ec,0x00bf
0: 		,0x0080,0x00fd,0x00fe,0x00fb,0x00fc,0x00ad,0x00ae,0x0059
0: 		,0x0044,0x0045,0x0042,0x0046,0x0043,0x0047,0x009c,0x0048
0: 		,0x0054,0x0051,0x0052,0x0053,0x0058,0x0055,0x0056,0x0057
0: 		,0x008c,0x0049,0x00cd,0x00ce,0x00cb,0x00cf,0x00cc,0x00e1
0: 		,0x0070,0x00dd,0x00de,0x00db,0x00dc,0x008d,0x008e,0x00df
0: 	};
1: 
0: 	private static final int[] conversionArrayToUCS2 = {
0: 		0x0000,0x0001,0x0002,0x0003,0x009C,0x0009,0x0086,0x007F
0: 		,0x0097,0x008D,0x008E,0x000B,0x000C,0x000D,0x000E,0x000F
0: 		,0x0010,0x0011,0x0012,0x0013,0x009D,0x0085,0x0008,0x0087
0: 		,0x0018,0x0019,0x0092,0x008F,0x001C,0x001D,0x001E,0x001F
0: 		,0x0080,0x0081,0x0082,0x0083,0x0084,0x000A,0x0017,0x001B
0: 		,0x0088,0x0089,0x008A,0x008B,0x008C,0x0005,0x0006,0x0007
0: 		,0x0090,0x0091,0x0016,0x0093,0x0094,0x0095,0x0096,0x0004
0: 		,0x0098,0x0099,0x009A,0x009B,0x0014,0x0015,0x009E,0x001A
0: 		,0x0020,0x00A0,0x00E2,0x00E4,0x00E0,0x00E1,0x00E3,0x00E5
0: 		,0x00E7,0x00F1,0x005B,0x002E,0x003C,0x0028,0x002B,0x0021
0: 		,0x0026,0x00E9,0x00EA,0x00EB,0x00E8,0x00ED,0x00EE,0x00EF
0: 		,0x00EC,0x00DF,0x005D,0x0024,0x002A,0x0029,0x003B,0x005E
0: 		,0x002D,0x002F,0x00C2,0x00C4,0x00C0,0x00C1,0x00C3,0x00C5
0: 		,0x00C7,0x00D1,0x00A6,0x002C,0x0025,0x005F,0x003E,0x003F
0: 		,0x00F8,0x00C9,0x00CA,0x00CB,0x00C8,0x00CD,0x00CE,0x00CF
0: 		,0x00CC,0x0060,0x003A,0x0023,0x0040,0x0027,0x003D,0x0022
0: 		,0x00D8,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067
0: 		,0x0068,0x0069,0x00AB,0x00BB,0x00F0,0x00FD,0x00FE,0x00B1
0: 		,0x00B0,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,0x0070
0: 		,0x0071,0x0072,0x00AA,0x00BA,0x00E6,0x00B8,0x00C6,0x00A4
0: 		,0x00B5,0x007E,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078
0: 		,0x0079,0x007A,0x00A1,0x00BF,0x00D0,0x00DD,0x00DE,0x00AE
0: 		,0x00A2,0x00A3,0x00A5,0x00B7,0x00A9,0x00A7,0x00B6,0x00BC
0: 		,0x00BD,0x00BE,0x00AC,0x007C,0x00AF,0x00A8,0x00B4,0x00D7
0: 		,0x007B,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047
0: 		,0x0048,0x0049,0x00AD,0x00F4,0x00F6,0x00F2,0x00F3,0x00F5
0: 		,0x007D,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,0x0050
0: 		,0x0051,0x0052,0x00B9,0x00FB,0x00FC,0x00F9,0x00FA,0x00FF
0: 		,0x005C,0x00F7,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058
0: 		,0x0059,0x005A,0x00B2,0x00D4,0x00D6,0x00D2,0x00D3,0x00D5
0: 		,0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037
0: 		,0x0038,0x0039,0x00B3,0x00DB,0x00DC,0x00D9,0x00DA,0x009F
0: 	};
1: 
0: 	EbcdicCcsidManager ()
1: 	{
0: 		super ((byte) 0x40, // 0x40 is the ebcdic space character
0: 		       (byte) 0x4B,
0: 		       new byte[] {
0: 		//      '0',       '1',      '2',        '3',      '4',
0: 		  (byte)0xf0,(byte)0xf1,(byte)0xf2,(byte)0xf3,(byte)0xf4,
0: 		//      '5',       '6',       '7',       '8',      '9',
0: 		  (byte)0xf5,(byte)0xf6,(byte)0xf7,(byte)0xf8,(byte)0xf9,
0: 		//      'A',       'B',       'C',       'D',      'E',
0: 		  (byte)0xc1,(byte)0xc2,(byte)0xc3,(byte)0xc4,(byte)0xc5,
0: 		//      'F',       'G',       'H',      'I',       'J',
0: 	  	  (byte)0xc6,(byte)0xc7,(byte)0xc8,(byte)0xc9,(byte)0xd1,
0: 		//     'K',        'L',       'M',       'N',      'O',
0: 		  (byte)0xd2,(byte)0xd3,(byte)0xd4,(byte)0xd5,(byte)0xd6,
0: 		//     'P'
0: 		  (byte)0xd7
1: 		}
0: 	  );
1: 	}
1: 
0: 	byte[] convertFromUCS2 (String sourceString)
1: 	{
0: 		byte[] bytes = new byte[sourceString.length()];
0: 		convertFromUCS2 (sourceString, bytes, 0);
0: 		return bytes;
1: 	}
1: 
0: 	int convertFromUCS2 (String sourceString,
0: 		       byte[] buffer,
0: 		       int offset)
1: 	{
0: 		for (int i=0; i < sourceString.length(); i++) {
0: 			char c = sourceString.charAt (i);
0: 			if (c > 0xff)
0: 				buffer[offset++] = (byte) 63; // what's this ???
0: 			else
0: 				buffer[offset++] = (byte) (conversionArrayToEbcdic [c]); ;
1: 		}
1: 
0: 		return offset;
1: 	}
1: 
0: 	String convertToUCS2 (byte[] sourceBytes)
1: 	{
0: 		int i = 0;
0: 		char[] theChars = new char[sourceBytes.length];
0: 		int num = 0;
1: 
0: 		for (i=0; i < sourceBytes.length; i++) {
0: 			num = (sourceBytes[i] < 0) ? (sourceBytes[i] + 256) : sourceBytes[i];
0: 			theChars[i] = (char) conversionArrayToUCS2[num];
1: 		}
1: 
0: 		return new String (theChars);
1: 	}
1: 
0: 	String convertToUCS2 (byte[] sourceBytes, int offset, int numToConvert)
1: 	{
0: 		int i = 0,j = 0;
0: 		char[] theChars = new char[numToConvert];
0: 		int num = 0;
1: 
0: 		for (i = offset; i < (offset + numToConvert); i++) {
0: 			num = (sourceBytes[i] < 0 ) ? (sourceBytes[i] + 256) : sourceBytes[i];
0: 			theChars[j] = (char) conversionArrayToUCS2[num];
0: 			j++;
1: 		}
0: 		return new String (theChars);
1: 	}
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:    This program and the accompanying materials 
0:    are made available under the terms of the Common Public License v1.0
0:    which accompanies this distribution, and is available at
0:    http://www.ibm.com/developerworks/oss/CPLv1.0.htm
0: 
0:  */
0: 
0: package org.apache.derby.impl.drda;
0: 
0: /**
0:  * A concrete implementation of a CcsidMgr used to convert
0:  * between Java UCS2 and Ebcdic as needed to handle character
0:  * DDM Parameters.  This implementation only supports converting
0:  * from the ASCII invariant of UNICODE to Ebcdic.  This should
0:  * be fine since this class is intended for converting
0:  * DDM Parameter data only.
0:  */
0: public class EbcdicCcsidManager extends CcsidManager
0: {
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 
0: 	private static final int[] conversionArrayToEbcdic = {
0: 		0x0000,0x0001,0x0002,0x0003,0x0037,0x002d,0x002e,0x002f
0: 		,0x0016,0x0005,0x0025,0x000b,0x000c,0x000d,0x000e,0x000f
0: 		,0x0010,0x0011,0x0012,0x0013,0x003c,0x003d,0x0032,0x0026
0: 		,0x0018,0x0019,0x003f,0x0027,0x001c,0x001d,0x001e,0x001f
0: 		,0x0040,0x004f,0x007f,0x007b,0x005b,0x006c,0x0050,0x007d
0: 		,0x004d,0x005d,0x005c,0x004e,0x006b,0x0060,0x004b,0x0061
0: 		,0x00f0,0x00f1,0x00f2,0x00f3,0x00f4,0x00f5,0x00f6,0x00f7
0: 		,0x00f8,0x00f9,0x007a,0x005e,0x004c,0x007e,0x006e,0x006f
0: 		,0x007c,0x00c1,0x00c2,0x00c3,0x00c4,0x00c5,0x00c6,0x00c7
0: 		,0x00c8,0x00c9,0x00d1,0x00d2,0x00d3,0x00d4,0x00d5,0x00d6
0: 		,0x00d7,0x00d8,0x00d9,0x00e2,0x00e3,0x00e4,0x00e5,0x00e6
0: 		,0x00e7,0x00e8,0x00e9,0x004a,0x00e0,0x005a,0x005f,0x006d
0: 		,0x0079,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087
0: 		,0x0088,0x0089,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096
0: 		,0x0097,0x0098,0x0099,0x00a2,0x00a3,0x00a4,0x00a5,0x00a6
0: 		,0x00a7,0x00a8,0x00a9,0x00c0,0x00bb,0x00d0,0x00a1,0x0007
0: 		,0x0020,0x0021,0x0022,0x0023,0x0024,0x0015,0x0006,0x0017
0: 		,0x0028,0x0029,0x002a,0x002b,0x002c,0x0009,0x000a,0x001b
0: 		,0x0030,0x0031,0x001a,0x0033,0x0034,0x0035,0x0036,0x0008
0: 		,0x0038,0x0039,0x003a,0x003b,0x0004,0x0014,0x003e,0x00ff
0: 		,0x0041,0x00aa,0x00b0,0x00b1,0x009f,0x00b2,0x006a,0x00b5
0: 		,0x00bd,0x00b4,0x009a,0x008a,0x00ba,0x00ca,0x00af,0x00bc
0: 		,0x0090,0x008f,0x00ea,0x00fa,0x00be,0x00a0,0x00b6,0x00b3
0: 		,0x009d,0x00da,0x009b,0x008b,0x00b7,0x00b8,0x00b9,0x00ab
0: 		,0x0064,0x0065,0x0062,0x0066,0x0063,0x0067,0x009e,0x0068
0: 		,0x0074,0x0071,0x0072,0x0073,0x0078,0x0075,0x0076,0x0077
0: 		,0x00ac,0x0069,0x00ed,0x00ee,0x00eb,0x00ef,0x00ec,0x00bf
0: 		,0x0080,0x00fd,0x00fe,0x00fb,0x00fc,0x00ad,0x00ae,0x0059
0: 		,0x0044,0x0045,0x0042,0x0046,0x0043,0x0047,0x009c,0x0048
0: 		,0x0054,0x0051,0x0052,0x0053,0x0058,0x0055,0x0056,0x0057
0: 		,0x008c,0x0049,0x00cd,0x00ce,0x00cb,0x00cf,0x00cc,0x00e1
0: 		,0x0070,0x00dd,0x00de,0x00db,0x00dc,0x008d,0x008e,0x00df
0: 	};
0: 
0: 	private static final int[] conversionArrayToUCS2 = {
0: 		0x0000,0x0001,0x0002,0x0003,0x009C,0x0009,0x0086,0x007F
0: 		,0x0097,0x008D,0x008E,0x000B,0x000C,0x000D,0x000E,0x000F
0: 		,0x0010,0x0011,0x0012,0x0013,0x009D,0x0085,0x0008,0x0087
0: 		,0x0018,0x0019,0x0092,0x008F,0x001C,0x001D,0x001E,0x001F
0: 		,0x0080,0x0081,0x0082,0x0083,0x0084,0x000A,0x0017,0x001B
0: 		,0x0088,0x0089,0x008A,0x008B,0x008C,0x0005,0x0006,0x0007
0: 		,0x0090,0x0091,0x0016,0x0093,0x0094,0x0095,0x0096,0x0004
0: 		,0x0098,0x0099,0x009A,0x009B,0x0014,0x0015,0x009E,0x001A
0: 		,0x0020,0x00A0,0x00E2,0x00E4,0x00E0,0x00E1,0x00E3,0x00E5
0: 		,0x00E7,0x00F1,0x005B,0x002E,0x003C,0x0028,0x002B,0x0021
0: 		,0x0026,0x00E9,0x00EA,0x00EB,0x00E8,0x00ED,0x00EE,0x00EF
0: 		,0x00EC,0x00DF,0x005D,0x0024,0x002A,0x0029,0x003B,0x005E
0: 		,0x002D,0x002F,0x00C2,0x00C4,0x00C0,0x00C1,0x00C3,0x00C5
0: 		,0x00C7,0x00D1,0x00A6,0x002C,0x0025,0x005F,0x003E,0x003F
0: 		,0x00F8,0x00C9,0x00CA,0x00CB,0x00C8,0x00CD,0x00CE,0x00CF
0: 		,0x00CC,0x0060,0x003A,0x0023,0x0040,0x0027,0x003D,0x0022
0: 		,0x00D8,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067
0: 		,0x0068,0x0069,0x00AB,0x00BB,0x00F0,0x00FD,0x00FE,0x00B1
0: 		,0x00B0,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,0x0070
0: 		,0x0071,0x0072,0x00AA,0x00BA,0x00E6,0x00B8,0x00C6,0x00A4
0: 		,0x00B5,0x007E,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078
0: 		,0x0079,0x007A,0x00A1,0x00BF,0x00D0,0x00DD,0x00DE,0x00AE
0: 		,0x00A2,0x00A3,0x00A5,0x00B7,0x00A9,0x00A7,0x00B6,0x00BC
0: 		,0x00BD,0x00BE,0x00AC,0x007C,0x00AF,0x00A8,0x00B4,0x00D7
0: 		,0x007B,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047
0: 		,0x0048,0x0049,0x00AD,0x00F4,0x00F6,0x00F2,0x00F3,0x00F5
0: 		,0x007D,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,0x0050
0: 		,0x0051,0x0052,0x00B9,0x00FB,0x00FC,0x00F9,0x00FA,0x00FF
0: 		,0x005C,0x00F7,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058
0: 		,0x0059,0x005A,0x00B2,0x00D4,0x00D6,0x00D2,0x00D3,0x00D5
0: 		,0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037
0: 		,0x0038,0x0039,0x00B3,0x00DB,0x00DC,0x00D9,0x00DA,0x009F
0: 	};
0: 
0: 	EbcdicCcsidManager ()
0: 	{
0: 		super ((byte) 0x40, // 0x40 is the ebcdic space character
0: 		       (byte) 0x4B,
0: 		       new byte[] {
0: 		//      '0',       '1',      '2',        '3',      '4',
0: 		  (byte)0xf0,(byte)0xf1,(byte)0xf2,(byte)0xf3,(byte)0xf4,
0: 		//      '5',       '6',       '7',       '8',      '9',
0: 		  (byte)0xf5,(byte)0xf6,(byte)0xf7,(byte)0xf8,(byte)0xf9,
0: 		//      'A',       'B',       'C',       'D',      'E',
0: 		  (byte)0xc1,(byte)0xc2,(byte)0xc3,(byte)0xc4,(byte)0xc5,
0: 		//      'F',       'G',       'H',      'I',       'J',
0: 	  	  (byte)0xc6,(byte)0xc7,(byte)0xc8,(byte)0xc9,(byte)0xd1,
0: 		//     'K',        'L',       'M',       'N',      'O',
0: 		  (byte)0xd2,(byte)0xd3,(byte)0xd4,(byte)0xd5,(byte)0xd6,
0: 		//     'P'
0: 		  (byte)0xd7
0: 		}
0: 	  );
0: 	}
0: 
0: 	byte[] convertFromUCS2 (String sourceString)
0: 	{
0: 		byte[] bytes = new byte[sourceString.length()];
0: 		convertFromUCS2 (sourceString, bytes, 0);
0: 		return bytes;
0: 	}
0: 
0: 	int convertFromUCS2 (String sourceString,
0: 		       byte[] buffer,
0: 		       int offset)
0: 	{
0: 		for (int i=0; i < sourceString.length(); i++) {
0: 			char c = sourceString.charAt (i);
0: 			if (c > 0xff)
0: 				buffer[offset++] = (byte) 63; // what's this ???
0: 			else
0: 				buffer[offset++] = (byte) (conversionArrayToEbcdic [c]); ;
0: 		}
0: 
0: 		return offset;
0: 	}
0: 
0: 	String convertToUCS2 (byte[] sourceBytes)
0: 	{
0: 		int i = 0;
0: 		char[] theChars = new char[sourceBytes.length];
0: 		int num = 0;
0: 
0: 		for (i=0; i < sourceBytes.length; i++) {
0: 			num = (sourceBytes[i] < 0) ? (sourceBytes[i] + 256) : sourceBytes[i];
0: 			theChars[i] = (char) conversionArrayToUCS2[num];
0: 		}
0: 
0: 		return new String (theChars);
0: 	}
0: 
0: 	String convertToUCS2 (byte[] sourceBytes, int offset, int numToConvert)
0: 	{
0: 		int i = 0,j = 0;
0: 		char[] theChars = new char[numToConvert];
0: 		int num = 0;
0: 
0: 		for (i = offset; i < (offset + numToConvert); i++) {
0: 			num = (sourceBytes[i] < 0 ) ? (sourceBytes[i] + 256) : sourceBytes[i];
0: 			theChars[j] = (char) conversionArrayToUCS2[num];
0: 			j++;
0: 		}
0: 		return new String (theChars);
0: 	}
0: 
0: }
============================================================================