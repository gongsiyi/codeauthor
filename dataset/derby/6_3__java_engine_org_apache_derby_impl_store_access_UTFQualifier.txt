1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.UTFQualifier
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: 
2:eac0369: /**
1:eac0369: */
1:eac0369: public class UTFQualifier implements Qualifier
1:eac0369: {
1:eac0369:     private UTF      value;
1:eac0369: 	private int		 columnId;
1:eac0369: 
1:eac0369: 	public UTFQualifier(int columnId, String value) {
1:eac0369: 
1:eac0369: 		this.columnId = columnId;
1:eac0369: 		this.value = new UTF(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Qualifier interface
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** Get the id of the column to be qualified. **/
1:eac0369: 	public int getColumnId() {
1:eac0369: 		return columnId;
1:eac0369: 	}
1:eac0369: 
1:8758a25: 	/**
1:eac0369: 	 * Get the value that the column is to be compared to.
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getOrderable() {
1:eac0369: 		return value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Get the operator to use in the comparison. 
2:eac0369:      *
1:eac0369:      *  @see DataValueDescriptor#compare
1:eac0369:      **/
1:eac0369: 	public int getOperator() {
1:eac0369: 		return DataValueDescriptor.ORDER_OP_EQUALS;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:8758a25:      *  Determine if the result from the compare operation is to be negated.  
1:8758a25:      *  <p>
1:8758a25:      *  If true then only rows which fail the compare operation will qualify.
1:eac0369:      *
1:eac0369:      *  @see DataValueDescriptor#compare
1:eac0369:      **/
1:eac0369: 	public boolean negateCompareResult() {
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369:      *  
1:eac0369:      *  @see Qualifier#getOrderedNulls
1:eac0369:      **/
1:eac0369:     public boolean getOrderedNulls() {
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Get the getOrderedNulls argument to use in the comparison.
1:eac0369:      *  
1:eac0369:      *  @see DataValueDescriptor#compare
1:eac0369:      **/
1:eac0369:     public boolean getUnknownRV() {
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Clear the DataValueDescriptor cache, if one exists.
1:eac0369: 	 *  (The DataValueDescriptor can be 1 of 3 types:
1:eac0369: 	 *		o  VARIANT		  - cannot be cached as its value can 
1:eac0369: 	 *							vary within a scan
1:eac0369: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
1:eac0369: 	 *							value will not change within a scan
1:eac0369: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
1:eac0369: 	 *							as its value will never change
1:eac0369: 	 *		o  CONSTANT	      - can be cached across executions
1:eac0369:      *  
1:eac0369:      *  @see Qualifier#getUnknownRV
1:eac0369: 	 */
1:eac0369: 	public void clearOrderableCache()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * This method reinitializes all the state of
1:eac0369: 	 * the Qualifier.  It is used to distinguish between
1:eac0369: 	 * resetting something that is query invariant
1:eac0369: 	 * and something that is constant over every
1:eac0369: 	 * execution of a query.  Basically, clearOrderableCache()
1:eac0369: 	 * will only clear out its cache if it is a VARIANT
1:eac0369: 	 * or SCAN_INVARIANT value.  However, each time a
1:eac0369: 	 * query is executed, the QUERY_INVARIANT qualifiers need
1:eac0369: 	 * to be reset.
1:eac0369: 	 */
1:eac0369: 	public void reinitialize()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:8758a25
/////////////////////////////////////////////////////////////////////////
1: 	/** 
1:      *  Determine if the result from the compare operation is to be negated.  
1:      *  <p>
1:      *  If true then only rows which fail the compare operation will qualify.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.UTFQualifier
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.store.access.Qualifier;
1: 
1: /**
1: */
1: public class UTFQualifier implements Qualifier
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     private UTF      value;
1: 	private int		 columnId;
1: 
1: 	public UTFQualifier(int columnId, String value) {
1: 
1: 		this.columnId = columnId;
1: 		this.value = new UTF(value);
1: 	}
1: 
1: 	/*
1: 	** Qualifier interface
1: 	*/
1: 
1: 	/** Get the id of the column to be qualified. **/
1: 	public int getColumnId() {
1: 		return columnId;
1: 	}
1: 
1: 	/**
1: 	 * Get the value that the column is to be compared to.
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public DataValueDescriptor getOrderable() {
1: 		return value;
1: 	}
1: 
1: 	/** Get the operator to use in the comparison. 
1:      *
1:      *  @see DataValueDescriptor#compare
1:      **/
1: 	public int getOperator() {
1: 		return DataValueDescriptor.ORDER_OP_EQUALS;
1: 
1: 	}
1: 
0: 	/** Should the result from the compare operation be negated?  If true
0:      *  then only rows which fail the compare operation will qualify.
1:      *
1:      *  @see DataValueDescriptor#compare
1:      **/
1: 	public boolean negateCompareResult() {
1: 		return false;
1: 	}
1: 
1: 	/** 
1:      *  
1:      *  @see Qualifier#getOrderedNulls
1:      **/
1:     public boolean getOrderedNulls() {
1: 		return false;
1: 	}
1: 
1: 	/** Get the getOrderedNulls argument to use in the comparison.
1:      *  
1:      *  @see DataValueDescriptor#compare
1:      **/
1:     public boolean getUnknownRV() {
1: 		return false;
1: 	}
1: 
1: 	/** Clear the DataValueDescriptor cache, if one exists.
1: 	 *  (The DataValueDescriptor can be 1 of 3 types:
1: 	 *		o  VARIANT		  - cannot be cached as its value can 
1: 	 *							vary within a scan
1: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
1: 	 *							value will not change within a scan
1: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
1: 	 *							as its value will never change
1: 	 *		o  CONSTANT	      - can be cached across executions
1:      *  
1:      *  @see Qualifier#getUnknownRV
1: 	 */
1: 	public void clearOrderableCache()
1: 	{
1: 	}
1: 
1: 	/** 
1: 	 * This method reinitializes all the state of
1: 	 * the Qualifier.  It is used to distinguish between
1: 	 * resetting something that is query invariant
1: 	 * and something that is constant over every
1: 	 * execution of a query.  Basically, clearOrderableCache()
1: 	 * will only clear out its cache if it is a VARIANT
1: 	 * or SCAN_INVARIANT value.  However, each time a
1: 	 * query is executed, the QUERY_INVARIANT qualifiers need
1: 	 * to be reset.
1: 	 */
1: 	public void reinitialize()
1: 	{
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: /**
0: */
0: public class UTFQualifier implements Qualifier
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     private UTF      value;
0: 	private int		 columnId;
0: 
0: 	public UTFQualifier(int columnId, String value) {
0: 
0: 		this.columnId = columnId;
0: 		this.value = new UTF(value);
0: 	}
0: 
0: 	/*
0: 	** Qualifier interface
0: 	*/
0: 
0: 	/** Get the id of the column to be qualified. **/
0: 	public int getColumnId() {
0: 		return columnId;
0: 	}
0: 
0: 	/**
0: 	 * Get the value that the column is to be compared to.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public DataValueDescriptor getOrderable() {
0: 		return value;
0: 	}
0: 
0: 	/** Get the operator to use in the comparison. 
0:      *
0:      *  @see DataValueDescriptor#compare
0:      **/
0: 	public int getOperator() {
0: 		return DataValueDescriptor.ORDER_OP_EQUALS;
0: 
0: 	}
0: 
0: 	/** Should the result from the compare operation be negated?  If true
0:      *  then only rows which fail the compare operation will qualify.
0:      *
0:      *  @see DataValueDescriptor#compare
0:      **/
0: 	public boolean negateCompareResult() {
0: 		return false;
0: 	}
0: 
0: 	/** 
0:      *  
0:      *  @see Qualifier#getOrderedNulls
0:      **/
0:     public boolean getOrderedNulls() {
0: 		return false;
0: 	}
0: 
0: 	/** Get the getOrderedNulls argument to use in the comparison.
0:      *  
0:      *  @see DataValueDescriptor#compare
0:      **/
0:     public boolean getUnknownRV() {
0: 		return false;
0: 	}
0: 
0: 	/** Clear the DataValueDescriptor cache, if one exists.
0: 	 *  (The DataValueDescriptor can be 1 of 3 types:
0: 	 *		o  VARIANT		  - cannot be cached as its value can 
0: 	 *							vary within a scan
0: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
0: 	 *							value will not change within a scan
0: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
0: 	 *							as its value will never change
0: 	 *		o  CONSTANT	      - can be cached across executions
0:      *  
0:      *  @see Qualifier#getUnknownRV
0: 	 */
0: 	public void clearOrderableCache()
0: 	{
0: 	}
0: 
0: 	/** 
0: 	 * This method reinitializes all the state of
0: 	 * the Qualifier.  It is used to distinguish between
0: 	 * resetting something that is query invariant
0: 	 * and something that is constant over every
0: 	 * execution of a query.  Basically, clearOrderableCache()
0: 	 * will only clear out its cache if it is a VARIANT
0: 	 * or SCAN_INVARIANT value.  However, each time a
0: 	 * query is executed, the QUERY_INVARIANT qualifiers need
0: 	 * to be reset.
0: 	 */
0: 	public void reinitialize()
0: 	{
0: 	}
0: }
============================================================================