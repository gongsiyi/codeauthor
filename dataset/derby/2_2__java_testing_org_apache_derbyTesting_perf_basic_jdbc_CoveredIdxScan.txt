1:c3bf4ea: /*
2:c3bf4ea: 
1:c3bf4ea:  Derby - Class org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan
1:c3bf4ea: 
1:c3bf4ea:  Licensed to the Apache Software Foundation (ASF) under one or more
1:c3bf4ea:  contributor license agreements.  See the NOTICE file distributed with
1:c3bf4ea:  this work for additional information regarding copyright ownership.
1:c3bf4ea:  The ASF licenses this file to You under the Apache License, Version 2.0
1:c3bf4ea:  (the "License"); you may not use this file except in compliance with
1:c3bf4ea:  the License.  You may obtain a copy of the License at
1:c3bf4ea: 
1:c3bf4ea:  http://www.apache.org/licenses/LICENSE-2.0
1:c3bf4ea: 
1:c3bf4ea:  Unless required by applicable law or agreed to in writing, software
1:c3bf4ea:  distributed under the License is distributed on an "AS IS" BASIS,
1:c3bf4ea:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3bf4ea:  See the License for the specific language governing permissions and
1:c3bf4ea:  limitations under the License.
1:c3bf4ea: 
1:c3bf4ea:  */
1:c3bf4ea: package org.apache.derbyTesting.perf.basic.jdbc;
1:c3bf4ea: 
1:c3bf4ea: 
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:c3bf4ea: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c3bf4ea: 
1:c3bf4ea: /**
1:c3bf4ea:  * Index scan tests.
1:c3bf4ea:  *
1:c3bf4ea:  */
1:c3bf4ea: public class CoveredIdxScan extends HeapScan {
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * @return suite of tests
1:c3bf4ea:      */
1:c3bf4ea:     public static Test suite()
1:c3bf4ea:     {
1:1ae02c9:         BaseTestSuite scan = new BaseTestSuite("CoveredIdxScanTests");
1:c3bf4ea:         int iterations = 700, repeats = 4;
1:c3bf4ea: 
1:c3bf4ea:         scan.addTest(new CoveredIdxScan("ScanCoveredIdxInt",iterations,repeats));
1:c3bf4ea: 
1:c3bf4ea:         return new BaseLoad100IdxTestSetup(scan,rowcount*2,tableName);
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Constructor
1:c3bf4ea:      * @param name testname
1:c3bf4ea:      * @param iterations iterations for the test to measure
1:c3bf4ea:      * @param repeats number of times to repeat the test
1:c3bf4ea:      */
1:c3bf4ea:     public CoveredIdxScan(String name,int iterations, int repeats)
1:c3bf4ea:     {
1:c3bf4ea:         super(name,iterations,repeats);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Do the necessary setup for the test ,prepare the statement
1:c3bf4ea:      */
1:c3bf4ea:     public void setUp() throws Exception {
1:c3bf4ea: 
1:f18f8b0:         select = prepareStatement("SELECT i1 FROM " + tableName +
1:c3bf4ea:         " WHERE i1 > ? and i1 <= ?");
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Override initializeConnection to set the autocommit to false
1:c3bf4ea:      */
1:c3bf4ea:     public void initializeConnection(Connection conn)
1:c3bf4ea:     throws SQLException
1:c3bf4ea:     {
1:c3bf4ea:         conn.setAutoCommit(false);
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * This test simply tests a covered index scan and retrieves an int column
1:c3bf4ea:      * Scan starts from 1/4 into the data set and set to end 3/4 into the
1:c3bf4ea:      * dataset
1:c3bf4ea:      * @throws Exception
1:c3bf4ea:      */
1:c3bf4ea:     public void ScanCoveredIdxInt() throws Exception
1:c3bf4ea:     {
1:c3bf4ea: 
1:c3bf4ea:         // set begin scan to start 1/4 into the data set.
1:c3bf4ea:         select.setInt(1, ((rowcount * 2) / 4));
1:c3bf4ea: 
1:c3bf4ea:         // set end scan to end 3/4 into the data set.
1:c3bf4ea:         select.setInt(2, (((rowcount * 2) / 4) * 3));
1:c3bf4ea: 
1:c3bf4ea:         ResultSet rs = select.executeQuery();
1:c3bf4ea: 
1:c3bf4ea:         int actualCount = 0;
1:c3bf4ea:         int i = 0;
1:c3bf4ea:         while (rs.next())
1:c3bf4ea:         {
1:c3bf4ea:             i = rs.getInt(1);
1:c3bf4ea:             actualCount++;
1:c3bf4ea:         }
1:c3bf4ea:         assertEquals(rowcount,actualCount);
1:c3bf4ea:         rs.close();
1:f18f8b0:         commit();
1:c3bf4ea:     }
1:c3bf4ea: 
1:c3bf4ea: 
1:c3bf4ea:     /**
1:c3bf4ea:      * Cleanup - close resources opened in this test.
1:c3bf4ea:      */
1:c3bf4ea:     public void tearDown() throws Exception {
1:c3bf4ea:         super.tearDown();
1:c3bf4ea:     }
1:c3bf4ea: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite scan = new BaseTestSuite("CoveredIdxScanTests");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f18f8b0
/////////////////////////////////////////////////////////////////////////
1:         select = prepareStatement("SELECT i1 FROM " + tableName +
/////////////////////////////////////////////////////////////////////////
1:         commit();
commit:c3bf4ea
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.perf.basic.jdbc;
1: 
1: 
0: import java.sql.*;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * Index scan tests.
1:  *
1:  */
1: public class CoveredIdxScan extends HeapScan {
1: 
1:     /**
1:      * @return suite of tests
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite scan = new TestSuite("CoveredIdxScanTests");
1:         int iterations = 700, repeats = 4;
1: 
1:         scan.addTest(new CoveredIdxScan("ScanCoveredIdxInt",iterations,repeats));
1: 
1:         return new BaseLoad100IdxTestSetup(scan,rowcount*2,tableName);
1: 
1: 
1:     }
1: 
1:     /**
1:      * Constructor
1:      * @param name testname
1:      * @param iterations iterations for the test to measure
1:      * @param repeats number of times to repeat the test
1:      */
1:     public CoveredIdxScan(String name,int iterations, int repeats)
1:     {
1:         super(name,iterations,repeats);
1:     }
1: 
1:     /**
1:      * Do the necessary setup for the test ,prepare the statement
1:      */
1:     public void setUp() throws Exception {
1: 
0:         select = openDefaultConnection().prepareStatement("SELECT i1 FROM "+tableName +
1:         " WHERE i1 > ? and i1 <= ?");
1:     }
1: 
1:     /**
1:      * Override initializeConnection to set the autocommit to false
1:      */
1:     public void initializeConnection(Connection conn)
1:     throws SQLException
1:     {
1:         conn.setAutoCommit(false);
1:     }
1: 
1: 
1:     /**
1:      * This test simply tests a covered index scan and retrieves an int column
1:      * Scan starts from 1/4 into the data set and set to end 3/4 into the
1:      * dataset
1:      * @throws Exception
1:      */
1:     public void ScanCoveredIdxInt() throws Exception
1:     {
1: 
1:         // set begin scan to start 1/4 into the data set.
1:         select.setInt(1, ((rowcount * 2) / 4));
1: 
1:         // set end scan to end 3/4 into the data set.
1:         select.setInt(2, (((rowcount * 2) / 4) * 3));
1: 
1:         ResultSet rs = select.executeQuery();
1: 
1:         int actualCount = 0;
1:         int i = 0;
1:         while (rs.next())
1:         {
1:             i = rs.getInt(1);
1:             actualCount++;
1:         }
1:         assertEquals(rowcount,actualCount);
0:         getConnection().commit();
1:         rs.close();
1:     }
1: 
1: 
1:     /**
1:      * Cleanup - close resources opened in this test.
1:      */
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: }
============================================================================