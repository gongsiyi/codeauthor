1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.util.Formatters
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
34:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.util;
1:67614ad: 
1:67614ad: 
1:67614ad: public class Formatters {
1:67614ad: 
1:67614ad: 	static final char[] hexDigits = { '0', '1', '2', '3',
1:67614ad: 									  '4', '5', '6', '7',
1:67614ad: 									  '8', '9', 'A', 'B',
1:67614ad: 									  'C', 'D', 'E', 'F' };
1:67614ad: 
1:67614ad: 	/** This method converts the non-ASCII characters in the input
1:67614ad: 	 *  parameter to unicode escape sequences.
1:67614ad: 	 * @param in    String to format
1:67614ad: 	 * @return String containing unicode escape sequences for non-ASCII chars
1:67614ad: 	 */
1:67614ad: 	public static String format(String in) {
1:67614ad: 		if (in == null)
1:67614ad: 			return null;
1:67614ad: 
1:67614ad: 		StringBuffer out = new StringBuffer(in.length());
1:67614ad: 		char hexValue[] = new char[4];
1:67614ad: 
1:67614ad: 		for (int i = 0; i < in.length(); i++) {
1:67614ad: 			char inChar = in.charAt(i);
1:67614ad: 
1:67614ad: 			if (inChar < 128) {
1:67614ad: 				out.append(inChar);
1:67614ad: 			} else {
1:67614ad: 				out.append("\\u");
1:67614ad: 
1:67614ad: 				int number = (int) inChar;
1:67614ad: 
1:67614ad: 				int digit = number % 16;
1:67614ad: 
1:67614ad: 				hexValue[3] = hexDigits[digit];
1:67614ad: 
1:67614ad: 				number /= 16;
1:67614ad: 
1:67614ad: 				digit = number % 16;
1:67614ad: 
1:67614ad: 				hexValue[2] = hexDigits[digit];
1:67614ad: 
1:67614ad: 				number /= 16;
1:67614ad: 
1:67614ad: 				digit = number %16;
1:67614ad: 
1:67614ad: 				hexValue[1] = hexDigits[digit];
1:67614ad: 
1:67614ad: 				number /= 16;
1:67614ad: 
1:67614ad: 				digit = number % 16;
1:67614ad: 
1:67614ad: 				hexValue[0] = hexDigits[digit];
1:67614ad: 
1:67614ad: 				out.append(hexValue);
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		return out.toString();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 
2:67614ad: 	/**
1:67614ad: 	 * repeatChar is used to create strings of varying lengths.
1:67614ad: 	 * called from various tests to test edge cases and such.
1:67614ad: 	 *
1:67614ad: 	 * @param c             character to repeat
1:67614ad: 	 * @param repeatCount   Number of times to repeat character
1:67614ad: 	 * @return              String of repeatCount characters c
1:67614ad: 	 */
1:67614ad:    public static String repeatChar(String c, int repeatCount)
1:67614ad:    {
1:67614ad: 	   char ch = c.charAt(0);
1:67614ad: 
1:67614ad: 	   char[] chArray = new char[repeatCount];
1:67614ad: 	   for (int i = 0; i < repeatCount; i++)
1:67614ad: 	   {
1:67614ad: 		   chArray[i] = ch;
1:67614ad: 	   }
1:67614ad: 
1:67614ad: 	   return new String(chArray);
1:67614ad: 
1:67614ad:    }
1:67614ad: 
1:67614ad: 	/**
1:67614ad: 	 * Pads out a string to the specified size
1:67614ad: 	 *
1:67614ad: 	 * @param oldValue value to be padded
1:67614ad: 	 * @param size     size of resulting string
1:67614ad: 	 * @return oldValue padded with spaces to the specified size
1:67614ad: 	 */
1:67614ad: 	public static String padString(String oldValue, int size)
1:67614ad: 	{
1:67614ad: 		String newValue = oldValue;
1:67614ad: 		if (newValue != null)
1:67614ad: 		{
1:67614ad: 			char [] newCharArr = new char[size];					
1:67614ad: 			oldValue.getChars(0,oldValue.length(),newCharArr,0);
1:67614ad: 			java.util.Arrays.fill(newCharArr,oldValue.length(),
1:67614ad: 								  newCharArr.length -1, ' ');
1:67614ad: 			newValue = new String (newCharArr);
1:67614ad: 		}
1:67614ad: 			
1:67614ad: 		return newValue;
1:67614ad: 	}
1:67614ad: 
1:67614ad: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.util
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: 
1: public class Formatters { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	static final char[] hexDigits = { '0', '1', '2', '3',
1: 									  '4', '5', '6', '7',
1: 									  '8', '9', 'A', 'B',
1: 									  'C', 'D', 'E', 'F' };
1: 
1: 	/** This method converts the non-ASCII characters in the input
1: 	 *  parameter to unicode escape sequences.
1: 	 * @param in    String to format
1: 	 * @return String containing unicode escape sequences for non-ASCII chars
1: 	 */
1: 	public static String format(String in) {
1: 		if (in == null)
1: 			return null;
1: 
1: 		StringBuffer out = new StringBuffer(in.length());
1: 		char hexValue[] = new char[4];
1: 
1: 		for (int i = 0; i < in.length(); i++) {
1: 			char inChar = in.charAt(i);
1: 
1: 			if (inChar < 128) {
1: 				out.append(inChar);
1: 			} else {
1: 				out.append("\\u");
1: 
1: 				int number = (int) inChar;
1: 
1: 				int digit = number % 16;
1: 
1: 				hexValue[3] = hexDigits[digit];
1: 
1: 				number /= 16;
1: 
1: 				digit = number % 16;
1: 
1: 				hexValue[2] = hexDigits[digit];
1: 
1: 				number /= 16;
1: 
1: 				digit = number %16;
1: 
1: 				hexValue[1] = hexDigits[digit];
1: 
1: 				number /= 16;
1: 
1: 				digit = number % 16;
1: 
1: 				hexValue[0] = hexDigits[digit];
1: 
1: 				out.append(hexValue);
1: 			}
1: 		}
1: 
1: 		return out.toString();
1: 	}
1: 
1: 
1: 	/**
1: 	 * repeatChar is used to create strings of varying lengths.
1: 	 * called from various tests to test edge cases and such.
1: 	 *
1: 	 * @param c             character to repeat
1: 	 * @param repeatCount   Number of times to repeat character
1: 	 * @return              String of repeatCount characters c
1: 	 */
1:    public static String repeatChar(String c, int repeatCount)
1:    {
1: 	   char ch = c.charAt(0);
1: 
1: 	   char[] chArray = new char[repeatCount];
1: 	   for (int i = 0; i < repeatCount; i++)
1: 	   {
1: 		   chArray[i] = ch;
1: 	   }
1: 
1: 	   return new String(chArray);
1: 
1:    }
1: 
1: 	/**
1: 	 * Pads out a string to the specified size
1: 	 *
1: 	 * @param oldValue value to be padded
1: 	 * @param size     size of resulting string
1: 	 * @return oldValue padded with spaces to the specified size
1: 	 */
1: 	public static String padString(String oldValue, int size)
1: 	{
1: 		String newValue = oldValue;
1: 		if (newValue != null)
1: 		{
1: 			char [] newCharArr = new char[size];					
1: 			oldValue.getChars(0,oldValue.length(),newCharArr,0);
1: 			java.util.Arrays.fill(newCharArr,oldValue.length(),
1: 								  newCharArr.length -1, ' ');
1: 			newValue = new String (newCharArr);
1: 		}
1: 			
1: 		return newValue;
1: 	}
1: 
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.Formatters
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.util;
1: 
1: 
0: public class Formatters {
1: 
0: 	static final char[] hexDigits = { '0', '1', '2', '3',
0: 									  '4', '5', '6', '7',
0: 									  '8', '9', 'A', 'B',
0: 									  'C', 'D', 'E', 'F' };
1: 
0: 	/** This method converts the non-ASCII characters in the input
0: 	 *  parameter to unicode escape sequences.
0: 	 * @param in    String to format
0: 	 * @return String containing unicode escape sequences for non-ASCII chars
0: 	 */
0: 	public static String format(String in) {
0: 		if (in == null)
0: 			return null;
1: 
0: 		StringBuffer out = new StringBuffer(in.length());
0: 		char hexValue[] = new char[4];
1: 
0: 		for (int i = 0; i < in.length(); i++) {
0: 			char inChar = in.charAt(i);
1: 
0: 			if (inChar < 128) {
0: 				out.append(inChar);
0: 			} else {
0: 				out.append("\\u");
1: 
0: 				int number = (int) inChar;
1: 
0: 				int digit = number % 16;
1: 
0: 				hexValue[3] = hexDigits[digit];
1: 
0: 				number /= 16;
1: 
0: 				digit = number % 16;
1: 
0: 				hexValue[2] = hexDigits[digit];
1: 
0: 				number /= 16;
1: 
0: 				digit = number %16;
1: 
0: 				hexValue[1] = hexDigits[digit];
1: 
0: 				number /= 16;
1: 
0: 				digit = number % 16;
1: 
0: 				hexValue[0] = hexDigits[digit];
1: 
0: 				out.append(hexValue);
0: 			}
0: 		}
1: 
0: 		return out.toString();
0: 	}
1: 
1: 
0: 	/**
0: 	 * repeatChar is used to create strings of varying lengths.
0: 	 * called from various tests to test edge cases and such.
0: 	 *
0: 	 * @param c             character to repeat
0: 	 * @param repeatCount   Number of times to repeat character
0: 	 * @return              String of repeatCount characters c
0: 	 */
0:    public static String repeatChar(String c, int repeatCount)
0:    {
0: 	   char ch = c.charAt(0);
1: 
0: 	   char[] chArray = new char[repeatCount];
0: 	   for (int i = 0; i < repeatCount; i++)
0: 	   {
0: 		   chArray[i] = ch;
0: 	   }
1: 
0: 	   return new String(chArray);
1: 
0:    }
1: 
0: 	/**
0: 	 * Pads out a string to the specified size
0: 	 *
0: 	 * @param oldValue value to be padded
0: 	 * @param size     size of resulting string
0: 	 * @return oldValue padded with spaces to the specified size
0: 	 */
0: 	public static String padString(String oldValue, int size)
0: 	{
0: 		String newValue = oldValue;
0: 		if (newValue != null)
0: 		{
0: 			char [] newCharArr = new char[size];					
0: 			oldValue.getChars(0,oldValue.length(),newCharArr,0);
0: 			java.util.Arrays.fill(newCharArr,oldValue.length(),
0: 								  newCharArr.length -1, ' ');
0: 			newValue = new String (newCharArr);
0: 		}
1: 			
0: 		return newValue;
0: 	}
1: 
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.util.Formatters
0: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: public class Formatters {
============================================================================