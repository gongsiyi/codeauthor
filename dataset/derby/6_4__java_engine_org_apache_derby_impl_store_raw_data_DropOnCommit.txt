1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.DropOnCommit
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:a12152a: import org.apache.derby.iapi.services.monitor.DerbyObservable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Drop a table on a commit or abort
1:eac0369: */
1:eac0369: 
1:eac0369: public class DropOnCommit extends ContainerActionOnCommit {
1:eac0369: 
1:eac0369: 	protected boolean isStreamContainer = false;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**	Methods of Observer
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public DropOnCommit(ContainerKey identity) {
1:eac0369: 
1:eac0369: 		super(identity);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public DropOnCommit(ContainerKey identity, boolean isStreamContainer) {
1:eac0369: 
1:eac0369: 		super(identity);
1:eac0369: 		this.isStreamContainer = isStreamContainer;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Called when the transaction is about to complete.
1:eac0369: 
1:eac0369: 		@see java.util.Observer#update
1:eac0369: 	*/
1:a12152a: 	public void update(DerbyObservable obj, Object arg) {
1:8d23f44: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (arg == null)
1:8d23f44: 				SanityManager.THROWASSERT("still on observer list " + this);
1:eac0369: 		}
1:eac0369: 
1:8d23f44: 		if (arg.equals(RawTransaction.COMMIT) || 
1:8d23f44:             arg.equals(RawTransaction.ABORT)) {
1:eac0369: 
1:eac0369: 			RawTransaction xact = (RawTransaction) obj;
1:eac0369: 
1:eac0369: 			try {
1:8d23f44: 
1:eac0369: 				if (this.isStreamContainer)
1:8d23f44: 					xact.dropStreamContainer(
1:8d23f44:                         identity.getSegmentId(), identity.getContainerId());
1:eac0369: 				else
1:eac0369: 					xact.dropContainer(identity);
1:8d23f44: 
1:eac0369: 			} catch (StandardException se) {
1:8d23f44: 
1:eac0369: 				xact.setObserverException(se);
1:8d23f44: 
1:eac0369: 			}
1:8d23f44: 
1:eac0369: 			obj.deleteObserver(this);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a12152a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.DerbyObservable;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void update(DerbyObservable obj, Object arg) {
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:987bbcb
/////////////////////////////////////////////////////////////////////////
commit:8d23f44
/////////////////////////////////////////////////////////////////////////
1: 
1: 				SanityManager.THROWASSERT("still on observer list " + this);
1: 		if (arg.equals(RawTransaction.COMMIT) || 
1:             arg.equals(RawTransaction.ABORT)) {
1: 
1: 					xact.dropStreamContainer(
1:                         identity.getSegmentId(), identity.getContainerId());
1: 
1: 
1: 
1: 
0:             // DERBY-3993
0:             // make sure any observer that may have been added by either
0:             // dropContainer() or dropStreamContainer() is also handled.
0:             // The calling notifyObservers() call from Xact.doComplete()
0:             // may not "see" new observers added during processing of the
0:             // initial observer list.
0:             xact.notifyObservers(arg);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.DropOnCommit
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: 
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
0: import java.util.Observable;
1: 
1: /**
1: 	Drop a table on a commit or abort
1: */
1: 
1: public class DropOnCommit extends ContainerActionOnCommit {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	protected boolean isStreamContainer = false;
1: 
1: 	/*
1: 	**	Methods of Observer
1: 	*/
1: 
1: 	public DropOnCommit(ContainerKey identity) {
1: 
1: 		super(identity);
1: 	}
1: 
1: 	public DropOnCommit(ContainerKey identity, boolean isStreamContainer) {
1: 
1: 		super(identity);
1: 		this.isStreamContainer = isStreamContainer;
1: 	}
1: 
1: 	/**
1: 		Called when the transaction is about to complete.
1: 
1: 		@see java.util.Observer#update
1: 	*/
0: 	public void update(Observable obj, Object arg) {
1: 		if (SanityManager.DEBUG) {
1: 			if (arg == null)
0: 				SanityManager.THROWASSERT("still on observr list " + this);
1: 		}
1: 
0: 		if (arg.equals(RawTransaction.COMMIT) || arg.equals(RawTransaction.ABORT)) {
1: 
1: 			RawTransaction xact = (RawTransaction) obj;
1: 
1: 			try {
1: 				if (this.isStreamContainer)
0: 					xact.dropStreamContainer(identity.getSegmentId(), identity.getContainerId());
1: 				else
1: 					xact.dropContainer(identity);
1: 			} catch (StandardException se) {
1: 				xact.setObserverException(se);
1: 			}
1: 
1: 			obj.deleteObserver(this);
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: 
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import java.util.Observable;
0: 
0: /**
0: 	Drop a table on a commit or abort
0: */
0: 
0: public class DropOnCommit extends ContainerActionOnCommit {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	protected boolean isStreamContainer = false;
0: 
0: 	/*
0: 	**	Methods of Observer
0: 	*/
0: 
0: 	public DropOnCommit(ContainerKey identity) {
0: 
0: 		super(identity);
0: 	}
0: 
0: 	public DropOnCommit(ContainerKey identity, boolean isStreamContainer) {
0: 
0: 		super(identity);
0: 		this.isStreamContainer = isStreamContainer;
0: 	}
0: 
0: 	/**
0: 		Called when the transaction is about to complete.
0: 
0: 		@see java.util.Observer#update
0: 	*/
0: 	public void update(Observable obj, Object arg) {
0: 		if (SanityManager.DEBUG) {
0: 			if (arg == null)
0: 				SanityManager.THROWASSERT("still on observr list " + this);
0: 		}
0: 
0: 		if (arg.equals(RawTransaction.COMMIT) || arg.equals(RawTransaction.ABORT)) {
0: 
0: 			RawTransaction xact = (RawTransaction) obj;
0: 
0: 			try {
0: 				if (this.isStreamContainer)
0: 					xact.dropStreamContainer(identity.getSegmentId(), identity.getContainerId());
0: 				else
0: 					xact.dropContainer(identity);
0: 			} catch (StandardException se) {
0: 				xact.setObserverException(se);
0: 			}
0: 
0: 			obj.deleteObserver(this);
0: 		}
0: 	}
0: }
============================================================================