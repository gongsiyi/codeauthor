1:0c0db14: /*
1:0c0db14: 
1:0c0db14:    Derby - Class org.apache.derbyTesting.functionTests.store.LogDeviceTest
1:0c0db14: 
1:0c0db14:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0c0db14:    contributor license agreements.  See the NOTICE file distributed with
1:0c0db14:    this work for additional information regarding copyright ownership.
1:0c0db14:    The ASF licenses this file to You under the Apache License, Version 2.0
1:0c0db14:    (the "License"); you may not use this file except in compliance with
1:0c0db14:    the License.  You may obtain a copy of the License at
1:0c0db14: 
1:0c0db14:       http://www.apache.org/licenses/LICENSE-2.0
1:0c0db14: 
1:0c0db14:    Unless required by applicable law or agreed to in writing, software
1:0c0db14:    distributed under the License is distributed on an "AS IS" BASIS,
1:0c0db14:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0c0db14:    See the License for the specific language governing permissions and
1:0c0db14:    limitations under the License.
1:0c0db14: 
1:0c0db14:  */
1:0c0db14: 
1:0c0db14: package org.apache.derbyTesting.functionTests.tests.store;
1:0c0db14: import java.sql.Connection;
1:0c0db14: import java.sql.Statement;
1:0c0db14: import java.sql.PreparedStatement;
1:0c0db14: import java.sql.ResultSet;
1:0c0db14: import java.sql.SQLException;
1:0c0db14: import org.apache.derby.tools.ij;
1:0c0db14: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:0c0db14: import java.io.File;
1:0c0db14: import java.io.IOException;
1:0c0db14: 
1:0c0db14: /*
1:0c0db14:  * This class tests create database with transaction 
1:0c0db14:  * log at non-default location specified as absolute path.
1:0c0db14:  * @version 1.0
1:0c0db14:  */
1:0c0db14: 
1:0c0db14: public class LogDeviceTest {
1:0c0db14: 
1:0c0db14: 	private static final String TEST_DATABASE_NAME = "wombat" ;
1:0c0db14:     private static final String TEST_DATABASE_NAME1 = "wombat1" ;
1:0c0db14: 	private static final String TEST_TABLE_NAME   =    "emp";
1:0c0db14:     private static final String LOG_PATH = "extinout/logDeviceTest_c1";
1:0c0db14:     private static final String LOG_PATH1 = "extinout/logDeviceTest_c2";
1:0c0db14: 
1:0c0db14: 	public static void main(String[] argv) throws Throwable {
1:0c0db14: 		
1:0c0db14:         LogDeviceTest test = new LogDeviceTest();
1:0c0db14:    		ij.getPropertyArg(argv); 
1:0c0db14: 
1:0c0db14:         try {
1:0c0db14:             test.runTest();
1:0c0db14:         }
1:0c0db14:         catch (SQLException sqle) {
1:0c0db14: 			dumpSQLException(sqle);
1:0c0db14: 		} 
1:0c0db14:     }
1:0c0db14: 
1:0c0db14:     /*
1:0c0db14:      * Returns the absolute path of the given path.
1:0c0db14:      */
1:0c0db14:     private String getFullPath(String path) throws IOException{
1:0c0db14:         File f = new File(path);
1:0c0db14:         return f.getCanonicalPath();
1:0c0db14:     }
1:0c0db14: 
1:0c0db14: 
1:0c0db14:     /*
1:0c0db14:      * create a directory.
1:0c0db14:      */
1:0c0db14:     private boolean createDir(String path) {
1:0c0db14:         File f = new File(path);
1:0c0db14:         return f.mkdirs();
1:0c0db14:     }
1:0c0db14: 
1:0c0db14: 
1:0c0db14: 
1:0c0db14: 	/*
1:0c0db14: 	 * Test database creation with log in non-default location.
1:0c0db14: 	 */
1:0c0db14: 	private void runTest() throws Exception {
1:0c0db14: 		logMessage("Begin Log Device Test");
1:0c0db14: 
1:0c0db14:         // case 1: test logDevice property with absolute path
1:0c0db14: 
1:0c0db14:         Connection conn;
1:0c0db14:         String connAttr = "create=true;" + "logDevice=" + 
1:0c0db14:                            getFullPath(LOG_PATH);
1:0c0db14:         conn = TestUtil.getConnection(TEST_DATABASE_NAME, connAttr);
1:0c0db14:         conn.setAutoCommit(false);
1:0c0db14:         createTable(conn, TEST_TABLE_NAME);
1:0c0db14:         conn.commit();
1:0c0db14:         // just insert few rows and rollback and commit 
1:0c0db14:         // to make sure  tranaction log is working fine. 
1:0c0db14:         insert(conn, TEST_TABLE_NAME, 100);
1:0c0db14:         conn.commit();
1:0c0db14:         insert(conn, TEST_TABLE_NAME, 100);
1:0c0db14:         conn.rollback();
1:0c0db14: 		// shutdown the test db 
1:0c0db14: 		shutdown(TEST_DATABASE_NAME);
1:0c0db14:         
1:0c0db14:         // case 2: database creation on non-empty 
1:0c0db14:         // log dir location should fail.  
1:0c0db14: 
1:0c0db14:         
1:0c0db14:         try {
1:0c0db14:             // this database creation is specifying the same log 
1:0c0db14:             // location as the one above; so it should fail. 
1:0c0db14:             conn = TestUtil.getConnection(TEST_DATABASE_NAME1, 
1:0c0db14:                                           connAttr);
1:0c0db14:         }catch (SQLException se) {
1:0c0db14:             SQLException nse = se.getNextException();
1:0c0db14:             if (nse != null) {
1:0c0db14:                 // expect to fail with log dir exists error.
1:0c0db14:                 if (nse.getSQLState().equals("XSLAT"))
1:0c0db14:                     System.out.println("Failed with Expected error:" + 
1:0c0db14:                                        nse.getSQLState());
1:0c0db14:                 else 
1:0c0db14:                     dumpSQLException(se);
1:0c0db14:             } else {
1:0c0db14:                 dumpSQLException(se);
1:0c0db14:             }
1:0c0db14:         }
1:0c0db14:             
1:0c0db14:         // case 3: database creation on an empty log dir should pass. 
1:0c0db14: 
1:0c0db14:         // create a dummy log dir 
1:0c0db14:         createDir(getFullPath(LOG_PATH1) + 
1:0c0db14:                   File.separator + "log"); 
1:0c0db14:         connAttr = "create=true;" + "logDevice=" + 
1:0c0db14:                    getFullPath(LOG_PATH1);
1:0c0db14:         conn = TestUtil.getConnection(TEST_DATABASE_NAME1, 
1:0c0db14:                                       connAttr);
1:0c0db14:         // just insert few rows and rollback and commit 
1:0c0db14:         // to make sure  tranaction log is working fine. 
1:0c0db14:         conn.setAutoCommit(false);
1:0c0db14:         createTable(conn, TEST_TABLE_NAME);
1:0c0db14:         conn.commit();
1:0c0db14:         insert(conn, TEST_TABLE_NAME, 100);
1:0c0db14: 		// shutdown the test db 
1:0c0db14: 		shutdown(TEST_DATABASE_NAME1);
1:0c0db14:         
1:0c0db14:         // reconnect to the same database.
1:0c0db14:         conn = TestUtil.getConnection(TEST_DATABASE_NAME1, null);
1:0c0db14:         
1:0c0db14: 		logMessage("End log device Test");
1:0c0db14: 	}
1:0c0db14: 
1:0c0db14: 		
1:0c0db14: 	/**
1:0c0db14: 	 * Shutdown the datbase
1:0c0db14: 	 * @param  dbName  Name of the database to shutdown.
1:0c0db14: 	 */
1:0c0db14: 	private void shutdown(String dbName) {
1:0c0db14: 
1:0c0db14: 		try{
1:0c0db14: 			//shutdown
1:0c0db14: 			TestUtil.getConnection(dbName, "shutdown=true");
1:0c0db14: 		}catch(SQLException se){
1:0c0db14: 			if (se.getSQLState() != null && se.getSQLState().equals("08006"))
1:0c0db14: 				System.out.println("database shutdown properly");
1:0c0db14: 			else
1:0c0db14: 				dumpSQLException(se);
1:0c0db14: 		}
1:0c0db14: 	}
1:0c0db14: 
1:0c0db14: 	/**
1:0c0db14: 	 * Write message to the standard output.
1:0c0db14: 	 */
1:0c0db14: 	private void logMessage(String   str)	{
1:0c0db14: 			System.out.println(str);
1:0c0db14: 	}
1:0c0db14: 
1:0c0db14: 	
1:0c0db14: 	/**
1:0c0db14: 	 * dump the SQLException to the standard output.
1:0c0db14: 	 */
1:0c0db14: 	static private void dumpSQLException(SQLException sqle) {
1:0c0db14: 		
1:0c0db14: 		org.apache.derby.tools.JDBCDisplayUtil.	ShowSQLException(System.out, sqle);
1:0c0db14: 		sqle.printStackTrace(System.out);
1:0c0db14: 	}
1:0c0db14: 
1:0c0db14:     /**
1:0c0db14:      * Insert some rows into the specified table.
1:0c0db14:      * @param  conn   connection to the database.    
1:0c0db14:      * @param  tableName  name of the table that rows are inserted.
1:0c0db14:      * @param  rowCount   Number of rows to Insert.
1:0c0db14:      * @exception SQLException if any database exception occurs.
1:0c0db14:      */
1:0c0db14:     private void insert(Connection conn, 
1:0c0db14:                         String tableName, 
1:0c0db14:                         int rowCount) throws SQLException {
1:0c0db14: 
1:0c0db14:         PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
1:0c0db14:                                                      tableName + 
1:0c0db14:                                                      " VALUES(?,?,?)");
1:0c0db14:         for (int i = 0; i < rowCount; i++) {
1:0c0db14: 			
1:0c0db14:             ps.setInt(1, i); // ID
1:0c0db14:             ps.setString(2 , "skywalker" + i);
1:0c0db14:             ps.setFloat(3, (float)(i * 2000)); 
1:0c0db14:             ps.executeUpdate();
1:0c0db14: 		}
1:0c0db14:         ps.close();
1:0c0db14:     }
1:0c0db14: 
1:0c0db14: 
1:0c0db14:     /* 
1:0c0db14:      * create the tables that are used by this test.
1:0c0db14:      * @param  conn   connection to the database.
1:0c0db14:      * @param  tableName  Name of the table to create.
1:0c0db14:      * @exception SQLException if any database exception occurs.
1:0c0db14:      */
1:0c0db14:     private	void createTable(Connection conn, 
1:0c0db14:                              String tableName) throws SQLException {
1:0c0db14: 
1:0c0db14:         Statement s = conn.createStatement();
1:0c0db14:         s.executeUpdate("CREATE TABLE " + tableName + 
1:0c0db14:                         "(id INT," +
1:0c0db14:                         "name CHAR(200),"+ 
1:0c0db14:                         "salary float)");
1:0c0db14:         s.executeUpdate("create index " + tableName + "_id_idx on " + 
1:0c0db14:                         tableName + "(id)");
1:0c0db14:         s.close();
1:0c0db14:     }
1:0c0db14: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0c0db14
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.LogDeviceTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import org.apache.derby.tools.ij;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: import java.io.File;
1: import java.io.IOException;
1: 
1: /*
1:  * This class tests create database with transaction 
1:  * log at non-default location specified as absolute path.
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  */
1: 
1: public class LogDeviceTest {
1: 
1: 	private static final String TEST_DATABASE_NAME = "wombat" ;
1:     private static final String TEST_DATABASE_NAME1 = "wombat1" ;
1: 	private static final String TEST_TABLE_NAME   =    "emp";
1:     private static final String LOG_PATH = "extinout/logDeviceTest_c1";
1:     private static final String LOG_PATH1 = "extinout/logDeviceTest_c2";
1: 
1: 	public static void main(String[] argv) throws Throwable {
1: 		
1:         LogDeviceTest test = new LogDeviceTest();
1:    		ij.getPropertyArg(argv); 
1: 
1:         try {
1:             test.runTest();
1:         }
1:         catch (SQLException sqle) {
1: 			dumpSQLException(sqle);
1: 		} 
1:     }
1: 
1:     /*
1:      * Returns the absolute path of the given path.
1:      */
1:     private String getFullPath(String path) throws IOException{
1:         File f = new File(path);
1:         return f.getCanonicalPath();
1:     }
1: 
1: 
1:     /*
1:      * create a directory.
1:      */
1:     private boolean createDir(String path) {
1:         File f = new File(path);
1:         return f.mkdirs();
1:     }
1: 
1: 
1: 
1: 	/*
1: 	 * Test database creation with log in non-default location.
1: 	 */
1: 	private void runTest() throws Exception {
1: 		logMessage("Begin Log Device Test");
1: 
1:         // case 1: test logDevice property with absolute path
1: 
1:         Connection conn;
1:         String connAttr = "create=true;" + "logDevice=" + 
1:                            getFullPath(LOG_PATH);
1:         conn = TestUtil.getConnection(TEST_DATABASE_NAME, connAttr);
1:         conn.setAutoCommit(false);
1:         createTable(conn, TEST_TABLE_NAME);
1:         conn.commit();
1:         // just insert few rows and rollback and commit 
1:         // to make sure  tranaction log is working fine. 
1:         insert(conn, TEST_TABLE_NAME, 100);
1:         conn.commit();
1:         insert(conn, TEST_TABLE_NAME, 100);
1:         conn.rollback();
1: 		// shutdown the test db 
1: 		shutdown(TEST_DATABASE_NAME);
1:         
1:         // case 2: database creation on non-empty 
1:         // log dir location should fail.  
1: 
1:         
1:         try {
1:             // this database creation is specifying the same log 
1:             // location as the one above; so it should fail. 
1:             conn = TestUtil.getConnection(TEST_DATABASE_NAME1, 
1:                                           connAttr);
1:         }catch (SQLException se) {
1:             SQLException nse = se.getNextException();
1:             if (nse != null) {
1:                 // expect to fail with log dir exists error.
1:                 if (nse.getSQLState().equals("XSLAT"))
1:                     System.out.println("Failed with Expected error:" + 
1:                                        nse.getSQLState());
1:                 else 
1:                     dumpSQLException(se);
1:             } else {
1:                 dumpSQLException(se);
1:             }
1:         }
1:             
1:         // case 3: database creation on an empty log dir should pass. 
1: 
1:         // create a dummy log dir 
1:         createDir(getFullPath(LOG_PATH1) + 
1:                   File.separator + "log"); 
1:         connAttr = "create=true;" + "logDevice=" + 
1:                    getFullPath(LOG_PATH1);
1:         conn = TestUtil.getConnection(TEST_DATABASE_NAME1, 
1:                                       connAttr);
1:         // just insert few rows and rollback and commit 
1:         // to make sure  tranaction log is working fine. 
1:         conn.setAutoCommit(false);
1:         createTable(conn, TEST_TABLE_NAME);
1:         conn.commit();
1:         insert(conn, TEST_TABLE_NAME, 100);
1: 		// shutdown the test db 
1: 		shutdown(TEST_DATABASE_NAME1);
1:         
1:         // reconnect to the same database.
1:         conn = TestUtil.getConnection(TEST_DATABASE_NAME1, null);
1:         
1: 		logMessage("End log device Test");
1: 	}
1: 
1: 		
1: 	/**
1: 	 * Shutdown the datbase
1: 	 * @param  dbName  Name of the database to shutdown.
1: 	 */
1: 	private void shutdown(String dbName) {
1: 
1: 		try{
1: 			//shutdown
1: 			TestUtil.getConnection(dbName, "shutdown=true");
1: 		}catch(SQLException se){
1: 			if (se.getSQLState() != null && se.getSQLState().equals("08006"))
1: 				System.out.println("database shutdown properly");
1: 			else
1: 				dumpSQLException(se);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Write message to the standard output.
1: 	 */
1: 	private void logMessage(String   str)	{
1: 			System.out.println(str);
1: 	}
1: 
1: 	
1: 	/**
1: 	 * dump the SQLException to the standard output.
1: 	 */
1: 	static private void dumpSQLException(SQLException sqle) {
1: 		
1: 		org.apache.derby.tools.JDBCDisplayUtil.	ShowSQLException(System.out, sqle);
1: 		sqle.printStackTrace(System.out);
1: 	}
1: 
1:     /**
1:      * Insert some rows into the specified table.
1:      * @param  conn   connection to the database.    
1:      * @param  tableName  name of the table that rows are inserted.
1:      * @param  rowCount   Number of rows to Insert.
1:      * @exception SQLException if any database exception occurs.
1:      */
1:     private void insert(Connection conn, 
1:                         String tableName, 
1:                         int rowCount) throws SQLException {
1: 
1:         PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
1:                                                      tableName + 
1:                                                      " VALUES(?,?,?)");
1:         for (int i = 0; i < rowCount; i++) {
1: 			
1:             ps.setInt(1, i); // ID
1:             ps.setString(2 , "skywalker" + i);
1:             ps.setFloat(3, (float)(i * 2000)); 
1:             ps.executeUpdate();
1: 		}
1:         ps.close();
1:     }
1: 
1: 
1:     /* 
1:      * create the tables that are used by this test.
1:      * @param  conn   connection to the database.
1:      * @param  tableName  Name of the table to create.
1:      * @exception SQLException if any database exception occurs.
1:      */
1:     private	void createTable(Connection conn, 
1:                              String tableName) throws SQLException {
1: 
1:         Statement s = conn.createStatement();
1:         s.executeUpdate("CREATE TABLE " + tableName + 
1:                         "(id INT," +
1:                         "name CHAR(200),"+ 
1:                         "salary float)");
1:         s.executeUpdate("create index " + tableName + "_id_idx on " + 
1:                         tableName + "(id)");
1:         s.close();
1:     }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to You under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:e727957
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.store.LogDeviceTest
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import org.apache.derby.tools.ij;
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
0: import java.io.File;
0: import java.io.IOException;
0: 
0: /*
0:  * This class tests create database with transaction 
0:  * log at non-default location specified as absolute path.
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  */
0: 
0: public class LogDeviceTest {
0: 
0: 	private static final String TEST_DATABASE_NAME = "wombat" ;
0:     private static final String TEST_DATABASE_NAME1 = "wombat1" ;
0: 	private static final String TEST_TABLE_NAME   =    "emp";
0:     private static final String LOG_PATH = "extinout/logDeviceTest_c1";
0:     private static final String LOG_PATH1 = "extinout/logDeviceTest_c2";
0: 
0: 	public static void main(String[] argv) throws Throwable {
0: 		
0:         LogDeviceTest test = new LogDeviceTest();
0:    		ij.getPropertyArg(argv); 
0: 
0:         try {
0:             test.runTest();
0:         }
0:         catch (SQLException sqle) {
0: 			dumpSQLException(sqle);
0: 		} 
0:     }
0: 
0:     /*
0:      * Returns the absolute path of the given path.
0:      */
0:     private String getFullPath(String path) throws IOException{
0:         File f = new File(path);
0:         return f.getCanonicalPath();
0:     }
0: 
0: 
0:     /*
0:      * create a directory.
0:      */
0:     private boolean createDir(String path) {
0:         File f = new File(path);
0:         return f.mkdirs();
0:     }
0: 
0: 
0: 
0: 	/*
0: 	 * Test database creation with log in non-default location.
0: 	 */
0: 	private void runTest() throws Exception {
0: 		logMessage("Begin Log Device Test");
0: 
0:         // case 1: test logDevice property with absolute path
0: 
0:         Connection conn;
0:         String connAttr = "create=true;" + "logDevice=" + 
0:                            getFullPath(LOG_PATH);
0:         conn = TestUtil.getConnection(TEST_DATABASE_NAME, connAttr);
0:         conn.setAutoCommit(false);
0:         createTable(conn, TEST_TABLE_NAME);
0:         conn.commit();
0:         // just insert few rows and rollback and commit 
0:         // to make sure  tranaction log is working fine. 
0:         insert(conn, TEST_TABLE_NAME, 100);
0:         conn.commit();
0:         insert(conn, TEST_TABLE_NAME, 100);
0:         conn.rollback();
0: 		// shutdown the test db 
0: 		shutdown(TEST_DATABASE_NAME);
0:         
0:         // case 2: database creation on non-empty 
0:         // log dir location should fail.  
0: 
0:         
0:         try {
0:             // this database creation is specifying the same log 
0:             // location as the one above; so it should fail. 
0:             conn = TestUtil.getConnection(TEST_DATABASE_NAME1, 
0:                                           connAttr);
0:         }catch (SQLException se) {
0:             SQLException nse = se.getNextException();
0:             if (nse != null) {
0:                 // expect to fail with log dir exists error.
0:                 if (nse.getSQLState().equals("XSLAT"))
0:                     System.out.println("Failed with Expected error:" + 
0:                                        nse.getSQLState());
0:                 else 
0:                     dumpSQLException(se);
0:             } else {
0:                 dumpSQLException(se);
0:             }
0:         }
0:             
0:         // case 3: database creation on an empty log dir should pass. 
0: 
0:         // create a dummy log dir 
0:         createDir(getFullPath(LOG_PATH1) + 
0:                   File.separator + "log"); 
0:         connAttr = "create=true;" + "logDevice=" + 
0:                    getFullPath(LOG_PATH1);
0:         conn = TestUtil.getConnection(TEST_DATABASE_NAME1, 
0:                                       connAttr);
0:         // just insert few rows and rollback and commit 
0:         // to make sure  tranaction log is working fine. 
0:         conn.setAutoCommit(false);
0:         createTable(conn, TEST_TABLE_NAME);
0:         conn.commit();
0:         insert(conn, TEST_TABLE_NAME, 100);
0: 		// shutdown the test db 
0: 		shutdown(TEST_DATABASE_NAME1);
0:         
0:         // reconnect to the same database.
0:         conn = TestUtil.getConnection(TEST_DATABASE_NAME1, null);
0:         
0: 		logMessage("End log device Test");
0: 	}
0: 
0: 		
0: 	/**
0: 	 * Shutdown the datbase
0: 	 * @param  dbName  Name of the database to shutdown.
0: 	 */
0: 	private void shutdown(String dbName) {
0: 
0: 		try{
0: 			//shutdown
0: 			TestUtil.getConnection(dbName, "shutdown=true");
0: 		}catch(SQLException se){
0: 			if (se.getSQLState() != null && se.getSQLState().equals("08006"))
0: 				System.out.println("database shutdown properly");
0: 			else
0: 				dumpSQLException(se);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Write message to the standard output.
0: 	 */
0: 	private void logMessage(String   str)	{
0: 			System.out.println(str);
0: 	}
0: 
0: 	
0: 	/**
0: 	 * dump the SQLException to the standard output.
0: 	 */
0: 	static private void dumpSQLException(SQLException sqle) {
0: 		
0: 		org.apache.derby.tools.JDBCDisplayUtil.	ShowSQLException(System.out, sqle);
0: 		sqle.printStackTrace(System.out);
0: 	}
0: 
0:     /**
0:      * Insert some rows into the specified table.
0:      * @param  conn   connection to the database.    
0:      * @param  tableName  name of the table that rows are inserted.
0:      * @param  rowCount   Number of rows to Insert.
0:      * @exception SQLException if any database exception occurs.
0:      */
0:     private void insert(Connection conn, 
0:                         String tableName, 
0:                         int rowCount) throws SQLException {
0: 
0:         PreparedStatement ps = conn.prepareStatement("INSERT INTO " + 
0:                                                      tableName + 
0:                                                      " VALUES(?,?,?)");
0:         for (int i = 0; i < rowCount; i++) {
0: 			
0:             ps.setInt(1, i); // ID
0:             ps.setString(2 , "skywalker" + i);
0:             ps.setFloat(3, (float)(i * 2000)); 
0:             ps.executeUpdate();
0: 		}
0:         ps.close();
0:     }
0: 
0: 
0:     /* 
0:      * create the tables that are used by this test.
0:      * @param  conn   connection to the database.
0:      * @param  tableName  Name of the table to create.
0:      * @exception SQLException if any database exception occurs.
0:      */
0:     private	void createTable(Connection conn, 
0:                              String tableName) throws SQLException {
0: 
0:         Statement s = conn.createStatement();
0:         s.executeUpdate("CREATE TABLE " + tableName + 
0:                         "(id INT," +
0:                         "name CHAR(200),"+ 
0:                         "salary float)");
0:         s.executeUpdate("create index " + tableName + "_id_idx on " + 
0:                         tableName + "(id)");
0:         s.close();
0:     }
0: }
============================================================================