1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.locks.ActiveLock
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.locks;
1:eac0369: 
1:3c1f634: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: import org.apache.derby.iapi.services.locks.C_LockFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A Lock represents a granted or waiting lock request.
1:eac0369: 
1:eac0369: 	<BR>
1:eac0369: 	MT - Mutable - Immutable identity : Thread Aware
1:eac0369: */
1:eac0369: 
1:eac0369: public final class ActiveLock extends Lock {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set to true if the object waiting on this thread should wake up,
1:eac0369: 		MT - mutable - java synchronized(this)
1:eac0369: 	*/
1:eac0369: 	byte wakeUpNow;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set to true if the Lock potentially could be granted.
1:eac0369: 
1:eac0369: 		MT - mutable - single thread required
1:eac0369: 	*/
1:eac0369: 	boolean potentiallyGranted;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If true then this lock can be granted even if
1:eac0369: 		it is not the first lock request on the wait queue.
1:3c1f634: 		This can occur if the compatibility space already holds
1:eac0369: 		a lock on the object.
1:eac0369: 	*/
1:eac0369: 	protected boolean canSkip;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Initialize the lock, should be seen as part of the constructor. A future
1:eac0369: 		version of this class may become mutable - mutable identity.
1:eac0369: 
1:eac0369: 		MT - single thread required
1:eac0369: 	*/
1:3c1f634: 	protected ActiveLock(CompatibilitySpace space, Lockable ref,
1:3c1f634: 						 Object qualifier) {
1:eac0369: 		super(space, ref, qualifier);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**	
1:eac0369: 		Set the potentially granted flag, returns true if the
1:eac0369: 		flag changed its state.
1:eac0369: 
1:eac0369: 		MT - single thread required
1:eac0369: 	*/
1:eac0369: 	protected boolean setPotentiallyGranted() {
1:eac0369: 		if (!potentiallyGranted) {
1:eac0369: 			potentiallyGranted = true;
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**	
1:eac0369: 		Clear the potentially granted flag.
1:eac0369: 
1:eac0369: 		MT - single thread required
1:eac0369: 	*/
1:eac0369: 	protected void clearPotentiallyGranted() {
1:eac0369: 		potentiallyGranted = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Wait for a lock to be granted, returns when the lock is granted.
1:eac0369: 		<P>
1:dbed020: 		The sleep wakeup scheme depends on the two booleans wakeUpNow and potentiallyGranted.
1:eac0369: 		  
1:eac0369: 		MT - Single thread required - and assumed to be the thread requesting the lock.
1:eac0369: 
1:eac0369: 		@return true if the wait ended early (ie. someone else woke us up).
1:eac0369: 
1:eac0369: 		@exception StandardException timeout, deadlock or thread interrupted
1:eac0369: 	*/
1:eac0369: 	protected synchronized byte waitForGrant(int timeout)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (wakeUpNow == Constants.WAITING_LOCK_IN_WAIT) {
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 
1:eac0369: 
1:eac0369: 				if (timeout == C_LockFactory.WAIT_FOREVER) {
1:eac0369: 					wait();
1:eac0369: 				}
1:eac0369: 				else if (timeout > 0) {
1:eac0369: 					wait(timeout);
1:eac0369: 				}
1:eac0369: 
1:eac0369: 			} catch (InterruptedException ie) {
1:245a922:                 wakeUpNow = Constants.WAITING_LOCK_INTERRUPTED;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		byte why = wakeUpNow;
1:eac0369: 		wakeUpNow = Constants.WAITING_LOCK_IN_WAIT;
1:eac0369: 		return why;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Wake up anyone sleeping on this lock.
1:eac0369: 
1:eac0369: 		MT - Thread Safe
1:eac0369: 	*/
1:eac0369: 	protected synchronized void wakeUp(byte why) {
1:eac0369: 		// If we were picked as a deadlock victim then don't
1:eac0369: 		// override the wakeup reason with another one.
1:eac0369: 		if (wakeUpNow != Constants.WAITING_LOCK_DEADLOCK)
1:eac0369: 			wakeUpNow = why;
1:eac0369: 		notify();
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 		The sleep wakeup scheme depends on the two booleans wakeUpNow and potentiallyGranted.
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:245a922
/////////////////////////////////////////////////////////////////////////
1:                 wakeUpNow = Constants.WAITING_LOCK_INTERRUPTED;
commit:c952843
/////////////////////////////////////////////////////////////////////////
0: 				wakeUpNow = Constants.WAITING_LOCK_INTERRUPTED;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7b8eea6
/////////////////////////////////////////////////////////////////////////
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.locks.CompatibilitySpace;
/////////////////////////////////////////////////////////////////////////
1: 		This can occur if the compatibility space already holds
/////////////////////////////////////////////////////////////////////////
1: 	protected ActiveLock(CompatibilitySpace space, Lockable ref,
1: 						 Object qualifier) {
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.locks.ActiveLock
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.locks;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
1: import org.apache.derby.iapi.services.locks.C_LockFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: 
1: /**
1: 	A Lock represents a granted or waiting lock request.
1: 
1: 	<BR>
1: 	MT - Mutable - Immutable identity : Thread Aware
1: */
1: 
1: public final class ActiveLock extends Lock {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/**
1: 		Set to true if the object waiting on this thread should wake up,
1: 		MT - mutable - java synchronized(this)
1: 	*/
1: 	byte wakeUpNow;
1: 
1: 	/**
1: 		Set to true if the Lock potentially could be granted.
1: 
1: 		MT - mutable - single thread required
1: 	*/
1: 	boolean potentiallyGranted;
1: 
1: 	/**
1: 		If true then this lock can be granted even if
1: 		it is not the first lock request on the wait queue.
0: 		This can occur if the compatability space already holds
1: 		a lock on the object.
1: 	*/
1: 	protected boolean canSkip;
1: 
1: 	/**
1: 		Initialize the lock, should be seen as part of the constructor. A future
1: 		version of this class may become mutable - mutable identity.
1: 
1: 		MT - single thread required
1: 	*/
0: 	protected ActiveLock(Object space, Lockable ref, Object qualifier) {
1: 		super(space, ref, qualifier);
1: 	}
1: 
1: 	/**	
1: 		Set the potentially granted flag, returns true if the
1: 		flag changed its state.
1: 
1: 		MT - single thread required
1: 	*/
1: 	protected boolean setPotentiallyGranted() {
1: 		if (!potentiallyGranted) {
1: 			potentiallyGranted = true;
1: 			return true;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	/**	
1: 		Clear the potentially granted flag.
1: 
1: 		MT - single thread required
1: 	*/
1: 	protected void clearPotentiallyGranted() {
1: 		potentiallyGranted = false;
1: 	}
1: 
1: 	/**
1: 		Wait for a lock to be granted, returns when the lock is granted.
1: 		<P>
0: 		The sleep wakeup scheme depends on the two booleans wakeUpNow & potentiallyGranted.
1: 		  
1: 		MT - Single thread required - and assumed to be the thread requesting the lock.
1: 
1: 		@return true if the wait ended early (ie. someone else woke us up).
1: 
1: 		@exception StandardException timeout, deadlock or thread interrupted
1: 	*/
1: 	protected synchronized byte waitForGrant(int timeout)
1: 		throws StandardException
1: 	{
1: 
1: 		if (wakeUpNow == Constants.WAITING_LOCK_IN_WAIT) {
1: 
1: 			try {
1: 
1: 
1: 				if (timeout == C_LockFactory.WAIT_FOREVER) {
1: 					wait();
1: 				}
1: 				else if (timeout > 0) {
1: 					wait(timeout);
1: 				}
1: 
1: 			} catch (InterruptedException ie) {
0: 				throw StandardException.interrupt(ie);
1: 			}
1: 		}
1: 
1: 		byte why = wakeUpNow;
1: 		wakeUpNow = Constants.WAITING_LOCK_IN_WAIT;
1: 		return why;
1: 	}
1: 
1: 	/**
1: 		Wake up anyone sleeping on this lock.
1: 
1: 		MT - Thread Safe
1: 	*/
1: 	protected synchronized void wakeUp(byte why) {
1: 		// If we were picked as a deadlock victim then don't
1: 		// override the wakeup reason with another one.
1: 		if (wakeUpNow != Constants.WAITING_LOCK_DEADLOCK)
1: 			wakeUpNow = why;
1: 		notify();
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.locks
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.locks;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: 
0: /**
0: 	A Lock represents a granted or waiting lock request.
0: 
0: 	<BR>
0: 	MT - Mutable - Immutable identity : Thread Aware
0: */
0: 
0: public final class ActiveLock extends Lock {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/**
0: 		Set to true if the object waiting on this thread should wake up,
0: 		MT - mutable - java synchronized(this)
0: 	*/
0: 	byte wakeUpNow;
0: 
0: 	/**
0: 		Set to true if the Lock potentially could be granted.
0: 
0: 		MT - mutable - single thread required
0: 	*/
0: 	boolean potentiallyGranted;
0: 
0: 	/**
0: 		If true then this lock can be granted even if
0: 		it is not the first lock request on the wait queue.
0: 		This can occur if the compatability space already holds
0: 		a lock on the object.
0: 	*/
0: 	protected boolean canSkip;
0: 
0: 	/**
0: 		Initialize the lock, should be seen as part of the constructor. A future
0: 		version of this class may become mutable - mutable identity.
0: 
0: 		MT - single thread required
0: 	*/
0: 	protected ActiveLock(Object space, Lockable ref, Object qualifier) {
0: 		super(space, ref, qualifier);
0: 	}
0: 
0: 	/**	
0: 		Set the potentially granted flag, returns true if the
0: 		flag changed its state.
0: 
0: 		MT - single thread required
0: 	*/
0: 	protected boolean setPotentiallyGranted() {
0: 		if (!potentiallyGranted) {
0: 			potentiallyGranted = true;
0: 			return true;
0: 		}
0: 		return false;
0: 	}
0: 
0: 	/**	
0: 		Clear the potentially granted flag.
0: 
0: 		MT - single thread required
0: 	*/
0: 	protected void clearPotentiallyGranted() {
0: 		potentiallyGranted = false;
0: 	}
0: 
0: 	/**
0: 		Wait for a lock to be granted, returns when the lock is granted.
0: 		<P>
0: 		The sleep wakeup scheme depends on the two booleans wakeUpNow & potentiallyGranted.
0: 		  
0: 		MT - Single thread required - and assumed to be the thread requesting the lock.
0: 
0: 		@return true if the wait ended early (ie. someone else woke us up).
0: 
0: 		@exception StandardException timeout, deadlock or thread interrupted
0: 	*/
0: 	protected synchronized byte waitForGrant(int timeout)
0: 		throws StandardException
0: 	{
0: 
0: 		if (wakeUpNow == Constants.WAITING_LOCK_IN_WAIT) {
0: 
0: 			try {
0: 
0: 
0: 				if (timeout == C_LockFactory.WAIT_FOREVER) {
0: 					wait();
0: 				}
0: 				else if (timeout > 0) {
0: 					wait(timeout);
0: 				}
0: 
0: 			} catch (InterruptedException ie) {
0: 				throw StandardException.interrupt(ie);
0: 			}
0: 		}
0: 
0: 		byte why = wakeUpNow;
0: 		wakeUpNow = Constants.WAITING_LOCK_IN_WAIT;
0: 		return why;
0: 	}
0: 
0: 	/**
0: 		Wake up anyone sleeping on this lock.
0: 
0: 		MT - Thread Safe
0: 	*/
0: 	protected synchronized void wakeUp(byte why) {
0: 		// If we were picked as a deadlock victim then don't
0: 		// override the wakeup reason with another one.
0: 		if (wakeUpNow != Constants.WAITING_LOCK_DEADLOCK)
0: 			wakeUpNow = why;
0: 		notify();
0: 	}
0: }
0: 
============================================================================