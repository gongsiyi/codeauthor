1:1b89987: /*
4:1b89987: 
1:1b89987:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.StoreScriptsTest
1:1b89987: 
1:1b89987:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1b89987:    contributor license agreements.  See the NOTICE file distributed with
1:1b89987:    this work for additional information regarding copyright ownership.
1:1b89987:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1b89987:    (the "License"); you may not use this file except in compliance with
1:1b89987:    the License.  You may obtain a copy of the License at
1:1b89987: 
1:1b89987:       http://www.apache.org/licenses/LICENSE-2.0
1:1b89987: 
1:1b89987:    Unless required by applicable law or agreed to in writing, software
1:1b89987:    distributed under the License is distributed on an "AS IS" BASIS,
1:1b89987:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1b89987:    See the License for the specific language governing permissions and
1:1b89987:    limitations under the License.
1:1b89987: 
1:1b89987:  */
1:1b89987: 
1:1b89987: package org.apache.derbyTesting.functionTests.tests.store;
1:1b89987: 
1:1b89987: import java.sql.Statement;
1:1b89987: import java.util.Properties;
1:1b89987: import junit.framework.Test;
1:1b89987: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1b89987: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1b89987: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:1b89987: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:1b89987: 
1:1b89987: public class StoreScriptsTest extends ScriptTestCase {
1:1b89987:     
1:1b89987:     /**
1:1b89987:      * Store SQL scripts (.sql files) that only run in embedded.
1:1b89987:      * Most tests that are testing SQL functionality can just 
1:1b89987:      * run in emebdded.
1:1b89987:      */
1:1b89987:     private static final String[] EMBEDDED_TESTS = {
1:1b89987:         /* in comments reasons why scripts from the storemore suite can/cannot be run like this*/
1:1b89987:         "cisco",        
1:1b89987:         "connectDisconnect", 
1:7658caa:         "databaseProperties", // causes failures in AccessTest in EncryptionSuite
1:1b89987:         "longRow",
1:1b89987:         //"logDevice", // cannot run like this; test tries to set up 
1:1b89987:         // a separate logDevice by using ij.DataSource.connectionAttribute
1:1b89987:         // =logDevice=exitnout/weirdlog
1:1b89987:         "Rllmodule1", // note, original had the following properties:
1:1b89987:         // derby.module.access.rll=org.apache.derby.impl.store.RllRAMAccessManager.
1:1b89987:         // derby.storage.rowLocking=true 
1:1b89987:         // behavior is the same with them set, and without...
1:1b89987:         // "Rllmodule2",// cannot run as is, because needs special properties
1:1b89987:         // derby.module.access.rll=org.apache.derby.impl.store.RllRAMAccessManager.
1:1b89987:         // derby.storage.rowLocking=false
1:1b89987:         "Rllmodule3", 
1:1b89987:         "Rllmodule4", // note, original had special properties
1:1b89987:         // derby.module.access.rll=org.apache.derby.impl.store.RllRAMAccessManager.
1:1b89987:         // derby.storage.rowLocking=true 
1:1b89987:         // behavior is the same with them set, and without...
1:1b89987:         // might be able to get that set for a separate suite...
1:1b89987:         "RowLockIso",
1:1b89987:         "rlliso1multi",
1:1b89987:         "rlliso2multi",
1:1b89987:         "rlliso3multi", // note, original test had property 'derby.storage.rowLocking=true'
1:1b89987:         // "TransactionTable", // note, original test had property 'derby.storage.rowLocking=true'
1:1b89987:         //      but this cannot be run like this, because weme gives a different result than
1:1b89987:         //      ibm16 - there could be a timing issue, or it could be due to 
1:1b89987:         //      diffs between using datasource or drivermanager.
1:1b89987:         //      also note, this would set maximumdisplaywidth, and the setting would
1:1b89987:         //      remain for subsequent tests.
1:1b89987:         "testsqldecimal", // note, original test had properties set:
1:1b89987:         // derby.language.StatementCache=true
1:1b89987:         // derby.storage.sortBufferMax=78
1:1b89987:         // derby.debug.true=testSort
1:1b89987:         "heapscan", // note, original had properties set:
1:1b89987:         /*derby.storage.userLockTrace=true
1:1b89987:         derby.locks.deadlockTimeout=1
1:1b89987:         derby.locks.waitTimeout=5
1:1b89987:         #derby.infolog.append=true
1:1b89987:         derby.language.logStatementText=true
1:1b89987:         #derby.debug.true=userLockStackTrace,DeadlockTrace
1:1b89987:         #derby.debug.true=DeadlockTrace
1:1b89987:         #derby.debug.true=enableRowLocking,DeadlockTrace
1:1b89987:         derby.debug.true=verbose_heap_post_commit */
1:1b89987:         "removeStubs",
1:1b89987:         //"rollForwardBackup", has a _sed.properties file; connects to 
1:1b89987:         // multiple databases - needs to be fully converted.
1:1b89987:         // "rollForwardRecovery", original uses useextdirs=true, which
1:1b89987:         // includes separate processing in the old harness.
1:1b89987:         // also needs adjustment of run resource call 
1:1b89987:         "readlocks", 
1:1b89987:         //"backupRestore", // uses another database than wombat
1:1b89987:         "bug3498", 
1:1b89987:         //"onlineBackupTest2", // runs into lock time out 
1:e18b371:         //"onlineBackupTest4" // runs into security exception
1:e18b371:         // Following scripts were part of the 'storetests' suite
1:e18b371:         "st_derby1189",
1:e18b371:         // "st_1",// this one can just be removed - was the
1:e18b371:         // first initial test for the SYSCS_UTIL schema. All functionality
1:e18b371:         // is now better tested elsewhere.
1:e18b371:         "st_b5772",
1:e18b371:         //"derby94" // this one needs special property 
1:e18b371:         // derby.locks.escalationThreshold=102
1:1b89987:         };
1:1b89987: 
1:1b89987:     public StoreScriptsTest(String script) {
1:1b89987:         super(script, true);
3:1b89987:     }
1:1b89987:     
1:1b89987:     private static Test getSuite(String[] list)
1:1b89987:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("SQL scripts");
1:1b89987:         for (int i = 0; i < list.length; i++)
1:1b89987:             suite.addTest(
1:1b89987:                     new CleanDatabaseTestSetup(
1:1b89987:                     new StoreScriptsTest(list[i])));
1:1b89987: 
1:1b89987:         return getIJConfig(suite);
1:1ae02c9:     }
1:1b89987:     
1:1b89987:     public static Test suite() {        
1:1b89987:         Properties props = new Properties();
1:1b89987: 
1:1b89987:         props.setProperty("derby.infolog.append", "true");  
1:1b89987:         props.setProperty("ij.protocol", "jdbc:derby:");
1:1b89987:         props.setProperty("ij.database", "wombat;create=true");
1:1b89987: 
1:1b89987:         Test test = new SystemPropertyTestSetup(
1:1b89987:                 getSuite(EMBEDDED_TESTS), props);
1:1b89987: 
1:1b89987:         // Lock timeout settings that were set for the old harness store tests
1:1b89987:         test = DatabasePropertyTestSetup.setLockTimeouts(test, 1, 4);
1:1b89987:         
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("StoreScripts");
1:1b89987:         suite.addTest(test);
1:1b89987: 
1:1b89987:         return getIJConfig(suite); 
1:1b89987:     }   
1:1b89987:     
1:1b89987:     protected void tearDown() throws Exception {
1:1b89987:         rollback();
1:1b89987:         Statement s = createStatement();
1:1b89987:         // Clear the database properties set by this test so that they
1:1b89987:         // don't affect other tests.
1:7658caa:         s.executeUpdate("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:7658caa:                 "('derby.storage.pageSize', NULL)");
1:7658caa:         s.executeUpdate("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:7658caa:                 "('derby.storage.pageReservedSpace', NULL)");
1:7658caa:         s.executeUpdate("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:7658caa:                 "('derby.database.propertiesOnly', false)");
1:7658caa:         // databaseProperties.sql sets this as a system property as well.
1:7658caa:         removeSystemProperty("derby.storage.pageSize");
1:1b89987: 
1:1b89987:         super.tearDown();
1:1b89987:     }
1:7658caa: 
1:1b89987: 
1:1b89987: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("SQL scripts");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("StoreScripts");
/////////////////////////////////////////////////////////////////////////
1: }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:8566ca3
/////////////////////////////////////////////////////////////////////////
commit:1643c9c
/////////////////////////////////////////////////////////////////////////
commit:e18b371
/////////////////////////////////////////////////////////////////////////
1:         //"onlineBackupTest4" // runs into security exception
1:         // Following scripts were part of the 'storetests' suite
1:         "st_derby1189",
1:         // "st_1",// this one can just be removed - was the
1:         // first initial test for the SYSCS_UTIL schema. All functionality
1:         // is now better tested elsewhere.
1:         "st_b5772",
1:         //"derby94" // this one needs special property 
1:         // derby.locks.escalationThreshold=102
commit:7658caa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         "databaseProperties", // causes failures in AccessTest in EncryptionSuite
/////////////////////////////////////////////////////////////////////////
1:         s.executeUpdate("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:                 "('derby.storage.pageSize', NULL)");
1:         s.executeUpdate("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:                 "('derby.storage.pageReservedSpace', NULL)");
1:         s.executeUpdate("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY" +
1:                 "('derby.database.propertiesOnly', false)");
1:         // databaseProperties.sql sets this as a system property as well.
1:         removeSystemProperty("derby.storage.pageSize");
1: 
commit:1b89987
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.StoreScriptsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import java.sql.PreparedStatement;
0: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: 
1: public class StoreScriptsTest extends ScriptTestCase {
1:     
1:     /**
1:      * Store SQL scripts (.sql files) that only run in embedded.
1:      * Most tests that are testing SQL functionality can just 
1:      * run in emebdded.
1:      */
1:     private static final String[] EMBEDDED_TESTS = {
1:         /* in comments reasons why scripts from the storemore suite can/cannot be run like this*/
1:         "cisco",        
1:         "connectDisconnect", 
0:         //"databaseProperties", // causes failures in AccessTest in EncryptionSuite
1:         "longRow",
1:         //"logDevice", // cannot run like this; test tries to set up 
1:         // a separate logDevice by using ij.DataSource.connectionAttribute
1:         // =logDevice=exitnout/weirdlog
1:         "Rllmodule1", // note, original had the following properties:
1:         // derby.module.access.rll=org.apache.derby.impl.store.RllRAMAccessManager.
1:         // derby.storage.rowLocking=true 
1:         // behavior is the same with them set, and without...
1:         // "Rllmodule2",// cannot run as is, because needs special properties
1:         // derby.module.access.rll=org.apache.derby.impl.store.RllRAMAccessManager.
1:         // derby.storage.rowLocking=false
1:         "Rllmodule3", 
1:         "Rllmodule4", // note, original had special properties
1:         // derby.module.access.rll=org.apache.derby.impl.store.RllRAMAccessManager.
1:         // derby.storage.rowLocking=true 
1:         // behavior is the same with them set, and without...
1:         // might be able to get that set for a separate suite...
1:         "RowLockIso",
1:         "rlliso1multi",
1:         "rlliso2multi",
1:         "rlliso3multi", // note, original test had property 'derby.storage.rowLocking=true'
1:         // "TransactionTable", // note, original test had property 'derby.storage.rowLocking=true'
1:         //      but this cannot be run like this, because weme gives a different result than
1:         //      ibm16 - there could be a timing issue, or it could be due to 
1:         //      diffs between using datasource or drivermanager.
1:         //      also note, this would set maximumdisplaywidth, and the setting would
1:         //      remain for subsequent tests.
0:         "SpaceTable", 
1:         "testsqldecimal", // note, original test had properties set:
1:         // derby.language.StatementCache=true
1:         // derby.storage.sortBufferMax=78
1:         // derby.debug.true=testSort
1:         "heapscan", // note, original had properties set:
1:         /*derby.storage.userLockTrace=true
1:         derby.locks.deadlockTimeout=1
1:         derby.locks.waitTimeout=5
1:         #derby.infolog.append=true
1:         derby.language.logStatementText=true
1:         #derby.debug.true=userLockStackTrace,DeadlockTrace
1:         #derby.debug.true=DeadlockTrace
1:         #derby.debug.true=enableRowLocking,DeadlockTrace
1:         derby.debug.true=verbose_heap_post_commit */
1:         "removeStubs",
0:         "lockTableVti", 
1:         //"rollForwardBackup", has a _sed.properties file; connects to 
1:         // multiple databases - needs to be fully converted.
1:         // "rollForwardRecovery", original uses useextdirs=true, which
1:         // includes separate processing in the old harness.
1:         // also needs adjustment of run resource call 
1:         "readlocks", 
1:         //"backupRestore", // uses another database than wombat
1:         "bug3498", 
1:         //"onlineBackupTest2", // runs into lock time out 
0:         //"onlineBackupTest4" // runs into security exception 
1:         };
1: 
1:     public StoreScriptsTest(String script) {
1:         super(script, true);
1:     }
1:     
1:     private static Test getSuite(String[] list)
1:     {
0:         TestSuite suite = new TestSuite("SQL scripts");
1:         for (int i = 0; i < list.length; i++)
1:             suite.addTest(
1:                     new CleanDatabaseTestSetup(
1:                     new StoreScriptsTest(list[i])));
1: 
1:         return getIJConfig(suite);
1:     }
1:     
1:     public static Test suite() {        
1:         Properties props = new Properties();
1: 
0:         // When running on JSR-169 platforms, we need to use a data source
0:         // instead of a JDBC URL since DriverManager isn't available.
0:         if (JDBC.vmSupportsJSR169()) {
0:             props.setProperty("ij.dataSource",
0:                               "org.apache.derby.jdbc.EmbeddedSimpleDataSource");
0:             props.setProperty("ij.dataSource.databaseName", "wombat");
0:             props.setProperty("ij.dataSource.createDatabase", "create");
1:         }
1: 
1:         props.setProperty("derby.infolog.append", "true");  
1:         props.setProperty("ij.protocol", "jdbc:derby:");
1:         props.setProperty("ij.database", "wombat;create=true");
1: 
1:         Test test = new SystemPropertyTestSetup(
1:                 getSuite(EMBEDDED_TESTS), props);
1: 
1:         // Lock timeout settings that were set for the old harness store tests
1:         test = DatabasePropertyTestSetup.setLockTimeouts(test, 1, 4);
1:         
0:         TestSuite suite = new TestSuite("StoreScripts");
1:         suite.addTest(test);
1: 
1:         return getIJConfig(suite); 
1:     }   
1:     
1:     protected void tearDown() throws Exception {
1:         rollback();
1:         Statement s = createStatement();
1:         // Clear the database properties set by this test so that they
1:         // don't affect other tests.
0:         s.executeUpdate("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.storage.pageSize', NULL)");
0:         commit();
1: 
1:         super.tearDown();
1:     }
1: 
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2e4b1b1
/////////////////////////////////////////////////////////////////////////
============================================================================