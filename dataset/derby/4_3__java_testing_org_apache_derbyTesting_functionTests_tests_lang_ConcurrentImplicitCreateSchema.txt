1:89e0da0: /*
2:89e0da0: 
1:89e0da0:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang. ConcurrentImplicitCreateSchema.java
1:89e0da0: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:89e0da0: 
1:89e0da0:       http://www.apache.org/licenses/LICENSE-2.0
1:89e0da0: 
1:89e0da0:    Unless required by applicable law or agreed to in writing, software
1:89e0da0:    distributed under the License is distributed on an "AS IS" BASIS,
1:89e0da0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89e0da0:    See the License for the specific language governing permissions and
1:89e0da0:    limitations under the License.
1:89e0da0: 
1:89e0da0:  */
1:89e0da0: 
1:89e0da0: package org.apache.derbyTesting.functionTests.tests.lang;
1:89e0da0: 
1:89e0da0: import java.sql.Connection;
1:89e0da0: import java.sql.SQLException;
1:89e0da0: import java.sql.Statement;
1:89e0da0: 
1:89e0da0: import org.apache.derby.tools.ij;
1:89e0da0: 
1:89e0da0: /**
1:89e0da0:  * Test for several threads creating tables in the same originally
1:89e0da0:  * non-existing schema.  This will cause an implicit creation of the
1:89e0da0:  * schema.  The test was created for the fix of JIRA issue DERBY-230
1:89e0da0:  * where an error occurred if two threads try to create the schema in
1:89e0da0:  * parallel.
1:89e0da0:  * 
1:89e0da0:  */
1:89e0da0: 
1:89e0da0: public class ConcurrentImplicitCreateSchema
1:89e0da0: {
1:89e0da0:     
1:89e0da0:     /**
1:89e0da0:      * Runnable that will create and drop table.
1:89e0da0:      */
1:89e0da0:     class CreateTable implements Runnable 
1:89e0da0:     {
1:89e0da0:         /** Id of the thread running this instance */
1:89e0da0:         private int myId;
1:89e0da0:         /** Which schema to use */
1:89e0da0:         private int schemaId;
1:89e0da0:         /** Database connection for this thread */
1:89e0da0:         private Connection conn = null;
1:89e0da0:         /** Test object. Used to inform about failures. */
1:89e0da0:         private ConcurrentImplicitCreateSchema test;
1:89e0da0: 
1:89e0da0:         CreateTable(int id, int schemaId, 
1:89e0da0:                     ConcurrentImplicitCreateSchema test) 
1:89e0da0:             throws SQLException, IllegalAccessException, 
1:4469400:                    ClassNotFoundException, InstantiationException, NoSuchMethodException,
1:4469400:                    java.lang.reflect.InvocationTargetException
1:89e0da0:         {
1:89e0da0:             this.myId = id;
1:89e0da0:             this.schemaId = schemaId;
1:89e0da0:             this.test = test; 
1:89e0da0: 
1:89e0da0:             // Open a connection for this thread
1:89e0da0:             conn = ij.startJBMS();
1:89e0da0:             conn.setAutoCommit(false);
1:89e0da0:         }
1:89e0da0:      
1:89e0da0:         public void run()        
1:89e0da0:         {
1:89e0da0:             try {
1:89e0da0:                 Statement s = conn.createStatement();
1:89e0da0:                 s.execute("create table testschema" + schemaId + ".testtab" 
1:89e0da0:                           + myId + "(num int, addr varchar(40))");
1:89e0da0:                 s.execute("drop table testschema" + schemaId + ".testtab" 
1:89e0da0:                           + myId);
1:89e0da0:             } catch (SQLException e) {
1:89e0da0:                 test.failed(e);
1:89e0da0:             } 
1:89e0da0:   
1:89e0da0:             // We should close the transaction regardless of outcome 
1:89e0da0:             // Otherwise, other threads may wait on transactional 
1:89e0da0:             // locks until this transaction times out.
1:89e0da0:             try {
1:89e0da0:                 conn.commit();
1:89e0da0:                 conn.close();
1:89e0da0:             } catch (SQLException e) {
1:89e0da0:                 test.failed(e);
1:89e0da0:             }
1:89e0da0:             //            System.out.println("Thread " + myId + " completed.");
1:89e0da0:         }
1:89e0da0:     }
1:89e0da0:     
1:89e0da0:     /** 
1:89e0da0:      * Outcome of test.  
1:89e0da0:      * Will be set to false if any failure is detected.
1:89e0da0:      */
1:89e0da0:     boolean passed = true;
1:89e0da0: 
1:89e0da0:     public static void main(String[] args)
1:89e0da0:     {
1:89e0da0:         new ConcurrentImplicitCreateSchema().go(args);
1:89e0da0:     }
1:89e0da0: 
1:89e0da0:     void go(String[] args)
1:89e0da0:     {
1:89e0da0:         System.out.println("Test ConcurrentImplicitCreateSchema starting");
1:89e0da0: 
1:89e0da0:         try {
1:89e0da0:             // Load the JDBC Driver class
1:89e0da0:             // use the ij utility to read the property file and
1:89e0da0:             // make the initial connection.
1:89e0da0:             ij.getPropertyArg(args);
1:89e0da0:             Connection conn = ij.startJBMS();
1:89e0da0: 
1:89e0da0:             conn.setAutoCommit(true);
1:89e0da0: 
1:89e0da0:             // Drop the schemas we will be using in case they exist.
1:89e0da0:             // This will ensure that they are implicitly created by this test
1:89e0da0:             Statement s = conn.createStatement();
1:89e0da0: 
1:89e0da0:             // Number of schemas to use.  An equal number of threads
1:89e0da0:             // will operate on each schema.
1:89e0da0:             final int NSCHEMAS = 1;
1:89e0da0: 
1:89e0da0:             for (int i=0; i < NSCHEMAS; ++i) {
1:89e0da0:                 try {
1:89e0da0:                     s.execute("drop schema testschema" + i + " restrict");
1:89e0da0:                 } catch (SQLException e) {
1:89e0da0:                     if (e.getSQLState().equals("42Y07")) {
1:89e0da0:                         // IGNORE. Schema did not exist. That is our target.
1:89e0da0:                     } else {
1:89e0da0:                         throw e;
1:89e0da0:                     }
1:89e0da0:                 }
1:89e0da0:             }
1:89e0da0: 
1:89e0da0:             // Number of threads to run.  
1:89e0da0:             final int NTHREADS = 100;  
1:89e0da0: 
1:89e0da0:             // Create threads
1:89e0da0:             Thread[] threads = new Thread[NTHREADS];
1:89e0da0:             for (int i=0; i<NTHREADS; ++i) {
1:89e0da0:                 threads[i] 
1:89e0da0:                     = new Thread(new CreateTable(i, i%NSCHEMAS, this));
1:89e0da0:             }
1:89e0da0:             
1:89e0da0:             // Start threads
1:89e0da0:             for (int i=0; i<NTHREADS; ++i) {
1:89e0da0:                 threads[i].start();           
1:89e0da0:             }         
1:89e0da0:             
1:89e0da0:             // Wait for threads to complete
1:89e0da0:             for (int i=0; i<NTHREADS; ++i) {
1:89e0da0:                 threads[i].join();           
1:89e0da0:             }
1:89e0da0:   
1:89e0da0:             conn.close();
1:89e0da0:             System.out.println("Closed connection");
1:89e0da0:         } catch (Throwable e) {
1:89e0da0:             System.out.println("exception thrown:");
1:89e0da0:             failed(e);
1:89e0da0:         }
1:89e0da0: 
1:89e0da0:         System.out.print("Test ConcurrentImplicitCreateSchema ");
1:89e0da0:         if (passed) {
1:89e0da0:             System.out.println("PASSED");
1:89e0da0:         } else {
1:89e0da0:             System.out.println("FAILED");
1:89e0da0: 	}
1:89e0da0:     }
1:89e0da0: 
1:89e0da0:     void failed(Throwable e) 
1:89e0da0:     {
1:89e0da0:         if (e instanceof SQLException) {
1:89e0da0:             printSQLError((SQLException) e);
1:89e0da0:         } else {
1:89e0da0:             e.printStackTrace();
1:89e0da0:         }
1:89e0da0:         passed = false;
1:89e0da0:     }
1:89e0da0: 
1:89e0da0:     void printSQLError(SQLException e)
1:89e0da0:     {
1:89e0da0:         while (e != null)
1:89e0da0:         {
1:89e0da0:             System.out.println(e.toString());
1:89e0da0:             e.printStackTrace();
1:89e0da0:             e = e.getNextException();
1:89e0da0:         }
1:89e0da0:     }
1:89e0da0: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:                    ClassNotFoundException, InstantiationException, NoSuchMethodException,
1:                    java.lang.reflect.InvocationTargetException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:89e0da0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang. ConcurrentImplicitCreateSchema.java
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derby.tools.ij;
1: 
1: /**
1:  * Test for several threads creating tables in the same originally
1:  * non-existing schema.  This will cause an implicit creation of the
1:  * schema.  The test was created for the fix of JIRA issue DERBY-230
1:  * where an error occurred if two threads try to create the schema in
1:  * parallel.
1:  * 
0:  * @author oystein.grovlen@sun.com
1:  */
1: 
1: public class ConcurrentImplicitCreateSchema
1: {
1:     
1:     /**
1:      * Runnable that will create and drop table.
1:      */
1:     class CreateTable implements Runnable 
1:     {
1:         /** Id of the thread running this instance */
1:         private int myId;
1:         /** Which schema to use */
1:         private int schemaId;
1:         /** Database connection for this thread */
1:         private Connection conn = null;
1:         /** Test object. Used to inform about failures. */
1:         private ConcurrentImplicitCreateSchema test;
1: 
1:         CreateTable(int id, int schemaId, 
1:                     ConcurrentImplicitCreateSchema test) 
1:             throws SQLException, IllegalAccessException, 
0:                    ClassNotFoundException, InstantiationException
1:         {
1:             this.myId = id;
1:             this.schemaId = schemaId;
1:             this.test = test; 
1: 
1:             // Open a connection for this thread
1:             conn = ij.startJBMS();
1:             conn.setAutoCommit(false);
1:         }
1:      
1:         public void run()        
1:         {
1:             try {
1:                 Statement s = conn.createStatement();
1:                 s.execute("create table testschema" + schemaId + ".testtab" 
1:                           + myId + "(num int, addr varchar(40))");
1:                 s.execute("drop table testschema" + schemaId + ".testtab" 
1:                           + myId);
1:             } catch (SQLException e) {
1:                 test.failed(e);
1:             } 
1:   
1:             // We should close the transaction regardless of outcome 
1:             // Otherwise, other threads may wait on transactional 
1:             // locks until this transaction times out.
1:             try {
1:                 conn.commit();
1:                 conn.close();
1:             } catch (SQLException e) {
1:                 test.failed(e);
1:             }
1:             //            System.out.println("Thread " + myId + " completed.");
1:         }
1:     }
1:     
1:     /** 
1:      * Outcome of test.  
1:      * Will be set to false if any failure is detected.
1:      */
1:     boolean passed = true;
1: 
1:     public static void main(String[] args)
1:     {
1:         new ConcurrentImplicitCreateSchema().go(args);
1:     }
1: 
1:     void go(String[] args)
1:     {
1:         System.out.println("Test ConcurrentImplicitCreateSchema starting");
1: 
1:         try {
1:             // Load the JDBC Driver class
1:             // use the ij utility to read the property file and
1:             // make the initial connection.
1:             ij.getPropertyArg(args);
1:             Connection conn = ij.startJBMS();
1: 
1:             conn.setAutoCommit(true);
1: 
1:             // Drop the schemas we will be using in case they exist.
1:             // This will ensure that they are implicitly created by this test
1:             Statement s = conn.createStatement();
1: 
1:             // Number of schemas to use.  An equal number of threads
1:             // will operate on each schema.
1:             final int NSCHEMAS = 1;
1: 
1:             for (int i=0; i < NSCHEMAS; ++i) {
1:                 try {
1:                     s.execute("drop schema testschema" + i + " restrict");
1:                 } catch (SQLException e) {
1:                     if (e.getSQLState().equals("42Y07")) {
1:                         // IGNORE. Schema did not exist. That is our target.
1:                     } else {
1:                         throw e;
1:                     }
1:                 }
1:             }
1: 
1:             // Number of threads to run.  
1:             final int NTHREADS = 100;  
1: 
1:             // Create threads
1:             Thread[] threads = new Thread[NTHREADS];
1:             for (int i=0; i<NTHREADS; ++i) {
1:                 threads[i] 
1:                     = new Thread(new CreateTable(i, i%NSCHEMAS, this));
1:             }
1:             
1:             // Start threads
1:             for (int i=0; i<NTHREADS; ++i) {
1:                 threads[i].start();           
1:             }         
1:             
1:             // Wait for threads to complete
1:             for (int i=0; i<NTHREADS; ++i) {
1:                 threads[i].join();           
1:             }
1:   
1:             conn.close();
1:             System.out.println("Closed connection");
1:         } catch (Throwable e) {
1:             System.out.println("exception thrown:");
1:             failed(e);
1:         }
1: 
1:         System.out.print("Test ConcurrentImplicitCreateSchema ");
1:         if (passed) {
1:             System.out.println("PASSED");
1:         } else {
1:             System.out.println("FAILED");
1: 	}
1:     }
1: 
1:     void failed(Throwable e) 
1:     {
1:         if (e instanceof SQLException) {
1:             printSQLError((SQLException) e);
1:         } else {
1:             e.printStackTrace();
1:         }
1:         passed = false;
1:     }
1: 
1:     void printSQLError(SQLException e)
1:     {
1:         while (e != null)
1:         {
1:             System.out.println(e.toString());
1:             e.printStackTrace();
1:             e = e.getNextException();
1:         }
1:     }
1: }
============================================================================