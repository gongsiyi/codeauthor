1:22d64f5: /*
1:22d64f5: 
1:22d64f5:    Derby - Class org.apache.derby.catalog.types.AggregateAliasInfo
1:22d64f5: 
1:22d64f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:22d64f5:    contributor license agreements.  See the NOTICE file distributed with
1:22d64f5:    this work for additional information regarding copyright ownership.
1:22d64f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:22d64f5:    (the "License"); you may not use this file except in compliance with
1:22d64f5:    the License.  You may obtain a copy of the License at
1:22d64f5: 
1:22d64f5:       http://www.apache.org/licenses/LICENSE-2.0
1:22d64f5: 
1:22d64f5:    Unless required by applicable law or agreed to in writing, software
1:22d64f5:    distributed under the License is distributed on an "AS IS" BASIS,
1:22d64f5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:22d64f5:    See the License for the specific language governing permissions and
1:22d64f5:    limitations under the License.
1:22d64f5: 
1:22d64f5:  */
1:22d64f5: 
1:22d64f5: package org.apache.derby.catalog.types;
1:22d64f5: 
1:22d64f5: import java.io.IOException;
1:22d64f5: import java.io.ObjectInput;
1:22d64f5: import java.io.ObjectOutput;
1:22d64f5: 
1:22d64f5: import org.apache.derby.iapi.services.io.Formatable;
1:22d64f5: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:a35cf8d: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:22d64f5: import org.apache.derby.catalog.AliasInfo;
1:22d64f5: import org.apache.derby.catalog.TypeDescriptor;
1:22d64f5: 
1:22d64f5: /**
1:22d64f5:  * Describe a G (Aggregate) alias. The AggregateAliasInfo maintains a version stamp so that it
1:22d64f5:  * can evolve its persistent form over time.
1:22d64f5:  *
1:22d64f5:  * @see AliasInfo
1:22d64f5:  */
1:22d64f5: public class AggregateAliasInfo implements AliasInfo, Formatable
1:22d64f5: {
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5:     //
1:22d64f5:     // CONSTANTS
1:22d64f5:     //
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5: 
1:22d64f5:     private static final int FIRST_VERSION = 0;
1:22d64f5: 
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5:     //
1:22d64f5:     // STATE
1:22d64f5:     //
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5: 
1:22d64f5:     private TypeDescriptor  _forType;
1:22d64f5:     private TypeDescriptor  _returnType;
1:22d64f5: 
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5:     //
1:22d64f5:     // CONSTRUCTOR
1:22d64f5:     //
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5: 
1:22d64f5:     /** no-arg constructor for Formatable machinery */
1:22d64f5: 	public AggregateAliasInfo() {}
1:22d64f5: 
1:22d64f5:     /** Construct from pieces */
1:22d64f5:     public  AggregateAliasInfo
1:22d64f5:         (
1:22d64f5:          TypeDescriptor forType,
1:22d64f5:          TypeDescriptor returnType
1:22d64f5:          )
1:22d64f5:     {
1:22d64f5:         _forType = forType;
1:22d64f5:         _returnType = returnType;
1:22d64f5:     }
1:22d64f5: 
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5:     //
1:22d64f5:     // AliasInfo BEHAVIOR
1:22d64f5:     //
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5: 
1:22d64f5: 	public boolean isTableFunction() { return false; }
1:22d64f5: 
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5:     //
1:c8603c4:     // ACCESSORS
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4: 	public TypeDescriptor   getForType() { return _forType; }
1:c8603c4:     public TypeDescriptor   getReturnType() { return _returnType; }
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:a35cf8d:     // BIND TIME LOGIC
1:a35cf8d:     //
1:a35cf8d:     ///////////////////////////////////////////////////////////////////////////////////
1:a35cf8d: 
1:a35cf8d:     /**
1:a35cf8d:      * Set the collation type for string input and return types.
1:a35cf8d:      */
1:a35cf8d:     public void setCollationTypeForAllStringTypes( int collationType )
1:a35cf8d:     {
1:a35cf8d:         _forType = DataTypeDescriptor.getCatalogType( _forType, collationType );
1:a35cf8d:         _returnType = DataTypeDescriptor.getCatalogType( _returnType, collationType );
1:a35cf8d:     }
1:a35cf8d:     
1:a35cf8d:     ///////////////////////////////////////////////////////////////////////////////////
1:a35cf8d:     //
1:22d64f5:     // Formatable BEHAVIOR
1:22d64f5:     //
1:22d64f5:     ///////////////////////////////////////////////////////////////////////////////////
1:22d64f5: 
1:22d64f5: 	/**
1:22d64f5: 	 * Read this object from a stream of stored objects.
1:22d64f5: 	 *
1:22d64f5: 	 * @param in read this.
1:22d64f5: 	 *
1:22d64f5: 	 * @exception IOException					thrown on error
1:22d64f5: 	 * @exception ClassNotFoundException		thrown on error
1:22d64f5: 	 */
1:22d64f5: 	public void readExternal( ObjectInput in )
1:22d64f5: 		 throws IOException, ClassNotFoundException
1:22d64f5: 	{
1:22d64f5:         // as the persistent form evolves, switch on this value
1:22d64f5:         int oldVersion = in.readInt();
1:22d64f5: 
1:22d64f5:         _forType = (TypeDescriptor) in.readObject();
1:22d64f5:         _returnType = (TypeDescriptor) in.readObject();
1:22d64f5: 	}
1:22d64f5: 
1:22d64f5: 	/**
1:22d64f5: 	 * Write this object to a stream of stored objects.
1:22d64f5: 	 *
1:22d64f5: 	 * @param out write bytes here.
1:22d64f5: 	 *
1:22d64f5: 	 * @exception IOException		thrown on error
1:22d64f5: 	 */
1:22d64f5: 	public void writeExternal( ObjectOutput out )
1:22d64f5: 		 throws IOException
1:22d64f5: 	{
1:22d64f5: 		out.writeInt( FIRST_VERSION );
1:22d64f5: 
1:22d64f5:         out.writeObject( _forType );
1:22d64f5:         out.writeObject( _returnType );
1:22d64f5: 	}
1:22d64f5:  
1:22d64f5: 	/**
1:22d64f5: 	 * Get the formatID which corresponds to this class.
1:22d64f5: 	 *
1:22d64f5: 	 *	@return	the formatID of this class
1:22d64f5: 	 */
1:22d64f5: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGGREGATE_INFO_V01_ID; }
1:22d64f5: 
1:22d64f5:     /**
1:22d64f5:      * This is used by dblook to reconstruct the aggregate-specific parts of the ddl
1:22d64f5:      * needed to recreate this alias.
1:22d64f5:      */
1:22d64f5: 	public String toString() {
1:22d64f5: 		return "FOR " + _forType.getSQLstring() +
1:22d64f5:             " RETURNS " + _returnType.getSQLstring();
1:22d64f5: 	}
1:22d64f5: 
1:22d64f5: 	public String getMethodName()
1:22d64f5: 	{
1:22d64f5: 		return null;
1:22d64f5: 	}
1:22d64f5: }
1:22d64f5: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a35cf8d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     // BIND TIME LOGIC
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set the collation type for string input and return types.
1:      */
1:     public void setCollationTypeForAllStringTypes( int collationType )
1:     {
1:         _forType = DataTypeDescriptor.getCatalogType( _forType, collationType );
1:         _returnType = DataTypeDescriptor.getCatalogType( _returnType, collationType );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1:     // ACCESSORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public TypeDescriptor   getForType() { return _forType; }
1:     public TypeDescriptor   getReturnType() { return _returnType; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
commit:22d64f5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.catalog.types.AggregateAliasInfo
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.catalog.AliasInfo;
1: import org.apache.derby.catalog.TypeDescriptor;
1: 
1: /**
1:  * Describe a G (Aggregate) alias. The AggregateAliasInfo maintains a version stamp so that it
1:  * can evolve its persistent form over time.
1:  *
1:  * @see AliasInfo
1:  */
1: public class AggregateAliasInfo implements AliasInfo, Formatable
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static final int FIRST_VERSION = 0;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private TypeDescriptor  _forType;
1:     private TypeDescriptor  _returnType;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** no-arg constructor for Formatable machinery */
1: 	public AggregateAliasInfo() {}
1: 
1:     /** Construct from pieces */
1:     public  AggregateAliasInfo
1:         (
1:          TypeDescriptor forType,
1:          TypeDescriptor returnType
1:          )
1:     {
1:         _forType = forType;
1:         _returnType = returnType;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // AliasInfo BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public boolean isTableFunction() { return false; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // Formatable BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1:         // as the persistent form evolves, switch on this value
1:         int oldVersion = in.readInt();
1: 
1:         _forType = (TypeDescriptor) in.readObject();
1:         _returnType = (TypeDescriptor) in.readObject();
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeInt( FIRST_VERSION );
1: 
1:         out.writeObject( _forType );
1:         out.writeObject( _returnType );
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGGREGATE_INFO_V01_ID; }
1: 
1:     /**
1:      * This is used by dblook to reconstruct the aggregate-specific parts of the ddl
1:      * needed to recreate this alias.
1:      */
1: 	public String toString() {
1: 		return "FOR " + _forType.getSQLstring() +
1:             " RETURNS " + _returnType.getSQLstring();
1: 	}
1: 
1: 	public String getMethodName()
1: 	{
1: 		return null;
1: 	}
1: }
1: 
============================================================================