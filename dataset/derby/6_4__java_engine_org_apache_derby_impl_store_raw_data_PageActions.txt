1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.PageActions
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: 
1:eac0369: public interface PageActions 
1:eac0369: {
1:eac0369: 
2:eac0369:     /**
1:eac0369:      * Set the Delete status of the record at the given slot.
1:eac0369:      * <p>
1:eac0369:      * Subclass that implements this method has to call 
1:eac0369:      * BasePage.setDeleteStatus to update the delete status on the in-memory 
1:eac0369:      * slot table.
1:eac0369:      * <p>
1:eac0369:      * <BR> MT - latched, page is latched when this methods is called.
1:eac0369:      * @param t				    The transaction
1:eac0369:      * @param page				the target page
1:eac0369:      * @param slot				the slot number of the record 
1:eac0369:      * @param recordId			the recordID of the record 
1:eac0369:      * @param delete			set the delete status to this value
1:eac0369:      * @param undo				logical undo logic if necessary
1:eac0369:      *
1:94f158a:      * @exception StandardException	Standard Derby error policy
1:eac0369:      * @see org.apache.derby.iapi.store.raw.Page#deleteAtSlot
1:eac0369:      **/
1:eac0369: 	public void actionDelete(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             slot, 
1:eac0369:     int             recordId, 
1:eac0369:     boolean         delete, 
1:eac0369:     LogicalUndo     undo)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Update record at the given slot with this row.
1:eac0369:      * <p>
1:eac0369:      * <BR> MT - latched, page is latched when this methods is called.
1:eac0369:      *
1:20bc69f:      * @param t         	    The transaction
1:20bc69f:      * @param page			    the updated page
1:20bc69f:      * @param slot			    the slot number of the record 
1:20bc69f:      * @param recordId		    the recordID of the record 
1:20bc69f:      * @param row			    The new storable row
1:20bc69f:      * @param validColumns	    the columns that needs to be updated
1:eac0369:      * @param realStartColumn	the first column that is updated
1:20bc69f:      * @param logBuffer		    where to prepare the log record
1:eac0369:      * @param realSpaceOnPage	??
1:eac0369:      * @param headRowHandle	the record handle of the head row
1:eac0369:      *
1:eac0369:      * @return the next column to update in the row or,
1:eac0369:      *         -1 if the update has been completed.
1:eac0369:      *
1:94f158a:      * @exception StandardException	Standard Derby error policy
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.store.raw.Page#updateAtSlot
1:eac0369:      **/
1:eac0369: 	public int actionUpdate(
1:20bc69f:     RawTransaction                  t, 
1:20bc69f:     BasePage                        page, 
1:20bc69f:     int                             slot, 
1:20bc69f:     int                             recordId,
1:20bc69f:     Object[]                        row, 
1:20bc69f:     FormatableBitSet                validColumns,
1:20bc69f:     int                             realStartColumn, 
1:20bc69f:     DynamicByteArrayOutputStream    logBuffer, 
1:20bc69f:     int                             realSpaceOnPage, 
1:20bc69f:     RecordHandle                    headRowHandle)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Purge the record at the given slot.
1:eac0369:      * <p>
1:eac0369:      * Subclass that implements this method has to remove the slot from the 
1:eac0369:      * base page in-memory slot table (removeAndShiftDown).
1:eac0369:      * <p>
1:eac0369:      * <BR> MT - latched, page is latched when this methods is called.
1:eac0369:      *
1:eac0369:      * @param t				The transaction
1:eac0369:      * @param slot			the starting slot number of the record 
1:eac0369:      * @param num_rows		how many rows to purge
1:eac0369:      * @param recordIds		the recordIDs of the record (an array of num_rows)
1:eac0369:      *
1:94f158a:      * @exception StandardException	Standard Derby error policy
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.store.raw.Page#purgeAtSlot
1:eac0369:      **/
1:eac0369: 	public void actionPurge(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             slot, 
1:eac0369:     int             num_rows, 
1:eac0369:     int[]           recordIds,
1:eac0369: 	boolean         logData)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Update a field of the record at the given slot with this value.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * <BR> MT - latched, page is latched when this methods is called.
1:eac0369:      *
1:20bc69f:      * @param t         	The transaction
2:eac0369:      * @param slot			the slot number of the record 
2:eac0369:      * @param recordId		the recordID of the record 
1:eac0369:      * @param fieldId		the fieldId of the value
1:20bc69f:      * @param newValue      the new value for the field
1:eac0369:      * @param undo          if logical undo may be necessary, a function 
1:eac0369:      *                      pointer to the access code where the logical undo 
1:eac0369:      *                      logic resides.   Null if logical undo is not 
1:eac0369:      *                      necessary.
1:eac0369:      *
1:94f158a:      * @exception StandardException	Standard Derby error policy
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.store.raw.Page#updateFieldAtSlot
1:eac0369:      *
1:eac0369:      **/
1:eac0369: 	public void actionUpdateField(
2:eac0369:     RawTransaction          t, 
2:eac0369:     BasePage                page, 
2:eac0369:     int                     slot, 
2:eac0369:     int                     recordId, 
1:eac0369:     int                     fieldId, 
1:eac0369:     Object     newValue, 
1:eac0369:     LogicalUndo             undo)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Insert record at the given slot with this recordId. 
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * <BR> MT - latched, page is latched when this methods is called.
1:eac0369:      *
1:20bc69f:      * @param t             	The transaction
1:eac0369:      * @param slot			    the slot number of the record 
1:eac0369:      * @param recordId		    the recordID of the record 
1:eac0369:      * @param row			    The storable row
1:eac0369:      * @param undo              if logical undo may be necessary, a function 
1:eac0369:      *                          pointer to the access code where the logical 
1:eac0369:      *                          undo logic resides.   Null if logical undo is 
1:eac0369:      *                          not necessary.
1:eac0369:      * @param insertFlag		see Page value for insertFlag
1:eac0369:      *
1:94f158a:      * @exception StandardException	Standard Derby error policy
1:eac0369:      *
1:eac0369:      * @see org.apache.derby.iapi.store.raw.Page#insertAtSlot
1:eac0369:      **/
1:eac0369: 	public int actionInsert(
1:eac0369:     RawTransaction          t, 
1:eac0369:     BasePage                page, 
1:eac0369:     int                     slot, 
1:eac0369:     int                     recordId,
1:eac0369:     Object[]                row, 
2:eac0369:     FormatableBitSet                 validColumns,
1:eac0369:     LogicalUndo             undo, 
1:eac0369:     byte                    insertFlag, 
1:eac0369:     int                     startColumn, 
1:eac0369:     boolean                 isLongColumn,
2:eac0369:     int                     realStartColumn, 
2:eac0369:     DynamicByteArrayOutputStream  logBuffer, 
2:eac0369:     int                     realSpaceOnPage, 
1:eac0369:     int                     overflowThreshold)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:20bc69f:      * Copy num_rows from srcPage into deestpage.
1:eac0369:      * <p>
1:eac0369:      * Longer descrption of routine.
1:eac0369:      * <p>
1:20bc69f:      * @param t             	The transaction
1:eac0369:      * @param destPage			the destination page
1:eac0369:      * @param srcPage			the source page
1:eac0369:      * @param destSlot			starting slot # of destination page to copy to
1:eac0369:      * @param numRows			the number of rows to be copied
1:eac0369:      * @param srcSlot			starting slot number of source page to copy from
1:eac0369:      * @param recordIds		    an array of record ids to use in the 
1:eac0369:      *                          destination page
1:eac0369:      *
1:94f158a:      * @exception StandardException Standard Derby policy.
1:eac0369:      **/
1:eac0369: 	public void actionCopyRows(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        destPage, 
1:eac0369:     BasePage        srcPage, 
1:eac0369:     int             destSlot, 
1:eac0369:     int             numRows, 
1:eac0369:     int             srcSlot, 
1:eac0369:     int[]           recordIds)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Invalidate the page due to deallocation.
1:eac0369:      * Short one line description of routine.
1:eac0369:      * <p>
1:eac0369:      * Invalidate the page due to deallocation - this is the action on the page
1:eac0369:      * that is being deallocated as opposed to the action on the allocation 
1:eac0369:      * page.
1:eac0369:      * <p>
1:eac0369:      *
1:20bc69f:      * @param t             	The transaction
1:eac0369:      * @param page				that page to be invalidated
1:eac0369:      *
1:94f158a:      * @exception StandardException Standard Derby policy.  
1:eac0369:      **/
1:eac0369: 	public void actionInvalidatePage(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Initialize the page due to allocation.
1:eac0369:      * <p>
1:eac0369:      * Initialize the page due to allocation - this page could be brand new or 
1:eac0369:      * it could be being re-allocated.
1:eac0369:      * <p>
1:eac0369:      *
1:20bc69f:      * @param t             	The transaction
1:eac0369:      * @param page				that page to be initialized
1:eac0369:      * @param initFlag			flags set to values in BasePage.INIT_PAGE_* 
1:eac0369:      *                          which indicates how the new page is to be
1:eac0369:      *                          initialized.
1:eac0369:      * @param pageFormatId		The format Id of the page being initialized.
1:eac0369:      *
1:94f158a:      * @exception StandardException Standard Derby policy.
1:eac0369:      **/
1:eac0369: 	public void actionInitPage(
1:eac0369:     RawTransaction  t, 
1:eac0369:     BasePage        page, 
1:eac0369:     int             initFlag, 
1:eac0369:     int             pageFormatId, 
1:eac0369:     long            pageOffset)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Shrink the reserved space to the new value.  
1:eac0369:      * <p>
1:eac0369:      * Shrink the reserved space to the new value.  This action is not undoable.
1:eac0369:      * <p>
1:20bc69f:      * @param t             	The transaction
1:eac0369:      * @param page				that page to be initialized
1:eac0369:      * @param slot				the slot number of the record 
1:eac0369:      * @param recordId			the recordID of the record 
1:eac0369:      * @param newValue			the new reserved space value
1:eac0369:      *
1:eac0369:      * @exception StandardException Unexpected exception from the implementation
1:eac0369:      *
1:eac0369:      **/
1:eac0369: 	 public void actionShrinkReservedSpace(
1:eac0369:      RawTransaction t, 
1:eac0369:      BasePage       page,
1:eac0369:      int            slot, 
1:eac0369:      int            recordId, 
1:eac0369:      int            newValue, 
1:eac0369:      int            oldValue)
1:eac0369: 		 throws StandardException;
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Standard Derby policy.
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Standard Derby policy.  
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Standard Derby policy.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
1:      * @param t         	    The transaction
1:      * @param page			    the updated page
1:      * @param slot			    the slot number of the record 
1:      * @param recordId		    the recordID of the record 
1:      * @param row			    The new storable row
1:      * @param validColumns	    the columns that needs to be updated
1:      * @param logBuffer		    where to prepare the log record
/////////////////////////////////////////////////////////////////////////
1:     RawTransaction                  t, 
1:     BasePage                        page, 
1:     int                             slot, 
1:     int                             recordId,
1:     Object[]                        row, 
1:     FormatableBitSet                validColumns,
1:     int                             realStartColumn, 
1:     DynamicByteArrayOutputStream    logBuffer, 
1:     int                             realSpaceOnPage, 
1:     RecordHandle                    headRowHandle)
/////////////////////////////////////////////////////////////////////////
1:      * @param t         	The transaction
1:      * @param newValue      the new value for the field
/////////////////////////////////////////////////////////////////////////
1:      * @param t             	The transaction
/////////////////////////////////////////////////////////////////////////
1:      * Copy num_rows from srcPage into deestpage.
1:      * @param t             	The transaction
/////////////////////////////////////////////////////////////////////////
1:      * @param t             	The transaction
/////////////////////////////////////////////////////////////////////////
1:      * @param t             	The transaction
/////////////////////////////////////////////////////////////////////////
1:      * @param t             	The transaction
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.PageActions
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1: 
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: 
1: public interface PageActions 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
1: 
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     /**
1:      * Set the Delete status of the record at the given slot.
1:      * <p>
1:      * Subclass that implements this method has to call 
1:      * BasePage.setDeleteStatus to update the delete status on the in-memory 
1:      * slot table.
1:      * <p>
1:      * <BR> MT - latched, page is latched when this methods is called.
1:      * @param t				    The transaction
1:      * @param page				the target page
1:      * @param slot				the slot number of the record 
1:      * @param recordId			the recordID of the record 
1:      * @param delete			set the delete status to this value
1:      * @param undo				logical undo logic if necessary
1:      *
0:      * @exception StandardException	Standard Cloudscape error policy
1:      * @see org.apache.derby.iapi.store.raw.Page#deleteAtSlot
1:      **/
1: 	public void actionDelete(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             slot, 
1:     int             recordId, 
1:     boolean         delete, 
1:     LogicalUndo     undo)
1: 		throws StandardException;
1: 
1: 
1:     /**
1:      * Update record at the given slot with this row.
1:      * <p>
1:      * <BR> MT - latched, page is latched when this methods is called.
1:      *
0:      * @param RawTransaction	The transaction
0:      * @param page			the updated page
1:      * @param slot			the slot number of the record 
1:      * @param recordId		the recordID of the record 
0:      * @param row			The new storable row
0:      * @param validColumns	the columns that needs to be updated
1:      * @param realStartColumn	the first column that is updated
0:      * @param logBuffer		where to prepare the log record
1:      * @param realSpaceOnPage	??
1:      * @param headRowHandle	the record handle of the head row
1:      *
1:      * @return the next column to update in the row or,
1:      *         -1 if the update has been completed.
1:      *
0:      * @exception StandardException	Standard Cloudscape error policy
1:      *
1:      * @see org.apache.derby.iapi.store.raw.Page#updateAtSlot
1:      **/
1: 	public int actionUpdate(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId,
0:     Object[]   row, 
1:     FormatableBitSet                 validColumns,
1:     int                     realStartColumn, 
1:     DynamicByteArrayOutputStream  logBuffer, 
1:     int                     realSpaceOnPage, 
0:     RecordHandle            headRowHandle)
1: 		throws StandardException;
1: 
1:     /**
1:      * Purge the record at the given slot.
1:      * <p>
1:      * Subclass that implements this method has to remove the slot from the 
1:      * base page in-memory slot table (removeAndShiftDown).
1:      * <p>
1:      * <BR> MT - latched, page is latched when this methods is called.
1:      *
1:      * @param t				The transaction
1:      * @param slot			the starting slot number of the record 
1:      * @param num_rows		how many rows to purge
1:      * @param recordIds		the recordIDs of the record (an array of num_rows)
1:      *
0:      * @exception StandardException	Standard Cloudscape error policy
1:      *
1:      * @see org.apache.derby.iapi.store.raw.Page#purgeAtSlot
1:      **/
1: 	public void actionPurge(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             slot, 
1:     int             num_rows, 
1:     int[]           recordIds,
1: 	boolean         logData)
1: 		throws StandardException;
1: 
1:     /**
1:      * Update a field of the record at the given slot with this value.
1:      * <p>
1:      *
1:      * <BR> MT - latched, page is latched when this methods is called.
1:      *
0:      * @param RawTransaction	The transaction
1:      * @param slot			the slot number of the record 
1:      * @param recordId		the recordID of the record 
1:      * @param fieldId		the fieldId of the value
0:      * @param value			the new value for the field
1:      * @param undo          if logical undo may be necessary, a function 
1:      *                      pointer to the access code where the logical undo 
1:      *                      logic resides.   Null if logical undo is not 
1:      *                      necessary.
1:      *
0:      * @exception StandardException	Standard Cloudscape error policy
1:      *
1:      * @see org.apache.derby.iapi.store.raw.Page#updateFieldAtSlot
1:      *
1:      **/
1: 	public void actionUpdateField(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId, 
1:     int                     fieldId, 
1:     Object     newValue, 
1:     LogicalUndo             undo)
1: 		throws StandardException;
1: 
1:     /**
1:      * Insert record at the given slot with this recordId. 
1:      * <p>
1:      *
1:      * <BR> MT - latched, page is latched when this methods is called.
1:      *
0:      * @param RawTransaction	The transaction
1:      * @param slot			    the slot number of the record 
1:      * @param recordId		    the recordID of the record 
1:      * @param row			    The storable row
1:      * @param undo              if logical undo may be necessary, a function 
1:      *                          pointer to the access code where the logical 
1:      *                          undo logic resides.   Null if logical undo is 
1:      *                          not necessary.
1:      * @param insertFlag		see Page value for insertFlag
1:      *
0:      * @exception StandardException	Standard Cloudscape error policy
1:      *
1:      * @see org.apache.derby.iapi.store.raw.Page#insertAtSlot
1:      **/
1: 	public int actionInsert(
1:     RawTransaction          t, 
1:     BasePage                page, 
1:     int                     slot, 
1:     int                     recordId,
1:     Object[]                row, 
1:     FormatableBitSet                 validColumns,
1:     LogicalUndo             undo, 
1:     byte                    insertFlag, 
1:     int                     startColumn, 
1:     boolean                 isLongColumn,
1:     int                     realStartColumn, 
1:     DynamicByteArrayOutputStream  logBuffer, 
1:     int                     realSpaceOnPage, 
1:     int                     overflowThreshold)
1: 		throws StandardException;
1: 
1:     /**
0:      * Copy num_rows from srcPage into deestpage
1:      * <p>
1:      * Longer descrption of routine.
1:      * <p>
0:      * @param RawTransaction	The transaction
1:      * @param destPage			the destination page
1:      * @param srcPage			the source page
1:      * @param destSlot			starting slot # of destination page to copy to
1:      * @param numRows			the number of rows to be copied
1:      * @param srcSlot			starting slot number of source page to copy from
1:      * @param recordIds		    an array of record ids to use in the 
1:      *                          destination page
1:      *
0:      * @exception StandardException Standard Cloudscape policy.
1:      **/
1: 	public void actionCopyRows(
1:     RawTransaction  t, 
1:     BasePage        destPage, 
1:     BasePage        srcPage, 
1:     int             destSlot, 
1:     int             numRows, 
1:     int             srcSlot, 
1:     int[]           recordIds)
1: 		throws StandardException;
1: 
1:     /**
1:      * Invalidate the page due to deallocation.
1:      * Short one line description of routine.
1:      * <p>
1:      * Invalidate the page due to deallocation - this is the action on the page
1:      * that is being deallocated as opposed to the action on the allocation 
1:      * page.
1:      * <p>
1:      *
0:      * @param RawTransaction	The transaction
1:      * @param page				that page to be invalidated
1:      *
0:      * @exception StandardException Standard Cloudscape policy.  
1:      **/
1: 	public void actionInvalidatePage(
1:     RawTransaction  t, 
1:     BasePage        page)
1: 		 throws StandardException;
1: 
1:     /**
1:      * Initialize the page due to allocation.
1:      * <p>
1:      * Initialize the page due to allocation - this page could be brand new or 
1:      * it could be being re-allocated.
1:      * <p>
1:      *
0:      * @param RawTransaction	The transaction
1:      * @param page				that page to be initialized
1:      * @param initFlag			flags set to values in BasePage.INIT_PAGE_* 
1:      *                          which indicates how the new page is to be
1:      *                          initialized.
1:      * @param pageFormatId		The format Id of the page being initialized.
1:      *
0:      * @exception StandardException Standard Cloudscape policy.
1:      **/
1: 	public void actionInitPage(
1:     RawTransaction  t, 
1:     BasePage        page, 
1:     int             initFlag, 
1:     int             pageFormatId, 
1:     long            pageOffset)
1: 		 throws StandardException;
1: 
1:     /**
1:      * Shrink the reserved space to the new value.  
1:      * <p>
1:      * Shrink the reserved space to the new value.  This action is not undoable.
1:      * <p>
0:      * @param RawTransaction	The transaction
1:      * @param page				that page to be initialized
1:      * @param slot				the slot number of the record 
1:      * @param recordId			the recordID of the record 
1:      * @param newValue			the new reserved space value
1:      *
1:      * @exception StandardException Unexpected exception from the implementation
1:      *
1:      **/
1: 	 public void actionShrinkReservedSpace(
1:      RawTransaction t, 
1:      BasePage       page,
1:      int            slot, 
1:      int            recordId, 
1:      int            newValue, 
1:      int            oldValue)
1: 		 throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: 
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: 
0: public interface PageActions 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0: 
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     /**
0:      * Set the Delete status of the record at the given slot.
0:      * <p>
0:      * Subclass that implements this method has to call 
0:      * BasePage.setDeleteStatus to update the delete status on the in-memory 
0:      * slot table.
0:      * <p>
0:      * <BR> MT - latched, page is latched when this methods is called.
0:      * @param t				    The transaction
0:      * @param page				the target page
0:      * @param slot				the slot number of the record 
0:      * @param recordId			the recordID of the record 
0:      * @param delete			set the delete status to this value
0:      * @param undo				logical undo logic if necessary
0:      *
0:      * @exception StandardException	Standard Cloudscape error policy
0:      * @see org.apache.derby.iapi.store.raw.Page#deleteAtSlot
0:      **/
0: 	public void actionDelete(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             slot, 
0:     int             recordId, 
0:     boolean         delete, 
0:     LogicalUndo     undo)
0: 		throws StandardException;
0: 
0: 
0:     /**
0:      * Update record at the given slot with this row.
0:      * <p>
0:      * <BR> MT - latched, page is latched when this methods is called.
0:      *
0:      * @param RawTransaction	The transaction
0:      * @param page			the updated page
0:      * @param slot			the slot number of the record 
0:      * @param recordId		the recordID of the record 
0:      * @param row			The new storable row
0:      * @param validColumns	the columns that needs to be updated
0:      * @param realStartColumn	the first column that is updated
0:      * @param logBuffer		where to prepare the log record
0:      * @param realSpaceOnPage	??
0:      * @param headRowHandle	the record handle of the head row
0:      *
0:      * @return the next column to update in the row or,
0:      *         -1 if the update has been completed.
0:      *
0:      * @exception StandardException	Standard Cloudscape error policy
0:      *
0:      * @see org.apache.derby.iapi.store.raw.Page#updateAtSlot
0:      **/
0: 	public int actionUpdate(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId,
0:     Object[]   row, 
0:     FormatableBitSet                 validColumns,
0:     int                     realStartColumn, 
0:     DynamicByteArrayOutputStream  logBuffer, 
0:     int                     realSpaceOnPage, 
0:     RecordHandle            headRowHandle)
0: 		throws StandardException;
0: 
0:     /**
0:      * Purge the record at the given slot.
0:      * <p>
0:      * Subclass that implements this method has to remove the slot from the 
0:      * base page in-memory slot table (removeAndShiftDown).
0:      * <p>
0:      * <BR> MT - latched, page is latched when this methods is called.
0:      *
0:      * @param t				The transaction
0:      * @param slot			the starting slot number of the record 
0:      * @param num_rows		how many rows to purge
0:      * @param recordIds		the recordIDs of the record (an array of num_rows)
0:      *
0:      * @exception StandardException	Standard Cloudscape error policy
0:      *
0:      * @see org.apache.derby.iapi.store.raw.Page#purgeAtSlot
0:      **/
0: 	public void actionPurge(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             slot, 
0:     int             num_rows, 
0:     int[]           recordIds,
0: 	boolean         logData)
0: 		throws StandardException;
0: 
0:     /**
0:      * Update a field of the record at the given slot with this value.
0:      * <p>
0:      *
0:      * <BR> MT - latched, page is latched when this methods is called.
0:      *
0:      * @param RawTransaction	The transaction
0:      * @param slot			the slot number of the record 
0:      * @param recordId		the recordID of the record 
0:      * @param fieldId		the fieldId of the value
0:      * @param value			the new value for the field
0:      * @param undo          if logical undo may be necessary, a function 
0:      *                      pointer to the access code where the logical undo 
0:      *                      logic resides.   Null if logical undo is not 
0:      *                      necessary.
0:      *
0:      * @exception StandardException	Standard Cloudscape error policy
0:      *
0:      * @see org.apache.derby.iapi.store.raw.Page#updateFieldAtSlot
0:      *
0:      **/
0: 	public void actionUpdateField(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId, 
0:     int                     fieldId, 
0:     Object     newValue, 
0:     LogicalUndo             undo)
0: 		throws StandardException;
0: 
0:     /**
0:      * Insert record at the given slot with this recordId. 
0:      * <p>
0:      *
0:      * <BR> MT - latched, page is latched when this methods is called.
0:      *
0:      * @param RawTransaction	The transaction
0:      * @param slot			    the slot number of the record 
0:      * @param recordId		    the recordID of the record 
0:      * @param row			    The storable row
0:      * @param undo              if logical undo may be necessary, a function 
0:      *                          pointer to the access code where the logical 
0:      *                          undo logic resides.   Null if logical undo is 
0:      *                          not necessary.
0:      * @param insertFlag		see Page value for insertFlag
0:      *
0:      * @exception StandardException	Standard Cloudscape error policy
0:      *
0:      * @see org.apache.derby.iapi.store.raw.Page#insertAtSlot
0:      **/
0: 	public int actionInsert(
0:     RawTransaction          t, 
0:     BasePage                page, 
0:     int                     slot, 
0:     int                     recordId,
0:     Object[]                row, 
0:     FormatableBitSet                 validColumns,
0:     LogicalUndo             undo, 
0:     byte                    insertFlag, 
0:     int                     startColumn, 
0:     boolean                 isLongColumn,
0:     int                     realStartColumn, 
0:     DynamicByteArrayOutputStream  logBuffer, 
0:     int                     realSpaceOnPage, 
0:     int                     overflowThreshold)
0: 		throws StandardException;
0: 
0:     /**
0:      * Copy num_rows from srcPage into deestpage
0:      * <p>
0:      * Longer descrption of routine.
0:      * <p>
0:      * @param RawTransaction	The transaction
0:      * @param destPage			the destination page
0:      * @param srcPage			the source page
0:      * @param destSlot			starting slot # of destination page to copy to
0:      * @param numRows			the number of rows to be copied
0:      * @param srcSlot			starting slot number of source page to copy from
0:      * @param recordIds		    an array of record ids to use in the 
0:      *                          destination page
0:      *
0:      * @exception StandardException Standard Cloudscape policy.
0:      **/
0: 	public void actionCopyRows(
0:     RawTransaction  t, 
0:     BasePage        destPage, 
0:     BasePage        srcPage, 
0:     int             destSlot, 
0:     int             numRows, 
0:     int             srcSlot, 
0:     int[]           recordIds)
0: 		throws StandardException;
0: 
0:     /**
0:      * Invalidate the page due to deallocation.
0:      * Short one line description of routine.
0:      * <p>
0:      * Invalidate the page due to deallocation - this is the action on the page
0:      * that is being deallocated as opposed to the action on the allocation 
0:      * page.
0:      * <p>
0:      *
0:      * @param RawTransaction	The transaction
0:      * @param page				that page to be invalidated
0:      *
0:      * @exception StandardException Standard Cloudscape policy.  
0:      **/
0: 	public void actionInvalidatePage(
0:     RawTransaction  t, 
0:     BasePage        page)
0: 		 throws StandardException;
0: 
0:     /**
0:      * Initialize the page due to allocation.
0:      * <p>
0:      * Initialize the page due to allocation - this page could be brand new or 
0:      * it could be being re-allocated.
0:      * <p>
0:      *
0:      * @param RawTransaction	The transaction
0:      * @param page				that page to be initialized
0:      * @param initFlag			flags set to values in BasePage.INIT_PAGE_* 
0:      *                          which indicates how the new page is to be
0:      *                          initialized.
0:      * @param pageFormatId		The format Id of the page being initialized.
0:      *
0:      * @exception StandardException Standard Cloudscape policy.
0:      **/
0: 	public void actionInitPage(
0:     RawTransaction  t, 
0:     BasePage        page, 
0:     int             initFlag, 
0:     int             pageFormatId, 
0:     long            pageOffset)
0: 		 throws StandardException;
0: 
0:     /**
0:      * Shrink the reserved space to the new value.  
0:      * <p>
0:      * Shrink the reserved space to the new value.  This action is not undoable.
0:      * <p>
0:      * @param RawTransaction	The transaction
0:      * @param page				that page to be initialized
0:      * @param slot				the slot number of the record 
0:      * @param recordId			the recordID of the record 
0:      * @param newValue			the new reserved space value
0:      *
0:      * @exception StandardException Unexpected exception from the implementation
0:      *
0:      **/
0: 	 public void actionShrinkReservedSpace(
0:      RawTransaction t, 
0:      BasePage       page,
0:      int            slot, 
0:      int            recordId, 
0:      int            newValue, 
0:      int            oldValue)
0: 		 throws StandardException;
0: }
============================================================================