1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.MaxMinAggregator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:c8603c4: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:c8603c4: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Aggregator for MAX()/MIN().  Defers most of its work
1:eac0369:  * to OrderableAggregator.
1:eac0369:  *
1:eac0369:  * @see OrderableAggregator
1:eac0369:  *
1:eac0369:  */
1:eac0369: public final class MaxMinAggregator 
1:eac0369: 	extends OrderableAggregator
1:eac0369: {
1:eac0369: 
1:eac0369: 	private boolean isMax; // true for max, false for min
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 */
1:c8603c4: 	public void setup( ClassFactory cf, String aggregateName, DataTypeDescriptor returnType )
1:eac0369: 	{
1:c8603c4: 		super.setup( cf, aggregateName, returnType );
1:eac0369: 		isMax = aggregateName.equals("MAX");
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * Accumulate
1:eac0369:  	 *
1:eac0369: 	 * @param addend	value to be added in
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	protected void accumulate(DataValueDescriptor addend) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if ( (value == null) ||
1:eac0369: 			      (isMax && (value.compare(addend) < 0)) ||
1:eac0369: 				  (!isMax && (value.compare(addend) > 0))
1:eac0369: 				  )
1:eac0369: 		{
1:854dd10: 			/* NOTE: We need to call cloneValue since value gets
1:eac0369: 			 * reused underneath us
1:eac0369: 			 */
1:854dd10: 			value = addend.cloneValue(false);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @return ExecAggregator the new aggregator
1:eac0369: 	 */
1:eac0369: 	public ExecAggregator newAggregator()
1:eac0369: 	{
1:eac0369: 		MaxMinAggregator ma = new MaxMinAggregator();
1:eac0369: 		ma.isMax = isMax;
1:eac0369: 		return ma;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// FORMATABLE INTERFACE
1:eac0369: 	// 
1:a840fa5: 	// Formatable implementations usually invoke the super()
1:a840fa5: 	// version of readExternal or writeExternal first, then
1:a840fa5: 	// do the additional actions here. However, since the
1:a840fa5: 	// superclass of this class requires that its externalized
1:a840fa5: 	// data must be the last data in the external stream, we
1:a840fa5: 	// invoke the superclass's read/writeExternal method
1:a840fa5: 	// last, not first. See DERBY-3219 for more discussion.
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeBoolean(isMax);
1:a840fa5: 		super.writeExternal(out);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see java.io.Externalizable#readExternal 
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException on error
1:eac0369: 	 * @exception ClassNotFoundException on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException {
1:eac0369: 		isMax = in.readBoolean();
1:a840fa5: 		super.readExternal(in);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_MAX_MIN_V01_ID; }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:a840fa5
/////////////////////////////////////////////////////////////////////////
1: 	// Formatable implementations usually invoke the super()
1: 	// version of readExternal or writeExternal first, then
1: 	// do the additional actions here. However, since the
1: 	// superclass of this class requires that its externalized
1: 	// data must be the last data in the external stream, we
1: 	// invoke the superclass's read/writeExternal method
1: 	// last, not first. See DERBY-3219 for more discussion.
1: 		super.writeExternal(out);
/////////////////////////////////////////////////////////////////////////
1: 		super.readExternal(in);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
/////////////////////////////////////////////////////////////////////////
1: 	public void setup( ClassFactory cf, String aggregateName, DataTypeDescriptor returnType )
1: 		super.setup( cf, aggregateName, returnType );
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: 			/* NOTE: We need to call cloneValue since value gets
1: 			value = addend.cloneValue(false);
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.MaxMinAggregator
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:  * Aggregator for MAX()/MIN().  Defers most of its work
1:  * to OrderableAggregator.
1:  *
1:  * @see OrderableAggregator
1:  *
0:  * @author jamie
1:  */
1: public final class MaxMinAggregator 
1: 	extends OrderableAggregator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 
1: 	private boolean isMax; // true for max, false for min
1: 
1: 	/**
1: 	 */
0: 	public void setup(String aggregateName)
1: 	{
0: 		super.setup(aggregateName);
1: 		isMax = aggregateName.equals("MAX");
1: 	}
1: 	/**
1: 	 * Accumulate
1:  	 *
1: 	 * @param addend	value to be added in
1: 	 *
1: 	 * @exception StandardException on error
1: 	 *
1: 	 */
1: 	protected void accumulate(DataValueDescriptor addend) 
1: 		throws StandardException
1: 	{
1: 		if ( (value == null) ||
1: 			      (isMax && (value.compare(addend) < 0)) ||
1: 				  (!isMax && (value.compare(addend) > 0))
1: 				  )
1: 		{
0: 			/* NOTE: We need to call getClone() since value gets
1: 			 * reused underneath us
1: 			 */
0: 			value = addend.getClone();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @return ExecAggregator the new aggregator
1: 	 */
1: 	public ExecAggregator newAggregator()
1: 	{
1: 		MaxMinAggregator ma = new MaxMinAggregator();
1: 		ma.isMax = isMax;
1: 		return ma;
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// FORMATABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
0: 		super.writeExternal(out);
1: 		out.writeBoolean(isMax);
1: 	}
1: 
1: 	/** 
1: 	 * @see java.io.Externalizable#readExternal 
1: 	 *
1: 	 * @exception IOException on error
1: 	 * @exception ClassNotFoundException on error
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException {
0: 		super.readExternal(in);
1: 		isMax = in.readBoolean();
1: 	}
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_MAX_MIN_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  * Aggregator for MAX()/MIN().  Defers most of its work
0:  * to OrderableAggregator.
0:  *
0:  * @see OrderableAggregator
0:  *
0:  * @author jamie
0:  */
0: public final class MaxMinAggregator 
0: 	extends OrderableAggregator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 
0: 	private boolean isMax; // true for max, false for min
0: 
0: 	/**
0: 	 */
0: 	public void setup(String aggregateName)
0: 	{
0: 		super.setup(aggregateName);
0: 		isMax = aggregateName.equals("MAX");
0: 	}
0: 	/**
0: 	 * Accumulate
0:  	 *
0: 	 * @param addend	value to be added in
0: 	 *
0: 	 * @exception StandardException on error
0: 	 *
0: 	 */
0: 	protected void accumulate(DataValueDescriptor addend) 
0: 		throws StandardException
0: 	{
0: 		if ( (value == null) ||
0: 			      (isMax && (value.compare(addend) < 0)) ||
0: 				  (!isMax && (value.compare(addend) > 0))
0: 				  )
0: 		{
0: 			/* NOTE: We need to call getClone() since value gets
0: 			 * reused underneath us
0: 			 */
0: 			value = addend.getClone();
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @return ExecAggregator the new aggregator
0: 	 */
0: 	public ExecAggregator newAggregator()
0: 	{
0: 		MaxMinAggregator ma = new MaxMinAggregator();
0: 		ma.isMax = isMax;
0: 		return ma;
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// FORMATABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		out.writeBoolean(isMax);
0: 	}
0: 
0: 	/** 
0: 	 * @see java.io.Externalizable#readExternal 
0: 	 *
0: 	 * @exception IOException on error
0: 	 * @exception ClassNotFoundException on error
0: 	 */
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException {
0: 		super.readExternal(in);
0: 		isMax = in.readBoolean();
0: 	}
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_MAX_MIN_V01_ID; }
0: }
============================================================================