1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.MergeInserter
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:eac0369: import java.util.Vector;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: import org.apache.derby.iapi.store.access.SortController;
1:eac0369: import org.apache.derby.iapi.store.access.SortInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:8417890: final class MergeInserter implements SortController
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	The sort this inserter is for.
1:eac0369: 	**/
1:8417890: 	private MergeSort sort;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The transaction this inserter is in.
1:eac0369: 	**/
1:8417890: 	private TransactionManager tran;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	A vector of the conglomerate ids of the merge runs.
1:eac0369: 	**/
1:7e7a589: 	private Vector<Long> mergeRuns;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	An in-memory ordered set that is used to sort rows
1:eac0369: 	before they're sent to merge runs.
1:eac0369: 	**/
1:8417890: 	private SortBuffer sortBuffer;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Information about memory usage to dynamically tune the
1:eac0369: 	in-memory sort buffer size.
1:eac0369: 	*/
1:eebc9c7:     private long beginMemoryUsage;
1:18176ce: 	private boolean avoidMergeRun;		// try to avoid merge run if possible
1:18176ce:     private int runSize;
1:18176ce:     private int totalRunSize;
1:eac0369: 
1:18176ce:     String  stat_sortType;
1:18176ce:     int     stat_numRowsInput;
1:18176ce:     int     stat_numRowsOutput;
1:18176ce:     int     stat_numMergeRuns;
1:7e7a589:     Vector<Integer>  stat_mergeRunsSize;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Methods of SortController
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     Insert a row into the sort.
1:eac0369: 	@see SortController#insert
1:eac0369:     **/
1:eac0369:     public void insert(DataValueDescriptor[] row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			// If the sort is null, probably the caller forgot
1:eac0369: 			// to call initialize.
1:eac0369: 			SanityManager.ASSERT(sort != null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Check that the inserted row is of the correct type
1:eac0369: 		sort.checkColumnTypes(row);
1:eac0369: 
1:eac0369: 		// Insert the row into the sort buffer, which will
1:eac0369: 		// sort it into the right order with the rest of the
1:eac0369: 		// rows and remove any duplicates.
1:eac0369:         int insertResult = sortBuffer.insert(row);
1:eac0369:         stat_numRowsInput++;
1:eac0369:         if (insertResult != SortBuffer.INSERT_DUPLICATE)
1:eac0369:             stat_numRowsOutput++;
1:eac0369:         if (insertResult == SortBuffer.INSERT_FULL)
1:eac0369: 		{
1:eac0369: 			if (avoidMergeRun)
1:eac0369: 			{
1:eac0369: 				Runtime jvm = Runtime.getRuntime();
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369:                 {
1:eac0369:                     if (SanityManager.DEBUG_ON("SortTuning"))
1:eac0369:                     {
1:eac0369:                         jvm.gc();
1:eac0369:                         jvm.gc();
1:eac0369:                         jvm.gc();
1:eac0369:                     }
1:eac0369:                 }
1:eac0369: 
1:eac0369:                 long currentFreeMemory = jvm.freeMemory();
1:eac0369:                 long currentTotalMemory = jvm.totalMemory();
1:eebc9c7:                 long currentMemoryUsage =
1:eebc9c7:                         currentTotalMemory - currentFreeMemory;
1:eac0369: 
1:eac0369: 				// before we create an external sort, which is expensive, see if
1:eac0369:                 // we can use up more in-memory sort buffer
1:eac0369: 				// we see how much memory has been used between now and the
1:eac0369: 				// beginning of the sort.  Not all of this memory is used by
1:eac0369: 				// the sort and GC may have kicked in and release some memory.
1:eac0369: 				// But it is a rough guess.
1:eebc9c7:                 long estimatedMemoryUsed =
1:eebc9c7:                         currentMemoryUsage - beginMemoryUsage;
1:eac0369: 
1:eac0369:  				if (SanityManager.DEBUG)
1:eac0369:                 {
1:eac0369:                     if (SanityManager.DEBUG_ON("SortTuning"))
1:eac0369:                     {
1:eac0369: 						SanityManager.DEBUG("SortTuning",
1:eac0369: 							"Growing sortBuffer dynamically, " +
1:eac0369: 							"current sortBuffer capacity= " + 
1:eac0369:                                 sortBuffer.capacity() +
1:eac0369: 							" estimatedMemoryUsed = " + estimatedMemoryUsed +
1:eac0369: 							" currentTotalMemory = " + currentTotalMemory +
1:eac0369: 							" currentFreeMemory = " + currentFreeMemory +
1:eac0369: 							" numcolumn = " + row.length +
1:eac0369: 							" real per row memory = " + 
1:eac0369:                                 (estimatedMemoryUsed / sortBuffer.capacity()));
1:eac0369:                     }
1:eac0369:                 }
1:eac0369: 
1:eebc9c7:                 if (estimatedMemoryUsed < 0) {
1:eebc9c7:                     // We use less memory now than before we started filling
1:eebc9c7:                     // the sort buffer, probably because gc has happened. This
1:eebc9c7:                     // means we don't have a good estimate for how much memory
1:eebc9c7:                     // the sort buffer has occupied. To compensate for that,
1:eebc9c7:                     // set the begin memory usage to the current memory usage,
1:eebc9c7:                     // so that we get a more correct (but probably still too
1:eebc9c7:                     // low) estimate the next time we get here. See DERBY-5416.
1:eebc9c7:                     beginMemoryUsage = currentMemoryUsage;
1:eebc9c7:                 }
1:eebc9c7: 
1:eac0369: 				// we want to double the sort buffer size if that will result
1:eac0369: 				// in the sort to use up no more than 1/2 of all the free
1:eac0369: 				// memory (including the sort memory)
1:eac0369: 				// or if GC is so effective we are now using less memory than before
1:eac0369: 				// or if we are using less than 1Meg of memory and the jvm is
1:eac0369: 				// using < 5 meg of memory (this indicates that the JVM can
1:eac0369: 				// afford to be more bloated ?)
1:eac0369: 				if (estimatedMemoryUsed < 0 ||
1:eac0369: 					((2*estimatedMemoryUsed) < (estimatedMemoryUsed+currentFreeMemory)/2) ||
1:eac0369: 					(2*estimatedMemoryUsed < ExternalSortFactory.DEFAULT_MEM_USE &&
1:eac0369: 					 currentTotalMemory < (5*1024*1024)))
1:eac0369: 				{
1:eac0369: 					// ok, double the sort buffer size
1:eac0369: 					sortBuffer.grow(100);
1:eac0369: 
1:eac0369: 					if (sortBuffer.insert(row) != SortBuffer.INSERT_FULL)
1:eac0369: 						return;
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				avoidMergeRun = false; // once we did it, too late to do in
1:eac0369: 									   // memory sort
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// The sort buffer became full.  Empty it into a
1:eac0369: 			// merge run, and add the merge run to the vector
1:eac0369: 			// of merge runs.
1:eac0369:             stat_sortType = "external";
1:eac0369: 			long conglomid = sort.createMergeRun(tran, sortBuffer);
1:eac0369: 			if (mergeRuns == null)
1:7e7a589: 				mergeRuns = new Vector<Long>();
1:ce40a31: 			mergeRuns.addElement(conglomid);
1:eac0369: 
1:eac0369:             stat_numMergeRuns++;
1:eac0369:             // calculate size of this merge run
1:eac0369:             // buffer was too full for last row
1:eac0369:             runSize = stat_numRowsInput - totalRunSize - 1;
1:eac0369:             totalRunSize += runSize;
1:ce40a31:             stat_mergeRunsSize.addElement(runSize);
1:eac0369: 
1:eac0369: 			// Re-insert the row into the sort buffer.
1:eac0369: 			// This is guaranteed to work since the sort
1:eac0369: 			// buffer has just been emptied.
1:eac0369: 			sortBuffer.insert(row);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:8417890:      * Called when the caller has completed
1:8417890:      * inserting rows into the sorter.
1:eac0369: 
1:8417890: 	@see SortController#completedInserts
1:eac0369: 	**/
1:eac0369: 
1:8417890: 	public void completedInserts()
1:eac0369: 	{
1:eac0369: 		// Tell the sort that we're closed, and hand off
1:eac0369: 		// the sort buffer and the vector of merge runs.
1:eac0369: 		if (sort != null)
1:eac0369: 			sort.doneInserting(this, sortBuffer, mergeRuns);
1:eac0369: 
1:eac0369:         // if this is an external sort, there will actually
1:eac0369:         // be one last merge run with the contents of the
1:eac0369:         // current sortBuffer. It will be created when the user
1:eac0369:         // reads the result of the sort using openSortScan
1:eac0369:         if (stat_sortType == "external")
1:eac0369:         {
1:eac0369:             stat_numMergeRuns++;
1:ce40a31:             stat_mergeRunsSize.addElement(stat_numRowsInput - totalRunSize);
1:eac0369:         }
1:eac0369: 
1:eac0369:         // close the SortController in the transaction.
1:eac0369:         tran.closeMe(this);
1:eac0369: 
1:eac0369: 		// Clean up.
1:eac0369: 		sort = null;
1:eac0369: 		tran = null;
1:eac0369: 		mergeRuns = null;
1:eac0369: 		sortBuffer = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Methods of MergeInserter.  Arranged alphabetically.
1:eac0369: 	 */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return SortInfo object which contains information about the current
1:eac0369:      * sort.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @see SortInfo
1:eac0369:      *
1:eac0369: 	 * @return The SortInfo object which contains info about current sort.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public SortInfo getSortInfo()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(new MergeSortInfo(this));
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Initialize this inserter.
1:eac0369: 	@return true if initialization was successful
1:eac0369: 	**/
1:eac0369: 	boolean initialize(MergeSort sort, TransactionManager tran)
1:eac0369: 	{
1:eac0369: 		Runtime jvm = Runtime.getRuntime();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             if (SanityManager.DEBUG_ON("SortTuning"))
1:eac0369:             {
1:eac0369:                 jvm.gc();
1:eac0369:                 jvm.gc();
1:eac0369:                 jvm.gc();
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eebc9c7:         beginMemoryUsage = jvm.totalMemory() - jvm.freeMemory();
1:eac0369: 		avoidMergeRun = true;		// not an external sort
1:eac0369:         stat_sortType = "internal";
1:eac0369:         stat_numMergeRuns = 0;
1:eac0369:         stat_numRowsInput = 0;
1:eac0369:         stat_numRowsOutput = 0;
1:7e7a589:         stat_mergeRunsSize = new Vector<Integer>();
1:eac0369:         runSize = 0;
1:eac0369:         totalRunSize = 0;
1:eac0369: 
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             if (SanityManager.DEBUG_ON("testSort"))
1:eac0369:             {
1:eac0369:                 avoidMergeRun = false;
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369: 		this.sort = sort;
1:eac0369: 		this.tran = tran;
1:eac0369: 		sortBuffer = new SortBuffer(sort);
1:eac0369: 		if (sortBuffer.init() == false)
1:eac0369: 			return false;
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 			mergeRuns.addElement(conglomid);
1:             stat_mergeRunsSize.addElement(runSize);
/////////////////////////////////////////////////////////////////////////
1:             stat_mergeRunsSize.addElement(stat_numRowsInput - totalRunSize);
commit:7e7a589
/////////////////////////////////////////////////////////////////////////
1: 	private Vector<Long> mergeRuns;
/////////////////////////////////////////////////////////////////////////
1:     Vector<Integer>  stat_mergeRunsSize;
/////////////////////////////////////////////////////////////////////////
1: 				mergeRuns = new Vector<Long>();
/////////////////////////////////////////////////////////////////////////
1:         stat_mergeRunsSize = new Vector<Integer>();
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:eebc9c7
/////////////////////////////////////////////////////////////////////////
1:     private long beginMemoryUsage;
/////////////////////////////////////////////////////////////////////////
1:                 long currentMemoryUsage =
1:                         currentTotalMemory - currentFreeMemory;
/////////////////////////////////////////////////////////////////////////
1:                 long estimatedMemoryUsed =
1:                         currentMemoryUsage - beginMemoryUsage;
/////////////////////////////////////////////////////////////////////////
1:                 if (estimatedMemoryUsed < 0) {
1:                     // We use less memory now than before we started filling
1:                     // the sort buffer, probably because gc has happened. This
1:                     // means we don't have a good estimate for how much memory
1:                     // the sort buffer has occupied. To compensate for that,
1:                     // set the begin memory usage to the current memory usage,
1:                     // so that we get a more correct (but probably still too
1:                     // low) estimate the next time we get here. See DERBY-5416.
1:                     beginMemoryUsage = currentMemoryUsage;
1:                 }
1: 
/////////////////////////////////////////////////////////////////////////
1:         beginMemoryUsage = jvm.totalMemory() - jvm.freeMemory();
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:18176ce
/////////////////////////////////////////////////////////////////////////
0: 	private long beginFreeMemory;
0: 	private long beginTotalMemory;
0: 	private long estimatedMemoryUsed;
1: 	private boolean avoidMergeRun;		// try to avoid merge run if possible
1:     private int runSize;
1:     private int totalRunSize;
1:     String  stat_sortType;
1:     int     stat_numRowsInput;
1:     int     stat_numRowsOutput;
1:     int     stat_numMergeRuns;
0:     Vector  stat_mergeRunsSize;
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:8417890
/////////////////////////////////////////////////////////////////////////
1: final class MergeInserter implements SortController
1: 	private MergeSort sort;
1: 	private TransactionManager tran;
0: 	private Vector mergeRuns;
1: 	private SortBuffer sortBuffer;
/////////////////////////////////////////////////////////////////////////
1:      * Called when the caller has completed
1:      * inserting rows into the sorter.
1: 	@see SortController#completedInserts
1: 	public void completedInserts()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.MergeInserter
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
1: import java.util.Vector;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.SortController;
1: import org.apache.derby.iapi.store.access.SortInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1: 
1: 
1: **/
1: 
0: public final class MergeInserter implements SortController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	The sort this inserter is for.
1: 	**/
0: 	protected MergeSort sort = null;
1: 
1: 	/**
1: 	The transaction this inserter is in.
1: 	**/
0: 	protected TransactionManager tran;
1: 
1: 	/**
1: 	A vector of the conglomerate ids of the merge runs.
1: 	**/
0: 	Vector mergeRuns = null;
1: 
1: 	/**
1: 	An in-memory ordered set that is used to sort rows
1: 	before they're sent to merge runs.
1: 	**/
0: 	SortBuffer sortBuffer = null;
1: 
1: 	/**
1: 	Information about memory usage to dynamically tune the
1: 	in-memory sort buffer size.
1: 	*/
0: 	long beginFreeMemory;
0: 	long beginTotalMemory;
0: 	long estimatedMemoryUsed;
0: 	boolean avoidMergeRun;		// try to avoid merge run if possible
0:     int runSize;
0:     int totalRunSize;
1: 
0:     protected String  stat_sortType;
0:     protected int     stat_numRowsInput;
0:     protected int     stat_numRowsOutput;
0:     protected int     stat_numMergeRuns;
0:     protected Vector  stat_mergeRunsSize;
1: 
1: 
1: 	/*
1: 	 * Methods of SortController
1: 	 */
1: 
1: 	/**
1:     Insert a row into the sort.
1: 	@see SortController#insert
1:     **/
1:     public void insert(DataValueDescriptor[] row)
1: 		throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			// If the sort is null, probably the caller forgot
1: 			// to call initialize.
1: 			SanityManager.ASSERT(sort != null);
1: 		}
1: 
1: 		// Check that the inserted row is of the correct type
1: 		sort.checkColumnTypes(row);
1: 
1: 		// Insert the row into the sort buffer, which will
1: 		// sort it into the right order with the rest of the
1: 		// rows and remove any duplicates.
1:         int insertResult = sortBuffer.insert(row);
1:         stat_numRowsInput++;
1:         if (insertResult != SortBuffer.INSERT_DUPLICATE)
1:             stat_numRowsOutput++;
1:         if (insertResult == SortBuffer.INSERT_FULL)
1: 		{
1: 			if (avoidMergeRun)
1: 			{
1: 				Runtime jvm = Runtime.getRuntime();
1: 				if (SanityManager.DEBUG)
1:                 {
1:                     if (SanityManager.DEBUG_ON("SortTuning"))
1:                     {
1:                         jvm.gc();
1:                         jvm.gc();
1:                         jvm.gc();
1:                     }
1:                 }
1: 
1:                 long currentFreeMemory = jvm.freeMemory();
1:                 long currentTotalMemory = jvm.totalMemory();
1: 
1: 				// before we create an external sort, which is expensive, see if
1:                 // we can use up more in-memory sort buffer
1: 				// we see how much memory has been used between now and the
1: 				// beginning of the sort.  Not all of this memory is used by
1: 				// the sort and GC may have kicked in and release some memory.
1: 				// But it is a rough guess.
0:         		estimatedMemoryUsed = (currentTotalMemory-currentFreeMemory) -
0: 		   			(beginTotalMemory-beginFreeMemory);
1: 
1:  				if (SanityManager.DEBUG)
1:                 {
1:                     if (SanityManager.DEBUG_ON("SortTuning"))
1:                     {
1: 						SanityManager.DEBUG("SortTuning",
1: 							"Growing sortBuffer dynamically, " +
1: 							"current sortBuffer capacity= " + 
1:                                 sortBuffer.capacity() +
1: 							" estimatedMemoryUsed = " + estimatedMemoryUsed +
1: 							" currentTotalMemory = " + currentTotalMemory +
1: 							" currentFreeMemory = " + currentFreeMemory +
1: 							" numcolumn = " + row.length +
1: 							" real per row memory = " + 
1:                                 (estimatedMemoryUsed / sortBuffer.capacity()));
1:                     }
1:                 }
1: 
1: 				// we want to double the sort buffer size if that will result
1: 				// in the sort to use up no more than 1/2 of all the free
1: 				// memory (including the sort memory)
1: 				// or if GC is so effective we are now using less memory than before
1: 				// or if we are using less than 1Meg of memory and the jvm is
1: 				// using < 5 meg of memory (this indicates that the JVM can
1: 				// afford to be more bloated ?)
1: 				if (estimatedMemoryUsed < 0 ||
1: 					((2*estimatedMemoryUsed) < (estimatedMemoryUsed+currentFreeMemory)/2) ||
1: 					(2*estimatedMemoryUsed < ExternalSortFactory.DEFAULT_MEM_USE &&
1: 					 currentTotalMemory < (5*1024*1024)))
1: 				{
1: 					// ok, double the sort buffer size
1: 					sortBuffer.grow(100);
1: 
1: 					if (sortBuffer.insert(row) != SortBuffer.INSERT_FULL)
1: 						return;
1: 				}
1: 
1: 				avoidMergeRun = false; // once we did it, too late to do in
1: 									   // memory sort
1: 			}
1: 
1: 			// The sort buffer became full.  Empty it into a
1: 			// merge run, and add the merge run to the vector
1: 			// of merge runs.
1:             stat_sortType = "external";
1: 			long conglomid = sort.createMergeRun(tran, sortBuffer);
1: 			if (mergeRuns == null)
0: 				mergeRuns = new Vector();
0: 			mergeRuns.addElement(new Long(conglomid));
1: 
1:             stat_numMergeRuns++;
1:             // calculate size of this merge run
1:             // buffer was too full for last row
1:             runSize = stat_numRowsInput - totalRunSize - 1;
1:             totalRunSize += runSize;
0:             stat_mergeRunsSize.addElement(new Integer(runSize));
1: 
1: 			// Re-insert the row into the sort buffer.
1: 			// This is guaranteed to work since the sort
1: 			// buffer has just been emptied.
1: 			sortBuffer.insert(row);
1: 		}
1: 	}
1: 
1: 	/**
0: 	Close this sort controller.	Closing the sort controller
0: 	means the caller is done inserting rows.  This method
0: 	must not throw any exceptions since it's called during
0: 	error processing.
1: 
0: 	@see SortController#close
1: 	**/
1: 
0: 	public void close()
1: 	{
1: 		// Tell the sort that we're closed, and hand off
1: 		// the sort buffer and the vector of merge runs.
1: 		if (sort != null)
1: 			sort.doneInserting(this, sortBuffer, mergeRuns);
1: 
1:         // if this is an external sort, there will actually
1:         // be one last merge run with the contents of the
1:         // current sortBuffer. It will be created when the user
1:         // reads the result of the sort using openSortScan
1:         if (stat_sortType == "external")
1:         {
1:             stat_numMergeRuns++;
0:             stat_mergeRunsSize.addElement(new Integer(stat_numRowsInput - totalRunSize));
1:         }
1: 
1:         // close the SortController in the transaction.
1:         tran.closeMe(this);
1: 
1: 		// Clean up.
1: 		sort = null;
1: 		tran = null;
1: 		mergeRuns = null;
1: 		sortBuffer = null;
1: 	}
1: 
1: 	/*
1: 	 * Methods of MergeInserter.  Arranged alphabetically.
1: 	 */
1: 
1:     /**
1:      * Return SortInfo object which contains information about the current
1:      * sort.
1:      * <p>
1:      *
1:      * @see SortInfo
1:      *
1: 	 * @return The SortInfo object which contains info about current sort.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public SortInfo getSortInfo()
1: 		throws StandardException
1:     {
1:         return(new MergeSortInfo(this));
1:     }
1: 
1: 
1: 	/**
1: 	Initialize this inserter.
1: 	@return true if initialization was successful
1: 	**/
1: 	boolean initialize(MergeSort sort, TransactionManager tran)
1: 	{
1: 		Runtime jvm = Runtime.getRuntime();
1: 		if (SanityManager.DEBUG)
1:         {
1:             if (SanityManager.DEBUG_ON("SortTuning"))
1:             {
1:                 jvm.gc();
1:                 jvm.gc();
1:                 jvm.gc();
1:             }
1:         }
1: 
0: 		beginFreeMemory = jvm.freeMemory();
0: 		beginTotalMemory = jvm.totalMemory();
0: 		estimatedMemoryUsed = 0;
1: 		avoidMergeRun = true;		// not an external sort
1:         stat_sortType = "internal";
1:         stat_numMergeRuns = 0;
1:         stat_numRowsInput = 0;
1:         stat_numRowsOutput = 0;
0:         stat_mergeRunsSize = new Vector();
1:         runSize = 0;
1:         totalRunSize = 0;
1: 
1: 
1: 		if (SanityManager.DEBUG)
1:         {
1:             if (SanityManager.DEBUG_ON("testSort"))
1:             {
1:                 avoidMergeRun = false;
1:             }
1:         }
1: 
1: 		this.sort = sort;
1: 		this.tran = tran;
1: 		sortBuffer = new SortBuffer(sort);
1: 		if (sortBuffer.init() == false)
1: 			return false;
1: 		return true;
1: 	}
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import java.util.Vector;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.Storable;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.SortController;
0: import org.apache.derby.iapi.store.access.SortInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: /**
0: 
0: 
0: **/
0: 
0: public final class MergeInserter implements SortController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	The sort this inserter is for.
0: 	**/
0: 	protected MergeSort sort = null;
0: 
0: 	/**
0: 	The transaction this inserter is in.
0: 	**/
0: 	protected TransactionManager tran;
0: 
0: 	/**
0: 	A vector of the conglomerate ids of the merge runs.
0: 	**/
0: 	Vector mergeRuns = null;
0: 
0: 	/**
0: 	An in-memory ordered set that is used to sort rows
0: 	before they're sent to merge runs.
0: 	**/
0: 	SortBuffer sortBuffer = null;
0: 
0: 	/**
0: 	Information about memory usage to dynamically tune the
0: 	in-memory sort buffer size.
0: 	*/
0: 	long beginFreeMemory;
0: 	long beginTotalMemory;
0: 	long estimatedMemoryUsed;
0: 	boolean avoidMergeRun;		// try to avoid merge run if possible
0:     int runSize;
0:     int totalRunSize;
0: 
0:     protected String  stat_sortType;
0:     protected int     stat_numRowsInput;
0:     protected int     stat_numRowsOutput;
0:     protected int     stat_numMergeRuns;
0:     protected Vector  stat_mergeRunsSize;
0: 
0: 
0: 	/*
0: 	 * Methods of SortController
0: 	 */
0: 
0: 	/**
0:     Insert a row into the sort.
0: 	@see SortController#insert
0:     **/
0:     public void insert(DataValueDescriptor[] row)
0: 		throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			// If the sort is null, probably the caller forgot
0: 			// to call initialize.
0: 			SanityManager.ASSERT(sort != null);
0: 		}
0: 
0: 		// Check that the inserted row is of the correct type
0: 		sort.checkColumnTypes(row);
0: 
0: 		// Insert the row into the sort buffer, which will
0: 		// sort it into the right order with the rest of the
0: 		// rows and remove any duplicates.
0:         int insertResult = sortBuffer.insert(row);
0:         stat_numRowsInput++;
0:         if (insertResult != SortBuffer.INSERT_DUPLICATE)
0:             stat_numRowsOutput++;
0:         if (insertResult == SortBuffer.INSERT_FULL)
0: 		{
0: 			if (avoidMergeRun)
0: 			{
0: 				Runtime jvm = Runtime.getRuntime();
0: 				if (SanityManager.DEBUG)
0:                 {
0:                     if (SanityManager.DEBUG_ON("SortTuning"))
0:                     {
0:                         jvm.gc();
0:                         jvm.gc();
0:                         jvm.gc();
0:                     }
0:                 }
0: 
0:                 long currentFreeMemory = jvm.freeMemory();
0:                 long currentTotalMemory = jvm.totalMemory();
0: 
0: 				// before we create an external sort, which is expensive, see if
0:                 // we can use up more in-memory sort buffer
0: 				// we see how much memory has been used between now and the
0: 				// beginning of the sort.  Not all of this memory is used by
0: 				// the sort and GC may have kicked in and release some memory.
0: 				// But it is a rough guess.
0:         		estimatedMemoryUsed = (currentTotalMemory-currentFreeMemory) -
0: 		   			(beginTotalMemory-beginFreeMemory);
0: 
0:  				if (SanityManager.DEBUG)
0:                 {
0:                     if (SanityManager.DEBUG_ON("SortTuning"))
0:                     {
0: 						SanityManager.DEBUG("SortTuning",
0: 							"Growing sortBuffer dynamically, " +
0: 							"current sortBuffer capacity= " + 
0:                                 sortBuffer.capacity() +
0: 							" estimatedMemoryUsed = " + estimatedMemoryUsed +
0: 							" currentTotalMemory = " + currentTotalMemory +
0: 							" currentFreeMemory = " + currentFreeMemory +
0: 							" numcolumn = " + row.length +
0: 							" real per row memory = " + 
0:                                 (estimatedMemoryUsed / sortBuffer.capacity()));
0:                     }
0:                 }
0: 
0: 				// we want to double the sort buffer size if that will result
0: 				// in the sort to use up no more than 1/2 of all the free
0: 				// memory (including the sort memory)
0: 				// or if GC is so effective we are now using less memory than before
0: 				// or if we are using less than 1Meg of memory and the jvm is
0: 				// using < 5 meg of memory (this indicates that the JVM can
0: 				// afford to be more bloated ?)
0: 				if (estimatedMemoryUsed < 0 ||
0: 					((2*estimatedMemoryUsed) < (estimatedMemoryUsed+currentFreeMemory)/2) ||
0: 					(2*estimatedMemoryUsed < ExternalSortFactory.DEFAULT_MEM_USE &&
0: 					 currentTotalMemory < (5*1024*1024)))
0: 				{
0: 					// ok, double the sort buffer size
0: 					sortBuffer.grow(100);
0: 
0: 					if (sortBuffer.insert(row) != SortBuffer.INSERT_FULL)
0: 						return;
0: 				}
0: 
0: 				avoidMergeRun = false; // once we did it, too late to do in
0: 									   // memory sort
0: 			}
0: 
0: 			// The sort buffer became full.  Empty it into a
0: 			// merge run, and add the merge run to the vector
0: 			// of merge runs.
0:             stat_sortType = "external";
0: 			long conglomid = sort.createMergeRun(tran, sortBuffer);
0: 			if (mergeRuns == null)
0: 				mergeRuns = new Vector();
0: 			mergeRuns.addElement(new Long(conglomid));
0: 
0:             stat_numMergeRuns++;
0:             // calculate size of this merge run
0:             // buffer was too full for last row
0:             runSize = stat_numRowsInput - totalRunSize - 1;
0:             totalRunSize += runSize;
0:             stat_mergeRunsSize.addElement(new Integer(runSize));
0: 
0: 			// Re-insert the row into the sort buffer.
0: 			// This is guaranteed to work since the sort
0: 			// buffer has just been emptied.
0: 			sortBuffer.insert(row);
0: 		}
0: 	}
0: 
0: 	/**
0: 	Close this sort controller.	Closing the sort controller
0: 	means the caller is done inserting rows.  This method
0: 	must not throw any exceptions since it's called during
0: 	error processing.
0: 
0: 	@see SortController#close
0: 	**/
0: 
0: 	public void close()
0: 	{
0: 		// Tell the sort that we're closed, and hand off
0: 		// the sort buffer and the vector of merge runs.
0: 		if (sort != null)
0: 			sort.doneInserting(this, sortBuffer, mergeRuns);
0: 
0:         // if this is an external sort, there will actually
0:         // be one last merge run with the contents of the
0:         // current sortBuffer. It will be created when the user
0:         // reads the result of the sort using openSortScan
0:         if (stat_sortType == "external")
0:         {
0:             stat_numMergeRuns++;
0:             stat_mergeRunsSize.addElement(new Integer(stat_numRowsInput - totalRunSize));
0:         }
0: 
0:         // close the SortController in the transaction.
0:         tran.closeMe(this);
0: 
0: 		// Clean up.
0: 		sort = null;
0: 		tran = null;
0: 		mergeRuns = null;
0: 		sortBuffer = null;
0: 	}
0: 
0: 	/*
0: 	 * Methods of MergeInserter.  Arranged alphabetically.
0: 	 */
0: 
0:     /**
0:      * Return SortInfo object which contains information about the current
0:      * sort.
0:      * <p>
0:      *
0:      * @see SortInfo
0:      *
0: 	 * @return The SortInfo object which contains info about current sort.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public SortInfo getSortInfo()
0: 		throws StandardException
0:     {
0:         return(new MergeSortInfo(this));
0:     }
0: 
0: 
0: 	/**
0: 	Initialize this inserter.
0: 	@return true if initialization was successful
0: 	**/
0: 	boolean initialize(MergeSort sort, TransactionManager tran)
0: 	{
0: 		Runtime jvm = Runtime.getRuntime();
0: 		if (SanityManager.DEBUG)
0:         {
0:             if (SanityManager.DEBUG_ON("SortTuning"))
0:             {
0:                 jvm.gc();
0:                 jvm.gc();
0:                 jvm.gc();
0:             }
0:         }
0: 
0: 		beginFreeMemory = jvm.freeMemory();
0: 		beginTotalMemory = jvm.totalMemory();
0: 		estimatedMemoryUsed = 0;
0: 		avoidMergeRun = true;		// not an external sort
0:         stat_sortType = "internal";
0:         stat_numMergeRuns = 0;
0:         stat_numRowsInput = 0;
0:         stat_numRowsOutput = 0;
0:         stat_mergeRunsSize = new Vector();
0:         runSize = 0;
0:         totalRunSize = 0;
0: 
0: 
0: 		if (SanityManager.DEBUG)
0:         {
0:             if (SanityManager.DEBUG_ON("testSort"))
0:             {
0:                 avoidMergeRun = false;
0:             }
0:         }
0: 
0: 		this.sort = sort;
0: 		this.tran = tran;
0: 		sortBuffer = new SortBuffer(sort);
0: 		if (sortBuffer.init() == false)
0: 			return false;
0: 		return true;
0: 	}
0: 
0: }
============================================================================