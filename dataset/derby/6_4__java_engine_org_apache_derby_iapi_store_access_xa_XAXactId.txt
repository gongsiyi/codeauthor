1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.xa.XAXactId
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access.xa;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.GlobalXact;
1:eac0369: 
1:eac0369: import javax.transaction.xa.Xid;
1:eac0369: import javax.transaction.xa.XAException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: The XAXactId class is a specific implementation of the JTA Xid interface.  It
1:eac0369: is only used by the TransactionTable.restore() interface to return an array
1:eac0369: of Xid's back to the caller, as part of serving the XAresource.restore() 
1:eac0369: interface.
1:eac0369: <P>
1:eac0369: It is NOT the object that is stored in the log.  One reason for this is that
1:eac0369: the Formattable and Xid interface's define two different return values for
1:eac0369: the getFormatId() interface.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: public class XAXactId extends GlobalXact implements Xid
1:eac0369: {
1:eac0369:     /**************************************************************************
1:eac0369:      * Private Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 	private static final char COLON = ':';
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * initialize by making array copies of appropriate fields.
1:eac0369:      * <p>
1:eac0369:      **/
1:eac0369:     private void copy_init_xid(
1:eac0369: 							   int     format_id,
1:eac0369: 							   byte[]  global_id,
1:eac0369: 							   byte[]  branch_id)
1:eac0369:     {
1:eac0369: 		this.format_id = format_id;
1:0fad4e6:         this.global_id = (byte[]) global_id.clone();
1:0fad4e6:         this.branch_id = (byte[]) branch_id.clone();
1:eac0369:     }
1:eac0369:     
1:eac0369:     /**
1:eac0369:      * Construct from given pieces of an Xid.  Makes copies of arrays.
1:eac0369:      * <p>
1:eac0369:      **/
1:eac0369:     public XAXactId(
1:eac0369: 					int     format_id,
1:eac0369: 					byte[]  global_id,
1:eac0369: 					byte[]  branch_id)
1:eac0369:     {
1:eac0369:         copy_init_xid(format_id, global_id, branch_id);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Construct an Xid using an external Xid.
1:eac0369:      * <p>
1:eac0369:      * @exception XAException invalid external xid
1:eac0369:      */
1:eac0369:     public XAXactId(Xid xid) throws XAException
1:eac0369:     {
1:eac0369: 		if (xid == null)
1:eac0369: 			throw new XAException(XAException.XAER_NOTA);
1:eac0369: 	
1:eac0369:         copy_init_xid(
1:eac0369: 					  xid.getFormatId(),
1:eac0369: 					  xid.getGlobalTransactionId(),
1:eac0369: 					  xid.getBranchQualifier());
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369:     public String toHexString()
1:eac0369:     {
1:eac0369: 		// the ascii representation of xid where xid is of 
1:eac0369: 		// 		format_id = f
1:eac0369: 		//		global_id = byte[N]
1:eac0369: 		//		branch_id = byte[M]
1:eac0369: 		//
1:eac0369: 		// :xx:yy:ffffffff:n...n:mmmm...m:
1:eac0369: 		// where	xx = N (up to 64 max)
1:eac0369: 		//			yy = M (up to 64 max)
1:eac0369: 		//			n..n = hex dump of global_id (0 to 128 bytes max)
1:eac0369: 		//			m..m = hex dump of branch_qualifier (0 to 128 bytes max)
1:eac0369: 	
1:eac0369: 	// 1+2+1+2+1+9+1+1+1
1:eac0369: 		int maxLength = 20+(global_id.length+branch_id.length)*2;
1:eac0369: 		
1:eac0369: 		StringBuffer hexdump = new StringBuffer(maxLength);
1:eac0369: 		hexdump.append(COLON).
1:eac0369: 			append(Integer.toString(global_id.length)).append(COLON).
1:eac0369: 			append(Integer.toString(branch_id.length)).append(COLON).
1:eac0369: 			append(Integer.toString(format_id, 16)).append(COLON).
1:eac0369: 			append(org.apache.derby.iapi.util.StringUtil.toHexString(global_id, 0, global_id.length)).append(COLON).
1:eac0369: 			append(org.apache.derby.iapi.util.StringUtil.toHexString(branch_id, 0, branch_id.length)).append(COLON);
1:eac0369: 	
1:eac0369: 		return hexdump.toString();
1:eac0369: 
1:eac0369:     }
1:eac0369: 
1:eac0369:     public XAXactId(String xactIdString)
1:eac0369:     {
1:eac0369: 		// extract it in pieces delimited by COLON
1:eac0369: 		int start, end, length;
1:eac0369: 	
1:eac0369: 	// xx
1:eac0369: 		start = 1;
1:eac0369: 		end = xactIdString.indexOf(COLON, start);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(end != -1, "illegal string format");
1:eac0369: 	
1:eac0369: 		String xx = xactIdString.substring(start, end);
1:eac0369: 		int N = Integer.parseInt(xx);
1:eac0369: 	
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(N > 0 && N <= Xid.MAXGTRIDSIZE, "illegal gtrid size");
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 	// yy
1:eac0369: 		start = end+1;			// skip the COLON
1:eac0369: 		end = xactIdString.indexOf(COLON, start);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(end != -1, "illegal string format");
1:eac0369: 	
1:eac0369: 		String yy = xactIdString.substring(start,end);
1:eac0369: 		int M = Integer.parseInt(yy);
1:eac0369: 	
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(M > 0 && N <= Xid.MAXBQUALSIZE, "illegal bqual size");
1:eac0369: 	
1:eac0369: 	// ffffffff
1:eac0369: 		start = end+1;			// skip the COLON
1:eac0369: 		end = xactIdString.indexOf(COLON, start);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(end != -1, "illegal string format");
1:eac0369: 	
1:eac0369: 		String f = xactIdString.substring(start,end);
1:eac0369: 		format_id = Integer.parseInt(f, 16);
1:eac0369: 
1:eac0369: 	// n...n
1:eac0369: 		start = end+1;			// skip the COLON
1:eac0369: 		end = xactIdString.indexOf(COLON, start);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(end != -1, "illegal string format");
1:eac0369: 	
1:eac0369: 		global_id = org.apache.derby.iapi.util.StringUtil.fromHexString(xactIdString, start, (end-start));
1:eac0369: 	
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(global_id.length == N, "inconsistent global_id length");
1:eac0369: 			
1:eac0369: 	
1:eac0369: 	// m...m
1:eac0369: 		start = end+1;			// skip the COLON
1:eac0369: 		end = xactIdString.indexOf(COLON, start);
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(end != -1, "illegal string format");
1:eac0369: 	
1:eac0369: 		branch_id = org.apache.derby.iapi.util.StringUtil.fromHexString(xactIdString, start, (end-start));
1:eac0369: 	
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(branch_id.length == M, 
1:eac0369: 								 "inconsistent branch_id length, expect " + M + " got " +
1:eac0369: 								 branch_id.length);
1:eac0369: 	
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods implementing the Xid interface: 
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Obtain the format id part of the Xid.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @return Format identifier. O means the OSI CCR format.
1:eac0369:      **/
1:eac0369:     public int getFormatId()
1:eac0369:     {
1:eac0369:         return(format_id);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Obtain the global transaction identifier part of XID as an array of 
1:eac0369:      * bytes.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return A byte array containing the global transaction identifier.
1:eac0369:      **/
1:eac0369:     public byte[] getGlobalTransactionId()
1:eac0369:     {
1:0fad4e6:         return (byte[]) global_id.clone();
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return A byte array containing the branch qualifier of the transaction.
1:eac0369:      **/
1:eac0369:     public byte[] getBranchQualifier()
1:eac0369:     {
1:0fad4e6:         return (byte[]) branch_id.clone();
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369:     public boolean equals(Object other) 
1:eac0369:     {
1:eac0369: 		if (other == this)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		if (other == null)
1:eac0369: 			return false;
1:eac0369: 	
1:eac0369: 		try
1:eac0369: 	    {
1:eac0369: 			if (other instanceof GlobalXact)
1:eac0369: 				return super.equals(other);
1:eac0369: 			// Just cast it and catch the exception rather than doing the type
1:eac0369: 			// checking twice.
1:eac0369: 			Xid other_xid = (Xid) other;
1:eac0369: 		
1:eac0369: 			return(
1:eac0369: 				   java.util.Arrays.equals(
1:eac0369: 									other_xid.getGlobalTransactionId(),
1:eac0369: 									this.global_id)          &&
1:eac0369: 				   java.util.Arrays.equals(
1:eac0369: 									other_xid.getBranchQualifier(),
1:eac0369: 									this.branch_id)          &&
1:eac0369: 				   other_xid.getFormatId() == this.format_id);
1:eac0369: 		
1:eac0369: 	    }
1:eac0369: 		catch(ClassCastException cce)
1:eac0369: 	    {
1:eac0369: 			// this class only knows how to compare with other Xids
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.THROWASSERT("comparing XAXactId with " + 
1:e7d2a42: 										  other.getClass().getName(), cce); 
1:eac0369: 		
1:eac0369: 			return false;
1:eac0369: 	    }
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0fad4e6
/////////////////////////////////////////////////////////////////////////
1:         this.global_id = (byte[]) global_id.clone();
1:         this.branch_id = (byte[]) branch_id.clone();
/////////////////////////////////////////////////////////////////////////
1:         return (byte[]) global_id.clone();
/////////////////////////////////////////////////////////////////////////
1:         return (byte[]) branch_id.clone();
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 										  other.getClass().getName(), cce); 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.xa.XAXactId
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.xa
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access.xa;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.access.GlobalXact;
1: 
1: import javax.transaction.xa.Xid;
1: import javax.transaction.xa.XAException;
1: 
1: /**
1: 
1: The XAXactId class is a specific implementation of the JTA Xid interface.  It
1: is only used by the TransactionTable.restore() interface to return an array
1: of Xid's back to the caller, as part of serving the XAresource.restore() 
1: interface.
1: <P>
1: It is NOT the object that is stored in the log.  One reason for this is that
1: the Formattable and Xid interface's define two different return values for
1: the getFormatId() interface.
1: 
1: **/
1: 
1: public class XAXactId extends GlobalXact implements Xid
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     /**************************************************************************
1:      * Private Fields of the class
1:      **************************************************************************
1:      */
1: 	private static final char COLON = ':';
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * initialize by making array copies of appropriate fields.
1:      * <p>
1:      **/
1:     private void copy_init_xid(
1: 							   int     format_id,
1: 							   byte[]  global_id,
1: 							   byte[]  branch_id)
1:     {
1: 		this.format_id = format_id;
0: 		this.global_id = new byte[global_id.length];
0: 		System.arraycopy(global_id, 0, this.global_id, 0, global_id.length);
0: 		this.branch_id = new byte[branch_id.length];
0: 		System.arraycopy(branch_id, 0, this.branch_id, 0, branch_id.length);
1:     }
1:     
1:     /**
1:      * Construct from given pieces of an Xid.  Makes copies of arrays.
1:      * <p>
1:      **/
1:     public XAXactId(
1: 					int     format_id,
1: 					byte[]  global_id,
1: 					byte[]  branch_id)
1:     {
1:         copy_init_xid(format_id, global_id, branch_id);
1:     }
1: 
1:     /**
1:      * Construct an Xid using an external Xid.
1:      * <p>
1:      * @exception XAException invalid external xid
1:      */
1:     public XAXactId(Xid xid) throws XAException
1:     {
1: 		if (xid == null)
1: 			throw new XAException(XAException.XAER_NOTA);
1: 	
1:         copy_init_xid(
1: 					  xid.getFormatId(),
1: 					  xid.getGlobalTransactionId(),
1: 					  xid.getBranchQualifier());
1:     }
1: 
1: 
1: 
1: 
1: 
1:     public String toHexString()
1:     {
1: 		// the ascii representation of xid where xid is of 
1: 		// 		format_id = f
1: 		//		global_id = byte[N]
1: 		//		branch_id = byte[M]
1: 		//
1: 		// :xx:yy:ffffffff:n...n:mmmm...m:
1: 		// where	xx = N (up to 64 max)
1: 		//			yy = M (up to 64 max)
1: 		//			n..n = hex dump of global_id (0 to 128 bytes max)
1: 		//			m..m = hex dump of branch_qualifier (0 to 128 bytes max)
1: 	
1: 	// 1+2+1+2+1+9+1+1+1
1: 		int maxLength = 20+(global_id.length+branch_id.length)*2;
1: 		
1: 		StringBuffer hexdump = new StringBuffer(maxLength);
1: 		hexdump.append(COLON).
1: 			append(Integer.toString(global_id.length)).append(COLON).
1: 			append(Integer.toString(branch_id.length)).append(COLON).
1: 			append(Integer.toString(format_id, 16)).append(COLON).
1: 			append(org.apache.derby.iapi.util.StringUtil.toHexString(global_id, 0, global_id.length)).append(COLON).
1: 			append(org.apache.derby.iapi.util.StringUtil.toHexString(branch_id, 0, branch_id.length)).append(COLON);
1: 	
1: 		return hexdump.toString();
1: 
1:     }
1: 
1:     public XAXactId(String xactIdString)
1:     {
1: 		// extract it in pieces delimited by COLON
1: 		int start, end, length;
1: 	
1: 	// xx
1: 		start = 1;
1: 		end = xactIdString.indexOf(COLON, start);
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(end != -1, "illegal string format");
1: 	
1: 		String xx = xactIdString.substring(start, end);
1: 		int N = Integer.parseInt(xx);
1: 	
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(N > 0 && N <= Xid.MAXGTRIDSIZE, "illegal gtrid size");
1: 		}
1: 	
1: 	// yy
1: 		start = end+1;			// skip the COLON
1: 		end = xactIdString.indexOf(COLON, start);
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(end != -1, "illegal string format");
1: 	
1: 		String yy = xactIdString.substring(start,end);
1: 		int M = Integer.parseInt(yy);
1: 	
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(M > 0 && N <= Xid.MAXBQUALSIZE, "illegal bqual size");
1: 	
1: 	// ffffffff
1: 		start = end+1;			// skip the COLON
1: 		end = xactIdString.indexOf(COLON, start);
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(end != -1, "illegal string format");
1: 	
1: 		String f = xactIdString.substring(start,end);
1: 		format_id = Integer.parseInt(f, 16);
1: 
1: 	// n...n
1: 		start = end+1;			// skip the COLON
1: 		end = xactIdString.indexOf(COLON, start);
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(end != -1, "illegal string format");
1: 	
1: 		global_id = org.apache.derby.iapi.util.StringUtil.fromHexString(xactIdString, start, (end-start));
1: 	
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(global_id.length == N, "inconsistent global_id length");
1: 			
1: 	
1: 	// m...m
1: 		start = end+1;			// skip the COLON
1: 		end = xactIdString.indexOf(COLON, start);
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(end != -1, "illegal string format");
1: 	
1: 		branch_id = org.apache.derby.iapi.util.StringUtil.fromHexString(xactIdString, start, (end-start));
1: 	
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(branch_id.length == M, 
1: 								 "inconsistent branch_id length, expect " + M + " got " +
1: 								 branch_id.length);
1: 	
1:     }
1: 
1: 
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods implementing the Xid interface: 
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Obtain the format id part of the Xid.
1:      * <p>
1:      *
1:      * @return Format identifier. O means the OSI CCR format.
1:      **/
1:     public int getFormatId()
1:     {
1:         return(format_id);
1:     }
1: 
1:     /**
1:      * Obtain the global transaction identifier part of XID as an array of 
1:      * bytes.
1:      * <p>
1:      *
1: 	 * @return A byte array containing the global transaction identifier.
1:      **/
1:     public byte[] getGlobalTransactionId()
1:     {
0:         return(global_id);
1:     }
1: 
1:     /**
1:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:      * <p>
1:      *
1: 	 * @return A byte array containing the branch qualifier of the transaction.
1:      **/
1:     public byte[] getBranchQualifier()
1:     {
0:         return(branch_id);
1:     }
1: 
1: 
1: 
1:     public boolean equals(Object other) 
1:     {
1: 		if (other == this)
1: 			return true;
1: 
1: 		if (other == null)
1: 			return false;
1: 	
1: 		try
1: 	    {
1: 			if (other instanceof GlobalXact)
1: 				return super.equals(other);
1: 			// Just cast it and catch the exception rather than doing the type
1: 			// checking twice.
1: 			Xid other_xid = (Xid) other;
1: 		
1: 			return(
1: 				   java.util.Arrays.equals(
1: 									other_xid.getGlobalTransactionId(),
1: 									this.global_id)          &&
1: 				   java.util.Arrays.equals(
1: 									other_xid.getBranchQualifier(),
1: 									this.branch_id)          &&
1: 				   other_xid.getFormatId() == this.format_id);
1: 		
1: 	    }
1: 		catch(ClassCastException cce)
1: 	    {
1: 			// this class only knows how to compare with other Xids
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.THROWASSERT("comparing XAXactId with " + 
0: 										  other.getClass().getName()); 
1: 		
1: 			return false;
1: 	    }
1:     }
1: 
1: 
1: }
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access.xa
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access.xa;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.access.GlobalXact;
0: 
0: import javax.transaction.xa.Xid;
0: import javax.transaction.xa.XAException;
0: 
0: /**
0: 
0: The XAXactId class is a specific implementation of the JTA Xid interface.  It
0: is only used by the TransactionTable.restore() interface to return an array
0: of Xid's back to the caller, as part of serving the XAresource.restore() 
0: interface.
0: <P>
0: It is NOT the object that is stored in the log.  One reason for this is that
0: the Formattable and Xid interface's define two different return values for
0: the getFormatId() interface.
0: 
0: **/
0: 
0: public class XAXactId extends GlobalXact implements Xid
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     /**************************************************************************
0:      * Private Fields of the class
0:      **************************************************************************
0:      */
0: 	private static final char COLON = ':';
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * initialize by making array copies of appropriate fields.
0:      * <p>
0:      **/
0:     private void copy_init_xid(
0: 							   int     format_id,
0: 							   byte[]  global_id,
0: 							   byte[]  branch_id)
0:     {
0: 		this.format_id = format_id;
0: 		this.global_id = new byte[global_id.length];
0: 		System.arraycopy(global_id, 0, this.global_id, 0, global_id.length);
0: 		this.branch_id = new byte[branch_id.length];
0: 		System.arraycopy(branch_id, 0, this.branch_id, 0, branch_id.length);
0:     }
0:     
0:     /**
0:      * Construct from given pieces of an Xid.  Makes copies of arrays.
0:      * <p>
0:      **/
0:     public XAXactId(
0: 					int     format_id,
0: 					byte[]  global_id,
0: 					byte[]  branch_id)
0:     {
0:         copy_init_xid(format_id, global_id, branch_id);
0:     }
0: 
0:     /**
0:      * Construct an Xid using an external Xid.
0:      * <p>
0:      * @exception XAException invalid external xid
0:      */
0:     public XAXactId(Xid xid) throws XAException
0:     {
0: 		if (xid == null)
0: 			throw new XAException(XAException.XAER_NOTA);
0: 	
0:         copy_init_xid(
0: 					  xid.getFormatId(),
0: 					  xid.getGlobalTransactionId(),
0: 					  xid.getBranchQualifier());
0:     }
0: 
0: 
0: 
0: 
0: 
0:     public String toHexString()
0:     {
0: 		// the ascii representation of xid where xid is of 
0: 		// 		format_id = f
0: 		//		global_id = byte[N]
0: 		//		branch_id = byte[M]
0: 		//
0: 		// :xx:yy:ffffffff:n...n:mmmm...m:
0: 		// where	xx = N (up to 64 max)
0: 		//			yy = M (up to 64 max)
0: 		//			n..n = hex dump of global_id (0 to 128 bytes max)
0: 		//			m..m = hex dump of branch_qualifier (0 to 128 bytes max)
0: 	
0: 	// 1+2+1+2+1+9+1+1+1
0: 		int maxLength = 20+(global_id.length+branch_id.length)*2;
0: 		
0: 		StringBuffer hexdump = new StringBuffer(maxLength);
0: 		hexdump.append(COLON).
0: 			append(Integer.toString(global_id.length)).append(COLON).
0: 			append(Integer.toString(branch_id.length)).append(COLON).
0: 			append(Integer.toString(format_id, 16)).append(COLON).
0: 			append(org.apache.derby.iapi.util.StringUtil.toHexString(global_id, 0, global_id.length)).append(COLON).
0: 			append(org.apache.derby.iapi.util.StringUtil.toHexString(branch_id, 0, branch_id.length)).append(COLON);
0: 	
0: 		return hexdump.toString();
0: 
0:     }
0: 
0:     public XAXactId(String xactIdString)
0:     {
0: 		// extract it in pieces delimited by COLON
0: 		int start, end, length;
0: 	
0: 	// xx
0: 		start = 1;
0: 		end = xactIdString.indexOf(COLON, start);
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(end != -1, "illegal string format");
0: 	
0: 		String xx = xactIdString.substring(start, end);
0: 		int N = Integer.parseInt(xx);
0: 	
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(N > 0 && N <= Xid.MAXGTRIDSIZE, "illegal gtrid size");
0: 		}
0: 	
0: 	// yy
0: 		start = end+1;			// skip the COLON
0: 		end = xactIdString.indexOf(COLON, start);
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(end != -1, "illegal string format");
0: 	
0: 		String yy = xactIdString.substring(start,end);
0: 		int M = Integer.parseInt(yy);
0: 	
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(M > 0 && N <= Xid.MAXBQUALSIZE, "illegal bqual size");
0: 	
0: 	// ffffffff
0: 		start = end+1;			// skip the COLON
0: 		end = xactIdString.indexOf(COLON, start);
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(end != -1, "illegal string format");
0: 	
0: 		String f = xactIdString.substring(start,end);
0: 		format_id = Integer.parseInt(f, 16);
0: 
0: 	// n...n
0: 		start = end+1;			// skip the COLON
0: 		end = xactIdString.indexOf(COLON, start);
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(end != -1, "illegal string format");
0: 	
0: 		global_id = org.apache.derby.iapi.util.StringUtil.fromHexString(xactIdString, start, (end-start));
0: 	
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(global_id.length == N, "inconsistent global_id length");
0: 			
0: 	
0: 	// m...m
0: 		start = end+1;			// skip the COLON
0: 		end = xactIdString.indexOf(COLON, start);
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(end != -1, "illegal string format");
0: 	
0: 		branch_id = org.apache.derby.iapi.util.StringUtil.fromHexString(xactIdString, start, (end-start));
0: 	
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(branch_id.length == M, 
0: 								 "inconsistent branch_id length, expect " + M + " got " +
0: 								 branch_id.length);
0: 	
0:     }
0: 
0: 
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods implementing the Xid interface: 
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Obtain the format id part of the Xid.
0:      * <p>
0:      *
0:      * @return Format identifier. O means the OSI CCR format.
0:      **/
0:     public int getFormatId()
0:     {
0:         return(format_id);
0:     }
0: 
0:     /**
0:      * Obtain the global transaction identifier part of XID as an array of 
0:      * bytes.
0:      * <p>
0:      *
0: 	 * @return A byte array containing the global transaction identifier.
0:      **/
0:     public byte[] getGlobalTransactionId()
0:     {
0:         return(global_id);
0:     }
0: 
0:     /**
0:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
0:      * <p>
0:      *
0: 	 * @return A byte array containing the branch qualifier of the transaction.
0:      **/
0:     public byte[] getBranchQualifier()
0:     {
0:         return(branch_id);
0:     }
0: 
0: 
0: 
0:     public boolean equals(Object other) 
0:     {
0: 		if (other == this)
0: 			return true;
0: 
0: 		if (other == null)
0: 			return false;
0: 	
0: 		try
0: 	    {
0: 			if (other instanceof GlobalXact)
0: 				return super.equals(other);
0: 			// Just cast it and catch the exception rather than doing the type
0: 			// checking twice.
0: 			Xid other_xid = (Xid) other;
0: 		
0: 			return(
0: 				   java.util.Arrays.equals(
0: 									other_xid.getGlobalTransactionId(),
0: 									this.global_id)          &&
0: 				   java.util.Arrays.equals(
0: 									other_xid.getBranchQualifier(),
0: 									this.branch_id)          &&
0: 				   other_xid.getFormatId() == this.format_id);
0: 		
0: 	    }
0: 		catch(ClassCastException cce)
0: 	    {
0: 			// this class only knows how to compare with other Xids
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("comparing XAXactId with " + 
0: 										  other.getClass().getName()); 
0: 		
0: 			return false;
0: 	    }
0:     }
0: 
0: 
0: }
0: 
0: 
0: 
============================================================================