1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINScanPropsDescriptor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.catalog;
1:48a9884: 
1:48a9884: import java.sql.PreparedStatement;
1:48a9884: import java.sql.SQLException;
1:48a9884: 
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:4771f1f: import org.apache.derby.iapi.types.TypeId;
1:48a9884: import java.sql.Types;
1:48a9884: 
1:48a9884: public class XPLAINScanPropsDescriptor extends XPLAINTableDescriptor 
1:48a9884: {
1:48a9884: 
1:48a9884:     private UUID scan_rs_id; // the UUID of this scan info tuple
1:48a9884:     private String scan_object_name; // the name of the scanned object
1:48a9884:     private String scan_object_type; // the object type, either index, constraint or table
1:48a9884:     private String scan_type; // the type of the scan: heap, btree or sort
1:48a9884:     private String isolation_level; // the isolation level
1:48a9884:     private Integer no_visited_pages; // the number of visited pages during this scan
1:48a9884:     private Integer no_visited_rows; // the number of visited rows during this scan
1:48a9884:     private Integer no_qualified_rows; // the number of qualified rows, during the scan
1:48a9884:     private Integer no_visited_deleted_rows; // the number of visited rows, marked for delete
1:48a9884:     private Integer no_fetched_columns; // the number of fetched columns of this scan from the object
1:48a9884:     private String bitset_of_fetched_columns; // the bitset of the fetched columns
1:48a9884:     private Integer btree_height; // the btree height, if this is a btree scan
1:48a9884:     private Integer fetch_size; // the fetch size, for bulk scans
1:48a9884:     private String start_position; // the start positioner info, internal encoding
1:48a9884:     private String stop_position; // the stop positioner info, internal encoding
1:48a9884:     private String scan_qualifiers; // the scan qualifiers, in internal encoding (conjunctive normal form)
1:48a9884:     private String next_qualifiers; // the next qualifiers, in internal encoding
1:48a9884:     private String hash_key_column_numbers; // the hash key column numbers
1:48a9884:     private Integer hash_table_size; // the hash table size of the constructed hash table during the scan
1:48a9884:     
1:48a9884:     public XPLAINScanPropsDescriptor() {}
1:48a9884:     public XPLAINScanPropsDescriptor 
1:48a9884:     (
1:48a9884:              UUID scan_rs_id,
1:48a9884:              String scan_object_name,
1:48a9884:              String scan_object_type,
1:48a9884:              String scan_type,
1:48a9884:              String isolation_level,
1:48a9884:              Integer no_visited_pages,
1:48a9884:              Integer no_visited_rows,
1:48a9884:              Integer no_qualified_rows,
1:48a9884:              Integer no_visited_deleted_rows,
1:48a9884:              Integer no_fetched_columns,
1:48a9884:              String bitset_of_fetched_columns,
1:48a9884:              Integer btree_height,
1:48a9884:              Integer fetch_size,
1:48a9884:              String start_position,
1:48a9884:              String stop_position,
1:48a9884:              String scan_qualifiers,
1:48a9884:              String next_qualifiers,
1:48a9884:              String hash_key_column_numbers,
1:48a9884:              Integer hash_table_size
1:48a9884:     )
1:48a9884:     {
1:48a9884:         
1:48a9884:         this.scan_rs_id = scan_rs_id;
1:48a9884:         this.scan_object_name = scan_object_name;
1:48a9884:         this.scan_object_type = scan_object_type;
1:48a9884:         this.scan_type = scan_type;
1:48a9884:         this.isolation_level = isolation_level;
1:48a9884:         this.no_visited_pages = no_visited_pages;
1:48a9884:         this.no_visited_rows  = no_visited_rows;
1:48a9884:         this.no_qualified_rows = no_qualified_rows;
1:48a9884:         this.no_visited_deleted_rows = no_visited_deleted_rows;
1:48a9884:         this.no_fetched_columns = no_fetched_columns;
1:48a9884:         this.bitset_of_fetched_columns = bitset_of_fetched_columns;
1:48a9884:         this.btree_height = btree_height;
1:48a9884:         this.fetch_size = fetch_size;
1:48a9884:         this.start_position = start_position;
1:48a9884:         this.stop_position = stop_position;
1:48a9884:         this.scan_qualifiers = scan_qualifiers;
1:48a9884:         this.next_qualifiers = next_qualifiers;
1:48a9884:         this.hash_key_column_numbers = hash_key_column_numbers;
1:48a9884:         this.hash_table_size = hash_table_size;
1:48a9884:     }
1:48a9884:     public void setStatementParameters(PreparedStatement ps)
1:48a9884:         throws SQLException
1:48a9884:     {
1:48a9884:         ps.setString(1, scan_rs_id.toString());
1:48a9884:         ps.setString(2, scan_object_name);
1:48a9884:         ps.setString(3, scan_object_type);
1:48a9884:         ps.setString(4, scan_type);
1:48a9884:         ps.setString(5, isolation_level);
1:638cea5:         ps.setObject(6, no_visited_pages, Types.INTEGER);
1:638cea5:         ps.setObject(7, no_visited_rows, Types.INTEGER);
1:638cea5:         ps.setObject(8, no_qualified_rows, Types.INTEGER);
1:638cea5:         ps.setObject(9, no_visited_deleted_rows, Types.INTEGER);
1:638cea5:         ps.setObject(10, no_fetched_columns, Types.INTEGER);
1:48a9884:         ps.setString(11, bitset_of_fetched_columns);
1:638cea5:         ps.setObject(12, btree_height, Types.INTEGER);
1:638cea5:         ps.setObject(13, fetch_size, Types.INTEGER);
1:48a9884:         ps.setString(14, start_position);
1:48a9884:         ps.setString(15, stop_position);
1:48a9884:         ps.setString(16, scan_qualifiers);
1:48a9884:         ps.setString(17, next_qualifiers);
1:48a9884:         ps.setString(18, hash_key_column_numbers);
1:638cea5:         ps.setObject(19, hash_table_size, Types.INTEGER);
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setScan_type(String scan_type) {
1:48a9884:         this.scan_type = scan_type;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_visited_pages(Integer no_visited_pages) {
1:48a9884:         this.no_visited_pages = no_visited_pages;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_visited_rows(Integer no_visited_rows) {
1:48a9884:         this.no_visited_rows = no_visited_rows;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_qualified_rows(Integer no_qualified_rows) {
1:48a9884:         this.no_qualified_rows = no_qualified_rows;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_fetched_columns(Integer no_fetched_columns) {
1:48a9884:         this.no_fetched_columns = no_fetched_columns;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setNo_visited_deleted_rows(Integer no_visited_deleted_rows) {
1:48a9884:         this.no_visited_deleted_rows = no_visited_deleted_rows;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setBtree_height(Integer btree_height) {
1:48a9884:         this.btree_height = btree_height;
1:48a9884:     }
1:48a9884: 
1:48a9884:     public void setBitset_of_fetched_columns(String bitset_of_fetched_columns) {
1:48a9884:         this.bitset_of_fetched_columns = bitset_of_fetched_columns;
1:48a9884:     }
1:48a9884: 
1:48a9884: 
1:48a9884:     public String getCatalogName() { return TABLENAME_STRING; }
1:48a9884:     static final   String  TABLENAME_STRING = "SYSXPLAIN_SCAN_PROPS";
1:48a9884:     
1:48a9884:     private static final String[][] indexColumnNames =
1:48a9884:     {
1:48a9884:         {"SCAN_RS_ID"}
1:48a9884:     };
1:48a9884: 
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * Builds a list of columns suitable for creating this Catalog.
1:48a9884:      *
1:48a9884:      * @return array of SystemColumn suitable for making this catalog.
1:48a9884:      */
1:48a9884:     public SystemColumn[] buildColumnList() {
1:48a9884:         
1:48a9884:         return new SystemColumn[] {
1:48a9884:             SystemColumnImpl.getUUIDColumn("SCAN_RS_ID", false),
1:48a9884:             SystemColumnImpl.getIdentifierColumn("SCAN_OBJECT_NAME", false),
1:48a9884:             SystemColumnImpl.getIndicatorColumn("SCAN_OBJECT_TYPE"),
1:48a9884:             SystemColumnImpl.getColumn("SCAN_TYPE", Types.CHAR, false, 8),
1:48a9884:             SystemColumnImpl.getColumn("ISOLATION_LEVEL", Types.CHAR, true, 3),
1:48a9884:             SystemColumnImpl.getColumn("NO_VISITED_PAGES", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("NO_VISITED_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("NO_QUALIFIED_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("NO_VISITED_DELETED_ROWS", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("NO_FETCHED_COLUMNS", Types.INTEGER, true),
1:4771f1f:             SystemColumnImpl.getColumn("BITSET_OF_FETCHED_COLUMNS",
1:4771f1f:                     Types.VARCHAR, true, TypeId.VARCHAR_MAXWIDTH),
1:48a9884:             SystemColumnImpl.getColumn("BTREE_HEIGHT", Types.INTEGER, true),
1:48a9884:             SystemColumnImpl.getColumn("FETCH_SIZE", Types.INTEGER, true),
1:4771f1f:             SystemColumnImpl.getColumn("START_POSITION", Types.VARCHAR, true,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("STOP_POSITION", Types.VARCHAR, true,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("SCAN_QUALIFIERS", Types.VARCHAR, true,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("NEXT_QUALIFIERS", Types.VARCHAR, true,
1:4771f1f:                     TypeId.VARCHAR_MAXWIDTH),
1:4771f1f:             SystemColumnImpl.getColumn("HASH_KEY_COLUMN_NUMBERS",
1:4771f1f:                     Types.VARCHAR, true, TypeId.VARCHAR_MAXWIDTH),
1:48a9884:             SystemColumnImpl.getColumn("HASH_TABLE_SIZE", Types.INTEGER, true),
1:48a9884:         };
1:48a9884:     }
1:48a9884: 
1:48a9884: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:638cea5
/////////////////////////////////////////////////////////////////////////
1:         ps.setObject(6, no_visited_pages, Types.INTEGER);
1:         ps.setObject(7, no_visited_rows, Types.INTEGER);
1:         ps.setObject(8, no_qualified_rows, Types.INTEGER);
1:         ps.setObject(9, no_visited_deleted_rows, Types.INTEGER);
1:         ps.setObject(10, no_fetched_columns, Types.INTEGER);
1:         ps.setObject(12, btree_height, Types.INTEGER);
1:         ps.setObject(13, fetch_size, Types.INTEGER);
1:         ps.setObject(19, hash_table_size, Types.INTEGER);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4771f1f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:             SystemColumnImpl.getColumn("BITSET_OF_FETCHED_COLUMNS",
1:                     Types.VARCHAR, true, TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("START_POSITION", Types.VARCHAR, true,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("STOP_POSITION", Types.VARCHAR, true,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("SCAN_QUALIFIERS", Types.VARCHAR, true,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("NEXT_QUALIFIERS", Types.VARCHAR, true,
1:                     TypeId.VARCHAR_MAXWIDTH),
1:             SystemColumnImpl.getColumn("HASH_KEY_COLUMN_NUMBERS",
1:                     Types.VARCHAR, true, TypeId.VARCHAR_MAXWIDTH),
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINScanPropsDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.impl.sql.catalog.SystemColumnImpl;
1: import java.sql.Types;
1: 
1: public class XPLAINScanPropsDescriptor extends XPLAINTableDescriptor 
1: {
1: 
1:     private UUID scan_rs_id; // the UUID of this scan info tuple
1:     private String scan_object_name; // the name of the scanned object
1:     private String scan_object_type; // the object type, either index, constraint or table
1:     private String scan_type; // the type of the scan: heap, btree or sort
1:     private String isolation_level; // the isolation level
1:     private Integer no_visited_pages; // the number of visited pages during this scan
1:     private Integer no_visited_rows; // the number of visited rows during this scan
1:     private Integer no_qualified_rows; // the number of qualified rows, during the scan
1:     private Integer no_visited_deleted_rows; // the number of visited rows, marked for delete
1:     private Integer no_fetched_columns; // the number of fetched columns of this scan from the object
1:     private String bitset_of_fetched_columns; // the bitset of the fetched columns
1:     private Integer btree_height; // the btree height, if this is a btree scan
1:     private Integer fetch_size; // the fetch size, for bulk scans
1:     private String start_position; // the start positioner info, internal encoding
1:     private String stop_position; // the stop positioner info, internal encoding
1:     private String scan_qualifiers; // the scan qualifiers, in internal encoding (conjunctive normal form)
1:     private String next_qualifiers; // the next qualifiers, in internal encoding
1:     private String hash_key_column_numbers; // the hash key column numbers
1:     private Integer hash_table_size; // the hash table size of the constructed hash table during the scan
1:     
1:     public XPLAINScanPropsDescriptor() {}
1:     public XPLAINScanPropsDescriptor 
1:     (
1:              UUID scan_rs_id,
1:              String scan_object_name,
1:              String scan_object_type,
1:              String scan_type,
1:              String isolation_level,
1:              Integer no_visited_pages,
1:              Integer no_visited_rows,
1:              Integer no_qualified_rows,
1:              Integer no_visited_deleted_rows,
1:              Integer no_fetched_columns,
1:              String bitset_of_fetched_columns,
1:              Integer btree_height,
1:              Integer fetch_size,
1:              String start_position,
1:              String stop_position,
1:              String scan_qualifiers,
1:              String next_qualifiers,
1:              String hash_key_column_numbers,
1:              Integer hash_table_size
1:     )
1:     {
1:         
1:         this.scan_rs_id = scan_rs_id;
1:         this.scan_object_name = scan_object_name;
1:         this.scan_object_type = scan_object_type;
1:         this.scan_type = scan_type;
1:         this.isolation_level = isolation_level;
1:         this.no_visited_pages = no_visited_pages;
1:         this.no_visited_rows  = no_visited_rows;
1:         this.no_qualified_rows = no_qualified_rows;
1:         this.no_visited_deleted_rows = no_visited_deleted_rows;
1:         this.no_fetched_columns = no_fetched_columns;
1:         this.bitset_of_fetched_columns = bitset_of_fetched_columns;
1:         this.btree_height = btree_height;
1:         this.fetch_size = fetch_size;
1:         this.start_position = start_position;
1:         this.stop_position = stop_position;
1:         this.scan_qualifiers = scan_qualifiers;
1:         this.next_qualifiers = next_qualifiers;
1:         this.hash_key_column_numbers = hash_key_column_numbers;
1:         this.hash_table_size = hash_table_size;
1:     }
1:     public void setStatementParameters(PreparedStatement ps)
1:         throws SQLException
1:     {
1:         ps.setString(1, scan_rs_id.toString());
1:         ps.setString(2, scan_object_name);
1:         ps.setString(3, scan_object_type);
1:         ps.setString(4, scan_type);
1:         ps.setString(5, isolation_level);
0:         if (no_visited_pages != null)
0:             ps.setInt(6, no_visited_pages.intValue());
0:         else
0:             ps.setNull(6, Types.INTEGER);
0:         if (no_visited_rows != null)
0:             ps.setInt(7, no_visited_rows.intValue());
0:         else
0:             ps.setNull(7, Types.INTEGER);
0:         if (no_qualified_rows != null)
0:             ps.setInt(8, no_qualified_rows.intValue());
0:         else
0:             ps.setNull(8, Types.INTEGER);
0:         if (no_visited_deleted_rows != null)
0:             ps.setInt(9, no_visited_deleted_rows.intValue());
0:         else
0:             ps.setNull(9, Types.INTEGER);
0:         if (no_fetched_columns != null)
0:             ps.setInt(10, no_fetched_columns.intValue());
0:         else
0:             ps.setNull(10, Types.INTEGER);
1:         ps.setString(11, bitset_of_fetched_columns);
0:         if (btree_height != null)
0:             ps.setInt(12, btree_height.intValue());
0:         else
0:             ps.setNull(12, Types.INTEGER);
0:         if (fetch_size != null)
0:             ps.setInt(13, fetch_size.intValue());
0:         else
0:             ps.setNull(13, Types.INTEGER);
1:         ps.setString(14, start_position);
1:         ps.setString(15, stop_position);
1:         ps.setString(16, scan_qualifiers);
1:         ps.setString(17, next_qualifiers);
1:         ps.setString(18, hash_key_column_numbers);
0:         if (hash_table_size != null)
0:             ps.setInt(19, hash_table_size.intValue());
0:         else
0:             ps.setNull(19, Types.INTEGER);
1:     }
1: 
1:     public void setScan_type(String scan_type) {
1:         this.scan_type = scan_type;
1:     }
1: 
1:     public void setNo_visited_pages(Integer no_visited_pages) {
1:         this.no_visited_pages = no_visited_pages;
1:     }
1: 
1:     public void setNo_visited_rows(Integer no_visited_rows) {
1:         this.no_visited_rows = no_visited_rows;
1:     }
1: 
1:     public void setNo_qualified_rows(Integer no_qualified_rows) {
1:         this.no_qualified_rows = no_qualified_rows;
1:     }
1: 
1:     public void setNo_fetched_columns(Integer no_fetched_columns) {
1:         this.no_fetched_columns = no_fetched_columns;
1:     }
1: 
1:     public void setNo_visited_deleted_rows(Integer no_visited_deleted_rows) {
1:         this.no_visited_deleted_rows = no_visited_deleted_rows;
1:     }
1: 
1:     public void setBtree_height(Integer btree_height) {
1:         this.btree_height = btree_height;
1:     }
1: 
1:     public void setBitset_of_fetched_columns(String bitset_of_fetched_columns) {
1:         this.bitset_of_fetched_columns = bitset_of_fetched_columns;
1:     }
1: 
1: 
1:     public String getCatalogName() { return TABLENAME_STRING; }
1:     static final   String  TABLENAME_STRING = "SYSXPLAIN_SCAN_PROPS";
1:     
1:     private static final String[][] indexColumnNames =
1:     {
1:         {"SCAN_RS_ID"}
1:     };
1: 
1: 
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[] buildColumnList() {
1:         
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("SCAN_RS_ID", false),
1:             SystemColumnImpl.getIdentifierColumn("SCAN_OBJECT_NAME", false),
1:             SystemColumnImpl.getIndicatorColumn("SCAN_OBJECT_TYPE"),
1:             SystemColumnImpl.getColumn("SCAN_TYPE", Types.CHAR, false, 8),
1:             SystemColumnImpl.getColumn("ISOLATION_LEVEL", Types.CHAR, true, 3),
1:             SystemColumnImpl.getColumn("NO_VISITED_PAGES", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("NO_VISITED_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("NO_QUALIFIED_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("NO_VISITED_DELETED_ROWS", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("NO_FETCHED_COLUMNS", Types.INTEGER, true),
0:             SystemColumnImpl.getColumn("BITSET_OF_FETCHED_COLUMNS", Types.VARCHAR, true, 256),
1:             SystemColumnImpl.getColumn("BTREE_HEIGHT", Types.INTEGER, true),
1:             SystemColumnImpl.getColumn("FETCH_SIZE", Types.INTEGER, true),
0:             SystemColumnImpl.getColumn("START_POSITION", Types.VARCHAR, true, 512),
0:             SystemColumnImpl.getColumn("STOP_POSITION", Types.VARCHAR, true, 512),
0:             SystemColumnImpl.getColumn("SCAN_QUALIFIERS", Types.VARCHAR, true, 512),
0:             SystemColumnImpl.getColumn("NEXT_QUALIFIERS", Types.VARCHAR, true, 512),
0:             SystemColumnImpl.getColumn("HASH_KEY_COLUMN_NUMBERS", Types.VARCHAR, true, 512),
1:             SystemColumnImpl.getColumn("HASH_TABLE_SIZE", Types.INTEGER, true),
1:         };
1:     }
1: 
1: }
============================================================================