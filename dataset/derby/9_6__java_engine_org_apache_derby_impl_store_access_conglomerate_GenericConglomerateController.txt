1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
11:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.conglomerate;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.store.access.RowUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.FetchDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369: **/
1:eac0369: 
1:eac0369: public abstract class GenericConglomerateController 
1:eac0369:     extends GenericController implements ConglomerateController
3:eac0369: {
1:eac0369: 
2:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class
2:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods implementing ConglomerateController which just 
1:eac0369:      *     delegate to OpenConglomerate:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods implementing ConglomerateController:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @see ConglomerateController#close
1:eac0369:      **/
1:eac0369:     public void close()
6:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369:         super.close();
1:eac0369: 
1:eac0369: 		// If we are closed due to catching an error in the middle of init,
1:eac0369: 		// xact_manager may not be set yet. 
1:eac0369:         if ((open_conglom != null) && (open_conglom.getXactMgr() != null))
1:eac0369:             open_conglom.getXactMgr().closeMe(this);
3:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Close conglomerate controller as part of terminating a transaction.
1:eac0369:      * <p>
1:eac0369:      * Use this call to close the conglomerate controller resources as part of
1:eac0369:      * committing or aborting a transaction.  The normal close() routine may 
1:eac0369:      * do some cleanup that is either unnecessary, or not correct due to the 
1:eac0369:      * unknown condition of the controller following a transaction ending error.
1:eac0369:      * Use this call when closing all controllers as part of an abort of a 
1:eac0369:      * transaction.
1:dbed020:      * <p>
1:eac0369:      * This call is meant to only be used internally by the Storage system,
1:eac0369:      * clients of the storage system should use the simple close() interface.
1:eac0369:      * <p>
1:eac0369:      * RESOLVE (mikem) - move this call to ConglomerateManager so it is
1:eac0369:      * obvious that non-access clients should not call this.
1:eac0369:      *
1:8758a25:      * @param closeHeldScan           If true, means to close controller even if
1:eac0369:      *                                it has been opened to be kept opened 
1:eac0369:      *                                across commit.  This is
1:eac0369:      *                                used to close these controllers on abort.
1:eac0369:      *
1:eac0369: 	 * @return boolean indicating that the close has resulted in a real close
1:eac0369:      *                 of the controller.  A held scan will return false if 
1:eac0369:      *                 called by closeForEndTransaction(false), otherwise it 
1:eac0369:      *                 will return true.  A non-held scan will always return 
1:eac0369:      *                 true.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean closeForEndTransaction(boolean closeHeldScan)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         super.close();
1:eac0369: 
1:eac0369:         if ((!open_conglom.getHold()) || closeHeldScan) 
1:eac0369:         {
1:eac0369:             // If we are closed due to catching an error in the middle of init,
1:eac0369:             // xact_manager may not be set yet. 
1:eac0369:             if ((open_conglom != null) && (open_conglom.getXactMgr() != null))
1:eac0369:                 open_conglom.getXactMgr().closeMe(this);
1:eac0369: 
1:eac0369:             return(true);
1:eac0369: 
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(false);
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @see ConglomerateController#delete
1:eac0369:      **/
1:eac0369:     public boolean delete(RowLocation loc)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         if (open_conglom.isClosed())
1:eac0369:         {
1:eac0369:             if (open_conglom.getHold())
1:eac0369:             {
1:eac0369:                 if (open_conglom.isClosed())
1:eac0369:                     open_conglom.reopen();
1:eac0369:             }
1:eac0369:             else
1:eac0369:             {
1:eac0369:                 throw(
1:eac0369:                     StandardException.newException(
1:eac0369:                         SQLState.HEAP_IS_CLOSED, 
1:eac0369:                         open_conglom.getConglomerate().getId()));
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:3f3b5e6:         RowPosition pos = 
1:3f3b5e6:             open_conglom.getRuntimeMem().get_scratch_row_position();
1:eac0369: 
1:eac0369:         getRowPositionFromRowLocation(loc, pos);
1:eac0369: 
1:b7cdec2:         if (!open_conglom.latchPage(pos)) 
1:eac0369:         {
1:b7cdec2:             return false;
1:eac0369:         }
1:eac0369: 
1:20cc6f6:         open_conglom.lockPositionForWrite(pos, true);
1:eac0369: 
1:eac0369:         boolean ret_val = true;
1:eac0369: 
1:eac0369:         // RESOLVE (mikem) - RECID - performance could be better if we did not
1:eac0369:         // have to call isDeletedAtSlot().
1:eac0369: 
1:eac0369:         if (pos.current_page.isDeletedAtSlot(pos.current_slot))
1:eac0369:         {
1:eac0369:             ret_val = false;
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             // Delete the row 
1:eac0369:             pos.current_page.deleteAtSlot(
1:eac0369:                 pos.current_slot, true, (LogicalUndo) null);
1:eac0369: 
1:eac0369:             // try to reclaim rows when the page is only full of deleted rows,
1:eac0369:             // or in the special case of the first page when all rows except the
1:0ce6b77:             // "control row" are deleted.  Or if the row we just deleted is
1:0ce6b77:             // a long row or has a long column.
1:0ce6b77:             if (pos.current_page.shouldReclaimSpace(
1:0ce6b77:                 pos.current_page.getPageNumber() == 1 ? 1 : 0,
1:0ce6b77:                 pos.current_slot))
1:eac0369:             {
1:eac0369:                 queueDeletePostCommitWork(pos);
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         pos.current_page.unlatch();
1:eac0369: 
1:eac0369:         return(ret_val);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @see ConglomerateController#fetch
1:eac0369:      **/
1:eac0369:     public boolean fetch(
1:eac0369:     RowLocation             loc, 
2:eac0369:     DataValueDescriptor[]   row, 
1:eac0369:     FormatableBitSet                 validColumns) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         if (open_conglom.isClosed())
1:eac0369:         {
1:eac0369:             if (open_conglom.getHold())
1:eac0369:             {
1:eac0369:                 if (open_conglom.isClosed())
1:eac0369:                     open_conglom.reopen();
1:eac0369:             }
1:eac0369:             else
1:eac0369:             {
1:eac0369:                 throw(
1:eac0369:                     StandardException.newException(
1:eac0369:                         SQLState.HEAP_IS_CLOSED, 
1:eac0369:                         open_conglom.getConglomerate().getId()));
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             // Make sure valid columns are in the list.  The RowUtil
1:eac0369:             // call is too expensive to make in a released system for
1:eac0369:             // every fetch.
1:eac0369:             int invalidColumn = 
1:eac0369:                 RowUtil.columnOutOfRange(
1:eac0369:                     row, validColumns, open_conglom.getFormatIds().length);
1:eac0369: 
1:eac0369:             if (invalidColumn >= 0)
1:eac0369:             {
6:eac0369:                 throw(StandardException.newException(
1:eac0369:                         SQLState.HEAP_TEMPLATE_MISMATCH,
1:ce40a31:                         invalidColumn, 
1:ce40a31:                         open_conglom.getFormatIds().length));
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         // Get the record handle out of its wrapper.
1:eac0369: 
1:3f3b5e6:         RowPosition pos = 
1:3f3b5e6:             open_conglom.getRuntimeMem().get_scratch_row_position();
1:eac0369: 
1:eac0369:         getRowPositionFromRowLocation(loc, pos);
1:eac0369: 
1:eac0369:         if (!open_conglom.latchPage(pos))
1:eac0369:         {
1:eac0369:             return(false);
1:eac0369:         }
1:eac0369: 
1:eac0369: 
1:eac0369:         // Do not get U row lock - only get X or S.  There is no good point
1:eac0369:         // currently to convert the U lock to an S lock, we don't know when
1:eac0369:         // the calling code is through with the lock.
1:eac0369:         // RESOLVE (mikem) - talk to language and see if it is worth it to
1:eac0369:         //     get U lock and have language call back when we should take
1:eac0369:         //     appropriate action on the U lock.
1:eac0369: 
1:eac0369:         if (open_conglom.isForUpdate())
1:eac0369:         {
1:20cc6f6:             open_conglom.lockPositionForWrite(pos, true);
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             open_conglom.lockPositionForRead(
1:eac0369:                 pos, (RowPosition) null, false, true);
1:eac0369:         }
1:eac0369: 
1:4f7da81:         if (pos.current_page == null)
1:4f7da81:         {
1:4f7da81:             // The page is not latched after locking the row. This happens if
1:4f7da81:             // the row was deleted while we were waiting for the lock. Return
1:4f7da81:             // false to indicate that the row is no longer valid. (DERBY-4676)
1:4f7da81:             return false;
1:4f7da81:         }
1:4f7da81: 
1:eac0369:         // Fetch the row.
1:eac0369:         // RESOLVE (STO061) - don't know whether the fetch is for update or not.
1:eac0369:         //
1:eac0369:         // RESOLVE (mikem) - get rid of new here.
1:eac0369:         boolean ret_val = 
1:eac0369:             (pos.current_page.fetchFromSlot(
1:eac0369:                 pos.current_rh, pos.current_slot, 
1:eac0369:                 row, 
1:eac0369:                 new FetchDescriptor(
1:eac0369:                     row.length, validColumns, (Qualifier[][]) null), 
1:eac0369:                 false) != null);
1:eac0369: 
1:eac0369:         // RESOLVE (mikem) - should be some way to hide this in the unlock call,
1:eac0369:         // and just always make the unlock call.
1:eac0369: 
1:eac0369:         if (!open_conglom.isForUpdate())
1:eac0369:             open_conglom.unlockPositionAfterRead(pos);
1:eac0369: 
1:eac0369:         pos.current_page.unlatch();
1:eac0369: 
1:eac0369:         return(ret_val);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @see ConglomerateController#fetch
1:eac0369:      **/
1:eac0369:     public boolean fetch(
1:eac0369:     RowLocation             loc, 
1:eac0369:     DataValueDescriptor[]   row, 
1:eac0369:     FormatableBitSet                 validColumns,
1:eac0369:     boolean                 waitForLock) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         if (open_conglom.isClosed())
1:eac0369:         {
1:eac0369:             if (open_conglom.getHold())
1:eac0369:             {
1:eac0369:                 if (open_conglom.isClosed())
1:eac0369:                     open_conglom.reopen();
1:eac0369:             }
1:eac0369:             else
1:eac0369:             {
1:eac0369:                 throw(
1:eac0369:                     StandardException.newException(
1:eac0369:                         SQLState.HEAP_IS_CLOSED, 
1:eac0369:                         open_conglom.getConglomerate().getId()));
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             // Make sure valid columns are in the list.  The RowUtil
1:eac0369:             // call is too expensive to make in a released system for
1:eac0369:             // every fetch.
1:eac0369:             int invalidColumn = 
1:eac0369:                 RowUtil.columnOutOfRange(
1:eac0369:                     row, validColumns, open_conglom.getFormatIds().length);
1:eac0369: 
1:eac0369:             if (invalidColumn >= 0)
1:eac0369:             {
1:eac0369:                 throw(StandardException.newException(
1:eac0369:                         SQLState.HEAP_TEMPLATE_MISMATCH,
1:ce40a31:                         invalidColumn, 
1:ce40a31:                         open_conglom.getFormatIds().length));
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         // Get the record handle out of its wrapper.
1:eac0369: 
1:3f3b5e6:         RowPosition pos = 
1:3f3b5e6:             open_conglom.getRuntimeMem().get_scratch_row_position();
1:eac0369: 
1:eac0369:         getRowPositionFromRowLocation(loc, pos);
1:eac0369: 
1:b7cdec2:         if (!open_conglom.latchPage(pos)) 
1:eac0369:         {
1:b7cdec2:             return false;
1:eac0369:         }
1:eac0369: 
1:eac0369:         // Do not get U row lock - only get X or S.  There is not good point
1:eac0369:         // currently to convert the U lock to an S lock, we don't know when
1:eac0369:         // the calling code is through with the lock.
1:eac0369:         // RESOLVE (mikem) - talk to language and see if it is worth it to
1:eac0369:         //     get U lock and have language call back when we should take
1:eac0369:         //     appropriate action on the U lock.
1:eac0369: 
1:eac0369:         if (open_conglom.isForUpdate())
1:eac0369:         {
1:20cc6f6:             open_conglom.lockPositionForWrite(pos, waitForLock);
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             open_conglom.lockPositionForRead(
1:eac0369:                 pos, (RowPosition) null, false, waitForLock);
1:4f7da81:         }
1:4f7da81: 
1:4f7da81:         if (pos.current_page == null)
1:4f7da81:         {
1:4f7da81:             // The page is not latched after locking the row. This happens if
1:4f7da81:             // the row was deleted while we were waiting for the lock. Return
1:4f7da81:             // false to indicate that the row is no longer valid. (DERBY-4676)
1:4f7da81:             return false;
1:eac0369:         }
1:eac0369: 
1:eac0369:         // Fetch the row.
1:eac0369:         // RESOLVE (STO061) - don't know whether the fetch is for update or not.
1:eac0369:         //
1:eac0369:         //
1:eac0369:         // RESOLVE (mikem) - get rid of new here.
1:eac0369:         boolean ret_val = 
1:eac0369:             (pos.current_page.fetchFromSlot(
1:eac0369:                 pos.current_rh, pos.current_slot, 
1:eac0369:                 row, 
1:eac0369:                 new FetchDescriptor(
1:eac0369:                     row.length, validColumns, (Qualifier[][]) null), 
1:eac0369:                 false) != null);
1:eac0369: 
1:eac0369:         // RESOLVE (mikem) - should be some way to hide this in the unlock call,
1:eac0369:         // and just always make the unlock call.
1:eac0369:         if (!open_conglom.isForUpdate())
1:eac0369:             open_conglom.unlockPositionAfterRead(pos);
1:eac0369: 
1:eac0369:         pos.current_page.unlatch();
1:eac0369: 
1:eac0369:         return(ret_val);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @see ConglomerateController#replace
1:eac0369:      **/
1:eac0369:     public boolean replace(
1:eac0369:     RowLocation             loc, 
1:eac0369:     DataValueDescriptor[]   row, 
1:eac0369:     FormatableBitSet                 validColumns)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         if (open_conglom.isClosed())
1:eac0369:         {
1:eac0369:             if (open_conglom.getHold())
1:eac0369:             {
1:eac0369:                 if (open_conglom.isClosed())
1:eac0369:                     open_conglom.reopen();
1:eac0369:             }
1:eac0369:             else
1:eac0369:             {
1:eac0369:                 throw(
1:eac0369:                     StandardException.newException(
1:eac0369:                         SQLState.HEAP_IS_CLOSED, 
1:eac0369:                         open_conglom.getConglomerate().getId()));
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             // Make sure valid columns are in the list.  The RowUtil
1:eac0369:             // call is too expensive to make in a released system for
1:eac0369:             // every fetch.
1:eac0369:             int invalidColumn = 
1:eac0369:                 RowUtil.columnOutOfRange(
1:eac0369:                     row, validColumns, open_conglom.getFormatIds().length);
1:eac0369: 
1:eac0369:             if (invalidColumn >= 0)
1:eac0369:             {
1:eac0369:                 throw(StandardException.newException(
1:eac0369:                         SQLState.HEAP_TEMPLATE_MISMATCH,
1:ce40a31:                         invalidColumn, 
1:ce40a31:                         open_conglom.getFormatIds().length));
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:3f3b5e6:         RowPosition pos = 
1:3f3b5e6:             open_conglom.getRuntimeMem().get_scratch_row_position();
1:eac0369: 
1:eac0369:         getRowPositionFromRowLocation(loc, pos);
1:eac0369: 
1:b7cdec2:         if (!open_conglom.latchPage(pos)) 
1:eac0369:         {
1:b7cdec2:             return false;
1:eac0369:         }
1:eac0369: 
1:20cc6f6:         open_conglom.lockPositionForWrite(pos, true);
1:eac0369: 
1:eac0369:         boolean ret_val = true;
1:eac0369: 
1:eac0369:         if (pos.current_page.isDeletedAtSlot(pos.current_slot))
1:eac0369:         {
1:eac0369:             ret_val = false;
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             // Update the record.  
1:eac0369:             pos.current_page.updateAtSlot(pos.current_slot, row, validColumns);
1:eac0369:         }
1:eac0369: 
1:eac0369:         pos.current_page.unlatch();
1:eac0369: 
1:eac0369:         return(ret_val);
1:eac0369:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * <p>
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                         invalidColumn, 
1:                         open_conglom.getFormatIds().length));
/////////////////////////////////////////////////////////////////////////
1:                         invalidColumn, 
1:                         open_conglom.getFormatIds().length));
/////////////////////////////////////////////////////////////////////////
1:                         invalidColumn, 
1:                         open_conglom.getFormatIds().length));
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:20cc6f6
/////////////////////////////////////////////////////////////////////////
1:         open_conglom.lockPositionForWrite(pos, true);
/////////////////////////////////////////////////////////////////////////
1:             open_conglom.lockPositionForWrite(pos, true);
/////////////////////////////////////////////////////////////////////////
1:             open_conglom.lockPositionForWrite(pos, waitForLock);
/////////////////////////////////////////////////////////////////////////
1:         open_conglom.lockPositionForWrite(pos, true);
commit:4f7da81
/////////////////////////////////////////////////////////////////////////
1:         if (pos.current_page == null)
1:         {
1:             // The page is not latched after locking the row. This happens if
1:             // the row was deleted while we were waiting for the lock. Return
1:             // false to indicate that the row is no longer valid. (DERBY-4676)
1:             return false;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (pos.current_page == null)
1:         {
1:             // The page is not latched after locking the row. This happens if
1:             // the row was deleted while we were waiting for the lock. Return
1:             // false to indicate that the row is no longer valid. (DERBY-4676)
1:             return false;
1:         }
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3f3b5e6
/////////////////////////////////////////////////////////////////////////
1:         RowPosition pos = 
1:             open_conglom.getRuntimeMem().get_scratch_row_position();
/////////////////////////////////////////////////////////////////////////
1:         RowPosition pos = 
1:             open_conglom.getRuntimeMem().get_scratch_row_position();
/////////////////////////////////////////////////////////////////////////
1:         RowPosition pos = 
1:             open_conglom.getRuntimeMem().get_scratch_row_position();
/////////////////////////////////////////////////////////////////////////
1:         RowPosition pos = 
1:             open_conglom.getRuntimeMem().get_scratch_row_position();
commit:0ce6b77
/////////////////////////////////////////////////////////////////////////
1:             // "control row" are deleted.  Or if the row we just deleted is
1:             // a long row or has a long column.
1:             if (pos.current_page.shouldReclaimSpace(
1:                 pos.current_page.getPageNumber() == 1 ? 1 : 0,
1:                 pos.current_slot))
commit:8758a25
/////////////////////////////////////////////////////////////////////////
1:      * @param closeHeldScan           If true, means to close controller even if
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b22462c
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.conglomerate;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.SpaceInfo;
1: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import java.util.Properties; 
1: 
1: 
1: /**
1: **/
1: 
1: public abstract class GenericConglomerateController 
1:     extends GenericController implements ConglomerateController
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods implementing ConglomerateController which just 
1:      *     delegate to OpenConglomerate:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods implementing ConglomerateController:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * @see ConglomerateController#close
1:      **/
1:     public void close()
1:         throws StandardException
1: 	{
1:         super.close();
1: 
1: 		// If we are closed due to catching an error in the middle of init,
1: 		// xact_manager may not be set yet. 
1:         if ((open_conglom != null) && (open_conglom.getXactMgr() != null))
1:             open_conglom.getXactMgr().closeMe(this);
1: 	}
1: 
1:     /**
1:      * Close conglomerate controller as part of terminating a transaction.
1:      * <p>
1:      * Use this call to close the conglomerate controller resources as part of
1:      * committing or aborting a transaction.  The normal close() routine may 
1:      * do some cleanup that is either unnecessary, or not correct due to the 
1:      * unknown condition of the controller following a transaction ending error.
1:      * Use this call when closing all controllers as part of an abort of a 
1:      * transaction.
0:      * <p)
1:      * This call is meant to only be used internally by the Storage system,
1:      * clients of the storage system should use the simple close() interface.
1:      * <p>
1:      * RESOLVE (mikem) - move this call to ConglomerateManager so it is
1:      * obvious that non-access clients should not call this.
1:      *
0:      * @param closeHeldController     If true, means to close controller even if
1:      *                                it has been opened to be kept opened 
1:      *                                across commit.  This is
1:      *                                used to close these controllers on abort.
1:      *
1: 	 * @return boolean indicating that the close has resulted in a real close
1:      *                 of the controller.  A held scan will return false if 
1:      *                 called by closeForEndTransaction(false), otherwise it 
1:      *                 will return true.  A non-held scan will always return 
1:      *                 true.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean closeForEndTransaction(boolean closeHeldScan)
1: 		throws StandardException
1:     {
1:         super.close();
1: 
1:         if ((!open_conglom.getHold()) || closeHeldScan) 
1:         {
1:             // If we are closed due to catching an error in the middle of init,
1:             // xact_manager may not be set yet. 
1:             if ((open_conglom != null) && (open_conglom.getXactMgr() != null))
1:                 open_conglom.getXactMgr().closeMe(this);
1: 
1:             return(true);
1: 
1:         }
1:         else
1:         {
1:             return(false);
1:         }
1:     }
1: 
1:     /**
1:      * @see ConglomerateController#delete
1:      **/
1:     public boolean delete(RowLocation loc)
1: 		throws StandardException
1: 	{
1:         if (open_conglom.isClosed())
1:         {
1:             if (open_conglom.getHold())
1:             {
1:                 if (open_conglom.isClosed())
1:                     open_conglom.reopen();
1:             }
1:             else
1:             {
1:                 throw(
1:                     StandardException.newException(
1:                         SQLState.HEAP_IS_CLOSED, 
1:                         open_conglom.getConglomerate().getId()));
1:             }
1:         }
1: 
0:         RowPosition pos = new RowPosition();
1: 
1:         getRowPositionFromRowLocation(loc, pos);
1: 
0:         open_conglom.latchPage(pos);
1: 
0:         open_conglom.lockPositionForWrite(pos, false /* not an insert */, true);
1: 
1:         boolean ret_val = true;
1: 
1:         // RESOLVE (mikem) - RECID - performance could be better if we did not
1:         // have to call isDeletedAtSlot().
1: 
1:         if (pos.current_page.isDeletedAtSlot(pos.current_slot))
1:         {
1:             ret_val = false;
1:         }
1:         else
1:         {
1:             // Delete the row 
1:             pos.current_page.deleteAtSlot(
1:                 pos.current_slot, true, (LogicalUndo) null);
1: 
1:             // try to reclaim rows when the page is only full of deleted rows,
1:             // or in the special case of the first page when all rows except the
0:             // "control row" are deleted.
0:             if ((pos.current_page.nonDeletedRecordCount() == 0) ||
0:                 ((pos.current_page.nonDeletedRecordCount() == 1) && 
0:                  (pos.current_page.getPageNumber() == 
0:                   ContainerHandle.FIRST_PAGE_NUMBER)))
1:             {
1:                 queueDeletePostCommitWork(pos);
1:             }
1:         }
1: 
1:         pos.current_page.unlatch();
1: 
1:         return(ret_val);
1: 	}
1: 
1:     /**
1:      * @see ConglomerateController#fetch
1:      **/
1:     public boolean fetch(
1:     RowLocation             loc, 
1:     DataValueDescriptor[]   row, 
1:     FormatableBitSet                 validColumns) 
1: 		throws StandardException
1: 	{
1:         if (open_conglom.isClosed())
1:         {
1:             if (open_conglom.getHold())
1:             {
1:                 if (open_conglom.isClosed())
1:                     open_conglom.reopen();
1:             }
1:             else
1:             {
1:                 throw(
1:                     StandardException.newException(
1:                         SQLState.HEAP_IS_CLOSED, 
1:                         open_conglom.getConglomerate().getId()));
1:             }
1:         }
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             // Make sure valid columns are in the list.  The RowUtil
1:             // call is too expensive to make in a released system for
1:             // every fetch.
1:             int invalidColumn = 
1:                 RowUtil.columnOutOfRange(
1:                     row, validColumns, open_conglom.getFormatIds().length);
1: 
1:             if (invalidColumn >= 0)
1:             {
1:                 throw(StandardException.newException(
1:                         SQLState.HEAP_TEMPLATE_MISMATCH,
0:                         new Long(invalidColumn), 
0:                         new Long(open_conglom.getFormatIds().length)));
1:             }
1:         }
1: 
1:         // Get the record handle out of its wrapper.
1: 
0:         RowPosition pos = new RowPosition();
1: 
1:         getRowPositionFromRowLocation(loc, pos);
1: 
1:         if (!open_conglom.latchPage(pos))
1:         {
1:             return(false);
1:         }
1: 
1: 
1:         // Do not get U row lock - only get X or S.  There is no good point
1:         // currently to convert the U lock to an S lock, we don't know when
1:         // the calling code is through with the lock.
1:         // RESOLVE (mikem) - talk to language and see if it is worth it to
1:         //     get U lock and have language call back when we should take
1:         //     appropriate action on the U lock.
1: 
1:         if (open_conglom.isForUpdate())
1:         {
0:             open_conglom.lockPositionForWrite(
0:                 pos, false /* not an insert */, true);
1:         }
1:         else
1:         {
1:             open_conglom.lockPositionForRead(
1:                 pos, (RowPosition) null, false, true);
1:         }
1: 
1:         // Fetch the row.
1:         // RESOLVE (STO061) - don't know whether the fetch is for update or not.
1:         //
1:         // RESOLVE (mikem) - get rid of new here.
1:         boolean ret_val = 
1:             (pos.current_page.fetchFromSlot(
1:                 pos.current_rh, pos.current_slot, 
1:                 row, 
1:                 new FetchDescriptor(
1:                     row.length, validColumns, (Qualifier[][]) null), 
1:                 false) != null);
1: 
1:         // RESOLVE (mikem) - should be some way to hide this in the unlock call,
1:         // and just always make the unlock call.
1: 
1:         if (!open_conglom.isForUpdate())
1:             open_conglom.unlockPositionAfterRead(pos);
1: 
1:         pos.current_page.unlatch();
1: 
1:         return(ret_val);
1: 	}
1: 
1:     /**
1:      * @see ConglomerateController#fetch
1:      **/
1:     public boolean fetch(
1:     RowLocation             loc, 
1:     DataValueDescriptor[]   row, 
1:     FormatableBitSet                 validColumns,
1:     boolean                 waitForLock) 
1: 		throws StandardException
1: 	{
1:         if (open_conglom.isClosed())
1:         {
1:             if (open_conglom.getHold())
1:             {
1:                 if (open_conglom.isClosed())
1:                     open_conglom.reopen();
1:             }
1:             else
1:             {
1:                 throw(
1:                     StandardException.newException(
1:                         SQLState.HEAP_IS_CLOSED, 
1:                         open_conglom.getConglomerate().getId()));
1:             }
1:         }
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             // Make sure valid columns are in the list.  The RowUtil
1:             // call is too expensive to make in a released system for
1:             // every fetch.
1:             int invalidColumn = 
1:                 RowUtil.columnOutOfRange(
1:                     row, validColumns, open_conglom.getFormatIds().length);
1: 
1:             if (invalidColumn >= 0)
1:             {
1:                 throw(StandardException.newException(
1:                         SQLState.HEAP_TEMPLATE_MISMATCH,
0:                         new Long(invalidColumn), 
0:                         new Long(open_conglom.getFormatIds().length)));
1:             }
1:         }
1: 
1:         // Get the record handle out of its wrapper.
1: 
0:         RowPosition pos = new RowPosition();
1: 
1:         getRowPositionFromRowLocation(loc, pos);
1: 
0:         open_conglom.latchPage(pos);
1: 
1:         // Do not get U row lock - only get X or S.  There is not good point
1:         // currently to convert the U lock to an S lock, we don't know when
1:         // the calling code is through with the lock.
1:         // RESOLVE (mikem) - talk to language and see if it is worth it to
1:         //     get U lock and have language call back when we should take
1:         //     appropriate action on the U lock.
1: 
1:         if (open_conglom.isForUpdate())
1:         {
0:             open_conglom.lockPositionForWrite(
0:                 pos, false /* not an insert */, waitForLock);
1:         }
1:         else
1:         {
1:             open_conglom.lockPositionForRead(
1:                 pos, (RowPosition) null, false, waitForLock);
1:         }
1: 
1:         // Fetch the row.
1:         // RESOLVE (STO061) - don't know whether the fetch is for update or not.
1:         //
1:         //
1:         // RESOLVE (mikem) - get rid of new here.
1:         boolean ret_val = 
1:             (pos.current_page.fetchFromSlot(
1:                 pos.current_rh, pos.current_slot, 
1:                 row, 
1:                 new FetchDescriptor(
1:                     row.length, validColumns, (Qualifier[][]) null), 
1:                 false) != null);
1: 
1:         // RESOLVE (mikem) - should be some way to hide this in the unlock call,
1:         // and just always make the unlock call.
1:         if (!open_conglom.isForUpdate())
1:             open_conglom.unlockPositionAfterRead(pos);
1: 
1:         pos.current_page.unlatch();
1: 
1:         return(ret_val);
1: 	}
1: 
1: 
1:     /**
1:      * @see ConglomerateController#replace
1:      **/
1:     public boolean replace(
1:     RowLocation             loc, 
1:     DataValueDescriptor[]   row, 
1:     FormatableBitSet                 validColumns)
1: 		throws StandardException
1: 	{
1:         if (open_conglom.isClosed())
1:         {
1:             if (open_conglom.getHold())
1:             {
1:                 if (open_conglom.isClosed())
1:                     open_conglom.reopen();
1:             }
1:             else
1:             {
1:                 throw(
1:                     StandardException.newException(
1:                         SQLState.HEAP_IS_CLOSED, 
1:                         open_conglom.getConglomerate().getId()));
1:             }
1:         }
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             // Make sure valid columns are in the list.  The RowUtil
1:             // call is too expensive to make in a released system for
1:             // every fetch.
1:             int invalidColumn = 
1:                 RowUtil.columnOutOfRange(
1:                     row, validColumns, open_conglom.getFormatIds().length);
1: 
1:             if (invalidColumn >= 0)
1:             {
1:                 throw(StandardException.newException(
1:                         SQLState.HEAP_TEMPLATE_MISMATCH,
0:                         new Long(invalidColumn), 
0:                         new Long(open_conglom.getFormatIds().length)));
1:             }
1:         }
1: 
0:         RowPosition pos = new RowPosition();
1: 
1:         getRowPositionFromRowLocation(loc, pos);
1: 
0:         open_conglom.latchPage(pos);
1: 
0:         open_conglom.lockPositionForWrite(pos, false, true);
1: 
1:         boolean ret_val = true;
1: 
1:         if (pos.current_page.isDeletedAtSlot(pos.current_slot))
1:         {
1:             ret_val = false;
1:         }
1:         else
1:         {
1:             // Update the record.  
1:             pos.current_page.updateAtSlot(pos.current_slot, row, validColumns);
1:         }
1: 
1:         pos.current_page.unlatch();
1: 
1:         return(ret_val);
1:     }
1: 
1:     /**************************************************************************
0:      * Public Methods implementing ConglomerateController - not implemented:
1:      **************************************************************************
1:      */
1: 
0:     public int insert(DataValueDescriptor[] row)
1: 		throws StandardException
1: 	{
1:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1: 	}
1: 
0: 	public void insertAndFetchLocation(
1:     DataValueDescriptor[]   row, 
0:     RowLocation             templateRowLocation)
1: 		throws StandardException
1: 	{
1:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1: 	}
1: 
0:     public boolean lockRow(
0:     RowLocation     loc,
0:     int             lock_operation,
0:     boolean         wait,
0:     int             lock_duration)
1:         throws StandardException
1:     {
1:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: 
0:     public boolean lockRow(
0:     long            page_num,
0:     int             record_id,
0:     int             lock_operation,
0:     boolean         wait,
0:     int             lock_duration)
1:         throws StandardException
1:     {
1:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: 
0:     public void unlockRowAfterRead(
0:     RowLocation     loc,
0:     boolean         forUpdate,
0:     boolean         row_qualifies)
1:         throws StandardException
1:     {
1:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
1:     }
1: }
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:b7cdec2
/////////////////////////////////////////////////////////////////////////
1:         if (!open_conglom.latchPage(pos)) 
0:         {
1:             return false;
0:         }
/////////////////////////////////////////////////////////////////////////
1:         if (!open_conglom.latchPage(pos)) 
0:         {
1:             return false;
0:         }
/////////////////////////////////////////////////////////////////////////
1:         if (!open_conglom.latchPage(pos)) 
0:         {
1:             return false;
0:         }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.conglomerate;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.SpaceInfo;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.FetchDescriptor;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.util.Properties; 
0: 
0: 
0: /**
0: **/
0: 
0: public abstract class GenericConglomerateController 
0:     extends GenericController implements ConglomerateController
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0: 
0:     /**************************************************************************
0:      * Public Methods implementing ConglomerateController which just 
0:      *     delegate to OpenConglomerate:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods implementing ConglomerateController:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * @see ConglomerateController#close
0:      **/
0:     public void close()
0:         throws StandardException
0: 	{
0:         super.close();
0: 
0: 		// If we are closed due to catching an error in the middle of init,
0: 		// xact_manager may not be set yet. 
0:         if ((open_conglom != null) && (open_conglom.getXactMgr() != null))
0:             open_conglom.getXactMgr().closeMe(this);
0: 	}
0: 
0:     /**
0:      * Close conglomerate controller as part of terminating a transaction.
0:      * <p>
0:      * Use this call to close the conglomerate controller resources as part of
0:      * committing or aborting a transaction.  The normal close() routine may 
0:      * do some cleanup that is either unnecessary, or not correct due to the 
0:      * unknown condition of the controller following a transaction ending error.
0:      * Use this call when closing all controllers as part of an abort of a 
0:      * transaction.
0:      * <p)
0:      * This call is meant to only be used internally by the Storage system,
0:      * clients of the storage system should use the simple close() interface.
0:      * <p>
0:      * RESOLVE (mikem) - move this call to ConglomerateManager so it is
0:      * obvious that non-access clients should not call this.
0:      *
0:      * @param closeHeldController     If true, means to close controller even if
0:      *                                it has been opened to be kept opened 
0:      *                                across commit.  This is
0:      *                                used to close these controllers on abort.
0:      *
0: 	 * @return boolean indicating that the close has resulted in a real close
0:      *                 of the controller.  A held scan will return false if 
0:      *                 called by closeForEndTransaction(false), otherwise it 
0:      *                 will return true.  A non-held scan will always return 
0:      *                 true.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean closeForEndTransaction(boolean closeHeldScan)
0: 		throws StandardException
0:     {
0:         super.close();
0: 
0:         if ((!open_conglom.getHold()) || closeHeldScan) 
0:         {
0:             // If we are closed due to catching an error in the middle of init,
0:             // xact_manager may not be set yet. 
0:             if ((open_conglom != null) && (open_conglom.getXactMgr() != null))
0:                 open_conglom.getXactMgr().closeMe(this);
0: 
0:             return(true);
0: 
0:         }
0:         else
0:         {
0:             return(false);
0:         }
0:     }
0: 
0:     /**
0:      * @see ConglomerateController#delete
0:      **/
0:     public boolean delete(RowLocation loc)
0: 		throws StandardException
0: 	{
0:         if (open_conglom.isClosed())
0:         {
0:             if (open_conglom.getHold())
0:             {
0:                 if (open_conglom.isClosed())
0:                     open_conglom.reopen();
0:             }
0:             else
0:             {
0:                 throw(
0:                     StandardException.newException(
0:                         SQLState.HEAP_IS_CLOSED, 
0:                         open_conglom.getConglomerate().getId()));
0:             }
0:         }
0: 
0:         RowPosition pos = new RowPosition();
0: 
0:         getRowPositionFromRowLocation(loc, pos);
0: 
0:         open_conglom.latchPage(pos);
0: 
0:         open_conglom.lockPositionForWrite(pos, false /* not an insert */, true);
0: 
0:         boolean ret_val = true;
0: 
0:         // RESOLVE (mikem) - RECID - performance could be better if we did not
0:         // have to call isDeletedAtSlot().
0: 
0:         if (pos.current_page.isDeletedAtSlot(pos.current_slot))
0:         {
0:             ret_val = false;
0:         }
0:         else
0:         {
0:             // Delete the row 
0:             pos.current_page.deleteAtSlot(
0:                 pos.current_slot, true, (LogicalUndo) null);
0: 
0:             // try to reclaim rows when the page is only full of deleted rows,
0:             // or in the special case of the first page when all rows except the
0:             // "control row" are deleted.
0:             if ((pos.current_page.nonDeletedRecordCount() == 0) ||
0:                 ((pos.current_page.nonDeletedRecordCount() == 1) && 
0:                  (pos.current_page.getPageNumber() == 
0:                   ContainerHandle.FIRST_PAGE_NUMBER)))
0:             {
0:                 queueDeletePostCommitWork(pos);
0:             }
0:         }
0: 
0:         pos.current_page.unlatch();
0: 
0:         return(ret_val);
0: 	}
0: 
0:     /**
0:      * @see ConglomerateController#fetch
0:      **/
0:     public boolean fetch(
0:     RowLocation             loc, 
0:     DataValueDescriptor[]   row, 
0:     FormatableBitSet                 validColumns) 
0: 		throws StandardException
0: 	{
0:         if (open_conglom.isClosed())
0:         {
0:             if (open_conglom.getHold())
0:             {
0:                 if (open_conglom.isClosed())
0:                     open_conglom.reopen();
0:             }
0:             else
0:             {
0:                 throw(
0:                     StandardException.newException(
0:                         SQLState.HEAP_IS_CLOSED, 
0:                         open_conglom.getConglomerate().getId()));
0:             }
0:         }
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             // Make sure valid columns are in the list.  The RowUtil
0:             // call is too expensive to make in a released system for
0:             // every fetch.
0:             int invalidColumn = 
0:                 RowUtil.columnOutOfRange(
0:                     row, validColumns, open_conglom.getFormatIds().length);
0: 
0:             if (invalidColumn >= 0)
0:             {
0:                 throw(StandardException.newException(
0:                         SQLState.HEAP_TEMPLATE_MISMATCH,
0:                         new Long(invalidColumn), 
0:                         new Long(open_conglom.getFormatIds().length)));
0:             }
0:         }
0: 
0:         // Get the record handle out of its wrapper.
0: 
0:         RowPosition pos = new RowPosition();
0: 
0:         getRowPositionFromRowLocation(loc, pos);
0: 
0:         if (!open_conglom.latchPage(pos))
0:         {
0:             return(false);
0:         }
0: 
0: 
0:         // Do not get U row lock - only get X or S.  There is no good point
0:         // currently to convert the U lock to an S lock, we don't know when
0:         // the calling code is through with the lock.
0:         // RESOLVE (mikem) - talk to language and see if it is worth it to
0:         //     get U lock and have language call back when we should take
0:         //     appropriate action on the U lock.
0: 
0:         if (open_conglom.isForUpdate())
0:         {
0:             open_conglom.lockPositionForWrite(
0:                 pos, false /* not an insert */, true);
0:         }
0:         else
0:         {
0:             open_conglom.lockPositionForRead(
0:                 pos, (RowPosition) null, false, true);
0:         }
0: 
0:         // Fetch the row.
0:         // RESOLVE (STO061) - don't know whether the fetch is for update or not.
0:         //
0:         // RESOLVE (mikem) - get rid of new here.
0:         boolean ret_val = 
0:             (pos.current_page.fetchFromSlot(
0:                 pos.current_rh, pos.current_slot, 
0:                 row, 
0:                 new FetchDescriptor(
0:                     row.length, validColumns, (Qualifier[][]) null), 
0:                 false) != null);
0: 
0:         // RESOLVE (mikem) - should be some way to hide this in the unlock call,
0:         // and just always make the unlock call.
0: 
0:         if (!open_conglom.isForUpdate())
0:             open_conglom.unlockPositionAfterRead(pos);
0: 
0:         pos.current_page.unlatch();
0: 
0:         return(ret_val);
0: 	}
0: 
0:     /**
0:      * @see ConglomerateController#fetch
0:      **/
0:     public boolean fetch(
0:     RowLocation             loc, 
0:     DataValueDescriptor[]   row, 
0:     FormatableBitSet                 validColumns,
0:     boolean                 waitForLock) 
0: 		throws StandardException
0: 	{
0:         if (open_conglom.isClosed())
0:         {
0:             if (open_conglom.getHold())
0:             {
0:                 if (open_conglom.isClosed())
0:                     open_conglom.reopen();
0:             }
0:             else
0:             {
0:                 throw(
0:                     StandardException.newException(
0:                         SQLState.HEAP_IS_CLOSED, 
0:                         open_conglom.getConglomerate().getId()));
0:             }
0:         }
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             // Make sure valid columns are in the list.  The RowUtil
0:             // call is too expensive to make in a released system for
0:             // every fetch.
0:             int invalidColumn = 
0:                 RowUtil.columnOutOfRange(
0:                     row, validColumns, open_conglom.getFormatIds().length);
0: 
0:             if (invalidColumn >= 0)
0:             {
0:                 throw(StandardException.newException(
0:                         SQLState.HEAP_TEMPLATE_MISMATCH,
0:                         new Long(invalidColumn), 
0:                         new Long(open_conglom.getFormatIds().length)));
0:             }
0:         }
0: 
0:         // Get the record handle out of its wrapper.
0: 
0:         RowPosition pos = new RowPosition();
0: 
0:         getRowPositionFromRowLocation(loc, pos);
0: 
0:         open_conglom.latchPage(pos);
0: 
0:         // Do not get U row lock - only get X or S.  There is not good point
0:         // currently to convert the U lock to an S lock, we don't know when
0:         // the calling code is through with the lock.
0:         // RESOLVE (mikem) - talk to language and see if it is worth it to
0:         //     get U lock and have language call back when we should take
0:         //     appropriate action on the U lock.
0: 
0:         if (open_conglom.isForUpdate())
0:         {
0:             open_conglom.lockPositionForWrite(
0:                 pos, false /* not an insert */, waitForLock);
0:         }
0:         else
0:         {
0:             open_conglom.lockPositionForRead(
0:                 pos, (RowPosition) null, false, waitForLock);
0:         }
0: 
0:         // Fetch the row.
0:         // RESOLVE (STO061) - don't know whether the fetch is for update or not.
0:         //
0:         //
0:         // RESOLVE (mikem) - get rid of new here.
0:         boolean ret_val = 
0:             (pos.current_page.fetchFromSlot(
0:                 pos.current_rh, pos.current_slot, 
0:                 row, 
0:                 new FetchDescriptor(
0:                     row.length, validColumns, (Qualifier[][]) null), 
0:                 false) != null);
0: 
0:         // RESOLVE (mikem) - should be some way to hide this in the unlock call,
0:         // and just always make the unlock call.
0:         if (!open_conglom.isForUpdate())
0:             open_conglom.unlockPositionAfterRead(pos);
0: 
0:         pos.current_page.unlatch();
0: 
0:         return(ret_val);
0: 	}
0: 
0: 
0:     /**
0:      * @see ConglomerateController#replace
0:      **/
0:     public boolean replace(
0:     RowLocation             loc, 
0:     DataValueDescriptor[]   row, 
0:     FormatableBitSet                 validColumns)
0: 		throws StandardException
0: 	{
0:         if (open_conglom.isClosed())
0:         {
0:             if (open_conglom.getHold())
0:             {
0:                 if (open_conglom.isClosed())
0:                     open_conglom.reopen();
0:             }
0:             else
0:             {
0:                 throw(
0:                     StandardException.newException(
0:                         SQLState.HEAP_IS_CLOSED, 
0:                         open_conglom.getConglomerate().getId()));
0:             }
0:         }
0: 
0:         if (SanityManager.DEBUG)
0:         {
0:             // Make sure valid columns are in the list.  The RowUtil
0:             // call is too expensive to make in a released system for
0:             // every fetch.
0:             int invalidColumn = 
0:                 RowUtil.columnOutOfRange(
0:                     row, validColumns, open_conglom.getFormatIds().length);
0: 
0:             if (invalidColumn >= 0)
0:             {
0:                 throw(StandardException.newException(
0:                         SQLState.HEAP_TEMPLATE_MISMATCH,
0:                         new Long(invalidColumn), 
0:                         new Long(open_conglom.getFormatIds().length)));
0:             }
0:         }
0: 
0:         RowPosition pos = new RowPosition();
0: 
0:         getRowPositionFromRowLocation(loc, pos);
0: 
0:         open_conglom.latchPage(pos);
0: 
0:         open_conglom.lockPositionForWrite(pos, false, true);
0: 
0:         boolean ret_val = true;
0: 
0:         if (pos.current_page.isDeletedAtSlot(pos.current_slot))
0:         {
0:             ret_val = false;
0:         }
0:         else
0:         {
0:             // Update the record.  
0:             pos.current_page.updateAtSlot(pos.current_slot, row, validColumns);
0:         }
0: 
0:         pos.current_page.unlatch();
0: 
0:         return(ret_val);
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods implementing ConglomerateController - not implemented:
0:      **************************************************************************
0:      */
0: 
0:     public int insert(DataValueDescriptor[] row)
0: 		throws StandardException
0: 	{
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0: 	}
0: 
0: 	public void insertAndFetchLocation(
0:     DataValueDescriptor[]   row, 
0:     RowLocation             templateRowLocation)
0: 		throws StandardException
0: 	{
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0: 	}
0: 
0:     public boolean lockRow(
0:     RowLocation     loc,
0:     int             lock_operation,
0:     boolean         wait,
0:     int             lock_duration)
0:         throws StandardException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: 
0:     public boolean lockRow(
0:     long            page_num,
0:     int             record_id,
0:     int             lock_operation,
0:     boolean         wait,
0:     int             lock_duration)
0:         throws StandardException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: 
0:     public void unlockRowAfterRead(
0:     RowLocation     loc,
0:     boolean         forUpdate,
0:     boolean         row_qualifies)
0:         throws StandardException
0:     {
0:         throw(StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE));
0:     }
0: }
============================================================================