1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.CursorResultSet
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * The CursorResultSet interface is used to provide additional
1:eac0369:  * operations on result sets that can be used in cursors.
1:eac0369:  * <p>
1:eac0369:  * Since the ResulSet operations must also be supported by
1:eac0369:  * cursor result sets, we extend that interface here as well.
1:eac0369:  *
1:eac0369:  */
1:76addbc: public interface CursorResultSet extends ResultSet {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the row location of the current base table row of the cursor.
1:eac0369: 	 * If this cursor's row is composed of multiple base tables' rows,
1:eac0369: 	 * i.e. due to a join, then a null is returned.
1:eac0369: 	 *
1:eac0369: 	 * @return the row location of the current cursor row.
1:eac0369: 	 * @exception StandardException thrown on failure to
1:eac0369: 	 *	get location from storage engine
1:eac0369: 	 */
1:eac0369: 	RowLocation getRowLocation() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the current row of the result set.
1:eac0369: 	 * REMIND: eventually, this will only return the current row
1:eac0369: 	 * for result sets that need to return it; either some field
1:eac0369: 	 * in the activation or a parameter in the constructor will be
1:eac0369: 	 * used to signal that this needs to function. This will let us
1:eac0369: 	 * limit the number of live objects we are holding on to.
1:eac0369: 	 * <p>
1:eac0369: 	 * @return the last row returned by getNextRow. null if closed.
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 */
1:eac0369: 	ExecRow getCurrentRow() throws StandardException;
1:eac0369: 
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.CursorResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
1: public interface CursorResultSet extends ResultSet {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * The CursorResultSet interface is used to provide additional
1:  * operations on result sets that can be used in cursors.
1:  * <p>
1:  * Since the ResulSet operations must also be supported by
1:  * cursor result sets, we extend that interface here as well.
1:  *
0:  * @author ames
1:  */
0: public interface CursorResultSet extends ResultSet { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * Returns the row location of the current base table row of the cursor.
1: 	 * If this cursor's row is composed of multiple base tables' rows,
1: 	 * i.e. due to a join, then a null is returned.
1: 	 *
1: 	 * @return the row location of the current cursor row.
1: 	 * @exception StandardException thrown on failure to
1: 	 *	get location from storage engine
1: 	 */
1: 	RowLocation getRowLocation() throws StandardException;
1: 
1: 	/**
1: 	 * Returns the current row of the result set.
1: 	 * REMIND: eventually, this will only return the current row
1: 	 * for result sets that need to return it; either some field
1: 	 * in the activation or a parameter in the constructor will be
1: 	 * used to signal that this needs to function. This will let us
1: 	 * limit the number of live objects we are holding on to.
1: 	 * <p>
1: 	 * @return the last row returned by getNextRow. null if closed.
1: 	 * @exception StandardException thrown on failure.
1: 	 */
1: 	ExecRow getCurrentRow() throws StandardException;
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * The CursorResultSet interface is used to provide additional
0:  * operations on result sets that can be used in cursors.
0:  * <p>
0:  * Since the ResulSet operations must also be supported by
0:  * cursor result sets, we extend that interface here as well.
0:  *
0:  * @author ames
0:  */
0: public interface CursorResultSet extends ResultSet { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * Returns the row location of the current base table row of the cursor.
0: 	 * If this cursor's row is composed of multiple base tables' rows,
0: 	 * i.e. due to a join, then a null is returned.
0: 	 *
0: 	 * @return the row location of the current cursor row.
0: 	 * @exception StandardException thrown on failure to
0: 	 *	get location from storage engine
0: 	 */
0: 	RowLocation getRowLocation() throws StandardException;
0: 
0: 	/**
0: 	 * Returns the current row of the result set.
0: 	 * REMIND: eventually, this will only return the current row
0: 	 * for result sets that need to return it; either some field
0: 	 * in the activation or a parameter in the constructor will be
0: 	 * used to signal that this needs to function. This will let us
0: 	 * limit the number of live objects we are holding on to.
0: 	 * <p>
0: 	 * @return the last row returned by getNextRow. null if closed.
0: 	 * @exception StandardException thrown on failure.
0: 	 */
0: 	ExecRow getCurrentRow() throws StandardException;
0: 
0: }
============================================================================