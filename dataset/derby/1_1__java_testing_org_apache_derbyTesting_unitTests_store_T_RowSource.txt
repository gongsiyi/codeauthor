1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.store.T_RowSource
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.store;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.access.*;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.SQLInteger;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.error.StandardException;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.store.raw.Transaction;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.DataValueDescriptor;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.types.RowLocation;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: /**
1:2bc809f:   A RowSource is the mechanism for iterating over a set of rows.  The RowSource
1:2bc809f:   is the interface through which access recieved a set of rows from the client
1:2bc809f:   for the purpose of inserting into a single container.
1:2bc809f: 
1:2bc809f:   <p>
1:2bc809f:   A RowSource can come from many sources - from rows that are from fast path
1:2bc809f:   import, to rows coming out of a sort for index creation.
1:2bc809f: 
1:2bc809f:   @see org.apache.derby.iapi.store.access.RowSource
1:2bc809f: */ 
1:2bc809f: public class T_RowSource implements RowSource {
1:2bc809f: 
1:2bc809f: 	static public final int INTEGER_ROW_TYPE = 1;
1:2bc809f: 	static public final int STRING_ROW_TYPE = 2;
1:2bc809f: 
1:2bc809f: 	static protected final String REC_001 = "McLaren";
1:2bc809f: 	static protected final String REC_002 = "Ferrari";
1:2bc809f: 	static protected final String REC_003 = "Benetton";
1:2bc809f: 	static protected final String REC_004 = "Prost";
1:2bc809f: 	static protected final String REC_005 = "Tyrell";
1:2bc809f: 	static protected final String REC_006 = "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
1:2bc809f: 	static protected final String REC_007 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";
1:2bc809f: 	static protected final String REC_008 = "z";
1:2bc809f: 
1:2bc809f: 	static protected final int DEFAULT_ROW_COUNT = 500000;
1:2bc809f: 	static protected final int DEFAULT_COLUMN_COUNT = 13;
1:2bc809f: 	static protected final int DEFAULT_SEED = 53;	// some random number
1:2bc809f: 
1:2bc809f: 	private int rowCount;
1:2bc809f: 	private int columnCount;
1:2bc809f: 	private DataValueDescriptor row[];
1:2bc809f: 	private FormatableBitSet validColumns;
1:2bc809f: 	private boolean forceAbort;
1:2bc809f: 	private Transaction t;
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 *	constructor
1:2bc809f: 	 */
1:2bc809f: 	public T_RowSource() {
1:2bc809f: 
1:2bc809f: 		// default will create DEFAULT_ROW_COUNT rows,
1:2bc809f: 		// of DEFAULT_COLUMN_COUNT columns string type rows
1:2bc809f: 		// validColumns will be set to null.
1:2bc809f: 		this.rowCount = DEFAULT_ROW_COUNT;
1:2bc809f: 		this.columnCount = DEFAULT_COLUMN_COUNT;
1:2bc809f: 		this.row = new DataValueDescriptor[DEFAULT_COLUMN_COUNT];
1:2bc809f: 		row = setStringRow();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// if the caller does not pass in a validColumn, we will set it here
1:2bc809f: 	public T_RowSource(int count, int columnCount, int rowType, boolean forceAbort, Transaction t) {
1:2bc809f: 
1:2bc809f: 		this.rowCount = count;
1:2bc809f: 		this.columnCount = columnCount;
1:2bc809f: 		validColumns = new FormatableBitSet(columnCount);
1:2bc809f: 		for (int i = 0; i < columnCount; i++)
1:2bc809f: 			validColumns.set(i);
1:2bc809f: 
1:2bc809f: 		this.row = new DataValueDescriptor[columnCount];
1:2bc809f: 		if (rowType == INTEGER_ROW_TYPE)
1:2bc809f: 			setIntegerRow();
1:2bc809f: 		else
1:2bc809f: 			row = setStringRow();
1:2bc809f: 
1:2bc809f: 		this.forceAbort = forceAbort;
1:2bc809f: 		this.t = t;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// the caller has a chance to set the valisColumns to anything they want.
1:2bc809f: 	public T_RowSource(int count, int columnCount, int rowType, FormatableBitSet validColumns) {
1:2bc809f: 
1:2bc809f: 		this.rowCount = count;
1:2bc809f: 		this.columnCount = columnCount;
1:2bc809f: 		this.validColumns = validColumns;
1:2bc809f: 
1:2bc809f: 		this.row = new DataValueDescriptor[columnCount];
1:2bc809f: 		if (rowType == INTEGER_ROW_TYPE)
1:2bc809f: 			setIntegerRow();
1:2bc809f: 		else
1:2bc809f: 			row = setStringRow();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 *	methods for RowSource
1:2bc809f: 	 */
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	    @return true if more rows are coming, false if there is no more rows
1:2bc809f: 		in the RowSource
1:2bc809f: 	 * @exception StandardException		Thrown on error
1:2bc809f: 	 */
1:2bc809f: 	public boolean hasMoreRows() throws StandardException {
1:2bc809f: 		if (rowCount > 0)
1:2bc809f: 			return true;
1:2bc809f: 		else
1:2bc809f: 			return false;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Get the next row as an array of column objects. The column objects can
1:2bc809f: 		be a JBMS Storable or any
1:2bc809f: 		Serializable/Externalizable/Formattable/Streaming type.  
1:2bc809f: 
1:2bc809f: 		@exception StandardException Derby Standard Error Policy
1:2bc809f: 	 */
1:2bc809f: 	public DataValueDescriptor[] getNextRowFromRowSource() 
1:2bc809f:         throws StandardException {
1:2bc809f: 
1:2bc809f: 		if (this.rowCount <= 0)
1:2bc809f: 			return null;
1:2bc809f: 
1:2bc809f: 		// if we are testing error condition, force an abort now
1:2bc809f: 		if (forceAbort && (this.rowCount < 3))
1:2bc809f: 			t.abort();
1:2bc809f: 
1:2bc809f: 		this.rowCount--;
1:2bc809f: 		return row;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  getValidColumns describes the DataValueDescriptor[] returned by all calls
1:2bc809f:       to the getNextRowFromRowSource() call. 
1:2bc809f: 	*/
1:2bc809f: 	public FormatableBitSet getValidColumns() {
1:2bc809f: 		return validColumns;
1:2bc809f: 	} 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		closeRowSource tells the RowSource that it will no longer need to
1:2bc809f: 		return any rows and it can release any resource it may have.
1:2bc809f: 		Subsequent call to any method on the RowSource will result in undefined
1:2bc809f: 		behavior.  A closed rowSource can be closed again.
1:2bc809f: 	*/
1:2bc809f: 	public void closeRowSource() {
1:2bc809f: 
1:2bc809f: 		this.rowCount = 0;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		needsRowLocation returns true iff this the row source expects the
1:2bc809f: 		drainer of the row source to call rowLocation after getting a row from
1:2bc809f: 		getNextRowFromRowSource.
1:2bc809f: 
1:2bc809f: 		@return true iff this row source expects some row location to be
1:2bc809f: 		returned 
1:2bc809f: 		@see #rowLocation
1:2bc809f: 	 */
1:2bc809f: 	public boolean needsRowLocation() {
1:2bc809f: 		return false;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	 * @see RowSource#needsToClone
1:2bc809f: 	 */
1:2bc809f: 	public boolean needsToClone()
1:2bc809f: 	{
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		rowLocation  is not implemented here
1:2bc809f: 	 */
1:2bc809f: 	public void rowLocation(RowLocation rl) {
1:2bc809f: 
1:2bc809f: 		rl = null;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 		Get a copy of the template row.  Cast each column to
1:2bc809f: 		a CloneableObject and clone it.
1:2bc809f: 
1:2bc809f: 		@exception StandardException Derby Standard Error Policy
1:2bc809f: 	**/
1:2bc809f: 	public DataValueDescriptor[] getTemplate() throws StandardException {
1:2bc809f: 
1:2bc809f: 		return row;
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	// set all column of the row to integer object
1:2bc809f: 	private void setIntegerRow() {
1:2bc809f: 		for (int i = 0; i < columnCount; i++)
1:2bc809f: 			this.row[i] = new SQLInteger(i + DEFAULT_SEED);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private DataValueDescriptor[] setStringRow() {
1:2bc809f: 
1:2bc809f: 		T_RawStoreRow row = new T_RawStoreRow(columnCount);
1:2bc809f: 
1:2bc809f: 		for (int i = 0; i < columnCount; i++) {
1:2bc809f: 			switch (i % 13) {
1:2bc809f: 			case 0:
1:2bc809f: 				row.setColumn(i, (String) null);
1:2bc809f: 				break;
1:2bc809f: 			case 1:			
1:2bc809f: 				row.setColumn(i, REC_001);
1:2bc809f: 				break;
1:2bc809f: 			case 2:
1:2bc809f: 				row.setColumn(i, REC_002);
1:2bc809f: 				break;
1:2bc809f: 			case 3:
1:2bc809f: 				row.setColumn(i, REC_003);
1:2bc809f: 				break;
1:2bc809f: 			case 4:
1:2bc809f: 				row.setColumn(i, REC_004);
1:2bc809f: 				break;
1:2bc809f: 			case 5:
1:2bc809f: 				row.setColumn(i, REC_005);
1:2bc809f: 				break;
1:2bc809f: 			case 6:
1:2bc809f: 				row.setColumn(i, REC_006);
1:2bc809f: 				break;
1:2bc809f: 			case 7:
1:2bc809f: 				row.setColumn(i, REC_007);
1:2bc809f: 				break;
1:2bc809f: 			case 8:
1:2bc809f: 				row.setColumn(i, (String) null);
1:2bc809f: 				break;
1:2bc809f: 			case 9:
1:2bc809f: 				row.setColumn(i, REC_008);
1:2bc809f: 				break;
1:2bc809f: 			case 10:
1:2bc809f: 				row.setColumn(i, REC_007);
1:2bc809f: 				break;
1:2bc809f: 			case 11:
1:2bc809f: 				row.setColumn(i, (String) null);
1:2bc809f: 				break;
1:2bc809f: 			case 12:
1:2bc809f: 				row.setColumn(i, REC_006);
1:2bc809f: 				break;
1:2bc809f: 			default:
1:2bc809f: 				row.setColumn(i, REC_008);
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 		return row.getRow();
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.store.T_RowSource
1: 
0:    Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.store;
1: 
1: import org.apache.derby.iapi.store.access.*;
1: 
1: import org.apache.derby.iapi.types.SQLInteger;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: 
1: /**
1:   A RowSource is the mechanism for iterating over a set of rows.  The RowSource
1:   is the interface through which access recieved a set of rows from the client
1:   for the purpose of inserting into a single container.
1: 
1:   <p>
1:   A RowSource can come from many sources - from rows that are from fast path
1:   import, to rows coming out of a sort for index creation.
1: 
1:   @see org.apache.derby.iapi.store.access.RowSource
1: */ 
1: public class T_RowSource implements RowSource {
1: 
1: 	static public final int INTEGER_ROW_TYPE = 1;
1: 	static public final int STRING_ROW_TYPE = 2;
1: 
1: 	static protected final String REC_001 = "McLaren";
1: 	static protected final String REC_002 = "Ferrari";
1: 	static protected final String REC_003 = "Benetton";
1: 	static protected final String REC_004 = "Prost";
1: 	static protected final String REC_005 = "Tyrell";
1: 	static protected final String REC_006 = "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
1: 	static protected final String REC_007 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";
1: 	static protected final String REC_008 = "z";
1: 
1: 	static protected final int DEFAULT_ROW_COUNT = 500000;
1: 	static protected final int DEFAULT_COLUMN_COUNT = 13;
1: 	static protected final int DEFAULT_SEED = 53;	// some random number
1: 
1: 	private int rowCount;
1: 	private int columnCount;
1: 	private DataValueDescriptor row[];
1: 	private FormatableBitSet validColumns;
1: 	private boolean forceAbort;
1: 	private Transaction t;
1: 
1: 	/*
1: 	 *	constructor
1: 	 */
1: 	public T_RowSource() {
1: 
1: 		// default will create DEFAULT_ROW_COUNT rows,
1: 		// of DEFAULT_COLUMN_COUNT columns string type rows
1: 		// validColumns will be set to null.
1: 		this.rowCount = DEFAULT_ROW_COUNT;
1: 		this.columnCount = DEFAULT_COLUMN_COUNT;
1: 		this.row = new DataValueDescriptor[DEFAULT_COLUMN_COUNT];
1: 		row = setStringRow();
1: 	}
1: 
1: 	// if the caller does not pass in a validColumn, we will set it here
1: 	public T_RowSource(int count, int columnCount, int rowType, boolean forceAbort, Transaction t) {
1: 
1: 		this.rowCount = count;
1: 		this.columnCount = columnCount;
1: 		validColumns = new FormatableBitSet(columnCount);
1: 		for (int i = 0; i < columnCount; i++)
1: 			validColumns.set(i);
1: 
1: 		this.row = new DataValueDescriptor[columnCount];
1: 		if (rowType == INTEGER_ROW_TYPE)
1: 			setIntegerRow();
1: 		else
1: 			row = setStringRow();
1: 
1: 		this.forceAbort = forceAbort;
1: 		this.t = t;
1: 	}
1: 
1: 	// the caller has a chance to set the valisColumns to anything they want.
1: 	public T_RowSource(int count, int columnCount, int rowType, FormatableBitSet validColumns) {
1: 
1: 		this.rowCount = count;
1: 		this.columnCount = columnCount;
1: 		this.validColumns = validColumns;
1: 
1: 		this.row = new DataValueDescriptor[columnCount];
1: 		if (rowType == INTEGER_ROW_TYPE)
1: 			setIntegerRow();
1: 		else
1: 			row = setStringRow();
1: 	}
1: 
1: 	/*
1: 	 *	methods for RowSource
1: 	 */
1: 
1: 	/**
1: 	    @return true if more rows are coming, false if there is no more rows
1: 		in the RowSource
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public boolean hasMoreRows() throws StandardException {
1: 		if (rowCount > 0)
1: 			return true;
1: 		else
1: 			return false;
1: 	}
1: 
1: 	/**
1: 		Get the next row as an array of column objects. The column objects can
1: 		be a JBMS Storable or any
1: 		Serializable/Externalizable/Formattable/Streaming type.  
1: 
1: 		@exception StandardException Derby Standard Error Policy
1: 	 */
1: 	public DataValueDescriptor[] getNextRowFromRowSource() 
1:         throws StandardException {
1: 
1: 		if (this.rowCount <= 0)
1: 			return null;
1: 
1: 		// if we are testing error condition, force an abort now
1: 		if (forceAbort && (this.rowCount < 3))
1: 			t.abort();
1: 
1: 		this.rowCount--;
1: 		return row;
1: 	}
1: 
1: 	/**
1: 	  getValidColumns describes the DataValueDescriptor[] returned by all calls
1:       to the getNextRowFromRowSource() call. 
1: 	*/
1: 	public FormatableBitSet getValidColumns() {
1: 		return validColumns;
1: 	} 
1: 
1: 	/**
1: 		closeRowSource tells the RowSource that it will no longer need to
1: 		return any rows and it can release any resource it may have.
1: 		Subsequent call to any method on the RowSource will result in undefined
1: 		behavior.  A closed rowSource can be closed again.
1: 	*/
1: 	public void closeRowSource() {
1: 
1: 		this.rowCount = 0;
1: 	}
1: 
1: 
1: 	/**
1: 		needsRowLocation returns true iff this the row source expects the
1: 		drainer of the row source to call rowLocation after getting a row from
1: 		getNextRowFromRowSource.
1: 
1: 		@return true iff this row source expects some row location to be
1: 		returned 
1: 		@see #rowLocation
1: 	 */
1: 	public boolean needsRowLocation() {
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * @see RowSource#needsToClone
1: 	 */
1: 	public boolean needsToClone()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 		rowLocation  is not implemented here
1: 	 */
1: 	public void rowLocation(RowLocation rl) {
1: 
1: 		rl = null;
1: 	}
1: 
1: 	/**
1: 		Get a copy of the template row.  Cast each column to
1: 		a CloneableObject and clone it.
1: 
1: 		@exception StandardException Derby Standard Error Policy
1: 	**/
1: 	public DataValueDescriptor[] getTemplate() throws StandardException {
1: 
1: 		return row;
1: 
1: 	}
1: 
1: 	// set all column of the row to integer object
1: 	private void setIntegerRow() {
1: 		for (int i = 0; i < columnCount; i++)
1: 			this.row[i] = new SQLInteger(i + DEFAULT_SEED);
1: 	}
1: 
1: 	private DataValueDescriptor[] setStringRow() {
1: 
1: 		T_RawStoreRow row = new T_RawStoreRow(columnCount);
1: 
1: 		for (int i = 0; i < columnCount; i++) {
1: 			switch (i % 13) {
1: 			case 0:
1: 				row.setColumn(i, (String) null);
1: 				break;
1: 			case 1:			
1: 				row.setColumn(i, REC_001);
1: 				break;
1: 			case 2:
1: 				row.setColumn(i, REC_002);
1: 				break;
1: 			case 3:
1: 				row.setColumn(i, REC_003);
1: 				break;
1: 			case 4:
1: 				row.setColumn(i, REC_004);
1: 				break;
1: 			case 5:
1: 				row.setColumn(i, REC_005);
1: 				break;
1: 			case 6:
1: 				row.setColumn(i, REC_006);
1: 				break;
1: 			case 7:
1: 				row.setColumn(i, REC_007);
1: 				break;
1: 			case 8:
1: 				row.setColumn(i, (String) null);
1: 				break;
1: 			case 9:
1: 				row.setColumn(i, REC_008);
1: 				break;
1: 			case 10:
1: 				row.setColumn(i, REC_007);
1: 				break;
1: 			case 11:
1: 				row.setColumn(i, (String) null);
1: 				break;
1: 			case 12:
1: 				row.setColumn(i, REC_006);
1: 				break;
1: 			default:
1: 				row.setColumn(i, REC_008);
1: 			}
1: 		}
1: 		return row.getRow();
1: 	}
1: }
============================================================================