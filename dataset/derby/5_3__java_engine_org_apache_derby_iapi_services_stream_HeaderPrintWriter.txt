1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.stream.HeaderPrintWriter
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.services.stream;
1:fe77ca5: 
1:fe77ca5: import java.io.PrintWriter;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * A HeaderPrintWriter is like a PrintWriter with support for
1:fe77ca5:  * including a header in the output. It is expected users
1:fe77ca5:  * will use HeaderPrintWriters to prepend headings to trace
1:fe77ca5:  * and log messages.
1:fe77ca5:  * 
1:fe77ca5:  */
1:fe77ca5: public interface HeaderPrintWriter
1:fe77ca5: {
1:fe77ca5: 	/**
1:fe77ca5: 	 * Puts out some setup info for
1:fe77ca5: 	 * the current write and the write(s) that will be put out next.
1:fe77ca5: 	 * It ends with a \n\r.
1:fe77ca5: 	 * <p>
1:fe77ca5: 	 * All other writes to the stream use the
1:fe77ca5: 	 * PrintStream interface.
1:fe77ca5: 	 */
1:fe77ca5: 	public void printlnWithHeader(String message);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return the header for the stream.
1:fe77ca5: 	 */
1:fe77ca5: 	public PrintWriterGetHeader getHeader();
1:fe77ca5: 	
1:fe77ca5: 	/**
1:fe77ca5: 	 * Gets a PrintWriter object for writing to this HeaderPrintWriter.
1:fe77ca5: 	 * Users may use the HeaderPrintWriter to access methods not included
1:fe77ca5: 	 * in this interface or to invoke methods or constructors which require
1:fe77ca5: 	 * a PrintWriter. 
1:fe77ca5: 	 *
1:fe77ca5: 	 * Interleaving calls to a printWriter and its associated HeaderPrintWriter
1:fe77ca5: 	 * is not supported.
1:fe77ca5: 	 * 
1:fe77ca5: 	 */
1:fe77ca5: 	public PrintWriter getPrintWriter();
1:fe77ca5: 
1:27e2c4b: 	/**
1:27e2c4b: 	 * Gets the name of the wrapped writer or stream
1:27e2c4b: 	 */
1:27e2c4b: 	public String getName ();
1:27e2c4b: 
1:fe77ca5: 	/*
1:fe77ca5: 	 * The routines that mimic java.io.PrintWriter...
1:fe77ca5: 	 */
1:fe77ca5: 	/**
1:fe77ca5: 	 * @see java.io.PrintWriter#print
1:fe77ca5: 	 */
1:fe77ca5: 	public void print(String message);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * @see java.io.PrintWriter#println
1:fe77ca5: 	 */
1:fe77ca5: 	public void println(String message);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * @see java.io.PrintWriter#println
1:fe77ca5: 	 */
1:fe77ca5: 	public void println(Object message);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	* @see java.io.PrintWriter#flush
1:fe77ca5: 	 */
1:fe77ca5: 	public void flush();
1:fe77ca5: }
1:fe77ca5: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:27e2c4b
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Gets the name of the wrapped writer or stream
1: 	 */
1: 	public String getName ();
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.stream.HeaderPrintWriter
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.stream
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.stream;
1: 
1: import java.io.PrintWriter;
1: 
1: /**
1:  * A HeaderPrintWriter is like a PrintWriter with support for
1:  * including a header in the output. It is expected users
1:  * will use HeaderPrintWriters to prepend headings to trace
1:  * and log messages.
1:  * 
1:  */
1: public interface HeaderPrintWriter
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Puts out some setup info for
1: 	 * the current write and the write(s) that will be put out next.
1: 	 * It ends with a \n\r.
1: 	 * <p>
1: 	 * All other writes to the stream use the
1: 	 * PrintStream interface.
1: 	 */
1: 	public void printlnWithHeader(String message);
1: 
1: 	/**
1: 	 * Return the header for the stream.
1: 	 */
1: 	public PrintWriterGetHeader getHeader();
1: 	
1: 	/**
1: 	 * Gets a PrintWriter object for writing to this HeaderPrintWriter.
1: 	 * Users may use the HeaderPrintWriter to access methods not included
1: 	 * in this interface or to invoke methods or constructors which require
1: 	 * a PrintWriter. 
1: 	 *
1: 	 * Interleaving calls to a printWriter and its associated HeaderPrintWriter
1: 	 * is not supported.
1: 	 * 
1: 	 */
1: 	public PrintWriter getPrintWriter();
1: 
1: 	/*
1: 	 * The routines that mimic java.io.PrintWriter...
1: 	 */
1: 	/**
1: 	 * @see java.io.PrintWriter#print
1: 	 */
1: 	public void print(String message);
1: 
1: 	/**
1: 	 * @see java.io.PrintWriter#println
1: 	 */
1: 	public void println(String message);
1: 
1: 	/**
1: 	 * @see java.io.PrintWriter#println
1: 	 */
1: 	public void println(Object message);
1: 
1: 	/**
1: 	* @see java.io.PrintWriter#flush
1: 	 */
1: 	public void flush();
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.stream
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.stream;
0: 
0: import java.io.PrintWriter;
0: 
0: /**
0:  * A HeaderPrintWriter is like a PrintWriter with support for
0:  * including a header in the output. It is expected users
0:  * will use HeaderPrintWriters to prepend headings to trace
0:  * and log messages.
0:  * 
0:  */
0: public interface HeaderPrintWriter
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Puts out some setup info for
0: 	 * the current write and the write(s) that will be put out next.
0: 	 * It ends with a \n\r.
0: 	 * <p>
0: 	 * All other writes to the stream use the
0: 	 * PrintStream interface.
0: 	 */
0: 	public void printlnWithHeader(String message);
0: 
0: 	/**
0: 	 * Return the header for the stream.
0: 	 */
0: 	public PrintWriterGetHeader getHeader();
0: 	
0: 	/**
0: 	 * Gets a PrintWriter object for writing to this HeaderPrintWriter.
0: 	 * Users may use the HeaderPrintWriter to access methods not included
0: 	 * in this interface or to invoke methods or constructors which require
0: 	 * a PrintWriter. 
0: 	 *
0: 	 * Interleaving calls to a printWriter and its associated HeaderPrintWriter
0: 	 * is not supported.
0: 	 * 
0: 	 */
0: 	public PrintWriter getPrintWriter();
0: 
0: 	/*
0: 	 * The routines that mimic java.io.PrintWriter...
0: 	 */
0: 	/**
0: 	 * @see java.io.PrintWriter#print
0: 	 */
0: 	public void print(String message);
0: 
0: 	/**
0: 	 * @see java.io.PrintWriter#println
0: 	 */
0: 	public void println(String message);
0: 
0: 	/**
0: 	 * @see java.io.PrintWriter#println
0: 	 */
0: 	public void println(Object message);
0: 
0: 	/**
0: 	* @see java.io.PrintWriter#flush
0: 	 */
0: 	public void flush();
0: }
0: 
============================================================================