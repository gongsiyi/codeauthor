3:8a393ce: /*
29:8a393ce: 
1:e0b3487:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest
1:8a393ce: 
1:8a393ce:    Licensed to the Apache Software Foundation (ASF) under one or more
1:8a393ce:    contributor license agreements.  See the NOTICE file distributed with
1:8a393ce:    this work for additional information regarding copyright ownership.
1:8a393ce:    The ASF licenses this file to You under the Apache License, Version 2.0
1:8a393ce:    (the "License"); you may not use this file except in compliance with
1:8a393ce:    the License.  You may obtain a copy of the License at
1:8a393ce: 
1:8a393ce:       http://www.apache.org/licenses/LICENSE-2.0
1:8a393ce: 
1:8a393ce:    Unless required by applicable law or agreed to in writing, software
1:8a393ce:    distributed under the License is distributed on an "AS IS" BASIS,
1:8a393ce:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a393ce:    See the License for the specific language governing permissions and
1:8a393ce:    limitations under the License.
1:8a393ce: 
1:8a393ce:  */
1:8a393ce: 
1:8a393ce: package org.apache.derbyTesting.functionTests.tests.store;
1:8a393ce: 
1:8a393ce: import java.net.URL;
1:8a393ce: import java.net.URLClassLoader;
1:8a393ce: import java.net.URLStreamHandlerFactory;
1:8a393ce: import java.security.AccessController;
1:8a393ce: import java.security.CodeSource;
1:3f5c48a: import java.security.PrivilegedAction;
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.SQLException;
1:8a393ce: import java.util.Properties;
1:8a393ce: import javax.sql.DataSource;
1:8a393ce: import junit.extensions.TestSetup;
1:1ae02c9: import junit.framework.Test;
1:8a393ce: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:8a393ce: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:e0b3487: import org.apache.derbyTesting.junit.JDBC;
1:8a393ce: import org.apache.derbyTesting.junit.JDBCDataSource;
1:8a393ce: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:8a393ce: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:8a393ce: 
1:8a393ce: 
1:8a393ce: /*
1:8a393ce:  * This class tests a database boots using  class loaders. Test cases in this
1:8a393ce:  * class checks only one instance of a database can exist evenif database is 
1:8a393ce:  * booted using different class loader instances.    
1:8a393ce:  */
1:8a393ce: public class ClassLoaderBootTest extends BaseJDBCTestCase {
1:8a393ce: 
1:8a393ce:     private static URL derbyClassLocation; 
1:8a393ce: 	static {
1:8a393ce:         // find the location of derby jar file or location 
1:8a393ce:         // of classes. 
1:8a393ce:         CodeSource cs;
9:8a393ce:         try {
1:8a393ce:             Class cls = Class.forName("org.apache.derby.database.Database");
1:8a393ce:             cs = cls.getProtectionDomain().getCodeSource();
1:8a393ce:         } catch (ClassNotFoundException e) {
1:8a393ce:             cs = null;
21:8a393ce:         }
1:8a393ce: 
1:8a393ce:         if(cs == null )
1:8a393ce:             derbyClassLocation = null;        
1:8a393ce:         else 
1:8a393ce:             derbyClassLocation = cs.getLocation();
1:8a393ce: 	}
1:8a393ce:         
1:8a393ce: 
1:8a393ce:     private ClassLoader loader_1;
1:8a393ce:     private ClassLoader loader_2;
1:8a393ce:     private ClassLoader mainLoader;
1:8a393ce: 
1:8a393ce: 
1:8a393ce:     public ClassLoaderBootTest(String name ) {
1:8a393ce:         super(name);
1:8a393ce:     }
1:8a393ce: 
1:8a393ce:     /**
1:8a393ce:      * Runs the tests in the default embedded configuration and then
1:8a393ce:      * the client server configuration.
1:8a393ce:      */
1:8a393ce:     public static Test suite()
5:8a393ce:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(ClassLoaderBootTest.class);
1:8a393ce:         Test test = suite;
1:8a393ce:         TestSetup setup = 
1:8a393ce:             new CleanDatabaseTestSetup(test) {
1:8a393ce:                  protected void setUp() throws Exception {
1:8a393ce:                      super.setUp();
1:8a393ce:                      //shutdown the database. 
1:8a393ce:                      DataSource ds = JDBCDataSource.getDataSource();
2:8a393ce:                      JDBCDataSource.shutdownDatabase(ds);
1:8a393ce:                  }
1:8a393ce:             };
1:8a393ce:         Properties p = new Properties();
1:8a393ce:         p.setProperty("derby.infolog.append", "true");
1:8a393ce:                                    
1:8a393ce:         setup = new SystemPropertyTestSetup(setup,p);
1:1498aba:         // DERBY-2813 prevents test from running with security manager
1:1498aba:         // on. Have to run without security manager for now.
1:c73be02:         return SecurityManagerSetup.noSecurityManager(setup);
1:1498aba:         //return setup;
1:8a393ce:     }
1:8a393ce: 
1:8a393ce: 
1:8a393ce:     /**
1:8a393ce:      * Simple set up, just setup the loaders.
1:8a393ce:      * @throws SQLException 
1:8a393ce:      */
1:8a393ce:     protected void setUp() throws Exception
1:8a393ce:     {
1:8a393ce:         URL[] urls = new URL[]{derbyClassLocation};
1:1498aba:         mainLoader = getThreadLoader();
1:8a393ce: 
1:e0b3487:         loader_1 = createDerbyClassLoader(urls);
1:e0b3487:         loader_2 = createDerbyClassLoader(urls);
1:8a393ce:     }
1:8a393ce: 
1:c73be02:     protected void    tearDown()
1:c73be02:         throws Exception
1:8a393ce:     {
1:c73be02:         if ( mainLoader != null ) { setThreadLoader(mainLoader); }
1:8a393ce: 
1:c73be02:         loader_1 = null;
1:c73be02:         loader_2 = null;
1:c73be02:         mainLoader = null;
1:8a393ce:     }
1:8a393ce: 
1:8a393ce: 
1:8a393ce:     /**
1:1498aba:      * Create a new DerbyURLClassLoader inside a priv block.
1:8a393ce:      */
1:e0b3487:     private DerbyURLClassLoader createDerbyClassLoader(final URL[] urls) 
1:e0b3487:         throws Exception 
1:8a393ce:     {
1:3f5c48a:         return AccessController.doPrivileged(
1:3f5c48a:             new PrivilegedAction<DerbyURLClassLoader>(){
1:3f5c48a:                  public DerbyURLClassLoader run()
1:8a393ce:                  {
1:c73be02:                      return new DerbyURLClassLoader(urls);
1:8a393ce:                  }
1:8a393ce:              });
1:8a393ce:     }
1:8a393ce: 
1:8a393ce: 
1:8a393ce:     
1:8a393ce:     /* 
1:8a393ce:      * Test booting a database, that was alreadt booted by another class loader.
1:8a393ce:      */
1:8a393ce: 	public void testBootingAnAlreadyBootedDatabase() throws SQLException 
1:8a393ce:     {
1:e0b3487:         //
1:e0b3487:         // This test relies on a bug fix in Java 6. Java 5 does not have this
1:e0b3487:         // bug fix and will fail this test. See DERBY-700.
1:e0b3487:         //
1:e0b3487:         if (!JDBC.vmSupportsJDBC4())
1:8a393ce:         {
1:e0b3487:             println( "The dual boot test only runs on Java 6 and higher." );
1:e0b3487:             return;
1:8a393ce:         }
1:8a393ce: 
1:e0b3487:         println( "The dual boot test is running." );
1:8a393ce:         
2:8a393ce:         // first boot the database using one loader and attempt 
2:8a393ce:         // to boot it using another loader, it should fail to boot.
1:8a393ce: 
1:8a393ce:         setThreadLoader(loader_1);
1:8a393ce:         DataSource ds_1 = JDBCDataSource.getDataSource();
1:1498aba:         assertEquals(loader_1, getThreadLoader());
1:1498aba:         assertEquals(loader_1, ds_1.getClass().getClassLoader());
1:8a393ce:         Connection conn1 = ds_1.getConnection();
2:8a393ce:         // now attemp to boot using another class loader.
1:8a393ce:         setThreadLoader(loader_2);
1:8a393ce:         DataSource ds_2 = JDBCDataSource.getDataSource();
1:1498aba:         assertEquals(loader_2, getThreadLoader());
1:1498aba:         assertEquals(loader_2, ds_2.getClass().getClassLoader());
1:8a393ce:         try {
1:8a393ce:             ds_2.getConnection();
1:8a393ce:             fail("booted database that was already booted by another CLR");
2:8a393ce:         } catch (SQLException e) {
2:8a393ce:             SQLException ne = e.getNextException();
1:8a393ce:             assertPreventDualBoot(ne);
1:a505d5a:             JDBCDataSource.shutEngine(ds_2);
1:8a393ce:         }
1:8a393ce:         
1:a505d5a:         // shutdown the engine.
1:8a393ce:         setThreadLoader(loader_1);
1:a505d5a:         JDBCDataSource.shutEngine(ds_1);
1:8a393ce:     }
1:8a393ce: 
1:8a393ce:     
1:8a393ce:     /* 
1:8a393ce:      * Test booting a database, that was  booted and shutdown 
1:8a393ce:      * by another class loader.
1:8a393ce:      */
1:8a393ce: 	public void testBootingDatabaseShutdownByAnotherCLR() throws SQLException 
1:8a393ce:     {
1:8a393ce:         // first boot the database using one loader and shutdown and then 
1:8a393ce:         // attempt to boot it using another loader, it should boot.
1:8a393ce: 
1:8a393ce:         setThreadLoader(loader_1);
1:8a393ce:         DataSource ds_1 = JDBCDataSource.getDataSource();
1:1498aba:         assertEquals(loader_1, ds_1.getClass().getClassLoader());
1:8a393ce:         Connection conn1 = ds_1.getConnection();
1:8a393ce:         //shutdown the database.
2:8a393ce:         JDBCDataSource.shutdownDatabase(ds_1);
1:1498aba:         // now attempt to boot using another class loader.
1:8a393ce:         setThreadLoader(loader_2);
1:8a393ce:         DataSource ds_2 = JDBCDataSource.getDataSource();
1:1498aba:         assertEquals(loader_2, ds_2.getClass().getClassLoader());
1:8a393ce:         ds_2.getConnection();
1:a505d5a:         // shutdown the engine for both the class loaders.
1:a505d5a:         JDBCDataSource.shutEngine(ds_2);
1:a505d5a:         JDBCDataSource.shutEngine(ds_1);
1:8a393ce: }
1:8a393ce: 
1:8a393ce:     private void setThreadLoader(final ClassLoader which) {
1:3f5c48a:         AccessController.doPrivileged(new PrivilegedAction<Void>(){
1:3f5c48a:             public Void run()  {
1:8a393ce:                 java.lang.Thread.currentThread().setContextClassLoader(which);
3:8a393ce:               return null;
1:8a393ce:             }
1:8a393ce:         });
1:8a393ce:     }
1:8a393ce: 
1:1498aba:     private ClassLoader getThreadLoader() {
1:1498aba:         return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
1:1498aba:             public ClassLoader run()  {
1:1498aba:                 return java.lang.Thread.currentThread().getContextClassLoader();
1:1498aba:             }
1:1498aba:         });
1:1498aba:     }
1:8a393ce: 
1:8a393ce: 	private static void assertPreventDualBoot(SQLException ne) {
1:8a393ce: 		assertNotNull(ne);
1:8a393ce: 		String state = ne.getSQLState();
1:e0b3487: 		assertTrue("Unexpected SQLState:" + state, state.equals("XSDB6"));
1:8a393ce: 	}
1:8a393ce: 
1:8a393ce: 
1:8a393ce: 
1:8a393ce:     /*
1:e0b3487:      * Simple specialized URLClassLoader for Derby.  
1:e0b3487:      * Filters all derby classes out of parent ClassLoader to ensure
1:e0b3487:      * that Derby classes are loaded from the URL specified
1:8a393ce:      */
1:e0b3487:     public class DerbyURLClassLoader extends URLClassLoader {
1:8a393ce: 	
5:e0b3487:         /**
1:e0b3487:          * @see java.net.URLClassLoader#URLClassLoader(URL[] urls)
1:8a393ce:          */
1:e0b3487:         public DerbyURLClassLoader(URL[] urls) {
1:e0b3487:             super(urls);
1:8a393ce:         }
1:8a393ce: 
1:8a393ce: 
1:e0b3487:         /**
1:e0b3487:          * @see java.net.URLClassLoader#URLClassLoader(URL[] urls, 
1:e0b3487:          *      ClassLoader parent)
1:8a393ce:          */
1:e0b3487:         public DerbyURLClassLoader(URL[] urls, ClassLoader parent) {
1:e0b3487:             super(urls, parent);
1:8a393ce: 	
1:8a393ce:         }
1:8a393ce: 	
1:e0b3487:         /**
1:e0b3487:          *@see java.net.URLClassLoader#URLClassLoader(java.net.URL[], 
1:e0b3487:          *      java.lang.ClassLoader, java.net.URLStreamHandlerFactory)
1:8a393ce:          */
1:e0b3487:         public DerbyURLClassLoader(URL[] urls, ClassLoader parent,
1:e0b3487:                                    URLStreamHandlerFactory factory) {
1:e0b3487:             super(urls, parent, factory);
1:8a393ce: 		
1:8a393ce:         }
1:8a393ce: 	
1:e0b3487:         /* Override the parent class loader to filter out any derby
1:e0b3487:          * jars in the classpath.  Any classes that start with 
1:e0b3487:          * "org.apache.derby" will load  from the URLClassLoader
1:e0b3487:          * 
1:e0b3487:          * @see java.lang.ClassLoader#loadClass(java.lang.String, boolean)
13:e0b3487:          */
1:e0b3487:         protected synchronized Class loadClass(String name, boolean resolve)
1:e0b3487:             throws ClassNotFoundException
1:8a393ce:         {
1:8a393ce: 
1:e0b3487:             Class cl = findLoadedClass(name);
1:e0b3487:             if (cl == null) {
1:e0b3487:                 // cut off delegation to parent for certain classes
1:e0b3487:                 // to ensure loading from the desired source
1:e0b3487:                 if (!name.startsWith("org.apache.derby")) {
1:e0b3487:                     cl = getParent().loadClass(name);
1:8a393ce: 		    	}
1:8a393ce: 		    }
1:e0b3487:             if (cl == null) cl = findClass(name);
1:e0b3487:             if (cl == null) throw new ClassNotFoundException();
1:e0b3487:             if (resolve) resolveClass(cl);
1:e0b3487:             return cl;
1:8a393ce:         }
1:8a393ce: 
1:8a393ce:         /* 
1:e0b3487:          * @see java.lang.ClassLoader#loadClass(java.lang.String)
1:e0b3487:          */
1:e0b3487:         public Class loadClass(String name) throws ClassNotFoundException {
1:e0b3487:                 return loadClass(name, false);
1:8a393ce:         }
1:8a393ce: 
1:8a393ce:     }
1:8a393ce: }
1:8a393ce: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(ClassLoaderBootTest.class);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:1498aba
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-2813 prevents test from running with security manager
1:         // on. Have to run without security manager for now.
1:         //return setup;
/////////////////////////////////////////////////////////////////////////
1:         mainLoader = getThreadLoader();
/////////////////////////////////////////////////////////////////////////
1:      * Create a new DerbyURLClassLoader inside a priv block.
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(loader_1, getThreadLoader());
1:         assertEquals(loader_1, ds_1.getClass().getClassLoader());
1:         assertEquals(loader_2, getThreadLoader());
1:         assertEquals(loader_2, ds_2.getClass().getClassLoader());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(loader_1, ds_1.getClass().getClassLoader());
1:         // now attempt to boot using another class loader.
1:         assertEquals(loader_2, ds_2.getClass().getClassLoader());
/////////////////////////////////////////////////////////////////////////
1:     private ClassLoader getThreadLoader() {
1:         return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
1:             public ClassLoader run()  {
1:                 return java.lang.Thread.currentThread().getContextClassLoader();
1:             }
1:         });
1:     }
commit:48ceb6e
/////////////////////////////////////////////////////////////////////////
commit:8a393ce
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.functionTests.store.ClassLoaderBootTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import java.io.File;
0: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.net.URLStreamHandlerFactory;
1: import java.security.AccessController;
1: import java.security.CodeSource;
0: import java.security.PrivilegedActionException;
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import javax.sql.DataSource;
1: 
1: import junit.extensions.TestSetup;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: /*
1:  * This class tests a database boots using  class loaders. Test cases in this
1:  * class checks only one instance of a database can exist evenif database is 
1:  * booted using different class loader instances.    
1:  */
1: public class ClassLoaderBootTest extends BaseJDBCTestCase {
1: 
0:     private static final String POLICY_RESOURCE = "org" + File.separator + "apache" +File.separator + "derbyTesting" +File.separator +
0:     		"functionTests" + File.separator + "tests" + File.separator + "store" + File.separator + "ClassLoaderBootTest.policy";
1:     				
1:     
1:     		
1: 	private static URL derbyClassLocation; 
1: 	static {
1:         // find the location of derby jar file or location 
1:         // of classes. 
1:         CodeSource cs;
1:         try {
1:             Class cls = Class.forName("org.apache.derby.database.Database");
1:             cs = cls.getProtectionDomain().getCodeSource();
1:         } catch (ClassNotFoundException e) {
1:             cs = null;
1:         }
1: 
1:         if(cs == null )
1:             derbyClassLocation = null;        
1:         else 
1:             derbyClassLocation = cs.getLocation();
1: 	}
1:         
1: 
1:     private ClassLoader loader_1;
1:     private ClassLoader loader_2;
1:     private ClassLoader mainLoader;
1: 
1: 
1:     public ClassLoaderBootTest(String name ) {
1:         super(name);
1:     }
1: 
0:     private static String makeServerPolicyName()
1:     {
1:         try {
0:             String  userDir = getSystemProperty( "user.dir" );
1:             
0:             String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + POLICY_RESOURCE;
0:             File      file = new File( fileName );
0:             String  urlString = file.toURL().toExternalForm();
1: 
0:             return urlString;
1:         }
0:         catch (Exception e)
1:         {
0:             System.out.println( "Unexpected exception caught by makeServerPolicyName(): " + e );
1: 
1:             return null;
1:         }
1:     }
1: 
1:     /**
1:      * Runs the tests in the default embedded configuration and then
1:      * the client server configuration.
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite(ClassLoaderBootTest.class);
1:         Test test = suite;
0:         // Test does not currently run wunder security manager
0:         // Requires AllPermissions for derbyTesting.jar to run.
0:         //  I therefore think it is a problem with the test not the
0:         // fix itself.   
0:         	test = SecurityManagerSetup.noSecurityManager(test);
1:         TestSetup setup = 
1:             new CleanDatabaseTestSetup(test) {
0:                 protected void decorateSQL(Statement s) throws SQLException {
0:                     // table used to test  export.
0:                     s.execute("CREATE TABLE BOOKS(id int," +
0:                               "name varchar(30)," + 
0:                               "content clob, " + 
0:                               "pic blob )");
1:                 }
1:                  protected void setUp() throws Exception {
1:                      super.setUp();
1:                      //shutdown the database. 
1:                      DataSource ds = JDBCDataSource.getDataSource();
1:                      JDBCDataSource.shutdownDatabase(ds);
1:                  }
1:             };
1:             Properties p = new Properties();
1:             p.setProperty("derby.infolog.append", "true");
1:             setup = new SystemPropertyTestSetup(setup,p);
1:                         
0:             return setup;
1:     }
1: 
1: 
1:     /**
1:      * Simple set up, just setup the loaders.
1:      * @throws SQLException 
1:      */
1:     protected void setUp() throws Exception
1:     {
0:         final URL[] urls = new URL[]{derbyClassLocation};
0:         mainLoader  = (ClassLoader )AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1: 
0:             public Object run(){
0:             	return java.lang.Thread.currentThread().getContextClassLoader();
1: 
0:             } });
1:        
0:         loader_1 = privURLClassLoader(urls);
1:        
0:         loader_2  = privURLClassLoader(urls);   
1:     }
1: 
0: 	private ClassLoader privURLClassLoader(final URL[] urls) {
0: 		return (ClassLoader )AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1: 
0:             public Object run(){
0:             	 return new URLClassLoader(urls,null);
1: 
0:             } });
1: 	}
1: 
1: 
1: 
1:     /**
0:      * Given a loaded class, this
0:      * routine asks the class's class loader for information about where the
0:      * class was loaded from. Typically, this is a file, which might be
0:      * either a class file or a jar file. The routine figures that out, and
0:      * returns the name of the file. If it can't figure it out, it returns null
1:      */
0:     private static URL getFileWhichLoadedClass(final Class cls) throws Exception 
1:     {
1:         try {
0:          return (URL)AccessController.doPrivileged(
0:          new java.security.PrivilegedExceptionAction(){   
0:              public Object run()
1:              {
0:                  CodeSource cs = null;
0:                  cs = cls.getProtectionDomain().getCodeSource ();
0:                  if ( cs == null )
1:                      return null;        
0:                  return cs.getLocation ();
1:                  }
1:          });
0:         }catch(PrivilegedActionException pae) {
0:             throw pae.getException();
1:         }
1:     }
1:     
0:     private URL getURL(final File file) throws MalformedURLException
1:     {
1:         try {
0:             return (URL) AccessController.doPrivileged
0:             (new java.security.PrivilegedExceptionAction(){
1: 
0:                 public Object run() throws MalformedURLException{
0:                 return file.toURL();
1: 
1:                 }
1:             }
0:              );
0:         } catch (PrivilegedActionException e) {
0:             throw (MalformedURLException) e.getException();
1:         } 
1:     }
1: 
1:     /* 
1:      * Test booting a database, that was alreadt booted by another class loader.
1:      */
1: 	public void testBootingAnAlreadyBootedDatabase() throws SQLException 
1:     {
1:         // first boot the database using one loader and attempt 
1:         // to boot it using another loader, it should fail to boot.
1:         try {
1: 
1:             setThreadLoader(loader_1);
1:             DataSource ds_1 = JDBCDataSource.getDataSource();
1:             Connection conn1 = ds_1.getConnection();
1:             // now attemp to boot using another class loader.
1:             setThreadLoader(loader_2);
1:             try {
1:                 DataSource ds_2 = JDBCDataSource.getDataSource();
1:                 ds_2.getConnection();
1:                 fail("booted database that was already booted by another CLR");
1:             } catch (SQLException e) {
1:                 SQLException ne = e.getNextException();
0:                 ClassLoaderBootTest.assertPreventDualBoot(ne);
1:             }
1:             
0:             // shutdown the database.
1:             setThreadLoader(loader_1);
1:             JDBCDataSource.shutdownDatabase(ds_1);
1:             
0:         } catch (SQLException se) {
0:             dumpSQLException(se);
0:         }finally {
0:             // set the thread context loader back to the generic one. 
0:             setThreadLoader(mainLoader);
1:         }
1:     }
1: 
1:     
1:     /* 
1:      * Test booting a database, that was  booted and shutdown 
1:      * by another class loader.
1:      */
1: 	public void testBootingDatabaseShutdownByAnotherCLR() throws SQLException 
1:     {
1:         // first boot the database using one loader and shutdown and then 
1:         // attempt to boot it using another loader, it should boot.
1:         try {
1: 
1:             setThreadLoader(loader_1);
1:             DataSource ds_1 = JDBCDataSource.getDataSource();
1:             Connection conn1 = ds_1.getConnection();
1:             //shutdown the database.
1:             JDBCDataSource.shutdownDatabase(ds_1);
1:             // now attemp to boot using another class loader.
1:             setThreadLoader(loader_2);
1:             DataSource ds_2 = JDBCDataSource.getDataSource();
1:             ds_2.getConnection();
0:             // shutdown the database.
0:             JDBCDataSource.shutdownDatabase(ds_2);
1:             
0:         } catch (SQLException se) {
0:             dumpSQLException(se);
0:         }finally {
0:             // set the thread context loader back to the generic one. 
0:             setThreadLoader(mainLoader);
1:         }
1:     }
1: 
1: 
1: 
1:     /* 
0:      * Test booting the same database by multiple thereads in it's own 
0:      * class loader.
1:      */
0: 	public void testBootingDatabaseInMultipleThread() throws Exception 
1:     {
0:         ParallelDatabaseBoots pdb = new ParallelDatabaseBoots();
0:         pdb.startConcurrentDatabaseBoots();
1:     }
1: 
1: 
1:     private void setThreadLoader(final ClassLoader which) {
1: 
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1:             
0:             public Object run()  { 
1:                 java.lang.Thread.currentThread().setContextClassLoader(which);
1:               return null;
1:             }
1:         });
1:     }
1: 
1: 
0:     private static void dumpSQLException(SQLException se)
1:     {
0: 		while (se != null)
1: 		{
0: 			se.printStackTrace();
0: 			se = se.getNextException();
1: 		}		
1: 	}	
1: 
1: 	private static void assertPreventDualBoot(SQLException ne) {
1: 		assertNotNull(ne);
1: 		String state = ne.getSQLState();
0: 		assertTrue("Unexpected SQLState:" + state, state.equals("XSDB6") || state.equals("XSDBB"));
1: 	}
1: 
1: 
1:     /*
0:      *  This class is used to test concurrent database boots. Each 
0:      *  thread has it's own class loader.Only one instance of the 
0:      *  database can exist at any time, only one thread shoud be 
0:      *  able to successfuly boot the database, 
1:      */
0:     private class ParallelDatabaseBoots implements Runnable{
1: 
0:         private volatile int noBoots = 0 ; 
0:         private volatile int noBootAttempts = 0;
0:         private Exception unExpectedException;
1: 
1:         /*
0:          * Attempts to boot the database in a separate loader. Increases
0:          * the counter if the database is succefully booted. 
1:          */
0:         private void bootDatabase() throws Exception {
0:             // boot the database , if another thread has not booted 
0:             // it already using a different class loader. 
0:             ClassLoader myLoader;
1:             URL[] urls = new URL[]{derbyClassLocation};
0:             myLoader = privURLClassLoader(urls);
1:         
1:             try {
0:                 setThreadLoader(myLoader);
0:                 boolean booted = false;
0:                 DataSource ds = null;
1:                 try {
0:                     ds = JDBCDataSource.getDataSource();
0:                     ds.getConnection();
0:                     // successfuly booted the database, increment 
0:                     // the no of boots counter. 
0:                     noBoots++;
0:                     booted = true;
1:                 } catch (SQLException e) {
0:                     // failed to boot the database, 
0:                     // ensure it failed with correct error.
1:                     SQLException ne = e.getNextException();
1:                     assertPreventDualBoot(ne);                    
1:                     
0:                 }finally {
0:                     synchronized(this) {
0:                         // attemped to boot the database.
0:                         noBootAttempts--;
0:                         notifyAll();
1:                     }
1: 
1:                 }
1:             
0:                 // shutdown the database, if it was booted 
0:                 // by this thread.
0:                 if (booted) {
0:                     // wait for all threads complete 
0:                     // their attempt to boot the database. 
0:                     synchronized(this) {
1:                     
0:                         while (noBootAttempts > 0) {
0:                             wait();
1:                         }
1:                     }
1:                     JDBCDataSource.shutdownDatabase(ds);
1:                 }
0:             }finally {
0:                 // set the thread context loader back to the main loader.
0:                 setThreadLoader(mainLoader);
1:             }
1:         }
1: 
0:         private void startConcurrentDatabaseBoots() throws Exception {
1:             // first boot the database using one loader and attempt 
1:             // to boot it using another loader, it should fail to boot.           
0:             int noThreads = 10;
0:             noBootAttempts = noThreads;
0:             Thread threads[] = new Thread[noThreads];
0:             // create all the threads
0:             for(int i=0 ; i < noThreads ; i++) {
0:                 threads[i] = new Thread(this, "bootThread=" +i);
1:             }
1: 
0:             // start  all the threads 
0:             for(int i=0 ; i < noThreads ; i++) {
0:                 threads[i].start();
1:             }
1:             
0:             // wait for all threds to complete
0:             for(int i=0 ; i < noThreads ; i++)
1:             {
0:                 try{
0:                     threads[i].join();
0:                 }catch (java.lang.InterruptedException ie) {
0:                     //ignore ..
1:                 }
1: 
1:             }
1:             
0:             // if there is any exception by any of the threads, test failed.
0:             if (unExpectedException != null)
0:                 throw unExpectedException;
0:             assertEquals("More than one thread booted the database concurrently",1,noBoots);
1:      
1:         }
1: 
1:         
1:         /*
0:          * Attempts to boot the database on seperate thread. 
0:          * Impementation of run() method of Runnable interface.
1:          */
0:         public void run() {
1:             try {
0:                 bootDatabase();
0:             } catch(Exception e) {
0:                 // save the exception, the method that 
0:                 // invoked the thread needs to know 
0:                 // about it.
0:                 unExpectedException = e;
1:             }
1:         }
1:     }
1: 
1: }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(
1:             new PrivilegedAction<DerbyURLClassLoader>(){
1:                  public DerbyURLClassLoader run()
/////////////////////////////////////////////////////////////////////////
1:         AccessController.doPrivileged(new PrivilegedAction<Void>(){
1:             public Void run()  {
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a505d5a
/////////////////////////////////////////////////////////////////////////
0:         DataSource ds_2 = JDBCDataSource.getDataSource();
1:             JDBCDataSource.shutEngine(ds_2);
1:         // shutdown the engine.
1:         JDBCDataSource.shutEngine(ds_1);
/////////////////////////////////////////////////////////////////////////
1:         // shutdown the engine for both the class loaders.
1:         JDBCDataSource.shutEngine(ds_2);
1:         JDBCDataSource.shutEngine(ds_1);
0: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c73be02
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Properties p = new Properties();
0:         p.setProperty("derby.infolog.append", "true");
0:         setup = new SystemPropertyTestSetup(setup,p);
1:         return SecurityManagerSetup.noSecurityManager(setup);
/////////////////////////////////////////////////////////////////////////
1:     protected void    tearDown()
1:         throws Exception
0:     {
1:         if ( mainLoader != null ) { setThreadLoader(mainLoader); }
0: 
1:         loader_1 = null;
1:         loader_2 = null;
1:         mainLoader = null;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         return (DerbyURLClassLoader)AccessController.doPrivileged
0:             (
0:              new java.security.PrivilegedExceptionAction(){   
0:                  public Object run()
0:                  {
1:                      return new DerbyURLClassLoader(urls);
0:              });
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:         setThreadLoader(loader_1);
0:         DataSource ds_1 = JDBCDataSource.getDataSource();
0:         Connection conn1 = ds_1.getConnection();
0:         // now attemp to boot using another class loader.
0:         setThreadLoader(loader_2);
0:         try {
0:             DataSource ds_2 = JDBCDataSource.getDataSource();
0:             ds_2.getConnection();
0:             fail("booted database that was already booted by another CLR");
0:         } catch (SQLException e) {
0:             SQLException ne = e.getNextException();
0:             assertPreventDualBoot(ne);
0:         
0:         // shutdown the database.
0:         setThreadLoader(loader_1);
0:         JDBCDataSource.shutdownDatabase(ds_1);
/////////////////////////////////////////////////////////////////////////
0:         setThreadLoader(loader_1);
0:         DataSource ds_1 = JDBCDataSource.getDataSource();
0:         Connection conn1 = ds_1.getConnection();
0:         //shutdown the database.
0:         JDBCDataSource.shutdownDatabase(ds_1);
0:         // now attemp to boot using another class loader.
0:         setThreadLoader(loader_2);
0:         DataSource ds_2 = JDBCDataSource.getDataSource();
0:         ds_2.getConnection();
0:         // shutdown the database.
0:         JDBCDataSource.shutdownDatabase(ds_2);
/////////////////////////////////////////////////////////////////////////
commit:e0b3487
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest
0: 
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to You under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
1:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: 
0: import java.net.URL;
0: import java.net.URLClassLoader;
0: import java.net.URLStreamHandlerFactory;
0: import java.sql.*;
0: import java.security.AccessController;
0: import java.security.AccessControlContext;
0: import java.security.PrivilegedActionException;
0: import java.security.PrivilegedExceptionAction;
0: import java.io.File;
0: import java.net.MalformedURLException;
0: import java.security.CodeSource;
0: import java.util.Properties;
0: 
0: import javax.sql.DataSource;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import junit.extensions.TestSetup;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.JDBCDataSource;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
0: 
0: 
0: /*
0:  * This class tests a database boots using  class loaders. Test cases in this
0:  * class checks only one instance of a database can exist evenif database is 
0:  * booted using different class loader instances.    
1:  */
0: public class ClassLoaderBootTest extends BaseJDBCTestCase {
0: 
0:     private static URL derbyClassLocation; 
0: 	static {
0:         // find the location of derby jar file or location 
0:         // of classes. 
0:         CodeSource cs;
0:         try {
0:             Class cls = Class.forName("org.apache.derby.database.Database");
0:             cs = cls.getProtectionDomain().getCodeSource();
0:         } catch (ClassNotFoundException e) {
0:             cs = null;
0:         }
0: 
0:         if(cs == null )
0:             derbyClassLocation = null;        
0:         else 
0:             derbyClassLocation = cs.getLocation();
0: 	}
0:         
0: 
0:     private ClassLoader loader_1;
0:     private ClassLoader loader_2;
0:     private ClassLoader mainLoader;
0: 
0: 
0:     public ClassLoaderBootTest(String name ) {
0:         super(name);
0:     }
0: 
1:     /**
0:      * Runs the tests in the default embedded configuration and then
0:      * the client server configuration.
1:      */
0:     public static Test suite()
0:     {
0:         TestSuite suite = new TestSuite(ClassLoaderBootTest.class);
0:         Test test = suite;
0:         TestSetup setup = 
0:             new CleanDatabaseTestSetup(test) {
0:                 protected void decorateSQL(Statement s) throws SQLException {
0:                     // table used to test  export.
0:                     s.execute("CREATE TABLE BOOKS(id int," +
0:                               "name varchar(30)," + 
0:                               "content clob, " + 
0:                               "pic blob )");
0:                 }
0:                  protected void setUp() throws Exception {
0:                      super.setUp();
0:                      //shutdown the database. 
0:                      DataSource ds = JDBCDataSource.getDataSource();
0:                      JDBCDataSource.shutdownDatabase(ds);
0:                  }
0:             };
0:             Properties p = new Properties();
0:             p.setProperty("derby.infolog.append", "true");
0:                                    
0:             setup = new SystemPropertyTestSetup(setup,p);
0:             return SecurityManagerSetup.noSecurityManager(setup);
0:     }
0: 
0: 
1:     /**
0:      * Simple set up, just setup the loaders.
0:      * @throws SQLException 
1:      */
0:     protected void setUp() throws Exception
0:     {
0:         URL[] urls = new URL[]{derbyClassLocation};
0:         mainLoader = java.lang.Thread.currentThread().getContextClassLoader();
0: 
1:         loader_1 = createDerbyClassLoader(urls);
1:         loader_2 = createDerbyClassLoader(urls);
0:     }
0: 
0: 
1:     /**
0:      * Given a loaded class, this
0:      * routine asks the class's class loader for information about where the
0:      * class was loaded from. Typically, this is a file, which might be
0:      * either a class file or a jar file. The routine figures that out, and
0:      * returns the name of the file. If it can't figure it out, it returns null
1:      */
1:     private DerbyURLClassLoader createDerbyClassLoader(final URL[] urls) 
1:         throws Exception 
0:     {
0:         try {
0:             return (DerbyURLClassLoader)AccessController.doPrivileged(
0:             new java.security.PrivilegedExceptionAction(){   
0:              public Object run()
0:              {
0:                  return new DerbyURLClassLoader(urls);
0:              }
0:          });
0:         }catch(PrivilegedActionException pae) {
0:             throw pae.getException();
0:         }
0:     }
0: 
0: 
1:     /**
0:      * Given a loaded class, this
0:      * routine asks the class's class loader for information about where the
0:      * class was loaded from. Typically, this is a file, which might be
0:      * either a class file or a jar file. The routine figures that out, and
0:      * returns the name of the file. If it can't figure it out, it returns null
1:      */
0:     private static URL getFileWhichLoadedClass(final Class cls) throws Exception 
0:     {
0:         try {
0:          return (URL)AccessController.doPrivileged(
0:          new java.security.PrivilegedExceptionAction(){   
0:              public Object run()
0:              {
0:                  CodeSource cs = null;
0:                  cs = cls.getProtectionDomain().getCodeSource ();
0:                  if ( cs == null )
0:                      return null;        
0:                  return cs.getLocation ();
0:                  }
0:          });
0:         }catch(PrivilegedActionException pae) {
0:             throw pae.getException();
0:         }
0:     }
0:     
0:     private URL getURL(final File file) throws MalformedURLException
0:     {
0:         try {
0:             return (URL) AccessController.doPrivileged
0:             (new java.security.PrivilegedExceptionAction(){
0: 
0:                 public Object run() throws MalformedURLException{
0:                 return file.toURL();
0: 
0:                 }
0:             }
0:              );
0:         } catch (PrivilegedActionException e) {
0:             throw (MalformedURLException) e.getException();
0:         } 
0:     }
0: 
0:     /* 
0:      * Test booting a database, that was alreadt booted by another class loader.
1:      */
0: 	public void testBootingAnAlreadyBootedDatabase() throws SQLException 
0:     {
1:         //
1:         // This test relies on a bug fix in Java 6. Java 5 does not have this
1:         // bug fix and will fail this test. See DERBY-700.
1:         //
1:         if (!JDBC.vmSupportsJDBC4())
0:         {
1:             println( "The dual boot test only runs on Java 6 and higher." );
1:             return;
0:         }
0: 
1:         println( "The dual boot test is running." );
0:         
0:         // first boot the database using one loader and attempt 
0:         // to boot it using another loader, it should fail to boot.
0:         try {
0: 
0:             setThreadLoader(loader_1);
0:             DataSource ds_1 = JDBCDataSource.getDataSource();
0:             Connection conn1 = ds_1.getConnection();
0:             // now attemp to boot using another class loader.
0:             setThreadLoader(loader_2);
0:             try {
0:                 DataSource ds_2 = JDBCDataSource.getDataSource();
0:                 ds_2.getConnection();
0:                 fail("booted database that was already booted by another CLR");
0:             } catch (SQLException e) {
0:                 SQLException ne = e.getNextException();
0:                 assertPreventDualBoot(ne);
0:             }
0:             
0:             // shutdown the database.
0:             setThreadLoader(loader_1);
0:             JDBCDataSource.shutdownDatabase(ds_1);
0:             
0:         } catch (SQLException se) {
0:             dumpSQLException(se);
0:         }finally {
0:             // set the thread context loader back to the generic one. 
0:             setThreadLoader(mainLoader);
0:         }
0:     }
0: 
0:     
0:     /* 
0:      * Test booting a database, that was  booted and shutdown 
0:      * by another class loader.
1:      */
0: 	public void testBootingDatabaseShutdownByAnotherCLR() throws SQLException 
0:     {
0:         // first boot the database using one loader and shutdown and then 
0:         // attempt to boot it using another loader, it should boot.
0:         try {
0: 
0:             setThreadLoader(loader_1);
0:             DataSource ds_1 = JDBCDataSource.getDataSource();
0:             Connection conn1 = ds_1.getConnection();
0:             //shutdown the database.
0:             JDBCDataSource.shutdownDatabase(ds_1);
0:             // now attemp to boot using another class loader.
0:             setThreadLoader(loader_2);
0:             DataSource ds_2 = JDBCDataSource.getDataSource();
0:             ds_2.getConnection();
0:             // shutdown the database.
0:             JDBCDataSource.shutdownDatabase(ds_2);
0:             
0:         } catch (SQLException se) {
0:             dumpSQLException(se);
0:         }finally {
0:             // set the thread context loader back to the generic one. 
0:             setThreadLoader(mainLoader);
0:         }
0:     }
0: 
0: 
0: 
0:     private void setThreadLoader(final ClassLoader which) {
0: 
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
0:             
0:             public Object run()  { 
0:                 java.lang.Thread.currentThread().setContextClassLoader(which);
0:               return null;
0:             }
0:         });
0:     }
0: 
0: 
0:     private static void dumpSQLException(SQLException se)
0:     {
0: 		while (se != null)
0: 		{
0: 			se.printStackTrace();
0: 			se = se.getNextException();
0: 		}		
0: 	}	
0: 
0: 	private static void assertPreventDualBoot(SQLException ne) {
0: 		assertNotNull(ne);
0: 		String state = ne.getSQLState();
1: 		assertTrue("Unexpected SQLState:" + state, state.equals("XSDB6"));
0: 	}
0: 
0: 
0: 
0:     /*
1:      * Simple specialized URLClassLoader for Derby.  
1:      * Filters all derby classes out of parent ClassLoader to ensure
1:      * that Derby classes are loaded from the URL specified
1:      */
1:     public class DerbyURLClassLoader extends URLClassLoader {
0: 	
1:         /**
1:          * @see java.net.URLClassLoader#URLClassLoader(URL[] urls)
1:          */
1:         public DerbyURLClassLoader(URL[] urls) {
1:             super(urls);
0:         }
0: 
0: 
1:         /**
1:          * @see java.net.URLClassLoader#URLClassLoader(URL[] urls, 
1:          *      ClassLoader parent)
1:          */
1:         public DerbyURLClassLoader(URL[] urls, ClassLoader parent) {
1:             super(urls, parent);
0: 	
0:         }
0: 	
1:         /**
1:          *@see java.net.URLClassLoader#URLClassLoader(java.net.URL[], 
1:          *      java.lang.ClassLoader, java.net.URLStreamHandlerFactory)
1:          */
1:         public DerbyURLClassLoader(URL[] urls, ClassLoader parent,
1:                                    URLStreamHandlerFactory factory) {
1:             super(urls, parent, factory);
0: 		
0:         }
0: 	
1:         /* Override the parent class loader to filter out any derby
1:          * jars in the classpath.  Any classes that start with 
1:          * "org.apache.derby" will load  from the URLClassLoader
1:          * 
1:          * @see java.lang.ClassLoader#loadClass(java.lang.String, boolean)
1:          */
1:         protected synchronized Class loadClass(String name, boolean resolve)
1:             throws ClassNotFoundException
0:         {
0: 
1:             Class cl = findLoadedClass(name);
1:             if (cl == null) {
1:                 // cut off delegation to parent for certain classes
1:                 // to ensure loading from the desired source
1:                 if (!name.startsWith("org.apache.derby")) {
1:                     cl = getParent().loadClass(name);
0: 		    	}
0: 		    }
1:             if (cl == null) cl = findClass(name);
1:             if (cl == null) throw new ClassNotFoundException();
1:             if (resolve) resolveClass(cl);
1:             return cl;
0:         }
0: 
0:         /* 
1:          * @see java.lang.ClassLoader#loadClass(java.lang.String)
1:          */
1:         public Class loadClass(String name) throws ClassNotFoundException {
1:                 return loadClass(name, false);
0:         }
0: 
0:     }
0: }
0: 
============================================================================