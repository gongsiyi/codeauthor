1:568cbf1: /*
1:568cbf1: 
1:568cbf1:    Derby - Class org.apache.derby.impl.sql.compile.ConstantExpressionVisitor
1:568cbf1: 
1:568cbf1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:568cbf1:    contributor license agreements.  See the NOTICE file distributed with
1:568cbf1:    this work for additional information regarding copyright ownership.
1:568cbf1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:568cbf1:    (the "License"); you may not use this file except in compliance with
1:568cbf1:    the License.  You may obtain a copy of the License at
1:568cbf1: 
1:568cbf1:       http://www.apache.org/licenses/LICENSE-2.0
1:568cbf1: 
1:568cbf1:    Unless required by applicable law or agreed to in writing, software
1:568cbf1:    distributed under the License is distributed on an "AS IS" BASIS,
1:568cbf1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:568cbf1:    See the License for the specific language governing permissions and
1:568cbf1:    limitations under the License.
1:568cbf1: 
1:568cbf1:  */
1:568cbf1: 
1:568cbf1: package org.apache.derby.impl.sql.compile;
1:568cbf1: 
1:568cbf1: import org.apache.derby.iapi.error.StandardException;
1:568cbf1: import org.apache.derby.iapi.sql.compile.Visitable;
1:568cbf1: import org.apache.derby.iapi.sql.compile.Visitor;
1:568cbf1: 
1:568cbf1: /**
1:568cbf1:  * <p>
1:568cbf1:  * This visitor replaces a {@code ValueNode} with a node representing a
1:568cbf1:  * constant value, if the {@code ValueNode} is known to always evaluate to the
1:568cbf1:  * same value. It may for instance replace a sub-tree representing {@code 1=1}
1:568cbf1:  * with a constant {@code TRUE}.
1:568cbf1:  * </p>
1:568cbf1:  *
1:568cbf1:  * <p>
1:568cbf1:  * The actual evaluation of the {@code ValueNode}s is performed by invoking
1:568cbf1:  * {@link ValueNode#evaluateConstantExpressions()} on every {@code ValueNode}
1:568cbf1:  * in the query tree.
1:568cbf1:  * </p>
1:568cbf1:  *
1:568cbf1:  * <p>
1:568cbf1:  * In contrast to most other visitors, this visitor walks the tree bottom-up.
1:568cbf1:  * Top-down processing of the tree would only evaluate constant expressions
1:568cbf1:  * at the leaf level, so for instance {@code (1=1)=(1=2)} would only be
1:568cbf1:  * simplified to {@code TRUE=FALSE}. With bottom-up processing, the top-level
1:568cbf1:  * = node will be processed after the leaves, and it sees the intermediate
1:568cbf1:  * tree {@code TRUE=FALSE} which it is able to transform into the even simpler
1:568cbf1:  * tree {@code FALSE}.
1:568cbf1:  * </p>
1:568cbf1:  */
1:568cbf1: class ConstantExpressionVisitor implements Visitor {
1:568cbf1: 
1:568cbf1:     /**
1:568cbf1:      * Visit the node and call {@code evaluateConstantExpressions()} if it
1:568cbf1:      * is a {@code ValueNode}.
1:568cbf1:      *
1:568cbf1:      * @see ValueNode#evaluateConstantExpressions()
1:568cbf1:      */
1:568cbf1:     public Visitable visit(Visitable node) throws StandardException {
1:568cbf1:         if (node instanceof ValueNode) {
1:568cbf1:             node = ((ValueNode) node).evaluateConstantExpressions();
1:568cbf1:         }
1:568cbf1:         return node;
1:568cbf1:     }
1:568cbf1: 
1:568cbf1:     /**
1:568cbf1:      * {@inheritDoc}
1:568cbf1:      * @return {@code false}, since the entire tree should be visited
1:568cbf1:      */
1:568cbf1:     public boolean stopTraversal() {
1:568cbf1:         return false;
1:568cbf1:     }
1:568cbf1: 
1:568cbf1:     /**
1:568cbf1:      * {@inheritDoc}
1:568cbf1:      * @return {@code false}, since the entire tree should be visited
1:568cbf1:      */
1:568cbf1:     public boolean skipChildren(Visitable node) {
1:568cbf1:         return false;
1:568cbf1:     }
1:568cbf1: 
1:568cbf1:     /**
1:568cbf1:      * {@inheritDoc}
1:568cbf1:      * @return {@code true}, since the tree should be walked bottom-up
1:568cbf1:      */
1:568cbf1:     public boolean visitChildrenFirst(Visitable node) {
1:568cbf1:         return true;
1:568cbf1:     }
1:568cbf1: 
1:568cbf1: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:568cbf1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.ConstantExpressionVisitor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
1: /**
1:  * <p>
1:  * This visitor replaces a {@code ValueNode} with a node representing a
1:  * constant value, if the {@code ValueNode} is known to always evaluate to the
1:  * same value. It may for instance replace a sub-tree representing {@code 1=1}
1:  * with a constant {@code TRUE}.
1:  * </p>
1:  *
1:  * <p>
1:  * The actual evaluation of the {@code ValueNode}s is performed by invoking
1:  * {@link ValueNode#evaluateConstantExpressions()} on every {@code ValueNode}
1:  * in the query tree.
1:  * </p>
1:  *
1:  * <p>
1:  * In contrast to most other visitors, this visitor walks the tree bottom-up.
1:  * Top-down processing of the tree would only evaluate constant expressions
1:  * at the leaf level, so for instance {@code (1=1)=(1=2)} would only be
1:  * simplified to {@code TRUE=FALSE}. With bottom-up processing, the top-level
1:  * = node will be processed after the leaves, and it sees the intermediate
1:  * tree {@code TRUE=FALSE} which it is able to transform into the even simpler
1:  * tree {@code FALSE}.
1:  * </p>
1:  */
1: class ConstantExpressionVisitor implements Visitor {
1: 
1:     /**
1:      * Visit the node and call {@code evaluateConstantExpressions()} if it
1:      * is a {@code ValueNode}.
1:      *
1:      * @see ValueNode#evaluateConstantExpressions()
1:      */
1:     public Visitable visit(Visitable node) throws StandardException {
1:         if (node instanceof ValueNode) {
1:             node = ((ValueNode) node).evaluateConstantExpressions();
1:         }
1:         return node;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      * @return {@code false}, since the entire tree should be visited
1:      */
1:     public boolean stopTraversal() {
1:         return false;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      * @return {@code false}, since the entire tree should be visited
1:      */
1:     public boolean skipChildren(Visitable node) {
1:         return false;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      * @return {@code true}, since the tree should be walked bottom-up
1:      */
1:     public boolean visitChildrenFirst(Visitable node) {
1:         return true;
1:     }
1: 
1: }
============================================================================