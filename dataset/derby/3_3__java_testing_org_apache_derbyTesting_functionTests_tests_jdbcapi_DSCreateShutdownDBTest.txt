1:f7b3a7a: /*
1:f7b3a7a:  * Licensed to the Apache Software Foundation (ASF) under one
1:f7b3a7a:  * or more contributor license agreements.  See the NOTICE file
1:f7b3a7a:  * distributed with this work for additional information
1:f7b3a7a:  * regarding copyright ownership.  The ASF licenses this file
1:f7b3a7a:  * to you under the Apache License, Version 2.0 (the
1:f7b3a7a:  * "License"); you may not use this file except in compliance
1:f7b3a7a:  * with the License.  You may obtain a copy of the License at
1:f7b3a7a:  *
1:f7b3a7a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f7b3a7a:  *
1:f7b3a7a:  * Unless required by applicable law or agreed to in writing,
1:f7b3a7a:  * software distributed under the License is distributed on an
1:f7b3a7a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f7b3a7a:  * KIND, either express or implied.  See the License for the
1:f7b3a7a:  * specific language governing permissions and limitations
1:f7b3a7a:  * under the License.
1:f7b3a7a:  */
17:f7b3a7a: 
1:f7b3a7a: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:f7b3a7a: 
1:f7b3a7a: import java.lang.reflect.Method;
1:f7b3a7a: import java.sql.SQLException;
1:f7b3a7a: import javax.sql.DataSource;
1:f7b3a7a: import junit.extensions.TestSetup;
1:f7b3a7a: import junit.framework.Assert;
1:f7b3a7a: import junit.framework.Test;
1:f7b3a7a: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f7b3a7a: import org.apache.derbyTesting.junit.JDBCDataSource;
1:f7b3a7a: import org.apache.derbyTesting.junit.TestConfiguration;
1:f7b3a7a: 
1:f7b3a7a: public class DSCreateShutdownDBTest extends BaseJDBCTestCase {
1:f7b3a7a: 
1:f7b3a7a:     static final String[] ADDITIONAL_DBS = {
1:14ed86a:         "dscreateconatdb1",
1:f7b3a7a:         "dscreateshutdowndb1", 
1:f7b3a7a:         "dscreateshutdowndb2",
1:f7b3a7a:         "conflict1",
1:f7b3a7a:         "conflict2",
1:f7b3a7a:         "conflict3",
1:f7b3a7a:         "conflict4",
1:f7b3a7a:         "conflict5",
1:f7b3a7a:         "conflict6",
1:f7b3a7a:         "conflict7"
1:f7b3a7a:     };
1:f7b3a7a:     
1:f7b3a7a:     static String DBNotFoundState;
1:f7b3a7a:     
1:f7b3a7a:     public DSCreateShutdownDBTest(String name) {
1:f7b3a7a:         super(name);
11:f7b3a7a:     }
1:f7b3a7a: 
1:f7b3a7a:     public static Test suite() 
4:f7b3a7a:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DSCreateShutdownDBTest");
1:f7b3a7a:         Test test = TestConfiguration.defaultSuite(DSCreateShutdownDBTest.class);        
1:f7b3a7a:         //Test test = TestConfiguration.clientServerSuite(DSCreateShutdownDBTest.class);
1:f7b3a7a:         suite.addTest(test);
1:f7b3a7a:         
1:f7b3a7a:         TestSetup setup = TestConfiguration.singleUseDatabaseDecorator(suite);
1:f7b3a7a:         // we need a couple extra databases to test they get created
1:f7b3a7a:         for (int i = 0; i < ADDITIONAL_DBS.length; i++)
1:f7b3a7a:         {
1:f7b3a7a:             setup = TestConfiguration.additionalDatabaseDecorator(setup,
1:f7b3a7a:                 "emb" + ADDITIONAL_DBS[i]);
1:f7b3a7a:             setup = TestConfiguration.additionalDatabaseDecorator(setup,
1:f7b3a7a:                 "srv" + ADDITIONAL_DBS[i]);
1:f7b3a7a:         }
1:f7b3a7a:     
1:f7b3a7a:         return suite;
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     public void tearDown() throws Exception {
1:f7b3a7a:         // attempt to get rid of any databases. 
1:14ed86a:         // only 5 dbs (in addition to defaultdb) should actually get
1:14ed86a:         // created, but just in case, try all...
1:e18f54b:         TestConfiguration conf = TestConfiguration.getCurrent();
1:e18f54b:         for (int i = 0; i < ADDITIONAL_DBS.length; i++) {
1:e18f54b:             removeDirectory(conf.getDatabasePath("emb" + ADDITIONAL_DBS[i]));
1:e18f54b:             removeDirectory(conf.getDatabasePath("srv" + ADDITIONAL_DBS[i]));
1:e18f54b:         }
1:f7b3a7a:         super.tearDown();
1:f7b3a7a:     }
1:f7b3a7a: 
1:f7b3a7a:     public void testCreateAndShutdown() throws SQLException {
1:f7b3a7a:         
1:f7b3a7a:         if (usingEmbedded())
1:f7b3a7a:             DBNotFoundState = "XJ004";
1:f7b3a7a:         else
1:f7b3a7a:             DBNotFoundState = "08004";
1:f7b3a7a:         
1:f7b3a7a:         // first play with default db, which is already created.
1:f7b3a7a:         String dbName = 
1:f7b3a7a:             TestConfiguration.getCurrent().getDefaultDatabaseName();
1:f7b3a7a:         // just check that we really access the database
1:f7b3a7a:         assertUpdateCount(createStatement(), 0, "set schema APP");
1:f7b3a7a:    
1:f7b3a7a:         // check that first the value is null
1:f7b3a7a:         assertGetNull(dbName);
1:f7b3a7a:         // check that we can set & that when set we can get
1:f7b3a7a:         // doesn't actually open connections so a little silly.
1:f7b3a7a:         assertSetAndGet(dbName, "shutdownDatabase", "shutdown");
1:f7b3a7a:         assertSetAndGet(dbName, "createDatabase", "create");
1:f7b3a7a:         // set to an invalid value, should get ignored
1:f7b3a7a:         assertNotSetAndGet(dbName, "shutdownDatabase", "boo");
1:f7b3a7a:         assertNotSetAndGet(dbName, "createDatabase", "boo");
1:f7b3a7a:         assertNotSetAndGet(dbName, "shutdownDatabase", "false");
1:f7b3a7a:         assertNotSetAndGet(dbName, "createDatabase", "false");
1:f7b3a7a:         
1:d641aff:         assertReset(dbName);
1:d641aff:         
1:14ed86a:         // check that create using ConnAttributes works
1:14ed86a:         assertCreateUsingConnAttrsOK(composeDatabaseName(ADDITIONAL_DBS[0]));
1:14ed86a:         
1:14ed86a:         // check that shutting down using ConnAttributes works
1:f7b3a7a:         assertShutdownUsingConnAttrsOK(dbName);
1:f7b3a7a:         // re-vive db
1:f7b3a7a:         getConnection();
1:f7b3a7a:         
1:f7b3a7a:         // now, actually create, and shutdown a database
1:f7b3a7a:         // first ensure it's not there yet
1:14ed86a:         dbName = composeDatabaseName(ADDITIONAL_DBS[1]);
1:f7b3a7a:         assertNoDB(dbName);
1:f7b3a7a:         // straightforward create and shutdown
1:f7b3a7a:         assertPositive(dbName);
1:f7b3a7a:         
1:f7b3a7a:         // what happens when you combine set*Database and 
1:f7b3a7a:         // matching connection attribute? (should work)
1:14ed86a:         dbName = composeDatabaseName(ADDITIONAL_DBS[2]);
1:f7b3a7a:         assertNoDB(dbName);
1:f7b3a7a:         assertTwiceOK(dbName);
1:f7b3a7a:         
1:f7b3a7a:         // the rest of the testing is on conflicted settings
1:f7b3a7a:         // the result is not defined, so a change in behavior does not 
1:f7b3a7a:         // necessarily indicate a bug, but may be relevant for existing apps
1:f7b3a7a:         // what happens when you combine create and shutdown connattr?
1:f7b3a7a:         // database does not get created.
1:f7b3a7a:         assertShutdownAndCreateConnAttr(DBNotFoundState, 
1:14ed86a:             composeDatabaseName(ADDITIONAL_DBS[3]), 
1:f7b3a7a:             "shutdown=true;create=true");
1:f7b3a7a:         assertShutdownAndCreateConnAttr(DBNotFoundState, 
1:14ed86a:             composeDatabaseName(ADDITIONAL_DBS[4]), 
1:f7b3a7a:             "create=true;shutdown=true");
1:f7b3a7a: 
1:f7b3a7a:         // and when you set both setShutdownDatabase and setCreateDatabase?
1:f7b3a7a:         // database does not get created
1:14ed86a:         assertConflictedSettersOK(composeDatabaseName(ADDITIONAL_DBS[5]));
1:f7b3a7a:         
1:f7b3a7a:         // what happens when you combine set*Database and
1:f7b3a7a:         // opposing connection attributes? database does not get created. 
1:f7b3a7a:         assertConflictedSetterConnAttrOK();
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     protected String composeDatabaseName(String dbName) {
1:f7b3a7a:         if (usingEmbedded())
1:f7b3a7a:             return "emb" + dbName;
1:f7b3a7a:         else 
1:f7b3a7a:             return "srv" + dbName;
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     protected void assertGetNull(String dbName) throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:f7b3a7a:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:f7b3a7a:         assertNull(getBeanProperty(ds, "createDatabase"));
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     protected void assertSetAndGet(
1:f7b3a7a:         String dbName, String propertyString, String setValue)
1:f7b3a7a:     throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, propertyString, setValue);
1:f7b3a7a:         assertEquals(setValue,getBeanProperty(ds, propertyString).toString());
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     protected void assertNotSetAndGet(
1:f7b3a7a:         String dbName, String propertyString, String setValue)
1:f7b3a7a:     throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, propertyString, setValue);
1:f7b3a7a:         assertNull(getBeanProperty(ds, propertyString));
1:f7b3a7a:     }
1:f7b3a7a:     
1:d641aff:     protected void assertReset(String dbName) 
1:d641aff:     throws SQLException {
1:d641aff:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:14ed86a: 
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "");
1:d641aff:         assertNull(getBeanProperty(ds, "createDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:d641aff:         assertEquals("create", getBeanProperty(ds, "createDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "boo");
1:d641aff:         assertNull(getBeanProperty(ds, "createDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:d641aff:         assertEquals("create", getBeanProperty(ds, "createDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
1:d641aff:         assertNull(getBeanProperty(ds, "createDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:d641aff:         assertEquals("create", getBeanProperty(ds, "createDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "");
1:d641aff:         assertNull(getBeanProperty(ds, "createDatabase"));
1:d641aff:         try { 
1:d641aff:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "");
1:d641aff:         } catch (Exception e) {
1:d641aff:             e.printStackTrace();
1:d641aff:         }
1:d641aff:         
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "");
1:d641aff:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:d641aff:         assertEquals("shutdown", getBeanProperty(ds, "shutdownDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "boo");
1:d641aff:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "false");
1:d641aff:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:d641aff:         assertEquals("shutdown", getBeanProperty(ds, "shutdownDatabase"));
1:d641aff:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "");
1:d641aff:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:d641aff:         try { 
1:d641aff:             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "");
1:d641aff:         } catch (Exception e) {
1:d641aff:             e.printStackTrace();
1:d641aff:         }
1:d641aff:     }
1:d641aff:     
1:f7b3a7a:     public static Object getBeanProperty(Object ds, String propertyString)
1:f7b3a7a:     {
1:f7b3a7a:         String getterName = getGetterName(propertyString);
1:f7b3a7a: 
1:f7b3a7a:         // Base the type of the setter method from the value's class.
1:f7b3a7a:         Object retObject=null;
1:f7b3a7a:         try {
1:f7b3a7a:             Method getter = ds.getClass().getMethod(getterName, null);
1:f7b3a7a:             retObject = getter.invoke(ds, null);
1:f7b3a7a:         } catch (Exception e) {
1:f7b3a7a:             Assert.fail(e.getMessage());
1:f7b3a7a:         }
1:f7b3a7a:         return retObject;
1:f7b3a7a:     }
1:f7b3a7a: 
1:f7b3a7a:     private static String getGetterName(String attribute) {
1:f7b3a7a:         return "get" + Character.toUpperCase(attribute.charAt(0))
1:f7b3a7a:         + attribute.substring(1);
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     // if the connattr parameter is true, we set both setShutdownDatabase
1:f7b3a7a:     // and ConnectionAttribute shutdown=true.
1:f7b3a7a:     protected void assertShutdownUsingSetOK(String dbName, boolean connAttr)
1:f7b3a7a:     throws SQLException {
1:f7b3a7a: 
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:f7b3a7a:         if (connAttr)
1:f7b3a7a:             JDBCDataSource.setBeanProperty(
1:f7b3a7a:                 ds, "ConnectionAttributes", "shutdown=true");
1:f7b3a7a:         assertDSConnectionFailed("08006", ds);
1:f7b3a7a:     }
1:f7b3a7a:     
1:14ed86a:     // for completeness' sake, test create=true conn attr.
1:14ed86a:     protected void assertCreateUsingConnAttrsOK(String dbName)
1:14ed86a:     throws SQLException {
1:14ed86a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:14ed86a:         JDBCDataSource.setBeanProperty(
1:14ed86a:                 ds, "ConnectionAttributes", "create=true");
1:14ed86a:         assertUpdateCount(
1:14ed86a:             ds.getConnection().createStatement(), 0, "set schema APP");
1:14ed86a:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:14ed86a:         assertShutdownUsingSetOK(dbName, false);
1:14ed86a:     }
1:14ed86a:     
1:f7b3a7a:     protected void assertShutdownUsingConnAttrsOK(String dbName)
1:f7b3a7a:     throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(
1:f7b3a7a:             ds, "ConnectionAttributes", "shutdown=true");
1:f7b3a7a:         assertDSConnectionFailed("08006", ds);
1:f7b3a7a:     }
1:f7b3a7a: 
1:f7b3a7a:     protected void assertShutdownAndCreateConnAttr(
1:f7b3a7a:         String expectedSQLState, String dbName, String twoPropertyString)
1:f7b3a7a:     throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(
1:f7b3a7a:             ds, "ConnectionAttributes", twoPropertyString);
1:f7b3a7a:         assertDSConnectionFailed(expectedSQLState, ds);
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     protected void assertDSConnectionFailed(
1:f7b3a7a:         String expectedSQLState, DataSource ds) throws SQLException {
1:f7b3a7a:         try {
1:f7b3a7a:             ds.getConnection();
1:f7b3a7a:             fail("expected an sqlexception " + expectedSQLState);
1:f7b3a7a:         } catch (SQLException sqle) {
1:f7b3a7a:             assertSQLState(expectedSQLState, sqle);
1:f7b3a7a:         }
1:f7b3a7a:     }    
1:f7b3a7a:     
1:f7b3a7a:     protected void assertNoDB(String dbName) throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         assertDSConnectionFailed(DBNotFoundState, ds);
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     protected void assertPositive(String dbName) throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, "CreateDatabase", "create");
1:f7b3a7a:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:f7b3a7a:         assertUpdateCount(
1:f7b3a7a:             ds.getConnection().createStatement(), 0, "set schema APP");
1:f7b3a7a:         JDBCDataSource.clearStringBeanProperty(ds, "CreateDatabase");
1:f7b3a7a:         assertShutdownUsingSetOK(dbName, false);
1:f7b3a7a:     }
1:f7b3a7a: 
1:f7b3a7a:     protected void assertTwiceOK(String dbName) throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, "CreateDatabase", "create");
1:f7b3a7a:         JDBCDataSource.setBeanProperty(
1:f7b3a7a:             ds, "ConnectionAttributes", "create=true");
1:f7b3a7a:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:f7b3a7a:         assertUpdateCount(
1:f7b3a7a:             ds.getConnection().createStatement(), 0, "set schema APP");
1:f7b3a7a:         JDBCDataSource.clearStringBeanProperty(ds, "CreateDatabase");
1:f7b3a7a:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:f7b3a7a:         assertShutdownUsingSetOK(dbName, true);
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     protected void assertConflictedSettersOK(String dbName) throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, "CreateDatabase", "create");
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:f7b3a7a:         try {
1:f7b3a7a:             ds.getConnection();
1:f7b3a7a:         } catch (SQLException se) {
1:f7b3a7a:             assertSQLState(DBNotFoundState, se);
1:f7b3a7a:         }
1:f7b3a7a:     }
1:f7b3a7a: 
1:f7b3a7a:     protected void assertConflictedSetterConnAttrOK() 
1:f7b3a7a:     throws SQLException {
1:14ed86a:         assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[6]), 
1:f7b3a7a:             "shutdown=true", "CreateDatabase", "create");
1:f7b3a7a:         // with the new networkserver methods, this actually works...
1:14ed86a:         assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[7]),
1:f7b3a7a:             "create=true", "ShutdownDatabase", "shutdown");
1:14ed86a:         assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[8]), 
1:f7b3a7a:             "shutdown=true", "CreateDatabase", "create");
1:f7b3a7a:         // with the new networkserver methods, this actually works...
1:14ed86a:         assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[9]),
1:f7b3a7a:             "create=true", "ShutdownDatabase", "shutdown");
1:f7b3a7a:     }
1:f7b3a7a:     
1:f7b3a7a:     // first sets setCreate/ShutdownDB, then sets ConnectionAttributes
1:f7b3a7a:     protected void assertConSetOK(String expectedSQLState, String dbName, 
1:f7b3a7a:         String connAttrValue, String setter, String setValue) 
1:f7b3a7a:     throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, setter, setValue);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(
1:f7b3a7a:             ds, "ConnectionAttributes", connAttrValue);
1:f7b3a7a:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:f7b3a7a:         try {
1:f7b3a7a:             ds.getConnection();
1:f7b3a7a:         } catch (SQLException se) {
1:f7b3a7a:             assertSQLState(expectedSQLState, se);
1:f7b3a7a:         }
1:f7b3a7a:         JDBCDataSource.clearStringBeanProperty(ds, setter);
1:f7b3a7a:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:1ae02c9:     }
1:f7b3a7a: 
1:f7b3a7a:     // sets ConnectionAttributes first, then SetCreate/ShutdownDB
1:f7b3a7a:     protected void assertSetConOK(String expectedSQLState, String dbName, 
1:f7b3a7a:         String connAttrValue, String setter, String setValue) 
1:f7b3a7a:     throws SQLException {
1:f7b3a7a:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(
1:f7b3a7a:             ds, "ConnectionAttributes", connAttrValue);
1:f7b3a7a:         JDBCDataSource.setBeanProperty(ds, setter, setValue);
1:f7b3a7a:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:f7b3a7a:         try {
1:f7b3a7a:             ds.getConnection();
1:f7b3a7a:         } catch (SQLException se) {
1:f7b3a7a:             assertSQLState(expectedSQLState, se);
1:f7b3a7a:         }
1:f7b3a7a:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:f7b3a7a:         JDBCDataSource.clearStringBeanProperty(ds, setter);
1:f7b3a7a:     }
1:f7b3a7a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DSCreateShutdownDBTest");
/////////////////////////////////////////////////////////////////////////
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         TestConfiguration conf = TestConfiguration.getCurrent();
1:         for (int i = 0; i < ADDITIONAL_DBS.length; i++) {
1:             removeDirectory(conf.getDatabasePath("emb" + ADDITIONAL_DBS[i]));
1:             removeDirectory(conf.getDatabasePath("srv" + ADDITIONAL_DBS[i]));
1:         }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:14ed86a
/////////////////////////////////////////////////////////////////////////
1:         "dscreateconatdb1",
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("DSCreateShutdownDBTest"); 
/////////////////////////////////////////////////////////////////////////
1:         // only 5 dbs (in addition to defaultdb) should actually get
1:         // created, but just in case, try all...
/////////////////////////////////////////////////////////////////////////
1:         // check that create using ConnAttributes works
1:         assertCreateUsingConnAttrsOK(composeDatabaseName(ADDITIONAL_DBS[0]));
1:         
1:         // check that shutting down using ConnAttributes works
1:         dbName = composeDatabaseName(ADDITIONAL_DBS[1]);
1:         dbName = composeDatabaseName(ADDITIONAL_DBS[2]);
/////////////////////////////////////////////////////////////////////////
1:             composeDatabaseName(ADDITIONAL_DBS[3]), 
1:             composeDatabaseName(ADDITIONAL_DBS[4]), 
1:         assertConflictedSettersOK(composeDatabaseName(ADDITIONAL_DBS[5]));
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     // for completeness' sake, test create=true conn attr.
1:     protected void assertCreateUsingConnAttrsOK(String dbName)
1:     throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         JDBCDataSource.setBeanProperty(
1:                 ds, "ConnectionAttributes", "create=true");
1:         assertUpdateCount(
1:             ds.getConnection().createStatement(), 0, "set schema APP");
1:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:         assertShutdownUsingSetOK(dbName, false);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[6]), 
1:         assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[7]),
1:         assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[8]), 
1:         assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[9]),
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d641aff
/////////////////////////////////////////////////////////////////////////
1:         assertReset(dbName);
1:         
/////////////////////////////////////////////////////////////////////////
1:     protected void assertReset(String dbName) 
1:     throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "");
1:         assertNull(getBeanProperty(ds, "createDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:         assertEquals("create", getBeanProperty(ds, "createDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "boo");
1:         assertNull(getBeanProperty(ds, "createDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:         assertEquals("create", getBeanProperty(ds, "createDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
1:         assertNull(getBeanProperty(ds, "createDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:         assertEquals("create", getBeanProperty(ds, "createDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "createDatabase", "");
1:         assertNull(getBeanProperty(ds, "createDatabase"));
1:         try { 
1:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "");
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:         
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "");
1:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         assertEquals("shutdown", getBeanProperty(ds, "shutdownDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "boo");
1:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "false");
1:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         assertEquals("shutdown", getBeanProperty(ds, "shutdownDatabase"));
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "");
1:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:         try { 
1:             JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "");
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1:     
commit:f7b3a7a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.io.File;
1: import java.lang.reflect.Method;
0: import java.security.AccessController;
1: import java.sql.SQLException;
1: 
1: import javax.sql.DataSource;
1: 
1: import junit.extensions.TestSetup;
1: import junit.framework.Assert;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class DSCreateShutdownDBTest extends BaseJDBCTestCase {
1: 
1:     static final String[] ADDITIONAL_DBS = {
1:         "dscreateshutdowndb1", 
1:         "dscreateshutdowndb2",
1:         "conflict1",
1:         "conflict2",
1:         "conflict3",
1:         "conflict4",
1:         "conflict5",
1:         "conflict6",
1:         "conflict7"
1:     };
1:     
1:     static String DBNotFoundState;
1:     
1:     public DSCreateShutdownDBTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() 
1:     {
0:         TestSuite suite = new TestSuite("DSCreateShutdownTest"); 
1:         Test test = TestConfiguration.defaultSuite(DSCreateShutdownDBTest.class);        
1:         //Test test = TestConfiguration.clientServerSuite(DSCreateShutdownDBTest.class);
1:         suite.addTest(test);
1:         
1:         TestSetup setup = TestConfiguration.singleUseDatabaseDecorator(suite);
1:         // we need a couple extra databases to test they get created
1:         for (int i = 0; i < ADDITIONAL_DBS.length; i++)
1:         {
1:             setup = TestConfiguration.additionalDatabaseDecorator(setup,
1:                 "emb" + ADDITIONAL_DBS[i]);
1:             setup = TestConfiguration.additionalDatabaseDecorator(setup,
1:                 "srv" + ADDITIONAL_DBS[i]);
1:         }
1:     
1:         return suite;
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         // attempt to get rid of any databases. 
0:         // only 4 dbs (in addition to defaultdb) should actually get
0:         // created, but just in case...
0:         AccessController.doPrivileged(new java.security.PrivilegedAction() {
0:             public Object run() {
0:                 for (int i=0 ; i < ADDITIONAL_DBS.length ; i++)
1:                 {   
0:                     removeDatabase("emb" + ADDITIONAL_DBS[i]);
0:                     removeDatabase("srv" + ADDITIONAL_DBS[i]);
1:                 } 
0:                 return null;
1:             }
1:             
0:             void removeDatabase(String dbName)
1:             {
0:                 //TestConfiguration config = TestConfiguration.getCurrent();
0:                 dbName = dbName.replace('/', File.separatorChar);
0:                 String dsh = BaseTestCase.getSystemProperty("derby.system.home");
0:                 if (dsh == null) {
0:                     fail("not implemented");
0:                 } else {
0:                     dbName = dsh + File.separator + dbName;
1:                 }
0:                 removeDirectory(dbName);
1:             }
1: 
0:             void removeDirectory(String path)
1:             {
0:                 final File dir = new File(path);
0:                 removeDir(dir);
1:             }
1: 
0:             private void removeDir(File dir) {
1:                 
0:                 // Check if anything to do!
0:                 // Database may not have been created.
0:                 if (!dir.exists())
0:                     return;
1: 
0:                 String[] list = dir.list();
1: 
0:                 // Some JVMs return null for File.list() when the
0:                 // directory is empty.
0:                 if (list != null) {
0:                     for (int i = 0; i < list.length; i++) {
0:                         File entry = new File(dir, list[i]);
1: 
0:                         if (entry.isDirectory()) {
0:                             removeDir(entry);
0:                         } else {
0:                             entry.delete();
0:                             //assertTrue(entry.getPath(), entry.delete());
1:                         }
1:                     }
1:                 }
0:                 dir.delete();
0:                 //assertTrue(dir.getPath(), dir.delete());
1:             }
0:         });
1:         super.tearDown();
1:     }
1: 
1:     public void testCreateAndShutdown() throws SQLException {
1:         
1:         if (usingEmbedded())
1:             DBNotFoundState = "XJ004";
1:         else
1:             DBNotFoundState = "08004";
1:         
1:         // first play with default db, which is already created.
1:         String dbName = 
1:             TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         // just check that we really access the database
1:         assertUpdateCount(createStatement(), 0, "set schema APP");
1:    
1:         // check that first the value is null
1:         assertGetNull(dbName);
1:         // check that we can set & that when set we can get
1:         // doesn't actually open connections so a little silly.
1:         assertSetAndGet(dbName, "shutdownDatabase", "shutdown");
1:         assertSetAndGet(dbName, "createDatabase", "create");
1:         // set to an invalid value, should get ignored
1:         assertNotSetAndGet(dbName, "shutdownDatabase", "boo");
1:         assertNotSetAndGet(dbName, "createDatabase", "boo");
1:         assertNotSetAndGet(dbName, "shutdownDatabase", "false");
1:         assertNotSetAndGet(dbName, "createDatabase", "false");
1:         
0:         // check that shutting down using Attributes works
1:         assertShutdownUsingConnAttrsOK(dbName);
1:         // re-vive db
1:         getConnection();
1:         
1:         // now, actually create, and shutdown a database
1:         // first ensure it's not there yet
0:         dbName = composeDatabaseName(ADDITIONAL_DBS[0]);
1:         assertNoDB(dbName);
1:         // straightforward create and shutdown
1:         assertPositive(dbName);
1:         
1:         // what happens when you combine set*Database and 
1:         // matching connection attribute? (should work)
0:         dbName = composeDatabaseName(ADDITIONAL_DBS[1]);
1:         assertNoDB(dbName);
1:         assertTwiceOK(dbName);
1:         
1:         // the rest of the testing is on conflicted settings
1:         // the result is not defined, so a change in behavior does not 
1:         // necessarily indicate a bug, but may be relevant for existing apps
1:         // what happens when you combine create and shutdown connattr?
1:         // database does not get created.
1:         assertShutdownAndCreateConnAttr(DBNotFoundState, 
0:             composeDatabaseName(ADDITIONAL_DBS[2]), 
1:             "shutdown=true;create=true");
1:         assertShutdownAndCreateConnAttr(DBNotFoundState, 
0:             composeDatabaseName(ADDITIONAL_DBS[3]), 
1:             "create=true;shutdown=true");
1: 
1:         // and when you set both setShutdownDatabase and setCreateDatabase?
1:         // database does not get created
0:         assertConflictedSettersOK(composeDatabaseName(ADDITIONAL_DBS[4]));
1:         
1:         // what happens when you combine set*Database and
1:         // opposing connection attributes? database does not get created. 
1:         assertConflictedSetterConnAttrOK();
1:     }
1:     
1:     protected String composeDatabaseName(String dbName) {
1:         if (usingEmbedded())
1:             return "emb" + dbName;
1:         else 
1:             return "srv" + dbName;
1:     }
1:     
1:     protected void assertGetNull(String dbName) throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:         assertNull(getBeanProperty(ds, "shutdownDatabase"));
1:         assertNull(getBeanProperty(ds, "createDatabase"));
1:     }
1:     
1:     protected void assertSetAndGet(
1:         String dbName, String propertyString, String setValue)
1:     throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:         JDBCDataSource.setBeanProperty(ds, propertyString, setValue);
1:         assertEquals(setValue,getBeanProperty(ds, propertyString).toString());
1:     }
1:     
1:     protected void assertNotSetAndGet(
1:         String dbName, String propertyString, String setValue)
1:     throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:         JDBCDataSource.setBeanProperty(ds, propertyString, setValue);
1:         assertNull(getBeanProperty(ds, propertyString));
1:     }
1:     
1:     public static Object getBeanProperty(Object ds, String propertyString)
1:     {
1:         String getterName = getGetterName(propertyString);
1: 
1:         // Base the type of the setter method from the value's class.
1: 
1:         Object retObject=null;
1:         try {
1:             Method getter = ds.getClass().getMethod(getterName, null);
1:             retObject = getter.invoke(ds, null);
1:         } catch (Exception e) {
1:             Assert.fail(e.getMessage());
1:         }
1:         return retObject;
1:     }
1: 
1:     private static String getGetterName(String attribute) {
1:         return "get" + Character.toUpperCase(attribute.charAt(0))
1:         + attribute.substring(1);
1:     }
1:     
1:     // if the connattr parameter is true, we set both setShutdownDatabase
1:     // and ConnectionAttribute shutdown=true.
1:     protected void assertShutdownUsingSetOK(String dbName, boolean connAttr)
1:     throws SQLException {
1: 
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         if (connAttr)
1:             JDBCDataSource.setBeanProperty(
1:                 ds, "ConnectionAttributes", "shutdown=true");
1:         assertDSConnectionFailed("08006", ds);
1:     }
1:     
1:     protected void assertShutdownUsingConnAttrsOK(String dbName)
1:     throws SQLException {
1: 
1:         DataSource ds = JDBCDataSource.getDataSourceLogical(dbName);
1:         JDBCDataSource.setBeanProperty(
1:             ds, "ConnectionAttributes", "shutdown=true");
1:         assertDSConnectionFailed("08006", ds);
1:     }
1: 
1:     protected void assertShutdownAndCreateConnAttr(
1:         String expectedSQLState, String dbName, String twoPropertyString)
1:     throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         JDBCDataSource.setBeanProperty(
1:             ds, "ConnectionAttributes", twoPropertyString);
1:         assertDSConnectionFailed(expectedSQLState, ds);
1:     }
1:     
1:     protected void assertDSConnectionFailed(
1:         String expectedSQLState, DataSource ds) throws SQLException {
1:         try {
1:             ds.getConnection();
1:             fail("expected an sqlexception " + expectedSQLState);
1:         } catch (SQLException sqle) {
1:             assertSQLState(expectedSQLState, sqle);
1:         }
1:     }    
1:     
1:     protected void assertNoDB(String dbName) throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         assertDSConnectionFailed(DBNotFoundState, ds);
1:     }
1:     
1:     protected void assertPositive(String dbName) throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         JDBCDataSource.setBeanProperty(ds, "CreateDatabase", "create");
1:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:         assertUpdateCount(
1:             ds.getConnection().createStatement(), 0, "set schema APP");
1:         JDBCDataSource.clearStringBeanProperty(ds, "CreateDatabase");
1:         assertShutdownUsingSetOK(dbName, false);
1:     }
1: 
1:     protected void assertTwiceOK(String dbName) throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         JDBCDataSource.setBeanProperty(ds, "CreateDatabase", "create");
1:         JDBCDataSource.setBeanProperty(
1:             ds, "ConnectionAttributes", "create=true");
1:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:         assertUpdateCount(
1:             ds.getConnection().createStatement(), 0, "set schema APP");
1:         JDBCDataSource.clearStringBeanProperty(ds, "CreateDatabase");
1:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:         assertShutdownUsingSetOK(dbName, true);
1:     }
1:     
1:     protected void assertConflictedSettersOK(String dbName) throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         JDBCDataSource.setBeanProperty(ds, "CreateDatabase", "create");
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         try {
1:             ds.getConnection();
1:         } catch (SQLException se) {
1:             assertSQLState(DBNotFoundState, se);
1:         }
1:     }
1: 
1:     protected void assertConflictedSetterConnAttrOK() 
1:     throws SQLException {
0:         assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[5]), 
1:             "shutdown=true", "CreateDatabase", "create");
1:         // with the new networkserver methods, this actually works...
0:         assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[6]),
1:             "create=true", "ShutdownDatabase", "shutdown");
0:         assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[7]), 
1:             "shutdown=true", "CreateDatabase", "create");
1:         // with the new networkserver methods, this actually works...
0:         assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[8]),
1:             "create=true", "ShutdownDatabase", "shutdown");
1: 
1:     }
1:     
1:     // first sets setCreate/ShutdownDB, then sets ConnectionAttributes
1:     protected void assertConSetOK(String expectedSQLState, String dbName, 
1:         String connAttrValue, String setter, String setValue) 
1:     throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         
1:         JDBCDataSource.setBeanProperty(ds, setter, setValue);
1:         JDBCDataSource.setBeanProperty(
1:             ds, "ConnectionAttributes", connAttrValue);
1:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:         try {
1:             ds.getConnection();
1:         } catch (SQLException se) {
1:             assertSQLState(expectedSQLState, se);
1:         }
1:         JDBCDataSource.clearStringBeanProperty(ds, setter);
1:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:     }
1: 
1:     // sets ConnectionAttributes first, then SetCreate/ShutdownDB
1:     protected void assertSetConOK(String expectedSQLState, String dbName, 
1:         String connAttrValue, String setter, String setValue) 
1:     throws SQLException {
1:         DataSource ds = JDBCDataSource.getDataSource(dbName);
1:         
1:         JDBCDataSource.setBeanProperty(
1:             ds, "ConnectionAttributes", connAttrValue);
1:         JDBCDataSource.setBeanProperty(ds, setter, setValue);
1:         // check that the db exists; execute an unnecessary, but harmless, stmt
1:         try {
1:             ds.getConnection();
1:         } catch (SQLException se) {
1:             assertSQLState(expectedSQLState, se);
1:         }
1:         JDBCDataSource.clearStringBeanProperty(ds, "ConnectionAttributes");
1:         JDBCDataSource.clearStringBeanProperty(ds, setter);
1:     }
1: 
1: }
============================================================================