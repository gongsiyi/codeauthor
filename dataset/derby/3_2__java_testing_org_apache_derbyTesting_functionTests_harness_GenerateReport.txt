1:67614ad: /* 
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.GenerateReport
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:67614ad: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
36:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:f68f62f: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.util.Properties;
1:67614ad: import java.util.Calendar;
1:67614ad: import java.util.GregorianCalendar;
1:67614ad: import java.io.File;
1:67614ad: import java.io.FileReader;
1:67614ad: import java.io.FilenameFilter;
1:67614ad: import java.io.FileWriter;
1:67614ad: import java.io.IOException;
1:67614ad: import java.io.BufferedReader;
1:67614ad: import java.io.PrintWriter;
1:67614ad: import java.sql.Date;
1:67614ad: import java.sql.Time;
1:67614ad: import java.sql.Timestamp;
1:67614ad: 
2:67614ad: /**
1:67614ad: 	Generate summary information from a RunSuite run.
1:67614ad: 	Can be called separately, if given the suite name.
1:67614ad: 	Will be called from RunSuite if System property genrep=true.
1:67614ad: 
1:67614ad: 	Condenses run information down, prints out result stats,
1:67614ad: 	and shows details of failures (.diff files).
1:67614ad: 
1:67614ad: **/
1:67614ad: public class GenerateReport {
1:67614ad: 
1:67614ad: 	static void CollectProperties () {
1:67614ad: 		Properties ps = System.getProperties();
1:67614ad: 		char[] newline = {' '};
1:67614ad: 		propFile.println(PropertyUtil.sortProperties(ps,newline));
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void CalculateRunLength () {
1:67614ad: 	// read suite.sum for start/end timestamps, 
1:67614ad: 	// report start date and full duration of run
1:67614ad: 		String odn = System.getProperty("outputdir");
1:67614ad: 		if (odn==null) odn = System.getProperty("user.dir");
1:67614ad: 
1:67614ad: 		BufferedReader sumFile = null;
1:67614ad: 		String firstLine = null;
1:67614ad: 		String lastLine = null;
1:67614ad: 		try {
1:67614ad: 			sumFile = new BufferedReader(new FileReader(new File(new File(odn),SuiteName+".sum")));
1:67614ad: 			firstLine = sumFile.readLine();
1:67614ad: 			String aLine = firstLine;
1:67614ad: 			while (aLine!=null) {
1:67614ad: 				lastLine = aLine;
1:67614ad: 				aLine = sumFile.readLine();
1:67614ad: 			}
1:67614ad: 			sumFile.close();
1:67614ad: 		} catch (IOException ioe) { 
1:67614ad: 			ioe.printStackTrace(System.out);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		// have firstLine and lastLine.
1:67614ad: 		// format is: 
1:67614ad: 		// ******* Start Suite: <suite> <timestamp> *******
1:67614ad: 		// ******* End Suite: <suite> <timestamp> *******
1:67614ad: 		int tsStart = 22+SuiteName.length();
1:67614ad: 		int tsEnd = firstLine.length()-8;
1:67614ad: 		TestStart = Timestamp.valueOf(firstLine.substring(tsStart,tsEnd));
1:67614ad: 		// last line is two shorter
1:67614ad: 		tsStart-=2; tsEnd-=2;
1:67614ad: 		Timestamp testEnd = Timestamp.valueOf(lastLine.substring(tsStart,tsEnd));
1:67614ad: 
1:67614ad: 		long testLen = testEnd.getTime() - TestStart.getTime();
1:67614ad: 		// Time isn't really a duration, so we have to set the fields
1:67614ad: 		int sec = (int) (testLen / 1000);
1:67614ad: 		int min = sec / 60;
1:67614ad: 		int hr = min / 60;
1:67614ad: 		sec = sec - (min*60); // adjust for part removed
1:67614ad: 		min = min - (hr*60); // adjust for part removed
1:67614ad: 		Calendar cal = new GregorianCalendar();
1:67614ad: 		cal.set(Calendar.HOUR_OF_DAY,hr);
1:67614ad: 		cal.set(Calendar.MINUTE,min);
1:67614ad: 		cal.set(Calendar.SECOND,sec);
1:67614ad: 		TestDuration = new Time(cal.getTime().getTime());
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void CollectPassFailStats () {
1:67614ad: 		// need to ensure outputdir is set...
1:67614ad: 		String odn = System.getProperty("outputdir");
1:67614ad: 		if (odn==null) odn = System.getProperty("user.dir");
1:67614ad: 		CollectPassFailStats(new File(odn),"");
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void addLines(PrintWriter outFile, File inFile, String relativeName) {
1:67614ad: 		BufferedReader readFile = null;
1:67614ad: 		try {
1:67614ad: 		readFile = new BufferedReader(new FileReader(inFile));
1:67614ad: 		String aLine = readFile.readLine();
1:67614ad: 		while (aLine!=null) {
1:67614ad: 			outFile.print(relativeName);
1:67614ad: 			outFile.print(":");
1:67614ad: 			outFile.println(aLine);
1:67614ad: 			aLine = readFile.readLine();
1:67614ad: 		}
1:67614ad: 		readFile.close();
1:67614ad: 		} catch (IOException ioe) { 
1:67614ad: 			ioe.printStackTrace(System.out);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void addDiff(PrintWriter outFile, File inFile, String relativeName) {
1:67614ad: 		BufferedReader readFile = null;
1:67614ad: 		try {
1:67614ad: 		readFile = new BufferedReader(new FileReader(inFile));
1:67614ad: 		outFile.print("********* Diff file ");
1:67614ad: 		outFile.println(relativeName);
1:67614ad: 		String aLine = readFile.readLine();
1:67614ad: 		while (aLine!=null) {
1:67614ad: 			outFile.println(aLine);
1:67614ad: 			aLine = readFile.readLine();
1:67614ad: 		}
1:67614ad: 		readFile.close();
1:67614ad: 		} catch (IOException ioe) { 
1:67614ad: 			ioe.printStackTrace(System.out);
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void CollectPassFailStats (File dir,String relativeName) {
1:67614ad: 		// starting in specified dir, 
1:67614ad: 		String[] fileList = dir.list(fileFilter);
1:67614ad: 		int l = fileList.length;
1:67614ad: 		for (int i=0;i<l;i++) {
1:67614ad: 			String fileName = fileList[i];
1:67614ad: 			File file = new File(dir,fileName);
1:67614ad: 
1:67614ad: 			// collect all .pass files into suite_pass.txt (passFile)
1:67614ad: 			if (fileName.endsWith(".pass")) {
1:67614ad: 				addLines(passFile,file,relativeName+"/"+fileName);
1:67614ad: 			}
1:67614ad: 			// collect all .fail files into suite_fail.txt (failFile)
1:67614ad: 			else if (fileName.endsWith(".fail")) {
1:67614ad: 				addLines(failFile,file,relativeName+"/"+fileName);
1:67614ad: 			}
1:67614ad: 			// collect all .skip files into suite_skip.txt (skipFile)
1:67614ad: 			else if (fileName.endsWith(".skip")) {
1:67614ad: 				addLines(skipFile,file,relativeName+"/"+fileName);
1:67614ad: 			}
1:67614ad: 			// collect all .diff files into suite_diff.txt (diffFile)
1:67614ad: 			else if (fileName.endsWith(".diff")) {
1:67614ad: 				addDiff(diffFile,file,relativeName+"/"+fileName);
1:67614ad: 			}
1:67614ad: 
1:67614ad: 			// recurse on all directories
1:67614ad: 			else // it's a directory
1:67614ad: 			{
1:67614ad: 				String newDir;
1:67614ad: 				if (relativeName.length()>0)
1:67614ad: 					newDir = relativeName+"/"+fileName;
1:67614ad: 				else newDir = fileName;
1:67614ad: 				CollectPassFailStats(file, newDir);
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void CalculatePassFailStats() {
1:67614ad: 		// total tests run
1:67614ad: 		// #, % failures
1:67614ad: 		// #, % passed
1:67614ad: 		NumPass = CountLines (passFileName);
1:67614ad: 		NumFail = CountLines (failFileName);
1:67614ad: 		NumRun = NumPass+NumFail;
1:67614ad: 		NumSkip = CountLines (skipFileName);
1:af7509e: 		PercentPass = (int)Math.floor(100* ((double)NumPass/(double)NumRun));
1:af7509e: 		PercentFail = (int)Math.ceil(100* ((double)NumFail/(double)NumRun));
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static int CountLines(String fileName) {
1:67614ad: 		BufferedReader readFile = null;
1:67614ad: 		int line = 0;
1:67614ad: 		try {
1:67614ad: 		readFile = new BufferedReader(new FileReader(fileName));
1:67614ad: 		String aLine = readFile.readLine();
1:67614ad: 		while (aLine!=null) {
1:67614ad: 			line++;
1:67614ad: 			aLine = readFile.readLine();
1:67614ad: 		}
1:67614ad: 		readFile.close();
1:67614ad: 		} catch (IOException ioe) { 
1:67614ad: 			ioe.printStackTrace(System.out);
1:67614ad: 		}
1:67614ad: 		return line;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static void OutputFile(String fileName) {
1:67614ad: 		BufferedReader readFile = null;
1:67614ad: 		try {
1:67614ad: 		readFile = new BufferedReader(new FileReader(fileName));
1:67614ad: 		String aLine = readFile.readLine();
1:67614ad: 		while (aLine != null) {
1:67614ad: 			reportFile.println(aLine);
1:67614ad: 			aLine = readFile.readLine();
1:67614ad: 		}
1:67614ad: 		readFile.close();
1:67614ad: 		} catch (IOException ioe) { 
1:67614ad: 			ioe.printStackTrace(System.out);
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static PrintWriter setupFile(String fn) {
1:67614ad: 		File f = null;
1:67614ad: 		PrintWriter pw = null;
1:67614ad: 		try {
1:67614ad: 		f = new File(fn);
1:67614ad: 		if (f.exists()) {
1:67614ad: 			System.out.println("WARNING: removing "+fn);
1:67614ad: 			f.delete();
1:67614ad: 		}
1:67614ad: 		pw = new PrintWriter(new FileWriter(fn,true));
1:67614ad: 		} catch (IOException ioe) { 
1:67614ad: 			ioe.printStackTrace(System.out);
1:67614ad: 		}
1:67614ad: 		return pw;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public static void main(String[] args) {
1:67614ad: 		SuiteName = args[0];
1:67614ad: 		String jvmName = args[1];
1:67614ad: 		String javaCmd = args[2];
1:67614ad: 		String classpath = args[3];
1:67614ad: 		String framework = args[4];
1:67614ad: 		String processexec = args[5];
1:67614ad: 		boolean useprocess = true;
1:67614ad: 		if ( (processexec.toLowerCase()).startsWith("false") )
1:67614ad: 		    useprocess = false;
1:67614ad: 		String reportFileName = SuiteName+"_report.txt";
1:67614ad: 		reportFile = setupFile(reportFileName);
1:67614ad: 		reportFile.print("Generating report for RunSuite ");
1:67614ad: 		for (int i=0;i<args.length;i++)
1:67614ad: 			reportFile.print(args[i]+" ");
1:67614ad: 		reportFile.println();
1:67614ad: 		passFileName = SuiteName+"_pass.txt";
1:67614ad: 		failFileName = SuiteName+"_fail.txt";
1:67614ad: 		diffFileName = SuiteName+"_diff.txt";
1:67614ad: 		skipFileName = SuiteName+"_skip.txt";
1:67614ad: 		propFileName = SuiteName+"_prop.txt";
1:67614ad: 		passFile = setupFile(passFileName);
1:67614ad: 		failFile = setupFile(failFileName);
1:67614ad: 		diffFile = setupFile(diffFileName);
1:67614ad: 		skipFile = setupFile(skipFileName);
1:67614ad: 		propFile = setupFile(propFileName);
1:67614ad: 
1:67614ad: 		// sysinfo printout
1:67614ad: 		SysInfoLog sysLog = new SysInfoLog();
1:67614ad: 		try
1:67614ad: 		{
1:67614ad: 		    sysLog.exec(jvmName, javaCmd, classpath, framework, reportFile, useprocess);
1:67614ad: 		    //SysInfoMain.getMainInfo(reportFile,false,false);
1:67614ad: 		}
1:67614ad: 		catch (Exception e)
1:67614ad: 		{
1:67614ad: 		    System.out.println("SysInfoLog Exception: " + e.getMessage());
1:67614ad: 		}
1:67614ad: 	
1:67614ad: 		reportFile.println("Test environment information:");
1:67614ad: 		reportFile.print("COMMAND LINE STYLE: ");
1:67614ad: 		String jvm = System.getProperty("jvm");
1:67614ad: 		if (jvm == null) jvm="jdk13";
1:67614ad: 		reportFile.println(jvm);
1:67614ad: 		reportFile.print("TEST CANONS: ");
1:67614ad: 		String canondir = System.getProperty("canondir");
1:67614ad: 		if (canondir == null) canondir = "master";
1:67614ad: 		reportFile.println(canondir);
1:67614ad: 		reportFile.println(DASHLINE);
1:67614ad: 
1:67614ad: 		reportFile.println(DASHLINE);
1:67614ad: 		reportFile.println("Summary results:");
1:67614ad: 		CalculateRunLength();
1:67614ad: 		CollectPassFailStats();
1:67614ad: 		CollectProperties();
1:67614ad: 		passFile.close();
1:67614ad: 		failFile.close();
1:67614ad: 		skipFile.close();
1:67614ad: 		diffFile.close();
1:67614ad: 		propFile.close();
1:67614ad: 		CalculatePassFailStats();
1:67614ad: 		reportFile.println();
1:67614ad: 		reportFile.println("Test Run Started: "+TestStart);
1:67614ad: 		reportFile.println("Test Run Duration: "+TestDuration);
1:67614ad: 		reportFile.println();
1:67614ad: 		reportFile.println(NumRun+" Tests Run");
1:67614ad: 		if (PercentPass<10) reportFile.print(" ");
1:67614ad: 		reportFile.println(PercentPass+"% Pass ("+NumPass+" tests passed)");
1:67614ad: 		if (PercentFail<10) reportFile.print(" ");
1:67614ad: 		reportFile.println(PercentFail+"% Fail ("+NumFail+" tests failed)");
1:67614ad: 		reportFile.println(NumSkip + " Suites skipped");
1:67614ad: 		reportFile.println(DASHLINE);
1:67614ad: 
1:67614ad: 		if (NumFail>0) {
1:67614ad: 			reportFile.println("Failed tests in: "+failFileName);
1:67614ad: 			reportFile.println(DASHLINE);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		if (NumPass>0) {
1:67614ad: 			reportFile.println("Passed tests in: "+passFileName);
1:67614ad: 			reportFile.println(DASHLINE);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		if (NumSkip>0) {
1:67614ad: 			reportFile.println("Skipped suites in: "+skipFileName);
1:67614ad: 			reportFile.println(DASHLINE);
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		reportFile.println("System properties in: "+propFileName);
1:67614ad: 		reportFile.println(DASHLINE);
1:67614ad: 
1:67614ad: 		reportFile.println(DASHLINE);
1:67614ad: 		if (NumFail>0) {
1:67614ad: 			reportFile.println("Failure Details:");
1:67614ad: 			// cat each .diff file with full test name
1:67614ad: 			OutputFile(diffFileName);
1:67614ad: 		}
1:67614ad: 		else reportFile.println("No Failures.");
1:67614ad: 		reportFile.println(DASHLINE);
1:67614ad: 		reportFile.close();
1:67614ad: 
1:67614ad: 		System.out.println("Generated report: "+reportFileName);
1:67614ad: 	}
1:67614ad: 	
1:67614ad: 	static final String DASHLINE="------------------------------------------------------";
1:67614ad: 	static String passFileName, failFileName, diffFileName, skipFileName, propFileName;
1:67614ad: 	static PrintWriter passFile, failFile, diffFile, skipFile, propFile;
1:67614ad: 	static PrintWriter reportFile;
1:67614ad: 	static FilenameFilter fileFilter = new GRFileFilter();
1:67614ad: 	static int NumPass, NumFail, NumRun, NumSkip;
1:67614ad: 	static int PercentPass, PercentFail;
1:67614ad: 	static Timestamp TestStart;
1:67614ad: 	static Time TestDuration;
1:67614ad: 	static String SuiteName;
1:67614ad: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:af7509e
/////////////////////////////////////////////////////////////////////////
1: 		PercentPass = (int)Math.floor(100* ((double)NumPass/(double)NumRun));
1: 		PercentFail = (int)Math.ceil(100* ((double)NumFail/(double)NumRun));
commit:569dec4
/////////////////////////////////////////////////////////////////////////
0: 		PercentPass = (int)Math.ceil(100* ((double)NumPass/(double)NumRun));
0: 		PercentFail = (int)Math.floor(100* ((double)NumFail/(double)NumRun));
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /* 
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.Properties;
1: import java.util.Calendar;
1: import java.util.GregorianCalendar;
1: import java.io.File;
1: import java.io.FileReader;
1: import java.io.FilenameFilter;
1: import java.io.FileWriter;
1: import java.io.IOException;
1: import java.io.BufferedReader;
1: import java.io.PrintWriter;
1: import java.sql.Date;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: 
1: /**
1: 	Generate summary information from a RunSuite run.
1: 	Can be called separately, if given the suite name.
1: 	Will be called from RunSuite if System property genrep=true.
1: 
1: 	Condenses run information down, prints out result stats,
1: 	and shows details of failures (.diff files).
1: 
0: 	@author ames
1: **/
1: public class GenerateReport { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	static void CollectProperties () {
1: 		Properties ps = System.getProperties();
1: 		char[] newline = {' '};
1: 		propFile.println(PropertyUtil.sortProperties(ps,newline));
1: 	}
1: 
1: 	static void CalculateRunLength () {
1: 	// read suite.sum for start/end timestamps, 
1: 	// report start date and full duration of run
1: 		String odn = System.getProperty("outputdir");
1: 		if (odn==null) odn = System.getProperty("user.dir");
1: 
1: 		BufferedReader sumFile = null;
1: 		String firstLine = null;
1: 		String lastLine = null;
1: 		try {
1: 			sumFile = new BufferedReader(new FileReader(new File(new File(odn),SuiteName+".sum")));
1: 			firstLine = sumFile.readLine();
1: 			String aLine = firstLine;
1: 			while (aLine!=null) {
1: 				lastLine = aLine;
1: 				aLine = sumFile.readLine();
1: 			}
1: 			sumFile.close();
1: 		} catch (IOException ioe) { 
1: 			ioe.printStackTrace(System.out);
1: 		}
1: 
1: 		// have firstLine and lastLine.
1: 		// format is: 
1: 		// ******* Start Suite: <suite> <timestamp> *******
1: 		// ******* End Suite: <suite> <timestamp> *******
1: 		int tsStart = 22+SuiteName.length();
1: 		int tsEnd = firstLine.length()-8;
1: 		TestStart = Timestamp.valueOf(firstLine.substring(tsStart,tsEnd));
1: 		// last line is two shorter
1: 		tsStart-=2; tsEnd-=2;
1: 		Timestamp testEnd = Timestamp.valueOf(lastLine.substring(tsStart,tsEnd));
1: 
1: 		long testLen = testEnd.getTime() - TestStart.getTime();
1: 		// Time isn't really a duration, so we have to set the fields
1: 		int sec = (int) (testLen / 1000);
1: 		int min = sec / 60;
1: 		int hr = min / 60;
1: 		sec = sec - (min*60); // adjust for part removed
1: 		min = min - (hr*60); // adjust for part removed
1: 		Calendar cal = new GregorianCalendar();
1: 		cal.set(Calendar.HOUR_OF_DAY,hr);
1: 		cal.set(Calendar.MINUTE,min);
1: 		cal.set(Calendar.SECOND,sec);
1: 		TestDuration = new Time(cal.getTime().getTime());
1: 	}
1: 
1: 	static void CollectPassFailStats () {
1: 		// need to ensure outputdir is set...
1: 		String odn = System.getProperty("outputdir");
1: 		if (odn==null) odn = System.getProperty("user.dir");
1: 		CollectPassFailStats(new File(odn),"");
1: 	}
1: 
1: 	static void addLines(PrintWriter outFile, File inFile, String relativeName) {
1: 		BufferedReader readFile = null;
1: 		try {
1: 		readFile = new BufferedReader(new FileReader(inFile));
1: 		String aLine = readFile.readLine();
1: 		while (aLine!=null) {
1: 			outFile.print(relativeName);
1: 			outFile.print(":");
1: 			outFile.println(aLine);
1: 			aLine = readFile.readLine();
1: 		}
1: 		readFile.close();
1: 		} catch (IOException ioe) { 
1: 			ioe.printStackTrace(System.out);
1: 		}
1: 
1: 	}
1: 
1: 	static void addDiff(PrintWriter outFile, File inFile, String relativeName) {
1: 		BufferedReader readFile = null;
1: 		try {
1: 		readFile = new BufferedReader(new FileReader(inFile));
1: 		outFile.print("********* Diff file ");
1: 		outFile.println(relativeName);
1: 		String aLine = readFile.readLine();
1: 		while (aLine!=null) {
1: 			outFile.println(aLine);
1: 			aLine = readFile.readLine();
1: 		}
1: 		readFile.close();
1: 		} catch (IOException ioe) { 
1: 			ioe.printStackTrace(System.out);
1: 		}
1: 	}
1: 
1: 	static void CollectPassFailStats (File dir,String relativeName) {
1: 		// starting in specified dir, 
1: 		String[] fileList = dir.list(fileFilter);
1: 		int l = fileList.length;
1: 		for (int i=0;i<l;i++) {
1: 			String fileName = fileList[i];
1: 			File file = new File(dir,fileName);
1: 
1: 			// collect all .pass files into suite_pass.txt (passFile)
1: 			if (fileName.endsWith(".pass")) {
1: 				addLines(passFile,file,relativeName+"/"+fileName);
1: 			}
1: 			// collect all .fail files into suite_fail.txt (failFile)
1: 			else if (fileName.endsWith(".fail")) {
1: 				addLines(failFile,file,relativeName+"/"+fileName);
1: 			}
1: 			// collect all .skip files into suite_skip.txt (skipFile)
1: 			else if (fileName.endsWith(".skip")) {
1: 				addLines(skipFile,file,relativeName+"/"+fileName);
1: 			}
1: 			// collect all .diff files into suite_diff.txt (diffFile)
1: 			else if (fileName.endsWith(".diff")) {
1: 				addDiff(diffFile,file,relativeName+"/"+fileName);
1: 			}
1: 
1: 			// recurse on all directories
1: 			else // it's a directory
1: 			{
1: 				String newDir;
1: 				if (relativeName.length()>0)
1: 					newDir = relativeName+"/"+fileName;
1: 				else newDir = fileName;
1: 				CollectPassFailStats(file, newDir);
1: 			}
1: 		}
1: 	}
1: 
1: 	static void CalculatePassFailStats() {
1: 		// total tests run
1: 		// #, % failures
1: 		// #, % passed
1: 		NumPass = CountLines (passFileName);
1: 		NumFail = CountLines (failFileName);
1: 		NumRun = NumPass+NumFail;
1: 		NumSkip = CountLines (skipFileName);
0: 		PercentPass = (int)Math.round(100* ((double)NumPass/(double)NumRun));
0: 		PercentFail = (int)Math.round(100* ((double)NumFail/(double)NumRun));
1: 	}
1: 
1: 	static int CountLines(String fileName) {
1: 		BufferedReader readFile = null;
1: 		int line = 0;
1: 		try {
1: 		readFile = new BufferedReader(new FileReader(fileName));
1: 		String aLine = readFile.readLine();
1: 		while (aLine!=null) {
1: 			line++;
1: 			aLine = readFile.readLine();
1: 		}
1: 		readFile.close();
1: 		} catch (IOException ioe) { 
1: 			ioe.printStackTrace(System.out);
1: 		}
1: 		return line;
1: 	}
1: 
1: 	static void OutputFile(String fileName) {
1: 		BufferedReader readFile = null;
1: 		try {
1: 		readFile = new BufferedReader(new FileReader(fileName));
1: 		String aLine = readFile.readLine();
1: 		while (aLine != null) {
1: 			reportFile.println(aLine);
1: 			aLine = readFile.readLine();
1: 		}
1: 		readFile.close();
1: 		} catch (IOException ioe) { 
1: 			ioe.printStackTrace(System.out);
1: 		}
1: 	}
1: 
1: 	static PrintWriter setupFile(String fn) {
1: 		File f = null;
1: 		PrintWriter pw = null;
1: 		try {
1: 		f = new File(fn);
1: 		if (f.exists()) {
1: 			System.out.println("WARNING: removing "+fn);
1: 			f.delete();
1: 		}
1: 		pw = new PrintWriter(new FileWriter(fn,true));
1: 		} catch (IOException ioe) { 
1: 			ioe.printStackTrace(System.out);
1: 		}
1: 		return pw;
1: 	}
1: 
1: 	public static void main(String[] args) {
1: 		SuiteName = args[0];
1: 		String jvmName = args[1];
1: 		String javaCmd = args[2];
1: 		String classpath = args[3];
1: 		String framework = args[4];
1: 		String processexec = args[5];
1: 		boolean useprocess = true;
1: 		if ( (processexec.toLowerCase()).startsWith("false") )
1: 		    useprocess = false;
1: 		String reportFileName = SuiteName+"_report.txt";
1: 		reportFile = setupFile(reportFileName);
1: 		reportFile.print("Generating report for RunSuite ");
1: 		for (int i=0;i<args.length;i++)
1: 			reportFile.print(args[i]+" ");
1: 		reportFile.println();
1: 		passFileName = SuiteName+"_pass.txt";
1: 		failFileName = SuiteName+"_fail.txt";
1: 		diffFileName = SuiteName+"_diff.txt";
1: 		skipFileName = SuiteName+"_skip.txt";
1: 		propFileName = SuiteName+"_prop.txt";
1: 		passFile = setupFile(passFileName);
1: 		failFile = setupFile(failFileName);
1: 		diffFile = setupFile(diffFileName);
1: 		skipFile = setupFile(skipFileName);
1: 		propFile = setupFile(propFileName);
1: 
1: 		// sysinfo printout
1: 		SysInfoLog sysLog = new SysInfoLog();
1: 		try
1: 		{
1: 		    sysLog.exec(jvmName, javaCmd, classpath, framework, reportFile, useprocess);
1: 		    //SysInfoMain.getMainInfo(reportFile,false,false);
1: 		}
1: 		catch (Exception e)
1: 		{
1: 		    System.out.println("SysInfoLog Exception: " + e.getMessage());
1: 		}
1: 	
1: 		reportFile.println("Test environment information:");
1: 		reportFile.print("COMMAND LINE STYLE: ");
1: 		String jvm = System.getProperty("jvm");
1: 		if (jvm == null) jvm="jdk13";
1: 		reportFile.println(jvm);
1: 		reportFile.print("TEST CANONS: ");
1: 		String canondir = System.getProperty("canondir");
1: 		if (canondir == null) canondir = "master";
1: 		reportFile.println(canondir);
1: 		reportFile.println(DASHLINE);
1: 
1: 		reportFile.println(DASHLINE);
1: 		reportFile.println("Summary results:");
1: 		CalculateRunLength();
1: 		CollectPassFailStats();
1: 		CollectProperties();
1: 		passFile.close();
1: 		failFile.close();
1: 		skipFile.close();
1: 		diffFile.close();
1: 		propFile.close();
1: 		CalculatePassFailStats();
1: 		reportFile.println();
1: 		reportFile.println("Test Run Started: "+TestStart);
1: 		reportFile.println("Test Run Duration: "+TestDuration);
1: 		reportFile.println();
1: 		reportFile.println(NumRun+" Tests Run");
1: 		if (PercentPass<10) reportFile.print(" ");
1: 		reportFile.println(PercentPass+"% Pass ("+NumPass+" tests passed)");
1: 		if (PercentFail<10) reportFile.print(" ");
1: 		reportFile.println(PercentFail+"% Fail ("+NumFail+" tests failed)");
1: 		reportFile.println(NumSkip + " Suites skipped");
1: 		reportFile.println(DASHLINE);
1: 
1: 		if (NumFail>0) {
1: 			reportFile.println("Failed tests in: "+failFileName);
1: 			reportFile.println(DASHLINE);
1: 		}
1: 
1: 		if (NumPass>0) {
1: 			reportFile.println("Passed tests in: "+passFileName);
1: 			reportFile.println(DASHLINE);
1: 		}
1: 
1: 		if (NumSkip>0) {
1: 			reportFile.println("Skipped suites in: "+skipFileName);
1: 			reportFile.println(DASHLINE);
1: 		}
1: 
1: 		reportFile.println("System properties in: "+propFileName);
1: 		reportFile.println(DASHLINE);
1: 
1: 		reportFile.println(DASHLINE);
1: 		if (NumFail>0) {
1: 			reportFile.println("Failure Details:");
1: 			// cat each .diff file with full test name
1: 			OutputFile(diffFileName);
1: 		}
1: 		else reportFile.println("No Failures.");
1: 		reportFile.println(DASHLINE);
1: 		reportFile.close();
1: 
1: 		System.out.println("Generated report: "+reportFileName);
1: 	}
1: 	
1: 	static final String DASHLINE="------------------------------------------------------";
1: 	static String passFileName, failFileName, diffFileName, skipFileName, propFileName;
1: 	static PrintWriter passFile, failFile, diffFile, skipFile, propFile;
1: 	static PrintWriter reportFile;
1: 	static FilenameFilter fileFilter = new GRFileFilter();
1: 	static int NumPass, NumFail, NumRun, NumSkip;
1: 	static int PercentPass, PercentFail;
1: 	static Timestamp TestStart;
1: 	static Time TestDuration;
1: 	static String SuiteName;
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /* 
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.GenerateReport
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.util.Properties;
0: import java.util.Calendar;
0: import java.util.GregorianCalendar;
0: import java.io.File;
0: import java.io.FileReader;
0: import java.io.FilenameFilter;
0: import java.io.FileWriter;
0: import java.io.IOException;
0: import java.io.BufferedReader;
0: import java.io.PrintWriter;
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
1: 
0: /**
0: 	Generate summary information from a RunSuite run.
0: 	Can be called separately, if given the suite name.
0: 	Will be called from RunSuite if System property genrep=true.
1: 
0: 	Condenses run information down, prints out result stats,
0: 	and shows details of failures (.diff files).
1: 
0: 	@author ames
0: **/
0: public class GenerateReport {
1: 
0: 	static void CollectProperties () {
0: 		Properties ps = System.getProperties();
0: 		char[] newline = {' '};
0: 		propFile.println(PropertyUtil.sortProperties(ps,newline));
0: 	}
1: 
0: 	static void CalculateRunLength () {
0: 	// read suite.sum for start/end timestamps, 
0: 	// report start date and full duration of run
0: 		String odn = System.getProperty("outputdir");
0: 		if (odn==null) odn = System.getProperty("user.dir");
1: 
0: 		BufferedReader sumFile = null;
0: 		String firstLine = null;
0: 		String lastLine = null;
0: 		try {
0: 			sumFile = new BufferedReader(new FileReader(new File(new File(odn),SuiteName+".sum")));
0: 			firstLine = sumFile.readLine();
0: 			String aLine = firstLine;
0: 			while (aLine!=null) {
0: 				lastLine = aLine;
0: 				aLine = sumFile.readLine();
0: 			}
0: 			sumFile.close();
0: 		} catch (IOException ioe) { 
0: 			ioe.printStackTrace(System.out);
0: 		}
1: 
0: 		// have firstLine and lastLine.
0: 		// format is: 
0: 		// ******* Start Suite: <suite> <timestamp> *******
0: 		// ******* End Suite: <suite> <timestamp> *******
0: 		int tsStart = 22+SuiteName.length();
0: 		int tsEnd = firstLine.length()-8;
0: 		TestStart = Timestamp.valueOf(firstLine.substring(tsStart,tsEnd));
0: 		// last line is two shorter
0: 		tsStart-=2; tsEnd-=2;
0: 		Timestamp testEnd = Timestamp.valueOf(lastLine.substring(tsStart,tsEnd));
1: 
0: 		long testLen = testEnd.getTime() - TestStart.getTime();
0: 		// Time isn't really a duration, so we have to set the fields
0: 		int sec = (int) (testLen / 1000);
0: 		int min = sec / 60;
0: 		int hr = min / 60;
0: 		sec = sec - (min*60); // adjust for part removed
0: 		min = min - (hr*60); // adjust for part removed
0: 		Calendar cal = new GregorianCalendar();
0: 		cal.set(Calendar.HOUR_OF_DAY,hr);
0: 		cal.set(Calendar.MINUTE,min);
0: 		cal.set(Calendar.SECOND,sec);
0: 		TestDuration = new Time(cal.getTime().getTime());
0: 	}
1: 
0: 	static void CollectPassFailStats () {
0: 		// need to ensure outputdir is set...
0: 		String odn = System.getProperty("outputdir");
0: 		if (odn==null) odn = System.getProperty("user.dir");
0: 		CollectPassFailStats(new File(odn),"");
0: 	}
1: 
0: 	static void addLines(PrintWriter outFile, File inFile, String relativeName) {
0: 		BufferedReader readFile = null;
0: 		try {
0: 		readFile = new BufferedReader(new FileReader(inFile));
0: 		String aLine = readFile.readLine();
0: 		while (aLine!=null) {
0: 			outFile.print(relativeName);
0: 			outFile.print(":");
0: 			outFile.println(aLine);
0: 			aLine = readFile.readLine();
0: 		}
0: 		readFile.close();
0: 		} catch (IOException ioe) { 
0: 			ioe.printStackTrace(System.out);
0: 		}
1: 
0: 	}
1: 
0: 	static void addDiff(PrintWriter outFile, File inFile, String relativeName) {
0: 		BufferedReader readFile = null;
0: 		try {
0: 		readFile = new BufferedReader(new FileReader(inFile));
0: 		outFile.print("********* Diff file ");
0: 		outFile.println(relativeName);
0: 		String aLine = readFile.readLine();
0: 		while (aLine!=null) {
0: 			outFile.println(aLine);
0: 			aLine = readFile.readLine();
0: 		}
0: 		readFile.close();
0: 		} catch (IOException ioe) { 
0: 			ioe.printStackTrace(System.out);
0: 		}
0: 	}
1: 
0: 	static void CollectPassFailStats (File dir,String relativeName) {
0: 		// starting in specified dir, 
0: 		String[] fileList = dir.list(fileFilter);
0: 		int l = fileList.length;
0: 		for (int i=0;i<l;i++) {
0: 			String fileName = fileList[i];
0: 			File file = new File(dir,fileName);
1: 
0: 			// collect all .pass files into suite_pass.txt (passFile)
0: 			if (fileName.endsWith(".pass")) {
0: 				addLines(passFile,file,relativeName+"/"+fileName);
0: 			}
0: 			// collect all .fail files into suite_fail.txt (failFile)
0: 			else if (fileName.endsWith(".fail")) {
0: 				addLines(failFile,file,relativeName+"/"+fileName);
0: 			}
0: 			// collect all .skip files into suite_skip.txt (skipFile)
0: 			else if (fileName.endsWith(".skip")) {
0: 				addLines(skipFile,file,relativeName+"/"+fileName);
0: 			}
0: 			// collect all .diff files into suite_diff.txt (diffFile)
0: 			else if (fileName.endsWith(".diff")) {
0: 				addDiff(diffFile,file,relativeName+"/"+fileName);
0: 			}
1: 
0: 			// recurse on all directories
0: 			else // it's a directory
0: 			{
0: 				String newDir;
0: 				if (relativeName.length()>0)
0: 					newDir = relativeName+"/"+fileName;
0: 				else newDir = fileName;
0: 				CollectPassFailStats(file, newDir);
0: 			}
0: 		}
0: 	}
1: 
0: 	static void CalculatePassFailStats() {
0: 		// total tests run
0: 		// #, % failures
0: 		// #, % passed
0: 		NumPass = CountLines (passFileName);
0: 		NumFail = CountLines (failFileName);
0: 		NumRun = NumPass+NumFail;
0: 		NumSkip = CountLines (skipFileName);
0: 		PercentPass = (int)Math.round(100* ((double)NumPass/(double)NumRun));
0: 		PercentFail = (int)Math.round(100* ((double)NumFail/(double)NumRun));
0: 	}
1: 
0: 	static int CountLines(String fileName) {
0: 		BufferedReader readFile = null;
0: 		int line = 0;
0: 		try {
0: 		readFile = new BufferedReader(new FileReader(fileName));
0: 		String aLine = readFile.readLine();
0: 		while (aLine!=null) {
0: 			line++;
0: 			aLine = readFile.readLine();
0: 		}
0: 		readFile.close();
0: 		} catch (IOException ioe) { 
0: 			ioe.printStackTrace(System.out);
0: 		}
0: 		return line;
0: 	}
1: 
0: 	static void OutputFile(String fileName) {
0: 		BufferedReader readFile = null;
0: 		try {
0: 		readFile = new BufferedReader(new FileReader(fileName));
0: 		String aLine = readFile.readLine();
0: 		while (aLine != null) {
0: 			reportFile.println(aLine);
0: 			aLine = readFile.readLine();
0: 		}
0: 		readFile.close();
0: 		} catch (IOException ioe) { 
0: 			ioe.printStackTrace(System.out);
0: 		}
0: 	}
1: 
0: 	static PrintWriter setupFile(String fn) {
0: 		File f = null;
0: 		PrintWriter pw = null;
0: 		try {
0: 		f = new File(fn);
0: 		if (f.exists()) {
0: 			System.out.println("WARNING: removing "+fn);
0: 			f.delete();
0: 		}
0: 		pw = new PrintWriter(new FileWriter(fn,true));
0: 		} catch (IOException ioe) { 
0: 			ioe.printStackTrace(System.out);
0: 		}
0: 		return pw;
0: 	}
1: 
0: 	public static void main(String[] args) {
0: 		SuiteName = args[0];
0: 		String jvmName = args[1];
0: 		String javaCmd = args[2];
0: 		String classpath = args[3];
0: 		String framework = args[4];
0: 		String processexec = args[5];
0: 		boolean useprocess = true;
0: 		if ( (processexec.toLowerCase()).startsWith("false") )
0: 		    useprocess = false;
0: 		String reportFileName = SuiteName+"_report.txt";
0: 		reportFile = setupFile(reportFileName);
0: 		reportFile.print("Generating report for RunSuite ");
0: 		for (int i=0;i<args.length;i++)
0: 			reportFile.print(args[i]+" ");
0: 		reportFile.println();
0: 		passFileName = SuiteName+"_pass.txt";
0: 		failFileName = SuiteName+"_fail.txt";
0: 		diffFileName = SuiteName+"_diff.txt";
0: 		skipFileName = SuiteName+"_skip.txt";
0: 		propFileName = SuiteName+"_prop.txt";
0: 		passFile = setupFile(passFileName);
0: 		failFile = setupFile(failFileName);
0: 		diffFile = setupFile(diffFileName);
0: 		skipFile = setupFile(skipFileName);
0: 		propFile = setupFile(propFileName);
1: 
0: 		// sysinfo printout
0: 		SysInfoLog sysLog = new SysInfoLog();
0: 		try
0: 		{
0: 		    sysLog.exec(jvmName, javaCmd, classpath, framework, reportFile, useprocess);
0: 		    //SysInfoMain.getMainInfo(reportFile,false,false);
0: 		}
0: 		catch (Exception e)
0: 		{
0: 		    System.out.println("SysInfoLog Exception: " + e.getMessage());
0: 		}
1: 	
0: 		reportFile.println("Test environment information:");
0: 		reportFile.print("COMMAND LINE STYLE: ");
0: 		String jvm = System.getProperty("jvm");
0: 		if (jvm == null) jvm="jdk13";
0: 		reportFile.println(jvm);
0: 		reportFile.print("TEST CANONS: ");
0: 		String canondir = System.getProperty("canondir");
0: 		if (canondir == null) canondir = "master";
0: 		reportFile.println(canondir);
0: 		reportFile.println(DASHLINE);
1: 
0: 		reportFile.println(DASHLINE);
0: 		reportFile.println("Summary results:");
0: 		CalculateRunLength();
0: 		CollectPassFailStats();
0: 		CollectProperties();
0: 		passFile.close();
0: 		failFile.close();
0: 		skipFile.close();
0: 		diffFile.close();
0: 		propFile.close();
0: 		CalculatePassFailStats();
0: 		reportFile.println();
0: 		reportFile.println("Test Run Started: "+TestStart);
0: 		reportFile.println("Test Run Duration: "+TestDuration);
0: 		reportFile.println();
0: 		reportFile.println(NumRun+" Tests Run");
0: 		if (PercentPass<10) reportFile.print(" ");
0: 		reportFile.println(PercentPass+"% Pass ("+NumPass+" tests passed)");
0: 		if (PercentFail<10) reportFile.print(" ");
0: 		reportFile.println(PercentFail+"% Fail ("+NumFail+" tests failed)");
0: 		reportFile.println(NumSkip + " Suites skipped");
0: 		reportFile.println(DASHLINE);
1: 
0: 		if (NumFail>0) {
0: 			reportFile.println("Failed tests in: "+failFileName);
0: 			reportFile.println(DASHLINE);
0: 		}
1: 
0: 		if (NumPass>0) {
0: 			reportFile.println("Passed tests in: "+passFileName);
0: 			reportFile.println(DASHLINE);
0: 		}
1: 
0: 		if (NumSkip>0) {
0: 			reportFile.println("Skipped suites in: "+skipFileName);
0: 			reportFile.println(DASHLINE);
0: 		}
1: 
0: 		reportFile.println("System properties in: "+propFileName);
0: 		reportFile.println(DASHLINE);
1: 
0: 		reportFile.println(DASHLINE);
0: 		if (NumFail>0) {
0: 			reportFile.println("Failure Details:");
0: 			// cat each .diff file with full test name
0: 			OutputFile(diffFileName);
0: 		}
0: 		else reportFile.println("No Failures.");
0: 		reportFile.println(DASHLINE);
0: 		reportFile.close();
1: 
0: 		System.out.println("Generated report: "+reportFileName);
0: 	}
1: 	
0: 	static final String DASHLINE="------------------------------------------------------";
0: 	static String passFileName, failFileName, diffFileName, skipFileName, propFileName;
0: 	static PrintWriter passFile, failFile, diffFile, skipFile, propFile;
0: 	static PrintWriter reportFile;
0: 	static FilenameFilter fileFilter = new GRFileFilter();
0: 	static int NumPass, NumFail, NumRun, NumSkip;
0: 	static int PercentPass, PercentFail;
0: 	static Timestamp TestStart;
0: 	static Time TestDuration;
0: 	static String SuiteName;
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.GenerateReport
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: public class GenerateReport {
============================================================================