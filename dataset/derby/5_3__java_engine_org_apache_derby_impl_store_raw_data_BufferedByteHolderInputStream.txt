1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: public abstract class BufferedByteHolderInputStream
1:eac0369: extends ByteHolderInputStream
1:eac0369: {
1:eac0369: 	public BufferedByteHolderInputStream(ByteHolder bh) {
1:eac0369: 		super(bh);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public abstract void fillByteHolder() throws IOException;
1:eac0369: 
1:eac0369: 	public int read() throws IOException
1:eac0369: 	{
1:eac0369: 		fillByteHolder();
1:eac0369: 		return super.read();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int read(byte b[], int off, int len)
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		fillByteHolder();
1:eac0369: 		return super.read(b,off,len);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long skip(long count) throws IOException
1:eac0369: 	{
1:71d73dd: 		long bytesSkipped = 0L;
1:eac0369: 		while (bytesSkipped < count) {
1:eac0369: 			fillByteHolder();
1:71d73dd: 			long skipped = super.skip(count - bytesSkipped);
1:71d73dd: 			if (skipped <= 0L) {
1:71d73dd: 				break;
1:71d73dd: 			}
1:71d73dd: 			bytesSkipped += skipped;
1:eac0369: 		}
1:eac0369: 		return bytesSkipped;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int available() throws IOException
1:eac0369: 	{
1:eac0369: 		fillByteHolder();
1:eac0369: 		return super.available(); 
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:71d73dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		long bytesSkipped = 0L;
1: 			long skipped = super.skip(count - bytesSkipped);
1: 			if (skipped <= 0L) {
1: 				break;
1: 			}
1: 			bytesSkipped += skipped;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import java.io.InputStream;
1: import java.io.IOException;
1: 
1: public abstract class BufferedByteHolderInputStream
1: extends ByteHolderInputStream
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	public BufferedByteHolderInputStream(ByteHolder bh) {
1: 		super(bh);
1: 	}
1: 
1: 	public abstract void fillByteHolder() throws IOException;
1: 
1: 	public int read() throws IOException
1: 	{
1: 		fillByteHolder();
1: 		return super.read();
1: 	}
1: 
1: 	public int read(byte b[], int off, int len)
1: 		 throws IOException
1: 	{
1: 		fillByteHolder();
1: 		return super.read(b,off,len);
1: 	}
1: 
1: 	public long skip(long count) throws IOException
1: 	{
0: 		int bytesSkipped = 0;
1: 		while (bytesSkipped < count) {
1: 			fillByteHolder();
0: 			bytesSkipped += super.skip(count - bytesSkipped);
1: 		}
1: 		return bytesSkipped;
1: 	}
1: 
1: 	public int available() throws IOException
1: 	{
1: 		fillByteHolder();
1: 		return super.available(); 
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import java.io.InputStream;
0: import java.io.IOException;
0: 
0: public abstract class BufferedByteHolderInputStream
0: extends ByteHolderInputStream
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	public BufferedByteHolderInputStream(ByteHolder bh) {
0: 		super(bh);
0: 	}
0: 
0: 	public abstract void fillByteHolder() throws IOException;
0: 
0: 	public int read() throws IOException
0: 	{
0: 		fillByteHolder();
0: 		return super.read();
0: 	}
0: 
0: 	public int read(byte b[], int off, int len)
0: 		 throws IOException
0: 	{
0: 		fillByteHolder();
0: 		return super.read(b,off,len);
0: 	}
0: 
0: 	public long skip(long count) throws IOException
0: 	{
0: 		int bytesSkipped = 0;
0: 		while (bytesSkipped < count) {
0: 			fillByteHolder();
0: 			bytesSkipped += super.skip(count - bytesSkipped);
0: 		}
0: 		return bytesSkipped;
0: 	}
0: 
0: 	public int available() throws IOException
0: 	{
0: 		fillByteHolder();
0: 		return super.available(); 
0: 	}
0: }
============================================================================