1:c8603c4: /*
1:c8603c4: 
1:c8603c4:    Derby - Class org.apache.derby.impl.sql.execute.UserDefinedAggregator
1:c8603c4: 
1:c8603c4:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c8603c4:    contributor license agreements.  See the NOTICE file distributed with
1:c8603c4:    this work for additional information regarding copyright ownership.
1:c8603c4:    The ASF licenses this file to you under the Apache License, Version 2.0
1:c8603c4:    (the "License"); you may not use this file except in compliance with
1:c8603c4:    the License.  You may obtain a copy of the License at
1:c8603c4: 
1:c8603c4:       http://www.apache.org/licenses/LICENSE-2.0
1:c8603c4: 
1:c8603c4:    Unless required by applicable law or agreed to in writing, software
1:c8603c4:    distributed under the License is distributed on an "AS IS" BASIS,
1:c8603c4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8603c4:    See the License for the specific language governing permissions and
1:c8603c4:    limitations under the License.
1:c8603c4: 
1:c8603c4:  */
1:c8603c4: 
1:c8603c4: package org.apache.derby.impl.sql.execute;
1:c8603c4: 
1:c8603c4: import java.io.ObjectOutput;
1:c8603c4: import java.io.ObjectInput;
1:c8603c4: import java.io.IOException;
1:c8603c4: import java.sql.SQLException;
1:c8603c4: 
1:c8603c4: import org.apache.derby.agg.Aggregator;
1:c8603c4: 
1:c8603c4: import org.apache.derby.iapi.services.monitor.Monitor;
1:c8603c4: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:c8603c4: import org.apache.derby.iapi.error.StandardException;
1:c8603c4: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:c8603c4: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:c8603c4: import org.apache.derby.iapi.types.DataValueDescriptor;
1:c8603c4: import org.apache.derby.iapi.types.TypeId;
1:c8603c4: 
1:c8603c4: import org.apache.derby.iapi.services.i18n.MessageService;
1:c8603c4: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:c8603c4: import org.apache.derby.iapi.services.loader.ClassFactory;
1:c8603c4: import org.apache.derby.iapi.reference.MessageId;
1:c8603c4: import org.apache.derby.iapi.reference.SQLState;
1:c8603c4: 
1:c8603c4: /**
1:c8603c4: 	Aggregator for user-defined aggregates. Wraps the application-supplied
1:c8603c4:     implementation of org.apache.derby.agg.Aggregator.
1:c8603c4:  */
1:c8603c4: public final class UserDefinedAggregator  implements ExecAggregator
1:c8603c4: {
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // CONSTANTS
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4:     private static final int FIRST_VERSION = 0;
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // STATE
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4:     private Aggregator  _aggregator;
1:c8603c4:     private DataTypeDescriptor  _resultType;
1:c8603c4:     private boolean     _eliminatedNulls;
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // CONSTRUCTOR
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4:     /** 0-arg constructor for Formatable interface */
1:c8603c4:     public  UserDefinedAggregator() {}
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // ExecAggregator BEHAVIOR
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4: 	public void setup( ClassFactory classFactory, String aggregateName, DataTypeDescriptor resultType )
1:c8603c4: 	{
1:c8603c4:         try {
1:c8603c4:             setup( classFactory.loadApplicationClass( aggregateName ), resultType );
1:c8603c4:         }
1:c8603c4:         catch (ClassNotFoundException cnfe) { logAggregatorInstantiationError( aggregateName, cnfe ); }
1:c8603c4: 	}
1:c8603c4:     /** Initialization logic shared by setup() and newAggregator() */
1:4469400:     private void    setup( Class<?> udaClass, DataTypeDescriptor resultType )
1:c8603c4:     {
1:c8603c4:         String  aggregateName = udaClass.getName();
1:c8603c4:         
1:c8603c4:         try {
1:4469400:             _aggregator = (Aggregator) udaClass.getConstructor().newInstance();
1:c8603c4:             _aggregator.init();
1:c8603c4:         }
1:c8603c4:         catch (InstantiationException ie) { logAggregatorInstantiationError( aggregateName, ie ); }
1:c8603c4:         catch (IllegalAccessException iae) { logAggregatorInstantiationError( aggregateName, iae ); }
1:4469400:         catch (NoSuchMethodException nsme) { logAggregatorInstantiationError( aggregateName, nsme ); }
1:4469400:         catch (java.lang.reflect.InvocationTargetException ite) { logAggregatorInstantiationError( aggregateName, ite ); }
1:c8603c4: 
1:c8603c4:         _resultType = resultType;
1:c8603c4:     }
1:c8603c4: 
1:c8603c4: 	public boolean didEliminateNulls() { return _eliminatedNulls; }
1:c8603c4: 
1:9d5bd0e:     @SuppressWarnings("unchecked")
1:c8603c4: 	public void accumulate( DataValueDescriptor addend, Object ga ) 
1:c8603c4: 		throws StandardException
1:c8603c4: 	{
1:c8603c4: 		if ( (addend == null) || addend.isNull() )
1:c8603c4:         {
1:c8603c4: 			_eliminatedNulls = true;
1:c8603c4: 			return;
1:c8603c4: 		}
1:c8603c4: 
1:c8603c4:         Object  value = addend.getObject();
1:c8603c4: 
1:c8603c4:         _aggregator.accumulate( value );
1:c8603c4: 	}
1:c8603c4: 
1:9d5bd0e:     @SuppressWarnings("unchecked")
1:c8603c4: 	public void merge(ExecAggregator addend)
1:c8603c4: 		throws StandardException
1:c8603c4: 	{
1:d389f7d:         UserDefinedAggregator  other = (UserDefinedAggregator) addend;
1:c8603c4: 
1:d389f7d:         _aggregator.merge( other._aggregator );
1:c8603c4: 	}
1:c8603c4: 
1:c8603c4: 	/**
1:c8603c4: 	 * Return the result of the aggregation. .
1:c8603c4: 	 *
1:c8603c4: 	 * @return the aggregated result (could be a Java null).
1:c8603c4: 	 */
1:c8603c4: 	public DataValueDescriptor getResult() throws StandardException
1:c8603c4: 	{
1:c8603c4:         Object  javaReturnValue = _aggregator.terminate();
1:c8603c4: 
1:c8603c4:         if ( javaReturnValue == null ) { return null; }
1:c8603c4: 
1:c8603c4:         DataValueDescriptor dvd = _resultType.getNull();
1:c8603c4:         dvd.setObjectForCast( javaReturnValue, true, javaReturnValue.getClass().getName() );
1:c8603c4: 
1:c8603c4:         return dvd;
1:c8603c4: 	}
1:c8603c4: 
1:c8603c4: 	/**
1:c8603c4: 	 */
1:c8603c4: 	public ExecAggregator newAggregator()
1:c8603c4: 	{
1:c8603c4: 		UserDefinedAggregator   uda = new UserDefinedAggregator();
1:c8603c4: 
1:c8603c4:         uda.setup( _aggregator.getClass(), _resultType );
1:c8603c4: 
1:c8603c4:         return uda;
1:c8603c4: 	}
1:c8603c4: 
1:c8603c4: 	/////////////////////////////////////////////////////////////
1:c8603c4: 	// 
1:c8603c4: 	// FORMATABLE INTERFACE
1:c8603c4: 	// 
1:c8603c4: 	/////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4: 	/** 
1:c8603c4: 	 *
1:c8603c4: 	 * @exception IOException on error
1:c8603c4: 	 */
1:c8603c4: 	public void writeExternal(ObjectOutput out) throws IOException
1:c8603c4: 	{
1:c8603c4: 		out.writeInt( FIRST_VERSION );
1:c8603c4:         
1:c8603c4:         out.writeObject( _aggregator );
1:c8603c4:         out.writeObject( _resultType );
1:c8603c4:         out.writeBoolean( _eliminatedNulls );
1:c8603c4: 	}
1:c8603c4: 
1:c8603c4: 	/** 
1:c8603c4: 	 * @see java.io.Externalizable#readExternal 
1:c8603c4: 	 *
1:c8603c4: 	 * @exception IOException on error
1:c8603c4: 	 */
1:c8603c4: 	public void readExternal(ObjectInput in) 
1:c8603c4: 		throws IOException, ClassNotFoundException
1:c8603c4: 	{
1:c8603c4: 		in.readInt();   // unused until we have a second rev of this class
1:c8603c4: 
1:c8603c4:         _aggregator = (Aggregator) in.readObject();
1:c8603c4:         _resultType = (DataTypeDescriptor) in.readObject();
1:c8603c4:         _eliminatedNulls = in.readBoolean();
1:c8603c4: 	}
1:c8603c4: 
1:c8603c4: 	/**
1:c8603c4: 	 * Get the formatID which corresponds to this class.
1:c8603c4: 	 *
1:c8603c4: 	 *	@return	the formatID of this class
1:c8603c4: 	 */
1:c8603c4: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_USER_ADAPTOR_V01_ID; }
1:c8603c4: 
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4:     //
1:c8603c4:     // MINIONS
1:c8603c4:     //
1:c8603c4:     ///////////////////////////////////////////////////////////////////////////////////
1:c8603c4: 
1:c8603c4:     /**
1:c8603c4:      * Record an instantiation error trying to load the aggregator class.
1:c8603c4:      */
1:c8603c4:     private void   logAggregatorInstantiationError( String aggregateName, Throwable t )
1:c8603c4:     {
1:c8603c4:         String  errorMessage = MessageService.getTextMessage
1:c8603c4:             (
1:c8603c4:              MessageId.CM_CANNOT_LOAD_CLASS,
1:c8603c4:              aggregateName,
1:c8603c4:              t.getMessage()
1:c8603c4:              );
1:c8603c4: 
1:c8603c4: 		Monitor.getStream().println( errorMessage );
1:c8603c4: 
1:c8603c4:         Exception   e = new Exception( errorMessage, t );
1:c8603c4: 
1:c8603c4:         e.printStackTrace( Monitor.getStream().getPrintWriter() );
1:c8603c4:     }
1:c8603c4: 
1:c8603c4: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:     private void    setup( Class<?> udaClass, DataTypeDescriptor resultType )
1:             _aggregator = (Aggregator) udaClass.getConstructor().newInstance();
1:         catch (NoSuchMethodException nsme) { logAggregatorInstantiationError( aggregateName, nsme ); }
1:         catch (java.lang.reflect.InvocationTargetException ite) { logAggregatorInstantiationError( aggregateName, ite ); }
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
commit:d389f7d
/////////////////////////////////////////////////////////////////////////
1:         UserDefinedAggregator  other = (UserDefinedAggregator) addend;
1:         _aggregator.merge( other._aggregator );
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.UserDefinedAggregator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.agg.Aggregator;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.reference.MessageId;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1: 	Aggregator for user-defined aggregates. Wraps the application-supplied
1:     implementation of org.apache.derby.agg.Aggregator.
1:  */
1: public final class UserDefinedAggregator  implements ExecAggregator
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static final int FIRST_VERSION = 0;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private Aggregator  _aggregator;
1:     private DataTypeDescriptor  _resultType;
1:     private boolean     _eliminatedNulls;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** 0-arg constructor for Formatable interface */
1:     public  UserDefinedAggregator() {}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ExecAggregator BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 	public void setup( ClassFactory classFactory, String aggregateName, DataTypeDescriptor resultType )
1: 	{
1:         try {
1:             setup( classFactory.loadApplicationClass( aggregateName ), resultType );
1:         }
1:         catch (ClassNotFoundException cnfe) { logAggregatorInstantiationError( aggregateName, cnfe ); }
1: 	}
1:     /** Initialization logic shared by setup() and newAggregator() */
0:     private void    setup( Class udaClass, DataTypeDescriptor resultType )
1:     {
1:         String  aggregateName = udaClass.getName();
1:         
1:         try {
0:             _aggregator = (Aggregator) udaClass.newInstance();
1:             _aggregator.init();
1:         }
1:         catch (InstantiationException ie) { logAggregatorInstantiationError( aggregateName, ie ); }
1:         catch (IllegalAccessException iae) { logAggregatorInstantiationError( aggregateName, iae ); }
1: 
1:         _resultType = resultType;
1:     }
1: 
1: 	public boolean didEliminateNulls() { return _eliminatedNulls; }
1: 
1: 	public void accumulate( DataValueDescriptor addend, Object ga ) 
1: 		throws StandardException
1: 	{
1: 		if ( (addend == null) || addend.isNull() )
1:         {
1: 			_eliminatedNulls = true;
1: 			return;
1: 		}
1: 
1:         Object  value = addend.getObject();
1: 
1:         _aggregator.accumulate( value );
1: 	}
1: 
1: 	public void merge(ExecAggregator addend)
1: 		throws StandardException
1: 	{
0:         Aggregator  other = (Aggregator) addend;
1: 
0:         _aggregator.merge( other );
1: 	}
1: 
1: 	/**
1: 	 * Return the result of the aggregation. .
1: 	 *
1: 	 * @return the aggregated result (could be a Java null).
1: 	 */
1: 	public DataValueDescriptor getResult() throws StandardException
1: 	{
1:         Object  javaReturnValue = _aggregator.terminate();
1: 
1:         if ( javaReturnValue == null ) { return null; }
1: 
1:         DataValueDescriptor dvd = _resultType.getNull();
1:         dvd.setObjectForCast( javaReturnValue, true, javaReturnValue.getClass().getName() );
1: 
1:         return dvd;
1: 	}
1: 
1: 	/**
1: 	 */
1: 	public ExecAggregator newAggregator()
1: 	{
1: 		UserDefinedAggregator   uda = new UserDefinedAggregator();
1: 
1:         uda.setup( _aggregator.getClass(), _resultType );
1: 
1:         return uda;
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// FORMATABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 
1: 	/** 
1: 	 *
1: 	 * @exception IOException on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeInt( FIRST_VERSION );
1:         
1:         out.writeObject( _aggregator );
1:         out.writeObject( _resultType );
1:         out.writeBoolean( _eliminatedNulls );
1: 	}
1: 
1: 	/** 
1: 	 * @see java.io.Externalizable#readExternal 
1: 	 *
1: 	 * @exception IOException on error
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		in.readInt();   // unused until we have a second rev of this class
1: 
1:         _aggregator = (Aggregator) in.readObject();
1:         _resultType = (DataTypeDescriptor) in.readObject();
1:         _eliminatedNulls = in.readBoolean();
1: 	}
1: 
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_USER_ADAPTOR_V01_ID; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Record an instantiation error trying to load the aggregator class.
1:      */
1:     private void   logAggregatorInstantiationError( String aggregateName, Throwable t )
1:     {
1:         String  errorMessage = MessageService.getTextMessage
1:             (
1:              MessageId.CM_CANNOT_LOAD_CLASS,
1:              aggregateName,
1:              t.getMessage()
1:              );
1: 
1: 		Monitor.getStream().println( errorMessage );
1: 
1:         Exception   e = new Exception( errorMessage, t );
1: 
1:         e.printStackTrace( Monitor.getStream().getPrintWriter() );
1:     }
1: 
1: }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
============================================================================