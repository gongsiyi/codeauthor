1:8fcae92: /*
7:8fcae92:  
1:8fcae92:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest
1:8fcae92: 
1:8fcae92:    Licensed to the Apache Software Foundation (ASF) under one or more
1:8fcae92:    contributor license agreements.  See the NOTICE file distributed with
1:8fcae92:    this work for additional information regarding copyright ownership.
1:8fcae92:    The ASF licenses this file to you under the Apache License, Version 2.0
1:8fcae92:    (the "License"); you may not use this file except in compliance with
1:8fcae92:    the License.  You may obtain a copy of the License at
1:8fcae92:  
1:8fcae92:       http://www.apache.org/licenses/LICENSE-2.0
1:8fcae92:  
1:8fcae92:    Unless required by applicable law or agreed to in writing, software
1:8fcae92:    distributed under the License is distributed on an "AS IS" BASIS,
1:8fcae92:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8fcae92:    See the License for the specific language governing permissions and
1:8fcae92:    limitations under the License.
1:8fcae92:  
3:8fcae92:  */
1:8fcae92: 
1:8fcae92: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:8fcae92: 
1:8fcae92: import java.sql.Connection;
1:8fcae92: import javax.sql.ConnectionPoolDataSource;
1:8fcae92: import javax.sql.PooledConnection;
1:8fcae92: import javax.sql.StatementEvent;
1:8fcae92: import javax.sql.StatementEventListener;
1:8fcae92: import javax.sql.XADataSource;
1:1ae02c9: import junit.framework.Test;
1:46e89a9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:46e89a9: import org.apache.derbyTesting.junit.J2EEDataSource;
1:46e89a9: import org.apache.derbyTesting.junit.JDBC;
1:46e89a9: import org.apache.derbyTesting.junit.TestConfiguration;
1:8fcae92: 
2:8fcae92: /**
1:5ef7a0d:  * <p>
1:8fcae92:  * This test ensures that when a JDBC 4 application instantiates a JDBC 3
1:8fcae92:  * data source, that data source will return JDBC 4 connections even though
1:8fcae92:  * the data source itself is not a JDBC 4 object.
1:5ef7a0d:  * </p>
1:5ef7a0d:  *
1:5ef7a0d:  * <p>
1:2e4b1b1:  * Note that after DERBY-5868 and DERBY-5880, all the data sources implement all JDBC 4.0 methods.
1:5ef7a0d:  * </p>
1:5ef7a0d:  *
1:5ef7a0d:  * <p>
1:5ef7a0d:  * Neither the client nor the embedded variants of the JDBC 3 data sources
1:5ef7a0d:  * implement the full JDBC 4.1 interface.
1:5ef7a0d:  * </p>
1:8fcae92:  */
1:8fcae92: public class JDBC4FromJDBC3DataSourceTest extends BaseJDBCTestCase {
1:8fcae92:     
1:8fcae92:     /**
1:8fcae92:      * Create a test with the given name.
1:8fcae92:      * @param name name of the test.
1:8fcae92:      *
1:8fcae92:      */
1:8fcae92:     public JDBC4FromJDBC3DataSourceTest(String name)
2:8fcae92:     {
1:8fcae92:         super(name);
1:46e89a9:     }
1:5ef7a0d:     
1:8fcae92:     /**
1:8fcae92:      * Return suite with all tests of the class.
1:8fcae92:      */
1:8fcae92:     public static Test suite()
1:8fcae92:     {
1:c35e4f0:         // Only run this test if we have a JDBC 4 JVM on full SE
1:c35e4f0:         if (JDBC.vmSupportsJDBC4() && JDBC.vmSupportsJNDI())
1:8fcae92:         {
1:8fcae92:             return TestConfiguration.forceJDBC3Suite(
1:8fcae92:                 JDBC4FromJDBC3DataSourceTest.class);
1:46e89a9:         }
1:8fcae92: 
1:8fcae92:         // Else return empty suite.
1:1ae02c9:         return new BaseTestSuite("JDBC 4 from JDBC 3 Data Sources");
1:5ef7a0d:     }
1:8fcae92: 
1:8fcae92:     /**
1:8fcae92:      * Test that a JDBC 3 data source returns a JDBC 4 PooledConnection
1:8fcae92:      * when running with a JDBC 4 JDK.
1:8fcae92:      */
1:8fcae92:     public void testPooledConnection() throws Exception
1:8fcae92:     {
1:a491068:         ConnectionPoolDataSource ds = J2EEDataSource.getConnectionPoolDataSource();
1:8fcae92: 
1:8fcae92:         checkJDBC4Interface(ds.getPooledConnection());
5:8fcae92:     }
1:8fcae92: 
1:8fcae92:     /**
1:8fcae92:      * Test that a JDBC 3 data source returns a JDBC 4 XAConnection
1:8fcae92:      * when running with a JDBC 4 JDK.
1:8fcae92:      */
1:8fcae92:     public void testXAConnection() throws Exception
1:8fcae92:     {
1:a491068:         XADataSource ds = J2EEDataSource.getXADataSource();
1:8fcae92: 
1:8fcae92:         checkJDBC4Interface(ds.getXAConnection());
1:8fcae92:     }
1:8fcae92: 
1:8fcae92: 
1:8fcae92:     /**
1:8fcae92:      * Make sure that the received PooledConnection, which we assume came
1:8fcae92:      * from a JDBC 3 data source, is nonetheless a JDBC 4 object.
1:8fcae92:      */
1:8fcae92:     private void checkJDBC4Interface(PooledConnection pc)
1:8fcae92:         throws Exception
1:8fcae92:     {
1:8fcae92:         // Create dummy event listener.
1:8fcae92:         StatementEventListener listener =
1:8fcae92:             new StatementEventListener()
1:8fcae92:             {
1:8fcae92:                 public void statementClosed(StatementEvent event) {}
1:8fcae92:                 public void statementErrorOccurred(StatementEvent event) {}
1:8fcae92:             };
1:8fcae92: 
1:8fcae92:         /* Assert that metadata reports JDBC 4 for the connection, which
1:8fcae92:          * it should even though the connection was created from a JDBC 3
1:8fcae92:          * datasource.
1:8fcae92:          */
1:8fcae92:         Connection conn = pc.getConnection();
1:8fcae92:         assertEquals(4, conn.getMetaData().getJDBCMajorVersion());
1:8fcae92:         conn.close();
1:8fcae92:         conn = null;
1:8fcae92: 
1:8fcae92:         /* The way we check to see if we actually have JDBC 4 objects is
1:8fcae92:          * to call two methods that only exist in JDBC 4.  These should
1:8fcae92:          * succeed.  Before DERBY-2488 they would fail with an Abstract
1:8fcae92:          * MethodError.
1:8fcae92:          */
1:8fcae92:         pc.addStatementEventListener(listener);
1:8fcae92:         pc.removeStatementEventListener(listener);
1:8fcae92:         pc.close();
1:8fcae92:     }
1:8fcae92: 
1:8fcae92: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite("JDBC 4 from JDBC 3 Data Sources");
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1:         // Only run this test if we have a JDBC 4 JVM on full SE
1:         if (JDBC.vmSupportsJDBC4() && JDBC.vmSupportsJNDI())
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2e4b1b1
/////////////////////////////////////////////////////////////////////////
1:  * Note that after DERBY-5868 and DERBY-5880, all the data sources implement all JDBC 4.0 methods.
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:46e89a9
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.InvocationTargetException;
0: import junit.framework.*;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
0:  * Note that after DERBY-5868 and DERBY-5880, all the data sources (except
0:  * EmbeddedSimpleDataSource for JSR-169) implement all JDBC 4.0 methods.
/////////////////////////////////////////////////////////////////////////
0:         // See if we can invoke the JDBC 4.1 getParentLogger() method. If we
0:         // can, we have a JDBC 4 data source.
0:             ds.getClass().getMethod("getParentLogger").invoke(ds);
0:             fail("Call to getParentLogger() not expected to pass");
0:         } catch (NoSuchMethodException nsme) {
0:             // OK. Method not found is expected on Java 6.
0:         } catch (InvocationTargetException ite) {
0:             // On Java 7 and newer the method is found in the CommonDataSource
0:             // interface, so expect an AbstractMethodError instead of
0:             // NoSuchMethodException.
0:             Throwable cause = ite.getCause();
0:             if (!(cause instanceof AbstractMethodError)) {
0:                 fail("Unexpected exception", cause);
1:             }
0:         } catch (IllegalAccessException iae) {
0:             fail("Unexpected exception", iae);
1:         }
commit:5ef7a0d
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * </p>
1:  *
1:  * <p>
0:  * Note that after DERBY-5868, all the data sources on the client implement
0:  * all JDBC 4.0 methods. On embedded, the JDBC 3 variants of the data sources
0:  * still don't implement the full JDBC 4.0 interface.
1:  * </p>
1:  *
1:  * <p>
1:  * Neither the client nor the embedded variants of the JDBC 3 data sources
1:  * implement the full JDBC 4.1 interface.
1:  * </p>
/////////////////////////////////////////////////////////////////////////
0:         // After DERBY-5868, however, all the data sources on the client
0:         // driver implement the JDBC 4.0 interface, so expect this check
0:         // to pass.
0:         if (usingDerbyNetClient()) {
0:             assertTrue(ds.isWrapperFor(DataSource.class));
0:             return;
1:         }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a491068
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.J2EEDataSource;
/////////////////////////////////////////////////////////////////////////
1:         ConnectionPoolDataSource ds = J2EEDataSource.getConnectionPoolDataSource();
/////////////////////////////////////////////////////////////////////////
1:         XADataSource ds = J2EEDataSource.getXADataSource();
author:Army
-------------------------------------------------------------------------------
commit:8fcae92
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
0: import junit.framework.*;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.JDBCClient;
0: import org.apache.derbyTesting.junit.JDBCDataSource;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: import java.sql.Connection;
0: import java.sql.SQLException;
1: 
1: import javax.sql.ConnectionPoolDataSource;
0: import javax.sql.DataSource;
1: import javax.sql.PooledConnection;
1: import javax.sql.StatementEvent;
1: import javax.sql.StatementEventListener;
1: import javax.sql.XADataSource;
1: 
1: /**
1:  * This test ensures that when a JDBC 4 application instantiates a JDBC 3
1:  * data source, that data source will return JDBC 4 connections even though
1:  * the data source itself is not a JDBC 4 object.
1:  */
1: public class JDBC4FromJDBC3DataSourceTest extends BaseJDBCTestCase {
1:     
1:     /**
1:      * Create a test with the given name.
1:      * @param name name of the test.
1:      *
1:      */
1:     public JDBC4FromJDBC3DataSourceTest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Return suite with all tests of the class.
1:      */
1:     public static Test suite()
1:     {
0:         // Only run this test if we have a JDBC 4 JVM.
0:         if (JDBC.vmSupportsJDBC4())
1:         {
1:             return TestConfiguration.forceJDBC3Suite(
1:                 JDBC4FromJDBC3DataSourceTest.class);
1:         }
1: 
1:         // Else return empty suite.
0:         return new TestSuite("JDBC 4 from JDBC 3 Data Sources");
1:     }
1: 
1:     /**
1:      * Test that a JDBC 3 data source returns a JDBC 4 PooledConnection
1:      * when running with a JDBC 4 JDK.
1:      */
1:     public void testPooledConnection() throws Exception
1:     {
0:         ConnectionPoolDataSource ds = (ConnectionPoolDataSource)
0:             JDBCDataSource.getConnectionPoolDataSource();
1: 
0:         assertNonJDBC4DataSource((DataSource)ds);
1:         checkJDBC4Interface(ds.getPooledConnection());
1:     }
1: 
1:     /**
1:      * Test that a JDBC 3 data source returns a JDBC 4 XAConnection
1:      * when running with a JDBC 4 JDK.
1:      */
1:     public void testXAConnection() throws Exception
1:     {
0:         XADataSource ds = 
0:             (XADataSource) JDBCDataSource.getXADataSource();
1: 
0:         assertNonJDBC4DataSource((DataSource)ds);
1:         checkJDBC4Interface(ds.getXAConnection());
1:     }
1: 
1:     /**
0:      * Make sure that the received DataSource is *not* a JDBC 4
0:      * data source, since that would defeat the whole purpose
0:      * of this test.
1:      */
0:     private void assertNonJDBC4DataSource(DataSource ds)
0:         throws SQLException
1:     {
0:         /* Simplest way is to try to call a JDBC 4 interface method;
0:          * if it succeeds, then we must have a JDBC 4 data source
0:          * (which we don't want).
1:          */
0:         try {
1: 
0:             ds.isWrapperFor(DataSource.class);
0:             fail("Found JDBC 4 data source when JDBC 3 was expected.");
1: 
0:         } catch (java.lang.AbstractMethodError ame) {}
1:     }
1: 
1:     /**
1:      * Make sure that the received PooledConnection, which we assume came
1:      * from a JDBC 3 data source, is nonetheless a JDBC 4 object.
1:      */
1:     private void checkJDBC4Interface(PooledConnection pc)
1:         throws Exception
1:     {
1:         // Create dummy event listener.
1:         StatementEventListener listener =
1:             new StatementEventListener()
1:             {
1:                 public void statementClosed(StatementEvent event) {}
1:                 public void statementErrorOccurred(StatementEvent event) {}
1:             };
1: 
1:         /* Assert that metadata reports JDBC 4 for the connection, which
1:          * it should even though the connection was created from a JDBC 3
1:          * datasource.
1:          */
1:         Connection conn = pc.getConnection();
1:         assertEquals(4, conn.getMetaData().getJDBCMajorVersion());
1:         conn.close();
1:         conn = null;
1: 
1:         /* The way we check to see if we actually have JDBC 4 objects is
1:          * to call two methods that only exist in JDBC 4.  These should
1:          * succeed.  Before DERBY-2488 they would fail with an Abstract
1:          * MethodError.
1:          */
1:         pc.addStatementEventListener(listener);
1:         pc.removeStatementEventListener(listener);
1:         pc.close();
1:     }
1: 
1: }
============================================================================