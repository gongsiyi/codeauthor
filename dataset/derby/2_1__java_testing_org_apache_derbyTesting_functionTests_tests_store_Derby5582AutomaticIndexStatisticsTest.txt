1:1690ef6: /*
3:1690ef6: 
1:1690ef6:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.Derby5582AutomaticIndexStatisticsTest
1:1690ef6: 
1:1690ef6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1690ef6:    contributor license agreements.  See the NOTICE file distributed with
1:1690ef6:    this work for additional information regarding copyright ownership.
1:1690ef6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:1690ef6:    (the "License"); you may not use this file except in compliance with
1:1690ef6:    the License.  You may obtain a copy of the License at
1:1690ef6: 
1:1690ef6:       http://www.apache.org/licenses/LICENSE-2.0
1:1690ef6: 
1:1690ef6:    Unless required by applicable law or agreed to in writing, software
1:1690ef6:    distributed under the License is distributed on an "AS IS" BASIS,
1:1690ef6:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1690ef6:    See the License for the specific language governing permissions and
1:1690ef6:    limitations under the License.
1:1690ef6: 
1:1690ef6:  */
1:1690ef6: package org.apache.derbyTesting.functionTests.tests.store;
1:1690ef6: 
1:1690ef6: import java.sql.SQLException;
1:1690ef6: import junit.framework.Test;
1:1690ef6: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:1690ef6: import org.apache.derbyTesting.junit.TestConfiguration;
1:1690ef6: 
1:1690ef6: public class Derby5582AutomaticIndexStatisticsTest extends AutomaticIndexStatisticsTest  {
1:1690ef6: 
1:1690ef6:     // private thread group. Derby5582SecurityManager will prevent other threads from 
1:1690ef6: 	// modifying this thread group.
1:1690ef6:     private static final String PRIVTGNAME = "privtg";
1:1690ef6: 
1:1690ef6: 	public Derby5582AutomaticIndexStatisticsTest(String name) {
1:1690ef6:         super(name);
1:1690ef6:         
1:1690ef6:     }
1:1690ef6:     
1:1690ef6:     /**
1:1690ef6:      * DERBY-5582 Ensure automatic statistics update thread can be created in the 
1:1690ef6:      * context of a SecurityManager that disallows modification of the parent 
1:1690ef6:      * thread thread group.
1:1690ef6:      * 
1:1690ef6:      * @throws InterruptedException
1:1690ef6:      */
1:1690ef6:     public void testDerby5582() throws InterruptedException {
1:1690ef6:         //Create a new thread belonging to the thread group protected by 
1:1690ef6:         // the custom SecurityManger
1:1690ef6:         ThreadGroup privtg = new ThreadGroup(PRIVTGNAME);
1:1690ef6:         // Derby5582Runner will run a automatic statistics test within
1:1690ef6:         // the context of the "privtg" ThreadGroup
1:1690ef6:         Derby5582Runner runner = new Derby5582Runner();
1:1690ef6:         Thread t = new Thread(privtg, runner, "runner-thread");
1:1690ef6:         t.start();
1:1690ef6:         t.join();
1:1690ef6:         // Report error if any during run
1:1690ef6:         Exception error = runner.getSavedError();
1:1690ef6:         if (error != null) {
1:1690ef6:             fail(error.getMessage(),error);
1:1690ef6:         }
1:1690ef6:         
1:1690ef6:     }
1:1690ef6:    
1:1690ef6:    
1:1690ef6:     
1:1690ef6:     public static Test suite() {
1:1690ef6:     	// Run just the one fixture with the custom SecurityManager
1:1690ef6:         Test t = new Derby5582AutomaticIndexStatisticsTest("testDerby5582");
1:1690ef6:         Derby5582SecurityManager sm =  new Derby5582SecurityManager();
1:1690ef6:         return TestConfiguration.additionalDatabaseDecorator(new SecurityManagerSetup(t, null,
1:1690ef6:                 sm),MASTERDB);
1:1690ef6:         }
1:1690ef6: 
1:1690ef6:     /**
1:1690ef6:      * SecurityManager which prevents modification of thread group privtg
1:1690ef6:      *
1:1690ef6:      */
1:1690ef6:     public static class Derby5582SecurityManager  extends SecurityManager {
1:1690ef6:         
1:1690ef6:         public void checkAccess(ThreadGroup tg) {
1:1690ef6:             ThreadGroup currentGroup = Thread.currentThread().getThreadGroup();
1:1690ef6:             if (tg.getName().equals(PRIVTGNAME) && 
1:1690ef6:                     !currentGroup.getName().equals("main")) {
1:1690ef6:                 throw new SecurityException("No permission to private ThreadGroup privtg");
1:1690ef6:                 
1:1690ef6:             }
1:1690ef6:             super.checkAccess(tg);
1:1690ef6:         }
1:1690ef6:     }
1:1690ef6:     
1:1690ef6:     /**
1:1690ef6:      * Runnable to run testSTatsUpdatedOnGrowthFixture from
1:1690ef6:      * AutomaticStatisticsTest. Needs to be run in a separate thread
1:1690ef6:      * with disallowed ThreadGroup modification
1:1690ef6:      *  
1:1690ef6:      */
1:1690ef6:     public class Derby5582Runner implements Runnable {
1:1690ef6: 
1:1690ef6:     	// error saved from run so it can be reported in 
1:1690ef6:     	// fixture as failure.
1:1690ef6:     	private Exception savedError = null;
1:1690ef6: 
1:1690ef6:     	public void run() {
1:1690ef6:     		try {
1:1690ef6:     			testStatsUpdatedOnGrowth();
1:1690ef6:     		} catch (SQLException sqle) {
1:1690ef6:     			savedError = sqle;
1:1690ef6:     		}   
1:1690ef6:     	}
1:1690ef6: 
1:1690ef6:     	/**
1:1690ef6:     	 * @return saved Error
1:1690ef6:     	 */
1:1690ef6:     	public Exception getSavedError() {
1:1690ef6:     		return savedError;
1:1690ef6:     	}
1:1690ef6: 
1:1690ef6:     }
1:1690ef6: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:1690ef6
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.Derby5582AutomaticIndexStatisticsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.SQLException;
0: import java.util.ArrayList;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class Derby5582AutomaticIndexStatisticsTest extends AutomaticIndexStatisticsTest  {
1: 
1:     // private thread group. Derby5582SecurityManager will prevent other threads from 
1: 	// modifying this thread group.
1:     private static final String PRIVTGNAME = "privtg";
1: 
1: 	public Derby5582AutomaticIndexStatisticsTest(String name) {
1:         super(name);
1:         
1:     }
1:     
1:     /**
1:      * DERBY-5582 Ensure automatic statistics update thread can be created in the 
1:      * context of a SecurityManager that disallows modification of the parent 
1:      * thread thread group.
1:      * 
1:      * @throws InterruptedException
1:      */
1:     public void testDerby5582() throws InterruptedException {
1:         //Create a new thread belonging to the thread group protected by 
1:         // the custom SecurityManger
1:         ThreadGroup privtg = new ThreadGroup(PRIVTGNAME);
1:         // Derby5582Runner will run a automatic statistics test within
1:         // the context of the "privtg" ThreadGroup
1:         Derby5582Runner runner = new Derby5582Runner();
1:         Thread t = new Thread(privtg, runner, "runner-thread");
1:         t.start();
1:         t.join();
1:         // Report error if any during run
1:         Exception error = runner.getSavedError();
1:         if (error != null) {
1:             fail(error.getMessage(),error);
1:         }
1:         
1:     }
1:    
1:    
1:     
1:     public static Test suite() {
1:     	// Run just the one fixture with the custom SecurityManager
1:         Test t = new Derby5582AutomaticIndexStatisticsTest("testDerby5582");
1:         Derby5582SecurityManager sm =  new Derby5582SecurityManager();
1:         return TestConfiguration.additionalDatabaseDecorator(new SecurityManagerSetup(t, null,
1:                 sm),MASTERDB);
1:         }
1: 
1:     /**
1:      * SecurityManager which prevents modification of thread group privtg
1:      *
1:      */
1:     public static class Derby5582SecurityManager  extends SecurityManager {
1:         
1:         public void checkAccess(ThreadGroup tg) {
1:             ThreadGroup currentGroup = Thread.currentThread().getThreadGroup();
1:             if (tg.getName().equals(PRIVTGNAME) && 
1:                     !currentGroup.getName().equals("main")) {
1:                 throw new SecurityException("No permission to private ThreadGroup privtg");
1:                 
1:             }
1:             super.checkAccess(tg);
1:         }
1:     }
1:     
1:     /**
1:      * Runnable to run testSTatsUpdatedOnGrowthFixture from
1:      * AutomaticStatisticsTest. Needs to be run in a separate thread
1:      * with disallowed ThreadGroup modification
1:      *  
1:      */
1:     public class Derby5582Runner implements Runnable {
1: 
1:     	// error saved from run so it can be reported in 
1:     	// fixture as failure.
1:     	private Exception savedError = null;
1: 
1:     	public void run() {
1:     		try {
1:     			testStatsUpdatedOnGrowth();
1:     		} catch (SQLException sqle) {
1:     			savedError = sqle;
1:     		}   
1:     	}
1: 
1:     	/**
1:     	 * @return saved Error
1:     	 */
1:     	public Exception getSavedError() {
1:     		return savedError;
1:     	}
1: 
1:     }
1: }
============================================================================