1:106ea47: /*
1:106ea47: 
1:106ea47: Derby - Class org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator
1:106ea47: 
1:106ea47: Licensed to the Apache Software Foundation (ASF) under one or more
1:106ea47: contributor license agreements.  See the NOTICE file distributed with
1:106ea47: this work for additional information regarding copyright ownership.
1:106ea47: The ASF licenses this file to You under the Apache License, Version 2.0
1:106ea47: (the "License"); you may not use this file except in compliance with
1:106ea47: the License.  You may obtain a copy of the License at
1:106ea47: 
1:106ea47:    http://www.apache.org/licenses/LICENSE-2.0
1:106ea47: 
1:106ea47: Unless required by applicable law or agreed to in writing, software
1:106ea47: distributed under the License is distributed on an "AS IS" BASIS,
1:106ea47: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:106ea47: See the License for the specific language governing permissions and
1:106ea47: limitations under the License.
1:106ea47: 
1:106ea47: */
1:106ea47: 
1:106ea47: package org.apache.derbyTesting.perf.clients;
1:106ea47: 
1:106ea47: import java.io.PrintStream;
1:106ea47: import java.sql.SQLException;
1:106ea47: 
1:106ea47: /**
1:106ea47:  * Load generator which creates back-to-back load. This means that you have a
1:106ea47:  * number of threads running in parallel, where each thread continuously
1:106ea47:  * performs operations with no pauses in between.
1:106ea47:  */
1:106ea47: public class BackToBackLoadGenerator implements LoadGenerator {
1:106ea47:     /** The threads executing. */
1:106ea47:     private ClientThread[] threads;
1:106ea47:     /** Flag which tells the generator to stop. */
1:106ea47:     private volatile boolean stop;
1:106ea47:     /** Flag which tells the generator to collect results. */
1:106ea47:     private volatile boolean collect;
1:106ea47:     /** Start time for steady-state phase. */
1:106ea47:     private long startTime;
1:106ea47:     /** Stop time for steady-state phase. */
1:106ea47:     private long stopTime;
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Thread class which runs a single client and collects results.
1:106ea47:      */
1:106ea47:     private class ClientThread extends Thread {
1:106ea47:         private final Client client;
1:106ea47:         private long count;
1:106ea47: 
1:106ea47:         ClientThread(Client c) {
1:106ea47:             client = c;
1:106ea47:         }
1:106ea47: 
1:9a05e65:         public Client getClient() { return client; }
1:9a05e65: 
1:106ea47:         public void run() {
1:106ea47:             try {
1:106ea47:                 while (!stop) {
1:106ea47:                     client.doWork();
1:106ea47:                     if (collect) {
1:106ea47:                         count++;
1:106ea47:                     }
1:106ea47:                 }
1:106ea47:             } catch (SQLException sqle) {
1:106ea47:                 sqle.printStackTrace();
1:106ea47:             }
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Initialize the load generator.
1:106ea47:      *
1:106ea47:      * @param clients the test clients to use
1:106ea47:      */
1:106ea47:     public void init(Client[] clients) {
1:106ea47:         threads = new ClientThread[clients.length];
1:106ea47:         for (int i = 0; i < clients.length; i++) {
1:106ea47:             threads[i] = new ClientThread(clients[i]);
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Start warmup.
1:106ea47:      */
1:106ea47:     public void startWarmup() {
1:106ea47:         for (int i = 0; i < threads.length; i++) {
1:106ea47:             threads[i].start();
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Start steady state.
1:106ea47:      */
1:106ea47:     public void startSteadyState() {
1:106ea47:         startTime = System.currentTimeMillis();
1:106ea47:         collect = true;
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Stop the load generator.
1:106ea47:      */
1:106ea47:     public void stop() {
1:106ea47:         stopTime = System.currentTimeMillis();
1:106ea47:         collect = false;
1:106ea47:         stop = true;
1:106ea47:         for (int i = 0; i < threads.length; i++) {
1:106ea47:             try {
1:106ea47:                 threads[i].join();
1:106ea47:             } catch (InterruptedException ie) {
1:106ea47:                 ie.printStackTrace();
1:106ea47:             }
1:106ea47:         }
1:106ea47:     }
1:106ea47: 
1:106ea47:     /**
1:106ea47:      * Print average number of transactions per second.
1:106ea47:      */
1:106ea47:     public void printReport(PrintStream out) {
1:106ea47:         long time = stopTime - startTime;
1:106ea47: 
1:106ea47:         long count = 0;
1:106ea47:         for (int i = 0; i < threads.length; i++) {
1:106ea47:             count += threads[i].count;
1:106ea47:         }
1:106ea47: 
1:106ea47:         double tps = (double) count * 1000 / time;
1:106ea47: 
1:106ea47:         out.println("Number of threads:\t" + threads.length);
1:106ea47:         out.println("Test duration (s):\t" + ((double) time / 1000));
1:106ea47:         out.println("Number of transactions:\t" + count);
1:106ea47:         out.println("Average throughput (tx/s):\t" + tps);
1:9a05e65:         
1:9a05e65:         for (int i = 0; i < threads.length; i++)
1:9a05e65:         {
1:9a05e65:             threads[i].getClient().printReport( out );
1:9a05e65:         }
1:106ea47:     }
1:106ea47: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9a05e65
/////////////////////////////////////////////////////////////////////////
1:         public Client getClient() { return client; }
1: 
/////////////////////////////////////////////////////////////////////////
1:         
1:         for (int i = 0; i < threads.length; i++)
1:         {
1:             threads[i].getClient().printReport( out );
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:106ea47
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.perf.clients;
1: 
1: import java.io.PrintStream;
1: import java.sql.SQLException;
1: 
1: /**
1:  * Load generator which creates back-to-back load. This means that you have a
1:  * number of threads running in parallel, where each thread continuously
1:  * performs operations with no pauses in between.
1:  */
1: public class BackToBackLoadGenerator implements LoadGenerator {
1:     /** The threads executing. */
1:     private ClientThread[] threads;
1:     /** Flag which tells the generator to stop. */
1:     private volatile boolean stop;
1:     /** Flag which tells the generator to collect results. */
1:     private volatile boolean collect;
1:     /** Start time for steady-state phase. */
1:     private long startTime;
1:     /** Stop time for steady-state phase. */
1:     private long stopTime;
1: 
1:     /**
1:      * Thread class which runs a single client and collects results.
1:      */
1:     private class ClientThread extends Thread {
1:         private final Client client;
1:         private long count;
1: 
1:         ClientThread(Client c) {
1:             client = c;
1:         }
1: 
1:         public void run() {
1:             try {
1:                 while (!stop) {
1:                     client.doWork();
1:                     if (collect) {
1:                         count++;
1:                     }
1:                 }
1:             } catch (SQLException sqle) {
1:                 sqle.printStackTrace();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Initialize the load generator.
1:      *
1:      * @param clients the test clients to use
1:      */
1:     public void init(Client[] clients) {
1:         threads = new ClientThread[clients.length];
1:         for (int i = 0; i < clients.length; i++) {
1:             threads[i] = new ClientThread(clients[i]);
1:         }
1:     }
1: 
1:     /**
1:      * Start warmup.
1:      */
1:     public void startWarmup() {
1:         for (int i = 0; i < threads.length; i++) {
1:             threads[i].start();
1:         }
1:     }
1: 
1:     /**
1:      * Start steady state.
1:      */
1:     public void startSteadyState() {
1:         startTime = System.currentTimeMillis();
1:         collect = true;
1:     }
1: 
1:     /**
1:      * Stop the load generator.
1:      */
1:     public void stop() {
1:         stopTime = System.currentTimeMillis();
1:         collect = false;
1:         stop = true;
1:         for (int i = 0; i < threads.length; i++) {
1:             try {
1:                 threads[i].join();
1:             } catch (InterruptedException ie) {
1:                 ie.printStackTrace();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Print average number of transactions per second.
1:      */
1:     public void printReport(PrintStream out) {
1:         long time = stopTime - startTime;
1: 
1:         long count = 0;
1:         for (int i = 0; i < threads.length; i++) {
1:             count += threads[i].count;
1:         }
1: 
1:         double tps = (double) count * 1000 / time;
1: 
1:         out.println("Number of threads:\t" + threads.length);
1:         out.println("Test duration (s):\t" + ((double) time / 1000));
1:         out.println("Number of transactions:\t" + count);
1:         out.println("Average throughput (tx/s):\t" + tps);
1:     }
1: }
============================================================================