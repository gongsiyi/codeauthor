1:a96a2ab: /*
1:a96a2ab: 
1:a96a2ab:    Derby - Class org.apache.impl.storeless.StorelessDatabase
1:a96a2ab: 
1:a96a2ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a96a2ab:    contributor license agreements.  See the NOTICE file distributed with
1:a96a2ab:    this work for additional information regarding copyright ownership.
1:a96a2ab:    The ASF licenses this file to You under the Apache License, Version 2.0
1:a96a2ab:    (the "License"); you may not use this file except in compliance with
1:a96a2ab:    the License.  You may obtain a copy of the License at
1:a96a2ab: 
1:a96a2ab:       http://www.apache.org/licenses/LICENSE-2.0
1:a96a2ab: 
1:a96a2ab:    Unless required by applicable law or agreed to in writing, software
1:a96a2ab:    distributed under the License is distributed on an "AS IS" BASIS,
1:a96a2ab:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a96a2ab:    See the License for the specific language governing permissions and
1:a96a2ab:    limitations under the License.
1:a96a2ab: 
1:a96a2ab:  */
1:a96a2ab: package org.apache.derby.impl.storeless;
1:a96a2ab: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:a96a2ab: import java.util.Properties;
1:a96a2ab: 
1:a96a2ab: import org.apache.derby.catalog.UUID;
1:a96a2ab: import org.apache.derby.iapi.error.StandardException;
1:a96a2ab: import org.apache.derby.iapi.reference.EngineType;
1:a96a2ab: import org.apache.derby.iapi.services.context.ContextManager;
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:a96a2ab: import org.apache.derby.iapi.services.monitor.Monitor;
1:a96a2ab: import org.apache.derby.iapi.store.access.TransactionController;
1:a96a2ab: import org.apache.derby.impl.db.BasicDatabase;
1:a96a2ab: 
1:a96a2ab: /**
1:a96a2ab:  * Database implementation that drives the storeless engine
1:a96a2ab:  * as a Database service with no store.
1:a96a2ab:  *
1:a96a2ab:  */
1:a96a2ab: public class StorelessDatabase extends BasicDatabase {
1:a96a2ab: 	
1:a96a2ab: 	public StorelessDatabase() {
1:a96a2ab: 	}
1:a96a2ab:     
1:a96a2ab: 	public	int	getEngineType() {
1:a96a2ab: 		return EngineType.STORELESS_ENGINE;
1:a96a2ab:     }
1:a96a2ab: 
1:a96a2ab:     /**
1:a96a2ab:      * The key, don't boot a store!
1:a96a2ab:      */
1:a96a2ab: 	protected void bootStore(boolean create, Properties startParams)
1:a96a2ab: 	{
1:a96a2ab: 	}
1:a96a2ab: 	
1:a96a2ab: 	protected void createFinished()
1:a96a2ab: 	{
1:a96a2ab: 		
1:a96a2ab: 	}
1:a96a2ab: 	
1:a96a2ab: 	protected	UUID	makeDatabaseID(boolean create, Properties startParams)
1:a96a2ab: 	{
1:56c1dc2: 		return getMonitor().getUUIDFactory().createUUID();
1:a96a2ab: 	}
1:a96a2ab: 	
1:a96a2ab: 	protected Properties getAllDatabaseProperties()
1:a96a2ab: 	throws StandardException
1:a96a2ab: 	{
1:a96a2ab: 		return new Properties();
1:a96a2ab: 	}
1:a96a2ab: 	
1:a96a2ab: 	protected TransactionController getConnectionTransaction(ContextManager cm)
1:a96a2ab:             throws StandardException {
1:a96a2ab: 
1:a96a2ab:         // start a local transaction
1:a96a2ab:         return new NoOpTransaction();
1:a96a2ab:     }
1:a96a2ab: 	public boolean isReadOnly()
1:a96a2ab: 	{
1:a96a2ab: 		return true;
1:a96a2ab: 	}
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:a96a2ab: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1: 		return getMonitor().getUUIDFactory().createUUID();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a96a2ab
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.impl.storeless.StorelessDatabase
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.impl.storeless;
1: 
1: import java.util.Properties;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.EngineType;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.impl.db.BasicDatabase;
1: 
1: /**
1:  * Database implementation that drives the storeless engine
1:  * as a Database service with no store.
1:  *
1:  */
1: public class StorelessDatabase extends BasicDatabase {
1: 	
1: 	public StorelessDatabase() {
1: 	}
1:     
1: 	public	int	getEngineType() {
1: 		return EngineType.STORELESS_ENGINE;
1:     }
1: 
1:     /**
1:      * The key, don't boot a store!
1:      */
1: 	protected void bootStore(boolean create, Properties startParams)
1: 	{
1: 	}
1: 	
1: 	protected void createFinished()
1: 	{
1: 		
1: 	}
1: 	
1: 	protected	UUID	makeDatabaseID(boolean create, Properties startParams)
1: 	{
0: 		return Monitor.getMonitor().getUUIDFactory().createUUID();
1: 	}
1: 	
1: 	protected Properties getAllDatabaseProperties()
1: 	throws StandardException
1: 	{
1: 		return new Properties();
1: 	}
1: 	
1: 	protected TransactionController getConnectionTransaction(ContextManager cm)
1:             throws StandardException {
1: 
1:         // start a local transaction
1:         return new NoOpTransaction();
1:     }
1: 	public boolean isReadOnly()
1: 	{
1: 		return true;
1: 	}
1: }
============================================================================