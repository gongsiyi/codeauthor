1:ea335da: /*
3:ea335da: 
1:ea335da:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.OptionalToolsTest
1:ea335da: 
1:ea335da:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ea335da:    contributor license agreements.  See the NOTICE file distributed with
1:ea335da:    this work for additional information regarding copyright ownership.
1:ea335da:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ea335da:    (the "License"); you may not use this file except in compliance with
1:ea335da:    the License.  You may obtain a copy of the License at
1:ea335da: 
1:ea335da:      http://www.apache.org/licenses/LICENSE-2.0
1:ea335da: 
1:ea335da:    Unless required by applicable law or agreed to in writing, software
1:ea335da:    distributed under the License is distributed on an "AS IS" BASIS,
1:ea335da:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ea335da:    See the License for the specific language governing permissions and
1:ea335da:    limitations under the License.
1:ea335da: 
1:ea335da:  */
1:ea335da: 
1:ea335da: package org.apache.derbyTesting.functionTests.tests.lang;
1:ea335da: 
1:ea335da: import java.sql.Connection;
1:ea335da: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:e081c85: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:ea335da: import org.apache.derbyTesting.junit.TestConfiguration;
1:ea335da: 
1:ea335da: /**
1:ea335da:  * <p>
1:ea335da:  * Test optional tools. See DERBY-6022.
1:ea335da:  * </p>
1:ea335da:  */
1:ea335da: public class OptionalToolsTest  extends GeneratedColumnsHelper
1:ea335da: {
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da:     //
1:ea335da:     // CONSTANTS
1:ea335da:     //
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da: 
1:e081c85:     protected   static  final   String  NO_SUCH_TABLE_FUNCTION = "42ZB4";
1:e081c85:     protected   static  final   String  UNEXPECTED_USER_EXCEPTION = "38000";
1:e081c85:     protected   static  final   String  MISSING_SCHEMA = "42Y07";
1:25959e3:     protected   static  final   String  UNKNOWN_TOOL = "X0Y88";
1:25959e3:     protected   static  final   String  UNKNOWN_ROUTINE = "42Y03";
1:e081c85: 
1:e081c85:     private static  final   String      TEST_DBO = "TEST_DBO";
1:e081c85:     private static  final   String      RUTH = "RUTH";
1:e081c85:     private static  final   String      ALICE = "ALICE";
1:e081c85:     private static  final   String      FRANK = "FRANK";
1:e081c85:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
1:e081c85: 
1:e081c85:     private static  final   String      FOREIGN_DB = "foreignDB";
1:ea335da: 
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da:     //
1:ea335da:     // STATE
1:ea335da:     //
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da: 
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da:     //
1:ea335da:     // CONSTRUCTOR
1:ea335da:     //
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da: 
1:ea335da:     /**
1:ea335da:      * Create a new instance.
1:ea335da:      */
1:ea335da: 
1:ea335da:     public OptionalToolsTest(String name)
1:ea335da:     {
1:ea335da:         super(name);
1:ea335da:     }
1:ea335da: 
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da:     //
1:ea335da:     // JUnit BEHAVIOR
1:ea335da:     //
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da: 
1:85e98cb:     /**
1:ea335da:      * Construct top level suite in this JUnit test
1:ea335da:      */
1:ea335da:     public static Test suite()
1:ea335da:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             OptionalToolsTest.class);
1:1ae02c9: 
1:e081c85:         Test        test = DatabasePropertyTestSetup.builtinAuthentication
1:e081c85:             ( suite, LEGAL_USERS, "optionalToolsPermissions" );
1:ea335da: 
1:e081c85:         test = TestConfiguration.sqlAuthorizationDecorator( test );
1:e081c85:         test = TestConfiguration.additionalDatabaseDecorator( test, FOREIGN_DB );
1:ea335da: 
1:e081c85:         return test;
1:ea335da:     }
1:ea335da: 
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da:     //
1:ea335da:     // TESTS
1:ea335da:     //
1:ea335da:     ///////////////////////////////////////////////////////////////////////////////////
1:ea335da: 
1:ea335da:     /**
1:85e98cb:      * <p>
1:ea335da:      * Test the optional package of routines which wrap the DatabaseMetaData methods.
1:ea335da:      * </p>
1:ea335da:      */
1:ea335da:     public void test_01_dbmdWrapper() throws Exception
1:ea335da:     {
1:e081c85:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:e081c85:         Connection  ruthConnection = openUserConnection( RUTH );
1:ea335da:         String  getTypeInfo = "select type_name, minimum_scale, maximum_scale from table( getTypeInfo() ) s";
1:ea335da: 
1:e081c85:         // only the dbo can register tools
1:e081c85:         expectExecutionError
1:e081c85:             (
1:e081c85:              ruthConnection,
1:e081c85:              LACK_EXECUTE_PRIV,
1:25959e3:              "call syscs_util.syscs_register_tool( 'databaseMetaData', true )"
1:e081c85:              );
1:e081c85: 
1:e081c85:         // create a dummy table just to force the schema to be created
1:e081c85:         goodStatement( dboConnection, "create table t( a int )" );
1:e081c85: 
1:ea335da:         // the routines don't exist unless you register them
1:e081c85:         expectCompilationError( dboConnection, NO_SUCH_TABLE_FUNCTION, getTypeInfo );
1:ea335da: 
1:ea335da:         // now register the database metadata wrappers
1:25959e3:         goodStatement( dboConnection, "call syscs_util.syscs_register_tool( 'databaseMetaData', true )" );
1:ea335da: 
1:ea335da:         // now the routine exists
1:ea335da:         assertResults
1:ea335da:             (
1:e081c85:              dboConnection,
1:ea335da:              getTypeInfo,
1:ea335da:              new String[][]
1:ea335da:              {
1:ea335da:                  { "BIGINT", "0", "0" },
1:ea335da:                  { "LONG VARCHAR FOR BIT DATA", null, null },
1:ea335da:                  { "VARCHAR () FOR BIT DATA", null, null },
1:ea335da:                  { "CHAR () FOR BIT DATA", null, null },
1:ea335da:                  { "LONG VARCHAR", null, null },
1:ea335da:                  { "CHAR", null, null },
1:ea335da:                  { "NUMERIC", "0", "31" },
1:ea335da:                  { "DECIMAL", "0", "31" },
1:ea335da:                  { "INTEGER", "0", "0" },
1:ea335da:                  { "SMALLINT", "0", "0" },
1:ea335da:                  { "FLOAT", null, null },
1:ea335da:                  { "REAL", null, null },
1:ea335da:                  { "DOUBLE", null, null },
1:ea335da:                  { "VARCHAR", null, null },
1:ea335da:                  { "BOOLEAN", null, null },
1:ea335da:                  { "DATE", "0", "0" },
1:ea335da:                  { "TIME", "0", "0" },
1:ea335da:                  { "TIMESTAMP", "0", "9" },
1:ea335da:                  { "OBJECT", null, null },
1:ea335da:                  { "BLOB", null, null }, 
1:ea335da:                  { "CLOB", null, null },
1:ea335da:                  { "XML", null, null },
1:ea335da:              },
1:ea335da:              false
1:ea335da:              );
1:ea335da: 
1:ea335da:         // now unregister the database metadata wrappers
1:25959e3:         goodStatement( dboConnection, "call syscs_util.syscs_register_tool( 'databaseMetaData', false )" );
1:ea335da: 
1:ea335da:         // the routines don't exist anymore
1:e081c85:         expectCompilationError( dboConnection, NO_SUCH_TABLE_FUNCTION, getTypeInfo );
1:e081c85:     }
1:e081c85:     
1:e081c85:     /**
1:e081c85:      * <p>
1:e081c85:      * Test the optional package of views on an external database.
1:e081c85:      * </p>
1:e081c85:      */
1:e081c85:     public void test_02_foreignDBViews() throws Exception
1:e081c85:     {
1:e081c85:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:e081c85:         Connection  foreignFrankConnection = getTestConfiguration().openConnection( FOREIGN_DB, FRANK, FRANK );
1:e081c85:         Connection  foreignAliceConnection = getTestConfiguration().openConnection( FOREIGN_DB, ALICE, ALICE );
1:e081c85: 
1:e081c85:         //
1:e081c85:         // Create the foreign database.
1:e081c85:         //
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              foreignFrankConnection,
1:e081c85:              "create table employee\n" +
1:e081c85:              "(\n" +
1:e081c85:              "    firstName   varchar( 50 ),\n" +
1:e081c85:              "    lastName    varchar( 50 ),\n" +
1:e081c85:              "    employeeID  int primary key\n" +
1:e081c85:              ")\n"
1:e081c85:              );
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              foreignFrankConnection,
1:e081c85:              "insert into employee values ( 'Billy', 'Goatgruff', 1 )\n"
1:e081c85:              );
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              foreignFrankConnection,
1:e081c85:              "insert into employee values ( 'Mary', 'Hadalittlelamb', 2 )\n"
1:e081c85:              );
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              foreignAliceConnection,
1:e081c85:              "create table stars\n" +
1:e081c85:              "(\n" +
1:e081c85:              "    name   varchar( 50 ),\n" +
1:e081c85:              "    magnitude int,\n" +
1:e081c85:              "    starID  int primary key\n" +
1:e081c85:              ")\n"
1:e081c85:              );
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              foreignAliceConnection,
1:e081c85:              "insert into stars values ( 'Polaris', 100, 1 )\n"
1:e081c85:              );
1:e081c85:         
1:e081c85:         // now work in the database where we will create views
1:e081c85:         String      foreignURL = "jdbc:derby:" +
1:e081c85:             getTestConfiguration().getPhysicalDatabaseName( FOREIGN_DB ) +
1:e081c85:             ";user=" + TEST_DBO + ";password=" + TEST_DBO;
1:e081c85:         String      employeeSelect = "select * from frank.employee order by employeeID";
1:e081c85:         String      starSelect = "select * from alice.stars order by starID";
1:e081c85:         String[][]   employeeResult = new String[][]
1:e081c85:             {
1:e081c85:                 { "Billy", "Goatgruff", "1" },
1:e081c85:                 { "Mary", "Hadalittlelamb", "2" },
1:e081c85:             };
1:e081c85:         String[][]  starResult = new String[][]
1:e081c85:             {
1:e081c85:                 { "Polaris", "100", "1" },
1:e081c85:             };
1:e081c85: 
1:b412f10:         // create a function to count the number of connections
1:b412f10:         // managed by ForeignTableVTI
1:b412f10:         goodStatement
1:b412f10:             (
1:b412f10:              dboConnection,
1:b412f10:              "create function countConnections() returns int\n" +
1:b412f10:              "language java parameter style java no sql\n" +
1:b412f10:              "external name 'org.apache.derby.vti.ForeignTableVTI.countConnections'\n"
1:b412f10:              );
1:b412f10: 
1:e081c85:         // wrong number of arguments
1:e081c85:         expectExecutionError
1:e081c85:             (
1:e081c85:              dboConnection,
2:e081c85:              UNEXPECTED_USER_EXCEPTION,
1:25959e3:              "call syscs_util.syscs_register_tool( 'foreignViews', true )"
1:e081c85:              );
1:e081c85: 
1:e081c85:         // should fail because the view and its schema don't exist
1:e081c85:         expectCompilationError
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              MISSING_SCHEMA,
1:e081c85:              employeeSelect
1:e081c85:              );
1:e081c85:         expectCompilationError
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              MISSING_SCHEMA,
1:e081c85:              starSelect
1:e081c85:              );
1:25959e3: 
1:e081c85:         // should work
1:e081c85:         goodStatement
1:b412f10:             (
1:b412f10:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool( 'foreignViews', true, '" + foreignURL + "' )"
1:e081c85:              );
1:25959e3: 
1:e081c85:         // views should have been created against the foreign database
1:b412f10:         assertResults
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              employeeSelect,
1:e081c85:              employeeResult,
1:e081c85:              false
1:e081c85:              );
1:e081c85:         assertResults
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              starSelect,
1:e081c85:              starResult,
1:e081c85:              false
1:e081c85:              );
1:b412f10:         assertResults
1:b412f10:             (
1:b412f10:              dboConnection,
1:b412f10:              "values countConnections()",
1:b412f10:              new String[][] { { "1" } },
1:b412f10:              false
1:b412f10:              );
1:e081c85:         
1:e081c85:         // wrong number of arguments
1:e081c85:         expectExecutionError
1:e081c85:             (
1:e081c85:              dboConnection,
1:25959e3:              UNEXPECTED_USER_EXCEPTION,
1:25959e3:              "call syscs_util.syscs_register_tool( 'foreignViews', false )"
1:e081c85:              );
1:e081c85: 
1:e081c85:         // should work
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool( 'foreignViews', false, '" + foreignURL + "' )"
1:e081c85:              );
1:b412f10:         assertResults
1:b412f10:             (
1:b412f10:              dboConnection,
1:b412f10:              "values countConnections()",
1:b412f10:              new String[][] { { "0" } },
1:b412f10:              false
1:b412f10:              );
1:e081c85: 
1:e081c85:         // should fail because the view and its schema were dropped when the tool was unloaded
1:e081c85:         expectCompilationError
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              MISSING_SCHEMA,
1:e081c85:              employeeSelect
1:b412f10:              );
1:e081c85:         expectCompilationError
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              MISSING_SCHEMA,
1:e081c85:              starSelect
1:e081c85:              );
1:e081c85: 
1:e081c85:         // unregistration should be idempotent
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool( 'foreignViews', false, '" + foreignURL + "' )"
1:e081c85:              );
1:e081c85: 
1:e081c85:         // register with a schema prefix
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool( 'foreignViews', true, '" + foreignURL + "', 'XYZ_' )"
1:e081c85:              );
1:e081c85:         employeeSelect = "select * from xyz_frank.employee order by employeeID";
1:e081c85:         starSelect = "select * from xyz_alice.stars order by starID";
1:e081c85: 
1:e081c85:         // views should have been created against the foreign database
1:e081c85:         assertResults
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              employeeSelect,
1:e081c85:              employeeResult,
1:b412f10:              false
1:e081c85:              );
1:e081c85:         assertResults
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              starSelect,
1:e081c85:              starResult,
1:e081c85:              false
1:e081c85:              );
1:e081c85: 
1:e081c85:         // drop the views
1:e081c85:         goodStatement
1:e081c85:             (
1:e081c85:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool( 'foreignViews', false, '" + foreignURL + "', 'XYZ_' )"
1:e081c85:              );
1:e081c85:         expectCompilationError
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              MISSING_SCHEMA,
1:e081c85:              employeeSelect
1:e081c85:              );
1:e081c85:         expectCompilationError
1:e081c85:             (
1:e081c85:              dboConnection,
1:e081c85:              MISSING_SCHEMA,
1:e081c85:              starSelect
1:e081c85:              );
1:e081c85:         assertResults
1:e081c85:             (
1:e081c85:              dboConnection,
1:b412f10:              "values countConnections()",
1:b412f10:              new String[][] { { "0" } },
1:e081c85:              false
1:e081c85:              );
1:b412f10:         goodStatement( dboConnection, "drop function countConnections" );
1:ea335da:     }
1:e081c85: 
1:25959e3:     /**
1:25959e3:      * <p>
1:25959e3:      * Test loading custom, user-supplied tools.
1:25959e3:      * </p>
1:25959e3:      */
1:25959e3:     public void test_03_customTool() throws Exception
1:25959e3:     {
1:25959e3:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:25959e3: 
1:25959e3:         // unknown tool name
1:25959e3:         expectExecutionError
1:25959e3:             (
1:25959e3:              dboConnection,
1:0196a8f:              UNKNOWN_TOOL,
1:25959e3:              "call syscs_util.syscs_register_tool( 'uknownToolName', true )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // no custom class name supplied
1:25959e3:         expectExecutionError
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              UNKNOWN_TOOL,
1:25959e3:              "call syscs_util.syscs_register_tool( 'customTool', true )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // supplied class does not implement OptionalTool
1:25959e3:         expectExecutionError
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              UNKNOWN_TOOL,
1:25959e3:              "call syscs_util.syscs_register_tool( 'customTool', true, 'java.lang.String' )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         //
1:25959e3:         // Register a custom tool.
1:25959e3:         //
1:25959e3: 
1:25959e3:         // first verify that the tool hasn't been run yet
1:25959e3:         expectCompilationError
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              UNKNOWN_ROUTINE,
1:25959e3:              "values toString( 100 )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // now register the tool
1:25959e3:         goodStatement
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool( 'customTool', true, 'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample' )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // run it
1:25959e3:         assertResults
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              "values toString( 100 )",
1:25959e3:              new String[][]
1:25959e3:              {
1:25959e3:                  { "100" },
1:25959e3:              },
1:25959e3:              false
1:25959e3:              );
1:25959e3: 
1:25959e3:         // unregister the tool
1:25959e3:         goodStatement
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool( 'customTool', false, 'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample' )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // verify that the tool was unregistered
1:25959e3:         expectCompilationError
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              UNKNOWN_ROUTINE,
1:25959e3:              "values toString( 100 )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         //
1:25959e3:         // Register a custom tool with a custom parameter.
1:25959e3:         //
1:25959e3: 
1:25959e3:         // first verify that the tool hasn't been run yet
1:25959e3:         expectCompilationError
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              UNKNOWN_ROUTINE,
1:25959e3:              "values foobar( 100 )"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // now register the tool
1:25959e3:         goodStatement
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool\n" +
1:25959e3:              "(\n" +
1:25959e3:              "    'customTool',\n" +
1:25959e3:              "    true,\n" +
1:25959e3:              "    'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample$VariableName',\n" +
1:25959e3:              "    'foobar'\n" +
1:25959e3:              ")\n"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // run it
1:25959e3:         assertResults
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              "values foobar( 100 )",
1:25959e3:              new String[][]
1:25959e3:              {
1:25959e3:                  { "100" },
1:25959e3:              },
1:25959e3:              false
1:25959e3:              );
1:25959e3: 
1:25959e3:         // unregister the tool
1:25959e3:         goodStatement
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              "call syscs_util.syscs_register_tool\n" +
1:25959e3:              "(\n" +
1:25959e3:              "    'customTool',\n" +
1:25959e3:              "    false,\n" +
1:25959e3:              "    'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample$VariableName',\n" +
1:25959e3:              "    'foobar'\n" +
1:25959e3:              ")\n"
1:25959e3:              );
1:25959e3: 
1:25959e3:         // verify that the tool was unregistered
1:25959e3:         expectCompilationError
1:25959e3:             (
1:25959e3:              dboConnection,
1:25959e3:              UNKNOWN_ROUTINE,
1:25959e3:              "values foobar( 100 )"
1:25959e3:              );
1:e081c85: 
1:25959e3:     }
1:ea335da:     
1:ea335da:     /**
1:ea335da:      * <p>
1:85e98cb:      * Test loading a customized optimizer tracer. See DERBY-6211.
1:85e98cb:      * </p>
1:85e98cb:      */
1:85e98cb:     public void test_04_customOptimizerTrace() throws Exception
1:85e98cb:     {
1:85e98cb:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:85e98cb: 
1:85e98cb:         goodStatement
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              "create function fullTrace() returns varchar( 32672 )\n" +
1:85e98cb:              "language java parameter style java no sql\n" +
1:85e98cb:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace.fullTrace'\n"
1:85e98cb:              );
1:85e98cb: 
1:85e98cb:         // install a custom tracer for the optimizer
1:85e98cb:         goodStatement
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              "call syscs_util.syscs_register_tool\n" +
1:85e98cb:              "(\n" +
1:85e98cb:              "    'optimizerTracing', true, 'custom',\n" +
1:85e98cb:              "    'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace'\n" +
1:85e98cb:              ")\n"
1:85e98cb:              );
1:85e98cb:         // run a couple queries
1:85e98cb:         goodStatement
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              "select tablename from sys.systables where 1=2"
1:85e98cb:              );
1:85e98cb:         goodStatement
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              "select columnname from sys.syscolumns where 1=2"
1:85e98cb:              );
1:85e98cb:         // unload the tracer
1:85e98cb:         goodStatement
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false )"
1:85e98cb:              );
1:85e98cb: 
1:85e98cb:         // verify that it actually did something
1:85e98cb:         assertResults
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              "values fullTrace()",
1:85e98cb:              new String[][]
1:85e98cb:              {
1:85e98cb:                  { "<text>select tablename from sys.systables where 1=2</text><text>select columnname from sys.syscolumns where 1=2</text><text>call syscs_util.syscs_register_tool( 'optimizerTracing', false )</text>" },
1:85e98cb:              },
1:85e98cb:              false
1:85e98cb:              );
1:85e98cb: 
1:85e98cb:         // drop the function
1:85e98cb:         goodStatement
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              "drop function fullTrace"
1:85e98cb:              );
1:85e98cb: 
1:85e98cb:         // no classname given
1:85e98cb:         expectExecutionError
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              UNEXPECTED_USER_EXCEPTION,
1:85e98cb:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'custom' )"
1:85e98cb:              );
1:85e98cb:         // class can't be found
1:85e98cb:         expectExecutionError
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              UNEXPECTED_USER_EXCEPTION,
1:85e98cb:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'custom', 'foo.bar.Wibble' )"
1:85e98cb:              );
1:85e98cb:         // error because class doesn't implement OptTrace
1:85e98cb:         expectExecutionError
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              UNEXPECTED_USER_EXCEPTION,
1:85e98cb:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'custom', 'java.lang.String' )"
1:85e98cb:              );
1:85e98cb:         // error because class doesn't have a 0-arg constructor
1:85e98cb:         expectExecutionError
1:85e98cb:             (
1:85e98cb:              dboConnection,
1:85e98cb:              UNEXPECTED_USER_EXCEPTION,
1:85e98cb:              "call syscs_util.syscs_register_tool\n" +
1:85e98cb:              "(\n" +
1:85e98cb:              "    'optimizerTracing', true, 'custom',\n" +
1:85e98cb:              "    'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace$BadSubclass'\n" +
1:85e98cb:              ")\n"
1:85e98cb:              );
1:85e98cb:     }
1:85e98cb: 
1:ea335da: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0196a8f
/////////////////////////////////////////////////////////////////////////
1:              UNKNOWN_TOOL,
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             OptionalToolsTest.class);
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b412f10
/////////////////////////////////////////////////////////////////////////
1:         // create a function to count the number of connections
1:         // managed by ForeignTableVTI
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create function countConnections() returns int\n" +
1:              "language java parameter style java no sql\n" +
1:              "external name 'org.apache.derby.vti.ForeignTableVTI.countConnections'\n"
1:              );
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertResults
1:             (
1:              dboConnection,
1:              "values countConnections()",
1:              new String[][] { { "1" } },
1:              false
1:              );
/////////////////////////////////////////////////////////////////////////
1:         assertResults
1:             (
1:              dboConnection,
1:              "values countConnections()",
1:              new String[][] { { "0" } },
1:              false
1:              );
/////////////////////////////////////////////////////////////////////////
1:         assertResults
1:             (
1:              dboConnection,
1:              "values countConnections()",
1:              new String[][] { { "0" } },
1:              false
1:              );
1:         goodStatement( dboConnection, "drop function countConnections" );
commit:85e98cb
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Test loading a customized optimizer tracer. See DERBY-6211.
1:      * </p>
1:      */
1:     public void test_04_customOptimizerTrace() throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1: 
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create function fullTrace() returns varchar( 32672 )\n" +
1:              "language java parameter style java no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace.fullTrace'\n"
1:              );
1: 
1:         // install a custom tracer for the optimizer
1:         goodStatement
1:             (
1:              dboConnection,
1:              "call syscs_util.syscs_register_tool\n" +
1:              "(\n" +
1:              "    'optimizerTracing', true, 'custom',\n" +
1:              "    'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace'\n" +
1:              ")\n"
1:              );
1:         // run a couple queries
1:         goodStatement
1:             (
1:              dboConnection,
1:              "select tablename from sys.systables where 1=2"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "select columnname from sys.syscolumns where 1=2"
1:              );
1:         // unload the tracer
1:         goodStatement
1:             (
1:              dboConnection,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false )"
1:              );
1: 
1:         // verify that it actually did something
1:         assertResults
1:             (
1:              dboConnection,
1:              "values fullTrace()",
1:              new String[][]
1:              {
1:                  { "<text>select tablename from sys.systables where 1=2</text><text>select columnname from sys.syscolumns where 1=2</text><text>call syscs_util.syscs_register_tool( 'optimizerTracing', false )</text>" },
1:              },
1:              false
1:              );
1: 
1:         // drop the function
1:         goodStatement
1:             (
1:              dboConnection,
1:              "drop function fullTrace"
1:              );
1: 
1:         // no classname given
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNEXPECTED_USER_EXCEPTION,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'custom' )"
1:              );
1:         // class can't be found
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNEXPECTED_USER_EXCEPTION,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'custom', 'foo.bar.Wibble' )"
1:              );
1:         // error because class doesn't implement OptTrace
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNEXPECTED_USER_EXCEPTION,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'custom', 'java.lang.String' )"
1:              );
1:         // error because class doesn't have a 0-arg constructor
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNEXPECTED_USER_EXCEPTION,
1:              "call syscs_util.syscs_register_tool\n" +
1:              "(\n" +
1:              "    'optimizerTracing', true, 'custom',\n" +
1:              "    'org.apache.derbyTesting.functionTests.tests.lang.DummyOptTrace$BadSubclass'\n" +
1:              ")\n"
1:              );
1:     }
1: 
commit:25959e3
/////////////////////////////////////////////////////////////////////////
1:     protected   static  final   String  UNKNOWN_TOOL = "X0Y88";
1:     protected   static  final   String  UNKNOWN_ROUTINE = "42Y03";
/////////////////////////////////////////////////////////////////////////
1:              "call syscs_util.syscs_register_tool( 'databaseMetaData', true )"
/////////////////////////////////////////////////////////////////////////
1:         goodStatement( dboConnection, "call syscs_util.syscs_register_tool( 'databaseMetaData', true )" );
/////////////////////////////////////////////////////////////////////////
1:         goodStatement( dboConnection, "call syscs_util.syscs_register_tool( 'databaseMetaData', false )" );
/////////////////////////////////////////////////////////////////////////
1:              "call syscs_util.syscs_register_tool( 'foreignViews', true )"
/////////////////////////////////////////////////////////////////////////
1:              "call syscs_util.syscs_register_tool( 'foreignViews', true, '" + foreignURL + "' )"
/////////////////////////////////////////////////////////////////////////
1:              "call syscs_util.syscs_register_tool( 'foreignViews', false )"
1:              "call syscs_util.syscs_register_tool( 'foreignViews', false, '" + foreignURL + "' )"
/////////////////////////////////////////////////////////////////////////
1:              "call syscs_util.syscs_register_tool( 'foreignViews', false, '" + foreignURL + "' )"
1:              "call syscs_util.syscs_register_tool( 'foreignViews', true, '" + foreignURL + "', 'XYZ_' )"
/////////////////////////////////////////////////////////////////////////
1:              "call syscs_util.syscs_register_tool( 'foreignViews', false, '" + foreignURL + "', 'XYZ_' )"
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test loading custom, user-supplied tools.
1:      * </p>
1:      */
1:     public void test_03_customTool() throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1: 
1:         // unknown tool name
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNKNOWN_TOOL,
1:              "call syscs_util.syscs_register_tool( 'uknownToolName', true )"
1:              );
1: 
1:         // no custom class name supplied
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNKNOWN_TOOL,
1:              "call syscs_util.syscs_register_tool( 'customTool', true )"
1:              );
1: 
1:         // supplied class does not implement OptionalTool
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNEXPECTED_USER_EXCEPTION,
1:              "call syscs_util.syscs_register_tool( 'customTool', true, 'java.lang.String' )"
1:              );
1: 
1:         //
1:         // Register a custom tool.
1:         //
1: 
1:         // first verify that the tool hasn't been run yet
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              UNKNOWN_ROUTINE,
1:              "values toString( 100 )"
1:              );
1: 
1:         // now register the tool
1:         goodStatement
1:             (
1:              dboConnection,
1:              "call syscs_util.syscs_register_tool( 'customTool', true, 'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample' )"
1:              );
1: 
1:         // run it
1:         assertResults
1:             (
1:              dboConnection,
1:              "values toString( 100 )",
1:              new String[][]
1:              {
1:                  { "100" },
1:              },
1:              false
1:              );
1: 
1:         // unregister the tool
1:         goodStatement
1:             (
1:              dboConnection,
1:              "call syscs_util.syscs_register_tool( 'customTool', false, 'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample' )"
1:              );
1: 
1:         // verify that the tool was unregistered
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              UNKNOWN_ROUTINE,
1:              "values toString( 100 )"
1:              );
1: 
1:         //
1:         // Register a custom tool with a custom parameter.
1:         //
1: 
1:         // first verify that the tool hasn't been run yet
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              UNKNOWN_ROUTINE,
1:              "values foobar( 100 )"
1:              );
1: 
1:         // now register the tool
1:         goodStatement
1:             (
1:              dboConnection,
1:              "call syscs_util.syscs_register_tool\n" +
1:              "(\n" +
1:              "    'customTool',\n" +
1:              "    true,\n" +
1:              "    'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample$VariableName',\n" +
1:              "    'foobar'\n" +
1:              ")\n"
1:              );
1: 
1:         // run it
1:         assertResults
1:             (
1:              dboConnection,
1:              "values foobar( 100 )",
1:              new String[][]
1:              {
1:                  { "100" },
1:              },
1:              false
1:              );
1: 
1:         // unregister the tool
1:         goodStatement
1:             (
1:              dboConnection,
1:              "call syscs_util.syscs_register_tool\n" +
1:              "(\n" +
1:              "    'customTool',\n" +
1:              "    false,\n" +
1:              "    'org.apache.derbyTesting.functionTests.tests.lang.OptionalToolExample$VariableName',\n" +
1:              "    'foobar'\n" +
1:              ")\n"
1:              );
1: 
1:         // verify that the tool was unregistered
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              UNKNOWN_ROUTINE,
1:              "values foobar( 100 )"
1:              );
1: 
1:     }
commit:e081c85
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:     protected   static  final   String  NO_SUCH_TABLE_FUNCTION = "42ZB4";
1:     protected   static  final   String  UNEXPECTED_USER_EXCEPTION = "38000";
1:     protected   static  final   String  MISSING_SCHEMA = "42Y07";
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      RUTH = "RUTH";
1:     private static  final   String      ALICE = "ALICE";
1:     private static  final   String      FRANK = "FRANK";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
1: 
1:     private static  final   String      FOREIGN_DB = "foreignDB";
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(OptionalToolsTest.class);        
1:         Test        test = DatabasePropertyTestSetup.builtinAuthentication
1:             ( suite, LEGAL_USERS, "optionalToolsPermissions" );
1:         test = TestConfiguration.sqlAuthorizationDecorator( test );
1:         test = TestConfiguration.additionalDatabaseDecorator( test, FOREIGN_DB );
1:         return test;
/////////////////////////////////////////////////////////////////////////
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  ruthConnection = openUserConnection( RUTH );
1:         // only the dbo can register tools
1:         expectExecutionError
1:             (
1:              ruthConnection,
1:              LACK_EXECUTE_PRIV,
0:              "call syscs_util.syscs_register_tool( 'dbmd', true )"
1:              );
1: 
1:         // create a dummy table just to force the schema to be created
1:         goodStatement( dboConnection, "create table t( a int )" );
1: 
1:         expectCompilationError( dboConnection, NO_SUCH_TABLE_FUNCTION, getTypeInfo );
0:         goodStatement( dboConnection, "call syscs_util.syscs_register_tool( 'dbmd', true )" );
1:              dboConnection,
/////////////////////////////////////////////////////////////////////////
0:         goodStatement( dboConnection, "call syscs_util.syscs_register_tool( 'dbmd', false )" );
1:         expectCompilationError( dboConnection, NO_SUCH_TABLE_FUNCTION, getTypeInfo );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Test the optional package of views on an external database.
1:      * </p>
1:      */
1:     public void test_02_foreignDBViews() throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  foreignFrankConnection = getTestConfiguration().openConnection( FOREIGN_DB, FRANK, FRANK );
1:         Connection  foreignAliceConnection = getTestConfiguration().openConnection( FOREIGN_DB, ALICE, ALICE );
1: 
1:         //
1:         // Create the foreign database.
1:         //
1:         goodStatement
1:             (
1:              foreignFrankConnection,
1:              "create table employee\n" +
1:              "(\n" +
1:              "    firstName   varchar( 50 ),\n" +
1:              "    lastName    varchar( 50 ),\n" +
1:              "    employeeID  int primary key\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              foreignFrankConnection,
1:              "insert into employee values ( 'Billy', 'Goatgruff', 1 )\n"
1:              );
1:         goodStatement
1:             (
1:              foreignFrankConnection,
1:              "insert into employee values ( 'Mary', 'Hadalittlelamb', 2 )\n"
1:              );
1:         goodStatement
1:             (
1:              foreignAliceConnection,
1:              "create table stars\n" +
1:              "(\n" +
1:              "    name   varchar( 50 ),\n" +
1:              "    magnitude int,\n" +
1:              "    starID  int primary key\n" +
1:              ")\n"
1:              );
1:         goodStatement
1:             (
1:              foreignAliceConnection,
1:              "insert into stars values ( 'Polaris', 100, 1 )\n"
1:              );
1:         
1:         // now work in the database where we will create views
1:         String      foreignURL = "jdbc:derby:" +
1:             getTestConfiguration().getPhysicalDatabaseName( FOREIGN_DB ) +
1:             ";user=" + TEST_DBO + ";password=" + TEST_DBO;
1:         String      employeeSelect = "select * from frank.employee order by employeeID";
1:         String      starSelect = "select * from alice.stars order by starID";
1:         String[][]   employeeResult = new String[][]
1:             {
1:                 { "Billy", "Goatgruff", "1" },
1:                 { "Mary", "Hadalittlelamb", "2" },
1:             };
1:         String[][]  starResult = new String[][]
1:             {
1:                 { "Polaris", "100", "1" },
1:             };
1: 
1:         // wrong number of arguments
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNEXPECTED_USER_EXCEPTION,
0:              "call syscs_util.syscs_register_tool( 'fdbv', true )"
1:              );
1: 
1:         // should fail because the view and its schema don't exist
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              MISSING_SCHEMA,
1:              employeeSelect
1:              );
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              MISSING_SCHEMA,
1:              starSelect
1:              );
1: 
1:         // should work
1:         goodStatement
1:             (
1:              dboConnection,
0:              "call syscs_util.syscs_register_tool( 'fdbv', true, '" + foreignURL + "' )"
1:              );
1: 
1:         // views should have been created against the foreign database
1:         assertResults
1:             (
1:              dboConnection,
1:              employeeSelect,
1:              employeeResult,
1:              false
1:              );
1:         assertResults
1:             (
1:              dboConnection,
1:              starSelect,
1:              starResult,
1:              false
1:              );
1:         
1:         // wrong number of arguments
1:         expectExecutionError
1:             (
1:              dboConnection,
1:              UNEXPECTED_USER_EXCEPTION,
0:              "call syscs_util.syscs_register_tool( 'fdbv', false )"
1:              );
1: 
1:         // should work
1:         goodStatement
1:             (
1:              dboConnection,
0:              "call syscs_util.syscs_register_tool( 'fdbv', false, '" + foreignURL + "' )"
1:              );
1: 
1:         // should fail because the view and its schema were dropped when the tool was unloaded
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              MISSING_SCHEMA,
1:              employeeSelect
1:              );
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              MISSING_SCHEMA,
1:              starSelect
1:              );
1: 
1:         // unregistration should be idempotent
1:         goodStatement
1:             (
1:              dboConnection,
0:              "call syscs_util.syscs_register_tool( 'fdbv', false, '" + foreignURL + "' )"
1:              );
1: 
1:         // register with a schema prefix
1:         goodStatement
1:             (
1:              dboConnection,
0:              "call syscs_util.syscs_register_tool( 'fdbv', true, '" + foreignURL + "', 'XYZ_' )"
1:              );
1:         employeeSelect = "select * from xyz_frank.employee order by employeeID";
1:         starSelect = "select * from xyz_alice.stars order by starID";
1: 
1:         // views should have been created against the foreign database
1:         assertResults
1:             (
1:              dboConnection,
1:              employeeSelect,
1:              employeeResult,
1:              false
1:              );
1:         assertResults
1:             (
1:              dboConnection,
1:              starSelect,
1:              starResult,
1:              false
1:              );
1: 
1:         // drop the views
1:         goodStatement
1:             (
1:              dboConnection,
0:              "call syscs_util.syscs_register_tool( 'fdbv', false, '" + foreignURL + "', 'XYZ_' )"
1:              );
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              MISSING_SCHEMA,
1:              employeeSelect
1:              );
1:         expectCompilationError
1:             (
1:              dboConnection,
1:              MISSING_SCHEMA,
1:              starSelect
1:              );
commit:ea335da
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.OptionalToolsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.CallableStatement;
1: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.ParameterMetaData;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.Blob;
0: import java.sql.Clob;
0: import java.util.HashMap;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.Decorator;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * <p>
1:  * Test optional tools. See DERBY-6022.
1:  * </p>
1:  */
1: public class OptionalToolsTest  extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     protected static final    String NO_SUCH_TABLE_FUNCTION = "42ZB4";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public OptionalToolsTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite       suite = new TestSuite( "OptionalToolsTest" );
1: 
0:         suite.addTest( TestConfiguration.defaultSuite(OptionalToolsTest.class) );
1: 
0:         return suite;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test the optional package of routines which wrap the DatabaseMetaData methods.
1:      * </p>
1:      */
1:     public void test_01_dbmdWrapper() throws Exception
1:     {
0:         Connection conn = getConnection();
1:         String  getTypeInfo = "select type_name, minimum_scale, maximum_scale from table( getTypeInfo() ) s";
1: 
1:         // the routines don't exist unless you register them
0:         expectCompilationError( NO_SUCH_TABLE_FUNCTION, getTypeInfo );
1: 
1:         // now register the database metadata wrappers
0:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'dbmd', true )" );
1: 
1:         // now the routine exists
1:         assertResults
1:             (
0:              conn,
1:              getTypeInfo,
1:              new String[][]
1:              {
1:                  { "BIGINT", "0", "0" },
1:                  { "LONG VARCHAR FOR BIT DATA", null, null },
1:                  { "VARCHAR () FOR BIT DATA", null, null },
1:                  { "CHAR () FOR BIT DATA", null, null },
1:                  { "LONG VARCHAR", null, null },
1:                  { "CHAR", null, null },
1:                  { "NUMERIC", "0", "31" },
1:                  { "DECIMAL", "0", "31" },
1:                  { "INTEGER", "0", "0" },
1:                  { "SMALLINT", "0", "0" },
1:                  { "FLOAT", null, null },
1:                  { "REAL", null, null },
1:                  { "DOUBLE", null, null },
1:                  { "VARCHAR", null, null },
1:                  { "BOOLEAN", null, null },
1:                  { "DATE", "0", "0" },
1:                  { "TIME", "0", "0" },
1:                  { "TIMESTAMP", "0", "9" },
1:                  { "OBJECT", null, null },
1:                  { "BLOB", null, null }, 
1:                  { "CLOB", null, null },
1:                  { "XML", null, null },
1:              },
1:              false
1:              );
1: 
1:         // now unregister the database metadata wrappers
0:         goodStatement( conn, "call syscs_util.syscs_register_tool( 'dbmd', false )" );
1: 
1:         // the routines don't exist anymore
0:         expectCompilationError( NO_SUCH_TABLE_FUNCTION, getTypeInfo );
1:     }
1:     
1: }
1: 
============================================================================