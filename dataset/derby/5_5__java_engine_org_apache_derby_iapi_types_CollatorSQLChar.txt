3:d0ed190: /*
20:d0ed190: 
1:d0ed190:    Derby - Class org.apache.derby.iapi.types.CollatorSQLChar
1:d0ed190:  
1:d0ed190:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d0ed190:    contributor license agreements.  See the NOTICE file distributed with
1:d0ed190:    this work for additional information regarding copyright ownership.
1:d0ed190:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d0ed190:    (the "License"); you may not use this file except in compliance with
1:d0ed190:    the License.  You may obtain a copy of the License at
1:d0ed190: 
1:d0ed190:       http://www.apache.org/licenses/LICENSE-2.0
1:d0ed190: 
1:d0ed190:    Unless required by applicable law or agreed to in writing, software
1:d0ed190:    distributed under the License is distributed on an "AS IS" BASIS,
1:d0ed190:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0ed190:    See the License for the specific language governing permissions and
1:d0ed190:    limitations under the License.
1:d0ed190: 
10:d0ed190:  */
1:d0ed190: 
1:d0ed190: package org.apache.derby.iapi.types;
1:d0ed190: 
1:d0ed190: import org.apache.derby.iapi.error.StandardException;
1:3a2db6b: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:d0ed190: 
1:d0ed190: import java.text.RuleBasedCollator;
1:d0ed190: 
7:d0ed190: /**
1:442b530:  * CollatorSQLChar class differs from SQLChar based on how the 2 classes use 
1:442b530:  * different collations to collate their data. SQLChar uses Derby's default 
1:442b530:  * collation which is UCS_BASIC. Whereas, this class uses the RuleBasedCollator  
1:442b530:  * object that was passed to it in it's constructor and that RuleBasedCollator   
1:442b530:  * object decides the collation.
5:d0ed190:  * 
1:d0ed190:  * In Derby 10.3, this class will be passed a RuleBasedCollator which is based 
1:d0ed190:  * on the database's territory. In future releases of Derby, this class can be 
1:3a2db6b:  * used to do other kinds of collations like case-insensitive collation etc by  
1:d0ed190:  * just passing an appropriate RuleBasedCollator object for that kind of 
1:d0ed190:  * collation.
1:d0ed190:  */
1:403684d: class CollatorSQLChar extends SQLChar implements CollationElementsInterface
14:d0ed190: {
1:726b66f: 	private WorkHorseForCollatorDatatypes holderForCollationSensitiveInfo;
1:d0ed190: 	/*
1:d0ed190: 	 * constructors
1:442b530: 	 */
1:442b530:     /**
1:726b66f:      * Create SQL CHAR value initially set to NULL that
1:726b66f:      * performs collation according to collatorForCharacterDatatypes 
1:442b530:      */
1:726b66f:     CollatorSQLChar(RuleBasedCollator collatorForCharacterDatatypes)
1:d0ed190:     {
1:726b66f:         setCollator(collatorForCharacterDatatypes);
1:3a2db6b:     }
1:3a2db6b:     
1:3a2db6b:     /**
1:726b66f:      * Create SQL CHAR value initially set to value that
1:726b66f:      * performs collation according to collatorForCharacterDatatypes 
1:3a2db6b:      */
1:726b66f: 	CollatorSQLChar(String val, RuleBasedCollator collatorForCharacterDatatypes)
1:3a2db6b: 	{
1:d0ed190: 		super(val);
1:726b66f:         setCollator(collatorForCharacterDatatypes);
1:3a2db6b: 	}
1:d0ed190: 
1:442b530: 	/**
1:d0ed190: 	 * Set the RuleBasedCollator for this instance of CollatorSQLChar. It will
1:d0ed190: 	 * be used to do the collation.
1:d0ed190: 	 */
1:442b530: 	private void setCollator(RuleBasedCollator collatorForCharacterDatatypes)
1:3a2db6b: 	{
1:3a2db6b: 		holderForCollationSensitiveInfo = 
1:3a2db6b: 			new WorkHorseForCollatorDatatypes(collatorForCharacterDatatypes, this);
1:3a2db6b: 	}
1:9460d4c: 
1:9460d4c: 	/**
1:9460d4c: 	 * Get the RuleBasedCollator for this instance of CollatorSQLChar. It 
1:9460d4c: 	 * will be used to do the collation.
1:9460d4c: 	 * 
1:9460d4c: 	 * @return	The Collator object which should be used for collation 
1:9460d4c: 	 * operation on this object
1:9460d4c: 	 */
1:9460d4c: 	protected RuleBasedCollator getCollatorForCollation() throws StandardException
1:9460d4c: 	{
1:9460d4c: 		return holderForCollationSensitiveInfo.getCollatorForCollation();
1:9460d4c: 	}
1:3a2db6b: 
1:cf42729:     // Implementation of CollationElementsInterface interface
1:cf42729: 
1:cf42729:     public boolean hasSingleCollationElement() throws StandardException {
1:cf42729:         return holderForCollationSensitiveInfo.hasSingleCollationElement();
1:cf42729:     }
1:3a2db6b: 
1:3a2db6b: 	/*
1:3a2db6b: 	 * DataValueDescriptor interface
1:3a2db6b: 	 */
1:3a2db6b: 
1:854dd10:     /**
1:854dd10:      * @see DataValueDescriptor#cloneValue
1:854dd10:      */
1:854dd10:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:3a2db6b: 	{
1:3a2db6b: 		try
1:3a2db6b: 		{
1:3a2db6b: 			return new CollatorSQLChar(getString(), 
1:3a2db6b: 					holderForCollationSensitiveInfo.getCollatorForCollation());
1:3a2db6b: 		}
1:3a2db6b: 		catch (StandardException se)
1:3a2db6b: 		{
1:3a2db6b: 			if (SanityManager.DEBUG)
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", se);
1:3a2db6b: 			return null;
1:3a2db6b: 		}
15:d0ed190: 	}
1:d0ed190: 
1:d0ed190: 	/**
1:3a2db6b: 	 * @see DataValueDescriptor#getNewNull
1:d0ed190: 	 */
1:3a2db6b: 	public DataValueDescriptor getNewNull()
1:d0ed190: 	{
1:726b66f: 		CollatorSQLChar result = new CollatorSQLChar(
1:3a2db6b: 				holderForCollationSensitiveInfo.getCollatorForCollation());
1:3a2db6b: 		return result;
1:d0ed190: 	}
1:d0ed190: 
1:d0ed190: 	/**
1:0cab10f: 	 * We do not anticipate this method on collation sensitive DVD to be
1:0cab10f: 	 * ever called in Derby 10.3 In future, when Derby will start supporting
1:0cab10f: 	 * SQL standard COLLATE clause, this method might get called on the
1:0cab10f: 	 * collation sensitive DVDs.
1:0cab10f: 	 *  
1:0cab10f: 	 * @see StringDataValue#getValue(RuleBasedCollator) 
1:0cab10f: 	 */
1:0cab10f: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1:0cab10f: 	{
1:0cab10f: 		if (collatorForComparison != null)
1:0cab10f: 		{
1:0cab10f: 			//non-null collatorForComparison means use this collator sensitive
1:0cab10f: 			//implementation of SQLChar
1:0cab10f: 		    setCollator(collatorForComparison);
1:0cab10f: 		    return this;			
1:0cab10f: 		} else {
1:0cab10f: 			//null collatorForComparison means use UCS_BASIC for collation.
1:0cab10f: 			//For that, we need to use the base class SQLChar
1:0cab10f: 			SQLChar s = new SQLChar();
1:0cab10f: 			s.copyState(this);
1:0cab10f: 			return s;
1:0cab10f: 		}
1:0cab10f: 	}
1:3841b98: 	
1:7076568: 	/** @see SQLChar#stringCompare(SQLChar, SQLChar) */
1:3841b98: 	 protected int stringCompare(SQLChar char1, SQLChar char2)
1:3841b98: 	 throws StandardException
1:3841b98: 	 {
1:7076568: 		 return holderForCollationSensitiveInfo.stringCompare(char1, char2);
1:3841b98: 	 }
1:0cab10f: 
1:9294126:      /**
1:9294126:       * Return a hash code that is consistent with
1:9294126:       * {@link #stringCompare(SQLChar, SQLChar)}.
1:9294126:       *
1:9294126:       * @return hash code
1:9294126:       */
1:9294126:      public int hashCode() {
1:9294126:          return hashCodeForCollation();
1:9294126:      }
1:9294126: 
1:0cab10f: 	/**
1:d0ed190: 	 * This method implements the like function for char (with no escape value).
1:442b530: 	 * The difference in this method and the same method in superclass is that
1:442b530: 	 * here we use special Collator object to do the comparison rather than
1:442b530: 	 * using the Collator object associated with the default jvm locale.
1:d0ed190: 	 *
1:d0ed190: 	 * @param pattern		The pattern to use
1:d0ed190: 	 *
1:d0ed190: 	 * @return	A SQL boolean value telling whether the first operand is
1:d0ed190: 	 *			like the second operand
1:d0ed190: 	 *
1:d0ed190: 	 * @exception StandardException		Thrown on error
1:d0ed190: 	 */
1:d0ed190: 	public BooleanDataValue like(DataValueDescriptor pattern)
2:d0ed190: 								throws StandardException
1:d0ed190: 	{
1:3a2db6b: 		return(holderForCollationSensitiveInfo.like(pattern));
1:d0ed190: 	}
1:3841b98: 	
1:3841b98: 	/**
1:3841b98: 	 * This method implements the like function for char with an escape value.
1:3841b98: 	 * 
1:3841b98: 	 * @param pattern		The pattern to use
1:3841b98: 	 * 								 
1:3841b98: 	 * @return	A SQL boolean value telling whether the first operand is
1:3841b98: 	 * like the second operand
1:3841b98: 	 *
1:3841b98: 	 * @exception StandardException		Thrown on error
1:3841b98: 	 */
1:3841b98: 	public BooleanDataValue like(DataValueDescriptor pattern,
1:3841b98: 			DataValueDescriptor escape) throws StandardException
1:3841b98: 	{
1:3841b98: 		return(holderForCollationSensitiveInfo.like(pattern, escape));
1:3841b98: 	}
1:d0ed190: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cf42729
/////////////////////////////////////////////////////////////////////////
1:     // Implementation of CollationElementsInterface interface
1: 
1:     public boolean hasSingleCollationElement() throws StandardException {
1:         return holderForCollationSensitiveInfo.hasSingleCollationElement();
1:     }
commit:9294126
/////////////////////////////////////////////////////////////////////////
1:      /**
1:       * Return a hash code that is consistent with
1:       * {@link #stringCompare(SQLChar, SQLChar)}.
1:       *
1:       * @return hash code
1:       */
1:      public int hashCode() {
1:          return hashCodeForCollation();
1:      }
1: 
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", se);
commit:43059cd
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see DataValueDescriptor#cloneValue
1:      */
1:     public DataValueDescriptor cloneValue(boolean forceMaterialization)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:9460d4c
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get the RuleBasedCollator for this instance of CollatorSQLChar. It 
1: 	 * will be used to do the collation.
1: 	 * 
1: 	 * @return	The Collator object which should be used for collation 
1: 	 * operation on this object
1: 	 */
1: 	protected RuleBasedCollator getCollatorForCollation() throws StandardException
1: 	{
1: 		return holderForCollationSensitiveInfo.getCollatorForCollation();
1: 	}
commit:7076568
/////////////////////////////////////////////////////////////////////////
1: 	/** @see SQLChar#stringCompare(SQLChar, SQLChar) */
1: 		 return holderForCollationSensitiveInfo.stringCompare(char1, char2);
commit:3841b98
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	/** @see SQLChar.stringCompare(SQLChar, SQLChar) */
1: 	 protected int stringCompare(SQLChar char1, SQLChar char2)
1: 	 throws StandardException
1: 	 {
0: 		 return holderForCollationSensitiveInfo.stringCompare(char2);
1: 	 }
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * This method implements the like function for char with an escape value.
1: 	 * 
1: 	 * @param pattern		The pattern to use
1: 	 * 								 
1: 	 * @return	A SQL boolean value telling whether the first operand is
1: 	 * like the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public BooleanDataValue like(DataValueDescriptor pattern,
1: 			DataValueDescriptor escape) throws StandardException
1: 	{
1: 		return(holderForCollationSensitiveInfo.like(pattern, escape));
1: 	}
commit:0cab10f
/////////////////////////////////////////////////////////////////////////
0: 	protected void setCollator(RuleBasedCollator collatorForCharacterDatatypes)
/////////////////////////////////////////////////////////////////////////
1: 	 * We do not anticipate this method on collation sensitive DVD to be
1: 	 * ever called in Derby 10.3 In future, when Derby will start supporting
1: 	 * SQL standard COLLATE clause, this method might get called on the
1: 	 * collation sensitive DVDs.
1: 	 *  
1: 	 * @see StringDataValue#getValue(RuleBasedCollator) 
1: 	 */
1: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1: 	{
1: 		if (collatorForComparison != null)
1: 		{
1: 			//non-null collatorForComparison means use this collator sensitive
1: 			//implementation of SQLChar
1: 		    setCollator(collatorForComparison);
1: 		    return this;			
1: 		} else {
1: 			//null collatorForComparison means use UCS_BASIC for collation.
1: 			//For that, we need to use the base class SQLChar
1: 			SQLChar s = new SQLChar();
1: 			s.copyState(this);
1: 			return s;
1: 		}
1: 	}
1: 
1: 	/**
commit:3a2db6b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  * used to do other kinds of collations like case-insensitive collation etc by  
0: public class CollatorSQLChar extends SQLChar implements CollationElementsInterface
0: 	WorkHorseForCollatorDatatypes holderForCollationSensitiveInfo;
/////////////////////////////////////////////////////////////////////////
1: 		holderForCollationSensitiveInfo = 
1: 			new WorkHorseForCollatorDatatypes(collatorForCharacterDatatypes, this);
/////////////////////////////////////////////////////////////////////////
0: 		holderForCollationSensitiveInfo = 
0: 			new WorkHorseForCollatorDatatypes(collatorForCharacterDatatypes, this);
1: 	}
1: 	
0: 	/** @see CollationElementsInterface#getCollationElementsForString */
0: 	public int[] getCollationElementsForString() throws StandardException 
1: 	{
0: 		return holderForCollationSensitiveInfo.getCollationElementsForString();
1: 	}
1: 
0: 	/** @see CollationElementsInterface#getCountOfCollationElements */
0: 	public int getCountOfCollationElements()
1: 	{
0: 		return holderForCollationSensitiveInfo.getCountOfCollationElements();
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/**
0: 	 * @see DataValueDescriptor#getClone
1: 	 */
0: 	public DataValueDescriptor getClone()
1: 	{
1: 		try
1: 		{
1: 			return new CollatorSQLChar(getString(), 
1: 					holderForCollationSensitiveInfo.getCollatorForCollation());
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unexpected exception " + se);
1: 			return null;
1: 		}
1: 	 * @see DataValueDescriptor#getNewNull
1: 	public DataValueDescriptor getNewNull()
0: 		CollatorSQLChar result = new CollatorSQLChar();
0: 		result.setCollator(
1: 				holderForCollationSensitiveInfo.getCollatorForCollation());
1: 		return result;
/////////////////////////////////////////////////////////////////////////
1: 		return(holderForCollationSensitiveInfo.like(pattern));
commit:442b530
/////////////////////////////////////////////////////////////////////////
1:  * CollatorSQLChar class differs from SQLChar based on how the 2 classes use 
1:  * different collations to collate their data. SQLChar uses Derby's default 
1:  * collation which is UCS_BASIC. Whereas, this class uses the RuleBasedCollator  
1:  * object that was passed to it in it's constructor and that RuleBasedCollator   
1:  * object decides the collation.
/////////////////////////////////////////////////////////////////////////
0: public class CollatorSQLChar extends SQLChar
0: 	/** Use this object for collation on character datatypes */
0: 	RuleBasedCollator collatorForCharacterDatatypes;
1: 	/**
0: 	 * Following is the array holding a series of collation elements for the
0: 	 * string. It will be used in the like method 
1: 	 */
1: 	/** 
0: 	 * Number of valid collation elements in the array above. Note that this 
0: 	 * might be smaller than the actual size of the array above
1: 	 */
/////////////////////////////////////////////////////////////////////////
0: 	public CollatorSQLChar(String val, RuleBasedCollator collatorForCharacterDatatypes)
0: 		this.collatorForCharacterDatatypes = collatorForCharacterDatatypes;
1: 	private void setCollator(RuleBasedCollator collatorForCharacterDatatypes)
0: 		this.collatorForCharacterDatatypes = collatorForCharacterDatatypes;
/////////////////////////////////////////////////////////////////////////
0: 		CollationElementIterator cei = collatorForCharacterDatatypes.getCollationElementIterator(getString());
/////////////////////////////////////////////////////////////////////////
1: 	 * The difference in this method and the same method in superclass is that
1: 	 * here we use special Collator object to do the comparison rather than
1: 	 * using the Collator object associated with the default jvm locale.
/////////////////////////////////////////////////////////////////////////
0: 				collatorForCharacterDatatypes);
/////////////////////////////////////////////////////////////////////////
0: 			return new CollatorSQLChar(getString(), collatorForCharacterDatatypes);
/////////////////////////////////////////////////////////////////////////
0: 		result.setCollator(collatorForCharacterDatatypes);
commit:d0ed190
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.CollatorSQLChar
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.text.CollationElementIterator;
1: import java.text.RuleBasedCollator;
1: 
1: /**
0:  * CollatorSQLChar satisfies the DataValueDescriptor
0:  * interfaces (i.e., OrderableDataType). It implements an String holder,
0:  * e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because OrderableDataType is a subclass of DataType,
0:  * CollatorSQLChar can play a role in either a DataType/ValueRow
0:  * or a OrderableDataType/KeyRow, interchangeably.
1:  * 
0:  * This class differs from SQLChar based on how the 2 classes use different
0:  * collations to collate their data. SQLChar uses Derby's default collation
0:  * which is UCS_BASIC. Whereas, this class uses the RuleBasedCollator object 
0:  * that was passed to it in it's constructor and that RuleBasedCollator object  
0:  * decides the collation.
1:  * 
1:  * In Derby 10.3, this class will be passed a RuleBasedCollator which is based 
1:  * on the database's territory. In future releases of Derby, this class can be 
0:  * used to do other kinds of collation like case-insensitive collation etc by  
1:  * just passing an appropriate RuleBasedCollator object for that kind of 
1:  * collation.
1:  */
0: public class CollatorSQLChar
0: 	extends SQLChar
1: {
0: 	//Use this object for collation
0: 	RuleBasedCollator rbc;
0: 	//Following is the array holding a series of collation elements for the 
0: 	//string. It will be used in the like method 
0: 	private int[]	collationElementsForString;
0: 	//number of valid collation elements in the array above. 
0: 	private int		countOfCollationElements;
1: 
1: 	/*
1: 	 * constructors
1: 	 */
1: 
1: 	/**
0: 		no-arg constructor, required by Formattable.
1: 	*/
0: 	public CollatorSQLChar()
1: 	{
1: 	}
1: 
0: 	public CollatorSQLChar(String val, RuleBasedCollator rbc)
1: 	{
1: 		super(val);
0: 		this.rbc = rbc;
1: 	}
1: 
1: 	/**
1: 	 * Set the RuleBasedCollator for this instance of CollatorSQLChar. It will
1: 	 * be used to do the collation.
1: 	 * 
0: 	 * @return an array of collation elements for the string
0: 	 * @throws StandardException
1: 	 */
0: 	private void setCollator(RuleBasedCollator rbc)
1: 	{
0: 		this.rbc = rbc;
1: 	}
1: 
1: 	/**
0: 	 * This method translates the string into a series of collation elements.
0: 	 * These elements will get used in the like method.
1: 	 * 
0: 	 * @return an array of collation elements for the string
0: 	 * @throws StandardException
1: 	 */
0: 	private int[] getCollationElementsForString()
1: 		throws StandardException
1: 	{
0: 		if (isNull())
1: 		{
0: 			return (int[]) null;
1: 		}
1: 
0: 		if (collationElementsForString != null)
1: 		{
0: 			return collationElementsForString;
1: 		}
1: 
0: 		// countOfCollationElements should always be 0 when collationElementsForString is null
0: 		if (SanityManager.DEBUG)
1: 		{
0: 			if (countOfCollationElements != 0)
1: 			{
0: 				SanityManager.THROWASSERT(
0: 					"countOfCollationElements expected to be 0, not " + countOfCollationElements);
1: 			}
1: 		}
1: 
0: 		collationElementsForString = new int[getLength()];
1: 
0: 		CollationElementIterator cei = rbc.getCollationElementIterator(getString());
0: 		int nextInt;
0: 		while ((nextInt = cei.next()) != CollationElementIterator.NULLORDER)
1: 		{
0: 			/* Believe it or not, a String might have more
0: 			 * collation elements than characters.
0: 			 * So, we handle that case by increasing the int array
0: 			 * by 5 and copying array elements.
1: 			 */
0: 			if (countOfCollationElements == collationElementsForString.length)
1: 			{
0: 				int[] expandedArray = new int[countOfCollationElements + 5];
0: 				System.arraycopy(collationElementsForString, 0, expandedArray, 
0: 						0, collationElementsForString.length);
0: 				collationElementsForString = expandedArray;
1: 			}
0: 			collationElementsForString[countOfCollationElements++] = nextInt;
1: 		}
1: 
0: 		return collationElementsForString;
1: 	}
1: 
1: 
1: 	/**
0: 	 * This method returns the count of collation elements for this instance of
0: 	 * CollatorSQLChar. This method will return the correct value only if  
0: 	 * method getCollationElementsForString has been called previously on this 
0: 	 * instance of CollatorSQLChar. 
1: 	 *
0: 	 * @return count of collation elements for this instance of CollatorSQLChar
1: 	 */
0: 	private int getCountOfCollationElements()
1: 	{
0: 		return countOfCollationElements;
1: 	}
1: 
1: 	/**
1: 	 * This method implements the like function for char (with no escape value).
1: 	 *
1: 	 * @param pattern		The pattern to use
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is
1: 	 *			like the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public BooleanDataValue like(DataValueDescriptor pattern)
1: 								throws StandardException
1: 	{
0: 		Boolean likeResult;
1: 
0: 		CollatorSQLChar patternSQLChar = (CollatorSQLChar) pattern;
0: 		likeResult = Like.like(getCollationElementsForString(),
0: 				getCountOfCollationElements(),
0: 				patternSQLChar.getCollationElementsForString(),
0: 				patternSQLChar.getCountOfCollationElements(),
0: 				rbc);
1: 
0: 		return SQLBoolean.truthValue(this,
0: 									 pattern,
0: 									 likeResult);
1: 	}
1: 
1: 	/*
0: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/**
0: 	 * @see DataValueDescriptor#getClone
1: 	 */
0: 	public DataValueDescriptor getClone()
1: 	{
0: 		try
1: 		{
0: 			return new CollatorSQLChar(getString(), rbc);
1: 		}
0: 		catch (StandardException se)
1: 		{
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unexpected exception " + se);
0: 			return null;
1: 		}
1: 	}
1: 
1: 	/**
0: 	 * @see DataValueDescriptor#getNewNull
1: 	 */
0: 	public DataValueDescriptor getNewNull()
1: 	{
0: 		CollatorSQLChar result = new CollatorSQLChar();
0: 		result.setCollator(rbc);
0: 		return result;
1: 	}
1: 
1: 	/*
0: 	 * Storable interface
1: 	 */
1: 
1: 	/**
0: 	 * @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	 */ 
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.SQL_CHAR_WITH_NON_DEFAULT_COLLATION_ID;
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:726b66f
/////////////////////////////////////////////////////////////////////////
1: 	private WorkHorseForCollatorDatatypes holderForCollationSensitiveInfo;
0:     /**
1:      * Create SQL CHAR value initially set to NULL that
1:      * performs collation according to collatorForCharacterDatatypes 
0:      */
1:     CollatorSQLChar(RuleBasedCollator collatorForCharacterDatatypes)
0:     {
1:         setCollator(collatorForCharacterDatatypes);
0:     }
0:     
0:     /**
1:      * Create SQL CHAR value initially set to value that
1:      * performs collation according to collatorForCharacterDatatypes 
0:      */
1: 	CollatorSQLChar(String val, RuleBasedCollator collatorForCharacterDatatypes)
1:         setCollator(collatorForCharacterDatatypes);
0: 	private void setCollator(RuleBasedCollator collatorForCharacterDatatypes)
/////////////////////////////////////////////////////////////////////////
1: 		CollatorSQLChar result = new CollatorSQLChar(
commit:403684d
/////////////////////////////////////////////////////////////////////////
1: class CollatorSQLChar extends SQLChar implements CollationElementsInterface
============================================================================