1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_Bomb
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.harness;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.property.PropertyUtil;
1:2bc809f: import org.apache.derby.iapi.services.context.ContextService;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.context.Context;
1:2bc809f: 
1:a0dbbd7: import java.security.PrivilegedAction;
1:a0dbbd7: import java.security.AccessController;
1:2bc809f: import java.util.Vector;
1:2bc809f: 
1:2bc809f: public class T_Bomb implements Runnable { 
1:2bc809f: 	public static String BOMB_DELAY_PN="derby.testing.BombDelay";
1:2bc809f: 	private static int DEFAULT_BOMB_DELAY=3600000; //1 hour
1:2bc809f: 
1:2bc809f: 	private static T_Bomb me;
1:2bc809f: 	
1:2bc809f: 	private Thread t;
1:3f5c48a: 	private Vector<T_Bombable> v;
1:2bc809f: 	private long delay;
1:2bc809f: 	private boolean armed = false;
1:2bc809f: 
1:2bc809f: 	private T_Bomb()
1:2bc809f: 	{
1:2bc809f: 		delay =
1:2bc809f: 			PropertyUtil.getSystemInt(BOMB_DELAY_PN,0,
1:2bc809f: 									  Integer.MAX_VALUE,
1:2bc809f: 									  DEFAULT_BOMB_DELAY);
1:3f5c48a: 		v = new Vector<T_Bombable>();
1:2bc809f: 		t = new Thread(this);
1:2bc809f: 		t.setDaemon(true);
1:2bc809f: 		t.start();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Make an armed bomb set to go off in 1 hour.
1:2bc809f: 	  */
1:2bc809f: 	public synchronized static void makeBomb() {
1:2bc809f: 		if (me==null) me = new T_Bomb();
1:2bc809f: 		me.armBomb();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Arm a bomb to go off. If the bomb does not exist
1:2bc809f: 	  make it.
1:2bc809f: 	  */
1:2bc809f: 	public synchronized void armBomb() {
1:2bc809f: 		if (me == null) me = new T_Bomb();
1:2bc809f: 		me.armed = true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Cause a bomb to explode. If the bomb does not exist
1:2bc809f: 	  make it.
1:2bc809f: 	  */
1:2bc809f: 	public synchronized static void explodeBomb() {
1:2bc809f: 		if (me == null) me = new T_Bomb();
1:2bc809f: 		me.armed = true;
1:2bc809f: 		me.blowUp();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public synchronized static void registerBombable(T_Bombable b)
1:2bc809f: 	{
1:2bc809f: 		if (me == null) me = new T_Bomb();
1:2bc809f: 		me.v.addElement(b);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public synchronized static void unRegisterBombable(T_Bombable b)
1:2bc809f: 	{
1:2bc809f: 		if (null == me || null == b )
1:2bc809f:             return;
1:2bc809f:         me.v.removeElement(b);
1:2bc809f:         if( me.v.isEmpty())
1:2bc809f:         {
1:2bc809f:             me.armed = false;
1:2bc809f:             me.t.interrupt();
1:2bc809f:             me = null;
1:2bc809f:         }
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void run() {
1:2bc809f: 
1:2bc809f: 		try {
1:2bc809f: 			Thread.sleep(delay);
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		catch (InterruptedException e) {
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (armed)
1:2bc809f: 		{
1:2bc809f: 			me.blowUp();
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void blowUp()
1:2bc809f: 	{
1:2bc809f: 			performLastGasp();
1:a0dbbd7: 			ContextService csf = getContextService();
1:2bc809f: 			if (csf != null)
1:2bc809f: 			{
1:2bc809f: 				System.out.println("ran out of time");
1:2bc809f: 				csf.notifyAllActiveThreads
1:2bc809f: 					((Context) null);
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			try {
1:2bc809f: 				Thread.currentThread().sleep(30*1000); //Give threads 30 sec to shut down.
1:2bc809f: 			}
1:2bc809f: 			catch (InterruptedException ie) {}
1:2bc809f: 			System.out.println("Exit due to time bomb");
1:2bc809f: 			Runtime.getRuntime().exit(1234);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void performLastGasp()
1:2bc809f: 	{
1:3f5c48a:         for (T_Bombable b : v) {
1:2bc809f: 			try{
1:2bc809f: 			 b.lastChance();
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 			catch (Exception exc) {
1:2bc809f: 				System.out.println("Last Gasp exception");
1:2bc809f: 				exc.printStackTrace();
1:2bc809f: 			}
1:2bc809f: 		} //end for
1:a0dbbd7: 
1:2bc809f: 	}
1:2bc809f:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of the ContextService. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  ContextService    getContextService()
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getFactory();
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<ContextService>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public ContextService run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getFactory();
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:a0dbbd7: 
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
1: 			ContextService csf = getContextService();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of the ContextService. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ContextService    getContextService()
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getFactory();
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<ContextService>()
1:                  {
1:                      public ContextService run()
1:                      {
1:                          return ContextService.getFactory();
1:                      }
1:                  }
1:                  );
1:         }
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private Vector<T_Bombable> v;
/////////////////////////////////////////////////////////////////////////
1: 		v = new Vector<T_Bombable>();
/////////////////////////////////////////////////////////////////////////
1:         for (T_Bombable b : v) {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_Bomb
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.harness;
1: 
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.iapi.services.context.Context;
1: 
0: import java.util.Enumeration;
1: import java.util.Vector;
1: 
1: public class T_Bomb implements Runnable { 
1: 	public static String BOMB_DELAY_PN="derby.testing.BombDelay";
1: 	private static int DEFAULT_BOMB_DELAY=3600000; //1 hour
1: 
1: 	private static T_Bomb me;
1: 	
1: 	private Thread t;
0: 	private Vector v;
1: 	private long delay;
1: 	private boolean armed = false;
1: 
1: 	private T_Bomb()
1: 	{
1: 		delay =
1: 			PropertyUtil.getSystemInt(BOMB_DELAY_PN,0,
1: 									  Integer.MAX_VALUE,
1: 									  DEFAULT_BOMB_DELAY);
0: 		v = new Vector();
1: 		t = new Thread(this);
1: 		t.setDaemon(true);
1: 		t.start();
1: 	}
1: 
1: 	/**
1: 	  Make an armed bomb set to go off in 1 hour.
1: 	  */
1: 	public synchronized static void makeBomb() {
1: 		if (me==null) me = new T_Bomb();
1: 		me.armBomb();
1: 	}
1: 
1: 	/**
1: 	  Arm a bomb to go off. If the bomb does not exist
1: 	  make it.
1: 	  */
1: 	public synchronized void armBomb() {
1: 		if (me == null) me = new T_Bomb();
1: 		me.armed = true;
1: 	}
1: 
1: 	/**
1: 	  Cause a bomb to explode. If the bomb does not exist
1: 	  make it.
1: 	  */
1: 	public synchronized static void explodeBomb() {
1: 		if (me == null) me = new T_Bomb();
1: 		me.armed = true;
1: 		me.blowUp();
1: 	}
1: 
1: 	public synchronized static void registerBombable(T_Bombable b)
1: 	{
1: 		if (me == null) me = new T_Bomb();
1: 		me.v.addElement(b);
1: 	}
1: 
1: 	public synchronized static void unRegisterBombable(T_Bombable b)
1: 	{
1: 		if (null == me || null == b )
1:             return;
1:         me.v.removeElement(b);
1:         if( me.v.isEmpty())
1:         {
1:             me.armed = false;
1:             me.t.interrupt();
1:             me = null;
1:         }
1: 	}
1: 
1: 	public void run() {
1: 
1: 		try {
1: 			Thread.sleep(delay);
1: 		}
1: 
1: 		catch (InterruptedException e) {
1: 		}
1: 
1: 		if (armed)
1: 		{
1: 			me.blowUp();
1: 		}
1: 	}
1: 
1: 	private void blowUp()
1: 	{
1: 			performLastGasp();
0: 			ContextService csf = ContextService.getFactory();
1: 			if (csf != null)
1: 			{
1: 				System.out.println("ran out of time");
1: 				csf.notifyAllActiveThreads
1: 					((Context) null);
1: 			}
1: 
1: 			try {
1: 				Thread.currentThread().sleep(30*1000); //Give threads 30 sec to shut down.
1: 			}
1: 			catch (InterruptedException ie) {}
1: 			System.out.println("Exit due to time bomb");
1: 			Runtime.getRuntime().exit(1234);
1: 	}
1: 
1: 	private void performLastGasp()
1: 	{
0: 		for (Enumeration e = v.elements() ; e.hasMoreElements() ;) {
1: 			try{
0:              T_Bombable b = (T_Bombable)e.nextElement();
1: 			 b.lastChance();
1: 			}
1: 
1: 
1: 			catch (Exception exc) {
1: 				System.out.println("Last Gasp exception");
1: 				exc.printStackTrace();
1: 			}
1: 		} //end for
1: 
1: 	}
1: }
============================================================================