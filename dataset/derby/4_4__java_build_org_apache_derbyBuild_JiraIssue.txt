1:e1aa9c0: /*
1:e1aa9c0: 
1:e1aa9c0:    Derby - Class org.apache.derbyBuild.JiraIssue
1:e1aa9c0: 
1:e1aa9c0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e1aa9c0:    contributor license agreements.  See the NOTICE file distributed with
1:e1aa9c0:    this work for additional information regarding copyright ownership.
1:e1aa9c0:    The ASF licenses this file to you under the Apache License, Version 2.0
1:e1aa9c0:    (the "License"); you may not use this file except in compliance with
1:e1aa9c0:    the License.  You may obtain a copy of the License at
1:e1aa9c0: 
1:e1aa9c0:       http://www.apache.org/licenses/LICENSE-2.0
1:e1aa9c0: 
1:e1aa9c0:    Unless required by applicable law or agreed to in writing, software
1:e1aa9c0:    distributed under the License is distributed on an "AS IS" BASIS,
1:e1aa9c0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e1aa9c0:    See the License for the specific language governing permissions and
1:e1aa9c0:    limitations under the License.
1:e1aa9c0: 
4:d76e238:  */
1:e1aa9c0: 
1:d76e238: package org.apache.derbyBuild;
1:e7350ca: 
1:e1aa9c0: import java.io.BufferedReader;
1:e1aa9c0: import java.io.FileReader;
1:e1aa9c0: import java.io.IOException;
1:e7350ca: 
1:e1aa9c0: import java.util.ArrayList;
1:e1aa9c0: import java.util.Arrays;
1:e1aa9c0: import java.util.List;
16:d76e238: 
4:d76e238: /**
1:e1aa9c0:  * An issue from JIRA.
1:8b2e4e7:  */
1:d76e238: class JiraIssue {
1:e1aa9c0:     public static final long NO_RELEASE_NOTE = -1;
1:e1aa9c0:     public static final long MISSING_RELEASE_NOTE = -2;
1:e1aa9c0:     private static final String ATTACHMENT_BASE =
1:e1aa9c0:         "https://issues.apache.org/jira/secure/attachment/";
1:e1aa9c0:     private static final String ATTACHMENT_NAME = "releaseNote.html";
1:8b2e4e7: 
1:e1aa9c0:     // States for parsing source from the Derby JIRA SOAP client.
1:e1aa9c0:     private static final int STATE_ADD_RESET = -1;
1:e1aa9c0:     private static final int STATE_ADD_KEY = 0;
1:e1aa9c0:     private static final int STATE_ADD_SUMMARY = 1;
1:e1aa9c0:     private static final int STATE_ADD_FIXVERSIONS = 2;
1:e1aa9c0:     private static final int STATE_ADD_RELEASENOTE = 3;
1:e1aa9c0: 
1:e1aa9c0:     // JIRA issue information
1:d76e238:     private String key;
1:d76e238:     private String title;
1:e1aa9c0:     private long releaseNoteAttachmentID = NO_RELEASE_NOTE;
1:e1aa9c0:     private List fixVersions;
1:8b2e4e7: 
1:e1aa9c0:     public JiraIssue(String key, String title, List fixVersions,
1:e1aa9c0:                      long releaseNoteAttachmentID) {
1:e1aa9c0:         this.key = key;
1:e1aa9c0:         this.title = title;
1:e1aa9c0:         this.fixVersions = fixVersions;
1:e1aa9c0:         this.releaseNoteAttachmentID = releaseNoteAttachmentID;
1:8b2e4e7:     }
1:9c8b07b: 
1:8b2e4e7:     /**
1:e1aa9c0:      * Factory method which extracts a list of JiraIssue objects from a data
1:e1aa9c0:      * file generated by the Derby JIRA SOAP client.
1:e1aa9c0:      *
1:e1aa9c0:      * @param source the source file (generated by the Derby JIRA SOAP client)
1:e1aa9c0:      * @return A List of {@code JiraIssue} objects.
1:e1aa9c0:      * @throws Exception if something goes wrong
1:8b2e4e7:      */
1:e1aa9c0:     public static List createJiraIssueList(String source)
1:e1aa9c0:             throws IOException {
1:38b9499:         ArrayList<JiraIssue> jiraIssues = new ArrayList<JiraIssue>();
1:9c8b07b: 
1:e1aa9c0:         BufferedReader in = new BufferedReader(new FileReader(source));
1:e1aa9c0:         String line;
1:e1aa9c0:         System.out.println("--- Creating Jira issue list");
1:e1aa9c0:         while ((line = in.readLine()) != null && line.startsWith("//")) {
1:e1aa9c0:             System.out.println(line);
1:e1aa9c0:         }
1:9c8b07b: 
1:38b9499:         ArrayList<String> comments = new ArrayList<String>();
1:e1aa9c0:         int state = STATE_ADD_KEY;
1:e1aa9c0:         String key = null;
1:e1aa9c0:         String summary = null;
1:e1aa9c0:         String[] fixVersions = null;
1:e1aa9c0:         long attachmentId = NO_RELEASE_NOTE;
1:e1aa9c0:         do {
1:e1aa9c0:             if (line.startsWith("//")) {
1:e1aa9c0:                 comments.add(line.trim());
1:e1aa9c0:                 continue;
1:e1aa9c0:             }
1:e1aa9c0:             if (line.startsWith("---")) {
1:e1aa9c0:                 continue;
1:e1aa9c0:             }
1:9c8b07b: 
1:e1aa9c0:             if (state == STATE_ADD_KEY) {
1:e1aa9c0:                 key = line.trim();
1:e1aa9c0:                 if (!key.startsWith("DERBY-")) {
1:e1aa9c0:                     throw new IllegalStateException(
1:e1aa9c0:                             "invalid JIRA key for Derby: " + key);
1:8b2e4e7:                 }
1:e1aa9c0:                 key = key.split("-")[1];
1:e1aa9c0:                 // Sanity check
1:e1aa9c0:                 Integer.parseInt(key);
1:e1aa9c0:             } else if (state == STATE_ADD_SUMMARY) {
1:e1aa9c0:                 summary = line.trim();
1:e1aa9c0:             } else if (state == STATE_ADD_FIXVERSIONS) {
1:e1aa9c0:                 line = line.trim();
1:e1aa9c0:                 fixVersions = line.split(",");
1:e1aa9c0:             } else if (state == STATE_ADD_RELEASENOTE) {
1:e1aa9c0:                 line = line.trim();
1:e1aa9c0:                 if (line.equals("null")) {
1:e1aa9c0:                     attachmentId = NO_RELEASE_NOTE;
1:e1aa9c0:                 } else  if (line.equals("missing")) {
1:e1aa9c0:                     attachmentId = MISSING_RELEASE_NOTE;
1:e1aa9c0:                 } else {
1:e1aa9c0:                     attachmentId = Long.parseLong(line);
1:e1aa9c0:                 }
1:e1aa9c0:                 // We now have all the information we need.
1:e1aa9c0:                 jiraIssues.add(new JiraIssue(key, summary,
1:e1aa9c0:                         Arrays.asList(fixVersions), attachmentId));
1:e1aa9c0:                 state = STATE_ADD_RESET;
7:d76e238:             }
1:e1aa9c0:             state++;
1:e1aa9c0:         } while ((line = in.readLine()) != null);
1:e1aa9c0:         if (state != STATE_ADD_KEY) {
1:e1aa9c0:             throw new IllegalStateException("illegal state, check source " +
1:e1aa9c0:                     "file for correctness (state=" + state + ")");
1:e1aa9c0:         }
1:e1aa9c0:         // Print the last few comments for information (by convention).
1:e1aa9c0:         int size = comments.size();
1:e1aa9c0:         if (size > 2) {
1:e1aa9c0:             System.out.println(comments.get(size -3));
1:e1aa9c0:             System.out.println(comments.get(size -2));
1:e1aa9c0:             System.out.println(comments.get(size -1));
1:d76e238:         }
1:8b2e4e7: 
1:d76e238:         return jiraIssues;
1:d76e238:     }
1:8b2e4e7: 
1:8b2e4e7:     /**
1:9c8b07b:      * @return the issue's key (jira number, e.g., 1234)
1:d76e238:      */
1:d76e238:     public String getKey() {
1:d76e238:         return key;
1:d76e238:     }
1:8b2e4e7: 
1:d76e238:     /**
1:d76e238:      * @return the issue's title
1:d76e238:      */
1:d76e238:     public String getTitle() {
1:d76e238:         return title;
1:d76e238:     }
1:8b2e4e7: 
1:d76e238:     /**
1:d76e238:      * @return the attachment id of the release note
1:d76e238:      */
1:d76e238:     public long getReleaseNoteAttachmentID() {
1:d76e238:         return releaseNoteAttachmentID;
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * @return true iff this issue has a release note attached
1:d76e238:      */
1:d76e238:     public boolean hasReleaseNote() {
1:e1aa9c0:         return (releaseNoteAttachmentID != NO_RELEASE_NOTE &&
1:e1aa9c0:                 releaseNoteAttachmentID != MISSING_RELEASE_NOTE);
1:e1aa9c0:     }
1:e1aa9c0: 
1:e1aa9c0:     /**
1:e1aa9c0:      * @return true iff this issue is missing a release note
1:e1aa9c0:      */
1:e1aa9c0:     public boolean hasMissingReleaseNote() {
1:e1aa9c0:         return (releaseNoteAttachmentID == MISSING_RELEASE_NOTE);
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * Predicate for finding out if issue has a given fixVersion.
1:d76e238:      * @param version to test
1:d76e238:      * @return true iff issue has version as fixVersion
1:d76e238:      */
1:d76e238:     public boolean isFixedIn(String version) {
1:e1aa9c0:         return fixVersions.contains(version);
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * @return URL for this Jira issue
1:d76e238:      */
1:d76e238:     public String getJiraAddress() {
1:9c8b07b:         return "https://issues.apache.org/jira/browse/DERBY-" + key;
1:d76e238:     }
1:d76e238: 
1:d76e238:     /**
1:d76e238:      * @return Full URL to the latest release note
1:d76e238:      */
1:d76e238:     public String getReleaseNoteAddress() {
1:e1aa9c0:         return ATTACHMENT_BASE +
1:e1aa9c0:                 releaseNoteAttachmentID + "/" + ATTACHMENT_NAME;
1:d76e238:     }
1:d76e238: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:38b9499
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<JiraIssue> jiraIssues = new ArrayList<JiraIssue>();
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> comments = new ArrayList<String>();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:e1aa9c0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyBuild.JiraIssue
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: 
1: import java.io.BufferedReader;
1: import java.io.FileReader;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1:  * An issue from JIRA.
1:     public static final long NO_RELEASE_NOTE = -1;
1:     public static final long MISSING_RELEASE_NOTE = -2;
1:     private static final String ATTACHMENT_BASE =
1:         "https://issues.apache.org/jira/secure/attachment/";
1:     private static final String ATTACHMENT_NAME = "releaseNote.html";
1:     // States for parsing source from the Derby JIRA SOAP client.
1:     private static final int STATE_ADD_RESET = -1;
1:     private static final int STATE_ADD_KEY = 0;
1:     private static final int STATE_ADD_SUMMARY = 1;
1:     private static final int STATE_ADD_FIXVERSIONS = 2;
1:     private static final int STATE_ADD_RELEASENOTE = 3;
1: 
1:     // JIRA issue information
1:     private long releaseNoteAttachmentID = NO_RELEASE_NOTE;
1:     private List fixVersions;
1:     public JiraIssue(String key, String title, List fixVersions,
1:                      long releaseNoteAttachmentID) {
1:         this.key = key;
1:         this.title = title;
1:         this.fixVersions = fixVersions;
1:         this.releaseNoteAttachmentID = releaseNoteAttachmentID;
1:      * Factory method which extracts a list of JiraIssue objects from a data
1:      * file generated by the Derby JIRA SOAP client.
1:      *
1:      * @param source the source file (generated by the Derby JIRA SOAP client)
1:      * @return A List of {@code JiraIssue} objects.
1:      * @throws Exception if something goes wrong
1:     public static List createJiraIssueList(String source)
1:             throws IOException {
1:         BufferedReader in = new BufferedReader(new FileReader(source));
1:         String line;
1:         System.out.println("--- Creating Jira issue list");
1:         while ((line = in.readLine()) != null && line.startsWith("//")) {
1:             System.out.println(line);
1:         }
0:         ArrayList comments = new ArrayList();
1:         int state = STATE_ADD_KEY;
1:         String key = null;
1:         String summary = null;
1:         String[] fixVersions = null;
1:         long attachmentId = NO_RELEASE_NOTE;
1:         do {
1:             if (line.startsWith("//")) {
1:                 comments.add(line.trim());
1:                 continue;
1:             }
1:             if (line.startsWith("---")) {
1:                 continue;
1:             }
1:             if (state == STATE_ADD_KEY) {
1:                 key = line.trim();
1:                 if (!key.startsWith("DERBY-")) {
1:                     throw new IllegalStateException(
1:                             "invalid JIRA key for Derby: " + key);
1:                 key = key.split("-")[1];
1:                 // Sanity check
1:                 Integer.parseInt(key);
1:             } else if (state == STATE_ADD_SUMMARY) {
1:                 summary = line.trim();
1:             } else if (state == STATE_ADD_FIXVERSIONS) {
1:                 line = line.trim();
1:                 fixVersions = line.split(",");
1:             } else if (state == STATE_ADD_RELEASENOTE) {
1:                 line = line.trim();
1:                 if (line.equals("null")) {
1:                     attachmentId = NO_RELEASE_NOTE;
1:                 } else  if (line.equals("missing")) {
1:                     attachmentId = MISSING_RELEASE_NOTE;
1:                 } else {
1:                     attachmentId = Long.parseLong(line);
1:                 }
1:                 // We now have all the information we need.
1:                 jiraIssues.add(new JiraIssue(key, summary,
1:                         Arrays.asList(fixVersions), attachmentId));
1:                 state = STATE_ADD_RESET;
1:             state++;
1:         } while ((line = in.readLine()) != null);
1:         if (state != STATE_ADD_KEY) {
1:             throw new IllegalStateException("illegal state, check source " +
1:                     "file for correctness (state=" + state + ")");
1:         }
1:         // Print the last few comments for information (by convention).
1:         int size = comments.size();
1:         if (size > 2) {
1:             System.out.println(comments.get(size -3));
1:             System.out.println(comments.get(size -2));
1:             System.out.println(comments.get(size -1));
/////////////////////////////////////////////////////////////////////////
1:         return (releaseNoteAttachmentID != NO_RELEASE_NOTE &&
1:                 releaseNoteAttachmentID != MISSING_RELEASE_NOTE);
1:     }
1: 
1:     /**
1:      * @return true iff this issue is missing a release note
1:      */
1:     public boolean hasMissingReleaseNote() {
1:         return (releaseNoteAttachmentID == MISSING_RELEASE_NOTE);
/////////////////////////////////////////////////////////////////////////
1:         return fixVersions.contains(version);
/////////////////////////////////////////////////////////////////////////
1:         return ATTACHMENT_BASE +
1:                 releaseNoteAttachmentID + "/" + ATTACHMENT_NAME;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9c8b07b
/////////////////////////////////////////////////////////////////////////
0: import java.io.InputStream;
0:  * An issue from a JIRA report. The constructor of this class parses text produced by
0:  * a JIRA report. This parsing logic probably has to be rewritten for every release because
0:  * the format of the JIRA reports is not stable.
0:     private long releaseNoteAttachmentID = ReportParser.NO_RELEASE_NOTE;
0:     private HashSet fixVersionSet;
0:      * Create an object instance from a TagReader.
0:     public JiraIssue(  ReportParser rp, TagReader tr ) throws Exception
0:         key = rp.parseKey( tr );
0:         title = rp.parseTitle( tr );
0:         fixVersionSet = rp.parseFixedVersions( tr );
0:         releaseNoteAttachmentID = rp.getReleaseNoteAttachmentID( tr );
0:      * @param masterReport a TagReader holding the JIRA report of all the fixed bugs
0:      * @param parser a class to parse content in the master report
0:     public static List createJiraIssueList
0:         ( TagReader masterReport, List excludeReleaseIDList, ReportParser parser ) throws Exception
0:     {
0:         int issueCount = 0;
1: 
0:         while( true )
0:         {
0:             TagReader nextIssue = parser.parseNextIssue( masterReport );
0:             if ( nextIssue == null ) { break; }
1: 
0:             JiraIssue candidate = new JiraIssue( parser, nextIssue );
1: 
0:             boolean skip = false;
0:             for (Iterator ex = excludeReleaseIDList.iterator(); ex.hasNext();)
0:             {
0:                 if (candidate.isFixedIn(rid))
0:                 {
0:                     //System.out.println("Already fixed: "+candidate.getKey()+ " (in "+rid+")");
0:                     break;
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @return the issue's key (jira number, e.g., 1234)
/////////////////////////////////////////////////////////////////////////
0:         return (releaseNoteAttachmentID > ReportParser.NO_RELEASE_NOTE);
/////////////////////////////////////////////////////////////////////////
1:         return "https://issues.apache.org/jira/browse/DERBY-" + key;
commit:e7350ca
/////////////////////////////////////////////////////////////////////////
1: 
0:             String nextVersion = (String) i.next();
1: 
0:             fixVersionSet.add( nextVersion );
/////////////////////////////////////////////////////////////////////////
0:         else if ( key.equals( "DERBY-4312" ) ) { result = 12442288L; }
0:         else if ( key.equals( "DERBY-4191" ) ) { result = 12442312L; }
commit:a302e2c
/////////////////////////////////////////////////////////////////////////
0:         return "https://issues.apache.org/jira/secure/attachment/" +
commit:0bd3280
/////////////////////////////////////////////////////////////////////////
0:         if ( key.equals( "DERBY-4602" ) ) { result = 12440335L; }
0:         else if ( key.equals( "DERBY-4483" ) ) { result = 12439775L; }
0:         else if ( key.equals( "DERBY-4432" ) ) { result = 12424709L; }
commit:8b2e4e7
/////////////////////////////////////////////////////////////////////////
0:     private static final String JIRA_ITEM = "h3";
0:     private static final String JIRA_TITLE = "a";
/////////////////////////////////////////////////////////////////////////
0:         //key = ef.getTextByTagName(JIRA_KEY);
0:         key = parseKey( title );
0:         releaseNoteAttachmentID = getReleaseNoteAttachmentID( key, itemElement );
/////////////////////////////////////////////////////////////////////////
0:      * Look up the attachment id for the release note attached to
0:      * an issue.
1:      */
0:     private long getReleaseNoteAttachmentID
0:         ( String key, Element itemElement )
0:         throws Exception
0:     {
0:         long result = NO_RELEASE_NOTE;
1: 
0:         //
0:         // The following code used to work before the time of Derby 10.6.
0:         // With that release, the list of attachments stopped appearing in
0:         // the xml reports.
0:         //
0:         //        NodeList attachmentsList =
0:         //                itemElement.getElementsByTagName(JIRA_ATTACHMENT);
0:         //
0:         //        for (int i = 0; i < attachmentsList.getLength(); i++) {
0:         //            Element attachment = (Element) attachmentsList.item(i);
0:         //            String name = attachment.getAttribute(JIRA_NAME);
0:         //            if (RELEASE_NOTE_NAME.equals(name)) {
0:         //                result =
0:         //                        Math.max(result,
0:         //                        Long.parseLong(attachment.getAttribute(JIRA_ID)));
0:         //            }
0:         //        }
1: 
0:         //
0:         // As a consequence, we now hardcode the attachment ids.
0:         // The attachment id is in the link of the latest release note
0:         // attached to the issue.
0:         //
0:         if ( key.equals( "DERBY-4432" ) ) { result = 12424709L; }
0:         else if ( key.equals( "DERBY-4380" ) ) { result = 12434514L; }
0:         else if ( key.equals( "DERBY-4355" ) ) { result = 12419298L; }
0:         else if ( key.equals( "DERBY-4312" ) ) { result = 12414219L; }
0:         else if ( key.equals( "DERBY-4230" ) ) { result = 12409466L; }
0:         else if ( key.equals( "DERBY-4191" ) ) { result = 12430699L; }
0:         else if ( key.equals( "DERBY-3991" ) ) { result = 12409798L; }
0:         else if ( key.equals( "DERBY-3844" ) ) { result = 12436979L; }
0:         else if ( key.equals( "DERBY-2769" ) ) { result = 12418474L; }
1:         
0:         return result;
1:     }
1: 
1:     /**
0:      * Extract the JIRA key (DERBY-XXXX) from the raw title.
0:      * A JIRA  raw title has the following form:
0:      *
0:      *  "[DERBY-2598] new upgrade  test failures after change 528033"
1:      */
0:     private String parseKey( String rawTitle ) throws Exception
0:     {
0:         String result = rawTitle.substring(1, title.indexOf(']') );
1: 
0:         return result;
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:                 //System.out.println("adding: " + candidate.getKey());
/////////////////////////////////////////////////////////////////////////
0:         return "https://issues.apache.org/jira/browse/" + key;
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:d76e238
/////////////////////////////////////////////////////////////////////////
0: /*  Derby - Class org.apache.derbyBuild.JiraIssue
0: Licensed to the Apache Software Foundation (ASF) under one or more
0: contributor license agreements.  See the NOTICE file distributed with
0: this work for additional information regarding copyright ownership.
0: The ASF licenses this file to You under the Apache License, Version 2.0
0: (the "License"); you may not use this file except in compliance with
0: the License.  You may obtain a copy of the License at
0: http://www.apache.org/licenses/LICENSE-2.0
0: Unless required by applicable law or agreed to in writing, software
0: distributed under the License is distributed on an "AS IS" BASIS,
0: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: See the License for the specific language governing permissions and
0: limitations under the License.
1:  */
1: package org.apache.derbyBuild;
1: 
0: import org.w3c.dom.*;
0: import java.util.*;
1: 
1: 
1: /**
0:  *
0:  * An issue from a JIRA report.
0:  *
1:  */
1: class JiraIssue {
0:     private static final long NO_RELEASE_NOTE = -1;
0:     private static final String JIRA_ITEM = "item";
0:     private static final String JIRA_ID = "id";
0:     private static final String JIRA_NAME = "name";
0:     private static final String JIRA_TITLE = "title";
0:     private static final String JIRA_KEY = "key";
0:     private static final String JIRA_ATTACHMENT = "attachment";
0:     private static final String JIRA_FIXVERSION = "fixVersion";
0:     private static final String RELEASE_NOTE_NAME = "releaseNote.html";
1: 
1:     private String key;
1:     private String title;
0:     private long releaseNoteAttachmentID = NO_RELEASE_NOTE;
0:     private HashSet fixVersionSet = new HashSet();
1: 
1:     /**
0:      * Create an object instance from an XML document Element. The Element given
0:      * as argument is assumed to be an 'item' sub-tree from the XML file
0:      * representation of a Jira filter/query.
0:      * @param itemElement the 'item' subtree representing a Jira issue
0:      * @throws java.lang.Exception
1:      */
0:     public JiraIssue(Element itemElement) throws Exception {
0:         ElementFacade ef = new ElementFacade(itemElement);
0:         key = ef.getTextByTagName(JIRA_KEY);
0:         title = ef.getTextByTagName(JIRA_TITLE);
1: 
0:         NodeList attachmentsList =
0:                 itemElement.getElementsByTagName(JIRA_ATTACHMENT);
1: 
0:         for (int i = 0; i < attachmentsList.getLength(); i++) {
0:             Element attachment = (Element) attachmentsList.item(i);
0:             String name = attachment.getAttribute(JIRA_NAME);
0:             if (RELEASE_NOTE_NAME.equals(name)) {
0:                 releaseNoteAttachmentID =
0:                         Math.max(releaseNoteAttachmentID,
0:                         Long.parseLong(attachment.getAttribute(JIRA_ID)));
1:             }
1:         }
1: 
0:         //
0:         // A JIRA title has the following form:
0:         //
0:         //  "[DERBY-2598] new upgrade  test failures after change 528033"
0:         //
0:         // We strip off the leading JIRA id because that information already
0:         // lives in the key.
0:         //
0:         title = title.substring(title.indexOf(']') + 2);
1: 
0:         for (Iterator i = ef.getTextListByTagName(JIRA_FIXVERSION).iterator();
0:         i.hasNext();) {
0:             fixVersionSet.add(i.next());
1:         }
1:     }
1: 
1:     /**
0:      * Factory method which extracts a list of JiraIssue objects from a Jira
0:      * report (supplied as an XML Document). Issues with a fixVersion contained
0:      * in the exclude list will be omitted from the list.
0:      * @param report the Jira report to extract issues from (as a Document object)
0:      * @param excludeReleaseIDList list of fixVersions that disqualifies an issue
0:      * @return a List of JiraIssue objects
0:      * @throws java.lang.Exception
1:      */
0:     public static List createJiraIssueList(Document report,
0:             List excludeReleaseIDList) throws Exception {
0:         Element reportRoot = report.getDocumentElement();
0:         NodeList itemList = reportRoot.getElementsByTagName(JIRA_ITEM);
0:         int count = itemList.getLength();
0:         ArrayList jiraIssues = new ArrayList();
1: 
0:         boolean skip;
0:         for (int i = 0; i < count; i++) {
0:             skip=false;
0:             JiraIssue candidate = new JiraIssue((Element) itemList.item(i));
0:             for (Iterator ex = excludeReleaseIDList.iterator(); ex.hasNext();) {
0:                 String rid = (String) ex.next();
0:                 if (candidate.isFixedIn(rid)) {
0:                     System.out.println("Already fixed: "+candidate.getKey()+
0:                             " (in "+rid+")");
0:                     skip=true;
0:                     continue;
1:                 }
1:             }
0:             if (!skip)
0:             {
0:                 System.out.println("adding: " + candidate.getKey());
0:                 jiraIssues.add(candidate);
1:             }
1:         }
1:         return jiraIssues;
1:     }
1: 
1:     /**
0:      * @return the issue's key (jira number DERBY-xxx)
1:      */
1:     public String getKey() {
1:         return key;
1:     }
1: 
1:     /**
1:      * @return the issue's title
1:      */
1:     public String getTitle() {
1:         return title;
1:     }
1: 
1:     /**
1:      * @return the attachment id of the release note
1:      */
1:     public long getReleaseNoteAttachmentID() {
1:         return releaseNoteAttachmentID;
1:     }
1: 
1:     /**
1:      * @return true iff this issue has a release note attached
1:      */
1:     public boolean hasReleaseNote() {
0:         return (releaseNoteAttachmentID > NO_RELEASE_NOTE);
1:     }
1: 
1:     /**
1:      * Predicate for finding out if issue has a given fixVersion.
1:      * @param version to test
1:      * @return true iff issue has version as fixVersion
1:      */
1:     public boolean isFixedIn(String version) {
0:         return fixVersionSet.contains(version);
1:     }
1: 
1:     /**
1:      * @return URL for this Jira issue
1:      */
1:     public String getJiraAddress() {
0:         return "http://issues.apache.org/jira/browse/" + key;
1:     }
1: 
1:     /**
1:      * @return Full URL to the latest release note
1:      */
1:     public String getReleaseNoteAddress() {
0:         return "http://issues.apache.org/jira/secure/attachment/" +
0:                 releaseNoteAttachmentID + "/releaseNote.html";
1:     }
1: }
1: 
1: 
============================================================================