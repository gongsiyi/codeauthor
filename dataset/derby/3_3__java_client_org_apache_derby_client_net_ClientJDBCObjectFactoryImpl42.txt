1:b54918e: /*
1:b54918e:  
1:b54918e:    Derby - Class org.apache.derby.client.net.ClientJDBCObjectFactoryImpl42
1:b54918e:  
1:b54918e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:b54918e:    contributor license agreements.  See the NOTICE file distributed with
1:b54918e:    this work for additional information regarding copyright ownership.
1:b54918e:    The ASF licenses this file to You under the Apache License, Version 2.0
1:b54918e:    (the "License"); you may not use this file except in compliance with
1:b54918e:    the License.  You may obtain a copy of the License at
1:b54918e:  
1:b54918e:       http://www.apache.org/licenses/LICENSE-2.0
1:b54918e:  
1:b54918e:    Unless required by applicable law or agreed to in writing, software
1:b54918e:    distributed under the License is distributed on an "AS IS" BASIS,
1:b54918e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b54918e:    See the License for the specific language governing permissions and
1:b54918e:    limitations under the License.
1:b54918e:  
1:b54918e:  */
1:b54918e: 
1:b54918e: package org.apache.derby.client.net;
1:b54918e: 
1:69e3d06: import java.sql.BatchUpdateException;
1:69e3d06: import java.sql.CallableStatement;
1:69e3d06: import java.sql.PreparedStatement;
1:7cfb7e6: import org.apache.derby.client.am.SqlException;
1:cd1db93: 
1:7cfb7e6: import org.apache.derby.client.ClientPooledConnection;
1:7cfb7e6: import org.apache.derby.client.am.Agent;
1:69e3d06: import org.apache.derby.client.am.ClientCallableStatement;
1:69e3d06: import org.apache.derby.client.am.ClientCallableStatement42;
1:fc9b418: import org.apache.derby.client.am.Cursor;
1:9206d5b: import org.apache.derby.client.am.LogicalCallableStatement;
1:9206d5b: import org.apache.derby.client.am.LogicalCallableStatement42;
1:7cfb7e6: import org.apache.derby.client.am.LogicalPreparedStatement;
1:7cfb7e6: import org.apache.derby.client.am.LogicalPreparedStatement42;
1:69e3d06: import org.apache.derby.client.am.ClientPreparedStatement;
1:69e3d06: import org.apache.derby.client.am.ClientPreparedStatement42;
1:69e3d06: import org.apache.derby.client.am.ClientConnection;
1:69e3d06: import org.apache.derby.client.am.ClientResultSet;
1:b13b17c: import org.apache.derby.client.am.MaterialStatement;
1:7cfb7e6: import org.apache.derby.client.am.Section;
1:7cfb7e6: import org.apache.derby.client.am.StatementCacheInteractor;
1:7cfb7e6: import org.apache.derby.client.am.stmtcache.StatementKey;
1:7cfb7e6: 
1:b54918e: /**
1:b54918e:  * Implements the ClientJDBCObjectFactory interface and returns the JDBC 4.2
1:b54918e:  * specific classes.
1:b54918e:  */
1:9a0cdf1: public class ClientJDBCObjectFactoryImpl42 extends ClientJDBCObjectFactoryImpl
1:b54918e: {
1:69e3d06:     /**
1:69e3d06:      * This method is overridden on JVM 8 to take advantage of long
1:69e3d06:      * update counts.
1:69e3d06:      */
1:69e3d06:     protected   BatchUpdateException   newBatchUpdateException
1:cd1db93:         ( String message, String sqlState, int errorCode, long[] updateCounts, SqlException cause )
1:b54918e:     {
1:69e3d06:         return new BatchUpdateException(
1:69e3d06:             message,
1:69e3d06:             sqlState,
1:69e3d06:             errorCode,
1:69e3d06:             updateCounts,
1:69e3d06:             cause);
1:b54918e:     }
1:7cfb7e6: 
1:7cfb7e6:     /**
1:7cfb7e6:      * Returns a PreparedStatement.
1:7cfb7e6:      */
1:69e3d06:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:69e3d06:             ClientConnection connection,
1:7cfb7e6:             String sql,Section section,ClientPooledConnection cpc) 
1:7cfb7e6:             throws SqlException {
1:69e3d06:         return new ClientPreparedStatement42(agent,connection,sql,section,cpc);
1:7cfb7e6:     }
1:7cfb7e6:     
1:7cfb7e6:     /**
1:7cfb7e6:      *
1:7cfb7e6:      * This method returns an instance of PreparedStatement
1:7cfb7e6:      * which implements java.sql.PreparedStatement.
1:7cfb7e6:      * It has the ClientPooledConnection as one of its parameters
1:7cfb7e6:      * this is used to raise the Statement Events when the prepared
1:7cfb7e6:      * statement is closed.
1:7cfb7e6:      */
1:69e3d06:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:69e3d06:             ClientConnection connection,
1:7cfb7e6:             String sql,int type,int concurrency,
1:7cfb7e6:             int holdability,int autoGeneratedKeys,
1:7cfb7e6:             String [] columnNames,
1:7cfb7e6:             int[] columnIndexes, ClientPooledConnection cpc) 
1:7cfb7e6:             throws SqlException {
1:69e3d06: 
1:69e3d06:         return new ClientPreparedStatement42(
1:69e3d06:             agent,
1:69e3d06:             connection,
1:69e3d06:             sql,
1:69e3d06:             type,
1:69e3d06:             concurrency,
1:69e3d06:             holdability,
1:69e3d06:             autoGeneratedKeys,
1:69e3d06:             columnNames,
1:69e3d06:             columnIndexes,
1:69e3d06:             cpc);
1:7cfb7e6:     }
1:7cfb7e6: 
1:7cfb7e6:     /**
1:69e3d06:      * Returns a new logical prepared statement object.
1:7cfb7e6:      */
1:7cfb7e6:     public LogicalPreparedStatement newLogicalPreparedStatement(
1:69e3d06:             PreparedStatement ps,
1:7cfb7e6:             StatementKey stmtKey,
1:7cfb7e6:             StatementCacheInteractor cacheInteractor) {
1:7cfb7e6:         return new LogicalPreparedStatement42(ps, stmtKey, cacheInteractor);
1:7cfb7e6:     }
1:7cfb7e6:     
1:fc9b418:     /**
1:fc9b418:      * returns an instance of org.apache.derby.client.net.NetResultSet
1:fc9b418:      */
1:69e3d06:     public ClientResultSet newNetResultSet(Agent netAgent,
1:b13b17c:             MaterialStatement netStatement,
1:fc9b418:             Cursor cursor,int qryprctyp,int sqlcsrhld,
1:fc9b418:             int qryattscr,int qryattsns,int qryattset,long qryinsid,
1:fc9b418:             int actualResultSetType,int actualResultSetConcurrency,
1:fc9b418:             int actualResultSetHoldability) throws SqlException {
1:fc9b418:         return new NetResultSet42((NetAgent)netAgent,(NetStatement)netStatement,
1:fc9b418:                 cursor,
1:fc9b418:                 qryprctyp, sqlcsrhld, qryattscr, qryattsns, qryattset, qryinsid,
1:fc9b418:                 actualResultSetType,actualResultSetConcurrency,
1:fc9b418:                 actualResultSetHoldability);
1:fc9b418:     }
1:fc9b418: 
1:69e3d06:     /** return a ClientCallableStatement42 object */
1:69e3d06:     public ClientCallableStatement newCallableStatement(Agent agent,
1:69e3d06:             ClientConnection connection,
1:9206d5b:             String sql,int type,int concurrency,
1:9206d5b:             int holdability,ClientPooledConnection cpc) throws SqlException {
1:69e3d06: 
1:69e3d06:         return new ClientCallableStatement42(
1:69e3d06:             agent,
1:69e3d06:             connection,
1:69e3d06:             sql,
1:69e3d06:             type,
1:69e3d06:             concurrency,
1:69e3d06:             holdability,
1:69e3d06:             cpc);
1:9206d5b:     }
1:9206d5b: 
1:9206d5b:     /**
1:9206d5b:      * Returns a new logical callable statement object.
1:9206d5b:      */
1:9206d5b:     public LogicalCallableStatement newLogicalCallableStatement(
1:69e3d06:             CallableStatement cs,
1:9206d5b:             StatementKey stmtKey,
1:9206d5b:             StatementCacheInteractor cacheInteractor) {
1:9206d5b:         return new LogicalCallableStatement42(cs, stmtKey, cacheInteractor);
1:9206d5b:     }
1:9206d5b:     
1:b54918e: }
1:b54918e: 
1:b54918e:     
1:b54918e: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: public class ClientJDBCObjectFactoryImpl42 extends ClientJDBCObjectFactoryImpl
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.BatchUpdateException;
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import org.apache.derby.client.am.ClientCallableStatement;
1: import org.apache.derby.client.am.ClientCallableStatement42;
1: import org.apache.derby.client.am.ClientPreparedStatement;
1: import org.apache.derby.client.am.ClientPreparedStatement42;
1: import org.apache.derby.client.am.ClientConnection;
1: import org.apache.derby.client.am.ClientResultSet;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * This method is overridden on JVM 8 to take advantage of long
1:      * update counts.
1:      */
1:     protected   BatchUpdateException   newBatchUpdateException
1:         return new BatchUpdateException(
1:             message,
1:             sqlState,
1:             errorCode,
1:             updateCounts,
1:             cause);
1:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:             ClientConnection connection,
1:         return new ClientPreparedStatement42(agent,connection,sql,section,cpc);
/////////////////////////////////////////////////////////////////////////
1:     public ClientPreparedStatement newPreparedStatement(Agent agent,
1:             ClientConnection connection,
1: 
1:         return new ClientPreparedStatement42(
1:             agent,
1:             connection,
1:             sql,
1:             type,
1:             concurrency,
1:             holdability,
1:             autoGeneratedKeys,
1:             columnNames,
1:             columnIndexes,
1:             cpc);
1:      * Returns a new logical prepared statement object.
1:             PreparedStatement ps,
/////////////////////////////////////////////////////////////////////////
1:     public ClientResultSet newNetResultSet(Agent netAgent,
/////////////////////////////////////////////////////////////////////////
1:     /** return a ClientCallableStatement42 object */
1:     public ClientCallableStatement newCallableStatement(Agent agent,
1:             ClientConnection connection,
1: 
1:         return new ClientCallableStatement42(
1:             agent,
1:             connection,
1:             sql,
1:             type,
1:             concurrency,
1:             holdability,
1:             cpc);
1:             CallableStatement cs,
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.Connection;
1: import org.apache.derby.client.am.MaterialStatement;
0: import org.apache.derby.client.am.ResultSet;
/////////////////////////////////////////////////////////////////////////
0:             Connection connection,
/////////////////////////////////////////////////////////////////////////
0:             Connection connection,
/////////////////////////////////////////////////////////////////////////
0:     public ResultSet newNetResultSet(Agent netAgent,
1:             MaterialStatement netStatement,
/////////////////////////////////////////////////////////////////////////
0:             Connection connection,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9206d5b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.CallableStatement;
0: import org.apache.derby.client.am.CallableStatement42;
1: import org.apache.derby.client.am.LogicalCallableStatement;
1: import org.apache.derby.client.am.LogicalCallableStatement42;
/////////////////////////////////////////////////////////////////////////
0:     /** return a CallableStatement */
0:     public CallableStatement newCallableStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,
1:             String sql,int type,int concurrency,
1:             int holdability,ClientPooledConnection cpc) throws SqlException {
0:         return new CallableStatement42(agent,connection,sql,type,concurrency,
0:                 holdability,cpc);
1:     }
1: 
1:     /**
1:      * Returns a new logical callable statement object.
1:      */
1:     public LogicalCallableStatement newLogicalCallableStatement(
0:             java.sql.CallableStatement cs,
1:             StatementKey stmtKey,
1:             StatementCacheInteractor cacheInteractor) {
1:         return new LogicalCallableStatement42(cs, stmtKey, cacheInteractor);
1:     }
1:     
commit:fc9b418
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.Cursor;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * returns an instance of org.apache.derby.client.net.NetResultSet
1:      */
0:     public org.apache.derby.client.am.ResultSet newNetResultSet(Agent netAgent,
0:             org.apache.derby.client.am.MaterialStatement netStatement,
1:             Cursor cursor,int qryprctyp,int sqlcsrhld,
1:             int qryattscr,int qryattsns,int qryattset,long qryinsid,
1:             int actualResultSetType,int actualResultSetConcurrency,
1:             int actualResultSetHoldability) throws SqlException {
1:         return new NetResultSet42((NetAgent)netAgent,(NetStatement)netStatement,
1:                 cursor,
1:                 qryprctyp, sqlcsrhld, qryattscr, qryattsns, qryattset, qryinsid,
1:                 actualResultSetType,actualResultSetConcurrency,
1:                 actualResultSetHoldability);
1:     }
1: 
commit:7cfb7e6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.ClientPooledConnection;
1: import org.apache.derby.client.am.Agent;
1: import org.apache.derby.client.am.LogicalPreparedStatement;
1: import org.apache.derby.client.am.LogicalPreparedStatement42;
0: import org.apache.derby.client.am.PreparedStatement;
0: import org.apache.derby.client.am.PreparedStatement42;
1: import org.apache.derby.client.am.Section;
1: import org.apache.derby.client.am.StatementCacheInteractor;
1: import org.apache.derby.client.am.SqlException;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns a PreparedStatement.
1:      */
0:     public PreparedStatement newPreparedStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,
1:             String sql,Section section,ClientPooledConnection cpc) 
1:             throws SqlException {
0:         return new PreparedStatement42(agent,connection,sql,section,cpc);
1:     }
1:     
1:     /**
1:      *
1:      * This method returns an instance of PreparedStatement
1:      * which implements java.sql.PreparedStatement.
1:      * It has the ClientPooledConnection as one of its parameters
1:      * this is used to raise the Statement Events when the prepared
1:      * statement is closed.
1:      */
0:     public PreparedStatement newPreparedStatement(Agent agent,
0:             org.apache.derby.client.am.Connection connection,
1:             String sql,int type,int concurrency,
1:             int holdability,int autoGeneratedKeys,
1:             String [] columnNames,
1:             int[] columnIndexes, ClientPooledConnection cpc) 
1:             throws SqlException {
0:         return new PreparedStatement42(agent,connection,sql,type,concurrency,
0:                 holdability,autoGeneratedKeys,columnNames,columnIndexes, cpc);
1:     }
1: 
1:     /**
0:      * Returns a new logcial prepared statement object.
1:      */
1:     public LogicalPreparedStatement newLogicalPreparedStatement(
0:             java.sql.PreparedStatement ps,
1:             StatementKey stmtKey,
1:             StatementCacheInteractor cacheInteractor) {
1:         return new LogicalPreparedStatement42(ps, stmtKey, cacheInteractor);
1:     }
1:     
commit:cd1db93
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.SqlException;
1: 
/////////////////////////////////////////////////////////////////////////
1:         ( String message, String sqlState, int errorCode, long[] updateCounts, SqlException cause )
0:         return new java.sql.BatchUpdateException( message, sqlState, errorCode, updateCounts, cause );
commit:b54918e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.net.ClientJDBCObjectFactoryImpl42
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.net;
1: 
1: /**
1:  * Implements the ClientJDBCObjectFactory interface and returns the JDBC 4.2
1:  * specific classes.
1:  */
0: public class ClientJDBCObjectFactoryImpl42 extends ClientJDBCObjectFactoryImpl40
1: {
0:     /** This method is overriden on JVM 8 to take advantage of long update counts */
0:     protected   java.sql.BatchUpdateException   newBatchUpdateException
0:         ( String message, String sqlState, int errorCode, long[] updateCounts )
1:     {
0:         return new java.sql.BatchUpdateException( message, sqlState, errorCode, updateCounts, null );
1:     }
1: }
1: 
1:     
1: 
============================================================================