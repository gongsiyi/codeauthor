1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.RowOrdering
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This interface provides a representation of the ordering of rows in a
1:eac0369:  * ResultSet.
1:eac0369:  */
1:eac0369: public interface RowOrdering
1:eac0369: {
1:eac0369: 	static final int	ASCENDING = 1;
1:eac0369: 	static final int	DESCENDING = 2;
1:eac0369: 	static final int	DONTCARE = 3;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell whether this ordering is ordered on the given column in
1:eac0369: 	 * the given position
1:eac0369: 	 *
1:eac0369: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE
1:eac0369: 	 *						depending on the requirements of the caller.
1:eac0369: 	 *						An ORDER BY clause cares about direction,
1:eac0369: 	 *						while DISTINCT and GROUP BY do not.
1:eac0369: 	 * @param orderPosition	The position in the ordering list.  For example,
1:eac0369: 	 *						for ORDER BY A, B, position 0 has column A,
1:eac0369: 	 *						and position 1 has column B.  Note that for an
1:eac0369: 	 *						ordering, more than one column can be in a single
1:eac0369: 	 *						ordering position: for example, in the query
1:eac0369: 	 *						SELECT * FROM S, T WHERE S.A = T.B ORDER BY T.B
1:eac0369: 	 *						columns S.A and T.B will be in the same ordering
1:eac0369: 	 *						positions because they are equal.  Also, constant
1:eac0369: 	 *						values are considered ordered in all positions
1:eac0369: 	 *						(consider SELECT A FROM T WHERE A = 1 ORDER BY A).
1:eac0369: 	 * @param tableNumber	The table number of the Optimizable containing
1:eac0369: 	 *						the column in question
1:eac0369: 	 * @param columnNumber	The column number in the table (one-based).
1:eac0369: 	 *
1:eac0369: 	 * @return	true means this ordering is ordered on the given column
1:eac0369: 	 *			in the given position.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	boolean orderedOnColumn(int direction,
1:eac0369: 							int orderPosition,
1:eac0369: 							int tableNumber,
1:eac0369: 							int columnNumber)
1:eac0369: 			throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell whether this ordering is ordered on the given column.
1:eac0369: 	 * This is similar to the method above, but it checks whether the
1:eac0369: 	 * column is ordered in any position, rather than a specified position.
1:eac0369: 	 * This is useful for operations like DISTINCT and GROUP BY.
1:eac0369: 	 *
1:eac0369: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE
1:eac0369: 	 *						depending on the requirements of the caller.
1:eac0369: 	 *						An ORDER BY clause cares about direction,
1:eac0369: 	 *						while DISTINCT and GROUP BY do not.
1:eac0369: 	 * @param tableNumber	The table number of the Optimizable containing
1:eac0369: 	 *						the column in question
1:eac0369: 	 * @param columnNumber	The column number in the table (one-based).
1:eac0369: 	 *
1:eac0369: 	 * @return	true means this ordering is ordered on the given column
1:eac0369: 	 *			in the given position.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	boolean orderedOnColumn(int direction,
1:eac0369: 							int tableNumber,
1:eac0369: 							int columnNumber)
1:eac0369: 			throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Add a column to this RowOrdering in the current order position.
1:eac0369: 	 * This is a no-op if there are any unordered optimizables in the
1:eac0369: 	 * join order (see below).
1:eac0369: 	 *
1:eac0369: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE.
1:eac0369: 	 *						DONTCARE can be used for things like columns
1:eac0369: 	 *						with constant value, and for one-row tables.
1:eac0369: 	 * @param tableNumber	The table the column is in.
1:eac0369: 	 * @param columnNumber	The column number in the table (one-based)
1:eac0369: 	 */
1:eac0369: 	void addOrderedColumn(int direction,
1:eac0369: 							int tableNumber,
1:eac0369: 							int columnNumber);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Move to the next order position for adding ordered columns.
1:eac0369: 	 * This is a no-op if there are any unordered optimizables in the
1:eac0369: 	 * join order (see below).
1:eac0369: 	 *
1:eac0369: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE.
1:eac0369: 	 *						DONTCARE can be used for things like columns
1:eac0369: 	 *						with constant value, and for one-row tables.
1:eac0369: 	 */
1:eac0369: 	void nextOrderPosition(int direction);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell this RowOrdering that it is always ordered on the given optimizable
1:eac0369: 	 * This is useful when considering a unique index where there is an
1:eac0369: 	 * equality match on the entire key - in this case, all the columns
1:eac0369: 	 * are ordered, regardless of the direction or position,
1:eac0369: 	 * or even whether the columns are in the index.
1:eac0369: 	 *
1:eac0369: 	 * @param optimizable	The table in question
1:eac0369: 	 */
1:eac0369: 	void optimizableAlwaysOrdered(Optimizable optimizable);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell this RowOrdering that it is always ordered on the given column
1:eac0369: 	 * of the given optimizable.  This is useful when a column in the
1:200a5ea: 	 * optimizable has an equals comparison with a constant expression or
1:200a5ea: 	 * it is involved in a equijoin with an optimizable which is always 
1:200a5ea: 	 * ordered on the column on which the equijoin is happening. This is 
1:200a5ea: 	 * reset when the optimizable is removed from this RowOrdering.
1:eac0369: 	 *
1:eac0369: 	 * @param optimizable	The table in question
1:eac0369: 	 * @param columnNumber	The number of the column in question.
1:eac0369: 	 */
1:eac0369: 	void columnAlwaysOrdered(Optimizable optimizable, int columnNumber);
1:200a5ea: 	
1:200a5ea: 	/**
1:200a5ea: 	 * Return true if the column is always ordered. That will be true if the
1:200a5ea: 	 * column has a constant comparison predicate on it or it is involved in
1:200a5ea: 	 * a equijoin with an optimizable which is always ordered on the column
1:200a5ea: 	 * on which the equijoin is happening.
1:200a5ea: 	 *
1:200a5ea: 	 * @param tableNumber	The table in question
1:200a5ea: 	 * @param columnNumber	The number of the column in question.
1:200a5ea: 	 * @return	true means this column is always ordered
1:200a5ea: 	*/
1:200a5ea: 	public boolean isColumnAlwaysOrdered(int tableNumber, int columnNumber);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Ask whether the given table is always ordered.
1:eac0369: 	 */
1:eac0369: 	boolean alwaysOrdered(int tableNumber);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Tell this row ordering that it is no longer ordered on the given
1:eac0369: 	 * table.  Also, adjust the current order position, if necessary.
1:eac0369: 	 * This only works to remove ordered columns from the end of the
1:eac0369: 	 * ordering.
1:eac0369: 	 *
1:eac0369: 	 * @param tableNumber	The number of the table to remove from 
1:eac0369: 	 *						this RowOrdering.
1:eac0369: 	 */
1:eac0369: 	void removeOptimizable(int tableNumber);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Add an unordered optimizable to this RowOrdering.  This is to
1:eac0369: 	 * solve the following problem:
1:eac0369: 	 *
1:eac0369: 	 * Suppose we have the query:
1:eac0369: 	 *
1:eac0369: 	 *		select * from r, s, t order by r.a, t.b
1:eac0369: 	 *
1:eac0369: 	 * Also suppose there are indexes on r.a and t.b.  When the
1:eac0369: 	 * optimizer considers the join order (r, s, t) using the index
1:eac0369: 	 * on r.a, the heap on s, and the index on t.b, the rows from the
1:eac0369: 	 * join order will *NOT* be ordered on t.b, because there is an
1:eac0369: 	 * unordered result set between r and t.  So, when s is added to
1:eac0369: 	 * the partial join order, and we then add table t to the join order,
1:eac0369: 	 * we want to ensure that we don't add column t.b to the RowOrdering.
1:eac0369: 	 */
1:eac0369: 	void addUnorderedOptimizable(Optimizable optimizable);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Copy the contents of this RowOrdering to the given RowOrdering.
1:eac0369: 	 */
1:eac0369: 	void copy(RowOrdering copyTo);
1:eac0369: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:200a5ea
/////////////////////////////////////////////////////////////////////////
1: 	 * optimizable has an equals comparison with a constant expression or
1: 	 * it is involved in a equijoin with an optimizable which is always 
1: 	 * ordered on the column on which the equijoin is happening. This is 
1: 	 * reset when the optimizable is removed from this RowOrdering.
1: 	
1: 	/**
1: 	 * Return true if the column is always ordered. That will be true if the
1: 	 * column has a constant comparison predicate on it or it is involved in
1: 	 * a equijoin with an optimizable which is always ordered on the column
1: 	 * on which the equijoin is happening.
1: 	 *
1: 	 * @param tableNumber	The table in question
1: 	 * @param columnNumber	The number of the column in question.
1: 	 * @return	true means this column is always ordered
1: 	*/
1: 	public boolean isColumnAlwaysOrdered(int tableNumber, int columnNumber);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.RowOrdering
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * This interface provides a representation of the ordering of rows in a
1:  * ResultSet.
1:  */
1: public interface RowOrdering
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	static final int	ASCENDING = 1;
1: 	static final int	DESCENDING = 2;
1: 	static final int	DONTCARE = 3;
1: 
1: 	/**
1: 	 * Tell whether this ordering is ordered on the given column in
1: 	 * the given position
1: 	 *
1: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE
1: 	 *						depending on the requirements of the caller.
1: 	 *						An ORDER BY clause cares about direction,
1: 	 *						while DISTINCT and GROUP BY do not.
1: 	 * @param orderPosition	The position in the ordering list.  For example,
1: 	 *						for ORDER BY A, B, position 0 has column A,
1: 	 *						and position 1 has column B.  Note that for an
1: 	 *						ordering, more than one column can be in a single
1: 	 *						ordering position: for example, in the query
1: 	 *						SELECT * FROM S, T WHERE S.A = T.B ORDER BY T.B
1: 	 *						columns S.A and T.B will be in the same ordering
1: 	 *						positions because they are equal.  Also, constant
1: 	 *						values are considered ordered in all positions
1: 	 *						(consider SELECT A FROM T WHERE A = 1 ORDER BY A).
1: 	 * @param tableNumber	The table number of the Optimizable containing
1: 	 *						the column in question
1: 	 * @param columnNumber	The column number in the table (one-based).
1: 	 *
1: 	 * @return	true means this ordering is ordered on the given column
1: 	 *			in the given position.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	boolean orderedOnColumn(int direction,
1: 							int orderPosition,
1: 							int tableNumber,
1: 							int columnNumber)
1: 			throws StandardException;
1: 
1: 	/**
1: 	 * Tell whether this ordering is ordered on the given column.
1: 	 * This is similar to the method above, but it checks whether the
1: 	 * column is ordered in any position, rather than a specified position.
1: 	 * This is useful for operations like DISTINCT and GROUP BY.
1: 	 *
1: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE
1: 	 *						depending on the requirements of the caller.
1: 	 *						An ORDER BY clause cares about direction,
1: 	 *						while DISTINCT and GROUP BY do not.
1: 	 * @param tableNumber	The table number of the Optimizable containing
1: 	 *						the column in question
1: 	 * @param columnNumber	The column number in the table (one-based).
1: 	 *
1: 	 * @return	true means this ordering is ordered on the given column
1: 	 *			in the given position.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	boolean orderedOnColumn(int direction,
1: 							int tableNumber,
1: 							int columnNumber)
1: 			throws StandardException;
1: 
1: 	/**
1: 	 * Add a column to this RowOrdering in the current order position.
1: 	 * This is a no-op if there are any unordered optimizables in the
1: 	 * join order (see below).
1: 	 *
1: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE.
1: 	 *						DONTCARE can be used for things like columns
1: 	 *						with constant value, and for one-row tables.
1: 	 * @param tableNumber	The table the column is in.
1: 	 * @param columnNumber	The column number in the table (one-based)
1: 	 */
1: 	void addOrderedColumn(int direction,
1: 							int tableNumber,
1: 							int columnNumber);
1: 
1: 	/**
1: 	 * Move to the next order position for adding ordered columns.
1: 	 * This is a no-op if there are any unordered optimizables in the
1: 	 * join order (see below).
1: 	 *
1: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE.
1: 	 *						DONTCARE can be used for things like columns
1: 	 *						with constant value, and for one-row tables.
1: 	 */
1: 	void nextOrderPosition(int direction);
1: 
1: 	/**
1: 	 * Tell this RowOrdering that it is always ordered on the given optimizable
1: 	 * This is useful when considering a unique index where there is an
1: 	 * equality match on the entire key - in this case, all the columns
1: 	 * are ordered, regardless of the direction or position,
1: 	 * or even whether the columns are in the index.
1: 	 *
1: 	 * @param optimizable	The table in question
1: 	 */
1: 	void optimizableAlwaysOrdered(Optimizable optimizable);
1: 
1: 	/**
1: 	 * Tell this RowOrdering that it is always ordered on the given column
1: 	 * of the given optimizable.  This is useful when a column in the
0: 	 * optimizable has an equals comparison with a constant expression.
0: 	 * This is reset when the optimizable is removed from this RowOrdering.
1: 	 *
1: 	 * @param optimizable	The table in question
1: 	 * @param columnNumber	The number of the column in question.
1: 	 */
1: 	void columnAlwaysOrdered(Optimizable optimizable, int columnNumber);
1: 
1: 	/**
1: 	 * Ask whether the given table is always ordered.
1: 	 */
1: 	boolean alwaysOrdered(int tableNumber);
1: 
1: 	/**
1: 	 * Tell this row ordering that it is no longer ordered on the given
1: 	 * table.  Also, adjust the current order position, if necessary.
1: 	 * This only works to remove ordered columns from the end of the
1: 	 * ordering.
1: 	 *
1: 	 * @param tableNumber	The number of the table to remove from 
1: 	 *						this RowOrdering.
1: 	 */
1: 	void removeOptimizable(int tableNumber);
1: 
1: 	/**
1: 	 * Add an unordered optimizable to this RowOrdering.  This is to
1: 	 * solve the following problem:
1: 	 *
1: 	 * Suppose we have the query:
1: 	 *
1: 	 *		select * from r, s, t order by r.a, t.b
1: 	 *
1: 	 * Also suppose there are indexes on r.a and t.b.  When the
1: 	 * optimizer considers the join order (r, s, t) using the index
1: 	 * on r.a, the heap on s, and the index on t.b, the rows from the
1: 	 * join order will *NOT* be ordered on t.b, because there is an
1: 	 * unordered result set between r and t.  So, when s is added to
1: 	 * the partial join order, and we then add table t to the join order,
1: 	 * we want to ensure that we don't add column t.b to the RowOrdering.
1: 	 */
1: 	void addUnorderedOptimizable(Optimizable optimizable);
1: 
1: 	/**
1: 	 * Copy the contents of this RowOrdering to the given RowOrdering.
1: 	 */
1: 	void copy(RowOrdering copyTo);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * This interface provides a representation of the ordering of rows in a
0:  * ResultSet.
0:  */
0: public interface RowOrdering
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	static final int	ASCENDING = 1;
0: 	static final int	DESCENDING = 2;
0: 	static final int	DONTCARE = 3;
0: 
0: 	/**
0: 	 * Tell whether this ordering is ordered on the given column in
0: 	 * the given position
0: 	 *
0: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE
0: 	 *						depending on the requirements of the caller.
0: 	 *						An ORDER BY clause cares about direction,
0: 	 *						while DISTINCT and GROUP BY do not.
0: 	 * @param orderPosition	The position in the ordering list.  For example,
0: 	 *						for ORDER BY A, B, position 0 has column A,
0: 	 *						and position 1 has column B.  Note that for an
0: 	 *						ordering, more than one column can be in a single
0: 	 *						ordering position: for example, in the query
0: 	 *						SELECT * FROM S, T WHERE S.A = T.B ORDER BY T.B
0: 	 *						columns S.A and T.B will be in the same ordering
0: 	 *						positions because they are equal.  Also, constant
0: 	 *						values are considered ordered in all positions
0: 	 *						(consider SELECT A FROM T WHERE A = 1 ORDER BY A).
0: 	 * @param tableNumber	The table number of the Optimizable containing
0: 	 *						the column in question
0: 	 * @param columnNumber	The column number in the table (one-based).
0: 	 *
0: 	 * @return	true means this ordering is ordered on the given column
0: 	 *			in the given position.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	boolean orderedOnColumn(int direction,
0: 							int orderPosition,
0: 							int tableNumber,
0: 							int columnNumber)
0: 			throws StandardException;
0: 
0: 	/**
0: 	 * Tell whether this ordering is ordered on the given column.
0: 	 * This is similar to the method above, but it checks whether the
0: 	 * column is ordered in any position, rather than a specified position.
0: 	 * This is useful for operations like DISTINCT and GROUP BY.
0: 	 *
0: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE
0: 	 *						depending on the requirements of the caller.
0: 	 *						An ORDER BY clause cares about direction,
0: 	 *						while DISTINCT and GROUP BY do not.
0: 	 * @param tableNumber	The table number of the Optimizable containing
0: 	 *						the column in question
0: 	 * @param columnNumber	The column number in the table (one-based).
0: 	 *
0: 	 * @return	true means this ordering is ordered on the given column
0: 	 *			in the given position.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	boolean orderedOnColumn(int direction,
0: 							int tableNumber,
0: 							int columnNumber)
0: 			throws StandardException;
0: 
0: 	/**
0: 	 * Add a column to this RowOrdering in the current order position.
0: 	 * This is a no-op if there are any unordered optimizables in the
0: 	 * join order (see below).
0: 	 *
0: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE.
0: 	 *						DONTCARE can be used for things like columns
0: 	 *						with constant value, and for one-row tables.
0: 	 * @param tableNumber	The table the column is in.
0: 	 * @param columnNumber	The column number in the table (one-based)
0: 	 */
0: 	void addOrderedColumn(int direction,
0: 							int tableNumber,
0: 							int columnNumber);
0: 
0: 	/**
0: 	 * Move to the next order position for adding ordered columns.
0: 	 * This is a no-op if there are any unordered optimizables in the
0: 	 * join order (see below).
0: 	 *
0: 	 * @param direction		One of ASCENDING, DESCENDING, or DONTCARE.
0: 	 *						DONTCARE can be used for things like columns
0: 	 *						with constant value, and for one-row tables.
0: 	 */
0: 	void nextOrderPosition(int direction);
0: 
0: 	/**
0: 	 * Tell this RowOrdering that it is always ordered on the given optimizable
0: 	 * This is useful when considering a unique index where there is an
0: 	 * equality match on the entire key - in this case, all the columns
0: 	 * are ordered, regardless of the direction or position,
0: 	 * or even whether the columns are in the index.
0: 	 *
0: 	 * @param optimizable	The table in question
0: 	 */
0: 	void optimizableAlwaysOrdered(Optimizable optimizable);
0: 
0: 	/**
0: 	 * Tell this RowOrdering that it is always ordered on the given column
0: 	 * of the given optimizable.  This is useful when a column in the
0: 	 * optimizable has an equals comparison with a constant expression.
0: 	 * This is reset when the optimizable is removed from this RowOrdering.
0: 	 *
0: 	 * @param optimizable	The table in question
0: 	 * @param columnNumber	The number of the column in question.
0: 	 */
0: 	void columnAlwaysOrdered(Optimizable optimizable, int columnNumber);
0: 
0: 	/**
0: 	 * Ask whether the given table is always ordered.
0: 	 */
0: 	boolean alwaysOrdered(int tableNumber);
0: 
0: 	/**
0: 	 * Tell this row ordering that it is no longer ordered on the given
0: 	 * table.  Also, adjust the current order position, if necessary.
0: 	 * This only works to remove ordered columns from the end of the
0: 	 * ordering.
0: 	 *
0: 	 * @param tableNumber	The number of the table to remove from 
0: 	 *						this RowOrdering.
0: 	 */
0: 	void removeOptimizable(int tableNumber);
0: 
0: 	/**
0: 	 * Add an unordered optimizable to this RowOrdering.  This is to
0: 	 * solve the following problem:
0: 	 *
0: 	 * Suppose we have the query:
0: 	 *
0: 	 *		select * from r, s, t order by r.a, t.b
0: 	 *
0: 	 * Also suppose there are indexes on r.a and t.b.  When the
0: 	 * optimizer considers the join order (r, s, t) using the index
0: 	 * on r.a, the heap on s, and the index on t.b, the rows from the
0: 	 * join order will *NOT* be ordered on t.b, because there is an
0: 	 * unordered result set between r and t.  So, when s is added to
0: 	 * the partial join order, and we then add table t to the join order,
0: 	 * we want to ensure that we don't add column t.b to the RowOrdering.
0: 	 */
0: 	void addUnorderedOptimizable(Optimizable optimizable);
0: 
0: 	/**
0: 	 * Copy the contents of this RowOrdering to the given RowOrdering.
0: 	 */
0: 	void copy(RowOrdering copyTo);
0: }
============================================================================