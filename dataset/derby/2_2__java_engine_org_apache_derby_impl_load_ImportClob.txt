1:3568cea: /*
1:3568cea: 
1:3568cea:    Derby - Class org.apache.derby.impl.load.ImportClob
1:3568cea: 
1:3568cea:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3568cea:    contributor license agreements.  See the NOTICE file distributed with
1:3568cea:    this work for additional information regarding copyright ownership.
1:3568cea:    The ASF licenses this file to You under the Apache License, Version 2.0
1:3568cea:    (the "License"); you may not use this file except in compliance with
1:3568cea:    the License.  You may obtain a copy of the License at
1:3568cea: 
1:3568cea:       http://www.apache.org/licenses/LICENSE-2.0
1:3568cea: 
1:3568cea:    Unless required by applicable law or agreed to in writing, software
1:3568cea:    distributed under the License is distributed on an "AS IS" BASIS,
1:3568cea:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3568cea:    See the License for the specific language governing permissions and
1:3568cea:    limitations under the License.
1:3568cea: 
1:3568cea:  */
1:3568cea: 
1:3568cea: package org.apache.derby.impl.load;
1:3568cea: import org.apache.derby.iapi.services.io.LimitReader;
1:3568cea: import java.sql.Clob;
1:3568cea: import java.sql.SQLException;
1:3568cea: import java.io.Reader;
1:3568cea: import java.io.IOException;
1:3568cea: 
1:3568cea: /**
1:3568cea:  * This class implements  <code > java.sql.CLOB interface </code>.  
1:3568cea:  * Objects created using the <code> ImportClob </code> class  are 
1:3568cea:  * intended to be be used to create a clob object of the data  stored 
1:3568cea:  * in an import file.  Only the routines that are needed  to read the 
1:3568cea:  * clob data for the clob columns by the  inserts done through the VTI  
1:3568cea:  * have real implementations,  Other routines are dummy ones to satisfy
1:3568cea:  * <code> java.sql.Clob </code>  interface.
1:3568cea:  */
1:3568cea: 
1:3568cea: class ImportClob implements java.sql.Clob {
1:3568cea: 
1:3568cea:     private ImportLobFile lobFile;
1:3568cea: 	private long position; // postion in the import file in bytes.
1:3568cea:     private long length;  // length in bytes
1:3568cea: 	private long clobLength; // length of clob in chars. 
1:3568cea:     private String clobData = null;
1:3568cea: 
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * Create a import Clob object, that reads <code> length </code> amount of 
1:3568cea:      * data  from an external file, starting at <code> position </code>. 
1:3568cea:      * @param lobFile  lob file resource object, using which data is read.
1:3568cea:      * @param position  byte offset in the file, of this clob column data. 
1:3568cea:      * @param length   length of this clob object data in bytes. 
1:3568cea:      */
1:3568cea:     public ImportClob(ImportLobFile lobFile, long position, long length) 
1:3568cea:         throws IOException 
4:3568cea: 	{
1:3568cea: 		this.lobFile = lobFile;
1:3568cea: 		this.position = position;
1:3568cea:         this.length = length;
1:3568cea: 		this.clobLength = lobFile.getClobDataLength(position, length);
9:3568cea: 	}
1:3568cea: 
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * Create a Clob object, whose value is given as string.  
1:3568cea:      * @param data  String that contains the clob data. 
1:3568cea:      */
1:3568cea:     public ImportClob(String data) 
1:3568cea:     {
1:3568cea:        clobData = data;
1:3568cea:        clobLength = data.length();
1:3568cea:     }
1:3568cea: 
1:3568cea: 
1:3568cea:   /**
1:3568cea:    * Returns the number of characters in this <code>CLOB</code>  object.
1:3568cea:    * @return length of the <code>CLOB</code> in characters
1:3568cea:    * @exception SQLException on any error.
1:3568cea:    */
1:3568cea: 	public long length() throws SQLException {
1:3568cea: 		return clobLength;
1:3568cea: 	}
1:3568cea: 
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * Returns  <code>CLOB</code> value designated by this
1:3568cea:      * <code>Clob</code> object as a <code> Reader </code>.
1:3568cea:      *
1:3568cea:      * @return a Reader containing the <code>CLOB</code> data.
1:3568cea:      * @exception SQLException if any error occurs while setting up 
1:3568cea:      *                         this clob data in the import file as Reader. 
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:3568cea:     public java.io.Reader getCharacterStream() throws SQLException {
1:3568cea:         try {
1:3568cea:             Reader ir;
1:3568cea:             if(clobData != null) {
1:3568cea:                 // the data is string is already in the user spefied code set.
1:3568cea:                 ir = new java.io.StringReader(clobData);
1:3568cea:                 // wrap the Reader with a LimitReader class,
1:3568cea:                 // so that only the data of the clob length is read.
1:3568cea:                 LimitReader lr = new  LimitReader(ir);
1:3568cea:                 lr.setLimit((int) clobLength);
1:3568cea:                 return lr;
1:3568cea:             } else {
1:3568cea:                 return lobFile.getCharacterStream(position, length);
1:3568cea:             }
1:3568cea: 		} catch (Exception e) {
1:3568cea: 			throw LoadError.unexpectedError(e);
1:3568cea: 		}
1:3568cea:     }
1:3568cea: 
1:3568cea: 
1:3568cea:         
1:3568cea:     /** following rotines does not have implmentation because they
1:3568cea:      * are not used by the VTI that is used to import the data. 
1:3568cea:      */
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      *
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public String getSubString(long pos, int length) throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public java.io.InputStream getAsciiStream() throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea: 
1:3568cea:     /** 
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public long position(String searchstr, long start) throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea:     /** 
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public long position(Clob searchstr, long start) throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public int setString(long pos, String str) throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:3568cea:     public int setString(long pos, String str, int offset, int len) 
1:dfc9ab0:         throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public java.io.OutputStream setAsciiStream(long pos) throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public java.io.Writer setCharacterStream(long pos) throws SQLException { throw methodNotImplemented(); }
1:3568cea: 
1:3568cea:     /**
1:3568cea:      * This routine is not used by the VTI to read the data, so no 
1:3568cea:      * implementation is provided, an exception is thrown if it is
1:3568cea:      * called.  
1:3568cea:      * @see java.sql.Clob 
1:3568cea:      */
1:dfc9ab0:     public void truncate(long len) throws SQLException { throw methodNotImplemented(); }
1:dfc9ab0: 
1:dfc9ab0:     /** Raise error, not used by import */
1:dfc9ab0:     public  Reader 	getCharacterStream(long pos, long length) throws SQLException { throw methodNotImplemented(); }
1:dfc9ab0:     
1:dfc9ab0:     /** Raise error, not used by import */
1:dfc9ab0:     public  void free() throws SQLException { throw methodNotImplemented(); }
1:dfc9ab0:     
1:dfc9ab0:     /** Return an unimplemented feature error */
1:dfc9ab0:     private SQLException   methodNotImplemented()
1:3568cea:     {
1:dfc9ab0: 		return LoadError.unexpectedError( new Exception("Method not implemented")) ;
1:3568cea:     }
1:3568cea: }
1:3568cea: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dfc9ab0
/////////////////////////////////////////////////////////////////////////
1:     public String getSubString(long pos, int length) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public java.io.InputStream getAsciiStream() throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public long position(String searchstr, long start) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public long position(Clob searchstr, long start) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public int setString(long pos, String str) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:         throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public java.io.OutputStream setAsciiStream(long pos) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public java.io.Writer setCharacterStream(long pos) throws SQLException { throw methodNotImplemented(); }
/////////////////////////////////////////////////////////////////////////
1:     public void truncate(long len) throws SQLException { throw methodNotImplemented(); }
1: 
1:     /** Raise error, not used by import */
1:     public  Reader 	getCharacterStream(long pos, long length) throws SQLException { throw methodNotImplemented(); }
1:     
1:     /** Raise error, not used by import */
1:     public  void free() throws SQLException { throw methodNotImplemented(); }
1:     
1:     /** Return an unimplemented feature error */
1:     private SQLException   methodNotImplemented()
1: 		return LoadError.unexpectedError( new Exception("Method not implemented")) ;
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:3568cea
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.load.ImportClob
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: import org.apache.derby.iapi.services.io.LimitReader;
1: import java.sql.Clob;
1: import java.sql.SQLException;
1: import java.io.Reader;
1: import java.io.IOException;
1: 
1: /**
1:  * This class implements  <code > java.sql.CLOB interface </code>.  
1:  * Objects created using the <code> ImportClob </code> class  are 
1:  * intended to be be used to create a clob object of the data  stored 
1:  * in an import file.  Only the routines that are needed  to read the 
1:  * clob data for the clob columns by the  inserts done through the VTI  
1:  * have real implementations,  Other routines are dummy ones to satisfy
1:  * <code> java.sql.Clob </code>  interface.
1:  */
1: 
1: class ImportClob implements java.sql.Clob {
1: 
1:     private ImportLobFile lobFile;
1: 	private long position; // postion in the import file in bytes.
1:     private long length;  // length in bytes
1: 	private long clobLength; // length of clob in chars. 
1:     private String clobData = null;
1: 
1: 
1:     /**
1:      * Create a import Clob object, that reads <code> length </code> amount of 
1:      * data  from an external file, starting at <code> position </code>. 
1:      * @param lobFile  lob file resource object, using which data is read.
1:      * @param position  byte offset in the file, of this clob column data. 
1:      * @param length   length of this clob object data in bytes. 
1:      */
1:     public ImportClob(ImportLobFile lobFile, long position, long length) 
1:         throws IOException 
1: 	{
1: 		this.lobFile = lobFile;
1: 		this.position = position;
1:         this.length = length;
1: 		this.clobLength = lobFile.getClobDataLength(position, length);
1: 	}
1: 
1: 
1:     /**
1:      * Create a Clob object, whose value is given as string.  
1:      * @param data  String that contains the clob data. 
1:      */
1:     public ImportClob(String data) 
1:     {
1:        clobData = data;
1:        clobLength = data.length();
1:     }
1: 
1: 
1:   /**
1:    * Returns the number of characters in this <code>CLOB</code>  object.
1:    * @return length of the <code>CLOB</code> in characters
1:    * @exception SQLException on any error.
1:    */
1: 	public long length() throws SQLException {
1: 		return clobLength;
1: 	}
1: 
1: 
1:     /**
1:      * Returns  <code>CLOB</code> value designated by this
1:      * <code>Clob</code> object as a <code> Reader </code>.
1:      *
1:      * @return a Reader containing the <code>CLOB</code> data.
1:      * @exception SQLException if any error occurs while setting up 
1:      *                         this clob data in the import file as Reader. 
1:      * @see java.sql.Clob 
1:      */
1:     public java.io.Reader getCharacterStream() throws SQLException {
1:         try {
1:             Reader ir;
1:             if(clobData != null) {
1:                 // the data is string is already in the user spefied code set.
1:                 ir = new java.io.StringReader(clobData);
1:                 // wrap the Reader with a LimitReader class,
1:                 // so that only the data of the clob length is read.
1:                 LimitReader lr = new  LimitReader(ir);
1:                 lr.setLimit((int) clobLength);
1:                 return lr;
1:             } else {
1:                 return lobFile.getCharacterStream(position, length);
1:             }
1: 		} catch (Exception e) {
1: 			throw LoadError.unexpectedError(e);
1: 		}
1:     }
1: 
1: 
1:         
1:     /** following rotines does not have implmentation because they
1:      * are not used by the VTI that is used to import the data. 
1:      */
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      *
1:      * @see java.sql.Clob 
1:      */
0:     public String getSubString(long pos, int length) throws SQLException {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented"));
1:     }
1: 
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
0:     public java.io.InputStream getAsciiStream() throws SQLException {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented")); 
1:     }
1: 
1: 
1:     /** 
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
0:     public long position(String searchstr, long start) throws SQLException {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented")); 
1:     }
1: 
1:     /** 
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
0:     public long position(Clob searchstr, long start) throws SQLException {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented")); 
1:     }
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
0:     public int setString(long pos, String str) throws SQLException {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented"));  
1:     }
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
1:     public int setString(long pos, String str, int offset, int len) 
0:         throws SQLException
1:     {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented")); 
1:     }
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
0:     public java.io.OutputStream setAsciiStream(long pos) throws SQLException
1:     {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented")); 
1:     }
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
0:     public java.io.Writer setCharacterStream(long pos) throws SQLException
1:     {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented")); 
1:      }
1: 
1:     /**
1:      * This routine is not used by the VTI to read the data, so no 
1:      * implementation is provided, an exception is thrown if it is
1:      * called.  
1:      * @see java.sql.Clob 
1:      */
0:     public void truncate(long len) throws SQLException 
1:     {
0:         throw LoadError.unexpectedError(
0:                          new Exception("Method not implemented"));  
1:     }
1: }
1: 
============================================================================