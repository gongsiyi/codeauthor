1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.BulkTableScanResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.GroupFetchScanController;
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Read a base table or index in bulk.  Most of the
1:eac0369:  * work for this method is inherited from TableScanResultSet.
1:eac0369:  * This class overrides getNextRowCore (and extends 
1:eac0369:  * re/openCore) to use a row array and fetch rows
1:eac0369:  * from the Store in bulk  (using fetchNextGroup).
1:eac0369:  * <p>
1:eac0369:  * Since it retrieves rows in bulk, locking is not
1:eac0369:  * as is usual -- locks may have already been released
1:eac0369:  * on rows as they are returned to the user.  Hence,
1:eac0369:  * this ResultSet is not suitable for a query running
1:eac0369:  * Isolation Level 1, cursor stability.
1:eac0369:  * <p>
1:eac0369:  * Note that this code is only accessable from an
1:eac0369:  * optimizer override.  If it makes sense to have the
1:eac0369:  * optimizer select bulk reads, then this should
1:eac0369:  * probably be rolled into TableScanResultSet.
1:eac0369:  *
1:eac0369:  */
1:f77f36d: class BulkTableScanResultSet extends TableScanResultSet
1:eac0369: 	implements CursorResultSet
1:eac0369: {
1:eac0369: 	private DataValueDescriptor[][] rowArray;
1:508a010:     private RowLocation[]   rowLocations;
1:eac0369: 	private int curRowPosition;
1:eac0369: 	private int numRowsInArray;
1:508a010:     private int         baseColumnCount;
1:508a010:     private int         resultColumnCount;
1:eac0369: 
1:eac0369: 	private static int OUT_OF_ROWS = 0;
1:eac0369: 
1:eac0369:     /**
1:eac0369:  	 * Constructor.  Just save off the rowsPerRead argument
1:eac0369: 	 * and pass everything else down to TableScanResultSet
1:eac0369: 	 * 
1:eac0369: 	 * @see org.apache.derby.iapi.sql.execute.ResultSetFactory#getBulkTableScanResultSet
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure to open
1:eac0369: 	 */
1:f77f36d:     BulkTableScanResultSet(long conglomId,
1:eac0369: 		StaticCompiledOpenConglomInfo scoci, Activation activation, 
1:959fef2: 		int resultRowTemplate,
1:eac0369: 		int resultSetNumber,
1:eac0369: 		GeneratedMethod startKeyGetter, int startSearchOperator,
1:eac0369: 		GeneratedMethod stopKeyGetter, int stopSearchOperator,
1:eac0369: 		boolean sameStartStopPosition,
1:eac0369: 		Qualifier[][] qualifiers,
1:eac0369: 		String tableName,
1:c7248d5: 		String userSuppliedOptimizerOverrides,
1:eac0369: 		String indexName,
1:eac0369: 		boolean isConstraint,
1:eac0369: 		boolean forUpdate,
1:eac0369: 		int colRefItem,
1:eac0369: 		int indexColItem,
1:eac0369: 		int lockMode,
1:eac0369: 		boolean tableLocked,
1:eac0369: 		int isolationLevel,
1:eac0369: 		int rowsPerRead,
1:ec6fcf1:         boolean disableForHoldable,
1:eac0369: 		boolean oneRowScan,
1:eac0369: 		double optimizerEstimatedRowCount,
1:f77f36d: 		double optimizerEstimatedCost)
1:eac0369: 			throws StandardException
1:eac0369:     {
1:eac0369: 		super(conglomId,
1:eac0369: 			scoci,
1:eac0369: 			activation,
1:959fef2: 			resultRowTemplate,
1:eac0369: 			resultSetNumber,
1:eac0369: 			startKeyGetter,
1:eac0369: 			startSearchOperator,
1:eac0369: 			stopKeyGetter,
1:eac0369: 			stopSearchOperator,
1:eac0369: 			sameStartStopPosition,
1:eac0369: 			qualifiers,
1:eac0369: 			tableName,
1:c7248d5: 			userSuppliedOptimizerOverrides,
1:eac0369: 			indexName,
1:eac0369: 			isConstraint,
1:eac0369: 			forUpdate,
1:eac0369: 			colRefItem,
1:eac0369: 			indexColItem,
1:eac0369: 			lockMode,
1:eac0369: 			tableLocked,
1:eac0369: 			isolationLevel,
1:ec6fcf1:             adjustBulkFetchSize(activation, rowsPerRead, disableForHoldable),
1:eac0369: 			oneRowScan,
1:eac0369: 			optimizerEstimatedRowCount,
1:f77f36d: 			optimizerEstimatedCost);
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			/* Bulk fetch of size 1 is same as a regular table scan
1:eac0369: 			 * and is supposed to be detected at compile time.
1:eac0369: 			 */
1:eac0369: 			if (rowsPerRead == 1)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"rowsPerRead not expected to be 1");
1:eac0369: 			}
1:eac0369: 			/* Bulk table scan implies that scan is not
1:eac0369: 			 * a 1 row scan.
1:eac0369: 			 */
1:eac0369: 			if (oneRowScan)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 					"oneRowScan expected to be false - " +
1:eac0369: 					"rowsPerRead = " + rowsPerRead);
1:eac0369: 			}
1:eac0369: 		}
1:508a010: 
1:508a010:         // determine whether we should fetch row locations
1:508a010:         setRowLocationsState();
1:508a010: 
1:508a010:         //
1:508a010:         // The following code block was introduced to support the driving left join
1:508a010:         // of the MERGE statement. If we are executing a MERGE statement, we need
1:508a010:         // to fetch the row location of every row in the target table. If we are in this
1:508a010:         // situation, then the last column in the candidate row will be a RowLocation template
1:508a010:         // and the highest bit in accessedCols will be set. We want to smudge out this
1:508a010:         // information before we ask the Store for rows. The Store will be confused if we ask
1:508a010:         // for the RowLocation in the same row array as the actual base columns.
1:508a010:         //
1:508a010:         if ( fetchRowLocations )
1:508a010:         {
1:508a010:             resultColumnCount = accessedCols == null ? candidate.nColumns() : accessedCols.getNumBitsSet();
1:508a010:             baseColumnCount = candidate.nColumns() - 1;
1:508a010:             candidate.setRowArray( lopOffRowLocation() );
1:508a010: 
1:508a010:             // remove the RowLocation from the accessed column map
1:508a010:             if ( accessedCols == null )
1:508a010:             {
1:508a010:                 accessedCols = new FormatableBitSet( baseColumnCount );
1:508a010:                 for ( int i = 0; i < baseColumnCount; i++ ) { accessedCols.set( i ); }
1:508a010:             }
1:508a010:             else
1:508a010:             {
1:508a010:                 FormatableBitSet    newCols = new FormatableBitSet( baseColumnCount );
1:508a010:                 for ( int i = 0; i < baseColumnCount; i++ )
1:508a010:                 {
1:508a010:                     if ( accessedCols.isSet( i ) ) { newCols.set( i ); }
1:508a010:                 }
1:508a010:                 accessedCols = newCols;
1:508a010:             }
1:508a010:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:ec6fcf1:      * Adjust the bulk fetch size according to the parameters. Bulk fetch may
1:ec6fcf1:      * be disabled by returning 1 from this method. Disabling of bulk fetch
1:ec6fcf1:      * may happen if the cursor is holdable and it contains LOB columns
1:ec6fcf1:      * (DERBY-1511) because
1:ec6fcf1:      *
1:ec6fcf1:      * @param activation the activation for the executing statement
1:ec6fcf1:      * @param rowsPerRead how many rows to read in each chunk if a bulk fetch
1:ec6fcf1:      * is OK to use
1:ec6fcf1:      * @param disableForHoldable whether or not bulk fetch should be disabled
1:ec6fcf1:      * for holdable cursors
1:ec6fcf1:      * @return the bulk fetch size to use
1:ec6fcf1:      */
1:ec6fcf1:     private static int adjustBulkFetchSize(
1:ec6fcf1:             Activation activation, int rowsPerRead, boolean disableForHoldable)
1:ec6fcf1:     {
1:ec6fcf1:         if (disableForHoldable && activation.getResultSetHoldability()) {
1:ec6fcf1:             // We have a holdable cursor, and we've been requested to disable
1:ec6fcf1:             // bulk fetch if the cursor is holdable, so change bulk size to 1.
1:ec6fcf1:             return 1;
1:ec6fcf1:         } else {
1:ec6fcf1:             return rowsPerRead;
1:ec6fcf1:         }
1:ec6fcf1:     }
1:ec6fcf1: 
1:ec6fcf1:     /**
1:eac0369:  	 * Open the scan controller
1:eac0369: 	 *
1:3fcea8a: 	 * @param tc transaction controller will open one if null
1:eac0369:      *
1:eac0369: 	 * @exception StandardException thrown on failure to open
1:eac0369: 	 */
1:eac0369: 	protected void openScanController(TransactionController tc)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor[] startPositionRow = startPosition == null ? null : startPosition.getRowArray();
1:eac0369: 		DataValueDescriptor[] stopPositionRow = stopPosition == null ? null : stopPosition.getRowArray();
1:eac0369: 
1:eac0369: 		// Clear the Qualifiers's Orderable cache 
1:eac0369: 		if (qualifiers != null)
1:eac0369: 		{
1:eac0369: 			clearOrderableCache(qualifiers);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Get the current transaction controller
1:eac0369: 		if (tc == null)
1:eac0369: 			tc = activation.getTransactionController();
1:eac0369: 		scanController = tc.openCompiledScan(
1:eac0369: 				activation.getResultSetHoldability(),
1:eac0369: 				(forUpdate ? TransactionController.OPENMODE_FORUPDATE : 0),
1:eac0369:                 lockMode,
1:eac0369:                 isolationLevel,
1:eac0369: 				accessedCols,
1:eac0369: 				startPositionRow,
1:eac0369: 					// not used when giving null start position
1:eac0369: 				startSearchOperator,
1:eac0369: 				qualifiers,
1:eac0369: 				stopPositionRow,
1:eac0369: 					// not used when giving null stop position
1:eac0369: 				stopSearchOperator,
1:eac0369: 				scoci,
1:eac0369: 				dcoci);
1:eac0369: 
1:eac0369: 		/* Remember that we opened the scan */
1:eac0369: 		scanControllerOpened = true;
1:eac0369: 
1:eac0369: 		rowsThisScan = 0;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the activation of the estimated number of rows.  Only
1:eac0369: 		** do it here, not in reopen, so that we don't do this costly
1:eac0369: 		** check too often.
1:eac0369: 		*/
1:eac0369: 		activation.informOfRowCount(
1:eac0369: 									this,
1:eac0369: 									scanController.getEstimatedRowCount()
1:eac0369: 									);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Open up the result set.  Delegate
1:eac0369: 	 * most work to TableScanResultSet.openCore().
1:eac0369: 	 * Create a new array with <rowsPerRead> rows
1:eac0369: 	 * for use in fetchNextGroup().
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure to open
1:eac0369: 	 */
1:eac0369: 	public void openCore() throws StandardException
1:eac0369: 	{
1:eac0369: 		super.openCore();
1:eac0369: 		/*
1:eac0369: 		** Add the extra time we spent after
1:eac0369: 		** the super class -- TableScanResultSet()
1:eac0369: 		** already added up its time in openCore().
1:eac0369: 		*/
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		rowArray = new DataValueDescriptor[rowsPerRead][];
1:508a010:         if ( fetchRowLocations ) { rowLocations = new RowLocation[ rowsPerRead ]; }
1:eac0369: 
1:eac0369: 		// we only allocate the first row -- the
1:eac0369: 		// store clones as needed for the rest
1:eac0369: 		// of the rows
1:eac0369: 		rowArray[0] = candidate.getRowArrayClone();
1:eac0369: 		numRowsInArray = 0;
1:eac0369: 		curRowPosition = -1;
1:eac0369: 		
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:508a010:     /**
1:508a010:      * Get a blank row by cloning the candidate row and lopping off
1:508a010:      * the trailing RowLocation column for scans done on
1:508a010:      * behalf of MERGE statements.
1:508a010:      */
1:508a010:     private DataValueDescriptor[]   lopOffRowLocation()
1:508a010:         throws StandardException
1:508a010:     {
1:508a010:         DataValueDescriptor[]   temp = candidate.getRowArrayClone();
1:508a010: 
1:508a010:         int     count = temp.length - 1;
1:508a010:         DataValueDescriptor[]   result = new DataValueDescriptor[ count ] ;
1:508a010:         for ( int i = 0; i < count; i++ ) { result[ i ] = temp[ i ]; }
1:508a010: 
1:508a010:         return result;
1:508a010:     }
1:508a010: 
1:eac0369: 	/**
1:eac0369: 	 * Reopen the result set.  Delegate
1:eac0369: 	 * most work to TableScanResultSet.reopenCore().
1:eac0369: 	 * Reuse the array of rows.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure to open
1:eac0369: 	 */
1:eac0369: 	public void reopenCore() throws StandardException
1:eac0369: 	{
1:eac0369: 		super.reopenCore();
1:eac0369: 		numRowsInArray = 0;
1:eac0369: 		curRowPosition = -1;
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 	/**
1:eac0369: 	 * Return the next row (if any) from the scan (if open).
1:eac0369: 	 * Reload the rowArray as necessary.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure to get next row
1:eac0369: 	 */
1:eac0369: 	public ExecRow getNextRowCore() throws StandardException
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 	    ExecRow result = null;
1:3fcea8a:             
1:3fcea8a:         checkCancellationFlag();
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (isOpen && scanControllerOpened)
1:eac0369: 		{
1:eac0369: 			if (currentRow == null)
1:eac0369: 			{
1:eac0369: 				currentRow =
1:eac0369: 					getCompactRow(candidate,
1:eac0369: 									accessedCols,
1:eac0369: 									isKeyed);
1:eac0369: 			}
1:eac0369: 
1:eac0369: outer:		for (;;)
1:eac0369: 			{
1:eac0369: 				if (curRowPosition >= numRowsInArray - 1)
1:eac0369: 				{
1:eac0369: 					if (reloadArray() == OUT_OF_ROWS)
1:eac0369: 					{
1:4e784bb: 						clearCurrentRow();
1:eac0369: 						setRowCountIfPossible(rowsThisScan);
1:eac0369: 						return null;
1:eac0369: 					}
1:eac0369: 				}	
1:eac0369: 
1:eac0369: 				while (++curRowPosition < numRowsInArray)
1:eac0369: 				{
1:eac0369: 					candidate.setRowArray(rowArray[curRowPosition]);
1:eac0369: 					currentRow = setCompactRow(candidate, currentRow);
1:eac0369: 					rowsSeen++;
1:eac0369: 					rowsThisScan++;
1:eac0369: 
1:eac0369: 					/*
1:eac0369: 					** Skip rows where there are start or stop positioners
1:eac0369: 					** that do not implement ordered null semantics and
1:eac0369: 					** there are columns in those positions that contain
1:eac0369: 					** null.
1:eac0369: 					*/
1:eac0369: 					if (skipRow(candidate))
1:eac0369: 					{
1:eac0369: 						rowsFiltered++;
1:eac0369: 						continue;
1:eac0369: 					}
1:eac0369: 
1:eac0369: 					result = currentRow;
1:508a010:                     if ( fetchRowLocations )
1:508a010:                     {
1:508a010:                         result = new ValueRow( resultColumnCount );
1:508a010:                         int     idx = 1;
1:508a010: 
1:508a010:                         for ( ; idx < resultColumnCount; idx++ )
1:508a010:                         {
1:508a010:                             result.setColumn( idx, currentRow.getColumn( idx ) );
1:508a010:                         }
1:508a010:                         result.setColumn( idx, rowLocations[ curRowPosition ] );
1:508a010:                     }
1:eac0369: 					break outer;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		setCurrentRow(result);
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 	    return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Load up rowArray with a batch of
1:eac0369: 	** rows.
1:eac0369: 	*/
1:eac0369: 	private int reloadArray() throws StandardException
1:eac0369: 	{
1:eac0369: 		curRowPosition = -1;
1:eac0369: 		numRowsInArray =
1:eac0369: 				((GroupFetchScanController) scanController).fetchNextGroup(
1:508a010:                                                rowArray, rowLocations);
1:eac0369: 
1:eac0369: 		return numRowsInArray;
1:eac0369: 	}
1:508a010: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the open scan.  Delegate most
1:eac0369: 	 * of the work to TableScanResultSet.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** We'll let TableScanResultSet track
1:eac0369: 		** the time it takes to close up, so
1:eac0369: 		** no timing here.
1:eac0369: 		*/
1:eac0369: 		super.close();
1:eac0369: 		numRowsInArray = -1;
1:eac0369: 		curRowPosition = -1;
1:eac0369: 		rowArray = null;
1:508a010:         rowLocations = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Can we get instantaneous locks when getting share row
1:eac0369: 	 * locks at READ COMMITTED.
1:eac0369: 	 */
1:eac0369: 	protected boolean canGetInstantaneousLocks()
1:eac0369: 	{
1:97105d6: 		return !forUpdate;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NoPutResultSet#requiresRelocking
1:eac0369: 	 */
1:eac0369: 	public boolean requiresRelocking()
1:eac0369: 	{
1:eac0369: 		// IndexRowToBaseRow needs to relock if we didn't keep the lock
1:eac0369: 		return(
1:eac0369:           isolationLevel == TransactionController.ISOLATION_READ_COMMITTED   ||
1:eac0369:           isolationLevel == TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK ||
1:eac0369:           isolationLevel == TransactionController.ISOLATION_READ_UNCOMMITTED);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:508a010
/////////////////////////////////////////////////////////////////////////
1:     private RowLocation[]   rowLocations;
1:     private int         baseColumnCount;
1:     private int         resultColumnCount;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // determine whether we should fetch row locations
1:         setRowLocationsState();
1: 
1:         //
1:         // The following code block was introduced to support the driving left join
1:         // of the MERGE statement. If we are executing a MERGE statement, we need
1:         // to fetch the row location of every row in the target table. If we are in this
1:         // situation, then the last column in the candidate row will be a RowLocation template
1:         // and the highest bit in accessedCols will be set. We want to smudge out this
1:         // information before we ask the Store for rows. The Store will be confused if we ask
1:         // for the RowLocation in the same row array as the actual base columns.
1:         //
1:         if ( fetchRowLocations )
1:         {
1:             resultColumnCount = accessedCols == null ? candidate.nColumns() : accessedCols.getNumBitsSet();
1:             baseColumnCount = candidate.nColumns() - 1;
1:             candidate.setRowArray( lopOffRowLocation() );
1: 
1:             // remove the RowLocation from the accessed column map
1:             if ( accessedCols == null )
1:             {
1:                 accessedCols = new FormatableBitSet( baseColumnCount );
1:                 for ( int i = 0; i < baseColumnCount; i++ ) { accessedCols.set( i ); }
1:             }
1:             else
1:             {
1:                 FormatableBitSet    newCols = new FormatableBitSet( baseColumnCount );
1:                 for ( int i = 0; i < baseColumnCount; i++ )
1:                 {
1:                     if ( accessedCols.isSet( i ) ) { newCols.set( i ); }
1:                 }
1:                 accessedCols = newCols;
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if ( fetchRowLocations ) { rowLocations = new RowLocation[ rowsPerRead ]; }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get a blank row by cloning the candidate row and lopping off
1:      * the trailing RowLocation column for scans done on
1:      * behalf of MERGE statements.
1:      */
1:     private DataValueDescriptor[]   lopOffRowLocation()
1:         throws StandardException
1:     {
1:         DataValueDescriptor[]   temp = candidate.getRowArrayClone();
1: 
1:         int     count = temp.length - 1;
1:         DataValueDescriptor[]   result = new DataValueDescriptor[ count ] ;
1:         for ( int i = 0; i < count; i++ ) { result[ i ] = temp[ i ]; }
1: 
1:         return result;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                     if ( fetchRowLocations )
1:                     {
1:                         result = new ValueRow( resultColumnCount );
1:                         int     idx = 1;
1: 
1:                         for ( ; idx < resultColumnCount; idx++ )
1:                         {
1:                             result.setColumn( idx, currentRow.getColumn( idx ) );
1:                         }
1:                         result.setColumn( idx, rowLocations[ curRowPosition ] );
1:                     }
/////////////////////////////////////////////////////////////////////////
1:                                                rowArray, rowLocations);
1: 
/////////////////////////////////////////////////////////////////////////
1:         rowLocations = null;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:959fef2
/////////////////////////////////////////////////////////////////////////
1: 		int resultRowTemplate,
/////////////////////////////////////////////////////////////////////////
1: 			resultRowTemplate,
commit:ec6fcf1
/////////////////////////////////////////////////////////////////////////
1:         boolean disableForHoldable,
/////////////////////////////////////////////////////////////////////////
1:             adjustBulkFetchSize(activation, rowsPerRead, disableForHoldable),
/////////////////////////////////////////////////////////////////////////
1:      * Adjust the bulk fetch size according to the parameters. Bulk fetch may
1:      * be disabled by returning 1 from this method. Disabling of bulk fetch
1:      * may happen if the cursor is holdable and it contains LOB columns
1:      * (DERBY-1511) because
1:      *
1:      * @param activation the activation for the executing statement
1:      * @param rowsPerRead how many rows to read in each chunk if a bulk fetch
1:      * is OK to use
1:      * @param disableForHoldable whether or not bulk fetch should be disabled
1:      * for holdable cursors
1:      * @return the bulk fetch size to use
1:      */
1:     private static int adjustBulkFetchSize(
1:             Activation activation, int rowsPerRead, boolean disableForHoldable)
1:     {
1:         if (disableForHoldable && activation.getResultSetHoldability()) {
1:             // We have a holdable cursor, and we've been requested to disable
1:             // bulk fetch if the cursor is holdable, so change bulk size to 1.
1:             return 1;
1:         } else {
1:             return rowsPerRead;
1:         }
1:     }
1: 
1:     /**
commit:97105d6
/////////////////////////////////////////////////////////////////////////
1: 		return !forUpdate;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
1: 						clearCurrentRow();
commit:49f3f24
/////////////////////////////////////////////////////////////////////////
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
1: class BulkTableScanResultSet extends TableScanResultSet
/////////////////////////////////////////////////////////////////////////
1:     BulkTableScanResultSet(long conglomId,
/////////////////////////////////////////////////////////////////////////
1: 		double optimizerEstimatedCost)
/////////////////////////////////////////////////////////////////////////
1: 			optimizerEstimatedCost);
commit:3fcea8a
/////////////////////////////////////////////////////////////////////////
1: 	 * @param tc transaction controller will open one if null
/////////////////////////////////////////////////////////////////////////
1:             
1:         checkCancellationFlag();
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.BulkTableScanResultSet
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.store.access.GroupFetchScanController;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.store.access.ScanController;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1:  * Read a base table or index in bulk.  Most of the
1:  * work for this method is inherited from TableScanResultSet.
1:  * This class overrides getNextRowCore (and extends 
1:  * re/openCore) to use a row array and fetch rows
1:  * from the Store in bulk  (using fetchNextGroup).
1:  * <p>
1:  * Since it retrieves rows in bulk, locking is not
1:  * as is usual -- locks may have already been released
1:  * on rows as they are returned to the user.  Hence,
1:  * this ResultSet is not suitable for a query running
1:  * Isolation Level 1, cursor stability.
1:  * <p>
1:  * Note that this code is only accessable from an
1:  * optimizer override.  If it makes sense to have the
1:  * optimizer select bulk reads, then this should
1:  * probably be rolled into TableScanResultSet.
1:  *
0:  * @author jamie
1:  */
0: public class BulkTableScanResultSet extends TableScanResultSet
1: 	implements CursorResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private DataValueDescriptor[][] rowArray;
1: 	private int curRowPosition;
1: 	private int numRowsInArray;
1: 
1: 	private static int OUT_OF_ROWS = 0;
1: 
1:     /**
1:  	 * Constructor.  Just save off the rowsPerRead argument
1: 	 * and pass everything else down to TableScanResultSet
1: 	 * 
1: 	 * @see org.apache.derby.iapi.sql.execute.ResultSetFactory#getBulkTableScanResultSet
1: 	 *
1: 	 * @exception StandardException thrown on failure to open
1: 	 */
0:     public BulkTableScanResultSet(long conglomId,
1: 		StaticCompiledOpenConglomInfo scoci, Activation activation, 
0: 		GeneratedMethod resultRowAllocator, 
1: 		int resultSetNumber,
1: 		GeneratedMethod startKeyGetter, int startSearchOperator,
1: 		GeneratedMethod stopKeyGetter, int stopSearchOperator,
1: 		boolean sameStartStopPosition,
1: 		Qualifier[][] qualifiers,
1: 		String tableName,
1: 		String indexName,
1: 		boolean isConstraint,
1: 		boolean forUpdate,
1: 		int colRefItem,
1: 		int indexColItem,
1: 		int lockMode,
1: 		boolean tableLocked,
1: 		int isolationLevel,
1: 		int rowsPerRead,
1: 		boolean oneRowScan,
1: 		double optimizerEstimatedRowCount,
0: 		double optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup)
1: 			throws StandardException
1:     {
1: 		super(conglomId,
1: 			scoci,
1: 			activation,
0: 			resultRowAllocator,
1: 			resultSetNumber,
1: 			startKeyGetter,
1: 			startSearchOperator,
1: 			stopKeyGetter,
1: 			stopSearchOperator,
1: 			sameStartStopPosition,
1: 			qualifiers,
1: 			tableName,
1: 			indexName,
1: 			isConstraint,
1: 			forUpdate,
1: 			colRefItem,
1: 			indexColItem,
1: 			lockMode,
1: 			tableLocked,
1: 			isolationLevel,
0: 			rowsPerRead,
1: 			oneRowScan,
1: 			optimizerEstimatedRowCount,
0: 			optimizerEstimatedCost,
0: 			closeCleanup);
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			/* Bulk fetch of size 1 is same as a regular table scan
1: 			 * and is supposed to be detected at compile time.
1: 			 */
1: 			if (rowsPerRead == 1)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"rowsPerRead not expected to be 1");
1: 			}
1: 			/* Bulk table scan implies that scan is not
1: 			 * a 1 row scan.
1: 			 */
1: 			if (oneRowScan)
1: 			{
1: 				SanityManager.THROWASSERT(
1: 					"oneRowScan expected to be false - " +
1: 					"rowsPerRead = " + rowsPerRead);
1: 			}
1: 		}
1:     }
1: 
1:     /**
1:  	 * Open the scan controller
1: 	 *
0: 	 * @param transaction controller will open one if null
1:      *
1: 	 * @exception StandardException thrown on failure to open
1: 	 */
1: 	protected void openScanController(TransactionController tc)
1: 		throws StandardException
1: 	{
1: 		DataValueDescriptor[] startPositionRow = startPosition == null ? null : startPosition.getRowArray();
1: 		DataValueDescriptor[] stopPositionRow = stopPosition == null ? null : stopPosition.getRowArray();
1: 
1: 		// Clear the Qualifiers's Orderable cache 
1: 		if (qualifiers != null)
1: 		{
1: 			clearOrderableCache(qualifiers);
1: 		}
1: 
1: 		// Get the current transaction controller
1: 		if (tc == null)
1: 			tc = activation.getTransactionController();
1: 		scanController = tc.openCompiledScan(
1: 				activation.getResultSetHoldability(),
1: 				(forUpdate ? TransactionController.OPENMODE_FORUPDATE : 0),
1:                 lockMode,
1:                 isolationLevel,
1: 				accessedCols,
1: 				startPositionRow,
1: 					// not used when giving null start position
1: 				startSearchOperator,
1: 				qualifiers,
1: 				stopPositionRow,
1: 					// not used when giving null stop position
1: 				stopSearchOperator,
1: 				scoci,
1: 				dcoci);
1: 
1: 		/* Remember that we opened the scan */
1: 		scanControllerOpened = true;
1: 
1: 		rowsThisScan = 0;
1: 
1: 		/*
1: 		** Inform the activation of the estimated number of rows.  Only
1: 		** do it here, not in reopen, so that we don't do this costly
1: 		** check too often.
1: 		*/
1: 		activation.informOfRowCount(
1: 									this,
1: 									scanController.getEstimatedRowCount()
1: 									);
1: 	}
1: 
1: 	/**
1: 	 * Open up the result set.  Delegate
1: 	 * most work to TableScanResultSet.openCore().
1: 	 * Create a new array with <rowsPerRead> rows
1: 	 * for use in fetchNextGroup().
1: 	 *
1: 	 * @exception StandardException thrown on failure to open
1: 	 */
1: 	public void openCore() throws StandardException
1: 	{
1: 		super.openCore();
1: 		/*
1: 		** Add the extra time we spent after
1: 		** the super class -- TableScanResultSet()
1: 		** already added up its time in openCore().
1: 		*/
1: 		beginTime = getCurrentTimeMillis();
1: 		rowArray = new DataValueDescriptor[rowsPerRead][];
1: 
1: 		// we only allocate the first row -- the
1: 		// store clones as needed for the rest
1: 		// of the rows
1: 		rowArray[0] = candidate.getRowArrayClone();
1: 		numRowsInArray = 0;
1: 		curRowPosition = -1;
1: 		
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1: 	 * Reopen the result set.  Delegate
1: 	 * most work to TableScanResultSet.reopenCore().
1: 	 * Reuse the array of rows.
1: 	 *
1: 	 * @exception StandardException thrown on failure to open
1: 	 */
1: 	public void reopenCore() throws StandardException
1: 	{
1: 		super.reopenCore();
1: 		numRowsInArray = 0;
1: 		curRowPosition = -1;
1: 	}
1: 		
1: 	/**
1: 	 * Return the next row (if any) from the scan (if open).
1: 	 * Reload the rowArray as necessary.
1: 	 *
1: 	 * @exception StandardException thrown on failure to get next row
1: 	 */
1: 	public ExecRow getNextRowCore() throws StandardException
1: 	{
1: 	    ExecRow result = null;
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 		if (isOpen && scanControllerOpened)
1: 		{
1: 			if (currentRow == null)
1: 			{
1: 				currentRow =
1: 					getCompactRow(candidate,
1: 									accessedCols,
0: 									(FormatableBitSet) null,
1: 									isKeyed);
1: 			}
1: 
1: outer:		for (;;)
1: 			{
1: 				if (curRowPosition >= numRowsInArray - 1)
1: 				{
1: 					if (reloadArray() == OUT_OF_ROWS)
1: 					{
0: 						setCurrentRow(null);
1: 						setRowCountIfPossible(rowsThisScan);
1: 						return null;
1: 					}
1: 				}	
1: 
1: 				while (++curRowPosition < numRowsInArray)
1: 				{
1: 					candidate.setRowArray(rowArray[curRowPosition]);
1: 					currentRow = setCompactRow(candidate, currentRow);
1: 					rowsSeen++;
1: 					rowsThisScan++;
1: 
1: 					/*
1: 					** Skip rows where there are start or stop positioners
1: 					** that do not implement ordered null semantics and
1: 					** there are columns in those positions that contain
1: 					** null.
1: 					*/
1: 					if (skipRow(candidate))
1: 					{
1: 						rowsFiltered++;
1: 						continue;
1: 					}
1: 
1: 					result = currentRow;
1: 					break outer;
1: 				}
1: 			}
1: 		}
1: 
1: 		setCurrentRow(result);
1: 		nextTime += getElapsedMillis(beginTime);
1: 	    return result;
1: 	}
1: 
1: 	/*
1: 	** Load up rowArray with a batch of
1: 	** rows.
1: 	*/
1: 	private int reloadArray() throws StandardException
1: 	{
1: 		curRowPosition = -1;
1: 		numRowsInArray =
1: 				((GroupFetchScanController) scanController).fetchNextGroup(
0:                                                rowArray, (RowLocation[]) null);
1: 
1: 		return numRowsInArray;
1: 
1: 	}
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the open scan.  Delegate most
1: 	 * of the work to TableScanResultSet.
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		/*
1: 		** We'll let TableScanResultSet track
1: 		** the time it takes to close up, so
1: 		** no timing here.
1: 		*/
1: 		super.close();
1: 		numRowsInArray = -1;
1: 		curRowPosition = -1;
1: 		rowArray = null;
1: 	}
1: 
1: 	/**
1: 	 * Can we get instantaneous locks when getting share row
1: 	 * locks at READ COMMITTED.
1: 	 */
1: 	protected boolean canGetInstantaneousLocks()
1: 	{
0: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * @see NoPutResultSet#requiresRelocking
1: 	 */
1: 	public boolean requiresRelocking()
1: 	{
1: 		// IndexRowToBaseRow needs to relock if we didn't keep the lock
1: 		return(
1:           isolationLevel == TransactionController.ISOLATION_READ_COMMITTED   ||
1:           isolationLevel == TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK ||
1:           isolationLevel == TransactionController.ISOLATION_READ_UNCOMMITTED);
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:c7248d5
/////////////////////////////////////////////////////////////////////////
1: 		String userSuppliedOptimizerOverrides,
/////////////////////////////////////////////////////////////////////////
1: 			userSuppliedOptimizerOverrides,
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.GroupFetchScanController;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.ScanController;
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0:  * Read a base table or index in bulk.  Most of the
0:  * work for this method is inherited from TableScanResultSet.
0:  * This class overrides getNextRowCore (and extends 
0:  * re/openCore) to use a row array and fetch rows
0:  * from the Store in bulk  (using fetchNextGroup).
0:  * <p>
0:  * Since it retrieves rows in bulk, locking is not
0:  * as is usual -- locks may have already been released
0:  * on rows as they are returned to the user.  Hence,
0:  * this ResultSet is not suitable for a query running
0:  * Isolation Level 1, cursor stability.
0:  * <p>
0:  * Note that this code is only accessable from an
0:  * optimizer override.  If it makes sense to have the
0:  * optimizer select bulk reads, then this should
0:  * probably be rolled into TableScanResultSet.
0:  *
0:  * @author jamie
0:  */
0: public class BulkTableScanResultSet extends TableScanResultSet
0: 	implements CursorResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private DataValueDescriptor[][] rowArray;
0: 	private int curRowPosition;
0: 	private int numRowsInArray;
0: 
0: 	private static int OUT_OF_ROWS = 0;
0: 
0:     /**
0:  	 * Constructor.  Just save off the rowsPerRead argument
0: 	 * and pass everything else down to TableScanResultSet
0: 	 * 
0: 	 * @see org.apache.derby.iapi.sql.execute.ResultSetFactory#getBulkTableScanResultSet
0: 	 *
0: 	 * @exception StandardException thrown on failure to open
0: 	 */
0:     public BulkTableScanResultSet(long conglomId,
0: 		StaticCompiledOpenConglomInfo scoci, Activation activation, 
0: 		GeneratedMethod resultRowAllocator, 
0: 		int resultSetNumber,
0: 		GeneratedMethod startKeyGetter, int startSearchOperator,
0: 		GeneratedMethod stopKeyGetter, int stopSearchOperator,
0: 		boolean sameStartStopPosition,
0: 		Qualifier[][] qualifiers,
0: 		String tableName,
0: 		String indexName,
0: 		boolean isConstraint,
0: 		boolean forUpdate,
0: 		int colRefItem,
0: 		int indexColItem,
0: 		int lockMode,
0: 		boolean tableLocked,
0: 		int isolationLevel,
0: 		int rowsPerRead,
0: 		boolean oneRowScan,
0: 		double optimizerEstimatedRowCount,
0: 		double optimizerEstimatedCost,
0: 		GeneratedMethod closeCleanup)
0: 			throws StandardException
0:     {
0: 		super(conglomId,
0: 			scoci,
0: 			activation,
0: 			resultRowAllocator,
0: 			resultSetNumber,
0: 			startKeyGetter,
0: 			startSearchOperator,
0: 			stopKeyGetter,
0: 			stopSearchOperator,
0: 			sameStartStopPosition,
0: 			qualifiers,
0: 			tableName,
0: 			indexName,
0: 			isConstraint,
0: 			forUpdate,
0: 			colRefItem,
0: 			indexColItem,
0: 			lockMode,
0: 			tableLocked,
0: 			isolationLevel,
0: 			rowsPerRead,
0: 			oneRowScan,
0: 			optimizerEstimatedRowCount,
0: 			optimizerEstimatedCost,
0: 			closeCleanup);
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			/* Bulk fetch of size 1 is same as a regular table scan
0: 			 * and is supposed to be detected at compile time.
0: 			 */
0: 			if (rowsPerRead == 1)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"rowsPerRead not expected to be 1");
0: 			}
0: 			/* Bulk table scan implies that scan is not
0: 			 * a 1 row scan.
0: 			 */
0: 			if (oneRowScan)
0: 			{
0: 				SanityManager.THROWASSERT(
0: 					"oneRowScan expected to be false - " +
0: 					"rowsPerRead = " + rowsPerRead);
0: 			}
0: 		}
0:     }
0: 
0:     /**
0:  	 * Open the scan controller
0: 	 *
0: 	 * @param transaction controller will open one if null
0:      *
0: 	 * @exception StandardException thrown on failure to open
0: 	 */
0: 	protected void openScanController(TransactionController tc)
0: 		throws StandardException
0: 	{
0: 		DataValueDescriptor[] startPositionRow = startPosition == null ? null : startPosition.getRowArray();
0: 		DataValueDescriptor[] stopPositionRow = stopPosition == null ? null : stopPosition.getRowArray();
0: 
0: 		// Clear the Qualifiers's Orderable cache 
0: 		if (qualifiers != null)
0: 		{
0: 			clearOrderableCache(qualifiers);
0: 		}
0: 
0: 		// Get the current transaction controller
0: 		if (tc == null)
0: 			tc = activation.getTransactionController();
0: 		scanController = tc.openCompiledScan(
0: 				activation.getResultSetHoldability(),
0: 				(forUpdate ? TransactionController.OPENMODE_FORUPDATE : 0),
0:                 lockMode,
0:                 isolationLevel,
0: 				accessedCols,
0: 				startPositionRow,
0: 					// not used when giving null start position
0: 				startSearchOperator,
0: 				qualifiers,
0: 				stopPositionRow,
0: 					// not used when giving null stop position
0: 				stopSearchOperator,
0: 				scoci,
0: 				dcoci);
0: 
0: 		/* Remember that we opened the scan */
0: 		scanControllerOpened = true;
0: 
0: 		rowsThisScan = 0;
0: 
0: 		/*
0: 		** Inform the activation of the estimated number of rows.  Only
0: 		** do it here, not in reopen, so that we don't do this costly
0: 		** check too often.
0: 		*/
0: 		activation.informOfRowCount(
0: 									this,
0: 									scanController.getEstimatedRowCount()
0: 									);
0: 	}
0: 
0: 	/**
0: 	 * Open up the result set.  Delegate
0: 	 * most work to TableScanResultSet.openCore().
0: 	 * Create a new array with <rowsPerRead> rows
0: 	 * for use in fetchNextGroup().
0: 	 *
0: 	 * @exception StandardException thrown on failure to open
0: 	 */
0: 	public void openCore() throws StandardException
0: 	{
0: 		super.openCore();
0: 		/*
0: 		** Add the extra time we spent after
0: 		** the super class -- TableScanResultSet()
0: 		** already added up its time in openCore().
0: 		*/
0: 		beginTime = getCurrentTimeMillis();
0: 		rowArray = new DataValueDescriptor[rowsPerRead][];
0: 
0: 		// we only allocate the first row -- the
0: 		// store clones as needed for the rest
0: 		// of the rows
0: 		rowArray[0] = candidate.getRowArrayClone();
0: 		numRowsInArray = 0;
0: 		curRowPosition = -1;
0: 		
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * Reopen the result set.  Delegate
0: 	 * most work to TableScanResultSet.reopenCore().
0: 	 * Reuse the array of rows.
0: 	 *
0: 	 * @exception StandardException thrown on failure to open
0: 	 */
0: 	public void reopenCore() throws StandardException
0: 	{
0: 		super.reopenCore();
0: 		numRowsInArray = 0;
0: 		curRowPosition = -1;
0: 	}
0: 		
0: 	/**
0: 	 * Return the next row (if any) from the scan (if open).
0: 	 * Reload the rowArray as necessary.
0: 	 *
0: 	 * @exception StandardException thrown on failure to get next row
0: 	 */
0: 	public ExecRow getNextRowCore() throws StandardException
0: 	{
0: 	    ExecRow result = null;
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 		if (isOpen && scanControllerOpened)
0: 		{
0: 			if (currentRow == null)
0: 			{
0: 				currentRow =
0: 					getCompactRow(candidate,
0: 									accessedCols,
0: 									(FormatableBitSet) null,
0: 									isKeyed);
0: 			}
0: 
0: outer:		for (;;)
0: 			{
0: 				if (curRowPosition >= numRowsInArray - 1)
0: 				{
0: 					if (reloadArray() == OUT_OF_ROWS)
0: 					{
0: 						setCurrentRow(null);
0: 						setRowCountIfPossible(rowsThisScan);
0: 						return null;
0: 					}
0: 				}	
0: 
0: 				while (++curRowPosition < numRowsInArray)
0: 				{
0: 					candidate.setRowArray(rowArray[curRowPosition]);
0: 					currentRow = setCompactRow(candidate, currentRow);
0: 					rowsSeen++;
0: 					rowsThisScan++;
0: 
0: 					/*
0: 					** Skip rows where there are start or stop positioners
0: 					** that do not implement ordered null semantics and
0: 					** there are columns in those positions that contain
0: 					** null.
0: 					*/
0: 					if (skipRow(candidate))
0: 					{
0: 						rowsFiltered++;
0: 						continue;
0: 					}
0: 
0: 					result = currentRow;
0: 					break outer;
0: 				}
0: 			}
0: 		}
0: 
0: 		setCurrentRow(result);
0: 		nextTime += getElapsedMillis(beginTime);
0: 	    return result;
0: 	}
0: 
0: 	/*
0: 	** Load up rowArray with a batch of
0: 	** rows.
0: 	*/
0: 	private int reloadArray() throws StandardException
0: 	{
0: 		curRowPosition = -1;
0: 		numRowsInArray =
0: 				((GroupFetchScanController) scanController).fetchNextGroup(
0:                                                rowArray, (RowLocation[]) null);
0: 
0: 		return numRowsInArray;
0: 
0: 	}
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the open scan.  Delegate most
0: 	 * of the work to TableScanResultSet.
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		/*
0: 		** We'll let TableScanResultSet track
0: 		** the time it takes to close up, so
0: 		** no timing here.
0: 		*/
0: 		super.close();
0: 		numRowsInArray = -1;
0: 		curRowPosition = -1;
0: 		rowArray = null;
0: 	}
0: 
0: 	/**
0: 	 * Can we get instantaneous locks when getting share row
0: 	 * locks at READ COMMITTED.
0: 	 */
0: 	protected boolean canGetInstantaneousLocks()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * @see NoPutResultSet#requiresRelocking
0: 	 */
0: 	public boolean requiresRelocking()
0: 	{
0: 		// IndexRowToBaseRow needs to relock if we didn't keep the lock
0: 		return(
0:           isolationLevel == TransactionController.ISOLATION_READ_COMMITTED   ||
0:           isolationLevel == TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK ||
0:           isolationLevel == TransactionController.ISOLATION_READ_UNCOMMITTED);
0: 	}
0: }
============================================================================