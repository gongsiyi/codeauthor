1:33776ff: /*
3:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.BlobOutputStream
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:69e3d06: import java.io.ByteArrayInputStream;
1:69e3d06: import java.io.IOException;
1:69e3d06: import java.io.OutputStream;
1:69e3d06: 
1:33776ff: 
1:0326967: class BlobOutputStream extends OutputStream {
1:69e3d06:     private ClientBlob blob_;
1:33776ff:     private long offset_;
1:33776ff: 
1:0326967:     BlobOutputStream(ClientBlob blob, long offset) {
1:33776ff:         blob_ = blob;
1:33776ff:         offset_ = offset;
1:cbd0ff1:         
1:cbd0ff1:         /*
1:cbd0ff1:             offset_=1 while blob_.binaryString_.length - blob_.dataOffset_ = 0
1:cbd0ff1:             for a empty Blob hence check for offset_-1
1:cbd0ff1:          */
1:cbd0ff1:         if ((offset_-1) > (blob_.binaryString_.length - blob_.dataOffset_)) {
1:33776ff:             throw new IndexOutOfBoundsException();
1:33776ff:         }
1:33776ff:     }
1:33776ff: 
1:69e3d06:     public void write(int b) throws IOException
1:2ef245a:     {
1:2ef245a:         byte ba[] = {(byte )b};
1:2ef245a:         writeX(ba, 0, 1);
1:33776ff:     }
1:33776ff: 
1:69e3d06:     public void write(byte b[], int off, int len) throws IOException {
1:33776ff:         if (b == null) {
1:33776ff:             throw new NullPointerException();
1:70f7692:         } else if ((off < 0) || (off > b.length) || (len < 0) ||
1:33776ff:                 ((off + len) > b.length) || ((off + len) < 0)) {
1:33776ff:             throw new IndexOutOfBoundsException();
1:70f7692:         } else if (len == 0) {
1:33776ff:             return;
1:33776ff:         }
1:2ef245a:         writeX(b, off, len);
1:2ef245a:     }
1:2ef245a: 
1:2ef245a:     private void writeX(byte b[], int off, int len) 
1:2ef245a:     {
1:70f7692:         byte[] newbuf = new byte[(int) offset_ - 1 + len + blob_.dataOffset_];
1:2ef245a:         System.arraycopy(blob_.binaryString_, 0, 
1:2ef245a:                          newbuf, 0, (int )offset_ - 1 + blob_.dataOffset_);
2:33776ff:         blob_.binaryString_ = newbuf;
1:e48b5ae:         for (int i = 0; i < len; i++, offset_++) {
1:2ef245a:             blob_.binaryString_[(int )offset_ + blob_.dataOffset_ - 1] 
1:2ef245a:                 = b[off + i];
1:33776ff:         }
1:2ef245a:         blob_.binaryStream_ 
1:69e3d06:             = new ByteArrayInputStream(blob_.binaryString_);
1:2ef245a:         blob_.setSqlLength(blob_.binaryString_.length - blob_.dataOffset_);
1:33776ff:     }
1:33776ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class BlobOutputStream extends OutputStream {
1:     BlobOutputStream(ClientBlob blob, long offset) {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: 
0: public class BlobOutputStream extends OutputStream {
1:     private ClientBlob blob_;
0:     public BlobOutputStream(ClientBlob blob, long offset) {
/////////////////////////////////////////////////////////////////////////
1:     public void write(int b) throws IOException
1:     public void write(byte b[], int off, int len) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:             = new ByteArrayInputStream(blob_.binaryString_);
commit:2ef245a
/////////////////////////////////////////////////////////////////////////
0:     public void write(int b) throws java.io.IOException 
1:     {
1:         byte ba[] = {(byte )b};
1:         writeX(ba, 0, 1);
/////////////////////////////////////////////////////////////////////////
1:         writeX(b, off, len);
1:     }
1: 
1:     private void writeX(byte b[], int off, int len) 
1:     {
1:         System.arraycopy(blob_.binaryString_, 0, 
1:                          newbuf, 0, (int )offset_ - 1 + blob_.dataOffset_);
1:             blob_.binaryString_[(int )offset_ + blob_.dataOffset_ - 1] 
1:                 = b[off + i];
1:         blob_.binaryStream_ 
0:             = new java.io.ByteArrayInputStream(blob_.binaryString_);
1:         blob_.setSqlLength(blob_.binaryString_.length - blob_.dataOffset_);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:cbd0ff1
/////////////////////////////////////////////////////////////////////////
1:         
1:         /*
1:             offset_=1 while blob_.binaryString_.length - blob_.dataOffset_ = 0
1:             for a empty Blob hence check for offset_-1
1:          */
1:         if ((offset_-1) > (blob_.binaryString_.length - blob_.dataOffset_)) {
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:5c0964b
/////////////////////////////////////////////////////////////////////////
0:         offset_++;
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.BlobOutputStream
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
1: 
0: public class BlobOutputStream extends java.io.OutputStream
0: {
0:   private Blob blob_;
1:   private long offset_;
1: 
0:   public BlobOutputStream (Blob blob, long offset)
0:   {
1:     blob_ = blob;
1:     offset_ = offset;
0:     if (offset_ > (blob_.binaryString_.length - blob_.dataOffset_))
1:       throw new IndexOutOfBoundsException();
1:   }
0:   public void write (int b) throws java.io.IOException
0:   {
1: 
0:     byte[] newbuf = new byte[(int)offset_  +  blob_.dataOffset_];
0:     System.arraycopy (blob_.binaryString_, 0, newbuf, 0, (int) offset_ -1 +  blob_.dataOffset_);
1:     blob_.binaryString_ = newbuf;
0:     blob_.binaryString_[(int)offset_ +  blob_.dataOffset_ - 1] = (byte)b;
0:     blob_.binaryStream_ = new java.io.ByteArrayInputStream (blob_.binaryString_);
0:     blob_.sqlLength_ = blob_.binaryString_.length - blob_.dataOffset_;
1:   }
1: 
0:   public void write (byte b[], int off, int len) throws java.io.IOException
0:   {
1:     if (b == null) {
1:       throw new NullPointerException();
1:     }
0:     else if ((off < 0) || (off > b.length) || (len < 0) ||
1:                ((off + len) > b.length) || ((off + len) < 0)) {
1:       throw new IndexOutOfBoundsException();
1:     }
0:     else if (len == 0) {
1:       return;
1:     }
0:     byte [] newbuf = new byte[(int)offset_ -1 + len  +  blob_.dataOffset_];
0:     System.arraycopy(blob_.binaryString_,0,newbuf,0,(int)offset_-1 +  blob_.dataOffset_);
1:     blob_.binaryString_ = newbuf;
0:     for (int i=0; i<len; i++)
0:       blob_.binaryString_[(int)offset_ + i + blob_.dataOffset_ - 1 ] = b[off + i];
0:     blob_.binaryStream_ = new java.io.ByteArrayInputStream(blob_.binaryString_);
0:     blob_.sqlLength_ = blob_.binaryString_.length - blob_.dataOffset_;
1:   }
1: }
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:e48b5ae
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < len; i++, offset_++) {
0:             blob_.binaryString_[(int) offset_ + blob_.dataOffset_ - 1] = b[off + i];
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class BlobOutputStream extends java.io.OutputStream {
0:     private Blob blob_;
0:     private long offset_;
0:     public BlobOutputStream(Blob blob, long offset) {
0:         blob_ = blob;
0:         offset_ = offset;
0:         if (offset_ > (blob_.binaryString_.length - blob_.dataOffset_)) {
0:             throw new IndexOutOfBoundsException();
0:         }
0:     }
0:     public void write(int b) throws java.io.IOException {
0:         byte[] newbuf = new byte[(int) offset_ + blob_.dataOffset_];
0:         System.arraycopy(blob_.binaryString_, 0, newbuf, 0, (int) offset_ - 1 + blob_.dataOffset_);
0:         blob_.binaryString_ = newbuf;
0:         blob_.binaryString_[(int) offset_ + blob_.dataOffset_ - 1] = (byte) b;
0:         blob_.binaryStream_ = new java.io.ByteArrayInputStream(blob_.binaryString_);
0:         blob_.sqlLength_ = blob_.binaryString_.length - blob_.dataOffset_;
0: 
0:     public void write(byte b[], int off, int len) throws java.io.IOException {
0:         if (b == null) {
0:             throw new NullPointerException();
1:         } else if ((off < 0) || (off > b.length) || (len < 0) ||
0:                 ((off + len) > b.length) || ((off + len) < 0)) {
0:             throw new IndexOutOfBoundsException();
1:         } else if (len == 0) {
0:             return;
0:         }
1:         byte[] newbuf = new byte[(int) offset_ - 1 + len + blob_.dataOffset_];
0:         System.arraycopy(blob_.binaryString_, 0, newbuf, 0, (int) offset_ - 1 + blob_.dataOffset_);
0:         blob_.binaryString_ = newbuf;
0:         for (int i = 0; i < len; i++) {
0:             blob_.binaryString_[(int) offset_ + i + blob_.dataOffset_ - 1] = b[off + i];
0:         }
0:         blob_.binaryStream_ = new java.io.ByteArrayInputStream(blob_.binaryString_);
0:         blob_.sqlLength_ = blob_.binaryString_.length - blob_.dataOffset_;
============================================================================