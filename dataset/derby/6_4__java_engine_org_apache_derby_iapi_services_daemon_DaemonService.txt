1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.daemon.DaemonService
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.daemon;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
3:eac0369: /** 
1:eac0369: 
1:eac0369:   A DaemonService provides a background service which is suitable for
1:eac0369:   asynchronous I/O and general clean up.  It should not be used as a general
1:eac0369:   worker thread for parallel execution.  A DaemonService can be subscribe to by
1:eac0369:   many Serviceable objects and a DaemonService will call that object's
1:591cc35:   performWork from time to time.  The performWork method is defined by the
1:eac0369:   client object and should be well behaved - in other words, it should not take
1:eac0369:   too long or hog too many resources or deadlock with anyone else.  And it
1:eac0369:   cannot (should not) error out.
1:591cc35: 
1:591cc35:   <P>It is up to each <code>DaemonService</code> implementation to define its
1:591cc35:   level of service, including
1:591cc35:   <UL>
1:591cc35:   <LI>how quickly and how often the clients should expect to be be serviced
1:591cc35:   <LI>how the clients are prioritized
1:591cc35:   <LI>whether the clients need to tolerate spurious services
1:591cc35:   </UL>
1:eac0369:  
1:eac0369:   <P>MT - all routines on the interface must be MT-safe.
1:eac0369: 
1:eac0369:   @see Serviceable
1:eac0369: */
1:eac0369: 
1:eac0369: public interface DaemonService 
1:eac0369: {
1:eac0369: 	public static int TIMER_DELAY = 10000; // wake up once per TIMER_DELAY milli-second
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Trace flag that can be used by Daemons to print stuff out
1:eac0369: 	*/
1:eac0369: 	public static final String DaemonTrace = SanityManager.DEBUG ? "DaemonTrace" : null;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Trace flag that can be used to turn off background daemons
1:eac0369: 		If DaemonOff is set, background Daemon will not attempt to do anything.
1:eac0369: 	*/
1:eac0369: 	public static final String DaemonOff = SanityManager.DEBUG ? "DaemonOff" : null;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Add a new client that this daemon needs to service
1:eac0369: 
1:eac0369: 		@param newClient a Serviceable object this daemon will service from time to time
1:eac0369: 		@param onDemandOnly only service this client when it ask for service with a serviceNow request
1:eac0369: 		@return a client number that uniquely identifies this client (this subscription) 
1:eac0369: 	*/
1:eac0369: 	public int subscribe(Serviceable newClient, boolean onDemandOnly);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:591cc35: 		Get rid of a client from the daemon. If a client is being serviced when
1:591cc35: 		the call is made, the implementation may choose whether or not the call
1:591cc35: 		should block until the client has completed its work. If the call does
1:591cc35: 		not block, the client must be prepared to handle calls to its
1:591cc35: 		<code>performWork()</code> method even after <code>unsubscribe()</code>
1:591cc35: 		has returned.
1:eac0369: 
2:eac0369: 		@param clientNumber the number that uniquely identify the client
1:eac0369: 	*/
1:eac0369: 	public void unsubscribe(int clientNumber);
1:eac0369: 
1:eac0369: 
1:4a86838:     /**
1:4a86838:      * Service this subscription ASAP. When this method is called, the
1:4a86838:      * subscriber's <code>performWork()</code> method is guaranteed to be
1:4a86838:      * invoked at some point in the future. However, there is no guarantee that
1:4a86838:      * a subscriber's <code>performWork()</code> is called the same number of
1:4a86838:      * times as the subscriber calls this method. More precisely, if a
1:4a86838:      * subscriber is waiting for this daemon service to invoke its
1:4a86838:      * <code>performWork()</code> method, the daemon service may, but is not
1:4a86838:      * required to, ignore requests from that subscriber until the
1:4a86838:      * <code>performWork()</code> method has been invoked.
1:4a86838:      *
1:4a86838:      * @param clientNumber the number that uniquely identifies the client
1:4a86838:      */
1:eac0369: 	public void serviceNow(int clientNumber);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Request a one time service from the Daemon.  Unless performWork returns
1:eac0369: 		REQUEUE (see Serviceable), the daemon will service this client once
1:eac0369: 		and then it will get rid of this client.  Since no client number is
1:eac0369: 		associated with this client, it cannot request to be serviced or be
1:eac0369: 		unsubscribed. 
1:eac0369: 
1:eac0369: 		The work is always added to the deamon, regardless of the
1:eac0369: 		state it returns.
1:eac0369: 
1:eac0369: 		@param newClient the object that needs a one time service
1:eac0369: 
1:eac0369: 		@param serviceNow if true, this client should be serviced ASAP, as if a
1:eac0369: 		serviceNow has been issued.  If false, then this client will be
1:eac0369: 		serviced with the normal scheduled.
1:eac0369: 
1:eac0369: 		@return true if the daemon indicates it is being overloaded,
1:eac0369: 		false it's happy.
1:eac0369: 	*/
1:eac0369: 	public boolean enqueue(Serviceable newClient, boolean serviceNow);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Pause.  No new service is performed until a resume is issued.
1:eac0369: 	*/
1:eac0369: 	public void pause();
1:eac0369: 	
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Resume service after a pause
1:eac0369: 	*/
1:eac0369: 	public void resume();
1:eac0369: 	
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		End this daemon service
1:eac0369: 	 */
1:eac0369: 	public void stop();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clear all the queued up work from this daemon.  Subscriptions are not
1:eac0369: 		affected. 
1:eac0369: 	 */
1:eac0369: 	public void clear();
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 *Wait until work in the high priorty queue is done.
1:eac0369: 	 */	
1:eac0369: 	public void waitUntilQueueIsEmpty();
1:eac0369: 	
1:eac0369: }
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4a86838
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Service this subscription ASAP. When this method is called, the
1:      * subscriber's <code>performWork()</code> method is guaranteed to be
1:      * invoked at some point in the future. However, there is no guarantee that
1:      * a subscriber's <code>performWork()</code> is called the same number of
1:      * times as the subscriber calls this method. More precisely, if a
1:      * subscriber is waiting for this daemon service to invoke its
1:      * <code>performWork()</code> method, the daemon service may, but is not
1:      * required to, ignore requests from that subscriber until the
1:      * <code>performWork()</code> method has been invoked.
1:      *
1:      * @param clientNumber the number that uniquely identifies the client
1:      */
commit:591cc35
/////////////////////////////////////////////////////////////////////////
1:   performWork from time to time.  The performWork method is defined by the
1: 
1:   <P>It is up to each <code>DaemonService</code> implementation to define its
1:   level of service, including
1:   <UL>
1:   <LI>how quickly and how often the clients should expect to be be serviced
1:   <LI>how the clients are prioritized
1:   <LI>whether the clients need to tolerate spurious services
1:   </UL>
/////////////////////////////////////////////////////////////////////////
1: 		Get rid of a client from the daemon. If a client is being serviced when
1: 		the call is made, the implementation may choose whether or not the call
1: 		should block until the client has completed its work. If the call does
1: 		not block, the client must be prepared to handle calls to its
1: 		<code>performWork()</code> method even after <code>unsubscribe()</code>
1: 		has returned.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.daemon.DaemonService
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.daemon;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /** 
1: 
1:   A DaemonService provides a background service which is suitable for
1:   asynchronous I/O and general clean up.  It should not be used as a general
1:   worker thread for parallel execution.  A DaemonService can be subscribe to by
1:   many Serviceable objects and a DaemonService will call that object's
0:   performWork from time to time.  These performWork method is defined by the
1:   client object and should be well behaved - in other words, it should not take
1:   too long or hog too many resources or deadlock with anyone else.  And it
1:   cannot (should not) error out.
1:  
1:   <P>MT - all routines on the interface must be MT-safe.
1: 
1:   @see Serviceable
1: */
1: 
1: public interface DaemonService 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	public static int TIMER_DELAY = 10000; // wake up once per TIMER_DELAY milli-second
1: 
1: 
1: 	/**
1: 		Trace flag that can be used by Daemons to print stuff out
1: 	*/
1: 	public static final String DaemonTrace = SanityManager.DEBUG ? "DaemonTrace" : null;
1: 
1: 	/**
1: 		Trace flag that can be used to turn off background daemons
1: 		If DaemonOff is set, background Daemon will not attempt to do anything.
1: 	*/
1: 	public static final String DaemonOff = SanityManager.DEBUG ? "DaemonOff" : null;
1: 
1: 
1: 	/**
1: 		Add a new client that this daemon needs to service
1: 
1: 		@param newClient a Serviceable object this daemon will service from time to time
1: 		@param onDemandOnly only service this client when it ask for service with a serviceNow request
1: 		@return a client number that uniquely identifies this client (this subscription) 
1: 	*/
1: 	public int subscribe(Serviceable newClient, boolean onDemandOnly);
1: 
1: 
1: 	/**
0: 		Get rid of a client from the daemon.
1: 
1: 		@param clientNumber the number that uniquely identify the client
1: 	*/
1: 	public void unsubscribe(int clientNumber);
1: 
1: 
1: 	/**
0: 	    Service this subscription ASAP.  Does not guarantee that the daemon
0: 		will actually do anything about it.
1: 
1: 		@param clientNumber the number that uniquely identify the client
1: 	 */
1: 	public void serviceNow(int clientNumber);
1: 
1: 
1: 	/**
1: 		Request a one time service from the Daemon.  Unless performWork returns
1: 		REQUEUE (see Serviceable), the daemon will service this client once
1: 		and then it will get rid of this client.  Since no client number is
1: 		associated with this client, it cannot request to be serviced or be
1: 		unsubscribed. 
1: 
1: 		The work is always added to the deamon, regardless of the
1: 		state it returns.
1: 
1: 		@param newClient the object that needs a one time service
1: 
1: 		@param serviceNow if true, this client should be serviced ASAP, as if a
1: 		serviceNow has been issued.  If false, then this client will be
1: 		serviced with the normal scheduled.
1: 
1: 		@return true if the daemon indicates it is being overloaded,
1: 		false it's happy.
1: 	*/
1: 	public boolean enqueue(Serviceable newClient, boolean serviceNow);
1: 
1: 	/**
1: 		Pause.  No new service is performed until a resume is issued.
1: 	*/
1: 	public void pause();
1: 	
1: 
1: 	/**
1: 		Resume service after a pause
1: 	*/
1: 	public void resume();
1: 	
1: 
1: 	/**
1: 		End this daemon service
1: 	 */
1: 	public void stop();
1: 
1: 	/**
1: 		Clear all the queued up work from this daemon.  Subscriptions are not
1: 		affected. 
1: 	 */
1: 	public void clear();
1: 
1: 	/*
1: 	 *Wait until work in the high priorty queue is done.
1: 	 */	
1: 	public void waitUntilQueueIsEmpty();
1: 	
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.daemon;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /** 
0: 
0:   A DaemonService provides a background service which is suitable for
0:   asynchronous I/O and general clean up.  It should not be used as a general
0:   worker thread for parallel execution.  A DaemonService can be subscribe to by
0:   many Serviceable objects and a DaemonService will call that object's
0:   performWork from time to time.  These performWork method is defined by the
0:   client object and should be well behaved - in other words, it should not take
0:   too long or hog too many resources or deadlock with anyone else.  And it
0:   cannot (should not) error out.
0:  
0:   <P>MT - all routines on the interface must be MT-safe.
0: 
0:   @see Serviceable
0: */
0: 
0: public interface DaemonService 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public static int TIMER_DELAY = 10000; // wake up once per TIMER_DELAY milli-second
0: 
0: 
0: 	/**
0: 		Trace flag that can be used by Daemons to print stuff out
0: 	*/
0: 	public static final String DaemonTrace = SanityManager.DEBUG ? "DaemonTrace" : null;
0: 
0: 	/**
0: 		Trace flag that can be used to turn off background daemons
0: 		If DaemonOff is set, background Daemon will not attempt to do anything.
0: 	*/
0: 	public static final String DaemonOff = SanityManager.DEBUG ? "DaemonOff" : null;
0: 
0: 
0: 	/**
0: 		Add a new client that this daemon needs to service
0: 
0: 		@param newClient a Serviceable object this daemon will service from time to time
0: 		@param onDemandOnly only service this client when it ask for service with a serviceNow request
0: 		@return a client number that uniquely identifies this client (this subscription) 
0: 	*/
0: 	public int subscribe(Serviceable newClient, boolean onDemandOnly);
0: 
0: 
0: 	/**
0: 		Get rid of a client from the daemon.
0: 
0: 		@param clientNumber the number that uniquely identify the client
0: 	*/
0: 	public void unsubscribe(int clientNumber);
0: 
0: 
0: 	/**
0: 	    Service this subscription ASAP.  Does not guarantee that the daemon
0: 		will actually do anything about it.
0: 
0: 		@param clientNumber the number that uniquely identify the client
0: 	 */
0: 	public void serviceNow(int clientNumber);
0: 
0: 
0: 	/**
0: 		Request a one time service from the Daemon.  Unless performWork returns
0: 		REQUEUE (see Serviceable), the daemon will service this client once
0: 		and then it will get rid of this client.  Since no client number is
0: 		associated with this client, it cannot request to be serviced or be
0: 		unsubscribed. 
0: 
0: 		The work is always added to the deamon, regardless of the
0: 		state it returns.
0: 
0: 		@param newClient the object that needs a one time service
0: 
0: 		@param serviceNow if true, this client should be serviced ASAP, as if a
0: 		serviceNow has been issued.  If false, then this client will be
0: 		serviced with the normal scheduled.
0: 
0: 		@return true if the daemon indicates it is being overloaded,
0: 		false it's happy.
0: 	*/
0: 	public boolean enqueue(Serviceable newClient, boolean serviceNow);
0: 
0: 	/**
0: 		Pause.  No new service is performed until a resume is issued.
0: 	*/
0: 	public void pause();
0: 	
0: 
0: 	/**
0: 		Resume service after a pause
0: 	*/
0: 	public void resume();
0: 	
0: 
0: 	/**
0: 		End this daemon service
0: 	 */
0: 	public void stop();
0: 
0: 	/**
0: 		Clear all the queued up work from this daemon.  Subscriptions are not
0: 		affected. 
0: 	 */
0: 	public void clear();
0: 
0: 	/*
0: 	 *Wait until work in the high priorty queue is done.
0: 	 */	
0: 	public void waitUntilQueueIsEmpty();
0: 	
0: }
0: 
============================================================================