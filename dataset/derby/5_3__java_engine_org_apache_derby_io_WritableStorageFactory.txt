1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.io.WritableStorageFactory
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.io;
1:eac0369: 
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.SyncFailedException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This interface extends StorageFactory to provide read/write access to storage.
1:eac0369:  *<p>
1:eac0369:  * The database engine will call this interface's methods from its own privilege blocks.
1:eac0369:  *<p>
1:eac0369:  * Each WritableStorageFactory instance may be concurrently used by multiple threads.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public interface WritableStorageFactory extends StorageFactory
1:eac0369: {
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Force the data of an output stream out to the underlying storage. That is, ensure that
1:eac0369:      * it has been made persistent. If the database is to be transient, that is, if the database
1:eac0369:      * does not survive a restart, then the sync method implementation need not do anything.
1:eac0369:      *
1:eac0369:      * @param stream The stream to be synchronized.
1:eac0369:      * @param metaData If true then this method must force both changes to the file's
1:eac0369:      *          contents and metadata to be written to storage; if false, it need only force file content changes
1:eac0369:      *          to be written. The implementation is allowed to ignore this parameter and always force out
1:eac0369:      *          metadata changes.
1:eac0369:      *
1:eac0369:      * @exception IOException if an I/O error occurs.
1:eac0369:      * @exception SyncFailedException Thrown when the buffers cannot be flushed,
1:eac0369:      *            or because the system cannot guarantee that all the buffers have been
1:eac0369:      *            synchronized with physical media.
1:eac0369:      */
1:eac0369:     public void sync( OutputStream stream, boolean metaData) throws IOException, SyncFailedException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method tests whether the StorageRandomAccessFile "rws" and "rwd" modes
1:a1c5a36:      * are implemented. If the "rws" and "rwd" modes are supported then the database
1:a1c5a36:      * engine will conclude that the write methods of "rws"/"rwd" mode
1:eac0369:      * StorageRandomAccessFiles are slow but the sync method is fast and optimize
1:eac0369:      * accordingly.
1:eac0369:      *
1:eac0369:      * @return <b>true</b> if an StIRandomAccess file opened with "rws" or "rwd" modes immediately writes data to the
1:eac0369:      *         underlying storage, <b>false</b> if not.
1:eac0369:      */
1:a1c5a36:     public boolean supportsWriteSync();
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a1c5a36
/////////////////////////////////////////////////////////////////////////
1:      * are implemented. If the "rws" and "rwd" modes are supported then the database
1:      * engine will conclude that the write methods of "rws"/"rwd" mode
1:     public boolean supportsWriteSync();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.io.WritableStorageFactory
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.io;
1: 
1: import java.io.OutputStream;
1: import java.io.IOException;
1: import java.io.SyncFailedException;
1: 
1: /**
1:  * This interface extends StorageFactory to provide read/write access to storage.
1:  *<p>
1:  * The database engine will call this interface's methods from its own privilege blocks.
1:  *<p>
1:  * Each WritableStorageFactory instance may be concurrently used by multiple threads.
1:  *
1:  */
1: public interface WritableStorageFactory extends StorageFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 
1:     /**
1:      * Force the data of an output stream out to the underlying storage. That is, ensure that
1:      * it has been made persistent. If the database is to be transient, that is, if the database
1:      * does not survive a restart, then the sync method implementation need not do anything.
1:      *
1:      * @param stream The stream to be synchronized.
1:      * @param metaData If true then this method must force both changes to the file's
1:      *          contents and metadata to be written to storage; if false, it need only force file content changes
1:      *          to be written. The implementation is allowed to ignore this parameter and always force out
1:      *          metadata changes.
1:      *
1:      * @exception IOException if an I/O error occurs.
1:      * @exception SyncFailedException Thrown when the buffers cannot be flushed,
1:      *            or because the system cannot guarantee that all the buffers have been
1:      *            synchronized with physical media.
1:      */
1:     public void sync( OutputStream stream, boolean metaData) throws IOException, SyncFailedException;
1: 
1:     /**
1:      * This method tests whether the StorageRandomAccessFile "rws" and "rwd" modes
0:      * are implemented. If the "rws" method is supported then the database
0:      * engine will conclude that the write methods of "rws" mode
1:      * StorageRandomAccessFiles are slow but the sync method is fast and optimize
1:      * accordingly.
1:      *
1:      * @return <b>true</b> if an StIRandomAccess file opened with "rws" or "rwd" modes immediately writes data to the
1:      *         underlying storage, <b>false</b> if not.
1:      */
0:     public boolean supportsRws();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.io;
0: 
0: import java.io.OutputStream;
0: import java.io.IOException;
0: import java.io.SyncFailedException;
0: 
0: /**
0:  * This interface extends StorageFactory to provide read/write access to storage.
0:  *<p>
0:  * The database engine will call this interface's methods from its own privilege blocks.
0:  *<p>
0:  * Each WritableStorageFactory instance may be concurrently used by multiple threads.
0:  *
0:  */
0: public interface WritableStorageFactory extends StorageFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 
0:     /**
0:      * Force the data of an output stream out to the underlying storage. That is, ensure that
0:      * it has been made persistent. If the database is to be transient, that is, if the database
0:      * does not survive a restart, then the sync method implementation need not do anything.
0:      *
0:      * @param stream The stream to be synchronized.
0:      * @param metaData If true then this method must force both changes to the file's
0:      *          contents and metadata to be written to storage; if false, it need only force file content changes
0:      *          to be written. The implementation is allowed to ignore this parameter and always force out
0:      *          metadata changes.
0:      *
0:      * @exception IOException if an I/O error occurs.
0:      * @exception SyncFailedException Thrown when the buffers cannot be flushed,
0:      *            or because the system cannot guarantee that all the buffers have been
0:      *            synchronized with physical media.
0:      */
0:     public void sync( OutputStream stream, boolean metaData) throws IOException, SyncFailedException;
0: 
0:     /**
0:      * This method tests whether the StorageRandomAccessFile "rws" and "rwd" modes
0:      * are implemented. If the "rws" method is supported then the database
0:      * engine will conclude that the write methods of "rws" mode
0:      * StorageRandomAccessFiles are slow but the sync method is fast and optimize
0:      * accordingly.
0:      *
0:      * @return <b>true</b> if an StIRandomAccess file opened with "rws" or "rwd" modes immediately writes data to the
0:      *         underlying storage, <b>false</b> if not.
0:      */
0:     public boolean supportsRws();
0: }
============================================================================