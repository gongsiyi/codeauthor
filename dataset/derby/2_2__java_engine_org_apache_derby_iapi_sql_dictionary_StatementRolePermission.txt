1:ee59de8: /*
1:ee59de8: 
1:ee59de8:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementRolePermission
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.iapi.sql.dictionary;
1:ee59de8: 
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:ee59de8: import org.apache.derby.iapi.sql.conn.Authorizer;
1:ee59de8: import org.apache.derby.iapi.reference.SQLState;
1:ee59de8: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:ee59de8: import org.apache.derby.iapi.store.access.TransactionController;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:12988c7: import org.apache.derby.iapi.sql.Activation;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  * This class describes a role permission required by a statement.
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: public class StatementRolePermission extends StatementPermission
1:ee59de8: {
1:ee59de8:     private String roleName;
1:ee59de8:     private int privType;
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Constructor
1:ee59de8:      *
1:ee59de8:      * @param roleName The role name involved in the operation
1:ee59de8:      * @param privType One of Authorizer.CREATE_ROLE_PRIV, DROP_ROLE_PRIV.
1:ee59de8:      */
1:ee59de8:     public StatementRolePermission(String roleName, int privType)
1:ee59de8:     {
1:ee59de8:         this.roleName = roleName;
1:ee59de8:         this.privType = privType;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * @see StatementPermission#check
1:ee59de8:      */
1:ee59de8:     public void check(LanguageConnectionContext lcc,
1:12988c7:                       boolean forGrant,
1:12988c7:                       Activation activation
1:12988c7:                       ) throws StandardException
1:ee59de8:     {
1:ee59de8:         DataDictionary dd = lcc.getDataDictionary();
1:ee59de8:         TransactionController tc = lcc.getTransactionExecute();
1:ee59de8: 
1:ee59de8:         // For now, only allowed for database owner, and this check
1:ee59de8:         // is never called for dbo, so always throw.
1:ee59de8:         switch (privType) {
1:ee59de8:         case Authorizer.CREATE_ROLE_PRIV:
1:ee59de8:             throw StandardException.newException
1:ee59de8:                 (SQLState.AUTH_ROLE_DBO_ONLY, "CREATE ROLE");
1:ee59de8:             // break;
1:ee59de8:         case Authorizer.DROP_ROLE_PRIV:
1:ee59de8:             throw StandardException.newException
1:ee59de8:                 (SQLState.AUTH_ROLE_DBO_ONLY, "DROP ROLE");
1:ee59de8:             // break;
1:ee59de8:         default:
1:ee59de8:             if (SanityManager.DEBUG) {
1:ee59de8:                 SanityManager.THROWASSERT
1:ee59de8:                     ("Unexpected value (" + privType + ") for privType");
1:ee59de8:             }
1:ee59de8:             break;
1:ee59de8:         }
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Role level permission is never required as list of privileges required
1:ee59de8:      * for triggers/constraints/views and hence we don't do any work here, but
1:ee59de8:      * simply return null
1:ee59de8:      *
1:ee59de8:      * @see StatementPermission#check
1:ee59de8:      */
1:ee59de8:     public PermissionsDescriptor getPermissionDescriptor(String authid,
1:ee59de8:                                                          DataDictionary dd)
1:ee59de8:         throws StandardException
1:ee59de8:     {
1:ee59de8:         return null;
1:ee59de8:     }
1:12988c7: 
1:12988c7: 
1:12988c7:     private String getPrivName( )
1:12988c7:     {
1:12988c7:         switch(privType) {
1:12988c7:         case Authorizer.CREATE_ROLE_PRIV:
1:12988c7:             return "CREATE_ROLE";
1:12988c7:         case Authorizer.DROP_ROLE_PRIV:
1:12988c7:             return "DROP_ROLE";
1:12988c7:         default:
1:12988c7:             return "?";
1:12988c7:         }
1:12988c7:     }
1:12988c7: 
1:12988c7:     public String toString()
1:12988c7:     {
1:12988c7:         return "StatementRolePermission: " + roleName + " " + getPrivName();
1:12988c7:     }
1:ee59de8: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
commit:12988c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1:                       boolean forGrant,
1:                       Activation activation
1:                       ) throws StandardException
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private String getPrivName( )
1:     {
1:         switch(privType) {
1:         case Authorizer.CREATE_ROLE_PRIV:
1:             return "CREATE_ROLE";
1:         case Authorizer.DROP_ROLE_PRIV:
1:             return "DROP_ROLE";
1:         default:
1:             return "?";
1:         }
1:     }
1: 
1:     public String toString()
1:     {
1:         return "StatementRolePermission: " + roleName + " " + getPrivName();
1:     }
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.StatementRolePermission
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.Authorizer;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * This class describes a role permission required by a statement.
1:  */
1: 
1: public class StatementRolePermission extends StatementPermission
1: {
1:     private String roleName;
1:     private int privType;
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param roleName The role name involved in the operation
1:      * @param privType One of Authorizer.CREATE_ROLE_PRIV, DROP_ROLE_PRIV.
1:      */
1:     public StatementRolePermission(String roleName, int privType)
1:     {
1:         this.roleName = roleName;
1:         this.privType = privType;
1:     }
1: 
1:     /**
1:      * @see StatementPermission#check
1:      */
1:     public void check(LanguageConnectionContext lcc,
0:                       String authid,
0:                       boolean forGrant) throws StandardException
1:     {
1:         DataDictionary dd = lcc.getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1: 
1:         // For now, only allowed for database owner, and this check
1:         // is never called for dbo, so always throw.
1:         switch (privType) {
1:         case Authorizer.CREATE_ROLE_PRIV:
1:             throw StandardException.newException
1:                 (SQLState.AUTH_ROLE_DBO_ONLY, "CREATE ROLE");
1:             // break;
1:         case Authorizer.DROP_ROLE_PRIV:
1:             throw StandardException.newException
1:                 (SQLState.AUTH_ROLE_DBO_ONLY, "DROP ROLE");
1:             // break;
1:         default:
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT
1:                     ("Unexpected value (" + privType + ") for privType");
1:             }
1:             break;
1:         }
1:     }
1: 
1:     /**
1:      * Role level permission is never required as list of privileges required
1:      * for triggers/constraints/views and hence we don't do any work here, but
1:      * simply return null
1:      *
1:      * @see StatementPermission#check
1:      */
1:     public PermissionsDescriptor getPermissionDescriptor(String authid,
1:                                                          DataDictionary dd)
1:         throws StandardException
1:     {
1:         return null;
1:     }
1: }
============================================================================