1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.property.PropertyFactory
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.property;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.MethodFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PropertySetCallback;
1:eac0369: import java.util.Properties;
1:eac0369: import java.io.File;
1:eac0369: import java.io.Serializable;
1:eac0369: import java.util.Dictionary;
1:eac0369: 
2:eac0369: /**
1:eac0369:   Module interface for an Property validation.  
1:eac0369: 
1:eac0369:   <p>
1:eac0369:   An PropertyFactory is typically obtained from the Monitor:
1:eac0369:   <p>
1:eac0369:   <blockquote><pre>
1:eac0369: 	// Get the current validation factory.
1:eac0369: 	PropertyFactory af;
1:eac0369: 	af = (PropertyFactory) Monitor.findServiceModule(this, org.apache.derby.iapi.reference.Module.PropertyFactory);
1:eac0369:   </pre></blockquote>
1:eac0369: **/
1:eac0369: 
1:eac0369: public interface PropertyFactory
1:eac0369: {
1:eac0369:     /**************************************************************************
1:eac0369:      * methods that are Property related.
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Add a callback for a change in any property value.
1:eac0369: 	 * <BR>
1:eac0369:      * The callback is made in the context of the transaction making the change.
1:eac0369:      *
1:eac0369:      * @param who   which object is called
1:eac0369:      **/
1:eac0369: 	public void addPropertySetNotification(
1:eac0369:     PropertySetCallback     who);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Validate a Property set.
1:eac0369:      * <p>
1:eac0369:      * Validate a Property set by calling all the registered property set
1:eac0369:      * notification functions with .
1:eac0369:      *
1:eac0369: 	 * @param p Properties to validate.
1:eac0369: 	 * @param ignore Properties to not validate in p. Usefull for properties
1:eac0369: 	 *        that may not be set after boot. 
1:eac0369:      *
1:eac0369: 	 * @exception StandardException Throws if p fails a check.
1:eac0369:      **/
1:eac0369: 	public void verifyPropertySet(
1:eac0369:     Properties p, 
1:eac0369:     Properties ignore) 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * validation a single property
1:eac0369: 	 */
1:eac0369: 	public void validateSingleProperty(String key,
1:eac0369: 						  Serializable value,
1:eac0369: 						  Dictionary set)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	   
1:eac0369: 	 */
1:eac0369: 	public Serializable doValidateApplyAndMap(TransactionController tc,
1:eac0369: 											 String key, Serializable value,
1:eac0369: 											 Dictionary d, boolean dbOnlyProperty)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Call the property set callbacks to map a proposed property value
1:eac0369: 	  to a value to save.
1:eac0369: 	  <P>
1:eac0369: 	  The caller must run this in a block synchronized on this
1:eac0369: 	  to serialize validations with changes to the set of
1:eac0369: 	  property callbacks
1:eac0369: 	  */
1:eac0369: 	public Serializable doMap(String key,
1:eac0369: 							 Serializable value,
1:eac0369: 							 Dictionary set)
1:eac0369: 		throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.property.PropertyFactory
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.property;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.locks.LockFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.store.access.conglomerate.MethodFactory;
1: 
1: import org.apache.derby.iapi.services.property.PropertySetCallback;
1: import java.util.Properties;
1: import java.io.File;
1: import java.io.Serializable;
1: import java.util.Dictionary;
1: 
1: /**
1:   Module interface for an Property validation.  
1: 
1:   <p>
1:   An PropertyFactory is typically obtained from the Monitor:
1:   <p>
1:   <blockquote><pre>
1: 	// Get the current validation factory.
1: 	PropertyFactory af;
1: 	af = (PropertyFactory) Monitor.findServiceModule(this, org.apache.derby.iapi.reference.Module.PropertyFactory);
1:   </pre></blockquote>
1: **/
1: 
1: public interface PropertyFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1:     /**************************************************************************
1:      * methods that are Property related.
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Add a callback for a change in any property value.
1: 	 * <BR>
1:      * The callback is made in the context of the transaction making the change.
1:      *
1:      * @param who   which object is called
1:      **/
1: 	public void addPropertySetNotification(
1:     PropertySetCallback     who);
1: 
1:     /**
1:      * Validate a Property set.
1:      * <p>
1:      * Validate a Property set by calling all the registered property set
1:      * notification functions with .
1:      *
1: 	 * @param p Properties to validate.
1: 	 * @param ignore Properties to not validate in p. Usefull for properties
1: 	 *        that may not be set after boot. 
1:      *
1: 	 * @exception StandardException Throws if p fails a check.
1:      **/
1: 	public void verifyPropertySet(
1:     Properties p, 
1:     Properties ignore) 
1:         throws StandardException;
1: 
1: 	/**
1: 	 * validation a single property
1: 	 */
1: 	public void validateSingleProperty(String key,
1: 						  Serializable value,
1: 						  Dictionary set)
1: 		throws StandardException;
1: 
1: 	/**
1: 	   
1: 	 */
1: 	public Serializable doValidateApplyAndMap(TransactionController tc,
1: 											 String key, Serializable value,
1: 											 Dictionary d, boolean dbOnlyProperty)
1: 		throws StandardException;
1: 
1: 
1: 	/**
1: 	  Call the property set callbacks to map a proposed property value
1: 	  to a value to save.
1: 	  <P>
1: 	  The caller must run this in a block synchronized on this
1: 	  to serialize validations with changes to the set of
1: 	  property callbacks
1: 	  */
1: 	public Serializable doMap(String key,
1: 							 Serializable value,
1: 							 Dictionary set)
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.property;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.store.access.conglomerate.MethodFactory;
0: 
0: import org.apache.derby.iapi.services.property.PropertySetCallback;
0: import java.util.Properties;
0: import java.io.File;
0: import java.io.Serializable;
0: import java.util.Dictionary;
0: 
0: /**
0:   Module interface for an Property validation.  
0: 
0:   <p>
0:   An PropertyFactory is typically obtained from the Monitor:
0:   <p>
0:   <blockquote><pre>
0: 	// Get the current validation factory.
0: 	PropertyFactory af;
0: 	af = (PropertyFactory) Monitor.findServiceModule(this, org.apache.derby.iapi.reference.Module.PropertyFactory);
0:   </pre></blockquote>
0: **/
0: 
0: public interface PropertyFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0:     /**************************************************************************
0:      * methods that are Property related.
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Add a callback for a change in any property value.
0: 	 * <BR>
0:      * The callback is made in the context of the transaction making the change.
0:      *
0:      * @param who   which object is called
0:      **/
0: 	public void addPropertySetNotification(
0:     PropertySetCallback     who);
0: 
0:     /**
0:      * Validate a Property set.
0:      * <p>
0:      * Validate a Property set by calling all the registered property set
0:      * notification functions with .
0:      *
0: 	 * @param p Properties to validate.
0: 	 * @param ignore Properties to not validate in p. Usefull for properties
0: 	 *        that may not be set after boot. 
0:      *
0: 	 * @exception StandardException Throws if p fails a check.
0:      **/
0: 	public void verifyPropertySet(
0:     Properties p, 
0:     Properties ignore) 
0:         throws StandardException;
0: 
0: 	/**
0: 	 * validation a single property
0: 	 */
0: 	public void validateSingleProperty(String key,
0: 						  Serializable value,
0: 						  Dictionary set)
0: 		throws StandardException;
0: 
0: 	/**
0: 	   
0: 	 */
0: 	public Serializable doValidateApplyAndMap(TransactionController tc,
0: 											 String key, Serializable value,
0: 											 Dictionary d, boolean dbOnlyProperty)
0: 		throws StandardException;
0: 
0: 
0: 	/**
0: 	  Call the property set callbacks to map a proposed property value
0: 	  to a value to save.
0: 	  <P>
0: 	  The caller must run this in a block synchronized on this
0: 	  to serialize validations with changes to the set of
0: 	  property callbacks
0: 	  */
0: 	public Serializable doMap(String key,
0: 							 Serializable value,
0: 							 Dictionary set)
0: 		throws StandardException;
0: }
============================================================================