1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.NotNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
11:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import java.lang.reflect.Modifier;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.classfile.VMOpcode;
1:3bb140c: import org.apache.derby.iapi.services.compiler.LocalField;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * A NotNode represents a NOT operator. Preprocessing will eliminate the 
1:eac0369:  * NotNodes which exist above comparison operators so that the optimizer
1:eac0369:  * will see a query tree in CNF.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class NotNode extends UnaryLogicalOperatorNode
2:eac0369: {
1:3bb140c:     /**
1:3bb140c:      * @param operand The operand of the NOT
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     NotNode(ValueNode operand, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(operand, "not", cm);
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:eac0369: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1:eac0369: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1:eac0369: 	 * ComparisonOperators and boolean expressions.  We invert 
1:eac0369: 	 * ComparisonOperators and replace boolean expressions with 
1:eac0369: 	 * boolean expression = false.
1:eac0369: 	 *
1:eac0369: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	ValueNode eliminateNots(boolean underNotNode) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		return operand.eliminateNots(! underNotNode);
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do code generation for the NOT operator.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:eac0369: 	 * @param mb	The method the expression will go into
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** This generates the following code:
1:eac0369: 		**
1:eac0369: 		** <boolean field> = <operand>.equals(<operand>,
1:eac0369: 		**					 					<false truth value>);
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Generate the code for a Boolean false constant value.
1:eac0369: 		*/
1:eac0369: 		String interfaceName = getTypeCompiler().interfaceName();
1:eac0369: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, interfaceName);
1:eac0369: 		/*
1:eac0369: 		** Generate the call to the equals method.
1:eac0369: 		** equals is only on Orderable, not any subinterfaces.
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		/* Generate the code for operand */
1:eac0369: 		operand.generateExpression(acb, mb);
1:eac0369: 		mb.upCast(ClassName.DataValueDescriptor);
1:eac0369: 
1:eac0369: 		mb.dup(); // arg 1 is instance
1:eac0369: 
1:eac0369: 		// arg 2
1:eac0369: 		mb.push(false);
1:ba7683c: 		acb.generateDataValue(mb, getTypeCompiler(), 
1:ba7683c: 				getTypeServices().getCollationType(), field);
1:eac0369: 		mb.upCast(ClassName.DataValueDescriptor);
1:eac0369: 
1:eac0369: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "equals", interfaceName, 2);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param operand The operand of the NOT
1:      * @param cm context manager
1:      * @throws StandardException
1:      */
1:     NotNode(ValueNode operand, ContextManager cm)
1:             throws StandardException {
1:         super(operand, "not", cm);
0:         setNodeType(C_NodeTypes.NOT_NODE);
1:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
1: 		acb.generateDataValue(mb, getTypeCompiler(), 
1: 				getTypeServices().getCollationType(), field);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.NotNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.reference.ClassName;
1: 
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
1: import java.lang.reflect.Modifier;
1: 
1: /**
1:  * A NotNode represents a NOT operator. Preprocessing will eliminate the 
1:  * NotNodes which exist above comparison operators so that the optimizer
1:  * will see a query tree in CNF.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
1: public final class NotNode extends UnaryLogicalOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
0: 	 * Initializer for a NotNode
1: 	 *
0: 	 * @param operand	The operand of the NOT
1: 	 */
1: 
0: 	public void init(Object operand)
1: 	{
0: 		super.init(operand, "not");
1: 	}
1: 
1: 	/**
1: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1: 	 * ComparisonOperators and boolean expressions.  We invert 
1: 	 * ComparisonOperators and replace boolean expressions with 
1: 	 * boolean expression = false.
1: 	 *
1: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	ValueNode eliminateNots(boolean underNotNode) 
1: 					throws StandardException
1: 	{
1: 		return operand.eliminateNots(! underNotNode);
1: 	}
1: 
1: 	/**
1: 	 * Do code generation for the NOT operator.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method the expression will go into
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
1: 		/*
1: 		** This generates the following code:
1: 		**
1: 		** <boolean field> = <operand>.equals(<operand>,
1: 		**					 					<false truth value>);
1: 		*/
1: 
1: 		/*
1: 		** Generate the code for a Boolean false constant value.
1: 		*/
1: 		String interfaceName = getTypeCompiler().interfaceName();
1: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, interfaceName);
1: 		/*
1: 		** Generate the call to the equals method.
1: 		** equals is only on Orderable, not any subinterfaces.
1: 		*/
1: 
1: 		/* Generate the code for operand */
1: 		operand.generateExpression(acb, mb);
1: 		mb.upCast(ClassName.DataValueDescriptor);
1: 
1: 		mb.dup(); // arg 1 is instance
1: 
1: 		// arg 2
1: 		mb.push(false);
0: 		acb.generateDataValue(mb, getTypeCompiler(), field);
1: 		mb.upCast(ClassName.DataValueDescriptor);
1: 
1: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "equals", interfaceName, 2);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.lang.reflect.Modifier;
0: 
0: /**
0:  * A NotNode represents a NOT operator. Preprocessing will eliminate the 
0:  * NotNodes which exist above comparison operators so that the optimizer
0:  * will see a query tree in CNF.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public final class NotNode extends UnaryLogicalOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Initializer for a NotNode
0: 	 *
0: 	 * @param operand	The operand of the NOT
0: 	 */
0: 
0: 	public void init(Object operand)
0: 	{
0: 		super.init(operand, "not");
0: 	}
0: 
0: 	/**
0: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
0: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
0: 	 * ComparisonOperators and boolean expressions.  We invert 
0: 	 * ComparisonOperators and replace boolean expressions with 
0: 	 * boolean expression = false.
0: 	 *
0: 	 * @param	underNotNode		Whether or not we are under a NotNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ValueNode eliminateNots(boolean underNotNode) 
0: 					throws StandardException
0: 	{
0: 		return operand.eliminateNots(! underNotNode);
0: 	}
0: 
0: 	/**
0: 	 * Do code generation for the NOT operator.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb	The method the expression will go into
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 									throws StandardException
0: 	{
0: 		/*
0: 		** This generates the following code:
0: 		**
0: 		** <boolean field> = <operand>.equals(<operand>,
0: 		**					 					<false truth value>);
0: 		*/
0: 
0: 		/*
0: 		** Generate the code for a Boolean false constant value.
0: 		*/
0: 		String interfaceName = getTypeCompiler().interfaceName();
0: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, interfaceName);
0: 		/*
0: 		** Generate the call to the equals method.
0: 		** equals is only on Orderable, not any subinterfaces.
0: 		*/
0: 
0: 		/* Generate the code for operand */
0: 		operand.generateExpression(acb, mb);
0: 		mb.upCast(ClassName.DataValueDescriptor);
0: 
0: 		mb.dup(); // arg 1 is instance
0: 
0: 		// arg 2
0: 		mb.push(false);
0: 		acb.generateDataValue(mb, getTypeCompiler(), field);
0: 		mb.upCast(ClassName.DataValueDescriptor);
0: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "equals", interfaceName, 2);
0: 	}
0: }
============================================================================