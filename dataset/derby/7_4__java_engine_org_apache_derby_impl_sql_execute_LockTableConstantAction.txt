1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.LockTableConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class describes actions that are ALWAYS performed for a
1:eac0369:  *	LOCK TABLE Statement at Execution time.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:e4fa8cb: class LockTableConstantAction implements ConstantAction
1:eac0369: {
1:eac0369: 
1:eac0369: 	private final String					fullTableName;
1:eac0369: 	private final long					conglomerateNumber;
1:eac0369: 	private final boolean					exclusiveMode;
1:eac0369: 	
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make the ConstantAction for a LOCK TABLE statement.
1:eac0369: 	 *
1:6b50965: 	 *  @param fullTableName		Full name of the table.
1:eac0369: 	 *  @param conglomerateNumber	Conglomerate number for the heap
1:eac0369: 	 *  @param exclusiveMode		Whether or not to get an exclusive lock.
1:eac0369: 	 */
1:eac0369: 	LockTableConstantAction(String fullTableName,
1:eac0369: 									long conglomerateNumber, boolean exclusiveMode)
1:eac0369: 	{
1:eac0369: 		this.fullTableName = fullTableName;
1:eac0369: 		this.conglomerateNumber = conglomerateNumber;
1:eac0369: 		this.exclusiveMode = exclusiveMode;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// OBJECT METHODS
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return "LOCK TABLE " + fullTableName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for LOCK TABLE.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		ConglomerateController	cc;
1:eac0369: 		TransactionController	tc;
1:eac0369: 
1:eac0369: 		/* Get a ConglomerateController for the base conglomerate */
1:eac0369: 		tc = activation.getTransactionController();
1:eac0369: 
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			cc = tc.openConglomerate(
1:eac0369: 	                conglomerateNumber,
1:eac0369:                     false,
1:eac0369: 					(exclusiveMode) ?
1:eac0369: 						(TransactionController.OPENMODE_FORUPDATE | 
1:eac0369: 							TransactionController.OPENMODE_FOR_LOCK_ONLY) :
1:eac0369: 						TransactionController.OPENMODE_FOR_LOCK_ONLY,
1:eac0369: 			        TransactionController.MODE_TABLE,
1:eac0369:                     TransactionController.ISOLATION_SERIALIZABLE);
1:eac0369: 			cc.close();
1:eac0369: 		}
1:eac0369: 		catch (StandardException se)
1:eac0369: 		{
1:eac0369: 			String msgId = se.getMessageId();
1:c9ef166:             if (se.isLockTimeoutOrDeadlock())
1:c9ef166:             {
1:eac0369: 				String mode = (exclusiveMode) ? "EXCLUSIVE" : "SHARE";
1:c9ef166: 				se = StandardException.newException(
1:c9ef166:                         SQLState.LANG_CANT_LOCK_TABLE, se, fullTableName, mode);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			throw se;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:c9ef166
/////////////////////////////////////////////////////////////////////////
1:             if (se.isLockTimeoutOrDeadlock())
1:             {
1: 				se = StandardException.newException(
1:                         SQLState.LANG_CANT_LOCK_TABLE, se, fullTableName, mode);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e4fa8cb
/////////////////////////////////////////////////////////////////////////
1: class LockTableConstantAction implements ConstantAction
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.LockTableConstantAction
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: 
1: /**
1:  *	This class describes actions that are ALWAYS performed for a
1:  *	LOCK TABLE Statement at Execution time.
1:  *
0:  *	@author jamie 
1:  */
1: 
0: class LockTableConstantAction extends GenericConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private final String					fullTableName;
1: 	private final long					conglomerateNumber;
1: 	private final boolean					exclusiveMode;
1: 	
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Make the ConstantAction for a LOCK TABLE statement.
1: 	 *
0: 	 *  @param fulltableName		Full name of the table.
1: 	 *  @param conglomerateNumber	Conglomerate number for the heap
1: 	 *  @param exclusiveMode		Whether or not to get an exclusive lock.
1: 	 */
1: 	LockTableConstantAction(String fullTableName,
1: 									long conglomerateNumber, boolean exclusiveMode)
1: 	{
1: 		this.fullTableName = fullTableName;
1: 		this.conglomerateNumber = conglomerateNumber;
1: 		this.exclusiveMode = exclusiveMode;
1: 	}
1: 
1: 	// OBJECT METHODS
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return "LOCK TABLE " + fullTableName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for LOCK TABLE.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
1: 		ConglomerateController	cc;
1: 		TransactionController	tc;
1: 
1: 		/* Get a ConglomerateController for the base conglomerate */
1: 		tc = activation.getTransactionController();
1: 
1: 		try
1: 		{
1: 			cc = tc.openConglomerate(
1: 	                conglomerateNumber,
1:                     false,
1: 					(exclusiveMode) ?
1: 						(TransactionController.OPENMODE_FORUPDATE | 
1: 							TransactionController.OPENMODE_FOR_LOCK_ONLY) :
1: 						TransactionController.OPENMODE_FOR_LOCK_ONLY,
1: 			        TransactionController.MODE_TABLE,
1:                     TransactionController.ISOLATION_SERIALIZABLE);
1: 			cc.close();
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			String msgId = se.getMessageId();
0: 			if (msgId.equals(SQLState.DEADLOCK) || msgId.equals(SQLState.LOCK_TIMEOUT) || msgId.equals(SQLState.LOCK_TIMEOUT_LOG)) {
1: 				String mode = (exclusiveMode) ? "EXCLUSIVE" : "SHARE";
0: 				se = StandardException.newException(SQLState.LANG_CANT_LOCK_TABLE, se, fullTableName, mode);
1: 			}
1: 
1: 			throw se;
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param fullTableName		Full name of the table.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: 
0: /**
0:  *	This class describes actions that are ALWAYS performed for a
0:  *	LOCK TABLE Statement at Execution time.
0:  *
0:  *	@author jamie 
0:  */
0: 
0: class LockTableConstantAction extends GenericConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private final String					fullTableName;
0: 	private final long					conglomerateNumber;
0: 	private final boolean					exclusiveMode;
0: 	
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Make the ConstantAction for a LOCK TABLE statement.
0: 	 *
0: 	 *  @param fulltableName		Full name of the table.
0: 	 *  @param conglomerateNumber	Conglomerate number for the heap
0: 	 *  @param exclusiveMode		Whether or not to get an exclusive lock.
0: 	 */
0: 	LockTableConstantAction(String fullTableName,
0: 									long conglomerateNumber, boolean exclusiveMode)
0: 	{
0: 		this.fullTableName = fullTableName;
0: 		this.conglomerateNumber = conglomerateNumber;
0: 		this.exclusiveMode = exclusiveMode;
0: 	}
0: 
0: 	// OBJECT METHODS
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return "LOCK TABLE " + fullTableName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for LOCK TABLE.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		ConglomerateController	cc;
0: 		TransactionController	tc;
0: 
0: 		/* Get a ConglomerateController for the base conglomerate */
0: 		tc = activation.getTransactionController();
0: 
0: 		try
0: 		{
0: 			cc = tc.openConglomerate(
0: 	                conglomerateNumber,
0:                     false,
0: 					(exclusiveMode) ?
0: 						(TransactionController.OPENMODE_FORUPDATE | 
0: 							TransactionController.OPENMODE_FOR_LOCK_ONLY) :
0: 						TransactionController.OPENMODE_FOR_LOCK_ONLY,
0: 			        TransactionController.MODE_TABLE,
0:                     TransactionController.ISOLATION_SERIALIZABLE);
0: 			cc.close();
0: 		}
0: 		catch (StandardException se)
0: 		{
0: 			String msgId = se.getMessageId();
0: 			if (msgId.equals(SQLState.DEADLOCK) || msgId.equals(SQLState.LOCK_TIMEOUT) || msgId.equals(SQLState.LOCK_TIMEOUT_LOG)) {
0: 				String mode = (exclusiveMode) ? "EXCLUSIVE" : "SHARE";
0: 				se = StandardException.newException(SQLState.LANG_CANT_LOCK_TABLE, se, fullTableName, mode);
0: 			}
0: 
0: 			throw se;
0: 		}
0: 	}
0: }
============================================================================