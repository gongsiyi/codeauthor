1:5d12015: /**
1:5d12015:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest
4:5d12015:  *  
1:5d12015:  * Licensed to the Apache Software Foundation (ASF) under one
1:5d12015:  * or more contributor license agreements.  See the NOTICE file
1:5d12015:  * distributed with this work for additional information
1:5d12015:  * regarding copyright ownership.  The ASF licenses this file
1:5d12015:  * to you under the Apache License, Version 2.0 (the
1:5d12015:  * "License"); you may not use this file except in compliance
1:5d12015:  * with the License.  You may obtain a copy of the License at
1:5d12015:  *
1:5d12015:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5d12015:  *
1:5d12015:  * Unless required by applicable law or agreed to in writing,
1:5d12015:  * software distributed under the License is distributed on an
1:5d12015:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5d12015:  * KIND, either express or implied.  See the License for the
1:5d12015:  * specific language governing permissions and limitations
1:5d12015:  * under the License.
1:5d12015:  */
3:5d12015: 
1:5d12015: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:5d12015: 
1:5d12015: import java.io.IOException;
1:5d12015: import java.io.InputStream;
1:c3ff1bd: import java.io.UnsupportedEncodingException;
1:5d12015: import java.sql.Connection;
1:5d12015: import java.sql.PreparedStatement;
1:5d12015: import java.sql.ResultSet;
1:bf59358: import java.sql.ResultSetMetaData;
1:5d12015: import java.sql.SQLException;
1:5d12015: import java.sql.Statement;
1:5d12015: import junit.framework.Test;
1:5d12015: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:c3ff1bd: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:5d12015: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:5d12015: import org.apache.derbyTesting.junit.TestConfiguration;
1:5d12015: import org.apache.derbyTesting.junit.Utilities;
1:5d12015: 
1:5d12015: public class LargeDataLocksTest extends BaseJDBCTestCase {
1:5d12015: 
1:5d12015:     public LargeDataLocksTest(String name) {
1:5d12015:         super(name);
1:5d12015:     }
1:5d12015: 
1:5d12015:     /**
1:5d12015:      * Test that ResultSet.getCharacterStream does not hold locks after the
1:5d12015:      * ResultSet is closed
1:5d12015:      * 
2:5d12015:      * @throws SQLException
1:5d12015:      * @throws IOException
1:5d12015:      */
1:5d12015:     public void testGetCharacterStream() throws SQLException, IOException {
1:5d12015:         // getCharacterStream() no locks expected after retrieval
1:5d12015:         int numChars = 0;
1:5d12015:         Statement stmt = createStatement();
1:5d12015:         String sql = "SELECT bc from t1";
1:5d12015:         // First with getCharacterStream
1:5d12015:         ResultSet rs = stmt.executeQuery(sql);
1:5d12015:         rs.next();
1:5d12015:         java.io.Reader characterStream = rs.getCharacterStream(1);
1:5d12015:         // Extract all the characters
1:5d12015:         int read = characterStream.read();
1:5d12015:         while (read != -1) {
1:5d12015:             read = characterStream.read();
1:5d12015:             numChars++;
1:5d12015:         }
1:5d12015:         assertEquals(38000, numChars);
1:5d12015:         rs.close();
1:bf59358:         assertLockCount(0);
1:5d12015:         commit();
1:5d12015:     }
1:5d12015: 
1:5d12015:     /**
1:5d12015:      * Verify that getBytes does not hold locks after ResultSet is closed.
1:5d12015:      * 
1:5d12015:      * @throws SQLException
1:5d12015:      */
1:5d12015:     public void testGetBytes() throws SQLException {
1:5d12015:         // getBytes() no locks expected after retrieval
1:5d12015:         Statement stmt = createStatement();
1:5d12015:         String sql = "SELECT bincol from t1";
1:5d12015:         ResultSet rs = stmt.executeQuery(sql);
1:5d12015:         rs.next();
1:5d12015:         byte[] value = rs.getBytes(1);
1:5d12015:         assertEquals(38000, value.length);
1:5d12015:         rs.close();
1:bf59358:         assertLockCount(0);
1:5d12015:         commit();
1:5d12015: 
1:5d12015:     }
1:5d12015: 
1:5d12015:     /**
1:5d12015:      * Verify that getBinaryStream() does not hold locks after retrieval
1:5d12015:      * 
1:5d12015:      * @throws SQLException
1:5d12015:      * @throws IOException
1:5d12015:      */
1:5d12015:     public void testGetBinaryStream() throws SQLException, IOException {
1:5d12015:         int numBytes = 0;
1:5d12015:         getConnection().setAutoCommit(false);
1:5d12015:         Statement stmt = createStatement();
1:5d12015:         String sql = "SELECT bincol from t1";
1:5d12015:         ResultSet rs = stmt.executeQuery(sql);
1:5d12015:         rs.next();
1:5d12015:         InputStream stream = rs.getBinaryStream(1);
1:5d12015:         int read = stream.read();
1:5d12015:         while (read != -1) {
1:5d12015:             read = stream.read();
1:5d12015:             numBytes++;
1:5d12015:         }
1:5d12015:         assertEquals(38000, numBytes);
1:5d12015:         rs.close();
1:bf59358:         assertLockCount(0);
1:5d12015:         commit();
1:5d12015:     }
1:5d12015: 
1:5d12015:     /**
1:5d12015:      * Test that ResultSet.getString() does not hold locks after the ResultSet
1:5d12015:      * is closed
1:5d12015:      * 
1:5d12015:      * @throws SQLException
1:5d12015:      * @throws IOException
1:5d12015:      */
1:5d12015:     public void testGetString() throws SQLException, IOException {
1:5d12015:         // getString() no locks expected after retrieval
1:5d12015:         Statement stmt = createStatement();
1:5d12015:         String sql = "SELECT bc from t1";
1:5d12015:         ResultSet rs = stmt.executeQuery(sql);
1:5d12015:         rs.next();
1:5d12015:         String value = rs.getString(1);
1:5d12015:         assertEquals(38000, value.length());
1:5d12015:         rs.close();
1:bf59358:         assertLockCount(0);
1:5d12015:         commit();
1:5d12015:     }
1:5d12015: 
1:5d12015:     /**
1:bf59358:      * Assert that the lock table contains a certain number of locks. Fail and
1:bf59358:      * dump the contents of the lock table if the lock table does not contain
1:bf59358:      * the expected number of locks.
1:bf59358:      *
1:bf59358:      * @param expected the expected number of locks
1:5d12015:      */
1:bf59358:     private void assertLockCount(int expected) throws SQLException {
1:bf59358:         // Count the locks in a new connection so that we don't accidentally
1:bf59358:         // make the default connection auto-commit and release locks.
1:5d12015:         Connection conn = openDefaultConnection();
1:5d12015:         Statement stmt = conn.createStatement();
1:1ada130: 
1:1ada130:         // First wait for post-commit work to complete so that we don't count
1:1ada130:         // locks held by the background worker thread.
1:1ada130:         stmt.execute("call wait_for_post_commit()");
1:1ada130: 
1:bf59358:         ResultSet rs = stmt.executeQuery("select * from syscs_diag.lock_table");
1:bf59358:         ResultSetMetaData meta = rs.getMetaData();
1:5d12015: 
1:bf59358:         // Build an error message with the contents of the lock table as
1:bf59358:         // we walk through it.
1:bf59358:         StringBuffer msg = new StringBuffer(
1:bf59358:                 "Unexpected lock count. Contents of lock table:\n");
1:bf59358:         int count;
1:bf59358:         for (count = 0; rs.next(); count++) {
1:bf59358:             msg.append(count + 1).append(": ");
1:bf59358:             for (int col = 1; col <= meta.getColumnCount(); col++) {
1:bf59358:                 String name = meta.getColumnName(col);
1:bf59358:                 Object val = rs.getObject(col);
1:bf59358:                 msg.append(name).append('=').append(val).append(' ');
1:bf59358:             }
1:bf59358:             msg.append('\n');
1:bf59358:         }
1:bf59358: 
1:bf59358:         rs.close();
1:5d12015:         stmt.close();
1:5d12015:         conn.close();
1:bf59358: 
1:bf59358:         assertEquals(msg.toString(), expected, count);
1:5d12015:     }
1:5d12015: 
1:5d12015:     public static Test baseSuite(String name) {
1:5d12015: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:5d12015:         suite.addTestSuite(LargeDataLocksTest.class);
1:5d12015: 
1:5d12015:         return new CleanDatabaseTestSetup(suite) {
1:5d12015: 
1:5d12015:             /**
1:5d12015:              * Create and populate table
1:5d12015:              * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:5d12015:              */
1:5d12015:             protected void decorateSQL(Statement s) throws SQLException {
1:5d12015:                 Connection conn = getConnection();
1:5d12015:                 conn.setAutoCommit(false);
1:5d12015:                 PreparedStatement ps = null;
2:5d12015:                 String sql;
1:5d12015: 
1:5d12015:                 sql = "CREATE TABLE t1 (bc CLOB(1M), bincol BLOB(1M), datalen int)";
1:5d12015:                 s.executeUpdate(sql);
1:5d12015: 
1:5d12015:                 // Insert big and little values
1:5d12015:                 sql = "INSERT into t1 values(?,?,?)";
1:5d12015:                 ps = conn.prepareStatement(sql);
1:5d12015: 
1:5d12015:                 ps.setCharacterStream(1, new java.io.StringReader(Utilities
1:5d12015:                         .repeatChar("a", 38000)), 38000);
1:c3ff1bd:                 try {
1:c3ff1bd:                     ps.setBytes(2, Utilities.repeatChar("a", 38000).getBytes("US-ASCII"));
1:c3ff1bd:                 } catch (UnsupportedEncodingException ue) {
1:c3ff1bd:                     // Shouldn't happen US-ASCII should always be supported
1:611a3a2:                     BaseTestCase.fail(ue.getMessage(), ue);
1:c3ff1bd:                 }
1:5d12015:                 ps.setInt(3, 38000);
1:5d12015:                 ps.executeUpdate();
1:5d12015:                 ps.close();
1:1ada130: 
1:1ada130:                 // Create a procedure for use by assertLockCount() to ensure
1:1ada130:                 // that the background worker thread has completed all the
1:1ada130:                 // post-commit work.
1:1ada130:                 s.execute("CREATE PROCEDURE WAIT_FOR_POST_COMMIT() "
1:1ada130:                         + "LANGUAGE JAVA EXTERNAL NAME "
1:1ada130:                         + "'org.apache.derbyTesting.functionTests.util."
1:1ada130:                         + "T_Access.waitForPostCommitToFinish' "
1:1ada130:                         + "PARAMETER STYLE JAVA");
1:1ada130: 
1:5d12015:                 conn.commit();
1:5d12015:             }
1:5d12015:         };
1:5d12015:     }
1:5d12015: 
1:5d12015:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("LargeDataLocksTest");
1:5d12015:         suite.addTest(baseSuite("LargeDataLocksTest:embedded"));
1:5d12015:         // Disable for client until DERBY-2892 is fixed
1:c6ed70e:         suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("LargeDataLocksTest:client")));
1:5d12015:         return suite;
1:5d12015: 
1:5d12015:     }
1:5d12015: 
1:5d12015: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("LargeDataLocksTest");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1ada130
/////////////////////////////////////////////////////////////////////////
1: 
1:         // First wait for post-commit work to complete so that we don't count
1:         // locks held by the background worker thread.
1:         stmt.execute("call wait_for_post_commit()");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 // Create a procedure for use by assertLockCount() to ensure
1:                 // that the background worker thread has completed all the
1:                 // post-commit work.
1:                 s.execute("CREATE PROCEDURE WAIT_FOR_POST_COMMIT() "
1:                         + "LANGUAGE JAVA EXTERNAL NAME "
1:                         + "'org.apache.derbyTesting.functionTests.util."
1:                         + "T_Access.waitForPostCommitToFinish' "
1:                         + "PARAMETER STYLE JAVA");
1: 
commit:bf59358
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSetMetaData;
/////////////////////////////////////////////////////////////////////////
1:         assertLockCount(0);
/////////////////////////////////////////////////////////////////////////
1:         assertLockCount(0);
/////////////////////////////////////////////////////////////////////////
1:         assertLockCount(0);
/////////////////////////////////////////////////////////////////////////
1:         assertLockCount(0);
1:      * Assert that the lock table contains a certain number of locks. Fail and
1:      * dump the contents of the lock table if the lock table does not contain
1:      * the expected number of locks.
1:      *
1:      * @param expected the expected number of locks
1:     private void assertLockCount(int expected) throws SQLException {
1:         // Count the locks in a new connection so that we don't accidentally
1:         // make the default connection auto-commit and release locks.
1:         ResultSet rs = stmt.executeQuery("select * from syscs_diag.lock_table");
1:         ResultSetMetaData meta = rs.getMetaData();
1:         // Build an error message with the contents of the lock table as
1:         // we walk through it.
1:         StringBuffer msg = new StringBuffer(
1:                 "Unexpected lock count. Contents of lock table:\n");
1:         int count;
1:         for (count = 0; rs.next(); count++) {
1:             msg.append(count + 1).append(": ");
1:             for (int col = 1; col <= meta.getColumnCount(); col++) {
1:                 String name = meta.getColumnName(col);
1:                 Object val = rs.getObject(col);
1:                 msg.append(name).append('=').append(val).append(' ');
1:             }
1:             msg.append('\n');
1:         }
1: 
1:         rs.close();
1: 
1:         assertEquals(msg.toString(), expected, count);
commit:611a3a2
/////////////////////////////////////////////////////////////////////////
1:                     BaseTestCase.fail(ue.getMessage(), ue);
commit:5d12015
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.Utilities;
1: 
1: public class LargeDataLocksTest extends BaseJDBCTestCase {
1: 
1:     public LargeDataLocksTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Test that ResultSet.getCharacterStream does not hold locks after the
1:      * ResultSet is closed
1:      * 
1:      * @throws SQLException
1:      * @throws IOException
1:      */
1:     public void testGetCharacterStream() throws SQLException, IOException {
1:         // getCharacterStream() no locks expected after retrieval
1:         int numChars = 0;
1:         Statement stmt = createStatement();
1:         String sql = "SELECT bc from t1";
1:         // First with getCharacterStream
1:         ResultSet rs = stmt.executeQuery(sql);
1:         rs.next();
1:         java.io.Reader characterStream = rs.getCharacterStream(1);
1:         // Extract all the characters
1:         int read = characterStream.read();
1:         while (read != -1) {
1:             read = characterStream.read();
1:             numChars++;
1:         }
1:         assertEquals(38000, numChars);
1:         rs.close();
0:         assertEquals(0, countLocks());
1:         commit();
1:     }
1: 
1:     /**
1:      * Verify that getBytes does not hold locks after ResultSet is closed.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testGetBytes() throws SQLException {
1:         // getBytes() no locks expected after retrieval
1:         Statement stmt = createStatement();
1:         String sql = "SELECT bincol from t1";
1:         ResultSet rs = stmt.executeQuery(sql);
1:         rs.next();
1:         byte[] value = rs.getBytes(1);
1:         assertEquals(38000, value.length);
1:         rs.close();
0:         assertEquals(0, countLocks());
1:         commit();
1: 
1:     }
1: 
1:     /**
1:      * Verify that getBinaryStream() does not hold locks after retrieval
1:      * 
1:      * @throws SQLException
1:      * @throws IOException
1:      */
1:     public void testGetBinaryStream() throws SQLException, IOException {
1:         int numBytes = 0;
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement();
1:         String sql = "SELECT bincol from t1";
1:         ResultSet rs = stmt.executeQuery(sql);
1:         rs.next();
1:         InputStream stream = rs.getBinaryStream(1);
1:         int read = stream.read();
1:         while (read != -1) {
1:             read = stream.read();
1:             numBytes++;
1:         }
1:         assertEquals(38000, numBytes);
1:         rs.close();
0:         assertEquals(0, countLocks());
1:         commit();
1:     }
1: 
1:     /**
1:      * Test that ResultSet.getString() does not hold locks after the ResultSet
1:      * is closed
1:      * 
1:      * @throws SQLException
1:      * @throws IOException
1:      */
1:     public void testGetString() throws SQLException, IOException {
1:         // getString() no locks expected after retrieval
1:         Statement stmt = createStatement();
1:         String sql = "SELECT bc from t1";
1:         ResultSet rs = stmt.executeQuery(sql);
1:         rs.next();
1:         String value = rs.getString(1);
1:         assertEquals(38000, value.length());
1:         rs.close();
0:         assertEquals(0, countLocks());
1:         commit();
1:     }
1: 
1:     /**
0:      * Create a new connection and count the number of locks held.
1:      * 
0:      * @return number of locks held
1:      * 
1:      * @throws SQLException
1:      */
0:     public int countLocks() throws SQLException {
1:         Connection conn = openDefaultConnection();
1:         String sql;
1:         Statement stmt = conn.createStatement();
1: 
0:         sql = "Select count(*) from new org.apache.derby.diag.LockTable() as LT";
0:         ResultSet lockrs = stmt.executeQuery(sql);
0:         lockrs.next();
0:         int count = lockrs.getInt(1);
0:         lockrs.close();
1:         stmt.close();
1:         conn.close();
0:         return count;
1:     }
1: 
1:     public static Test baseSuite(String name) {
1: 
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(LargeDataLocksTest.class);
1: 
1:         return new CleanDatabaseTestSetup(suite) {
1: 
1:             /**
1:              * Create and populate table
1:              * 
1:              * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 Connection conn = getConnection();
1:                 conn.setAutoCommit(false);
1:                 PreparedStatement ps = null;
1:                 String sql;
1: 
1:                 sql = "CREATE TABLE t1 (bc CLOB(1M), bincol BLOB(1M), datalen int)";
1:                 s.executeUpdate(sql);
1: 
1:                 // Insert big and little values
1:                 sql = "INSERT into t1 values(?,?,?)";
1:                 ps = conn.prepareStatement(sql);
1: 
1:                 ps.setCharacterStream(1, new java.io.StringReader(Utilities
1:                         .repeatChar("a", 38000)), 38000);
0:                 ps.setBytes(2, Utilities.repeatChar("a", 38000).getBytes());
1:                 ps.setInt(3, 38000);
1:                 ps.executeUpdate();
1:                 ps.close();
1:                 conn.commit();
1:             }
1:         };
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("LargeDataLocksTest");
1:         suite.addTest(baseSuite("LargeDataLocksTest:embedded"));
1:         // Disable for client until DERBY-2892 is fixed
0:         //suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("LargeDataLocksTest:client")));
1:         return suite;
1: 
1:     }
1: 
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c3ff1bd
/////////////////////////////////////////////////////////////////////////
1: import java.io.UnsupportedEncodingException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestCase;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     ps.setBytes(2, Utilities.repeatChar("a", 38000).getBytes("US-ASCII"));
1:                 } catch (UnsupportedEncodingException ue) {
1:                     // Shouldn't happen US-ASCII should always be supported
0:                 	BaseTestCase.fail(ue.getMessage(),ue);
1:                 }
commit:c6ed70e
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("LargeDataLocksTest:client")));
commit:ef9ae00
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.Utilities;
0:     /**
0:      * Test that ResultSet.getCharacterStream does not hold locks after the
0:      * ResultSet is closed
0:      * 
0:      * @throws SQLException
0:      * @throws IOException
0:      */
0:     public void testGetCharacterStream() throws SQLException, IOException {
0:         // getCharacterStream() no locks expected after retrieval
0:         int numChars = 0;
0:         Statement stmt = createStatement();
0:         String sql = "SELECT bc from t1";
0:         // First with getCharacterStream
0:         ResultSet rs = stmt.executeQuery(sql);
0:         rs.next();
0:         java.io.Reader characterStream = rs.getCharacterStream(1);
0:         // Extract all the characters
0:         int read = characterStream.read();
0:         while (read != -1) {
0:             read = characterStream.read();
0:             numChars++;
0:         }
0:         assertEquals(38000, numChars);
0:         rs.close();
0:         assertEquals(0, countLocks());
0:         commit();
0:     }
0:     /**
0:      * Verify that getBytes does not hold locks after ResultSet is closed.
0:      * 
0:      * @throws SQLException
0:      */
0:     public void testGetBytes() throws SQLException {
0:         // getBytes() no locks expected after retrieval
0:         Statement stmt = createStatement();
0:         String sql = "SELECT bincol from t1";
0:         ResultSet rs = stmt.executeQuery(sql);
0:         rs.next();
0:         byte[] value = rs.getBytes(1);
0:         assertEquals(38000, value.length);
0:         rs.close();
0:         assertEquals(0, countLocks());
0:         commit();
0: 
0:     }
0: 
0:     /**
0:      * Verify that getBinaryStream() does not hold locks after retrieval
0:      * 
0:      * @throws SQLException
0:      * @throws IOException
0:      */
0:     public void testGetBinaryStream() throws SQLException, IOException {
0:         int numBytes = 0;
0:         getConnection().setAutoCommit(false);
0:         Statement stmt = createStatement();
0:         String sql = "SELECT bincol from t1";
0:         ResultSet rs = stmt.executeQuery(sql);
0:         rs.next();
0:         InputStream stream = rs.getBinaryStream(1);
0:         int read = stream.read();
0:         while (read != -1) {
0:             read = stream.read();
0:             numBytes++;
0:         }
0:         assertEquals(38000, numBytes);
0:         rs.close();
0:         assertEquals(0, countLocks());
0:         commit();
0:     }
0: 
0:     /**
0:      * Test that ResultSet.getString() does not hold locks after the ResultSet
0:      * is closed
0:      * 
0:      * @throws SQLException
0:      * @throws IOException
0:      */
0:     public void testGetString() throws SQLException, IOException {
0:         // getString() no locks expected after retrieval
0:         Statement stmt = createStatement();
0:         String sql = "SELECT bc from t1";
0:         ResultSet rs = stmt.executeQuery(sql);
0:         rs.next();
0:         String value = rs.getString(1);
0:         assertEquals(38000, value.length());
0:         rs.close();
0:         assertEquals(0, countLocks());
0:         commit();
0:     }
0: 
0:     /**
0:      * Create a new connection and count the number of locks held.
0:      * 
0:      * @return number of locks held
0:      * 
0:      * @throws SQLException
0:      */
0:     public int countLocks() throws SQLException {
0:         Connection conn = openDefaultConnection();
0:         String sql;
0:         Statement stmt = conn.createStatement();
0: 
0:         sql = "Select count(*) from new org.apache.derby.diag.LockTable() as LT";
0:         ResultSet lockrs = stmt.executeQuery(sql);
0:         lockrs.next();
0:         int count = lockrs.getInt(1);
0:         lockrs.close();
0:         stmt.close();
0:         conn.close();
0:         return count;
0:     }
0: 
0:     public static Test baseSuite(String name) {
/////////////////////////////////////////////////////////////////////////
0:                 Connection conn = getConnection();
0:                 conn.setAutoCommit(false);
0:                 PreparedStatement ps = null;
0:                 String sql;
0:                 sql = "CREATE TABLE t1 (bc CLOB(1M), bincol BLOB(1M), datalen int)";
0:                 s.executeUpdate(sql);
0: 
0:                 // Insert big and little values
0:                 sql = "INSERT into t1 values(?,?,?)";
0:                 ps = conn.prepareStatement(sql);
0: 
0:                 ps.setCharacterStream(1, new java.io.StringReader(Utilities
0:                         .repeatChar("a", 38000)), 38000);
0:                 ps.setBytes(2, Utilities.repeatChar("a", 38000).getBytes());
0:                 ps.setInt(3, 38000);
0:                 ps.executeUpdate();
0:                 ps.close();
0:                 conn.commit();
/////////////////////////////////////////////////////////////////////////
0:         // Disable for client until DERBY-2892 is fixed
commit:afd4b2f
/////////////////////////////////////////////////////////////////////////
0: 		getConnection().setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
0:        // Disable for client until DERBY-2892 is fixed
0:         //suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("LargeDataLocksTest:client")));
commit:a3acaa5
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest
0:  *  
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
0: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.sql.Clob;
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
0: import org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test;
0: import org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
0: import org.apache.derbyTesting.junit.Utilities;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: 
0: public class LargeDataLocksTest extends BaseJDBCTestCase {
0: 
0: 	
0:     public LargeDataLocksTest(String name) {
0:         super(name);
0:     }
0:     
0:    
0:  /**
0:  * Test that ResultSet.getCharacterStream does not hold locks after the
0:  * ResultSet is closed
0:  * @throws SQLException
0:  * @throws IOException
0:  */
0: public void testGetCharacterStream() throws SQLException, IOException {
0: 	   // getCharacterStream() no locks expected after retrieval
0: 		int numChars = 0;
0: 		Statement stmt=createStatement();		
0: 		String sql = "SELECT bc from t1";
0: 		// First with getCharacterStream
0: 		ResultSet rs = stmt.executeQuery(sql);
0: 		rs.next();
0: 		java.io.Reader characterStream = rs.getCharacterStream(1);
0: 		// Extract all the characters
0: 		int read = characterStream.read();
0: 		while (read != -1) {
0: 			read = characterStream.read();
0: 			numChars ++;
0: 		}
0: 		assertEquals(38000,numChars);
0: 		rs.close();
0: 		assertEquals(0,countLocks());
0: 		commit();		
0:    }
0:   
0: /**
0:  * Verify that getBytes does not hold locks after ResultSet is closed.
0:  * @throws SQLException
0:  */
0: public void testGetBytes() throws SQLException {
0: 	// getBytes() no locks expected after retrieval
0: 	Statement stmt=createStatement();		
0: 	String sql = "SELECT bincol from t1" ;
0: 	ResultSet rs = stmt.executeQuery(sql);
0: 	rs.next();
0: 	byte[] value = rs.getBytes(1);
0: 	assertEquals(38000,value.length);
0: 	rs.close();
0: 	assertEquals(0,countLocks());
0: 	commit();
0: 	
0: }
0: 
0:  /**
0:  * Verify that getBinaryStream() does not hold locks after retrieval
0:  * @throws SQLException
0:  * @throws IOException 
0:  */
0: public void testGetBinaryStream() throws SQLException, IOException {
0: 		int numBytes = 0;
0: 	  Statement stmt=createStatement();		
0: 		String sql = "SELECT bincol from t1" ;
0: 		ResultSet rs = stmt.executeQuery(sql);
0: 		rs.next();
0: 		InputStream stream = rs.getBinaryStream(1);
0: 		int read = stream.read();
0: 		while (read != -1) {
0: 			read = stream.read();
0: 			numBytes ++;
0: 		}
0: 		assertEquals(38000,numBytes);
0: 		rs.close();
0: 		assertEquals(0,countLocks());
0: 		commit(); 	  
0:   }
0:   
0:  /**
0:  * Test that ResultSet.getString() does not hold locks after the ResultSet is closed
0:  * @throws SQLException
0:  * @throws IOException
0:  */
0: public void testGetString() throws SQLException, IOException {
0: 	   // getString() no locks expected after retrieval
0: 		Statement stmt=createStatement();		
0: 		String sql = "SELECT bc from t1" ;
0: 		ResultSet rs = stmt.executeQuery(sql);
0: 		rs.next();
0: 		String value = rs.getString(1);
0: 		assertEquals(38000,value.length());
0: 		rs.close();
0: 		assertEquals(0,countLocks());
0: 		commit();		
0:    }
0:    
0:    
0:    
0:    
0:  /**
0:   * Create a new connection and count the number of locks held.
0:  * @return  number of locks held
0:  * 
0:  * @throws SQLException
0:  */
0: public int countLocks() throws SQLException
0:    {
0: 	   		Connection conn = openDefaultConnection();
0: 			String sql;
0: 			Statement stmt = conn.createStatement();
0: 				
0: 			sql = "Select count(*) from new org.apache.derby.diag.LockTable() as LT";
0: 			ResultSet lockrs = stmt.executeQuery(sql);
0: 			lockrs.next();
0: 			int count = lockrs.getInt(1);
0: 			lockrs.close();
0: 			stmt.close();
0: 			conn.close();
0: 			return count;
0: 		}
0:    
0: 	
0: 
0:     
0: 	public static Test baseSuite(String name) {
0: 
0:         TestSuite suite = new TestSuite(name);
0:         suite.addTestSuite(LargeDataLocksTest.class);
0: 
0:         return new CleanDatabaseTestSetup(suite) {
0: 
0:             /**
0:              * Create and populate table
0:              * 
0:              * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
0:              */
0:             protected void decorateSQL(Statement s) throws SQLException {
0:             	Connection conn = getConnection();
0:     			conn.setAutoCommit(false);
0:     	   		PreparedStatement ps = null;
0:     			String sql;
0:     			
0:     			
0:     			sql = "CREATE TABLE t1 (bc CLOB(1M), bincol BLOB(1M), datalen int)";
0:     			s.executeUpdate(sql);
0:     			
0:     			// Insert big and little values
0:     			sql = "INSERT into t1 values(?,?,?)";		
0:     			ps = conn.prepareStatement(sql);
0: 
0:     			ps.setCharacterStream(1, new
0:     				java.io.StringReader(Utilities.repeatChar("a",38000)),38000);
0:     			ps.setBytes(2,Utilities.repeatChar("a",38000).getBytes());
0:     			ps.setInt(3,38000);
0:     			ps.executeUpdate();
0:     			ps.close();
0:     			conn.commit();
0:             }
0:         };
0:     }
0: 
0:     public static Test suite() {
0:         TestSuite suite = new TestSuite("LargeDataLocksTest");
0:         suite.addTest(baseSuite("LargeDataLocksTest:embedded"));
0:         suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("LargeDataLocksTest:client")));
0:         return suite;
0: 
0:     }
0: 
0: }
0:     
============================================================================