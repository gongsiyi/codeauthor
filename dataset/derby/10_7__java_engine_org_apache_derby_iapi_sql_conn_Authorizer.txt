1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.conn.Authorizer
1:50ba36b: 
1:75588ca:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75588ca:    contributor license agreements.  See the NOTICE file distributed with
1:75588ca:    this work for additional information regarding copyright ownership.
1:75588ca:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75588ca:    (the "License"); you may not use this file except in compliance with
1:75588ca:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
4:eac0369:  */
1:b7730e4: 
1:eac0369: package org.apache.derby.iapi.sql.conn;
7:eac0369: 
1:bf32514: import java.util.List;
1:bf32514: 
1:b7730e4: import org.apache.derby.iapi.sql.Activation;
1:bf32514: import org.apache.derby.iapi.sql.dictionary.StatementPermission;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:bf32514: 
1:b7730e4: /**
1:eac0369:   The Authorizer verifies a connected user has the authorization 
1:eac0369:   to perform a requested database operation using the current
1:eac0369:   connection.
1:eac0369: 
1:eac0369:   <P>
1:eac0369:   Today no object based authorization is supported.
1:eac0369:   */
1:eac0369: public interface Authorizer
1:eac0369: {
1:eac0369: 	/** SQL write (insert,update,delete) operation */
1:eac0369: 	public static final int SQL_WRITE_OP = 0;
1:eac0369: 	/** SQL SELECT  operation */
1:eac0369: 	public static final int	SQL_SELECT_OP = 1;
1:eac0369: 	/** Any other SQL operation	*/
1:eac0369: 	public static final int	SQL_ARBITARY_OP = 2;
1:eac0369: 	/** SQL CALL/VALUE  operation */
1:eac0369: 	public static final int	SQL_CALL_OP = 3;
1:eac0369: 	/** SQL DDL operation */
1:eac0369: 	public static final int SQL_DDL_OP   = 4;
1:eac0369: 	/** database property write operation */
1:eac0369: 	public static final int PROPERTY_WRITE_OP = 5;
1:eac0369: 	/**  database jar write operation */	
1:eac0369: 	public static final int JAR_WRITE_OP = 6;
1:b7730e4: 	
1:b7730e4: 	/* Privilege types for SQL standard (grant/revoke) permissions checking. */
1:b7730e4: 	public static final int NULL_PRIV = -1;
1:b7730e4: 	public static final int SELECT_PRIV = 0;
1:b7730e4: 	public static final int UPDATE_PRIV = 1;
1:b7730e4: 	public static final int REFERENCES_PRIV = 2;
1:b7730e4: 	public static final int INSERT_PRIV = 3;
1:b7730e4: 	public static final int DELETE_PRIV = 4;
1:b7730e4: 	public static final int TRIGGER_PRIV = 5;
1:b7730e4: 	public static final int EXECUTE_PRIV = 6;
1:bb40bcb: 	public static final int USAGE_PRIV = 7;
1:46df255:     /* 
1:46df255:      * DERBY-4191
1:46df255:      * Used to check if user has a table level select privilege/any column 
1:46df255:      * level select privilege to fulfill the requirements for following kind 
1:46df255:      * of queries
1:46df255:      * select count(*) from t1
1:46df255:      * select count(1) from t1
1:46df255:      * select 1 from t1
1:46df255:      * select t1.c1 from t1, t2
1:46df255:      * DERBY-4191 was added for Derby bug where for first 3 queries above,
1:46df255:      * we were not requiring any select privilege on t1. And for the 4th
1:46df255:      * query, we were not requiring any select privilege on t2 since no
1:46df255:      * column was selected from t2
1:46df255:      */
1:46df255: 	public static final int MIN_SELECT_PRIV = 8;
1:46df255:     public static final int PRIV_TYPE_COUNT = 9;
1:46df255:     
1:50ba36b: 	/* Used to check who can create schemas or who can modify objects in schema */
1:28c633d: 	public static final int CREATE_SCHEMA_PRIV = 16;
1:28c633d: 	public static final int MODIFY_SCHEMA_PRIV = 17;
1:28c633d: 	public static final int DROP_SCHEMA_PRIV = 18;
1:ee59de8: 
1:ee59de8:     /* Check who can create and drop roles */
1:ee59de8: 	public static final int CREATE_ROLE_PRIV = 19;
1:ee59de8: 	public static final int DROP_ROLE_PRIV = 20;
1:ee59de8: 
1:b7730e4: 	/**
1:b7730e4: 	 * The system authorization ID is defined by the SQL2003 spec as the grantor
1:b7730e4: 	 * of privileges to object owners.
1:b7730e4: 	 */
1:b7730e4: 	public static final String SYSTEM_AUTHORIZATION_ID = "_SYSTEM";
1:28c633d: 
1:b7730e4: 	/**
1:b7730e4: 	 * The public authorization ID is defined by the SQL2003 spec as implying all users.
1:b7730e4: 	 */
1:b7730e4: 	public static final String PUBLIC_AUTHORIZATION_ID = "PUBLIC";
1:b7730e4: 
4:eac0369: 	/**
1:eac0369: 	  Verify the connected user is authorized to perform the requested
1:eac0369: 	  operation.
1:b7730e4: 
1:b7730e4: 	  This variation should only be used with operations that do not use tables
1:b7730e4: 	  or routines. If the operation involves tables or routines then use the
1:b7730e4: 	  variation of the authorize method that takes an Activation parameter. The
1:b7730e4: 	  activation holds the table, column, and routine lists.
1:b7730e4: 
1:eac0369: 	  @param operation the enumeration code for the requsted operation.
1:b7730e4: 
1:eac0369: 	  @exception StandardException Thrown if the operation is not allowed
1:eac0369: 	 */
1:b7730e4: 	public void authorize( int operation) throws StandardException;
1:b7730e4:     
1:b7730e4: 	/**
1:b7730e4: 	  Verify the connected user is authorized to perform the requested
1:b7730e4: 	  operation.
1:eac0369: 
1:b7730e4: 	  @param activation holds the list of tables, columns, and routines used.
1:b7730e4: 	  @param operation the enumeration code for the requsted operation.
1:b7730e4: 
1:b7730e4: 	  @exception StandardException Thrown if the operation is not allowed
1:b7730e4: 	*/
1:b7730e4: 	public void authorize(Activation activation, int operation)
1:b7730e4: 				throws StandardException;
1:eac0369: 
1:bf32514: 	/**
1:bf32514: 	  Verify the connected user possesses the indicated permissions
1:bf32514: 
1:bf32514: 	  @param requiredPermissionsList    the required permissions
1:bf32514: 	  @param activation holds the execution logic
1:bf32514: 
1:bf32514: 	  @exception StandardException Thrown if the operation is not allowed
1:bf32514: 	*/
1:bf32514: 	public void authorize
1:bf32514:         (
1:bf32514:          List<StatementPermission> requiredPermissionsList,
1:bf32514:          Activation activation
1:bf32514:          )
1:bf32514:         throws StandardException;
1:bf32514: 
1:eac0369:    /**
1:eac0369: 	 Get the readOnly status for this authorizer's connection.
1:eac0369: 	 */
1:eac0369:    public boolean isReadOnlyConnection();
1:eac0369: 
1:eac0369:    /**
1:eac0369: 	 Set the readOnly status for this authorizer's connection.
1:eac0369: 	 @param on true means set the connection to read only mode,
1:eac0369: 	           false means set the connection to read wrte mode.
1:eac0369: 	 @param authorize true means to verify the caller has authority
1:eac0369: 	        to set the connection and false means do not check. 
1:eac0369: 	 @exception StandardException Oops not allowed.
1:eac0369: 	 */
1:eac0369:    public void setReadOnlyConnection(boolean on, boolean authorize)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369:    /**
1:eac0369: 	 Refresh this authorizer to reflect a change in the database
1:eac0369: 	 permissions.
1:eac0369: 	 
1:eac0369: 	 @exception StandardException Oops.
1:b7730e4: 	 */
1:eac0369:    public void refresh() throws StandardException;  
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bf32514
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import org.apache.derby.iapi.sql.dictionary.StatementPermission;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	  Verify the connected user possesses the indicated permissions
1: 
1: 	  @param requiredPermissionsList    the required permissions
1: 	  @param activation holds the execution logic
1: 
1: 	  @exception StandardException Thrown if the operation is not allowed
1: 	*/
1: 	public void authorize
1:         (
1:          List<StatementPermission> requiredPermissionsList,
1:          Activation activation
1:          )
1:         throws StandardException;
1: 
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
1: 	public static final int USAGE_PRIV = 7;
0:     public static final int PRIV_TYPE_COUNT = 8;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* Check who can create and drop roles */
1: 	public static final int CREATE_ROLE_PRIV = 19;
1: 	public static final int DROP_ROLE_PRIV = 20;
1: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:46df255
/////////////////////////////////////////////////////////////////////////
1:     /* 
1:      * DERBY-4191
1:      * Used to check if user has a table level select privilege/any column 
1:      * level select privilege to fulfill the requirements for following kind 
1:      * of queries
1:      * select count(*) from t1
1:      * select count(1) from t1
1:      * select 1 from t1
1:      * select t1.c1 from t1, t2
1:      * DERBY-4191 was added for Derby bug where for first 3 queries above,
1:      * we were not requiring any select privilege on t1. And for the 4th
1:      * query, we were not requiring any select privilege on t2 since no
1:      * column was selected from t2
1:      */
1: 	public static final int MIN_SELECT_PRIV = 8;
1:     public static final int PRIV_TYPE_COUNT = 9;
1:     
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:28c633d
/////////////////////////////////////////////////////////////////////////
1: 	public static final int CREATE_SCHEMA_PRIV = 16;
1: 	public static final int MODIFY_SCHEMA_PRIV = 17;
1: 	public static final int DROP_SCHEMA_PRIV = 18;
1: 	
author:David Van Couvering
-------------------------------------------------------------------------------
commit:75588ca
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:50ba36b
/////////////////////////////////////////////////////////////////////////
1: 	/* Used to check who can create schemas or who can modify objects in schema */
0: 	public static final boolean CREATE_SCHEMA_PRIV = false;
0: 	public static final boolean MODIFY_SCHEMA_PRIV = true;
1: 
commit:2c6ca76
/////////////////////////////////////////////////////////////////////////
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
/////////////////////////////////////////////////////////////////////////
1: 	/* Privilege types for SQL standard (grant/revoke) permissions checking. */
1: 	public static final int NULL_PRIV = -1;
1: 	public static final int SELECT_PRIV = 0;
1: 	public static final int UPDATE_PRIV = 1;
1: 	public static final int REFERENCES_PRIV = 2;
1: 	public static final int INSERT_PRIV = 3;
1: 	public static final int DELETE_PRIV = 4;
1: 	public static final int TRIGGER_PRIV = 5;
1: 	public static final int EXECUTE_PRIV = 6;
0: 	public static final int PRIV_TYPE_COUNT = 7;
1: 
1: 	/**
1: 	 * The system authorization ID is defined by the SQL2003 spec as the grantor
1: 	 * of privileges to object owners.
1: 	 */
1: 	public static final String SYSTEM_AUTHORIZATION_ID = "_SYSTEM";
1: 
1: 	/**
1: 	 * The public authorization ID is defined by the SQL2003 spec as implying all users.
1: 	 */
1: 	public static final String PUBLIC_AUTHORIZATION_ID = "PUBLIC";
1: 
1: 	  This variation should only be used with operations that do not use tables
1: 	  or routines. If the operation involves tables or routines then use the
1: 	  variation of the authorize method that takes an Activation parameter. The
1: 	  activation holds the table, column, and routine lists.
1: 
1: 	public void authorize( int operation) throws StandardException;
1:     
1: 	/**
1: 	  Verify the connected user is authorized to perform the requested
1: 	  operation.
1: 
1: 	  @param activation holds the list of tables, columns, and routines used.
1: 	  @param operation the enumeration code for the requsted operation.
1: 
1: 	  @exception StandardException Thrown if the operation is not allowed
1: 	*/
1: 	public void authorize(Activation activation, int operation)
1: 				throws StandardException;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0:  	  * @return true if the authorizer uses the SQL standard permissions (grant/revoke),
0: 	  *         false if the legacy Derby permissions system is used.
0: 	  *
0: 	  * @exception StandardException standard error policy.
1: 	 */
0: 	public boolean usesSqlStandardPermissions() throws StandardException;
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.conn.Authorizer
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.conn
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.conn;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: /**
1:   The Authorizer verifies a connected user has the authorization 
1:   to perform a requested database operation using the current
1:   connection.
1: 
1:   <P>
1:   Today no object based authorization is supported.
1:   */
1: public interface Authorizer
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/** SQL write (insert,update,delete) operation */
1: 	public static final int SQL_WRITE_OP = 0;
1: 	/** SQL SELECT  operation */
1: 	public static final int	SQL_SELECT_OP = 1;
1: 	/** Any other SQL operation	*/
1: 	public static final int	SQL_ARBITARY_OP = 2;
1: 	/** SQL CALL/VALUE  operation */
1: 	public static final int	SQL_CALL_OP = 3;
1: 	/** SQL DDL operation */
1: 	public static final int SQL_DDL_OP   = 4;
1: 	/** database property write operation */
1: 	public static final int PROPERTY_WRITE_OP = 5;
1: 	/**  database jar write operation */	
1: 	public static final int JAR_WRITE_OP = 6;
1: 	
1: 	/**
1: 	  Verify the connected user is authorized to perform the requested
1: 	  operation.
1: 
1: 	  @param operation the enumeration code for the requsted operation.
1: 
1: 	  @exception StandardException Thrown if the operation is not allowed
1: 	 */
0: 	public void authorize(int operation) throws StandardException;
1: 
1:     /**
0: 	  Get the Authorization ID for this Authorizer.
1: 	  */
0:    public String getAuthorizationId();
1: 
1:    /**
1: 	 Get the readOnly status for this authorizer's connection.
1: 	 */
1:    public boolean isReadOnlyConnection();
1: 
1:    /**
1: 	 Set the readOnly status for this authorizer's connection.
1: 	 @param on true means set the connection to read only mode,
1: 	           false means set the connection to read wrte mode.
1: 	 @param authorize true means to verify the caller has authority
1: 	        to set the connection and false means do not check. 
1: 	 @exception StandardException Oops not allowed.
1: 	 */
1:    public void setReadOnlyConnection(boolean on, boolean authorize)
1: 		 throws StandardException;
1: 
1:    /**
1: 	 Refresh this authorizer to reflect a change in the database
1: 	 permissions.
1: 	 
0: 	 @exception AuthorizerSessionException Connect permission gone.
1: 	 @exception StandardException Oops.
1: 	 */
1:    public void refresh() throws StandardException;  
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.conn
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.conn;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: /**
0:   The Authorizer verifies a connected user has the authorization 
0:   to perform a requested database operation using the current
0:   connection.
0: 
0:   <P>
0:   Today no object based authorization is supported.
0:   */
0: public interface Authorizer
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/** SQL write (insert,update,delete) operation */
0: 	public static final int SQL_WRITE_OP = 0;
0: 	/** SQL SELECT  operation */
0: 	public static final int	SQL_SELECT_OP = 1;
0: 	/** Any other SQL operation	*/
0: 	public static final int	SQL_ARBITARY_OP = 2;
0: 	/** SQL CALL/VALUE  operation */
0: 	public static final int	SQL_CALL_OP = 3;
0: 	/** SQL DDL operation */
0: 	public static final int SQL_DDL_OP   = 4;
0: 	/** database property write operation */
0: 	public static final int PROPERTY_WRITE_OP = 5;
0: 	/**  database jar write operation */	
0: 	public static final int JAR_WRITE_OP = 6;
0: 	
0: 	/**
0: 	  Verify the connected user is authorized to perform the requested
0: 	  operation.
0: 
0: 	  @param operation the enumeration code for the requsted operation.
0: 
0: 	  @exception StandardException Thrown if the operation is not allowed
0: 	 */
0: 	public void authorize(int operation) throws StandardException;
0: 
0:     /**
0: 	  Get the Authorization ID for this Authorizer.
0: 	  */
0:    public String getAuthorizationId();
0: 
0:    /**
0: 	 Get the readOnly status for this authorizer's connection.
0: 	 */
0:    public boolean isReadOnlyConnection();
0: 
0:    /**
0: 	 Set the readOnly status for this authorizer's connection.
0: 	 @param on true means set the connection to read only mode,
0: 	           false means set the connection to read wrte mode.
0: 	 @param authorize true means to verify the caller has authority
0: 	        to set the connection and false means do not check. 
0: 	 @exception StandardException Oops not allowed.
0: 	 */
0:    public void setReadOnlyConnection(boolean on, boolean authorize)
0: 		 throws StandardException;
0: 
0:    /**
0: 	 Refresh this authorizer to reflect a change in the database
0: 	 permissions.
0: 	 
0: 	 @exception AuthorizerSessionException Connect permission gone.
0: 	 @exception StandardException Oops.
0: 	 */
0:    public void refresh() throws StandardException;  
0: }
============================================================================