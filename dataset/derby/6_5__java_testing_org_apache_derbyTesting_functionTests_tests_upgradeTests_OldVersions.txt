1:e65365e: /*
1:e65365e: 
1:e65365e: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.OldVersions
1:e65365e: 
1:e65365e: Licensed to the Apache Software Foundation (ASF) under one or more
1:e65365e: contributor license agreements.  See the NOTICE file distributed with
1:e65365e: this work for additional information regarding copyright ownership.
1:e65365e: The ASF licenses this file to You under the Apache License, Version 2.0
1:e65365e: (the "License"); you may not use this file except in compliance with
1:e65365e: the License.  You may obtain a copy of the License at
1:e65365e: 
1:e65365e:    http://www.apache.org/licenses/LICENSE-2.0
1:e65365e: 
1:e65365e: Unless required by applicable law or agreed to in writing, software
1:e65365e: distributed under the License is distributed on an "AS IS" BASIS,
1:e65365e: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e65365e: See the License for the specific language governing permissions and
1:e65365e: limitations under the License.
1:e65365e: 
1:e65365e: */
1:e65365e: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:e65365e: 
1:e65365e: import java.io.BufferedReader;
1:e65365e: import java.io.FileReader;
1:e65365e: import java.io.IOException;
1:e65365e: import java.util.ArrayList;
1:9a81892: import java.util.Arrays;
1:e65365e: 
1:e65365e: import org.apache.derbyTesting.junit.BaseTestCase;
1:e65365e: import org.apache.derbyTesting.junit.JDBC;
1:e65365e: 
1:e65365e: /**
1:e65365e:  * <p>
1:e65365e:  * Old versions visible to the upgrade machinery.
1:e65365e:  * </p>
1:e65365e:  */
1:e65365e: public class OldVersions
1:e65365e: {
1:e65365e:     private static int[][] VERSIONS =
1:e65365e:     {
1:e65365e:         {10, 0, 2, 1}, // 10.0.2.1 (incubator release)
1:e65365e:         {10, 1, 1, 0}, // 10.1.1.0 (Aug 3, 2005 / SVN 208786)
1:e65365e:         {10, 1, 2, 1}, // 10.1.2.1 (Nov 18, 2005 / SVN 330608)
1:e65365e:         {10, 1, 3, 1}, // 10.1.3.1 (Jun 30, 2006 / SVN 417277)
1:e65365e:         {10, 2, 1, 6}, // 10.2.1.6 (Oct 02, 2006 / SVN 452058)
1:e65365e:         {10, 2, 2, 0}, // 10.2.2.0 (Dec 12, 2006 / SVN 485682)
1:e65365e:         {10, 3, 1, 4}, // 10.3.1.4 (Aug 1, 2007 / SVN 561794)
1:e65365e:         {10, 3, 3, 0}, // 10.3.3.0 (May 12, 2008 / SVN 652961)
1:e65365e:         {10, 4, 1, 3}, // 10.4.1.3 (April 24, 2008 / SVN 648739)
1:e65365e:         {10, 4, 2, 0}, // 10.4.2.0 (September 05, 2008 / SVN 693552)
1:6cc77ac:         {10, 5, 1, 1}, // 10.5.1.1 (April 28, 2009 / SVN 764942)
1:c792810:         {10, 5, 3, 0}, // 10.5.3.0 (August 21, 2009 / SVN 802917)
1:d063dd4:         {10, 6, 1, 0}, // 10.6.1.0 (May 18, 2010/ SVN 938214)
1:0808058:         {10, 6, 2, 1}, // 10.6.2.1 (Oct 6, 2010/ SVN 999685)
1:0808058:         {10, 7, 1, 1}, // 10.7.1.1 (December 14, 2010/ SVN 1040133)
1:9e66783:         {10, 8, 1, 2}, // 10.8.1.2 (April 29, 2011/ SVN 1095077)
1:5e4a55f:         {10, 8, 2, 2}, // 10.8.2.2 (October 24, 2011/ SVN 1181258)
1:879ca5d:         {10, 8, 3, 0}, // 10.8.3.0 (November 16, 2012/ SVN 1405108)
1:3dbd09b:         {10, 9, 1, 0}, // 10.9.1.0 (June 25, 2012/ SVN 1344872)
1:bf5ef96:         {10, 10, 1, 1}, // 10.10.1.1 (April 15, 2013/ SVN 1458268)
1:cfa139d:         {10, 10, 2, 0}, // 10.10.2.0 (April 15, 2014/ SVN 1582446)
1:dfbbfaf:         {10, 11, 1, 1}, // 10.11.1.1 (August 26, 2014 / SVN 1616546)
1:50650bc:         {10, 12, 1, 1}, // 10.12.1.1 (October 11, 2015 / SVN 1704137)
1:f1acf2e:         {10, 13, 1, 1}, // 10.13.1.1 (October 25, 2015 / SVN 1765088)
1:e65365e:     };
1:e65365e: 
1:000d4bc:     //Constant for special upgrade testing with both upgrade and create 
1:000d4bc:     // set. We just test this with one version in the interest of time
1:000d4bc:     // DERBY-4913
1:2133a29:     public static int[] VERSION_10_3_3_0=  new int[] {10,3,3,0};
1:e65365e:     /**
1:e65365e:      * <p>
1:e65365e:      * Get an array of versions supported by this platform.
1:e65365e:      * </p>
1:e65365e:      */
1:e65365e:     public static int[][] getSupportedVersions()
1:e65365e:     {
1:e65365e:         int[][] old = null;
1:e65365e:         
1:e65365e:         if ( UpgradeRun.oldVersionsPath != null )
1:e65365e:         {
1:e65365e:             old = getVersions(UpgradeRun.oldVersionsPath);
1:e65365e:         }
1:e65365e:         
1:e65365e:         if ( old == null ) { old = VERSIONS; }
1:e65365e: 
1:e65365e:         show( old );
1:e65365e: 
1:e65365e:         return getSupportedVersions( old );
1:e65365e:     }
1:e65365e: 
1:e65365e:     /**
1:e65365e:      * <p>
1:e65365e:      * Squeeze the supported versions out of any array of candidate versions.
1:e65365e:      * </p>
1:e65365e:      */
1:e65365e:     private static int[][] getSupportedVersions( int[][] old )
1:e65365e:     {
1:e18f54b:         ArrayList<int[]> list = new ArrayList<int[]>();
1:e65365e:         int count = old.length;
1:e65365e:         
1:e65365e:         for (int i = 0; i < count; i++) {
1:e65365e:             // JSR169 support was only added with 10.1, so don't
1:e65365e:             // run 10.0 to later upgrade if that's what our jvm is supporting.
1:e65365e:             if ((JDBC.vmSupportsJSR169() && 
1:e65365e:                 (old[i][0]==10) && (old[i][1]==0))) {
1:e65365e:                 traceit("Skipping 10.0 on JSR169");
1:e65365e:                 continue;
1:e65365e:             }
1:e65365e:             // Derby 10.3.1.4 does not boot on the phoneME advanced platform,
1:e65365e:             // (see DERBY-3176) so don't run upgrade tests in this combination.
1:3f6728f:             if ( BaseTestCase.isCVM()
1:e65365e:                   && old[i][0]==10 && old[i][1]==3 
1:e65365e:                   && old[i][2]==1 && old[i][3]==4 ) {
1:3f6728f:                 traceit("Skipping 10.3.1.4 on CVM");
1:e65365e:                 continue;
1:e65365e:             }
1:e65365e: 
1:9a81892:             // DERBY-6100: Data sources from Derby versions prior to 10.10
1:9a81892:             // cannot be loaded on platforms that don't support JNDI.
1:9a81892:             if (JDBC.vmSupportsJDBC3() && !JDBC.vmSupportsJNDI() &&
1:9a81892:                     UpgradeRun.lessThan(old[i], new int[] {10, 10, 0, 0})) {
1:9a81892:                 traceit("Skipping " + Arrays.toString(old[i]) +
1:9a81892:                         " because JNDI is not available");
1:9a81892:                 continue;
1:9a81892:             }
1:e65365e: 
1:e65365e:             // otherwise, it's a supported version
1:e65365e:             list.add( old[ i ] );
1:e65365e:         }
1:e65365e: 
1:e18f54b:         return list.toArray(new int[list.size()][]);
1:e65365e:     }
1:e65365e:     
1:e65365e:     private static int[][] getVersions(String oldVersionsPath)
1:e65365e:     {
1:e65365e:         BufferedReader br = null;
1:e65365e:         try{
1:e65365e:             FileReader fr = new FileReader(oldVersionsPath);
1:e65365e:             br = new BufferedReader(fr);
1:e65365e:         }
1:e65365e:         catch (java.io.FileNotFoundException fNFE)
1:e65365e:         {
1:e65365e:             alarm("File '" + oldVersionsPath 
1:e65365e:                   + "' was not found, using default old versions for upgrade tests.");
1:e65365e:             return null;
1:e65365e:         }
1:e65365e:         traceit("Run upgrade tests on versions defined in '" + oldVersionsPath + "'");
1:e65365e:         return getVersions(br, oldVersionsPath);
1:e65365e:     }
1:e65365e:     
1:e65365e:     private static int[][] getVersions(BufferedReader br, String oldVersionsPath) 
1:e65365e:     {
1:e65365e:         int[][] versionArray = new int[256][4];
1:e65365e:         
1:e65365e:         int versions = 0;
1:e65365e:         
1:e65365e:         String line = null;
1:e65365e:         int lineNum = 0;
1:e65365e:         try {
1:e65365e:             while ((line = br.readLine()) != null) {
1:e65365e:                 lineNum++;
1:e65365e:                 /* Ignore lines not matching the regexp: "^[\\d]+\\.[\\d]+\\.[\\d]+\\.[\\d]"
1:e65365e:                  * NB. java.util.regex.Matcher and java.util.regex.Pattern can not be
1:e65365e:                  * used on small devices(JSR219).
1:e65365e:                  */
1:e65365e:                 try {
1:e65365e:                     String[] parts = split4(line,'.');
1:e65365e:                     // String[] parts = line.split("\\."); // JSR219 does NOT have String.split()!
1:e65365e:                     if (parts.length >= 3) {
1:e65365e:                         
1:e65365e:                         int[] vstr = new int[4];
1:e65365e:                         for (int i = 0; i < 4; i++) // Using first 4 values
1:e65365e:                         {
1:e65365e:                             String str = parts[i];
1:e65365e:                             if (i == 3) { // Clean... remove trailing non-digits
1:e65365e:                                 str = clean(str,"0123456789");
1:e65365e:                             }
1:e65365e:                             vstr[i] = Integer.parseInt(str);
1:e65365e:                         }
1:e65365e:                         versionArray[versions++] = vstr;
1:e65365e:                     } else {
1:e65365e:                         alarm("Illegal version format on: " + line);
1:e65365e:                     }
1:e65365e:                 } catch (NumberFormatException nfe) {
1:e65365e:                     alarm("NumberFormatException on line " + lineNum + ": " + line + ": " + " " + nfe.getMessage());
1:e65365e:                 } catch (ArrayIndexOutOfBoundsException aie) {
1:e65365e:                     alarm("ArrayIndexOutOfBoundsException on line " + lineNum + ": " + line + ": " + " " + aie.getMessage());
1:e65365e:                 }
1:e65365e:             }
1:e65365e:         } catch (IOException ioe) {
1:e65365e:             alarm("Error reading from file: " + oldVersionsPath + ioe.getMessage());
1:e65365e:         }
1:e65365e:         
1:e65365e:         int[][] finalVERSIONS = new int[versions][4];
1:e65365e:         for (int v = 0; v < versions; v++) {
1:e65365e:             finalVERSIONS[v] = versionArray[v];
1:e65365e:         }
1:e65365e:         return  finalVERSIONS;
1:e65365e:         
1:e65365e:     }
1:e65365e:     
1:e65365e:     private static void show( int[][] old ) {
1:e65365e:         traceit("Upgrade test versions listed:");
1:e65365e:         for (int o = 0; o < old.length; o++) {
1:e65365e:             String ver = "";
1:e65365e:             for (int i = 0; i < old[o].length; i++) {
1:e65365e:                 if (i == 0) {
1:e65365e:                     ver = "" + old[o][i];
1:e65365e:                 } else {
1:e65365e:                     ver = ver + "." + old[o][i];
1:e65365e:                 }
1:e65365e:             }
1:e65365e:             traceit(ver);
1:e65365e:         }
1:e65365e:     }
1:e65365e:     private static String[] split4(String l, char c)
1:e65365e:     {
1:e65365e:         String[] res = new String[4];
1:e65365e:         try{
1:e65365e:             int p0 = l.indexOf(c);
1:e65365e:             if (p0<0) return res;
1:e65365e:             
1:e65365e:             res[0] = l.substring(0, p0);
1:e65365e:             int p1 = l.indexOf(c,p0+1);
1:e65365e:             if (p1<0) return res;
1:e65365e:             
1:e65365e:             res[1] = l.substring(p0+1, p1);
1:e65365e:             int p2 = l.indexOf(c,p1+1); 
1:e65365e:             if (p2<0) return res;
1:e65365e:             
1:e65365e:             res[2] = l.substring(p1+1, p2);
1:e65365e:             int p3 = l.indexOf(c,p2+1); 
1:e65365e:             if (p3<0) p3=l.length();
1:e65365e:             
1:e65365e:             res[3] = l.substring(p2+1, p3);
1:e65365e:             
1:e65365e:         } catch(StringIndexOutOfBoundsException sie){
1:e65365e:             println("split4 StringIndexOutOfBoundsException: "+sie.getMessage());
1:e65365e:             sie.printStackTrace();
1:e65365e:         }
1:e65365e:         return res;
1:e65365e:     }
1:e65365e:     private static String clean(String l, String allowed)
1:e65365e:     {
1:e65365e:         for (int i=0;i<l.length();i++)
1:e65365e:         {
1:e65365e:             if (!matches(l.charAt(i),allowed))
1:e65365e:             {
1:e65365e:                 return l.substring(0,i);
1:e65365e:             }
1:e65365e:         }
1:e65365e:         return l;
1:e65365e:     }
1:e65365e:     private static boolean matches(char c, String allowed)
1:e65365e:     {
1:e65365e:         for (int j=0;j<allowed.length();j++)
1:e65365e:         {
1:e65365e:             if (allowed.charAt(j) == c) return true;
1:e65365e:         }
1:e65365e:         return false;
1:e65365e:     }
1:e65365e: 
1:e65365e:     private static void println( String text ) { BaseTestCase.println( text ); }
1:e65365e:     private static void traceit( String text ) { BaseTestCase.traceit( text ); }
1:e65365e:     private static void alarm( String text ) { BaseTestCase.alarm( text ); }
1:e65365e:     
1:e65365e: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:f1acf2e
/////////////////////////////////////////////////////////////////////////
1:         {10, 13, 1, 1}, // 10.13.1.1 (October 25, 2015 / SVN 1765088)
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:50650bc
/////////////////////////////////////////////////////////////////////////
1:         {10, 12, 1, 1}, // 10.12.1.1 (October 11, 2015 / SVN 1704137)
commit:dfbbfaf
/////////////////////////////////////////////////////////////////////////
1:         {10, 11, 1, 1}, // 10.11.1.1 (August 26, 2014 / SVN 1616546)
commit:bf5ef96
/////////////////////////////////////////////////////////////////////////
1:         {10, 10, 1, 1}, // 10.10.1.1 (April 15, 2013/ SVN 1458268)
commit:3dbd09b
/////////////////////////////////////////////////////////////////////////
1:         {10, 9, 1, 0}, // 10.9.1.0 (June 25, 2012/ SVN 1344872)
commit:9e66783
/////////////////////////////////////////////////////////////////////////
1:         {10, 8, 1, 2}, // 10.8.1.2 (April 29, 2011/ SVN 1095077)
commit:0808058
/////////////////////////////////////////////////////////////////////////
1:         {10, 6, 2, 1}, // 10.6.2.1 (Oct 6, 2010/ SVN 999685)
1:         {10, 7, 1, 1}, // 10.7.1.1 (December 14, 2010/ SVN 1040133)
commit:d063dd4
/////////////////////////////////////////////////////////////////////////
1:         {10, 6, 1, 0}, // 10.6.1.0 (May 18, 2010/ SVN 938214)
commit:c792810
/////////////////////////////////////////////////////////////////////////
1:         {10, 5, 3, 0}, // 10.5.3.0 (August 21, 2009 / SVN 802917)
commit:e65365e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.OldVersions
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
1: import java.io.BufferedReader;
1: import java.io.FileReader;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: 
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * <p>
1:  * Old versions visible to the upgrade machinery.
1:  * </p>
1:  */
1: public class OldVersions
1: {
1:     private static int[][] VERSIONS =
1:     {
1:         {10, 0, 2, 1}, // 10.0.2.1 (incubator release)
1:         {10, 1, 1, 0}, // 10.1.1.0 (Aug 3, 2005 / SVN 208786)
1:         {10, 1, 2, 1}, // 10.1.2.1 (Nov 18, 2005 / SVN 330608)
1:         {10, 1, 3, 1}, // 10.1.3.1 (Jun 30, 2006 / SVN 417277)
1:         {10, 2, 1, 6}, // 10.2.1.6 (Oct 02, 2006 / SVN 452058)
1:         {10, 2, 2, 0}, // 10.2.2.0 (Dec 12, 2006 / SVN 485682)
1:         {10, 3, 1, 4}, // 10.3.1.4 (Aug 1, 2007 / SVN 561794)
1:         {10, 3, 3, 0}, // 10.3.3.0 (May 12, 2008 / SVN 652961)
1:         {10, 4, 1, 3}, // 10.4.1.3 (April 24, 2008 / SVN 648739)
1:         {10, 4, 2, 0}, // 10.4.2.0 (September 05, 2008 / SVN 693552)
1:     };
1: 
1:     /**
1:      * <p>
1:      * Get an array of versions supported by this platform.
1:      * </p>
1:      */
1:     public static int[][] getSupportedVersions()
1:     {
1:         int[][] old = null;
1:         
1:         if ( UpgradeRun.oldVersionsPath != null )
1:         {
1:             old = getVersions(UpgradeRun.oldVersionsPath);
1:         }
1:         
1:         if ( old == null ) { old = VERSIONS; }
1: 
1:         show( old );
1: 
1:         return getSupportedVersions( old );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Squeeze the supported versions out of any array of candidate versions.
1:      * </p>
1:      */
1:     private static int[][] getSupportedVersions( int[][] old )
1:     {
0:         ArrayList list = new ArrayList();
1:         int count = old.length;
1:         
1:         for (int i = 0; i < count; i++) {
1:             // JSR169 support was only added with 10.1, so don't
1:             // run 10.0 to later upgrade if that's what our jvm is supporting.
1:             if ((JDBC.vmSupportsJSR169() && 
1:                 (old[i][0]==10) && (old[i][1]==0))) {
1:                 traceit("Skipping 10.0 on JSR169");
1:                 continue;
1:             }
1:             // Derby 10.3.1.4 does not boot on the phoneME advanced platform,
1:             // (see DERBY-3176) so don't run upgrade tests in this combination.
0:             if ( System.getProperty("java.vm.name").equals("CVM")
0:                   && System.getProperty("java.vm.version").startsWith("phoneme")
1:                   && old[i][0]==10 && old[i][1]==3 
1:                   && old[i][2]==1 && old[i][3]==4 ) {
0:                 traceit("Skipping 10.3.1.4 on CVM/phoneme");
1:                 continue;
1:             }
1: 
1:             // otherwise, it's a supported version
1:             list.add( old[ i ] );
1:         }
1: 
0:         int[][] result = new int[ list.size() ][ 4 ];
0:         list.toArray( result );
1: 
0:         return result;
1:     }
1:     
1:     private static int[][] getVersions(String oldVersionsPath)
1:     {
1:         BufferedReader br = null;
1:         try{
1:             FileReader fr = new FileReader(oldVersionsPath);
1:             br = new BufferedReader(fr);
1:         }
1:         catch (java.io.FileNotFoundException fNFE)
1:         {
1:             alarm("File '" + oldVersionsPath 
1:                   + "' was not found, using default old versions for upgrade tests.");
1:             return null;
1:         }
1:         traceit("Run upgrade tests on versions defined in '" + oldVersionsPath + "'");
1:         return getVersions(br, oldVersionsPath);
1:     }
1:     
1:     private static int[][] getVersions(BufferedReader br, String oldVersionsPath) 
1:     {
1:         int[][] versionArray = new int[256][4];
1:         
1:         int versions = 0;
1:         
1:         String line = null;
1:         int lineNum = 0;
1:         try {
1:             while ((line = br.readLine()) != null) {
1:                 lineNum++;
1:                 /* Ignore lines not matching the regexp: "^[\\d]+\\.[\\d]+\\.[\\d]+\\.[\\d]"
1:                  * NB. java.util.regex.Matcher and java.util.regex.Pattern can not be
1:                  * used on small devices(JSR219).
1:                  */
1:                 try {
1:                     String[] parts = split4(line,'.');
1:                     // String[] parts = line.split("\\."); // JSR219 does NOT have String.split()!
1:                     if (parts.length >= 3) {
1:                         
1:                         int[] vstr = new int[4];
1:                         for (int i = 0; i < 4; i++) // Using first 4 values
1:                         {
1:                             String str = parts[i];
1:                             if (i == 3) { // Clean... remove trailing non-digits
1:                                 str = clean(str,"0123456789");
1:                             }
1:                             vstr[i] = Integer.parseInt(str);
1:                         }
1:                         versionArray[versions++] = vstr;
1:                     } else {
1:                         alarm("Illegal version format on: " + line);
1:                     }
1:                 } catch (NumberFormatException nfe) {
1:                     alarm("NumberFormatException on line " + lineNum + ": " + line + ": " + " " + nfe.getMessage());
1:                 } catch (ArrayIndexOutOfBoundsException aie) {
1:                     alarm("ArrayIndexOutOfBoundsException on line " + lineNum + ": " + line + ": " + " " + aie.getMessage());
1:                 }
1:             }
1:         } catch (IOException ioe) {
1:             alarm("Error reading from file: " + oldVersionsPath + ioe.getMessage());
1:         }
1:         
1:         int[][] finalVERSIONS = new int[versions][4];
1:         for (int v = 0; v < versions; v++) {
1:             finalVERSIONS[v] = versionArray[v];
1:         }
1:         return  finalVERSIONS;
1:         
1:     }
1:     
1:     private static void show( int[][] old ) {
1:         traceit("Upgrade test versions listed:");
1:         for (int o = 0; o < old.length; o++) {
1:             String ver = "";
1:             for (int i = 0; i < old[o].length; i++) {
1:                 if (i == 0) {
1:                     ver = "" + old[o][i];
1:                 } else {
1:                     ver = ver + "." + old[o][i];
1:                 }
1:             }
1:             traceit(ver);
1:         }
1:     }
1:     private static String[] split4(String l, char c)
1:     {
1:         String[] res = new String[4];
1:         try{
1:             int p0 = l.indexOf(c);
1:             if (p0<0) return res;
1:             
1:             res[0] = l.substring(0, p0);
1:             int p1 = l.indexOf(c,p0+1);
1:             if (p1<0) return res;
1:             
1:             res[1] = l.substring(p0+1, p1);
1:             int p2 = l.indexOf(c,p1+1); 
1:             if (p2<0) return res;
1:             
1:             res[2] = l.substring(p1+1, p2);
1:             int p3 = l.indexOf(c,p2+1); 
1:             if (p3<0) p3=l.length();
1:             
1:             res[3] = l.substring(p2+1, p3);
1:             
1:         } catch(StringIndexOutOfBoundsException sie){
1:             println("split4 StringIndexOutOfBoundsException: "+sie.getMessage());
1:             sie.printStackTrace();
1:         }
1:         return res;
1:     }
1:     private static String clean(String l, String allowed)
1:     {
1:         for (int i=0;i<l.length();i++)
1:         {
1:             if (!matches(l.charAt(i),allowed))
1:             {
1:                 return l.substring(0,i);
1:             }
1:         }
1:         return l;
1:     }
1:     private static boolean matches(char c, String allowed)
1:     {
1:         for (int j=0;j<allowed.length();j++)
1:         {
1:             if (allowed.charAt(j) == c) return true;
1:         }
1:         return false;
1:     }
1: 
1:     private static void println( String text ) { BaseTestCase.println( text ); }
1:     private static void traceit( String text ) { BaseTestCase.traceit( text ); }
1:     private static void alarm( String text ) { BaseTestCase.alarm( text ); }
1:     
1: }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:cfa139d
/////////////////////////////////////////////////////////////////////////
1:         {10, 10, 2, 0}, // 10.10.2.0 (April 15, 2014/ SVN 1582446)
commit:879ca5d
/////////////////////////////////////////////////////////////////////////
1:         {10, 8, 3, 0}, // 10.8.3.0 (November 16, 2012/ SVN 1405108)
commit:5e4a55f
/////////////////////////////////////////////////////////////////////////
1:         {10, 8, 2, 2}, // 10.8.2.2 (October 24, 2011/ SVN 1181258)
commit:6cc77ac
/////////////////////////////////////////////////////////////////////////
1:         {10, 5, 1, 1}, // 10.5.1.1 (April 28, 2009 / SVN 764942)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<int[]> list = new ArrayList<int[]>();
/////////////////////////////////////////////////////////////////////////
1:         return list.toArray(new int[list.size()][]);
commit:9a81892
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:             // DERBY-6100: Data sources from Derby versions prior to 10.10
1:             // cannot be loaded on platforms that don't support JNDI.
1:             if (JDBC.vmSupportsJDBC3() && !JDBC.vmSupportsJNDI() &&
1:                     UpgradeRun.lessThan(old[i], new int[] {10, 10, 0, 0})) {
1:                 traceit("Skipping " + Arrays.toString(old[i]) +
1:                         " because JNDI is not available");
1:                 continue;
1:             }
0: 
commit:3f6728f
/////////////////////////////////////////////////////////////////////////
1:             if ( BaseTestCase.isCVM()
1:                 traceit("Skipping 10.3.1.4 on CVM");
commit:dc5f56a
/////////////////////////////////////////////////////////////////////////
0:             if ( BaseTestCase.isPhoneME()
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:2133a29
/////////////////////////////////////////////////////////////////////////
1:     public static int[] VERSION_10_3_3_0=  new int[] {10,3,3,0};
commit:000d4bc
/////////////////////////////////////////////////////////////////////////
1:     //Constant for special upgrade testing with both upgrade and create 
1:     // set. We just test this with one version in the interest of time
1:     // DERBY-4913
0:     public static int VERSION_10_3_3_0_OFFSET = 7;
author:Lily Wei
-------------------------------------------------------------------------------
commit:6021894
/////////////////////////////////////////////////////////////////////////
0:         {10, 6, 2, 1}, // 10.6.2.1 (Oct 6, 2010/ SVN 999685
============================================================================