1:eac0369: /*
2:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.RowChanger
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:7d0f620: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ConglomerateController;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:eac0369:   Perform row at a time DML operations of tables and maintain indexes.
1:eac0369:   */
1:eac0369: public interface RowChanger
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	  Open this RowChanger.
1:eac0369: 
1:eac0369: 	  <P>Note to avoid the cost of fixing indexes that do not
1:eac0369: 	  change during update operations use openForUpdate(). 
1:eac0369: 	  @param lockMode	The lock mode to use
1:eac0369: 							(row or table, see TransactionController)
1:eac0369: 
1:eac0369: 	  @exception StandardException thrown on failure to convert
1:eac0369: 	  */
1:eac0369: 	public void open(int lockMode)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the row holder for this changer to use.
1:eac0369: 	 * If the row holder is set, it wont bother 
1:eac0369: 	 * saving copies of rows needed for deferred
1:eac0369: 	 * processing.  Also, it will never close the
1:eac0369: 	 * passed in rowHolder.
1:eac0369: 	 *
1:eac0369: 	 * @param rowHolder	the row holder
1:eac0369: 	 */
1:eac0369: 	public void setRowHolder(TemporaryRowHolder rowHolder);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Sets the index names of the tables indices. Used for error reporting.
1:eac0369: 	 * 
1:eac0369: 	 * @param indexNames		Names of all the indices on this table.
1:eac0369: 	 */
1:eac0369: 	public void setIndexNames(String[] indexNames);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Open this RowChanger to avoid fixing indexes that do not change
1:eac0369: 	  during update operations. 
1:eac0369: 
1:dbed020: 	  @param fixOnUpdate fixOnUpdat[ix] == true ==&gt; fix index 'ix' on
1:eac0369: 	  an update operation.
1:eac0369: 	  @param lockMode	The lock mode to use
1:eac0369: 							(row or table, see TransactionController)
1:eac0369: 	  @param wait		If true, then the caller wants to wait for locks. False will be
1:eac0369: 							when we using a nested user xaction - we want to timeout right away
1:eac0369: 							if the parent holds the lock.  (bug 4821)
1:eac0369: 
1:eac0369: 	  @exception StandardException thrown on failure to convert
1:eac0369: 	  */
1:eac0369: 	public void openForUpdate( boolean[] fixOnUpdate, int lockMode, boolean wait )
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Insert a row into the table and perform associated index maintenance.
1:eac0369: 
1:eac0369: 	  @param baseRow the row.
1:af1c18c:      * @param getRL return a row location of the inserted row
1:af1c18c:      * @return row location if requested, else {@code null}.
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:af1c18c:     public RowLocation insertRow(ExecRow baseRow, boolean getRL)
1:eac0369: 		 throws StandardException;
1:eac0369: 		
1:eac0369: 	/**
1:eac0369: 	  Delete a row from the table and perform associated index maintenance.
1:eac0369: 
1:eac0369: 	  @param baseRow the row.
2:eac0369: 	  @param baseRowLocation the row's base conglomerate
2:eac0369: 	     location
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void deleteRow(ExecRow baseRow, RowLocation baseRowLocation)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Update a row in the table and perform associated index maintenance.
1:eac0369: 
1:eac0369: 	  @param oldBaseRow the old image of the row.
1:eac0369: 	  @param newBaseRow the new image of the row.
1:eac0369: 	  @param baseRowLocation the row's base conglomerate
1:eac0369: 	     location
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void updateRow(ExecRow oldBaseRow,
1:eac0369: 						  ExecRow newBaseRow,
1:eac0369: 						  RowLocation baseRowLocation)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Finish processing the changes.  This means applying the deferred
1:eac0369: 	  inserts for updates to unique indexes.
1:eac0369: 
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void finish()
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Close this RowChanger.
1:eac0369: 
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public void close()
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * Return the ConglomerateController from this RowChanger.
1:eac0369: 	 * This is useful when copying properties from heap to 
1:eac0369: 	 * temp conglomerate on insert/update/delete.
1:eac0369: 	 *
1:eac0369: 	 * @return The ConglomerateController from this RowChanger.
1:eac0369: 	 */
1:eac0369: 	public ConglomerateController getHeapConglomerateController();
1:3d7a3d4: 
1:3d7a3d4: 	/**
1:3d7a3d4: 	  Open this RowChanger.
1:eac0369: 
1:3d7a3d4: 	  <P>Note to avoid the cost of fixing indexes that do not
1:3d7a3d4: 	  change during update operations use openForUpdate(). 
1:3d7a3d4: 	  @param lockMode	The lock mode to use
1:3d7a3d4: 							(row or table, see TransactionController)
1:3d7a3d4: 	  @param wait		If true, then the caller wants to wait for locks. False will be
1:3d7a3d4: 							when we using a nested user xaction - we want to timeout right away
1:3d7a3d4: 							if the parent holds the lock.  
1:3d7a3d4: 
1:3d7a3d4: 	  @exception StandardException thrown on failure to convert
1:3d7a3d4: 	  */
1:3d7a3d4: 	public void open(int lockMode, boolean wait)
1:3d7a3d4: 		 throws StandardException;
1:7d0f620: 
1:7d0f620: 	/**
1:7d0f620: 	 * Return what column no in the input ExecRow (cf nextBaseRow argument to
1:7d0f620: 	 * #updateRow) would correspond to selected column, if any.
1:7d0f620: 	 *
1:7d0f620: 	 * @param selectedCol the column number in the base table of a selected
1:7d0f620: 	 *                    column or -1 (if selected column is not a base table
1:7d0f620: 	 *                    column, e.g. i+4).
1:00eb153: 	 * @return column no, or -1 if not found or not a base column
1:7d0f620: 	 */
1:7d0f620: 	public int findSelectedCol(int selectedCol);
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	  @param fixOnUpdate fixOnUpdat[ix] == true ==&gt; fix index 'ix' on
commit:3d7a3d4
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	  Open this RowChanger.
1: 
1: 	  <P>Note to avoid the cost of fixing indexes that do not
1: 	  change during update operations use openForUpdate(). 
1: 	  @param lockMode	The lock mode to use
1: 							(row or table, see TransactionController)
1: 	  @param wait		If true, then the caller wants to wait for locks. False will be
1: 							when we using a nested user xaction - we want to timeout right away
1: 							if the parent holds the lock.  
1: 
1: 	  @exception StandardException thrown on failure to convert
1: 	  */
1: 	public void open(int lockMode, boolean wait)
1: 		 throws StandardException;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:      * @param getRL return a row location of the inserted row
1:      * @return row location if requested, else {@code null}.
1:     public RowLocation insertRow(ExecRow baseRow, boolean getRL)
commit:7d0f620
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Return what column no in the input ExecRow (cf nextBaseRow argument to
1: 	 * #updateRow) would correspond to selected column, if any.
1: 	 *
1: 	 * @param selectedCol the column number in the base table of a selected
1: 	 *                    column or -1 (if selected column is not a base table
1: 	 *                    column, e.g. i+4).
0: 	 * @returns column no, or -1 if not found or not a base column
1: 	 */
1: 	public int findSelectedCol(int selectedCol);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:00eb153
/////////////////////////////////////////////////////////////////////////
1: 	 * @return column no, or -1 if not found or not a base column
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.RowChanger
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: 
1: import org.apache.derby.iapi.store.access.ConglomerateController;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
1:   Perform row at a time DML operations of tables and maintain indexes.
1:   */
1: public interface RowChanger
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	  Open this RowChanger.
1: 
1: 	  <P>Note to avoid the cost of fixing indexes that do not
1: 	  change during update operations use openForUpdate(). 
1: 	  @param lockMode	The lock mode to use
1: 							(row or table, see TransactionController)
1: 
1: 	  @exception StandardException thrown on failure to convert
1: 	  */
1: 	public void open(int lockMode)
1: 		 throws StandardException;
1: 
1: 	/**
1: 	 * Set the row holder for this changer to use.
1: 	 * If the row holder is set, it wont bother 
1: 	 * saving copies of rows needed for deferred
1: 	 * processing.  Also, it will never close the
1: 	 * passed in rowHolder.
1: 	 *
1: 	 * @param rowHolder	the row holder
1: 	 */
1: 	public void setRowHolder(TemporaryRowHolder rowHolder);
1: 
1: 	/**
1: 	 * Sets the index names of the tables indices. Used for error reporting.
1: 	 * 
1: 	 * @param indexNames		Names of all the indices on this table.
1: 	 */
1: 	public void setIndexNames(String[] indexNames);
1: 
1: 	/**
1: 	  Open this RowChanger to avoid fixing indexes that do not change
1: 	  during update operations. 
1: 
0: 	  @param fixOnUpdate fixOnUpdat[ix] == true ==> fix index 'ix' on
1: 	  an update operation.
1: 	  @param lockMode	The lock mode to use
1: 							(row or table, see TransactionController)
1: 	  @param wait		If true, then the caller wants to wait for locks. False will be
1: 							when we using a nested user xaction - we want to timeout right away
1: 							if the parent holds the lock.  (bug 4821)
1: 
1: 	  @exception StandardException thrown on failure to convert
1: 	  */
1: 	public void openForUpdate( boolean[] fixOnUpdate, int lockMode, boolean wait )
1: 		 throws StandardException;
1: 
1: 	/**
1: 	  Insert a row into the table and perform associated index maintenance.
1: 
1: 	  @param baseRow the row.
1: 	  @param baseRowLocation the row's base conglomerate
1: 	     location
1: 	  @exception StandardException		Thrown on error
1: 	  */
0: 	public void insertRow(ExecRow baseRow)
1: 		 throws StandardException;
1: 		
1: 	/**
1: 	  Delete a row from the table and perform associated index maintenance.
1: 
1: 	  @param baseRow the row.
1: 	  @param baseRowLocation the row's base conglomerate
1: 	     location
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void deleteRow(ExecRow baseRow, RowLocation baseRowLocation)
1: 		 throws StandardException;
1: 
1: 	/**
1: 	  Update a row in the table and perform associated index maintenance.
1: 
1: 	  @param oldBaseRow the old image of the row.
1: 	  @param newBaseRow the new image of the row.
1: 	  @param baseRowLocation the row's base conglomerate
1: 	     location
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void updateRow(ExecRow oldBaseRow,
1: 						  ExecRow newBaseRow,
1: 						  RowLocation baseRowLocation)
1: 		 throws StandardException;
1: 
1: 	/**
1: 	  Finish processing the changes.  This means applying the deferred
1: 	  inserts for updates to unique indexes.
1: 
1: 	  @exception StandardException		Thrown on error
1: 	 */
1: 	public void finish()
1: 		throws StandardException;
1: 
1: 	/**
1: 	  Close this RowChanger.
1: 
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public void close()
1: 		throws StandardException;
1: 
1: 	/** 
1: 	 * Return the ConglomerateController from this RowChanger.
1: 	 * This is useful when copying properties from heap to 
1: 	 * temp conglomerate on insert/update/delete.
1: 	 *
1: 	 * @return The ConglomerateController from this RowChanger.
1: 	 */
1: 	public ConglomerateController getHeapConglomerateController();
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: /**
0:   Perform row at a time DML operations of tables and maintain indexes.
0:   */
0: public interface RowChanger
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	  Open this RowChanger.
0: 
0: 	  <P>Note to avoid the cost of fixing indexes that do not
0: 	  change during update operations use openForUpdate(). 
0: 	  @param lockMode	The lock mode to use
0: 							(row or table, see TransactionController)
0: 
0: 	  @exception StandardException thrown on failure to convert
0: 	  */
0: 	public void open(int lockMode)
0: 		 throws StandardException;
0: 
0: 	/**
0: 	 * Set the row holder for this changer to use.
0: 	 * If the row holder is set, it wont bother 
0: 	 * saving copies of rows needed for deferred
0: 	 * processing.  Also, it will never close the
0: 	 * passed in rowHolder.
0: 	 *
0: 	 * @param rowHolder	the row holder
0: 	 */
0: 	public void setRowHolder(TemporaryRowHolder rowHolder);
0: 
0: 	/**
0: 	 * Sets the index names of the tables indices. Used for error reporting.
0: 	 * 
0: 	 * @param indexNames		Names of all the indices on this table.
0: 	 */
0: 	public void setIndexNames(String[] indexNames);
0: 
0: 	/**
0: 	  Open this RowChanger to avoid fixing indexes that do not change
0: 	  during update operations. 
0: 
0: 	  @param fixOnUpdate fixOnUpdat[ix] == true ==> fix index 'ix' on
0: 	  an update operation.
0: 	  @param lockMode	The lock mode to use
0: 							(row or table, see TransactionController)
0: 	  @param wait		If true, then the caller wants to wait for locks. False will be
0: 							when we using a nested user xaction - we want to timeout right away
0: 							if the parent holds the lock.  (bug 4821)
0: 
0: 	  @exception StandardException thrown on failure to convert
0: 	  */
0: 	public void openForUpdate( boolean[] fixOnUpdate, int lockMode, boolean wait )
0: 		 throws StandardException;
0: 
0: 	/**
0: 	  Insert a row into the table and perform associated index maintenance.
0: 
0: 	  @param baseRow the row.
0: 	  @param baseRowLocation the row's base conglomerate
0: 	     location
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void insertRow(ExecRow baseRow)
0: 		 throws StandardException;
0: 		
0: 	/**
0: 	  Delete a row from the table and perform associated index maintenance.
0: 
0: 	  @param baseRow the row.
0: 	  @param baseRowLocation the row's base conglomerate
0: 	     location
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void deleteRow(ExecRow baseRow, RowLocation baseRowLocation)
0: 		 throws StandardException;
0: 
0: 	/**
0: 	  Update a row in the table and perform associated index maintenance.
0: 
0: 	  @param oldBaseRow the old image of the row.
0: 	  @param newBaseRow the new image of the row.
0: 	  @param baseRowLocation the row's base conglomerate
0: 	     location
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void updateRow(ExecRow oldBaseRow,
0: 						  ExecRow newBaseRow,
0: 						  RowLocation baseRowLocation)
0: 		 throws StandardException;
0: 
0: 	/**
0: 	  Finish processing the changes.  This means applying the deferred
0: 	  inserts for updates to unique indexes.
0: 
0: 	  @exception StandardException		Thrown on error
0: 	 */
0: 	public void finish()
0: 		throws StandardException;
0: 
0: 	/**
0: 	  Close this RowChanger.
0: 
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public void close()
0: 		throws StandardException;
0: 
0: 	/** 
0: 	 * Return the ConglomerateController from this RowChanger.
0: 	 * This is useful when copying properties from heap to 
0: 	 * temp conglomerate on insert/update/delete.
0: 	 *
0: 	 * @return The ConglomerateController from this RowChanger.
0: 	 */
0: 	public ConglomerateController getHeapConglomerateController();
0: 
0: }
============================================================================