1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.catalog.UUID
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog;
1:eac0369: 
4:eac0369: /**
1:eac0369: 
1:2c21843:  An interface for accessing Derby UUIDs, unique identifiers.
1:eac0369: 		
1:eac0369: 	<p>The values in the
1:eac0369: 	system catalog held in ID columns with a type of CHAR(36) are the
1:eac0369: 	string representations of these UUIDs.
1:eac0369: 
1:eac0369: 	<p>A UUID implements equals() and hashCode based on value equality.
1:eac0369: 
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface UUID extends java.io.Externalizable
1:eac0369: {
1:f6d02c9:     /** NULL UUID */
1:f6d02c9:     static  final   String  NULL = "NULL";
1:f6d02c9: 
1:eac0369: 	/**
1:eac0369: 	  UUID_BYTE_LENGTH
1:eac0369: 
1:eac0369: 	  The number of bytes in the array toByteArray returns.
1:eac0369: 	  */
1:eac0369: 	static int UUID_BYTE_LENGTH = 16;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 		Produce a string representation of this UUID which
1:eac0369: 		is suitable for use as a unique ANSI identifier.
1:eac0369: 	 */
1:eac0369: 	String toANSIidentifier();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Clone this UUID.
1:eac0369: 
1:eac0369: 	  @return	a copy of this UUID
1:eac0369: 	  */
1:eac0369: 	UUID cloneMe();
1:eac0369: }
1:eac0369: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
1:     /** NULL UUID */
1:     static  final   String  NULL = "NULL";
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b9bd28c
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2c21843
/////////////////////////////////////////////////////////////////////////
1:  An interface for accessing Derby UUIDs, unique identifiers.
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.UUID
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog;
1: 
1: /**
1: 
0:  An interface for accessing Cloudscape UUIDs, unique identifiers.
1: 		
1: 	<p>The values in the
1: 	system catalog held in ID columns with a type of CHAR(36) are the
1: 	string representations of these UUIDs.
1: 
1: 	<p>A UUID implements equals() and hashCode based on value equality.
1: 
1:  */
1: 
1: public interface UUID extends java.io.Externalizable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	  UUID_BYTE_LENGTH
1: 
1: 	  The number of bytes in the array toByteArray returns.
1: 	  */
1: 	static int UUID_BYTE_LENGTH = 16;
1: 	
1: 	/**
1: 		Produce a string representation of this UUID which
1: 		is suitable for use as a unique ANSI identifier.
1: 	 */
1: 	String toANSIidentifier();
1: 
1: 	/**
0: 	    Produce a byte array representation of this UUID
0: 		which can be passed to UUIDFactory.recreateUUID later
0: 		on to reconstruct it.
1: 	*/
0: 	byte[] toByteArray();
1: 
1: 	/**
1: 	  Clone this UUID.
1: 
1: 	  @return	a copy of this UUID
1: 	  */
1: 	UUID cloneMe();
1: 
1: 	/**
0: 	  Create a hex string representation of this UUID.
1: 	  */
0: 	String toHexString();
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog;
0: 
0: /**
0: 
0:  An interface for accessing Cloudscape UUIDs, unique identifiers.
0: 		
0: 	<p>The values in the
0: 	system catalog held in ID columns with a type of CHAR(36) are the
0: 	string representations of these UUIDs.
0: 
0: 	<p>A UUID implements equals() and hashCode based on value equality.
0: 
0:  */
0: 
0: public interface UUID extends java.io.Externalizable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	  UUID_BYTE_LENGTH
0: 
0: 	  The number of bytes in the array toByteArray returns.
0: 	  */
0: 	static int UUID_BYTE_LENGTH = 16;
0: 	
0: 	/**
0: 		Produce a string representation of this UUID which
0: 		is suitable for use as a unique ANSI identifier.
0: 	 */
0: 	String toANSIidentifier();
0: 
0: 	/**
0: 	    Produce a byte array representation of this UUID
0: 		which can be passed to UUIDFactory.recreateUUID later
0: 		on to reconstruct it.
0: 	*/
0: 	byte[] toByteArray();
0: 
0: 	/**
0: 	  Clone this UUID.
0: 
0: 	  @return	a copy of this UUID
0: 	  */
0: 	UUID cloneMe();
0: 
0: 	/**
0: 	  Create a hex string representation of this UUID.
0: 	  */
0: 	String toHexString();
0: }
0: 
============================================================================