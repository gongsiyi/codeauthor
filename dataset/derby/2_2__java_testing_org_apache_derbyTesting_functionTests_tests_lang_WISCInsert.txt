1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.WISCInsert
1:67614ad: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
40:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.tests.lang;
1:67614ad: 
1:67614ad: import java.sql.*;
1:67614ad: 
2:67614ad: /**
1:67614ad:  * This class is a VTI for loading data into the Wisconsin benchmark schema.
1:67614ad:  * See The Benchmark Handbook, Second Edition (edited by Jim Gray).
1:67614ad:  */
1:67614ad: public class WISCInsert {
1:67614ad: 
1:67614ad: 	private static final char[] chars = {
1:67614ad: 		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
1:67614ad: 		'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
1:67614ad: 	};
1:67614ad: 
1:67614ad: 	int numrows;
1:67614ad: 	int prime;
1:67614ad: 	int generator; 
1:67614ad: 	int rowsReturned = 0;
1:67614ad: 
1:67614ad: 	int unique1;
1:67614ad: 	int unique2;
1:67614ad: 	int two;
1:67614ad: 	int four;
1:67614ad: 	int ten;
1:67614ad: 	int twenty;
1:67614ad: 	int onePercent;
1:67614ad: 	int tenPercent;
1:67614ad: 	int twentyPercent;
1:67614ad: 	int fiftyPercent;
1:67614ad: 	int unique3;
1:67614ad: 	int evenOnePercent;
1:67614ad: 	int oddOnePercent;
1:67614ad: 	String stringu1;
1:67614ad: 	String stringu2;
1:67614ad: 	String string4;
1:67614ad: 
1:67614ad: 	int seed;
1:67614ad: 	static final String[] cyclicStrings = {
1:67614ad: 		"AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
1:67614ad: 		"HHHHxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
1:67614ad: 		"OOOOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
1:67614ad: 		"VVVVxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
1:67614ad: 		};
1:67614ad: 
1:67614ad: 	boolean closed = false;
1:67614ad: 
1:67614ad: 	public WISCInsert()
1:67614ad: 	{
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public int doWISCInsert(int numrows, String tableName, Connection conn) throws SQLException {
1:67614ad: 		this.numrows = numrows;
1:67614ad: 
1:67614ad: 		/* Choose prime and generator values for the desired table size */
1:67614ad: 		if (numrows <= 1000) {
1:67614ad: 			generator = 279;
1:67614ad: 			prime = 1009;
1:67614ad: 		} else if (numrows <= 10000) {
1:67614ad: 			generator = 2969;
1:67614ad: 			prime = 10007;
1:67614ad: 		} else if (numrows <= 100000) {
1:67614ad: 			generator = 21395;
1:67614ad: 			prime = 100003;
1:67614ad: 		} else if (numrows <= 1000000) {
1:67614ad: 			generator = 2107;
1:67614ad: 			prime = 1000003;
1:67614ad: 		} else if (numrows <= 10000000) {
1:67614ad: 			generator = 211;
1:67614ad: 			prime = 10000019;
1:67614ad: 		} else if (numrows <= 100000000) {
1:67614ad: 			generator = 21;
1:67614ad: 			prime = 100000007;
1:67614ad: 		} else {
1:67614ad: 			throw new SQLException("Too many rows - maximum is 100000000, " +
1:67614ad: 									numrows + " requested.");
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		seed = generator;
1:67614ad: 
1:67614ad: 		String insertString = "insert into " + tableName + " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
1:67614ad: 		PreparedStatement ps = conn.prepareStatement(insertString);
1:67614ad: 
1:67614ad: 		// loop the insert statement
1:67614ad: 		for (int i = 0; i < numrows; i++)
1:67614ad: 		{
1:67614ad: 			next();
1:67614ad: 			ps.setInt(1, unique1);
1:67614ad: 			ps.setInt(2, unique2);
1:67614ad: 			ps.setInt(3, two);
1:67614ad: 			ps.setInt(4, four);
1:67614ad: 			ps.setInt(5, ten);
1:67614ad: 			ps.setInt(6, twenty);
1:67614ad: 			ps.setInt(7, onePercent);
1:67614ad: 			ps.setInt(8, tenPercent);
1:67614ad: 			ps.setInt(9, twentyPercent);
1:67614ad: 			ps.setInt(10, fiftyPercent);
1:67614ad: 			ps.setInt(11, unique3);
1:67614ad: 			ps.setInt(12, evenOnePercent);
1:67614ad: 			ps.setInt(13, oddOnePercent);
1:67614ad: 			ps.setString(14, stringu1);
1:67614ad: 			ps.setString(15, stringu2);
1:67614ad: 			ps.setString(16, string4);
1:67614ad: 			ps.executeUpdate();
1:67614ad: 			// commit every once in a while?
1:67614ad: 		}
1:67614ad: 		return numrows;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 
1:67614ad: 	public boolean next() throws SQLException {
1:67614ad: 		if (rowsReturned >= numrows)
1:67614ad: 			return false;
1:67614ad: 
1:67614ad: 		seed = rand(seed, numrows);
1:67614ad: 
1:67614ad: 		unique1 = seed - 1;
1:67614ad: 		unique2 = rowsReturned;
1:67614ad: 		two = unique1 % 2;
1:67614ad: 		four = unique1 % 4;
1:67614ad: 		ten = unique1 % 10;
1:67614ad: 		twenty = unique1 % 20;
1:67614ad: 		onePercent = unique1 % 100;
1:67614ad: 		tenPercent = unique1 % 10;
1:67614ad: 		twentyPercent = unique1 % 5;
1:67614ad: 		fiftyPercent = unique1 % 2;
1:67614ad: 		unique3 = unique1;
1:67614ad: 		evenOnePercent = onePercent * 2;
1:67614ad: 		oddOnePercent = evenOnePercent + 1;
1:67614ad: 		stringu1 = uniqueString(unique1);
1:67614ad: 		stringu2 = uniqueString(unique2);
1:67614ad: 		string4 = cyclicStrings[rowsReturned % cyclicStrings.length];
1:67614ad: 
1:67614ad: 		rowsReturned++;
1:67614ad: 
1:67614ad: 		return true;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 
1:67614ad: 	private int rand(int seed, int limit) {
1:67614ad: 		do {
1:67614ad: 			seed = (generator * seed) % prime;
1:67614ad: 		} while (seed > limit);
1:67614ad: 
1:67614ad: 		return seed;
1:67614ad: 	}
1:67614ad: 
1:67614ad:  
1:67614ad: 	private String uniqueString(int unique) {
1:67614ad: 		int i;
1:67614ad: 		int rem;
1:67614ad: 		char[] retval = new char[52];
1:67614ad: 
1:67614ad: 		// First set result string to
1:67614ad: 		// "AAAAAAA                                             "
1:67614ad: 		for (i = 0; i < 7; i++) {
1:67614ad: 			retval[i] = 'A';
1:67614ad: 		}
1:67614ad: 		for (i = 7; i < retval.length; i++) {
1:67614ad: 			retval[i] = 'x';
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		// Convert unique value from right to left into an alphabetic string
1:67614ad: 		i = 6;
1:67614ad: 		while (unique > 0) {
1:67614ad: 			rem = unique % 26;
1:67614ad: 			retval[i] = chars[rem];
1:67614ad: 			unique /= 26;
1:67614ad: 			i--;
1:67614ad: 		}
1:67614ad: 
1:67614ad: 		return new String(retval);
1:67614ad: 	}
1:67614ad: 
1:67614ad: 
1:67614ad: 	public String getShortTestDescription()
1:67614ad: 	{
1:67614ad: 		StringBuffer st = new StringBuffer( "insert values into wisconsin benchmark schema.");
1:67614ad: 		st.append("See The Benchmark Handbook, Second Edition (edited by Jim Gray).");
1:67614ad: 		return st.toString();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 
1:67614ad: 	public String getLongTestDescription()
1:67614ad: 	{
1:67614ad: 		StringBuffer st = new StringBuffer(getShortTestDescription() +"\n Called from performance.wisc.WiscLoad. This is not actually a test itself. Based on a scale value by which to multiply the number of rows, the values are generated. This class is based on the vti org.apache.derbyTesting.functionTests.tests.lang.Wisc, however, this will work with any database, not just Cloudscape.");
1:67614ad: 		return st.toString();
1:67614ad: 
1:67614ad: 	}
1:67614ad: 
1:67614ad: 
1:67614ad: 	public boolean isCloudscapeSpecificTest()
1:67614ad: 	{
1:67614ad: 	    return false;
1:67614ad: 	}
1:67614ad: 
1:67614ad: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.tests.lang
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.*;
1: 
1: /**
1:  * This class is a VTI for loading data into the Wisconsin benchmark schema.
1:  * See The Benchmark Handbook, Second Edition (edited by Jim Gray).
1:  */
1: public class WISCInsert {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1: 	private static final char[] chars = {
1: 		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
1: 		'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
1: 	};
1: 
1: 	int numrows;
1: 	int prime;
1: 	int generator; 
1: 	int rowsReturned = 0;
1: 
1: 	int unique1;
1: 	int unique2;
1: 	int two;
1: 	int four;
1: 	int ten;
1: 	int twenty;
1: 	int onePercent;
1: 	int tenPercent;
1: 	int twentyPercent;
1: 	int fiftyPercent;
1: 	int unique3;
1: 	int evenOnePercent;
1: 	int oddOnePercent;
1: 	String stringu1;
1: 	String stringu2;
1: 	String string4;
1: 
1: 	int seed;
1: 	static final String[] cyclicStrings = {
1: 		"AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
1: 		"HHHHxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
1: 		"OOOOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
1: 		"VVVVxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
1: 		};
1: 
1: 	boolean closed = false;
1: 
1: 	public WISCInsert()
1: 	{
1: 	}
1: 
1: 	public int doWISCInsert(int numrows, String tableName, Connection conn) throws SQLException {
1: 		this.numrows = numrows;
1: 
1: 		/* Choose prime and generator values for the desired table size */
1: 		if (numrows <= 1000) {
1: 			generator = 279;
1: 			prime = 1009;
1: 		} else if (numrows <= 10000) {
1: 			generator = 2969;
1: 			prime = 10007;
1: 		} else if (numrows <= 100000) {
1: 			generator = 21395;
1: 			prime = 100003;
1: 		} else if (numrows <= 1000000) {
1: 			generator = 2107;
1: 			prime = 1000003;
1: 		} else if (numrows <= 10000000) {
1: 			generator = 211;
1: 			prime = 10000019;
1: 		} else if (numrows <= 100000000) {
1: 			generator = 21;
1: 			prime = 100000007;
1: 		} else {
1: 			throw new SQLException("Too many rows - maximum is 100000000, " +
1: 									numrows + " requested.");
1: 		}
1: 
1: 		seed = generator;
1: 
1: 		String insertString = "insert into " + tableName + " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
1: 		PreparedStatement ps = conn.prepareStatement(insertString);
1: 
1: 		// loop the insert statement
1: 		for (int i = 0; i < numrows; i++)
1: 		{
1: 			next();
1: 			ps.setInt(1, unique1);
1: 			ps.setInt(2, unique2);
1: 			ps.setInt(3, two);
1: 			ps.setInt(4, four);
1: 			ps.setInt(5, ten);
1: 			ps.setInt(6, twenty);
1: 			ps.setInt(7, onePercent);
1: 			ps.setInt(8, tenPercent);
1: 			ps.setInt(9, twentyPercent);
1: 			ps.setInt(10, fiftyPercent);
1: 			ps.setInt(11, unique3);
1: 			ps.setInt(12, evenOnePercent);
1: 			ps.setInt(13, oddOnePercent);
1: 			ps.setString(14, stringu1);
1: 			ps.setString(15, stringu2);
1: 			ps.setString(16, string4);
1: 			ps.executeUpdate();
1: 			// commit every once in a while?
1: 		}
1: 		return numrows;
1: 	}
1: 
1: 
1: 	public boolean next() throws SQLException {
1: 		if (rowsReturned >= numrows)
1: 			return false;
1: 
1: 		seed = rand(seed, numrows);
1: 
1: 		unique1 = seed - 1;
1: 		unique2 = rowsReturned;
1: 		two = unique1 % 2;
1: 		four = unique1 % 4;
1: 		ten = unique1 % 10;
1: 		twenty = unique1 % 20;
1: 		onePercent = unique1 % 100;
1: 		tenPercent = unique1 % 10;
1: 		twentyPercent = unique1 % 5;
1: 		fiftyPercent = unique1 % 2;
1: 		unique3 = unique1;
1: 		evenOnePercent = onePercent * 2;
1: 		oddOnePercent = evenOnePercent + 1;
1: 		stringu1 = uniqueString(unique1);
1: 		stringu2 = uniqueString(unique2);
1: 		string4 = cyclicStrings[rowsReturned % cyclicStrings.length];
1: 
1: 		rowsReturned++;
1: 
1: 		return true;
1: 	}
1: 
1: 
1: 	private int rand(int seed, int limit) {
1: 		do {
1: 			seed = (generator * seed) % prime;
1: 		} while (seed > limit);
1: 
1: 		return seed;
1: 	}
1: 
1:  
1: 	private String uniqueString(int unique) {
1: 		int i;
1: 		int rem;
1: 		char[] retval = new char[52];
1: 
1: 		// First set result string to
1: 		// "AAAAAAA                                             "
1: 		for (i = 0; i < 7; i++) {
1: 			retval[i] = 'A';
1: 		}
1: 		for (i = 7; i < retval.length; i++) {
1: 			retval[i] = 'x';
1: 		}
1: 
1: 		// Convert unique value from right to left into an alphabetic string
1: 		i = 6;
1: 		while (unique > 0) {
1: 			rem = unique % 26;
1: 			retval[i] = chars[rem];
1: 			unique /= 26;
1: 			i--;
1: 		}
1: 
1: 		return new String(retval);
1: 	}
1: 
1: 
1: 	public String getShortTestDescription()
1: 	{
1: 		StringBuffer st = new StringBuffer( "insert values into wisconsin benchmark schema.");
1: 		st.append("See The Benchmark Handbook, Second Edition (edited by Jim Gray).");
1: 		return st.toString();
1: 	}
1: 
1: 
1: 	public String getLongTestDescription()
1: 	{
1: 		StringBuffer st = new StringBuffer(getShortTestDescription() +"\n Called from performance.wisc.WiscLoad. This is not actually a test itself. Based on a scale value by which to multiply the number of rows, the values are generated. This class is based on the vti org.apache.derbyTesting.functionTests.tests.lang.Wisc, however, this will work with any database, not just Cloudscape.");
1: 		return st.toString();
1: 
1: 	}
1: 
1: 
1: 	public boolean isCloudscapeSpecificTest()
1: 	{
1: 	    return false;
1: 	}
1: 
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.WISCInsert
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.*;
1: 
0: /**
0:  * This class is a VTI for loading data into the Wisconsin benchmark schema.
0:  * See The Benchmark Handbook, Second Edition (edited by Jim Gray).
0:  */
0: public class WISCInsert {
1: 
0: 	private static final char[] chars = {
0: 		'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
0: 		'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
0: 	};
1: 
0: 	int numrows;
0: 	int prime;
0: 	int generator; 
0: 	int rowsReturned = 0;
1: 
0: 	int unique1;
0: 	int unique2;
0: 	int two;
0: 	int four;
0: 	int ten;
0: 	int twenty;
0: 	int onePercent;
0: 	int tenPercent;
0: 	int twentyPercent;
0: 	int fiftyPercent;
0: 	int unique3;
0: 	int evenOnePercent;
0: 	int oddOnePercent;
0: 	String stringu1;
0: 	String stringu2;
0: 	String string4;
1: 
0: 	int seed;
0: 	static final String[] cyclicStrings = {
0: 		"AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
0: 		"HHHHxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
0: 		"OOOOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
0: 		"VVVVxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
0: 		};
1: 
0: 	boolean closed = false;
1: 
0: 	public WISCInsert()
0: 	{
0: 	}
1: 
0: 	public int doWISCInsert(int numrows, String tableName, Connection conn) throws SQLException {
0: 		this.numrows = numrows;
1: 
0: 		/* Choose prime and generator values for the desired table size */
0: 		if (numrows <= 1000) {
0: 			generator = 279;
0: 			prime = 1009;
0: 		} else if (numrows <= 10000) {
0: 			generator = 2969;
0: 			prime = 10007;
0: 		} else if (numrows <= 100000) {
0: 			generator = 21395;
0: 			prime = 100003;
0: 		} else if (numrows <= 1000000) {
0: 			generator = 2107;
0: 			prime = 1000003;
0: 		} else if (numrows <= 10000000) {
0: 			generator = 211;
0: 			prime = 10000019;
0: 		} else if (numrows <= 100000000) {
0: 			generator = 21;
0: 			prime = 100000007;
0: 		} else {
0: 			throw new SQLException("Too many rows - maximum is 100000000, " +
0: 									numrows + " requested.");
0: 		}
1: 
0: 		seed = generator;
1: 
0: 		String insertString = "insert into " + tableName + " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
0: 		PreparedStatement ps = conn.prepareStatement(insertString);
1: 
0: 		// loop the insert statement
0: 		for (int i = 0; i < numrows; i++)
0: 		{
0: 			next();
0: 			ps.setInt(1, unique1);
0: 			ps.setInt(2, unique2);
0: 			ps.setInt(3, two);
0: 			ps.setInt(4, four);
0: 			ps.setInt(5, ten);
0: 			ps.setInt(6, twenty);
0: 			ps.setInt(7, onePercent);
0: 			ps.setInt(8, tenPercent);
0: 			ps.setInt(9, twentyPercent);
0: 			ps.setInt(10, fiftyPercent);
0: 			ps.setInt(11, unique3);
0: 			ps.setInt(12, evenOnePercent);
0: 			ps.setInt(13, oddOnePercent);
0: 			ps.setString(14, stringu1);
0: 			ps.setString(15, stringu2);
0: 			ps.setString(16, string4);
0: 			ps.executeUpdate();
0: 			// commit every once in a while?
0: 		}
0: 		return numrows;
0: 	}
1: 
1: 
0: 	public boolean next() throws SQLException {
0: 		if (rowsReturned >= numrows)
0: 			return false;
1: 
0: 		seed = rand(seed, numrows);
1: 
0: 		unique1 = seed - 1;
0: 		unique2 = rowsReturned;
0: 		two = unique1 % 2;
0: 		four = unique1 % 4;
0: 		ten = unique1 % 10;
0: 		twenty = unique1 % 20;
0: 		onePercent = unique1 % 100;
0: 		tenPercent = unique1 % 10;
0: 		twentyPercent = unique1 % 5;
0: 		fiftyPercent = unique1 % 2;
0: 		unique3 = unique1;
0: 		evenOnePercent = onePercent * 2;
0: 		oddOnePercent = evenOnePercent + 1;
0: 		stringu1 = uniqueString(unique1);
0: 		stringu2 = uniqueString(unique2);
0: 		string4 = cyclicStrings[rowsReturned % cyclicStrings.length];
1: 
0: 		rowsReturned++;
1: 
0: 		return true;
0: 	}
1: 
1: 
0: 	private int rand(int seed, int limit) {
0: 		do {
0: 			seed = (generator * seed) % prime;
0: 		} while (seed > limit);
1: 
0: 		return seed;
0: 	}
1: 
1:  
0: 	private String uniqueString(int unique) {
0: 		int i;
0: 		int rem;
0: 		char[] retval = new char[52];
1: 
0: 		// First set result string to
0: 		// "AAAAAAA                                             "
0: 		for (i = 0; i < 7; i++) {
0: 			retval[i] = 'A';
0: 		}
0: 		for (i = 7; i < retval.length; i++) {
0: 			retval[i] = 'x';
0: 		}
1: 
0: 		// Convert unique value from right to left into an alphabetic string
0: 		i = 6;
0: 		while (unique > 0) {
0: 			rem = unique % 26;
0: 			retval[i] = chars[rem];
0: 			unique /= 26;
0: 			i--;
0: 		}
1: 
0: 		return new String(retval);
0: 	}
1: 
1: 
0: 	public String getShortTestDescription()
0: 	{
0: 		StringBuffer st = new StringBuffer( "insert values into wisconsin benchmark schema.");
0: 		st.append("See The Benchmark Handbook, Second Edition (edited by Jim Gray).");
0: 		return st.toString();
0: 	}
1: 
1: 
0: 	public String getLongTestDescription()
0: 	{
0: 		StringBuffer st = new StringBuffer(getShortTestDescription() +"\n Called from performance.wisc.WiscLoad. This is not actually a test itself. Based on a scale value by which to multiply the number of rows, the values are generated. This class is based on the vti org.apache.derbyTesting.functionTests.tests.lang.Wisc, however, this will work with any database, not just Cloudscape.");
0: 		return st.toString();
1: 
0: 	}
1: 
1: 
0: 	public boolean isCloudscapeSpecificTest()
0: 	{
0: 	    return false;
0: 	}
1: 
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.WISCInsert
0: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
============================================================================