1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ByteHolder
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.OutputStream;
1:eac0369: 
2:eac0369: /**
1:eac0369:   Holder for a growing sequence of bytes. The ByteHolder supports a
1:eac0369:   writing phase in which a caller appends bytes to the ByteHolder. 
1:eac0369:   Later the caller may read the bytes out of the ByteHolder in
1:eac0369:   the order they were written.
1:eac0369:   */
1:eac0369: public interface ByteHolder
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	  Write a byte to this ByteHolder.
1:eac0369: 
1:eac0369: 	  <P>The ByteHolder must be in writing mode to call this.
1:eac0369: 	  */
1:eac0369: 	public void write(int b)
1:eac0369: 		 throws IOException;
1:eac0369: 	/**
1:eac0369: 	  Write len bytes of data starting at 'offset' to this ByteHolder.
1:eac0369: 
1:eac0369: 	  <P>The ByteHolder must be in writing mode to call this.
1:eac0369: 	  */
1:eac0369: 	public void write(byte[] data, int offset, int len)
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369:     /**	
1:eac0369: 	  Write up to count bytes from an input stream to this
1:eac0369: 	  ByteHolder. This may write fewer bytes if it encounters
1:eac0369: 	  an end of file on the input stream.
1:eac0369: 
1:eac0369: 	  @return the number of bytes written.
1:eac0369: 	  @exception IOException thrown when reading in causes an
1:eac0369:       error.
1:eac0369: 	  */
1:eac0369: 	public long write(InputStream in, long count)	
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Clear the bytes from the ByteHolder and place it in writing
1:eac0369: 	  mode. This may not free the memory the ByteHolder uses to
1:eac0369: 	  store data.
1:eac0369: 	  */
1:eac0369: 	public void clear()
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Place a ByteHolder in reading mode. After this call,
1:eac0369: 	  reads scan bytes sequentially in the order they were
1:eac0369: 	  written to the ByteHolder starting from the first byte.
1:eac0369: 	  When the ByteHolder is already in readmode this simply
1:eac0369: 	  arranges for reads to start at the beginning of the
1:eac0369: 	  sequence of saved bytes.
1:eac0369: 	  */
1:eac0369: 	public void startReading()
1:eac0369:         throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  Read a byte from this ByteHolder.
1:eac0369: 
1:eac0369: 	  <P>The ByteHolder must be in reading mode to call this.
1:eac0369: 
1:eac0369: 	  @return The byte or -1 if there are no bytes available.
1:eac0369: 	  */
1:eac0369: 	public int read()
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read up to 'len' bytes from this ByteHolder and store them in
1:eac0369: 	  an array at offset 'off'.
1:eac0369: 
1:eac0369: 	  <P>The ByteHolder must be in reading mode to call this.
1:eac0369: 
1:eac0369: 	  @return the number of bytes read or -1 if the this ByteHolder
1:eac0369: 	  has no more bytes.
1:eac0369: 	  */
1:eac0369: 	public int read(byte b[],
1:eac0369: 					int off,
1:eac0369: 					int len)
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369: 	/**
1:20bc69f:       Read from the ByteHolder.
1:20bc69f:       <p>
1:eac0369: 	  Read up to 'len' bytes from this ByteHolder and write them to
1:eac0369: 	  the OutputStream
1:eac0369: 
1:eac0369: 	  <P>The ByteHolder must be in reading mode to call this.
1:eac0369: 
1:eac0369: 	  @return the number of bytes read or -1 if the this ByteHolder
1:eac0369: 	  has no more bytes.
1:eac0369: 	  */
1:eac0369: 	public int read(OutputStream out,
1:eac0369: 					int len)
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  shift the remaining unread bytes to the beginning of the byte holder
1:eac0369: 	  */
1:eac0369: 	public int shiftToFront()
1:eac0369: 		throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:  	  Return the number of bytes that can be read from this ByteHolder
1:eac0369: 	  without blocking on an IO.
1:eac0369: 	  */
1:eac0369: 	public int available()
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:  	  Return the number of bytes that have been saved to this byte holder.
1:eac0369:       This result is different from available() as it is unaffected by the
1:eac0369:       current read position on the ByteHolder.
1:eac0369: 	  */
1:eac0369: 	public int numBytesSaved()
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  Skip over the specified number of bytes in a ByteHolder.
1:eac0369: 	  */
1:eac0369: 	public long skip(long count)
1:eac0369: 		 throws IOException;
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	  Return true if this is in writing mode.
1:eac0369: 	  */
1:eac0369: 	public boolean writingMode();
1:1b454a1: 
1:1b454a1:     /**
1:1b454a1:      * Return a byte holder matching existing type and size of current
1:1b454a1:      * ByteHolder, but don't bother to fill the bytes. Normal usage is expected
1:1b454a1:      * to reset the holding stream to the beginning, so the copy of current
1:1b454a1:      * state would be wasted.
1:1b454a1:      *
1:1b454a1:      * @return An empty <code>ByteHolder</code>.
1:1b454a1:      */
1:1b454a1:     public ByteHolder cloneEmpty();
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:1b454a1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return a byte holder matching existing type and size of current
1:      * ByteHolder, but don't bother to fill the bytes. Normal usage is expected
1:      * to reset the holding stream to the beginning, so the copy of current
1:      * state would be wasted.
1:      *
1:      * @return An empty <code>ByteHolder</code>.
1:      */
1:     public ByteHolder cloneEmpty();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
1:       Read from the ByteHolder.
1:       <p>
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ByteHolder
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
0: import java.util.Vector;
1: 
1: /**
1:   Holder for a growing sequence of bytes. The ByteHolder supports a
1:   writing phase in which a caller appends bytes to the ByteHolder. 
1:   Later the caller may read the bytes out of the ByteHolder in
1:   the order they were written.
1:   */
1: public interface ByteHolder
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	  Write a byte to this ByteHolder.
1: 
1: 	  <P>The ByteHolder must be in writing mode to call this.
1: 	  */
1: 	public void write(int b)
1: 		 throws IOException;
1: 	/**
1: 	  Write len bytes of data starting at 'offset' to this ByteHolder.
1: 
1: 	  <P>The ByteHolder must be in writing mode to call this.
1: 	  */
1: 	public void write(byte[] data, int offset, int len)
1: 		 throws IOException;
1: 
1:     /**	
1: 	  Write up to count bytes from an input stream to this
1: 	  ByteHolder. This may write fewer bytes if it encounters
1: 	  an end of file on the input stream.
1: 
1: 	  @return the number of bytes written.
1: 	  @exception IOException thrown when reading in causes an
1:       error.
1: 	  */
1: 	public long write(InputStream in, long count)	
1: 		 throws IOException;
1: 
1: 	/**
1: 	  Clear the bytes from the ByteHolder and place it in writing
1: 	  mode. This may not free the memory the ByteHolder uses to
1: 	  store data.
1: 	  */
1: 	public void clear()
1: 		 throws IOException;
1: 
1: 	/**
1: 	  Place a ByteHolder in reading mode. After this call,
1: 	  reads scan bytes sequentially in the order they were
1: 	  written to the ByteHolder starting from the first byte.
1: 	  When the ByteHolder is already in readmode this simply
1: 	  arranges for reads to start at the beginning of the
1: 	  sequence of saved bytes.
1: 	  */
1: 	public void startReading()
1:         throws IOException;
1: 
1:     /**
1: 	  Read a byte from this ByteHolder.
1: 
1: 	  <P>The ByteHolder must be in reading mode to call this.
1: 
1: 	  @return The byte or -1 if there are no bytes available.
1: 	  */
1: 	public int read()
1: 		 throws IOException;
1: 
1: 	/**
1: 	  Read up to 'len' bytes from this ByteHolder and store them in
1: 	  an array at offset 'off'.
1: 
1: 	  <P>The ByteHolder must be in reading mode to call this.
1: 
1: 	  @return the number of bytes read or -1 if the this ByteHolder
1: 	  has no more bytes.
1: 	  */
1: 	public int read(byte b[],
1: 					int off,
1: 					int len)
1: 		 throws IOException;
1: 
1: 	/**
1: 	  Read up to 'len' bytes from this ByteHolder and write them to
1: 	  the OutputStream
1: 
1: 	  <P>The ByteHolder must be in reading mode to call this.
1: 
1: 	  @return the number of bytes read or -1 if the this ByteHolder
1: 	  has no more bytes.
1: 	  */
1: 	public int read(OutputStream out,
1: 					int len)
1: 		 throws IOException;
1: 
1: 	/**
1: 	  shift the remaining unread bytes to the beginning of the byte holder
1: 	  */
1: 	public int shiftToFront()
1: 		throws IOException;
1: 
1:     /**
1:  	  Return the number of bytes that can be read from this ByteHolder
1: 	  without blocking on an IO.
1: 	  */
1: 	public int available()
1: 		 throws IOException;
1: 
1:     /**
1:  	  Return the number of bytes that have been saved to this byte holder.
1:       This result is different from available() as it is unaffected by the
1:       current read position on the ByteHolder.
1: 	  */
1: 	public int numBytesSaved()
1: 		 throws IOException;
1: 
1:     /**
1: 	  Skip over the specified number of bytes in a ByteHolder.
1: 	  */
1: 	public long skip(long count)
1: 		 throws IOException;
1: 
1:     /**
1: 	  Return true if this is in writing mode.
1: 	  */
1: 	public boolean writingMode();
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.util.Vector;
0: 
0: /**
0:   Holder for a growing sequence of bytes. The ByteHolder supports a
0:   writing phase in which a caller appends bytes to the ByteHolder. 
0:   Later the caller may read the bytes out of the ByteHolder in
0:   the order they were written.
0:   */
0: public interface ByteHolder
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	  Write a byte to this ByteHolder.
0: 
0: 	  <P>The ByteHolder must be in writing mode to call this.
0: 	  */
0: 	public void write(int b)
0: 		 throws IOException;
0: 	/**
0: 	  Write len bytes of data starting at 'offset' to this ByteHolder.
0: 
0: 	  <P>The ByteHolder must be in writing mode to call this.
0: 	  */
0: 	public void write(byte[] data, int offset, int len)
0: 		 throws IOException;
0: 
0:     /**	
0: 	  Write up to count bytes from an input stream to this
0: 	  ByteHolder. This may write fewer bytes if it encounters
0: 	  an end of file on the input stream.
0: 
0: 	  @return the number of bytes written.
0: 	  @exception IOException thrown when reading in causes an
0:       error.
0: 	  */
0: 	public long write(InputStream in, long count)	
0: 		 throws IOException;
0: 
0: 	/**
0: 	  Clear the bytes from the ByteHolder and place it in writing
0: 	  mode. This may not free the memory the ByteHolder uses to
0: 	  store data.
0: 	  */
0: 	public void clear()
0: 		 throws IOException;
0: 
0: 	/**
0: 	  Place a ByteHolder in reading mode. After this call,
0: 	  reads scan bytes sequentially in the order they were
0: 	  written to the ByteHolder starting from the first byte.
0: 	  When the ByteHolder is already in readmode this simply
0: 	  arranges for reads to start at the beginning of the
0: 	  sequence of saved bytes.
0: 	  */
0: 	public void startReading()
0:         throws IOException;
0: 
0:     /**
0: 	  Read a byte from this ByteHolder.
0: 
0: 	  <P>The ByteHolder must be in reading mode to call this.
0: 
0: 	  @return The byte or -1 if there are no bytes available.
0: 	  */
0: 	public int read()
0: 		 throws IOException;
0: 
0: 	/**
0: 	  Read up to 'len' bytes from this ByteHolder and store them in
0: 	  an array at offset 'off'.
0: 
0: 	  <P>The ByteHolder must be in reading mode to call this.
0: 
0: 	  @return the number of bytes read or -1 if the this ByteHolder
0: 	  has no more bytes.
0: 	  */
0: 	public int read(byte b[],
0: 					int off,
0: 					int len)
0: 		 throws IOException;
0: 
0: 	/**
0: 	  Read up to 'len' bytes from this ByteHolder and write them to
0: 	  the OutputStream
0: 
0: 	  <P>The ByteHolder must be in reading mode to call this.
0: 
0: 	  @return the number of bytes read or -1 if the this ByteHolder
0: 	  has no more bytes.
0: 	  */
0: 	public int read(OutputStream out,
0: 					int len)
0: 		 throws IOException;
0: 
0: 	/**
0: 	  shift the remaining unread bytes to the beginning of the byte holder
0: 	  */
0: 	public int shiftToFront()
0: 		throws IOException;
0: 
0:     /**
0:  	  Return the number of bytes that can be read from this ByteHolder
0: 	  without blocking on an IO.
0: 	  */
0: 	public int available()
0: 		 throws IOException;
0: 
0:     /**
0:  	  Return the number of bytes that have been saved to this byte holder.
0:       This result is different from available() as it is unaffected by the
0:       current read position on the ByteHolder.
0: 	  */
0: 	public int numBytesSaved()
0: 		 throws IOException;
0: 
0:     /**
0: 	  Skip over the specified number of bytes in a ByteHolder.
0: 	  */
0: 	public long skip(long count)
0: 		 throws IOException;
0: 
0:     /**
0: 	  Return true if this is in writing mode.
0: 	  */
0: 	public boolean writingMode();
0: }
============================================================================