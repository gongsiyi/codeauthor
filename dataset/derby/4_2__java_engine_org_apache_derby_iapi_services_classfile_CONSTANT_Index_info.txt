1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.classfile.CONSTANT_Index_info
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.services.classfile;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1:fe77ca5: 
1:fe77ca5: import java.io.IOException;
1:fe77ca5: 
2:fe77ca5:  /**
1:fe77ca5: 
1:fe77ca5:   A generic constant pool entry for entries that simply hold indexes
1:fe77ca5:   into other entries.
1:fe77ca5: 
1:fe77ca5:   <BR>
1:fe77ca5:   Ref Constant Pool Entry  - page 94 - Section 4.4.2	- Two indexes
1:fe77ca5:   <BR>
1:fe77ca5:   NameAndType Constant Pool Entry  - page 99 - Section 4.4.6 - Two indexes
1:fe77ca5:   <BR>
1:fe77ca5:   String Constant Pool Entry - page 96 - Section 4.4.3 - One index
1:fe77ca5:   <BR>
1:fe77ca5:   Class Reference Constant Pool Entry - page 93 - Section 4.4.1 - One index
1:fe77ca5: 
1:fe77ca5: */
1:7e52071: public final class CONSTANT_Index_info extends ConstantPoolEntry {
1:fe77ca5: 
1:fe77ca5: 	private int i1;
1:fe77ca5: 	private int i2;
1:fe77ca5: 
1:fe77ca5: 	CONSTANT_Index_info(int tag, int i1, int i2) {
1:fe77ca5: 		super(tag);
1:fe77ca5: 		this.i1 = i1;
1:fe77ca5: 		this.i2 = i2;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public int hashCode() {
1:fe77ca5: 		return (tag << 16) | ((i1 << 8) ^ i2);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public boolean equals(Object other) {
1:fe77ca5: 		if (other instanceof CONSTANT_Index_info) {
1:fe77ca5: 			CONSTANT_Index_info o = (CONSTANT_Index_info) other;
1:fe77ca5: 
1:fe77ca5: 			return (tag == o.tag) && (i1 == o.i1) && (i2 == o.i2);			
1:fe77ca5: 		}
1:fe77ca5: 		return false;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Used when searching 
1:fe77ca5: 	*/
1:fe77ca5: 	void set(int tag, int i1, int i2) {
1:fe77ca5: 		this.tag = tag;
1:fe77ca5: 		this.i1 = i1;
1:fe77ca5: 		this.i2 = i2;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	int classFileSize() {
1:fe77ca5: 		// 1 (tag) + 2 (index length) [ + 2 (index length) ]
1:fe77ca5: 		return 1 + 2 + ((i2 != 0) ? 2 : 0);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	void put(ClassFormatOutput out) throws IOException {
1:fe77ca5: 		super.put(out);
1:fe77ca5: 		out.putU2(i1);
1:fe77ca5: 		if (i2 != 0)
1:fe77ca5: 			out.putU2(i2);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public int getI1() { return i1; }
1:fe77ca5: 
1:fe77ca5: 	public int getI2() { return i2; }
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7e52071
/////////////////////////////////////////////////////////////////////////
1: public final class CONSTANT_Index_info extends ConstantPoolEntry {
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.classfile.CONSTANT_Index_info
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.classfile;
1: 
1: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: 
1: import java.io.IOException;
1: 
1:  /**
1: 
1:   A generic constant pool entry for entries that simply hold indexes
1:   into other entries.
1: 
1:   <BR>
1:   Ref Constant Pool Entry  - page 94 - Section 4.4.2	- Two indexes
1:   <BR>
1:   NameAndType Constant Pool Entry  - page 99 - Section 4.4.6 - Two indexes
1:   <BR>
1:   String Constant Pool Entry - page 96 - Section 4.4.3 - One index
1:   <BR>
1:   Class Reference Constant Pool Entry - page 93 - Section 4.4.1 - One index
1: 
1: */
0: final class CONSTANT_Index_info extends ConstantPoolEntry {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	private int i1;
1: 	private int i2;
1: 
1: 	CONSTANT_Index_info(int tag, int i1, int i2) {
1: 		super(tag);
1: 		this.i1 = i1;
1: 		this.i2 = i2;
1: 	}
1: 
1: 	public int hashCode() {
1: 		return (tag << 16) | ((i1 << 8) ^ i2);
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 		if (other instanceof CONSTANT_Index_info) {
1: 			CONSTANT_Index_info o = (CONSTANT_Index_info) other;
1: 
1: 			return (tag == o.tag) && (i1 == o.i1) && (i2 == o.i2);			
1: 		}
1: 		return false;
1: 	}
1: 
1: 
1: 	/**
1: 		Used when searching 
1: 	*/
1: 	void set(int tag, int i1, int i2) {
1: 		this.tag = tag;
1: 		this.i1 = i1;
1: 		this.i2 = i2;
1: 	}
1: 
1: 	int classFileSize() {
1: 		// 1 (tag) + 2 (index length) [ + 2 (index length) ]
1: 		return 1 + 2 + ((i2 != 0) ? 2 : 0);
1: 	}
1: 
1: 	void put(ClassFormatOutput out) throws IOException {
1: 		super.put(out);
1: 		out.putU2(i1);
1: 		if (i2 != 0)
1: 			out.putU2(i2);
1: 	}
1: 
1: 	public int getI1() { return i1; }
1: 
1: 	public int getI2() { return i2; }
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.classfile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.classfile;
0: 
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: 
0: import java.io.IOException;
0: 
0:  /**
0: 
0:   A generic constant pool entry for entries that simply hold indexes
0:   into other entries.
0: 
0:   <BR>
0:   Ref Constant Pool Entry  - page 94 - Section 4.4.2	- Two indexes
0:   <BR>
0:   NameAndType Constant Pool Entry  - page 99 - Section 4.4.6 - Two indexes
0:   <BR>
0:   String Constant Pool Entry - page 96 - Section 4.4.3 - One index
0:   <BR>
0:   Class Reference Constant Pool Entry - page 93 - Section 4.4.1 - One index
0: 
0: */
0: final class CONSTANT_Index_info extends ConstantPoolEntry {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	private int i1;
0: 	private int i2;
0: 
0: 	CONSTANT_Index_info(int tag, int i1, int i2) {
0: 		super(tag);
0: 		this.i1 = i1;
0: 		this.i2 = i2;
0: 	}
0: 
0: 	public int hashCode() {
0: 		return (tag << 16) | ((i1 << 8) ^ i2);
0: 	}
0: 
0: 	public boolean equals(Object other) {
0: 		if (other instanceof CONSTANT_Index_info) {
0: 			CONSTANT_Index_info o = (CONSTANT_Index_info) other;
0: 
0: 			return (tag == o.tag) && (i1 == o.i1) && (i2 == o.i2);			
0: 		}
0: 		return false;
0: 	}
0: 
0: 
0: 	/**
0: 		Used when searching 
0: 	*/
0: 	void set(int tag, int i1, int i2) {
0: 		this.tag = tag;
0: 		this.i1 = i1;
0: 		this.i2 = i2;
0: 	}
0: 
0: 	int classFileSize() {
0: 		// 1 (tag) + 2 (index length) [ + 2 (index length) ]
0: 		return 1 + 2 + ((i2 != 0) ? 2 : 0);
0: 	}
0: 
0: 	void put(ClassFormatOutput out) throws IOException {
0: 		super.put(out);
0: 		out.putU2(i1);
0: 		if (i2 != 0)
0: 			out.putU2(i2);
0: 	}
0: 
0: 	public int getI1() { return i1; }
0: 
0: 	public int getI2() { return i2; }
0: }
============================================================================