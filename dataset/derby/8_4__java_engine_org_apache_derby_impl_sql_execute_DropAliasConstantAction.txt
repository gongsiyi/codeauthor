1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DropAliasConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
16:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:1e2aae0: import org.apache.derby.iapi.reference.SQLState;
1:1e2aae0: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
2:eac0369: /**
1:4112e91:  *	This class performs actions that are ALWAYS performed for a
1:4112e91:  *	DROP FUNCTION/PROCEDURE/SYNONYM statement at execution time.
1:4112e91:  *  All of these SQL objects are represented by an AliasDescriptor.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: class DropAliasConstantAction extends DDLConstantAction
2:eac0369: {
1:eac0369: 
1:eac0369: 	private SchemaDescriptor	sd;
1:eac0369: 	private final String				aliasName;
1:eac0369: 	private final char				nameSpace;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for a DROP  ALIAS statement.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 *	@param	aliasName			Alias name.
1:eac0369: 	 *	@param	nameSpace			Alias name space.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	DropAliasConstantAction(SchemaDescriptor sd, String aliasName, char nameSpace)
1:eac0369: 	{
1:eac0369: 		this.sd = sd;
1:eac0369: 		this.aliasName = aliasName;
1:eac0369: 		this.nameSpace = nameSpace;
3:eac0369: 	}
1:2209325: 
1:eac0369: 	// OBJECT SHADOWS
1:4112e91: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return	"DROP ALIAS " + aliasName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for DROP ALIAS.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		/* Get the alias descriptor.  We're responsible for raising
1:eac0369: 		 * the error if it isn't found 
1:eac0369: 		 */
1:eac0369: 		AliasDescriptor ad = dd.getAliasDescriptor(sd.getUUID().toString(), aliasName, nameSpace);
1:eac0369: 
1:eac0369: 		// RESOLVE - fix error message
1:eac0369: 		if (ad == null)
1:eac0369: 		{
1:56a7b39: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, AliasDescriptor.getAliasType(nameSpace),  aliasName);
1:eac0369: 		}
1:eac0369: 
1:2209325:         adjustUDTDependencies( lcc, dd, ad, false );
1:eac0369:         
1:4112e91:         ad.drop(lcc);
1:eac0369: 
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Lily Wei
-------------------------------------------------------------------------------
commit:56a7b39
/////////////////////////////////////////////////////////////////////////
1: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, AliasDescriptor.getAliasType(nameSpace),  aliasName);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2209325
/////////////////////////////////////////////////////////////////////////
1: 
1:         adjustUDTDependencies( lcc, dd, ad, false );
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4112e91
/////////////////////////////////////////////////////////////////////////
1:  *	This class performs actions that are ALWAYS performed for a
1:  *	DROP FUNCTION/PROCEDURE/SYNONYM statement at execution time.
1:  *  All of these SQL objects are represented by an AliasDescriptor.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         
1:         ad.drop(lcc);
commit:1e2aae0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.catalog.AliasInfo;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DropAliasConstantAction
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.catalog.AliasInfo;
1: 
1: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	DROP ALIAS Statement at Execution time.
1:  *
0:  *	@author Jerry Brenner.
1:  */
1: 
1: class DropAliasConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private SchemaDescriptor	sd;
0: 	private final String schemaName;
1: 	private final String				aliasName;
1: 	private final char				nameSpace;
1: 
1: 	// CONSTRUCTORS
1: 
1: 
1: 	/**
1: 	 *	Make the ConstantAction for a DROP  ALIAS statement.
1: 	 *
1: 	 *
1: 	 *	@param	aliasName			Alias name.
1: 	 *	@param	nameSpace			Alias name space.
1: 	 *
1: 	 */
1: 	DropAliasConstantAction(SchemaDescriptor sd, String aliasName, char nameSpace)
1: 	{
1: 		this.sd = sd;
0: 		this.schemaName = sd.getSchemaName();
1: 		this.aliasName = aliasName;
1: 		this.nameSpace = nameSpace;
1: 	}
1: 
1: 	// OBJECT SHADOWS
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return	"DROP ALIAS " + aliasName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for DROP ALIAS.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
1: 
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
0: 		if (sd == null) {
0: 			sd = dd.getSchemaDescriptor(schemaName, lcc.getTransactionExecute(), true);
1: 		}
1: 
1: 
1: 		/* Get the alias descriptor.  We're responsible for raising
1: 		 * the error if it isn't found 
1: 		 */
1: 		AliasDescriptor ad = dd.getAliasDescriptor(sd.getUUID().toString(), aliasName, nameSpace);
1: 
1: 		// RESOLVE - fix error message
1: 		if (ad == null)
1: 		{
0: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "Method alias",  aliasName);
1: 		}
1: 
0: 		/* Prepare all dependents to invalidate.  (This is their chance
0: 		 * to say that they can't be invalidated.  For example, an open
0: 		 * cursor referencing a table/view that the user is attempting to
0: 		 * drop.) If no one objects, then invalidate any dependent objects.
0: 		 * We check for invalidation before we drop the descriptor
0: 		 * since the descriptor may be looked up as part of
0: 		 * decoding tuples in SYSDEPENDS.
1: 		 */
0: 		int invalidationType = 0;
0: 		switch (ad.getAliasType())
1: 		{
0: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 				invalidationType = DependencyManager.DROP_METHOD_ALIAS;
0: 				break;
1: 		}
1: 
0: 		dm.invalidateFor(ad, invalidationType, lcc);
1: 
0: 		/* Drop the alias */
0: 		dd.dropAliasDescriptor(ad, lcc.getTransactionExecute());
1: 
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b7e13a9
/////////////////////////////////////////////////////////////////////////
0: 		else
0: 			dd.dropAllRoutinePermDescriptors(ad.getUUID(), tc);
commit:81ad58c
/////////////////////////////////////////////////////////////////////////
0: 
0: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
0: 				invalidationType = DependencyManager.DROP_SYNONYM;
0: 				break;
0: 			// Drop the entry from SYSTABLES as well.
commit:582425f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
/////////////////////////////////////////////////////////////////////////
0: 		TransactionController tc = lcc.getTransactionExecute();
/////////////////////////////////////////////////////////////////////////
0: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, ad.getAliasType(nameSpace),  aliasName);
/////////////////////////////////////////////////////////////////////////
0: 		if (ad.getAliasType() == AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR)
0: 		{
0: 			DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
0: 			TableDescriptor td = ddg.newTableDescriptor(aliasName, sd,
0: 				TableDescriptor.SYNONYM_TYPE, TableDescriptor.DEFAULT_LOCK_GRANULARITY);
0: 			dd.dropTableDescriptor(td, sd, tc);
0: 		}
0: 			
0: 		dd.dropAliasDescriptor(ad, tc);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.catalog.AliasInfo;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	DROP ALIAS Statement at Execution time.
0:  *
0:  *	@author Jerry Brenner.
0:  */
0: 
0: class DropAliasConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private SchemaDescriptor	sd;
0: 	private final String schemaName;
0: 	private final String				aliasName;
0: 	private final char				nameSpace;
0: 
0: 	// CONSTRUCTORS
0: 
0: 
0: 	/**
0: 	 *	Make the ConstantAction for a DROP  ALIAS statement.
0: 	 *
0: 	 *
0: 	 *	@param	aliasName			Alias name.
0: 	 *	@param	nameSpace			Alias name space.
0: 	 *
0: 	 */
0: 	DropAliasConstantAction(SchemaDescriptor sd, String aliasName, char nameSpace)
0: 	{
0: 		this.sd = sd;
0: 		this.schemaName = sd.getSchemaName();
0: 		this.aliasName = aliasName;
0: 		this.nameSpace = nameSpace;
0: 	}
0: 
0: 	// OBJECT SHADOWS
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return	"DROP ALIAS " + aliasName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for DROP ALIAS.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		if (sd == null) {
0: 			sd = dd.getSchemaDescriptor(schemaName, lcc.getTransactionExecute(), true);
0: 		}
0: 
0: 
0: 		/* Get the alias descriptor.  We're responsible for raising
0: 		 * the error if it isn't found 
0: 		 */
0: 		AliasDescriptor ad = dd.getAliasDescriptor(sd.getUUID().toString(), aliasName, nameSpace);
0: 
0: 		// RESOLVE - fix error message
0: 		if (ad == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "Method alias",  aliasName);
0: 		}
0: 
0: 		/* Prepare all dependents to invalidate.  (This is their chance
0: 		 * to say that they can't be invalidated.  For example, an open
0: 		 * cursor referencing a table/view that the user is attempting to
0: 		 * drop.) If no one objects, then invalidate any dependent objects.
0: 		 * We check for invalidation before we drop the descriptor
0: 		 * since the descriptor may be looked up as part of
0: 		 * decoding tuples in SYSDEPENDS.
0: 		 */
0: 		int invalidationType = 0;
0: 		switch (ad.getAliasType())
0: 		{
0: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 				invalidationType = DependencyManager.DROP_METHOD_ALIAS;
0: 				break;
0: 		}
0: 
0: 		dm.invalidateFor(ad, invalidationType, lcc);
0: 
0: 		/* Drop the alias */
0: 		dd.dropAliasDescriptor(ad, lcc.getTransactionExecute());
0: 
0: 	}
0: }
============================================================================