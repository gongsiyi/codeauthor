1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.T_L2
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import java.util.Hashtable;
1:2bc809f: import org.apache.derby.iapi.services.locks.*;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	A semaphore that implements Lockable for unit testing.
1:2bc809f: */
1:2bc809f: class T_L2 implements Lockable {
1:2bc809f: 
1:2bc809f: 	private int allowed;
1:2bc809f: 	private Object[]	lockers;
1:2bc809f: 	private int[]		counts;
1:2bc809f: 
1:2bc809f: 	T_L2(int allowed) {
1:2bc809f: 		this.allowed = allowed;
1:2bc809f: 		lockers = new Object[allowed];
1:2bc809f: 		counts = new int[allowed];
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	** Lockable methods (Simple, qualifier assumed to be null), allows
1:2bc809f: 	** up to 'allowed' lockers in at the same time.
1:2bc809f: 	*/
1:2bc809f: 
1:2bc809f: 	public void lockEvent(Latch lockInfo) {
1:2bc809f: 
1:2bc809f: 		int empty = -1;
1:2bc809f: 		for (int i = 0; i < allowed; i++) {
1:2bc809f: 			if (lockers[i] == lockInfo.getCompatabilitySpace()) {
1:2bc809f: 				counts[i]++;
1:2bc809f: 				return;
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			if (lockers[i] == null)
1:2bc809f: 				empty = i;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:             SanityManager.ASSERT(empty != -1);
1:2bc809f: 		lockers[empty] = lockInfo.getCompatabilitySpace();
1:2bc809f: 		counts[empty] = 1;
1:2bc809f: 
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier) {
1:2bc809f: 		return false;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean lockerAlwaysCompatible() {
1:2bc809f: 		return true;
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void unlockEvent(Latch lockInfo) {
1:2bc809f: 
1:2bc809f: 		for (int i = 0; i < allowed; i++) {
1:2bc809f: 
1:2bc809f: 			if (lockers[i] == lockInfo.getCompatabilitySpace()) {
1:2bc809f: 				counts[i]--;
1:2bc809f:                 if (SanityManager.DEBUG)
1:2bc809f:                     SanityManager.ASSERT(counts[i] >= 0);
1:2bc809f: 				if (counts[i] == 0) {
1:2bc809f: 					lockers[i] = null;
1:2bc809f: 					return;
1:2bc809f: 				}
1:2bc809f: 
1:2bc809f: 				return;
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:             SanityManager.THROWASSERT("unlocked by a compatability space that does not exist");
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public boolean lockAttributes(int flag, Hashtable t)
1:2bc809f: 	{
1:2bc809f: 		return false;
1:2bc809f: 	}
1:2bc809f: 	
1:2bc809f: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.T_L2
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import java.util.Hashtable;
1: import org.apache.derby.iapi.services.locks.*;
1: 
1: /**
1: 	A semaphore that implements Lockable for unit testing.
1: */
1: class T_L2 implements Lockable {
1: 
1: 	private int allowed;
1: 	private Object[]	lockers;
1: 	private int[]		counts;
1: 
1: 	T_L2(int allowed) {
1: 		this.allowed = allowed;
1: 		lockers = new Object[allowed];
1: 		counts = new int[allowed];
1: 	}
1: 
1: 	/*
1: 	** Lockable methods (Simple, qualifier assumed to be null), allows
1: 	** up to 'allowed' lockers in at the same time.
1: 	*/
1: 
1: 	public void lockEvent(Latch lockInfo) {
1: 
1: 		int empty = -1;
1: 		for (int i = 0; i < allowed; i++) {
1: 			if (lockers[i] == lockInfo.getCompatabilitySpace()) {
1: 				counts[i]++;
1: 				return;
1: 			}
1: 
1: 			if (lockers[i] == null)
1: 				empty = i;
1: 		}
1: 
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(empty != -1);
1: 		lockers[empty] = lockInfo.getCompatabilitySpace();
1: 		counts[empty] = 1;
1: 
1: 	}
1: 
1: 	public boolean requestCompatible(Object requestedQualifier, Object grantedQualifier) {
1: 		return false;
1: 	}
1: 
1: 	public boolean lockerAlwaysCompatible() {
1: 		return true;
1: 	}
1: 
1: 	public void unlockEvent(Latch lockInfo) {
1: 
1: 		for (int i = 0; i < allowed; i++) {
1: 
1: 			if (lockers[i] == lockInfo.getCompatabilitySpace()) {
1: 				counts[i]--;
1:                 if (SanityManager.DEBUG)
1:                     SanityManager.ASSERT(counts[i] >= 0);
1: 				if (counts[i] == 0) {
1: 					lockers[i] = null;
1: 					return;
1: 				}
1: 
1: 				return;
1: 			}
1: 		}
1: 
1:         if (SanityManager.DEBUG)
1:             SanityManager.THROWASSERT("unlocked by a compatability space that does not exist");
1: 	}
1: 
1: 	public boolean lockAttributes(int flag, Hashtable t)
1: 	{
1: 		return false;
1: 	}
1: 	
1: }
============================================================================