1:1fa1fd0: /*
3:1fa1fd0: 
1:1fa1fd0:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Alias
1:1fa1fd0: 
1:20cdca3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:20cdca3:    contributor license agreements.  See the NOTICE file distributed with
1:20cdca3:    this work for additional information regarding copyright ownership.
1:20cdca3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:20cdca3:    (the "License"); you may not use this file except in compliance with
1:20cdca3:    the License.  You may obtain a copy of the License at
1:1fa1fd0: 
1:1fa1fd0:       http://www.apache.org/licenses/LICENSE-2.0
1:1fa1fd0: 
1:1fa1fd0:    Unless required by applicable law or agreed to in writing, software
1:1fa1fd0:    distributed under the License is distributed on an "AS IS" BASIS,
1:1fa1fd0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1fa1fd0:    See the License for the specific language governing permissions and
1:1fa1fd0:    limitations under the License.
1:1fa1fd0: 
1:1fa1fd0:  */
1:1fa1fd0: 
1:1fa1fd0: package org.apache.derby.impl.tools.dblook;
1:1fa1fd0: 
1:1fa1fd0: import java.sql.Connection;
1:1fa1fd0: import java.sql.Statement;
1:1fa1fd0: import java.sql.PreparedStatement;
1:1fa1fd0: import java.sql.ResultSet;
1:1fa1fd0: import java.sql.SQLException;
1:1fa1fd0: import java.sql.DatabaseMetaData;
1:1fa1fd0: 
1:1fa1fd0: import java.util.HashMap;
1:1fa1fd0: import org.apache.derby.tools.dblook;
1:1fa1fd0: 
1:ef1ecee: public class DB_Alias
1:ef1ecee: {
1:22d64f5:     private static final char AGGREGATE_TYPE = 'G';
1:ef1ecee:     private static final char UDT_TYPE = 'A';
1:ef1ecee:     private static final char PROCEDURE_TYPE = 'P';
1:ef1ecee:     private static final char FUNCTION_TYPE = 'F';
1:1fa1fd0: 
1:1fa1fd0: 	// Prepared statements use throughout the DDL
1:1fa1fd0: 	// generation process.
1:1fa1fd0: 
1:1fa1fd0: 	/* ************************************************
1:ef1ecee: 	 * Generate the DDL for all stored procedures,
1:22d64f5: 	 * functions, aggregates, and UDTs in a given database and write it to
1:1fa1fd0: 	 * output via Logs.java.
1:1fa1fd0: 	 * @param conn Connection to the source database.
1:9ce7492: 	 * @param at10_6 True if the database is at 10.6 or higher
1:1fa1fd0: 	 ****/
1:1fa1fd0: 
1:22d64f5: 	public static void doPFAU(Connection conn, boolean at10_6 )
1:1fa1fd0: 		throws SQLException {
1:1fa1fd0: 
1:1fa1fd0: 		// First do stored procedures.
1:ef1ecee: 		PreparedStatement ps = conn.prepareStatement
1:ef1ecee:             (
1:ef1ecee:              "SELECT ALIAS, ALIASINFO, " +
1:ef1ecee:              "ALIASID, SCHEMAID, JAVACLASSNAME, SYSTEMALIAS FROM SYS.SYSALIASES " +
1:ef1ecee:              "WHERE ALIASTYPE=?");
1:1fa1fd0: 
1:ef1ecee:         //
1:22d64f5:         // UDTs come before procedures, functions, and aggregates right now because
1:ef1ecee:         // procedures and functions can have args and return values which
1:ef1ecee:         // have UDT types. If we add functions to the signatures of UDTs,
1:ef1ecee:         // then we will have to do some trickier dependency analysis in order
1:ef1ecee:         // to interleave routine and UDT ddl.
1:ef1ecee:         //
1:1fa1fd0: 
1:9ce7492:         if ( at10_6 )
1:9ce7492:         {
1:9ce7492:             generateDDL( ps, UDT_TYPE ); // UDT_TYPE => for UDTs
1:9ce7492:         }
1:ef1ecee:         generateDDL( ps, PROCEDURE_TYPE );	// PROCEDURE_TYPE => for PROCEDURES
1:ef1ecee: 		generateDDL( ps, FUNCTION_TYPE );	// FUNCTION_TYPE => for FUNCTIONS
1:22d64f5: 		generateDDL( ps, AGGREGATE_TYPE );
1:ef1ecee: 
1:ef1ecee:         ps.close();
1:ef1ecee: 
1:1fa1fd0: 		return;
1:1fa1fd0: 	}
1:1fa1fd0: 
1:ef1ecee:     /* ************************************************
1:ef1ecee: 	 * Generate the DDL for the stored procedures,
1:ef1ecee: 	 * functions, or UDTs in a given database, depending on the
1:ef1ecee: 	 * the received aliasType.
1:ef1ecee: 	 * @param rs Result set holding either stored procedures
1:ef1ecee: 	 *  or functions.
1:ef1ecee: 	 * @param aliasType Indication of whether we're generating
1:ef1ecee: 	 *  stored procedures or functions.
1:ef1ecee: 	 ****/
1:ef1ecee: 	private static void generateDDL(PreparedStatement ps, char aliasType)
1:ef1ecee: 		throws SQLException
1:ef1ecee: 	{
1:ef1ecee:         ps.setString( 1, new String( new char[] { aliasType } ) );
1:ef1ecee: 
1:ef1ecee:         ResultSet rs = ps.executeQuery();
1:ef1ecee: 
1:ef1ecee:         generateDDL( rs, aliasType );
1:ef1ecee: 
1:ef1ecee:         rs.close();
1:ef1ecee:     }
1:ef1ecee: 
1:ef1ecee: 
1:1fa1fd0: 	/* ************************************************
1:ef1ecee: 	 * Generate the DDL for the stored procedures,
1:ef1ecee: 	 * functions, or UDTs in a given database, depending on the
1:1fa1fd0: 	 * the received aliasType.
1:1fa1fd0: 	 * @param rs Result set holding either stored procedures
1:1fa1fd0: 	 *  or functions.
1:1fa1fd0: 	 * @param aliasType Indication of whether we're generating
1:1fa1fd0: 	 *  stored procedures or functions.
1:1fa1fd0: 	 ****/
1:1fa1fd0: 	private static void generateDDL(ResultSet rs, char aliasType)
1:1fa1fd0: 		throws SQLException
1:1fa1fd0: 	{
1:1fa1fd0: 
1:1fa1fd0: 		boolean firstTime = true;
1:1fa1fd0: 		while (rs.next()) {
1:1fa1fd0: 
1:1fa1fd0: 			if (rs.getBoolean(6))
1:1fa1fd0: 			// it's a system alias, so we ignore it.
1:1fa1fd0: 				continue;
1:1fa1fd0: 
1:1fa1fd0: 			String procSchema = dblook.lookupSchemaId(rs.getString(4));
1:1fa1fd0: 			if (dblook.isIgnorableSchema(procSchema))
1:1fa1fd0: 				continue;
1:1fa1fd0: 
1:1fa1fd0: 			if (firstTime) {
1:1fa1fd0: 				Logs.reportString("----------------------------------------------");
1:ef1ecee:                 switch( aliasType )
1:ef1ecee:                 {
1:ef1ecee:                 case UDT_TYPE: Logs.reportMessage( "DBLOOK_UDTHeader" ); break;
1:ef1ecee:                 case PROCEDURE_TYPE: Logs.reportMessage( "DBLOOK_StoredProcHeader" ); break;
1:ef1ecee:                 case FUNCTION_TYPE: Logs.reportMessage( "DBLOOK_FunctionHeader" ); break;
1:22d64f5:                 case AGGREGATE_TYPE: Logs.reportMessage( "DBLOOK_AggregateHeader" ); break;
1:ef1ecee:                 }
1:1fa1fd0: 				Logs.reportString("----------------------------------------------\n");
1:1fa1fd0: 			}
1:1fa1fd0: 
1:1fa1fd0: 			String aliasName = rs.getString(1);
1:1fa1fd0: 			String fullName = dblook.addQuotes(
1:1fa1fd0: 				dblook.expandDoubleQuotes(aliasName));
1:1fa1fd0: 			fullName = procSchema + "." + fullName;
1:1fa1fd0: 
1:22d64f5: 			String creationString = createPFAUString(
1:1fa1fd0: 				fullName, rs, aliasType);
1:1fa1fd0: 			Logs.writeToNewDDL(creationString);
1:1fa1fd0: 			Logs.writeStmtEndToNewDDL();
1:1fa1fd0: 			Logs.writeNewlineToNewDDL();
1:1fa1fd0: 			firstTime = false;
1:1fa1fd0: 
1:1fa1fd0: 		}
1:1fa1fd0: 
1:1fa1fd0: 	}
1:1fa1fd0: 
1:1fa1fd0: 	/* ************************************************
1:1fa1fd0: 	 * Generate DDL for a specific stored procedure or
1:1fa1fd0: 	 * function.
1:1fa1fd0: 	 * @param aliasName Name of the current procedure/function
1:1fa1fd0: 	 * @param aliasInfo Info about the current procedure/function
1:1fa1fd0: 	 * @param aliasType Indicator of whether we're generating
1:1fa1fd0: 	 *  a stored procedure or a function.
1:1fa1fd0: 	 * @return DDL for the current stored procedure is
1:1fa1fd0: 	 *   returned, as a String.
1:1fa1fd0: 	 ****/
1:1fa1fd0: 
1:22d64f5: 	private static String createPFAUString(String aliasName,
1:1fa1fd0: 		ResultSet aliasInfo, char aliasType) throws SQLException
1:1fa1fd0: 	{
1:1fa1fd0: 
1:1fa1fd0: 		StringBuffer alias = new StringBuffer("CREATE ");
1:ef1ecee: 
1:ef1ecee:         switch( aliasType )
1:ef1ecee:         {
1:ef1ecee:         case UDT_TYPE: alias.append( "TYPE " ); break;
1:ef1ecee:         case PROCEDURE_TYPE: alias.append("PROCEDURE "); break;
1:ef1ecee:         case FUNCTION_TYPE: alias.append("FUNCTION "); break;
1:22d64f5:         case AGGREGATE_TYPE: alias.append("DERBY AGGREGATE "); break;
1:ef1ecee:         }
1:1fa1fd0: 		alias.append(aliasName);
2:1fa1fd0: 		alias.append(" ");
1:1fa1fd0: 
1:1fa1fd0: 		String params = aliasInfo.getString(2);
1:1fa1fd0: 
1:22d64f5:         if ( aliasType == AGGREGATE_TYPE )
1:22d64f5:         {
1:22d64f5:             alias.append( params );
1:22d64f5:             alias.append( " " );
1:22d64f5:         }
1:22d64f5:         else if ( aliasType != UDT_TYPE )
1:ef1ecee:         {
1:ef1ecee:             // Just grab the parameter part; we'll get the method name later.
1:ef1ecee:             alias.append(params.substring(params.indexOf("("), params.length()));
1:ef1ecee:             alias.append(" ");
1:ef1ecee:         }
1:1fa1fd0: 
1:1fa1fd0: 		// Now add the external name.
1:1fa1fd0: 		alias.append("EXTERNAL NAME '");
1:1fa1fd0: 		alias.append(aliasInfo.getString(5));
1:ef1ecee: 
1:ef1ecee:         if ( aliasType == UDT_TYPE )
1:ef1ecee:         {
1:ef1ecee:             alias.append("' ");
1:ef1ecee:             alias.append( params );
1:ef1ecee:         }
1:22d64f5:         else if ( aliasType == AGGREGATE_TYPE )
1:22d64f5:         {
1:22d64f5:             alias.append("' ");
1:22d64f5:         }
1:22d64f5:         else if ( aliasType != AGGREGATE_TYPE )
1:ef1ecee:         {
1:ef1ecee:             alias.append(".");
1:ef1ecee:             // Get method name from parameter string fetched above.
1:ef1ecee:             alias.append(params.substring(0, params.indexOf("(")));
1:ef1ecee:             alias.append("' ");
1:ef1ecee:         }
1:1fa1fd0: 
1:1fa1fd0: 		return alias.toString();
1:1fa1fd0: 
1:1fa1fd0: 	}
1:1fa1fd0: 
1:1fa1fd0: 	/* ************************************************
1:1fa1fd0: 	 * Generate the DDL for all synonyms in a given
1:1fa1fd0: 	 * database. On successul return, the DDL for the
1:1fa1fd0: 	 * synonyms has been written to output via Logs.java.
1:1fa1fd0: 	 * @param conn Connection to the source database.
1:1fa1fd0: 	 * @return 
1:1fa1fd0: 	 ****/
1:1fa1fd0: 	public static void doSynonyms(Connection conn) throws SQLException
1:1fa1fd0: 	{
2:1fa1fd0: 		Statement stmt = conn.createStatement();
1:1fa1fd0: 		ResultSet rs = stmt.executeQuery("SELECT ALIAS, SCHEMAID, " +
1:1fa1fd0: 			"ALIASINFO, SYSTEMALIAS FROM SYS.SYSALIASES A WHERE ALIASTYPE='S'");
1:1fa1fd0: 
1:1fa1fd0: 		boolean firstTime = true;
1:1fa1fd0: 		while (rs.next()) {
1:1fa1fd0: 			if (rs.getBoolean(4))
1:1fa1fd0: 			// it's a system alias, so we ignore it.
1:1fa1fd0: 				continue;
1:1fa1fd0: 
1:1fa1fd0: 			String aliasSchema = dblook.lookupSchemaId(rs.getString(2));
1:1fa1fd0: 			if (dblook.isIgnorableSchema(aliasSchema))
1:1fa1fd0: 				continue;
1:1fa1fd0: 
1:1fa1fd0: 			if (firstTime) {
1:1fa1fd0: 				Logs.reportString("----------------------------------------------");
1:1fa1fd0: 				Logs.reportMessage("DBLOOK_SynonymHeader");
1:1fa1fd0: 				Logs.reportString("----------------------------------------------\n");
1:1fa1fd0: 			}
1:1fa1fd0: 
1:1fa1fd0: 			String aliasName = rs.getString(1);
1:1fa1fd0: 			String aliasFullName = dblook.addQuotes(
1:1fa1fd0: 				dblook.expandDoubleQuotes(aliasName));
1:1fa1fd0: 			aliasFullName = aliasSchema + "." + aliasFullName;
1:1fa1fd0: 
1:1fa1fd0: 			Logs.writeToNewDDL("CREATE SYNONYM "+aliasFullName+" FOR "+rs.getString(3));
1:1fa1fd0: 			Logs.writeStmtEndToNewDDL();
1:1fa1fd0: 			Logs.writeNewlineToNewDDL();
1:1fa1fd0: 			firstTime = false;
1:1fa1fd0: 		}
1:1fa1fd0: 
2:1fa1fd0: 		rs.close();
2:1fa1fd0: 		stmt.close();
1:1fa1fd0: 		return;
1:1fa1fd0: 
1:1fa1fd0: 	}
1:1fa1fd0: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:22d64f5
/////////////////////////////////////////////////////////////////////////
1:     private static final char AGGREGATE_TYPE = 'G';
/////////////////////////////////////////////////////////////////////////
1: 	 * functions, aggregates, and UDTs in a given database and write it to
1: 	public static void doPFAU(Connection conn, boolean at10_6 )
/////////////////////////////////////////////////////////////////////////
1:         // UDTs come before procedures, functions, and aggregates right now because
/////////////////////////////////////////////////////////////////////////
1: 		generateDDL( ps, AGGREGATE_TYPE );
/////////////////////////////////////////////////////////////////////////
1:                 case AGGREGATE_TYPE: Logs.reportMessage( "DBLOOK_AggregateHeader" ); break;
/////////////////////////////////////////////////////////////////////////
1: 			String creationString = createPFAUString(
/////////////////////////////////////////////////////////////////////////
1: 	private static String createPFAUString(String aliasName,
/////////////////////////////////////////////////////////////////////////
1:         case AGGREGATE_TYPE: alias.append("DERBY AGGREGATE "); break;
1:         if ( aliasType == AGGREGATE_TYPE )
1:         {
1:             alias.append( params );
1:             alias.append( " " );
1:         }
1:         else if ( aliasType != UDT_TYPE )
/////////////////////////////////////////////////////////////////////////
1:         else if ( aliasType == AGGREGATE_TYPE )
1:         {
1:             alias.append("' ");
1:         }
1:         else if ( aliasType != AGGREGATE_TYPE )
commit:9ce7492
/////////////////////////////////////////////////////////////////////////
1: 	 * @param at10_6 True if the database is at 10.6 or higher
0: 	public static void doProceduresFunctionsAndUDTs(Connection conn, boolean at10_6 )
/////////////////////////////////////////////////////////////////////////
1:         if ( at10_6 )
1:         {
1:             generateDDL( ps, UDT_TYPE ); // UDT_TYPE => for UDTs
1:         }
commit:ef1ecee
/////////////////////////////////////////////////////////////////////////
1: public class DB_Alias
1: {
1:     private static final char UDT_TYPE = 'A';
1:     private static final char PROCEDURE_TYPE = 'P';
1:     private static final char FUNCTION_TYPE = 'F';
1: 	 * Generate the DDL for all stored procedures,
0: 	 * functions, and UDTs in a given database and write it to
0: 	public static void doProceduresFunctionsAndUDTs(Connection conn)
1: 		PreparedStatement ps = conn.prepareStatement
1:             (
1:              "SELECT ALIAS, ALIASINFO, " +
1:              "ALIASID, SCHEMAID, JAVACLASSNAME, SYSTEMALIAS FROM SYS.SYSALIASES " +
1:              "WHERE ALIASTYPE=?");
1:         //
0:         // UDTs come before procedures and functions right now because
1:         // procedures and functions can have args and return values which
1:         // have UDT types. If we add functions to the signatures of UDTs,
1:         // then we will have to do some trickier dependency analysis in order
1:         // to interleave routine and UDT ddl.
1:         //
0:         generateDDL( ps, UDT_TYPE ); // UDT_TYPE => for UDTs
1:         generateDDL( ps, PROCEDURE_TYPE );	// PROCEDURE_TYPE => for PROCEDURES
1: 		generateDDL( ps, FUNCTION_TYPE );	// FUNCTION_TYPE => for FUNCTIONS
1: 
1:         ps.close();
1: 
1:     /* ************************************************
1: 	 * Generate the DDL for the stored procedures,
1: 	 * functions, or UDTs in a given database, depending on the
1: 	 * the received aliasType.
1: 	 * @param rs Result set holding either stored procedures
1: 	 *  or functions.
1: 	 * @param aliasType Indication of whether we're generating
1: 	 *  stored procedures or functions.
1: 	 ****/
1: 	private static void generateDDL(PreparedStatement ps, char aliasType)
1: 		throws SQLException
1: 	{
1:         ps.setString( 1, new String( new char[] { aliasType } ) );
1: 
1:         ResultSet rs = ps.executeQuery();
1: 
1:         generateDDL( rs, aliasType );
1: 
1:         rs.close();
1:     }
1: 
1: 
1: 	 * Generate the DDL for the stored procedures,
1: 	 * functions, or UDTs in a given database, depending on the
/////////////////////////////////////////////////////////////////////////
1:                 switch( aliasType )
1:                 {
1:                 case UDT_TYPE: Logs.reportMessage( "DBLOOK_UDTHeader" ); break;
1:                 case PROCEDURE_TYPE: Logs.reportMessage( "DBLOOK_StoredProcHeader" ); break;
1:                 case FUNCTION_TYPE: Logs.reportMessage( "DBLOOK_FunctionHeader" ); break;
1:                 }
/////////////////////////////////////////////////////////////////////////
0: 			String creationString = createProcFuncOrUDTString(
/////////////////////////////////////////////////////////////////////////
0: 	private static String createProcFuncOrUDTString(String aliasName,
1: 
1:         switch( aliasType )
1:         {
1:         case UDT_TYPE: alias.append( "TYPE " ); break;
1:         case PROCEDURE_TYPE: alias.append("PROCEDURE "); break;
1:         case FUNCTION_TYPE: alias.append("FUNCTION "); break;
1:         }
0:         if ( aliasType != UDT_TYPE )
1:         {
1:             // Just grab the parameter part; we'll get the method name later.
1:             alias.append(params.substring(params.indexOf("("), params.length()));
1:             alias.append(" ");
1:         }
1: 
1:         if ( aliasType == UDT_TYPE )
1:         {
1:             alias.append("' ");
1:             alias.append( params );
1:         }
0:         else
1:         {
1:             alias.append(".");
1:             // Get method name from parameter string fetched above.
1:             alias.append(params.substring(0, params.indexOf("(")));
1:             alias.append("' ");
1:         }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:20cdca3
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:1fa1fd0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Alias
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.dblook;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.DatabaseMetaData;
1: 
1: import java.util.HashMap;
1: import org.apache.derby.tools.dblook;
1: 
0: public class DB_Alias {
1: 
1: 	// Prepared statements use throughout the DDL
1: 	// generation process.
1: 
1: 	/* ************************************************
0: 	 * Generate the DDL for all stored procedures and
0: 	 * functions in a given database and write it to
1: 	 * output via Logs.java.
1: 	 * @param conn Connection to the source database.
1: 	 ****/
1: 
0: 	public static void doProceduresAndFunctions(Connection conn)
1: 		throws SQLException {
1: 
1: 		// First do stored procedures.
1: 		Statement stmt = conn.createStatement();
0: 		ResultSet rs = stmt.executeQuery("SELECT ALIAS, ALIASINFO, " +
0: 			"ALIASID, SCHEMAID, JAVACLASSNAME, SYSTEMALIAS FROM SYS.SYSALIASES " +
0: 			"WHERE ALIASTYPE='P'");
0: 		generateDDL(rs, 'P');	// 'P' => for PROCEDURES
1: 
0: 		// Now do functions.
0: 		rs = stmt.executeQuery("SELECT ALIAS, ALIASINFO, " +
0: 			"ALIASID, SCHEMAID, JAVACLASSNAME, SYSTEMALIAS FROM SYS.SYSALIASES " +
0: 			"WHERE ALIASTYPE='F'");
0: 		generateDDL(rs, 'F');	// 'F' => for FUNCTIONS
1: 
1: 		rs.close();
1: 		stmt.close();
1: 		return;
1: 
1: 	}
1: 
1: 	/* ************************************************
0: 	 * Generate the DDL for either stored procedures or
0: 	 * functions in a given database, depending on the
1: 	 * the received aliasType.
1: 	 * @param rs Result set holding either stored procedures
1: 	 *  or functions.
1: 	 * @param aliasType Indication of whether we're generating
1: 	 *  stored procedures or functions.
1: 	 ****/
1: 	private static void generateDDL(ResultSet rs, char aliasType)
1: 		throws SQLException
1: 	{
1: 
1: 		boolean firstTime = true;
1: 		while (rs.next()) {
1: 
1: 			if (rs.getBoolean(6))
1: 			// it's a system alias, so we ignore it.
1: 				continue;
1: 
1: 			String procSchema = dblook.lookupSchemaId(rs.getString(4));
1: 			if (dblook.isIgnorableSchema(procSchema))
1: 				continue;
1: 
1: 			if (firstTime) {
1: 				Logs.reportString("----------------------------------------------");
0: 				Logs.reportMessage((aliasType == 'P')
0: 					? "DBLOOK_StoredProcHeader"
0: 					: "DBLOOK_FunctionHeader");
1: 				Logs.reportString("----------------------------------------------\n");
1: 			}
1: 
1: 			String aliasName = rs.getString(1);
1: 			String fullName = dblook.addQuotes(
1: 				dblook.expandDoubleQuotes(aliasName));
1: 			fullName = procSchema + "." + fullName;
1: 
0: 			String creationString = createProcOrFuncString(
1: 				fullName, rs, aliasType);
1: 			Logs.writeToNewDDL(creationString);
1: 			Logs.writeStmtEndToNewDDL();
1: 			Logs.writeNewlineToNewDDL();
1: 			firstTime = false;
1: 
1: 		}
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Generate DDL for a specific stored procedure or
1: 	 * function.
1: 	 * @param aliasName Name of the current procedure/function
1: 	 * @param aliasInfo Info about the current procedure/function
1: 	 * @param aliasType Indicator of whether we're generating
1: 	 *  a stored procedure or a function.
1: 	 * @return DDL for the current stored procedure is
1: 	 *   returned, as a String.
1: 	 ****/
1: 
0: 	private static String createProcOrFuncString(String aliasName,
1: 		ResultSet aliasInfo, char aliasType) throws SQLException
1: 	{
1: 
1: 		StringBuffer alias = new StringBuffer("CREATE ");
0: 		if (aliasType == 'P')
0: 			alias.append("PROCEDURE ");
0: 		else if (aliasType == 'F')
0: 			alias.append("FUNCTION ");
1: 		alias.append(aliasName);
1: 		alias.append(" ");
1: 
1: 		String params = aliasInfo.getString(2);
1: 
0: 		// Just grab the parameter part; we'll get the method name later.
0: 		alias.append(params.substring(params.indexOf("("), params.length()));
1: 		alias.append(" ");
1: 
1: 		// Now add the external name.
1: 		alias.append("EXTERNAL NAME '");
1: 		alias.append(aliasInfo.getString(5));
0: 		alias.append(".");
0: 		// Get method name from parameter string fetched above.
0: 		alias.append(params.substring(0, params.indexOf("(")));
0: 		alias.append("' ");
1: 
1: 		return alias.toString();
1: 
1: 	}
1: 
1: 	/* ************************************************
1: 	 * Generate the DDL for all synonyms in a given
1: 	 * database. On successul return, the DDL for the
1: 	 * synonyms has been written to output via Logs.java.
1: 	 * @param conn Connection to the source database.
1: 	 * @return 
1: 	 ****/
1: 	public static void doSynonyms(Connection conn) throws SQLException
1: 	{
1: 		Statement stmt = conn.createStatement();
1: 		ResultSet rs = stmt.executeQuery("SELECT ALIAS, SCHEMAID, " +
1: 			"ALIASINFO, SYSTEMALIAS FROM SYS.SYSALIASES A WHERE ALIASTYPE='S'");
1: 
1: 		boolean firstTime = true;
1: 		while (rs.next()) {
1: 			if (rs.getBoolean(4))
1: 			// it's a system alias, so we ignore it.
1: 				continue;
1: 
1: 			String aliasSchema = dblook.lookupSchemaId(rs.getString(2));
1: 			if (dblook.isIgnorableSchema(aliasSchema))
1: 				continue;
1: 
1: 			if (firstTime) {
1: 				Logs.reportString("----------------------------------------------");
1: 				Logs.reportMessage("DBLOOK_SynonymHeader");
1: 				Logs.reportString("----------------------------------------------\n");
1: 			}
1: 
1: 			String aliasName = rs.getString(1);
1: 			String aliasFullName = dblook.addQuotes(
1: 				dblook.expandDoubleQuotes(aliasName));
1: 			aliasFullName = aliasSchema + "." + aliasFullName;
1: 
1: 			Logs.writeToNewDDL("CREATE SYNONYM "+aliasFullName+" FOR "+rs.getString(3));
1: 			Logs.writeStmtEndToNewDDL();
1: 			Logs.writeNewlineToNewDDL();
1: 			firstTime = false;
1: 		}
1: 
1: 		rs.close();
1: 		stmt.close();
1: 		return;
1: 
1: 	}
1: }
============================================================================