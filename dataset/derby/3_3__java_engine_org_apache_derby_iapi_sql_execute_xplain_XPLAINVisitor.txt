1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.iapi.sql.execute.xplain;
1:48a9884: 
1:48a9884: import java.sql.SQLException;
1:48a9884: import org.apache.derby.iapi.error.StandardException;
1:48a9884: import org.apache.derby.iapi.sql.Activation;
1:48a9884: import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
1:5825332: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
1:48a9884: /**
1:48a9884:  * Classes, which implement this interface have the ability to explain the
1:48a9884:  * gathered ResultSetStatistics. A Visitor pattern is used to traverse the 
1:48a9884:  * ResultSetStatistics tree and to extract the required information. Classes 
1:48a9884:  * implementing this interface are responsible about what they extract 
1:48a9884:  * and what will be done with the extracted information.
1:48a9884:  * This approach allows easy representaion extensions of the statistics, 
1:48a9884:  * e.g. an XML representation. 
1:48a9884:  *
1:48a9884:  */
1:48a9884: public interface XPLAINVisitor {
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * Call this method to reset the visitor for a new run over the 
1:48a9884:      * statistics. A default implementation should call this method
1:48a9884:      * automatically at first of a call of doXPLAIN(). 
1:48a9884:      */
1:48a9884:     public void reset();
1:48a9884:     
1:48a9884:     /**
1:48a9884:      * This method is the hook method which is called from the TopResultSet.
1:48a9884:      * It starts the explanation of the current ResultSetStatistics tree 
1:48a9884:      * and keeps the information during one explain run.
1:48a9884:      */
1:48a9884:     public void doXPLAIN(RunTimeStatistics rss, Activation activation)
1:48a9884:         throws StandardException;
1:48a9884: 
1:48a9884:     /**
1:48a9884:      * This is the Visitor hook method, which gets called from each 
1:48a9884:      * ResultSetStatistics. It depends on the sub-class implementation of this
1:48a9884:      * interface, to describe the behaviour of the explanation facility. <br/>
1:48a9884:      * To be easily extendable with new explain representation methods, 
1:48a9884:      * just implement this interface and provide the new behaviour. 
1:48a9884:      * @param statistics the statistics, which want to get explained.
1:48a9884:      */
1:48a9884:     public void visit(ResultSetStatistics statistics);
1:48a9884:     
1:48a9884:     /**
1:48a9884:      * This method informs the visitor about the number of children. It has to 
1:48a9884:      * be called first! by the different explainable nodes before the visit 
1:48a9884:      * method of the visitor gets called. Each node knows how many children he has. 
1:48a9884:      * The visitor can use this information to resolve the relationship of the 
1:48a9884:      * current explained node to above nodes. Due to the top-down, pre-order, 
1:48a9884:      * depth-first traversal of the tree, this information can directly 
1:48a9884:      * be exploited.  
1:48a9884:      * @param noChildren the number of children of the current explained node.
1:48a9884:      */
1:48a9884:     public void setNumberOfChildren(int noChildren);
1:48a9884:     
1:48a9884: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5825332
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.ResultSetStatistics;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.iapi.sql.execute.xplain;
1: 
1: import java.sql.SQLException;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
0: import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
1: /**
1:  * Classes, which implement this interface have the ability to explain the
1:  * gathered ResultSetStatistics. A Visitor pattern is used to traverse the 
1:  * ResultSetStatistics tree and to extract the required information. Classes 
1:  * implementing this interface are responsible about what they extract 
1:  * and what will be done with the extracted information.
1:  * This approach allows easy representaion extensions of the statistics, 
1:  * e.g. an XML representation. 
1:  *
1:  */
1: public interface XPLAINVisitor {
1: 
1:     /**
1:      * Call this method to reset the visitor for a new run over the 
1:      * statistics. A default implementation should call this method
1:      * automatically at first of a call of doXPLAIN(). 
1:      */
1:     public void reset();
1:     
1:     /**
1:      * This method is the hook method which is called from the TopResultSet.
1:      * It starts the explanation of the current ResultSetStatistics tree 
1:      * and keeps the information during one explain run.
1:      */
1:     public void doXPLAIN(RunTimeStatistics rss, Activation activation)
1:         throws StandardException;
1: 
1:     /**
1:      * This is the Visitor hook method, which gets called from each 
1:      * ResultSetStatistics. It depends on the sub-class implementation of this
1:      * interface, to describe the behaviour of the explanation facility. <br/>
1:      * To be easily extendable with new explain representation methods, 
1:      * just implement this interface and provide the new behaviour. 
1:      * @param statistics the statistics, which want to get explained.
1:      */
1:     public void visit(ResultSetStatistics statistics);
1:     
1:     /**
1:      * This method informs the visitor about the number of children. It has to 
1:      * be called first! by the different explainable nodes before the visit 
1:      * method of the visitor gets called. Each node knows how many children he has. 
1:      * The visitor can use this information to resolve the relationship of the 
1:      * current explained node to above nodes. Due to the top-down, pre-order, 
1:      * depth-first traversal of the tree, this information can directly 
1:      * be exploited.  
1:      * @param noChildren the number of children of the current explained node.
1:      */
1:     public void setNumberOfChildren(int noChildren);
1:     
1: }
============================================================================