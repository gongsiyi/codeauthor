1:ee2a860: /*
1:ee2a860:  * Derby - class org.apache.derby.impl.drda.Pkgnamcsn
2:ee2a860:  *
1:59e5225:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:  * contributor license agreements.  See the NOTICE file distributed with
1:59e5225:  * this work for additional information regarding copyright ownership.
1:59e5225:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:  * (the "License"); you may not use this file except in compliance with
1:59e5225:  * the License.  You may obtain a copy of the License at
1:ee2a860:  *
1:ee2a860:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ee2a860:  *
1:ee2a860:  * Unless required by applicable law or agreed to in writing, software
1:ee2a860:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee2a860:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
1:ee2a860:  * implied. See the License for the specific language governing
1:ee2a860:  * permissions and limitations under the License.
1:ee2a860:  *
1:ee2a860:  */
1:ee2a860: 
1:ee2a860: package org.apache.derby.impl.drda;
1:ee2a860: 
1:ee2a860: /**
1:ee2a860:  * Class representing a PKGNAMCSN object (RDB Package Name,
1:ee2a860:  * Consistency Token, and Section Number).
1:ee2a860:  */
1:ee2a860: final class Pkgnamcsn {
1:ee2a860:     /** Database name. */
1:ee2a860:     private final String rdbnam;
1:ee2a860:     /** RDB Package Collection Identifier. */
1:ee2a860:     private final String rdbcolid;
1:ee2a860:     /** RDB Package Identifier. */
1:ee2a860:     private final String pkgid;
1:ee2a860:     /** RDB Package Section Number. */
1:ee2a860:     private final int pkgsn;
1:ee2a860:     /** RDB Package Consistency Token. */
1:ee2a860:     private final ConsistencyToken pkgcnstkn;
1:ee2a860: 
1:ee2a860:     /** Object which can be used for hashing when the consistency
1:ee2a860:      * token can be ignored. */
1:ee2a860:     private Object statementKey = null;
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Create a new <code>Pkgnamcsn</code> instance.
1:ee2a860:      *
1:ee2a860:      * @param rdbnam database name
1:ee2a860:      * @param rdbcolid RDB Package Collection Identifier
1:ee2a860:      * @param pkgid RDB Package Identifier
1:ee2a860:      * @param pkgsn RDB Package Section Number
1:ee2a860:      * @param pkgcnstkn RDB Package Consistency Token
1:ee2a860:      */
1:7df5ffe:     Pkgnamcsn(String rdbnam, String rdbcolid, String pkgid,
1:ee2a860:                      int pkgsn, ConsistencyToken pkgcnstkn) {
1:ee2a860:         this.rdbnam = rdbnam;
1:ee2a860:         this.rdbcolid = rdbcolid;
1:ee2a860:         this.pkgid = pkgid;
1:ee2a860:         this.pkgsn = pkgsn;
1:ee2a860:         this.pkgcnstkn = pkgcnstkn;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Get RDBNAM.
1:ee2a860:      *
1:ee2a860:      * @return database name
1:ee2a860:      */
1:ee2a860:     public String getRdbnam() {
1:ee2a860:         return rdbnam;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Get RDBCOLID.
1:ee2a860:      *
1:ee2a860:      * @return RDB Package Collection Identifier
1:ee2a860:      */
1:ee2a860:     public String getRdbcolid() {
1:ee2a860:         return rdbcolid;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Get PKGID.
1:ee2a860:      *
1:ee2a860:      * @return RDB Package Identifier
1:ee2a860:      */
1:ee2a860:     public String getPkgid() {
1:ee2a860:         return pkgid;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Get PKGSN.
1:ee2a860:      *
1:ee2a860:      * @return RDB Package Section Number
1:ee2a860:      */
1:ee2a860:     public int getPkgsn() {
1:ee2a860:         return pkgsn;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Get PKGCNSTKN.
1:ee2a860:      *
1:ee2a860:      * @return RDB Package Consistency Token
1:ee2a860:      */
1:ee2a860:     public ConsistencyToken getPkgcnstkn() {
1:ee2a860:         return pkgcnstkn;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Return string representation.
1:ee2a860:      *
1:ee2a860:      * @return a <code>String</code> value
1:ee2a860:      */
1:ee2a860:     public String toString() {
1:ee2a860:         return super.toString() + "(\"" + rdbnam + "\", \"" +
1:ee2a860:             rdbcolid + "\", \"" + pkgid + "\", " + pkgsn +
1:ee2a860:             ", " + pkgcnstkn + ")";
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Return an object which can be used as a key in a hash table
1:ee2a860:      * when the value of the consistency token can be ignored. The
1:ee2a860:      * object has <code>equals()</code> and <code>hashCode()</code>
1:ee2a860:      * methods which consider other objects returned from
1:ee2a860:      * <code>getStatementKey()</code> equal if RDBNAM, RDBCOLID, PKGID
1:ee2a860:      * and PKGSN are equal.
1:ee2a860:      *
1:ee2a860:      * @return an <code>Object</code> value
1:ee2a860:      * @see Database#getDRDAStatement(Pkgnamcsn)
1:ee2a860:      * @see Database#storeStatement(DRDAStatement)
1:ee2a860:      * @see Database#removeStatement(DRDAStatement)
1:ee2a860:      */
1:ee2a860:     public Object getStatementKey() {
1:ee2a860:         if (statementKey == null) {
1:ee2a860:             statementKey = new StatementKey();
1:ee2a860:         }
1:ee2a860:         return statementKey;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Class for objects used as keys in the hash table
1:ee2a860:      * <code>stmtTable</code> found in the <code>Database</code>
1:ee2a860:      * class. The <code>equals()</code> and <code>hashCode()</code>
1:ee2a860:      * methods consider other <code>StatementKey</code> objects equal
1:ee2a860:      * to this object if they are associated with a
1:ee2a860:      * <code>Pkgnamcsn</code> object with the same values for RDBNAM,
1:ee2a860:      * RDBCOLID, PKGID and PKGSN.
1:ee2a860:      *
1:ee2a860:      * @see Database
1:ee2a860:      */
1:ee2a860:     private final class StatementKey {
1:ee2a860:         /** Cached hash code. */
1:ee2a860:         private int hash = 0;
1:ee2a860:         /**
1:ee2a860:          * Check whether RDBNAM, RDBCOLID, PKGID and PKGSN of another
1:ee2a860:          * <code>StatementKey</code> object matches this object.
1:ee2a860:          *
1:ee2a860:          * @param obj another object
1:ee2a860:          * @return true if the objects are equal
1:ee2a860:          */
1:ee2a860:         public boolean equals(Object obj) {
1:ee2a860:             if (StatementKey.this == obj) {
1:ee2a860:                 return true;
1:ee2a860:             } else if (obj instanceof StatementKey) {
1:ee2a860:                 return ((StatementKey) obj).isKeyFor(Pkgnamcsn.this);
1:ee2a860:             } else {
1:ee2a860:                 return false;
1:ee2a860:             }
1:ee2a860:         }
1:ee2a860:         /**
1:ee2a860:          * Calculate hash code.
1:ee2a860:          *
1:ee2a860:          * @return hash code
1:ee2a860:          */
1:ee2a860:         public int hashCode() {
1:ee2a860:             if (hash == 0) {
1:ee2a860:                 hash =
1:ee2a860:                     rdbnam.hashCode() ^
1:ee2a860:                     rdbcolid.hashCode() ^
1:ee2a860:                     pkgid.hashCode() ^
1:ee2a860:                     pkgsn;
1:ee2a860:             }
1:ee2a860:             return hash;
1:ee2a860:         }
1:ee2a860:         /**
1:ee2a860:          * Check whether this object can be used as a key for a
1:ee2a860:          * <code>Pkgnamcsn</code> object.
1:ee2a860:          *
1:ee2a860:          * @param p a <code>Pkgnamcsn</code> value
1:ee2a860:          * @return true if this object can be key for the
1:ee2a860:          * <code>Pkgnamcsn</code> object
1:ee2a860:          */
1:ee2a860:         private boolean isKeyFor(Pkgnamcsn p) {
1:ee2a860:             return
1:ee2a860:                 rdbnam.equals(p.rdbnam) &&
1:ee2a860:                 rdbcolid.equals(p.rdbcolid) &&
1:ee2a860:                 pkgid.equals(p.pkgid) &&
1:ee2a860:                 pkgsn == p.pkgsn;
1:ee2a860:         }
1:ee2a860:     }
1:ee2a860: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
1:     Pkgnamcsn(String rdbnam, String rdbcolid, String pkgid,
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:ee2a860
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - class org.apache.derby.impl.drda.Pkgnamcsn
1:  *
0:  * Copyright 2005 The Apache Software Foundation or its licensors, as
0:  * applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you
0:  * may not use this file except in compliance with the License. You
0:  * may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
1:  * implied. See the License for the specific language governing
1:  * permissions and limitations under the License.
1:  *
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
1: /**
1:  * Class representing a PKGNAMCSN object (RDB Package Name,
1:  * Consistency Token, and Section Number).
1:  */
1: final class Pkgnamcsn {
1:     /** Database name. */
1:     private final String rdbnam;
1:     /** RDB Package Collection Identifier. */
1:     private final String rdbcolid;
1:     /** RDB Package Identifier. */
1:     private final String pkgid;
1:     /** RDB Package Section Number. */
1:     private final int pkgsn;
1:     /** RDB Package Consistency Token. */
1:     private final ConsistencyToken pkgcnstkn;
1: 
1:     /** Object which can be used for hashing when the consistency
1:      * token can be ignored. */
1:     private Object statementKey = null;
1: 
1:     /**
1:      * Create a new <code>Pkgnamcsn</code> instance.
1:      *
1:      * @param rdbnam database name
1:      * @param rdbcolid RDB Package Collection Identifier
1:      * @param pkgid RDB Package Identifier
1:      * @param pkgsn RDB Package Section Number
1:      * @param pkgcnstkn RDB Package Consistency Token
1:      */
0:     public Pkgnamcsn(String rdbnam, String rdbcolid, String pkgid,
1:                      int pkgsn, ConsistencyToken pkgcnstkn) {
1:         this.rdbnam = rdbnam;
1:         this.rdbcolid = rdbcolid;
1:         this.pkgid = pkgid;
1:         this.pkgsn = pkgsn;
1:         this.pkgcnstkn = pkgcnstkn;
1:     }
1: 
1:     /**
1:      * Get RDBNAM.
1:      *
1:      * @return database name
1:      */
1:     public String getRdbnam() {
1:         return rdbnam;
1:     }
1: 
1:     /**
1:      * Get RDBCOLID.
1:      *
1:      * @return RDB Package Collection Identifier
1:      */
1:     public String getRdbcolid() {
1:         return rdbcolid;
1:     }
1: 
1:     /**
1:      * Get PKGID.
1:      *
1:      * @return RDB Package Identifier
1:      */
1:     public String getPkgid() {
1:         return pkgid;
1:     }
1: 
1:     /**
1:      * Get PKGSN.
1:      *
1:      * @return RDB Package Section Number
1:      */
1:     public int getPkgsn() {
1:         return pkgsn;
1:     }
1: 
1:     /**
1:      * Get PKGCNSTKN.
1:      *
1:      * @return RDB Package Consistency Token
1:      */
1:     public ConsistencyToken getPkgcnstkn() {
1:         return pkgcnstkn;
1:     }
1: 
1:     /**
1:      * Return string representation.
1:      *
1:      * @return a <code>String</code> value
1:      */
1:     public String toString() {
1:         return super.toString() + "(\"" + rdbnam + "\", \"" +
1:             rdbcolid + "\", \"" + pkgid + "\", " + pkgsn +
1:             ", " + pkgcnstkn + ")";
1:     }
1: 
1:     /**
1:      * Return an object which can be used as a key in a hash table
1:      * when the value of the consistency token can be ignored. The
1:      * object has <code>equals()</code> and <code>hashCode()</code>
1:      * methods which consider other objects returned from
1:      * <code>getStatementKey()</code> equal if RDBNAM, RDBCOLID, PKGID
1:      * and PKGSN are equal.
1:      *
1:      * @return an <code>Object</code> value
1:      * @see Database#getDRDAStatement(Pkgnamcsn)
1:      * @see Database#storeStatement(DRDAStatement)
1:      * @see Database#removeStatement(DRDAStatement)
1:      */
1:     public Object getStatementKey() {
1:         if (statementKey == null) {
1:             statementKey = new StatementKey();
1:         }
1:         return statementKey;
1:     }
1: 
1:     /**
1:      * Class for objects used as keys in the hash table
1:      * <code>stmtTable</code> found in the <code>Database</code>
1:      * class. The <code>equals()</code> and <code>hashCode()</code>
1:      * methods consider other <code>StatementKey</code> objects equal
1:      * to this object if they are associated with a
1:      * <code>Pkgnamcsn</code> object with the same values for RDBNAM,
1:      * RDBCOLID, PKGID and PKGSN.
1:      *
1:      * @see Database
1:      */
1:     private final class StatementKey {
1:         /** Cached hash code. */
1:         private int hash = 0;
1:         /**
1:          * Check whether RDBNAM, RDBCOLID, PKGID and PKGSN of another
1:          * <code>StatementKey</code> object matches this object.
1:          *
1:          * @param obj another object
1:          * @return true if the objects are equal
1:          */
1:         public boolean equals(Object obj) {
1:             if (StatementKey.this == obj) {
1:                 return true;
1:             } else if (obj instanceof StatementKey) {
1:                 return ((StatementKey) obj).isKeyFor(Pkgnamcsn.this);
1:             } else {
1:                 return false;
1:             }
1:         }
1:         /**
1:          * Calculate hash code.
1:          *
1:          * @return hash code
1:          */
1:         public int hashCode() {
1:             if (hash == 0) {
1:                 hash =
1:                     rdbnam.hashCode() ^
1:                     rdbcolid.hashCode() ^
1:                     pkgid.hashCode() ^
1:                     pkgsn;
1:             }
1:             return hash;
1:         }
1:         /**
1:          * Check whether this object can be used as a key for a
1:          * <code>Pkgnamcsn</code> object.
1:          *
1:          * @param p a <code>Pkgnamcsn</code> value
1:          * @return true if this object can be key for the
1:          * <code>Pkgnamcsn</code> object
1:          */
1:         private boolean isKeyFor(Pkgnamcsn p) {
1:             return
1:                 rdbnam.equals(p.rdbnam) &&
1:                 rdbcolid.equals(p.rdbcolid) &&
1:                 pkgid.equals(p.pkgid) &&
1:                 pkgsn == p.pkgsn;
1:         }
1:     }
1: }
============================================================================