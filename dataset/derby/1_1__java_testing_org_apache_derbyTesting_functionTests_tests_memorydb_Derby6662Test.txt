1:656a1ad: /*
1:656a1ad:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.Derby6662Test
1:656a1ad: 
1:656a1ad:    Licensed to the Apache Software Foundation (ASF) under one
1:656a1ad:    or more contributor license agreements.  See the NOTICE file
1:656a1ad:    distributed with this work for additional information
1:656a1ad:    regarding copyright ownership.  The ASF licenses this file
1:656a1ad:    to you under the Apache License, Version 2.0 (the
1:656a1ad:    "License"); you may not use this file except in compliance
1:656a1ad:    with the License.  You may obtain a copy of the License at
1:656a1ad: 
1:656a1ad:      http://www.apache.org/licenses/LICENSE-2.0
1:656a1ad: 
1:656a1ad:    Unless required by applicable law or agreed to in writing,
1:656a1ad:    software distributed under the License is distributed on an
1:656a1ad:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:656a1ad:    KIND, either express or implied.  See the License for the
1:656a1ad:    specific language governing permissions and limitations
1:656a1ad:    under the License.
1:656a1ad:  */
1:656a1ad: 
1:656a1ad: package org.apache.derbyTesting.functionTests.tests.memorydb;
1:656a1ad: 
1:656a1ad: import junit.framework.Test;
1:656a1ad: import java.sql.Connection;
1:656a1ad: import java.sql.DatabaseMetaData;
1:656a1ad: import java.sql.DriverManager;
1:656a1ad: import java.sql.SQLException;
1:656a1ad: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:656a1ad: import org.apache.derbyTesting.junit.TestConfiguration;
1:656a1ad: 
1:656a1ad: public class Derby6662Test extends BaseJDBCTestCase {
1:656a1ad:     
1:656a1ad:     public Derby6662Test(String name) { super(name); }
1:656a1ad:     
1:656a1ad:     public static Test suite() {
1:656a1ad:       return TestConfiguration.defaultSuite(Derby6662Test.class);
1:656a1ad:     }
1:656a1ad:     
1:656a1ad:     /** Dispose of objects after testing. */
1:656a1ad:     protected void tearDown() throws Exception
1:656a1ad:     {
1:656a1ad:       super.tearDown();
1:f0d43ce:       dropInMemoryDb();
1:656a1ad:     }
1:656a1ad:     
1:656a1ad:     public void testDatabaseMetaDataCalls() throws SQLException
1:656a1ad:     {
1:656a1ad:         DatabaseMetaData dmd = getDMD();
1:656a1ad:         assertFalse(dmd.usesLocalFilePerTable());
1:656a1ad:         assertFalse(dmd.usesLocalFiles());
1:656a1ad:     }
1:656a1ad:     
1:f0d43ce:     public void testOptionalToolMetaData() throws SQLException
1:f0d43ce:     {
1:f0d43ce:         Connection conn = obtainConnection();
1:f0d43ce:         // register the database metadata wrapper
1:f0d43ce:         goodStatement( conn, "call syscs_util.syscs_register_tool" +
1:f0d43ce:             "('databaseMetaData', true)");
1:f0d43ce:         // run the routines
1:f0d43ce:         assertResults(conn,"values usesLocalFiles()",
1:f0d43ce:              new String[][]{ { "false" }},false);
1:f0d43ce:         assertResults(conn,"values usesLocalFilePerTable()",
1:f0d43ce:              new String[][]{ { "false" }},false);
1:f0d43ce:         // unregister the database metadata wrapper
1:f0d43ce:         goodStatement( conn, "call syscs_util.syscs_register_tool" +
1:f0d43ce:             "('databaseMetaData', false)");
1:f0d43ce:     }
1:f0d43ce:     
1:656a1ad:     private DatabaseMetaData getDMD() throws SQLException
1:656a1ad:     {
1:656a1ad:         return obtainConnection().getMetaData();
1:656a1ad:     }
1:656a1ad:     
1:656a1ad:     /**
1:656a1ad:      * Obtains a connection to an in-memory database.
1:656a1ad:      *
1:656a1ad:      * @return A connection to an in-memory database.
1:656a1ad:      * @throws SQLException if obtaining the connection fails
1:656a1ad:      */
1:656a1ad:     private Connection obtainConnection()
1:656a1ad:           throws SQLException {
1:656a1ad:       try {
1:656a1ad:           if (usingDerbyNetClient()) {
1:656a1ad:               Class.forName("org.apache.derby.jdbc.ClientDriver");
1:656a1ad:           } else {
1:656a1ad:               Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:656a1ad:           }
1:656a1ad:       } catch (Exception e) {
1:656a1ad:           SQLException sqle =  new SQLException(e.getMessage());
1:656a1ad:           sqle.initCause(e);
1:656a1ad:           throw sqle;
1:656a1ad:       }
1:656a1ad:       StringBuffer sb = constructUrl().append(";create=true");
1:656a1ad:       return DriverManager.getConnection(sb.toString());
1:656a1ad:     }
1:656a1ad:     
1:656a1ad:     /**
1:656a1ad:      * Drops the database used by the test.
1:656a1ad:      *
1:656a1ad:      * @throws SQLException if dropping the database fails
1:656a1ad:      */
1:656a1ad:     private void dropInMemoryDb() throws SQLException {
1:656a1ad:         StringBuffer sb = constructUrl().append(";drop=true");
1:656a1ad:         try {
1:656a1ad:             DriverManager.getConnection(sb.toString());
1:656a1ad:             fail("Dropping database should have raised exception.");
1:656a1ad:         } catch (SQLException sqle) {
1:656a1ad:             assertSQLState("08006", sqle);
1:656a1ad:         }
1:656a1ad:     }
1:656a1ad:     
1:656a1ad:     /**
1:656a1ad:      * Constructs the default URL for the in-memory test database.
1:656a1ad:      *
1:656a1ad:      * @return A database URL (without any connection attributes).
1:656a1ad:      */
1:656a1ad:     private StringBuffer constructUrl() {
1:656a1ad:         StringBuffer sb = new StringBuffer("jdbc:derby:");
1:656a1ad:         if (usingEmbedded()) {
1:656a1ad:             sb.append("memory:");
1:656a1ad:         } else {
1:656a1ad:             // This is a hack. Change this when proper support for the in-memory
1:656a1ad:             // back end has been implemented.
1:656a1ad:             sb.append("//");
1:656a1ad:             sb.append(TestConfiguration.getCurrent().getHostName());
1:656a1ad:             sb.append(':');
1:656a1ad:             sb.append(TestConfiguration.getCurrent().getPort());
1:656a1ad:             sb.append('/');
1:656a1ad:             sb.append("memory:");
1:656a1ad:         }
1:d28e0af:         sb.append("DBMDTestDb");
1:656a1ad:         return sb;
1:656a1ad:     }
1:656a1ad: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:d28e0af
/////////////////////////////////////////////////////////////////////////
1:         sb.append("DBMDTestDb");
commit:f0d43ce
/////////////////////////////////////////////////////////////////////////
1:       dropInMemoryDb();
/////////////////////////////////////////////////////////////////////////
1:     public void testOptionalToolMetaData() throws SQLException
1:     {
1:         Connection conn = obtainConnection();
1:         // register the database metadata wrapper
1:         goodStatement( conn, "call syscs_util.syscs_register_tool" +
1:             "('databaseMetaData', true)");
1:         // run the routines
1:         assertResults(conn,"values usesLocalFiles()",
1:              new String[][]{ { "false" }},false);
1:         assertResults(conn,"values usesLocalFilePerTable()",
1:              new String[][]{ { "false" }},false);
1:         // unregister the database metadata wrapper
1:         goodStatement( conn, "call syscs_util.syscs_register_tool" +
1:             "('databaseMetaData', false)");
1:     }
1:     
commit:656a1ad
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.Derby6662Test
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memorydb;
1: 
1: import junit.framework.Test;
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class Derby6662Test extends BaseJDBCTestCase {
1:     
1:     public Derby6662Test(String name) { super(name); }
1:     
1:     public static Test suite() {
1:       return TestConfiguration.defaultSuite(Derby6662Test.class);
1:     }
1:     
1:     /** Dispose of objects after testing. */
1:     protected void tearDown() throws Exception
1:     {
1:       super.tearDown();
1:     }
1:     
1:     public void testDatabaseMetaDataCalls() throws SQLException
1:     {
1:         DatabaseMetaData dmd = getDMD();
1:         assertFalse(dmd.usesLocalFilePerTable());
1:         assertFalse(dmd.usesLocalFiles());
1:     }
1:     
1:     private DatabaseMetaData getDMD() throws SQLException
1:     {
1:         return obtainConnection().getMetaData();
1:     }
1:     
1:     /**
1:      * Obtains a connection to an in-memory database.
1:      *
1:      * @return A connection to an in-memory database.
1:      * @throws SQLException if obtaining the connection fails
1:      */
1:     private Connection obtainConnection()
1:           throws SQLException {
1:       try {
1:           if (usingDerbyNetClient()) {
1:               Class.forName("org.apache.derby.jdbc.ClientDriver");
1:           } else {
1:               Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:           }
1:       } catch (Exception e) {
1:           SQLException sqle =  new SQLException(e.getMessage());
1:           sqle.initCause(e);
1:           throw sqle;
1:       }
1:       StringBuffer sb = constructUrl().append(";create=true");
1:       return DriverManager.getConnection(sb.toString());
1:     }
1:     
1:     /**
1:      * Drops the database used by the test.
1:      *
1:      * @throws SQLException if dropping the database fails
1:      */
1:     private void dropInMemoryDb() throws SQLException {
1:         StringBuffer sb = constructUrl().append(";drop=true");
1:         try {
1:             DriverManager.getConnection(sb.toString());
1:             fail("Dropping database should have raised exception.");
1:         } catch (SQLException sqle) {
1:             assertSQLState("08006", sqle);
1:         }
1:     }
1:     
1:     /**
1:      * Constructs the default URL for the in-memory test database.
1:      *
1:      * @return A database URL (without any connection attributes).
1:      */
1:     private StringBuffer constructUrl() {
1:         StringBuffer sb = new StringBuffer("jdbc:derby:");
1:         if (usingEmbedded()) {
1:             sb.append("memory:");
1:         } else {
1:             // This is a hack. Change this when proper support for the in-memory
1:             // back end has been implemented.
1:             sb.append("//");
1:             sb.append(TestConfiguration.getCurrent().getHostName());
1:             sb.append(':');
1:             sb.append(TestConfiguration.getCurrent().getPort());
1:             sb.append('/');
1:             sb.append("memory:");
1:         }
0:         sb.append("MogTestDb");
1:         return sb;
1:     }
1: }
============================================================================