1:3330126: /*
6:3330126:  
1:3330126:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.Driver40UnbootedTest
1:3330126: 
1:3330126:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3330126:    contributor license agreements.  See the NOTICE file distributed with
1:3330126:    this work for additional information regarding copyright ownership.
1:3330126:    The ASF licenses this file to you under the Apache License, Version 2.0
1:3330126:    (the "License"); you may not use this file except in compliance with
1:3330126:    the License.  You may obtain a copy of the License at
1:3330126:  
1:3330126:       http://www.apache.org/licenses/LICENSE-2.0
1:3330126:  
1:3330126:    Unless required by applicable law or agreed to in writing, software
1:3330126:    distributed under the License is distributed on an "AS IS" BASIS,
1:3330126:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3330126:    See the License for the specific language governing permissions and
1:3330126:    limitations under the License.
1:3330126:  
1:3330126:  */
1:3330126: 
1:3330126: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:3330126: 
1:3330126: import java.sql.Driver;
1:3330126: import java.sql.DriverManager;
1:3330126: import java.sql.SQLFeatureNotSupportedException;
1:3330126: import junit.framework.Test;
1:3330126: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:d1a4768: import org.apache.derbyTesting.junit.JDBC;
1:3330126: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.SpawnedProcess;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:3330126: 
1:3330126: 
1:3330126: /**
1:3330126:  * Test that getParentLogger() returns the correct kind of exception when
1:3330126:  * the engine is not booted.
1:3330126:  */
1:3330126: 
1:3330126: public class Driver40UnbootedTest extends BaseJDBCTestCase
1:3330126: {
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126:     //
1:3330126:     // CONSTANTS
1:3330126:     //
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126: 
1:3330126:     private static  final   String  SUCCESS = "Success";
1:3330126: 
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126:     //
1:3330126:     // STATE
1:3330126:     //
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126: 
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126:     //
1:3330126:     // CONSTRUCTOR
1:3330126:     //
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126: 
1:3330126:     public Driver40UnbootedTest(String name) { super( name ); }
1:3330126: 
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126:     //
1:3330126:     // JUnit BEHAVIOR
1:3330126:     //
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126: 
1:3330126:     /**
1:3330126:      * Return suite with all tests of the class.
1:3330126:      */
1:3330126:     public static Test suite()
1:3330126:     {
1:d1a4768:         if (JDBC.vmSupportsJSR169())
1:d1a4768:         {
1:1ae02c9:             return new BaseTestSuite(
1:d1a4768:                 "DriverTest tests java.sql.Driver, not supported with JSR169");
1:d1a4768:         }
1:d1a4768:         
1:3330126:         Test test = TestConfiguration.embeddedSuite(Driver40UnbootedTest.class);
1:3330126: 
1:3330126:         return SecurityManagerSetup.noSecurityManager( test );
1:3330126:     }
1:3330126:    
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126:     //
1:3330126:     // ENTRY POINT
1:3330126:     //
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126: 
1:3330126:     /**
1:3330126:      * <p>
1:3330126:      * This entry point is used to run a separate java process in order to verify
1:3330126:      * that the correct exception is being raised by getParentLogger() when the
1:3330126:      * engine hasn't been booted yet.
1:3330126:      * </p>
1:3330126:      */
1:3330126:     public  static  void    main( String[] args )  throws Exception
1:3330126:     {
1:3330126:         Driver  embeddedDriver = DriverManager.getDriver( "jdbc:derby:" );
1:3330126:         Wrapper41Driver embeddedWrapper = new Wrapper41Driver( embeddedDriver );
1:3330126: 
1:3330126:         String  statusMessage = SUCCESS;
1:3330126:         
1:3330126:         try {
1:3330126:             embeddedWrapper.getParentLogger();
1:3330126:             statusMessage = "getParentLogger() unexpectedly succeeded";
1:3330126:         }
1:3330126:         catch (Exception se)
1:3330126:         {
1:3330126:             if ( !( se instanceof SQLFeatureNotSupportedException ) )
1:3330126:             {
1:3330126:                 statusMessage = "Exception was not a SQLFeatureNotSupportedException. It was a " + se.getClass().getName();
1:3330126:             }
1:3330126:         }
1:3330126: 
1:3330126:         System.out.print( statusMessage );
1:3330126:     }
1:3330126: 
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126:     //
1:3330126:     // TESTS
1:3330126:     //
1:3330126:     ///////////////////////////////////////////////////////////////////////////////////
1:3330126: 
1:3330126: 
1:3330126:     /**
1:3330126:      * <p>
1:3330126:      * Test that getParentLogger() raises the right exception even if the engine
1:3330126:      * isn't booted.
1:3330126:      * </p>
1:3330126:      */
1:3330126:     public void test_notBooted() throws Exception
1:3330126:     {
1:3330126:         if ( !getTestConfiguration().loadingFromJars() ) { return ; }
1:3330126:         
1:bdd8f6d:         String[] command = {
1:bdd8f6d:             "-Demma.verbosity.level=silent",
1:bdd8f6d:             getClass().getName()
1:bdd8f6d:         };
1:3330126: 
1:bdd8f6d:         Process process = execJavaCmd(command);
1:3330126:         
1:3330126:         SpawnedProcess spawned = new SpawnedProcess( process, "UnbootedTest" );
1:3330126:         
1:3330126:         // Ensure it completes without failures.
1:04846d1:         assertEquals(0, spawned.complete());
1:3330126: 
1:3330126:         assertEquals( SUCCESS, spawned.getFullServerOutput() );
1:3330126:     }
1:3330126: 
1:3330126: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.SpawnedProcess;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:04846d1
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, spawned.complete());
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:bdd8f6d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         String[] command = {
1:             "-Demma.verbosity.level=silent",
1:             getClass().getName()
1:         };
1:         Process process = execJavaCmd(command);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:d1a4768
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJSR169())
1:         {
0:             return new TestSuite(
1:                 "DriverTest tests java.sql.Driver, not supported with JSR169");
1:         }
1:         
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3330126
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.Driver40UnbootedTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.sql.Driver;
1: import java.sql.DriverManager;
0: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.SpawnedProcess;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Test that getParentLogger() returns the correct kind of exception when
1:  * the engine is not booted.
1:  */
1: 
1: public class Driver40UnbootedTest extends BaseJDBCTestCase
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String  SUCCESS = "Success";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public Driver40UnbootedTest(String name) { super( name ); }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return suite with all tests of the class.
1:      */
1:     public static Test suite()
1:     {
1:         Test test = TestConfiguration.embeddedSuite(Driver40UnbootedTest.class);
1: 
1:         return SecurityManagerSetup.noSecurityManager( test );
1:     }
1:    
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ENTRY POINT
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * This entry point is used to run a separate java process in order to verify
1:      * that the correct exception is being raised by getParentLogger() when the
1:      * engine hasn't been booted yet.
1:      * </p>
1:      */
1:     public  static  void    main( String[] args )  throws Exception
1:     {
1:         Driver  embeddedDriver = DriverManager.getDriver( "jdbc:derby:" );
1:         Wrapper41Driver embeddedWrapper = new Wrapper41Driver( embeddedDriver );
1: 
1:         String  statusMessage = SUCCESS;
1:         
1:         try {
1:             embeddedWrapper.getParentLogger();
1:             statusMessage = "getParentLogger() unexpectedly succeeded";
1:         }
1:         catch (Exception se)
1:         {
1:             if ( !( se instanceof SQLFeatureNotSupportedException ) )
1:             {
1:                 statusMessage = "Exception was not a SQLFeatureNotSupportedException. It was a " + se.getClass().getName();
1:             }
1:         }
1: 
1:         System.out.print( statusMessage );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * <p>
1:      * Test that getParentLogger() raises the right exception even if the engine
1:      * isn't booted.
1:      * </p>
1:      */
1:     public void test_notBooted() throws Exception
1:     {
1:         if ( !getTestConfiguration().loadingFromJars() ) { return ; }
1:         
0:         StringBuffer    buffer = new StringBuffer();
0:         String          classpath = getSystemProperty( "java.class.path" );
1: 
0:         buffer.append( getJavaExecutableName() + " -classpath " );
0:         buffer.append( classpath );
0:         buffer.append( " -Demma.verbosity.level=silent ");
0:         buffer.append( getClass().getName() );
1: 
0:         final   String  command = buffer.toString();
1: 
0:         println( "Server command is " + command );
1: 
0:         Process     process = Runtime.getRuntime().exec( command );
1:         
1:         SpawnedProcess spawned = new SpawnedProcess( process, "UnbootedTest" );
1:         
1:         // Ensure it completes without failures.
0:         assertEquals(0, spawned.complete(false));
1: 
1:         assertEquals( SUCCESS, spawned.getFullServerOutput() );
1:     }
1: 
1: }
============================================================================