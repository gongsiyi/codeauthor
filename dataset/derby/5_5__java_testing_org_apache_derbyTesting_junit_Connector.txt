1:cef7d1e: /*
1:cef7d1e:  *
1:cef7d1e:  * Derby - Class org.apache.derbyTesting.junit.Connector
1:cef7d1e:  *
1:cef7d1e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cef7d1e:  * contributor license agreements.  See the NOTICE file distributed with
1:cef7d1e:  * this work for additional information regarding copyright ownership.
1:cef7d1e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cef7d1e:  * (the "License"); you may not use this file except in compliance with
1:cef7d1e:  * the License.  You may obtain a copy of the License at
1:cef7d1e:  *
1:cef7d1e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cef7d1e:  *
1:cef7d1e:  * Unless required by applicable law or agreed to in writing, 
1:cef7d1e:  * software distributed under the License is distributed on an 
1:cef7d1e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:cef7d1e:  * either express or implied. See the License for the specific 
1:cef7d1e:  * language governing permissions and limitations under the License.
1:cef7d1e:  */
1:cef7d1e: package org.apache.derbyTesting.junit;
1:cef7d1e: 
1:47f286f: import java.util.Properties;
1:cef7d1e: import java.sql.Connection;
1:cef7d1e: import java.sql.SQLException;
1:cef7d1e: 
1:cef7d1e: /**
1:cef7d1e:  * Factory for getting connections within the tests that is designed
1:cef7d1e:  * for the simple working case for most tests. Most tests just
1:cef7d1e:  * need to connect or shutdown the database, this hides through
1:cef7d1e:  * BaseJDBCTestCase and TestConfiguration the details of how
1:cef7d1e:  * those operations are performed.
1:cef7d1e:  * <P>
1:cef7d1e:  * Tests that need finer control over the connection handling
1:cef7d1e:  * should use the JDBC classes directly, such as DriverManager
1:cef7d1e:  * or DataSource.
1:cef7d1e:  * <P>
1:cef7d1e:  * This is split out into an interface and sub-classes to
1:cef7d1e:  * ensure that no ClassNotFoundExceptions are thrown when
1:cef7d1e:  * running in an JSR 169 environment and DriverManager is
1:cef7d1e:  * not available.
1:cef7d1e:  */
1:cef7d1e: interface Connector {
1:cef7d1e:     
1:cef7d1e:     /**
1:cef7d1e:      * Link this connector to the given configuration.
1:cef7d1e:      * Should be called once upon setup.
1:cef7d1e:      */
1:cef7d1e:     abstract void setConfiguration(TestConfiguration config);
1:cef7d1e:     
1:cef7d1e:     /**
1:cef7d1e:      * Open a connection with the database, user and password
1:cef7d1e:      * defined by the configuration passed to setConfiguration.
1:cef7d1e:      * If the database does not exist then it should be created.
1:cef7d1e:      */
1:cef7d1e:     abstract Connection openConnection() throws SQLException;
1:cef7d1e:    
1:cef7d1e:     /**
1:3df869c:      * Open a connection with the database, user and password
1:3df869c:      * defined by the configuration passed to setConfiguration.
1:3df869c:      * If the database does not exist then it should be created.
1:3df869c:      */
1:3df869c:     abstract Connection openConnection(String databaseName) throws SQLException;
1:3df869c:    
1:3df869c:     /**
1:3df869c:      * Open a connection to the database
1:3df869c:      * defined by the configuration passed to setConfiguration.
1:3df869c:      * If the database does not exist then it should be created.
1:3df869c:      */
1:cef7d1e:      abstract Connection openConnection(String user, String password)
1:cef7d1e:          throws SQLException;
1:cef7d1e: 
1:cef7d1e:     /**
1:47f286f:      * Open a connection to the database
1:47f286f:      * defined by the configuration passed to setConfiguration.
1:47f286f:      * If the database does not exist then it should be created.
1:47f286f:      */
1:3df869c:      abstract Connection openConnection(String databaseName, String user, String password)
1:3df869c:          throws SQLException;
1:3df869c: 
1:3df869c:     /**
1:cef7d1e:      * Open a connection to the database
1:cef7d1e:      * defined by the configuration passed to setConfiguration.
1:cef7d1e:      * If the database does not exist then it should be created.
1:cef7d1e:      */
1:47f286f:     abstract Connection openConnection
1:47f286f:         (String databaseName, String user, String password, Properties connectionProperties)
1:47f286f:          throws SQLException;
1:47f286f: 
1:47f286f:     /**
1:eb47230:      * get the physical databasename in use at this time
1:eb47230:      * @return Name of database
1:eb47230:      */
1:eb47230:     abstract String getDatabaseName();
1:eb47230:     
1:eb47230:     /**
1:cef7d1e:      * Shutdown the running default database using user and password
1:cef7d1e:      * defined by the configuration passed to setConfiguration.
1:df4020d:      * Return nothing, exception is expected to be thrown with SQLState 08006
1:cef7d1e:      */
1:cef7d1e:     abstract void shutDatabase() throws SQLException;
1:cef7d1e:    
1:cef7d1e:     /**
1:0c9f73e:      * Shutdown the running derby engine (not the network server).
1:0c9f73e:      * This method can only be called when the
1:0c9f73e:      * engine is running embedded in this JVM.
1:df4020d:      * Return nothing, exception is expected to be thrown with SQLState XJ015
1:51e6268:      * @param deregisterDriver if true, deregister driver
1:cef7d1e:      */
1:51e6268:     abstract void shutEngine(boolean deregisterDriver) throws SQLException;
1:25c1e7b:    
1:25c1e7b:     /**
1:25c1e7b:      * Set the login timeout for getting connections. Timeout is measured in seconds.
1:25c1e7b:      */
1:25c1e7b:     abstract void setLoginTimeout( int seconds ) throws SQLException;
1:25c1e7b:     
1:25c1e7b:     /**
1:25c1e7b:      * Get the login timeout in seconds.
1:25c1e7b:      */
1:25c1e7b:     abstract int getLoginTimeout() throws SQLException;
1:cef7d1e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:51e6268
/////////////////////////////////////////////////////////////////////////
1:      * @param deregisterDriver if true, deregister driver
1:     abstract void shutEngine(boolean deregisterDriver) throws SQLException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:25c1e7b
/////////////////////////////////////////////////////////////////////////
1:    
1:     /**
1:      * Set the login timeout for getting connections. Timeout is measured in seconds.
1:      */
1:     abstract void setLoginTimeout( int seconds ) throws SQLException;
1:     
1:     /**
1:      * Get the login timeout in seconds.
1:      */
1:     abstract int getLoginTimeout() throws SQLException;
commit:47f286f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:      * Open a connection to the database
1:      * defined by the configuration passed to setConfiguration.
1:      * If the database does not exist then it should be created.
1:      */
1:     abstract Connection openConnection
1:         (String databaseName, String user, String password, Properties connectionProperties)
1:          throws SQLException;
1: 
1:     /**
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:eb47230
/////////////////////////////////////////////////////////////////////////
1:      * get the physical databasename in use at this time
1:      * @return Name of database
1:      */
1:     abstract String getDatabaseName();
1:     
1:     /**
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
1:      * Return nothing, exception is expected to be thrown with SQLState 08006
/////////////////////////////////////////////////////////////////////////
1:      * Return nothing, exception is expected to be thrown with SQLState XJ015
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3df869c
/////////////////////////////////////////////////////////////////////////
1:      * Open a connection with the database, user and password
1:      * defined by the configuration passed to setConfiguration.
1:      * If the database does not exist then it should be created.
1:      */
1:     abstract Connection openConnection(String databaseName) throws SQLException;
1:    
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * Open a connection to the database
1:      * defined by the configuration passed to setConfiguration.
1:      * If the database does not exist then it should be created.
1:      */
1:      abstract Connection openConnection(String databaseName, String user, String password)
1:          throws SQLException;
1: 
1:     /**
commit:0c9f73e
/////////////////////////////////////////////////////////////////////////
1:      * Shutdown the running derby engine (not the network server).
1:      * This method can only be called when the
1:      * engine is running embedded in this JVM.
commit:cef7d1e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.junit.Connector
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: 
1: /**
1:  * Factory for getting connections within the tests that is designed
1:  * for the simple working case for most tests. Most tests just
1:  * need to connect or shutdown the database, this hides through
1:  * BaseJDBCTestCase and TestConfiguration the details of how
1:  * those operations are performed.
1:  * <P>
1:  * Tests that need finer control over the connection handling
1:  * should use the JDBC classes directly, such as DriverManager
1:  * or DataSource.
1:  * <P>
1:  * This is split out into an interface and sub-classes to
1:  * ensure that no ClassNotFoundExceptions are thrown when
1:  * running in an JSR 169 environment and DriverManager is
1:  * not available.
1:  */
1: interface Connector {
1:     
1:     /**
1:      * Link this connector to the given configuration.
1:      * Should be called once upon setup.
1:      */
1:     abstract void setConfiguration(TestConfiguration config);
1:     
1:     /**
1:      * Open a connection with the database, user and password
1:      * defined by the configuration passed to setConfiguration.
1:      * If the database does not exist then it should be created.
1:      */
1:     abstract Connection openConnection() throws SQLException;
1:    
1:     /**
1:      * Open a connection to the database
1:      * defined by the configuration passed to setConfiguration.
1:      * If the database does not exist then it should be created.
1:      */
1:      abstract Connection openConnection(String user, String password)
1:          throws SQLException;
1: 
1:     /**
1:      * Shutdown the running default database using user and password
1:      * defined by the configuration passed to setConfiguration.
0:      * @return Nothing, exception is expected to be thrown with SQLState 08006
1:      */
1:     abstract void shutDatabase() throws SQLException;
1:    
1:     /**
0:      * Shutdown the running derby system.
0:      * @return Nothing, exception is expected to be thrown with SQLState XJ015
1:      */
0:     abstract void shutEngine() throws SQLException;
1: }
============================================================================