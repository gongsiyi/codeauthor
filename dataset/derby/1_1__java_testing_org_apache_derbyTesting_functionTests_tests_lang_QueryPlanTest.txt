1:af2d9d2: /*
1:af2d9d2:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.QueryPlanTest
1:af2d9d2:  *
1:af2d9d2:  * Licensed to the Apache Software Foundation (ASF) under one
1:af2d9d2:  * or more contributor license agreements.  See the NOTICE file
1:af2d9d2:  * distributed with this work for additional information
1:af2d9d2:  * regarding copyright ownership.  The ASF licenses this file
1:af2d9d2:  * to you under the Apache License, Version 2.0 (the
1:af2d9d2:  * "License"); you may not use this file except in compliance
1:af2d9d2:  * with the License.  You may obtain a copy of the License at
1:af2d9d2:  *
1:af2d9d2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:af2d9d2:  *
1:af2d9d2:  * Unless required by applicable law or agreed to in writing,
1:af2d9d2:  * software distributed under the License is distributed on an
1:af2d9d2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:af2d9d2:  * KIND, either express or implied.  See the License for the
1:af2d9d2:  * specific language governing permissions and limitations
1:af2d9d2:  * under the License.
1:af2d9d2:  */
1:af2d9d2: 
1:af2d9d2: package org.apache.derbyTesting.functionTests.tests.lang;
1:af2d9d2: 
1:af2d9d2: import java.sql.PreparedStatement;
1:af2d9d2: import java.sql.SQLException;
1:af2d9d2: import java.sql.Statement;
1:af2d9d2: import java.util.Properties;
1:af2d9d2: import junit.framework.Test;
1:af2d9d2: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:af2d9d2: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:af2d9d2: import org.apache.derbyTesting.junit.JDBC;
1:af2d9d2: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1:af2d9d2: import org.apache.derbyTesting.junit.SQLUtilities;
1:af2d9d2: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:af2d9d2: import org.apache.derbyTesting.junit.TestConfiguration;
1:af2d9d2: 
1:af2d9d2: /**
1:af2d9d2:  * Test that the optimizer chooses the expected query plans for specific
1:af2d9d2:  * queries.
1:af2d9d2:  */
1:af2d9d2: public class QueryPlanTest extends BaseJDBCTestCase {
1:af2d9d2:     public QueryPlanTest(String name) {
1:af2d9d2:         super(name);
1:af2d9d2:     }
1:af2d9d2: 
1:af2d9d2:     public static Test suite() {
1:af2d9d2:         // Set derby.optimizer.noTimeout to prevent the optimizer from
1:af2d9d2:         // timing out and returning an unexpected plan on slower machines.
1:af2d9d2:         // Run in embedded mode only, since we're only interested in testing
1:af2d9d2:         // functionality in the engine.
1:af2d9d2:         Properties sysprops = new Properties();
1:af2d9d2:         sysprops.setProperty("derby.optimizer.noTimeout", "true");
1:af2d9d2:         return new CleanDatabaseTestSetup(new SystemPropertyTestSetup(
1:af2d9d2:                 TestConfiguration.embeddedSuite(QueryPlanTest.class),
1:af2d9d2:                 sysprops, true));
1:af2d9d2:     }
1:af2d9d2: 
1:af2d9d2:     /**
1:af2d9d2:      * Test that we prefer unique indexes if we have equality predicates for
1:af2d9d2:      * the full key, even when the table is empty or almost empty. Although
1:af2d9d2:      * it doesn't matter much for performance when the table is almost empty,
1:af2d9d2:      * using a unique index will most likely need fewer locks and allow more
1:af2d9d2:      * concurrency.
1:af2d9d2:      */
1:af2d9d2:     public void testDerby6011PreferUniqueIndex() throws SQLException {
1:af2d9d2:         setAutoCommit(false);
1:af2d9d2:         Statement s = createStatement();
1:af2d9d2: 
1:af2d9d2:         // Create tables/indexes like the ones used by the Apache ManifoldCF
1:af2d9d2:         // test that had concurrency problems (deadlocks).
1:af2d9d2:         s.execute("CREATE TABLE jobs(id BIGINT PRIMARY KEY)");
1:af2d9d2:         s.execute("CREATE TABLE jobqueue(docpriority FLOAT, "
1:af2d9d2:                 + "id BIGINT PRIMARY KEY, priorityset BIGINT, "
1:af2d9d2:                 + "docid CLOB NOT NULL, failcount BIGINT, "
1:af2d9d2:                 + "status CHAR(1) NOT NULL, dochash VARCHAR(40) NOT NULL, "
1:af2d9d2:                 + "isseed CHAR(1), checktime BIGINT, checkaction CHAR(1), "
1:af2d9d2:                 + "jobid BIGINT NOT NULL CONSTRAINT jobs_fk REFERENCES jobs, "
1:af2d9d2:                 + "failtime BIGINT)");
1:af2d9d2:         s.execute("CREATE UNIQUE INDEX DOCHASH_JOBID_IDX ON "
1:af2d9d2:                 + "jobqueue(dochash, jobid)");
1:af2d9d2: 
1:af2d9d2:         // Enable collection of runtime statistics.
1:af2d9d2:         s.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:af2d9d2: 
1:af2d9d2:         // Execute the query that caused problems and verify that it used
1:af2d9d2:         // the unique index. It used to pick a plan that used the JOBS_FK
1:af2d9d2:         // foreign key constraint.
1:af2d9d2:         PreparedStatement ps = prepareStatement(
1:af2d9d2:                 "SELECT id,status,checktime FROM jobqueue "
1:af2d9d2:                 + "WHERE dochash=? AND jobid=? FOR UPDATE");
1:af2d9d2:         ps.setString(1, "");
1:af2d9d2:         ps.setInt(2, 0);
1:af2d9d2:         JDBC.assertEmpty(ps.executeQuery());
1:af2d9d2:         assertIndex("JOBQUEUE", "DOCHASH_JOBID_IDX");
1:af2d9d2: 
1:af2d9d2:         // Check that the optimizer picks the unique index if there is a
1:af2d9d2:         // column that has both a unique and a non-unique index. It used to
1:af2d9d2:         // pick the non-unique index.
1:af2d9d2:         s.execute("create table t1(a int not null, b int not null, " +
1:af2d9d2:                   "c int not null, d int not null, e blob)");
1:af2d9d2:         s.execute("create index idx_t1_a on t1(a)");
1:af2d9d2:         s.execute("create unique index uidx_t1_a on t1(a)");
1:af2d9d2:         ps = prepareStatement("select * from t1 where a = ?");
1:af2d9d2:         ps.setInt(1, 1);
1:af2d9d2:         JDBC.assertEmpty(ps.executeQuery());
1:af2d9d2:         assertIndex("T1", "UIDX_T1_A");
1:af2d9d2: 
1:af2d9d2:         // Check that a unique index is preferred also for indexes with
1:af2d9d2:         // two and three columns. Used to pick a non-unique index.
1:af2d9d2:         s.execute("drop index uidx_t1_a");
1:af2d9d2:         s.execute("create index idx_t1_ab on t1(a,b)");
1:af2d9d2:         s.execute("create unique index uidx_t1_ab on t1(a,b)");
1:af2d9d2:         ps = prepareStatement("select * from t1 where a = ? and b = ?");
1:af2d9d2:         ps.setInt(1, 1);
1:af2d9d2:         ps.setInt(2, 2);
1:af2d9d2:         JDBC.assertEmpty(ps.executeQuery());
1:af2d9d2:         assertIndex("T1", "UIDX_T1_AB");
1:af2d9d2: 
1:af2d9d2:         s.execute("drop index uidx_t1_ab");
1:af2d9d2:         s.execute("create index idx_t1_abc on t1(a,b,c)");
1:af2d9d2:         s.execute("create unique index uidx_t1_abc on t1(a,b,c)");
1:af2d9d2:         ps = prepareStatement(
1:af2d9d2:                 "select * from t1 where a = ? and b = ? and c = ?");
1:af2d9d2:         ps.setInt(1, 1);
1:af2d9d2:         ps.setInt(2, 2);
1:af2d9d2:         ps.setInt(3, 3);
1:af2d9d2:         JDBC.assertEmpty(ps.executeQuery());
1:af2d9d2:         assertIndex("T1", "UIDX_T1_ABC");
1:af2d9d2: 
1:af2d9d2:         // The optimizer should prefer a four-column unique to a three-column
1:af2d9d2:         // non-unique index for the query below. Used to pick the three-column
1:af2d9d2:         // non-unique index.
1:af2d9d2:         s.execute("drop index uidx_t1_abc");
1:af2d9d2:         s.execute("create unique index uidx_t1_abcd on t1(a,b,c,d)");
1:af2d9d2:         ps = prepareStatement(
1:af2d9d2:                 "select * from t1 where a = ? and b = ? and c = ? and d = ?");
1:af2d9d2:         ps.setInt(1, 1);
1:af2d9d2:         ps.setInt(2, 2);
1:af2d9d2:         ps.setInt(3, 3);
1:af2d9d2:         ps.setInt(4, 4);
1:af2d9d2:         JDBC.assertEmpty(ps.executeQuery());
1:af2d9d2:         assertIndex("T1", "UIDX_T1_ABCD");
1:af2d9d2: 
1:af2d9d2:         // Given a covering non-unique index and a non-covering unique index,
1:af2d9d2:         // we want the covering index to be picked. The optimizer used to pick
1:af2d9d2:         // the covering index before the fix. Verify that it still does.
1:af2d9d2:         s.execute("create table t2(a varchar(200) not null, "
1:af2d9d2:                 + "b varchar(200) not null, c varchar(200) not null)");
1:af2d9d2:         s.execute("create unique index uidx_t2_ab on t1(a,b)");
1:af2d9d2:         s.execute("create index idx_t2_abc on t2(a,b,c)");
1:af2d9d2:         ps = prepareStatement(
1:af2d9d2:                 "select * from t2 where a = ? and b = ? and c = ?");
1:af2d9d2:         ps.setInt(1, 1);
1:af2d9d2:         ps.setInt(2, 2);
1:af2d9d2:         ps.setInt(3, 3);
1:af2d9d2:         JDBC.assertEmpty(ps.executeQuery());
1:af2d9d2:         assertIndex("T2", "IDX_T2_ABC");
1:af2d9d2:     }
1:af2d9d2: 
1:af2d9d2:     /**
1:af2d9d2:      * Assert that a specific index was used for accessing a table.
1:af2d9d2:      * @param table the table being accessed
1:af2d9d2:      * @param index the index that should be used
1:af2d9d2:      */
1:af2d9d2:     private void assertIndex(String table, String index)
1:af2d9d2:             throws SQLException {
1:af2d9d2:         RuntimeStatisticsParser parser =
1:af2d9d2:                 SQLUtilities.getRuntimeStatisticsParser(createStatement());
1:af2d9d2:         if (!parser.usedSpecificIndexForIndexScan(table, index)) {
1:af2d9d2:             fail("Should have used index " + index + " when accessing table " +
1:af2d9d2:                  table + ". Actual plan:\n" + parser);
1:af2d9d2:         }
1:af2d9d2:     }
1:af2d9d2: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:af2d9d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.QueryPlanTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1: import org.apache.derbyTesting.junit.SQLUtilities;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test that the optimizer chooses the expected query plans for specific
1:  * queries.
1:  */
1: public class QueryPlanTest extends BaseJDBCTestCase {
1:     public QueryPlanTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // Set derby.optimizer.noTimeout to prevent the optimizer from
1:         // timing out and returning an unexpected plan on slower machines.
1:         // Run in embedded mode only, since we're only interested in testing
1:         // functionality in the engine.
1:         Properties sysprops = new Properties();
1:         sysprops.setProperty("derby.optimizer.noTimeout", "true");
1:         return new CleanDatabaseTestSetup(new SystemPropertyTestSetup(
1:                 TestConfiguration.embeddedSuite(QueryPlanTest.class),
1:                 sysprops, true));
1:     }
1: 
1:     /**
1:      * Test that we prefer unique indexes if we have equality predicates for
1:      * the full key, even when the table is empty or almost empty. Although
1:      * it doesn't matter much for performance when the table is almost empty,
1:      * using a unique index will most likely need fewer locks and allow more
1:      * concurrency.
1:      */
1:     public void testDerby6011PreferUniqueIndex() throws SQLException {
1:         setAutoCommit(false);
1:         Statement s = createStatement();
1: 
1:         // Create tables/indexes like the ones used by the Apache ManifoldCF
1:         // test that had concurrency problems (deadlocks).
1:         s.execute("CREATE TABLE jobs(id BIGINT PRIMARY KEY)");
1:         s.execute("CREATE TABLE jobqueue(docpriority FLOAT, "
1:                 + "id BIGINT PRIMARY KEY, priorityset BIGINT, "
1:                 + "docid CLOB NOT NULL, failcount BIGINT, "
1:                 + "status CHAR(1) NOT NULL, dochash VARCHAR(40) NOT NULL, "
1:                 + "isseed CHAR(1), checktime BIGINT, checkaction CHAR(1), "
1:                 + "jobid BIGINT NOT NULL CONSTRAINT jobs_fk REFERENCES jobs, "
1:                 + "failtime BIGINT)");
1:         s.execute("CREATE UNIQUE INDEX DOCHASH_JOBID_IDX ON "
1:                 + "jobqueue(dochash, jobid)");
1: 
1:         // Enable collection of runtime statistics.
1:         s.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1: 
1:         // Execute the query that caused problems and verify that it used
1:         // the unique index. It used to pick a plan that used the JOBS_FK
1:         // foreign key constraint.
1:         PreparedStatement ps = prepareStatement(
1:                 "SELECT id,status,checktime FROM jobqueue "
1:                 + "WHERE dochash=? AND jobid=? FOR UPDATE");
1:         ps.setString(1, "");
1:         ps.setInt(2, 0);
1:         JDBC.assertEmpty(ps.executeQuery());
1:         assertIndex("JOBQUEUE", "DOCHASH_JOBID_IDX");
1: 
1:         // Check that the optimizer picks the unique index if there is a
1:         // column that has both a unique and a non-unique index. It used to
1:         // pick the non-unique index.
1:         s.execute("create table t1(a int not null, b int not null, " +
1:                   "c int not null, d int not null, e blob)");
1:         s.execute("create index idx_t1_a on t1(a)");
1:         s.execute("create unique index uidx_t1_a on t1(a)");
1:         ps = prepareStatement("select * from t1 where a = ?");
1:         ps.setInt(1, 1);
1:         JDBC.assertEmpty(ps.executeQuery());
1:         assertIndex("T1", "UIDX_T1_A");
1: 
1:         // Check that a unique index is preferred also for indexes with
1:         // two and three columns. Used to pick a non-unique index.
1:         s.execute("drop index uidx_t1_a");
1:         s.execute("create index idx_t1_ab on t1(a,b)");
1:         s.execute("create unique index uidx_t1_ab on t1(a,b)");
1:         ps = prepareStatement("select * from t1 where a = ? and b = ?");
1:         ps.setInt(1, 1);
1:         ps.setInt(2, 2);
1:         JDBC.assertEmpty(ps.executeQuery());
1:         assertIndex("T1", "UIDX_T1_AB");
1: 
1:         s.execute("drop index uidx_t1_ab");
1:         s.execute("create index idx_t1_abc on t1(a,b,c)");
1:         s.execute("create unique index uidx_t1_abc on t1(a,b,c)");
1:         ps = prepareStatement(
1:                 "select * from t1 where a = ? and b = ? and c = ?");
1:         ps.setInt(1, 1);
1:         ps.setInt(2, 2);
1:         ps.setInt(3, 3);
1:         JDBC.assertEmpty(ps.executeQuery());
1:         assertIndex("T1", "UIDX_T1_ABC");
1: 
1:         // The optimizer should prefer a four-column unique to a three-column
1:         // non-unique index for the query below. Used to pick the three-column
1:         // non-unique index.
1:         s.execute("drop index uidx_t1_abc");
1:         s.execute("create unique index uidx_t1_abcd on t1(a,b,c,d)");
1:         ps = prepareStatement(
1:                 "select * from t1 where a = ? and b = ? and c = ? and d = ?");
1:         ps.setInt(1, 1);
1:         ps.setInt(2, 2);
1:         ps.setInt(3, 3);
1:         ps.setInt(4, 4);
1:         JDBC.assertEmpty(ps.executeQuery());
1:         assertIndex("T1", "UIDX_T1_ABCD");
1: 
1:         // Given a covering non-unique index and a non-covering unique index,
1:         // we want the covering index to be picked. The optimizer used to pick
1:         // the covering index before the fix. Verify that it still does.
1:         s.execute("create table t2(a varchar(200) not null, "
1:                 + "b varchar(200) not null, c varchar(200) not null)");
1:         s.execute("create unique index uidx_t2_ab on t1(a,b)");
1:         s.execute("create index idx_t2_abc on t2(a,b,c)");
1:         ps = prepareStatement(
1:                 "select * from t2 where a = ? and b = ? and c = ?");
1:         ps.setInt(1, 1);
1:         ps.setInt(2, 2);
1:         ps.setInt(3, 3);
1:         JDBC.assertEmpty(ps.executeQuery());
1:         assertIndex("T2", "IDX_T2_ABC");
1:     }
1: 
1:     /**
1:      * Assert that a specific index was used for accessing a table.
1:      * @param table the table being accessed
1:      * @param index the index that should be used
1:      */
1:     private void assertIndex(String table, String index)
1:             throws SQLException {
1:         RuntimeStatisticsParser parser =
1:                 SQLUtilities.getRuntimeStatisticsParser(createStatement());
1:         if (!parser.usedSpecificIndexForIndexScan(table, index)) {
1:             fail("Should have used index " + index + " when accessing table " +
1:                  table + ". Actual plan:\n" + parser);
1:         }
1:     }
1: }
============================================================================