1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.CreateSchemaConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class describes actions that are ALWAYS performed for a
1:eac0369:  *	CREATE SCHEMA Statement at Execution time.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: class CreateSchemaConstantAction extends DDLConstantAction
1:eac0369: {
1:eac0369: 
1:eac0369: 	private final String					aid;	// authorization id
1:eac0369: 	private final String					schemaName;
1:eac0369: 	
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make the ConstantAction for a CREATE SCHEMA statement.
1:eac0369: 	 * When executed, will set the default schema to the
1:eac0369: 	 * new schema if the setToDefault parameter is set to
1:eac0369: 	 * true.
1:eac0369: 	 *
1:eac0369: 	 *  @param schemaName	Name of table.
1:eac0369: 	 *  @param aid			Authorizaton id
1:eac0369: 	 */
1:eac0369: 	CreateSchemaConstantAction(
1:eac0369: 								String			schemaName,
1:eac0369: 								String			aid)
1:eac0369: 	{
1:eac0369: 		this.schemaName = schemaName;
1:eac0369: 		this.aid = aid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// OBJECT SHADOWS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		return "CREATE SCHEMA " + schemaName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for CREATE SCHEMA.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:4d8deb6: 		TransactionController tc = activation.
1:4d8deb6: 			getLanguageConnectionContext().getTransactionExecute();
1:4d8deb6: 
1:4d8deb6: 		executeConstantActionMinion(activation, tc);
1:4d8deb6: 	}
1:4d8deb6: 
1:4d8deb6: 	/**
1:4d8deb6: 	 *	This is the guts of the Execution-time logic for CREATE SCHEMA.
1:4d8deb6: 	 *  This is variant is used when we to pass in a tc other than the default
1:4d8deb6: 	 *  used in executeConstantAction(Activation).
1:4d8deb6: 	 *
1:4d8deb6: 	 * @param activation current activation
1:4d8deb6: 	 * @param tc transaction controller
1:4d8deb6: 	 *
1:4d8deb6: 	 * @exception StandardException		Thrown on failure
1:4d8deb6: 	 */
1:4d8deb6: 	public void	executeConstantAction(Activation activation,
1:4d8deb6: 									  TransactionController tc)
1:4d8deb6: 			throws StandardException {
1:4d8deb6: 
1:4d8deb6: 		executeConstantActionMinion(activation, tc);
1:4d8deb6: 	}
1:4d8deb6: 
1:4d8deb6: 	private void executeConstantActionMinion(Activation activation,
1:4d8deb6: 											 TransactionController tc)
1:4d8deb6: 			throws StandardException {
1:4d8deb6: 
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:eac0369: 
1:eac0369: 		SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, lcc.getTransactionExecute(), false);
1:eac0369: 
1:eac0369: 		//if the schema descriptor is an in-memory schema, we donot throw schema already exists exception for it.
1:eac0369: 		//This is to handle in-memory SESSION schema for temp tables
1:eac0369: 		if ((sd != null) && (sd.getUUID() != null))
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS, "Schema" , schemaName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		UUID tmpSchemaId = dd.getUUIDFactory().createUUID();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** AID defaults to connection authorization if not 
1:eac0369: 		** specified in CREATE SCHEMA (if we had module
1:eac0369: 	 	** authorizations, that would be the first check
1:eac0369: 		** for default, then session aid).
1:eac0369: 		*/
1:eac0369: 		String thisAid = aid;
1:eac0369: 		if (thisAid == null)
1:eac0369: 		{
1:9f60172:             thisAid = lcc.getCurrentUserId(activation);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		sd = ddg.newSchemaDescriptor(schemaName,
1:eac0369: 									thisAid,
1:eac0369: 									tmpSchemaId);
1:eac0369: 
1:eac0369: 		dd.addDescriptor(sd, null, DataDictionary.SYSSCHEMAS_CATALOG_NUM, false, tc);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:9f60172
/////////////////////////////////////////////////////////////////////////
1:             thisAid = lcc.getCurrentUserId(activation);
commit:4d8deb6
/////////////////////////////////////////////////////////////////////////
1: 		TransactionController tc = activation.
1: 			getLanguageConnectionContext().getTransactionExecute();
1: 
1: 		executeConstantActionMinion(activation, tc);
1: 	}
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for CREATE SCHEMA.
1: 	 *  This is variant is used when we to pass in a tc other than the default
1: 	 *  used in executeConstantAction(Activation).
1: 	 *
1: 	 * @param activation current activation
1: 	 * @param tc transaction controller
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction(Activation activation,
1: 									  TransactionController tc)
1: 			throws StandardException {
1: 
1: 		executeConstantActionMinion(activation, tc);
1: 	}
1: 
1: 	private void executeConstantActionMinion(Activation activation,
1: 											 TransactionController tc)
1: 			throws StandardException {
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.CreateSchemaConstantAction
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  *	This class describes actions that are ALWAYS performed for a
1:  *	CREATE SCHEMA Statement at Execution time.
1:  *
0:  *	@author jamie 
1:  */
1: 
1: class CreateSchemaConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private final String					aid;	// authorization id
1: 	private final String					schemaName;
1: 	
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * Make the ConstantAction for a CREATE SCHEMA statement.
1: 	 * When executed, will set the default schema to the
1: 	 * new schema if the setToDefault parameter is set to
1: 	 * true.
1: 	 *
1: 	 *  @param schemaName	Name of table.
1: 	 *  @param aid			Authorizaton id
0: 	 *  @param schemaId		ID of table. If null, we allocate one.
0: 	 *	@param setToDefault	if true, set the default schema to
0: 	 *			the new schema once it is created.
1: 	 */
1: 	CreateSchemaConstantAction(
1: 								String			schemaName,
1: 								String			aid)
1: 	{
1: 		this.schemaName = schemaName;
1: 		this.aid = aid;
1: 	}
1: 
1: 	///////////////////////////////////////////////
1: 	//
1: 	// OBJECT SHADOWS
1: 	//
1: 	///////////////////////////////////////////////
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		return "CREATE SCHEMA " + schemaName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for CREATE SCHEMA.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
0: 		TransactionController tc = lcc.getTransactionExecute();
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1: 		SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, lcc.getTransactionExecute(), false);
1: 
1: 		//if the schema descriptor is an in-memory schema, we donot throw schema already exists exception for it.
1: 		//This is to handle in-memory SESSION schema for temp tables
1: 		if ((sd != null) && (sd.getUUID() != null))
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS, "Schema" , schemaName);
1: 		}
1: 
1: 		UUID tmpSchemaId = dd.getUUIDFactory().createUUID();
1: 
1: 		/*
1: 		** AID defaults to connection authorization if not 
1: 		** specified in CREATE SCHEMA (if we had module
1: 	 	** authorizations, that would be the first check
1: 		** for default, then session aid).
1: 		*/
1: 		String thisAid = aid;
1: 		if (thisAid == null)
1: 		{
0: 			thisAid = lcc.getAuthorizationId();
1: 		}
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
1: 		sd = ddg.newSchemaDescriptor(schemaName,
1: 									thisAid,
1: 									tmpSchemaId);
1: 
1: 		dd.addDescriptor(sd, null, DataDictionary.SYSSCHEMAS_CATALOG_NUM, false, tc);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  *	This class describes actions that are ALWAYS performed for a
0:  *	CREATE SCHEMA Statement at Execution time.
0:  *
0:  *	@author jamie 
0:  */
0: 
0: class CreateSchemaConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private final String					aid;	// authorization id
0: 	private final String					schemaName;
0: 	
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * Make the ConstantAction for a CREATE SCHEMA statement.
0: 	 * When executed, will set the default schema to the
0: 	 * new schema if the setToDefault parameter is set to
0: 	 * true.
0: 	 *
0: 	 *  @param schemaName	Name of table.
0: 	 *  @param aid			Authorizaton id
0: 	 *  @param schemaId		ID of table. If null, we allocate one.
0: 	 *	@param setToDefault	if true, set the default schema to
0: 	 *			the new schema once it is created.
0: 	 */
0: 	CreateSchemaConstantAction(
0: 								String			schemaName,
0: 								String			aid)
0: 	{
0: 		this.schemaName = schemaName;
0: 		this.aid = aid;
0: 	}
0: 
0: 	///////////////////////////////////////////////
0: 	//
0: 	// OBJECT SHADOWS
0: 	//
0: 	///////////////////////////////////////////////
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		return "CREATE SCHEMA " + schemaName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for CREATE SCHEMA.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
0: 
0: 		SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, lcc.getTransactionExecute(), false);
0: 
0: 		//if the schema descriptor is an in-memory schema, we donot throw schema already exists exception for it.
0: 		//This is to handle in-memory SESSION schema for temp tables
0: 		if ((sd != null) && (sd.getUUID() != null))
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS, "Schema" , schemaName);
0: 		}
0: 
0: 		UUID tmpSchemaId = dd.getUUIDFactory().createUUID();
0: 
0: 		/*
0: 		** AID defaults to connection authorization if not 
0: 		** specified in CREATE SCHEMA (if we had module
0: 	 	** authorizations, that would be the first check
0: 		** for default, then session aid).
0: 		*/
0: 		String thisAid = aid;
0: 		if (thisAid == null)
0: 		{
0: 			thisAid = lcc.getAuthorizationId();
0: 		}
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		sd = ddg.newSchemaDescriptor(schemaName,
0: 									thisAid,
0: 									tmpSchemaId);
0: 
0: 		dd.addDescriptor(sd, null, DataDictionary.SYSSCHEMAS_CATALOG_NUM, false, tc);
0: 	}
0: }
============================================================================