1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.catalog.types.MethodAliasInfo
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.catalog.AliasInfo;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * Describe a method alias.
1:eac0369:  *
1:eac0369:  * @see AliasInfo
1:eac0369:  */
1:eac0369: public class MethodAliasInfo
1:eac0369: implements AliasInfo, Formatable
3:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	private String methodName;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
1:eac0369: 	 */
1:eac0369:     public	MethodAliasInfo() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create a MethodAliasInfo
1:eac0369: 	 *
1:eac0369: 	 * @param methodName	The name of the method for the alias.
1:eac0369: 	 */
1:eac0369: 	public MethodAliasInfo(String methodName)
1:eac0369: 	{
1:eac0369: 		this.methodName = methodName;
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	// Formatable methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		methodName = (String)in.readObject();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeObject( methodName );
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.METHOD_ALIAS_INFO_V01_ID; }
1:eac0369: 
1:eac0369: 	// 
1:eac0369: 	// AliasInfo methods
1:eac0369: 	// 
1:eac0369: 	/**
1:eac0369: 	  @see org.apache.derby.catalog.AliasInfo#getMethodName
1:eac0369: 	  */
1:eac0369: 	public String getMethodName()
1:eac0369: 	{
1:eac0369: 		return methodName;
1:eac0369: 	}
1:eac0369: 
1:768e56f: 	public boolean isTableFunction() {return false; }
1:768e56f: 
1:eac0369: 	/**
1:eac0369: 	  @see java.lang.Object#toString
1:eac0369: 	  */
1:eac0369: 	public String	toString()
1:eac0369: 	{
1:eac0369: 		return methodName;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:768e56f
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isTableFunction() {return false; }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:14d5f00
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.types.MethodAliasInfo
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.catalog.AliasInfo;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
1:  * Describe a method alias.
1:  *
1:  * @see AliasInfo
1:  */
1: public class MethodAliasInfo
1: implements AliasInfo, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	private String methodName;
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 */
1:     public	MethodAliasInfo() {}
1: 
1: 	/**
1: 	 * Create a MethodAliasInfo
1: 	 *
1: 	 * @param methodName	The name of the method for the alias.
1: 	 */
1: 	public MethodAliasInfo(String methodName)
1: 	{
1: 		this.methodName = methodName;
1: 	}
1: 
1: 	// Formatable methods
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		methodName = (String)in.readObject();
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeObject( methodName );
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.METHOD_ALIAS_INFO_V01_ID; }
1: 
1: 	// 
1: 	// AliasInfo methods
1: 	// 
1: 	/**
1: 	  @see org.apache.derby.catalog.AliasInfo#getMethodName
1: 	  */
1: 	public String getMethodName()
1: 	{
1: 		return methodName;
1: 	}
1: 	/**
0: 	  @see org.apache.derby.catalog.AliasInfo#getTargetClassName
1: 	  */
0: 	public String getTargetClassName()
1: 	{
0: 		return null;
1: 	}
1: 	/**
0: 	  @see org.apache.derby.catalog.AliasInfo#getTargetMethodName
1: 	  */
0: 	public String getTargetMethodName()
1: 	{
0: 		return null;
1: 	}
1: 
1: 	/**
1: 	  @see java.lang.Object#toString
1: 	  */
1: 	public String	toString()
1: 	{
1: 		return methodName;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog.types;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.catalog.AliasInfo;
0: import java.io.IOException;
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: 
0: /**
0:  * Describe a method alias.
0:  *
0:  * @see AliasInfo
0:  */
0: public class MethodAliasInfo
0: implements AliasInfo, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	private String methodName;
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 */
0:     public	MethodAliasInfo() {}
0: 
0: 	/**
0: 	 * Create a MethodAliasInfo
0: 	 *
0: 	 * @param methodName	The name of the method for the alias.
0: 	 */
0: 	public MethodAliasInfo(String methodName)
0: 	{
0: 		this.methodName = methodName;
0: 	}
0: 
0: 	// Formatable methods
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		methodName = (String)in.readObject();
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		out.writeObject( methodName );
0: 	}
0:  
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.METHOD_ALIAS_INFO_V01_ID; }
0: 
0: 	// 
0: 	// AliasInfo methods
0: 	// 
0: 	/**
0: 	  @see org.apache.derby.catalog.AliasInfo#getMethodName
0: 	  */
0: 	public String getMethodName()
0: 	{
0: 		return methodName;
0: 	}
0: 	/**
0: 	  @see org.apache.derby.catalog.AliasInfo#getTargetClassName
0: 	  */
0: 	public String getTargetClassName()
0: 	{
0: 		return null;
0: 	}
0: 	/**
0: 	  @see org.apache.derby.catalog.AliasInfo#getTargetMethodName
0: 	  */
0: 	public String getTargetMethodName()
0: 	{
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	  @see java.lang.Object#toString
0: 	  */
0: 	public String	toString()
0: 	{
0: 		return methodName;
0: 	}
0: }
============================================================================