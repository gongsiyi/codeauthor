1:fe77ca5: /*
1:985fc85: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.xaHelper
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
9:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:7c812c7: 
1:7c812c7: import java.io.UnsupportedEncodingException;
1:fe77ca5: import java.sql.Connection;
1:fe77ca5: import java.sql.SQLException;
1:fe77ca5: import java.util.Locale;
1:fe77ca5: import java.util.Vector;
1:fe77ca5: 
1:fe77ca5: import javax.transaction.xa.Xid;
1:fe77ca5: import javax.transaction.xa.XAException;
1:fe77ca5: import javax.sql.PooledConnection;
1:fe77ca5: import javax.sql.XAConnection;
1:fe77ca5: import javax.sql.XADataSource;
1:fe77ca5: import javax.sql.DataSource;
1:fe77ca5: import javax.sql.ConnectionPoolDataSource;
1:fe77ca5: 
1:fe77ca5: /*
1:fe77ca5:  * The real xa helper class.  Load this class only if we know the javax classes
1:fe77ca5:  * are in the class path.
1:fe77ca5:  */
1:fe77ca5: class xaHelper implements xaAbstractHelper
4:fe77ca5: {
1:4383496: 
1:fe77ca5: 	private XADataSource currentXADataSource;
1:fe77ca5: 	private XAConnection currentXAConnection;
1:fe77ca5: 
1:fe77ca5: 	private String databaseName;
1:fe77ca5: 
1:fe77ca5: 	// non xa stuff
1:fe77ca5: 	private DataSource currentDataSource;
1:fe77ca5: 	private ConnectionPoolDataSource currentCPDataSource;
1:fe77ca5: 	private PooledConnection currentPooledConnection;
1:fe77ca5: 
1:4383496: 	private boolean isJCC;
1:97a334e: 	private boolean isNetClient;
1:4383496: 	private String framework;
1:fe77ca5: 
1:4469400:   public xaHelper()
1:fe77ca5:   {
17:fe77ca5:   }
1:fe77ca5: 	  
1:fe77ca5: 	  
1:4383496: 	public void setFramework(String fm)
1:4383496: 	{
1:fee55d8:                 if (fm == null) {
1:fee55d8:                     return;
1:fee55d8:                 }
1:97a334e: 		framework = fm.toUpperCase(Locale.ENGLISH);
1:4383496: 		if (framework.endsWith("NET") ||
1:4383496: 			framework.equals("DB2JCC"))
1:4383496: 			isJCC = true;
1:97a334e: 		else if (framework.equals("DERBYNETCLIENT"))
1:97a334e: 				 isNetClient = true;
1:4383496: 
1:4383496: 	}
1:4383496: 		
1:fe77ca5: 	private Xid makeXid(int xid)
1:fe77ca5: 	{
1:c35e4f0: 		try {
1:7c812c7: 			return new ijXid(xid, databaseName.getBytes("UTF-8"));
1:7c812c7: 		} catch (UnsupportedEncodingException e) {
1:7c812c7: 			// UTF-8 is a required encoding. We should never get here.
1:7c812c7: 			e.printStackTrace();
1:7c812c7: 			return null;
1:e175303: 		}
1:c35e4f0: 	}
1:fe77ca5: 
1:fe77ca5: 	public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
1:fe77ca5: 									String create)
1:fe77ca5: 		 throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{
1:fe77ca5: 			  currentXADataSource = (XADataSource) getXADataSource();
1:88777c5: 
1:fe77ca5: 			  databaseName = parser.stringValue(dbname.image);
1:4383496: 			  
1:97a334e: 			  if (isJCC || isNetClient)
1:4383496: 			  {
1:5ff5941: 			  	String hostName = System.getProperty("hostName");
1:5ff5941: 			  	if ((hostName != null ) && (!hostName.equals("localhost")))
1:5ff5941: 				{			
2:4383496: 			  		xaHelper.setDataSourceProperty(currentXADataSource,
1:5ff5941: 											 "ServerName", hostName);
1:c35e4f0: 				}
1:5ff5941: 			  	else
1:5ff5941: 				{			
1:4383496: 			  		xaHelper.setDataSourceProperty(currentXADataSource,
1:4383496: 							 "ServerName", "localhost");
1:c35e4f0: 				}
1:4383496: 			  xaHelper.setDataSourceProperty(currentXADataSource,
1:4383496: 											 "portNumber", 1527);
1:4383496: 			  
1:4383496: 			  String user;
1:4383496: 			  String password;
1:4383496: 			  user = "APP";
1:4383496: 			  password = "APP";
1:4383496: 			  xaHelper.setDataSourceProperty(currentXADataSource,
1:4383496: 											 "user", user);
1:4383496: 			  xaHelper.setDataSourceProperty(currentXADataSource,
1:4383496: 											 "password", password);
1:4383496: 			  //xaHelper.setDataSourceProperty(currentXADataSource,
1:4383496: 			  //"traceFile", "trace.out." + framework);
1:7c812c7: 			  }
1:97a334e: 			  if (isJCC)
1:91eacad: 			  {
1:97a334e: 				  xaHelper.setDataSourceProperty(currentXADataSource,
1:97a334e: 												 "driverType", 4);
1:4383496: 
1:91eacad: 				  xaHelper.setDataSourceProperty(currentXADataSource, 
1:91eacad: 												 "retrieveMessagesFromServerOnGetMessage", true);
1:88777c5: 			  }
1:fe77ca5: 			  xaHelper.setDataSourceProperty(currentXADataSource, "databaseName", databaseName);
1:fe77ca5: 
1:fe77ca5: 			if (shutdown != null && shutdown.toString().toLowerCase(Locale.ENGLISH).equals("shutdown"))
1:4383496: 			{	
1:97a334e: 				if (isJCC || isNetClient)
1:4383496: 					xaHelper.setDataSourceProperty(currentXADataSource,"databaseName", databaseName + ";shutdown=true");
1:4383496: 				else
1:4383496: 					xaHelper.setDataSourceProperty(currentXADataSource, "shutdownDatabase", "shutdown");
1:fe77ca5: 
1:fe77ca5: 				// do a getXAConnection to shut it down */
1:fe77ca5: 				currentXADataSource.getXAConnection().getConnection();
1:fe77ca5: 				currentXADataSource = null;
1:fe77ca5: 				currentXAConnection = null;
1:88777c5: 			}
1:4383496: 			else if (create != null && create.toLowerCase(java.util.Locale.ENGLISH).equals("create"))
1:fe77ca5: 			{
1:97a334e: 				if (isJCC || isNetClient)
1:4383496: 					xaHelper.setDataSourceProperty(currentXADataSource,"databaseName", databaseName + ";create=true");
1:4383496: 				else
1:4383496: 					xaHelper.setDataSourceProperty(currentXADataSource,
1:4383496: 												   "createDatabase", "create");
1:fe77ca5: 
1:4383496: 				/* do a getXAConnection to create it */
1:4383496: 				XAConnection conn = currentXADataSource.getXAConnection();
1:4383496: 				conn.close();
1:4383496: 				
1:4383496: 				xaHelper.setDataSourceProperty(currentXADataSource, "createDatabase", null);
1:88777c5: 			}
1:88777c5: 		}
1:fe77ca5: 		catch (Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:91eacad: 		}	
1:4383496: 	}
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	public void XAConnectStatement(ij parser, Token user, Token pass, String id)
1:fe77ca5: 		 throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{
1:fe77ca5: 			if (currentXAConnection != null)
1:fe77ca5: 			{
1:88777c5: 				try {
1:fe77ca5: 					currentXAConnection.close();
1:fe77ca5: 				} catch (SQLException sqle) {
1:5ff5941: 				}
1:fe77ca5: 
1:fe77ca5: 				currentXAConnection = null;
1:5ff5941: 			}
1:fe77ca5: 
1:fe77ca5: 			String username = null;
1:fe77ca5: 			String password = "";
1:fe77ca5: 
1:fe77ca5: 			if (pass != null)
1:fe77ca5: 				password = parser.stringValue(pass.image);
1:fe77ca5: 
1:fe77ca5: 			if (user != null)
1:fe77ca5: 			{
1:fe77ca5: 				username = parser.stringValue(user.image);
1:fe77ca5: 
1:fe77ca5: 				currentXAConnection = 
1:fe77ca5: 					currentXADataSource.getXAConnection(username, password);
1:fe77ca5: 			}
1:4383496: 			else
1:fe77ca5: 			{
1:fe77ca5: 
1:fe77ca5: 				currentXAConnection = currentXADataSource.getXAConnection();
1:fe77ca5: 			}
1:fe77ca5: 
1:fe77ca5: 		}
1:fe77ca5: 		catch (Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void XADisconnectStatement(ij parser, String n) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		if (currentXAConnection == null)
1:fe77ca5: 			throw ijException.noSuchConnection("XAConnection");
1:fe77ca5: 		currentXAConnection.close();
1:fe77ca5: 		currentXAConnection = null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public Connection XAGetConnectionStatement(ij parser, String n) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{
1:fe77ca5: 			return currentXAConnection.getConnection();
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void CommitStatement(ij parser, Token onePhase, Token twoPhase, 
1:fe77ca5: 								int xid) 
1:fe77ca5: 		 throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{	
1:fe77ca5: 			currentXAConnection.getXAResource().commit(makeXid(xid), (onePhase != null));
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void EndStatement(ij parser, int flag, int xid) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{	
1:fe77ca5: 			currentXAConnection.getXAResource().end(makeXid(xid), flag);
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void ForgetStatement(ij parser, int xid) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{	
1:fe77ca5: 			currentXAConnection.getXAResource().forget(makeXid(xid));
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void PrepareStatement(ij parser, int xid) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{	
1:fe77ca5: 			currentXAConnection.getXAResource().prepare(makeXid(xid));
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public ijResult RecoverStatement(ij parser, int flag) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		Object[] val = null;
1:fe77ca5: 
1:fe77ca5: 		try
1:fe77ca5: 		{	
1:fe77ca5: 			val = currentXAConnection.getXAResource().recover(flag);
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 
1:16d3334: 		Vector<String> v = new Vector<String>();
1:fe77ca5: 		v.addElement("");
1:fe77ca5: 		v.addElement(LocalizedResource.getMessage("IJ_Reco0InDoubT", LocalizedResource.getNumber(val.length)));
1:fe77ca5: 		v.addElement("");
1:fe77ca5: 		for (int i = 0; i < val.length; i++)
1:fe77ca5: 			v.addElement(LocalizedResource.getMessage("IJ_Tran01", LocalizedResource.getNumber(i+1), val[i].toString()));
1:fe77ca5: 
1:fe77ca5: 		return new ijVectorResult(v,null);
1:fe77ca5: 
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void RollbackStatement(ij parser, int xid) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{	
1:fe77ca5: 			currentXAConnection.getXAResource().rollback(makeXid(xid));
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void StartStatement(ij parser, int flag, int xid) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{	
1:fe77ca5: 			currentXAConnection.getXAResource().start(makeXid(xid), flag);
1:fe77ca5: 		}
1:fe77ca5: 		catch(Throwable t)
1:fe77ca5: 		{
1:8ab3fa6:             throw handleException(t);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:8ab3fa6:     /**
1:8ab3fa6:      * Handles the given throwable.
1:8ab3fa6:      * <p>
1:8ab3fa6:      * If possible, an {@code SQLException} is returned. Otherwise the
1:8ab3fa6:      * appropriate actions are taken and a {@code RuntimeException} is thrown.
1:8ab3fa6:      *
1:8ab3fa6:      * @param t exception to handle
1:8ab3fa6:      * @return An {@code SQLException}.
1:8ab3fa6:      * @throws RuntimeException if the throwable isn't an {@code SQLException}
1:8ab3fa6:      */
1:8ab3fa6: 	private SQLException handleException(Throwable t)
1:fe77ca5: 	{
1:fe77ca5: 		if (t instanceof SQLException)
1:fe77ca5: 		{
1:fe77ca5: 			// let ij handle it
1:8ab3fa6:             return (SQLException)t;
1:fe77ca5: 		}
1:fe77ca5: 		if (t instanceof XAException)
1:fe77ca5: 		{
1:fe77ca5: 			int errorCode = ((XAException)t).errorCode;
1:fe77ca5: 			String error = LocalizedResource.getMessage("IJ_IlleValu");
1:fe77ca5: 
1:fe77ca5: 			// XA_RBBASE 100
1:fe77ca5: 			// XA_RBROLLBACK 100
1:fe77ca5: 			// XA_RBCOMMFAIL 101
1:fe77ca5: 			// XA_RBDEADLOCK 102
1:fe77ca5: 			// XA_RBINTEGRITY 103
1:fe77ca5: 			// XA_RBOTHER 104
1:fe77ca5: 			// XA_RBPROTO 105
1:fe77ca5: 			// XA_RBTIMEOUT 106
1:fe77ca5: 			// XA_RBTRANSIENT 107
1:fe77ca5: 			// XA_RBEND 107
1:fe77ca5: 			//
1:fe77ca5: 			// XA_RDONLY 3
1:fe77ca5: 			// XA_RETRY 4
1:fe77ca5: 			// XA_HEURMIX 5
1:fe77ca5: 			// XA_HEURRB 6
1:fe77ca5: 			// XA_HEURCOM 7
1:fe77ca5: 			// XA_HEURHAZ 8
1:fe77ca5: 			// XA_NOMIGRATE 9
1:fe77ca5: 			//
1:fe77ca5: 			// XAER_ASYNC -2
1:fe77ca5: 			// XAER_RMERR -3
1:fe77ca5: 			// XAER_NOTA -4
1:fe77ca5: 			// XAER_INVAL -5
1:fe77ca5: 			// XAER_PROTO -6
1:fe77ca5: 			// XAER_RMFAIL -7
1:fe77ca5: 			// XAER_DUPID -8
1:fe77ca5: 			// XAER_OUTSIDE -9
1:fe77ca5: 
1:fe77ca5: 			switch(errorCode)
1:fe77ca5: 			{
1:fe77ca5: 			case XAException.XA_HEURCOM : error = "XA_HEURCOM "; break;
1:fe77ca5: 			case XAException.XA_HEURHAZ : error = "XA_HEURHAZ"; break;
1:fe77ca5: 			case XAException.XA_HEURMIX : error = "XA_HEURMIX"; break;
1:fe77ca5: 			case XAException.XA_HEURRB : error = "XA_HEURRB "; break;
1:fe77ca5: 			case XAException.XA_NOMIGRATE : error = "XA_NOMIGRATE "; break;
1:fe77ca5: 				// case XAException.XA_RBBASE : error = "XA_RBBASE "; break;
1:fe77ca5: 			case XAException.XA_RBCOMMFAIL : error = "XA_RBCOMMFAIL "; break;
1:fe77ca5: 			case XAException.XA_RBDEADLOCK : error = "XA_RBDEADLOCK "; break;
1:fe77ca5: 				// case XAException.XA_RBEND : error = "XA_RBEND "; break;
1:fe77ca5: 			case XAException.XA_RBINTEGRITY : error = "XA_RBINTEGRITY "; break;
1:fe77ca5: 			case XAException.XA_RBOTHER : error = "XA_RBOTHER "; break;
1:fe77ca5: 			case XAException.XA_RBPROTO : error = "XA_RBPROTO "; break;
1:fe77ca5: 			case XAException.XA_RBROLLBACK : error = "XA_RBROLLBACK "; break;
1:fe77ca5: 			case XAException.XA_RBTIMEOUT : error = "XA_RBTIMEOUT "; break;
1:fe77ca5: 			case XAException.XA_RBTRANSIENT : error = "XA_RBTRANSIENT "; break;
1:fe77ca5: 			case XAException.XA_RDONLY : error = "XA_RDONLY "; break;
1:fe77ca5: 			case XAException.XA_RETRY : error = "XA_RETRY "; break;
1:fe77ca5: 			case XAException.XAER_ASYNC : error = "XAER_ASYNC "; break;
1:fe77ca5: 			case XAException.XAER_DUPID : error = "XAER_DUPID "; break;
1:fe77ca5: 			case XAException.XAER_INVAL : error = "XAER_INVAL "; break;
1:fe77ca5: 			case XAException.XAER_NOTA : error = "XAER_NOTA "; break;
1:fe77ca5: 			case XAException.XAER_OUTSIDE : error = "XAER_OUTSIDE "; break;
1:fe77ca5: 			case XAException.XAER_PROTO : error = "XAER_PROTO "; break;
1:fe77ca5: 			case XAException.XAER_RMERR : error = "XAER_RMERR "; break;
1:fe77ca5: 			case XAException.XAER_RMFAIL : error = "XAER_RMFAIL "; break;
1:fe77ca5: 			}
1:97a334e: 			//t.printStackTrace(System.out);
1:fe77ca5: 			throw new ijException(error);
1:fe77ca5: 
1:fe77ca5: 		}
1:fe77ca5: 		else // StandardException or run time exception, log it first
1:fe77ca5: 		{
1:15d8bf2: 			String info = LocalizedResource.getMessage("IJ_01SeeLog", t.toString(), t.getMessage());
1:97a334e: 			//		t.printStackTrace(System.out);
1:fe77ca5: 			throw new ijException(info);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	// non-xa stuff. DataSource and ConnectionPoolDataSource
1:fe77ca5: 	public Connection DataSourceStatement(ij parser, Token dbname, Token protocol,
1:fe77ca5: 									Token userT, Token passT, String id)
1:fe77ca5: 		 throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 
1:7c812c7: 		try {
1:4469400:             Class<?> clazz = Class.forName("org.apache.derby.jdbc.EmbeddedDataSource");
1:4469400: 			currentDataSource = (DataSource) (clazz.getConstructor().newInstance());
1:fe77ca5: 		} catch (Exception e) {
1:fe77ca5: 			throw new SQLException(e.toString());
1:fe77ca5: 		}
1:fe77ca5: 		databaseName = parser.stringValue(dbname.image);
1:fe77ca5: 		xaHelper.setDataSourceProperty(currentDataSource, "databaseName", databaseName);
1:4383496: 		xaHelper.setDataSourceProperty(currentXADataSource, "dataSourceName", databaseName);
1:fe77ca5: 		// make a connection
1:fe77ca5: 		Connection c = null;
1:fe77ca5: 		String username = null;
1:fe77ca5: 		String password = "";
1:fe77ca5: 
1:fe77ca5: 		if (passT != null)
1:fe77ca5: 			password = parser.stringValue(passT.image);
1:fe77ca5: 
1:fe77ca5: 		if (userT != null)
1:fe77ca5: 		{
1:fe77ca5: 			username = parser.stringValue(userT.image);
1:fe77ca5: 			c = currentDataSource.getConnection(username, password);
1:fe77ca5: 		}
2:fe77ca5: 		else
1:fe77ca5: 		{
1:fe77ca5: 			c = currentDataSource.getConnection();
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return c;
1:fe77ca5: 
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void CPDataSourceStatement(ij parser, Token dbname, Token protocol)
1:fe77ca5: 		 throws SQLException
1:fe77ca5: 	{
1:4383496: 		try {
1:4469400:           Class<?> clazz = Class.forName("org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource");
1:4469400:           currentCPDataSource = (ConnectionPoolDataSource) (clazz.getConstructor().newInstance());
1:fe77ca5: 		} catch (Exception e) {
1:fe77ca5: 			throw new SQLException(e.toString());
1:fe77ca5: 		}
1:fe77ca5: 		databaseName = parser.stringValue(dbname.image);
1:fe77ca5: 		xaHelper.setDataSourceProperty(currentCPDataSource, "databaseName", databaseName);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void CPConnectStatement(ij parser, Token userT, Token passT, String n)
1:fe77ca5: 		 throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		String username = null;
1:fe77ca5: 		String password = "";
1:fe77ca5: 
1:fe77ca5: 		if (passT != null)
1:fe77ca5: 			password = parser.stringValue(passT.image);
1:fe77ca5: 
1:fe77ca5: 		if (userT != null)
1:fe77ca5: 		{
1:fe77ca5: 			username = parser.stringValue(userT.image);
1:fe77ca5: 			currentPooledConnection =
1:fe77ca5: 				currentCPDataSource.getPooledConnection(username, password);
1:fe77ca5: 		}
1:fe77ca5: 		else
1:fe77ca5: 		{
1:fe77ca5: 			currentPooledConnection =
1:fe77ca5: 				currentCPDataSource.getPooledConnection();
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public Connection CPGetConnectionStatement(ij parser, String n) 
1:fe77ca5: 		 throws SQLException 
1:fe77ca5: 	{
1:fe77ca5: 		return currentPooledConnection.getConnection();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void CPDisconnectStatement(ij parser, String n) throws SQLException
1:fe77ca5: 	{
1:fe77ca5: 		if (currentPooledConnection == null)
1:62d63f6: 			throw ijException.noSuchConnection(LocalizedResource.getMessage("PooledConnection"));
1:fe77ca5: 		currentPooledConnection.close();
1:fe77ca5: 		currentPooledConnection = null;
1:fe77ca5: 	}
1:fe77ca5: 
2:fe77ca5: 	/**
1:fe77ca5: 	 * Get a DataSource that supports distributed transactions.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return XADataSource object 
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception Exception if XaDataSource is not in class path.
1:fe77ca5: 	 */
1:fe77ca5: 	private XADataSource getXADataSource() throws Exception
1:fe77ca5: 	{
1:fe77ca5: 		// We need to construct this object in this round about fashion because
1:fe77ca5: 		// if we new it directly, then it will the tools.jar file to bloat.
1:fe77ca5: 		try
1:fe77ca5: 		{
1:4469400:             Class<?> clazz;
1:88777c5:             if (isJCC)
1:4469400:             {
1:4469400:                 clazz = Class.forName("com.ibm.db2.jcc.DB2XADataSource");
1:4469400:                 return (XADataSource) clazz.getConstructor().newInstance();
1:4469400:             }
1:17d490d:             else if (isNetClient){
1:c35e4f0:                 if (ij.JNDI()) {
1:17d490d:                     //running under jdk1.6 or higher
1:17d490d:                     // try instantiating EmbeddedXADataSource40
1:17d490d:                     try {
1:4469400:                         clazz = Class.forName("org.apache.derby.jdbc.ClientXADataSource40");
1:4469400:                         return (XADataSource) clazz.getConstructor().newInstance();
1:17d490d:                     }
1:17d490d:                     catch (ClassNotFoundException e) {
1:17d490d:                         //probably it was not compiled with jdbc4.0
1:c35e4f0:                         //support go ahead with ClientXADataSource
1:17d490d:                     }
1:c35e4f0:                     catch (UnsupportedClassVersionError ue) {
1:c35e4f0:                         // ClientXADataSource
1:17d490d:                     }
1:4469400:                     
1:4469400:                     clazz = Class.forName("org.apache.derby.jdbc.ClientXADataSource");
1:4469400:                                                          
1:4469400:                     return (XADataSource) clazz.getConstructor().newInstance();
1:c35e4f0:                 } else {
1:4469400:                     clazz = Class.forName("org.apache.derby.jdbc.BasicClientXADataSource40");
1:4469400:                     return (XADataSource) clazz.getConstructor().newInstance();
1:17d490d:                 }
1:c35e4f0:             } else {
1:c35e4f0:                 if (ij.JNDI()) {
1:e175303:                     //running under jdk1.6 or higher
1:e175303:                     // try instantiating EmbeddedXADataSource40
1:e175303:                     try {
1:4469400:                         clazz = Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource40");
1:4469400:                         return (XADataSource) clazz.getConstructor().newInstance();
1:c35e4f0:                     } catch (ClassNotFoundException e) {
1:e175303:                         //probably it was not compiled with jdbc4.0
1:17d490d:                         //support go ahead with EmbeddedXADataSource
1:c35e4f0:                     } catch (UnsupportedClassVersionError ue) {
1:c35e4f0:                         // not jdk 16 or higher. Go ahead with
1:c35e4f0:                         // EmbeddedXADataSource
1:e175303:                     }
1:c35e4f0: 
1:4469400:                     clazz = Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource");
1:4469400:                     return (XADataSource) clazz.getConstructor().newInstance();
1:c35e4f0:                 } else {
1:4469400:                     clazz = Class.forName("org.apache.derby.jdbc.BasicEmbeddedXADataSource40");
1:4469400:                     return (XADataSource) clazz.getConstructor().newInstance();
1:e175303:                 }
1:e175303:             }
1:c35e4f0:         }
1:88777c5:         catch(ClassNotFoundException cnfe) {
1:fe77ca5: 			throw new ijException(LocalizedResource.getMessage("IJ_XAClass"));
1:88777c5: 		}
1:4469400: 		catch (InstantiationException e) {}
1:4469400: 		catch (IllegalAccessException e) {}
1:4469400: 		catch (NoSuchMethodException e) {}
1:4469400:         catch (java.lang.reflect.InvocationTargetException e) {}
1:fe77ca5: 
1:fe77ca5: 		throw new ijException(LocalizedResource.getMessage("IJ_XANoI"));
1:88777c5: 	}
1:e23c6af: 	private static final Class[] STRING_P = { "".getClass() };
1:fe77ca5: 	private static final Class[] INT_P = { Integer.TYPE };
1:4383496: 	private static final Class[] BOOLEAN_P = {Boolean.TYPE };
1:fe77ca5: 
1:4383496: 	private static void setDataSourceProperty(Object ds, String property, int 
1:4383496: 											  value) throws SQLException
1:4383496: 	{
1:4383496: 		String methodName =
1:4383496: 			"set" + Character.toUpperCase(property.charAt(0)) + property.substring(1);
1:c35e4f0: 		try {
1:4383496: 			java.lang.reflect.Method m = ds.getClass().getMethod(methodName, INT_P);
1:ce40a31: 			m.invoke(ds, new Object[] {value});
1:88777c5: 		}
1:4383496: 		catch (Exception e)
1:4383496: 		{
1:4383496: 			throw new SQLException(property + " ???" + e.getMessage());
1:88777c5: 		}		
1:4383496: 		
1:88777c5: 	}
1:4383496: 	
1:fe77ca5: 	private static void setDataSourceProperty(Object ds, String property, String value) throws SQLException {
1:fe77ca5: 
1:fe77ca5: 		String methodName =
1:fe77ca5: 			"set" + Character.toUpperCase(property.charAt(0)) + property.substring(1);
1:fe77ca5: 
1:88777c5: 		try {
1:fe77ca5: 			java.lang.reflect.Method m = ds.getClass().getMethod(methodName, STRING_P);
1:fe77ca5: 			m.invoke(ds, new Object[] {value});
1:fe77ca5: 			return;
1:fe77ca5: 		} catch (/*NoSuchMethod*/Exception nsme) {
1:fe77ca5: 			throw new SQLException(property + " ???");
1:fe77ca5: 			//java.lang.reflect.Method m = ds.getClass().getMethod("set" + property, INT_P);
1:fe77ca5: 			//m.invoke(ds, new Object[] {Integer.valueOf(value)});
1:4383496: 		}
1:4383496: 	}
1:4383496: 
1:4383496: private static void setDataSourceProperty(Object ds, String property, boolean value) throws SQLException {
1:4383496: 
1:4383496: 		String methodName =
1:4383496: 			"set" + Character.toUpperCase(property.charAt(0)) + property.substring(1);
1:4383496: 
1:4383496: 		try {
1:4383496: 			java.lang.reflect.Method m = ds.getClass().getMethod(methodName, BOOLEAN_P);
1:ce40a31: 			m.invoke(ds, new Object[] {value});
1:4383496: 			return;
1:4383496: 		} catch (Exception nsme) {
1:4383496: 			throw new SQLException(property + " ???");
1:4383496: 		}
1:4383496: 	}
1:4383496: }
1:4383496: 
1:4383496: 
1:fe77ca5: 
1:fe77ca5: class ijXid implements Xid, java.io.Serializable
1:fe77ca5: {
1:fe77ca5:   private static final long serialVersionUID = 64467452100036L;
1:fe77ca5: 
1:fe77ca5: 	private final int format_id;
1:fe77ca5: 	private final byte[] global_id;
1:fe77ca5: 	private final byte[] branch_id;
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 	ijXid(int xid, byte[] id)
1:fe77ca5: 	{
1:fe77ca5: 		format_id = xid;
1:fe77ca5: 		global_id = id;
1:fe77ca5: 		branch_id = id;
1:fe77ca5: 		
1:fe77ca5: 	}
1:fe77ca5:     /**
1:fe77ca5:      * Obtain the format id part of the Xid.
1:fe77ca5:      * <p>
1:fe77ca5:      *
1:fe77ca5:      * @return Format identifier. O means the OSI CCR format.
1:fe77ca5:      **/
1:fe77ca5:     public int getFormatId()
1:fe77ca5:     {
1:fe77ca5:         return(format_id);
1:fe77ca5:     }
1:fe77ca5: 
1:fe77ca5:     /**
1:fe77ca5:      * Obtain the global transaction identifier part of XID as an array of 
1:fe77ca5:      * bytes.
1:fe77ca5:      * <p>
1:fe77ca5:      *
1:fe77ca5: 	 * @return A byte array containing the global transaction identifier.
1:fe77ca5:      **/
1:fe77ca5:     public byte[] getGlobalTransactionId()
1:fe77ca5:     {
1:fe77ca5:         return(global_id);
1:fe77ca5:     }
1:fe77ca5: 
1:fe77ca5:     /**
1:fe77ca5:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:fe77ca5:      * <p>
1:fe77ca5:      *
1:fe77ca5: 	 * @return A byte array containing the branch qualifier of the transaction.
1:fe77ca5:      **/
1:fe77ca5:     public byte[] getBranchQualifier()
1:fe77ca5:     {
1:fe77ca5:         return(branch_id);
1:fe77ca5:     }
1:fe77ca5: }
1:fe77ca5: 
1:fe77ca5: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:   public xaHelper()
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz = Class.forName("org.apache.derby.jdbc.EmbeddedDataSource");
1: 			currentDataSource = (DataSource) (clazz.getConstructor().newInstance());
/////////////////////////////////////////////////////////////////////////
1:           Class<?> clazz = Class.forName("org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource");
1:           currentCPDataSource = (ConnectionPoolDataSource) (clazz.getConstructor().newInstance());
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz;
1:             {
1:                 clazz = Class.forName("com.ibm.db2.jcc.DB2XADataSource");
1:                 return (XADataSource) clazz.getConstructor().newInstance();
1:             }
1:                         clazz = Class.forName("org.apache.derby.jdbc.ClientXADataSource40");
1:                         return (XADataSource) clazz.getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1:                     
1:                     clazz = Class.forName("org.apache.derby.jdbc.ClientXADataSource");
1:                                                          
1:                     return (XADataSource) clazz.getConstructor().newInstance();
1:                     clazz = Class.forName("org.apache.derby.jdbc.BasicClientXADataSource40");
1:                     return (XADataSource) clazz.getConstructor().newInstance();
1:                         clazz = Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource40");
1:                         return (XADataSource) clazz.getConstructor().newInstance();
/////////////////////////////////////////////////////////////////////////
1:                     clazz = Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource");
1:                     return (XADataSource) clazz.getConstructor().newInstance();
1:                     clazz = Class.forName("org.apache.derby.jdbc.BasicEmbeddedXADataSource40");
1:                     return (XADataSource) clazz.getConstructor().newInstance();
1: 		catch (InstantiationException e) {}
1: 		catch (IllegalAccessException e) {}
1: 		catch (NoSuchMethodException e) {}
1:         catch (java.lang.reflect.InvocationTargetException e) {}
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 			m.invoke(ds, new Object[] {value});
/////////////////////////////////////////////////////////////////////////
1: 			m.invoke(ds, new Object[] {value});
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1: 		Vector<String> v = new Vector<String>();
commit:62d63f6
/////////////////////////////////////////////////////////////////////////
1: 			throw ijException.noSuchConnection(LocalizedResource.getMessage("PooledConnection"));
commit:17d490d
/////////////////////////////////////////////////////////////////////////
1: 			else if (isNetClient){
0:                             if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
1:                                 //running under jdk1.6 or higher 
1:                                 // try instantiating EmbeddedXADataSource40
1:                                 try {
0:                                     return (XADataSource)(Class.forName(
0:                                         "org.apache.derby.jdbc." +
0:                                         "ClientXADataSource40").newInstance());                                        
1:                                 }
1:                                 catch (ClassNotFoundException e) {
1:                                     //probably it was not compiled with jdbc4.0
1:                                     //support go ahead with EmbeddedXADataSource
1:                                 }
1:                             }
0:                             return (XADataSource) (Class.forName(
0:                                     "org.apache.derby.jdbc.ClientXADataSource"
0:                                     ).newInstance());
1:                         }
commit:e175303
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
0: 			else {
0:                             if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
1:                                 //running under jdk1.6 or higher 
1:                                 // try instantiating EmbeddedXADataSource40
1:                                 try {
0:                                     return (XADataSource)(Class.forName(
0:                                         "org.apache.derby.jdbc." +
0:                                         "EmbeddedXADataSource40").newInstance());                                        
1:                                 }
0:                                 catch (ClassNotFoundException e) {
1:                                     //probably it was not compiled with jdbc4.0
0:                                     //support go ahead with EmbeddedXADataSource
1:                                 }
1:                             }
0:                             return (XADataSource)(Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource").newInstance());
1:                         }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:38667d9
/////////////////////////////////////////////////////////////////////////
0:                         "org.apache.derby.jdbc.BasicClientXADataSource40").
/////////////////////////////////////////////////////////////////////////
0:                         "org.apache.derby.jdbc.BasicEmbeddedXADataSource40").
commit:c35e4f0
/////////////////////////////////////////////////////////////////////////
1:                 if (ij.JNDI()) {
0:                     //running under jdk1.6 or higher
0:                     // try instantiating EmbeddedXADataSource40
1:                     try {
0:                         return (XADataSource)(Class.forName(
0:                                 "org.apache.derby.jdbc.ClientXADataSource40").
0:                                 newInstance());
1:                     }
0:                     catch (ClassNotFoundException e) {
0:                         //probably it was not compiled with jdbc4.0
1:                         //support go ahead with ClientXADataSource
1:                     }
1:                     catch (UnsupportedClassVersionError ue) {
1:                         // ClientXADataSource
1:                     }
0:                     return (XADataSource) (Class.forName(
0:                             "org.apache.derby.jdbc.ClientXADataSource"
0:                             ).newInstance());
1:                 } else {
0:                         "org.apache.derby.jdbc.NonJNDIClientXADataSource40").
0:                             newInstance());
1:             } else {
1:                 if (ij.JNDI()) {
0:                     //running under jdk1.6 or higher
0:                     // try instantiating EmbeddedXADataSource40
1:                     try {
0:                         return (XADataSource)(Class.forName(
0:                             "org.apache.derby.jdbc.EmbeddedXADataSource40").
0:                                 newInstance());
1:                     } catch (ClassNotFoundException e) {
0:                         //probably it was not compiled with jdbc4.0
0:                         //support go ahead with EmbeddedXADataSource
1:                     } catch (UnsupportedClassVersionError ue) {
1:                         // not jdk 16 or higher. Go ahead with
1:                         // EmbeddedXADataSource
1:                     }
1: 
0:                         "org.apache.derby.jdbc.EmbeddedXADataSource").
0:                             newInstance());
1:                 } else {
0:                     return (XADataSource)(Class.forName(
0:                         "org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40").
0:                             newInstance());
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8ab3fa6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
/////////////////////////////////////////////////////////////////////////
1:             throw handleException(t);
1:     /**
1:      * Handles the given throwable.
1:      * <p>
1:      * If possible, an {@code SQLException} is returned. Otherwise the
1:      * appropriate actions are taken and a {@code RuntimeException} is thrown.
1:      *
1:      * @param t exception to handle
1:      * @return An {@code SQLException}.
1:      * @throws RuntimeException if the throwable isn't an {@code SQLException}
1:      */
1: 	private SQLException handleException(Throwable t)
1:             return (SQLException)t;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:88777c5
/////////////////////////////////////////////////////////////////////////
1: 		    
1:             if (isJCC)
0:                return (XADataSource) 
0:                 (Class.forName("com.ibm.db2.jcc.DB2XADataSource").newInstance());
0:             else if (isNetClient){
0:                 //running under jdk1.6 or higher 
0:                 // try instantiating EmbeddedXADataSource40
1:                 try {
0:                     return (XADataSource)(Class.forName(
0:                             "org.apache.derby.jdbc." +
0:                     "ClientXADataSource40").newInstance());                                        
1:                 }
0:                 catch (ClassNotFoundException e) {
0:                     //probably it was not compiled with jdbc4.0
0:                     //support go ahead with ClientXADataSource
1:                 }
0:                 catch (UnsupportedClassVersionError ue) { 
0:                     // ClientXADataSource
1:                 }
0:                 return (XADataSource) (Class.forName(
0:                         "org.apache.derby.jdbc.ClientXADataSource"
0:                 ).newInstance());
1:             }
0:             else {
0:                 //running under jdk1.6 or higher 
0:                 // try instantiating EmbeddedXADataSource40
1:                 try {
0:                     return (XADataSource)(Class.forName(
0:                             "org.apache.derby.jdbc." +
0:                     "EmbeddedXADataSource40").newInstance());                                        
1:                 }
0:                 catch (ClassNotFoundException e) {
0:                     //probably it was not compiled with jdbc4.0
0:                     //support go ahead with EmbeddedXADataSource
1:                 }
0:                 catch (UnsupportedClassVersionError ue) {
0:                     // not jdk 16 or higher. Go ahead with
0:                     // EmbeddedXADataSource
1:                 }
0:                 return (XADataSource)(Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource").newInstance());
1:             }
1:         }
1:         catch(ClassNotFoundException cnfe) {
commit:7c812c7
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.io.UnsupportedEncodingException;
/////////////////////////////////////////////////////////////////////////
1: 		try {
1: 			return new ijXid(xid, databaseName.getBytes("UTF-8"));
1: 		} catch (UnsupportedEncodingException e) {
1: 			// UTF-8 is a required encoding. We should never get here.
1: 			e.printStackTrace();
1: 			return null;
1: 		}
commit:fee55d8
/////////////////////////////////////////////////////////////////////////
1:                 if (fm == null) {
1:                     return;
1:                 }
commit:91eacad
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			  {
1: 				  xaHelper.setDataSourceProperty(currentXADataSource, 
1: 												 "retrieveMessagesFromServerOnGetMessage", true);
1: 			  }
commit:97a334e
/////////////////////////////////////////////////////////////////////////
1: 	private boolean isNetClient;
/////////////////////////////////////////////////////////////////////////
1: 		framework = fm.toUpperCase(Locale.ENGLISH);
1: 		else if (framework.equals("DERBYNETCLIENT"))
1: 				 isNetClient = true;
/////////////////////////////////////////////////////////////////////////
1: 			  if (isJCC || isNetClient)
/////////////////////////////////////////////////////////////////////////
1: 			  if (isJCC)
1: 				  xaHelper.setDataSourceProperty(currentXADataSource,
1: 												 "driverType", 4);
1: 				if (isJCC || isNetClient)
/////////////////////////////////////////////////////////////////////////
1: 				if (isJCC || isNetClient)
/////////////////////////////////////////////////////////////////////////
1: 			//t.printStackTrace(System.out);
1: 			//		t.printStackTrace(System.out);
/////////////////////////////////////////////////////////////////////////
0: 			else if (isNetClient)
0: 				return (XADataSource) 
0: 					(Class.forName("org.apache.derby.jdbc.ClientXADataSource").newInstance());
commit:4383496
/////////////////////////////////////////////////////////////////////////
1: 	private boolean isJCC;
1: 	private String framework;
1: 	public void setFramework(String fm)
1: 	{
0: 		framework = fm.toUpperCase();
1: 		if (framework.endsWith("NET") ||
1: 			framework.equals("DB2JCC"))
1: 			isJCC = true;
1: 
1: 	}
1: 		
/////////////////////////////////////////////////////////////////////////
1: 			  
0: 			  if (isJCC)
1: 			  {
1: 			  xaHelper.setDataSourceProperty(currentXADataSource,
1: 											 "ServerName", "localhost");
1: 			  xaHelper.setDataSourceProperty(currentXADataSource,
1: 											 "portNumber", 1527);
1: 			  
1: 			  xaHelper.setDataSourceProperty(currentXADataSource,
0: 											 "driverType", 4);
1: 
1: 			  xaHelper.setDataSourceProperty(currentXADataSource, 
0: 											 "retrieveMessagesFromServerOnGetMessage", true);
1: 			  String user;
1: 			  String password;
1: 			  user = "APP";
1: 			  password = "APP";
1: 			  xaHelper.setDataSourceProperty(currentXADataSource,
1: 											 "user", user);
1: 			  xaHelper.setDataSourceProperty(currentXADataSource,
1: 											 "password", password);
1: 			  //xaHelper.setDataSourceProperty(currentXADataSource,
1: 			  //"traceFile", "trace.out." + framework);
1: 			  }
1: 
1: 			{	
0: 				if (isJCC)
1: 					xaHelper.setDataSourceProperty(currentXADataSource,"databaseName", databaseName + ";shutdown=true");
1: 				else
1: 					xaHelper.setDataSourceProperty(currentXADataSource, "shutdownDatabase", "shutdown");
1: 			else if (create != null && create.toLowerCase(java.util.Locale.ENGLISH).equals("create"))
0: 				if (isJCC)
1: 					xaHelper.setDataSourceProperty(currentXADataSource,"databaseName", databaseName + ";create=true");
1: 				else
1: 					xaHelper.setDataSourceProperty(currentXADataSource,
1: 												   "createDatabase", "create");
1: 				/* do a getXAConnection to create it */
1: 				XAConnection conn = currentXADataSource.getXAConnection();
1: 				conn.close();
1: 				
1: 				xaHelper.setDataSourceProperty(currentXADataSource, "createDatabase", null);
/////////////////////////////////////////////////////////////////////////
1: 		xaHelper.setDataSourceProperty(currentXADataSource, "dataSourceName", databaseName);
/////////////////////////////////////////////////////////////////////////
0: 			if (isJCC)
0: 				return (XADataSource) 
0: 					(Class.forName("com.ibm.db2.jcc.DB2XADataSource").newInstance());
1: 			else
0: 				return (XADataSource)(Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource").newInstance());
/////////////////////////////////////////////////////////////////////////
1: 	private static final Class[] BOOLEAN_P = {Boolean.TYPE };
1: 	private static void setDataSourceProperty(Object ds, String property, int 
1: 											  value) throws SQLException
1: 	{
1: 		String methodName =
1: 			"set" + Character.toUpperCase(property.charAt(0)) + property.substring(1);
1: 		try {
1: 			java.lang.reflect.Method m = ds.getClass().getMethod(methodName, INT_P);
0: 			m.invoke(ds, new Object[] {new Integer(value)});
1: 		}
1: 		catch (Exception e)
1: 		{
1: 			throw new SQLException(property + " ???" + e.getMessage());
1: 		}		
1: 		
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 
1: private static void setDataSourceProperty(Object ds, String property, boolean value) throws SQLException {
1: 
1: 		String methodName =
1: 			"set" + Character.toUpperCase(property.charAt(0)) + property.substring(1);
1: 
1: 		try {
1: 			java.lang.reflect.Method m = ds.getClass().getMethod(methodName, BOOLEAN_P);
0: 			m.invoke(ds, new Object[] {new Boolean(value)});
1: 			return;
1: 		} catch (Exception nsme) {
1: 			throw new SQLException(property + " ???");
1: 		}
1: 	}
1: 
1: 
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
1: 			  	String hostName = System.getProperty("hostName");
1: 			  	if ((hostName != null ) && (!hostName.equals("localhost")))
1: 				{			
0: 			  		xaHelper.setDataSourceProperty(currentXADataSource,
1: 											 "ServerName", hostName);
1: 				}
1: 			  	else
1: 				{			
0: 			  		xaHelper.setDataSourceProperty(currentXADataSource,
0: 							 "ServerName", "localhost");
1: 				}
commit:15d8bf2
/////////////////////////////////////////////////////////////////////////
1: 			String info = LocalizedResource.getMessage("IJ_01SeeLog", t.toString(), t.getMessage());
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.xaHelper
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:e23c6af
/////////////////////////////////////////////////////////////////////////
1: 	private static final Class[] STRING_P = { "".getClass() };
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.util.Locale;
1: import java.util.Vector;
1: 
1: import javax.transaction.xa.Xid;
0: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.XAException;
1: import javax.sql.PooledConnection;
1: import javax.sql.XAConnection;
1: import javax.sql.XADataSource;
1: import javax.sql.DataSource;
1: import javax.sql.ConnectionPoolDataSource;
1: 
1: /*
1:  * The real xa helper class.  Load this class only if we know the javax classes
1:  * are in the class path.
1:  */
1: class xaHelper implements xaAbstractHelper
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private XADataSource currentXADataSource;
1: 	private XAConnection currentXAConnection;
1: 
1: 	private String databaseName;
1: 
1: 	// non xa stuff
1: 	private DataSource currentDataSource;
1: 	private ConnectionPoolDataSource currentCPDataSource;
1: 	private PooledConnection currentPooledConnection;
1: 
0:   private String framework_property;
1: 
0:   xaHelper()
1:   {
1:   }
1: 	  
1: 	  
0:    public void setFramework(String framework)
1:   {
0:     this.framework_property = framework_property;
1:   }
1: 	
1: 	private Xid makeXid(int xid)
1: 	{
0: 		return new ijXid(xid, databaseName.getBytes());
1: 	}
1: 
1: 	public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
1: 									String create)
1: 		 throws SQLException
1: 	{
1: 		try
1: 		{
1: 			  currentXADataSource = (XADataSource) getXADataSource();
1: 
1: 			  databaseName = parser.stringValue(dbname.image);
1: 			  xaHelper.setDataSourceProperty(currentXADataSource, "databaseName", databaseName);
0: 			  xaHelper.setDataSourceProperty(currentXADataSource, "dataSourceName", databaseName);
1: 
1: 			if (shutdown != null && shutdown.toString().toLowerCase(Locale.ENGLISH).equals("shutdown"))
1: 			{
0: 			  xaHelper.setDataSourceProperty(currentXADataSource, "shutdownDatabase", "shutdown");
1: 
1: 				// do a getXAConnection to shut it down */
1: 				currentXADataSource.getXAConnection().getConnection();
1: 
1: 				currentXADataSource = null;
1: 				currentXAConnection = null;
1: 			}
0: 			else if (create != null)
1: 			{
0: 				if (create.toLowerCase(java.util.Locale.ENGLISH).equals("create"))
1: 				{
0: 					xaHelper.setDataSourceProperty(currentXADataSource, "createDatabase", "create");
1: 
0: 					/* do a getXAConnection to create it */
0: 					XAConnection conn = currentXADataSource.getXAConnection();
0: 					conn.close();
1: 
0: 					xaHelper.setDataSourceProperty(currentXADataSource, "createDatabase", null);
1: 				}
1: 			}
1: 		}
1: 		catch (Throwable t)
1: 		{
0: 			handleException(t);
1: 		}	
1: 	}
1: 
1: 
1: 	public void XAConnectStatement(ij parser, Token user, Token pass, String id)
1: 		 throws SQLException
1: 	{
1: 		try
1: 		{
1: 			if (currentXAConnection != null)
1: 			{
0: 				try {
1: 					currentXAConnection.close();
1: 				} catch (SQLException sqle) {
1: 				}
1: 
1: 				currentXAConnection = null;
1: 			}
1: 
1: 			String username = null;
1: 			String password = "";
1: 
1: 			if (pass != null)
1: 				password = parser.stringValue(pass.image);
1: 
1: 			if (user != null)
1: 			{
1: 				username = parser.stringValue(user.image);
1: 
1: 				currentXAConnection = 
1: 					currentXADataSource.getXAConnection(username, password);
1: 			}
1: 			else
1: 			{
1: 
1: 				currentXAConnection = currentXADataSource.getXAConnection();
1: 			}
1: 
1: 		}
1: 		catch (Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 	}
1: 
1: 	public void XADisconnectStatement(ij parser, String n) throws SQLException
1: 	{
1: 		if (currentXAConnection == null)
1: 			throw ijException.noSuchConnection("XAConnection");
1: 		currentXAConnection.close();
1: 		currentXAConnection = null;
1: 	}
1: 
1: 	public Connection XAGetConnectionStatement(ij parser, String n) throws SQLException
1: 	{
1: 		try
1: 		{
1: 			return currentXAConnection.getConnection();
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
0: 		return null;
1: 	}
1: 
1: 	public void CommitStatement(ij parser, Token onePhase, Token twoPhase, 
1: 								int xid) 
1: 		 throws SQLException
1: 	{
1: 		try
1: 		{	
1: 			currentXAConnection.getXAResource().commit(makeXid(xid), (onePhase != null));
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 	}
1: 
1: 	public void EndStatement(ij parser, int flag, int xid) throws SQLException
1: 	{
1: 		try
1: 		{	
1: 			currentXAConnection.getXAResource().end(makeXid(xid), flag);
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 	}
1: 
1: 	public void ForgetStatement(ij parser, int xid) throws SQLException
1: 	{
1: 		try
1: 		{	
1: 			currentXAConnection.getXAResource().forget(makeXid(xid));
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 	}
1: 
1: 	public void PrepareStatement(ij parser, int xid) throws SQLException
1: 	{
1: 		try
1: 		{	
1: 			currentXAConnection.getXAResource().prepare(makeXid(xid));
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 	}
1: 
1: 	public ijResult RecoverStatement(ij parser, int flag) throws SQLException
1: 	{
1: 		Object[] val = null;
1: 
1: 		try
1: 		{	
1: 			val = currentXAConnection.getXAResource().recover(flag);
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 
0: 		Vector v = new Vector();
1: 		v.addElement("");
1: 		v.addElement(LocalizedResource.getMessage("IJ_Reco0InDoubT", LocalizedResource.getNumber(val.length)));
1: 		v.addElement("");
1: 		for (int i = 0; i < val.length; i++)
1: 			v.addElement(LocalizedResource.getMessage("IJ_Tran01", LocalizedResource.getNumber(i+1), val[i].toString()));
1: 
1: 		return new ijVectorResult(v,null);
1: 
1: 	}
1: 
1: 	public void RollbackStatement(ij parser, int xid) throws SQLException
1: 	{
1: 		try
1: 		{	
1: 			currentXAConnection.getXAResource().rollback(makeXid(xid));
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 
1: 	}
1: 
1: 	public void StartStatement(ij parser, int flag, int xid) throws SQLException
1: 	{
1: 		try
1: 		{	
1: 			currentXAConnection.getXAResource().start(makeXid(xid), flag);
1: 		}
1: 		catch(Throwable t)
1: 		{
0: 			handleException(t);
1: 		}
1: 	}
1: 
0: 	private void handleException(Throwable t) throws SQLException
1: 	{
1: 		if (t instanceof SQLException)
1: 		{
1: 			// let ij handle it
0: 			throw (SQLException)t;
1: 		}
1: 		if (t instanceof XAException)
1: 		{
1: 			int errorCode = ((XAException)t).errorCode;
1: 			String error = LocalizedResource.getMessage("IJ_IlleValu");
1: 
1: 			// XA_RBBASE 100
1: 			// XA_RBROLLBACK 100
1: 			// XA_RBCOMMFAIL 101
1: 			// XA_RBDEADLOCK 102
1: 			// XA_RBINTEGRITY 103
1: 			// XA_RBOTHER 104
1: 			// XA_RBPROTO 105
1: 			// XA_RBTIMEOUT 106
1: 			// XA_RBTRANSIENT 107
1: 			// XA_RBEND 107
1: 			//
1: 			// XA_RDONLY 3
1: 			// XA_RETRY 4
1: 			// XA_HEURMIX 5
1: 			// XA_HEURRB 6
1: 			// XA_HEURCOM 7
1: 			// XA_HEURHAZ 8
1: 			// XA_NOMIGRATE 9
1: 			//
1: 			// XAER_ASYNC -2
1: 			// XAER_RMERR -3
1: 			// XAER_NOTA -4
1: 			// XAER_INVAL -5
1: 			// XAER_PROTO -6
1: 			// XAER_RMFAIL -7
1: 			// XAER_DUPID -8
1: 			// XAER_OUTSIDE -9
1: 
1: 			switch(errorCode)
1: 			{
1: 			case XAException.XA_HEURCOM : error = "XA_HEURCOM "; break;
1: 			case XAException.XA_HEURHAZ : error = "XA_HEURHAZ"; break;
1: 			case XAException.XA_HEURMIX : error = "XA_HEURMIX"; break;
1: 			case XAException.XA_HEURRB : error = "XA_HEURRB "; break;
1: 			case XAException.XA_NOMIGRATE : error = "XA_NOMIGRATE "; break;
1: 				// case XAException.XA_RBBASE : error = "XA_RBBASE "; break;
1: 			case XAException.XA_RBCOMMFAIL : error = "XA_RBCOMMFAIL "; break;
1: 			case XAException.XA_RBDEADLOCK : error = "XA_RBDEADLOCK "; break;
1: 				// case XAException.XA_RBEND : error = "XA_RBEND "; break;
1: 			case XAException.XA_RBINTEGRITY : error = "XA_RBINTEGRITY "; break;
1: 			case XAException.XA_RBOTHER : error = "XA_RBOTHER "; break;
1: 			case XAException.XA_RBPROTO : error = "XA_RBPROTO "; break;
1: 			case XAException.XA_RBROLLBACK : error = "XA_RBROLLBACK "; break;
1: 			case XAException.XA_RBTIMEOUT : error = "XA_RBTIMEOUT "; break;
1: 			case XAException.XA_RBTRANSIENT : error = "XA_RBTRANSIENT "; break;
1: 			case XAException.XA_RDONLY : error = "XA_RDONLY "; break;
1: 			case XAException.XA_RETRY : error = "XA_RETRY "; break;
1: 			case XAException.XAER_ASYNC : error = "XAER_ASYNC "; break;
1: 			case XAException.XAER_DUPID : error = "XAER_DUPID "; break;
1: 			case XAException.XAER_INVAL : error = "XAER_INVAL "; break;
1: 			case XAException.XAER_NOTA : error = "XAER_NOTA "; break;
1: 			case XAException.XAER_OUTSIDE : error = "XAER_OUTSIDE "; break;
1: 			case XAException.XAER_PROTO : error = "XAER_PROTO "; break;
1: 			case XAException.XAER_RMERR : error = "XAER_RMERR "; break;
1: 			case XAException.XAER_RMFAIL : error = "XAER_RMFAIL "; break;
1: 			}
1: 			throw new ijException(error);
1: 
1: 		}
1: 		else // StandardException or run time exception, log it first
1: 		{
0: 			String info = LocalizedResource.getMessage("IJ_01SeeClouLog", t.toString(), t.getMessage());
0: 			t.printStackTrace(System.out);
1: 			throw new ijException(info);
1: 		}
1: 	}
1: 
1: 
1: 	// non-xa stuff. DataSource and ConnectionPoolDataSource
1: 	public Connection DataSourceStatement(ij parser, Token dbname, Token protocol,
1: 									Token userT, Token passT, String id)
1: 		 throws SQLException
1: 	{
1: 
0: 		try {
0: 			currentDataSource = (DataSource) (Class.forName("org.apache.derby.jdbc.EmbeddedDataSource").newInstance());
1: 		} catch (Exception e) {
1: 			throw new SQLException(e.toString());
1: 		}
1: 		databaseName = parser.stringValue(dbname.image);
1: 		xaHelper.setDataSourceProperty(currentDataSource, "databaseName", databaseName);
1: 
1: 		// make a connection
1: 		Connection c = null;
1: 		String username = null;
1: 		String password = "";
1: 
1: 		if (passT != null)
1: 			password = parser.stringValue(passT.image);
1: 
1: 		if (userT != null)
1: 		{
1: 			username = parser.stringValue(userT.image);
1: 			c = currentDataSource.getConnection(username, password);
1: 		}
1: 		else
1: 		{
1: 			c = currentDataSource.getConnection();
1: 		}
1: 
1: 		return c;
1: 
1: 	}
1: 
1: 	public void CPDataSourceStatement(ij parser, Token dbname, Token protocol)
1: 		 throws SQLException
1: 	{
0: 		try {
0: 			currentCPDataSource = (ConnectionPoolDataSource) (Class.forName("org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource").newInstance());
1: 		} catch (Exception e) {
1: 			throw new SQLException(e.toString());
1: 		}
1: 		databaseName = parser.stringValue(dbname.image);
1: 		xaHelper.setDataSourceProperty(currentCPDataSource, "databaseName", databaseName);
1: 	}
1: 
1: 	public void CPConnectStatement(ij parser, Token userT, Token passT, String n)
1: 		 throws SQLException
1: 	{
1: 		String username = null;
1: 		String password = "";
1: 
1: 		if (passT != null)
1: 			password = parser.stringValue(passT.image);
1: 
1: 		if (userT != null)
1: 		{
1: 			username = parser.stringValue(userT.image);
1: 			currentPooledConnection =
1: 				currentCPDataSource.getPooledConnection(username, password);
1: 		}
1: 		else
1: 		{
1: 			currentPooledConnection =
1: 				currentCPDataSource.getPooledConnection();
1: 		}
1: 	}
1: 
1: 	public Connection CPGetConnectionStatement(ij parser, String n) 
1: 		 throws SQLException 
1: 	{
1: 		return currentPooledConnection.getConnection();
1: 	}
1: 
1: 	public void CPDisconnectStatement(ij parser, String n) throws SQLException
1: 	{
1: 		if (currentPooledConnection == null)
0: 			throw ijException.noSuchConnection(LocalizedResource.getMessage("IJ_Pool"));
1: 		currentPooledConnection.close();
1: 		currentPooledConnection = null;
1: 	}
1: 
1: 	/**
1: 	 * Get a DataSource that supports distributed transactions.
1: 	 *
1: 	 * @return XADataSource object 
1: 	 *
1: 	 * @exception Exception if XaDataSource is not in class path.
1: 	 */
1: 	private XADataSource getXADataSource() throws Exception
1: 	{
1: 		// We need to construct this object in this round about fashion because
1: 		// if we new it directly, then it will the tools.jar file to bloat.
1: 		try
1: 		{
0: 			return (XADataSource)(Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource").newInstance());
1: 		}
0: 		catch(ClassNotFoundException cnfe) {
1: 			throw new ijException(LocalizedResource.getMessage("IJ_XAClass"));
1: 		}
0: 		catch (InstantiationException e) { }
0: 		catch (IllegalAccessException e) { }
1: 
1: 		throw new ijException(LocalizedResource.getMessage("IJ_XANoI"));
1: 	}
0: 	private static final Class[] STRING_P = { copyrightNotice.getClass() };
1: 	private static final Class[] INT_P = { Integer.TYPE };
1: 
1: 	private static void setDataSourceProperty(Object ds, String property, String value) throws SQLException {
1: 
1: 		String methodName =
1: 			"set" + Character.toUpperCase(property.charAt(0)) + property.substring(1);
1: 
0: 		try {
1: 			java.lang.reflect.Method m = ds.getClass().getMethod(methodName, STRING_P);
1: 			m.invoke(ds, new Object[] {value});
1: 			return;
1: 		} catch (/*NoSuchMethod*/Exception nsme) {
1: 			throw new SQLException(property + " ???");
1: 			//java.lang.reflect.Method m = ds.getClass().getMethod("set" + property, INT_P);
1: 			//m.invoke(ds, new Object[] {Integer.valueOf(value)});
1: 		}
1: 	}
1: }
1: 
1: class ijXid implements Xid, java.io.Serializable
1: {
1:   private static final long serialVersionUID = 64467452100036L;
1: 
1: 	private final int format_id;
1: 	private final byte[] global_id;
1: 	private final byte[] branch_id;
1: 
1: 
1: 	ijXid(int xid, byte[] id)
1: 	{
1: 		format_id = xid;
1: 		global_id = id;
1: 		branch_id = id;
1: 		
1: 	}
1:     /**
1:      * Obtain the format id part of the Xid.
1:      * <p>
1:      *
1:      * @return Format identifier. O means the OSI CCR format.
1:      **/
1:     public int getFormatId()
1:     {
1:         return(format_id);
1:     }
1: 
1:     /**
1:      * Obtain the global transaction identifier part of XID as an array of 
1:      * bytes.
1:      * <p>
1:      *
1: 	 * @return A byte array containing the global transaction identifier.
1:      **/
1:     public byte[] getGlobalTransactionId()
1:     {
1:         return(global_id);
1:     }
1: 
1:     /**
1:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:      * <p>
1:      *
1: 	 * @return A byte array containing the branch qualifier of the transaction.
1:      **/
1:     public byte[] getBranchQualifier()
1:     {
1:         return(branch_id);
1:     }
1: }
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import java.util.Locale;
0: import java.util.Vector;
0: 
0: import javax.transaction.xa.Xid;
0: import javax.transaction.xa.XAResource;
0: import javax.transaction.xa.XAException;
0: import javax.sql.PooledConnection;
0: import javax.sql.XAConnection;
0: import javax.sql.XADataSource;
0: import javax.sql.DataSource;
0: import javax.sql.ConnectionPoolDataSource;
0: 
0: /*
0:  * The real xa helper class.  Load this class only if we know the javax classes
0:  * are in the class path.
0:  */
0: class xaHelper implements xaAbstractHelper
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private XADataSource currentXADataSource;
0: 	private XAConnection currentXAConnection;
0: 
0: 	private String databaseName;
0: 
0: 	// non xa stuff
0: 	private DataSource currentDataSource;
0: 	private ConnectionPoolDataSource currentCPDataSource;
0: 	private PooledConnection currentPooledConnection;
0: 
0:   private String framework_property;
0: 
0:   xaHelper()
0:   {
0:   }
0: 	  
0: 	  
0:    public void setFramework(String framework)
0:   {
0:     this.framework_property = framework_property;
0:   }
0: 	
0: 	private Xid makeXid(int xid)
0: 	{
0: 		return new ijXid(xid, databaseName.getBytes());
0: 	}
0: 
0: 	public void XADataSourceStatement(ij parser, Token dbname, Token shutdown,
0: 									String create)
0: 		 throws SQLException
0: 	{
0: 		try
0: 		{
0: 			  currentXADataSource = (XADataSource) getXADataSource();
0: 
0: 			  databaseName = parser.stringValue(dbname.image);
0: 			  xaHelper.setDataSourceProperty(currentXADataSource, "databaseName", databaseName);
0: 			  xaHelper.setDataSourceProperty(currentXADataSource, "dataSourceName", databaseName);
0: 
0: 			if (shutdown != null && shutdown.toString().toLowerCase(Locale.ENGLISH).equals("shutdown"))
0: 			{
0: 			  xaHelper.setDataSourceProperty(currentXADataSource, "shutdownDatabase", "shutdown");
0: 
0: 				// do a getXAConnection to shut it down */
0: 				currentXADataSource.getXAConnection().getConnection();
0: 
0: 				currentXADataSource = null;
0: 				currentXAConnection = null;
0: 			}
0: 			else if (create != null)
0: 			{
0: 				if (create.toLowerCase(java.util.Locale.ENGLISH).equals("create"))
0: 				{
0: 					xaHelper.setDataSourceProperty(currentXADataSource, "createDatabase", "create");
0: 
0: 					/* do a getXAConnection to create it */
0: 					XAConnection conn = currentXADataSource.getXAConnection();
0: 					conn.close();
0: 
0: 					xaHelper.setDataSourceProperty(currentXADataSource, "createDatabase", null);
0: 				}
0: 			}
0: 		}
0: 		catch (Throwable t)
0: 		{
0: 			handleException(t);
0: 		}	
0: 	}
0: 
0: 
0: 	public void XAConnectStatement(ij parser, Token user, Token pass, String id)
0: 		 throws SQLException
0: 	{
0: 		try
0: 		{
0: 			if (currentXAConnection != null)
0: 			{
0: 				try {
0: 					currentXAConnection.close();
0: 				} catch (SQLException sqle) {
0: 				}
0: 
0: 				currentXAConnection = null;
0: 			}
0: 
0: 			String username = null;
0: 			String password = "";
0: 
0: 			if (pass != null)
0: 				password = parser.stringValue(pass.image);
0: 
0: 			if (user != null)
0: 			{
0: 				username = parser.stringValue(user.image);
0: 
0: 				currentXAConnection = 
0: 					currentXADataSource.getXAConnection(username, password);
0: 			}
0: 			else
0: 			{
0: 
0: 				currentXAConnection = currentXADataSource.getXAConnection();
0: 			}
0: 
0: 		}
0: 		catch (Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 	}
0: 
0: 	public void XADisconnectStatement(ij parser, String n) throws SQLException
0: 	{
0: 		if (currentXAConnection == null)
0: 			throw ijException.noSuchConnection("XAConnection");
0: 		currentXAConnection.close();
0: 		currentXAConnection = null;
0: 	}
0: 
0: 	public Connection XAGetConnectionStatement(ij parser, String n) throws SQLException
0: 	{
0: 		try
0: 		{
0: 			return currentXAConnection.getConnection();
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 		return null;
0: 	}
0: 
0: 	public void CommitStatement(ij parser, Token onePhase, Token twoPhase, 
0: 								int xid) 
0: 		 throws SQLException
0: 	{
0: 		try
0: 		{	
0: 			currentXAConnection.getXAResource().commit(makeXid(xid), (onePhase != null));
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 	}
0: 
0: 	public void EndStatement(ij parser, int flag, int xid) throws SQLException
0: 	{
0: 		try
0: 		{	
0: 			currentXAConnection.getXAResource().end(makeXid(xid), flag);
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 	}
0: 
0: 	public void ForgetStatement(ij parser, int xid) throws SQLException
0: 	{
0: 		try
0: 		{	
0: 			currentXAConnection.getXAResource().forget(makeXid(xid));
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 	}
0: 
0: 	public void PrepareStatement(ij parser, int xid) throws SQLException
0: 	{
0: 		try
0: 		{	
0: 			currentXAConnection.getXAResource().prepare(makeXid(xid));
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 	}
0: 
0: 	public ijResult RecoverStatement(ij parser, int flag) throws SQLException
0: 	{
0: 		Object[] val = null;
0: 
0: 		try
0: 		{	
0: 			val = currentXAConnection.getXAResource().recover(flag);
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 
0: 		Vector v = new Vector();
0: 		v.addElement("");
0: 		v.addElement(LocalizedResource.getMessage("IJ_Reco0InDoubT", LocalizedResource.getNumber(val.length)));
0: 		v.addElement("");
0: 		for (int i = 0; i < val.length; i++)
0: 			v.addElement(LocalizedResource.getMessage("IJ_Tran01", LocalizedResource.getNumber(i+1), val[i].toString()));
0: 
0: 		return new ijVectorResult(v,null);
0: 
0: 	}
0: 
0: 	public void RollbackStatement(ij parser, int xid) throws SQLException
0: 	{
0: 		try
0: 		{	
0: 			currentXAConnection.getXAResource().rollback(makeXid(xid));
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 
0: 	}
0: 
0: 	public void StartStatement(ij parser, int flag, int xid) throws SQLException
0: 	{
0: 		try
0: 		{	
0: 			currentXAConnection.getXAResource().start(makeXid(xid), flag);
0: 		}
0: 		catch(Throwable t)
0: 		{
0: 			handleException(t);
0: 		}
0: 	}
0: 
0: 	private void handleException(Throwable t) throws SQLException
0: 	{
0: 		if (t instanceof SQLException)
0: 		{
0: 			// let ij handle it
0: 			throw (SQLException)t;
0: 		}
0: 		if (t instanceof XAException)
0: 		{
0: 			int errorCode = ((XAException)t).errorCode;
0: 			String error = LocalizedResource.getMessage("IJ_IlleValu");
0: 
0: 			// XA_RBBASE 100
0: 			// XA_RBROLLBACK 100
0: 			// XA_RBCOMMFAIL 101
0: 			// XA_RBDEADLOCK 102
0: 			// XA_RBINTEGRITY 103
0: 			// XA_RBOTHER 104
0: 			// XA_RBPROTO 105
0: 			// XA_RBTIMEOUT 106
0: 			// XA_RBTRANSIENT 107
0: 			// XA_RBEND 107
0: 			//
0: 			// XA_RDONLY 3
0: 			// XA_RETRY 4
0: 			// XA_HEURMIX 5
0: 			// XA_HEURRB 6
0: 			// XA_HEURCOM 7
0: 			// XA_HEURHAZ 8
0: 			// XA_NOMIGRATE 9
0: 			//
0: 			// XAER_ASYNC -2
0: 			// XAER_RMERR -3
0: 			// XAER_NOTA -4
0: 			// XAER_INVAL -5
0: 			// XAER_PROTO -6
0: 			// XAER_RMFAIL -7
0: 			// XAER_DUPID -8
0: 			// XAER_OUTSIDE -9
0: 
0: 			switch(errorCode)
0: 			{
0: 			case XAException.XA_HEURCOM : error = "XA_HEURCOM "; break;
0: 			case XAException.XA_HEURHAZ : error = "XA_HEURHAZ"; break;
0: 			case XAException.XA_HEURMIX : error = "XA_HEURMIX"; break;
0: 			case XAException.XA_HEURRB : error = "XA_HEURRB "; break;
0: 			case XAException.XA_NOMIGRATE : error = "XA_NOMIGRATE "; break;
0: 				// case XAException.XA_RBBASE : error = "XA_RBBASE "; break;
0: 			case XAException.XA_RBCOMMFAIL : error = "XA_RBCOMMFAIL "; break;
0: 			case XAException.XA_RBDEADLOCK : error = "XA_RBDEADLOCK "; break;
0: 				// case XAException.XA_RBEND : error = "XA_RBEND "; break;
0: 			case XAException.XA_RBINTEGRITY : error = "XA_RBINTEGRITY "; break;
0: 			case XAException.XA_RBOTHER : error = "XA_RBOTHER "; break;
0: 			case XAException.XA_RBPROTO : error = "XA_RBPROTO "; break;
0: 			case XAException.XA_RBROLLBACK : error = "XA_RBROLLBACK "; break;
0: 			case XAException.XA_RBTIMEOUT : error = "XA_RBTIMEOUT "; break;
0: 			case XAException.XA_RBTRANSIENT : error = "XA_RBTRANSIENT "; break;
0: 			case XAException.XA_RDONLY : error = "XA_RDONLY "; break;
0: 			case XAException.XA_RETRY : error = "XA_RETRY "; break;
0: 			case XAException.XAER_ASYNC : error = "XAER_ASYNC "; break;
0: 			case XAException.XAER_DUPID : error = "XAER_DUPID "; break;
0: 			case XAException.XAER_INVAL : error = "XAER_INVAL "; break;
0: 			case XAException.XAER_NOTA : error = "XAER_NOTA "; break;
0: 			case XAException.XAER_OUTSIDE : error = "XAER_OUTSIDE "; break;
0: 			case XAException.XAER_PROTO : error = "XAER_PROTO "; break;
0: 			case XAException.XAER_RMERR : error = "XAER_RMERR "; break;
0: 			case XAException.XAER_RMFAIL : error = "XAER_RMFAIL "; break;
0: 			}
0: 			throw new ijException(error);
0: 
0: 		}
0: 		else // StandardException or run time exception, log it first
0: 		{
0: 			String info = LocalizedResource.getMessage("IJ_01SeeClouLog", t.toString(), t.getMessage());
0: 			t.printStackTrace(System.out);
0: 			throw new ijException(info);
0: 		}
0: 	}
0: 
0: 
0: 	// non-xa stuff. DataSource and ConnectionPoolDataSource
0: 	public Connection DataSourceStatement(ij parser, Token dbname, Token protocol,
0: 									Token userT, Token passT, String id)
0: 		 throws SQLException
0: 	{
0: 
0: 		try {
0: 			currentDataSource = (DataSource) (Class.forName("org.apache.derby.jdbc.EmbeddedDataSource").newInstance());
0: 		} catch (Exception e) {
0: 			throw new SQLException(e.toString());
0: 		}
0: 		databaseName = parser.stringValue(dbname.image);
0: 		xaHelper.setDataSourceProperty(currentDataSource, "databaseName", databaseName);
0: 
0: 		// make a connection
0: 		Connection c = null;
0: 		String username = null;
0: 		String password = "";
0: 
0: 		if (passT != null)
0: 			password = parser.stringValue(passT.image);
0: 
0: 		if (userT != null)
0: 		{
0: 			username = parser.stringValue(userT.image);
0: 			c = currentDataSource.getConnection(username, password);
0: 		}
0: 		else
0: 		{
0: 			c = currentDataSource.getConnection();
0: 		}
0: 
0: 		return c;
0: 
0: 	}
0: 
0: 	public void CPDataSourceStatement(ij parser, Token dbname, Token protocol)
0: 		 throws SQLException
0: 	{
0: 		try {
0: 			currentCPDataSource = (ConnectionPoolDataSource) (Class.forName("org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource").newInstance());
0: 		} catch (Exception e) {
0: 			throw new SQLException(e.toString());
0: 		}
0: 		databaseName = parser.stringValue(dbname.image);
0: 		xaHelper.setDataSourceProperty(currentCPDataSource, "databaseName", databaseName);
0: 	}
0: 
0: 	public void CPConnectStatement(ij parser, Token userT, Token passT, String n)
0: 		 throws SQLException
0: 	{
0: 		String username = null;
0: 		String password = "";
0: 
0: 		if (passT != null)
0: 			password = parser.stringValue(passT.image);
0: 
0: 		if (userT != null)
0: 		{
0: 			username = parser.stringValue(userT.image);
0: 			currentPooledConnection =
0: 				currentCPDataSource.getPooledConnection(username, password);
0: 		}
0: 		else
0: 		{
0: 			currentPooledConnection =
0: 				currentCPDataSource.getPooledConnection();
0: 		}
0: 	}
0: 
0: 	public Connection CPGetConnectionStatement(ij parser, String n) 
0: 		 throws SQLException 
0: 	{
0: 		return currentPooledConnection.getConnection();
0: 	}
0: 
0: 	public void CPDisconnectStatement(ij parser, String n) throws SQLException
0: 	{
0: 		if (currentPooledConnection == null)
0: 			throw ijException.noSuchConnection(LocalizedResource.getMessage("IJ_Pool"));
0: 		currentPooledConnection.close();
0: 		currentPooledConnection = null;
0: 	}
0: 
0: 	/**
0: 	 * Get a DataSource that supports distributed transactions.
0: 	 *
0: 	 * @return XADataSource object 
0: 	 *
0: 	 * @exception Exception if XaDataSource is not in class path.
0: 	 */
0: 	private XADataSource getXADataSource() throws Exception
0: 	{
0: 		// We need to construct this object in this round about fashion because
0: 		// if we new it directly, then it will the tools.jar file to bloat.
0: 		try
0: 		{
0: 			return (XADataSource)(Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource").newInstance());
0: 		}
0: 		catch(ClassNotFoundException cnfe) {
0: 			throw new ijException(LocalizedResource.getMessage("IJ_XAClass"));
0: 		}
0: 		catch (InstantiationException e) { }
0: 		catch (IllegalAccessException e) { }
0: 
0: 		throw new ijException(LocalizedResource.getMessage("IJ_XANoI"));
0: 	}
0: 	private static final Class[] STRING_P = { copyrightNotice.getClass() };
0: 	private static final Class[] INT_P = { Integer.TYPE };
0: 
0: 	private static void setDataSourceProperty(Object ds, String property, String value) throws SQLException {
0: 
0: 		String methodName =
0: 			"set" + Character.toUpperCase(property.charAt(0)) + property.substring(1);
0: 
0: 		try {
0: 			java.lang.reflect.Method m = ds.getClass().getMethod(methodName, STRING_P);
0: 			m.invoke(ds, new Object[] {value});
0: 			return;
0: 		} catch (/*NoSuchMethod*/Exception nsme) {
0: 			throw new SQLException(property + " ???");
0: 			//java.lang.reflect.Method m = ds.getClass().getMethod("set" + property, INT_P);
0: 			//m.invoke(ds, new Object[] {Integer.valueOf(value)});
0: 		}
0: 	}
0: }
0: 
0: class ijXid implements Xid, java.io.Serializable
0: {
0:   private static final long serialVersionUID = 64467452100036L;
0: 
0: 	private final int format_id;
0: 	private final byte[] global_id;
0: 	private final byte[] branch_id;
0: 
0: 
0: 	ijXid(int xid, byte[] id)
0: 	{
0: 		format_id = xid;
0: 		global_id = id;
0: 		branch_id = id;
0: 		
0: 	}
0:     /**
0:      * Obtain the format id part of the Xid.
0:      * <p>
0:      *
0:      * @return Format identifier. O means the OSI CCR format.
0:      **/
0:     public int getFormatId()
0:     {
0:         return(format_id);
0:     }
0: 
0:     /**
0:      * Obtain the global transaction identifier part of XID as an array of 
0:      * bytes.
0:      * <p>
0:      *
0: 	 * @return A byte array containing the global transaction identifier.
0:      **/
0:     public byte[] getGlobalTransactionId()
0:     {
0:         return(global_id);
0:     }
0: 
0:     /**
0:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
0:      * <p>
0:      *
0: 	 * @return A byte array containing the branch qualifier of the transaction.
0:      **/
0:     public byte[] getBranchQualifier()
0:     {
0:         return(branch_id);
0:     }
0: }
0: 
0: 
============================================================================