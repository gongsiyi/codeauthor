1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/Filter.java,v 1.16 2007/02/21 16:49:05 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.util.Dictionary;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * An RFC 1960-based Filter.
1:a8b6921:  * <p>
1:a8b6921:  * <code>Filter</code> objects can be created by calling
1:a8b6921:  * {@link BundleContext#createFilter} with the chosen filter string.
1:a8b6921:  * <p>
1:a8b6921:  * A <code>Filter</code> object can be used numerous times to determine if the
1:a8b6921:  * match argument matches the filter string that was used to create the
1:a8b6921:  * <code>Filter</code> object.
1:a8b6921:  * <p>
1:a8b6921:  * Some examples of LDAP filters are:
1:a8b6921:  * 
1:a8b6921:  * <pre>
1:a8b6921:  *  &quot;(cn=Babs Jensen)&quot;
1:a8b6921:  *  &quot;(!(cn=Tim Howes))&quot;
1:a8b6921:  *  &quot;(&amp;(&quot; + Constants.OBJECTCLASS + &quot;=Person)(|(sn=Jensen)(cn=Babs J*)))&quot;
1:a8b6921:  *  &quot;(o=univ*of*mich*)&quot;
1:a8b6921:  * </pre>
1:a8b6921:  * 
1:a8b6921:  * @since 1.1
1:a8b6921:  * @see "Core Specification, section 5.5, for a description of the filter string
1:a8b6921:  *      syntax."
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.16 $
1:a8b6921:  */
1:a8b6921: public interface Filter {
1:a8b6921: 	/**
1:a8b6921: 	 * Filter using a service's properties.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The filter is executed using the keys and values of the referenced
1:a8b6921: 	 * service's properties. The keys are case insensitively matched with the
1:a8b6921: 	 * filter.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param reference The reference to the service whose properties are used
1:a8b6921: 	 *        in the match.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return <code>true</code> if the service's properties match this
1:a8b6921: 	 *         filter; <code>false</code> otherwise.
1:a8b6921: 	 */
1:a8b6921: 	public boolean match(ServiceReference reference);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Filter using a <code>Dictionary</code> object. The Filter is executed
1:a8b6921: 	 * using the <code>Dictionary</code> object's keys and values. The keys
1:a8b6921: 	 * are case insensitively matched with the filter.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param dictionary The <code>Dictionary</code> object whose keys are
1:a8b6921: 	 *        used in the match.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return <code>true</code> if the <code>Dictionary</code> object's
1:a8b6921: 	 *         keys and values match this filter; <code>false</code>
1:a8b6921: 	 *         otherwise.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws IllegalArgumentException If <code>dictionary</code> contains
1:a8b6921: 	 *         case variants of the same key name.
1:a8b6921: 	 */
1:a8b6921: 	public boolean match(Dictionary dictionary);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns this <code>Filter</code> object's filter string.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The filter string is normalized by removing whitespace which does not
1:a8b6921: 	 * affect the meaning of the filter.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Filter string.
1:a8b6921: 	 */
1:a8b6921: 	public String toString();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Compares this <code>Filter</code> object to another object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param obj The object to compare against this <code>Filter</code>
1:a8b6921: 	 *        object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return If the other object is a <code>Filter</code> object, then
1:a8b6921: 	 *         returns <code>this.toString().equals(obj.toString()</code>;<code>false</code>
1:a8b6921: 	 *         otherwise.
1:a8b6921: 	 */
1:a8b6921: 	public boolean equals(Object obj);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the hashCode for this <code>Filter</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return The hashCode of the filter string; that is,
1:a8b6921: 	 *         <code>this.toString().hashCode()</code>.
1:a8b6921: 	 */
1:a8b6921: 	public int hashCode();
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Filter with case sensitivity using a <code>Dictionary</code> object.
1:a8b6921: 	 * The Filter is executed using the <code>Dictionary</code> object's keys
1:a8b6921: 	 * and values. The keys are case sensitively matched with the filter.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param dictionary The <code>Dictionary</code> object whose keys are
1:a8b6921: 	 *        used in the match.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return <code>true</code> if the <code>Dictionary</code> object's
1:a8b6921: 	 *         keys and values match this filter; <code>false</code>
1:a8b6921: 	 *         otherwise.
1:a8b6921: 	 * 
1:a8b6921: 	 * @since 1.3
1:a8b6921: 	 */
1:a8b6921: 	public boolean matchCase(Dictionary dictionary);
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/Filter.java,v 1.16 2007/02/21 16:49:05 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.framework;
1: 
1: import java.util.Dictionary;
1: 
1: /**
1:  * An RFC 1960-based Filter.
1:  * <p>
1:  * <code>Filter</code> objects can be created by calling
1:  * {@link BundleContext#createFilter} with the chosen filter string.
1:  * <p>
1:  * A <code>Filter</code> object can be used numerous times to determine if the
1:  * match argument matches the filter string that was used to create the
1:  * <code>Filter</code> object.
1:  * <p>
1:  * Some examples of LDAP filters are:
1:  * 
1:  * <pre>
1:  *  &quot;(cn=Babs Jensen)&quot;
1:  *  &quot;(!(cn=Tim Howes))&quot;
1:  *  &quot;(&amp;(&quot; + Constants.OBJECTCLASS + &quot;=Person)(|(sn=Jensen)(cn=Babs J*)))&quot;
1:  *  &quot;(o=univ*of*mich*)&quot;
1:  * </pre>
1:  * 
1:  * @since 1.1
1:  * @see "Core Specification, section 5.5, for a description of the filter string
1:  *      syntax."
1:  * @ThreadSafe
1:  * @version $Revision: 1.16 $
1:  */
1: public interface Filter {
1: 	/**
1: 	 * Filter using a service's properties.
1: 	 * <p>
1: 	 * The filter is executed using the keys and values of the referenced
1: 	 * service's properties. The keys are case insensitively matched with the
1: 	 * filter.
1: 	 * 
1: 	 * @param reference The reference to the service whose properties are used
1: 	 *        in the match.
1: 	 * 
1: 	 * @return <code>true</code> if the service's properties match this
1: 	 *         filter; <code>false</code> otherwise.
1: 	 */
1: 	public boolean match(ServiceReference reference);
1: 
1: 	/**
1: 	 * Filter using a <code>Dictionary</code> object. The Filter is executed
1: 	 * using the <code>Dictionary</code> object's keys and values. The keys
1: 	 * are case insensitively matched with the filter.
1: 	 * 
1: 	 * @param dictionary The <code>Dictionary</code> object whose keys are
1: 	 *        used in the match.
1: 	 * 
1: 	 * @return <code>true</code> if the <code>Dictionary</code> object's
1: 	 *         keys and values match this filter; <code>false</code>
1: 	 *         otherwise.
1: 	 * 
1: 	 * @throws IllegalArgumentException If <code>dictionary</code> contains
1: 	 *         case variants of the same key name.
1: 	 */
1: 	public boolean match(Dictionary dictionary);
1: 
1: 	/**
1: 	 * Returns this <code>Filter</code> object's filter string.
1: 	 * <p>
1: 	 * The filter string is normalized by removing whitespace which does not
1: 	 * affect the meaning of the filter.
1: 	 * 
1: 	 * @return Filter string.
1: 	 */
1: 	public String toString();
1: 
1: 	/**
1: 	 * Compares this <code>Filter</code> object to another object.
1: 	 * 
1: 	 * @param obj The object to compare against this <code>Filter</code>
1: 	 *        object.
1: 	 * 
1: 	 * @return If the other object is a <code>Filter</code> object, then
1: 	 *         returns <code>this.toString().equals(obj.toString()</code>;<code>false</code>
1: 	 *         otherwise.
1: 	 */
1: 	public boolean equals(Object obj);
1: 
1: 	/**
1: 	 * Returns the hashCode for this <code>Filter</code> object.
1: 	 * 
1: 	 * @return The hashCode of the filter string; that is,
1: 	 *         <code>this.toString().hashCode()</code>.
1: 	 */
1: 	public int hashCode();
1: 
1: 	/**
1: 	 * Filter with case sensitivity using a <code>Dictionary</code> object.
1: 	 * The Filter is executed using the <code>Dictionary</code> object's keys
1: 	 * and values. The keys are case sensitively matched with the filter.
1: 	 * 
1: 	 * @param dictionary The <code>Dictionary</code> object whose keys are
1: 	 *        used in the match.
1: 	 * 
1: 	 * @return <code>true</code> if the <code>Dictionary</code> object's
1: 	 *         keys and values match this filter; <code>false</code>
1: 	 *         otherwise.
1: 	 * 
1: 	 * @since 1.3
1: 	 */
1: 	public boolean matchCase(Dictionary dictionary);
1: }
============================================================================