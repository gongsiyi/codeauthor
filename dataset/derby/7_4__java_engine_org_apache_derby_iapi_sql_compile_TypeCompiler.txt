1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.TypeCompiler
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
9:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:eac0369: import org.apache.derby.iapi.services.compiler.LocalField;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:b1f84c1: import org.apache.derby.iapi.reference.Limits;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This interface defines methods associated with a TypeId that are used
1:eac0369:  * by the compiler.
1:eac0369:  */
1:eac0369: 
1:eac0369: public interface TypeCompiler
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Various fixed numbers related to datatypes.
1:eac0369: 	 */
1:eac0369: 	// Need to leave space for '-'
1:eac0369: 	public static final int LONGINT_MAXWIDTH_AS_CHAR	= 20;
1:eac0369: 
1:eac0369: 	// Need to leave space for '-'
1:eac0369: 	public static final int INT_MAXWIDTH_AS_CHAR	= 11;
1:eac0369: 
1:eac0369: 	// Need to leave space for '-'
1:eac0369: 	public static final int SMALLINT_MAXWIDTH_AS_CHAR	= 6;
1:eac0369: 
1:eac0369: 	// Need to leave space for '-'
1:eac0369: 	public static final int TINYINT_MAXWIDTH_AS_CHAR	= 4;
1:eac0369: 
1:eac0369: 	// Need to leave space for '-' and decimal point
1:eac0369: 	public static final int DOUBLE_MAXWIDTH_AS_CHAR		= 54;
1:eac0369: 
1:eac0369: 	// Need to leave space for '-' and decimal point
1:eac0369: 	public static final int REAL_MAXWIDTH_AS_CHAR	= 25;
1:eac0369: 
1:b1f84c1: 	public static final int DEFAULT_DECIMAL_PRECISION	= Limits.DB2_DEFAULT_DECIMAL_PRECISION;
1:b1f84c1: 	public static final int DEFAULT_DECIMAL_SCALE 		= Limits.DB2_DEFAULT_DECIMAL_SCALE;
1:b1f84c1: 	public static final int MAX_DECIMAL_PRECISION_SCALE = Limits.DB2_MAX_DECIMAL_PRECISION_SCALE;
1:eac0369: 
1:eac0369: 	public static final int BOOLEAN_MAXWIDTH_AS_CHAR	= 5;
1:eac0369: 
1:eac0369: 	public static final String PLUS_OP 		= "+";
1:eac0369: 	public static final String DIVIDE_OP	= "/";
1:eac0369: 	public static final String MINUS_OP 	= "-";
1:eac0369: 	public static final String TIMES_OP 	= "*";
1:eac0369: 	public static final String SUM_OP 		= "sum";
1:eac0369: 	public static final String AVG_OP 		= "avg";
1:eac0369: 	public static final String MOD_OP		= "mod";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Type resolution methods on binary operators
6:eac0369: 	 *
1:eac0369: 	 * @param leftType	The type of the left parameter
1:eac0369: 	 * @param rightType	The type of the right parameter
1:eac0369: 	 * @param operator	The name of the operator (e.g. "+").
1:eac0369: 	 *
1:eac0369: 	 * @return	The type of the result
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException	Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	DataTypeDescriptor	resolveArithmeticOperation(
1:eac0369: 							DataTypeDescriptor leftType,
1:eac0369: 							DataTypeDescriptor rightType,
1:eac0369: 							String operator
1:eac0369: 								)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Determine if this type can be CONVERTed to some other type
1:eac0369: 	 *
2:eac0369: 	 * @param otherType	The CompilationType of the other type to compare
2:eac0369: 	 *					this type to
1:eac0369: 	 *
1:eac0369: 	 * @param forDataTypeFunction  true if this is a type function that
1:eac0369: 	 *   requires more liberal behavior (e.g DOUBLE can convert a char but 
1:eac0369: 	 *   you cannot cast a CHAR to double.
1:eac0369: 	 *   
1:eac0369: 	 * @return	true if the types can be converted, false if conversion
1:eac0369: 	 *			is not allowed
1:eac0369: 	 */
1:eac0369: 	 boolean             convertible(TypeId otherType, 
1:eac0369: 									 boolean forDataTypeFunction);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Determine if this type is compatible to some other type
1:eac0369: 	 * (e.g. COALESCE(thistype, othertype)).
1:eac0369: 	 *
1:eac0369: 	 * @param otherType	The CompilationType of the other type to compare
1:eac0369: 	 *					this type to
1:eac0369: 	 *
1:eac0369: 	 * @return	true if the types are compatible, false if not compatible
1:eac0369: 	 */
1:eac0369: 	boolean compatible(TypeId otherType);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Determine if this type can have a value of another type stored into it.
1:eac0369: 	 * Note that direction is relevant here: the test is that the otherType
1:eac0369: 	 * is storable into this type.
1:eac0369: 	 *
1:eac0369: 	 * @param otherType	The TypeId of the other type to compare this type to
2:eac0369: 	 * @param cf		A ClassFactory
1:eac0369: 	 *
1:eac0369: 	 * @return	true if the other type can be stored in a column of this type.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	boolean				storable(TypeId otherType, ClassFactory cf);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the interface for this type.  For example, the interface
1:eac0369: 	 * for a SQLInteger is NumberDataValue.  The full path name of the type
1:eac0369: 	 * is returned.
1:eac0369: 	 *
1:eac0369: 	 * @return	The name of the interface for this type.
1:eac0369: 	 */
1:eac0369: 	String interfaceName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the name of the corresponding Java type.  For numerics and booleans
1:eac0369: 	 * we will get the corresponding Java primitive type.
1:eac0369: 	 e
1:eac0369: 	 * Each SQL type has a corresponding Java type.  When a SQL value is
1:eac0369: 	 * passed to a Java method, it is translated to its corresponding Java
1:eac0369: 	 * type.  For example, a SQL Integer will be mapped to a Java int, but
1:eac0369: 	 * a SQL date will be mapped to a java.sql.Date.
1:eac0369: 	 *
1:eac0369: 	 * @return	The name of the corresponding Java primitive type.
1:eac0369: 	 */
1:eac0369: 	String	getCorrespondingPrimitiveTypeName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the method name for getting out the corresponding primitive
1:eac0369: 	 * Java type from a DataValueDescriptor.
1:eac0369: 	 *
1:eac0369: 	 * @return String		The method call name for getting the
1:eac0369: 	 *						corresponding primitive Java type.
1:eac0369: 	 */
1:eac0369: 	String getPrimitiveMethodName();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Generate the code necessary to produce a SQL null of the appropriate
1:eac0369: 	 * type. The stack must contain a DataValueFactory and a null or a value
1:ba7683c: 	 * of the correct type (interfaceName()).
1:eac0369: 	 *
1:ba7683c: 	 * @param mb	The method to put the expression in
1:ba7683c: 	 * @param collationType For character DVDs, this will be used to determine
1:ba7683c: 	 *   what Collator should be associated with the DVD which in turn will 
1:ba7683c: 	 *   decide whether to generate CollatorSQLcharDVDs or SQLcharDVDs.
1:eac0369: 	 */
1:eac0369: 
1:a1aaa63: 	void generateNull(MethodBuilder mb, int collationType);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Generate the code necessary to produce a SQL value based on
1:eac0369: 	 * a value.  The value's type is assumed to match
1:eac0369: 	 * the type of this TypeId.  For example, a TypeId
1:eac0369: 	 * for the SQL int type should be given an value that evaluates
1:eac0369: 	 * to a Java int or Integer.
1:eac0369: 	 *
1:eac0369: 	 * If the type of the value is incorrect, the generated code will
1:eac0369: 	 * not work.
1:ba7683c: 	 * 
1:ba7683c: 	 * The stack must contain data value factory value.
1:ba7683c: 	 * 
1:869152f: 	 * @param mb	The method to put the expression in
1:ba7683c: 	 * @param collationType For character DVDs, this will be used to determine
1:ba7683c: 	 *   what Collator should be associated with the DVD which in turn will 
1:ba7683c: 	 *   decide whether to generate CollatorSQLcharDVDs or SQLcharDVDs. For 
1:ba7683c: 	 *   other types of DVDs, this parameter will be ignored.
1:ba7683c: 	 * @param field LocalField
1:eac0369: 	 */
1:869152f: 	void generateDataValue(
1:869152f: 			MethodBuilder mb, int collationType, 
1:a57c280: 			LocalField field);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the maximum width for this data type when cast to a char type.
1:eac0369: 	 *
1:eac0369: 	 * @param dts		The associated DataTypeDescriptor for this TypeId.
1:eac0369: 	 *
1:eac0369: 	 * @return int			The maximum width for this data type when cast to a char type.
1:eac0369: 	 */
1:eac0369: 	int getCastToCharWidth(DataTypeDescriptor dts);
1:eac0369: 
1:eac0369: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:111785f
/////////////////////////////////////////////////////////////////////////
commit:869152f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
/////////////////////////////////////////////////////////////////////////
0: 	 * @param eb The ExpressionClassBuilder for the class we're generating
/////////////////////////////////////////////////////////////////////////
0: 	void generateNull(ExpressionClassBuilder eb,
0: 			MethodBuilder mb, int collationType, String className);
/////////////////////////////////////////////////////////////////////////
0: 	 * @param eb The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb	The method to put the expression in
/////////////////////////////////////////////////////////////////////////
1: 	void generateDataValue(
0: 			ExpressionClassBuilder eb,
1: 			MethodBuilder mb, int collationType, 
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * of the correct type (interfaceName()).
1: 	 * @param collationType For character DVDs, this will be used to determine
1: 	 *   what Collator should be associated with the DVD which in turn will 
1: 	 *   decide whether to generate CollatorSQLcharDVDs or SQLcharDVDs.
0: 	 * @param className name of the base class of the activation's hierarchy
0: 	void generateNull(MethodBuilder mb, int collationType, String className);
/////////////////////////////////////////////////////////////////////////
1: 	 * 
1: 	 * The stack must contain data value factory value.
1: 	 * 
1: 	 * @param mb	The method to put the expression in
1: 	 * @param collationType For character DVDs, this will be used to determine
1: 	 *   what Collator should be associated with the DVD which in turn will 
1: 	 *   decide whether to generate CollatorSQLcharDVDs or SQLcharDVDs. For 
1: 	 *   other types of DVDs, this parameter will be ignored.
0: 	 * @param className name of the base class of the activation's hierarchy
1: 	 * @param field LocalField
0: 	void generateDataValue(MethodBuilder eb, int collationType, 
0: 			String className, LocalField field);
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a1aaa63
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	void generateNull(MethodBuilder mb, int collationType);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a57c280
/////////////////////////////////////////////////////////////////////////
0: 			MethodBuilder mb, int collationType);
/////////////////////////////////////////////////////////////////////////
1: 			LocalField field);
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.TypeCompiler
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.reference.DB2Limit;
1: 
1: /**
1:  * This interface defines methods associated with a TypeId that are used
1:  * by the compiler.
1:  */
1: 
1: public interface TypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
1: 	 * Various fixed numbers related to datatypes.
1: 	 */
1: 	// Need to leave space for '-'
1: 	public static final int LONGINT_MAXWIDTH_AS_CHAR	= 20;
1: 
1: 	// Need to leave space for '-'
1: 	public static final int INT_MAXWIDTH_AS_CHAR	= 11;
1: 
1: 	// Need to leave space for '-'
1: 	public static final int SMALLINT_MAXWIDTH_AS_CHAR	= 6;
1: 
1: 	// Need to leave space for '-'
1: 	public static final int TINYINT_MAXWIDTH_AS_CHAR	= 4;
1: 
1: 	// Need to leave space for '-' and decimal point
1: 	public static final int DOUBLE_MAXWIDTH_AS_CHAR		= 54;
1: 
1: 	// Need to leave space for '-' and decimal point
1: 	public static final int REAL_MAXWIDTH_AS_CHAR	= 25;
1: 
0: 	public static final int DEFAULT_DECIMAL_PRECISION	= DB2Limit.DEFAULT_DECIMAL_PRECISION;
0: 	public static final int DEFAULT_DECIMAL_SCALE 		= DB2Limit.DEFAULT_DECIMAL_SCALE;
0: 	public static final int MAX_DECIMAL_PRECISION_SCALE = DB2Limit.MAX_DECIMAL_PRECISION_SCALE;
1: 
1: 	public static final int BOOLEAN_MAXWIDTH_AS_CHAR	= 5;
1: 
1: 	public static final String PLUS_OP 		= "+";
1: 	public static final String DIVIDE_OP	= "/";
1: 	public static final String MINUS_OP 	= "-";
1: 	public static final String TIMES_OP 	= "*";
1: 	public static final String SUM_OP 		= "sum";
1: 	public static final String AVG_OP 		= "avg";
1: 	public static final String MOD_OP		= "mod";
1: 
1: 	/**
1: 	 * Type resolution methods on binary operators
1: 	 *
0: 	 * @param descrFactory	A factory to generate the return value
1: 	 * @param leftType	The type of the left parameter
1: 	 * @param rightType	The type of the right parameter
1: 	 * @param operator	The name of the operator (e.g. "+").
1: 	 *
1: 	 * @return	The type of the result
1: 	 *
1: 	 * @exception StandardException	Thrown on error
1: 	 */
1: 
1: 	DataTypeDescriptor	resolveArithmeticOperation(
1: 							DataTypeDescriptor leftType,
1: 							DataTypeDescriptor rightType,
1: 							String operator
1: 								)
1: 							throws StandardException;
1: 
1: 	/**
0: 	 * Determine if this type can be compared to some other type
1: 	 *
1: 	 * @param otherType	The CompilationType of the other type to compare
1: 	 *					this type to
0: 	 * @param forEquals True if this is an = or <> comparison, false otherwise.
1: 	 * @param cf		A ClassFactory
1: 	 *
0: 	 * @return	true if the types can be compared, false if comparisons between
0: 	 *			the types are not allowed
1: 	 */
1: 
0: 	boolean				comparable(TypeId otherType,
0:                                    boolean forEquals,
0:                                    ClassFactory cf);
1: 
1: 
1: 
1: 	/**
1: 	 * Determine if this type can be CONVERTed to some other type
1: 	 *
1: 	 * @param otherType	The CompilationType of the other type to compare
1: 	 *					this type to
1: 	 *
1: 	 * @param forDataTypeFunction  true if this is a type function that
1: 	 *   requires more liberal behavior (e.g DOUBLE can convert a char but 
1: 	 *   you cannot cast a CHAR to double.
1: 	 *   
1: 	 * @return	true if the types can be converted, false if conversion
1: 	 *			is not allowed
1: 	 */
1: 	 boolean             convertible(TypeId otherType, 
1: 									 boolean forDataTypeFunction);
1: 
1: 	/**
1: 	 * Determine if this type is compatible to some other type
1: 	 * (e.g. COALESCE(thistype, othertype)).
1: 	 *
1: 	 * @param otherType	The CompilationType of the other type to compare
1: 	 *					this type to
1: 	 *
1: 	 * @return	true if the types are compatible, false if not compatible
1: 	 */
1: 	boolean compatible(TypeId otherType);
1: 
1: 	/**
1: 	 * Determine if this type can have a value of another type stored into it.
1: 	 * Note that direction is relevant here: the test is that the otherType
1: 	 * is storable into this type.
1: 	 *
1: 	 * @param otherType	The TypeId of the other type to compare this type to
1: 	 * @param cf		A ClassFactory
1: 	 *
1: 	 * @return	true if the other type can be stored in a column of this type.
1: 	 */
1: 
1: 	boolean				storable(TypeId otherType, ClassFactory cf);
1: 
1: 	/**
1: 	 * Get the name of the interface for this type.  For example, the interface
1: 	 * for a SQLInteger is NumberDataValue.  The full path name of the type
1: 	 * is returned.
1: 	 *
1: 	 * @return	The name of the interface for this type.
1: 	 */
1: 	String interfaceName();
1: 
1: 	/**
1: 	 * Get the name of the corresponding Java type.  For numerics and booleans
1: 	 * we will get the corresponding Java primitive type.
1: 	 e
1: 	 * Each SQL type has a corresponding Java type.  When a SQL value is
1: 	 * passed to a Java method, it is translated to its corresponding Java
1: 	 * type.  For example, a SQL Integer will be mapped to a Java int, but
1: 	 * a SQL date will be mapped to a java.sql.Date.
1: 	 *
1: 	 * @return	The name of the corresponding Java primitive type.
1: 	 */
1: 	String	getCorrespondingPrimitiveTypeName();
1: 
1: 	/**
1: 	 * Get the method name for getting out the corresponding primitive
1: 	 * Java type from a DataValueDescriptor.
1: 	 *
1: 	 * @return String		The method call name for getting the
1: 	 *						corresponding primitive Java type.
1: 	 */
1: 	String getPrimitiveMethodName();
1: 
1: 
1: 	/**
0: 	 * Get the name of the matching national char type.
1: 	 *
0: 	 * @return The name of the matching national char type.
1: 	 */
0: 	String getMatchingNationalCharTypeName();
1: 
1: 	/**
1: 	 * Generate the code necessary to produce a SQL null of the appropriate
1: 	 * type. The stack must contain a DataValueFactory and a null or a value
0: 	   of the correct type (interfaceName()).
1: 	 *
0: 	 * @param mb	The method to put the expression in
1: 	 *
1: 	 */
1: 
0: 	void			generateNull(MethodBuilder mb);
1: 
1: 
1: 	/**
1: 	 * Generate the code necessary to produce a SQL value based on
1: 	 * a value.  The value's type is assumed to match
1: 	 * the type of this TypeId.  For example, a TypeId
1: 	 * for the SQL int type should be given an value that evaluates
1: 	 * to a Java int or Integer.
1: 	 *
1: 	 * If the type of the value is incorrect, the generated code will
1: 	 * not work.
1: 
0:        The stack must contain
0: 			data value factory
0: 			value
1: 	 *
1: 	 */
0: 	void			generateDataValue(MethodBuilder eb, LocalField field);
1: 
1: 	/**
1: 	 * Return the maximum width for this data type when cast to a char type.
1: 	 *
1: 	 * @param dts		The associated DataTypeDescriptor for this TypeId.
1: 	 *
1: 	 * @return int			The maximum width for this data type when cast to a char type.
1: 	 */
1: 	int getCastToCharWidth(DataTypeDescriptor dts);
1: 
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:068071b
/////////////////////////////////////////////////////////////////////////
0: 	 * @param eb	The method to put the expression in
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b1f84c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 	public static final int DEFAULT_DECIMAL_PRECISION	= Limits.DB2_DEFAULT_DECIMAL_PRECISION;
1: 	public static final int DEFAULT_DECIMAL_SCALE 		= Limits.DB2_DEFAULT_DECIMAL_SCALE;
1: 	public static final int MAX_DECIMAL_PRECISION_SCALE = Limits.DB2_MAX_DECIMAL_PRECISION_SCALE;
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.DB2Limit;
0: 
0: /**
0:  * This interface defines methods associated with a TypeId that are used
0:  * by the compiler.
0:  */
0: 
0: public interface TypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 	 * Various fixed numbers related to datatypes.
0: 	 */
0: 	// Need to leave space for '-'
0: 	public static final int LONGINT_MAXWIDTH_AS_CHAR	= 20;
0: 
0: 	// Need to leave space for '-'
0: 	public static final int INT_MAXWIDTH_AS_CHAR	= 11;
0: 
0: 	// Need to leave space for '-'
0: 	public static final int SMALLINT_MAXWIDTH_AS_CHAR	= 6;
0: 
0: 	// Need to leave space for '-'
0: 	public static final int TINYINT_MAXWIDTH_AS_CHAR	= 4;
0: 
0: 	// Need to leave space for '-' and decimal point
0: 	public static final int DOUBLE_MAXWIDTH_AS_CHAR		= 54;
0: 
0: 	// Need to leave space for '-' and decimal point
0: 	public static final int REAL_MAXWIDTH_AS_CHAR	= 25;
0: 
0: 	public static final int DEFAULT_DECIMAL_PRECISION	= DB2Limit.DEFAULT_DECIMAL_PRECISION;
0: 	public static final int DEFAULT_DECIMAL_SCALE 		= DB2Limit.DEFAULT_DECIMAL_SCALE;
0: 	public static final int MAX_DECIMAL_PRECISION_SCALE = DB2Limit.MAX_DECIMAL_PRECISION_SCALE;
0: 
0: 	public static final int BOOLEAN_MAXWIDTH_AS_CHAR	= 5;
0: 
0: 	public static final String PLUS_OP 		= "+";
0: 	public static final String DIVIDE_OP	= "/";
0: 	public static final String MINUS_OP 	= "-";
0: 	public static final String TIMES_OP 	= "*";
0: 	public static final String SUM_OP 		= "sum";
0: 	public static final String AVG_OP 		= "avg";
0: 	public static final String MOD_OP		= "mod";
0: 
0: 	/**
0: 	 * Type resolution methods on binary operators
0: 	 *
0: 	 * @param descrFactory	A factory to generate the return value
0: 	 * @param leftType	The type of the left parameter
0: 	 * @param rightType	The type of the right parameter
0: 	 * @param operator	The name of the operator (e.g. "+").
0: 	 *
0: 	 * @return	The type of the result
0: 	 *
0: 	 * @exception StandardException	Thrown on error
0: 	 */
0: 
0: 	DataTypeDescriptor	resolveArithmeticOperation(
0: 							DataTypeDescriptor leftType,
0: 							DataTypeDescriptor rightType,
0: 							String operator
0: 								)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * Determine if this type can be compared to some other type
0: 	 *
0: 	 * @param otherType	The CompilationType of the other type to compare
0: 	 *					this type to
0: 	 * @param forEquals True if this is an = or <> comparison, false otherwise.
0: 	 * @param cf		A ClassFactory
0: 	 *
0: 	 * @return	true if the types can be compared, false if comparisons between
0: 	 *			the types are not allowed
0: 	 */
0: 
0: 	boolean				comparable(TypeId otherType,
0:                                    boolean forEquals,
0:                                    ClassFactory cf);
0: 
0: 
0: 
0: 	/**
0: 	 * Determine if this type can be CONVERTed to some other type
0: 	 *
0: 	 * @param otherType	The CompilationType of the other type to compare
0: 	 *					this type to
0: 	 *
0: 	 * @param forDataTypeFunction  true if this is a type function that
0: 	 *   requires more liberal behavior (e.g DOUBLE can convert a char but 
0: 	 *   you cannot cast a CHAR to double.
0: 	 *   
0: 	 * @return	true if the types can be converted, false if conversion
0: 	 *			is not allowed
0: 	 */
0: 	 boolean             convertible(TypeId otherType, 
0: 									 boolean forDataTypeFunction);
0: 
0: 	/**
0: 	 * Determine if this type is compatible to some other type
0: 	 * (e.g. COALESCE(thistype, othertype)).
0: 	 *
0: 	 * @param otherType	The CompilationType of the other type to compare
0: 	 *					this type to
0: 	 *
0: 	 * @return	true if the types are compatible, false if not compatible
0: 	 */
0: 	boolean compatible(TypeId otherType);
0: 
0: 	/**
0: 	 * Determine if this type can have a value of another type stored into it.
0: 	 * Note that direction is relevant here: the test is that the otherType
0: 	 * is storable into this type.
0: 	 *
0: 	 * @param otherType	The TypeId of the other type to compare this type to
0: 	 * @param cf		A ClassFactory
0: 	 *
0: 	 * @return	true if the other type can be stored in a column of this type.
0: 	 */
0: 
0: 	boolean				storable(TypeId otherType, ClassFactory cf);
0: 
0: 	/**
0: 	 * Get the name of the interface for this type.  For example, the interface
0: 	 * for a SQLInteger is NumberDataValue.  The full path name of the type
0: 	 * is returned.
0: 	 *
0: 	 * @return	The name of the interface for this type.
0: 	 */
0: 	String interfaceName();
0: 
0: 	/**
0: 	 * Get the name of the corresponding Java type.  For numerics and booleans
0: 	 * we will get the corresponding Java primitive type.
0: 	 e
0: 	 * Each SQL type has a corresponding Java type.  When a SQL value is
0: 	 * passed to a Java method, it is translated to its corresponding Java
0: 	 * type.  For example, a SQL Integer will be mapped to a Java int, but
0: 	 * a SQL date will be mapped to a java.sql.Date.
0: 	 *
0: 	 * @return	The name of the corresponding Java primitive type.
0: 	 */
0: 	String	getCorrespondingPrimitiveTypeName();
0: 
0: 	/**
0: 	 * Get the method name for getting out the corresponding primitive
0: 	 * Java type from a DataValueDescriptor.
0: 	 *
0: 	 * @return String		The method call name for getting the
0: 	 *						corresponding primitive Java type.
0: 	 */
0: 	String getPrimitiveMethodName();
0: 
0: 
0: 	/**
0: 	 * Get the name of the matching national char type.
0: 	 *
0: 	 * @return The name of the matching national char type.
0: 	 */
0: 	String getMatchingNationalCharTypeName();
0: 
0: 	/**
0: 	 * Generate the code necessary to produce a SQL null of the appropriate
0: 	 * type. The stack must contain a DataValueFactory and a null or a value
0: 	   of the correct type (interfaceName()).
0: 	 *
0: 	 * @param mb	The method to put the expression in
0: 	 *
0: 	 */
0: 
0: 	void			generateNull(MethodBuilder mb);
0: 
0: 
0: 	/**
0: 	 * Generate the code necessary to produce a SQL value based on
0: 	 * a value.  The value's type is assumed to match
0: 	 * the type of this TypeId.  For example, a TypeId
0: 	 * for the SQL int type should be given an value that evaluates
0: 	 * to a Java int or Integer.
0: 	 *
0: 	 * If the type of the value is incorrect, the generated code will
0: 	 * not work.
0: 
0:        The stack must contain
0: 			data value factory
0: 			value
0: 	 *
0: 	 */
0: 	void			generateDataValue(MethodBuilder eb, LocalField field);
0: 
0: 	/**
0: 	 * Return the maximum width for this data type when cast to a char type.
0: 	 *
0: 	 * @param dts		The associated DataTypeDescriptor for this TypeId.
0: 	 *
0: 	 * @return int			The maximum width for this data type when cast to a char type.
0: 	 */
0: 	int getCastToCharWidth(DataTypeDescriptor dts);
0: 
0: }
============================================================================