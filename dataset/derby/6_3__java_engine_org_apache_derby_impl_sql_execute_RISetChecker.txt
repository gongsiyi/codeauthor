1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.RISetChecker
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:4cc0287: import org.apache.derby.iapi.sql.Activation;
1:4cc0287: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:4cc0287: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Checks a set or referential integrity constraints.  Used
1:eac0369:  * to shield the caller from ReferencedKeyRIChecker and
1:eac0369:  * ForeignKeyRICheckers.
1:eac0369:  */
1:eac0369: public class RISetChecker
3:eac0369: {
1:eac0369: 	private GenericRIChecker[] 	checkers;
1:4cc0287:     LanguageConnectionContext lcc;
1:eac0369: 
1:eac0369: 	/**
1:4cc0287:      * @param lcc       the language connection context
1:eac0369: 	 * @param tc		the xact controller
1:6b50965: 	 * @param fkInfo	the foreign key information 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:4cc0287:     public RISetChecker(LanguageConnectionContext lcc,
1:4cc0287:                         TransactionController tc,
1:4cc0287:                         FKInfo fkInfo[]) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (fkInfo == null)
1:eac0369: 		{
1:eac0369: 			return;
3:eac0369: 		}
1:eac0369: 
1:eac0369: 		checkers = new GenericRIChecker[fkInfo.length];
1:4cc0287:         this.lcc = lcc;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < fkInfo.length; i++)
1:eac0369: 		{
1:eac0369: 			checkers[i] = (fkInfo[i].type == FKInfo.FOREIGN_KEY) ?
1:4cc0287:                 (GenericRIChecker)new ForeignKeyRIChecker(
1:4cc0287:                     lcc, tc, fkInfo[i]) :
1:4cc0287:                 (GenericRIChecker)new ReferencedKeyRIChecker(
1:4cc0287:                     lcc, tc, fkInfo[i]);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do any work needed to reopen our ri checkers
1:eac0369: 	 * for another round of checks.  Must do a close()
1:eac0369: 	 * first.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	void reopen() throws StandardException
1:eac0369: 	{
1:eac0369: 		// currently a noop
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Check that there are no referenced primary keys in
1:eac0369: 	 * the passed in row.  So for each foreign key that
1:eac0369: 	 * references a primary key constraint, make sure
1:eac0369: 	 * that there is no row that matches the values in
1:eac0369: 	 * the passed in row.
1:eac0369: 	 *
1:18a6fb2:      * @param a     The activation
1:18a6fb2:      * @param row   The row to check
1:18a6fb2:      * @param restrictCheckOnly
1:18a6fb2:      *              {@code true} if the check is relevant only for RESTRICTED
1:18a6fb2:      *              referential action.
1:18a6fb2:      * @param deferredRowReq
1:18a6fb2:      *              For referenced keys: The required number of duplicates that
1:18a6fb2:      *              need to be present. Only used if {@code postCheck==false}.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on unexpected error, or
1:eac0369: 	 *		on a primary/unique key violation
1:eac0369: 	 */
1:4cc0287:     public void doPKCheck(Activation a,
1:4cc0287:                           ExecRow row,
1:18a6fb2:                           boolean restrictCheckOnly,
1:18a6fb2:                           int deferredRowReq) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (checkers == null)
1:eac0369: 			return;
1:eac0369: 
1:18a6fb2:         for (GenericRIChecker checker : checkers) {
1:18a6fb2:             if (checker instanceof ReferencedKeyRIChecker) {
1:18a6fb2:                 checker.doCheck(a,
1:18a6fb2:                                 row,
1:18a6fb2:                                 restrictCheckOnly,
1:18a6fb2:                                 deferredRowReq);
1:18a6fb2:             }
1:18a6fb2:         }
1:eac0369: 	}
1:eac0369: 
1:18a6fb2:     public void postCheck() throws StandardException
1:18a6fb2:     {
1:18a6fb2:         if (checkers == null) {
1:18a6fb2:             return;
1:18a6fb2:         }
1:18a6fb2: 
1:18a6fb2:         for (int i = 0; i < checkers.length; i++) {
1:18a6fb2:             postCheck(i);
1:18a6fb2:         }
1:18a6fb2:     }
1:18a6fb2: 
1:18a6fb2:     public void postCheck(int index) throws StandardException
1:18a6fb2:     {
1:18a6fb2:         if (checkers == null) {
1:18a6fb2:             return;
1:18a6fb2:         }
1:18a6fb2: 
1:18a6fb2:         if (checkers[index] instanceof ReferencedKeyRIChecker) {
1:18a6fb2:             ((ReferencedKeyRIChecker)checkers[index]).postCheck();
1:18a6fb2:         }
1:18a6fb2:     }
1:18a6fb2: 
1:18a6fb2:     /**
1:eac0369: 	 * Check that everything in the row is ok, i.e.
1:eac0369: 	 * that there are no foreign keys in the passed
1:eac0369: 	 * in row that have invalid values.
1:eac0369: 	 *
1:4cc0287:      * @param a     the activation
2:eac0369: 	 * @param row	the row to check
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on unexpected error, or
1:eac0369: 	 *		on a primary/unique key violation
1:eac0369: 	 */
1:4cc0287:     public void doFKCheck(Activation a, ExecRow row) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (checkers == null)
1:eac0369: 			return;
1:eac0369: 
2:eac0369: 		for (int i = 0; i < checkers.length; i++)
1:eac0369: 		{
1:eac0369: 			if (checkers[i] instanceof ForeignKeyRIChecker)
1:eac0369: 			{
1:45da2f5:                 checkers[i].doCheck(a, row, false, 0);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Execute the specific RI check on the passed in row.
1:eac0369: 	 *
1:4cc0287:      * @param a     the activation
1:6b50965: 	 * @param index	index into fkInfo
1:18a6fb2:      * @param row   the row to check
1:18a6fb2:      * @param restrictCheckOnly
1:18a6fb2:      *              {@code true} if the check is relevant only for RESTRICTED
1:18a6fb2:      *              referential action.
1:18a6fb2:      * @param deferredRowReq
1:18a6fb2:      *              For referenced keys: the required number of duplicates that
1:18a6fb2:      *              need to be present. Only used if {@code postCheck==false}.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on unexpected error, or
1:eac0369: 	 *		on a primary/unique key violation
1:eac0369: 	 */
1:4cc0287:     public void doRICheck(Activation a,
1:4cc0287:                           int index,
1:4cc0287:                           ExecRow row,
1:18a6fb2:                           boolean restrictCheckOnly,
1:18a6fb2:                           int deferredRowReq) throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			if (checkers == null)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("no checkers, how can i execute checker "+index);
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			if (index >= checkers.length)
1:eac0369: 			{
1:eac0369: 				SanityManager.THROWASSERT("there are only "+
1:eac0369: 					checkers.length+" checkers, "+index+" is invalid");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:18a6fb2:         checkers[index].doCheck(
1:45da2f5:             a, row, restrictCheckOnly, deferredRowReq);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * clean up
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:eac0369: 	public void close() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (checkers == null)
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < checkers.length; i++)
1:eac0369: 		{
1:eac0369: 			checkers[i].close();
1:eac0369: 		}
1:eac0369: 	}	
1:eac0369: }
1:eac0369: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:45da2f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 checkers[i].doCheck(a, row, false, 0);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             a, row, restrictCheckOnly, deferredRowReq);
commit:18a6fb2
/////////////////////////////////////////////////////////////////////////
1:      * @param a     The activation
1:      * @param row   The row to check
1:      * @param restrictCheckOnly
1:      *              {@code true} if the check is relevant only for RESTRICTED
1:      *              referential action.
0:      * @param postCheck
0:      *              For referenced keys: if {@code true}, rows are not yet
0:      *              deleted, so do the check in the case of deferred PK later.
1:      * @param deferredRowReq
1:      *              For referenced keys: The required number of duplicates that
1:      *              need to be present. Only used if {@code postCheck==false}.
1:                           boolean restrictCheckOnly,
0:                           boolean postCheck,
1:                           int deferredRowReq) throws StandardException
1:         for (GenericRIChecker checker : checkers) {
1:             if (checker instanceof ReferencedKeyRIChecker) {
1:                 checker.doCheck(a,
1:                                 row,
1:                                 restrictCheckOnly,
0:                                 postCheck,
1:                                 deferredRowReq);
1:             }
1:         }
1:     public void postCheck() throws StandardException
1:     {
1:         if (checkers == null) {
1:             return;
1:         }
1: 
1:         for (int i = 0; i < checkers.length; i++) {
1:             postCheck(i);
1:         }
1:     }
1: 
1:     public void postCheck(int index) throws StandardException
1:     {
1:         if (checkers == null) {
1:             return;
1:         }
1: 
1:         if (checkers[index] instanceof ReferencedKeyRIChecker) {
1:             ((ReferencedKeyRIChecker)checkers[index]).postCheck();
1:         }
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:                 checkers[i].doCheck(a, row, false, false, 0);
/////////////////////////////////////////////////////////////////////////
1:      * @param row   the row to check
1:      * @param restrictCheckOnly
1:      *              {@code true} if the check is relevant only for RESTRICTED
1:      *              referential action.
0:      * @param postCheck
0:      *              For referenced keys: if {@code true}, rows are not yet
0:      *              deleted, so do the check in the case of deferred PK later
1:      * @param deferredRowReq
1:      *              For referenced keys: the required number of duplicates that
1:      *              need to be present. Only used if {@code postCheck==false}.
/////////////////////////////////////////////////////////////////////////
1:                           boolean restrictCheckOnly,
0:                           boolean postCheck,
1:                           int deferredRowReq) throws StandardException
/////////////////////////////////////////////////////////////////////////
1:         checkers[index].doCheck(
0:             a, row, restrictCheckOnly, postCheck, deferredRowReq);
commit:4cc0287
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:     LanguageConnectionContext lcc;
1:      * @param lcc       the language connection context
1:     public RISetChecker(LanguageConnectionContext lcc,
1:                         TransactionController tc,
1:                         FKInfo fkInfo[]) throws StandardException
/////////////////////////////////////////////////////////////////////////
1:         this.lcc = lcc;
1:                 (GenericRIChecker)new ForeignKeyRIChecker(
1:                     lcc, tc, fkInfo[i]) :
1:                 (GenericRIChecker)new ReferencedKeyRIChecker(
1:                     lcc, tc, fkInfo[i]);
/////////////////////////////////////////////////////////////////////////
1:     public void doPKCheck(Activation a,
1:                           ExecRow row,
0:                           boolean restrictCheckOnly) throws StandardException
/////////////////////////////////////////////////////////////////////////
0:                 checkers[i].doCheck(a, row,restrictCheckOnly);
/////////////////////////////////////////////////////////////////////////
1:      * @param a     the activation
1:     public void doFKCheck(Activation a, ExecRow row) throws StandardException
/////////////////////////////////////////////////////////////////////////
0:                 checkers[i].doCheck(a, row);
/////////////////////////////////////////////////////////////////////////
1:      * @param a     the activation
1:     public void doRICheck(Activation a,
1:                           int index,
1:                           ExecRow row,
0:                           boolean restrictCheckOnly) throws StandardException
/////////////////////////////////////////////////////////////////////////
0:         checkers[index].doCheck(a, row, restrictCheckOnly);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param fkInfo	the foreign key information 
/////////////////////////////////////////////////////////////////////////
1: 	 * @param index	index into fkInfo
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.RISetChecker
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
1:  * Checks a set or referential integrity constraints.  Used
1:  * to shield the caller from ReferencedKeyRIChecker and
1:  * ForeignKeyRICheckers.
1:  */
1: public class RISetChecker
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private GenericRIChecker[] 	checkers;
1: 
1: 	/**
1: 	 * @param tc		the xact controller
0: 	 * @param fkInfo[]	the foreign key information 
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public RISetChecker(TransactionController tc, FKInfo fkInfo[])
0: 		throws StandardException
1: 	{
1: 		if (fkInfo == null)
1: 		{
1: 			return;
1: 		}
1: 
1: 		checkers = new GenericRIChecker[fkInfo.length];
1: 
1: 		for (int i = 0; i < fkInfo.length; i++)
1: 		{
1: 			checkers[i] = (fkInfo[i].type == FKInfo.FOREIGN_KEY) ?
0: 				(GenericRIChecker)new ForeignKeyRIChecker(tc, fkInfo[i]) :
0: 				(GenericRIChecker)new ReferencedKeyRIChecker(tc, fkInfo[i]);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Do any work needed to reopen our ri checkers
1: 	 * for another round of checks.  Must do a close()
1: 	 * first.
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	void reopen() throws StandardException
1: 	{
1: 		// currently a noop
1: 	}
1: 
1: 	/**
1: 	 * Check that there are no referenced primary keys in
1: 	 * the passed in row.  So for each foreign key that
1: 	 * references a primary key constraint, make sure
1: 	 * that there is no row that matches the values in
1: 	 * the passed in row.
1: 	 *
1: 	 * @param row	the row to check
1: 	 *
1: 	 * @exception StandardException on unexpected error, or
1: 	 *		on a primary/unique key violation
1: 	 */
0: 	public void doPKCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException
1: 	{
1: 		if (checkers == null)
1: 			return;
1: 
1: 		for (int i = 0; i < checkers.length; i++)
1: 		{
0: 			if (checkers[i] instanceof ReferencedKeyRIChecker)
1: 			{
0: 				checkers[i].doCheck(row,restrictCheckOnly);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Check that everything in the row is ok, i.e.
1: 	 * that there are no foreign keys in the passed
1: 	 * in row that have invalid values.
1: 	 *
1: 	 * @param row	the row to check
1: 	 *
1: 	 * @exception StandardException on unexpected error, or
1: 	 *		on a primary/unique key violation
1: 	 */
0: 	public void doFKCheck(ExecRow row) throws StandardException
1: 	{
1: 		if (checkers == null)
1: 			return;
1: 
1: 		for (int i = 0; i < checkers.length; i++)
1: 		{
1: 			if (checkers[i] instanceof ForeignKeyRIChecker)
1: 			{
0: 				checkers[i].doCheck(row);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Execute the specific RI check on the passed in row.
1: 	 *
0: 	 * @param fkIndex	index into fkInfo
0: 	 * @param row		the row to check
1: 	 *
1: 	 * @exception StandardException on unexpected error, or
1: 	 *		on a primary/unique key violation
1: 	 */
0: 	public void doRICheck(int index, ExecRow row, boolean restrictCheckOnly) throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			if (checkers == null)
1: 			{
1: 				SanityManager.THROWASSERT("no checkers, how can i execute checker "+index);
1: 			}
1: 
1: 			if (index >= checkers.length)
1: 			{
1: 				SanityManager.THROWASSERT("there are only "+
1: 					checkers.length+" checkers, "+index+" is invalid");
1: 			}
1: 		}
1: 
0: 		checkers[index].doCheck(row, restrictCheckOnly);
1: 	}
1: 
1: 	/**
1: 	 * clean up
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
1: 	public void close() throws StandardException
1: 	{
1: 		if (checkers == null)
1: 			return;
1: 
1: 		for (int i = 0; i < checkers.length; i++)
1: 		{
1: 			checkers[i].close();
1: 		}
1: 	}	
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: /**
0:  * Checks a set or referential integrity constraints.  Used
0:  * to shield the caller from ReferencedKeyRIChecker and
0:  * ForeignKeyRICheckers.
0:  */
0: public class RISetChecker
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private GenericRIChecker[] 	checkers;
0: 
0: 	/**
0: 	 * @param tc		the xact controller
0: 	 * @param fkInfo[]	the foreign key information 
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public RISetChecker(TransactionController tc, FKInfo fkInfo[])
0: 		throws StandardException
0: 	{
0: 		if (fkInfo == null)
0: 		{
0: 			return;
0: 		}
0: 
0: 		checkers = new GenericRIChecker[fkInfo.length];
0: 
0: 		for (int i = 0; i < fkInfo.length; i++)
0: 		{
0: 			checkers[i] = (fkInfo[i].type == FKInfo.FOREIGN_KEY) ?
0: 				(GenericRIChecker)new ForeignKeyRIChecker(tc, fkInfo[i]) :
0: 				(GenericRIChecker)new ReferencedKeyRIChecker(tc, fkInfo[i]);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Do any work needed to reopen our ri checkers
0: 	 * for another round of checks.  Must do a close()
0: 	 * first.
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	void reopen() throws StandardException
0: 	{
0: 		// currently a noop
0: 	}
0: 
0: 	/**
0: 	 * Check that there are no referenced primary keys in
0: 	 * the passed in row.  So for each foreign key that
0: 	 * references a primary key constraint, make sure
0: 	 * that there is no row that matches the values in
0: 	 * the passed in row.
0: 	 *
0: 	 * @param row	the row to check
0: 	 *
0: 	 * @exception StandardException on unexpected error, or
0: 	 *		on a primary/unique key violation
0: 	 */
0: 	public void doPKCheck(ExecRow row, boolean restrictCheckOnly) throws StandardException
0: 	{
0: 		if (checkers == null)
0: 			return;
0: 
0: 		for (int i = 0; i < checkers.length; i++)
0: 		{
0: 			if (checkers[i] instanceof ReferencedKeyRIChecker)
0: 			{
0: 				checkers[i].doCheck(row,restrictCheckOnly);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Check that everything in the row is ok, i.e.
0: 	 * that there are no foreign keys in the passed
0: 	 * in row that have invalid values.
0: 	 *
0: 	 * @param row	the row to check
0: 	 *
0: 	 * @exception StandardException on unexpected error, or
0: 	 *		on a primary/unique key violation
0: 	 */
0: 	public void doFKCheck(ExecRow row) throws StandardException
0: 	{
0: 		if (checkers == null)
0: 			return;
0: 
0: 		for (int i = 0; i < checkers.length; i++)
0: 		{
0: 			if (checkers[i] instanceof ForeignKeyRIChecker)
0: 			{
0: 				checkers[i].doCheck(row);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Execute the specific RI check on the passed in row.
0: 	 *
0: 	 * @param fkIndex	index into fkInfo
0: 	 * @param row		the row to check
0: 	 *
0: 	 * @exception StandardException on unexpected error, or
0: 	 *		on a primary/unique key violation
0: 	 */
0: 	public void doRICheck(int index, ExecRow row, boolean restrictCheckOnly) throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			if (checkers == null)
0: 			{
0: 				SanityManager.THROWASSERT("no checkers, how can i execute checker "+index);
0: 			}
0: 
0: 			if (index >= checkers.length)
0: 			{
0: 				SanityManager.THROWASSERT("there are only "+
0: 					checkers.length+" checkers, "+index+" is invalid");
0: 			}
0: 		}
0: 
0: 		checkers[index].doCheck(row, restrictCheckOnly);
0: 	}
0: 
0: 	/**
0: 	 * clean up
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public void close() throws StandardException
0: 	{
0: 		if (checkers == null)
0: 			return;
0: 
0: 		for (int i = 0; i < checkers.length; i++)
0: 		{
0: 			checkers[i].close();
0: 		}
0: 	}	
0: }
0: 
============================================================================