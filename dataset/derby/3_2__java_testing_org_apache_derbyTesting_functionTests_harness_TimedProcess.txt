1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.TimedProcess
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
20:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
2:67614ad: /**
1:67614ad:  * This class is a wrapper of Process to provide a waitFor() method
1:67614ad:  * that forcibly terminates the process if it does not
1:67614ad:  * complete within the specified time.
1:67614ad:  *
1:67614ad:  * 
1:67614ad:  */
1:67614ad: public class TimedProcess
1:67614ad: {
1:67614ad: 
1:67614ad:   private Process process;
1:67614ad: 
1:67614ad:   public TimedProcess(Process process)
1:67614ad:   {
1:67614ad:     this.process = process;
1:67614ad:   }
1:67614ad: 
1:67614ad:   public int waitFor(int sec)
1:67614ad:   {
1:67614ad:     int exitValue = -1;
1:67614ad: 
1:67614ad:     // Create a thread to wait for the process to die
1:67614ad:     WaitForProcess t = new WaitForProcess(process);
1:67614ad:     t.start();
1:67614ad:     
1:67614ad:     // Give the process sec seconds to terminate
1:67614ad:     try
1:67614ad:     {
1:67614ad:       t.join(sec * 1000);
1:67614ad: 
1:67614ad:       // Otherwise, interrupt the thread...
1:67614ad:       if (t.isAlive())
1:67614ad:       {
1:67614ad:         t.interrupt();
1:67614ad:         
1:67614ad:         System.err.println("Server Process did not complete in time. Destroying...");
1:67614ad:         // ...and destroy the process with gusto
1:67614ad:         process.destroy();
1:67614ad:       }
1:67614ad:       else
1:67614ad:       {
1:67614ad:         // process shut down, so it is right to get the exit value from it
1:67614ad:         exitValue = t.getProcessExitValue();
1:67614ad:       }
1:67614ad:     }
1:67614ad:     catch (InterruptedException e)
1:67614ad:     {
1:67614ad:       e.printStackTrace();
1:67614ad:     }
1:67614ad:   
1:67614ad:     return exitValue;
1:67614ad:   }
1:67614ad: } // public class TimedProcess
1:67614ad: 
1:67614ad: 
1:67614ad: class WaitForProcess
1:67614ad:   extends Thread
1:67614ad: {
1:67614ad:   private Process process;
1:67614ad:   private int processExitValue;
1:67614ad:   
1:67614ad:   public WaitForProcess(Process process)
1:67614ad:   {
1:67614ad:     this.process = process;
1:67614ad:   }
1:67614ad: 
1:67614ad:   public int getProcessExitValue()
1:67614ad:   {
1:67614ad:     return processExitValue;
1:67614ad:   }
1:67614ad: 
1:67614ad:   public void run()
1:67614ad:   {
1:67614ad:     // Our whole goal in life here is to waitFor() the process.
1:67614ad:     // However, we're actually going to catch the InterruptedException for it!
1:67614ad:     try
1:67614ad:     {
1:67614ad:       processExitValue = process.waitFor();
1:67614ad:     }
1:67614ad:     catch (InterruptedException e)
1:67614ad:     {
1:67614ad:       // Don't do anything here; the thread will die of natural causes
1:67614ad:     }
1:67614ad:   }
1:67614ad: } // class WaitForProcess
1:67614ad: 
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: /**
1:  * This class is a wrapper of Process to provide a waitFor() method
1:  * that forcibly terminates the process if it does not
1:  * complete within the specified time.
1:  *
0:  * @author Phil Lopez
1:  * 
1:  */
1: public class TimedProcess
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:   private Process process;
1: 
1:   public TimedProcess(Process process)
1:   {
1:     this.process = process;
1:   }
1: 
1:   public int waitFor(int sec)
1:   {
1:     int exitValue = -1;
1: 
1:     // Create a thread to wait for the process to die
1:     WaitForProcess t = new WaitForProcess(process);
1:     t.start();
1:     
1:     // Give the process sec seconds to terminate
1:     try
1:     {
1:       t.join(sec * 1000);
1: 
1:       // Otherwise, interrupt the thread...
1:       if (t.isAlive())
1:       {
1:         t.interrupt();
1:         
1:         System.err.println("Server Process did not complete in time. Destroying...");
1:         // ...and destroy the process with gusto
1:         process.destroy();
1:       }
1:       else
1:       {
1:         // process shut down, so it is right to get the exit value from it
1:         exitValue = t.getProcessExitValue();
1:       }
1:     }
1:     catch (InterruptedException e)
1:     {
1:       e.printStackTrace();
1:     }
1:   
1:     return exitValue;
1:   }
1: } // public class TimedProcess
1: 
1: 
1: class WaitForProcess
1:   extends Thread
1: {
1:   private Process process;
1:   private int processExitValue;
1:   
1:   public WaitForProcess(Process process)
1:   {
1:     this.process = process;
1:   }
1: 
1:   public int getProcessExitValue()
1:   {
1:     return processExitValue;
1:   }
1: 
1:   public void run()
1:   {
1:     // Our whole goal in life here is to waitFor() the process.
1:     // However, we're actually going to catch the InterruptedException for it!
1:     try
1:     {
1:       processExitValue = process.waitFor();
1:     }
1:     catch (InterruptedException e)
1:     {
1:       // Don't do anything here; the thread will die of natural causes
1:     }
1:   }
1: } // class WaitForProcess
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.TimedProcess
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: /**
0:  * This class is a wrapper of Process to provide a waitFor() method
0:  * that forcibly terminates the process if it does not
0:  * complete within the specified time.
0:  *
0:  * @author Phil Lopez
0:  * 
0:  */
0: public class TimedProcess
0: {
1: 
0:   private Process process;
1: 
0:   public TimedProcess(Process process)
0:   {
0:     this.process = process;
0:   }
1: 
0:   public int waitFor(int sec)
0:   {
0:     int exitValue = -1;
1: 
0:     // Create a thread to wait for the process to die
0:     WaitForProcess t = new WaitForProcess(process);
0:     t.start();
1:     
0:     // Give the process sec seconds to terminate
0:     try
0:     {
0:       t.join(sec * 1000);
1: 
0:       // Otherwise, interrupt the thread...
0:       if (t.isAlive())
0:       {
0:         t.interrupt();
1:         
0:         System.err.println("Server Process did not complete in time. Destroying...");
0:         // ...and destroy the process with gusto
0:         process.destroy();
0:       }
0:       else
0:       {
0:         // process shut down, so it is right to get the exit value from it
0:         exitValue = t.getProcessExitValue();
0:       }
0:     }
0:     catch (InterruptedException e)
0:     {
0:       e.printStackTrace();
0:     }
1:   
0:     return exitValue;
0:   }
0: } // public class TimedProcess
1: 
1: 
0: class WaitForProcess
0:   extends Thread
0: {
0:   private Process process;
0:   private int processExitValue;
1:   
0:   public WaitForProcess(Process process)
0:   {
0:     this.process = process;
0:   }
1: 
0:   public int getProcessExitValue()
0:   {
0:     return processExitValue;
0:   }
1: 
0:   public void run()
0:   {
0:     // Our whole goal in life here is to waitFor() the process.
0:     // However, we're actually going to catch the InterruptedException for it!
0:     try
0:     {
0:       processExitValue = process.waitFor();
0:     }
0:     catch (InterruptedException e)
0:     {
0:       // Don't do anything here; the thread will die of natural causes
0:     }
0:   }
0: } // class WaitForProcess
1: 
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.TimedProcess
0: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================