1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GetPropertyInfoTest
1:2bc809f: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.functionTests.tests.lang;
1:2bc809f: 
1:2bc809f: import java.sql.Connection;
1:2bc809f: import java.sql.Driver;
1:2bc809f: import java.sql.DriverManager;
1:2bc809f: import java.sql.DriverPropertyInfo;
1:2bc809f: import java.sql.SQLException;
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: public class GetPropertyInfoTest
1:2bc809f: {
1:2bc809f: 	static String protocol = "jdbc:derby:";
1:2bc809f: 	static String url = "EncryptedDB;create=true;dataEncryption=true";
1:2bc809f: 	static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1:2bc809f: 
1:2bc809f: 	public static void main(String[] args) throws SQLException,
1:2bc809f: 		InterruptedException, Exception 
1:2bc809f:     {
1:2bc809f: 		boolean		passed = true;
1:2bc809f: 
1:2bc809f: 		// adjust URL to compensate for other encryption providers
1:2bc809f: 		String provider = System.getProperty("testEncryptionProvider");
1:2bc809f: 		if (provider != null)
1:2bc809f: 		{
1:2bc809f: 		    url = "EncryptedDB;create=true;dataEncryption=true;encryptionProvider=" + provider;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		System.out.println("Test GetPropertyInfoTest starting");
1:2bc809f: 		try
1:2bc809f: 		{
1:2bc809f: 			Properties info = new Properties();
1:4469400:             Class<?> clazz = Class.forName(driver);
1:4469400: 			clazz.getConstructor().newInstance();
1:2bc809f: 			Driver cDriver = DriverManager.getDriver(protocol);
1:2bc809f: 			boolean canConnect = false;
1:2bc809f: 
1:2bc809f: 			// Test getPropertyInfo by passing attributes in the
1:2bc809f: 			// url.
1:2bc809f: 			for(int i = 0; i < 2; i++)
1:2bc809f: 			{
1:2bc809f: 				// In order to check for inadequate properties, we omit the
1:2bc809f: 				// bootPassword and call getPropertyInfo. (bootPassword is
1:2bc809f: 				// required because dataEncryption is true)
1:2bc809f: 				DriverPropertyInfo[] attributes = cDriver.getPropertyInfo(protocol+url,info);
1:2bc809f: 				
1:2bc809f: 				// zero length means a connection attempt can be made
1:2bc809f: 				if (attributes.length == 0)
1:2bc809f: 				{
1:2bc809f: 					canConnect = true;
1:2bc809f: 					break;
1:2bc809f: 				}
1:2bc809f: 
1:2bc809f: 				for (int j = 0; j < attributes.length; j++)
1:2bc809f: 				{
1:479e2bc: 					System.out.print(attributes[j].name + " - value: " + attributes[j].value);
1:479e2bc: 					// Also check on the other PropertyInfo fields
1:479e2bc: 					String[] choices = attributes[j].choices;
1:479e2bc: 					System.out.print(" - description: " 
1:479e2bc: 						+ attributes[j].description +
1:479e2bc: 						" - required " + attributes[j].required);
1:479e2bc: 					if (choices != null)
1:479e2bc: 					{
1:479e2bc: 						for (int k = 0; k < choices.length; k++)
1:479e2bc: 						{
1:479e2bc: 							System.out.print("     - choices [" + k + "] : " + choices[k]);
1:479e2bc: 						}
1:479e2bc: 						System.out.print("\n");
1:479e2bc: 					}
1:479e2bc: 					else
1:479e2bc: 						System.out.print(" - choices null \n");
1:479e2bc: 				}
1:479e2bc: 
1:2bc809f: 				// Now set bootPassword and call getPropertyInfo again.  
1:2bc809f: 				// This time attribute length should be zero, sice we pass all
1:2bc809f: 				// minimum required properties. 
1:2bc809f: 				url = url + ";bootPassword=db2everyplace";
1:479e2bc: 			}
1:2bc809f: 
1:2bc809f: 			if(canConnect == false)
1:479e2bc: 			{
1:2bc809f: 				System.out.println("More attributes are required to connect to the database");
1:2bc809f: 				passed = false;
1:2bc809f: 			}
1:479e2bc: 			else
1:479e2bc: 			{			
1:2bc809f: 				Connection conn = DriverManager.getConnection(protocol + url, info);
1:2bc809f: 				conn.close();
1:2bc809f: 			}
1:2bc809f: 		
1:2bc809f: 			canConnect = false;
1:2bc809f: 
1:2bc809f: 			// Test getPropertyInfo by passing attributes in the
1:2bc809f: 			// Properties array.
1:2bc809f: 			info.put("create", "true");
1:2bc809f: 			info.put("dataEncryption", "true");
1:2bc809f: 			info.put("bootPassword", "db2everyplace");
1:2bc809f: 			// Use alternate encryption provider if necessary.
1:2bc809f: 			if (provider != null)
1:2bc809f: 			{ 
1:2bc809f: 			    info.put("encryptionProvider", provider);
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			for(int i = 0; i < 2; i++)
1:2bc809f: 			{
1:2bc809f: 				// In order to check for inadequate properties, we omit the
1:2bc809f: 				// database name and call getPropertyInfo. 
1:2bc809f: 				DriverPropertyInfo[] attributes = cDriver.getPropertyInfo(protocol,info);
1:2bc809f: 			
1:2bc809f: 				// zero length means a connection attempt can be made
1:2bc809f: 				if (attributes.length == 0)
1:2bc809f: 				{
1:2bc809f: 					canConnect = true;
1:2bc809f: 					break;
1:2bc809f: 				}
1:2bc809f: 
1:2bc809f: 				for (int j = 0; j < attributes.length; j++)
1:2bc809f: 				{
1:479e2bc: 					System.out.print(attributes[j].name + " - value: " + attributes[j].value);
1:479e2bc: 					// Also check on the other PropertyInfo fields
1:479e2bc: 					String[] choices = attributes[j].choices;
1:479e2bc: 					System.out.print(" - description: " 
1:479e2bc: 						+ attributes[j].description +
1:479e2bc: 						" - required " + attributes[j].required);
1:479e2bc: 					if (choices != null)
1:2bc809f: 					{
1:479e2bc: 						for (int k = 0; k < choices.length; k++)
1:2bc809f: 						{
1:479e2bc: 							System.out.print("     - choices [" + k + "] : " + choices[k]);
1:2bc809f: 						}
1:479e2bc: 						System.out.print("\n");
1:2bc809f: 					}
1:2bc809f: 					else
1:479e2bc: 						System.out.print(" - choices null \n");
1:2bc809f: 				}
1:2bc809f: 
1:2bc809f: 				// Now set database name and call getPropertyInfo again.  
1:2bc809f: 				// This time attribute length should be zero, sice we pass all
1:2bc809f: 				// minimum required properties. 
1:2bc809f: 				info.put("databaseName", "EncryptedDB1");
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			if(canConnect == false)
1:2bc809f: 			{
1:2bc809f: 				System.out.println("More attributes are required to connect to the database");
1:2bc809f: 				passed = false;
1:2bc809f: 			}
1:2bc809f: 			else
1:2bc809f: 			{			
1:2bc809f: 				Connection conn1 = DriverManager.getConnection(protocol, info);
1:2bc809f: 				conn1.close();
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 		}
1:2bc809f: 		catch(SQLException sqle)
1:2bc809f: 		{
1:2bc809f: 			passed = false;
1:2bc809f: 			do {
1:2bc809f: 				System.out.println(sqle.getSQLState() + ":" + sqle.getMessage());
1:2bc809f: 				sqle = sqle.getNextException();
1:2bc809f: 			} while (sqle != null);
1:2bc809f: 		}
1:2bc809f: 		catch (Throwable e) 
1:2bc809f: 		{
1:2bc809f: 			System.out.println("FAIL -- unexpected exception caught in main():\n");
1:2bc809f: 			System.out.println(e.getMessage());
1:2bc809f: 			e.printStackTrace();
1:2bc809f: 			passed = false;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if(passed)
1:2bc809f: 			System.out.println("Test GetPropertyInfoTest finished");
1:2bc809f: 		else
1:2bc809f: 			System.out.println("Test GetPropertyInfoTest failed");
1:2bc809f: 	}
1:2bc809f: }
1:2bc809f: 
1:2bc809f: 	
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz = Class.forName(driver);
1: 			clazz.getConstructor().newInstance();
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:479e2bc
/////////////////////////////////////////////////////////////////////////
1: 					System.out.print(attributes[j].name + " - value: " + attributes[j].value);
1: 					// Also check on the other PropertyInfo fields
1: 					String[] choices = attributes[j].choices;
1: 					System.out.print(" - description: " 
1: 						+ attributes[j].description +
1: 						" - required " + attributes[j].required);
1: 					if (choices != null)
1: 					{
1: 						for (int k = 0; k < choices.length; k++)
1: 						{
1: 							System.out.print("     - choices [" + k + "] : " + choices[k]);
1: 						}
1: 						System.out.print("\n");
1: 					}
1: 					else
1: 						System.out.print(" - choices null \n");
/////////////////////////////////////////////////////////////////////////
1: 					System.out.print(attributes[j].name + " - value: " + attributes[j].value);
1: 					// Also check on the other PropertyInfo fields
1: 					String[] choices = attributes[j].choices;
1: 					System.out.print(" - description: " 
1: 						+ attributes[j].description +
1: 						" - required " + attributes[j].required);
1: 					if (choices != null)
1: 					{
1: 						for (int k = 0; k < choices.length; k++)
1: 						{
1: 							System.out.print("     - choices [" + k + "] : " + choices[k]);
1: 						}
1: 						System.out.print("\n");
1: 					}
1: 					else
1: 						System.out.print(" - choices null \n");
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.GetPropertyInfoTest
1: 
0:    Copyright 2001, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.Driver;
1: import java.sql.DriverManager;
1: import java.sql.DriverPropertyInfo;
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: 
1: public class GetPropertyInfoTest
1: {
1: 	static String protocol = "jdbc:derby:";
1: 	static String url = "EncryptedDB;create=true;dataEncryption=true";
1: 	static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
1: 
1: 	public static void main(String[] args) throws SQLException,
1: 		InterruptedException, Exception 
1:     {
1: 		boolean		passed = true;
1: 
1: 		// adjust URL to compensate for other encryption providers
1: 		String provider = System.getProperty("testEncryptionProvider");
1: 		if (provider != null)
1: 		{
1: 		    url = "EncryptedDB;create=true;dataEncryption=true;encryptionProvider=" + provider;
1: 		}
1: 
1: 		System.out.println("Test GetPropertyInfoTest starting");
1: 		try
1: 		{
1: 			Properties info = new Properties();
0: 			Class.forName(driver).newInstance();
1: 			Driver cDriver = DriverManager.getDriver(protocol);
1: 			boolean canConnect = false;
1: 
1: 			// Test getPropertyInfo by passing attributes in the
1: 			// url.
1: 			for(int i = 0; i < 2; i++)
1: 			{
1: 				// In order to check for inadequate properties, we omit the
1: 				// bootPassword and call getPropertyInfo. (bootPassword is
1: 				// required because dataEncryption is true)
1: 				DriverPropertyInfo[] attributes = cDriver.getPropertyInfo(protocol+url,info);
1: 				
1: 				// zero length means a connection attempt can be made
1: 				if (attributes.length == 0)
1: 				{
1: 					canConnect = true;
1: 					break;
1: 				}
1: 
1: 				for (int j = 0; j < attributes.length; j++)
1: 				{
0: 					System.out.println(attributes[j].name + ": " + attributes[j].value);
1: 				}
1: 
1: 				// Now set bootPassword and call getPropertyInfo again.  
1: 				// This time attribute length should be zero, sice we pass all
1: 				// minimum required properties. 
1: 				url = url + ";bootPassword=db2everyplace";
1: 			}
1: 
1: 			if(canConnect == false)
1: 			{
1: 				System.out.println("More attributes are required to connect to the database");
1: 				passed = false;
1: 			}
1: 			else
1: 			{			
1: 				Connection conn = DriverManager.getConnection(protocol + url, info);
1: 				conn.close();
1: 			}
1: 		
1: 			canConnect = false;
1: 
1: 			// Test getPropertyInfo by passing attributes in the
1: 			// Properties array.
1: 			info.put("create", "true");
1: 			info.put("dataEncryption", "true");
1: 			info.put("bootPassword", "db2everyplace");
1: 			// Use alternate encryption provider if necessary.
1: 			if (provider != null)
1: 			{ 
1: 			    info.put("encryptionProvider", provider);
1: 			}
1: 
1: 			for(int i = 0; i < 2; i++)
1: 			{
1: 				// In order to check for inadequate properties, we omit the
1: 				// database name and call getPropertyInfo. 
1: 				DriverPropertyInfo[] attributes = cDriver.getPropertyInfo(protocol,info);
1: 			
1: 				// zero length means a connection attempt can be made
1: 				if (attributes.length == 0)
1: 				{
1: 					canConnect = true;
1: 					break;
1: 				}
1: 
1: 				for (int j = 0; j < attributes.length; j++)
1: 				{
0: 					System.out.println(attributes[j].name + ": " + attributes[j].value);
1: 				}
1: 				// Now set database name and call getPropertyInfo again.  
1: 				// This time attribute length should be zero, sice we pass all
1: 				// minimum required properties. 
1: 				info.put("databaseName", "EncryptedDB1");
1: 			}
1: 
1: 			if(canConnect == false)
1: 			{
1: 				System.out.println("More attributes are required to connect to the database");
1: 				passed = false;
1: 			}
1: 			else
1: 			{			
1: 				Connection conn1 = DriverManager.getConnection(protocol, info);
1: 				conn1.close();
1: 			}
1: 
1: 		}
1: 		catch(SQLException sqle)
1: 		{
1: 			passed = false;
1: 			do {
1: 				System.out.println(sqle.getSQLState() + ":" + sqle.getMessage());
1: 				sqle = sqle.getNextException();
1: 			} while (sqle != null);
1: 		}
1: 		catch (Throwable e) 
1: 		{
1: 			System.out.println("FAIL -- unexpected exception caught in main():\n");
1: 			System.out.println(e.getMessage());
1: 			e.printStackTrace();
1: 			passed = false;
1: 		}
1: 
1: 		if(passed)
1: 			System.out.println("Test GetPropertyInfoTest finished");
1: 		else
1: 			System.out.println("Test GetPropertyInfoTest failed");
1: 	}
1: }
1: 
1: 	
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
============================================================================