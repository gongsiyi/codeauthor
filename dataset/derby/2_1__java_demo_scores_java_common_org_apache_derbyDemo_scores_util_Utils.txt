1:ff22a62: /*
1:ff22a62: 
1:ff22a62:    Derby - Class org.apache.derbyDemo.scores.util.Utils
1:ff22a62: 
1:ff22a62:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ff22a62:    contributor license agreements.  See the NOTICE file distributed with
1:ff22a62:    this work for additional information regarding copyright ownership.
1:ff22a62:    The ASF licenses this file to You under the Apache License, Version 2.0
1:ff22a62:    (the "License"); you may not use this file except in compliance with
1:ff22a62:    the License.  You may obtain a copy of the License at
1:ff22a62: 
1:ff22a62:       http://www.apache.org/licenses/LICENSE-2.0
1:ff22a62: 
1:ff22a62:    Unless required by applicable law or agreed to in writing, software
1:ff22a62:    distributed under the License is distributed on an "AS IS" BASIS,
1:ff22a62:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff22a62:    See the License for the specific language governing permissions and
1:ff22a62:    limitations under the License.
1:ff22a62: 
1:ff22a62:  */
1:ff22a62: 
1:ff22a62: package org.apache.derbyDemo.scores.util;
1:ff22a62: 
1:ff22a62: import java.io.*;
1:ff22a62: import java.sql.*;
1:ff22a62: 
1:ff22a62: /**
1:ff22a62:  * <p>
1:ff22a62:  * Utility methods for the Scores application
1:ff22a62:  * </p>
1:ff22a62:  *
1:ff22a62:  */
1:ff22a62: public  class   Utils
1:ff22a62: {
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTANTS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /* private static  final   String  PREPARE_PREAMBLE = "Preparing..."; */
1:ff22a62:     private static  final   String  PREPARE_PREAMBLE = "";
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATE
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTRUCTOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // PUBLIC BEHAVIOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Get the logging tool.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  Logger  getLogger()
1:ff22a62:     {
1:ff22a62:         return Logger.getLogger();
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // METHODS CALLED BY CALLED BY CLIENT CODE AND SERVER-SIDE FUNCTIONS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Compute the relative weight of a Question given its difficulty.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static double weighQuestion(int difficulty)
1:ff22a62:     {
1:ff22a62:         return (double) difficulty;
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Compute the score for a question. A penalty is assessed
1:ff22a62:      * for guessing the wrong answer. If actualChoice is -1,
1:ff22a62:      * then the Student didn't guess and we don't assess a penalty.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static double scoreAnswer
1:ff22a62:         (
1:ff22a62:          int difficulty,
1:ff22a62:          int numberOfChoices,
1:ff22a62:          int correctChoice,
1:ff22a62:          int actualChoice
1:ff22a62:          )
1:ff22a62:     {
1:ff22a62:         if( actualChoice < 0 ) { return 0.0; }
1:ff22a62:         
1:ff22a62:         double weight = weighQuestion(difficulty);
1:ff22a62:         
1:ff22a62:         if ( correctChoice == actualChoice ) { return weight; }
1:ff22a62:         else
1:ff22a62:         {
1:ff22a62:             double penaltyRatio = 1.0 / ((double) numberOfChoices);
1:ff22a62:             return -(weight * penaltyRatio);
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Calculate the final score as a percentage, given the highest possible
1:ff22a62:      * score and the actual score achieved.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public static double finishScore(double allCorrect, double actual)
1:ff22a62:     {
1:ff22a62:         if ( actual < 0.0D ) { return 0.0D; }
1:ff22a62:         else { return (100D * actual) / allCorrect; }
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // SQL MINIONS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Commit a transaction
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    commit( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         getLogger().log( "Committing..." );
1:ff22a62: 
1:ff22a62:         conn.commit();
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Execute a DDL statement for creating a schema object.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    executeDDL( Connection conn, String text )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         PreparedStatement   ps = prepare( conn, text );
1:ff22a62: 
1:ff22a62:         ps.execute();
1:ff22a62: 
1:ff22a62:         close( ps );
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Execute a call statement.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    executeCall( Connection conn, String text )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         CallableStatement   cs = prepareCall( conn, text );
1:ff22a62: 
1:ff22a62:         cs.execute();
1:ff22a62: 
1:ff22a62:         close( cs );
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Prepare a SQL statement.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  PreparedStatement   prepare
1:ff22a62:         ( Connection conn, String text )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         getLogger().log( PREPARE_PREAMBLE + text );
1:ff22a62: 
1:ff22a62:         return conn.prepareStatement( text );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Prepare a SQL CALL statement.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  CallableStatement   prepareCall
1:ff22a62:         ( Connection conn, String text )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         getLogger().log( PREPARE_PREAMBLE + text );
1:ff22a62: 
1:ff22a62:         return conn.prepareCall( text );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Close a PreparedStatement, releasing its resources.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    close( PreparedStatement ps )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         if ( ps != null ) { ps.close(); }
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Close a ResultSet, releasing its resources.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    close( ResultSet rs )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         if ( rs != null ) { rs.close(); }
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Close a Connection, releasing its resources.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    close( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         if ( conn != null ) { conn.close(); }
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Get a scalar value from a PreparedStatement.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  int getScalarValue( PreparedStatement ps )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         ResultSet           rs = ps.executeQuery();
1:ff22a62: 
1:ff22a62:         rs.next();
1:ff22a62: 
1:ff22a62:         try {
1:ff22a62:             return rs.getInt( 1 );
1:ff22a62:         }
1:ff22a62:         finally
1:ff22a62:         {
1:ff22a62:             close( rs );
1:ff22a62:             close( ps );
1:ff22a62:         }
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // MINIONS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62: 
1:ff22a62: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ff22a62
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyDemo.scores.util.Utils
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyDemo.scores.util;
1: 
1: import java.io.*;
1: import java.sql.*;
1: 
1: /**
1:  * <p>
1:  * Utility methods for the Scores application
1:  * </p>
1:  *
0:  * @author Rick Hillegas
1:  */
1: public  class   Utils
1: {
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /* private static  final   String  PREPARE_PREAMBLE = "Preparing..."; */
1:     private static  final   String  PREPARE_PREAMBLE = "";
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // PUBLIC BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the logging tool.
1:      * </p>
1:      */
1:     public  static  Logger  getLogger()
1:     {
1:         return Logger.getLogger();
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // METHODS CALLED BY CALLED BY CLIENT CODE AND SERVER-SIDE FUNCTIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Compute the relative weight of a Question given its difficulty.
1:      * </p>
1:      */
1:     public static double weighQuestion(int difficulty)
1:     {
1:         return (double) difficulty;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Compute the score for a question. A penalty is assessed
1:      * for guessing the wrong answer. If actualChoice is -1,
1:      * then the Student didn't guess and we don't assess a penalty.
1:      * </p>
1:      */
1:     public static double scoreAnswer
1:         (
1:          int difficulty,
1:          int numberOfChoices,
1:          int correctChoice,
1:          int actualChoice
1:          )
1:     {
1:         if( actualChoice < 0 ) { return 0.0; }
1:         
1:         double weight = weighQuestion(difficulty);
1:         
1:         if ( correctChoice == actualChoice ) { return weight; }
1:         else
1:         {
1:             double penaltyRatio = 1.0 / ((double) numberOfChoices);
1:             return -(weight * penaltyRatio);
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Calculate the final score as a percentage, given the highest possible
1:      * score and the actual score achieved.
1:      * </p>
1:      */
1:     public static double finishScore(double allCorrect, double actual)
1:     {
1:         if ( actual < 0.0D ) { return 0.0D; }
1:         else { return (100D * actual) / allCorrect; }
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // SQL MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Commit a transaction
1:      * </p>
1:      */
1:     public  static  void    commit( Connection conn )
1:         throws SQLException
1:     {
1:         getLogger().log( "Committing..." );
1: 
1:         conn.commit();
1:     }
1:     
1:     /**
1:      * <p>
1:      * Execute a DDL statement for creating a schema object.
1:      * </p>
1:      */
1:     public  static  void    executeDDL( Connection conn, String text )
1:         throws SQLException
1:     {
1:         PreparedStatement   ps = prepare( conn, text );
1: 
1:         ps.execute();
1: 
1:         close( ps );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Execute a call statement.
1:      * </p>
1:      */
1:     public  static  void    executeCall( Connection conn, String text )
1:         throws SQLException
1:     {
1:         CallableStatement   cs = prepareCall( conn, text );
1: 
1:         cs.execute();
1: 
1:         close( cs );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Prepare a SQL statement.
1:      * </p>
1:      */
1:     public  static  PreparedStatement   prepare
1:         ( Connection conn, String text )
1:         throws SQLException
1:     {
1:         getLogger().log( PREPARE_PREAMBLE + text );
1: 
1:         return conn.prepareStatement( text );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Prepare a SQL CALL statement.
1:      * </p>
1:      */
1:     public  static  CallableStatement   prepareCall
1:         ( Connection conn, String text )
1:         throws SQLException
1:     {
1:         getLogger().log( PREPARE_PREAMBLE + text );
1: 
1:         return conn.prepareCall( text );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Close a PreparedStatement, releasing its resources.
1:      * </p>
1:      */
1:     public  static  void    close( PreparedStatement ps )
1:         throws SQLException
1:     {
1:         if ( ps != null ) { ps.close(); }
1:     }
1:     
1:     /**
1:      * <p>
1:      * Close a ResultSet, releasing its resources.
1:      * </p>
1:      */
1:     public  static  void    close( ResultSet rs )
1:         throws SQLException
1:     {
1:         if ( rs != null ) { rs.close(); }
1:     }
1:     
1:     /**
1:      * <p>
1:      * Close a Connection, releasing its resources.
1:      * </p>
1:      */
1:     public  static  void    close( Connection conn )
1:         throws SQLException
1:     {
1:         if ( conn != null ) { conn.close(); }
1:     }
1:     
1:     /**
1:      * <p>
1:      * Get a scalar value from a PreparedStatement.
1:      * </p>
1:      */
1:     public  static  int getScalarValue( PreparedStatement ps )
1:         throws SQLException
1:     {
1:         ResultSet           rs = ps.executeQuery();
1: 
1:         rs.next();
1: 
1:         try {
1:             return rs.getInt( 1 );
1:         }
1:         finally
1:         {
1:             close( rs );
1:             close( ps );
1:         }
1:     }
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1: 
1: }
============================================================================