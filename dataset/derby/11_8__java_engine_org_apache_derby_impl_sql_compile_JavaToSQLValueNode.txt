1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.JavaToSQLValueNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
19:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import java.lang.reflect.Modifier;
1:3bb140c: import java.util.List;
1:425fcc9: import org.apache.derby.catalog.TypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.compiler.LocalField;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:72abc72: import org.apache.derby.iapi.types.StringDataValue;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: import org.apache.derby.iapi.util.JBitSet;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This node type converts a value from the Java domain to the SQL domain.
1:eac0369:  */
1:eac0369: 
1:3bb140c: class JavaToSQLValueNode extends ValueNode
4:eac0369: {
1:eac0369: 	JavaValueNode	javaNode;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a JavaToSQLValueNode
5:eac0369: 	 *
1:eac0369: 	 * @param value		The Java value to convert to the SQL domain
1:3bb140c:      * @param cm        The context manager
1:eac0369: 	 */
1:3bb140c:     JavaToSQLValueNode(JavaValueNode value, ContextManager cm)
1:eac0369: 	{
1:3bb140c:         super(cm);
1:3bb140c:         this.javaNode = value;
4:eac0369: 	}
1:01217c2: 
1:01217c2: 	/**
1:eac0369: 	 * Preprocess an expression tree.  We do a number of transformations
1:eac0369: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1:eac0369: 	 * subquery flattening.
1:eac0369: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1:eac0369: 	 *
1:eac0369: 	 * @param	numTables			Number of tables in the DML Statement
1:eac0369: 	 * @param	outerFromList		FromList from outer query block
1:eac0369: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1:eac0369: 	 * @param	outerPredicateList	PredicateList from outer query block
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:2d2e717: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode preprocess(int numTables,
1:eac0369: 								FromList outerFromList,
1:eac0369: 								SubqueryList outerSubqueryList,
1:eac0369: 								PredicateList outerPredicateList) 
1:eac0369: 						throws StandardException
1:2d2e717: 	{
1:eac0369: 		javaNode.preprocess(numTables,
1:eac0369: 							outerFromList, outerSubqueryList,
1:eac0369: 							outerPredicateList);
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do code generation for this conversion of a value from the Java to
1:eac0369: 	 * the SQL domain.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1:eac0369: 	 * @param mb the method  the expression will go into
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		TypeId			resultType;
1:eac0369: 		String						resultTypeName;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Tell the Java node that it's value is being returned to the
1:eac0369: 		** SQL domain.  This way, it knows whether the checking for a null
1:eac0369: 		** receiver is to be done at the Java level or the SQL level.
1:eac0369: 		*/
1:eac0369: 		javaNode.returnValueToSQLDomain();
1:eac0369: 
1:eac0369: 		/* Generate the receiver, if any. */
1:eac0369: 		boolean hasReceiver = javaNode.generateReceiver(acb, mb);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If the java expression has a receiver, we want to check whether
1:eac0369: 		** it's null before evaluating the whole expression (to avoid
1:eac0369: 		** a NullPointerException.
1:eac0369: 		*/
1:eac0369: 		if (hasReceiver)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** There is a receiver.  Generate a null SQL value to return
1:eac0369: 			** in case the receiver is null.  First, create a field to hold
1:eac0369: 			** the null SQL value.
1:eac0369: 			*/
1:eac0369: 			String nullValueClass = getTypeCompiler().interfaceName();
1:eac0369: 			LocalField nullValueField =
1:eac0369: 				acb.newFieldDeclaration(Modifier.PRIVATE, nullValueClass);
1:eac0369: 			/*
1:eac0369: 			** There is a receiver.  Generate the following to test
1:eac0369: 			** for null:
1:eac0369: 			**
1:eac0369: 			**		(receiverExpression == null) ? 
1:eac0369: 			*/
1:eac0369: 
1:eac0369: 			mb.conditionalIfNull();
1:eac0369: 			mb.getField(nullValueField);
1:ba7683c: 			acb.generateNullWithExpress(mb, getTypeCompiler(), 
1:ba7683c: 					getTypeServices().getCollationType());
1:eac0369: 
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** We have now generated the expression to test, and the
1:eac0369: 			** "true" side of the ?: operator.  Finish the "true" side
1:eac0369: 			** so we can generate the "false" side.
1:eac0369: 			*/
1:eac0369: 			mb.startElseCode();
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		resultType = getTypeId();
1:eac0369: 		TypeCompiler tc = getTypeCompiler();
1:eac0369: 
1:eac0369: 		resultTypeName = tc.interfaceName();
1:eac0369: 
1:eac0369: 		/* Allocate an object for re-use to hold the result of the conversion */
1:eac0369: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
1:eac0369: 
1:eac0369: 		/* Generate the expression for the Java value under us */
1:eac0369: 		javaNode.generateExpression(acb, mb);
1:eac0369: 
1:eac0369: 		/* Generate the SQL value, which is always nullable */
1:ba7683c: 		acb.generateDataValue(mb, tc, 
1:ba7683c: 				getTypeServices().getCollationType(), field);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If there was a receiver, the return value will be the result
1:eac0369: 		** of the ?: operator.
1:eac0369: 		*/
1:eac0369: 		if (hasReceiver)
1:eac0369: 		{
1:eac0369: 			mb.completeConditional();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Prints the sub-nodes of this object.  See QueryTreeNode for
1:eac0369: 	 * how tree printing is supposed to work.
1:eac0369: 	 *
1:eac0369: 	 * @param depth		The depth of this node in the tree
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			super.printSubNodes(depth);
1:eac0369: 
1:eac0369: 			printLabel(depth, "javaNode: ");
1:eac0369: 			javaNode.treePrint(depth + 1);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the JavaValueNode that lives under this JavaToSQLValueNode.
1:eac0369: 	 *
1:eac0369: 	 * @return	The JavaValueNode that lives under this node.
1:eac0369: 	 */
1:eac0369: 
1:9f2ed7d:     JavaValueNode getJavaValueNode()
1:eac0369: 	{
1:eac0369: 		return javaNode;
1:2d2e717: 	}
1:2d2e717: 
1:2d2e717: 	/**
1:eac0369: 	 * Bind this expression.  This means binding the sub-expressions,
1:eac0369: 	 * as well as figuring out what the return type is for this expression.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList		The FROM list for the query this
1:eac0369: 	 *				expression is in, for binding columns.
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find
1:eac0369: 	 *							SubqueryNodes
1:09c2697:      * @param aggregates    The aggregate list being built as we find
1:09c2697:      *                      AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:71c8e86:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		// method invocations are not allowed in ADD TABLE clauses.
1:eac0369: 		// And neither are field references. 
1:eac0369: 		javaNode.checkReliability(this);
1:eac0369: 
1:eac0369: 		/* Bind the expression under us */
1:09c2697:         javaNode = javaNode.bindExpression(fromList, subqueryList, aggregates);
1:eac0369: 
1:c8603c4:         if ( javaNode instanceof StaticMethodCallNode )
1:c8603c4:         {
1:c8603c4:             AggregateNode   agg = ((StaticMethodCallNode) javaNode).getResolvedAggregate();
1:c8603c4: 
1:c8603c4:             if ( agg != null )
1:c8603c4:             {
1:09c2697:                 return agg.bindExpression( fromList, subqueryList, aggregates );
1:c8603c4:             }
1:c8603c4:         }
1:c8603c4: 
1:30fa79b: 		DataTypeDescriptor dts = javaNode.getDataType();
1:eac0369: 		if (dts == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_NO_CORRESPONDING_S_Q_L_TYPE, 
1:eac0369: 				javaNode.getJavaTypeName());
1:eac0369: 		}
1:425fcc9: 
1:425fcc9:         TypeDescriptor catalogType = dts.getCatalogType();
1:425fcc9: 
1:30fa79b:         if ( catalogType.isRowMultiSet() || (catalogType.getTypeName().equals( "java.sql.ResultSet" )) )
1:425fcc9:         {
1:425fcc9: 			throw StandardException.newException(SQLState.LANG_TABLE_FUNCTION_NOT_ALLOWED);
1:425fcc9:         }
1:9ed7c4d:         
1:9ed7c4d:         setType(dts);
1:9ed7c4d: 		
1:9ed7c4d:         // For functions returning string types we should set the collation to match the 
1:9ed7c4d:         // java method's schema DERBY-2972. This is propogated from 
1:9ed7c4d:         // RoutineAliasInfo to javaNode.
1:9ed7c4d:         if (dts.getTypeId().isStringTypeId()) {
1:9ed7c4d:             this.setCollationInfo(javaNode.getCollationType(),
1:9ed7c4d:                     StringDataValue.COLLATION_DERIVATION_IMPLICIT);
1:9ed7c4d:         }
1:9ed7c4d: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Remap all ColumnReferences in this tree to be clones of the
1:eac0369: 	 * underlying expression.
1:eac0369: 	 *
1:eac0369: 	 * @return ValueNode			The remapped expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException			Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode remapColumnReferencesToExpressions()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		javaNode = javaNode.remapColumnReferencesToExpressions();
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Categorize this predicate.  Initially, this means
1:eac0369: 	 * building a bit map of the referenced tables for each predicate.
1:eac0369: 	 * If the source of this ColumnReference (at the next underlying level) 
1:eac0369: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1:eac0369: 	 * will not be pushed down.
1:eac0369: 	 *
1:eac0369: 	 * For example, in:
1:eac0369: 	 *		select * from (select 1 from s) a (x) where x = 1
1:eac0369: 	 * we will not push down x = 1.
1:eac0369: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1:eac0369: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1:eac0369: 	 * that tree into the pushed predicate, and that tree could contain
1:eac0369: 	 * subqueries and method calls.
1:eac0369: 	 *
1:eac0369: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1:eac0369: 	 * @param simplePredsOnly	Whether or not to consider method
1:eac0369: 	 *							calls, field references and conditional nodes
1:eac0369: 	 *							when building bit map
1:eac0369: 	 *
1:eac0369: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1:eac0369: 	 *						or a VirtualColumnNode.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException			Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return javaNode.categorize(referencedTabs, simplePredsOnly);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the variant type for the underlying expression.
1:eac0369: 	 * The variant type can be:
1:eac0369: 	 *		VARIANT				- variant within a scan
1:eac0369: 	 *							  (method calls and non-static field access)
1:eac0369: 	 *		SCAN_INVARIANT		- invariant within a scan
1:eac0369: 	 *							  (column references from outer tables)
1:eac0369: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1:eac0369: 	 *							  (constant expressions)
1:eac0369: 	 *
1:eac0369: 	 * @return	The variant type for the underlying expression.
1:eac0369: 	 * @exception StandardException	thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	protected int getOrderableVariantType() throws StandardException
1:eac0369: 	{
1:eac0369: 		return javaNode.getOrderableVariantType();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dd2f5a8: 	 * Accept the visitor for all visitable children of this node.
1:eac0369: 	 * 
1:eac0369: 	 * @param v the visitor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:dd2f5a8: 	void acceptChildren(Visitor v)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:dd2f5a8: 		super.acceptChildren(v);
1:eac0369: 
1:aebfb28: 		if (javaNode != null)
1:eac0369: 		{
1:eac0369: 			javaNode = (JavaValueNode)javaNode.accept(v);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369:         
1:eac0369: 	/**
1:01217c2: 	 * {@inheritDoc}
1:01217c2: 	 */
1:2706d1f:     boolean isEquivalent(ValueNode o)
1:01217c2:     {
1:2706d1f:         // anything in the java domain is not equivalent.
1:01217c2:     	return false;
1:01217c2:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode o)
1:         // anything in the java domain is not equivalent.
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Modifier;
1: import java.util.List;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: class JavaToSQLValueNode extends ValueNode
1:      * Constructor for a JavaToSQLValueNode
1:      * @param cm        The context manager
1:     JavaToSQLValueNode(JavaValueNode value, ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.JAVA_TO_SQL_VALUE_NODE);
1:         this.javaNode = value;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode preprocess(int numTables,
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode remapColumnReferencesToExpressions()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:7bfb37a
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
commit:c8603c4
/////////////////////////////////////////////////////////////////////////
1:         if ( javaNode instanceof StaticMethodCallNode )
1:         {
1:             AggregateNode   agg = ((StaticMethodCallNode) javaNode).getResolvedAggregate();
1: 
1:             if ( agg != null )
1:             {
0:                 return agg.bindExpression( fromList, subqueryList, aggregateVector );
1:             }
1:         }
1: 
commit:30fa79b
/////////////////////////////////////////////////////////////////////////
1: 		DataTypeDescriptor dts = javaNode.getDataType();
/////////////////////////////////////////////////////////////////////////
1:         if ( catalogType.isRowMultiSet() || (catalogType.getTypeName().equals( "java.sql.ResultSet" )) )
commit:425fcc9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.TypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 
1:         TypeDescriptor catalogType = dts.getCatalogType();
1: 
0:         if ( catalogType.getTypeName().equals( "java.sql.ResultSet" ) )
1:         {
1: 			throw StandardException.newException(SQLState.LANG_TABLE_FUNCTION_NOT_ALLOWED);
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9f2ed7d
/////////////////////////////////////////////////////////////////////////
1:     JavaValueNode getJavaValueNode()
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates    The aggregate list being built as we find
1:      *                      AggregateNodes
0:     ValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List aggregates)
/////////////////////////////////////////////////////////////////////////
1:         javaNode = javaNode.bindExpression(fromList, subqueryList, aggregates);
/////////////////////////////////////////////////////////////////////////
1:                 return agg.bindExpression( fromList, subqueryList, aggregates );
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
commit:aebfb28
/////////////////////////////////////////////////////////////////////////
1: 		if (javaNode != null)
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	 * Accept the visitor for all visitable children of this node.
1: 	void acceptChildren(Visitor v)
1: 		super.acceptChildren(v);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9ed7c4d
/////////////////////////////////////////////////////////////////////////
1:         
1:         setType(dts);
1: 		
1:         // For functions returning string types we should set the collation to match the 
1:         // java method's schema DERBY-2972. This is propogated from 
1:         // RoutineAliasInfo to javaNode.
1:         if (dts.getTypeId().isStringTypeId()) {
1:             this.setCollationInfo(javaNode.getCollationType(),
1:                     StringDataValue.COLLATION_DERIVATION_IMPLICIT);
1:         }
1: 
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1:         
1: 	/**
1: 	 * {@inheritDoc}
1: 	 */
0:     protected boolean isEquivalent(ValueNode o)
1:     {
0:     	// anything in the java domain is not equiavlent.
1:     	return false;
1:     }
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: 	/** 
0: 	 * @see QueryTreeNode#disablePrivilegeCollection
1: 	 */
0: 	public void disablePrivilegeCollection()
1: 	{
0: 		super.disablePrivilegeCollection();
0: 		if (javaNode != null)
0: 			javaNode.disablePrivilegeCollection();
1: 	}
1: 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.JavaToSQLValueNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.lang.reflect.Modifier;
1: 
1: import org.apache.derby.iapi.util.JBitSet;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node type converts a value from the Java domain to the SQL domain.
1:  */
1: 
0: public class JavaToSQLValueNode extends ValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	JavaValueNode	javaNode;
1: 
1: 	/**
0: 	 * Initializer for a JavaToSQLValueNode
1: 	 *
1: 	 * @param value		The Java value to convert to the SQL domain
1: 	 */
0: 	public void init(Object value)
1: 	{
0: 		this.javaNode = (JavaValueNode) value;
1: 	}
1: 
1: 	/**
0: 	 * Set the clause that this node appears in.
1: 	 *
0: 	 * @param clause	The clause that this node appears in.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	public void setClause(int clause)
1: 	{
0: 		super.setClause(clause);
0: 		javaNode.setClause(clause);
1: 	}
1: 
1: 	/**
1: 	 * Preprocess an expression tree.  We do a number of transformations
1: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1: 	 * subquery flattening.
1: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1: 	 *
1: 	 * @param	numTables			Number of tables in the DML Statement
1: 	 * @param	outerFromList		FromList from outer query block
1: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1: 	 * @param	outerPredicateList	PredicateList from outer query block
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode preprocess(int numTables,
1: 								FromList outerFromList,
1: 								SubqueryList outerSubqueryList,
1: 								PredicateList outerPredicateList) 
1: 						throws StandardException
1: 	{
1: 		javaNode.preprocess(numTables,
1: 							outerFromList, outerSubqueryList,
1: 							outerPredicateList);
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Do code generation for this conversion of a value from the Java to
1: 	 * the SQL domain.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
1: 	 * @param mb the method  the expression will go into
1: 	 *
0: 	 * @return	An expression to convert a value from the Java domain to
0: 	 *			the SQL domain.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 									throws StandardException
1: 	{
1: 		TypeId			resultType;
1: 		String						resultTypeName;
1: 
1: 		/*
1: 		** Tell the Java node that it's value is being returned to the
1: 		** SQL domain.  This way, it knows whether the checking for a null
1: 		** receiver is to be done at the Java level or the SQL level.
1: 		*/
1: 		javaNode.returnValueToSQLDomain();
1: 
1: 		/* Generate the receiver, if any. */
1: 		boolean hasReceiver = javaNode.generateReceiver(acb, mb);
1: 
1: 		/*
1: 		** If the java expression has a receiver, we want to check whether
1: 		** it's null before evaluating the whole expression (to avoid
1: 		** a NullPointerException.
1: 		*/
1: 		if (hasReceiver)
1: 		{
1: 			/*
1: 			** There is a receiver.  Generate a null SQL value to return
1: 			** in case the receiver is null.  First, create a field to hold
1: 			** the null SQL value.
1: 			*/
1: 			String nullValueClass = getTypeCompiler().interfaceName();
1: 			LocalField nullValueField =
1: 				acb.newFieldDeclaration(Modifier.PRIVATE, nullValueClass);
1: 			/*
1: 			** There is a receiver.  Generate the following to test
1: 			** for null:
1: 			**
1: 			**		(receiverExpression == null) ? 
1: 			*/
1: 
1: 			mb.conditionalIfNull();
1: 			mb.getField(nullValueField);
0: 			acb.generateNullWithExpress(mb, getTypeCompiler());
1: 
1: 
1: 			/*
1: 			** We have now generated the expression to test, and the
1: 			** "true" side of the ?: operator.  Finish the "true" side
1: 			** so we can generate the "false" side.
1: 			*/
1: 			mb.startElseCode();
1: 		}
1: 		
1: 		resultType = getTypeId();
1: 		TypeCompiler tc = getTypeCompiler();
1: 
1: 		resultTypeName = tc.interfaceName();
1: 
1: 		/* Allocate an object for re-use to hold the result of the conversion */
1: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
1: 
1: 		/* Generate the expression for the Java value under us */
1: 		javaNode.generateExpression(acb, mb);
1: 
1: 		/* Generate the SQL value, which is always nullable */
0: 		acb.generateDataValue(mb, tc, field);
1: 
1: 		/*
1: 		** If there was a receiver, the return value will be the result
1: 		** of the ?: operator.
1: 		*/
1: 		if (hasReceiver)
1: 		{
1: 			mb.completeConditional();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode for
1: 	 * how tree printing is supposed to work.
1: 	 *
1: 	 * @param depth		The depth of this node in the tree
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
0: 	public void printSubNodes(int depth)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			super.printSubNodes(depth);
1: 
1: 			printLabel(depth, "javaNode: ");
1: 			javaNode.treePrint(depth + 1);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the JavaValueNode that lives under this JavaToSQLValueNode.
1: 	 *
1: 	 * @return	The JavaValueNode that lives under this node.
1: 	 */
1: 
0: 	public JavaValueNode getJavaValueNode()
1: 	{
1: 		return javaNode;
1: 	}
1: 
1: 	/**
1: 	 * Bind this expression.  This means binding the sub-expressions,
1: 	 * as well as figuring out what the return type is for this expression.
1: 	 *
1: 	 * @param fromList		The FROM list for the query this
1: 	 *				expression is in, for binding columns.
1: 	 * @param subqueryList		The subquery list being built as we find
1: 	 *							SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector) 
1: 			throws StandardException
1: 	{
1: 		// method invocations are not allowed in ADD TABLE clauses.
1: 		// And neither are field references. 
1: 		javaNode.checkReliability(this);
1: 
1: 		/* Bind the expression under us */
0: 		javaNode = javaNode.bindExpression(fromList, subqueryList, aggregateVector);
1: 
0: 		DataTypeDescriptor dts = DataTypeDescriptor.getSQLDataTypeDescriptor(javaNode.getJavaTypeName());
1: 		if (dts == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_NO_CORRESPONDING_S_Q_L_TYPE, 
1: 				javaNode.getJavaTypeName());
1: 		}
1: 
0: 		setType(dts);
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Remap all ColumnReferences in this tree to be clones of the
1: 	 * underlying expression.
1: 	 *
1: 	 * @return ValueNode			The remapped expression tree.
1: 	 *
1: 	 * @exception StandardException			Thrown on error
1: 	 */
0: 	public ValueNode remapColumnReferencesToExpressions()
1: 		throws StandardException
1: 	{
1: 		javaNode = javaNode.remapColumnReferencesToExpressions();
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Categorize this predicate.  Initially, this means
1: 	 * building a bit map of the referenced tables for each predicate.
1: 	 * If the source of this ColumnReference (at the next underlying level) 
1: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1: 	 * will not be pushed down.
1: 	 *
1: 	 * For example, in:
1: 	 *		select * from (select 1 from s) a (x) where x = 1
1: 	 * we will not push down x = 1.
1: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1: 	 * that tree into the pushed predicate, and that tree could contain
1: 	 * subqueries and method calls.
1: 	 *
1: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1: 	 * @param simplePredsOnly	Whether or not to consider method
1: 	 *							calls, field references and conditional nodes
1: 	 *							when building bit map
1: 	 *
1: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1: 	 *						or a VirtualColumnNode.
1: 	 *
1: 	 * @exception StandardException			Thrown on error
1: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1: 		throws StandardException
1: 	{
1: 		return javaNode.categorize(referencedTabs, simplePredsOnly);
1: 	}
1: 
1: 	/**
1: 	 * Return the variant type for the underlying expression.
1: 	 * The variant type can be:
1: 	 *		VARIANT				- variant within a scan
1: 	 *							  (method calls and non-static field access)
1: 	 *		SCAN_INVARIANT		- invariant within a scan
1: 	 *							  (column references from outer tables)
1: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1: 	 *							  (constant expressions)
1: 	 *
1: 	 * @return	The variant type for the underlying expression.
1: 	 * @exception StandardException	thrown on error
1: 	 */
1: 	protected int getOrderableVariantType() throws StandardException
1: 	{
1: 		return javaNode.getOrderableVariantType();
1: 	}
1: 
1: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
1: 	 * 
1: 	 * @param v the visitor
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	public Visitable accept(Visitor v) 
1: 		throws StandardException
1: 	{
0: 		Visitable returnNode = v.visit(this);
1: 	
0: 		if (v.skipChildren(this))
1: 		{
0: 			return returnNode;
1: 		}
1: 
0: 		if (javaNode != null && !v.stopTraversal())
1: 		{
1: 			javaNode = (JavaValueNode)javaNode.accept(v);
1: 		}
1: 		
0: 		return returnNode;
1: 	}
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:72abc72
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
0:                 // For functions returning string types we should set the collation to match the 
0:                 // java method's schema DERBY-2972. This is propogated from 
0:                 // RoutineAliasInfo to javaNode.
0:                        if (dts.getTypeId().isStringTypeId()){                           
0:                            dts.setCollationType(javaNode.getCollationType());
0:                            dts.setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
0:                        }
0:          
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
1: 			acb.generateNullWithExpress(mb, getTypeCompiler(), 
1: 					getTypeServices().getCollationType());
/////////////////////////////////////////////////////////////////////////
1: 		acb.generateDataValue(mb, tc, 
1: 				getTypeServices().getCollationType(), field);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b3bf9ca
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.lang.reflect.Modifier;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This node type converts a value from the Java domain to the SQL domain.
0:  */
0: 
0: public class JavaToSQLValueNode extends ValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	JavaValueNode	javaNode;
0: 
0: 	/**
0: 	 * Initializer for a JavaToSQLValueNode
0: 	 *
0: 	 * @param value		The Java value to convert to the SQL domain
0: 	 */
0: 	public void init(Object value)
0: 	{
0: 		this.javaNode = (JavaValueNode) value;
0: 	}
0: 
0: 	/**
0: 	 * Set the clause that this node appears in.
0: 	 *
0: 	 * @param clause	The clause that this node appears in.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setClause(int clause)
0: 	{
0: 		super.setClause(clause);
0: 		javaNode.setClause(clause);
0: 	}
0: 
0: 	/**
0: 	 * Preprocess an expression tree.  We do a number of transformations
0: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
0: 	 * subquery flattening.
0: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
0: 	 *
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode preprocess(int numTables,
0: 								FromList outerFromList,
0: 								SubqueryList outerSubqueryList,
0: 								PredicateList outerPredicateList) 
0: 						throws StandardException
0: 	{
0: 		javaNode.preprocess(numTables,
0: 							outerFromList, outerSubqueryList,
0: 							outerPredicateList);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Do code generation for this conversion of a value from the Java to
0: 	 * the SQL domain.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class we're generating
0: 	 * @param mb the method  the expression will go into
0: 	 *
0: 	 * @return	An expression to convert a value from the Java domain to
0: 	 *			the SQL domain.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 									throws StandardException
0: 	{
0: 		TypeId			resultType;
0: 		String						resultTypeName;
0: 
0: 		/*
0: 		** Tell the Java node that it's value is being returned to the
0: 		** SQL domain.  This way, it knows whether the checking for a null
0: 		** receiver is to be done at the Java level or the SQL level.
0: 		*/
0: 		javaNode.returnValueToSQLDomain();
0: 
0: 		/* Generate the receiver, if any. */
0: 		boolean hasReceiver = javaNode.generateReceiver(acb, mb);
0: 
0: 		/*
0: 		** If the java expression has a receiver, we want to check whether
0: 		** it's null before evaluating the whole expression (to avoid
0: 		** a NullPointerException.
0: 		*/
0: 		if (hasReceiver)
0: 		{
0: 			/*
0: 			** There is a receiver.  Generate a null SQL value to return
0: 			** in case the receiver is null.  First, create a field to hold
0: 			** the null SQL value.
0: 			*/
0: 			String nullValueClass = getTypeCompiler().interfaceName();
0: 			LocalField nullValueField =
0: 				acb.newFieldDeclaration(Modifier.PRIVATE, nullValueClass);
0: 			/*
0: 			** There is a receiver.  Generate the following to test
0: 			** for null:
0: 			**
0: 			**		(receiverExpression == null) ? 
0: 			*/
0: 
0: 			mb.conditionalIfNull();
0: 			mb.getField(nullValueField);
0: 			acb.generateNullWithExpress(mb, getTypeCompiler());
0: 
0: 
0: 			/*
0: 			** We have now generated the expression to test, and the
0: 			** "true" side of the ?: operator.  Finish the "true" side
0: 			** so we can generate the "false" side.
0: 			*/
0: 			mb.startElseCode();
0: 		}
0: 		
0: 		resultType = getTypeId();
0: 		TypeCompiler tc = getTypeCompiler();
0: 
0: 		resultTypeName = tc.interfaceName();
0: 
0: 		/* Allocate an object for re-use to hold the result of the conversion */
0: 		LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
0: 
0: 		/* Generate the expression for the Java value under us */
0: 		javaNode.generateExpression(acb, mb);
0: 
0: 		/* Generate the SQL value, which is always nullable */
0: 		acb.generateDataValue(mb, tc, field);
0: 
0: 		/*
0: 		** If there was a receiver, the return value will be the result
0: 		** of the ?: operator.
0: 		*/
0: 		if (hasReceiver)
0: 		{
0: 			mb.completeConditional();
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Prints the sub-nodes of this object.  See QueryTreeNode for
0: 	 * how tree printing is supposed to work.
0: 	 *
0: 	 * @param depth		The depth of this node in the tree
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	public void printSubNodes(int depth)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			super.printSubNodes(depth);
0: 
0: 			printLabel(depth, "javaNode: ");
0: 			javaNode.treePrint(depth + 1);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the JavaValueNode that lives under this JavaToSQLValueNode.
0: 	 *
0: 	 * @return	The JavaValueNode that lives under this node.
0: 	 */
0: 
0: 	public JavaValueNode getJavaValueNode()
0: 	{
0: 		return javaNode;
0: 	}
0: 
0: 	/**
0: 	 * Bind this expression.  This means binding the sub-expressions,
0: 	 * as well as figuring out what the return type is for this expression.
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find
0: 	 *							SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector) 
0: 			throws StandardException
0: 	{
0: 		// method invocations are not allowed in ADD TABLE clauses.
0: 		// And neither are field references. 
0: 		javaNode.checkReliability(this);
0: 
0: 		/* Bind the expression under us */
0: 		javaNode = javaNode.bindExpression(fromList, subqueryList, aggregateVector);
0: 
0: 		DataTypeDescriptor dts = DataTypeDescriptor.getSQLDataTypeDescriptor(javaNode.getJavaTypeName());
0: 		if (dts == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_NO_CORRESPONDING_S_Q_L_TYPE, 
0: 				javaNode.getJavaTypeName());
0: 		}
0: 
0: 		setType(dts);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Remap all ColumnReferences in this tree to be clones of the
0: 	 * underlying expression.
0: 	 *
0: 	 * @return ValueNode			The remapped expression tree.
0: 	 *
0: 	 * @exception StandardException			Thrown on error
0: 	 */
0: 	public ValueNode remapColumnReferencesToExpressions()
0: 		throws StandardException
0: 	{
0: 		javaNode = javaNode.remapColumnReferencesToExpressions();
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Categorize this predicate.  Initially, this means
0: 	 * building a bit map of the referenced tables for each predicate.
0: 	 * If the source of this ColumnReference (at the next underlying level) 
0: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
0: 	 * will not be pushed down.
0: 	 *
0: 	 * For example, in:
0: 	 *		select * from (select 1 from s) a (x) where x = 1
0: 	 * we will not push down x = 1.
0: 	 * NOTE: It would be easy to handle the case of a constant, but if the
0: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
0: 	 * that tree into the pushed predicate, and that tree could contain
0: 	 * subqueries and method calls.
0: 	 *
0: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
0: 	 * @param simplePredsOnly	Whether or not to consider method
0: 	 *							calls, field references and conditional nodes
0: 	 *							when building bit map
0: 	 *
0: 	 * @return boolean		Whether or not source.expression is a ColumnReference
0: 	 *						or a VirtualColumnNode.
0: 	 *
0: 	 * @exception StandardException			Thrown on error
0: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
0: 		throws StandardException
0: 	{
0: 		return javaNode.categorize(referencedTabs, simplePredsOnly);
0: 	}
0: 
0: 	/**
0: 	 * Return the variant type for the underlying expression.
0: 	 * The variant type can be:
0: 	 *		VARIANT				- variant within a scan
0: 	 *							  (method calls and non-static field access)
0: 	 *		SCAN_INVARIANT		- invariant within a scan
0: 	 *							  (column references from outer tables)
0: 	 *		QUERY_INVARIANT		- invariant within the life of a query
0: 	 *							  (constant expressions)
0: 	 *
0: 	 * @return	The variant type for the underlying expression.
0: 	 * @exception StandardException	thrown on error
0: 	 */
0: 	protected int getOrderableVariantType() throws StandardException
0: 	{
0: 		return javaNode.getOrderableVariantType();
0: 	}
0: 
0: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
0: 	 * 
0: 	 * @param v the visitor
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public Visitable accept(Visitor v) 
0: 		throws StandardException
0: 	{
0: 		Visitable returnNode = v.visit(this);
0: 	
0: 		if (v.skipChildren(this))
0: 		{
0: 			return returnNode;
0: 		}
0: 
0: 		if (javaNode != null && !v.stopTraversal())
0: 		{
0: 			javaNode = (JavaValueNode)javaNode.accept(v);
0: 		}
0: 		
0: 		return returnNode;
0: 	}
0: }
============================================================================