1:85e3e12: /*
1:85e3e12:  * Derby - Class org.apache.derby.iapi.services.locks.LockOwner
1:85e3e12:  *
1:85e3e12:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:85e3e12:  * contributor license agreements.  See the NOTICE file distributed with
1:85e3e12:  * this work for additional information regarding copyright ownership.
1:85e3e12:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:85e3e12:  * (the "License"); you may not use this file except in compliance with
1:85e3e12:  * the License.  You may obtain a copy of the License at
1:85e3e12:  *
1:85e3e12:  * http://www.apache.org/licenses/LICENSE-2.0
1:85e3e12:  *
1:85e3e12:  * Unless required by applicable law or agreed to in writing, software
1:85e3e12:  * distributed under the License is distributed on an "AS IS" BASIS,
1:85e3e12:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:85e3e12:  * See the License for the specific language governing permissions and
1:85e3e12:  * limitations under the License.
1:85e3e12:  */
1:85e3e12: 
1:85e3e12: package org.apache.derby.iapi.services.locks;
1:85e3e12: 
1:85e3e12: /**
1:85e3e12:  * Interface for classes that represent an owner of the locks within a
1:85e3e12:  * compatibility space.
1:85e3e12:  */
1:85e3e12: public interface LockOwner {
1:85e3e12:     /**
1:85e3e12:      * Tells whether lock requests should time out immediately if the lock
1:85e3e12:      * cannot be granted at once, even if {@code C_LockFactory.TIMED_WAIT}
1:85e3e12:      * was specified in the lock request.
1:85e3e12:      *
1:5431e03:      * <p>
1:5431e03:      *
1:5431e03:      * Normally, this method should return {@code false}, but in some very
1:5431e03:      * special cases it could be appropriate to return {@code true}. One
1:5431e03:      * example is when a stored prepared statement (SPS) is compiled and stored
1:5431e03:      * in a system table. In order to prevent exclusive locks in the system
1:5431e03:      * table from being held until the transaction that triggered the
1:5431e03:      * compilation is finished, the SPS will be compiled in a nested
1:5431e03:      * transaction that is committed and releases all locks upon completion.
1:5431e03:      * There is however a risk that the transaction that triggered the
1:5431e03:      * compilation is holding locks that the nested transaction needs, in
1:5431e03:      * which case the nested transaction will time out. The timeout will be
1:5431e03:      * detected by the calling code, and the operation will be retried in the
1:5431e03:      * parent transaction. To avoid long waits in the cases where the nested
1:5431e03:      * transaction runs into a lock conflict with its parent, the nested
1:5431e03:      * transaction's {@code LockOwner} instance could return {@code true} and
1:5431e03:      * thereby making it possible to detect lock conflicts instantly.
1:5431e03:      *
1:85e3e12:      * @return {@code true} if timed waits should time out immediately,
1:85e3e12:      * {@code false} otherwise
1:85e3e12:      */
1:85e3e12:     boolean noWait();
1:9819cf8: 
1:9819cf8: 
1:9819cf8:     /**
1:9819cf8:      * <p>
1:9819cf8:      * Return true if this is a nested owner, e.g., a nested user transaction.
1:9819cf8:      * </p>
1:9819cf8:      */
1:9819cf8:     public boolean isNestedOwner();
1:9819cf8: 
1:9819cf8:     /**
1:9819cf8:      * <p>
1:9819cf8:      * Return true if this owner nests under another owner.
1:9819cf8:      * </p>
1:9819cf8:      */
1:9819cf8:     public boolean nestsUnder( LockOwner other );
1:9819cf8: 
1:85e3e12: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9819cf8
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * <p>
1:      * Return true if this is a nested owner, e.g., a nested user transaction.
1:      * </p>
1:      */
1:     public boolean isNestedOwner();
1: 
1:     /**
1:      * <p>
1:      * Return true if this owner nests under another owner.
1:      * </p>
1:      */
1:     public boolean nestsUnder( LockOwner other );
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5431e03
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      *
1:      * Normally, this method should return {@code false}, but in some very
1:      * special cases it could be appropriate to return {@code true}. One
1:      * example is when a stored prepared statement (SPS) is compiled and stored
1:      * in a system table. In order to prevent exclusive locks in the system
1:      * table from being held until the transaction that triggered the
1:      * compilation is finished, the SPS will be compiled in a nested
1:      * transaction that is committed and releases all locks upon completion.
1:      * There is however a risk that the transaction that triggered the
1:      * compilation is holding locks that the nested transaction needs, in
1:      * which case the nested transaction will time out. The timeout will be
1:      * detected by the calling code, and the operation will be retried in the
1:      * parent transaction. To avoid long waits in the cases where the nested
1:      * transaction runs into a lock conflict with its parent, the nested
1:      * transaction's {@code LockOwner} instance could return {@code true} and
1:      * thereby making it possible to detect lock conflicts instantly.
1:      *
commit:85e3e12
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derby.iapi.services.locks.LockOwner
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to you under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.derby.iapi.services.locks;
1: 
1: /**
1:  * Interface for classes that represent an owner of the locks within a
1:  * compatibility space.
1:  */
1: public interface LockOwner {
1:     /**
1:      * Tells whether lock requests should time out immediately if the lock
1:      * cannot be granted at once, even if {@code C_LockFactory.TIMED_WAIT}
1:      * was specified in the lock request.
1:      *
1:      * @return {@code true} if timed waits should time out immediately,
1:      * {@code false} otherwise
1:      */
1:     boolean noWait();
1: }
============================================================================