1:9df6409: /*
1:a3acaa5:  *
1:1e0e0ca:  * Derby - Class org.apache.derbyTesting.junit.Utilities
1:48154b2:  *
1:9df6409:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9df6409:  * contributor license agreements.  See the NOTICE file distributed with
1:9df6409:  * this work for additional information regarding copyright ownership.
1:9df6409:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9df6409:  * (the "License"); you may not use this file except in compliance with
1:9df6409:  * the License.  You may obtain a copy of the License at
2:9df6409:  *
1:9df6409:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9df6409:  *
1:9df6409:  * Unless required by applicable law or agreed to in writing, 
1:9df6409:  * software distributed under the License is distributed on an 
1:9df6409:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:9df6409:  * either express or implied. See the License for the specific 
1:9df6409:  * language governing permissions and limitations under the License.
3:9df6409:  */
1:9df6409: package org.apache.derbyTesting.junit;
2:65eb19a: 
1:d7b5f4a: import java.io.BufferedReader;
1:d7b5f4a: import java.io.ByteArrayInputStream;
1:d7b5f4a: import java.io.ByteArrayOutputStream;
1:d7b5f4a: import java.io.InputStreamReader;
1:d7b5f4a: import java.io.PrintWriter;
1:d7b5f4a: import java.io.StringReader;
1:9df6409: import java.io.UnsupportedEncodingException;
1:48154b2: import java.sql.ResultSet;
1:48154b2: import java.sql.ResultSetMetaData;
1:48154b2: import java.sql.SQLException;
1:1e0e0ca: import java.util.Arrays;
1:c33b0cf: import java.util.StringTokenizer;
1:65eb19a: 
1:1e0e0ca: import junit.framework.Assert;
1:65eb19a: 
1:a3acaa5: /**
1:1e0e0ca:  * General non-JDBC related utilities.
1:1e0e0ca:  * Some of these were relocated from TestUtil.
1:48154b2:  */
1:9df6409: public class Utilities {
1:65eb19a: 
1:cf2526e:     /** The newline character(s). */
1:cf2526e:     public static final String NL;
1:cf2526e:     static {
1:cf2526e:         NL = BaseTestCase.getSystemProperty("line.separator");
1:cf2526e:     }
1:cf2526e: 
1:1e0e0ca:     private Utilities() { }
1:1e0e0ca: 
1:1e0e0ca:     /**
1:1e0e0ca:      * Converts a string to a hex literal to assist in converting test
1:1e0e0ca:      * cases that used to insert strings into bit data tables.
1:1e0e0ca:      * <p>
1:1e0e0ca:      * Converts using UTF-16BE just like the old casts used to.
1:1e0e0ca:      *
1:1e0e0ca:      * @param s string to convert
1:1e0e0ca:      * @return hex literal that can be inserted into a bit column.
1:1e0e0ca:      */
1:1e0e0ca:     public static String stringToHexLiteral(String s) {
1:1e0e0ca:         byte[] bytes;
1:1e0e0ca:         String hexLiteral = null;
1:1e0e0ca:         try {
1:1e0e0ca:             bytes = s.getBytes("UTF-16BE");
1:1e0e0ca:             hexLiteral = convertToHexString(bytes);
1:1e0e0ca:         } catch (UnsupportedEncodingException ue) {
1:1e0e0ca:             Assert.fail("Encoding UTF-16BE unavailable: " + ue.getMessage());
1:1e0e0ca:         }
1:1e0e0ca: 
1:1e0e0ca:         return hexLiteral;
1:48154b2:     }
1:65eb19a: 
1:1e0e0ca:     /**
1:1e0e0ca:      * Convert a byte array to a hex string suitable for insert.
1:1e0e0ca:      *
1:1e0e0ca:      * @param buf  byte array to convert
1:1e0e0ca:      * @return     formated string representing byte array
1:1e0e0ca:      */
1:1e0e0ca:     private static String convertToHexString(byte[] buf) {
1:1e0e0ca:         StringBuffer str = new StringBuffer();
1:1e0e0ca:         str.append("X'");
1:1e0e0ca:         String val;
1:1e0e0ca:         int byteVal;
1:1e0e0ca:         for (int i = 0; i < buf.length; i++) {
1:1e0e0ca:             byteVal = buf[i] & 0xff;
1:1e0e0ca:             val = Integer.toHexString(byteVal);
1:1e0e0ca:             if (val.length() < 2) {
1:1e0e0ca:                 str.append("0");
1:1e0e0ca:             }
1:1e0e0ca:             str.append(val);
7:9df6409:         }
1:1e0e0ca:         return str.toString() + "'";
1:1e0e0ca:     }
1:65eb19a: 
1:1e0e0ca:     /**
1:1e0e0ca:      * Creates a string with the specified length.
1:1e0e0ca:      * <p>
1:1e0e0ca:      * Called from various tests to test edge cases and such.
1:1e0e0ca:      *
1:1e0e0ca:      * @param c             character to repeat
1:1e0e0ca:      * @param repeatCount   Number of times to repeat character
1:1e0e0ca:      * @return              String of repeatCount characters c
1:1e0e0ca:      */
1:1e0e0ca:     public static String repeatChar(String c, int repeatCount) {
1:1e0e0ca:         char[] chArray = new char[repeatCount];
1:1e0e0ca:         Arrays.fill(chArray, c.charAt(0));
1:1e0e0ca:         return String.valueOf(chArray);
1:1e0e0ca:     }
1:65eb19a: 
1:1e0e0ca:     /**
1:1e0e0ca:      * Print out resultSet in two dimensional array format, for use by
1:1e0e0ca:      * JDBC.assertFullResultSet(rs,expectedRows) expectedRows argument.
1:1e0e0ca:      * Useful while converting tests to get output in correct format.
1:1e0e0ca:      *
1:1e0e0ca:      * @param rs result set to print
1:1e0e0ca:      * @throws SQLException if accessing the result set fails
1:1e0e0ca:      */
1:1e0e0ca:     public static void showResultSet(ResultSet rs) throws SQLException {
1:1e0e0ca:         System.out.print("{");
1:1e0e0ca:         int row = 0;
1:1e0e0ca:         boolean next = rs.next();
1:1e0e0ca:         while (next) {
1:1e0e0ca:             row++;
1:1e0e0ca:             ResultSetMetaData rsmd = rs.getMetaData();
1:1e0e0ca:             int nocols = rsmd.getColumnCount();
2:48154b2:             System.out.print("{");
1:1e0e0ca: 
1:1e0e0ca:             for (int i = 0; i < nocols; i++) {
1:1e0e0ca:                 String val = rs.getString(i + 1);
1:1e0e0ca:                 if (val == null) {
1:1e0e0ca:                     System.out.print("null");
2:1e0e0ca:                 } else {
1:1e0e0ca:                     System.out.print("\"" + rs.getString(i + 1) + "\"");
1:a3acaa5:                 }
1:1e0e0ca:                 if (i == (nocols - 1)) {
1:1e0e0ca:                     System.out.print("}");
1:1e0e0ca:                 } else {
1:1e0e0ca:                     System.out.print(",");
1:1e0e0ca:                 }
1:1e0e0ca: 
1:1e0e0ca:             }
1:1e0e0ca:             next = rs.next();
1:1e0e0ca: 
1:1e0e0ca:             if (next) {
1:1e0e0ca:                 System.out.println(",");
1:3fe2281:             } 
1:a3acaa5:         }
1:1e0e0ca:         System.out.println("};\n");
1:1e0e0ca:     }
1:1e0e0ca: 
1:65eb19a:     /**
1:1e0e0ca:      * Calls the public method {@code getInfo} of the sysinfo tool within
1:1e0e0ca:      * this JVM and returns a {@code BufferedReader} for reading its
1:d7b5f4a:      * output. This is useful for obtaining system information that could be 
1:d7b5f4a:      * used to verify, for example, values returned by Derby MBeans.
1:65eb19a:      * 
1:d7b5f4a:      * @return a buffering character-input stream containing the output from
1:d7b5f4a:      *         sysinfo
1:d7b5f4a:      * @see org.apache.derby.tools.sysinfo#getInfo(java.io.PrintWriter out)
1:65eb19a:      */
1:d7b5f4a:     public static BufferedReader getSysinfoLocally() {
1:d7b5f4a:         ByteArrayOutputStream byteStream = new ByteArrayOutputStream(20 * 1024);
1:d7b5f4a:         PrintWriter pw = new PrintWriter(byteStream, true); // autoflush
1:d7b5f4a:         org.apache.derby.tools.sysinfo.getInfo(pw);
1:d7b5f4a:         pw.flush();
1:d7b5f4a:         pw.close();
1:d7b5f4a:         byte[] outBytes = byteStream.toByteArray();
1:d7b5f4a:         BufferedReader sysinfoOutput = new BufferedReader(
1:1e0e0ca:                 new InputStreamReader(
1:1e0e0ca:                 new ByteArrayInputStream(outBytes)));
1:d7b5f4a:         return sysinfoOutput;
1:65eb19a:     }
1:1e0e0ca: 
1:48154b2:     /**
1:1e0e0ca:      * <p>Calls the public method {@code getSysInfo} of the Network
1:d7b5f4a:      * Server instance associated with the current test configuration and 
1:d7b5f4a:      * returns the result as a BufferedReader, making it easy to analyse the 
1:d7b5f4a:      * output line by line.</p>
1:9df6409:      * 
1:d7b5f4a:      * <p>This is useful for obtaining system information that could be 
1:d7b5f4a:      * used to verify, for example, values returned by Derby MBeans.</p>
1:9df6409:      * 
1:d7b5f4a:      * @return a buffering character-input stream containing the output from 
1:d7b5f4a:      *         the server's sysinfo.
1:d7b5f4a:      * @see org.apache.derby.drda.NetworkServerControl#getSysinfo()
1:a3acaa5:      */
1:d7b5f4a:     public static BufferedReader getSysinfoFromServer() throws Exception {
1:1e0e0ca: 
1:d7b5f4a:         return new BufferedReader(new StringReader(
1:d7b5f4a:                 NetworkServerTestSetup.getNetworkServerControl().getSysinfo()));
1:65eb19a:     }
1:1e0e0ca: 
3:9df6409:     /**
1:c33b0cf:      * Splits a string around matches of the given delimiter character.
1:c33b0cf:      * Copied from org.apache.derby.iapi.util.StringUtil
1:9df6409:      *
1:c33b0cf:      * Where applicable, this method can be used as a substitute for
1:1e0e0ca:      * {@code String.split(String regex)}, which is not available
1:c33b0cf:      * on a JSR169/Java ME platform.
1:9df6409:      *
1:c33b0cf:      * @param str the string to be split
1:c33b0cf:      * @param delim the delimiter
1:c33b0cf:      * @throws NullPointerException if str is null
1:9df6409:      */
1:1e0e0ca:     public static String[] split(String str, char delim) {
1:c33b0cf:         // Note the javadoc on StringTokenizer:
1:c33b0cf:         //     StringTokenizer is a legacy class that is retained for
1:c33b0cf:         //     compatibility reasons although its use is discouraged in
1:c33b0cf:         //     new code.
1:c33b0cf:         // In other words, if StringTokenizer is ever removed from the JDK,
1:c33b0cf:         // we need to have a look at String.split() (or java.util.regex)
1:c33b0cf:         // if it is supported on a JSR169/Java ME platform by then.
1:c33b0cf:         StringTokenizer st = new StringTokenizer(str, String.valueOf(delim));
1:c33b0cf:         int n = st.countTokens();
1:c33b0cf:         String[] s = new String[n];
1:c33b0cf:         for (int i = 0; i < n; i++) {
1:c33b0cf:             s[i] = st.nextToken();
1:65eb19a:         }
1:c33b0cf:         return s;
1:48154b2:     }
1:65eb19a: 
1:1e0e0ca:     /**
1:1e0e0ca:      * Sleeps the specified number of milliseconds.
1:1e0e0ca:      *
1:1e0e0ca:      * @param millis sleep duration
1:1e0e0ca:      */
1:1e0e0ca:     public static void sleep(long millis) {
1:1e0e0ca:         long started = System.currentTimeMillis();
1:1e0e0ca:         long waited = 0;
1:1e0e0ca:         while (waited < millis) {
1:1e0e0ca:             try {
1:1e0e0ca:                 Thread.sleep(millis - waited);
1:1e0e0ca:             } catch (InterruptedException ie) {
1:1e0e0ca:                 Thread.currentThread().interrupt();
1:1e0e0ca:             }
1:1e0e0ca:             waited = System.currentTimeMillis() - started;
1:1e0e0ca:         }
1:1e0e0ca:     }
1:3983707: 
1:3983707:     /**
1:3983707:      * Function to eliminate known package prefixes given a class full path
1:3983707:      * 
1:3983707:      * @param test
1:3983707:      *            class name prefixed with package
1:3983707:      */
1:e7b124d:     public static String formatTestClassNames(String test) {
1:3983707:         final String COMMON_FUNCTIONTEST_PREFIX = "org.apache.derbyTesting.functionTests.tests.";
1:3983707:         final String COMMON_TEST_PREFIX = "org.apache.derbyTesting.";
1:e7b124d:         if (test.startsWith(COMMON_FUNCTIONTEST_PREFIX)) {
1:e7b124d:             return test.substring(COMMON_FUNCTIONTEST_PREFIX.length());
1:e7b124d:         } else if (test.startsWith(COMMON_TEST_PREFIX)) {
1:e7b124d:             return test.substring(COMMON_TEST_PREFIX.length());
1:3983707:         } else {
1:e7b124d:             return test;
1:3983707:         }
1:3983707:     }
1:48154b2: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cf2526e
/////////////////////////////////////////////////////////////////////////
1:     /** The newline character(s). */
1:     public static final String NL;
1:     static {
1:         NL = BaseTestCase.getSystemProperty("line.separator");
1:     }
1: 
commit:e7b124d
/////////////////////////////////////////////////////////////////////////
1:     public static String formatTestClassNames(String test) {
1:         if (test.startsWith(COMMON_FUNCTIONTEST_PREFIX)) {
1:             return test.substring(COMMON_FUNCTIONTEST_PREFIX.length());
1:         } else if (test.startsWith(COMMON_TEST_PREFIX)) {
1:             return test.substring(COMMON_TEST_PREFIX.length());
1:             return test;
commit:3983707
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Function to eliminate known package prefixes given a class full path
1:      * 
1:      * @param test
1:      *            class name prefixed with package
1:      */
0:     public static String formatTestClassNames(String mainString) {
1:         final String COMMON_FUNCTIONTEST_PREFIX = "org.apache.derbyTesting.functionTests.tests.";
1:         final String COMMON_TEST_PREFIX = "org.apache.derbyTesting.";
0:         if (mainString.startsWith(COMMON_FUNCTIONTEST_PREFIX)) {
0:             return mainString.substring(COMMON_FUNCTIONTEST_PREFIX.length());
0:         } else if (mainString.startsWith(COMMON_TEST_PREFIX)) {
0:             return mainString.substring(COMMON_TEST_PREFIX.length());
1:         } else {
0:             return mainString;
1:         }
1:     }
commit:1e0e0ca
/////////////////////////////////////////////////////////////////////////
1:  * Derby - Class org.apache.derbyTesting.junit.Utilities
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import junit.framework.Assert;
1:  * General non-JDBC related utilities.
1:  * Some of these were relocated from TestUtil.
1:     private Utilities() { }
1: 
1:     /**
1:      * Converts a string to a hex literal to assist in converting test
1:      * cases that used to insert strings into bit data tables.
1:      * <p>
1:      * Converts using UTF-16BE just like the old casts used to.
1:      *
1:      * @param s string to convert
1:      * @return hex literal that can be inserted into a bit column.
1:      */
1:     public static String stringToHexLiteral(String s) {
1:         byte[] bytes;
1:         String hexLiteral = null;
1:         try {
1:             bytes = s.getBytes("UTF-16BE");
1:             hexLiteral = convertToHexString(bytes);
1:         } catch (UnsupportedEncodingException ue) {
1:             Assert.fail("Encoding UTF-16BE unavailable: " + ue.getMessage());
1:         }
1: 
1:         return hexLiteral;
1:     /**
1:      * Convert a byte array to a hex string suitable for insert.
1:      *
1:      * @param buf  byte array to convert
1:      * @return     formated string representing byte array
1:      */
1:     private static String convertToHexString(byte[] buf) {
1:         StringBuffer str = new StringBuffer();
1:         str.append("X'");
1:         String val;
1:         int byteVal;
1:         for (int i = 0; i < buf.length; i++) {
1:             byteVal = buf[i] & 0xff;
1:             val = Integer.toHexString(byteVal);
1:             if (val.length() < 2) {
1:                 str.append("0");
1:             }
1:             str.append(val);
1:         return str.toString() + "'";
1:     }
1:     /**
1:      * Creates a string with the specified length.
1:      * <p>
1:      * Called from various tests to test edge cases and such.
1:      *
1:      * @param c             character to repeat
1:      * @param repeatCount   Number of times to repeat character
1:      * @return              String of repeatCount characters c
1:      */
1:     public static String repeatChar(String c, int repeatCount) {
1:         char[] chArray = new char[repeatCount];
1:         Arrays.fill(chArray, c.charAt(0));
1:         return String.valueOf(chArray);
1:     }
1:     /**
1:      * Print out resultSet in two dimensional array format, for use by
1:      * JDBC.assertFullResultSet(rs,expectedRows) expectedRows argument.
1:      * Useful while converting tests to get output in correct format.
1:      *
1:      * @param rs result set to print
1:      * @throws SQLException if accessing the result set fails
1:      */
1:     public static void showResultSet(ResultSet rs) throws SQLException {
1:         System.out.print("{");
1:         int row = 0;
1:         boolean next = rs.next();
1:         while (next) {
1:             row++;
1:             ResultSetMetaData rsmd = rs.getMetaData();
1:             int nocols = rsmd.getColumnCount();
1: 
1:             for (int i = 0; i < nocols; i++) {
1:                 String val = rs.getString(i + 1);
1:                 if (val == null) {
1:                     System.out.print("null");
1:                 } else {
1:                     System.out.print("\"" + rs.getString(i + 1) + "\"");
1:                 if (i == (nocols - 1)) {
1:                     System.out.print("}");
1:                 } else {
1:                     System.out.print(",");
1:                 }
1: 
1:             }
1:             next = rs.next();
1: 
1:             if (next) {
1:                 System.out.println(",");
1:             } else {
1:                 System.out.println("};\n");
1:     }
1: 
1:      * Calls the public method {@code getInfo} of the sysinfo tool within
1:      * this JVM and returns a {@code BufferedReader} for reading its
/////////////////////////////////////////////////////////////////////////
1:                 new InputStreamReader(
1:                 new ByteArrayInputStream(outBytes)));
1: 
1:      * <p>Calls the public method {@code getSysInfo} of the Network
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      * {@code String.split(String regex)}, which is not available
1:     public static String[] split(String str, char delim) {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sleeps the specified number of milliseconds.
1:      *
1:      * @param millis sleep duration
1:      */
1:     public static void sleep(long millis) {
1:         long started = System.currentTimeMillis();
1:         long waited = 0;
1:         while (waited < millis) {
1:             try {
1:                 Thread.sleep(millis - waited);
1:             } catch (InterruptedException ie) {
1:                 Thread.currentThread().interrupt();
1:             }
1:             waited = System.currentTimeMillis() - started;
1:         }
1:     }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:3fe2281
/////////////////////////////////////////////////////////////////////////
1:             } 
0:         System.out.println("};\n");
commit:65eb19a
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
0: import java.security.PrivilegedActionException;
0: import java.security.PrivilegedExceptionAction;
0: import junit.framework.Assert;
1: 
/////////////////////////////////////////////////////////////////////////
1:         }
1:         /**
0:          * Execute a java command and check for the appropriate exit code.
0:          * return an InputStream 
0:          * @param args
0:          * @param expectedExitCode
1:          * 
0:          * @throws InterruptedException
1:          */
0:         public static InputStream execJavaCmd(String[] args, int expectedExitCode) throws IOException, InterruptedException {
0:             InputStream is = null;
1:             
0:             int totalSize = 3 + args.length;
0:             String[] cmd = new String[totalSize];
0:             cmd[0] = "java";
0:             cmd[1] = "-classpath";
0:             cmd[2] = BaseTestCase.getSystemProperty("java.class.path");
1:                     
0:             System.arraycopy(args, 0, cmd, 3, args.length);
1:             
0:             final String[] command = cmd;
0:             Process pr = null;
0:             try {
0:                 pr = (Process) AccessController
0:                     .doPrivileged(new PrivilegedExceptionAction() {
0:                         public Object run() throws IOException {
0:                             Process result = null;
1:         
0:                                 result = Runtime.getRuntime().exec(command);
1:         
0:                             return result;
1:                         }
0:                     });
0:             } catch (PrivilegedActionException pe) {
0:                 Exception e = pe.getException();
0:                 if (e instanceof IOException)
0:                     throw (IOException) e;
0:                 else
0:                     throw (SecurityException) e;
1:             }
0:             is = pr.getInputStream();
1:         
0:             // wait until the process exits
0:             pr.waitFor();
1:         
0:             Assert.assertEquals(expectedExitCode,pr.exitValue());
1:             
0:             return is;
commit:50b185e
/////////////////////////////////////////////////////////////////////////
0:                 	String val = rs.getString(i+1);
0:                 	if (val == null)
0:                 		System.out.print("null");
0:                 	else
0:                 		System.out.print("\"" + rs.getString(i+1) + "\"");
/////////////////////////////////////////////////////////////////////////
0:                     System.out.println("};\n");
commit:a3acaa5
/////////////////////////////////////////////////////////////////////////
1:     	/**
0:     	 * repeatChar is used to create strings of varying lengths.
0:     	 * called from various tests to test edge cases and such.
1:     	 *
0:     	 * @param c             character to repeat
0:     	 * @param repeatCount   Number of times to repeat character
0:     	 * @return              String of repeatCount characters c
1:     	 */
0:        public static String repeatChar(String c, int repeatCount)
0:        {
0:     	   char ch = c.charAt(0);
0: 
0:     	   char[] chArray = new char[repeatCount];
0:     	   for (int i = 0; i < repeatCount; i++)
0:     	   {
0:     		   chArray[i] = ch;
1:     	   }
0: 
0:     	   return new String(chArray);
0: 
1:        }
commit:48154b2
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
/////////////////////////////////////////////////////////////////////////
1:         /**
0:          * Print out resultSet in two dimensional array format, for use by
0:          * JDBC.assertFullResultSet(rs,expectedRows) expectedRows argument.
0:          * Useful while converting tests to get output in correct format.
1:          * 
0:          * @param rs
0:          * @throws SQLException
1:          */
0:         public static void showResultSet(ResultSet rs) throws SQLException {
1:             System.out.print("{");
0:             int row = 0;
0:             boolean next = rs.next();
0:             while (next) {
0:                 row++;
0:                 ResultSetMetaData rsmd = rs.getMetaData();
0:                 int nocols = rsmd.getColumnCount();
1:                 System.out.print("{");
0:                 
0:                 for (int i = 0; i < nocols; i++)
0:                 {
0:                     System.out.print("\"" + rs.getString(i+1) + "\"");
0:                     if (i == (nocols -1))
0:                         System.out.print("}");
0:                     else
0:                         System.out.print(",");
0:                            
1:                 }
0:                 next = rs.next();
0:                    
0:                 if (next)
0:                     System.out.println(",");
0:                 else
0:                     System.out.println("};");
1:             }
1:         }       
commit:9df6409
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
0:  * Derby - Class Utilities
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
0: 
1: import java.io.UnsupportedEncodingException;
0: 
1: /**
0:  * General non-JDBC related utilities relocated from TestUtil
1:  *
1:  *
1:  */
1: public class Utilities {
0: 
0:     public Utilities() {
0:         // TODO Auto-generated constructor stub
1:     }
1:         /**
0:          * Just converts a string to a hex literal to assist in converting test
0:          * cases that used to insert strings into bit data tables
0:          * Converts using UTF-16BE just like the old casts used to.
1:          *
0:          * @param s  String to convert  (e.g
0:          * @return hex literal that can be inserted into a bit column.
1:          */
0:         public static String stringToHexLiteral(String s)
0:         {
0:                 byte[] bytes;
0:                 String hexLiteral = null;
0:                 try {
0:                         bytes = s.getBytes("UTF-16BE");
0:                         hexLiteral = convertToHexString(bytes);
1:                 }
0:                 catch (UnsupportedEncodingException ue)
0:                 {
0:                         System.out.println("This shouldn't happen as UTF-16BE should be supported");
0:                         ue.printStackTrace();
1:                 }
0: 
0:                 return hexLiteral;
1:         }
0: 
1:         /**
0:          * Convert a byte array to a hex string suitable for insert 
0:          * @param buf  byte array to convert
0:          * @return     formated string representing byte array
1:          */
0:         private static String convertToHexString(byte [] buf)
0:         {
0:                 StringBuffer str = new StringBuffer();
0:                 str.append("X'");
0:                 String val;
0:                 int byteVal;
0:                 for (int i = 0; i < buf.length; i++)
0:                 {
0:                         byteVal = buf[i] & 0xff;
0:                         val = Integer.toHexString(byteVal);
0:                         if (val.length() < 2)
0:                                 str.append("0");
0:                         str.append(val);
1:                 }
0:                 return str.toString() +"'";
1:         }
0: 
0: 
0: 
1: }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:c33b0cf
/////////////////////////////////////////////////////////////////////////
1: import java.util.StringTokenizer;
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * Splits a string around matches of the given delimiter character.
1:      * Copied from org.apache.derby.iapi.util.StringUtil
0:      *
1:      * Where applicable, this method can be used as a substitute for
0:      * <code>String.split(String regex)</code>, which is not available
1:      * on a JSR169/Java ME platform.
0:      *
1:      * @param str the string to be split
1:      * @param delim the delimiter
1:      * @throws NullPointerException if str is null
0:      */
0:     static public String[] split(String str, char delim)
0:     {
0:         if (str == null) {
0:             throw new NullPointerException("str can't be null");
0:         }
0: 
1:         // Note the javadoc on StringTokenizer:
1:         //     StringTokenizer is a legacy class that is retained for
1:         //     compatibility reasons although its use is discouraged in
1:         //     new code.
1:         // In other words, if StringTokenizer is ever removed from the JDK,
1:         // we need to have a look at String.split() (or java.util.regex)
1:         // if it is supported on a JSR169/Java ME platform by then.
1:         StringTokenizer st = new StringTokenizer(str, String.valueOf(delim));
1:         int n = st.countTokens();
1:         String[] s = new String[n];
1:         for (int i = 0; i < n; i++) {
1:             s[i] = st.nextToken();
0:         }
1:         return s;
0:     }
commit:63c65ac
/////////////////////////////////////////////////////////////////////////
commit:0c8f7b8
/////////////////////////////////////////////////////////////////////////
0:          * Execute a java command and return the process.
0:          * The caller should decide what to do with the process, if anything,
0:          * typical activities would be to do a pr.waitFor, or to
0:          * get a getInputStream or getErrorStream
0:          * Note, that for verifying the output of a Java process, there is
0:          * BaseTestCase.assertExecJavaCmdAsExpected
0:          * @param args
0:          * @return the Process 
0:         public static Process execJavaCmd(String[] args) throws IOException, InterruptedException {
/////////////////////////////////////////////////////////////////////////
0:             return pr;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d7b5f4a
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.InputStreamReader;
1: import java.io.PrintWriter;
1: import java.io.StringReader;
/////////////////////////////////////////////////////////////////////////
0:         }
0:         
0:     /**
0:      * Calls the public method <code>getInfo</code> of the sysinfo tool within
0:      * this JVM and returns a <code>BufferedReader</code> for reading its 
1:      * output. This is useful for obtaining system information that could be 
1:      * used to verify, for example, values returned by Derby MBeans.
0:      * 
1:      * @return a buffering character-input stream containing the output from
1:      *         sysinfo
1:      * @see org.apache.derby.tools.sysinfo#getInfo(java.io.PrintWriter out)
0:      */
1:     public static BufferedReader getSysinfoLocally() {
1:         ByteArrayOutputStream byteStream = new ByteArrayOutputStream(20 * 1024);
1:         PrintWriter pw = new PrintWriter(byteStream, true); // autoflush
1:         org.apache.derby.tools.sysinfo.getInfo(pw);
1:         pw.flush();
1:         pw.close();
1:         byte[] outBytes = byteStream.toByteArray();
1:         BufferedReader sysinfoOutput = new BufferedReader(
0:                     new InputStreamReader(
0:                             new ByteArrayInputStream(outBytes)));
1:         return sysinfoOutput;
0:     }
0:     
0:     /**
0:      * <p>Calls the public method <code>getSysInfo()</code> of the Network 
1:      * Server instance associated with the current test configuration and 
1:      * returns the result as a BufferedReader, making it easy to analyse the 
1:      * output line by line.</p>
0:      * 
1:      * <p>This is useful for obtaining system information that could be 
1:      * used to verify, for example, values returned by Derby MBeans.</p>
0:      * 
1:      * @return a buffering character-input stream containing the output from 
1:      *         the server's sysinfo.
1:      * @see org.apache.derby.drda.NetworkServerControl#getSysinfo()
0:      */
1:     public static BufferedReader getSysinfoFromServer() throws Exception {
0:         
1:         return new BufferedReader(new StringReader(
1:                 NetworkServerTestSetup.getNetworkServerControl().getSysinfo()));
0:     }
============================================================================