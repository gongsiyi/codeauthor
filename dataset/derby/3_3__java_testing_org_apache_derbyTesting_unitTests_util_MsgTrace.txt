1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.util.MsgTrace
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.util;
1:2bc809f: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:56c1dc2: 
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:2bc809f: import org.apache.derby.iapi.services.property.PropertyUtil;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.stream.InfoStreams;
1:2bc809f: 
1:2bc809f: // static methods
1:2bc809f: // set up automatically first time it's used
1:2bc809f: // default trigger is time-bomb, but refer to config for other
1:2bc809f: //    possibilities
1:2bc809f: // add timestamps, thread ID's, (stack location info?)
1:2bc809f: 
1:2bc809f: public class MsgTrace implements Runnable {
1:2bc809f: 	//
1:2bc809f: 	// Number of seconds the memory trace waits before
1:2bc809f: 	// dumping its output.
1:2bc809f:  	public static final String
1:2bc809f: 	DELAY_PARAM_NAME = "derby.memoryTrace.bombDelay";
1:2bc809f: 
1:2bc809f: 	public static final String
1:2bc809f: 	RING_BUFFER_SIZE_PARAM_NAME = "derby.memoryTrace.ringBufferSize";
1:2bc809f: 
1:2bc809f: 	private static MsgTrace singleton = null;
1:2bc809f: 	long bombDelay; // 30 minutes
1:2bc809f: 	int ringBufferSize;
1:2bc809f: 	// InMemoryTrace recorder;
1:2bc809f: 	HeaderPrintWriter output;
1:2bc809f: 
1:2bc809f: 	private MsgTrace() {
1:2bc809f: 
1:56c1dc2: 		output = getMonitor().getSystemStreams().stream();
1:2bc809f: 
1:2bc809f: 		bombDelay = PropertyUtil.getSystemInt(DELAY_PARAM_NAME, 30 * 60); // 30 minutes default
1:2bc809f: 		bombDelay *= 1000;
1:2bc809f: 
1:2bc809f: 		ringBufferSize = PropertyUtil.getSystemInt(RING_BUFFER_SIZE_PARAM_NAME, 99/*InMemoryTrace.DEFAULT_RING_BUFFER_SIZE*/); 
1:2bc809f: 
1:2bc809f: 		// recorder  = new InMemoryTrace(ringBufferSize);
1:2bc809f: 
1:2bc809f: 		Thread t = new Thread(this);
1:2bc809f: 		t.setDaemon(true);
1:2bc809f: 		t.start();
1:2bc809f: 	}
1:2bc809f: 	
1:2bc809f: 	public static void traceString(String msg) {
1:2bc809f: 		if (singleton == null)
1:2bc809f: 			singleton = new MsgTrace();
1:2bc809f: 		singleton.trace(msg);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	private void trace(String msg) {
1:2bc809f: // 		// wrap msg in a Dumpable
1:2bc809f: // 		d.timestamp = System.currentTimeMillis();
1:2bc809f: // 		d.threadId = Thread.currentThread().getName();
1:2bc809f: // 		d.msg = msg;
1:2bc809f: 		// recorder.traceString(msg);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	public void run() {
1:2bc809f: 		try { Thread.sleep(bombDelay); } catch (InterruptedException ie) {}
1:2bc809f: 
1:2bc809f: 		// recorder.dump(output);
1:2bc809f: 
1:2bc809f: 		System.exit(1);
1:2bc809f: 	}
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:2bc809f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1: 		output = getMonitor().getSystemStreams().stream();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.util.MsgTrace
1: 
0:    Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.util;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
1: // static methods
1: // set up automatically first time it's used
1: // default trigger is time-bomb, but refer to config for other
1: //    possibilities
1: // add timestamps, thread ID's, (stack location info?)
1: 
1: public class MsgTrace implements Runnable {
1: 	//
1: 	// Number of seconds the memory trace waits before
1: 	// dumping its output.
1:  	public static final String
1: 	DELAY_PARAM_NAME = "derby.memoryTrace.bombDelay";
1: 
1: 	public static final String
1: 	RING_BUFFER_SIZE_PARAM_NAME = "derby.memoryTrace.ringBufferSize";
1: 
1: 	private static MsgTrace singleton = null;
1: 	long bombDelay; // 30 minutes
1: 	int ringBufferSize;
1: 	// InMemoryTrace recorder;
1: 	HeaderPrintWriter output;
1: 
1: 	private MsgTrace() {
1: 
0: 		output = Monitor.getMonitor().getSystemStreams().stream();
1: 
1: 		bombDelay = PropertyUtil.getSystemInt(DELAY_PARAM_NAME, 30 * 60); // 30 minutes default
1: 		bombDelay *= 1000;
1: 
1: 		ringBufferSize = PropertyUtil.getSystemInt(RING_BUFFER_SIZE_PARAM_NAME, 99/*InMemoryTrace.DEFAULT_RING_BUFFER_SIZE*/); 
1: 
1: 		// recorder  = new InMemoryTrace(ringBufferSize);
1: 
1: 		Thread t = new Thread(this);
1: 		t.setDaemon(true);
1: 		t.start();
1: 	}
1: 	
1: 	public static void traceString(String msg) {
1: 		if (singleton == null)
1: 			singleton = new MsgTrace();
1: 		singleton.trace(msg);
1: 	}
1: 
1: 	private void trace(String msg) {
1: // 		// wrap msg in a Dumpable
1: // 		d.timestamp = System.currentTimeMillis();
1: // 		d.threadId = Thread.currentThread().getName();
1: // 		d.msg = msg;
1: 		// recorder.traceString(msg);
1: 	}
1: 
1: 	public void run() {
1: 		try { Thread.sleep(bombDelay); } catch (InterruptedException ie) {}
1: 
1: 		// recorder.dump(output);
1: 
1: 		System.exit(1);
1: 	}
1: }
============================================================================