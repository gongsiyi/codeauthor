1:b2b30ec: /*
1:bb0c274: 
1:b2b30ec:    Derby - Class org.apache.derby.impl.jdbc.LOBInputStream
1:bb0c274: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:bb0c274: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:bb0c274: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:bb0c274: 
2:b2b30ec:  */
1:b2b30ec: package org.apache.derby.impl.jdbc;
10:b2b30ec: 
1:f719de6: import java.io.EOFException;
1:b2b30ec: import java.io.IOException;
1:b2b30ec: import java.io.InputStream;
1:2333262: import org.apache.derby.iapi.error.StandardException;
1:2d1bc8f: import org.apache.derby.iapi.reference.MessageId;
1:b2b30ec: import org.apache.derby.iapi.reference.SQLState;
1:b2b30ec: import org.apache.derby.iapi.services.i18n.MessageService;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:f719de6: import org.apache.derby.iapi.types.PositionedStream;
1:b175fd2: import org.apache.derby.iapi.error.ExceptionUtil;
1:b2b30ec: 
2:b2b30ec: /**
1:e5b15ce:  * This input stream is built on top of {@link LOBStreamControl}.
1:e5b15ce:  * <p>
1:e5b15ce:  * All the read methods are routed to {@link LOBStreamControl}.
1:b2b30ec:  */
1:b2b30ec: 
1:f719de6: public class LOBInputStream
1:f719de6:     extends InputStream
1:f719de6:     implements PositionedStream {
1:b2b30ec: 
1:b2b30ec:     private boolean closed;
1:5d54436:     private final LOBStreamControl control;
1:b2b30ec:     private long pos;
1:e1fc783:     private long updateCount;
1:b2b30ec: 
1:b2b30ec:     LOBInputStream(LOBStreamControl control, long position) {
1:b2b30ec:         closed = false;
1:b2b30ec:         this.control = control;
1:b2b30ec:         pos = position;
1:e1fc783:         updateCount = control.getUpdateCount ();
5:b2b30ec:     }
1:e1fc783: 
1:e1fc783:     /**
1:b2b30ec:      * Reads up to <code>len</code> bytes of data from the input stream into
1:b2b30ec:      * an array of bytes.  An attempt is made to read as many as
1:b2b30ec:      * <code>len</code> bytes, but a smaller number may be read.
1:b2b30ec:      * The number of bytes actually read is returned as an integer.
6:b2b30ec:      *
1:b2b30ec:      * <p> This method blocks until input data is available, end of file is
1:b2b30ec:      * detected, or an exception is thrown.
1:b2b30ec:      *
2:b2b30ec:      * <p> If <code>b</code> is <code>null</code>, a
1:b2b30ec:      * <code>NullPointerException</code> is thrown.
1:b2b30ec:      *
1:b2b30ec:      * <p> If <code>off</code> is negative, or <code>len</code> is negative, or
1:b2b30ec:      * <code>off+len</code> is greater than the length of the array
1:b2b30ec:      * <code>b</code>, then an <code>IndexOutOfBoundsException</code> is
1:b2b30ec:      * thrown.
1:b2b30ec:      *
1:b2b30ec:      * <p> If <code>len</code> is zero, then no bytes are read and
1:b2b30ec:      * <code>0</code> is returned; otherwise, there is an attempt to read at
1:b2b30ec:      * least one byte. If no byte is available because the stream is at end of
1:b2b30ec:      * file, the value <code>-1</code> is returned; otherwise, at least one
1:b2b30ec:      * byte is read and stored into <code>b</code>.
1:b2b30ec:      *
1:b2b30ec:      * <p> The first byte read is stored into element <code>b[off]</code>, the
1:b2b30ec:      * next one into <code>b[off+1]</code>, and so on. The number of bytes read
1:b2b30ec:      * is, at most, equal to <code>len</code>. Let <i>k</i> be the number of
1:b2b30ec:      * bytes actually read; these bytes will be stored in elements
1:b2b30ec:      * <code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,
1:b2b30ec:      * leaving elements <code>b[off+</code><i>k</i><code>]</code> through
1:b2b30ec:      * <code>b[off+len-1]</code> unaffected.
1:b2b30ec:      *
1:b2b30ec:      * <p> In every case, elements <code>b[0]</code> through
1:b2b30ec:      * <code>b[off]</code> and elements <code>b[off+len]</code> through
1:b2b30ec:      * <code>b[b.length-1]</code> are unaffected.
1:b2b30ec:      *
2:b2b30ec:      * <p> If the first byte cannot be read for any reason other than end of
2:b2b30ec:      * file, then an <code>IOException</code> is thrown. In particular, an
2:b2b30ec:      * <code>IOException</code> is thrown if the input stream has been closed.
1:b2b30ec:      *
1:b2b30ec:      * <p> The <code>read(b,</code> <code>off,</code> <code>len)</code> method
1:b2b30ec:      * for class <code>InputStream</code> simply calls the method
1:b2b30ec:      * <code>read()</code> repeatedly. If the first such call results in an
1:b2b30ec:      * <code>IOException</code>, that exception is returned from the call to
1:b2b30ec:      * the <code>read(b,</code> <code>off,</code> <code>len)</code> method.  If
1:b2b30ec:      * any subsequent call to <code>read()</code> results in a
1:b2b30ec:      * <code>IOException</code>, the exception is caught and treated as if it
1:b2b30ec:      * were end of file; the bytes read up to that point are stored into
1:b2b30ec:      * <code>b</code> and the number of bytes read before the exception
1:b2b30ec:      * occurred is returned.  Subclasses are encouraged to provide a more
1:b2b30ec:      * efficient implementation of this method.
1:b2b30ec:      *
1:b2b30ec:      * @param b     the buffer into which the data is read.
1:b2b30ec:      * @param off   the start offset in array <code>b</code>
1:b2b30ec:      *                   at which the data is written.
1:b2b30ec:      * @param len   the maximum number of bytes to read.
2:b2b30ec:      * @return the total number of bytes read into the buffer, or
1:b2b30ec:      *             <code>-1</code> if there is no more data because the end of
2:b2b30ec:      *             the stream has been reached.
2:b2b30ec:      * @exception IOException  if an I/O error occurs.
2:b2b30ec:      * @exception NullPointerException  if <code>b</code> is <code>null</code>.
1:b2b30ec:      * @see java.io.InputStream#read()
1:b2b30ec:      */
1:b2b30ec:     public int read(byte[] b, int off, int len) throws IOException {
2:b2b30ec:         if (closed)
2:b2b30ec:             throw new IOException (
1:2d1bc8f:                    MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
2:b2b30ec:         try {
1:b2b30ec:             int ret = control.read(b, off, len, pos);
1:5d54436:             if (ret != -1) {
2:b2b30ec:                 pos += ret;
2:b2b30ec:                 return ret;
1:b2b30ec:             }
3:b2b30ec:             return -1;
1:1c589af:         } catch (StandardException se) {
1:1c589af:             String state = se.getSQLState();
1:1c589af:             if (state.equals(ExceptionUtil.getSQLStateFromIdentifier(
1:1c589af:                                         SQLState.BLOB_POSITION_TOO_LARGE))) {
1:1c589af:                 return -1;
1:1c589af:             } else if (state.equals(ExceptionUtil.getSQLStateFromIdentifier(
1:1c589af:                                             SQLState.BLOB_INVALID_OFFSET))) {
1:1c589af:                 throw new ArrayIndexOutOfBoundsException(se.getMessage());
1:1c589af:             } else {
1:ed0be21:                 throw Util.newIOException(se);
1:1c589af:             }
1:b2b30ec:         }
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Closes this input stream and releases any system resources associated
1:b2b30ec:      * with the stream.
1:b2b30ec:      *
1:b2b30ec:      * <p> The <code>close</code> method of <code>InputStream</code> does
1:b2b30ec:      * nothing.
1:b2b30ec:      *
1:b2b30ec:      * @exception IOException  if an I/O error occurs.
1:b2b30ec:      */
1:b2b30ec:     public void close() throws IOException {
1:b2b30ec:         closed = true;
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:b2b30ec:      * Reads the next byte of data from the input stream. The value byte is
1:b2b30ec:      * returned as an <code>int</code> in the range <code>0</code> to
1:b2b30ec:      * <code>255</code>. If no byte is available because the end of the stream
1:b2b30ec:      * has been reached, the value <code>-1</code> is returned. This method
1:b2b30ec:      * blocks until input data is available, the end of the stream is detected,
1:b2b30ec:      * or an exception is thrown.
1:b2b30ec:      *
1:b2b30ec:      * <p> A subclass must provide an implementation of this method.
1:b2b30ec:      *
1:b2b30ec:      * @return the next byte of data, or <code>-1</code> if the end of the
1:b2b30ec:      *             stream is reached.
1:b2b30ec:      * @exception IOException  if an I/O error occurs.
1:b2b30ec:      */
1:b2b30ec:     public int read() throws IOException {
1:b2b30ec:         if (closed)
1:b2b30ec:             throw new IOException (
1:2d1bc8f:                    MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
1:b2b30ec:         try {
1:b2b30ec:             int ret = control.read(pos);
1:b2b30ec:             if (ret != -1)
1:b2b30ec:                 pos += 1;
1:b2b30ec:             return ret;
1:2333262:         } catch (StandardException se) {
1:ed0be21:             throw Util.newIOException(se);
1:b2b30ec:         }
1:b2b30ec:     }
1:b2b30ec: 
1:b2b30ec:     /**
1:e1fc783:      * Checks if underlying StreamControl has been updated.
1:e1fc783:      * @return if stream is modified since created
1:e1fc783:      */
1:e1fc783:     boolean isObsolete () {
1:e1fc783:         return updateCount != control.getUpdateCount();
1:e1fc783:     }
1:e1fc783:     
1:e1fc783:     /**
1:e1fc783:      * Reinitializes the stream and sets the current pointer to zero.
1:e1fc783:      */
1:e1fc783:     void reInitialize () {
1:e1fc783:         updateCount = control.getUpdateCount();
1:e1fc783:         pos = 0;
1:e1fc783:     }
1:e1fc783:     
1:e1fc783:     /**
1:e1fc783:      * Returns size of stream in bytes.
1:e1fc783:      * @return size of stream.
1:e1fc783:      */
1:e1fc783:     long length () throws IOException {
1:e1fc783:         return control.getLength();
1:e1fc783:     }
1:f719de6: 
1:f719de6:     // Implementation of the PositionedStream interface:
1:f719de6:     //   - asInputStream
1:f719de6:     //   - getPosition
1:f719de6:     //   - reposition
1:f719de6: 
1:f719de6:     public InputStream asInputStream() {
1:f719de6:         return this;
1:f719de6:     }
1:f719de6: 
1:f719de6:     /**
1:f719de6:      * Returns the current byte position.
1:f719de6:      *
1:f719de6:      * @return The current byte position.
1:f719de6:      */
1:f719de6:     public long getPosition() {
1:f719de6:         return pos;
1:f719de6:     }
1:f719de6: 
1:f719de6:     /**
1:f719de6:      * Repositions the stream to the requested byte position.
1:f719de6:      *
1:f719de6:      * @param requestedPos the requested position, starting at {@code 0}
1:f719de6:      * @throws EOFException if the requested position is larger than the length
1:f719de6:      * @throws IOException if obtaining the stream length fails
1:f719de6:      */
1:f719de6:     public void reposition(long requestedPos)
1:f719de6:             throws IOException{
1:f719de6:         if (SanityManager.DEBUG) {
1:f719de6:             if (requestedPos < 0) {
1:f719de6:                 SanityManager.THROWASSERT("Negative position: " + requestedPos);
1:f719de6:             }
1:f719de6:         }
1:f719de6:         if (requestedPos > length()) {
1:f719de6:             pos = 0;
1:f719de6:             throw new EOFException();
1:f719de6:         }
1:f719de6:         pos = requestedPos;
1:f719de6:     }
1:b2b30ec: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:2d1bc8f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:                    MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
/////////////////////////////////////////////////////////////////////////
1:                    MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
commit:f719de6
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.PositionedStream;
/////////////////////////////////////////////////////////////////////////
1: public class LOBInputStream
1:     extends InputStream
1:     implements PositionedStream {
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Implementation of the PositionedStream interface:
1:     //   - asInputStream
1:     //   - getPosition
1:     //   - reposition
1: 
1:     public InputStream asInputStream() {
1:         return this;
1:     }
1: 
1:     /**
1:      * Returns the current byte position.
1:      *
1:      * @return The current byte position.
1:      */
1:     public long getPosition() {
1:         return pos;
1:     }
1: 
1:     /**
1:      * Repositions the stream to the requested byte position.
1:      *
1:      * @param requestedPos the requested position, starting at {@code 0}
1:      * @throws EOFException if the requested position is larger than the length
1:      * @throws IOException if obtaining the stream length fails
1:      */
1:     public void reposition(long requestedPos)
1:             throws IOException{
1:         if (SanityManager.DEBUG) {
1:             if (requestedPos < 0) {
1:                 SanityManager.THROWASSERT("Negative position: " + requestedPos);
1:             }
1:         }
1:         if (requestedPos > length()) {
1:             pos = 0;
1:             throw new EOFException();
1:         }
1:         pos = requestedPos;
1:     }
commit:1c589af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } catch (StandardException se) {
1:             String state = se.getSQLState();
1:             if (state.equals(ExceptionUtil.getSQLStateFromIdentifier(
1:                                         SQLState.BLOB_POSITION_TOO_LARGE))) {
1:                 return -1;
1:             } else if (state.equals(ExceptionUtil.getSQLStateFromIdentifier(
1:                                             SQLState.BLOB_INVALID_OFFSET))) {
1:                 throw new ArrayIndexOutOfBoundsException(se.getMessage());
1:             } else {
0:                 throw new IOException(se.getMessage());
1:             }
/////////////////////////////////////////////////////////////////////////
commit:e5b15ce
/////////////////////////////////////////////////////////////////////////
1:  * This input stream is built on top of {@link LOBStreamControl}.
1:  * <p>
1:  * All the read methods are routed to {@link LOBStreamControl}.
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
commit:ffb9317
/////////////////////////////////////////////////////////////////////////
commit:e1fc783
/////////////////////////////////////////////////////////////////////////
1:     private long updateCount;
1:         updateCount = control.getUpdateCount ();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Checks if underlying StreamControl has been updated.
1:      * @return if stream is modified since created
1:      */
1:     boolean isObsolete () {
1:         return updateCount != control.getUpdateCount();
1:     }
1:     
1:     /**
1:      * Reinitializes the stream and sets the current pointer to zero.
1:      */
1:     void reInitialize () {
1:         updateCount = control.getUpdateCount();
1:         pos = 0;
1:     }
1:     
1:     /**
1:      * Returns size of stream in bytes.
1:      * @return size of stream.
1:      */
1:     long length () throws IOException {
1:         return control.getLength();
1:     }
commit:b2b30ec
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.impl.jdbc.LOBInputStream
1:  
0:    Copyright (c) 2006 The Apache Software Foundation or its licensors, where applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
0:       http://www.apache.org/licenses/LICENSE-2.0
1:  
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
1:  
1:  */
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.sql.SQLException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.shared.common.error.ExceptionUtil;
1: 
1: /**
0:  * This input stream is built on top of LOBStreamControl. All the read methods
0:  * are routed to LOBStreamControl.
1:  */
1: 
0: public class LOBInputStream extends InputStream {
1: 
1:     private boolean closed;
0:     private LOBStreamControl control;
1:     private long pos;
1: 
1:     LOBInputStream(LOBStreamControl control, long position) {
1:         closed = false;
1:         this.control = control;
1:         pos = position;
1: 
1:     }
1: 
1:     /**
1:      * Reads up to <code>len</code> bytes of data from the input stream into
1:      * an array of bytes.  An attempt is made to read as many as
1:      * <code>len</code> bytes, but a smaller number may be read.
1:      * The number of bytes actually read is returned as an integer.
1:      *
1:      * <p> This method blocks until input data is available, end of file is
1:      * detected, or an exception is thrown.
1:      *
1:      * <p> If <code>b</code> is <code>null</code>, a
1:      * <code>NullPointerException</code> is thrown.
1:      *
1:      * <p> If <code>off</code> is negative, or <code>len</code> is negative, or
1:      * <code>off+len</code> is greater than the length of the array
1:      * <code>b</code>, then an <code>IndexOutOfBoundsException</code> is
1:      * thrown.
1:      *
1:      * <p> If <code>len</code> is zero, then no bytes are read and
1:      * <code>0</code> is returned; otherwise, there is an attempt to read at
1:      * least one byte. If no byte is available because the stream is at end of
1:      * file, the value <code>-1</code> is returned; otherwise, at least one
1:      * byte is read and stored into <code>b</code>.
1:      *
1:      * <p> The first byte read is stored into element <code>b[off]</code>, the
1:      * next one into <code>b[off+1]</code>, and so on. The number of bytes read
1:      * is, at most, equal to <code>len</code>. Let <i>k</i> be the number of
1:      * bytes actually read; these bytes will be stored in elements
1:      * <code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,
1:      * leaving elements <code>b[off+</code><i>k</i><code>]</code> through
1:      * <code>b[off+len-1]</code> unaffected.
1:      *
1:      * <p> In every case, elements <code>b[0]</code> through
1:      * <code>b[off]</code> and elements <code>b[off+len]</code> through
1:      * <code>b[b.length-1]</code> are unaffected.
1:      *
1:      * <p> If the first byte cannot be read for any reason other than end of
1:      * file, then an <code>IOException</code> is thrown. In particular, an
1:      * <code>IOException</code> is thrown if the input stream has been closed.
1:      *
1:      * <p> The <code>read(b,</code> <code>off,</code> <code>len)</code> method
1:      * for class <code>InputStream</code> simply calls the method
1:      * <code>read()</code> repeatedly. If the first such call results in an
1:      * <code>IOException</code>, that exception is returned from the call to
1:      * the <code>read(b,</code> <code>off,</code> <code>len)</code> method.  If
1:      * any subsequent call to <code>read()</code> results in a
1:      * <code>IOException</code>, the exception is caught and treated as if it
1:      * were end of file; the bytes read up to that point are stored into
1:      * <code>b</code> and the number of bytes read before the exception
1:      * occurred is returned.  Subclasses are encouraged to provide a more
1:      * efficient implementation of this method.
1:      *
1:      * @param b     the buffer into which the data is read.
1:      * @param off   the start offset in array <code>b</code>
1:      *                   at which the data is written.
1:      * @param len   the maximum number of bytes to read.
1:      * @return the total number of bytes read into the buffer, or
1:      *             <code>-1</code> if there is no more data because the end of
1:      *             the stream has been reached.
1:      * @exception IOException  if an I/O error occurs.
1:      * @exception NullPointerException  if <code>b</code> is <code>null</code>.
1:      * @see java.io.InputStream#read()
1:      */
1:     public int read(byte[] b, int off, int len) throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                    MessageService.getTextMessage(SQLState.LANG_STREAM_CLOSED));
1:         try {
1:             int ret = control.read(b, off, len, pos);
0:             if (ret > 0) {
1:                 pos += ret;
1:                 return ret;
1:             }
1:             return -1;
0:         } catch (SQLException e) {
0:             return handleSQLException (e);
1:         }
1:     }
1: 
1:     /**
0:      * Reads some number of bytes from the input stream and stores them into
0:      * the buffer array <code>b</code>. The number of bytes actually read is
0:      * returned as an integer.  This method blocks until input data is
0:      * available, end of file is detected, or an exception is thrown.
1:      *
1:      * <p> If <code>b</code> is <code>null</code>, a
0:      * <code>NullPointerException</code> is thrown.  If the length of
0:      * <code>b</code> is zero, then no bytes are read and <code>0</code> is
0:      * returned; otherwise, there is an attempt to read at least one byte. If
0:      * no byte is available because the stream is at end of file, the value
0:      * <code>-1</code> is returned; otherwise, at least one byte is read and
0:      * stored into <code>b</code>.
1:      *
0:      * <p> The first byte read is stored into element <code>b[0]</code>, the
0:      * next one into <code>b[1]</code>, and so on. The number of bytes read is,
0:      * at most, equal to the length of <code>b</code>. Let <i>k</i> be the
0:      * number of bytes actually read; these bytes will be stored in elements
0:      * <code>b[0]</code> through <code>b[</code><i>k</i><code>-1]</code>,
0:      * leaving elements <code>b[</code><i>k</i><code>]</code> through
0:      * <code>b[b.length-1]</code> unaffected.
1:      *
1:      * <p> If the first byte cannot be read for any reason other than end of
1:      * file, then an <code>IOException</code> is thrown. In particular, an
1:      * <code>IOException</code> is thrown if the input stream has been closed.
1:      *
0:      * <p> The <code>read(b)</code> method for class <code>InputStream</code>
0:      * has the same effect as: <pre><code> read(b, 0, b.length) </code></pre>
1:      *
0:      * @param b   the buffer into which the data is read.
1:      * @return the total number of bytes read into the buffer, or
0:      *             <code>-1</code> is there is no more data because the end of
1:      *             the stream has been reached.
1:      * @exception IOException  if an I/O error occurs.
1:      * @exception NullPointerException  if <code>b</code> is <code>null</code>.
0:      * @see java.io.InputStream#read(byte[], int, int)
1:      */
0:     public int read(byte[] b) throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                    MessageService.getTextMessage(SQLState.LANG_STREAM_CLOSED));
1:         try {
0:             int ret = control.read(b, pos);
0:             if (ret > 0) {
1:                 pos += ret;
1:                 return ret;
1:             }
1:             return -1;
0:         } catch (SQLException e) {
0:             return handleSQLException (e);
1:         }
1:     }
1: 
1:     /**
1:      * Closes this input stream and releases any system resources associated
1:      * with the stream.
1:      *
1:      * <p> The <code>close</code> method of <code>InputStream</code> does
1:      * nothing.
1:      *
1:      * @exception IOException  if an I/O error occurs.
1:      */
1:     public void close() throws IOException {
1:         closed = true;
1:     }
1: 
1:     /**
1:      * Reads the next byte of data from the input stream. The value byte is
1:      * returned as an <code>int</code> in the range <code>0</code> to
1:      * <code>255</code>. If no byte is available because the end of the stream
1:      * has been reached, the value <code>-1</code> is returned. This method
1:      * blocks until input data is available, the end of the stream is detected,
1:      * or an exception is thrown.
1:      *
1:      * <p> A subclass must provide an implementation of this method.
1:      *
1:      * @return the next byte of data, or <code>-1</code> if the end of the
1:      *             stream is reached.
1:      * @exception IOException  if an I/O error occurs.
1:      */
1:     public int read() throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                    MessageService.getTextMessage (SQLState.LANG_STREAM_CLOSED));
1:         try {
1:             int ret = control.read(pos);
1:             if (ret != -1)
1:                 pos += 1;
1:             return ret;
0:         } catch (SQLException e) {
0:             throw new IOException(e.getMessage());
1:         }
1:     }
1: 
0:     private int handleSQLException (SQLException e) throws IOException {
0:         if (e.getSQLState().equals(
0:                 ExceptionUtil.getSQLStateFromIdentifier(
0:                               SQLState.BLOB_POSITION_TOO_LARGE)))
1:             return -1;
0:         if (e.getSQLState().equals(
0:                 ExceptionUtil.getSQLStateFromIdentifier(
0:                               SQLState.BLOB_INVALID_OFFSET)))
0:                 throw new ArrayIndexOutOfBoundsException (e.getMessage());
0:             throw new IOException(e.getMessage());
1:     }
1: }
author:Lily Wei
-------------------------------------------------------------------------------
commit:b175fd2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.ExceptionUtil;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ed0be21
/////////////////////////////////////////////////////////////////////////
1:                 throw Util.newIOException(se);
/////////////////////////////////////////////////////////////////////////
1:             throw Util.newIOException(se);
commit:5d54436
/////////////////////////////////////////////////////////////////////////
1:     private final LOBStreamControl control;
/////////////////////////////////////////////////////////////////////////
1:             if (ret != -1) {
commit:2333262
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
0:         catch (StandardException se) {
0:             throw new IOException (se.getMessage());
0:         }
/////////////////////////////////////////////////////////////////////////
1:         } catch (StandardException se) {
0:             throw new IOException (se.getMessage());
commit:2420903
/////////////////////////////////////////////////////////////////////////
============================================================================