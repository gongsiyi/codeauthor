1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.services.MarkedLimitInputStream
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.services;
1:2bc809f: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:2bc809f: import java.io.DataInputStream;
1:2bc809f: import java.io.IOException;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f:   An input stream whose internal data is in blocks, the format of each block is
1:2bc809f:     (boolean isLastBlock, int blockLength, sequence of blockLength bytes)
1:2bc809f:   All blocks except for the last block must have isLastBlock set to false.
1:2bc809f:   The last block must have isLastBlock set to true.
1:2bc809f: 
1:2bc809f:   This class implements an input stream whose length is limited, yet
1:2bc809f:   the creator (writer) of the stream does not need to know the entire length
1:2bc809f:   before creating it.
1:2bc809f: */
1:2bc809f: 
1:2bc809f: public class MarkedLimitInputStream extends org.apache.derby.iapi.services.io.LimitInputStream
1:2bc809f: {
1:2bc809f:     protected boolean isLastBlock;
1:2bc809f:     protected int blockLength;
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public MarkedLimitInputStream(DataInputStream in)
1:2bc809f:         throws IOException
1:2bc809f:     {
1:2bc809f: 		super(in);
1:2bc809f:         start();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f:     private void start()
1:2bc809f:         throws IOException
1:2bc809f:     {
1:2bc809f:         isLastBlock = ((DataInputStream) in).readBoolean();
1:2bc809f:         blockLength = ((DataInputStream) in).readInt();
1:2bc809f: 
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:         {
1:2bc809f:             if (!isLastBlock)
1:2bc809f:             {
1:2bc809f:                 SanityManager.ASSERT(blockLength > 0);
1:2bc809f:             }
1:2bc809f:             else
1:2bc809f:             {
1:2bc809f:                 SanityManager.ASSERT(blockLength >= 0, "blockLength " + blockLength + " is negative");
1:2bc809f:             }
1:2bc809f:         }
1:2bc809f:         setLimit(blockLength);
1:2bc809f: 
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 	public int read()
1:2bc809f:         throws IOException
1:2bc809f:     {
1:2bc809f:         int i = super.read();
1:2bc809f:         if (i == -1)
1:2bc809f:         {
1:2bc809f:             if (isLastBlock)
1:2bc809f:             {
1:2bc809f:                 return -1;
1:2bc809f:             }
1:2bc809f:             else
1:2bc809f:             {
1:2bc809f:                 start();
1:2bc809f:                 return this.read();
1:2bc809f:             }
1:2bc809f:         }
1:2bc809f:         else
1:2bc809f:         {
1:2bc809f:             return i;
1:2bc809f:         }
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	public int read(byte b[], int off, int len)
1:2bc809f:         throws IOException
1:2bc809f:     {
1:2bc809f: 		if (isLastBlock)
1:2bc809f:         {
1:2bc809f:             // get as many bytes as we can, superclass may return less
1:2bc809f:             // bytes than we asked for without good reason
1:2bc809f: 	        int m = 0;
1:2bc809f: 	        while (m < len)
1:2bc809f:             {
1:2bc809f: 	            int count = super.read(b, off + m, len - m);
1:2bc809f: 	            if (count < 0)
1:2bc809f:                 {
1:2bc809f: 		            break;
1:2bc809f:                 }
1:2bc809f: 	            m += count;
1:2bc809f: 	        }
1:2bc809f: 			return m;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         // read until either get back all the bytes we asked for
1:2bc809f:         // or until we get -1
1:2bc809f: 	    int n = 0;
1:2bc809f: 	    while (n < len)
1:2bc809f:         {
1:2bc809f: 	        int count = super.read(b, off + n, len - n);
1:2bc809f: 	        if (count < 0)
1:2bc809f:             {
1:2bc809f: 		        break;
1:2bc809f:             }
1:2bc809f: 	        n += count;
1:2bc809f: 	    }
1:2bc809f: 
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:         {
1:2bc809f:             SanityManager.ASSERT(n <= len);
1:2bc809f:         }
1:2bc809f:         if (n == len)
1:2bc809f:         {
1:2bc809f:             return n;
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         // n < len, we didn't finish yet
1:2bc809f:         // init next block
1:2bc809f:         start();
1:2bc809f:         // read rest
1:2bc809f:         if (n < 0)
1:2bc809f:         {
1:2bc809f:             return this.read(b,off,len);
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         return n + this.read(b, off+n, len-n);
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 
1:2bc809f:     public long skip(long count)
1:2bc809f:         throws IOException
1:2bc809f:     {
1:2bc809f:         if (isLastBlock)
1:2bc809f:         {
1:2bc809f:             return super.skip(count);
1:2bc809f:         }
1:2bc809f: 
1:2bc809f:         // long n = super.skip(count);
1:2bc809f:         // read until either skip all the bytes we asked to
1:2bc809f:         // or until we get a result which is <= 0
1:2bc809f: 	    long n = 0;
1:2bc809f: 	    while (n < count)
1:2bc809f:         {
1:2bc809f: 	        long c = super.skip(count-n);
1:2bc809f: 	        if (c <= 0)
1:2bc809f:             {
1:2bc809f: 		        break;
1:2bc809f:             }
1:2bc809f: 	        n += c;
1:2bc809f: 	    }
1:2bc809f: 
1:2bc809f:         if (SanityManager.DEBUG)
1:2bc809f:         {
1:2bc809f:             SanityManager.ASSERT(n <= count);
1:2bc809f:         }
1:2bc809f:         if (n == count)
1:2bc809f:         {
1:2bc809f:             return n;
1:2bc809f:         }
1:2bc809f:         // if n < count, we didn't finish skipping yet
1:2bc809f:         // init next block
1:2bc809f:         start();
1:2bc809f:         // read rest
1:2bc809f:         if (n < 0)
1:2bc809f:         {
1:2bc809f:             return this.skip(count);
1:2bc809f:         }
1:2bc809f:         return n + this.skip(count-n);
1:2bc809f:     }
1:2bc809f: 
1:2bc809f: 
1:2bc809f: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.services.MarkedLimitInputStream
1: 
0:    Copyright 2001, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.services;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: 
1: /**
1:   An input stream whose internal data is in blocks, the format of each block is
1:     (boolean isLastBlock, int blockLength, sequence of blockLength bytes)
1:   All blocks except for the last block must have isLastBlock set to false.
1:   The last block must have isLastBlock set to true.
1: 
1:   This class implements an input stream whose length is limited, yet
1:   the creator (writer) of the stream does not need to know the entire length
1:   before creating it.
1: */
1: 
1: public class MarkedLimitInputStream extends org.apache.derby.iapi.services.io.LimitInputStream
1: {
1:     protected boolean isLastBlock;
1:     protected int blockLength;
1: 
1: 
1: 	public MarkedLimitInputStream(DataInputStream in)
1:         throws IOException
1:     {
1: 		super(in);
1:         start();
1: 	}
1: 
1:     private void start()
1:         throws IOException
1:     {
1:         isLastBlock = ((DataInputStream) in).readBoolean();
1:         blockLength = ((DataInputStream) in).readInt();
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             if (!isLastBlock)
1:             {
1:                 SanityManager.ASSERT(blockLength > 0);
1:             }
1:             else
1:             {
1:                 SanityManager.ASSERT(blockLength >= 0, "blockLength " + blockLength + " is negative");
1:             }
1:         }
1:         setLimit(blockLength);
1: 
1:     }
1: 
1: 	public int read()
1:         throws IOException
1:     {
1:         int i = super.read();
1:         if (i == -1)
1:         {
1:             if (isLastBlock)
1:             {
1:                 return -1;
1:             }
1:             else
1:             {
1:                 start();
1:                 return this.read();
1:             }
1:         }
1:         else
1:         {
1:             return i;
1:         }
1: 	}
1: 
1: 
1: 	public int read(byte b[], int off, int len)
1:         throws IOException
1:     {
1: 		if (isLastBlock)
1:         {
1:             // get as many bytes as we can, superclass may return less
1:             // bytes than we asked for without good reason
1: 	        int m = 0;
1: 	        while (m < len)
1:             {
1: 	            int count = super.read(b, off + m, len - m);
1: 	            if (count < 0)
1:                 {
1: 		            break;
1:                 }
1: 	            m += count;
1: 	        }
1: 			return m;
1:         }
1: 
1:         // read until either get back all the bytes we asked for
1:         // or until we get -1
1: 	    int n = 0;
1: 	    while (n < len)
1:         {
1: 	        int count = super.read(b, off + n, len - n);
1: 	        if (count < 0)
1:             {
1: 		        break;
1:             }
1: 	        n += count;
1: 	    }
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(n <= len);
1:         }
1:         if (n == len)
1:         {
1:             return n;
1:         }
1: 
1:         // n < len, we didn't finish yet
1:         // init next block
1:         start();
1:         // read rest
1:         if (n < 0)
1:         {
1:             return this.read(b,off,len);
1:         }
1: 
1:         return n + this.read(b, off+n, len-n);
1: 	}
1: 
1: 
1:     public long skip(long count)
1:         throws IOException
1:     {
1:         if (isLastBlock)
1:         {
1:             return super.skip(count);
1:         }
1: 
1:         // long n = super.skip(count);
1:         // read until either skip all the bytes we asked to
1:         // or until we get a result which is <= 0
1: 	    long n = 0;
1: 	    while (n < count)
1:         {
1: 	        long c = super.skip(count-n);
1: 	        if (c <= 0)
1:             {
1: 		        break;
1:             }
1: 	        n += c;
1: 	    }
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(n <= count);
1:         }
1:         if (n == count)
1:         {
1:             return n;
1:         }
1:         // if n < count, we didn't finish skipping yet
1:         // init next block
1:         start();
1:         // read rest
1:         if (n < 0)
1:         {
1:             return this.skip(count);
1:         }
1:         return n + this.skip(count-n);
1:     }
1: 
1: 
1: }
============================================================================