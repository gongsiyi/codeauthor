1:5cf7a46: /*
1:5cf7a46: 
1:5cf7a46:    Class org.apache.derby.optional.lucene.LuceneSupport
1:5cf7a46: 
1:5cf7a46:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5cf7a46:    contributor license agreements.  See the NOTICE file distributed with
1:5cf7a46:    this work for additional information regarding copyright ownership.
1:5cf7a46:    The ASF licenses this file to You under the Apache License, Version 2.0
1:5cf7a46:    (the "License"); you may not use this file except in compliance with
1:5cf7a46:    the License.  You may obtain a copy of the License at
1:5cf7a46: 
1:5cf7a46:       http://www.apache.org/licenses/LICENSE-2.0
1:5cf7a46: 
1:5cf7a46:    Unless required by applicable law or agreed to in writing, software
1:5cf7a46:    distributed under the License is distributed on an "AS IS" BASIS,
1:5cf7a46:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5cf7a46:    See the License for the specific language governing permissions and
1:5cf7a46:    limitations under the License.
1:5cf7a46: 
1:5cf7a46: */
1:5cf7a46: 
1:5cf7a46: package org.apache.derby.optional.lucene;
1:5cf7a46: 
1:5cf7a46: import java.io.IOException;
1:d3f7a7c: import java.util.zip.CRC32;
1:5cf7a46: 
1:5cf7a46: import org.apache.lucene.store.IndexOutput;
1:5cf7a46: 
1:5cf7a46: import org.apache.derby.io.StorageFile;
1:5cf7a46: import org.apache.derby.io.StorageRandomAccessFile;
1:5cf7a46: 
1:5cf7a46: /**
1:5cf7a46:  * <p>
1:5cf7a46:  * Wrapper for a StorageRandomAccessFile which can serve as a
1:5cf7a46:  * Lucene IndexOutput.
1:5cf7a46:  * </p>
1:5cf7a46:  */
1:eb79cc0: class DerbyIndexOutput   extends IndexOutput
1:5cf7a46: {
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  CONSTANTS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  STATE
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     // constructor state
1:5cf7a46:     private StorageFile                     _file;
1:5cf7a46:     private DerbyLuceneDir              _parentDir;
1:5cf7a46:     private StorageRandomAccessFile _sraf;
1:d3f7a7c:     private final CRC32 _crc = new CRC32();
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  CONSTRUCTOR
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /** Construct from a StorageRandomAccessFile */
1:5cf7a46:     DerbyIndexOutput( StorageFile file, DerbyLuceneDir parentDir )
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:5cf7a46:         _file = file;
1:5cf7a46:         _parentDir = parentDir;
1:5cf7a46:         _sraf = _file.getRandomAccessFile( "rw" );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:d3f7a7c:     //  IndexOutput METHODS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     public void close() throws IOException
1:5cf7a46:     {
1:5cf7a46:         _sraf.close();
1:5cf7a46:         _parentDir.removeIndexOutput( _file.getName() );
1:5cf7a46: 
1:5cf7a46:         _file = null;
1:5cf7a46:         _parentDir = null;
1:5cf7a46:         _sraf = null;
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public long getFilePointer()
1:5cf7a46:     {
1:5cf7a46:         try {
1:5cf7a46:             return _sraf.getFilePointer();
1:5cf7a46:         }
1:5cf7a46:         catch (IOException ioe) { throw wrap( ioe ); }
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     @Deprecated
1:5cf7a46:     public void seek( long pos )    throws IOException
1:5cf7a46:     {
1:5cf7a46:         _sraf.seek( pos );
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public  void flush()    throws IOException
1:5cf7a46:     {
1:5cf7a46:         _sraf.sync();
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public long length()    throws IOException
1:5cf7a46:     {
1:5cf7a46:         return _sraf.length();
1:5cf7a46:     }
1:5cf7a46: 
1:d3f7a7c:     public long getChecksum()
1:d3f7a7c:     {
1:d3f7a7c:         return _crc.getValue();
1:d3f7a7c:     }
1:d3f7a7c: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:d3f7a7c:     //  DataOutput METHODS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     public void writeByte(byte b)   throws IOException
1:5cf7a46:     {
1:5cf7a46:         _sraf.writeByte( b );
1:d3f7a7c:         _crc.update(b);
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46:     public void writeBytes(byte[] b, int offset, int length)
1:5cf7a46:         throws IOException
1:5cf7a46:     {
1:5cf7a46:         _sraf.write( b, offset, length );
1:d3f7a7c:         _crc.update(b, offset, length);
1:5cf7a46:     }
1:5cf7a46: 
1:5cf7a46: 
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46:     //
1:5cf7a46:     //  MINIONS
1:5cf7a46:     //
1:5cf7a46:     /////////////////////////////////////////////////////////////////////
1:5cf7a46: 
1:5cf7a46:     /** Wrap an exception in a Runtime exception */
1:5cf7a46:     private RuntimeException    wrap( Throwable t )
1:5cf7a46:     {
1:5cf7a46:         return new RuntimeException( t.getMessage(), t );
1:5cf7a46:     }
1:5cf7a46:     
1:5cf7a46: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d3f7a7c
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.CRC32;
/////////////////////////////////////////////////////////////////////////
1:     private final CRC32 _crc = new CRC32();
/////////////////////////////////////////////////////////////////////////
1:     //  IndexOutput METHODS
/////////////////////////////////////////////////////////////////////////
1:     public long getChecksum()
1:     {
1:         return _crc.getValue();
1:     }
1: 
1:     //  DataOutput METHODS
1:         _crc.update(b);
1:         _crc.update(b, offset, length);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eb79cc0
/////////////////////////////////////////////////////////////////////////
1: class DerbyIndexOutput   extends IndexOutput
commit:5cf7a46
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Class org.apache.derby.optional.lucene.LuceneSupport
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.optional.lucene;
1: 
1: import java.io.IOException;
0: import java.util.ArrayList;
1: 
0: import org.apache.lucene.store.AlreadyClosedException;
1: import org.apache.lucene.store.IndexOutput;
1: 
1: import org.apache.derby.io.StorageFile;
1: import org.apache.derby.io.StorageRandomAccessFile;
1: 
1: /**
1:  * <p>
1:  * Wrapper for a StorageRandomAccessFile which can serve as a
1:  * Lucene IndexOutput.
1:  * </p>
1:  */
0: public  class DerbyIndexOutput   extends IndexOutput
1: {
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTANTS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  STATE
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     // constructor state
1:     private StorageFile                     _file;
1:     private DerbyLuceneDir              _parentDir;
1:     private StorageRandomAccessFile _sraf;
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTOR
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /** Construct from a StorageRandomAccessFile */
1:     DerbyIndexOutput( StorageFile file, DerbyLuceneDir parentDir )
1:         throws IOException
1:     {
1:         _file = file;
1:         _parentDir = parentDir;
1:         _sraf = _file.getRandomAccessFile( "rw" );
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
0:     //  IndexInput METHODS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     public void close() throws IOException
1:     {
1:         _sraf.close();
1:         _parentDir.removeIndexOutput( _file.getName() );
1: 
1:         _file = null;
1:         _parentDir = null;
1:         _sraf = null;
1:     }
1: 
1:     public long getFilePointer()
1:     {
1:         try {
1:             return _sraf.getFilePointer();
1:         }
1:         catch (IOException ioe) { throw wrap( ioe ); }
1:     }
1: 
1:     @Deprecated
1:     public void seek( long pos )    throws IOException
1:     {
1:         _sraf.seek( pos );
1:     }
1: 
1:     public  void flush()    throws IOException
1:     {
1:         _sraf.sync();
1:     }
1: 
1:     public long length()    throws IOException
1:     {
1:         return _sraf.length();
1:     }
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
0:     //  DataInput METHODS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     public void writeByte(byte b)   throws IOException
1:     {
1:         _sraf.writeByte( b );
1:     }
1: 
1:     public void writeBytes(byte[] b, int offset, int length)
1:         throws IOException
1:     {
1:         _sraf.write( b, offset, length );
1:     }
1: 
1: 
1:     /////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////
1: 
1:     /** Wrap an exception in a Runtime exception */
1:     private RuntimeException    wrap( Throwable t )
1:     {
1:         return new RuntimeException( t.getMessage(), t );
1:     }
1:     
1: }
============================================================================