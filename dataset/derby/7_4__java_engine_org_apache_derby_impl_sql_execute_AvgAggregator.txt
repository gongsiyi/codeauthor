1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.AvgAggregator
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.NumberDataValue;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:5465561: import org.apache.derby.iapi.types.SQLDecimal;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Aggregator for AVG(). Extends the SumAggregator and
1:eac0369: 	implements a count. Result is then sum()/count().
1:eac0369: 	To handle overflow we catch the exception for
1:eac0369: 	value out of range, then we swap the holder for
1:eac0369: 	the current sum to one that can handle a larger
1:eac0369: 	range. Eventually a sum may end up in a SQLDecimal
1:eac0369: 	which can handle an infinite range. Once this
1:eac0369: 	type promotion has happened, it will not revert back
1:eac0369: 	to the original type, even if the sum would fit in
1:eac0369: 	a lesser type.
1:eac0369: 
1:eac0369:  */
1:eac0369: public final class AvgAggregator extends SumAggregator
1:eac0369: {
1:eac0369: 	private long count;
1:eac0369: 	private int scale;
1:eac0369: 
1:eac0369: 	protected void accumulate(DataValueDescriptor addend) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (count == 0) {
1:eac0369: 
1:eac0369: 			String typeName = addend.getTypeName();
1:eac0369: 			if (   typeName.equals(TypeId.TINYINT_NAME)
1:eac0369: 				|| typeName.equals(TypeId.SMALLINT_NAME)
1:eac0369: 				|| typeName.equals(TypeId.INTEGER_NAME)
1:3bb140c:                 || typeName.equals(TypeId.BIGINT_NAME)) {
1:eac0369: 				scale = 0;
1:eac0369: 			} else if (   typeName.equals(TypeId.REAL_NAME)
1:eac0369: 				|| typeName.equals(TypeId.DOUBLE_NAME)) {
1:eac0369: 				scale = TypeId.DECIMAL_SCALE;
1:eac0369: 			} else {
1:eac0369: 				// DECIMAL
1:5465561: 				scale = ((SQLDecimal) addend).getDecimalValueScale();
1:eac0369: 				if (scale < NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE)
1:eac0369: 					scale = NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
2:eac0369: 		try {
1:eac0369: 
1:eac0369: 			super.accumulate(addend);
1:eac0369: 			count++;
1:eac0369: 			return;
1:eac0369: 
2:eac0369: 		} catch (StandardException se) {
1:eac0369: 
1:eac0369: 			if (!se.getMessageId().equals(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE))
1:eac0369: 				throw se;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			Sum is out of range so promote
1:eac0369: 
1:eac0369: 			TINYINT,SMALLINT -->> INTEGER
1:eac0369: 
1:eac0369: 			INTEGER -->> BIGINT
1:eac0369: 
1:eac0369: 			REAL -->> DOUBLE PRECISION
1:eac0369: 
1:eac0369: 			others -->> DECIMAL
1:eac0369: 		*/
1:eac0369: 
1:eac0369: 		// this code creates data type objects directly, it is anticipating
1:eac0369: 		// the time they move into the defined api of the type system. (djd).
1:eac0369: 		String typeName = value.getTypeName();
1:2c6f0a2: 		
1:2c6f0a2: 		DataValueDescriptor newValue;
1:eac0369: 
1:eac0369: 		if (typeName.equals(TypeId.INTEGER_NAME)) {
1:2c6f0a2: 			newValue = new org.apache.derby.iapi.types.SQLLongint();
1:eac0369: 		} else if (typeName.equals(TypeId.TINYINT_NAME) || 
1:eac0369: 				   typeName.equals(TypeId.SMALLINT_NAME)) {
1:2c6f0a2: 			newValue = new org.apache.derby.iapi.types.SQLInteger();
1:eac0369: 		} else if (typeName.equals(TypeId.REAL_NAME)) {
1:2c6f0a2: 			newValue = new org.apache.derby.iapi.types.SQLDouble();
1:eac0369: 		} else {
1:5465561:             newValue = new SQLDecimal();
1:eac0369: 		}
1:2c6f0a2: 		
1:2c6f0a2: 		newValue.setValue(value);
1:2c6f0a2: 		value = newValue;
1:2c6f0a2: 		
1:eac0369: 		accumulate(addend);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void merge(ExecAggregator addend)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		AvgAggregator otherAvg = (AvgAggregator) addend;
1:eac0369: 
1:eac0369: 		// if I haven't been used take the other.
1:eac0369: 		if (count == 0) {
1:eac0369: 			count = otherAvg.count;
1:eac0369: 			value = otherAvg.value;
1:eac0369: 			scale = otherAvg.scale;
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Don't bother merging if the other is a NULL value aggregate.
1:eac0369: 		/* Note:Beetle:5346 fix change the sort to be High, that makes
1:eac0369: 		 * the neccessary for the NULL check because after the change 
1:eac0369: 		 * addend could have a  NULL value even on distincts unlike when 
1:eac0369: 		 * NULLs were sort order  Low, because by  sorting NULLs Low  
1:eac0369: 		 * they  happens to be always first row which makes it as 
1:eac0369: 		 * aggreagte result object instead of addends.
1:eac0369: 		 * Query that will fail without the following check:
1:eac0369: 		 * select avg(a) , count(distinct a) from t1;
1:eac0369: 		*/
1:eac0369: 		if(otherAvg.value != null)
1:eac0369: 		{
1:eac0369: 			// subtract one here as the accumulate will add one back in
1:eac0369: 			count += (otherAvg.count - 1);
1:eac0369: 			accumulate(otherAvg.value);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the result of the aggregation.  If the count
1:eac0369: 	 * is zero, then we haven't averaged anything yet, so
1:eac0369: 	 * we return null.  Otherwise, return the running
1:eac0369: 	 * average as a double.
1:eac0369: 	 *
1:eac0369: 	 * @return null or the average as Double
1:eac0369: 	 */
1:2c6f0a2: 	public DataValueDescriptor getResult() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (count == 0)
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:2c6f0a2: 		NumberDataValue sum = (NumberDataValue) value;
1:2c6f0a2: 		NumberDataValue avg = (NumberDataValue) value.getNewNull();
1:2c6f0a2: 
1:eac0369: 		
1:2c6f0a2: 		if (count > (long) Integer.MAX_VALUE)
1:2c6f0a2: 		{
1:2c6f0a2: 			// TINYINT, SMALLINT, INTEGER implement arithmetic using integers
1:2c6f0a2: 			// If the sum is still represented as a TINYINT, SMALLINT or INTEGER
1:2c6f0a2: 			// we cannot let their int based arithmetic handle it, since they
1:2c6f0a2: 			// will perform a getInt() on the long value which will truncate the long value.
1:2c6f0a2: 			// One solution would be to promote the sum to a SQLLongint, but its value
1:2c6f0a2: 			// will be less than or equal to Integer.MAX_VALUE, so the average will be 0.
1:2c6f0a2: 			String typeName = sum.getTypeName();
1:2c6f0a2: 
1:2c6f0a2: 			if (typeName.equals(TypeId.INTEGER_NAME) ||
1:2c6f0a2: 					typeName.equals(TypeId.TINYINT_NAME) || 
1:2c6f0a2: 					   typeName.equals(TypeId.SMALLINT_NAME))
1:2c6f0a2: 			{
1:2c6f0a2: 				avg.setValue(0);
1:2c6f0a2: 				return avg;
1:2c6f0a2: 			}
1:eac0369: 		}
1:2c6f0a2: 
1:2c6f0a2: 		NumberDataValue countv = new org.apache.derby.iapi.types.SQLLongint(count);
1:2c6f0a2: 		sum.divide(sum, countv, avg, scale);
1:2c6f0a2: 				
1:eac0369: 		return avg;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 */
1:eac0369: 	public ExecAggregator newAggregator()
1:eac0369: 	{
1:eac0369: 		return new AvgAggregator();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// EXTERNALIZABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/** 
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		out.writeLong(count);
1:eac0369: 		out.writeInt(scale);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see java.io.Externalizable#readExternal 
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		count = in.readLong();
1:eac0369: 		scale = in.readInt();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	// 
1:eac0369: 	// FORMATABLE INTERFACE
1:eac0369: 	// 
1:eac0369: 	/////////////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_AVG_V01_ID; }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5465561
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLDecimal;
/////////////////////////////////////////////////////////////////////////
1: 				scale = ((SQLDecimal) addend).getDecimalValueScale();
/////////////////////////////////////////////////////////////////////////
1:             newValue = new SQLDecimal();
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1:                 || typeName.equals(TypeId.BIGINT_NAME)) {
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e11914a
/////////////////////////////////////////////////////////////////////////
0: 			TypeId decimalTypeId = TypeId.getBuiltInTypeId(java.sql.Types.DECIMAL);
0: 			newValue = decimalTypeId.getNull();
commit:7d1ee7d
/////////////////////////////////////////////////////////////////////////
commit:2c6f0a2
/////////////////////////////////////////////////////////////////////////
0: 				scale = ((NumberDataValue) addend).getDecimalValueScale();
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		DataValueDescriptor newValue;
1: 			newValue = new org.apache.derby.iapi.types.SQLLongint();
1: 			newValue = new org.apache.derby.iapi.types.SQLInteger();
1: 			newValue = new org.apache.derby.iapi.types.SQLDouble();
0: 			newValue = new org.apache.derby.iapi.types.SQLDecimal();
1: 		
1: 		newValue.setValue(value);
1: 		value = newValue;
1: 		
/////////////////////////////////////////////////////////////////////////
1: 	public DataValueDescriptor getResult() throws StandardException
1: 		NumberDataValue sum = (NumberDataValue) value;
1: 		NumberDataValue avg = (NumberDataValue) value.getNewNull();
1: 		
1: 		if (count > (long) Integer.MAX_VALUE)
1: 		{
1: 			// TINYINT, SMALLINT, INTEGER implement arithmetic using integers
1: 			// If the sum is still represented as a TINYINT, SMALLINT or INTEGER
1: 			// we cannot let their int based arithmetic handle it, since they
1: 			// will perform a getInt() on the long value which will truncate the long value.
1: 			// One solution would be to promote the sum to a SQLLongint, but its value
1: 			// will be less than or equal to Integer.MAX_VALUE, so the average will be 0.
1: 			String typeName = sum.getTypeName();
1: 
1: 			if (typeName.equals(TypeId.INTEGER_NAME) ||
1: 					typeName.equals(TypeId.TINYINT_NAME) || 
1: 					   typeName.equals(TypeId.SMALLINT_NAME))
1: 			{
1: 				avg.setValue(0);
1: 				return avg;
1: 			}
1: 
1: 		NumberDataValue countv = new org.apache.derby.iapi.types.SQLLongint(count);
1: 		sum.divide(sum, countv, avg, scale);
1: 				
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.AvgAggregator
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.NumberDataValue;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.execute.ExecAggregator;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
0: import java.math.BigDecimal;
1: 
1: /**
1: 	Aggregator for AVG(). Extends the SumAggregator and
1: 	implements a count. Result is then sum()/count().
1: 	To handle overflow we catch the exception for
1: 	value out of range, then we swap the holder for
1: 	the current sum to one that can handle a larger
1: 	range. Eventually a sum may end up in a SQLDecimal
1: 	which can handle an infinite range. Once this
1: 	type promotion has happened, it will not revert back
1: 	to the original type, even if the sum would fit in
1: 	a lesser type.
1: 
1:  */
1: public final class AvgAggregator extends SumAggregator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private long count;
1: 	private int scale;
1: 
1: 	protected void accumulate(DataValueDescriptor addend) 
1: 		throws StandardException
1: 	{
1: 
1: 		if (count == 0) {
1: 
1: 			String typeName = addend.getTypeName();
1: 			if (   typeName.equals(TypeId.TINYINT_NAME)
1: 				|| typeName.equals(TypeId.SMALLINT_NAME)
1: 				|| typeName.equals(TypeId.INTEGER_NAME)
0: 				|| typeName.equals(TypeId.LONGINT_NAME)) {
1: 				scale = 0;
1: 			} else if (   typeName.equals(TypeId.REAL_NAME)
1: 				|| typeName.equals(TypeId.DOUBLE_NAME)) {
1: 				scale = TypeId.DECIMAL_SCALE;
1: 			} else {
1: 				// DECIMAL
0: 				scale = addend.getBigDecimal().scale();
1: 				if (scale < NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE)
1: 					scale = NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE;
1: 			}
1: 		}
1: 
1: 		try {
1: 
1: 			super.accumulate(addend);
1: 			count++;
1: 			return;
1: 
1: 		} catch (StandardException se) {
1: 
1: 			if (!se.getMessageId().equals(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE))
1: 				throw se;
1: 		}
1: 
1: 
1: 		/*
1: 			Sum is out of range so promote
1: 
1: 			TINYINT,SMALLINT -->> INTEGER
1: 
1: 			INTEGER -->> BIGINT
1: 
1: 			REAL -->> DOUBLE PRECISION
1: 
1: 			others -->> DECIMAL
1: 		*/
1: 
1: 		// this code creates data type objects directly, it is anticipating
1: 		// the time they move into the defined api of the type system. (djd).
1: 		String typeName = value.getTypeName();
1: 
1: 		if (typeName.equals(TypeId.INTEGER_NAME)) {
0: 			value = new org.apache.derby.iapi.types.SQLLongint(value.getLong());
1: 		} else if (typeName.equals(TypeId.TINYINT_NAME) || 
1: 				   typeName.equals(TypeId.SMALLINT_NAME)) {
0: 			value = new org.apache.derby.iapi.types.SQLInteger(value.getInt());
1: 		} else if (typeName.equals(TypeId.REAL_NAME)) {
0: 			value = new org.apache.derby.iapi.types.SQLDouble(value.getDouble());
1: 		} else {
0: 			value = new org.apache.derby.iapi.types.SQLDecimal(value.getBigDecimal());
1: 		}
1: 		accumulate(addend);
1: 	}
1: 
1: 	public void merge(ExecAggregator addend)
1: 		throws StandardException
1: 	{
1: 		AvgAggregator otherAvg = (AvgAggregator) addend;
1: 
1: 		// if I haven't been used take the other.
1: 		if (count == 0) {
1: 			count = otherAvg.count;
1: 			value = otherAvg.value;
1: 			scale = otherAvg.scale;
1: 			return;
1: 		}
1: 
1: 		// Don't bother merging if the other is a NULL value aggregate.
1: 		/* Note:Beetle:5346 fix change the sort to be High, that makes
1: 		 * the neccessary for the NULL check because after the change 
1: 		 * addend could have a  NULL value even on distincts unlike when 
1: 		 * NULLs were sort order  Low, because by  sorting NULLs Low  
1: 		 * they  happens to be always first row which makes it as 
1: 		 * aggreagte result object instead of addends.
1: 		 * Query that will fail without the following check:
1: 		 * select avg(a) , count(distinct a) from t1;
1: 		*/
1: 		if(otherAvg.value != null)
1: 		{
1: 			// subtract one here as the accumulate will add one back in
1: 			count += (otherAvg.count - 1);
1: 			accumulate(otherAvg.value);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Return the result of the aggregation.  If the count
1: 	 * is zero, then we haven't averaged anything yet, so
1: 	 * we return null.  Otherwise, return the running
1: 	 * average as a double.
1: 	 *
1: 	 * @return null or the average as Double
1: 	 */
0: 	public Object getResult()
1: 	{
1: 		if (count == 0)
1: 		{
1: 			return null;
1: 		}
1: 
0: 		// note we cannot use the Datatype's divide method as it only supports
0: 		// dividing by the same type, where we need the divisor to be a long
0: 		// regardless of the sum type.
1: 
0: 		BigDecimal avg = null;
1: 		try {
0: 			 avg = value.getBigDecimal().divide(BigDecimal.valueOf(count), scale, BigDecimal.ROUND_DOWN);
1: 		} catch (StandardException se) {
0: 			// get BigDecimal for a numeric type cannot throw an exception.
1: 		}
1: 		return avg;
1: 	}
1: 
1: 	/**
1: 	 */
1: 	public ExecAggregator newAggregator()
1: 	{
1: 		return new AvgAggregator();
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// EXTERNALIZABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/** 
1: 	 *
1: 	 * @exception IOException on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		super.writeExternal(out);
1: 		out.writeLong(count);
1: 		out.writeInt(scale);
1: 	}
1: 
1: 	/** 
1: 	 * @see java.io.Externalizable#readExternal 
1: 	 *
1: 	 * @exception IOException on error
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		count = in.readLong();
1: 		scale = in.readInt();
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////
1: 	// 
1: 	// FORMATABLE INTERFACE
1: 	// 
1: 	/////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_AVG_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.execute.ExecAggregator;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.math.BigDecimal;
0: 
0: /**
0: 	Aggregator for AVG(). Extends the SumAggregator and
0: 	implements a count. Result is then sum()/count().
0: 	To handle overflow we catch the exception for
0: 	value out of range, then we swap the holder for
0: 	the current sum to one that can handle a larger
0: 	range. Eventually a sum may end up in a SQLDecimal
0: 	which can handle an infinite range. Once this
0: 	type promotion has happened, it will not revert back
0: 	to the original type, even if the sum would fit in
0: 	a lesser type.
0: 
0:  */
0: public final class AvgAggregator extends SumAggregator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private long count;
0: 	private int scale;
0: 
0: 	protected void accumulate(DataValueDescriptor addend) 
0: 		throws StandardException
0: 	{
0: 
0: 		if (count == 0) {
0: 
0: 			String typeName = addend.getTypeName();
0: 			if (   typeName.equals(TypeId.TINYINT_NAME)
0: 				|| typeName.equals(TypeId.SMALLINT_NAME)
0: 				|| typeName.equals(TypeId.INTEGER_NAME)
0: 				|| typeName.equals(TypeId.LONGINT_NAME)) {
0: 				scale = 0;
0: 			} else if (   typeName.equals(TypeId.REAL_NAME)
0: 				|| typeName.equals(TypeId.DOUBLE_NAME)) {
0: 				scale = TypeId.DECIMAL_SCALE;
0: 			} else {
0: 				// DECIMAL
0: 				scale = addend.getBigDecimal().scale();
0: 				if (scale < NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE)
0: 					scale = NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE;
0: 			}
0: 		}
0: 
0: 		try {
0: 
0: 			super.accumulate(addend);
0: 			count++;
0: 			return;
0: 
0: 		} catch (StandardException se) {
0: 
0: 			if (!se.getMessageId().equals(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE))
0: 				throw se;
0: 		}
0: 
0: 
0: 		/*
0: 			Sum is out of range so promote
0: 
0: 			TINYINT,SMALLINT -->> INTEGER
0: 
0: 			INTEGER -->> BIGINT
0: 
0: 			REAL -->> DOUBLE PRECISION
0: 
0: 			others -->> DECIMAL
0: 		*/
0: 
0: 		// this code creates data type objects directly, it is anticipating
0: 		// the time they move into the defined api of the type system. (djd).
0: 		String typeName = value.getTypeName();
0: 
0: 		if (typeName.equals(TypeId.INTEGER_NAME)) {
0: 			value = new org.apache.derby.iapi.types.SQLLongint(value.getLong());
0: 		} else if (typeName.equals(TypeId.TINYINT_NAME) || 
0: 				   typeName.equals(TypeId.SMALLINT_NAME)) {
0: 			value = new org.apache.derby.iapi.types.SQLInteger(value.getInt());
0: 		} else if (typeName.equals(TypeId.REAL_NAME)) {
0: 			value = new org.apache.derby.iapi.types.SQLDouble(value.getDouble());
0: 		} else {
0: 			value = new org.apache.derby.iapi.types.SQLDecimal(value.getBigDecimal());
0: 		}
0: 		accumulate(addend);
0: 	}
0: 
0: 	public void merge(ExecAggregator addend)
0: 		throws StandardException
0: 	{
0: 		AvgAggregator otherAvg = (AvgAggregator) addend;
0: 
0: 		// if I haven't been used take the other.
0: 		if (count == 0) {
0: 			count = otherAvg.count;
0: 			value = otherAvg.value;
0: 			scale = otherAvg.scale;
0: 			return;
0: 		}
0: 
0: 		// Don't bother merging if the other is a NULL value aggregate.
0: 		/* Note:Beetle:5346 fix change the sort to be High, that makes
0: 		 * the neccessary for the NULL check because after the change 
0: 		 * addend could have a  NULL value even on distincts unlike when 
0: 		 * NULLs were sort order  Low, because by  sorting NULLs Low  
0: 		 * they  happens to be always first row which makes it as 
0: 		 * aggreagte result object instead of addends.
0: 		 * Query that will fail without the following check:
0: 		 * select avg(a) , count(distinct a) from t1;
0: 		*/
0: 		if(otherAvg.value != null)
0: 		{
0: 			// subtract one here as the accumulate will add one back in
0: 			count += (otherAvg.count - 1);
0: 			accumulate(otherAvg.value);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Return the result of the aggregation.  If the count
0: 	 * is zero, then we haven't averaged anything yet, so
0: 	 * we return null.  Otherwise, return the running
0: 	 * average as a double.
0: 	 *
0: 	 * @return null or the average as Double
0: 	 */
0: 	public Object getResult()
0: 	{
0: 		if (count == 0)
0: 		{
0: 			return null;
0: 		}
0: 
0: 		// note we cannot use the Datatype's divide method as it only supports
0: 		// dividing by the same type, where we need the divisor to be a long
0: 		// regardless of the sum type.
0: 
0: 		BigDecimal avg = null;
0: 		try {
0: 			 avg = value.getBigDecimal().divide(BigDecimal.valueOf(count), scale, BigDecimal.ROUND_DOWN);
0: 		} catch (StandardException se) {
0: 			// get BigDecimal for a numeric type cannot throw an exception.
0: 		}
0: 		return avg;
0: 	}
0: 
0: 	/**
0: 	 */
0: 	public ExecAggregator newAggregator()
0: 	{
0: 		return new AvgAggregator();
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// EXTERNALIZABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/** 
0: 	 *
0: 	 * @exception IOException on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		out.writeLong(count);
0: 		out.writeInt(scale);
0: 	}
0: 
0: 	/** 
0: 	 * @see java.io.Externalizable#readExternal 
0: 	 *
0: 	 * @exception IOException on error
0: 	 */
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		count = in.readLong();
0: 		scale = in.readInt();
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////
0: 	// 
0: 	// FORMATABLE INTERFACE
0: 	// 
0: 	/////////////////////////////////////////////////////////////
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_AVG_V01_ID; }
0: }
============================================================================