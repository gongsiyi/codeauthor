1:adb927d: /*
1:392583a: 
1:adb927d:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.MBeanTest
1:007d9ee: 
1:adb927d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:adb927d:    contributor license agreements.  See the NOTICE file distributed with
1:adb927d:    this work for additional information regarding copyright ownership.
1:adb927d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:adb927d:    (the "License"); you may not use this file except in compliance with
1:adb927d:    the License.  You may obtain a copy of the License at
1:007d9ee: 
1:adb927d:       http://www.apache.org/licenses/LICENSE-2.0
1:ffd9cf9: 
1:adb927d:    Unless required by applicable law or agreed to in writing, software
1:adb927d:    distributed under the License is distributed on an "AS IS" BASIS,
1:adb927d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:adb927d:    See the License for the specific language governing permissions and
1:adb927d:    limitations under the License.
1:ffd9cf9: 
4:adb927d:  */
1:a3ffa1e: 
1:adb927d: package org.apache.derbyTesting.functionTests.tests.management;
1:a3ffa1e: 
1:392583a: import java.io.IOException;
1:392583a: import java.security.AccessController;
1:392583a: import java.security.PrivilegedExceptionAction;
1:a3ffa1e: import java.util.ArrayList;
1:9f69067: import java.util.Hashtable;
1:184189f: import java.util.Set;
1:86ee0a0: import javax.management.Attribute;
1:392583a: import javax.management.AttributeNotFoundException;
1:392583a: import javax.management.InstanceAlreadyExistsException;
1:392583a: import javax.management.InstanceNotFoundException;
1:392583a: import javax.management.MBeanException;
1:392583a: import javax.management.MBeanRegistrationException;
1:adb927d: import javax.management.MBeanServerConnection;
1:392583a: import javax.management.NotCompliantMBeanException;
1:adb927d: import javax.management.ObjectName;
1:392583a: import javax.management.ReflectionException;
1:a3ffa1e: import junit.framework.Test;
1:251d8da: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a3ffa1e: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:a3ffa1e: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:adb927d: import org.apache.derbyTesting.junit.TestConfiguration;
1:a3ffa1e: 
1:e6a963f: /**
1:adb927d:  * Class that provided utility methods for the
1:251d8da:  * testing of Derby's MBeans. Requires J2SE 5.0 or higher (platform management).
1:251d8da:  * 
1:251d8da:  * Subclasses may require JDBC access for verifying values returned by the
1:251d8da:  * MBeans, which is why this class extends BaseJDBCTestCase instead of 
1:251d8da:  * BaseTestCase.
1:a3ffa1e:  */
1:251d8da: abstract class MBeanTest extends BaseJDBCTestCase {
1:cafbf4d:      
4:adb927d:     /**
1:e6a963f:      * JMX connection to use throughout the instance.
1:e6a963f:      */
1:e6a963f:     private MBeanServerConnection jmxConnection;
1:e6a963f:     
1:adb927d:     public MBeanTest(String name) {
1:adb927d:         super(name);
5:adb927d:     }
1:cafbf4d:     
1:cafbf4d:     protected static Test suite(Class<? extends MBeanTest> testClass, String suiteName) {
1:93cf8fd:                 
1:1ae02c9:         BaseTestSuite outerSuite = new BaseTestSuite(suiteName);
1:251d8da:         
1:1ae02c9:         Test platform = new BaseTestSuite(testClass,  suiteName + ":platform");
1:251d8da:         
1:007d9ee:         // Start the network server to ensure Derby is running and
1:007d9ee:         // all the MBeans are running.
1:007d9ee:         platform = TestConfiguration.clientServerDecorator(platform);
1:007d9ee:         platform = JMXConnectionDecorator.platformMBeanServer(platform);
1:392583a:                 
1:007d9ee:         // Set of tests that run within the same virtual machine using
1:007d9ee:         // the platform MBeanServer directly.
1:007d9ee:         outerSuite.addTest(platform);
1:007d9ee:         
1:a3ffa1e:         // Create a suite of all "test..." methods in the class.
1:1ae02c9:         Test suite = new BaseTestSuite(testClass,  suiteName + ":client");
1:498f26e:         
1:498f26e:         // Set up to get JMX connections using remote JMX
1:498f26e:         suite = JMXConnectionDecorator.remoteNoSecurity(suite);
1:a3ffa1e: 
1:a3ffa1e:         /* Connecting to an MBean server using a URL requires setting up remote
1:a3ffa1e:          * JMX in the JVM to which we want to connect. This is usually done by
1:a3ffa1e:          * setting a few system properties at JVM startup.
1:a3ffa1e:          * A quick solution is to set up a new network server JVM with
1:a3ffa1e:          * the required jmx properties.
1:a3ffa1e:          * A future improvement could be to fork a new JVM for embedded (?).
1:251d8da:          *
1:a3ffa1e:          * This requires that the default security policy of the network server
1:a3ffa1e:          * includes the permissions required to perform the actions of these 
1:a3ffa1e:          * tests. Otherwise, we'd probably have to supply a custom policy file
1:a3ffa1e:          * and specify this using additional command line properties at server 
1:a3ffa1e:          * startup.
1:251d8da:          */
1:a3ffa1e:         NetworkServerTestSetup networkServerTestSetup = 
1:a3ffa1e:                 new NetworkServerTestSetup (
1:a3ffa1e:                         suite, // run all tests in this class in the same setup
1:cafbf4d:                         getCommandLineProperties(false), // need to set up JMX in JVM
1:a3ffa1e:                         new String[0], // no server arguments needed
1:a63ab5e:                         true   // wait for the server to start properly
1:a3ffa1e:                 );
1:86ee0a0: 
1:a3ffa1e:         /* Since the server will be started in a new process we need "execute" 
1:a3ffa1e:          * FilePermission on all files (at least Java executables)...
1:a3ffa1e:          * Will run without SecurityManager for now, but could probably add a 
1:a3ffa1e:          * JMX specific policy file later. Or use the property trick reported
1:a3ffa1e:          * on derby-dev 2008-02-26 and add the permission to the generic 
1:a3ffa1e:          * policy.
1:cafbf4d:          * Note that the remote server will be running with a security
1:cafbf4d:          * manager (by default) if testing with jars.
1:251d8da:          */
1:a3ffa1e:         Test testSetup = 
1:a3ffa1e:                 SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
1:a3ffa1e:         // this decorator makes sure the suite is empty if this configration
1:a3ffa1e:         // does not support the network server:
1:ffd9cf9:         outerSuite.addTest(TestConfiguration.defaultServerDecorator(testSetup));
1:cafbf4d:        
1:ffd9cf9:         return outerSuite;
1:251d8da:     }
1:ffd9cf9:     
1:a3ffa1e:     // ---------- UTILITY METHODS ------------
1:a3ffa1e:     
1:86ee0a0:     /**
1:a3ffa1e:      * Returns a set of startup properties suitable for VersionMBeanTest.
1:a3ffa1e:      * These properties are used to configure JMX in a different JVM.
1:251d8da:      * Will set up remote JMX using the port defined by the current test 
1:dbed020:      * configuration, and with JMX security (authentication and SSL) disabled.
1:251d8da:      * 
1:a3ffa1e:      * @return a set of Java system properties to be set on the command line
1:a3ffa1e:      *         when starting a new JVM in order to enable remote JMX.
1:a3ffa1e:      */
1:392583a:     protected static String[] getCommandLineProperties(boolean authentication)
1:a3ffa1e:     {
1:a3ffa1e:         ArrayList<String> list = new ArrayList<String>();
1:a3ffa1e:         list.add("com.sun.management.jmxremote.port=" 
1:a3ffa1e:                 + TestConfiguration.getCurrent().getJmxPort());
1:cafbf4d:         list.add("com.sun.management.jmxremote.authenticate=" +
1:cafbf4d:                 Boolean.toString(authentication));
1:a3ffa1e:         list.add("com.sun.management.jmxremote.ssl=false");
1:cafbf4d:         
1:cafbf4d:         if (authentication) {
1:cafbf4d:             list.add("com.sun.management.jmxremote.password.file=" +
1:cafbf4d:                     "extin/jmx.password");
1:cafbf4d:             list.add("com.sun.management.jmxremote.access.file=" +
1:cafbf4d:                     "extin/jmx.access");
1:cafbf4d:         }
1:a3ffa1e:         String[] result = new String[list.size()];
1:a3ffa1e:         list.toArray(result);
1:a3ffa1e:         return result;
1:a3ffa1e:     }
1:a3ffa1e:     
1:a3ffa1e:   
1:251d8da:     /**
1:adb927d:      * Setup code to be run before each test fixture. This method will make
1:adb927d:      * sure that JMX Management is enabled in Derby, so that the test fixtures
1:adb927d:      * can access Derby's MBeans without problems.
1:251d8da:      * 
1:adb927d:      * @throws java.lang.Exception if an unexpected Exception occurs
1:a3ffa1e:      */
1:adb927d:     @Override
1:adb927d:     protected void setUp() throws Exception {
1:adb927d:         super.setUp();
1:adb927d:         enableManagement();
1:a3ffa1e:     }
1:a3ffa1e:     
1:e6a963f:     @Override
1:e6a963f:     protected void tearDown() throws Exception {
1:e6a963f:         super.tearDown();
1:e6a963f:         
1:3b904d7:         if (jmxConnection != null) {
1:3b904d7:            JMXConnectionGetter.mbeanServerConnector.get().close(jmxConnection);
1:3b904d7:            jmxConnection = null;
1:3b904d7:         }
1:e6a963f:     }
1:e6a963f:     
1:251d8da:     /**
1:cafbf4d:      * Obtains a connection to an MBean server with
1:cafbf4d:      * no user name or password,
1:cafbf4d:      * opens a single connection for the lifetime
1:cafbf4d:      * of the fixture
1:a3ffa1e:      * 
1:adb927d:      * @return a plain connection to an MBean server
1:adb927d:      */
1:adb927d:     protected MBeanServerConnection getMBeanServerConnection() 
1:498f26e:             throws Exception {
1:498f26e:         
1:e6a963f:         if (jmxConnection == null)
1:e6a963f:             jmxConnection = 
1:cafbf4d:             JMXConnectionGetter.mbeanServerConnector.get()
1:cafbf4d:                 .getMBeanServerConnection(null, null);
1:e6a963f:         return jmxConnection;
1:e6a963f:     }
1:e6a963f:     
1:e6a963f:     /**
1:cafbf4d:      * Obtains a connection to an MBean server with
1:cafbf4d:      * a user name or password. A new connection is
1:cafbf4d:      * returned for each call.
1:cafbf4d:      */
1:cafbf4d:     protected MBeanServerConnection getMBeanServerConnection(
1:cafbf4d:             String user, String password) throws Exception {
1:cafbf4d: 
1:cafbf4d:         return JMXConnectionGetter.mbeanServerConnector.get()
1:cafbf4d:                     .getMBeanServerConnection(user, password);
1:cafbf4d:     }
1:cafbf4d:     
1:cafbf4d:     /**
1:e6a963f:      * Is the JMX connecting using platform JMX.
1:e6a963f:      * @return True jmx connections via the platform server, false remote connections. 
1:e6a963f:      */
1:e6a963f:     protected boolean isPlatformJMXClient() {
1:e6a963f:         return JMXConnectionGetter.mbeanServerConnector.get()
1:e6a963f:             instanceof PlatformConnectionGetter;
1:adb927d:     }
21:adb927d:     
1:a3ffa1e:     /**
1:adb927d:      * Enables Derby's MBeans in the MBeanServer by accessing Derby's 
1:adb927d:      * ManagementMBean. If Derby JMX management has already been enabled, no 
1:251d8da:      * changes will be made. The test fixtures in some subclasses require that
1:adb927d:      * JMX Management is enabled in Derby, hence this method.
1:a3ffa1e:      * 
1:adb927d:      * @throws Exception JMX-related exceptions if an unexpected error occurs.
1:adb927d:      */
1:adb927d:     protected void enableManagement() throws Exception {
1:a3ffa1e:         
1:a3ffa1e:         ObjectName mgmtObjName = getApplicationManagementMBean();
1:a3ffa1e:         
1:adb927d:         // check the status of the management service
1:adb927d:         Boolean active = (Boolean) 
1:e8b3bd1:                 getAttribute(mgmtObjName, "ManagementActive");
1:adb927d: 
1:adb927d:         if (!active.booleanValue()) {
1:adb927d:             // JMX management is not active, so activate it by invoking the
1:adb927d:             // startManagement operation.
1:1e79717:             invokeOperation(mgmtObjName, "startManagement");
1:1e79717: 
1:adb927d:             active = (Boolean) 
1:e8b3bd1:                     getAttribute(mgmtObjName, "ManagementActive");
1:adb927d:         }
1:adb927d:         
1:adb927d:         assertTrue("Failed to activate Derby's JMX management", active);
1:adb927d:     }
1:adb927d:     
1:adb927d:     /**
1:184189f:      * Get all MBeans registered in Derby's domain.
1:184189f:      * @return Set of ObjectNames for all of Derby's registered MBeans.
1:184189f:      * @throws Exception
1:184189f:      */
1:184189f:     protected Set<ObjectName> getDerbyDomainMBeans() throws Exception
1:184189f:     {
1:e8b3bd1:         final ObjectName derbyDomain = new ObjectName("org.apache.derby:*");
1:86ee0a0:         return queryMBeans(derbyDomain);
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Get all MBeans that match the specified name.
1:86ee0a0:      * @param name the name pattern to look for
1:86ee0a0:      * @return a set of names that match
1:86ee0a0:      */
1:86ee0a0:     Set<ObjectName> queryMBeans(final ObjectName name) throws Exception {
1:e8b3bd1:         final MBeanServerConnection serverConn = getMBeanServerConnection(); 
1:e8b3bd1:         
1:a784994:         return AccessController.doPrivileged(
1:a784994:             new PrivilegedExceptionAction<Set<ObjectName>>() {
1:a784994:                 public Set<ObjectName> run() throws IOException {
1:86ee0a0:                     return serverConn.queryNames(name, null);
1:184189f:                }   
1:adb927d:             }
1:392583a:         );   
1:adb927d:     }
1:184189f:     
1:184189f:     /**
1:a3ffa1e:      * Get the ObjectName for the application
1:a3ffa1e:      * created ManagementMBean. The MBean will be
1:a3ffa1e:      * created if it is not already registered.
1:a3ffa1e:      * @throws Exception
1:a3ffa1e:      */
1:a3ffa1e:     protected ObjectName getApplicationManagementMBean() throws Exception
1:a3ffa1e:     {
1:39961b1:         /* prepare the Management mbean, which is (so far) the only MBean that
1:39961b1:          * can be created/registered from a JMX client, and without knowing the
1:39961b1:          * system identifier */
1:392583a:         final ObjectName mgmtObjName 
1:a3ffa1e:                 = new ObjectName("org.apache.derby", "type", "Management");
1:a3ffa1e:         // create/register the MBean. If the same MBean has already been
1:a3ffa1e:         // registered with the MBeanServer, that MBean will be referenced.
1:a3ffa1e:         //ObjectInstance mgmtObj = 
1:392583a:         final MBeanServerConnection serverConn = getMBeanServerConnection();
1:a3ffa1e:         
1:a3ffa1e:         if (!serverConn.isRegistered(mgmtObjName))
1:e8b3bd1:         {       
1:392583a:             AccessController.doPrivileged(
1:e8b3bd1:                 new PrivilegedExceptionAction<Object>() {
1:392583a:                     public Object run() throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, ReflectionException, MBeanException, IOException {
1:392583a:                         serverConn.createMBean(
1:392583a:                                 "org.apache.derby.mbeans.Management", 
1:392583a:                                 mgmtObjName);
1:392583a:                         return null;
1:e8b3bd1:                    }   
1:e8b3bd1:                 }
1:e8b3bd1:             );
1:392583a:         }
1:a3ffa1e:         
1:a3ffa1e:         return mgmtObjName;
1:392583a:     }
1:a3ffa1e:     
1:a3ffa1e:     /**
1:9f69067:      * Get the ObjectName for an MBean registered by Derby for a set of
1:39961b1:      * key properties. The ObjectName has the domain org.apache.derby, and
1:9f69067:      * the key property <code>system</code> will be set to the system identifier
1:9f69067:      * for the Derby system under test (if Derby is running).
1:9f69067:      * @param keyProperties Set of key properties, may be modified by this call.
1:9f69067:      * @return ObjectName to access MBean.
1:9f69067:      */
1:9f69067:     protected ObjectName getDerbyMBeanName(Hashtable<String,String> keyProperties)
1:9f69067:         throws Exception
1:9f69067:     {
1:9f69067:         String systemIdentifier = (String)
1:9f69067:                   getAttribute(getApplicationManagementMBean(), "SystemIdentifier");
1:9f69067:         if (systemIdentifier != null)
1:9f69067:             keyProperties.put("system", systemIdentifier);
1:9f69067:         return new ObjectName("org.apache.derby", keyProperties);
1:9f69067:     }
1:9f69067:     
1:9f69067:     /**
1:251d8da:      * Invokes an operation with no arguments.
1:a3ffa1e:      * @param objName MBean to operate on
1:a3ffa1e:      * @param name Operation name.
1:251d8da:      * @return the value returned by the operation being invoked, or 
1:251d8da:      *         <code>null</code> if there is no return value.
1:a3ffa1e:      */
1:251d8da:     protected Object invokeOperation(ObjectName objName, String name)
1:251d8da:             throws Exception
1:a3ffa1e:     {
1:251d8da:         return invokeOperation(objName, name, new Object[0], new String[0]);
1:251d8da:     }
1:251d8da:     
1:251d8da:     /**
1:251d8da:      * Invokes an operation with arguments.
1:251d8da:      * 
1:251d8da:      * @param objName MBean to operate on
1:251d8da:      * @param name Operation name.
1:251d8da:      * @param params An array containing the parameters to be set when the 
1:251d8da:      *        operation is invoked.
1:251d8da:      * @param sign An array containing the signature of the operation, i.e.
1:251d8da:      *        the types of the parameters.
1:251d8da:      * @return the value returned by the operation being invoked, or 
1:251d8da:      *         <code>null</code> if there is no return value.
1:251d8da:      */
1:e8b3bd1:     protected Object invokeOperation(final ObjectName objName, 
1:e8b3bd1:                                      final String name, 
1:e8b3bd1:                                      final Object[] params, 
1:e8b3bd1:                                      final String[] sign)
1:251d8da:             throws Exception
1:251d8da:     {
1:e8b3bd1:         final MBeanServerConnection jmxConn = getMBeanServerConnection();
1:e8b3bd1:         
1:e8b3bd1:         return AccessController.doPrivileged(
1:e8b3bd1:             new PrivilegedExceptionAction<Object>() {
1:e8b3bd1:                 public Object run() throws InstanceNotFoundException, MBeanException, ReflectionException, IOException  {
1:e8b3bd1:                     return jmxConn.invoke(objName, name,
1:e8b3bd1:                             params, sign);
1:e8b3bd1:                 }
1:e8b3bd1:             }
1:e8b3bd1:         );
1:a3ffa1e:     }
1:a3ffa1e: 
1:a3ffa1e:     /**
1:86ee0a0:      * Set the value of an attribute via JMX.
1:86ee0a0:      *
1:86ee0a0:      * @param objName the name of the object that has the attribute
1:86ee0a0:      * @param name the name of the attribute
1:86ee0a0:      * @param value the new value of the attribute
1:86ee0a0:      * @throws Exception if an error occurs when changing the attribute
1:86ee0a0:      */
1:86ee0a0:     void setAttribute(final ObjectName objName, String name, Object value)
1:86ee0a0:             throws Exception {
1:86ee0a0:         final MBeanServerConnection jmxConn = getMBeanServerConnection();
1:86ee0a0:         final Attribute attribute = new Attribute(name, value);
1:86ee0a0:         AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
1:86ee0a0:             @Override
1:86ee0a0:             public Void run() throws Exception {
1:86ee0a0:                 jmxConn.setAttribute(objName, attribute);
1:86ee0a0:                 return null;
1:86ee0a0:             }
1:86ee0a0:         });
1:86ee0a0:     }
1:a3ffa1e:     
1:adb927d:     /**
1:adb927d:      * Gets the value of a given attribute that is exposed by the MBean 
1:adb927d:      * represented by the given object name.
1:adb927d:      * @param objName the object name defining a specific MBean instance
1:adb927d:      * @param name the name of the attribute
1:adb927d:      * @return the value of the attribute
1:adb927d:      * @throws java.lang.Exception if an unexpected error occurs
1:adb927d:      */
1:392583a:     protected Object getAttribute(final ObjectName objName, final String name) 
1:adb927d:             throws Exception {
1:392583a:         
1:392583a:         final MBeanServerConnection jmxConn = getMBeanServerConnection();
1:adb927d:         
1:392583a:         return AccessController.doPrivileged(
1:392583a:             new PrivilegedExceptionAction<Object>() {
1:392583a:                 public Object run() throws AttributeNotFoundException, InstanceNotFoundException, MBeanException, ReflectionException, IOException {
1:392583a:                     return jmxConn.getAttribute(objName, name);
1:392583a:                 }
1:392583a:             }
1:392583a:         );
1:a3ffa1e:     }
1:adb927d:     
1:a3ffa1e:     protected void assertBooleanAttribute(boolean expected,
1:a3ffa1e:             ObjectName objName, String name) throws Exception
1:a3ffa1e:     {
1:a3ffa1e:         Boolean bool = (Boolean) getAttribute(objName, name);
1:a3ffa1e:         assertNotNull(bool);
1:a3ffa1e:         assertEquals(expected, bool.booleanValue());
1:a3ffa1e:     }
1:a3ffa1e:     
1:251d8da:     protected void assertIntAttribute(int expected,
1:251d8da:             ObjectName objName, String name) throws Exception
1:251d8da:     {
1:251d8da:         Integer integer = (Integer) getAttribute(objName, name);
1:251d8da:         assertNotNull(integer);
1:251d8da:         assertEquals(expected, integer.intValue());
1:251d8da:     }
1:251d8da:     
1:d0a0144:     protected void assertLongAttribute(int expected,
1:d0a0144:             ObjectName objName, String name) throws Exception
1:d0a0144:     {
1:d0a0144:         Long longNumber = (Long) getAttribute(objName, name);
1:d0a0144:         assertNotNull(longNumber);
1:d0a0144:         assertEquals(expected, longNumber.longValue());
1:d0a0144:     }
1:d0a0144:     
1:251d8da:     protected void assertStringAttribute(String expected,
1:251d8da:             ObjectName objName, String name) throws Exception
1:251d8da:     {
1:251d8da:         String str = (String) getAttribute(objName, name);
1:251d8da:         assertNotNull(str);
1:251d8da:         assertEquals(expected, str);
1:251d8da:     }
1:251d8da:     
1:adb927d:     /**
1:adb927d:      * Checks the readability and type of an attribute value that is supposed 
1:adb927d:      * to be a boolean.
1:adb927d:      * @param objName the object name representing the MBean instance from which
1:adb927d:      *        the attribute value will be retreived
1:adb927d:      * @param name the name of the attribute
1:adb927d:      * @throws java.lang.Exception if an unexpected error occurs
1:adb927d:      */
1:adb927d:     protected void checkBooleanAttributeValue(ObjectName objName, String name) 
1:adb927d:             throws Exception {
1:adb927d:         
1:adb927d:         Object value = getAttribute(objName, name);
1:adb927d:         boolean unboxedValue = ((Boolean)value).booleanValue();
1:adb927d:         println(name + " = " + unboxedValue); // for debugging
1:a3ffa1e:     }
1:adb927d:     
1:adb927d:     /**
1:adb927d:      * Checks the readability and type of an attribute value that is supposed 
1:adb927d:      * to be an int.
1:adb927d:      * @param objName the object name representing the MBean instance from which
1:adb927d:      *        the attribute value will be retreived
1:adb927d:      * @param name the name of the attribute
1:adb927d:      * @throws java.lang.Exception if an unexpected error occurs
1:adb927d:      */
1:adb927d:     protected void checkIntAttributeValue(ObjectName objName, String name) 
1:adb927d:             throws Exception {
1:adb927d:         
1:adb927d:         Object value = getAttribute(objName, name);
1:adb927d:         int unboxedValue = ((Integer)value).intValue();
1:adb927d:         println(name + " = " + unboxedValue); // for debugging
1:adb927d:     }
1:adb927d:     
1:adb927d:     /**
1:adb927d:      * Checks the readability and type of an attribute value that is supposed 
1:d0a0144:      * to be a long.
1:d0a0144:      * @param objName the object name representing the MBean instance from which
1:d0a0144:      *        the attribute value will be retreived
1:d0a0144:      * @param name the name of the attribute
1:d0a0144:      * @throws java.lang.Exception if an unexpected error occurs
1:d0a0144:      */
1:d0a0144:     protected void checkLongAttributeValue(ObjectName objName, String name) 
1:d0a0144:             throws Exception {
1:d0a0144:         
1:d0a0144:         Object value = getAttribute(objName, name);
1:d0a0144:         long unboxedValue = ((Long)value).longValue();
1:d0a0144:         println(name + " = " + unboxedValue); // for debugging
1:d0a0144:     }
1:d0a0144:     
1:d0a0144:     /**
1:d0a0144:      * Checks the readability and type of an attribute value that is supposed 
1:adb927d:      * to be a String.
1:adb927d:      * @param objName the object name representing the MBean instance from which
1:adb927d:      *        the attribute value will be retreived
1:adb927d:      * @param name the name of the attribute
1:adb927d:      * @throws java.lang.Exception if an unexpected error occurs
1:adb927d:      */
1:adb927d:     protected void checkStringAttributeValue(ObjectName objName, String name) 
1:adb927d:             throws Exception {
1:adb927d:         
1:adb927d:         String value = (String)getAttribute(objName, name);
1:adb927d:         println(name + " = " + value); // for debugging
1:251d8da:     }
1:251d8da:     
1:adb927d: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      * configuration, and with JMX security (authentication and SSL) disabled.
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86ee0a0
/////////////////////////////////////////////////////////////////////////
1: import javax.management.Attribute;
/////////////////////////////////////////////////////////////////////////
1:         return queryMBeans(derbyDomain);
1:     }
1: 
1:     /**
1:      * Get all MBeans that match the specified name.
1:      * @param name the name pattern to look for
1:      * @return a set of names that match
1:      */
1:     Set<ObjectName> queryMBeans(final ObjectName name) throws Exception {
1:                     return serverConn.queryNames(name, null);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set the value of an attribute via JMX.
1:      *
1:      * @param objName the name of the object that has the attribute
1:      * @param name the name of the attribute
1:      * @param value the new value of the attribute
1:      * @throws Exception if an error occurs when changing the attribute
1:      */
1:     void setAttribute(final ObjectName objName, String name, Object value)
1:             throws Exception {
1:         final MBeanServerConnection jmxConn = getMBeanServerConnection();
1:         final Attribute attribute = new Attribute(name, value);
1:         AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
1:             @Override
1:             public Void run() throws Exception {
1:                 jmxConn.setAttribute(objName, attribute);
1:                 return null;
1:             }
1:         });
1:     }
commit:a784994
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(
1:             new PrivilegedExceptionAction<Set<ObjectName>>() {
1:                 public Set<ObjectName> run() throws IOException {
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite outerSuite = new BaseTestSuite(suiteName);
1:         Test platform = new BaseTestSuite(testClass,  suiteName + ":platform");
/////////////////////////////////////////////////////////////////////////
1:         Test suite = new BaseTestSuite(testClass,  suiteName + ":client");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1e79717
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             invokeOperation(mgmtObjName, "startManagement");
1: 
commit:d7b5f4a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:93cf8fd
/////////////////////////////////////////////////////////////////////////
1:                 
/////////////////////////////////////////////////////////////////////////
commit:e8b3bd1
/////////////////////////////////////////////////////////////////////////
1:                 getAttribute(mgmtObjName, "ManagementActive");
/////////////////////////////////////////////////////////////////////////
1:                     getAttribute(mgmtObjName, "ManagementActive");
/////////////////////////////////////////////////////////////////////////
1:         final ObjectName derbyDomain = new ObjectName("org.apache.derby:*");
1:         final MBeanServerConnection serverConn = getMBeanServerConnection(); 
1:         
0:         return  (Set<ObjectName>) AccessController.doPrivileged(
1:             new PrivilegedExceptionAction<Object>() {
0:                 public Object run() throws IOException {
0:                     return serverConn.queryNames(derbyDomain, null);
1:                }   
1:             }
1:         );   
/////////////////////////////////////////////////////////////////////////
1:         {       
/////////////////////////////////////////////////////////////////////////
1:     protected Object invokeOperation(final ObjectName objName, 
1:                                      final String name, 
1:                                      final Object[] params, 
1:                                      final String[] sign)
1:         final MBeanServerConnection jmxConn = getMBeanServerConnection();
1:         
1:         return AccessController.doPrivileged(
1:             new PrivilegedExceptionAction<Object>() {
1:                 public Object run() throws InstanceNotFoundException, MBeanException, ReflectionException, IOException  {
1:                     return jmxConn.invoke(objName, name,
1:                             params, sign);
1:                 }
1:             }
1:         );
commit:392583a
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.security.AccessController;
1: import java.security.PrivilegedExceptionAction;
1: import javax.management.AttributeNotFoundException;
1: import javax.management.InstanceAlreadyExistsException;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanException;
1: import javax.management.MBeanRegistrationException;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.ReflectionException;
/////////////////////////////////////////////////////////////////////////
1:                 
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected static String[] getCommandLineProperties(boolean authentication)
/////////////////////////////////////////////////////////////////////////
1:         final ObjectName mgmtObjName 
1:         final MBeanServerConnection serverConn = getMBeanServerConnection();
1:             AccessController.doPrivileged(
1:                 new PrivilegedExceptionAction<Object>() {
1:                     public Object run() throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, ReflectionException, MBeanException, IOException {
1:                         serverConn.createMBean(
1:                                 "org.apache.derby.mbeans.Management", 
1:                                 mgmtObjName);
1:                         return null;
1:                    }   
1:                 }
1:             );
/////////////////////////////////////////////////////////////////////////
1:     protected Object getAttribute(final ObjectName objName, final String name) 
1:         final MBeanServerConnection jmxConn = getMBeanServerConnection();
1:         
1:         return AccessController.doPrivileged(
0:             new PrivilegedExceptionAction<Object>() {
1:                 public Object run() throws AttributeNotFoundException, InstanceNotFoundException, MBeanException, ReflectionException, IOException {
1:                     return jmxConn.getAttribute(objName, name);
1:                 }
1:             }
1:         );
commit:cafbf4d
/////////////////////////////////////////////////////////////////////////
1:      
/////////////////////////////////////////////////////////////////////////
1:     protected static Test suite(Class<? extends MBeanTest> testClass, String suiteName) {
/////////////////////////////////////////////////////////////////////////
1:                         getCommandLineProperties(false), // need to set up JMX in JVM
/////////////////////////////////////////////////////////////////////////
1:          * Note that the remote server will be running with a security
1:          * manager (by default) if testing with jars.
1:        
/////////////////////////////////////////////////////////////////////////
0:     private static String[] getCommandLineProperties(boolean authentication)
1:         list.add("com.sun.management.jmxremote.authenticate=" +
1:                 Boolean.toString(authentication));
1:         
1:         if (authentication) {
1:             list.add("com.sun.management.jmxremote.password.file=" +
1:                     "extin/jmx.password");
1:             list.add("com.sun.management.jmxremote.access.file=" +
1:                     "extin/jmx.access");
1:         }
/////////////////////////////////////////////////////////////////////////
1:      * Obtains a connection to an MBean server with
1:      * no user name or password,
1:      * opens a single connection for the lifetime
1:      * of the fixture
/////////////////////////////////////////////////////////////////////////
1:             JMXConnectionGetter.mbeanServerConnector.get()
1:                 .getMBeanServerConnection(null, null);
1:      * Obtains a connection to an MBean server with
1:      * a user name or password. A new connection is
1:      * returned for each call.
1:      */
1:     protected MBeanServerConnection getMBeanServerConnection(
1:             String user, String password) throws Exception {
1: 
1:         return JMXConnectionGetter.mbeanServerConnector.get()
1:                     .getMBeanServerConnection(user, password);
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     
commit:d0a0144
/////////////////////////////////////////////////////////////////////////
1:     protected void assertLongAttribute(int expected,
1:             ObjectName objName, String name) throws Exception
1:     {
1:         Long longNumber = (Long) getAttribute(objName, name);
1:         assertNotNull(longNumber);
1:         assertEquals(expected, longNumber.longValue());
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:      * to be a long.
1:      * @param objName the object name representing the MBean instance from which
1:      *        the attribute value will be retreived
1:      * @param name the name of the attribute
1:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
1:     protected void checkLongAttributeValue(ObjectName objName, String name) 
1:             throws Exception {
1:         
1:         Object value = getAttribute(objName, name);
1:         long unboxedValue = ((Long)value).longValue();
1:         println(name + " = " + unboxedValue); // for debugging
1:     }
1:     
1:     /**
1:      * Checks the readability and type of an attribute value that is supposed 
commit:251d8da
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedReader;
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.InputStreamReader;
0: import java.io.PrintWriter;
0: import java.io.StringReader;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:  * testing of Derby's MBeans. Requires J2SE 5.0 or higher (platform management).
1:  * 
1:  * Subclasses may require JDBC access for verifying values returned by the
1:  * MBeans, which is why this class extends BaseJDBCTestCase instead of 
1:  * BaseTestCase.
1: abstract class MBeanTest extends BaseJDBCTestCase {
/////////////////////////////////////////////////////////////////////////
1:      * Will set up remote JMX using the port defined by the current test 
0:      * configuration, and with JMX security (authentication & SSL) disabled.
/////////////////////////////////////////////////////////////////////////
1:      * changes will be made. The test fixtures in some subclasses require that
/////////////////////////////////////////////////////////////////////////
1:      * Invokes an operation with no arguments.
1:      * @return the value returned by the operation being invoked, or 
1:      *         <code>null</code> if there is no return value.
1:     protected Object invokeOperation(ObjectName objName, String name)
1:             throws Exception
1:         return invokeOperation(objName, name, new Object[0], new String[0]);
1:     }
1:     
1:     /**
1:      * Invokes an operation with arguments.
1:      * 
1:      * @param objName MBean to operate on
1:      * @param name Operation name.
1:      * @param params An array containing the parameters to be set when the 
1:      *        operation is invoked.
1:      * @param sign An array containing the signature of the operation, i.e.
1:      *        the types of the parameters.
1:      * @return the value returned by the operation being invoked, or 
1:      *         <code>null</code> if there is no return value.
1:      */
0:     protected Object invokeOperation(ObjectName objName, 
0:                                      String name, 
0:                                      Object[] params, 
0:                                      String[] sign)
1:             throws Exception
1:     {
0:         return getMBeanServerConnection().invoke(
0:                 params, sign);
/////////////////////////////////////////////////////////////////////////
1:     protected void assertIntAttribute(int expected,
1:             ObjectName objName, String name) throws Exception
1:     {
1:         Integer integer = (Integer) getAttribute(objName, name);
1:         assertNotNull(integer);
1:         assertEquals(expected, integer.intValue());
1:     }
1:     
1:     protected void assertStringAttribute(String expected,
1:             ObjectName objName, String name) throws Exception
1:     {
1:         String str = (String) getAttribute(objName, name);
1:         assertNotNull(str);
1:         assertEquals(expected, str);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Calls the public method <code>getInfo</code> of the sysinfo tool within
0:      * this JVM and returns a <code>BufferedReader</code> for reading its 
0:      * output. This is useful for obtaining system information that could be 
0:      * used to verify (for example) values returned by Derby MBeans.
1:      * 
0:      * @return a buffering character-input stream containing the output from
0:      *         sysinfo
0:      * @see org.apache.derby.tools.sysinfo#getInfo(java.io.PrintWriter out)
1:      */
0:     protected BufferedReader getSysinfoLocally() {
0:         ByteArrayOutputStream byteStream = new ByteArrayOutputStream(20 * 1024);
0:         PrintWriter pw = new PrintWriter(byteStream, true); // autoflush
0:         org.apache.derby.tools.sysinfo.getInfo(pw);
0:         pw.flush();
0:         pw.close();
0:         byte[] outBytes = byteStream.toByteArray();
0:         BufferedReader sysinfoOutput = new BufferedReader(
0:                     new InputStreamReader(
0:                             new ByteArrayInputStream(outBytes)));
0:         return sysinfoOutput;
1:     }
1:     
1:     /**
0:      * <p>Calls the public method <code>getSysInfo()</code> of the Network 
0:      * Server instance associated with the current test configuration and 
0:      * returns the result as a BufferedReader, making it easy to analyse the 
0:      * output line by line.</p>
1:      * 
0:      * <p>This is useful for obtaining system information that could be 
0:      * used to verify (for example) values returned by Derby MBeans.</p>
1:      * 
0:      * @return a buffering character-input stream containing the output from 
0:      *         the server's sysinfo.
0:      * @see org.apache.derby.drda.NetworkServerControl#getSysinfo()
1:      */
0:     protected BufferedReader getSysinfoFromServer() throws Exception {
1:         
0:         return new BufferedReader(new StringReader(
0:                 NetworkServerTestSetup.getNetworkServerControl().getSysinfo()));
1:     }
commit:39961b1
/////////////////////////////////////////////////////////////////////////
1:         /* prepare the Management mbean, which is (so far) the only MBean that
1:          * can be created/registered from a JMX client, and without knowing the
1:          * system identifier */
/////////////////////////////////////////////////////////////////////////
1:      * key properties. The ObjectName has the domain org.apache.derby, and
commit:a63ab5e
/////////////////////////////////////////////////////////////////////////
1:                         true   // wait for the server to start properly
commit:3b904d7
/////////////////////////////////////////////////////////////////////////
1:         if (jmxConnection != null) {
1:            JMXConnectionGetter.mbeanServerConnector.get().close(jmxConnection);
1:            jmxConnection = null;
1:         }
commit:e6a963f
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * JMX connection to use throughout the instance.
1:      */
1:     private MBeanServerConnection jmxConnection;
1:     
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         
0:         // Does not appear to be a method to close!
0:         jmxConnection = null;
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         if (jmxConnection == null)
1:             jmxConnection = 
0:             JMXConnectionGetter.mbeanServerConnector.get().getMBeanServerConnection();
1:         return jmxConnection;
1:     }
1:     
1:     /**
1:      * Is the JMX connecting using platform JMX.
1:      * @return True jmx connections via the platform server, false remote connections. 
1:      */
1:     protected boolean isPlatformJMXClient() {
1:         return JMXConnectionGetter.mbeanServerConnector.get()
1:             instanceof PlatformConnectionGetter;
commit:007d9ee
/////////////////////////////////////////////////////////////////////////
0:         Test platform = new TestSuite(testClass,  suiteName + ":platform");
1:         
1:         // Start the network server to ensure Derby is running and
1:         // all the MBeans are running.
1:         platform = TestConfiguration.clientServerDecorator(platform);
1:         platform = JMXConnectionDecorator.platformMBeanServer(platform);
1:         
0:         platform = SecurityManagerSetup.noSecurityManager(platform);
1:         
1:         // Set of tests that run within the same virtual machine using
1:         // the platform MBeanServer directly.
1:         outerSuite.addTest(platform);
commit:b679de1
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
commit:9f69067
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1:      * Get the ObjectName for an MBean registered by Derby for a set of
0:      * key properties. The ObjectName has the org.apache.derby and
1:      * the key property <code>system</code> will be set to the system identifier
1:      * for the Derby system under test (if Derby is running).
1:      * @param keyProperties Set of key properties, may be modified by this call.
1:      * @return ObjectName to access MBean.
1:      */
1:     protected ObjectName getDerbyMBeanName(Hashtable<String,String> keyProperties)
1:         throws Exception
1:     {
1:         String systemIdentifier = (String)
1:                   getAttribute(getApplicationManagementMBean(), "SystemIdentifier");
1:         if (systemIdentifier != null)
1:             keyProperties.put("system", systemIdentifier);
1:         return new ObjectName("org.apache.derby", keyProperties);
1:     }
1:     
1:     /**
commit:ffd9cf9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         TestSuite outerSuite = new TestSuite(suiteName);
1:         
0:         // TODO: Run with no security for the moment, requires changes in the
0:         // test policy files that may clash with a couple of outstanding patches.
0:         Test platform = SecurityManagerSetup.noSecurityManager(
0:                 new TestSuite(testClass,  suiteName + ":platform"))
0:                 ;
0:         platform = JMXConnectionDecorator.platformMBeanServer(platform);
0:         // TODO: Disabled - failing at the moment when Derby has not been started.
0:         //outerSuite.addTest(platform);
1:         
0:         Test suite = new TestSuite(testClass,  suiteName + ":client");
/////////////////////////////////////////////////////////////////////////
1:         outerSuite.addTest(TestConfiguration.defaultServerDecorator(testSetup));
1:         
1:         return outerSuite;
/////////////////////////////////////////////////////////////////////////
commit:498f26e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseTestSetup;
/////////////////////////////////////////////////////////////////////////
0:         Test suite = new TestSuite(testClass,  suiteName);
1:         
1:         // Set up to get JMX connections using remote JMX
1:         suite = JMXConnectionDecorator.remoteNoSecurity(suite);
/////////////////////////////////////////////////////////////////////////
0:      * Obtains a connection to an MBean server. Assumes th
1:             throws Exception {
1:         
0:         return JMXConnectionGetter.mbeanServerConnector.get().getMBeanServerConnection();
commit:184189f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:      * Get all MBeans registered in Derby's domain.
1:      * @return Set of ObjectNames for all of Derby's registered MBeans.
1:      * @throws Exception
1:      */
1:     protected Set<ObjectName> getDerbyDomainMBeans() throws Exception
1:     {
0:         ObjectName derbyDomain = new ObjectName("org.apache.derby:*");
0:         return  (Set<ObjectName>)
0:             getMBeanServerConnection().queryNames(derbyDomain, null);
1:     }
1:     
1:     /**
commit:a3ffa1e
/////////////////////////////////////////////////////////////////////////
0: import java.io.InputStream;
1: import java.util.ArrayList;
0: import javax.management.InstanceNotFoundException;
0: import javax.management.JMException;
0: import javax.management.MBeanException;
0: import javax.management.ReflectionException;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
/////////////////////////////////////////////////////////////////////////
0:     protected static Test suite(Class testClass, String suiteName) {
1:         
0:         // TODO -
0:         // Check for J2SE 5.0 or better? Or java.lang.management.ManagementFactory?
0:         // Older VMs will get UnsupportedClassVersionError anyway...
1:         
1:         // Create a suite of all "test..." methods in the class.
0:         TestSuite suite = new TestSuite(testClass,  suiteName);
1: 
1:         /* Connecting to an MBean server using a URL requires setting up remote
1:          * JMX in the JVM to which we want to connect. This is usually done by
1:          * setting a few system properties at JVM startup.
1:          * A quick solution is to set up a new network server JVM with
1:          * the required jmx properties.
1:          * A future improvement could be to fork a new JVM for embedded (?).
1:          *
1:          * This requires that the default security policy of the network server
1:          * includes the permissions required to perform the actions of these 
1:          * tests. Otherwise, we'd probably have to supply a custom policy file
1:          * and specify this using additional command line properties at server 
1:          * startup.
1:          */
1:         NetworkServerTestSetup networkServerTestSetup = 
1:                 new NetworkServerTestSetup (
1:                         suite, // run all tests in this class in the same setup
0:                         getCommandLineProperties(), // need to set up JMX in JVM
1:                         new String[0], // no server arguments needed
0:                         true,   // wait for the server to start properly
0:                         new InputStream[1] // no need to check server output
1:                 );
1: 
1:         /* Since the server will be started in a new process we need "execute" 
1:          * FilePermission on all files (at least Java executables)...
1:          * Will run without SecurityManager for now, but could probably add a 
1:          * JMX specific policy file later. Or use the property trick reported
1:          * on derby-dev 2008-02-26 and add the permission to the generic 
1:          * policy.
1:          */
1:         Test testSetup = 
1:                 SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
1:         // this decorator makes sure the suite is empty if this configration
1:         // does not support the network server:
0:         return TestConfiguration.defaultServerDecorator(testSetup);
1:     }
1:     
1:     // ---------- UTILITY METHODS ------------
1:     
1:     /**
1:      * Returns a set of startup properties suitable for VersionMBeanTest.
1:      * These properties are used to configure JMX in a different JVM.
0:      * Will set up remote JMX using the port 9999 (TODO: make this 
0:      * configurable), and with JMX security (authentication & SSL) disabled.
1:      * 
1:      * @return a set of Java system properties to be set on the command line
1:      *         when starting a new JVM in order to enable remote JMX.
1:      */
0:     private static String[] getCommandLineProperties()
1:     {
1:         ArrayList<String> list = new ArrayList<String>();
1:         list.add("com.sun.management.jmxremote.port=" 
1:                 + TestConfiguration.getCurrent().getJmxPort());
0:         list.add("com.sun.management.jmxremote.authenticate=false");
1:         list.add("com.sun.management.jmxremote.ssl=false");
1:         String[] result = new String[list.size()];
1:         list.toArray(result);
1:         return result;
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         ObjectName mgmtObjName = getApplicationManagementMBean();
1:         
0:         MBeanServerConnection serverConn = getMBeanServerConnection();
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Get the ObjectName for the application
1:      * created ManagementMBean. The MBean will be
1:      * created if it is not already registered.
0:      * @return
1:      * @throws Exception
1:      */
1:     protected ObjectName getApplicationManagementMBean() throws Exception
1:     {
0:         // prepare the Management mbean. Use the same ObjectName that Derby uses
0:         // by default, to avoid creating multiple instances of the same bean
0:         ObjectName mgmtObjName 
1:                 = new ObjectName("org.apache.derby", "type", "Management");
1:         // create/register the MBean. If the same MBean has already been
1:         // registered with the MBeanServer, that MBean will be referenced.
1:         //ObjectInstance mgmtObj = 
0:         MBeanServerConnection serverConn = getMBeanServerConnection();
1:         
1:         if (!serverConn.isRegistered(mgmtObjName))
1:         {
1:         
0:             serverConn.createMBean(
0:                     "org.apache.derby.mbeans.Management", 
0:                     mgmtObjName);
1:         }
1:         
1:         return mgmtObjName;
1:     }
1:     
1:     /**
0:      * Invoke an operation with no arguments.
1:      * @param objName MBean to operate on
1:      * @param name Operation name.
1:      */
0:     protected void invokeOperation(ObjectName objName, String name)
0:         throws Exception
1:     {
0:         getMBeanServerConnection().invoke(
0:                 objName, 
0:                 name, 
0:                 new Object[0], new String[0]); // no arguments
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     protected void assertBooleanAttribute(boolean expected,
1:             ObjectName objName, String name) throws Exception
0:     {
1:         Boolean bool = (Boolean) getAttribute(objName, name);
1:         assertNotNull(bool);
1:         assertEquals(expected, bool.booleanValue());
1:     }
1:     
commit:adb927d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.MBeanTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.management;
1: 
0: import java.io.IOException;
0: import java.net.MalformedURLException;
1: 
0: import javax.management.InstanceAlreadyExistsException;
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectName;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
1: 
0: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Class that provided utility methods for the
0:  * testing of Derby's MBeans.
1:  */
0: abstract class MBeanTest extends BaseTestCase {
1:     
1:     public MBeanTest(String name) {
1:         super(name);
1:     }
1:     
1:   
1:     /**
1:      * Setup code to be run before each test fixture. This method will make
1:      * sure that JMX Management is enabled in Derby, so that the test fixtures
1:      * can access Derby's MBeans without problems.
0:      * 
1:      * @throws java.lang.Exception if an unexpected Exception occurs
1:      */
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         enableManagement();
1:     }
1:     
1:     /**
0:      * Creates a URL for connecting to the platform MBean server on the host
0:      * specified by the network server hostname of this test configuration.
0:      * The JMX port number used is also retreived from the test configuration.
0:      * @return a service URL for connecting to the platform MBean server
0:      * @throws MalformedURLException if the URL is malformed
1:      */
0:     private JMXServiceURL getJmxUrl() throws MalformedURLException {
1:         
0:         // NOTE: This hostname is only valid in a client/server configuration
0:         String hostname = TestConfiguration.getCurrent().getHostName();
0:         //String hostname = TestConfiguration.DEFAULT_HOSTNAME; // for embedded?
0:         int jmxPort = TestConfiguration.getCurrent().getJmxPort();
1:                 
0:         /* "jmxrmi" is the name of the RMI server connector of the platform
0:          * MBean server, which is used by Derby */
0:         JMXServiceURL url = new JMXServiceURL(
0:                 "service:jmx:rmi:///jndi/rmi://" 
0:                     + hostname
0:                     + ":" + jmxPort + "/jmxrmi");
1:         
0:         return url;
1:     }
1:     
1:     /**
0:      * Creates a client connector for JMX and uses this to obtain a connection
0:      * to an MBean server. This method assumes that JMX security has been
0:      * disabled, meaning that authentication credentials and SSL configuration 
0:      * details are not supplied to the MBeanServer.
0:      * 
1:      * @return a plain connection to an MBean server
0:      * @throws MalformedURLException if the JMX Service URL used is invalid
0:      * @throws IOException if connecting to the MBean server fails
1:      */
1:     protected MBeanServerConnection getMBeanServerConnection() 
0:             throws MalformedURLException, IOException {
1:                 
0:         // assumes that JMX authentication and SSL is not required (hence null)
0:         JMXConnector jmxc = JMXConnectorFactory.connect(getJmxUrl(), null);
0:         return jmxc.getMBeanServerConnection();
1:     }
1:     
1:     /**
1:      * Enables Derby's MBeans in the MBeanServer by accessing Derby's 
1:      * ManagementMBean. If Derby JMX management has already been enabled, no 
0:      * changes will be made. The test fixtures in this class require that
1:      * JMX Management is enabled in Derby, hence this method.
0:      * 
1:      * @throws Exception JMX-related exceptions if an unexpected error occurs.
1:      */
1:     protected void enableManagement() throws Exception {
0:         // prepare the Management mbean. Use the same ObjectName that Derby uses
0:         // by default, to avoid creating multiple instances of the same bean
0:         ObjectName mgmtObjName 
0:                 = new ObjectName("org.apache.derby", "type", "Management");
0:         // create/register the MBean. If the same MBean has already been
0:         // registered with the MBeanServer, that MBean will be referenced.
0:         //ObjectInstance mgmtObj = 
0:         MBeanServerConnection serverConn = getMBeanServerConnection();
1:         
0:         try {
0:             serverConn.createMBean("org.apache.derby.mbeans.Management", 
0:                     mgmtObjName);
0:         } catch (InstanceAlreadyExistsException e) {
0:             // Derby's ManagementMBean has already been created
1:         }
1:         // check the status of the management service
1:         Boolean active = (Boolean) 
0:                 serverConn.getAttribute(mgmtObjName, "ManagementActive");
1: 
1:         if (!active.booleanValue()) {
1:             // JMX management is not active, so activate it by invoking the
1:             // startManagement operation.
0:             serverConn.invoke(
0:                     mgmtObjName, 
0:                     "startManagement", 
0:                     new Object[0], new String[0]); // no arguments
1:             active = (Boolean) 
0:                     serverConn.getAttribute(mgmtObjName, "ManagementActive");
1:         }
1:         
1:         assertTrue("Failed to activate Derby's JMX management", active);
1:     }
1:     
1:     /**
1:      * Gets the value of a given attribute that is exposed by the MBean 
1:      * represented by the given object name.
1:      * @param objName the object name defining a specific MBean instance
1:      * @param name the name of the attribute
1:      * @return the value of the attribute
1:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
0:     protected Object getAttribute(ObjectName objName, String name) 
1:             throws Exception {
1:         
0:         return getMBeanServerConnection().getAttribute(objName, name);
1:     }
1:     
1:     /**
1:      * Checks the readability and type of an attribute value that is supposed 
1:      * to be a boolean.
1:      * @param objName the object name representing the MBean instance from which
1:      *        the attribute value will be retreived
1:      * @param name the name of the attribute
1:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
1:     protected void checkBooleanAttributeValue(ObjectName objName, String name) 
1:             throws Exception {
1:         
1:         Object value = getAttribute(objName, name);
1:         boolean unboxedValue = ((Boolean)value).booleanValue();
1:         println(name + " = " + unboxedValue); // for debugging
1:     }
1:     
1:     /**
1:      * Checks the readability and type of an attribute value that is supposed 
1:      * to be an int.
1:      * @param objName the object name representing the MBean instance from which
1:      *        the attribute value will be retreived
1:      * @param name the name of the attribute
1:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
1:     protected void checkIntAttributeValue(ObjectName objName, String name) 
1:             throws Exception {
1:         
1:         Object value = getAttribute(objName, name);
1:         int unboxedValue = ((Integer)value).intValue();
1:         println(name + " = " + unboxedValue); // for debugging
1:     }
1:     
1:     /**
1:      * Checks the readability and type of an attribute value that is supposed 
1:      * to be a String.
1:      * @param objName the object name representing the MBean instance from which
1:      *        the attribute value will be retreived
1:      * @param name the name of the attribute
1:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
1:     protected void checkStringAttributeValue(ObjectName objName, String name) 
1:             throws Exception {
1:         
1:         String value = (String)getAttribute(objName, name);
1:         println(name + " = " + value); // for debugging
1:     }
1: }
============================================================================