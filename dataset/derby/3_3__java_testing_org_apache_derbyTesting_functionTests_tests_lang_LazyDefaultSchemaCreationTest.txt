1:4d8deb6: /*
1:4d8deb6:  * Licensed to the Apache Software Foundation (ASF) under one
1:4d8deb6:  * or more contributor license agreements.  See the NOTICE file
1:4d8deb6:  * distributed with this work for additional information
1:4d8deb6:  * regarding copyright ownership.  The ASF licenses this file
1:4d8deb6:  * to you under the Apache License, Version 2.0 (the
1:4d8deb6:  * "License"); you may not use this file except in compliance
1:4d8deb6:  * with the License.  You may obtain a copy of the License at
1:4d8deb6:  *
1:4d8deb6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4d8deb6:  *
1:4d8deb6:  * Unless required by applicable law or agreed to in writing,
1:4d8deb6:  * software distributed under the License is distributed on an
1:4d8deb6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4d8deb6:  * KIND, either express or implied.  See the License for the
1:4d8deb6:  * specific language governing permissions and limitations
1:4d8deb6:  * under the License.
1:4d8deb6:  */
1:4d8deb6: 
1:4d8deb6: package org.apache.derbyTesting.functionTests.tests.lang;
1:4d8deb6: 
1:1ae02c9: import java.sql.Connection;
1:4d8deb6: import java.sql.SQLException;
1:4d8deb6: import java.sql.Statement;
1:4d8deb6: import java.util.Properties;
1:4d8deb6: import junit.framework.Test;
1:4d8deb6: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:a9d7173: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:4d8deb6: 
1:4d8deb6: /**
1:4d8deb6:  * Tests the lazy creation functionality of default schema: the schema
1:4d8deb6:  * is only first created when the first database object is created in
1:4d8deb6:  * the schema.
1:4d8deb6:  */
1:4d8deb6: public class LazyDefaultSchemaCreationTest extends BaseJDBCTestCase {
1:4d8deb6: 
1:4d8deb6:     final private static String LOCK_TIMEOUT = "40XL1";
1:4d8deb6: 
1:4d8deb6:     /**
1:4d8deb6:      * Creates a new {@code LazyDefaultSchemaCreationTest} instance.
1:4d8deb6:      *
1:4d8deb6:      * @param name the name of the test
1:4d8deb6:      */
1:4d8deb6:     public LazyDefaultSchemaCreationTest(String name) {
1:4d8deb6:         super(name);
1:4d8deb6:     }
1:4d8deb6: 
1:4d8deb6: 
1:9e04f69:     /**
1:4d8deb6:      * Reproduces hang seen in DERBY-48
1:4d8deb6:      */
1:4d8deb6:     public void testDerby48testNewSchemaHang () throws SQLException
1:4d8deb6:     {
1:4d8deb6:         Connection c1 = openUserConnection("newuser");
1:4d8deb6:         c1.setAutoCommit(false);
1:4d8deb6:         Statement s1 = c1.createStatement();
1:4d8deb6: 
1:4d8deb6:         // Will auto-create schema NEWUSER:
1:4d8deb6:         s1.executeUpdate("create table t1(i int)");
1:4d8deb6:         s1.close();
1:9e04f69: 
1:4d8deb6:         // DERBY-48: The next connect causes a hang on write lock the
1:4d8deb6:         // new schema row being created by c1 that is not yet
1:4d8deb6:         // committed if the fix for DERBY-48 is not yet in place.
1:4d8deb6:         // The fix makes the the auto-create happen in a nested transaction
1:4d8deb6:         // which commit immediately, so the hang should not be present.
1:4d8deb6: 
1:4d8deb6:         Connection c2 = null;
1:4d8deb6: 
1:4d8deb6:         try {
1:4d8deb6:             c2 = openUserConnection("newuser");
1:4d8deb6:         } catch (SQLException e) {
1:4d8deb6:             if (e.getSQLState().equals(LOCK_TIMEOUT)) {
1:4d8deb6:                 c1.rollback();
1:4d8deb6:                 c1.close();
1:4d8deb6:                 fail("DERBY-48 still seen", e);
1:4d8deb6:             } else {
1:4d8deb6:                 throw e;
1:4d8deb6:             }
1:4d8deb6:         }
1:4d8deb6: 
1:4d8deb6:         c1.rollback();
1:4d8deb6: 
1:4d8deb6:         // Since the auto-create happened in a nested transaction
1:4d8deb6:         // which has committed, the schema should still be around
1:4d8deb6:         // after the rollback. Note that this is a side-effect of the
1:4d8deb6:         // fix for DERBY-48, not required behavior for SQL, but it is
1:4d8deb6:         // user visible behavior, so we test it here to make sure that
1:4d8deb6:         // patch works as intended:
1:4d8deb6: 
1:4d8deb6:         JDBC.assertSingleValueResultSet(
1:4d8deb6:             c1.createStatement().executeQuery(
1:4d8deb6:                 "select schemaname from sys.sysschemas " +
1:4d8deb6:                 "where schemaname='NEWUSER'"),
1:4d8deb6:             "NEWUSER");
1:4d8deb6: 
1:4d8deb6:         c1.rollback();
1:4d8deb6: 
1:4d8deb6:         c1.close();
1:4d8deb6:         c2.close();
1:4d8deb6:     }
1:4d8deb6: 
1:e4ada41:     /**
1:4d8deb6:      * Test that we recover from self locking in the auto-create
1:4d8deb6:      * nested transaction (cf solution for DERBY-48).
1:4d8deb6:      */
1:4d8deb6:     public void testDerby48SelfLockingRecovery () throws SQLException
1:4d8deb6:     {
1:4d8deb6:         Connection c1 = openUserConnection("newuser");
1:4d8deb6:         c1.setAutoCommit(false);
1:4d8deb6:         c1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:4d8deb6:         Statement s1 = c1.createStatement();
1:4d8deb6: 
1:4d8deb6:         // Set read locks in parent transaction
1:4d8deb6:         s1.executeQuery("select count(*) from sys.sysschemas");
1:4d8deb6: 
1:4d8deb6:         // ..which conflicts with the auto-create in a subtransaction
1:4d8deb6:         // which will self-lock here, but should recover to try again
1:4d8deb6:         // in outer transaction:
1:4d8deb6:         s1.executeUpdate("create table t1(i int)");
1:4d8deb6: 
1:4d8deb6:         JDBC.assertSingleValueResultSet(
1:4d8deb6:             s1.executeQuery(
1:4d8deb6:                 "select schemaname from sys.sysschemas " +
1:4d8deb6:                 "where schemaname='NEWUSER'"),
1:4d8deb6:             "NEWUSER");
1:4d8deb6: 
1:4d8deb6:         c1.rollback();
1:4d8deb6: 
1:4d8deb6:         // Since the fallback does the auto-create of the schema in
1:4d8deb6:         // the outer transaction, a rollback will remove it:
1:4d8deb6:         JDBC.assertEmpty(
1:4d8deb6:             s1.executeQuery
1:4d8deb6:             ("select * from sys.sysschemas where schemaname='NEWUSER'"));
1:4d8deb6: 
1:4d8deb6:         c1.rollback();
1:4d8deb6:     }
1:4d8deb6: 
1:4d8deb6:     /**
1:4d8deb6:      * Test that we do get to see the self locking in the auto-create
1:4d8deb6:      * nested transaction (cf solution for DERBY-48) when deadlock
1:4d8deb6:      * detection is on, i.e. 40XL2 (LOCK_TIMEOUT_LOG) rather than
1:4d8deb6:      * 40XL1 (LOCK_TIMEOUT) happens.
1:c9ef166:      *
1:c9ef166:      * After fix for DERBY-5564 LOCK_TIMEOUT will be returned whether
1:c9ef166:      * diagnostics are on or not.
1:4d8deb6:      */
1:4d8deb6:     public void testDerby48SelfLockingRecoveryDeadlockDetectionOn ()
1:4d8deb6:             throws SQLException
1:4d8deb6:     {
1:4d8deb6:         Connection c1 = openUserConnection("newuser");
1:4d8deb6:         c1.setAutoCommit(false);
1:4d8deb6:         c1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:4d8deb6:         Statement s1 = c1.createStatement();
1:4d8deb6: 
1:4d8deb6:         // Set read locks in parent transaction
1:4d8deb6:         s1.executeQuery("select count(*) from sys.sysschemas");
1:4d8deb6: 
1:4d8deb6:         // ..which conflicts with the auto-create in a subtransaction
1:4d8deb6:         // which will self-lock here, but should throw now:
1:4d8deb6:         // in outer transaction:
1:4d8deb6:         try {
1:4d8deb6:             s1.executeUpdate("create table t1(i int)");
1:c9ef166:             fail("Expected exception " + LOCK_TIMEOUT);
1:4d8deb6:         } catch (SQLException e) {
1:c9ef166:             assertSQLState("Expected state: ", LOCK_TIMEOUT, e);
1:4d8deb6:         }
1:4d8deb6: 
1:4d8deb6:         JDBC.assertEmpty(
1:4d8deb6:             s1.executeQuery
1:4d8deb6:             ("select * from sys.sysschemas where schemaname='NEWUSER'"));
1:4d8deb6: 
1:4d8deb6:         c1.rollback();
1:4d8deb6:     }
1:4d8deb6: 
1:4d8deb6:     /**
1:e4ada41:      * Test that the timeout lock diagnostics do not create an
1:e4ada41:      * infinite recursion as in DERBY-3678 (although that particular
1:e4ada41:      * use case will not cause an infinite recursion after the fix to
1:e4ada41:      * DERBY-48). The scenario in this test case does create the
1:e4ada41:      * infinite recursion prior to the fix of DERBY-3678, however.
1:c9ef166:      *
1:c9ef166:      * After fix for DERBY-5564 LOCK_TIMEOUT SQL state should be returned
1:c9ef166:      * for a lock timeout whether diagnostics are on or not.
1:e4ada41:      */
1:e4ada41:     public void testDerby3678 ()
1:e4ada41:             throws SQLException
1:e4ada41:     {
1:e4ada41:         Connection c1 = openUserConnection("newuser");
1:e4ada41:         Connection c2 = null;
1:e4ada41: 
1:e4ada41:         c1.setAutoCommit(false);
1:e4ada41:         Statement s1 = c1.createStatement();
1:e4ada41: 
1:e4ada41:         // set locks in connection 1:
1:e4ada41:         s1.executeUpdate("create schema newuser");
1:e4ada41:         s1.executeUpdate("create table t(i int)");
1:e4ada41: 
1:e4ada41:         // ..which conflicts with the next connect
1:e4ada41:         try {
1:e4ada41:             c2 = openUserConnection("newuser");
1:c9ef166:             fail("Expected exception " + LOCK_TIMEOUT);
1:e4ada41:         } catch (SQLException e) {
1:c9ef166:             assertSQLState("Expected state: ", LOCK_TIMEOUT, e);
1:e4ada41:         } finally {
1:e4ada41:             c1.rollback();
1:e4ada41:         }
1:e4ada41:     }
1:e4ada41: 
1:4d8deb6:     /**
1:9e04f69:      * Test that implicit schema creation of other schemas besides
1:9e04f69:      * the initial default schema is still transactional.
1:9e04f69:      */
1:9e04f69:     public void testOtherImplicitSchemaCreation () throws SQLException
1:9e04f69:     {
1:9e04f69:         Connection c1 = openUserConnection("newuser");
1:9e04f69:         c1.setAutoCommit(false);
1:9e04f69:         Statement s1 = c1.createStatement();
1:9e04f69: 
1:9e04f69:         // Will auto-create schema OTHERSCHEMA:
1:9e04f69:         s1.executeUpdate("create table otherschema.t1(i int)");
1:9e04f69:         s1.close();
1:ddae94a: 
1:9e04f69:         JDBC.assertSingleValueResultSet(
1:9e04f69:             c1.createStatement().executeQuery(
1:9e04f69:                 "select schemaname from sys.sysschemas " +
1:9e04f69:                 "where schemaname='OTHERSCHEMA'"),
1:9e04f69:             "OTHERSCHEMA");
1:9e04f69: 
1:9e04f69:         c1.rollback();
1:9e04f69: 
1:9e04f69:         JDBC.assertEmpty(
1:9e04f69:             c1.createStatement().executeQuery(
1:9e04f69:                 "select schemaname from sys.sysschemas " +
1:9e04f69:                 "where schemaname='OTHERSCHEMA'"));
1:ddae94a: 
1:9e04f69:         c1.rollback();
1:9e04f69:         c1.close();
1:9e04f69:     }
1:9e04f69: 
1:a9d7173:     public void testDerby3043CheckConstraint() throws SQLException
1:a9d7173:     {
1:a9d7173:         // Demonstrate the DERBY-3043 workaround: if the table name is
1:a9d7173:         // schema-qualified, check constraints do not cause a problem,
1:a9d7173:         // and the named schema is automatically created if it does
1:a9d7173:         // not yet exist:
1:a9d7173:         Connection c0 = openUserConnection("frogs");
1:a9d7173:         Statement s0 = c0.createStatement();
1:9e04f69: 
1:a9d7173:         JDBC.assertEmpty( s0.executeQuery
1:a9d7173:             ("select * from sys.sysschemas where schemaname='FROGS'"));
1:a9d7173:         JDBC.assertEmpty( s0.executeQuery
1:a9d7173:             ("select * from sys.sysschemas where schemaname='NOSUCH'"));
1:9e04f69: 
1:a9d7173:         // A simple example, which should work whether or not the
1:a9d7173:         // DERBY-3043 fix is in place
1:9e04f69: 
1:a9d7173:         s0.executeUpdate("create table frogs.users2(username varchar(16) " +
1:a9d7173:                         "CHECK(LENGTH(username)>7))");
1:4d8deb6: 
1:a9d7173:         // Demonstrate that any schema is lazy-created, not just the
1:a9d7173:         // default schema which matches the username:
1:4d8deb6: 
1:a9d7173:         s0.executeUpdate("create table nosuch.users(username varchar(16) " +
1:a9d7173:                         "CHECK(LENGTH(username)>7))");
1:4d8deb6: 
1:a9d7173:         // Schemas FROGS and NOSUCH have been lazy-created:
1:4d8deb6: 
1:a9d7173:         JDBC.assertSingleValueResultSet( s0.executeQuery(
1:a9d7173:                 "select schemaname from sys.sysschemas " +
1:a9d7173:                 "where schemaname='FROGS'"),
1:a9d7173:             "FROGS");
1:a9d7173:         JDBC.assertSingleValueResultSet( s0.executeQuery(
1:a9d7173:                 "select schemaname from sys.sysschemas " +
1:a9d7173:                 "where schemaname='NOSUCH'"),
1:a9d7173:             "NOSUCH");
1:a9d7173:         c0.close();
1:4d8deb6: 
1:a9d7173:         // Now verify that the test cases from DERBY-3043 pass:
6:a9d7173: 
1:a9d7173:         Connection c1 = openUserConnection("blogs");
1:a9d7173: 
1:a9d7173:         Statement s1 = c1.createStatement();
1:a9d7173:     
1:a9d7173:         // At the beginning, the schema 'blogs' does not exist.
1:a9d7173: 
1:a9d7173:         JDBC.assertEmpty( s1.executeQuery
1:a9d7173:             ("select * from sys.sysschemas where schemaname='BLOGS'"));
1:a9d7173: 
1:a9d7173:         // Should work, but without the DERBY-3043 fix will get a
1:a9d7173:         // "Schema blogs does not exist" error
1:a9d7173: 
1:a9d7173:         s1.executeUpdate("create table users(username varchar(16) " +
1:a9d7173:                         "CHECK(LENGTH(username)>7))");
1:a9d7173: 
1:a9d7173:         // Another slightly more complicated example, which requires
1:a9d7173:         // the DERBY-3043 fix again to work.
1:a9d7173: 
1:a9d7173:         s1.executeUpdate("CREATE TABLE BLOGSCOM__BLOGS__USERS(" +
1:a9d7173:                 "PK INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY," +
1:a9d7173:                 "username VARCHAR(16) NOT NULL " +
1:a9d7173:                 "  CONSTRAINT BLOGSCOM__BLOGS__USERS_UNIQUE_username UNIQUE " +
1:a9d7173:                 "  CONSTRAINT BLOGSCOM__BLOGS__USERS_PASSWORD_username " +
1:a9d7173:                 "    CHECK(LENGTH(username)>7)," +
1:a9d7173:                 "password VARCHAR (32672) NOT NULL , " +
1:a9d7173:                 "PRIMARY KEY(PK))"); 
1:a9d7173: 
1:a9d7173:         // Schema BLOGS should have been lazy-created:
1:a9d7173: 
1:a9d7173:         JDBC.assertSingleValueResultSet( s1.executeQuery(
1:a9d7173:                 "select schemaname from sys.sysschemas " +
1:a9d7173:                 "where schemaname='BLOGS'"),
1:a9d7173:             "BLOGS");
1:a9d7173: 
1:a9d7173:         c1.close();
1:a9d7173:     }
1:a9d7173: 
1:a9d7173: 
1:9e04f69: protected void  tearDown() throws Exception {
1:4d8deb6:         try {
1:4d8deb6:             createStatement().executeUpdate("drop schema newuser restrict");
1:4d8deb6:         } catch (SQLException e) {
1:4d8deb6:             // If not created by the fixture:
1:4d8deb6:             assertSQLState("Expected state: ", "42Y07", e);
1:4d8deb6:         }
1:4d8deb6: 
1:4d8deb6:         super.tearDown();
1:4d8deb6:     }
1:4d8deb6: 
1:4d8deb6:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("LazyDefaultSchemaCreationTest");
1:4d8deb6: 
1:1ae02c9:         BaseTestSuite[] suites = {
1:1ae02c9:             new BaseTestSuite("LazyDefaultSchemaCreationTest:embedded"),
1:1ae02c9:             new BaseTestSuite("LazyDefaultSchemaCreationTest:clientServer") };
1:4d8deb6: 
1:4d8deb6:         for (int i=0; i < 2; i++) {
1:4d8deb6:             suites[i].addTest(DatabasePropertyTestSetup.setLockTimeouts
1:4d8deb6:                           (new LazyDefaultSchemaCreationTest
1:4d8deb6:                            ("testDerby48testNewSchemaHang"),2,1));
1:4d8deb6: 
1:4d8deb6:             suites[i].addTest(DatabasePropertyTestSetup.setLockTimeouts
1:4d8deb6:                           (new LazyDefaultSchemaCreationTest
1:4d8deb6:                            ("testDerby48SelfLockingRecovery"),2,1));
1:4d8deb6: 
1:4d8deb6:             Properties p = new Properties();
1:4d8deb6:             p.setProperty("derby.locks.deadlockTrace", "true");
1:4d8deb6: 
1:4d8deb6:             suites[i].addTest
1:4d8deb6:                 (DatabasePropertyTestSetup.setLockTimeouts
1:4d8deb6:                  (new DatabasePropertyTestSetup
1:4d8deb6:                   (new LazyDefaultSchemaCreationTest
1:4d8deb6:                    ("testDerby48SelfLockingRecoveryDeadlockDetectionOn"),
1:4d8deb6:                    p, false),
1:4d8deb6:                   2,   // deadlock timeout
1:4d8deb6:                   1)); // wait timeout
1:4d8deb6: 
1:e4ada41:             suites[i].addTest
1:e4ada41:                 (DatabasePropertyTestSetup.setLockTimeouts
1:e4ada41:                  (new DatabasePropertyTestSetup
1:e4ada41:                   (new LazyDefaultSchemaCreationTest
1:e4ada41:                    ("testDerby3678"),
1:e4ada41:                    p, false),
1:e4ada41:                   2,   // deadlock timeout
1:e4ada41:                   1)); // wait timeout
1:e4ada41: 
1:a9d7173:             suites[i].addTest(new CleanDatabaseTestSetup(
1:a9d7173:                 new LazyDefaultSchemaCreationTest(
1:a9d7173:                     "testDerby3043CheckConstraint")));
1:a9d7173: 
1:4d8deb6:             if (i == 0) {
1:4d8deb6:                 suite.addTest(suites[i]);
1:4d8deb6:             } else {
1:4d8deb6:                 suite.addTest(
1:4d8deb6:                     TestConfiguration.clientServerDecorator(suites[i]));
1:4d8deb6:             }
1:4d8deb6: 
1:4d8deb6: 
1:4d8deb6:         }
1:4d8deb6: 
1:4d8deb6:         return suite;
1:4d8deb6:     }
1:4d8deb6: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("LazyDefaultSchemaCreationTest");
1:         BaseTestSuite[] suites = {
1:             new BaseTestSuite("LazyDefaultSchemaCreationTest:embedded"),
1:             new BaseTestSuite("LazyDefaultSchemaCreationTest:clientServer") };
commit:ddae94a
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:9e04f69
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test that implicit schema creation of other schemas besides
1:      * the initial default schema is still transactional.
1:      */
1:     public void testOtherImplicitSchemaCreation () throws SQLException
1:     {
1:         Connection c1 = openUserConnection("newuser");
1:         c1.setAutoCommit(false);
1:         Statement s1 = c1.createStatement();
1: 
1:         // Will auto-create schema OTHERSCHEMA:
1:         s1.executeUpdate("create table otherschema.t1(i int)");
1:         s1.close();
1:         
1:         JDBC.assertSingleValueResultSet(
1:             c1.createStatement().executeQuery(
1:                 "select schemaname from sys.sysschemas " +
1:                 "where schemaname='OTHERSCHEMA'"),
1:             "OTHERSCHEMA");
1: 
1:         c1.rollback();
1: 
1:         JDBC.assertEmpty(
1:             c1.createStatement().executeQuery(
1:                 "select schemaname from sys.sysschemas " +
1:                 "where schemaname='OTHERSCHEMA'"));
1:         
1:         c1.rollback();
1:         c1.close();
1:     }
1: 
1: 
1: 
1: protected void  tearDown() throws Exception {
commit:e4ada41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test that the timeout lock diagnostics do not create an
1:      * infinite recursion as in DERBY-3678 (although that particular
1:      * use case will not cause an infinite recursion after the fix to
1:      * DERBY-48). The scenario in this test case does create the
1:      * infinite recursion prior to the fix of DERBY-3678, however.
1:      */
1:     public void testDerby3678 ()
1:             throws SQLException
1:     {
1:         Connection c1 = openUserConnection("newuser");
1:         Connection c2 = null;
1: 
1:         c1.setAutoCommit(false);
1:         Statement s1 = c1.createStatement();
1: 
1:         // set locks in connection 1:
1:         s1.executeUpdate("create schema newuser");
1:         s1.executeUpdate("create table t(i int)");
1: 
1:         // ..which conflicts with the next connect
1:         try {
1:             c2 = openUserConnection("newuser");
0:             fail("Expected exception " + LOCK_TIMEOUT_LOG);
1:         } catch (SQLException e) {
0:             assertSQLState("Expected state: ", LOCK_TIMEOUT_LOG, e);
1:         } finally {
1:             c1.rollback();
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             suites[i].addTest
1:                 (DatabasePropertyTestSetup.setLockTimeouts
1:                  (new DatabasePropertyTestSetup
1:                   (new LazyDefaultSchemaCreationTest
1:                    ("testDerby3678"),
1:                    p, false),
1:                   2,   // deadlock timeout
1:                   1)); // wait timeout
1: 
commit:4d8deb6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.Connection;
0: import java.sql.ResultSet;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: 
1: /**
1:  * Tests the lazy creation functionality of default schema: the schema
1:  * is only first created when the first database object is created in
1:  * the schema.
1:  */
1: public class LazyDefaultSchemaCreationTest extends BaseJDBCTestCase {
1: 
1:     final private static String LOCK_TIMEOUT = "40XL1";
0:     final private static String LOCK_TIMEOUT_LOG = "40XL2";
1: 
1:     /**
1:      * Creates a new {@code LazyDefaultSchemaCreationTest} instance.
1:      *
1:      * @param name the name of the test
1:      */
1:     public LazyDefaultSchemaCreationTest(String name) {
1:         super(name);
1:     }
1: 
1: 
1:     /**
1:      * Reproduces hang seen in DERBY-48
1:      */
1:     public void testDerby48testNewSchemaHang () throws SQLException
1:     {
1:         Connection c1 = openUserConnection("newuser");
1:         c1.setAutoCommit(false);
1:         Statement s1 = c1.createStatement();
1: 
1:         // Will auto-create schema NEWUSER:
1:         s1.executeUpdate("create table t1(i int)");
1:         s1.close();
1: 
1:         // DERBY-48: The next connect causes a hang on write lock the
1:         // new schema row being created by c1 that is not yet
1:         // committed if the fix for DERBY-48 is not yet in place.
1:         // The fix makes the the auto-create happen in a nested transaction
1:         // which commit immediately, so the hang should not be present.
1: 
1:         Connection c2 = null;
1: 
1:         try {
1:             c2 = openUserConnection("newuser");
1:         } catch (SQLException e) {
1:             if (e.getSQLState().equals(LOCK_TIMEOUT)) {
1:                 c1.rollback();
1:                 c1.close();
1:                 fail("DERBY-48 still seen", e);
1:             } else {
1:                 throw e;
1:             }
1:         }
1: 
1:         c1.rollback();
1: 
1:         // Since the auto-create happened in a nested transaction
1:         // which has committed, the schema should still be around
1:         // after the rollback. Note that this is a side-effect of the
1:         // fix for DERBY-48, not required behavior for SQL, but it is
1:         // user visible behavior, so we test it here to make sure that
1:         // patch works as intended:
1: 
1:         JDBC.assertSingleValueResultSet(
1:             c1.createStatement().executeQuery(
1:                 "select schemaname from sys.sysschemas " +
1:                 "where schemaname='NEWUSER'"),
1:             "NEWUSER");
1: 
1:         c1.rollback();
1: 
1:         c1.close();
1:         c2.close();
1:     }
1: 
1:     /**
1:      * Test that we recover from self locking in the auto-create
1:      * nested transaction (cf solution for DERBY-48).
1:      */
1:     public void testDerby48SelfLockingRecovery () throws SQLException
1:     {
1:         Connection c1 = openUserConnection("newuser");
1:         c1.setAutoCommit(false);
1:         c1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:         Statement s1 = c1.createStatement();
1: 
1:         // Set read locks in parent transaction
1:         s1.executeQuery("select count(*) from sys.sysschemas");
1: 
1:         // ..which conflicts with the auto-create in a subtransaction
1:         // which will self-lock here, but should recover to try again
1:         // in outer transaction:
1:         s1.executeUpdate("create table t1(i int)");
1: 
1:         JDBC.assertSingleValueResultSet(
1:             s1.executeQuery(
1:                 "select schemaname from sys.sysschemas " +
1:                 "where schemaname='NEWUSER'"),
1:             "NEWUSER");
1: 
1:         c1.rollback();
1: 
1:         // Since the fallback does the auto-create of the schema in
1:         // the outer transaction, a rollback will remove it:
1:         JDBC.assertEmpty(
1:             s1.executeQuery
1:             ("select * from sys.sysschemas where schemaname='NEWUSER'"));
1: 
1:         c1.rollback();
1:     }
1: 
1:     /**
1:      * Test that we do get to see the self locking in the auto-create
1:      * nested transaction (cf solution for DERBY-48) when deadlock
1:      * detection is on, i.e. 40XL2 (LOCK_TIMEOUT_LOG) rather than
1:      * 40XL1 (LOCK_TIMEOUT) happens.
1:      */
1:     public void testDerby48SelfLockingRecoveryDeadlockDetectionOn ()
1:             throws SQLException
1:     {
1:         Connection c1 = openUserConnection("newuser");
1:         c1.setAutoCommit(false);
1:         c1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:         Statement s1 = c1.createStatement();
1: 
0:         s1.executeUpdate(
0:             "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
0:                 "'derby.locks.deadlockTrace', 'true')");
1: 
1: 
1:         // Set read locks in parent transaction
1:         s1.executeQuery("select count(*) from sys.sysschemas");
1: 
1:         // ..which conflicts with the auto-create in a subtransaction
1:         // which will self-lock here, but should throw now:
1:         // in outer transaction:
1:         try {
1:             s1.executeUpdate("create table t1(i int)");
0:             fail("Expected exception " + LOCK_TIMEOUT_LOG);
1:         } catch (SQLException e) {
0:             assertSQLState("Expected state: ", LOCK_TIMEOUT_LOG, e);
1:         }
1: 
1:         JDBC.assertEmpty(
1:             s1.executeQuery
1:             ("select * from sys.sysschemas where schemaname='NEWUSER'"));
1: 
1:         c1.rollback();
1:     }
1: 
0:     protected void  tearDown() throws Exception {
1:         try {
1:             createStatement().executeUpdate("drop schema newuser restrict");
1:         } catch (SQLException e) {
1:             // If not created by the fixture:
1:             assertSQLState("Expected state: ", "42Y07", e);
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("LazyDefaultSchemaCreationTest");
1: 
0:         TestSuite[] suites = {
0:             new TestSuite("LazyDefaultSchemaCreationTest:embedded"),
0:             new TestSuite("LazyDefaultSchemaCreationTest:clientServer") };
1: 
1:         for (int i=0; i < 2; i++) {
1:             suites[i].addTest(DatabasePropertyTestSetup.setLockTimeouts
1:                           (new LazyDefaultSchemaCreationTest
1:                            ("testDerby48testNewSchemaHang"),2,1));
1: 
1:             suites[i].addTest(DatabasePropertyTestSetup.setLockTimeouts
1:                           (new LazyDefaultSchemaCreationTest
1:                            ("testDerby48SelfLockingRecovery"),2,1));
1: 
1:             Properties p = new Properties();
1:             p.setProperty("derby.locks.deadlockTrace", "true");
1: 
1:             suites[i].addTest
1:                 (DatabasePropertyTestSetup.setLockTimeouts
1:                  (new DatabasePropertyTestSetup
1:                   (new LazyDefaultSchemaCreationTest
1:                    ("testDerby48SelfLockingRecoveryDeadlockDetectionOn"),
1:                    p, false),
1:                   2,   // deadlock timeout
1:                   1)); // wait timeout
1: 
1:             if (i == 0) {
1:                 suite.addTest(suites[i]);
1:             } else {
1:                 suite.addTest(
1:                     TestConfiguration.clientServerDecorator(suites[i]));
1:             }
1: 
1: 
1:         }
1: 
1:         return suite;
1:     }
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:c9ef166
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * After fix for DERBY-5564 LOCK_TIMEOUT will be returned whether
1:      * diagnostics are on or not.
/////////////////////////////////////////////////////////////////////////
1:             fail("Expected exception " + LOCK_TIMEOUT);
1:             assertSQLState("Expected state: ", LOCK_TIMEOUT, e);
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * After fix for DERBY-5564 LOCK_TIMEOUT SQL state should be returned
1:      * for a lock timeout whether diagnostics are on or not.
/////////////////////////////////////////////////////////////////////////
1:             fail("Expected exception " + LOCK_TIMEOUT);
1:             assertSQLState("Expected state: ", LOCK_TIMEOUT, e);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:a9d7173
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
/////////////////////////////////////////////////////////////////////////
1:     public void testDerby3043CheckConstraint() throws SQLException
1:     {
1:         // Demonstrate the DERBY-3043 workaround: if the table name is
1:         // schema-qualified, check constraints do not cause a problem,
1:         // and the named schema is automatically created if it does
1:         // not yet exist:
1:         Connection c0 = openUserConnection("frogs");
1:         Statement s0 = c0.createStatement();
1: 
1:         JDBC.assertEmpty( s0.executeQuery
1:             ("select * from sys.sysschemas where schemaname='FROGS'"));
1:         JDBC.assertEmpty( s0.executeQuery
1:             ("select * from sys.sysschemas where schemaname='NOSUCH'"));
1: 
1:         // A simple example, which should work whether or not the
1:         // DERBY-3043 fix is in place
1: 
1:         s0.executeUpdate("create table frogs.users2(username varchar(16) " +
1:                         "CHECK(LENGTH(username)>7))");
1: 
1:         // Demonstrate that any schema is lazy-created, not just the
1:         // default schema which matches the username:
1: 
1:         s0.executeUpdate("create table nosuch.users(username varchar(16) " +
1:                         "CHECK(LENGTH(username)>7))");
1: 
1:         // Schemas FROGS and NOSUCH have been lazy-created:
1: 
1:         JDBC.assertSingleValueResultSet( s0.executeQuery(
1:                 "select schemaname from sys.sysschemas " +
1:                 "where schemaname='FROGS'"),
1:             "FROGS");
1:         JDBC.assertSingleValueResultSet( s0.executeQuery(
1:                 "select schemaname from sys.sysschemas " +
1:                 "where schemaname='NOSUCH'"),
1:             "NOSUCH");
1:         c0.close();
1: 
1:         // Now verify that the test cases from DERBY-3043 pass:
1: 
1:         Connection c1 = openUserConnection("blogs");
1: 
1:         Statement s1 = c1.createStatement();
1:     
1:         // At the beginning, the schema 'blogs' does not exist.
1: 
1:         JDBC.assertEmpty( s1.executeQuery
1:             ("select * from sys.sysschemas where schemaname='BLOGS'"));
1: 
1:         // Should work, but without the DERBY-3043 fix will get a
1:         // "Schema blogs does not exist" error
1: 
1:         s1.executeUpdate("create table users(username varchar(16) " +
1:                         "CHECK(LENGTH(username)>7))");
1: 
1:         // Another slightly more complicated example, which requires
1:         // the DERBY-3043 fix again to work.
1: 
1:         s1.executeUpdate("CREATE TABLE BLOGSCOM__BLOGS__USERS(" +
1:                 "PK INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY," +
1:                 "username VARCHAR(16) NOT NULL " +
1:                 "  CONSTRAINT BLOGSCOM__BLOGS__USERS_UNIQUE_username UNIQUE " +
1:                 "  CONSTRAINT BLOGSCOM__BLOGS__USERS_PASSWORD_username " +
1:                 "    CHECK(LENGTH(username)>7)," +
1:                 "password VARCHAR (32672) NOT NULL , " +
1:                 "PRIMARY KEY(PK))"); 
1: 
1:         // Schema BLOGS should have been lazy-created:
1: 
1:         JDBC.assertSingleValueResultSet( s1.executeQuery(
1:                 "select schemaname from sys.sysschemas " +
1:                 "where schemaname='BLOGS'"),
1:             "BLOGS");
1: 
1:         c1.close();
1:     }
/////////////////////////////////////////////////////////////////////////
1:             suites[i].addTest(new CleanDatabaseTestSetup(
1:                 new LazyDefaultSchemaCreationTest(
1:                     "testDerby3043CheckConstraint")));
0: 
============================================================================