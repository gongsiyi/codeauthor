1:bc61783: /*
58:bc61783: 
1:bc61783:    Derby - Class org.apache.derby.impl.drda.DRDAXAProtocol.java
1:bc61783: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:bc61783: 
1:bc61783:       http://www.apache.org/licenses/LICENSE-2.0
1:bc61783: 
1:bc61783:    Unless required by applicable law or agreed to in writing, software
1:bc61783:    distributed under the License is distributed on an "AS IS" BASIS,
1:bc61783:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc61783:    See the License for the specific language governing permissions and
1:bc61783:    limitations under the License.
1:bc61783: 
1:4f996a4:  */
1:bc61783: 
1:f42f1b7: package org.apache.derby.impl.drda;
1:db4c995: 
1:db4c995: import javax.transaction.xa.XAException;
1:db4c995: import javax.transaction.xa.XAResource;
1:db4c995: import javax.transaction.xa.Xid;
1:bb9f97a: import org.apache.derby.iapi.jdbc.ResourceAdapter;
1:bb9f97a: import org.apache.derby.iapi.services.monitor.Monitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:bb9f97a: import org.apache.derby.iapi.store.access.xa.XAXactId;
1:bb9f97a: import org.apache.derby.shared.common.reference.MessageId;
1:f42f1b7: 
1:4f996a4: /**
1:bc61783:  * This class translates DRDA XA protocol from an application requester to XA
1:bc61783:  * calls for Derby and then translates the results from Derby to DRDA
1:bc61783:  * for return to the application requester.
1:bc61783:  * This class requires the use of javax.transaction.xa classes from j2ee,
1:bc61783:  * so is separated from DRDAConnThread, because of the additional
1:bc61783:  * library requirements
1:4f996a4:  */
1:bc61783: 
1:7df5ffe: class DRDAXAProtocol {
1:bc61783: 
1:4f996a4:     private DRDAConnThread connThread;
1:4f996a4:     private DDMReader reader;
1:4f996a4:     private DDMWriter writer;
1:09b38be:     /** Holds the Xid of the global transaction associated with
1:09b38be:       * the corresponding DRDAConnThread (and connection itself). */
1:09b38be:     private Xid xid;
1:bc61783: 
1:bc61783: 
1:4f996a4:     DRDAXAProtocol(DRDAConnThread connThread)
1:4f996a4:     {
1:4f996a4:         this.connThread = connThread;
1:4f996a4:         reader = connThread.getReader();
1:4f996a4:         writer = connThread.getWriter();
1:09b38be:         xid = null;
1:4f996a4:     }
1:bc61783: 
1:bc61783: 
1:bc61783: 
1:09b38be:     /**
1:4f996a4:      * Parse SYNCCTL - Parse SYNCCTL command for XAMGR lvl 7
1:4f996a4:      *
1:db9a013:      */
1:4f996a4:     protected void parseSYNCCTL() throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         
1:4f996a4:         reader.markCollection();
1:4f996a4:         
1:4f996a4:         int codePoint = reader.getCodePoint(CodePoint.SYNCTYPE);
1:4f996a4:         int syncType = parseSYNCTYPE();
1:4f996a4:         
1:4f996a4:         int xaflags = 0;
1:4f996a4:         boolean readXAFlags = false;
1:4f996a4:         Xid xid = null;
1:cccf5dd:         // The value -1 means no value of timeout received
1:cccf5dd:         long xaTimeout = -1;
1:cccf5dd:         boolean readXATimeout = false;
1:bc61783: 
1:4f996a4:         codePoint = reader.getCodePoint();
1:4f996a4:         while (codePoint != -1)
1:4f996a4:         {
1:4f996a4:             switch(codePoint)
1:4f996a4:             {
1:4f996a4:                 case CodePoint.XID:
1:4f996a4:                     xid = parseXID();
1:db9a013:                     break;
1:4f996a4:                 case CodePoint.XAFLAGS:
1:db9a013:                     xaflags = parseXAFlags();
1:4f996a4:                     readXAFlags =true;
3:4f996a4:                     break;
1:4f996a4:                 case CodePoint.TIMEOUT:
1:cccf5dd:                     xaTimeout = parseXATimeout();
1:cccf5dd:                     readXATimeout = true;
1:4f996a4:                     break;
1:4f996a4:                 case CodePoint.RLSCONV:
1:4f996a4:                     connThread.codePointNotSupported(codePoint);      
1:4f996a4:                 default:
1:4f996a4:                     connThread.invalidCodePoint(codePoint);
1:db9a013:             }
1:bc61783: 
1:4f996a4:             codePoint = reader.getCodePoint();
1:4f996a4:         }
1:bc61783: 
1:bc61783: 
1:4f996a4:         {
1:4f996a4:             connThread.trace("syncType = " + syncTypeToString(syncType));
1:4f996a4:             connThread.trace("xid = " + xid);
1:4f996a4:             connThread.trace("xaflags =" + xaflagsToString(xaflags));
1:4f996a4:         }
1:bc61783: 
1:4f996a4:         if (syncType != CodePoint.SYNCTYPE_INDOUBT)
1:4f996a4:         {
1:4f996a4:             if (xid == null)
1:4f996a4:                 connThread.missingCodePoint(CodePoint.XID);
1:4f996a4:             
1:4f996a4:             // All but Recover and forget require xaFlags
1:4f996a4:             if (syncType != CodePoint.SYNCTYPE_REQ_FORGET && 
1:4f996a4:                 ! readXAFlags)
1:4f996a4:                 if (SanityManager.DEBUG)
1:4f996a4:                     connThread.missingCodePoint(CodePoint.XAFLAGS);
1:4f996a4:         }
1:bc61783: 
1:4f996a4:         switch (syncType)
1:4f996a4:         {  
1:4f996a4:             case CodePoint.SYNCTYPE_NEW_UOW:
1:4f996a4:                 // new unit of work for XA
1:4f996a4:                 // formatId -1 is just a local connection
1:cccf5dd:                 startXATransaction(xid, xaflags, xaTimeout);
1:4f996a4:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_END_UOW:
1:4f996a4:                 // End unit of work
1:4f996a4:                 endXA(xid,xaflags);
1:4f996a4:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_PREPARE:
1:4f996a4:                 prepareXATransaction(xid);
1:4f996a4:                 // Prepare to commit 
1:4f996a4:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_MIGRATE:
1:4f996a4:                 // migrate to resync server sync type
1:4f996a4:                 connThread.codePointNotSupported(codePoint);                
1:db9a013:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_REQ_COMMIT:
1:4f996a4:                 // request to commit sync type
1:4f996a4:                 commitTransaction(xid,xaflags);
1:4f996a4:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_COMMITTED:
1:4f996a4:                 // commit  sync type
1:4f996a4:                 commitTransaction(xid, xaflags);
1:4f996a4:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_REQ_FORGET:
1:4f996a4:                 // request to forget sync type
1:4f996a4:                 forgetXATransaction(xid);
1:4f996a4:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_ROLLBACK:
1:4f996a4:                 //rollback sync type
1:09b38be:                 rollbackTransaction(xid, true);
1:4f996a4:                 break;
1:4f996a4:             case CodePoint.SYNCTYPE_INDOUBT:
1:4f996a4:                 //recover sync type
1:4f996a4:                 if (readXAFlags)
1:4f996a4:                     recoverXA(xaflags);
1:4f996a4:                 else
1:4f996a4:                     recoverXA();
1:4f996a4:                 break;
1:4f996a4:             default:
1:4f996a4:                 connThread.invalidCodePoint(codePoint);
1:4f996a4:         }
1:bc61783: 
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /** 
1:4f996a4:      * parse SYNCTYPE for XAMGR lvl 7
1:4f996a4:      * return synctype value 
1:dbed020:      *   CodePoint.SYNCTYPE_NEW_UOW -&gt; XAResource.start()
1:dbed020:      *   CodePoint.SYNCTYPE_END_UOW -&gt; XAResource.end()
1:dbed020:      *   CodePoint.SYNCTYPE_PREPARE -&gt; XAResource.prepare()
1:dbed020:      *   CodePoint.SYNCTYPE_MIGRATE -&gt; not supported  //SYNCPT MGR LEVEL 5
1:dbed020:      *   CodePoint.SYNCTYPE_REQ_COMMIT -&gt; not supported //SYNCPT MGR LEVEL 5
1:dbed020:      *   CodePoint.SYNCTYPE_COMMITTED -&gt; XAResource.commit()  
1:4f996a4:      *                                   or local commit for null XID
1:dbed020:      *   CodePoint.SYNCTYPE_REQ_LOG -&gt;  not supported
1:dbed020:      *   CodePoint.SYNCTYPE_REQ_FORGET -&gt; XAResource.forget()
1:dbed020:      *   CodePoint.SYNCTYPE_ROLLBACK -&gt; XAResource.rollback()
1:dbed020:      *   CodePoint.SYNCTYPE_MIGRATED -&gt; not supported
1:dbed020:      *   CodePoint.SYNCTYPE_INDOUBT   -&gt; XAResource.recover();
1:4f996a4:      * 
1:4f996a4:      */
1:4f996a4:     protected int  parseSYNCTYPE() throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         return reader.readUnsignedByte();
1:4f996a4:         
1:4f996a4:     }
1:4f996a4:     
1:bc61783: 
1:4f996a4:     /** Parse XID
1:4f996a4:      *  formatId -1 translates into a null XID and a local transaction
1:4f996a4:      */
1:4f996a4:     private  Xid parseXID () throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         int formatId = reader.readNetworkInt();
1:4f996a4:         byte[] gtrid = null;
1:4f996a4:         byte[] bqual = null;
1:4f996a4:         if (formatId != -1)
1:4f996a4:         {
1:4f996a4:             int gtridLen = reader.readNetworkInt();
1:4f996a4:             int bqualLen = reader.readNetworkInt();
1:4f996a4:             
1:4f996a4:             gtrid = reader.readBytes(gtridLen);
1:4f996a4:             bqual = reader.readBytes(bqualLen);
1:4f996a4:         }
1:4f996a4:         return new DRDAXid(formatId, gtrid, bqual);
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /** 
1:4f996a4:      *  parse XAFlags 
1:4f996a4:      *
1:4f996a4:      * @return XAFlags value
1:4f996a4:      * @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private int parseXAFlags() throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         return reader.readNetworkInt();
1:4f996a4:     }
1:bc61783: 
1:cccf5dd:     /**
1:cccf5dd:      * Parses a XA transaction timout value.
1:cccf5dd:      *
1:cccf5dd:      * @return A timeout value.
1:cccf5dd:      * @throws DRDAProtocolException
1:cccf5dd:      */
1:cccf5dd:     private long parseXATimeout() throws DRDAProtocolException
1:cccf5dd:     {
1:cccf5dd:         return reader.readNetworkLong();
1:cccf5dd:     }
1:cccf5dd: 
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      *  Start the xa transaction. Send SYNCRRD response
1:4f996a4:      * 
1:4f996a4:      *  @param xid - XID (formatId = -1 for local transaction)
1:4f996a4:      *  @param xaflags - xaflags
1:cccf5dd:      *  @param xaTimeout - The timeout for the global transaction in millis
1:cccf5dd:      *                     (or -1 if not specified)
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:cccf5dd:     private void startXATransaction(Xid xid, int xaflags, long xaTimeout)
1:cccf5dd:                                                 throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         XAResource xaResource = getXAResource();
1:db4c995:         int xaRetVal = XAResource.XA_OK;
1:bc61783: 
1:4f996a4:         try {
1:cccf5dd:             if (xid.getFormatId() == -1 && xaTimeout != -1) {
1:cccf5dd:                 // The value of timeout might be specified only for global transactions
1:cccf5dd:                 throw new XAException(XAException.XAER_PROTO);
1:cccf5dd:             } else if (xaTimeout != -1 && xaflags != XAResource.TMNOFLAGS) {
1:cccf5dd:                 // According the DRDA spec if the value of timeout was specified
1:cccf5dd:                 // a TMNOFLAGS have to be used
1:cccf5dd:                 throw new XAException(XAException.XAER_PROTO);
1:cccf5dd:             } else {
1:cccf5dd:                 if (xaTimeout == 0) {
1:cccf5dd:                     // According the DRDA specification
1:cccf5dd:                     // value 0 means the unlimited timeout
1:cccf5dd:                     // Integer.MAX_VALUE is used in derby
1:cccf5dd:                     // to set up the infinite timeout.
1:cccf5dd:                     // In JDBC spec the value 0 means the resource
1:cccf5dd:                     // manager's default value.
1:cccf5dd:                     xaResource.setTransactionTimeout(Integer.MAX_VALUE);
1:cccf5dd:                 } else if (xaTimeout == -1) {
1:cccf5dd:                     // The timeout value was not specified, so use the default
1:cccf5dd:                     // timeout - see javadoc for XAResource.setTransactionTimeout
1:cccf5dd:                     xaResource.setTransactionTimeout(0);
1:cccf5dd:                 } else {
1:cccf5dd:                     // The value of timeout was specified
1:cccf5dd:                     xaResource.setTransactionTimeout((int) (xaTimeout/1000));
1:cccf5dd:                 }
1:cccf5dd:                 if (xid.getFormatId() != -1) {
1:cccf5dd:                     xaResource.start(xid,xaflags);
1:cccf5dd:                 }
1:cccf5dd:                 this.xid = xid;
1:cccf5dd:             }
1:4f996a4:         } catch (XAException xe)
1:4f996a4:         {
1:4f996a4:             xaRetVal = processXAException(xe);
1:4f996a4:         }
1:4f996a4:         writeSYNCCRD(CodePoint.SYNCTYPE_NEW_UOW, 
4:4f996a4:                      xaRetVal, null);
1:4f996a4:         
1:4f996a4:     }
1:4f996a4:     
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      *  Commit  the xa transaction. Send SYNCCRD response
1:4f996a4:      * 
1:4f996a4:      *  @param xid - XID (formatId = -1 for local transaction)
1:4f996a4:      *  @param xaflags - xaflags
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void commitTransaction(Xid xid, int xaflags) throws DRDAProtocolException
2:4f996a4:     {
1:4f996a4:         boolean local  = ( xid.getFormatId() == -1);
1:4f996a4:         if (local)
1:4f996a4:             commitLocalTransaction();
1:4f996a4:         else
1:4f996a4:             commitXATransaction(xid, xaflags);
5:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      *  Commit local transaction. Send SYNCCRD response.
2:4f996a4:      * 
1:4f996a4:      *  @throws DRDAProtocolException
1:db9a013:      */
1:4f996a4:     private void commitLocalTransaction() throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         int xaRetVal = XAResource.XA_OK;
1:4f996a4:         try {
1:4f996a4:             connThread.getDatabase().commit();
1:4f996a4:         }
1:4f996a4:         catch  (Exception e)
1:4f996a4:         {
1:4f996a4:             xaRetVal = XAException.XAER_RMFAIL;
1:4f996a4:             if (SanityManager.DEBUG)
1:4f996a4:             {
1:09b38be:                 connThread.getServer().consoleExceptionPrint(e);
1:09b38be:             }
1:bc61783: 
1:4f996a4:         }
1:4f996a4:         writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
1:4f996a4:                      xaRetVal, null);
1:4f996a4: 
1:4f996a4:     }
1:bc61783: 
1:bc61783:     
1:4f996a4:     /**
1:4f996a4:      *  Commit  the xa transaction. Send SYNCCRD response.
1:4f996a4:      * 
1:4f996a4:      *  @param xid - XID 
1:4f996a4:      *  @param xaflags - xaflags
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void commitXATransaction(Xid xid, int xaflags) throws DRDAProtocolException
1:4f996a4:     {
1:09b38be:         XAResource xaResource = getXAResource();
1:db4c995:         int xaRetVal = XAResource.XA_OK;
1:4f996a4:         // check this
1:4f996a4:         boolean isOnePhase = (xaflags & XAResource.TMONEPHASE) != 0;
1:4f996a4:         try {
1:4f996a4:             xaResource.commit(xid, isOnePhase);
1:4f996a4:             if (SanityManager.DEBUG)
1:4f996a4:                 connThread.trace("committed XA transaction: xaRetVal=" + xaRetVal);
1:4f996a4: 
1:4f996a4:         } catch (XAException xe)
1:4f996a4:         {
1:4f996a4:             xaRetVal = processXAException(xe);
1:4f996a4:         }
1:4f996a4:         writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
1:4f996a4:                      xaRetVal, null);
1:bc61783:         
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:09b38be:      * Rollback transaction. Optionally send SYNCCRD response.
1:4f996a4:      * @param xid  Xid for rollback for global transaction.
1:4f996a4:      *             If xid formatid is -1 it represents a local transaction
1:09b38be:      * @param sendSYNCCRD Indicates whether the function should
1:09b38be:      *                    send a SYNCCRD response
1:4f996a4:      */
1:09b38be:     private void rollbackTransaction(Xid xid, boolean sendSYNCCRD) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         boolean local  = ( xid.getFormatId() == -1);
1:4f996a4:         if (local)
1:09b38be:             rollbackLocalTransaction(sendSYNCCRD);
1:4f996a4:         else
1:09b38be:             rollbackXATransaction(xid, sendSYNCCRD);
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     /**
1:09b38be:      * Rollback a local transaction. Optionally send SYNCCRD response.
1:4f996a4:      *
1:09b38be:      * @param sendSYNCCRD Indicates whether the function should
1:09b38be:      *                    send a SYNCCRD response
1:09b38be:      * @throws DRDAProtocolException
1:4f996a4:      */
1:09b38be:     private void rollbackLocalTransaction(boolean sendSYNCCRD) throws DRDAProtocolException
1:4f996a4:     {
7:4f996a4:         int xaRetVal = XAResource.XA_OK;
1:4f996a4:         try {
1:4f996a4:             connThread.getDatabase().rollback();
1:4f996a4:         }
1:4f996a4:         catch  (Exception e)
1:4f996a4:         {
1:4f996a4:             xaRetVal = XAException.XAER_RMFAIL;
1:4f996a4:             if (SanityManager.DEBUG)
1:4f996a4:             {
1:09b38be:                 connThread.getServer().consoleExceptionPrint(e);
1:4f996a4:             }
1:4f996a4:             
1:4f996a4:         }
1:09b38be:         if (sendSYNCCRD) {
1:09b38be:             writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED,
1:09b38be:                          xaRetVal, null);
1:09b38be:         }
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:09b38be:      *  Rollback the xa transaction. Optionally send SYNCCRD response.
1:4f996a4:      * 
1:4f996a4:      *  @param xid - XID 
1:09b38be:      *  @param sendSYNCCRD Indicates whether the function should
1:09b38be:      *                     send a SYNCCRD response
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:09b38be:     private void rollbackXATransaction(Xid xid, boolean sendSYNCCRD) throws DRDAProtocolException
1:4f996a4:     {
2:4f996a4:         XAResource xaResource = getXAResource();
1:db4c995:         int xaRetVal = XAResource.XA_OK;
1:bc61783: 
1:4f996a4:         try {
1:4f996a4:             xaResource.rollback(xid);
1:4f996a4:             if (SanityManager.DEBUG)
1:4f996a4:             {
1:4f996a4:                 connThread.trace("rollback  XA transaction: xaRetVal=" + xaRetVal); 
1:4f996a4:             }
1:4f996a4:         } catch (XAException xe)
1:4f996a4:         {
1:4f996a4:             xaRetVal = processXAException(xe);
1:4f996a4:         }
1:09b38be:         if (sendSYNCCRD) {
1:09b38be:             writeSYNCCRD(CodePoint.SYNCTYPE_ROLLBACK,
1:09b38be:                          xaRetVal, null);
1:09b38be:         }
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      *  End  the xa transaction. Send SYNCRRD response
1:4f996a4:      * 
1:4f996a4:      *  @param xid - XID 
1:4f996a4:      *  @param xaflags - xaflags
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void endXA(Xid xid, int xaflags) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         XAResource xaResource = getXAResource();        
1:db4c995:         int xaRetVal = XAResource.XA_OK;
1:bc61783: 
1:4f996a4:         try {
1:4f996a4:             xaResource.end(xid,xaflags);
1:0d841f1:             this.xid = null;
1:4f996a4:             if (SanityManager.DEBUG)
1:4f996a4:             {
1:4f996a4:                 connThread.trace("ended XA transaction. xid =  " + xid +
1:4f996a4:                                " xaflags =" + xaflags + 
1:4f996a4:                                  "xaRetVal=" + xaRetVal); 
1:4f996a4:             }
1:4f996a4:         } catch (XAException xe)
1:4f996a4:         {
1:4f996a4:             xaRetVal = processXAException(xe);
1:4f996a4:         }
1:4f996a4:         writeSYNCCRD(CodePoint.SYNCTYPE_END_UOW,
1:db9a013:                      xaRetVal, null);
1:4f996a4:     }
1:bc61783: 
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      *  Prepare the xa transaction. Send SYNCCRD response.
1:4f996a4:      * 
1:4f996a4:      *  @param xid - XID 
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void prepareXATransaction(Xid xid) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         XAResource xaResource = getXAResource();
1:db4c995:         int xaRetVal;
1:bc61783: 
1:4f996a4:         try {
1:4f996a4:             xaRetVal = xaResource.prepare(xid);
1:4f996a4:             if (SanityManager.DEBUG)
1:4f996a4:             {
1:4f996a4:                 connThread.trace("prepared xa transaction: xaRetVal=" +
1:4f996a4:                                 xaRetVal); 
1:4f996a4:             }
1:4f996a4:         } catch (XAException xe)
1:db9a013:         {
1:4f996a4:             xaRetVal = processXAException(xe);
1:4f996a4:         }
1:4f996a4:         writeSYNCCRD(CodePoint.SYNCTYPE_PREPARE,
1:db9a013:                      xaRetVal, null);
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      *  Forget the xa transaction. Send SYNCCRD response.
1:4f996a4:      * 
1:4f996a4:      *  @param xid - XID 
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void forgetXATransaction(Xid xid) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         XAResource xaResource = getXAResource();
1:db4c995:         int xaRetVal = XAResource.XA_OK;
1:bc61783: 
1:4f996a4:         try {
1:4f996a4:             xaResource.forget(xid);
1:4f996a4:             if (SanityManager.DEBUG)
1:4f996a4:             {
1:4f996a4:                 connThread.trace("forgot xa transaction: xaRetVal=" + xaRetVal);
1:4f996a4:             }
1:4f996a4:         } catch (XAException xe)
1:4f996a4:         {
1:4f996a4:             xaRetVal = processXAException(xe);
1:4f996a4:         }
1:4f996a4:         writeSYNCCRD(CodePoint.SYNCTYPE_REQ_FORGET,
1:db9a013:                      xaRetVal, null);
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     // JCC doesn't send xaflags but always wants TMSTARTRSCAN.  
1:4f996a4:     //So default to that if we got no xaflags
1:4f996a4:     private void recoverXA() throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         recoverXA(XAResource.TMSTARTRSCAN);
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      * Call recover. Send SYNCCRD response with indoubt list
1:4f996a4:      * 
1:4f996a4:      *  @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void recoverXA(int xaflags) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         XAResource xaResource = getXAResource();
1:db4c995:         int xaRetVal = XAResource.XA_OK;
1:4f996a4:         Xid[] indoubtXids = null;
1:4f996a4:         try {
1:4f996a4:             indoubtXids = xaResource.recover(xaflags);
1:4f996a4:         } catch (XAException xe)
1:4f996a4:         {
1:4f996a4:             xaRetVal = processXAException(xe);
1:4f996a4:         }
1:4f996a4:         writeSYNCCRD(CodePoint.SYNCTYPE_INDOUBT,
1:4f996a4:                      xaRetVal, indoubtXids);        
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /** Write SYNCCRD (SYNCCTL response)
1:4f996a4:      * @param synctype - XA Command to send response for see  parseSYNCTYPE
1:4f996a4:      * @param xaRetVal - return value from XA command
1:4f996a4:      * @param xids - list of xids to return for recover. 
1:4f996a4:      *               null for other commands
1:4f996a4:      * @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void writeSYNCCRD (int synctype, int xaRetVal, Xid[] xids) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         writer.createDssReply();
1:4f996a4:         writer.startDdm(CodePoint.SYNCCRD);
1:4f996a4:         writer.startDdm(CodePoint.XARETVAL);
1:4f996a4:         writer.writeInt(xaRetVal);
1:4f996a4:         writer.endDdm();
1:4f996a4:         if (xids != null)
1:4f996a4:             writePRPHRCLST(xids);
1:4f996a4:         writer.endDdmAndDss();
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /** write PRPHRCLST (indoubt list)
1:4f996a4:      * 
1:4f996a4:      * @param xids - list of indoubt xa transactions obtained from recover
3:4f996a4:      * @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     private void writePRPHRCLST(Xid[] xids) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         int xidcnt = (xids == null ? 0 : xids.length);
1:4f996a4:         writer.startDdm(CodePoint.PRPHRCLST);
1:4f996a4:         writer.writeScalar2Bytes(CodePoint.XIDCNT, xidcnt);
1:4f996a4:         for (int i = 0; i < xidcnt; i++)
1:4f996a4:             writeXID(xids[i]);
1:4f996a4:         writer.endDdm();
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /** write XID
1:4f996a4:      * 
1:4f996a4:      * @param xid - XID to write
1:4f996a4:      * @throws DRDAProtocolException
1:4f996a4:      */
1:4f996a4:     
1:4f996a4:     private void writeXID(Xid xid) throws DRDAProtocolException
1:4f996a4:     {
1:4f996a4:         writer.startDdm(CodePoint.XID);
1:4f996a4:         int formatId = xid.getFormatId();
1:4f996a4:         byte[] gtrid = xid.getGlobalTransactionId();
1:4f996a4:         byte[] bqual = xid.getBranchQualifier();
1:4f996a4:         
1:4f996a4:         writer.writeInt(formatId);
1:4f996a4:         writer.writeInt(gtrid.length);
1:4f996a4:         writer.writeInt(bqual.length);
1:4f996a4:         writer.writeBytes(gtrid);
1:4f996a4:         writer.writeBytes(bqual);
1:4f996a4:         writer.endDdm();
1:4f996a4:     }
1:4f996a4:     
1:bc61783: 
1:4f996a4:     /** get XAResource for the connection
1:4f996a4:      *
1:4f996a4:      * @return XAResource
1:4f996a4:      */
1:4f996a4:     private XAResource getXAResource()
1:4f996a4:     {
1:4f996a4:         return ((XADatabase) connThread.getDatabase()).getXAResource();
1:4f996a4:         
1:4f996a4:     }
1:4f996a4:     
1:4f996a4:     /** printable syncType for debug output
1:4f996a4:      * @param syncType
1:4f996a4:      * @return - sync type meaning
1:4f996a4:      */
1:4f996a4:     private String syncTypeToString(int syncType)
1:4f996a4:     {
1:4f996a4:         switch (syncType)
1:4f996a4:         {  
1:4f996a4:             case CodePoint.SYNCTYPE_NEW_UOW:
1:4f996a4:                 return "SYNCTYPE_NEW_UOW";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_END_UOW:
1:4f996a4:                 return "SYNCTYPE_END_UOW";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_PREPARE:
1:4f996a4:                 return "SYNCTYPE_PREPARE";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_MIGRATE:
1:4f996a4:                 return "SYNCTYPE_MIGRATE";
1:4f996a4:                             
1:4f996a4:             case CodePoint.SYNCTYPE_REQ_COMMIT:
1:4f996a4:                 return "SYNCTYPE_REQ_COMMIT";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_COMMITTED:
1:4f996a4:                 return "SYNCTYPE_COMMITTED";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_REQ_FORGET:
1:4f996a4:                 return "SYNCTYPE_FORGET";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_ROLLBACK:
1:4f996a4:                 return "SYNCTYPE_ROLLBACK";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_REQ_LOG:
1:4f996a4:                 return "SYNCTYPE_REQ_LOG";
1:4f996a4:                 
1:4f996a4:             case   CodePoint.SYNCTYPE_MIGRATED:
1:4f996a4:                 return "SYNCTYPE_MIGRATED";
1:4f996a4:                 
1:4f996a4:             case CodePoint.SYNCTYPE_INDOUBT:
1:4f996a4:                 return "SYNCTYPE_INDOUBT";
1:4f996a4:                 
1:4f996a4:             default:
1:4f996a4:                 return "UNKNOWN SYNCTYPE";
1:db9a013:         }
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /** 
1:4f996a4:      * printable xaflags
1:4f996a4:      * @param xaflags
1:4f996a4:      * @return printable xaflags for debug output
1:4f996a4:      */
1:4f996a4:     private String xaflagsToString(int xaflags)
1:4f996a4:     {
1:4f996a4:         switch (xaflags)
1:4f996a4:         {
1:4f996a4:             case XAResource.TMENDRSCAN :
1:4f996a4:                 return "XAResource.TMENDRSCAN";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMFAIL:
1:4f996a4:                 return "XAResource.TMFAIL";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMNOFLAGS:
1:4f996a4:                 return "XAResource.TMNOFLAGS";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMJOIN:
1:4f996a4:                 return "XAResource.TMJOIN";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMONEPHASE:
1:4f996a4:                 return "XAResource.TMONEPHASE";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMRESUME:
1:4f996a4:                 return "XAResource.TMRESUME";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMSTARTRSCAN:
1:4f996a4:                 return "XAResource.TMSTARTRSCAN";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMSUCCESS:
1:4f996a4:                 return "XAResource.TMSUCCESS";
1:4f996a4:                 
1:4f996a4:             case XAResource.TMSUSPEND:
1:4f996a4:                 return "XAResource.TMSUSPEND";
1:4f996a4:                 
1:4f996a4:             default:
1:4f996a4:                 return "UNRECOGNIZED flags:" + xaflags;
1:4f996a4:                 
1:4f996a4:         }
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /** 
1:4f996a4:      * return xa exception errorCode.
1:4f996a4:      * print to console for debug output.
1:4f996a4:      * @param xe - XA Exception
1:4f996a4:      */
1:4f996a4:     private int processXAException(XAException xe)
1:4f996a4:     {
1:4f996a4:         int xaRetVal = xe.errorCode;
1:4f996a4:         if (SanityManager.DEBUG)
1:4f996a4:         {
1:4f996a4:             connThread.getServer().consoleExceptionPrint(xe);
1:4f996a4:         }
1:4f996a4:         return xaRetVal;
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:bb9f97a:      * @return The ResourceAdapter instance for
1:bb9f97a:      *         the underlying database.
1:4f996a4:      */
1:bb9f97a:     ResourceAdapter getResourceAdapter()
1:4f996a4:     {
1:bb9f97a:         return ((XADatabase)connThread.getDatabase()).getResourceAdapter();
1:4f996a4:     }
1:bc61783: 
18:bc61783:     /**
1:09b38be:      * This function rollbacks the current global transaction associated
1:09b38be:      * with the XAResource or a local transaction. The function should
1:09b38be:      * be called only in exceptional cases - like client socket
1:09b38be:      * is closed. */
1:09b38be:     void rollbackCurrentTransaction()
1:09b38be:     {
1:09b38be:         if (xid != null) {
1:09b38be:             boolean local  = ( xid.getFormatId() == -1);
1:09b38be:             if (!local) {
1:09b38be:                 try {
1:bb9f97a:                     XAXactId xid_im = new XAXactId(xid);
1:bb9f97a:                     getResourceAdapter().cancelXATransaction(
1:bb9f97a:                         xid_im,
1:bb9f97a:                         MessageId.CONN_CLOSE_XA_TRANSACTION_ROLLED_BACK
1:bb9f97a:                     );
1:09b38be:                 } catch (XAException e) {
1:bb9f97a:                     Monitor.logThrowable(e);
1:09b38be:                 }
1:4f996a4:             } else {
1:09b38be:                 try {
1:09b38be:                     rollbackTransaction(xid, false);
1:09b38be:                 } catch  (DRDAProtocolException e) {
1:09b38be:                     // because we do not dump any DRDA stuff to the socket
1:09b38be:                     // the exception can not be thrown in this case
1:bb9f97a:                     // However, we will log the exception to the monitor
1:bb9f97a:                     Monitor.logThrowable(e);
1:09b38be:                 }
1:09b38be:             }
1:09b38be:             xid = null;
1:09b38be:         }
1:09b38be:     }
1:09b38be: 
1:4f996a4: }
1:bc61783: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:      *   CodePoint.SYNCTYPE_NEW_UOW -&gt; XAResource.start()
1:      *   CodePoint.SYNCTYPE_END_UOW -&gt; XAResource.end()
1:      *   CodePoint.SYNCTYPE_PREPARE -&gt; XAResource.prepare()
1:      *   CodePoint.SYNCTYPE_MIGRATE -&gt; not supported  //SYNCPT MGR LEVEL 5
1:      *   CodePoint.SYNCTYPE_REQ_COMMIT -&gt; not supported //SYNCPT MGR LEVEL 5
1:      *   CodePoint.SYNCTYPE_COMMITTED -&gt; XAResource.commit()  
1:      *   CodePoint.SYNCTYPE_REQ_LOG -&gt;  not supported
1:      *   CodePoint.SYNCTYPE_REQ_FORGET -&gt; XAResource.forget()
1:      *   CodePoint.SYNCTYPE_ROLLBACK -&gt; XAResource.rollback()
1:      *   CodePoint.SYNCTYPE_MIGRATED -&gt; not supported
1:      *   CodePoint.SYNCTYPE_INDOUBT   -&gt; XAResource.recover();
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db9a013
/////////////////////////////////////////////////////////////////////////
1:                     break;
1:                     xaflags = parseXAFlags();
/////////////////////////////////////////////////////////////////////////
1:                 break;
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1:      */
/////////////////////////////////////////////////////////////////////////
1:      */
/////////////////////////////////////////////////////////////////////////
1:                      xaRetVal, null);
/////////////////////////////////////////////////////////////////////////
1:         {
1:                      xaRetVal, null);
/////////////////////////////////////////////////////////////////////////
1:                      xaRetVal, null);
/////////////////////////////////////////////////////////////////////////
1:         }
commit:db4c995
/////////////////////////////////////////////////////////////////////////
1: 
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
/////////////////////////////////////////////////////////////////////////
1: 		int xaRetVal = XAResource.XA_OK;
/////////////////////////////////////////////////////////////////////////
1: 		int xaRetVal = XAResource.XA_OK;
/////////////////////////////////////////////////////////////////////////
1: 		int xaRetVal = XAResource.XA_OK;
/////////////////////////////////////////////////////////////////////////
1: 		int xaRetVal = XAResource.XA_OK;
/////////////////////////////////////////////////////////////////////////
1: 		int xaRetVal;
/////////////////////////////////////////////////////////////////////////
1: 		int xaRetVal = XAResource.XA_OK;
/////////////////////////////////////////////////////////////////////////
1: 		int xaRetVal = XAResource.XA_OK;
commit:cccf5dd
/////////////////////////////////////////////////////////////////////////
1: 		// The value -1 means no value of timeout received
1: 		long xaTimeout = -1;
1: 		boolean readXATimeout = false;
/////////////////////////////////////////////////////////////////////////
1: 					xaTimeout = parseXATimeout();
1: 					readXATimeout = true;
/////////////////////////////////////////////////////////////////////////
1: 				startXATransaction(xid, xaflags, xaTimeout);
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Parses a XA transaction timout value.
1: 	 *
1: 	 * @return A timeout value.
1: 	 * @throws DRDAProtocolException
1: 	 */
1: 	private long parseXATimeout() throws DRDAProtocolException
1: 	{
1: 		return reader.readNetworkLong();
1: 	}
1: 
1: 	 *  @param xaTimeout - The timeout for the global transaction in millis
1:      *                     (or -1 if not specified)
1: 	private void startXATransaction(Xid xid, int xaflags, long xaTimeout)
1: 												throws DRDAProtocolException
1: 			if (xid.getFormatId() == -1 && xaTimeout != -1) {
1: 				// The value of timeout might be specified only for global transactions
1: 				throw new XAException(XAException.XAER_PROTO);
1: 			} else if (xaTimeout != -1 && xaflags != XAResource.TMNOFLAGS) {
1: 				// According the DRDA spec if the value of timeout was specified
1: 				// a TMNOFLAGS have to be used
1: 				throw new XAException(XAException.XAER_PROTO);
1: 			} else {
1: 				if (xaTimeout == 0) {
1:                     // According the DRDA specification
1:                     // value 0 means the unlimited timeout
1:                     // Integer.MAX_VALUE is used in derby
1:                     // to set up the infinite timeout.
1:                     // In JDBC spec the value 0 means the resource
1:                     // manager's default value.
1:                     xaResource.setTransactionTimeout(Integer.MAX_VALUE);
1: 				} else if (xaTimeout == -1) {
1:                     // The timeout value was not specified, so use the default
1:                     // timeout - see javadoc for XAResource.setTransactionTimeout
1: 					xaResource.setTransactionTimeout(0);
1:                 } else {
1:                     // The value of timeout was specified
1:                     xaResource.setTransactionTimeout((int) (xaTimeout/1000));
1:                 }
1: 				if (xid.getFormatId() != -1) {
1: 					xaResource.start(xid,xaflags);
1: 				}
1:             	this.xid = xid;
1: 			}
commit:0d841f1
/////////////////////////////////////////////////////////////////////////
1:             this.xid = null;
commit:09b38be
/////////////////////////////////////////////////////////////////////////
1:     /** Holds the Xid of the global transaction associated with
1:       * the corresponding DRDAConnThread (and connection itself). */
1:     private Xid xid;
/////////////////////////////////////////////////////////////////////////
1:         xid = null;
/////////////////////////////////////////////////////////////////////////
1: 				rollbackTransaction(xid, true);
/////////////////////////////////////////////////////////////////////////
0:             this.xid = xid;
/////////////////////////////////////////////////////////////////////////
1: 	 * Rollback transaction. Optionally send SYNCCRD response.
1:      * @param sendSYNCCRD Indicates whether the function should
1:      *                    send a SYNCCRD response
1: 	private void rollbackTransaction(Xid xid, boolean sendSYNCCRD) throws DRDAProtocolException
1: 			rollbackLocalTransaction(sendSYNCCRD);
1: 			rollbackXATransaction(xid, sendSYNCCRD);
1: 	 * Rollback a local transaction. Optionally send SYNCCRD response.
1:      * @param sendSYNCCRD Indicates whether the function should
1:      *                    send a SYNCCRD response
1: 	 * @throws DRDAProtocolException
1: 	private void rollbackLocalTransaction(boolean sendSYNCCRD) throws DRDAProtocolException
/////////////////////////////////////////////////////////////////////////
1:         if (sendSYNCCRD) {
1:             writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED,
1:                          xaRetVal, null);
1:         }
1: 	 *  Rollback the xa transaction. Optionally send SYNCCRD response.
1:      *  @param sendSYNCCRD Indicates whether the function should
1:      *                     send a SYNCCRD response
1: 	private void rollbackXATransaction(Xid xid, boolean sendSYNCCRD) throws DRDAProtocolException
/////////////////////////////////////////////////////////////////////////
1:         if (sendSYNCCRD) {
1:             writeSYNCCRD(CodePoint.SYNCTYPE_ROLLBACK,
1:                          xaRetVal, null);
1:         }
/////////////////////////////////////////////////////////////////////////
1:             xid = null;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * This function rollbacks the current global transaction associated
1:      * with the XAResource or a local transaction. The function should
1:      * be called only in exceptional cases - like client socket
1:      * is closed. */
1:     void rollbackCurrentTransaction()
1:     {
1:         if (xid != null) {
1:             boolean local  = ( xid.getFormatId() == -1);
1:             try {
0:                 // if the transaction is not local disassociate the transaction from
0:                 // the connection first because the rollback can not be performed
0:                 // on a transaction associated with the XAResource
1:                 try {
1:                     if (!local) {
1:                         XAResource xaResource = getXAResource();
0:                         // this will throw the XAException (because TMFAIL
0:                         // will throw an exception)
0:                         xaResource.end(xid, XAResource.TMFAIL);
1:                     }
1:                 } catch (XAException e) {
0:                     // do not print out the exception generally thrown
0:                     // when TMFAIL flag is present
0:                     if (e.errorCode < XAException.XA_RBBASE
0:                         || e.errorCode > XAException.XA_RBEND) {
1:                         connThread.getServer().consoleExceptionPrint(e);
1:                     }
1:                 }
1:                 rollbackTransaction(xid, false);
1:             } catch  (DRDAProtocolException e) {
1:                 // because we do not dump any DRDA stuff to the socket
1:                 // the exception can not be thrown in this case
0:                 // However, we will dump the exception to the console
1:                 connThread.getServer().consoleExceptionPrint(e);
1:             }
0:             xid = null;
1:         }
1:     }
1: 
commit:f42f1b7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.drda;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import javax.transaction.xa.*;
1: 
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     private DRDAConnThread connThread;
1:     private DDMReader reader;
1:     private DDMWriter writer;
1:     DRDAXAProtocol(DRDAConnThread connThread)
1:     {
1:         this.connThread = connThread;
1:         reader = connThread.getReader();
1:         writer = connThread.getWriter();
1:     }
1:     /**
1:      * Parse SYNCCTL - Parse SYNCCTL command for XAMGR lvl 7
1:      *
1:      */
1:     protected void parseSYNCCTL() throws DRDAProtocolException
1:     {
1:         
1:         reader.markCollection();
1:         
1:         int codePoint = reader.getCodePoint(CodePoint.SYNCTYPE);
1:         int syncType = parseSYNCTYPE();
1:         
1:         int xaflags = 0;
1:         boolean readXAFlags = false;
1:         Xid xid = null;
0:         // The value -1 means no value of timeout received
0:         long xaTimeout = -1;
0:         boolean readXATimeout = false;
1:         codePoint = reader.getCodePoint();
1:         while (codePoint != -1)
1:         {
1:             switch(codePoint)
1:             {
1:                 case CodePoint.XID:
1:                     xid = parseXID();
1:                     break;                    
1:                 case CodePoint.XAFLAGS:
0:                     xaflags = parseXAFlags();                    
1:                     readXAFlags =true;
1:                     break;
1:                 case CodePoint.TIMEOUT:
0:                     xaTimeout = parseXATimeout();
0:                     readXATimeout = true;
1:                     break;
1:                 case CodePoint.RLSCONV:
1:                     connThread.codePointNotSupported(codePoint);      
1:                 default:
1:                     connThread.invalidCodePoint(codePoint);
1:             }
1:             codePoint = reader.getCodePoint();
1:         }
1:         {
1:             connThread.trace("syncType = " + syncTypeToString(syncType));
1:             connThread.trace("xid = " + xid);
1:             connThread.trace("xaflags =" + xaflagsToString(xaflags));
1:         }
1:         if (syncType != CodePoint.SYNCTYPE_INDOUBT)
1:         {
1:             if (xid == null)
1:                 connThread.missingCodePoint(CodePoint.XID);
1:             
1:             // All but Recover and forget require xaFlags
1:             if (syncType != CodePoint.SYNCTYPE_REQ_FORGET && 
1:                 ! readXAFlags)
1:                 if (SanityManager.DEBUG)
1:                     connThread.missingCodePoint(CodePoint.XAFLAGS);
1:         }
1:         switch (syncType)
1:         {  
1:             case CodePoint.SYNCTYPE_NEW_UOW:
1:                 // new unit of work for XA
1:                 // formatId -1 is just a local connection
0:                 startXATransaction(xid, xaflags, xaTimeout);
1:                 break;
1:             case CodePoint.SYNCTYPE_END_UOW:
1:                 // End unit of work
1:                 endXA(xid,xaflags);
1:                 break;
1:             case CodePoint.SYNCTYPE_PREPARE:
1:                 prepareXATransaction(xid);
1:                 // Prepare to commit 
1:                 break;
1:             case CodePoint.SYNCTYPE_MIGRATE:
1:                 // migrate to resync server sync type
1:                 connThread.codePointNotSupported(codePoint);                
1:                 break;            
1:             case CodePoint.SYNCTYPE_REQ_COMMIT:
1:                 // request to commit sync type
1:                 commitTransaction(xid,xaflags);
1:                 break;
1:             case CodePoint.SYNCTYPE_COMMITTED:
1:                 // commit  sync type
1:                 commitTransaction(xid, xaflags);
1:                 break;
1:             case CodePoint.SYNCTYPE_REQ_FORGET:
1:                 // request to forget sync type
1:                 forgetXATransaction(xid);
1:                 break;
1:             case CodePoint.SYNCTYPE_ROLLBACK:
1:                 //rollback sync type
0:                 rollbackTransaction(xid, true);
1:                 break;
1:             case CodePoint.SYNCTYPE_INDOUBT:
1:                 //recover sync type
1:                 if (readXAFlags)
1:                     recoverXA(xaflags);
1:                 else
1:                     recoverXA();
1:                 break;
1:             default:
1:                 connThread.invalidCodePoint(codePoint);
1:          }
1:     }
1:     /** 
1:      * parse SYNCTYPE for XAMGR lvl 7
1:      * return synctype value 
0:      *   CodePoint.SYNCTYPE_NEW_UOW -> XAResource.start()
0:      *   CodePoint.SYNCTYPE_END_UOW -> XAResource.end()
0:      *   CodePoint.SYNCTYPE_PREPARE -> XAResource.prepare()
0:      *   CodePoint.SYNCTYPE_MIGRATE -> not supported  //SYNCPT MGR LEVEL 5
0:      *   CodePoint.SYNCTYPE_REQ_COMMIT -> not supported //SYNCPT MGR LEVEL 5
0:      *   CodePoint.SYNCTYPE_COMMITTED -> XAResource.commit()  
1:      *                                   or local commit for null XID
0:      *   CodePoint.SYNCTYPE_REQ_LOG ->  not supported
0:      *   CodePoint.SYNCTYPE_REQ_FORGET -> XAResource.forget()
0:      *   CodePoint.SYNCTYPE_ROLLBACK -> XAResource.rollback()
0:      *   CodePoint.SYNCTYPE_MIGRATED -> not supported
0:      *   CodePoint.SYNCTYPE_INDOUBT   -> XAResource.recover();
1:      * 
1:      */     
1:     protected int  parseSYNCTYPE() throws DRDAProtocolException
1:     {
1:         return reader.readUnsignedByte();
1:         
1:     }
1:     
1:     /** Parse XID
1:      *  formatId -1 translates into a null XID and a local transaction
1:      */
1:     private  Xid parseXID () throws DRDAProtocolException
1:     {
1:         int formatId = reader.readNetworkInt();
1:         byte[] gtrid = null;
1:         byte[] bqual = null;
1:         if (formatId != -1)
1:         {
1:             int gtridLen = reader.readNetworkInt();
1:             int bqualLen = reader.readNetworkInt();
1:             
1:             gtrid = reader.readBytes(gtridLen);
1:             bqual = reader.readBytes(bqualLen);
1:         }
1:         return new DRDAXid(formatId, gtrid, bqual);
1:     }
1:     /** 
1:      *  parse XAFlags 
1:      *
1:      * @return XAFlags value
1:      * @throws DRDAProtocolException
1:      */
1:     private int parseXAFlags() throws DRDAProtocolException
1:     {
1:         return reader.readNetworkInt();
1:     }
1:     /**
0:      * Parses a XA transaction timout value.
1:      *
0:      * @return A timeout value.
1:      * @throws DRDAProtocolException
1:      */
0:     private long parseXATimeout() throws DRDAProtocolException
1:     {
0:         return reader.readNetworkLong();
1:     }
1:     /**
1:      *  Start the xa transaction. Send SYNCRRD response
1:      * 
1:      *  @param xid - XID (formatId = -1 for local transaction)
1:      *  @param xaflags - xaflags
0:      *  @param xaTimeout - The timeout for the global transaction in millis
1:      *  @throws DRDAProtocolException
1:      */
0:     private void startXATransaction(Xid xid, int xaflags, long xaTimeout)
0:                                                 throws DRDAProtocolException
1:     {
1:         XAResource xaResource = getXAResource();
1:         int xaRetVal = XAResource.XA_OK;
1:         try {
0:             if (xid.getFormatId() == -1 && xaTimeout != -1) {
0:                 // The value of timeout might be specified only for global transactions
0:                 throw new XAException(XAException.XAER_PROTO);
0:             } else if (xaTimeout != -1 && xaflags != XAResource.TMNOFLAGS) {
0:                 // According the DRDA spec if the value of timeout was specified
0:                 // a TMNOFLAGS have to be used
0:                 throw new XAException(XAException.XAER_PROTO);
1:             } else {
0:                 if (xaTimeout == 0) {
/////////////////////////////////////////////////////////////////////////
0:                 } else if (xaTimeout == -1) {
0:                     xaResource.setTransactionTimeout(0);
0:                 if (xid.getFormatId() != -1) {
0:                     xaResource.start(xid,xaflags);
1:                 }
0:                 this.xid = xid;
1:             }
1:         } catch (XAException xe)
1:         {
1:             xaRetVal = processXAException(xe);
1:         }
1:         writeSYNCCRD(CodePoint.SYNCTYPE_NEW_UOW, 
1:                      xaRetVal, null);
1:         
1:     }
1:     
1:     /**
1:      *  Commit  the xa transaction. Send SYNCCRD response
1:      * 
1:      *  @param xid - XID (formatId = -1 for local transaction)
1:      *  @param xaflags - xaflags
1:      *  @throws DRDAProtocolException
1:      */
1:     private void commitTransaction(Xid xid, int xaflags) throws DRDAProtocolException
1:     {
1:         boolean local  = ( xid.getFormatId() == -1);
1:         if (local)
1:             commitLocalTransaction();
1:         else
1:             commitXATransaction(xid, xaflags);
1:     }
1:     /**
1:      *  Commit local transaction. Send SYNCCRD response.
1:      * 
1:      *  @throws DRDAProtocolException
1:      */       
1:     private void commitLocalTransaction() throws DRDAProtocolException
1:     {
1:         int xaRetVal = XAResource.XA_OK;
1:         try {
1:             connThread.getDatabase().commit();
1:         }
1:         catch  (Exception e)
1:         {
1:             xaRetVal = XAException.XAER_RMFAIL;
1:             if (SanityManager.DEBUG)
1:             {
0:                 connThread.getServer().consoleExceptionPrint(e);
1:             }
1:         }
1:         writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
1:                      xaRetVal, null);
1:     }
1:     
1:     /**
1:      *  Commit  the xa transaction. Send SYNCCRD response.
1:      * 
1:      *  @param xid - XID 
1:      *  @param xaflags - xaflags
1:      *  @throws DRDAProtocolException
1:      */
1:     private void commitXATransaction(Xid xid, int xaflags) throws DRDAProtocolException
1:     {
1:         XAResource xaResource = getXAResource();
1:         int xaRetVal = XAResource.XA_OK;
1:         // check this
1:         boolean isOnePhase = (xaflags & XAResource.TMONEPHASE) != 0;
1:         try {
1:             xaResource.commit(xid, isOnePhase);
1:             if (SanityManager.DEBUG)
1:                 connThread.trace("committed XA transaction: xaRetVal=" + xaRetVal);
1:         } catch (XAException xe)
1:         {
1:             xaRetVal = processXAException(xe);
1:         }
1:         writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
1:                      xaRetVal, null);
1:         
1:     }
1:     /**
0:      * Rollback transaction. Optionally send SYNCCRD response.
1:      * @param xid  Xid for rollback for global transaction.
1:      *             If xid formatid is -1 it represents a local transaction
1:      */
0:     private void rollbackTransaction(Xid xid, boolean sendSYNCCRD) throws DRDAProtocolException
1:     {
1:         boolean local  = ( xid.getFormatId() == -1);
1:         if (local)
0:             rollbackLocalTransaction(sendSYNCCRD);
1:         else
0:             rollbackXATransaction(xid, sendSYNCCRD);
1:     }
1:     
1:     /**
0:      * Rollback a local transaction. Optionally send SYNCCRD response.
1:      *
1:      * @throws DRDAProtocolException
1:      */
0:     private void rollbackLocalTransaction(boolean sendSYNCCRD) throws DRDAProtocolException
1:     {
1:         int xaRetVal = XAResource.XA_OK;
1:         try {
1:             connThread.getDatabase().rollback();
1:         }
1:         catch  (Exception e)
1:         {
1:             xaRetVal = XAException.XAER_RMFAIL;
1:             if (SanityManager.DEBUG)
1:             {
0:                 connThread.getServer().consoleExceptionPrint(e);
1:             }
1:             
1:         }
1:     }
1:     /**
0:      *  Rollback the xa transaction. Optionally send SYNCCRD response.
1:      * 
1:      *  @param xid - XID 
1:      *  @throws DRDAProtocolException
1:      */
0:     private void rollbackXATransaction(Xid xid, boolean sendSYNCCRD) throws DRDAProtocolException
1:     {
1:         XAResource xaResource = getXAResource();
1:         int xaRetVal = XAResource.XA_OK;
1:         try {
1:             xaResource.rollback(xid);
1:             if (SanityManager.DEBUG)
1:             {
1:                 connThread.trace("rollback  XA transaction: xaRetVal=" + xaRetVal); 
1:             }
1:         } catch (XAException xe)
1:         {
1:             xaRetVal = processXAException(xe);
1:         }
1:     }
1:     /**
1:      *  End  the xa transaction. Send SYNCRRD response
1:      * 
1:      *  @param xid - XID 
1:      *  @param xaflags - xaflags
1:      *  @throws DRDAProtocolException
1:      */
1:     private void endXA(Xid xid, int xaflags) throws DRDAProtocolException
1:     {
1:         XAResource xaResource = getXAResource();        
1:         int xaRetVal = XAResource.XA_OK;
1:         try {
1:             xaResource.end(xid,xaflags);
1:             if (SanityManager.DEBUG)
1:             {
1:                 connThread.trace("ended XA transaction. xid =  " + xid +
1:                                " xaflags =" + xaflags + 
1:                                  "xaRetVal=" + xaRetVal); 
1:             }
1:         } catch (XAException xe)
1:         {
1:             xaRetVal = processXAException(xe);
1:         }
1:         writeSYNCCRD(CodePoint.SYNCTYPE_END_UOW,
1:                      xaRetVal, null);        
1:     }
1:     /**
1:      *  Prepare the xa transaction. Send SYNCCRD response.
1:      * 
1:      *  @param xid - XID 
1:      *  @throws DRDAProtocolException
1:      */
1:     private void prepareXATransaction(Xid xid) throws DRDAProtocolException
1:     {
1:         XAResource xaResource = getXAResource();
0:         int xaRetVal;
1:         try {
1:             xaRetVal = xaResource.prepare(xid);
1:             if (SanityManager.DEBUG)
1:             {
1:                 connThread.trace("prepared xa transaction: xaRetVal=" +
1:                                 xaRetVal); 
1:             }
1:         } catch (XAException xe)
1:         {            
1:             xaRetVal = processXAException(xe);
1:         }
1:         writeSYNCCRD(CodePoint.SYNCTYPE_PREPARE,
1:                      xaRetVal, null);        
1:     }
1:     /**
1:      *  Forget the xa transaction. Send SYNCCRD response.
1:      * 
1:      *  @param xid - XID 
1:      *  @throws DRDAProtocolException
1:      */
1:     private void forgetXATransaction(Xid xid) throws DRDAProtocolException
1:     {
1:         XAResource xaResource = getXAResource();
1:         int xaRetVal = XAResource.XA_OK;
1:         try {
1:             xaResource.forget(xid);
1:             if (SanityManager.DEBUG)
1:             {
1:                 connThread.trace("forgot xa transaction: xaRetVal=" + xaRetVal);
1:             }
1:         } catch (XAException xe)
1:         {
1:             xaRetVal = processXAException(xe);
1:         }
1:         writeSYNCCRD(CodePoint.SYNCTYPE_REQ_FORGET,
1:                      xaRetVal, null);        
1:     }
1:     // JCC doesn't send xaflags but always wants TMSTARTRSCAN.  
1:     //So default to that if we got no xaflags
1:     private void recoverXA() throws DRDAProtocolException
1:     {
1:         recoverXA(XAResource.TMSTARTRSCAN);
1:     }
1:     /**
1:      * Call recover. Send SYNCCRD response with indoubt list
1:      * 
1:      *  @throws DRDAProtocolException
1:      */
1:     private void recoverXA(int xaflags) throws DRDAProtocolException
1:     {
1:         XAResource xaResource = getXAResource();
1:         int xaRetVal = XAResource.XA_OK;
1:         Xid[] indoubtXids = null;
1:         try {
1:             indoubtXids = xaResource.recover(xaflags);
1:         } catch (XAException xe)
1:         {
1:             xaRetVal = processXAException(xe);
1:         }
1:         writeSYNCCRD(CodePoint.SYNCTYPE_INDOUBT,
1:                      xaRetVal, indoubtXids);        
1:     }
1:     /** Write SYNCCRD (SYNCCTL response)
1:      * @param synctype - XA Command to send response for see  parseSYNCTYPE
1:      * @param xaRetVal - return value from XA command
1:      * @param xids - list of xids to return for recover. 
1:      *               null for other commands
1:      * @throws DRDAProtocolException
1:      */
1:     private void writeSYNCCRD (int synctype, int xaRetVal, Xid[] xids) throws DRDAProtocolException
1:     {
1:         writer.createDssReply();
1:         writer.startDdm(CodePoint.SYNCCRD);
1:         writer.startDdm(CodePoint.XARETVAL);
1:         writer.writeInt(xaRetVal);
1:         writer.endDdm();
1:         if (xids != null)
1:             writePRPHRCLST(xids);
1:         writer.endDdmAndDss();
1:     }
1:     /** write PRPHRCLST (indoubt list)
1:      * 
1:      * @param xids - list of indoubt xa transactions obtained from recover
1:      * @throws DRDAProtocolException
1:      */
1:     private void writePRPHRCLST(Xid[] xids) throws DRDAProtocolException
1:     {
1:         int xidcnt = (xids == null ? 0 : xids.length);
1:         writer.startDdm(CodePoint.PRPHRCLST);
1:         writer.writeScalar2Bytes(CodePoint.XIDCNT, xidcnt);
1:         for (int i = 0; i < xidcnt; i++)
1:             writeXID(xids[i]);
1:         writer.endDdm();
1:     }
1:     /** write XID
1:      * 
1:      * @param xid - XID to write
1:      * @throws DRDAProtocolException
1:      */
1:     
1:     private void writeXID(Xid xid) throws DRDAProtocolException
1:     {
1:         writer.startDdm(CodePoint.XID);
1:         int formatId = xid.getFormatId();
1:         byte[] gtrid = xid.getGlobalTransactionId();
1:         byte[] bqual = xid.getBranchQualifier();
1:         
1:         writer.writeInt(formatId);
1:         writer.writeInt(gtrid.length);
1:         writer.writeInt(bqual.length);
1:         writer.writeBytes(gtrid);
1:         writer.writeBytes(bqual);
1:         writer.endDdm();
1:     }
1:     
1:     /** get XAResource for the connection
1:      *
1:      * @return XAResource
1:      */
1:     private XAResource getXAResource()
1:     {
1:         return ((XADatabase) connThread.getDatabase()).getXAResource();
1:         
1:     }
1:     
1:     /** printable syncType for debug output
1:      * @param syncType
1:      * @return - sync type meaning
1:      */
1:     private String syncTypeToString(int syncType)
1:     {
1:         switch (syncType)
1:         {  
1:             case CodePoint.SYNCTYPE_NEW_UOW:
1:                 return "SYNCTYPE_NEW_UOW";
1:                 
1:             case CodePoint.SYNCTYPE_END_UOW:
1:                 return "SYNCTYPE_END_UOW";
1:                 
1:             case CodePoint.SYNCTYPE_PREPARE:
1:                 return "SYNCTYPE_PREPARE";
1:                 
1:             case CodePoint.SYNCTYPE_MIGRATE:
1:                 return "SYNCTYPE_MIGRATE";
1:                             
1:             case CodePoint.SYNCTYPE_REQ_COMMIT:
1:                 return "SYNCTYPE_REQ_COMMIT";
1:                 
1:             case CodePoint.SYNCTYPE_COMMITTED:
1:                 return "SYNCTYPE_COMMITTED";
1:                 
1:             case CodePoint.SYNCTYPE_REQ_FORGET:
1:                 return "SYNCTYPE_FORGET";
1:                 
1:             case CodePoint.SYNCTYPE_ROLLBACK:
1:                 return "SYNCTYPE_ROLLBACK";
1:                 
1:             case CodePoint.SYNCTYPE_REQ_LOG:
1:                 return "SYNCTYPE_REQ_LOG";
1:                 
1:             case   CodePoint.SYNCTYPE_MIGRATED:
1:                 return "SYNCTYPE_MIGRATED";
1:                 
1:             case CodePoint.SYNCTYPE_INDOUBT:
1:                 return "SYNCTYPE_INDOUBT";
1:                 
1:             default:
1:                 return "UNKNOWN SYNCTYPE";
1:          }
1:     }
1:     /** 
1:      * printable xaflags
1:      * @param xaflags
1:      * @return printable xaflags for debug output
1:      */
1:     private String xaflagsToString(int xaflags)
1:     {
1:         switch (xaflags)
1:         {
1:             case XAResource.TMENDRSCAN :
1:                 return "XAResource.TMENDRSCAN";
1:                 
1:             case XAResource.TMFAIL:
1:                 return "XAResource.TMFAIL";
1:                 
1:             case XAResource.TMNOFLAGS:
1:                 return "XAResource.TMNOFLAGS";
1:                 
1:             case XAResource.TMJOIN:
1:                 return "XAResource.TMJOIN";
1:                 
1:             case XAResource.TMONEPHASE:
1:                 return "XAResource.TMONEPHASE";
1:                 
1:             case XAResource.TMRESUME:
1:                 return "XAResource.TMRESUME";
1:                 
1:             case XAResource.TMSTARTRSCAN:
1:                 return "XAResource.TMSTARTRSCAN";
1:                 
1:             case XAResource.TMSUCCESS:
1:                 return "XAResource.TMSUCCESS";
1:                 
1:             case XAResource.TMSUSPEND:
1:                 return "XAResource.TMSUSPEND";
1:                 
1:             default:
1:                 return "UNRECOGNIZED flags:" + xaflags;
1:                 
1:         }
1:     }
1:     /** 
1:      * return xa exception errorCode.
1:      * print to console for debug output.
1:      * @param xe - XA Exception
1:      */
1:     private int processXAException(XAException xe)
1:     {
1:         int xaRetVal = xe.errorCode;
1:         if (SanityManager.DEBUG)
1:         {
1:             connThread.getServer().consoleExceptionPrint(xe);
1:         }
1:         return xaRetVal;
1:     }
commit:344b9ef
/////////////////////////////////////////////////////////////////////////
0: 			xaRetVal = xaResource.prepare(xid);
commit:97a334e
/////////////////////////////////////////////////////////////////////////
0: 			// All but Recover and forget require xaFlags
0: 			if (syncType != CodePoint.SYNCTYPE_REQ_FORGET && 
0: 				! readXAFlags)
/////////////////////////////////////////////////////////////////////////
0: 				if (readXAFlags)
0: 					recoverXA(xaflags);
0: 				else
0: 					recoverXA();
/////////////////////////////////////////////////////////////////////////
0: 	// JCC doesn't send xaflags but always wants TMSTARTRSCAN.  
0: 	//So default to that if we got no xaflags
0: 	private void recoverXA() throws DRDAProtocolException
0: 	{
0: 		recoverXA(XAResource.TMSTARTRSCAN);
0: 	}
0: 	private void recoverXA(int xaflags) throws DRDAProtocolException
0: 			indoubtXids = xaResource.recover(xaflags);
commit:bc61783
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.drda.DRDAXAProtocol.java
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
1: /**
1:  * This class translates DRDA XA protocol from an application requester to XA
1:  * calls for Derby and then translates the results from Derby to DRDA
1:  * for return to the application requester.
1:  * This class requires the use of javax.transaction.xa classes from j2ee,
1:  * so is separated from DRDAConnThread, because of the additional
1:  * library requirements
0:  * @author kmarsden@Sourcery.Org
0:  */
1: 
1: 
0: package org.apache.derby.impl.drda;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import javax.transaction.xa.*;
1: 
1: 
0: public class DRDAXAProtocol {
1: 
0: 	private DRDAConnThread connThread;
0: 	private DDMReader reader;
0: 	private DDMWriter writer;
1: 
1: 
0: 	public DRDAXAProtocol(DRDAConnThread connThread)
0: 	{
0: 		this.connThread = connThread;
0: 		reader = connThread.getReader();
0: 		writer = connThread.getWriter();
1: 
0: 	}
1: 
1: 
1: 
1: 	/**
0: 	 * Parse SYNCCTL - Parse SYNCCTL command for XAMGR lvl 7
0: 	 *
0: 	 */
0: 	protected void parseSYNCCTL() throws DRDAProtocolException
0: 	{
1: 		
0: 		reader.markCollection();
1: 		
0: 		int codePoint = reader.getCodePoint(CodePoint.SYNCTYPE);
0: 		int syncType = parseSYNCTYPE();
1: 		
0: 		int xaflags = 0;
0: 		boolean readXAFlags = false;
0: 		Xid xid = null;
1: 
0: 		codePoint = reader.getCodePoint();
0: 		while (codePoint != -1)
0: 		{
0: 			switch(codePoint)
0: 			{
0: 				case CodePoint.XID:
0: 					xid = parseXID();
0: 					break;					
0: 				case CodePoint.XAFLAGS:
0: 					xaflags = parseXAFlags();					
0: 					readXAFlags =true;
0: 					break;
0: 				case CodePoint.TIMEOUT:
0: 					// optional/ignorable.
0: 					reader.skipBytes();
0: 					break;
0: 				case CodePoint.RLSCONV:
0: 					connThread.codePointNotSupported(codePoint);	  
0: 				default:
0: 					connThread.invalidCodePoint(codePoint);
0: 			}
1: 
0: 			codePoint = reader.getCodePoint();
0: 		}
1: 
1: 
0: 		{
0: 			connThread.trace("syncType = " + syncTypeToString(syncType));
0: 			connThread.trace("xid = " + xid);
0: 			connThread.trace("xaflags =" + xaflagsToString(xaflags));
0: 		}
1: 
0: 		if (syncType != CodePoint.SYNCTYPE_INDOUBT)
0: 		{
0: 			if (xid == null)
0: 				connThread.missingCodePoint(CodePoint.XID);
1: 			
0: 			if (! readXAFlags)
0: 				if (SanityManager.DEBUG)
0: 					connThread.missingCodePoint(CodePoint.XAFLAGS);
0: 		}
1: 
0: 		switch (syncType)
0: 		{  
0: 			case CodePoint.SYNCTYPE_NEW_UOW:
0: 				// new unit of work for XA
0: 				// formatId -1 is just a local connection
0: 				startXATransaction(xid,xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_END_UOW:
0: 				// End unit of work
0: 				endXA(xid,xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_PREPARE:
0: 				prepareXATransaction(xid);
0: 				// Prepare to commit 
0: 				break;
0: 			case CodePoint.SYNCTYPE_MIGRATE:
0: 				// migrate to resync server sync type
0: 				connThread.codePointNotSupported(codePoint);				
0: 				break;			
0: 			case CodePoint.SYNCTYPE_REQ_COMMIT:
0: 				// request to commit sync type
0: 				commitTransaction(xid,xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_COMMITTED:
0: 				// commit  sync type
0: 				commitTransaction(xid, xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_REQ_FORGET:
0: 				// request to forget sync type
0: 				forgetXATransaction(xid);
0: 				break;
0: 			case CodePoint.SYNCTYPE_ROLLBACK:
0: 				//rollback sync type
0: 				rollbackTransaction(xid);
0: 				break;
0: 			case CodePoint.SYNCTYPE_INDOUBT:
0: 				//recover sync type
0: 				recoverXA();
0: 				break;
0: 			default:
0: 				connThread.invalidCodePoint(codePoint);
0:  		}
1: 
0: 	}
1: 
1: 	/** 
0: 	 * parse SYNCTYPE for XAMGR lvl 7
0: 	 * return synctype value 
0: 	 *   CodePoint.SYNCTYPE_NEW_UOW -> XAResource.start()
0: 	 *   CodePoint.SYNCTYPE_END_UOW -> XAResource.end()
0: 	 *   CodePoint.SYNCTYPE_PREPARE -> XAResource.prepare()
0: 	 *   CodePoint.SYNCTYPE_MIGRATE -> not supported  //SYNCPT MGR LEVEL 5
0: 	 *   CodePoint.SYNCTYPE_REQ_COMMIT -> not supported //SYNCPT MGR LEVEL 5
0: 	 *   CodePoint.SYNCTYPE_COMMITTED -> XAResource.commit()  
0: 	 *                                   or local commit for null XID
0: 	 *   CodePoint.SYNCTYPE_REQ_LOG ->  not supported
0: 	 *   CodePoint.SYNCTYPE_REQ_FORGET -> XAResource.forget()
0: 	 *   CodePoint.SYNCTYPE_ROLLBACK -> XAResource.rollback()
0: 	 *   CodePoint.SYNCTYPE_MIGRATED -> not supported
0: 	 *   CodePoint.SYNCTYPE_INDOUBT   -> XAResource.recover();
0: 	 * 
0: 	 */	 
0: 	protected int  parseSYNCTYPE() throws DRDAProtocolException
0: 	{
0: 		return reader.readUnsignedByte();
1: 		
0: 	}
1: 	
1: 
0: 	/** Parse XID
0: 	 *  formatId -1 translates into a null XID and a local transaction
0: 	 */
0: 	private  Xid parseXID () throws DRDAProtocolException
0: 	{
0: 		int formatId = reader.readNetworkInt();
0: 		byte[] gtrid = null;
0: 		byte[] bqual = null;
0: 		if (formatId != -1)
0: 		{
0: 			int gtridLen = reader.readNetworkInt();
0: 			int bqualLen = reader.readNetworkInt();
1: 			
0: 			gtrid = reader.readBytes(gtridLen);
0: 			bqual = reader.readBytes(bqualLen);
0: 		}
0: 		return new DRDAXid(formatId, gtrid, bqual);
0: 	}
1: 
1: 
1: 	/** 
0: 	 *  parse XIDSHR
0: 	 *
0: 	 * @return XIDSHR value
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private int parseXIDSHR() throws DRDAProtocolException
0: 	{
0: 		return reader.readUnsignedByte();
0: 	}
1: 
1: 	/** 
0: 	 *  parse XAFlags 
0: 	 *
0: 	 * @return XAFlags value
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private int parseXAFlags() throws DRDAProtocolException
0: 	{
0: 		return reader.readNetworkInt();
0: 	}
1: 
1: 
1: 	/**
0: 	 *  Start the xa transaction. Send SYNCRRD response
0: 	 * 
0: 	 *  @param xid - XID (formatId = -1 for local transaction)
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void startXATransaction(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
1: 
0: 		try {
0: 			if (xid.getFormatId() != -1)
0: 				xaResource.start(xid,xaflags);
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_NEW_UOW, 
0: 					 xaRetVal, null);
1: 		
0: 	}
1: 	
1: 
1: 	/**
0: 	 *  Commit  the xa transaction. Send SYNCCRD response
0: 	 * 
0: 	 *  @param xid - XID (formatId = -1 for local transaction)
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void commitTransaction(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		boolean local  = ( xid.getFormatId() == -1);
0: 		if (local)
0: 			commitLocalTransaction();
0: 		else
0: 			commitXATransaction(xid, xaflags);
0: 	}
1: 
1: 	/**
0: 	 *  Commit local transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @throws DRDAProtocolException
0: 	 */	   
0: 	private void commitLocalTransaction() throws DRDAProtocolException
0: 	{
0: 		int xaRetVal = XAResource.XA_OK;
0: 		try {
0: 			connThread.getDatabase().commit();
0: 		}
0: 		catch  (Exception e)
0: 		{
0: 			xaRetVal = XAException.XAER_RMFAIL;
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.getServer().consoleExceptionPrint(e);
0: 			}
1: 
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
0: 					 xaRetVal, null);
1: 
0: 	}
1: 
1: 	
1: 	/**
0: 	 *  Commit  the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void commitXATransaction(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 		// check this
0: 		boolean isOnePhase = (xaflags & XAResource.TMONEPHASE) != 0;
0: 		try {
0: 			xaResource.commit(xid, isOnePhase);
0: 			if (SanityManager.DEBUG)
0: 				connThread.trace("committed XA transaction: xaRetVal=" + xaRetVal);
1: 
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
0: 					 xaRetVal, null);
1: 		
0: 	}
1: 
1: 	/**
0: 	 * Rollback transaction
0: 	 * @param xid  Xid for rollback for global transaction.
0: 	 *             If xid formatid is -1 it represents a local transaction
0: 	 */
0: 	private void rollbackTransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		boolean local  = ( xid.getFormatId() == -1);
0: 		if (local)
0: 			rollbackLocalTransaction();
0: 		else
0: 			rollbackXATransaction(xid);
0: 	}
1: 	
1: 	/**
0: 	 * Rollback a local transaction
0: 	 *
0: 	 */
0: 	private void rollbackLocalTransaction() throws DRDAProtocolException
0: 	{
0: 		int xaRetVal = XAResource.XA_OK;
0: 		try {
0: 			connThread.getDatabase().rollback();
0: 		}
0: 		catch  (Exception e)
0: 		{
0: 			xaRetVal = XAException.XAER_RMFAIL;
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.getServer().consoleExceptionPrint(e);
0: 			}
1: 			
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
0: 					 xaRetVal, null);
1: 
0: 	}
1: 
1: 	/**
0: 	 *  Rollback the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void rollbackXATransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
1: 
0: 		try {
0: 			xaResource.rollback(xid);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("rollback  XA transaction: xaRetVal=" + xaRetVal); 
0: 			}
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_ROLLBACK,
0: 					 xaRetVal, null);
1: 		
0: 	}
1: 
1: 	/**
0: 	 *  End  the xa transaction. Send SYNCRRD response
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void endXA(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();		
0: 		int xaRetVal = xaResource.XA_OK;
1: 
0: 		try {
0: 			xaResource.end(xid,xaflags);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("ended XA transaction. xid =  " + xid +
0: 							   " xaflags =" + xaflags + 
0: 								 "xaRetVal=" + xaRetVal); 
0: 			}
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_END_UOW,
0: 					 xaRetVal, null);		
0: 	}
1: 
1: 
1: 	/**
0: 	 *  Prepare the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void prepareXATransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
1: 
0: 		try {
0: 			xaResource.prepare(xid);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("prepared xa transaction: xaRetVal=" +
0: 								xaRetVal); 
0: 			}
0: 		} catch (XAException xe)
0: 		{			
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_PREPARE,
0: 					 xaRetVal, null);		
0: 	}
1: 
1: 	/**
0: 	 *  Forget the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void forgetXATransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
1: 
0: 		try {
0: 			xaResource.forget(xid);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("forgot xa transaction: xaRetVal=" + xaRetVal);
0: 			}
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_REQ_FORGET,
0: 					 xaRetVal, null);		
0: 	}
1: 
1: 
1: 	/**
0: 	 * Call recover. Send SYNCCRD response with indoubt list
0: 	 * 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void recoverXA() throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 		Xid[] indoubtXids = null;
0: 		try {
0: 			indoubtXids = xaResource.recover(XAResource.TMSTARTRSCAN);
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_INDOUBT,
0: 					 xaRetVal, indoubtXids);		
0: 	}
1: 
0: 	/** Write SYNCCRD (SYNCCTL response)
0: 	 * @param synctype - XA Command to send response for see  parseSYNCTYPE
0: 	 * @param xaRetVal - return value from XA command
0: 	 * @param xids - list of xids to return for recover. 
0: 	 *               null for other commands
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private void writeSYNCCRD (int synctype, int xaRetVal, Xid[] xids) throws DRDAProtocolException
0: 	{
0: 		writer.createDssReply();
0: 		writer.startDdm(CodePoint.SYNCCRD);
0: 		writer.startDdm(CodePoint.XARETVAL);
0: 		writer.writeInt(xaRetVal);
0: 		writer.endDdm();
0: 		if (xids != null)
0: 			writePRPHRCLST(xids);
0: 		writer.endDdmAndDss();
0: 	}
1: 
0: 	/** write PRPHRCLST (indoubt list)
0: 	 * 
0: 	 * @param xids - list of indoubt xa transactions obtained from recover
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private void writePRPHRCLST(Xid[] xids) throws DRDAProtocolException
0: 	{
0: 		int xidcnt = (xids == null ? 0 : xids.length);
0: 		writer.startDdm(CodePoint.PRPHRCLST);
0: 		writer.writeScalar2Bytes(CodePoint.XIDCNT, xidcnt);
0: 		for (int i = 0; i < xidcnt; i++)
0: 			writeXID(xids[i]);
0: 		writer.endDdm();
0: 	}
1: 
0: 	/** write XID
0: 	 * 
0: 	 * @param xid - XID to write
0: 	 * @throws DRDAProtocolException
0: 	 */
1: 	
0: 	private void writeXID(Xid xid) throws DRDAProtocolException
0: 	{
0: 		writer.startDdm(CodePoint.XID);
0: 		int formatId = xid.getFormatId();
0: 		byte[] gtrid = xid.getGlobalTransactionId();
0: 		byte[] bqual = xid.getBranchQualifier();
1: 		
0: 		writer.writeInt(formatId);
0: 		writer.writeInt(gtrid.length);
0: 		writer.writeInt(bqual.length);
0: 		writer.writeBytes(gtrid);
0: 		writer.writeBytes(bqual);
0: 		writer.endDdm();
0: 	}
1: 	
1: 
0: 	/** get XAResource for the connection
0: 	 *
0: 	 * @return XAResource
0: 	 */
0: 	private XAResource getXAResource()
0: 	{
0: 		return ((XADatabase) connThread.getDatabase()).getXAResource();
1: 		
0: 	}
1: 	
0: 	/** printable syncType for debug output
0: 	 * @param syncType
0: 	 * @return - sync type meaning
0: 	 */
0: 	private String syncTypeToString(int syncType)
0: 	{
0: 		switch (syncType)
0: 		{  
0: 			case CodePoint.SYNCTYPE_NEW_UOW:
0: 				return "SYNCTYPE_NEW_UOW";
1: 				
0: 			case CodePoint.SYNCTYPE_END_UOW:
0: 				return "SYNCTYPE_END_UOW";
1: 				
0: 			case CodePoint.SYNCTYPE_PREPARE:
0: 				return "SYNCTYPE_PREPARE";
1: 				
0: 			case CodePoint.SYNCTYPE_MIGRATE:
0: 				return "SYNCTYPE_MIGRATE";
1: 							
0: 			case CodePoint.SYNCTYPE_REQ_COMMIT:
0: 				return "SYNCTYPE_REQ_COMMIT";
1: 				
0: 			case CodePoint.SYNCTYPE_COMMITTED:
0: 				return "SYNCTYPE_COMMITTED";
1: 				
0: 			case CodePoint.SYNCTYPE_REQ_FORGET:
0: 				return "SYNCTYPE_FORGET";
1: 				
0: 			case CodePoint.SYNCTYPE_ROLLBACK:
0: 				return "SYNCTYPE_ROLLBACK";
1: 				
0: 			case CodePoint.SYNCTYPE_REQ_LOG:
0: 				return "SYNCTYPE_REQ_LOG";
1: 				
0: 			case   CodePoint.SYNCTYPE_MIGRATED:
0: 				return "SYNCTYPE_MIGRATED";
1: 				
0: 			case CodePoint.SYNCTYPE_INDOUBT:
0: 				return "SYNCTYPE_INDOUBT";
1: 				
0: 			default:
0: 				return "UNKNOWN SYNCTYPE";
0:  		}
0: 	}
1: 
1: 	/** 
0: 	 * printable xaflags
0: 	 * @param - xaflags
0: 	 * @return - printable xaflags for debug output
0: 	 */
0: 	private String xaflagsToString(int xaflags)
0: 	{
0: 		switch (xaflags)
0: 		{
0: 			case XAResource.TMENDRSCAN :
0: 				return "XAResource.TMENDRSCAN";
1: 				
0: 			case XAResource.TMFAIL:
0: 				return "XAResource.TMFAIL";
1: 				
0: 			case XAResource.TMNOFLAGS:
0: 				return "XAResource.TMNOFLAGS";
1: 				
0: 			case XAResource.TMJOIN:
0: 				return "XAResource.TMJOIN";
1: 				
0: 			case XAResource.TMONEPHASE:
0: 				return "XAResource.TMONEPHASE";
1: 				
0: 			case XAResource.TMRESUME:
0: 				return "XAResource.TMRESUME";
1: 				
0: 			case XAResource.TMSTARTRSCAN:
0: 				return "XAResource.TMSTARTRSCAN";
1: 				
0: 			case XAResource.TMSUCCESS:
0: 				return "XAResource.TMSUCCESS";
1: 				
0: 			case XAResource.TMSUSPEND:
0: 				return "XAResource.TMSUSPEND";
1: 				
0: 			default:
0: 				return "UNRECOGNIZED flags:" + xaflags;
1: 				
0: 		}
0: 	}
1: 
1: 	/** 
0: 	 * return xa exception errorCode.
0: 	 * print to console for debug output.
0: 	 * @param xe - XA Exception
0: 	 */
0: 	private int processXAException(XAException xe)
0: 	{
0: 		int xaRetVal = xe.errorCode;
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			connThread.getServer().consoleExceptionPrint(xe);
0: 		}
0: 		return xaRetVal;
0: 	}
1: 
0: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
commit:4383496
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derby.impl.drda.DRDAXAProtocol.java
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: /**
0:  * This class translates DRDA XA protocol from an application requester to XA
0:  * calls for Derby and then translates the results from Derby to DRDA
0:  * for return to the application requester.
0:  * This class requires the use of javax.transaction.xa classes from j2ee,
0:  * so is separated from DRDAConnThread, because of the additional
0:  * library requirements
0:  * @author kmarsden@Sourcery.Org
0:  */
0: 
0: 
0: package org.apache.derby.impl.drda;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import javax.transaction.xa.*;
0: 
0: 
0: public class DRDAXAProtocol {
0: 
0: 	private DRDAConnThread connThread;
0: 	private DDMReader reader;
0: 	private DDMWriter writer;
0: 
0: 
0: 	public DRDAXAProtocol(DRDAConnThread connThread)
0: 	{
0: 		this.connThread = connThread;
0: 		reader = connThread.getReader();
0: 		writer = connThread.getWriter();
0: 
0: 	}
0: 
0: 
0: 
0: 	/**
0: 	 * Parse SYNCCTL - Parse SYNCCTL command for XAMGR lvl 7
0: 	 *
0: 	 */
0: 	protected void parseSYNCCTL() throws DRDAProtocolException
0: 	{
0: 		
0: 		reader.markCollection();
0: 		
0: 		int codePoint = reader.getCodePoint(CodePoint.SYNCTYPE);
0: 		int syncType = parseSYNCTYPE();
0: 		
0: 		int xaflags = 0;
0: 		boolean readXAFlags = false;
0: 		Xid xid = null;
0: 
0: 		codePoint = reader.getCodePoint();
0: 		while (codePoint != -1)
0: 		{
0: 			switch(codePoint)
0: 			{
0: 				case CodePoint.XID:
0: 					xid = parseXID();
0: 					break;					
0: 				case CodePoint.XAFLAGS:
0: 					xaflags = parseXAFlags();					
0: 					readXAFlags =true;
0: 					break;
0: 				case CodePoint.TIMEOUT:
0: 					// optional/ignorable.
0: 					reader.skipBytes();
0: 					break;
0: 				case CodePoint.RLSCONV:
0: 					connThread.codePointNotSupported(codePoint);	  
0: 				default:
0: 					connThread.invalidCodePoint(codePoint);
0: 			}
0: 
0: 			codePoint = reader.getCodePoint();
0: 		}
0: 
0: 
0: 		{
0: 			connThread.trace("syncType = " + syncTypeToString(syncType));
0: 			connThread.trace("xid = " + xid);
0: 			connThread.trace("xaflags =" + xaflagsToString(xaflags));
0: 		}
0: 
0: 		if (syncType != CodePoint.SYNCTYPE_INDOUBT)
0: 		{
0: 			if (xid == null)
0: 				connThread.missingCodePoint(CodePoint.XID);
0: 			
0: 			if (! readXAFlags)
0: 				if (SanityManager.DEBUG)
0: 					connThread.missingCodePoint(CodePoint.XAFLAGS);
0: 		}
0: 
0: 		switch (syncType)
0: 		{  
0: 			case CodePoint.SYNCTYPE_NEW_UOW:
0: 				// new unit of work for XA
0: 				// formatId -1 is just a local connection
0: 				startXATransaction(xid,xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_END_UOW:
0: 				// End unit of work
0: 				endXA(xid,xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_PREPARE:
0: 				prepareXATransaction(xid);
0: 				// Prepare to commit 
0: 				break;
0: 			case CodePoint.SYNCTYPE_MIGRATE:
0: 				// migrate to resync server sync type
0: 				connThread.codePointNotSupported(codePoint);				
0: 				break;			
0: 			case CodePoint.SYNCTYPE_REQ_COMMIT:
0: 				// request to commit sync type
0: 				commitTransaction(xid,xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_COMMITTED:
0: 				// commit  sync type
0: 				commitTransaction(xid, xaflags);
0: 				break;
0: 			case CodePoint.SYNCTYPE_REQ_FORGET:
0: 				// request to forget sync type
0: 				forgetXATransaction(xid);
0: 				break;
0: 			case CodePoint.SYNCTYPE_ROLLBACK:
0: 				//rollback sync type
0: 				rollbackTransaction(xid);
0: 				break;
0: 			case CodePoint.SYNCTYPE_INDOUBT:
0: 				//recover sync type
0: 				recoverXA();
0: 				break;
0: 			default:
0: 				connThread.invalidCodePoint(codePoint);
0:  		}
0: 
0: 	}
0: 
0: 	/** 
0: 	 * parse SYNCTYPE for XAMGR lvl 7
0: 	 * return synctype value 
0: 	 *   CodePoint.SYNCTYPE_NEW_UOW -> XAResource.start()
0: 	 *   CodePoint.SYNCTYPE_END_UOW -> XAResource.end()
0: 	 *   CodePoint.SYNCTYPE_PREPARE -> XAResource.prepare()
0: 	 *   CodePoint.SYNCTYPE_MIGRATE -> not supported  //SYNCPT MGR LEVEL 5
0: 	 *   CodePoint.SYNCTYPE_REQ_COMMIT -> not supported //SYNCPT MGR LEVEL 5
0: 	 *   CodePoint.SYNCTYPE_COMMITTED -> XAResource.commit()  
0: 	 *                                   or local commit for null XID
0: 	 *   CodePoint.SYNCTYPE_REQ_LOG ->  not supported
0: 	 *   CodePoint.SYNCTYPE_REQ_FORGET -> XAResource.forget()
0: 	 *   CodePoint.SYNCTYPE_ROLLBACK -> XAResource.rollback()
0: 	 *   CodePoint.SYNCTYPE_MIGRATED -> not supported
0: 	 *   CodePoint.SYNCTYPE_INDOUBT   -> XAResource.recover();
0: 	 * 
0: 	 */	 
0: 	protected int  parseSYNCTYPE() throws DRDAProtocolException
0: 	{
0: 		return reader.readUnsignedByte();
0: 		
0: 	}
0: 	
0: 
0: 	/** Parse XID
0: 	 *  formatId -1 translates into a null XID and a local transaction
0: 	 */
0: 	private  Xid parseXID () throws DRDAProtocolException
0: 	{
0: 		int formatId = reader.readNetworkInt();
0: 		byte[] gtrid = null;
0: 		byte[] bqual = null;
0: 		if (formatId != -1)
0: 		{
0: 			int gtridLen = reader.readNetworkInt();
0: 			int bqualLen = reader.readNetworkInt();
0: 			
0: 			gtrid = reader.readBytes(gtridLen);
0: 			bqual = reader.readBytes(bqualLen);
0: 		}
0: 		return new DRDAXid(formatId, gtrid, bqual);
0: 	}
0: 
0: 
0: 	/** 
0: 	 *  parse XIDSHR
0: 	 *
0: 	 * @return XIDSHR value
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private int parseXIDSHR() throws DRDAProtocolException
0: 	{
0: 		return reader.readUnsignedByte();
0: 	}
0: 
0: 	/** 
0: 	 *  parse XAFlags 
0: 	 *
0: 	 * @return XAFlags value
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private int parseXAFlags() throws DRDAProtocolException
0: 	{
0: 		return reader.readNetworkInt();
0: 	}
0: 
0: 
0: 	/**
0: 	 *  Start the xa transaction. Send SYNCRRD response
0: 	 * 
0: 	 *  @param xid - XID (formatId = -1 for local transaction)
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void startXATransaction(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 
0: 		try {
0: 			if (xid.getFormatId() != -1)
0: 				xaResource.start(xid,xaflags);
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_NEW_UOW, 
0: 					 xaRetVal, null);
0: 		
0: 	}
0: 	
0: 
0: 	/**
0: 	 *  Commit  the xa transaction. Send SYNCCRD response
0: 	 * 
0: 	 *  @param xid - XID (formatId = -1 for local transaction)
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void commitTransaction(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		boolean local  = ( xid.getFormatId() == -1);
0: 		if (local)
0: 			commitLocalTransaction();
0: 		else
0: 			commitXATransaction(xid, xaflags);
0: 	}
0: 
0: 	/**
0: 	 *  Commit local transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @throws DRDAProtocolException
0: 	 */	   
0: 	private void commitLocalTransaction() throws DRDAProtocolException
0: 	{
0: 		int xaRetVal = XAResource.XA_OK;
0: 		try {
0: 			connThread.getDatabase().commit();
0: 		}
0: 		catch  (Exception e)
0: 		{
0: 			xaRetVal = XAException.XAER_RMFAIL;
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.getServer().consoleExceptionPrint(e);
0: 			}
0: 
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
0: 					 xaRetVal, null);
0: 
0: 	}
0: 
0: 	
0: 	/**
0: 	 *  Commit  the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void commitXATransaction(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 		// check this
0: 		boolean isOnePhase = (xaflags & XAResource.TMONEPHASE) != 0;
0: 		try {
0: 			xaResource.commit(xid, isOnePhase);
0: 			if (SanityManager.DEBUG)
0: 				connThread.trace("committed XA transaction: xaRetVal=" + xaRetVal);
0: 
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
0: 					 xaRetVal, null);
0: 		
0: 	}
0: 
0: 	/**
0: 	 * Rollback transaction
0: 	 * @param xid  Xid for rollback for global transaction.
0: 	 *             If xid formatid is -1 it represents a local transaction
0: 	 */
0: 	private void rollbackTransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		boolean local  = ( xid.getFormatId() == -1);
0: 		if (local)
0: 			rollbackLocalTransaction();
0: 		else
0: 			rollbackXATransaction(xid);
0: 	}
0: 	
0: 	/**
0: 	 * Rollback a local transaction
0: 	 *
0: 	 */
0: 	private void rollbackLocalTransaction() throws DRDAProtocolException
0: 	{
0: 		int xaRetVal = XAResource.XA_OK;
0: 		try {
0: 			connThread.getDatabase().rollback();
0: 		}
0: 		catch  (Exception e)
0: 		{
0: 			xaRetVal = XAException.XAER_RMFAIL;
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.getServer().consoleExceptionPrint(e);
0: 			}
0: 			
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_COMMITTED, 
0: 					 xaRetVal, null);
0: 
0: 	}
0: 
0: 	/**
0: 	 *  Rollback the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void rollbackXATransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 
0: 		try {
0: 			xaResource.rollback(xid);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("rollback  XA transaction: xaRetVal=" + xaRetVal); 
0: 			}
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_ROLLBACK,
0: 					 xaRetVal, null);
0: 		
0: 	}
0: 
0: 	/**
0: 	 *  End  the xa transaction. Send SYNCRRD response
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @param xaflags - xaflags
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void endXA(Xid xid, int xaflags) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();		
0: 		int xaRetVal = xaResource.XA_OK;
0: 
0: 		try {
0: 			xaResource.end(xid,xaflags);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("ended XA transaction. xid =  " + xid +
0: 							   " xaflags =" + xaflags + 
0: 								 "xaRetVal=" + xaRetVal); 
0: 			}
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_END_UOW,
0: 					 xaRetVal, null);		
0: 	}
0: 
0: 
0: 	/**
0: 	 *  Prepare the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void prepareXATransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 
0: 		try {
0: 			xaResource.prepare(xid);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("prepared xa transaction: xaRetVal=" +
0: 								xaRetVal); 
0: 			}
0: 		} catch (XAException xe)
0: 		{			
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_PREPARE,
0: 					 xaRetVal, null);		
0: 	}
0: 
0: 	/**
0: 	 *  Forget the xa transaction. Send SYNCCRD response.
0: 	 * 
0: 	 *  @param xid - XID 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void forgetXATransaction(Xid xid) throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 
0: 		try {
0: 			xaResource.forget(xid);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				connThread.trace("forgot xa transaction: xaRetVal=" + xaRetVal);
0: 			}
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_REQ_FORGET,
0: 					 xaRetVal, null);		
0: 	}
0: 
0: 
0: 	/**
0: 	 * Call recover. Send SYNCCRD response with indoubt list
0: 	 * 
0: 	 *  @throws DRDAProtocolException
0: 	 */
0: 	private void recoverXA() throws DRDAProtocolException
0: 	{
0: 		XAResource xaResource = getXAResource();
0: 		int xaRetVal = xaResource.XA_OK;
0: 		Xid[] indoubtXids = null;
0: 		try {
0: 			indoubtXids = xaResource.recover(XAResource.TMSTARTRSCAN);
0: 		} catch (XAException xe)
0: 		{
0: 			xaRetVal = processXAException(xe);
0: 		}
0: 		writeSYNCCRD(CodePoint.SYNCTYPE_INDOUBT,
0: 					 xaRetVal, indoubtXids);		
0: 	}
0: 
0: 	/** Write SYNCCRD (SYNCCTL response)
0: 	 * @param synctype - XA Command to send response for see  parseSYNCTYPE
0: 	 * @param xaRetVal - return value from XA command
0: 	 * @param xids - list of xids to return for recover. 
0: 	 *               null for other commands
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private void writeSYNCCRD (int synctype, int xaRetVal, Xid[] xids) throws DRDAProtocolException
0: 	{
0: 		writer.createDssReply();
0: 		writer.startDdm(CodePoint.SYNCCRD);
0: 		writer.startDdm(CodePoint.XARETVAL);
0: 		writer.writeInt(xaRetVal);
0: 		writer.endDdm();
0: 		if (xids != null)
0: 			writePRPHRCLST(xids);
0: 		writer.endDdmAndDss();
0: 	}
0: 
0: 	/** write PRPHRCLST (indoubt list)
0: 	 * 
0: 	 * @param xids - list of indoubt xa transactions obtained from recover
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	private void writePRPHRCLST(Xid[] xids) throws DRDAProtocolException
0: 	{
0: 		int xidcnt = (xids == null ? 0 : xids.length);
0: 		writer.startDdm(CodePoint.PRPHRCLST);
0: 		writer.writeScalar2Bytes(CodePoint.XIDCNT, xidcnt);
0: 		for (int i = 0; i < xidcnt; i++)
0: 			writeXID(xids[i]);
0: 		writer.endDdm();
0: 	}
0: 
0: 	/** write XID
0: 	 * 
0: 	 * @param xid - XID to write
0: 	 * @throws DRDAProtocolException
0: 	 */
0: 	
0: 	private void writeXID(Xid xid) throws DRDAProtocolException
0: 	{
0: 		writer.startDdm(CodePoint.XID);
0: 		int formatId = xid.getFormatId();
0: 		byte[] gtrid = xid.getGlobalTransactionId();
0: 		byte[] bqual = xid.getBranchQualifier();
0: 		
0: 		writer.writeInt(formatId);
0: 		writer.writeInt(gtrid.length);
0: 		writer.writeInt(bqual.length);
0: 		writer.writeBytes(gtrid);
0: 		writer.writeBytes(bqual);
0: 		writer.endDdm();
0: 	}
0: 	
0: 
0: 	/** get XAResource for the connection
0: 	 *
0: 	 * @return XAResource
0: 	 */
0: 	private XAResource getXAResource()
0: 	{
0: 		return ((XADatabase) connThread.getDatabase()).getXAResource();
0: 		
0: 	}
0: 	
0: 	/** printable syncType for debug output
0: 	 * @param syncType
0: 	 * @return - sync type meaning
0: 	 */
0: 	private String syncTypeToString(int syncType)
0: 	{
0: 		switch (syncType)
0: 		{  
0: 			case CodePoint.SYNCTYPE_NEW_UOW:
0: 				return "SYNCTYPE_NEW_UOW";
0: 				
0: 			case CodePoint.SYNCTYPE_END_UOW:
0: 				return "SYNCTYPE_END_UOW";
0: 				
0: 			case CodePoint.SYNCTYPE_PREPARE:
0: 				return "SYNCTYPE_PREPARE";
0: 				
0: 			case CodePoint.SYNCTYPE_MIGRATE:
0: 				return "SYNCTYPE_MIGRATE";
0: 							
0: 			case CodePoint.SYNCTYPE_REQ_COMMIT:
0: 				return "SYNCTYPE_REQ_COMMIT";
0: 				
0: 			case CodePoint.SYNCTYPE_COMMITTED:
0: 				return "SYNCTYPE_COMMITTED";
0: 				
0: 			case CodePoint.SYNCTYPE_REQ_FORGET:
0: 				return "SYNCTYPE_FORGET";
0: 				
0: 			case CodePoint.SYNCTYPE_ROLLBACK:
0: 				return "SYNCTYPE_ROLLBACK";
0: 				
0: 			case CodePoint.SYNCTYPE_REQ_LOG:
0: 				return "SYNCTYPE_REQ_LOG";
0: 				
0: 			case   CodePoint.SYNCTYPE_MIGRATED:
0: 				return "SYNCTYPE_MIGRATED";
0: 				
0: 			case CodePoint.SYNCTYPE_INDOUBT:
0: 				return "SYNCTYPE_INDOUBT";
0: 				
0: 			default:
0: 				return "UNKNOWN SYNCTYPE";
0:  		}
0: 	}
0: 
0: 	/** 
0: 	 * printable xaflags
0: 	 * @param - xaflags
0: 	 * @return - printable xaflags for debug output
0: 	 */
0: 	private String xaflagsToString(int xaflags)
0: 	{
0: 		switch (xaflags)
0: 		{
0: 			case XAResource.TMENDRSCAN :
0: 				return "XAResource.TMENDRSCAN";
0: 				
0: 			case XAResource.TMFAIL:
0: 				return "XAResource.TMFAIL";
0: 				
0: 			case XAResource.TMNOFLAGS:
0: 				return "XAResource.TMNOFLAGS";
0: 				
0: 			case XAResource.TMJOIN:
0: 				return "XAResource.TMJOIN";
0: 				
0: 			case XAResource.TMONEPHASE:
0: 				return "XAResource.TMONEPHASE";
0: 				
0: 			case XAResource.TMRESUME:
0: 				return "XAResource.TMRESUME";
0: 				
0: 			case XAResource.TMSTARTRSCAN:
0: 				return "XAResource.TMSTARTRSCAN";
0: 				
0: 			case XAResource.TMSUCCESS:
0: 				return "XAResource.TMSUCCESS";
0: 				
0: 			case XAResource.TMSUSPEND:
0: 				return "XAResource.TMSUSPEND";
0: 				
0: 			default:
0: 				return "UNRECOGNIZED flags:" + xaflags;
0: 				
0: 		}
0: 	}
0: 
0: 	/** 
0: 	 * return xa exception errorCode.
0: 	 * print to console for debug output.
0: 	 * @param xe - XA Exception
0: 	 */
0: 	private int processXAException(XAException xe)
0: 	{
0: 		int xaRetVal = xe.errorCode;
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			connThread.getServer().consoleExceptionPrint(xe);
0: 		}
0: 		return xaRetVal;
0: 	}
0: 
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4cded85
/////////////////////////////////////////////////////////////////////////
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:bb9f97a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.jdbc.ResourceAdapter;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.store.access.xa.XAXactId;
1: import org.apache.derby.shared.common.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:      * @return The ResourceAdapter instance for
1:      *         the underlying database.
0:      */
1:     ResourceAdapter getResourceAdapter()
0:     {
1:         return ((XADatabase)connThread.getDatabase()).getResourceAdapter();
0:     }
0: 
0:     /**
/////////////////////////////////////////////////////////////////////////
0:             if (!local) {
1:                     XAXactId xid_im = new XAXactId(xid);
1:                     getResourceAdapter().cancelXATransaction(
1:                         xid_im,
1:                         MessageId.CONN_CLOSE_XA_TRANSACTION_ROLLED_BACK
1:                     );
1:                     Monitor.logThrowable(e);
0:             } else {
0:                 try {
0:                     rollbackTransaction(xid, false);
0:                 } catch  (DRDAProtocolException e) {
0:                     // because we do not dump any DRDA stuff to the socket
0:                     // the exception can not be thrown in this case
1:                     // However, we will log the exception to the monitor
1:                     Monitor.logThrowable(e);
0:                 }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:f0b0870
/////////////////////////////////////////////////////////////////////////
0: 	 * @param xaflags
0: 	 * @return printable xaflags for debug output
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
1: class DRDAXAProtocol {
0: 	DRDAXAProtocol(DRDAConnThread connThread)
============================================================================