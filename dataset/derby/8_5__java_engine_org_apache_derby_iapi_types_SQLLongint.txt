1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.SQLLongint
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
14:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:3bb140c: import java.io.ObjectInput;
1:3bb140c: import java.io.ObjectOutput;
1:eac0369: import java.sql.PreparedStatement;
1:3bb140c: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.cache.ClassSize;
1:3bb140c: import org.apache.derby.iapi.services.io.Storable;
1:3bb140c: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * SQLLongint satisfies the DataValueDescriptor
1:eac0369:  * interfaces (i.e., OrderableDataType). It implements a bigint column, 
1:eac0369:  * e.g. for * storing a column value; it can be specified
1:eac0369:  * when constructed to not allow nulls. Nullability cannot be changed
1:eac0369:  * after construction, as it affects the storage size and mechanism.
1:eac0369:  * <p>
1:eac0369:  * Because OrderableDataType is a subtype of DataType,
1:eac0369:  * SQLLongint can play a role in either a DataType/Row
1:eac0369:  * or a OrderableDataType/Row, interchangeably.
1:eac0369:  * <p>
1:eac0369:  * We assume the store has a flag for nullness of the value,
1:eac0369:  * and simply return a 0-length array for the stored form
1:eac0369:  * when the value is null.
1:eac0369:  * <p>
1:eac0369:  * PERFORMANCE: There are likely alot of performance improvements
1:eac0369:  * possible for this implementation -- it new's Long
1:eac0369:  * more than it probably wants to.
1:eac0369:  */
1:eac0369: public final class SQLLongint
1:eac0369: 	extends NumberDataType
7:eac0369: {
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 * (mostly implemented in DataType)
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369:     // JDBC is lax in what it permits and what it
1:eac0369: 	// returns, so we are similarly lax
1:eac0369: 	// @see DataValueDescriptor
1:eac0369: 	/**
1:eac0369: 	 * @exception StandardException thrown on failure to convert
1:eac0369: 	 */
1:eac0369: 	public int	getInt() throws StandardException
1:eac0369: 	{
1:eac0369: 		/* This value is bogus if the SQLLongint is null */
1:eac0369: 
1:eac0369: 		if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "INTEGER");
1:eac0369: 		return (int) value;
8:eac0369: 	}
1:eac0369: 
1:d7f7457: 	/**
1:eac0369: 	 * @exception StandardException thrown on failure to convert
1:eac0369: 	 */
1:eac0369: 	public byte	getByte() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1:eac0369: 		return (byte) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @exception StandardException thrown on failure to convert
1:eac0369: 	 */
1:eac0369: 	public short	getShort() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (value > Short.MAX_VALUE || value < Short.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "SMALLINT");
1:eac0369: 		return (short) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public long	getLong()
1:eac0369: 	{
1:eac0369: 		return value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public float	getFloat()
1:eac0369: 	{
1:eac0369: 		return (float) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public double	getDouble()
1:eac0369: 	{
1:eac0369: 		return (double) value;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     // for lack of a specification: 0 or null is false,
1:eac0369:     // all else is true
1:eac0369: 	public boolean	getBoolean()
1:eac0369: 	{
1:eac0369: 		return (value != 0);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String	getString()
1:eac0369: 	{
1:eac0369: 		if (isNull())
1:eac0369: 			return null;
2:eac0369: 		else
1:eac0369: 			return Long.toString(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Object	getObject()
1:eac0369: 	{
1:eac0369: 		if (isNull())
1:eac0369: 			return null;
1:eac0369: 		else
1:ce40a31: 			return value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int	getLength()
1:eac0369: 	{
1:eac0369: 		return TypeId.LONGINT_MAXWIDTH;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// this is for DataType's error generator
1:eac0369: 	public String getTypeName()
1:eac0369: 	{
1:3bb140c:         return TypeId.BIGINT_NAME;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Storable interface, implies Externalizable, TypedFormat
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.SQL_LONGINT_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * see if the integer value is null.
1:eac0369: 	 */
1:eac0369: 	/** @see Storable#isNull */
1:eac0369: 	public boolean isNull()
1:eac0369: 	{
1:eac0369: 		return isnull;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException {
1:eac0369: 
1:eac0369: 		// never called when value is null
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(! isNull());
1:eac0369: 
1:eac0369: 		out.writeLong(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see java.io.Externalizable#readExternal */
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException {
1:eac0369: 
2:eac0369: 		value = in.readLong();
4:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see Storable#restoreToNull
1:d7f7457: 	 *
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void restoreToNull()
1:eac0369: 	{
1:eac0369: 		value = 0;
1:eac0369: 		isnull = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @exception StandardException		Thrown on error */
1:eac0369: 	protected int typeCompare(DataValueDescriptor arg) throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		/* neither are null, get the value */
1:eac0369: 
1:eac0369: 		long thisValue = this.getLong();
1:eac0369: 
1:eac0369: 		long otherValue = arg.getLong();
1:eac0369: 
1:eac0369: 		if (thisValue == otherValue)
1:eac0369: 			return 0;
1:eac0369: 		else if (thisValue > otherValue)
1:eac0369: 			return 1;
1:eac0369: 		else
1:eac0369: 			return -1;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:854dd10: 	/** @see DataValueDescriptor#cloneValue */
1:854dd10: 	public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:eac0369: 	{
1:eac0369: 		return new SQLLongint(value, isnull);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see DataValueDescriptor#getNewNull
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369: 	{
1:eac0369: 		return new SQLLongint();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see DataValueDescriptor#setValueFromResultSet 
4:eac0369: 	 *
1:eac0369: 	 * @exception SQLException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1:eac0369: 									  boolean isNullable)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 			if ((value = resultSet.getLong(colNumber)) == 0L)
1:eac0369: 				isnull = (isNullable && resultSet.wasNull());
1:eac0369: 			else
1:eac0369: 				isnull = false;
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Set the value into a PreparedStatement.
1:eac0369: 
1:eac0369: 		@exception SQLException Error setting value in PreparedStatement
1:eac0369: 	*/
1:eac0369: 	public final void setInto(PreparedStatement ps, int position) throws SQLException {
1:eac0369: 
1:eac0369: 		if (isNull()) {
1:eac0369: 			ps.setNull(position, java.sql.Types.BIGINT);
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ps.setLong(position, value);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		Set this value into a ResultSet for a subsequent ResultSet.insertRow
1:eac0369: 		or ResultSet.updateRow. This method will only be called for non-null values.
1:eac0369: 
1:eac0369: 		@exception SQLException thrown by the ResultSet object
1:eac0369: 	*/
1:eac0369: 	public final void setInto(ResultSet rs, int position) throws SQLException {
1:eac0369: 		rs.updateLong(position, value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * class interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * constructors
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/** no-arg constructor, required by Formattable */
1:eac0369:     // This constructor also gets used when we are
1:eac0369:     // allocating space for a long.
1:eac0369: 	public SQLLongint() 
1:eac0369: 	{
1:eac0369: 		isnull = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SQLLongint(long val)
1:eac0369: 	{
1:eac0369: 		value = val;
1:eac0369: 	}
1:eac0369: 
1:854dd10: 	/* This constructor gets used for the cloneValue method */
1:eac0369: 	private SQLLongint(long val, boolean isnull)
1:eac0369: 	{
1:eac0369: 		value = val;
1:eac0369: 		this.isnull = isnull;
1:eac0369: 	}
1:eac0369: 	public SQLLongint(Long obj) {
1:eac0369: 		if (isnull = (obj == null))
1:eac0369: 			;
1:eac0369: 		else
1:eac0369: 			value = obj.longValue();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception StandardException thrown if string not accepted
1:eac0369: 	 */
1:eac0369: 	public void setValue(String theValue)
2:eac0369: 		throws StandardException
1:eac0369: 	{
2:eac0369: 		if (theValue == null)
1:eac0369: 		{
1:eac0369: 			value = 0;
1:eac0369: 			isnull = true;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 		    try {
1:eac0369: 		        value = Long.valueOf(theValue.trim()).longValue();
1:eac0369: 			} catch (NumberFormatException nfe) {
1:eac0369: 			    throw invalidFormat();
1:eac0369: 			}
1:eac0369: 			isnull = false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:d7f7457: 	 * @see NumberDataValue#setValue
1:d7f7457: 	 */
1:d7f7457: 	public final void setValue(Number theValue)
1:d7f7457: 	{
1:d7f7457: 		if (objectNull(theValue))
1:d7f7457: 			return;
1:d7f7457: 		
1:d7f7457: 		if (SanityManager.ASSERT)
1:d7f7457: 		{
1:d7f7457: 			if (!(theValue instanceof java.lang.Long))
1:d7f7457: 				SanityManager.THROWASSERT("SQLLongint.setValue(Number) passed a " + theValue.getClass());
1:d7f7457: 		}
1:d7f7457: 		
1:d7f7457: 		setValue(theValue.longValue());
1:d7f7457: 	}
1:d7f7457: 
1:eac0369: 	public void setValue(long theValue)
1:eac0369: 	{
3:eac0369: 		value = theValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void setValue(int theValue)
1:eac0369: 	{
1:eac0369: 		value = theValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NumberDataValue#setValue
1:eac0369: 	 *
1:d7f7457: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setValue(float theValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		theValue = NumberDataType.normalizeREAL(theValue);
1:eac0369: 
1:eac0369: 		if (theValue > Long.MAX_VALUE
1:eac0369: 			|| theValue < Long.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1:eac0369: 
1:eac0369: 		float floorValue = (float)Math.floor(theValue);
1:eac0369: 
1:eac0369: 		value = (long)floorValue;
1:eac0369: 		isnull = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NumberDataValue#setValue
1:eac0369: 	 *
3:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setValue(double theValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		theValue = NumberDataType.normalizeDOUBLE(theValue);
1:eac0369: 
1:eac0369: 		if (theValue > Long.MAX_VALUE
1:eac0369: 			|| theValue < Long.MIN_VALUE)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1:eac0369: 
1:eac0369: 		double floorValue = Math.floor(theValue);
1:eac0369: 
1:eac0369: 		value = (long)floorValue;
1:eac0369: 		isnull = false;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NumberDataValue#setValue
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void setValue(boolean theValue)
1:eac0369: 	{
1:eac0369: 		value = theValue?1:0;
1:eac0369: 		isnull = false;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:806114c: 	 * Set the value from a correctly typed Long object.
1:806114c: 	 * @throws StandardException 
1:806114c: 	 */
1:806114c: 	void setObject(Object theValue)
1:eac0369: 	{
1:806114c: 		setValue(((Long) theValue).longValue());
1:eac0369: 	}
1:806114c: 	
1:eac0369: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
1:eac0369: 
1:eac0369: 		setValue(theValue.getLong());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/** @see DataValueDescriptor#typePrecedence */
1:eac0369: 	public int typePrecedence()
1:eac0369: 	{
1:eac0369: 		return TypeId.LONGINT_PRECEDENCE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** SQL Operators
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The = operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:eac0369: 	 * @param left			The value on the left side of the =
1:eac0369: 	 * @param right			The value on the right side of the =
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the two parameters are equal
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue equals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getLong() == right.getLong());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &lt;&gt; operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the two parameters
1:eac0369: 	 *			are not equal
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue notEquals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getLong() != right.getLong());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &lt; operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is less
1:eac0369: 	 *			than the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue lessThan(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getLong() < right.getLong());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &gt; operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is greater
1:eac0369: 	 *			than the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue greaterThan(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getLong() > right.getLong());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &lt;= operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is less
1:eac0369: 	 *			than or equal to the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue lessOrEquals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getLong() <= right.getLong());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:dbed020: 	 * The &gt;= operator as called from the language module, as opposed to
1:eac0369: 	 * the storage module.
1:eac0369: 	 *
1:dbed020: 	 * @param left			The value on the left side of the operator
1:dbed020: 	 * @param right			The value on the right side of the operator
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQL boolean value telling whether the first operand is greater
1:eac0369: 	 *			than or equal to the second operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public BooleanDataValue greaterOrEquals(DataValueDescriptor left,
1:eac0369: 							DataValueDescriptor right)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		return SQLBoolean.truthValue(left,
1:eac0369: 									 right,
1:eac0369: 									 left.getLong() >= right.getLong());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This method implements the + operator for "bigint + bigint".
1:eac0369: 	 *
1:eac0369: 	 * @param addend1	One of the addends
1:eac0369: 	 * @param addend2	The other addend
1:eac0369: 	 * @param result	The result of a previous call to this method, null
1:eac0369: 	 *					if not called yet
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQLLongint containing the result of the addition
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public NumberDataValue plus(NumberDataValue addend1,
1:eac0369: 							NumberDataValue addend2,
1:eac0369: 							NumberDataValue result)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLLongint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (addend1.isNull() || addend2.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 		long	addend1Long = addend1.getLong();
1:eac0369: 		long	addend2Long = addend2.getLong();
1:eac0369: 
1:eac0369: 		long resultValue = addend1Long + addend2Long;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Java does not check for overflow with integral types. We have to
1:eac0369: 		** check the result ourselves.
1:eac0369: 		**
1:eac0369: 		** Overflow is possible only if the two addends have the same sign.
1:eac0369: 		** Do they?  (This method of checking is approved by "The Java
1:eac0369: 		** Programming Language" by Arnold and Gosling.)
1:eac0369: 		*/
1:eac0369: 		if ((addend1Long < 0) == (addend2Long < 0))
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Addends have the same sign.  The result should have the same
1:eac0369: 			** sign as the addends.  If not, an overflow has occurred.
1:eac0369: 			*/
1:eac0369: 			if ((addend1Long < 0) != (resultValue < 0))
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		result.setValue(resultValue);
1:eac0369: 
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This method implements the - operator for "bigint - bigint".
1:eac0369: 	 *
1:eac0369: 	 * @param left	The value to be subtracted from
1:eac0369: 	 * @param right	The value to be subtracted
1:eac0369: 	 * @param result	The result of a previous call to this method, null
1:eac0369: 	 *					if not called yet
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQLLongint containing the result of the subtraction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public NumberDataValue minus(NumberDataValue left,
1:eac0369: 							NumberDataValue right,
1:eac0369: 							NumberDataValue result)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLLongint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (left.isNull() || right.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		long diff = left.getLong() - right.getLong();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Java does not check for overflow with integral types. We have to
1:eac0369: 		** check the result ourselves.
1:eac0369: 		**
1:eac0369: 		** Overflow is possible only if the left and the right side have opposite signs.
1:eac0369: 		** Do they?  (This method of checking is approved by "The Java
1:eac0369: 		** Programming Language" by Arnold and Gosling.)
1:eac0369: 		*/
1:eac0369: 		if ((left.getLong() < 0) != (right.getLong() < 0))
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Left and right have opposite signs.  The result should have the same
1:eac0369: 			** sign as the left (this).  If not, an overflow has occurred.
1:eac0369: 			*/
1:eac0369: 			if ((left.getLong() < 0) != (diff < 0))
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		result.setValue(diff);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This method implements the * operator for "bigint * bigint".
1:eac0369: 	 *
1:eac0369: 	 * @param left	The first value to be multiplied
1:eac0369: 	 * @param right	The second value to be multiplied
1:eac0369: 	 * @param result	The result of a previous call to this method, null
1:eac0369: 	 *					if not called yet
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQLLongint containing the result of the multiplication
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public NumberDataValue times(NumberDataValue left,
1:eac0369: 							NumberDataValue right,
1:eac0369: 							NumberDataValue result)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		long		tempResult;
1:eac0369: 
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLLongint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (left.isNull() || right.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Java does not check for overflow with integral types. We have to
1:eac0369: 		** check the result ourselves.
1:eac0369: 		**
1:eac0369: 		** We can't use sign checking tricks like we do for '+' and '-' since
1:eac0369: 		** the product of 2 integers can wrap around multiple times.  So, we
1:eac0369: 		** apply the principle that a * b = c => a = c / b.  If b != 0 and
1:eac0369: 		** a != c / b, then overflow occurred.
1:eac0369: 		*/
1:eac0369: 		tempResult = left.getLong() * right.getLong();
1:eac0369: 		if ((right.getLong() != 0) && (left.getLong() != tempResult / right.getLong()))
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		result.setValue(tempResult);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This method implements the / operator for "bigint / bigint".
1:eac0369: 	 *
1:eac0369: 	 * @param dividend	The numerator
1:eac0369: 	 * @param divisor	The denominator
1:eac0369: 	 * @param result	The result of a previous call to this method, null
1:eac0369: 	 *					if not called yet
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQLLongint containing the result of the division
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public NumberDataValue divide(NumberDataValue dividend,
1:eac0369: 							 NumberDataValue divisor,
1:eac0369: 							 NumberDataValue result)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		long	longDivisor;
1:eac0369: 
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLLongint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (dividend.isNull() || divisor.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Catch divide by 0 */
1:eac0369: 		longDivisor = divisor.getLong();
1:eac0369: 		if (longDivisor == 0)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		result.setValue(dividend.getLong() / longDivisor);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 		mod(bigint, bigint)
1:eac0369: 	*/
1:eac0369: 	public NumberDataValue mod(NumberDataValue dividend,
1:eac0369: 							 NumberDataValue divisor,
1:eac0369: 							 NumberDataValue result)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLLongint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (dividend.isNull() || divisor.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Catch divide by 0 */
1:eac0369: 		long longDivisor = divisor.getLong();
1:eac0369: 		if (longDivisor == 0)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		result.setValue(dividend.getLong() % longDivisor);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * This method implements the unary minus operator for bigint.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of a previous call to this method, null
1:eac0369: 	 *					if not called yet
1:eac0369: 	 *
1:eac0369: 	 * @return	A SQLLongint containing the result of the negation
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public NumberDataValue minus(NumberDataValue result)
1:eac0369: 									throws StandardException
1:eac0369: 	{
1:eac0369: 		long		operandValue;
1:eac0369: 
1:eac0369: 		if (result == null)
1:eac0369: 		{
1:eac0369: 			result = new SQLLongint();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (this.isNull())
1:eac0369: 		{
1:eac0369: 			result.setToNull();
1:eac0369: 			return result;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		operandValue = this.getLong();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** In two's complement arithmetic, the minimum value for a number
1:eac0369: 		** can't be negated, since there is no representation for its
1:eac0369: 		** positive value.
1:eac0369: 		*/
1:eac0369: 		if (operandValue == Long.MIN_VALUE)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		result.setValue(-operandValue);
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * This method implements the isNegative method.
1:eac0369:      *
1:eac0369:      * @return  A boolean.  if this.value is negative, return true.
1:eac0369:      */
1:eac0369:     
1:eac0369:     protected boolean isNegative()
1:eac0369:     {
1:eac0369:         return !isNull() && value < 0L;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * String display of value
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (isNull())
1:eac0369: 			return "NULL";
1:eac0369: 		else
1:eac0369: 			return Long.toString(value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Hash code
1:eac0369: 	 */
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		return (int) (value ^ (value >> 32));
1:eac0369: 	}
1:eac0369: 
1:eac0369:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLLongint.class);
1:eac0369: 
1:eac0369:     public int estimateMemoryUsage()
1:eac0369:     {
1:eac0369:         return BASE_MEMORY_USAGE;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * object state
1:eac0369: 	 */
1:eac0369: 	private long		value;
1:eac0369: 	private boolean	isnull;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 * The &lt;&gt; operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &lt; operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &gt; operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &lt;= operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
/////////////////////////////////////////////////////////////////////////
1: 	 * The &gt;= operator as called from the language module, as opposed to
1: 	 * @param left			The value on the left side of the operator
1: 	 * @param right			The value on the right side of the operator
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1: 			return value;
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4ecfb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.sql.ResultSet;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.cache.ClassSize;
1: import org.apache.derby.iapi.services.io.Storable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1:         return TypeId.BIGINT_NAME;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: 	/** @see DataValueDescriptor#cloneValue */
1: 	public DataValueDescriptor cloneValue(boolean forceMaterialization)
/////////////////////////////////////////////////////////////////////////
1: 	/* This constructor gets used for the cloneValue method */
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:806114c
/////////////////////////////////////////////////////////////////////////
1: 	 * Set the value from a correctly typed Long object.
1: 	 * @throws StandardException 
1: 	 */
1: 	void setObject(Object theValue)
1: 		setValue(((Long) theValue).longValue());
1: 	
commit:9d34086
/////////////////////////////////////////////////////////////////////////
commit:2a58829
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * @see NumberDataValue#setValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public final void setValue(Number theValue)
1: 	{
1: 		if (objectNull(theValue))
1: 			return;
1: 		
1: 		if (SanityManager.ASSERT)
1: 		{
1: 			if (!(theValue instanceof java.lang.Long))
1: 				SanityManager.THROWASSERT("SQLLongint.setValue(Number) passed a " + theValue.getClass());
1: 		}
1: 		
1: 		setValue(theValue.longValue());
1: 	}
1: 
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.SQLLongint
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Storable;
1: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.cache.ClassSize;
1: 
0: import org.apache.derby.iapi.types.NumberDataType;
0: import org.apache.derby.iapi.types.SQLBoolean;
1: 
0: import java.math.BigDecimal;
1: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
0: import java.sql.ResultSet;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: /**
1:  * SQLLongint satisfies the DataValueDescriptor
1:  * interfaces (i.e., OrderableDataType). It implements a bigint column, 
1:  * e.g. for * storing a column value; it can be specified
1:  * when constructed to not allow nulls. Nullability cannot be changed
1:  * after construction, as it affects the storage size and mechanism.
1:  * <p>
1:  * Because OrderableDataType is a subtype of DataType,
1:  * SQLLongint can play a role in either a DataType/Row
1:  * or a OrderableDataType/Row, interchangeably.
1:  * <p>
1:  * We assume the store has a flag for nullness of the value,
1:  * and simply return a 0-length array for the stored form
1:  * when the value is null.
1:  * <p>
1:  * PERFORMANCE: There are likely alot of performance improvements
1:  * possible for this implementation -- it new's Long
1:  * more than it probably wants to.
1:  */
1: public final class SQLLongint
1: 	extends NumberDataType
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 * (mostly implemented in DataType)
1: 	 */
1: 
1: 
1:     // JDBC is lax in what it permits and what it
1: 	// returns, so we are similarly lax
1: 	// @see DataValueDescriptor
1: 	/**
1: 	 * @exception StandardException thrown on failure to convert
1: 	 */
1: 	public int	getInt() throws StandardException
1: 	{
1: 		/* This value is bogus if the SQLLongint is null */
1: 
1: 		if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "INTEGER");
1: 		return (int) value;
1: 	}
1: 
1: 	/**
1: 	 * @exception StandardException thrown on failure to convert
1: 	 */
1: 	public byte	getByte() throws StandardException
1: 	{
1: 		if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
1: 		return (byte) value;
1: 	}
1: 
1: 	/**
1: 	 * @exception StandardException thrown on failure to convert
1: 	 */
1: 	public short	getShort() throws StandardException
1: 	{
1: 		if (value > Short.MAX_VALUE || value < Short.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "SMALLINT");
1: 		return (short) value;
1: 	}
1: 
1: 	public long	getLong()
1: 	{
1: 		return value;
1: 	}
1: 
1: 	public float	getFloat()
1: 	{
1: 		return (float) value;
1: 	}
1: 
1: 	public double	getDouble()
1: 	{
1: 		return (double) value;
1: 	}
1: 
0: 	public BigDecimal	getBigDecimal()
1: 	{
0: 		if (isNull()) return null;
0: 		return BigDecimal.valueOf(value);
1: 	}
1: 
1:     // for lack of a specification: 0 or null is false,
1:     // all else is true
1: 	public boolean	getBoolean()
1: 	{
1: 		return (value != 0);
1: 	}
1: 
1: 	public String	getString()
1: 	{
1: 		if (isNull())
1: 			return null;
1: 		else
1: 			return Long.toString(value);
1: 	}
1: 
1: 	public Object	getObject()
1: 	{
1: 		if (isNull())
1: 			return null;
1: 		else
0: 			return new Long(value);
1: 	}
1: 
1: 	public int	getLength()
1: 	{
1: 		return TypeId.LONGINT_MAXWIDTH;
1: 	}
1: 
1: 	// this is for DataType's error generator
1: 	public String getTypeName()
1: 	{
0: 		return TypeId.LONGINT_NAME;
1: 	}
1: 
1: 	/*
1: 	 * Storable interface, implies Externalizable, TypedFormat
1: 	 */
1: 
1: 
1: 	/**
1: 		Return my format identifier.
1: 
1: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.SQL_LONGINT_ID;
1: 	}
1: 
1: 	/*
1: 	 * see if the integer value is null.
1: 	 */
1: 	/** @see Storable#isNull */
1: 	public boolean isNull()
1: 	{
1: 		return isnull;
1: 	}
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException {
1: 
1: 		// never called when value is null
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(! isNull());
1: 
1: 		out.writeLong(value);
1: 	}
1: 
1: 	/** @see java.io.Externalizable#readExternal */
1: 	public void readExternal(ObjectInput in) throws IOException {
1: 
1: 		value = in.readLong();
1: 		isnull = false;
1: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException {
1: 
1: 		value = in.readLong();
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 	 * @see Storable#restoreToNull
1: 	 *
1: 	 */
1: 
1: 	public void restoreToNull()
1: 	{
1: 		value = 0;
1: 		isnull = true;
1: 	}
1: 
1: 	/** @exception StandardException		Thrown on error */
1: 	protected int typeCompare(DataValueDescriptor arg) throws StandardException
1: 	{
1: 
1: 		/* neither are null, get the value */
1: 
1: 		long thisValue = this.getLong();
1: 
1: 		long otherValue = arg.getLong();
1: 
1: 		if (thisValue == otherValue)
1: 			return 0;
1: 		else if (thisValue > otherValue)
1: 			return 1;
1: 		else
1: 			return -1;
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
1: 	{
1: 		return new SQLLongint(value, isnull);
1: 	}
1: 
1: 	/**
1: 	 * @see DataValueDescriptor#getNewNull
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1: 	{
1: 		return new SQLLongint();
1: 	}
1: 
1: 	/** 
1: 	 * @see DataValueDescriptor#setValueFromResultSet 
1: 	 *
1: 	 * @exception SQLException		Thrown on error
1: 	 */
1: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
1: 									  boolean isNullable)
1: 		throws SQLException
1: 	{
1: 			if ((value = resultSet.getLong(colNumber)) == 0L)
1: 				isnull = (isNullable && resultSet.wasNull());
1: 			else
1: 				isnull = false;
1: 	}
1: 	/**
1: 		Set the value into a PreparedStatement.
1: 
1: 		@exception SQLException Error setting value in PreparedStatement
1: 	*/
1: 	public final void setInto(PreparedStatement ps, int position) throws SQLException {
1: 
1: 		if (isNull()) {
1: 			ps.setNull(position, java.sql.Types.BIGINT);
1: 			return;
1: 		}
1: 
1: 		ps.setLong(position, value);
1: 	}
1: 	/**
1: 		Set this value into a ResultSet for a subsequent ResultSet.insertRow
1: 		or ResultSet.updateRow. This method will only be called for non-null values.
1: 
1: 		@exception SQLException thrown by the ResultSet object
1: 	*/
1: 	public final void setInto(ResultSet rs, int position) throws SQLException {
1: 		rs.updateLong(position, value);
1: 	}
1: 
1: 	/*
1: 	 * class interface
1: 	 */
1: 
1: 	/*
1: 	 * constructors
1: 	 */
1: 
1: 	/** no-arg constructor, required by Formattable */
1:     // This constructor also gets used when we are
1:     // allocating space for a long.
1: 	public SQLLongint() 
1: 	{
1: 		isnull = true;
1: 	}
1: 
1: 	public SQLLongint(long val)
1: 	{
1: 		value = val;
1: 	}
1: 
0: 	/* This constructor gets used for the getClone() method */
1: 	private SQLLongint(long val, boolean isnull)
1: 	{
1: 		value = val;
1: 		this.isnull = isnull;
1: 	}
1: 	public SQLLongint(Long obj) {
1: 		if (isnull = (obj == null))
1: 			;
1: 		else
1: 			value = obj.longValue();
1: 	}
1: 
1: 	/**
1: 		@exception StandardException thrown if string not accepted
1: 	 */
1: 	public void setValue(String theValue)
1: 		throws StandardException
1: 	{
1: 		if (theValue == null)
1: 		{
1: 			value = 0;
1: 			isnull = true;
1: 		}
1: 		else
1: 		{
1: 		    try {
1: 		        value = Long.valueOf(theValue.trim()).longValue();
1: 			} catch (NumberFormatException nfe) {
1: 			    throw invalidFormat();
1: 			}
1: 			isnull = false;
1: 		}
1: 	}
1: 
1: 	public void setValue(long theValue)
1: 	{
1: 		value = theValue;
1: 		isnull = false;
1: 	}
1: 
1: 	public void setValue(int theValue)
1: 	{
1: 		value = theValue;
1: 		isnull = false;
1: 	}
1: 
0: 	public void setValue(short theValue)
1: 	{
1: 		value = theValue;
1: 		isnull = false;
1: 	}
1: 
0: 	public void setValue(byte theValue)
1: 	{
1: 		value = theValue;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 	 * @see NumberDataValue#setValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public void setValue(float theValue) throws StandardException
1: 	{
1: 		theValue = NumberDataType.normalizeREAL(theValue);
1: 
1: 		if (theValue > Long.MAX_VALUE
1: 			|| theValue < Long.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1: 
1: 		float floorValue = (float)Math.floor(theValue);
1: 
1: 		value = (long)floorValue;
1: 		isnull = false;
1: 	}
1: 
1: 	/**
1: 	 * @see NumberDataValue#setValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public void setValue(double theValue) throws StandardException
1: 	{
1: 		theValue = NumberDataType.normalizeDOUBLE(theValue);
1: 
1: 		if (theValue > Long.MAX_VALUE
1: 			|| theValue < Long.MIN_VALUE)
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1: 
1: 		double floorValue = Math.floor(theValue);
1: 
1: 		value = (long)floorValue;
1: 		isnull = false;
1: 
1: 	}
1: 
1: 	/**
1: 	 * @see NumberDataValue#setValue
1: 	 *
1: 	 */
1: 	public void setValue(boolean theValue)
1: 	{
1: 		value = theValue?1:0;
1: 		isnull = false;
1: 
1: 	}
1: 
1: 	/**
0: 	 * @see DataValueDescriptor#setValue
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */	
0: 	public void setValue(Object theValue)
1: 		throws StandardException
1: 	{
1: 		if (theValue == null)
1: 		{
0: 			setToNull();
1: 		}
0: 		else if (theValue instanceof Number)
1: 		{
0: 			this.setValue(((Number)theValue).longValue());
1: 		}
1: 		else
1: 		{
0: 			genericSetObject(theValue);
1: 		}
1: 	}
1: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
1: 
1: 		setValue(theValue.getLong());
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/** @see DataValueDescriptor#typePrecedence */
1: 	public int typePrecedence()
1: 	{
1: 		return TypeId.LONGINT_PRECEDENCE;
1: 	}
1: 
1: 	/*
1: 	** SQL Operators
1: 	*/
1: 
1: 	/**
1: 	 * The = operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
1: 	 * @param left			The value on the left side of the =
1: 	 * @param right			The value on the right side of the =
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the two parameters are equal
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue equals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getLong() == right.getLong());
1: 	}
1: 
1: 	/**
0: 	 * The <> operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the <>
0: 	 * @param right			The value on the right side of the <>
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the two parameters
1: 	 *			are not equal
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue notEquals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getLong() != right.getLong());
1: 	}
1: 
1: 	/**
0: 	 * The < operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the <
0: 	 * @param right			The value on the right side of the <
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is less
1: 	 *			than the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue lessThan(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getLong() < right.getLong());
1: 	}
1: 
1: 	/**
0: 	 * The > operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the >
0: 	 * @param right			The value on the right side of the >
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is greater
1: 	 *			than the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue greaterThan(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getLong() > right.getLong());
1: 	}
1: 
1: 	/**
0: 	 * The <= operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the <=
0: 	 * @param right			The value on the right side of the <=
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is less
1: 	 *			than or equal to the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue lessOrEquals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getLong() <= right.getLong());
1: 	}
1: 
1: 	/**
0: 	 * The >= operator as called from the language module, as opposed to
1: 	 * the storage module.
1: 	 *
0: 	 * @param left			The value on the left side of the >=
0: 	 * @param right			The value on the right side of the >=
1: 	 *
1: 	 * @return	A SQL boolean value telling whether the first operand is greater
1: 	 *			than or equal to the second operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public BooleanDataValue greaterOrEquals(DataValueDescriptor left,
1: 							DataValueDescriptor right)
1: 			throws StandardException
1: 	{
1: 		return SQLBoolean.truthValue(left,
1: 									 right,
1: 									 left.getLong() >= right.getLong());
1: 	}
1: 
1: 	/**
1: 	 * This method implements the + operator for "bigint + bigint".
1: 	 *
1: 	 * @param addend1	One of the addends
1: 	 * @param addend2	The other addend
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLLongint containing the result of the addition
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public NumberDataValue plus(NumberDataValue addend1,
1: 							NumberDataValue addend2,
1: 							NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLLongint();
1: 		}
1: 
1: 		if (addend1.isNull() || addend2.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 		long	addend1Long = addend1.getLong();
1: 		long	addend2Long = addend2.getLong();
1: 
1: 		long resultValue = addend1Long + addend2Long;
1: 
1: 		/*
1: 		** Java does not check for overflow with integral types. We have to
1: 		** check the result ourselves.
1: 		**
1: 		** Overflow is possible only if the two addends have the same sign.
1: 		** Do they?  (This method of checking is approved by "The Java
1: 		** Programming Language" by Arnold and Gosling.)
1: 		*/
1: 		if ((addend1Long < 0) == (addend2Long < 0))
1: 		{
1: 			/*
1: 			** Addends have the same sign.  The result should have the same
1: 			** sign as the addends.  If not, an overflow has occurred.
1: 			*/
1: 			if ((addend1Long < 0) != (resultValue < 0))
1: 			{
1: 				throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1: 			}
1: 		}
1: 		result.setValue(resultValue);
1: 
1: 		return result;
1: 	}
1: 
1: 	/**
1: 	 * This method implements the - operator for "bigint - bigint".
1: 	 *
1: 	 * @param left	The value to be subtracted from
1: 	 * @param right	The value to be subtracted
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLLongint containing the result of the subtraction
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public NumberDataValue minus(NumberDataValue left,
1: 							NumberDataValue right,
1: 							NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLLongint();
1: 		}
1: 
1: 		if (left.isNull() || right.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		long diff = left.getLong() - right.getLong();
1: 
1: 		/*
1: 		** Java does not check for overflow with integral types. We have to
1: 		** check the result ourselves.
1: 		**
1: 		** Overflow is possible only if the left and the right side have opposite signs.
1: 		** Do they?  (This method of checking is approved by "The Java
1: 		** Programming Language" by Arnold and Gosling.)
1: 		*/
1: 		if ((left.getLong() < 0) != (right.getLong() < 0))
1: 		{
1: 			/*
1: 			** Left and right have opposite signs.  The result should have the same
1: 			** sign as the left (this).  If not, an overflow has occurred.
1: 			*/
1: 			if ((left.getLong() < 0) != (diff < 0))
1: 			{
1: 				throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1: 			}
1: 		}
1: 
1: 		result.setValue(diff);
1: 		return result;
1: 	}
1: 
1: 	/**
1: 	 * This method implements the * operator for "bigint * bigint".
1: 	 *
1: 	 * @param left	The first value to be multiplied
1: 	 * @param right	The second value to be multiplied
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLLongint containing the result of the multiplication
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public NumberDataValue times(NumberDataValue left,
1: 							NumberDataValue right,
1: 							NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		long		tempResult;
1: 
1: 		if (result == null)
1: 		{
1: 			result = new SQLLongint();
1: 		}
1: 
1: 		if (left.isNull() || right.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/*
1: 		** Java does not check for overflow with integral types. We have to
1: 		** check the result ourselves.
1: 		**
1: 		** We can't use sign checking tricks like we do for '+' and '-' since
1: 		** the product of 2 integers can wrap around multiple times.  So, we
1: 		** apply the principle that a * b = c => a = c / b.  If b != 0 and
1: 		** a != c / b, then overflow occurred.
1: 		*/
1: 		tempResult = left.getLong() * right.getLong();
1: 		if ((right.getLong() != 0) && (left.getLong() != tempResult / right.getLong()))
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1: 		}
1: 
1: 		result.setValue(tempResult);
1: 		return result;
1: 	}
1: 
1: 	/**
1: 	 * This method implements the / operator for "bigint / bigint".
1: 	 *
1: 	 * @param dividend	The numerator
1: 	 * @param divisor	The denominator
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLLongint containing the result of the division
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public NumberDataValue divide(NumberDataValue dividend,
1: 							 NumberDataValue divisor,
1: 							 NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		long	longDivisor;
1: 
1: 		if (result == null)
1: 		{
1: 			result = new SQLLongint();
1: 		}
1: 
1: 		if (dividend.isNull() || divisor.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/* Catch divide by 0 */
1: 		longDivisor = divisor.getLong();
1: 		if (longDivisor == 0)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
1: 		}
1: 
1: 		result.setValue(dividend.getLong() / longDivisor);
1: 		return result;
1: 	}
1: 	/**
1: 		mod(bigint, bigint)
1: 	*/
1: 	public NumberDataValue mod(NumberDataValue dividend,
1: 							 NumberDataValue divisor,
1: 							 NumberDataValue result)
1: 				throws StandardException
1: 	{
1: 		if (result == null)
1: 		{
1: 			result = new SQLLongint();
1: 		}
1: 
1: 		if (dividend.isNull() || divisor.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		/* Catch divide by 0 */
1: 		long longDivisor = divisor.getLong();
1: 		if (longDivisor == 0)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
1: 		}
1: 
1: 		result.setValue(dividend.getLong() % longDivisor);
1: 		return result;
1: 	}
1: 	/**
1: 	 * This method implements the unary minus operator for bigint.
1: 	 *
1: 	 * @param result	The result of a previous call to this method, null
1: 	 *					if not called yet
1: 	 *
1: 	 * @return	A SQLLongint containing the result of the negation
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	public NumberDataValue minus(NumberDataValue result)
1: 									throws StandardException
1: 	{
1: 		long		operandValue;
1: 
1: 		if (result == null)
1: 		{
1: 			result = new SQLLongint();
1: 		}
1: 
1: 		if (this.isNull())
1: 		{
1: 			result.setToNull();
1: 			return result;
1: 		}
1: 
1: 		operandValue = this.getLong();
1: 
1: 		/*
1: 		** In two's complement arithmetic, the minimum value for a number
1: 		** can't be negated, since there is no representation for its
1: 		** positive value.
1: 		*/
1: 		if (operandValue == Long.MIN_VALUE)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
1: 		}
1: 
1: 		result.setValue(-operandValue);
1: 		return result;
1: 	}
1: 
1:     /**
1:      * This method implements the isNegative method.
1:      *
1:      * @return  A boolean.  if this.value is negative, return true.
1:      *
0:      * @exception StandException       Thrown on error
1:      */
1:     
1:     protected boolean isNegative()
1:     {
1:         return !isNull() && value < 0L;
1:     }
1: 
1: 	/*
1: 	 * String display of value
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (isNull())
1: 			return "NULL";
1: 		else
1: 			return Long.toString(value);
1: 	}
1: 
1: 
1: 	/*
1: 	 * Hash code
1: 	 */
1: 	public int hashCode()
1: 	{
1: 		return (int) (value ^ (value >> 32));
1: 	}
1: 
1:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLLongint.class);
1: 
1:     public int estimateMemoryUsage()
1:     {
1:         return BASE_MEMORY_USAGE;
1:     }
1: 
1: 	/*
1: 	 * object state
1: 	 */
1: 	private long		value;
1: 	private boolean	isnull;
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.BooleanDataValue;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.cache.ClassSize;
0: 
0: import org.apache.derby.iapi.types.NumberDataType;
0: import org.apache.derby.iapi.types.SQLBoolean;
0: 
0: import java.math.BigDecimal;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.sql.ResultSet;
0: import java.sql.PreparedStatement;
0: import java.sql.SQLException;
0: 
0: /**
0:  * SQLLongint satisfies the DataValueDescriptor
0:  * interfaces (i.e., OrderableDataType). It implements a bigint column, 
0:  * e.g. for * storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction, as it affects the storage size and mechanism.
0:  * <p>
0:  * Because OrderableDataType is a subtype of DataType,
0:  * SQLLongint can play a role in either a DataType/Row
0:  * or a OrderableDataType/Row, interchangeably.
0:  * <p>
0:  * We assume the store has a flag for nullness of the value,
0:  * and simply return a 0-length array for the stored form
0:  * when the value is null.
0:  * <p>
0:  * PERFORMANCE: There are likely alot of performance improvements
0:  * possible for this implementation -- it new's Long
0:  * more than it probably wants to.
0:  */
0: public final class SQLLongint
0: 	extends NumberDataType
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 * (mostly implemented in DataType)
0: 	 */
0: 
0: 
0:     // JDBC is lax in what it permits and what it
0: 	// returns, so we are similarly lax
0: 	// @see DataValueDescriptor
0: 	/**
0: 	 * @exception StandardException thrown on failure to convert
0: 	 */
0: 	public int	getInt() throws StandardException
0: 	{
0: 		/* This value is bogus if the SQLLongint is null */
0: 
0: 		if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "INTEGER");
0: 		return (int) value;
0: 	}
0: 
0: 	/**
0: 	 * @exception StandardException thrown on failure to convert
0: 	 */
0: 	public byte	getByte() throws StandardException
0: 	{
0: 		if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "TINYINT");
0: 		return (byte) value;
0: 	}
0: 
0: 	/**
0: 	 * @exception StandardException thrown on failure to convert
0: 	 */
0: 	public short	getShort() throws StandardException
0: 	{
0: 		if (value > Short.MAX_VALUE || value < Short.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "SMALLINT");
0: 		return (short) value;
0: 	}
0: 
0: 	public long	getLong()
0: 	{
0: 		return value;
0: 	}
0: 
0: 	public float	getFloat()
0: 	{
0: 		return (float) value;
0: 	}
0: 
0: 	public double	getDouble()
0: 	{
0: 		return (double) value;
0: 	}
0: 
0: 	public BigDecimal	getBigDecimal()
0: 	{
0: 		if (isNull()) return null;
0: 		return BigDecimal.valueOf(value);
0: 	}
0: 
0:     // for lack of a specification: 0 or null is false,
0:     // all else is true
0: 	public boolean	getBoolean()
0: 	{
0: 		return (value != 0);
0: 	}
0: 
0: 	public String	getString()
0: 	{
0: 		if (isNull())
0: 			return null;
0: 		else
0: 			return Long.toString(value);
0: 	}
0: 
0: 	public Object	getObject()
0: 	{
0: 		if (isNull())
0: 			return null;
0: 		else
0: 			return new Long(value);
0: 	}
0: 
0: 	public int	getLength()
0: 	{
0: 		return TypeId.LONGINT_MAXWIDTH;
0: 	}
0: 
0: 	// this is for DataType's error generator
0: 	public String getTypeName()
0: 	{
0: 		return TypeId.LONGINT_NAME;
0: 	}
0: 
0: 	/*
0: 	 * Storable interface, implies Externalizable, TypedFormat
0: 	 */
0: 
0: 
0: 	/**
0: 		Return my format identifier.
0: 
0: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.SQL_LONGINT_ID;
0: 	}
0: 
0: 	/*
0: 	 * see if the integer value is null.
0: 	 */
0: 	/** @see Storable#isNull */
0: 	public boolean isNull()
0: 	{
0: 		return isnull;
0: 	}
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException {
0: 
0: 		// never called when value is null
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(! isNull());
0: 
0: 		out.writeLong(value);
0: 	}
0: 
0: 	/** @see java.io.Externalizable#readExternal */
0: 	public void readExternal(ObjectInput in) throws IOException {
0: 
0: 		value = in.readLong();
0: 		isnull = false;
0: 	}
0: 	public void readExternalFromArray(ArrayInputStream in) throws IOException {
0: 
0: 		value = in.readLong();
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 	 * @see Storable#restoreToNull
0: 	 *
0: 	 */
0: 
0: 	public void restoreToNull()
0: 	{
0: 		value = 0;
0: 		isnull = true;
0: 	}
0: 
0: 	/** @exception StandardException		Thrown on error */
0: 	protected int typeCompare(DataValueDescriptor arg) throws StandardException
0: 	{
0: 
0: 		/* neither are null, get the value */
0: 
0: 		long thisValue = this.getLong();
0: 
0: 		long otherValue = arg.getLong();
0: 
0: 		if (thisValue == otherValue)
0: 			return 0;
0: 		else if (thisValue > otherValue)
0: 			return 1;
0: 		else
0: 			return -1;
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
0: 	{
0: 		return new SQLLongint(value, isnull);
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#getNewNull
0: 	 */
0: 	public DataValueDescriptor getNewNull()
0: 	{
0: 		return new SQLLongint();
0: 	}
0: 
0: 	/** 
0: 	 * @see DataValueDescriptor#setValueFromResultSet 
0: 	 *
0: 	 * @exception SQLException		Thrown on error
0: 	 */
0: 	public void setValueFromResultSet(ResultSet resultSet, int colNumber,
0: 									  boolean isNullable)
0: 		throws SQLException
0: 	{
0: 			if ((value = resultSet.getLong(colNumber)) == 0L)
0: 				isnull = (isNullable && resultSet.wasNull());
0: 			else
0: 				isnull = false;
0: 	}
0: 	/**
0: 		Set the value into a PreparedStatement.
0: 
0: 		@exception SQLException Error setting value in PreparedStatement
0: 	*/
0: 	public final void setInto(PreparedStatement ps, int position) throws SQLException {
0: 
0: 		if (isNull()) {
0: 			ps.setNull(position, java.sql.Types.BIGINT);
0: 			return;
0: 		}
0: 
0: 		ps.setLong(position, value);
0: 	}
0: 	/**
0: 		Set this value into a ResultSet for a subsequent ResultSet.insertRow
0: 		or ResultSet.updateRow. This method will only be called for non-null values.
0: 
0: 		@exception SQLException thrown by the ResultSet object
0: 	*/
0: 	public final void setInto(ResultSet rs, int position) throws SQLException {
0: 		rs.updateLong(position, value);
0: 	}
0: 
0: 	/*
0: 	 * class interface
0: 	 */
0: 
0: 	/*
0: 	 * constructors
0: 	 */
0: 
0: 	/** no-arg constructor, required by Formattable */
0:     // This constructor also gets used when we are
0:     // allocating space for a long.
0: 	public SQLLongint() 
0: 	{
0: 		isnull = true;
0: 	}
0: 
0: 	public SQLLongint(long val)
0: 	{
0: 		value = val;
0: 	}
0: 
0: 	/* This constructor gets used for the getClone() method */
0: 	private SQLLongint(long val, boolean isnull)
0: 	{
0: 		value = val;
0: 		this.isnull = isnull;
0: 	}
0: 	public SQLLongint(Long obj) {
0: 		if (isnull = (obj == null))
0: 			;
0: 		else
0: 			value = obj.longValue();
0: 	}
0: 
0: 	/**
0: 		@exception StandardException thrown if string not accepted
0: 	 */
0: 	public void setValue(String theValue)
0: 		throws StandardException
0: 	{
0: 		if (theValue == null)
0: 		{
0: 			value = 0;
0: 			isnull = true;
0: 		}
0: 		else
0: 		{
0: 		    try {
0: 		        value = Long.valueOf(theValue.trim()).longValue();
0: 			} catch (NumberFormatException nfe) {
0: 			    throw invalidFormat();
0: 			}
0: 			isnull = false;
0: 		}
0: 	}
0: 
0: 	public void setValue(long theValue)
0: 	{
0: 		value = theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	public void setValue(int theValue)
0: 	{
0: 		value = theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	public void setValue(short theValue)
0: 	{
0: 		value = theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	public void setValue(byte theValue)
0: 	{
0: 		value = theValue;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 	 * @see NumberDataValue#setValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(float theValue) throws StandardException
0: 	{
0: 		theValue = NumberDataType.normalizeREAL(theValue);
0: 
0: 		if (theValue > Long.MAX_VALUE
0: 			|| theValue < Long.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
0: 
0: 		float floorValue = (float)Math.floor(theValue);
0: 
0: 		value = (long)floorValue;
0: 		isnull = false;
0: 	}
0: 
0: 	/**
0: 	 * @see NumberDataValue#setValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(double theValue) throws StandardException
0: 	{
0: 		theValue = NumberDataType.normalizeDOUBLE(theValue);
0: 
0: 		if (theValue > Long.MAX_VALUE
0: 			|| theValue < Long.MIN_VALUE)
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
0: 
0: 		double floorValue = Math.floor(theValue);
0: 
0: 		value = (long)floorValue;
0: 		isnull = false;
0: 
0: 	}
0: 
0: 	/**
0: 	 * @see NumberDataValue#setValue
0: 	 *
0: 	 */
0: 	public void setValue(boolean theValue)
0: 	{
0: 		value = theValue?1:0;
0: 		isnull = false;
0: 
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#setValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */	
0: 	public void setValue(Object theValue)
0: 		throws StandardException
0: 	{
0: 		if (theValue == null)
0: 		{
0: 			setToNull();
0: 		}
0: 		else if (theValue instanceof Number)
0: 		{
0: 			this.setValue(((Number)theValue).longValue());
0: 		}
0: 		else
0: 		{
0: 			genericSetObject(theValue);
0: 		}
0: 	}
0: 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
0: 
0: 		setValue(theValue.getLong());
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#typePrecedence */
0: 	public int typePrecedence()
0: 	{
0: 		return TypeId.LONGINT_PRECEDENCE;
0: 	}
0: 
0: 	/*
0: 	** SQL Operators
0: 	*/
0: 
0: 	/**
0: 	 * The = operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the =
0: 	 * @param right			The value on the right side of the =
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the two parameters are equal
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue equals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getLong() == right.getLong());
0: 	}
0: 
0: 	/**
0: 	 * The <> operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the <>
0: 	 * @param right			The value on the right side of the <>
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the two parameters
0: 	 *			are not equal
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue notEquals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getLong() != right.getLong());
0: 	}
0: 
0: 	/**
0: 	 * The < operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the <
0: 	 * @param right			The value on the right side of the <
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is less
0: 	 *			than the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue lessThan(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getLong() < right.getLong());
0: 	}
0: 
0: 	/**
0: 	 * The > operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the >
0: 	 * @param right			The value on the right side of the >
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is greater
0: 	 *			than the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue greaterThan(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getLong() > right.getLong());
0: 	}
0: 
0: 	/**
0: 	 * The <= operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the <=
0: 	 * @param right			The value on the right side of the <=
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is less
0: 	 *			than or equal to the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue lessOrEquals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getLong() <= right.getLong());
0: 	}
0: 
0: 	/**
0: 	 * The >= operator as called from the language module, as opposed to
0: 	 * the storage module.
0: 	 *
0: 	 * @param left			The value on the left side of the >=
0: 	 * @param right			The value on the right side of the >=
0: 	 *
0: 	 * @return	A SQL boolean value telling whether the first operand is greater
0: 	 *			than or equal to the second operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public BooleanDataValue greaterOrEquals(DataValueDescriptor left,
0: 							DataValueDescriptor right)
0: 			throws StandardException
0: 	{
0: 		return SQLBoolean.truthValue(left,
0: 									 right,
0: 									 left.getLong() >= right.getLong());
0: 	}
0: 
0: 	/**
0: 	 * This method implements the + operator for "bigint + bigint".
0: 	 *
0: 	 * @param addend1	One of the addends
0: 	 * @param addend2	The other addend
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLLongint containing the result of the addition
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue plus(NumberDataValue addend1,
0: 							NumberDataValue addend2,
0: 							NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLLongint();
0: 		}
0: 
0: 		if (addend1.isNull() || addend2.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 		long	addend1Long = addend1.getLong();
0: 		long	addend2Long = addend2.getLong();
0: 
0: 		long resultValue = addend1Long + addend2Long;
0: 
0: 		/*
0: 		** Java does not check for overflow with integral types. We have to
0: 		** check the result ourselves.
0: 		**
0: 		** Overflow is possible only if the two addends have the same sign.
0: 		** Do they?  (This method of checking is approved by "The Java
0: 		** Programming Language" by Arnold and Gosling.)
0: 		*/
0: 		if ((addend1Long < 0) == (addend2Long < 0))
0: 		{
0: 			/*
0: 			** Addends have the same sign.  The result should have the same
0: 			** sign as the addends.  If not, an overflow has occurred.
0: 			*/
0: 			if ((addend1Long < 0) != (resultValue < 0))
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
0: 			}
0: 		}
0: 		result.setValue(resultValue);
0: 
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	 * This method implements the - operator for "bigint - bigint".
0: 	 *
0: 	 * @param left	The value to be subtracted from
0: 	 * @param right	The value to be subtracted
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLLongint containing the result of the subtraction
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue minus(NumberDataValue left,
0: 							NumberDataValue right,
0: 							NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLLongint();
0: 		}
0: 
0: 		if (left.isNull() || right.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		long diff = left.getLong() - right.getLong();
0: 
0: 		/*
0: 		** Java does not check for overflow with integral types. We have to
0: 		** check the result ourselves.
0: 		**
0: 		** Overflow is possible only if the left and the right side have opposite signs.
0: 		** Do they?  (This method of checking is approved by "The Java
0: 		** Programming Language" by Arnold and Gosling.)
0: 		*/
0: 		if ((left.getLong() < 0) != (right.getLong() < 0))
0: 		{
0: 			/*
0: 			** Left and right have opposite signs.  The result should have the same
0: 			** sign as the left (this).  If not, an overflow has occurred.
0: 			*/
0: 			if ((left.getLong() < 0) != (diff < 0))
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
0: 			}
0: 		}
0: 
0: 		result.setValue(diff);
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	 * This method implements the * operator for "bigint * bigint".
0: 	 *
0: 	 * @param left	The first value to be multiplied
0: 	 * @param right	The second value to be multiplied
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLLongint containing the result of the multiplication
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue times(NumberDataValue left,
0: 							NumberDataValue right,
0: 							NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		long		tempResult;
0: 
0: 		if (result == null)
0: 		{
0: 			result = new SQLLongint();
0: 		}
0: 
0: 		if (left.isNull() || right.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/*
0: 		** Java does not check for overflow with integral types. We have to
0: 		** check the result ourselves.
0: 		**
0: 		** We can't use sign checking tricks like we do for '+' and '-' since
0: 		** the product of 2 integers can wrap around multiple times.  So, we
0: 		** apply the principle that a * b = c => a = c / b.  If b != 0 and
0: 		** a != c / b, then overflow occurred.
0: 		*/
0: 		tempResult = left.getLong() * right.getLong();
0: 		if ((right.getLong() != 0) && (left.getLong() != tempResult / right.getLong()))
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
0: 		}
0: 
0: 		result.setValue(tempResult);
0: 		return result;
0: 	}
0: 
0: 	/**
0: 	 * This method implements the / operator for "bigint / bigint".
0: 	 *
0: 	 * @param dividend	The numerator
0: 	 * @param divisor	The denominator
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLLongint containing the result of the division
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue divide(NumberDataValue dividend,
0: 							 NumberDataValue divisor,
0: 							 NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		long	longDivisor;
0: 
0: 		if (result == null)
0: 		{
0: 			result = new SQLLongint();
0: 		}
0: 
0: 		if (dividend.isNull() || divisor.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/* Catch divide by 0 */
0: 		longDivisor = divisor.getLong();
0: 		if (longDivisor == 0)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
0: 		}
0: 
0: 		result.setValue(dividend.getLong() / longDivisor);
0: 		return result;
0: 	}
0: 	/**
0: 		mod(bigint, bigint)
0: 	*/
0: 	public NumberDataValue mod(NumberDataValue dividend,
0: 							 NumberDataValue divisor,
0: 							 NumberDataValue result)
0: 				throws StandardException
0: 	{
0: 		if (result == null)
0: 		{
0: 			result = new SQLLongint();
0: 		}
0: 
0: 		if (dividend.isNull() || divisor.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		/* Catch divide by 0 */
0: 		long longDivisor = divisor.getLong();
0: 		if (longDivisor == 0)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_DIVIDE_BY_ZERO);
0: 		}
0: 
0: 		result.setValue(dividend.getLong() % longDivisor);
0: 		return result;
0: 	}
0: 	/**
0: 	 * This method implements the unary minus operator for bigint.
0: 	 *
0: 	 * @param result	The result of a previous call to this method, null
0: 	 *					if not called yet
0: 	 *
0: 	 * @return	A SQLLongint containing the result of the negation
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public NumberDataValue minus(NumberDataValue result)
0: 									throws StandardException
0: 	{
0: 		long		operandValue;
0: 
0: 		if (result == null)
0: 		{
0: 			result = new SQLLongint();
0: 		}
0: 
0: 		if (this.isNull())
0: 		{
0: 			result.setToNull();
0: 			return result;
0: 		}
0: 
0: 		operandValue = this.getLong();
0: 
0: 		/*
0: 		** In two's complement arithmetic, the minimum value for a number
0: 		** can't be negated, since there is no representation for its
0: 		** positive value.
0: 		*/
0: 		if (operandValue == Long.MIN_VALUE)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, "BIGINT");
0: 		}
0: 
0: 		result.setValue(-operandValue);
0: 		return result;
0: 	}
0: 
0:     /**
0:      * This method implements the isNegative method.
0:      *
0:      * @return  A boolean.  if this.value is negative, return true.
0:      *
0:      * @exception StandException       Thrown on error
0:      */
0:     
0:     protected boolean isNegative()
0:     {
0:         return !isNull() && value < 0L;
0:     }
0: 
0: 	/*
0: 	 * String display of value
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (isNull())
0: 			return "NULL";
0: 		else
0: 			return Long.toString(value);
0: 	}
0: 
0: 
0: 	/*
0: 	 * Hash code
0: 	 */
0: 	public int hashCode()
0: 	{
0: 		return (int) (value ^ (value >> 32));
0: 	}
0: 
0:     private static final int BASE_MEMORY_USAGE = ClassSize.estimateBaseFromCatalog( SQLLongint.class);
0: 
0:     public int estimateMemoryUsage()
0:     {
0:         return BASE_MEMORY_USAGE;
0:     }
0: 
0: 	/*
0: 	 * object state
0: 	 */
0: 	private long		value;
0: 	private boolean	isnull;
0: }
============================================================================