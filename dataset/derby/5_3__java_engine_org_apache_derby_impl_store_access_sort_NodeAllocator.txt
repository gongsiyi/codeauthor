1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.NodeAllocator
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   NodeAllocator manages an array of nodes which can be reused.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: final class NodeAllocator
1:eac0369: {
1:eac0369: 	private static final int DEFAULT_INIT_SIZE = 128;
1:eac0369: 	private static final int GROWTH_MULTIPLIER = 2;
1:eac0369: 	private static final int DEFAULT_MAX_SIZE = 1024;
1:eac0369: 
1:eac0369: 	private Node array[];
1:eac0369: 	private int maxSize;
1:eac0369: 	private int nAllocated;
1:eac0369: 	private Node freeList = null;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	Construct an empty allocator.  The caller must call
1:eac0369: 	init() before using it.
1:eac0369: 	**/
1:eac0369: 	public NodeAllocator()
1:eac0369: 	{
1:eac0369: 		array = null;
1:eac0369: 		nAllocated = 0;
1:eac0369: 		maxSize = 0;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Node newNode()
1:eac0369: 	{
1:eac0369: 		// Caller forgot to init?
1:eac0369: 		if (array == null)
1:eac0369: 		{
1:eac0369: 			if (init() == false)
2:eac0369: 				return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (freeList != null)
1:eac0369: 		{
1:eac0369: 			Node n = freeList;
1:eac0369: 			freeList = n.rightLink;
1:eac0369: 			n.rightLink = null;
1:eac0369: 			return n;
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		// Do we need to try reallocating the array?
1:eac0369: 		if (nAllocated == array.length)
1:eac0369: 		{
1:eac0369: 			// If the array is already the maximum size, then
1:eac0369: 			// tell the caller that there are no more nodes
1:eac0369: 			// available.
1:eac0369: 			if (array.length >= maxSize)
1:eac0369: 				return null;
1:eac0369: 
1:cf2105b:             // Calculate the new length. The new array should be no longer
1:cf2105b:             // than maxSize. Use a long for the intermediate result to prevent
1:cf2105b:             // newLength from going negative due to integer overflow when
1:cf2105b:             // array.length is close to Integer.MAX_VALUE.
1:cf2105b:             int newLength = (int) Math.min(
1:cf2105b:                     (long) array.length * GROWTH_MULTIPLIER,
1:cf2105b:                     (long) maxSize);
1:cf2105b: 
1:eac0369: 			// Attempt to allocate a new array.  If the allocation
1:eac0369: 			// fails, tell the caller that there are no more
1:cf2105b:             // nodes available. The allocation may fail if there's
1:cf2105b:             // not enough memory to allocate a new array, or if the
1:cf2105b:             // JVM doesn't support that big arrays (some JVMs have
1:cf2105b:             // a limit on the array length that is different from
1:cf2105b:             // Integer.MAX_VALUE --- DERBY-4119).
1:cf2105b:             Node[] newArray;
1:cf2105b:             try {
1:cf2105b:                 newArray = new Node[newLength];
1:cf2105b:             } catch (OutOfMemoryError oome) {
1:cf2105b:                 // Could not allocate a larger array, so tell the caller that
1:cf2105b:                 // there are no nodes available.
1:cf2105b:                 return null;
1:cf2105b:             }
1:eac0369: 
1:eac0369: 			// The new array was successfully allocated.  Copy the
1:eac0369: 			// nodes from the original array into it, and make the
1:eac0369: 			// new array the allocator's array.
1:eac0369:             System.arraycopy(array, 0, newArray, 0, array.length);
1:eac0369: 			array = newArray;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// If this slot in the array hasn't had a node
1:eac0369: 		// allocated for it yet, do so now.
1:eac0369: 		if (array[nAllocated] == null)
1:eac0369: 			array[nAllocated] = new Node(nAllocated);
1:eac0369: 
1:eac0369: 		// Return the node and increase the allocated count.
1:eac0369: 		return array[nAllocated++];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Return a node to the allocator.
1:eac0369: 	**/
1:eac0369: 	public void freeNode(Node n)
1:eac0369: 	{
1:eac0369: 		n.reset();
1:eac0369: 		n.rightLink = freeList;
1:eac0369: 		freeList = n;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Initialize the allocator with default values for
1:eac0369: 	initial and maximum size.  Returns false if sufficient
1:eac0369: 	memory could not be allocated.
1:eac0369: 	**/
1:eac0369: 	public boolean init()
1:eac0369: 	{
1:eac0369: 		return init(DEFAULT_INIT_SIZE, DEFAULT_MAX_SIZE);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Initialize the allocator with default values for
1:eac0369: 	initial size and the provided maximum size.
1:eac0369: 	Returns false if sufficient	memory could not be allocated.
1:eac0369: 	**/
1:eac0369: 	public boolean init(int maxSize)
1:eac0369: 	{
1:eac0369: 		return init(DEFAULT_INIT_SIZE, maxSize);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Initialize the allocator with the given initial and 
1:eac0369: 	maximum sizes.  This method does not check, but assumes
1:eac0369: 	that the value of initSize is less than the value of
1:eac0369: 	maxSize, and that they are both powers of two. Returns
1:eac0369: 	false if sufficient memory could not be allocated.
1:eac0369: 	**/
1:eac0369: 	public boolean init(int initSize, int maxSize)
1:eac0369: 	{
1:eac0369: 		this.maxSize = maxSize;
1:eac0369: 		if (maxSize < initSize)
1:eac0369: 			initSize = maxSize;
1:eac0369: 		array = new Node[initSize];
1:eac0369: 		if (array == null)
1:eac0369: 			return false;
1:eac0369: 		nAllocated = 0;
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Expand the node allocator's capacity by certain percent.
1:eac0369: 	**/
1:eac0369: 	public void grow(int percent)
1:eac0369: 	{
1:cf2105b:         if (percent > 0) { // cannot shrink
1:cf2105b:             // Calculate the new maximum size. Use long arithmetic so that
1:cf2105b:             // intermediate results don't overflow and make maxSize go
1:cf2105b:             // negative (DERBY-4119).
1:cf2105b:             maxSize = (int) Math.min(
1:cf2105b:                     (long) maxSize * (100 + percent) / 100,
1:cf2105b:                     (long) Integer.MAX_VALUE);
1:cf2105b:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	Clear all nodes that this allocator has allocated.
1:eac0369: 	The allocator must already have been initialized.
1:eac0369: 	**/
1:eac0369: 	public void reset()
1:eac0369: 	{
1:eac0369: 		if (array == null)
1:eac0369: 			return;
1:eac0369: 		for (int i = 0; i < nAllocated; i++)
1:eac0369: 			array[i].reset();
1:eac0369: 		nAllocated = 0;
1:eac0369: 		freeList = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void close()
1:eac0369: 	{
1:eac0369: 		array = null;
1:eac0369: 		nAllocated = 0;
1:eac0369: 		maxSize = 0;
1:eac0369: 		freeList = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int capacity()
1:eac0369: 	{
1:eac0369: 		return maxSize;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cf2105b
/////////////////////////////////////////////////////////////////////////
1:             // Calculate the new length. The new array should be no longer
1:             // than maxSize. Use a long for the intermediate result to prevent
1:             // newLength from going negative due to integer overflow when
1:             // array.length is close to Integer.MAX_VALUE.
1:             int newLength = (int) Math.min(
1:                     (long) array.length * GROWTH_MULTIPLIER,
1:                     (long) maxSize);
1: 
1:             // nodes available. The allocation may fail if there's
1:             // not enough memory to allocate a new array, or if the
1:             // JVM doesn't support that big arrays (some JVMs have
1:             // a limit on the array length that is different from
1:             // Integer.MAX_VALUE --- DERBY-4119).
1:             Node[] newArray;
1:             try {
1:                 newArray = new Node[newLength];
1:             } catch (OutOfMemoryError oome) {
1:                 // Could not allocate a larger array, so tell the caller that
1:                 // there are no nodes available.
1:                 return null;
1:             }
/////////////////////////////////////////////////////////////////////////
1:         if (percent > 0) { // cannot shrink
1:             // Calculate the new maximum size. Use long arithmetic so that
1:             // intermediate results don't overflow and make maxSize go
1:             // negative (DERBY-4119).
1:             maxSize = (int) Math.min(
1:                     (long) maxSize * (100 + percent) / 100,
1:                     (long) Integer.MAX_VALUE);
1:         }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.NodeAllocator
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
1: /**
1: 
1:   NodeAllocator manages an array of nodes which can be reused.
1: 
1: **/
1: 
1: final class NodeAllocator
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private static final int DEFAULT_INIT_SIZE = 128;
1: 	private static final int GROWTH_MULTIPLIER = 2;
1: 	private static final int DEFAULT_MAX_SIZE = 1024;
1: 
1: 	private Node array[];
1: 	private int maxSize;
1: 	private int nAllocated;
1: 	private Node freeList = null;
1: 	
1: 	/**
1: 	Construct an empty allocator.  The caller must call
1: 	init() before using it.
1: 	**/
1: 	public NodeAllocator()
1: 	{
1: 		array = null;
1: 		nAllocated = 0;
1: 		maxSize = 0;
1: 	}
1: 
1: 	public Node newNode()
1: 	{
1: 		// Caller forgot to init?
1: 		if (array == null)
1: 		{
1: 			if (init() == false)
1: 				return null;
1: 		}
1: 
1: 		if (freeList != null)
1: 		{
1: 			Node n = freeList;
1: 			freeList = n.rightLink;
1: 			n.rightLink = null;
1: 			return n;
1: 		}
1: 		
1: 		// Do we need to try reallocating the array?
1: 		if (nAllocated == array.length)
1: 		{
1: 			// If the array is already the maximum size, then
1: 			// tell the caller that there are no more nodes
1: 			// available.
1: 			if (array.length >= maxSize)
1: 				return null;
1: 
1: 			// Attempt to allocate a new array.  If the allocation
1: 			// fails, tell the caller that there are no more
0: 			// nodes available.
0: 			Node[] newArray = new Node[array.length * GROWTH_MULTIPLIER];
0: 			if (newArray == null)
1: 				return null;
1: 
1: 			// The new array was successfully allocated.  Copy the
1: 			// nodes from the original array into it, and make the
1: 			// new array the allocator's array.
1:             System.arraycopy(array, 0, newArray, 0, array.length);
1: 			array = newArray;
1: 		}
1: 
1: 		// If this slot in the array hasn't had a node
1: 		// allocated for it yet, do so now.
1: 		if (array[nAllocated] == null)
1: 			array[nAllocated] = new Node(nAllocated);
1: 
1: 		// Return the node and increase the allocated count.
1: 		return array[nAllocated++];
1: 	}
1: 
1: 	/**
1: 	Return a node to the allocator.
1: 	**/
1: 	public void freeNode(Node n)
1: 	{
1: 		n.reset();
1: 		n.rightLink = freeList;
1: 		freeList = n;
1: 	}
1: 
1: 	/**
1: 	Initialize the allocator with default values for
1: 	initial and maximum size.  Returns false if sufficient
1: 	memory could not be allocated.
1: 	**/
1: 	public boolean init()
1: 	{
1: 		return init(DEFAULT_INIT_SIZE, DEFAULT_MAX_SIZE);
1: 	}
1: 
1: 	/**
1: 	Initialize the allocator with default values for
1: 	initial size and the provided maximum size.
1: 	Returns false if sufficient	memory could not be allocated.
1: 	**/
1: 	public boolean init(int maxSize)
1: 	{
1: 		return init(DEFAULT_INIT_SIZE, maxSize);
1: 	}
1: 
1: 	/**
1: 	Initialize the allocator with the given initial and 
1: 	maximum sizes.  This method does not check, but assumes
1: 	that the value of initSize is less than the value of
1: 	maxSize, and that they are both powers of two. Returns
1: 	false if sufficient memory could not be allocated.
1: 	**/
1: 	public boolean init(int initSize, int maxSize)
1: 	{
1: 		this.maxSize = maxSize;
1: 		if (maxSize < initSize)
1: 			initSize = maxSize;
1: 		array = new Node[initSize];
1: 		if (array == null)
1: 			return false;
1: 		nAllocated = 0;
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	Expand the node allocator's capacity by certain percent.
1: 	**/
1: 	public void grow(int percent)
1: 	{
0: 		if (percent > 0)		// cannot shrink
0: 			maxSize = maxSize * (100+percent)/100;
1: 	}
1: 
1: 	/**
1: 	Clear all nodes that this allocator has allocated.
1: 	The allocator must already have been initialized.
1: 	**/
1: 	public void reset()
1: 	{
1: 		if (array == null)
1: 			return;
1: 		for (int i = 0; i < nAllocated; i++)
1: 			array[i].reset();
1: 		nAllocated = 0;
1: 		freeList = null;
1: 	}
1: 
1: 	public void close()
1: 	{
1: 		array = null;
1: 		nAllocated = 0;
1: 		maxSize = 0;
1: 		freeList = null;
1: 	}
1: 
1: 	public int capacity()
1: 	{
1: 		return maxSize;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: /**
0: 
0:   NodeAllocator manages an array of nodes which can be reused.
0: 
0: **/
0: 
0: final class NodeAllocator
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private static final int DEFAULT_INIT_SIZE = 128;
0: 	private static final int GROWTH_MULTIPLIER = 2;
0: 	private static final int DEFAULT_MAX_SIZE = 1024;
0: 
0: 	private Node array[];
0: 	private int maxSize;
0: 	private int nAllocated;
0: 	private Node freeList = null;
0: 	
0: 	/**
0: 	Construct an empty allocator.  The caller must call
0: 	init() before using it.
0: 	**/
0: 	public NodeAllocator()
0: 	{
0: 		array = null;
0: 		nAllocated = 0;
0: 		maxSize = 0;
0: 	}
0: 
0: 	public Node newNode()
0: 	{
0: 		// Caller forgot to init?
0: 		if (array == null)
0: 		{
0: 			if (init() == false)
0: 				return null;
0: 		}
0: 
0: 		if (freeList != null)
0: 		{
0: 			Node n = freeList;
0: 			freeList = n.rightLink;
0: 			n.rightLink = null;
0: 			return n;
0: 		}
0: 		
0: 		// Do we need to try reallocating the array?
0: 		if (nAllocated == array.length)
0: 		{
0: 			// If the array is already the maximum size, then
0: 			// tell the caller that there are no more nodes
0: 			// available.
0: 			if (array.length >= maxSize)
0: 				return null;
0: 
0: 			// Attempt to allocate a new array.  If the allocation
0: 			// fails, tell the caller that there are no more
0: 			// nodes available.
0: 			Node[] newArray = new Node[array.length * GROWTH_MULTIPLIER];
0: 			if (newArray == null)
0: 				return null;
0: 
0: 			// The new array was successfully allocated.  Copy the
0: 			// nodes from the original array into it, and make the
0: 			// new array the allocator's array.
0:             System.arraycopy(array, 0, newArray, 0, array.length);
0: 			array = newArray;
0: 		}
0: 
0: 		// If this slot in the array hasn't had a node
0: 		// allocated for it yet, do so now.
0: 		if (array[nAllocated] == null)
0: 			array[nAllocated] = new Node(nAllocated);
0: 
0: 		// Return the node and increase the allocated count.
0: 		return array[nAllocated++];
0: 	}
0: 
0: 	/**
0: 	Return a node to the allocator.
0: 	**/
0: 	public void freeNode(Node n)
0: 	{
0: 		n.reset();
0: 		n.rightLink = freeList;
0: 		freeList = n;
0: 	}
0: 
0: 	/**
0: 	Initialize the allocator with default values for
0: 	initial and maximum size.  Returns false if sufficient
0: 	memory could not be allocated.
0: 	**/
0: 	public boolean init()
0: 	{
0: 		return init(DEFAULT_INIT_SIZE, DEFAULT_MAX_SIZE);
0: 	}
0: 
0: 	/**
0: 	Initialize the allocator with default values for
0: 	initial size and the provided maximum size.
0: 	Returns false if sufficient	memory could not be allocated.
0: 	**/
0: 	public boolean init(int maxSize)
0: 	{
0: 		return init(DEFAULT_INIT_SIZE, maxSize);
0: 	}
0: 
0: 	/**
0: 	Initialize the allocator with the given initial and 
0: 	maximum sizes.  This method does not check, but assumes
0: 	that the value of initSize is less than the value of
0: 	maxSize, and that they are both powers of two. Returns
0: 	false if sufficient memory could not be allocated.
0: 	**/
0: 	public boolean init(int initSize, int maxSize)
0: 	{
0: 		this.maxSize = maxSize;
0: 		if (maxSize < initSize)
0: 			initSize = maxSize;
0: 		array = new Node[initSize];
0: 		if (array == null)
0: 			return false;
0: 		nAllocated = 0;
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	Expand the node allocator's capacity by certain percent.
0: 	**/
0: 	public void grow(int percent)
0: 	{
0: 		if (percent > 0)		// cannot shrink
0: 			maxSize = maxSize * (100+percent)/100;
0: 	}
0: 
0: 	/**
0: 	Clear all nodes that this allocator has allocated.
0: 	The allocator must already have been initialized.
0: 	**/
0: 	public void reset()
0: 	{
0: 		if (array == null)
0: 			return;
0: 		for (int i = 0; i < nAllocated; i++)
0: 			array[i].reset();
0: 		nAllocated = 0;
0: 		freeList = null;
0: 	}
0: 
0: 	public void close()
0: 	{
0: 		array = null;
0: 		nAllocated = 0;
0: 		maxSize = 0;
0: 		freeList = null;
0: 	}
0: 
0: 	public int capacity()
0: 	{
0: 		return maxSize;
0: 	}
0: }
============================================================================