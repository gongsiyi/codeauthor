1:1a66a1a: /*
3:1a66a1a:  
1:1a66a1a:    Derby - Class org.apache.derby.client.am.BlobLocatorOutputStream
1:1a66a1a:  
1:1a66a1a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1a66a1a:    contributor license agreements.  See the NOTICE file distributed with
1:1a66a1a:    this work for additional information regarding copyright ownership.
1:1a66a1a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1a66a1a:    (the "License"); you may not use this file except in compliance with
1:1a66a1a:    the License.  You may obtain a copy of the License at
1:1a66a1a:  
1:1a66a1a:      http://www.apache.org/licenses/LICENSE-2.0
1:1a66a1a:  
1:1a66a1a:    Unless required by applicable law or agreed to in writing, software
1:1a66a1a:    distributed under the License is distributed on an "AS IS" BASIS,
1:1a66a1a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a66a1a:    See the License for the specific language governing permissions and
1:1a66a1a:    limitations under the License.
1:1a66a1a:  
2:1a66a1a:  */
1:1a66a1a: 
1:1a66a1a: package org.apache.derby.client.am;
1:1a66a1a: import java.io.IOException;
1:69e3d06: import java.io.OutputStream;
1:1a66a1a: 
1:05d610e: import org.apache.derby.shared.common.sanity.SanityManager;
1:1a66a1a: 
1:1a66a1a: /**
1:1a66a1a:  * An <code>OutputStream</code> that will use an locator to write
1:1a66a1a:  * bytes to the Blob value on the server.
1:1a66a1a:  * <p>
1:c720ff6:  * Closing a <code>BlobLocatorOutputStream</code> has no effect. The
1:c720ff6:  * methods in this class can be called after the stream has been
1:c720ff6:  * closed without generating an <code>IOException</code>.
1:1a66a1a:  * <p>
1:1a66a1a:  * This <code>OutputStream</code> implementation is pretty basic.  No
1:69e3d06:  * buffering of data is done.  Hence, for efficiency #write(byte[])
1:1a66a1a:  * should be used instead of #write(int).  
1:1a66a1a:  */
1:0326967: class BlobLocatorOutputStream extends OutputStream {
1:1a66a1a:     
1:1a66a1a:     /**
1:1a66a1a:      * Create an <code>OutputStream</code> for writing to the
1:1a66a1a:      * <code>Blob</code> value represented by the given locator based
1:1a66a1a:      * <code>Blob</code> object.
1:1a66a1a:      * @param connection connection to be used to write to the
1:1a66a1a:      *        <code>Blob</code> value on the server
1:1a66a1a:      * @param blob <code>Blob</code> object that contains locator for
1:1a66a1a:      *        the <code>Blob</code> value on the server.
1:1a66a1a:      * @param pos the position in the <code>BLOB</code> value at which
1:1a66a1a:      *        to start writing; the first position is 1
1:1a66a1a:      */
1:0326967:     BlobLocatorOutputStream(
1:69e3d06:         ClientConnection connection,
1:69e3d06:         ClientBlob blob,
1:69e3d06:         long pos) throws SqlException {
1:69e3d06: 
1:05d610e:         if (SanityManager.DEBUG) {
1:05d610e:             SanityManager.ASSERT(blob.isLocator());
3:1a66a1a:         }
1:1a66a1a: 
1:1a66a1a:         if (pos-1 > blob.sqlLength()) {
2:1a66a1a:             throw new IndexOutOfBoundsException();
1:c720ff6:         }
1:1a66a1a:         
1:1a66a1a:         this.connection = connection;
1:1a66a1a:         this.blob = blob;
1:1a66a1a:         this.currentPos = pos;
1:1a66a1a:     }
1:1a66a1a: 
1:1a66a1a:     /**
1:1a66a1a:      * @see java.io.OutputStream#write(int)
1:1a66a1a:      *
1:1a66a1a:      * This method writes one byte at a time to the server. For more 
1:1a66a1a:      * efficient writing, use #write(byte[]).
1:1a66a1a:      */
1:1a66a1a:     public void write(int b) throws IOException            
3:1a66a1a:     {
1:1a66a1a:         byte[] ba = {(byte )b};
2:1a66a1a:         writeBytes(ba);
1:1a66a1a:     }
1:1a66a1a: 
1:1a66a1a:     /**
1:1a66a1a:      * @see java.io.OutputStream#write(byte[])
1:1a66a1a:      */
1:1a66a1a:     public void write(byte[] b) throws IOException 
1:1a66a1a:     {
1:1a66a1a:         writeBytes(b);
1:1a66a1a:     }
1:1a66a1a:     
1:1a66a1a:     
1:1a66a1a:     
1:1a66a1a:     /**
1:1a66a1a:      * @see java.io.OutputStream#write(byte[], int, int)
1:1a66a1a:      */
1:1a66a1a:     public void write(byte[] b, int off, int len) throws IOException 
1:c720ff6:     {
1:c720ff6:         if (len == 0) return;
1:c720ff6:         if ((off < 0) || (off > b.length) || (len < 0) || 
1:c720ff6:             (off+len > b.length) || (off+len < 0)) {
1:c720ff6:             throw new IndexOutOfBoundsException();
1:c720ff6:         } 
1:c720ff6:         
1:c720ff6:         byte[] ba = b;
1:c720ff6:         if ((off > 0) || (len < b.length)) { // Copy the part we will use
1:c720ff6:             ba = new byte[len];
1:c720ff6:             System.arraycopy(b, off, ba, 0, len);
1:1a66a1a:         }
1:c720ff6:         writeBytes(ba);
1:1a66a1a:     }
1:c720ff6: 
1:1a66a1a:     /**
1:1a66a1a:      * Write the <code>byte[]</code> to the <code>Blob</code> value on
1:1a66a1a:      * the server; starting from the current position of this stream.
1:1a66a1a:      * 
1:1a66a1a:      * @param b The byte array containing the bytes to be written
1:1a66a1a:      * @throws java.io.IOException Wrapped SqlException if writing
1:1a66a1a:      *         to server fails.
1:c720ff6:      */
1:1a66a1a:     private void writeBytes(byte[] b) throws IOException
1:1a66a1a:     {
1:1a66a1a:         try {         
1:a8908bd:             blob.setBytesX(currentPos, b, 0, b.length);
1:1a66a1a:             currentPos += b.length;
1:c720ff6:         } catch (SqlException ex) {
1:1a66a1a:             IOException ioEx= new IOException();
1:1a66a1a:             ioEx.initCause(ex);
1:1a66a1a:             throw ioEx;
1:1a66a1a:         }
1:1a66a1a:     }
1:1a66a1a:     
1:1a66a1a:     /**
1:1a66a1a:      * Connection used to read Blob from server.
1:1a66a1a:      */
1:69e3d06:     private final ClientConnection connection;
1:c720ff6: 
1:1a66a1a:     /**
1:1a66a1a:      * The Blob to be accessed.
1:1a66a1a:      */
1:69e3d06:     private final ClientBlob blob;
1:1a66a1a: 
1:1a66a1a:     /**
1:1a66a1a:      * Current position in the underlying Blob.
1:1a66a1a:      * Blobs are indexed from 1
1:1a66a1a:      */
1:1a66a1a:     private long currentPos;
1:c720ff6: 
1:1a66a1a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class BlobLocatorOutputStream extends OutputStream {
/////////////////////////////////////////////////////////////////////////
1:     BlobLocatorOutputStream(
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStream;
/////////////////////////////////////////////////////////////////////////
1:  * buffering of data is done.  Hence, for efficiency #write(byte[])
0: public class BlobLocatorOutputStream extends OutputStream {
/////////////////////////////////////////////////////////////////////////
0:     public BlobLocatorOutputStream(
1:         ClientConnection connection,
1:         ClientBlob blob,
1:         long pos) throws SqlException {
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final ClientConnection connection;
1:     private final ClientBlob blob;
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1:             blob.setBytesX(currentPos, b, 0, b.length);
commit:c720ff6
/////////////////////////////////////////////////////////////////////////
1:  * Closing a <code>BlobLocatorOutputStream</code> has no effect. The
1:  * methods in this class can be called after the stream has been
1:  * closed without generating an <code>IOException</code>.
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1:     {
1:         if (len == 0) return;
1:         if ((off < 0) || (off > b.length) || (len < 0) || 
1:             (off+len > b.length) || (off+len < 0)) {
1:             throw new IndexOutOfBoundsException();
1:         } 
1:         
1:         byte[] ba = b;
1:         if ((off > 0) || (len < b.length)) { // Copy the part we will use
1:             ba = new byte[len];
1:             System.arraycopy(b, off, ba, 0, len);
1:         writeBytes(ba);
1: 
/////////////////////////////////////////////////////////////////////////
1:      */
/////////////////////////////////////////////////////////////////////////
1:         } catch (SqlException ex) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:1a66a1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.BlobLocatorOutputStream
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:      http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: import java.io.IOException;
1: 
1: /**
1:  * An <code>OutputStream</code> that will use an locator to write
1:  * bytes to the Blob value on the server.
1:  * <p>
0:  * Closing a <code>ByteArrayInputStream</code> has no effect. The methods in
0:  * this class can be called after the stream has been closed without
0:  * generating an <code>IOException</code>.
1:  * <p>
1:  * This <code>OutputStream</code> implementation is pretty basic.  No
0:  * buffering of data is done.  Hence, for efficieny #write(byte[])
1:  * should be used instead of #write(int).  
1:  */
0: public class BlobLocatorOutputStream extends java.io.OutputStream {
1:     
1:     /**
1:      * Create an <code>OutputStream</code> for writing to the
1:      * <code>Blob</code> value represented by the given locator based
1:      * <code>Blob</code> object.
1:      * @param connection connection to be used to write to the
1:      *        <code>Blob</code> value on the server
1:      * @param blob <code>Blob</code> object that contains locator for
1:      *        the <code>Blob</code> value on the server.
1:      * @param pos the position in the <code>BLOB</code> value at which
1:      *        to start writing; the first position is 1
0:      * @throws org.apache.derby.client.am.SqlException 
1:      */
0:     public BlobLocatorOutputStream(Connection connection, Blob blob, long pos)
0:         throws SqlException
1:     {
1:         if (pos-1 > blob.sqlLength()) {
1:             throw new IndexOutOfBoundsException();
1:        }
1:         
1:         this.connection = connection;
1:         this.blob = blob;
1:         this.currentPos = pos;
1:     }
1: 
1:     /**
1:      * @see java.io.OutputStream#write(int)
1:      *
1:      * This method writes one byte at a time to the server. For more 
1:      * efficient writing, use #write(byte[]).
1:      */
1:     public void write(int b) throws IOException            
1:     {
1:         byte[] ba = {(byte )b};
1:         writeBytes(ba);
1:     }
1: 
1:     /**
1:      * @see java.io.OutputStream#write(byte[])
1:      */
1:     public void write(byte[] b) throws IOException 
1:     {
1:         writeBytes(b);
1:     }
1:     
1:     
1:     
1:     /**
1:      * @see java.io.OutputStream#write(byte[], int, int)
1:      */
1:     public void write(byte[] b, int off, int len) throws IOException 
1:    {
0:          if (len == 0) return;
0:          if ((off < 0) || (off > b.length) || (len < 0) || 
0:                  (off+len > b.length) || (off+len < 0)) {
1:              throw new IndexOutOfBoundsException();
1:          } 
1:          
0:          byte[] ba = b;
0:          if ((off > 0) || (len < b.length)) { // Copy the part we will use
0:              ba = new byte[len];
0:              System.arraycopy(b, off, ba, 0, len);
1:         }
1:          writeBytes(ba);
1:     }
1:  
1:     /**
1:      * Write the <code>byte[]</code> to the <code>Blob</code> value on
1:      * the server; starting from the current position of this stream.
1:      * 
1:      * @param b The byte array containing the bytes to be written
1:      * @throws java.io.IOException Wrapped SqlException if writing
1:      *         to server fails.
1:     */
1:     private void writeBytes(byte[] b) throws IOException
1:     {
1:         try {         
0:             connection.locatorProcedureCall()
0:                 .blobSetBytes(blob.locator_, currentPos, b.length, b);
1:             currentPos += b.length;
0:             if (currentPos-1 > blob.sqlLength()) {
0:                 // Wrote past the old end of the Blob value, update length
0:                 blob.setSqlLength(currentPos - 1);
1:             }
0:        } catch (SqlException ex) {
1:             IOException ioEx= new IOException();
1:             ioEx.initCause(ex);
1:             throw ioEx;
1:         }
1:     }
1:     
1:     /**
1:      * Connection used to read Blob from server.
1:      */
0:     private Connection connection;
1:    
1:     /**
1:      * The Blob to be accessed.
1:      */
0:     private Blob blob;
1: 
1:     /**
1:      * Current position in the underlying Blob.
1:      * Blobs are indexed from 1
1:      */
1:     private long currentPos;
1:  
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d6844ab
/////////////////////////////////////////////////////////////////////////
0:     private final Connection connection;
0:     private final Blob blob;
commit:05d610e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
0: 
/////////////////////////////////////////////////////////////////////////
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(blob.isLocator());
0:         }
0: 
============================================================================