1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.Node
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.impl.sql.execute.RowUtil; 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A node in a balanced binary tree.  This class is effectively a
1:eac0369: 	struct to the balanced tree class.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: final class Node
1:eac0369: {
1:eac0369: 	public int balance;
1:eac0369: 	public Node leftLink;
1:eac0369: 	public Node rightLink;
1:eac0369: 	public DataValueDescriptor[] key;
1:eac0369: 	public int id;
1:eac0369: 	public Node dupChain;
1:eac0369: 	public int aux;
1:eac0369: 
1:eac0369: 	public Node(int id)
1:eac0369: 	{
1:eac0369: 		this.id = id;
1:eac0369: 		reset();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void reset()
1:eac0369: 	{
1:eac0369: 		balance = 0;
1:eac0369: 		leftLink = null;
1:eac0369: 		rightLink = null;
1:eac0369: 		key = null;
1:eac0369: 		dupChain = null;
1:eac0369: 		aux = 0;
1:eac0369: 		// Leave id alone
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Node link(int which)
1:eac0369: 	{
1:eac0369: 		if (which < 0)
1:eac0369: 			return leftLink;
1:eac0369: 		else
1:eac0369: 			return rightLink;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void setLink(int which, Node l)
1:eac0369: 	{
1:eac0369: 		if (which < 0)
1:eac0369: 			leftLink = l;
1:eac0369: 		else
1:eac0369: 			rightLink = l;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	DataValueDescriptor[] getKey()
1:eac0369: 	{
1:eac0369: 		return key;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:         {
1:eac0369:             int lid = (leftLink == null) ? -1 : leftLink.id;
1:eac0369:             int rid = (rightLink == null) ? -1 : rightLink.id;
1:eac0369:             int did = (dupChain == null) ? -1 : dupChain.id;
1:eac0369:             return "{" 
1:eac0369:                 + " id=" + id
1:eac0369:                 + " key=" + RowUtil.toString(key) 
1:eac0369:                 + " left=" + lid
1:eac0369:                 + " right=" + rid
1:eac0369:                 + " balance=" + balance
1:eac0369:                 + " dupChain=" + did
1:eac0369:                 + " aux= " + aux
1:eac0369:                 + " }";
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             return(null);
1:eac0369:         }
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.Node
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.impl.sql.execute.RowUtil; 
1: 
1: /**
1: 	A node in a balanced binary tree.  This class is effectively a
1: 	struct to the balanced tree class.
1: 
1: **/
1: 
1: final class Node
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	public int balance;
1: 	public Node leftLink;
1: 	public Node rightLink;
1: 	public DataValueDescriptor[] key;
1: 	public int id;
1: 	public Node dupChain;
1: 	public int aux;
1: 
1: 	public Node(int id)
1: 	{
1: 		this.id = id;
1: 		reset();
1: 	}
1: 
1: 	public void reset()
1: 	{
1: 		balance = 0;
1: 		leftLink = null;
1: 		rightLink = null;
1: 		key = null;
1: 		dupChain = null;
1: 		aux = 0;
1: 		// Leave id alone
1: 	}
1: 
1: 	public Node link(int which)
1: 	{
1: 		if (which < 0)
1: 			return leftLink;
1: 		else
1: 			return rightLink;
1: 	}
1: 
1: 	public void setLink(int which, Node l)
1: 	{
1: 		if (which < 0)
1: 			leftLink = l;
1: 		else
1: 			rightLink = l;
1: 	}
1: 
1: 	DataValueDescriptor[] getKey()
1: 	{
1: 		return key;
1: 	}
1: 
1: 	public String toString()
1: 	{
1:         if (SanityManager.DEBUG)
1:         {
1:             int lid = (leftLink == null) ? -1 : leftLink.id;
1:             int rid = (rightLink == null) ? -1 : rightLink.id;
1:             int did = (dupChain == null) ? -1 : dupChain.id;
1:             return "{" 
1:                 + " id=" + id
1:                 + " key=" + RowUtil.toString(key) 
1:                 + " left=" + lid
1:                 + " right=" + rid
1:                 + " balance=" + balance
1:                 + " dupChain=" + did
1:                 + " aux= " + aux
1:                 + " }";
1:         }
1:         else
1:         {
1:             return(null);
1:         }
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.impl.sql.execute.RowUtil; 
0: 
0: /**
0: 	A node in a balanced binary tree.  This class is effectively a
0: 	struct to the balanced tree class.
0: 
0: **/
0: 
0: final class Node
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	public int balance;
0: 	public Node leftLink;
0: 	public Node rightLink;
0: 	public DataValueDescriptor[] key;
0: 	public int id;
0: 	public Node dupChain;
0: 	public int aux;
0: 
0: 	public Node(int id)
0: 	{
0: 		this.id = id;
0: 		reset();
0: 	}
0: 
0: 	public void reset()
0: 	{
0: 		balance = 0;
0: 		leftLink = null;
0: 		rightLink = null;
0: 		key = null;
0: 		dupChain = null;
0: 		aux = 0;
0: 		// Leave id alone
0: 	}
0: 
0: 	public Node link(int which)
0: 	{
0: 		if (which < 0)
0: 			return leftLink;
0: 		else
0: 			return rightLink;
0: 	}
0: 
0: 	public void setLink(int which, Node l)
0: 	{
0: 		if (which < 0)
0: 			leftLink = l;
0: 		else
0: 			rightLink = l;
0: 	}
0: 
0: 	DataValueDescriptor[] getKey()
0: 	{
0: 		return key;
0: 	}
0: 
0: 	public String toString()
0: 	{
0:         if (SanityManager.DEBUG)
0:         {
0:             int lid = (leftLink == null) ? -1 : leftLink.id;
0:             int rid = (rightLink == null) ? -1 : rightLink.id;
0:             int did = (dupChain == null) ? -1 : dupChain.id;
0:             return "{" 
0:                 + " id=" + id
0:                 + " key=" + RowUtil.toString(key) 
0:                 + " left=" + lid
0:                 + " right=" + rid
0:                 + " balance=" + balance
0:                 + " dupChain=" + did
0:                 + " aux= " + aux
0:                 + " }";
0:         }
0:         else
0:         {
0:             return(null);
0:         }
0: 	}
0: }
============================================================================