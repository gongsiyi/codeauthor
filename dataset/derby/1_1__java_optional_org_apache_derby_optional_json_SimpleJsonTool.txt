1:2c38f3c: /*
3:2c38f3c: 
1:2c38f3c:    Derby - Class org.apache.derby.optional.json.SimpleJsonTool
1:2c38f3c: 
1:2c38f3c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2c38f3c:    contributor license agreements.  See the NOTICE file distributed with
1:2c38f3c:    this work for additional information regarding copyright ownership.
1:2c38f3c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2c38f3c:    (the "License"); you may not use this file except in compliance with
1:2c38f3c:    the License.  You may obtain a copy of the License at
1:2c38f3c: 
1:2c38f3c:       http://www.apache.org/licenses/LICENSE-2.0
1:2c38f3c: 
1:2c38f3c:    Unless required by applicable law or agreed to in writing, software
1:2c38f3c:    distributed under the License is distributed on an "AS IS" BASIS,
1:2c38f3c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2c38f3c:    See the License for the specific language governing permissions and
1:2c38f3c:    limitations under the License.
1:2c38f3c: 
1:2c38f3c:  */
1:2c38f3c: 
1:2c38f3c: package org.apache.derby.optional.json;
1:2c38f3c: 
1:2c38f3c: import java.sql.Connection;
1:2c38f3c: import java.sql.DatabaseMetaData;
1:2c38f3c: import java.sql.DriverManager;
1:2c38f3c: import java.sql.PreparedStatement;
1:2c38f3c: import java.sql.ResultSet;
1:2c38f3c: import java.sql.SQLException;
1:2c38f3c: 
1:2c38f3c: import org.json.simple.JSONArray;
1:2c38f3c: 
1:2c38f3c: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1:2c38f3c: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1:2c38f3c: import org.apache.derby.iapi.util.IdUtil;
1:2c38f3c: import org.apache.derby.iapi.util.StringUtil;
1:2c38f3c: import org.apache.derby.optional.api.SimpleJsonUtils;
1:6b8ad38: import org.apache.derby.optional.utils.ToolUtilities;
1:2c38f3c: 
1:2c38f3c: /**
1:2c38f3c:  * <p>
1:4394bdd:  * OptionalTool which adds support types and functions for
1:4394bdd:  * using the JSON.simple toolkit at https://code.google.com/p/json-simple/.
1:4394bdd:  * Creates the following schema objects in the current schema:
1:2c38f3c:  * </p>
1:4394bdd:  *
1:4394bdd:  * <ul>
1:4394bdd:  * <li><b>JSONArray</b> - A UDT bound to the JSON.simple JSONArray class.</li>
1:4394bdd:  * <li><b>toJSON</b> - A function for packaging up query results as a
1:4394bdd:  * JSONArray. Each cell in the array is a row. Each row
1:4394bdd:  * has key/value pairs for all columns returned by the query.</li>
1:4394bdd:  * <li><b>readArrayFromString</b> - A function which turns a JSON document
1:4394bdd:  * string into a JSONArray.</li>
1:4394bdd:  * <li><b>readArrayFromFile</b> - A function which reads a file containing a
1:4394bdd:  * JSON document and turns it into a JSONArray.</li>
1:4394bdd:  * <li><b>readArrayFromURL</b> - A function which reads a JSON document from an
1:4394bdd:  * URL address and turns it into a JSONArray.</li>
1:4394bdd:  * </ul>
1:2c38f3c:  */
1:2c38f3c: public	class   SimpleJsonTool  implements OptionalTool
1:2c38f3c: {
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //	CONSTANTS
1:2c38f3c:     //
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:4394bdd:     private FunctionDescriptor[]    _functionDescriptors =
1:4394bdd:     {
1:4394bdd:         new FunctionDescriptor
1:4394bdd:         (
1:4394bdd:             "toJSON",
1:4394bdd:             "create function toJSON" +
1:4394bdd:             "\n(" +
1:4394bdd:             "\n\tqueryString varchar( 32672 )," +
1:4394bdd:             "\n\tqueryArgs varchar( 32672 ) ..." +
1:4394bdd:             "\n)\nreturns JSONArray\n" +
1:4394bdd:             "\nlanguage java parameter style derby reads sql data" +
1:4394bdd:             "\nexternal name 'org.apache.derby.optional.json.SimpleJsonTool.toJSON'\n"
1:4394bdd:         ),
1:4394bdd: 
1:4394bdd:         new FunctionDescriptor
1:4394bdd:         (
1:4394bdd:             "readArrayFromString",
1:4394bdd:             "create function readArrayFromString( document varchar( 32672 ) )\n" +
1:4394bdd:             "returns JSONArray\n" +
1:4394bdd:             "language java parameter style java contains sql\n" +
1:4394bdd:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.readArrayFromString'\n"
1:4394bdd:         ),
1:4394bdd: 
1:4394bdd:         new FunctionDescriptor
1:4394bdd:         (
1:4394bdd:             "readArrayFromFile",
1:4394bdd:             "create function readArrayFromFile\n" +
1:4394bdd:             "( fileName varchar( 32672 ), characterSetName varchar( 100 ) )\n" +
1:4394bdd:             "returns JSONArray\n" +
1:4394bdd:             "language java parameter style java contains sql\n" +
1:4394bdd:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.readArrayFromFile'\n"
1:4394bdd:         ),
1:4394bdd: 
1:4394bdd:         new FunctionDescriptor
1:4394bdd:         (
1:4394bdd:             "readArrayFromURL",
1:4394bdd:             "create function readArrayFromURL\n" +
1:4394bdd:             "( urlString varchar( 32672 ), characterSetName varchar( 100 ) )\n" +
1:4394bdd:             "returns JSONArray\n" +
1:4394bdd:             "language java parameter style java contains sql\n" +
1:4394bdd:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.readArrayFromURL'\n"
1:4394bdd:         ),
1:961b0f4: 
1:961b0f4:         new FunctionDescriptor
1:961b0f4:         (
1:961b0f4:             "arrayToClob",
1:961b0f4:             "create function arrayToClob( jsonDocument JSONArray ) returns clob\n" +
1:961b0f4:             "language java parameter style java no sql\n" +
1:961b0f4:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.arrayToClob'"
1:961b0f4:         ),
1:4394bdd:     };
1:4394bdd: 
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //	STATE
1:2c38f3c:     //
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:4394bdd:     public static final class FunctionDescriptor
1:4394bdd:     {
1:4394bdd:         public final String functionName;
1:4394bdd:         public final String creationDDL;
1:4394bdd: 
1:4394bdd:         public FunctionDescriptor( String functionName, String creationDDL )
1:4394bdd:         {
1:4394bdd:             this.functionName = functionName;
1:4394bdd:             this.creationDDL = creationDDL;
1:4394bdd:         }
1:4394bdd:     }
1:4394bdd: 
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //	CONSTRUCTOR
1:2c38f3c:     //
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /** 0-arg constructor required by the OptionalTool contract */
1:2c38f3c:     public  SimpleJsonTool() {}
1:2c38f3c: 
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // OptionalTool BEHAVIOR
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /**
1:2c38f3c:      * <p>
1:2c38f3c:      * Binds a UDT to JSONArray and creates a function to turn a query result
1:2c38f3c:      * into a JSONArray. There are no parameters to this method.
1:2c38f3c:      * </p>
1:2c38f3c:      */
1:2c38f3c:     public  void    loadTool( String... configurationParameters )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         if ( (configurationParameters != null) && (configurationParameters.length != 0) )
1:2c38f3c:         {
1:2c38f3c:             throw wrap( LocalizedResource.getMessage( "OT_BadLoadUnloadArgs" ) );
1:2c38f3c:         }
1:2c38f3c: 
1:2c38f3c:         Connection          derbyConn = getDerbyConnection();
1:2c38f3c: 
1:2c38f3c:         createUDT( derbyConn );
1:4394bdd:         createFunctions( derbyConn );
1:6b8ad38:         
1:6b8ad38:         boolean sqlAuthorizationEnabled = ToolUtilities.sqlAuthorizationEnabled( derbyConn );
1:6b8ad38:         if ( sqlAuthorizationEnabled ) { grantPermissions( derbyConn ); }
1:6b8ad38:     }
1:6b8ad38: 
1:6b8ad38:     /**
1:6b8ad38:      * Grant permissions to use the newly loaded UDT and FUNCTIONs.
1:6b8ad38:      */
1:6b8ad38:     private void    grantPermissions( Connection conn )  throws SQLException
1:6b8ad38:     {
1:6b8ad38:         executeDDL( conn, "grant usage on type JSONArray to public" );
1:6b8ad38: 
1:6b8ad38:         for ( FunctionDescriptor desc : _functionDescriptors )
1:6b8ad38:         {
1:6b8ad38:             executeDDL( conn, "grant execute on function " + desc.functionName + " to public" );
1:6b8ad38:         }
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     /**
1:2c38f3c:      * <p>
1:2c38f3c:      * Removes the function and UDT created by loadTool().
1:2c38f3c:      * </p>
1:2c38f3c:      * </ul>
1:2c38f3c:      */
1:2c38f3c:     public  void    unloadTool( String... configurationParameters )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         if ( (configurationParameters != null) && (configurationParameters.length != 0) )
1:2c38f3c:         {
1:2c38f3c:             throw wrap( LocalizedResource.getMessage( "OT_BadLoadUnloadArgs" ) );
1:2c38f3c:         }
1:2c38f3c: 
1:2c38f3c:         Connection          derbyConn = getDerbyConnection();
1:2c38f3c: 
1:4394bdd:         dropFunctions( derbyConn );
1:2c38f3c:         dropUDT( derbyConn );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // SQL FUNCTIONS
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     /**
1:2c38f3c:      * <p>
1:2c38f3c:      * Compile a query (with optional ? parameters) and pack the results
1:2c38f3c:      * into a JSONArray. This is the entry point which the simpleJson
1:2c38f3c:      * tool binds to the function name "toJSON".
1:2c38f3c:      * </p>
1:2c38f3c:      */
1:2c38f3c:     public  static  JSONArray   toJSON
1:2c38f3c:         (
1:2c38f3c:          String queryString,
1:2c38f3c:          String... queryArgs
1:2c38f3c:          )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         PreparedStatement   ps = null;
1:2c38f3c: 
1:2c38f3c:         try {
1:2c38f3c:             Connection  conn = getDerbyConnection();
1:2c38f3c:             
1:2c38f3c:             ps = conn.prepareStatement( queryString );
1:2c38f3c: 
1:2c38f3c:             if ( queryArgs != null )
1:2c38f3c:             {
1:2c38f3c:                 for ( int i = 0; i < queryArgs.length; i++  )
1:2c38f3c:                 {
1:2c38f3c:                     ps.setString( i + 1, queryArgs[ i ] );
1:2c38f3c:                 }
1:2c38f3c:             }
1:2c38f3c: 
1:2c38f3c:             ResultSet   rs = ps.executeQuery();
1:2c38f3c: 
1:2c38f3c:             return SimpleJsonUtils.toJSON( rs );
1:2c38f3c:         }
1:2c38f3c:         finally
1:2c38f3c:         {
1:2c38f3c:             if ( ps != null )
1:2c38f3c:             {
1:2c38f3c:                 ps.close();
1:2c38f3c:             }
1:2c38f3c:         }
1:2c38f3c:     }
1:2c38f3c:     
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     // (UN)REGISTRATION MINIONS
1:2c38f3c:     //
1:2c38f3c:     ///////////////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     private void    createUDT
1:2c38f3c:         (
1:2c38f3c:          Connection     derbyConn
1:2c38f3c:         )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
3:2c38f3c:         String  createString =
1:2c38f3c:             "create type JSONArray external name 'org.json.simple.JSONArray' language java";
1:2c38f3c:         
3:2c38f3c:         executeDDL( derbyConn, createString );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private void    dropUDT
1:2c38f3c:         (
1:2c38f3c:          Connection     derbyConn
1:2c38f3c:         )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         String  createString =
1:2c38f3c:             "drop type JSONArray restrict";
1:2c38f3c:         
1:2c38f3c:         executeDDL( derbyConn, createString );
1:2c38f3c:     }
1:2c38f3c: 
1:4394bdd:     private void    createFunctions
1:2c38f3c:         (
1:2c38f3c:          Connection     derbyConn
1:2c38f3c:         )
1:2c38f3c:         throws SQLException
1:4394bdd:     {
1:4394bdd:         for ( FunctionDescriptor desc : _functionDescriptors )
1:2c38f3c:         {
1:4394bdd:             executeDDL( derbyConn, desc.creationDDL );
1:4394bdd:         }
1:2c38f3c:     }
1:2c38f3c: 
1:4394bdd:     private void    dropFunctions
1:2c38f3c:         (
1:2c38f3c:          Connection     derbyConn
1:2c38f3c:         )
1:2c38f3c:         throws SQLException
1:4394bdd:     {
1:4394bdd:         for ( FunctionDescriptor desc : _functionDescriptors )
1:2c38f3c:         {
1:4394bdd:             String              dropString = "drop function " + desc.functionName;
1:4394bdd: 
1:4394bdd:             executeDDL( derbyConn, dropString );
1:4394bdd:         }
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c:     //
1:2c38f3c:     //	SQL MINIONS
1:2c38f3c:     //
1:2c38f3c:     ////////////////////////////////////////////////////////////////////////
1:2c38f3c: 
1:2c38f3c:     private void    executeDDL
1:2c38f3c:         ( Connection conn, String text )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         PreparedStatement   ddl = prepareStatement( conn, text );
1:2c38f3c:         ddl.execute();
1:2c38f3c:         ddl.close();
1:2c38f3c:     }
1:2c38f3c:     
1:2c38f3c:     private PreparedStatement   prepareStatement
1:2c38f3c:         ( Connection conn, String text )
1:2c38f3c:         throws SQLException
1:2c38f3c:     {
1:2c38f3c:         return conn.prepareStatement( text );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private SQLException    wrap( String errorMessage )
1:2c38f3c:     {
1:2c38f3c:         String  sqlState = org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring( 0, 5 );
1:2c38f3c: 
1:2c38f3c:         return new SQLException( errorMessage, sqlState );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c:     private static  Connection  getDerbyConnection() throws SQLException
1:2c38f3c:     {
1:2c38f3c:         return DriverManager.getConnection( "jdbc:default:connection" );
1:2c38f3c:     }
1:2c38f3c: 
1:2c38f3c: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:961b0f4
/////////////////////////////////////////////////////////////////////////
1: 
1:         new FunctionDescriptor
1:         (
1:             "arrayToClob",
1:             "create function arrayToClob( jsonDocument JSONArray ) returns clob\n" +
1:             "language java parameter style java no sql\n" +
1:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.arrayToClob'"
1:         ),
commit:6b8ad38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.optional.utils.ToolUtilities;
/////////////////////////////////////////////////////////////////////////
1:         
1:         boolean sqlAuthorizationEnabled = ToolUtilities.sqlAuthorizationEnabled( derbyConn );
1:         if ( sqlAuthorizationEnabled ) { grantPermissions( derbyConn ); }
1:     }
1: 
1:     /**
1:      * Grant permissions to use the newly loaded UDT and FUNCTIONs.
1:      */
1:     private void    grantPermissions( Connection conn )  throws SQLException
1:     {
1:         executeDDL( conn, "grant usage on type JSONArray to public" );
1: 
1:         for ( FunctionDescriptor desc : _functionDescriptors )
1:         {
1:             executeDDL( conn, "grant execute on function " + desc.functionName + " to public" );
1:         }
commit:4394bdd
/////////////////////////////////////////////////////////////////////////
1:  * OptionalTool which adds support types and functions for
1:  * using the JSON.simple toolkit at https://code.google.com/p/json-simple/.
1:  * Creates the following schema objects in the current schema:
1:  *
1:  * <ul>
1:  * <li><b>JSONArray</b> - A UDT bound to the JSON.simple JSONArray class.</li>
1:  * <li><b>toJSON</b> - A function for packaging up query results as a
1:  * JSONArray. Each cell in the array is a row. Each row
1:  * has key/value pairs for all columns returned by the query.</li>
1:  * <li><b>readArrayFromString</b> - A function which turns a JSON document
1:  * string into a JSONArray.</li>
1:  * <li><b>readArrayFromFile</b> - A function which reads a file containing a
1:  * JSON document and turns it into a JSONArray.</li>
1:  * <li><b>readArrayFromURL</b> - A function which reads a JSON document from an
1:  * URL address and turns it into a JSONArray.</li>
1:  * </ul>
/////////////////////////////////////////////////////////////////////////
1:     private FunctionDescriptor[]    _functionDescriptors =
1:     {
1:         new FunctionDescriptor
1:         (
1:             "toJSON",
1:             "create function toJSON" +
1:             "\n(" +
1:             "\n\tqueryString varchar( 32672 )," +
1:             "\n\tqueryArgs varchar( 32672 ) ..." +
1:             "\n)\nreturns JSONArray\n" +
1:             "\nlanguage java parameter style derby reads sql data" +
1:             "\nexternal name 'org.apache.derby.optional.json.SimpleJsonTool.toJSON'\n"
1:         ),
1: 
1:         new FunctionDescriptor
1:         (
1:             "readArrayFromString",
1:             "create function readArrayFromString( document varchar( 32672 ) )\n" +
1:             "returns JSONArray\n" +
1:             "language java parameter style java contains sql\n" +
1:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.readArrayFromString'\n"
1:         ),
1: 
1:         new FunctionDescriptor
1:         (
1:             "readArrayFromFile",
1:             "create function readArrayFromFile\n" +
1:             "( fileName varchar( 32672 ), characterSetName varchar( 100 ) )\n" +
1:             "returns JSONArray\n" +
1:             "language java parameter style java contains sql\n" +
1:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.readArrayFromFile'\n"
1:         ),
1: 
1:         new FunctionDescriptor
1:         (
1:             "readArrayFromURL",
1:             "create function readArrayFromURL\n" +
1:             "( urlString varchar( 32672 ), characterSetName varchar( 100 ) )\n" +
1:             "returns JSONArray\n" +
1:             "language java parameter style java contains sql\n" +
1:             "external name 'org.apache.derby.optional.api.SimpleJsonUtils.readArrayFromURL'\n"
1:         ),
1:     };
1: 
1:     public static final class FunctionDescriptor
1:     {
1:         public final String functionName;
1:         public final String creationDDL;
1: 
1:         public FunctionDescriptor( String functionName, String creationDDL )
1:         {
1:             this.functionName = functionName;
1:             this.creationDDL = creationDDL;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         createFunctions( derbyConn );
/////////////////////////////////////////////////////////////////////////
1:         dropFunctions( derbyConn );
/////////////////////////////////////////////////////////////////////////
1:     private void    createFunctions
1:         for ( FunctionDescriptor desc : _functionDescriptors )
1:         {
1:             executeDDL( derbyConn, desc.creationDDL );
1:         }
1:     private void    dropFunctions
1:         for ( FunctionDescriptor desc : _functionDescriptors )
1:         {
1:             String              dropString = "drop function " + desc.functionName;
1: 
1:             executeDDL( derbyConn, dropString );
1:         }
commit:2c38f3c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.optional.json.SimpleJsonTool
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.optional.json;
1: 
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import org.json.simple.JSONArray;
1: 
1: import org.apache.derby.iapi.sql.dictionary.OptionalTool;
1: import org.apache.derby.iapi.tools.i18n.LocalizedResource;
1: import org.apache.derby.iapi.util.IdUtil;
1: import org.apache.derby.iapi.util.StringUtil;
1: import org.apache.derby.optional.api.SimpleJsonUtils;
1: 
1: /**
1:  * <p>
0:  * OptionalTool which adds a function for turning a query result
0:  * into a JSON array. Each cell in the array is a row. Each row
0:  * has key/value pairs for all columns returned by the query.
0:  * This tool binds a user-defined type to the simple-json JSONArray
0:  * class.
1:  * </p>
1:  */
1: public	class   SimpleJsonTool  implements OptionalTool
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	STATE
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     /** 0-arg constructor required by the OptionalTool contract */
1:     public  SimpleJsonTool() {}
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OptionalTool BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Binds a UDT to JSONArray and creates a function to turn a query result
1:      * into a JSONArray. There are no parameters to this method.
1:      * </p>
1:      */
1:     public  void    loadTool( String... configurationParameters )
1:         throws SQLException
1:     {
1:         if ( (configurationParameters != null) && (configurationParameters.length != 0) )
1:         {
1:             throw wrap( LocalizedResource.getMessage( "OT_BadLoadUnloadArgs" ) );
1:         }
1: 
1:         Connection          derbyConn = getDerbyConnection();
1: 
1:         createUDT( derbyConn );
0:         createFunction( derbyConn );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Removes the function and UDT created by loadTool().
1:      * </p>
1:      * </ul>
1:      */
1:     public  void    unloadTool( String... configurationParameters )
1:         throws SQLException
1:     {
1:         if ( (configurationParameters != null) && (configurationParameters.length != 0) )
1:         {
1:             throw wrap( LocalizedResource.getMessage( "OT_BadLoadUnloadArgs" ) );
1:         }
1: 
1:         Connection          derbyConn = getDerbyConnection();
1: 
0:         dropFunction( derbyConn );
1:         dropUDT( derbyConn );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // SQL FUNCTIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Compile a query (with optional ? parameters) and pack the results
1:      * into a JSONArray. This is the entry point which the simpleJson
1:      * tool binds to the function name "toJSON".
1:      * </p>
1:      */
1:     public  static  JSONArray   toJSON
1:         (
1:          String queryString,
1:          String... queryArgs
1:          )
1:         throws SQLException
1:     {
1:         PreparedStatement   ps = null;
1: 
1:         try {
1:             Connection  conn = getDerbyConnection();
1:             
1:             ps = conn.prepareStatement( queryString );
1: 
1:             if ( queryArgs != null )
1:             {
1:                 for ( int i = 0; i < queryArgs.length; i++  )
1:                 {
1:                     ps.setString( i + 1, queryArgs[ i ] );
1:                 }
1:             }
1: 
1:             ResultSet   rs = ps.executeQuery();
1: 
1:             return SimpleJsonUtils.toJSON( rs );
1:         }
1:         finally
1:         {
1:             if ( ps != null )
1:             {
1:                 ps.close();
1:             }
1:         }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // (UN)REGISTRATION MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private void    createUDT
1:         (
1:          Connection     derbyConn
1:         )
1:         throws SQLException
1:     {
1:         String  createString =
1:             "create type JSONArray external name 'org.json.simple.JSONArray' language java";
1:         
1:         executeDDL( derbyConn, createString );
1:     }
1: 
1:     private void    dropUDT
1:         (
1:          Connection     derbyConn
1:         )
1:         throws SQLException
1:     {
1:         String  createString =
1:             "drop type JSONArray restrict";
1:         
1:         executeDDL( derbyConn, createString );
1:     }
1: 
0:     private void    createFunction
1:         (
1:          Connection     derbyConn
1:         )
1:         throws SQLException
1:     {
1:         String  createString =
0:             "create function toJSON" +
0:             "\n(" +
0:             "\n\tqueryString varchar( 32672 )," +
0:             "\n\tqueryArgs varchar( 32672 ) ..." +
0:             "\n)\nreturns JSONArray\n" +
0:             "\nlanguage java parameter style derby reads sql data" +
0:             "\nexternal name 'org.apache.derby.optional.json.SimpleJsonTool.toJSON'";
1: 
1:         executeDDL( derbyConn, createString );
1:     }
1: 
0:     private void    dropFunction
1:         (
1:          Connection     derbyConn
1:         )
1:         throws SQLException
1:     {
1:         String  createString =
0:             "drop function toJSON";
1:         
1:         executeDDL( derbyConn, createString );
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	SQL MINIONS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     private void    executeDDL
1:         ( Connection conn, String text )
1:         throws SQLException
1:     {
1:         PreparedStatement   ddl = prepareStatement( conn, text );
1:         ddl.execute();
1:         ddl.close();
1:     }
1:     
1:     private PreparedStatement   prepareStatement
1:         ( Connection conn, String text )
1:         throws SQLException
1:     {
1:         return conn.prepareStatement( text );
1:     }
1: 
1:     private SQLException    wrap( String errorMessage )
1:     {
1:         String  sqlState = org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring( 0, 5 );
1: 
1:         return new SQLException( errorMessage, sqlState );
1:     }
1: 
1:     private static  Connection  getDerbyConnection() throws SQLException
1:     {
1:         return DriverManager.getConnection( "jdbc:default:connection" );
1:     }
1: 
1: }
============================================================================