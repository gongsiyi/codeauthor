1:f4fc366: /*
2:f4fc366:  *
1:f4fc366:  * Derby - Class URCoveringIndexTest
1:f4fc366:  *
1:dff95a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  * contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  * this work for additional information regarding copyright ownership.
1:dff95a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  * (the "License"); you may not use this file except in compliance with
1:dff95a1:  * the License.  You may obtain a copy of the License at
1:f4fc366:  *
1:f4fc366:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f4fc366:  *
1:f4fc366:  * Unless required by applicable law or agreed to in writing, 
1:f4fc366:  * software distributed under the License is distributed on an 
1:f4fc366:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:f4fc366:  * either express or implied. See the License for the specific 
1:f4fc366:  * language governing permissions and limitations under the License.
2:f4fc366:  */
1:f4fc366: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:f4fc366: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:3bd1dd8: import org.apache.derbyTesting.junit.JDBC;
1:985662b: import org.apache.derbyTesting.junit.TestConfiguration;
1:3bd1dd8: 
1:f4fc366: import junit.framework.*;
1:f4fc366: import java.sql.*;
5:f4fc366: 
2:f4fc366: /**
1:f4fc366:  * Tests updatable result sets when there is a index that includes all data for 
1:f4fc366:  * the query (covering index).
1:f4fc366:  *
1:f4fc366:  * DERBY-1087
1:f4fc366:  *
1:f4fc366:  */
1:f4fc366: public class URCoveringIndexTest extends BaseJDBCTestCase {
1:f4fc366:     
1:985662b:     public static Test suite() {
1:985662b:         return TestConfiguration.defaultSuite(URCoveringIndexTest.class);
1:985662b:     }
1:985662b:     
1:f4fc366:     /** Creates a new instance of SURBaseTest */
1:f4fc366:     public URCoveringIndexTest(String name) {
1:f4fc366:         super(name);
3:f4fc366:     }
1:985662b:     
1:f4fc366: 
1:f4fc366:     /**
1:f4fc366:      * Set up the connection to the database.
1:f4fc366:      */
1:f4fc366:     public void setUp() throws  Exception {       
1:03a99e2:         Connection con = getConnection();
1:f4fc366:         con.setAutoCommit(false);
1:f4fc366: 
1:f4fc366:         String createTableWithPK = "CREATE TABLE tableWithPK (" +
1:f4fc366:                 "c1 int primary key," +
1:f4fc366:                 "c2 int)";
1:f4fc366:         String insertData = "INSERT INTO tableWithPK values (1, 1)";
1:f4fc366:         Statement stmt = con.createStatement();
1:f4fc366:         stmt.execute(createTableWithPK);
1:f4fc366:         
1:f4fc366:         stmt.execute(insertData);
1:a6464f2:         
1:a6464f2:         stmt.close();
1:f4fc366:     }
1:f4fc366:     
1:f4fc366:     private void testUpdateUpdatedTupleWithCoveringIndex(
1:f4fc366:             boolean scroll,
1:f4fc366:             boolean usePositionedUpdate) throws SQLException{
1:f4fc366:         
1:f4fc366:         SQLWarning w = null;
1:f4fc366:         int resultsetType = scroll ? ResultSet.TYPE_SCROLL_INSENSITIVE :
1:f4fc366:                 ResultSet.TYPE_FORWARD_ONLY;
1:ffe3f66:         
1:03a99e2:         Connection con = getConnection();
1:f4fc366:         
1:f4fc366:         if (!(con.getMetaData().supportsResultSetConcurrency(resultsetType,
1:f4fc366:                 ResultSet.CONCUR_UPDATABLE))) {
1:f4fc366:             return;
1:f4fc366:         }
1:f4fc366: 
1:f4fc366:             
1:f4fc366:         Statement updStmt = con.createStatement(resultsetType, 
1:f4fc366:                 ResultSet.CONCUR_UPDATABLE);
1:f4fc366:         Statement roStmt = con.createStatement();
1:f4fc366:         
1:f4fc366:         ResultSet rs = updStmt.executeQuery("SELECT c1 FROM tableWithPK");
1:f4fc366:         rs.next();
1:f4fc366:         int orig_c1 = rs.getInt(1);
1:f4fc366:         roStmt.executeUpdate("UPDATE tableWithPK SET c1 = " + 
1:f4fc366:                 (orig_c1 + 10) + "WHERE c1 = " + rs.getInt(1));
1:f4fc366:         rs.clearWarnings();
1:f4fc366:         if (usePositionedUpdate) {
1:f4fc366:             roStmt.executeUpdate("UPDATE tableWithPK set c1 = " + 
1:f4fc366:                     (orig_c1 + 20) + "WHERE CURRENT OF " + 
1:f4fc366:                     rs.getCursorName());
1:f4fc366:             w = roStmt.getWarnings();
1:f4fc366:         } else {
1:f4fc366:             rs.updateInt(1, (orig_c1 + 20));
1:f4fc366:             rs.updateRow();
1:f4fc366:             w = rs.getWarnings();
1:f4fc366:         }
1:00364eb:         JDBC.assertNoWarnings(w);
1:f4fc366:         rs.close();
1:f4fc366:         
1:f4fc366:         rs = roStmt.executeQuery("SELECT c1 FROM tableWithPK");
1:f4fc366:         rs.next();
1:f4fc366:         assertEquals("Expecting c1 to be " + orig_c1 + " + 20", 
1:f4fc366:                 rs.getInt(1), (orig_c1 + 20));
1:f4fc366:         rs.close();
1:f4fc366:         roStmt.close();
1:f4fc366:         updStmt.close();
1:f4fc366: 
1:f4fc366:     }
1:f4fc366: 
1:f4fc366:     /**
1:f4fc366:      * Updates a previously updated row with a covering index using positioned
1:f4fc366:      * updates and scrollable result sets.
1:f4fc366:      */
1:f4fc366:     public void testUpdateUpdatedTupleScrollPostitioned()  throws SQLException{
1:f4fc366:         testUpdateUpdatedTupleWithCoveringIndex(true, true);
1:f4fc366:     }
1:f4fc366: 
1:f4fc366:     /**
1:f4fc366:      * Updates a previously updated row with a covering index using updateRow
1:f4fc366:      * and scrollable result sets.
1:f4fc366:      */
1:f4fc366:     public void testUpdateUpdatedTupleScrollUpdateRow()  throws SQLException{
1:f4fc366:         testUpdateUpdatedTupleWithCoveringIndex(true, false);
1:f4fc366:     }
1:f4fc366: 
1:f4fc366:     /**
1:f4fc366:      * Updates a previously updated row with a covering index using positioned
1:f4fc366:      * updates and forward only result sets.
1:f4fc366:      */
1:f4fc366:     public void testUpdateUpdatedTupleFOPositioned()  throws SQLException{
1:f4fc366:         testUpdateUpdatedTupleWithCoveringIndex(false, true);
1:f4fc366:     }
1:f4fc366: 
1:f4fc366:     /**
1:f4fc366:      * Updates a previously updated row with a covering index using updateRow
1:f4fc366:      * and forward only result sets.
1:f4fc366:      */
1:f4fc366:     public void testUpdateUpdatedTupleFOUpdateRow()  throws SQLException{
1:f4fc366:         testUpdateUpdatedTupleWithCoveringIndex(false, false);
1:f4fc366:     }
1:f4fc366: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:00364eb
/////////////////////////////////////////////////////////////////////////
1:         JDBC.assertNoWarnings(w);
commit:985662b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(URCoveringIndexTest.class);
1:     }
1:     
1:     
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:         Connection con = getConnection();
/////////////////////////////////////////////////////////////////////////
1:         Connection con = getConnection();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: 
commit:ffe3f66
/////////////////////////////////////////////////////////////////////////
0:         Connection con = getXConnection();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Connection con = getXConnection();
1:         
/////////////////////////////////////////////////////////////////////////
commit:a6464f2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         
1:         stmt.close();
/////////////////////////////////////////////////////////////////////////
0:         JDBC.cleanup(con);
0:         con = null;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:f4fc366
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class URCoveringIndexTest
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: import junit.framework.*;
1: import java.sql.*;
1: 
1: /**
1:  * Tests updatable result sets when there is a index that includes all data for 
1:  * the query (covering index).
1:  *
1:  * DERBY-1087
1:  *
0:  * @author Fernanda Pizzorno
1:  */
1: public class URCoveringIndexTest extends BaseJDBCTestCase {
1:     
1:     /** Creates a new instance of SURBaseTest */
1:     public URCoveringIndexTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Set up the connection to the database.
1:      */
1:     public void setUp() throws  Exception {       
0:         con = getConnection();
1:         con.setAutoCommit(false);
1: 
1:         String createTableWithPK = "CREATE TABLE tableWithPK (" +
1:                 "c1 int primary key," +
1:                 "c2 int)";
1:         String insertData = "INSERT INTO tableWithPK values (1, 1)";
1:         Statement stmt = con.createStatement();
1:         stmt.execute(createTableWithPK);
1:         
1:         stmt.execute(insertData);
1:     }
1:     
1:     /**
0:      * Rollback the transaction
1:      */
0:     public void tearDown() throws Exception {
0:         println("TearDown");
0:         try { 
0:             con.rollback();
0:             con.close();
0:         } catch (SQLException e) {
0:             printStackTrace(e);
1:         }      
1:     }
1:     
1:     private void testUpdateUpdatedTupleWithCoveringIndex(
1:             boolean scroll,
1:             boolean usePositionedUpdate) throws SQLException{
1:         
1:         SQLWarning w = null;
1:         int resultsetType = scroll ? ResultSet.TYPE_SCROLL_INSENSITIVE :
1:                 ResultSet.TYPE_FORWARD_ONLY;
1:         
1:         if (!(con.getMetaData().supportsResultSetConcurrency(resultsetType,
1:                 ResultSet.CONCUR_UPDATABLE))) {
1:             return;
1:         }
1: 
1:             
1:         Statement updStmt = con.createStatement(resultsetType, 
1:                 ResultSet.CONCUR_UPDATABLE);
1:         Statement roStmt = con.createStatement();
1:         
1:         ResultSet rs = updStmt.executeQuery("SELECT c1 FROM tableWithPK");
1:         rs.next();
1:         int orig_c1 = rs.getInt(1);
1:         roStmt.executeUpdate("UPDATE tableWithPK SET c1 = " + 
1:                 (orig_c1 + 10) + "WHERE c1 = " + rs.getInt(1));
1:         rs.clearWarnings();
1:         if (usePositionedUpdate) {
1:             roStmt.executeUpdate("UPDATE tableWithPK set c1 = " + 
1:                     (orig_c1 + 20) + "WHERE CURRENT OF " + 
1:                     rs.getCursorName());
1:             w = roStmt.getWarnings();
1:         } else {
1:             rs.updateInt(1, (orig_c1 + 20));
1:             rs.updateRow();
1:             w = rs.getWarnings();
1:         }
0:         assertTrue("Update should not produce any warnings ", w == null);
1:         rs.close();
1:         
1:         rs = roStmt.executeQuery("SELECT c1 FROM tableWithPK");
1:         rs.next();
1:         assertEquals("Expecting c1 to be " + orig_c1 + " + 20", 
1:                 rs.getInt(1), (orig_c1 + 20));
1:         rs.close();
1:         roStmt.close();
1:         updStmt.close();
1: 
1:     }
1: 
1:     /**
1:      * Updates a previously updated row with a covering index using positioned
1:      * updates and scrollable result sets.
1:      */
1:     public void testUpdateUpdatedTupleScrollPostitioned()  throws SQLException{
1:         testUpdateUpdatedTupleWithCoveringIndex(true, true);
1:     }
1: 
1:     /**
1:      * Updates a previously updated row with a covering index using updateRow
1:      * and scrollable result sets.
1:      */
1:     public void testUpdateUpdatedTupleScrollUpdateRow()  throws SQLException{
1:         testUpdateUpdatedTupleWithCoveringIndex(true, false);
1:     }
1: 
1:     /**
1:      * Updates a previously updated row with a covering index using positioned
1:      * updates and forward only result sets.
1:      */
1:     public void testUpdateUpdatedTupleFOPositioned()  throws SQLException{
1:         testUpdateUpdatedTupleWithCoveringIndex(false, true);
1:     }
1: 
1:     /**
1:      * Updates a previously updated row with a covering index using updateRow
1:      * and forward only result sets.
1:      */
1:     public void testUpdateUpdatedTupleFOUpdateRow()  throws SQLException{
1:         testUpdateUpdatedTupleWithCoveringIndex(false, false);
1:     }
1: 
1: 
0:     protected Connection con = null; // Connection established in setUp()
1:        
1: }
============================================================================