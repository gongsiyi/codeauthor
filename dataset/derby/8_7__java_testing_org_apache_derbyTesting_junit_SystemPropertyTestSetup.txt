1:0c0db14: /*
1:0c0db14:  *
1:0c0db14:  * Derby - Class org.apache.derbyTesting.functionTests.util.SystemPropertyTestSetup
1:0c0db14:  *
1:0c0db14:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0c0db14:  * contributor license agreements.  See the NOTICE file distributed with
1:0c0db14:  * this work for additional information regarding copyright ownership.
1:0c0db14:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0c0db14:  * (the "License"); you may not use this file except in compliance with
1:0c0db14:  * the License.  You may obtain a copy of the License at
1:0c0db14:  *
1:0c0db14:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0c0db14:  *
1:0c0db14:  * Unless required by applicable law or agreed to in writing, 
1:0c0db14:  * software distributed under the License is distributed on an 
1:0c0db14:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:0c0db14:  * either express or implied. See the License for the specific 
1:0c0db14:  * language governing permissions and limitations under the License.
1:0c0db14:  */
1:0c0db14: package org.apache.derbyTesting.junit;
1:0c0db14: 
1:0c0db14: import java.security.PrivilegedActionException;
1:0c0db14: import java.util.Enumeration;
1:0c0db14: import java.util.Properties;
1:0c0db14: 
1:0c0db14: 
1:0c0db14: import junit.extensions.TestSetup;
1:0c0db14: import junit.framework.Test;
1:0c0db14: 
1:0c0db14: /**
1:0c0db14:  * Test decorator to set a set of system properties on setUp
1:0c0db14:  * and restore them to the previous values on tearDown.
1:0c0db14:  *
1:0c0db14:  */
1:0c0db14: public class SystemPropertyTestSetup extends TestSetup {
1:0c0db14: 	
1:fc2589d: 	protected Properties newValues;
1:0c0db14: 	private Properties oldValues;
1:0433f1a: 	private boolean staticProperties;
1:0c0db14: 	
1:0c0db14: 	/**
1:0c0db14: 	 * Create a test decorator that sets and restores the passed
1:0c0db14: 	 * in properties. Assumption is that the contents of
1:0c0db14: 	 * properties and values will not change during execution.
1:0c0db14: 	 * @param test test to be decorated
1:0c0db14: 	 * @param newValues properties to be set
1:0c0db14: 	 */
1:0c0db14: 	public SystemPropertyTestSetup(Test test,
1:0433f1a: 			Properties newValues,
1:0433f1a: 			boolean staticProperties)
1:0433f1a: 	{
1:0433f1a: 		super(test);
1:0433f1a: 		this.newValues = newValues;
1:0433f1a: 		this.staticProperties = staticProperties;
1:0433f1a: 	}
1:0c0db14: 
1:0433f1a: 	/**
1:0433f1a: 	 * Create a test decorator that sets and restores 
1:0433f1a: 	 * System properties.  Do not shutdown engine after
1:0433f1a: 	 * setting properties
1:0433f1a: 	 * @param test
1:0433f1a: 	 * @param newValues
1:0433f1a: 	 */
1:0433f1a: 	public SystemPropertyTestSetup(Test test,
1:0c0db14: 			Properties newValues)
1:0c0db14: 	{
1:0c0db14: 		super(test);
1:0c0db14: 		this.newValues = newValues;
1:0433f1a: 		this.staticProperties = false;
1:0c0db14: 	}
1:3983f42: 
1:3983f42:     /**
1:3983f42:      * Decorate a test so that it sets a single system property in
1:3983f42:      * {@code setUp()} and resets it in {@code tearDown()}. The engine is
1:3983f42:      * not shut down after the property is set.
1:3983f42:      */
1:3983f42:     public static Test singleProperty(Test test, String property, String value)
1:3983f42:     {
1:3983f42:         return singleProperty(test, property, value, false);
1:3983f42:     }
1:3983f42: 
1:3983f42:     /**
1:3983f42:      * Decorate a test so that it sets a single system property in
1:3983f42:      * {@code setUp()} and resets it in {@code tearDown()}. The engine is
1:3983f42:      * shut down after the property is set if {@code staticProperty} is
1:3983f42:      * {@code true}.
1:3983f42:      */
1:3983f42:     public static Test singleProperty(Test test, String property, String value,
1:3983f42:             boolean staticProperty)
1:3983f42:     {
1:3983f42:         Properties properties = new Properties();
1:3983f42:         properties.setProperty(property, value);
1:3983f42:         return new SystemPropertyTestSetup(test, properties, staticProperty);
1:3983f42:     }
1:3983f42: 
1:0c0db14: 	/**
1:0c0db14: 	 * For each property store the current value and
1:0c0db14: 	 * replace it with the new value, unless there is no change.
1:0c0db14: 	 */
1:0c0db14:     protected void setUp()
1:0c0db14:     throws java.lang.Exception
1:0c0db14:     {
1:6a072f8:     	//DERBY-5663 Getting NPE when trying to set 
1:6a072f8:     	// derby.language.logStatementText property to true inside a junit 
1:6a072f8:     	// suite.
1:6a072f8:     	//The same instance of SystemPropertyTestSetup can be used again
1:6a072f8:     	// and hence we want to make sure that oldValues is not null as set
1:6a072f8:     	// in the tearDown() method. If we leave it null, we will run into NPE
1:6a072f8:     	// during the tearDown of SystemPropertyTestSetup during the 
1:6a072f8:     	// decorator's reuse.
1:0c0db14: 		this.oldValues = new Properties();
1:0c0db14: 
1:51e6268:         // Shutdown engine so static properties take effect.
1:51e6268:         // Shutdown the engine before setting the properties. This
1:5107349:         // is because the properties may change authentication settings
1:5107349:         // to NATIVE authentication and we may be missing a credentials DB.
1:51e6268:         if (staticProperties) {
1:51e6268:             // Use deregister == false here lest in client server mode
1:51e6268:             // we try to connect to a network server without an embedded
1:51e6268:             // driver registered. Issue seen with ConstraintCharacteristicsTest.
1:51e6268:             TestConfiguration.getCurrent().shutdownEngine(false);
1:51e6268:         }
1:51e6268:         
1:0c0db14:     	setProperties(newValues);
1:0c0db14:     }
1:0c0db14: 
1:0c0db14:     /**
1:0c0db14:      * Revert the properties to their values prior to the setUp call.
1:0c0db14:      */
1:0c0db14:     protected void tearDown()
1:0c0db14:     throws java.lang.Exception
1:0c0db14:     {
1:badaed7:         // Shut down the engine to restore any static properties. Do that
1:badaed7:         // before the properties are reset to their old values, since the
1:badaed7:         // engine shutdown may rely on some of the system properties. For
1:badaed7:         // example, the system properties could contain the user database
1:badaed7:         // (in derby.user.* style properties), and clearing those first
1:badaed7:         // would lead to "invalid authentication" errors when attempting
1:badaed7:         // to shut down the engine.
1:badaed7:         try {
1:badaed7:             if (staticProperties) {
1:badaed7:                 TestConfiguration.getCurrent().shutdownEngine();
1:badaed7:             }
1:badaed7:         } finally {
1:badaed7:             restoreOldPropertyValues();
1:badaed7:             oldValues = null;
1:badaed7:         }
1:badaed7:     }
1:badaed7: 
1:badaed7:     private void restoreOldPropertyValues() throws Exception {
1:0c0db14:     	// Clear all the system properties set by the new set
1:0c0db14:     	// that will not be reset by the old set.
1:0c0db14:        	for (Enumeration e = newValues.propertyNames(); e.hasMoreElements();)
1:0c0db14:        	{
1:0c0db14:        		String key = (String) e.nextElement();
1:0c0db14:        		if (oldValues.getProperty(key) == null)
1:0c0db14:        		    BaseTestCase.removeSystemProperty(key);
1:0c0db14:        	}
1:0c0db14:     	// and then reset nay old values
1:0c0db14:     	setProperties(oldValues);
1:0c0db14:     }
1:badaed7: 
1:0c0db14:     private void setProperties(Properties values)
1:0c0db14:         throws PrivilegedActionException
1:0c0db14:     {
1:0c0db14:     	for (Enumeration e = values.propertyNames(); e.hasMoreElements();)
1:0c0db14:     	{
1:0c0db14:     		String key = (String) e.nextElement();
1:0c0db14:     		String value = values.getProperty(key);
1:0c0db14:     		String old = BaseTestCase.getSystemProperty(key);
1:0c0db14:     		
1:0c0db14:     		boolean change;
1:0c0db14:     		if (old != null)
1:0c0db14:     		{
1:0c0db14:                 // set, might need to be changed.
1:0c0db14:                 change = !old.equals(value);
1:0c0db14:                 
1:7e177bd:                 //Reference equality is ok here.
1:7e177bd:     			if (values != oldValues)
1:0c0db14:     			   oldValues.setProperty(key, old);
1:0c0db14:     		}
1:0c0db14:     		else {
1:0c0db14:     			// notset, needs to be set
1:0c0db14:     			change = true;
1:0c0db14:     		}
1:0c0db14:     		
1:0c0db14:     		if (change) {
1:0c0db14:     			BaseTestCase.setSystemProperty(key, value);
1:0c0db14:     		}
1:0c0db14:     	}
1:0c0db14:     }
1:0c0db14: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:badaed7
/////////////////////////////////////////////////////////////////////////
1:         // Shut down the engine to restore any static properties. Do that
1:         // before the properties are reset to their old values, since the
1:         // engine shutdown may rely on some of the system properties. For
1:         // example, the system properties could contain the user database
1:         // (in derby.user.* style properties), and clearing those first
1:         // would lead to "invalid authentication" errors when attempting
1:         // to shut down the engine.
1:         try {
1:             if (staticProperties) {
1:                 TestConfiguration.getCurrent().shutdownEngine();
1:             }
1:         } finally {
1:             restoreOldPropertyValues();
1:             oldValues = null;
1:         }
1:     }
1: 
1:     private void restoreOldPropertyValues() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
commit:3983f42
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Decorate a test so that it sets a single system property in
1:      * {@code setUp()} and resets it in {@code tearDown()}. The engine is
1:      * not shut down after the property is set.
1:      */
1:     public static Test singleProperty(Test test, String property, String value)
1:     {
1:         return singleProperty(test, property, value, false);
1:     }
1: 
1:     /**
1:      * Decorate a test so that it sets a single system property in
1:      * {@code setUp()} and resets it in {@code tearDown()}. The engine is
1:      * shut down after the property is set if {@code staticProperty} is
1:      * {@code true}.
1:      */
1:     public static Test singleProperty(Test test, String property, String value,
1:             boolean staticProperty)
1:     {
1:         Properties properties = new Properties();
1:         properties.setProperty(property, value);
1:         return new SystemPropertyTestSetup(test, properties, staticProperty);
1:     }
1: 
commit:0c0db14
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.SystemPropertyTestSetup
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.security.PrivilegedActionException;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: 
1: 
1: import junit.extensions.TestSetup;
1: import junit.framework.Test;
1: 
1: /**
1:  * Test decorator to set a set of system properties on setUp
1:  * and restore them to the previous values on tearDown.
1:  *
1:  */
1: public class SystemPropertyTestSetup extends TestSetup {
1: 	
0: 	private Properties newValues;
1: 	private Properties oldValues;
1: 	
1: 	/**
1: 	 * Create a test decorator that sets and restores the passed
1: 	 * in properties. Assumption is that the contents of
1: 	 * properties and values will not change during execution.
1: 	 * @param test test to be decorated
1: 	 * @param newValues properties to be set
1: 	 */
1: 	public SystemPropertyTestSetup(Test test,
1: 			Properties newValues)
1: 	{
1: 		super(test);
1: 		this.newValues = newValues;
1: 		this.oldValues = new Properties();
1: 	}
1: 
1: 	/**
1: 	 * For each property store the current value and
1: 	 * replace it with the new value, unless there is no change.
1: 	 */
1:     protected void setUp()
1:     throws java.lang.Exception
1:     {
1:     	setProperties(newValues);
1:     }
1: 
1:     /**
1:      * Revert the properties to their values prior to the setUp call.
1:      */
1:     protected void tearDown()
1:     throws java.lang.Exception
1:     {
1:     	// Clear all the system properties set by the new set
1:     	// that will not be reset by the old set.
1:        	for (Enumeration e = newValues.propertyNames(); e.hasMoreElements();)
1:        	{
1:        		String key = (String) e.nextElement();
1:        		if (oldValues.getProperty(key) == null)
1:        		    BaseTestCase.removeSystemProperty(key);
1:        	}
1:     	// and then reset nay old values
1:     	setProperties(oldValues);
0:         newValues = null;
0:         oldValues = null;
1:     }
1:     
1:     private void setProperties(Properties values)
1:         throws PrivilegedActionException
1:     {
1:     	for (Enumeration e = values.propertyNames(); e.hasMoreElements();)
1:     	{
1:     		String key = (String) e.nextElement();
1:     		String value = values.getProperty(key);
1:     		String old = BaseTestCase.getSystemProperty(key);
1:     		
1:     		boolean change;
1:     		if (old != null)
1:     		{
1:                 // set, might need to be changed.
1:                 change = !old.equals(value);
1:                 
0:                 // If we are not processing the oldValues
0:                 // then store in the oldValues. Reference equality is ok here.
0:     			if (change && (values != oldValues))
1:     			   oldValues.setProperty(key, old);
1:     		}
1:     		else {
1:     			// notset, needs to be set
1:     			change = true;
1:     		}
1:     		
1:     		if (change) {
1:     			BaseTestCase.setSystemProperty(key, value);
1:     		}
1:     	}
1:     }
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:51e6268
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Shutdown engine so static properties take effect.
1:         // Shutdown the engine before setting the properties. This
1:         if (staticProperties) {
1:             // Use deregister == false here lest in client server mode
1:             // we try to connect to a network server without an embedded
1:             // driver registered. Issue seen with ConstraintCharacteristicsTest.
1:             TestConfiguration.getCurrent().shutdownEngine(false);
1:         }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:6a072f8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     	//DERBY-5663 Getting NPE when trying to set 
1:     	// derby.language.logStatementText property to true inside a junit 
1:     	// suite.
1:     	//The same instance of SystemPropertyTestSetup can be used again
1:     	// and hence we want to make sure that oldValues is not null as set
1:     	// in the tearDown() method. If we leave it null, we will run into NPE
1:     	// during the tearDown of SystemPropertyTestSetup during the 
1:     	// decorator's reuse.
0: 		this.oldValues = new Properties();
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5107349
/////////////////////////////////////////////////////////////////////////
0:         // shutdown the engine before setting the properties. this
1:         // is because the properties may change authentication settings
1:         // to NATIVE authentication and we may be missing a credentials DB.
0:     	{ TestConfiguration.getCurrent().shutdownEngine(); }
0:         
0:     	setProperties(newValues);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e177bd
/////////////////////////////////////////////////////////////////////////
1:                 //Reference equality is ok here.
1:     			if (values != oldValues)
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0433f1a
/////////////////////////////////////////////////////////////////////////
1: 	private boolean staticProperties;
/////////////////////////////////////////////////////////////////////////
1: 			Properties newValues,
1: 			boolean staticProperties)
1: 	{
1: 		super(test);
1: 		this.newValues = newValues;
0: 		this.oldValues = new Properties();
1: 		this.staticProperties = staticProperties;
1: 	}
0: 
1: 	/**
1: 	 * Create a test decorator that sets and restores 
1: 	 * System properties.  Do not shutdown engine after
1: 	 * setting properties
1: 	 * @param test
1: 	 * @param newValues
1: 	 */
1: 	public SystemPropertyTestSetup(Test test,
1: 		this.staticProperties = false;
/////////////////////////////////////////////////////////////////////////
0:     	// shutdown engine so static properties take effect
0:     	if (staticProperties)
0:     		TestConfiguration.getCurrent().shutdownEngine();
/////////////////////////////////////////////////////////////////////////
0:     	// shutdown engine to restore any static properties
0:     	if (staticProperties)
0:     		TestConfiguration.getCurrent().shutdownEngine();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fc2589d
/////////////////////////////////////////////////////////////////////////
1: 	protected Properties newValues;
commit:8bc3183
/////////////////////////////////////////////////////////////////////////
0: 	private Properties newValues;
0: 	private Properties oldValues;
/////////////////////////////////////////////////////////////////////////
0:         newValues = null;
0:         oldValues = null;
/////////////////////////////////////////////////////////////////////////
0:                 // set, might need to be changed.
0:                 change = !old.equals(value);
0:                 
0:                 // If we are not processing the oldValues
0:                 // then store in the oldValues. Reference equality is ok here.
0:     			if (change && (values != oldValues))
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
0: package org.apache.derbyTesting.junit;
0: 
commit:d20d8c3
/////////////////////////////////////////////////////////////////////////
0: /*
0:  *
0:  * Derby - Class org.apache.derbyTesting.functionTests.util.SystemPropertyTestSetup
0:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, 
0:  * software distributed under the License is distributed on an 
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
0:  * either express or implied. See the License for the specific 
0:  * language governing permissions and limitations under the License.
0:  */
0: package org.apache.derbyTesting.functionTests.util;
0: 
0: import java.security.PrivilegedActionException;
0: import java.util.Enumeration;
0: import java.util.Properties;
0: 
0: import junit.extensions.TestSetup;
0: import junit.framework.Test;
0: 
0: /**
0:  * Test decorator to set a set of system properties on setUp
0:  * and restore them to the previous values on tearDown.
0:  *
0:  */
0: public class SystemPropertyTestSetup extends TestSetup {
0: 	
0: 	private final Properties newValues;
0: 	private final Properties oldValues;
0: 	
0: 	/**
0: 	 * Create a test decorator that sets and restores the passed
0: 	 * in properties. Assumption is that the contents of
0: 	 * properties and values will not change during execution.
0: 	 * @param test test to be decorated
0: 	 * @param newValues properties to be set
0: 	 */
0: 	public SystemPropertyTestSetup(Test test,
0: 			Properties newValues)
0: 	{
0: 		super(test);
0: 		this.newValues = newValues;
0: 		this.oldValues = new Properties();
0: 	}
0: 
0: 	/**
0: 	 * For each property store the current value and
0: 	 * replace it with the new value, unless there is no change.
0: 	 */
0:     protected void setUp()
0:     throws java.lang.Exception
0:     {
0:     	setProperties(newValues);
0:     }
0: 
0:     /**
0:      * Revert the properties to their values prior to the setUp call.
0:      */
0:     protected void tearDown()
0:     throws java.lang.Exception
0:     {
0:     	// Clear all the system properties set by the new set
0:     	// that will not be reset by the old set.
0:        	for (Enumeration e = newValues.propertyNames(); e.hasMoreElements();)
0:        	{
0:        		String key = (String) e.nextElement();
0:        		if (oldValues.getProperty(key) == null)
0:        		    BaseTestCase.removeSystemProperty(key);
0:        	}
0:     	// and then reset nay old values
0:     	setProperties(oldValues);
0:     }
0:     
0:     private void setProperties(Properties values)
0:         throws PrivilegedActionException
0:     {
0:     	for (Enumeration e = values.propertyNames(); e.hasMoreElements();)
0:     	{
0:     		String key = (String) e.nextElement();
0:     		String value = values.getProperty(key);
0:     		String old = BaseTestCase.getSystemProperty(key);
0:     		
0:     		boolean change;
0:     		if (old != null)
0:     		{
0:     			// set, might need to be changed.
0:     			if (change = !old.equals(value))
0:     			   oldValues.setProperty(key, old);
0:     		}
0:     		else {
0:     			// notset, needs to be set
0:     			change = true;
0:     		}
0:     		
0:     		if (change) {
0:     			BaseTestCase.setSystemProperty(key, value);
0:     		}
0:     	}
0:     }
0: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
============================================================================