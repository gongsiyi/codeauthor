1:9206d5b: /*
1:9206d5b: 
1:9206d5b:    Derby - Class org.apache.derby.client.am.LogicalCallableStatement42
1:9206d5b: 
1:9206d5b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9206d5b:    contributor license agreements.  See the NOTICE file distributed with
1:9206d5b:    this work for additional information regarding copyright ownership.
1:9206d5b:    The ASF licenses this file to You under the Apache License, Version 2.0
1:9206d5b:    (the "License"); you may not use this file except in compliance with
1:9206d5b:    the License.  You may obtain a copy of the License at
1:9206d5b: 
1:9206d5b:       http://www.apache.org/licenses/LICENSE-2.0
1:9206d5b: 
1:9206d5b:    Unless required by applicable law or agreed to in writing, software
1:9206d5b:    distributed under the License is distributed on an "AS IS" BASIS,
1:9206d5b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9206d5b:    See the License for the specific language governing permissions and
1:9206d5b:    limitations under the License.
1:9206d5b: 
1:9206d5b:  */
1:9206d5b: package org.apache.derby.client.am;
1:9206d5b: 
1:69e3d06: import java.sql.CallableStatement;
1:9206d5b: import java.sql.SQLException;
1:9206d5b: import java.sql.SQLType;
1:9206d5b: import org.apache.derby.client.am.stmtcache.StatementKey;
1:9206d5b: 
1:9206d5b: /**
1:9206d5b:  * JDBC 4 specific wrapper class for a Derby physical callable statement.
1:9206d5b:  *
1:9206d5b:  * @see LogicalCallableStatement
1:9206d5b:  * @see #isClosed
1:9206d5b:  */
1:9a0cdf1: public class LogicalCallableStatement42 extends LogicalCallableStatement
1:9206d5b: {
1:9206d5b:     /**
1:9206d5b:      * Creates a new logical callable statement.
1:9206d5b:      *
1:9206d5b:      * @param physicalCs underlying physical statement
1:9206d5b:      * @param stmtKey key for the physical statement
1:9206d5b:      * @param cacheInteractor creating statement cache interactor
1:9206d5b:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:9206d5b:      */
1:69e3d06:     public LogicalCallableStatement42(CallableStatement physicalCs,
1:9206d5b:                                       StatementKey stmtKey,
1:9206d5b:                                       StatementCacheInteractor cacheInteractor){
1:9206d5b:         super(physicalCs, stmtKey, cacheInteractor);
1:9206d5b:     }
1:9206d5b: 
1:9206d5b:     ////////////////////////////////////////////////////////////////////
1:9206d5b:     //
1:9206d5b:     // INTRODUCED BY JDBC 4.2 IN JAVA 8
1:9206d5b:     //
1:9206d5b:     ////////////////////////////////////////////////////////////////////
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             registerOutParameter( parameterIndex, sqlType );
1:9206d5b:     }
1:9206d5b: 
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, int scale )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             registerOutParameter( parameterIndex, sqlType, scale );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, String typeName )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             registerOutParameter( parameterIndex, sqlType, typeName );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName, SQLType sqlType )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             registerOutParameter( parameterName, sqlType );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName, SQLType sqlType, int scale )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             registerOutParameter( parameterName, sqlType, scale );
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName,  SQLType sqlType, String typeName )
1:9206d5b:         throws SQLException
1:9206d5b:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             registerOutParameter( parameterName, sqlType, typeName );
1:9206d5b:     }
1:9206d5b: 
1:17efc16:     public  void setObject
1:69e3d06:         ( int parameterIndex, Object x, SQLType sqlType )
1:17efc16:         throws SQLException
1:17efc16:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             setObject( parameterIndex, x, sqlType );
1:17efc16:     }
1:17efc16:     
1:17efc16:     public void setObject
1:69e3d06:         ( int parameterIndex, Object x, SQLType sqlType, int scaleOrLength )
1:17efc16:         throws SQLException
1:17efc16:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             setObject( parameterIndex, x, sqlType, scaleOrLength );
1:17efc16:     }
1:17efc16: 
1:17efc16:     public  void setObject( String parameterName, Object x, SQLType sqlType )
1:17efc16:         throws SQLException
1:17efc16:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             setObject( parameterName, x, sqlType );
1:17efc16:     }
1:17efc16:     
1:17efc16:     public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )
1:17efc16:         throws SQLException
1:17efc16:     {
1:69e3d06:         ((ClientCallableStatement42)getPhysCs()).
1:69e3d06:             setObject( parameterName, x, sqlType, scaleOrLength );
1:17efc16:     }
1:9206d5b: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: public class LogicalCallableStatement42 extends LogicalCallableStatement
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
/////////////////////////////////////////////////////////////////////////
1:     public LogicalCallableStatement42(CallableStatement physicalCs,
/////////////////////////////////////////////////////////////////////////
1:         ((ClientCallableStatement42)getPhysCs()).
1:             registerOutParameter( parameterIndex, sqlType );
1:         ((ClientCallableStatement42)getPhysCs()).
1:             registerOutParameter( parameterIndex, sqlType, scale );
1:         ((ClientCallableStatement42)getPhysCs()).
1:             registerOutParameter( parameterIndex, sqlType, typeName );
1:         ((ClientCallableStatement42)getPhysCs()).
1:             registerOutParameter( parameterName, sqlType );
1:         ((ClientCallableStatement42)getPhysCs()).
1:             registerOutParameter( parameterName, sqlType, scale );
1:         ((ClientCallableStatement42)getPhysCs()).
1:             registerOutParameter( parameterName, sqlType, typeName );
1:         ( int parameterIndex, Object x, SQLType sqlType )
1:         ((ClientCallableStatement42)getPhysCs()).
1:             setObject( parameterIndex, x, sqlType );
1:         ( int parameterIndex, Object x, SQLType sqlType, int scaleOrLength )
1:         ((ClientCallableStatement42)getPhysCs()).
1:             setObject( parameterIndex, x, sqlType, scaleOrLength );
1:         ((ClientCallableStatement42)getPhysCs()).
1:             setObject( parameterName, x, sqlType );
1:         ((ClientCallableStatement42)getPhysCs()).
1:             setObject( parameterName, x, sqlType, scaleOrLength );
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:17efc16
/////////////////////////////////////////////////////////////////////////
1:     public  void setObject
0:         ( int parameterIndex, java.lang.Object x, SQLType sqlType )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).setObject( parameterIndex, x, sqlType );
1:     }
1:     
1:     public void setObject
0:         ( int parameterIndex, java.lang.Object x, SQLType sqlType, int scaleOrLength )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).setObject( parameterIndex, x, sqlType, scaleOrLength );
1:     }
1: 
1:     public  void setObject( String parameterName, Object x, SQLType sqlType )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).setObject( parameterName, x, sqlType );
1:     }
1:     
1:     public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).setObject( parameterName, x, sqlType, scaleOrLength );
1:     }
commit:9206d5b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LogicalCallableStatement42
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
1: import java.sql.SQLException;
1: import java.sql.SQLType;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: 
1: /**
1:  * JDBC 4 specific wrapper class for a Derby physical callable statement.
1:  *
1:  * @see LogicalCallableStatement
1:  * @see #isClosed
1:  */
0: public class LogicalCallableStatement42 extends LogicalCallableStatement40
1: {
1:     /**
1:      * Creates a new logical callable statement.
1:      *
1:      * @param physicalCs underlying physical statement
1:      * @param stmtKey key for the physical statement
1:      * @param cacheInteractor creating statement cache interactor
1:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:      */
0:     public LogicalCallableStatement42(java.sql.CallableStatement physicalCs,
1:                                       StatementKey stmtKey,
1:                                       StatementCacheInteractor cacheInteractor){
1:         super(physicalCs, stmtKey, cacheInteractor);
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.2 IN JAVA 8
1:     //
1:     ////////////////////////////////////////////////////////////////////
1:     
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).registerOutParameter( parameterIndex, sqlType );
1:     }
1: 
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, int scale )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).registerOutParameter( parameterIndex, sqlType, scale );
1:     }
1:     
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, String typeName )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).registerOutParameter( parameterIndex, sqlType, typeName );
1:     }
1:     
1:     public  void registerOutParameter( String parameterName, SQLType sqlType )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).registerOutParameter( parameterName, sqlType );
1:     }
1:     
1:     public  void registerOutParameter( String parameterName, SQLType sqlType, int scale )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).registerOutParameter( parameterName, sqlType, scale );
1:     }
1:     
1:     public  void registerOutParameter( String parameterName,  SQLType sqlType, String typeName )
1:         throws SQLException
1:     {
0:         ((CallableStatement42)getPhysCs()).registerOutParameter( parameterName, sqlType, typeName );
1:     }
1: 
1: }
============================================================================