1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.j9_13
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
16:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.util.Vector;
1:67614ad: import java.util.StringTokenizer;
1:67614ad: import java.util.Properties;
1:67614ad: 
1:67614ad: 
2:67614ad: /**
1:67614ad:   <p>This class is for IBM's J9 jdk 1.3.
1:67614ad: 
1:67614ad:  */
1:67614ad: public class j9_13 extends jvm {
1:67614ad: 
1:67614ad: 	public String getName(){return "j9_13";}
1:67614ad:     public j9_13(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:67614ad:     long ss, long oss, long ms, long mx, String classpath, String prof,
1:3f5c48a:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:67614ad:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1:67614ad: 		verify,noverify,nojit,D);
1:67614ad:     }
1:67614ad:     // more typical use:
1:3f5c48a:     public j9_13(String classpath, Vector<String> D) {
1:67614ad:         super(classpath,D);
1:67614ad:     }
1:67614ad:     // more typical use:
1:3f5c48a:     public j9_13(long ms, long mx, String classpath, Vector<String> D) {
1:67614ad:         super(ms,mx,classpath,D);
1:67614ad:     }
1:67614ad:     // actual use
1:67614ad:     public j9_13() {
1:67614ad: 	Properties sp = System.getProperties();
1:67614ad: 	String srvJvm = sp.getProperty("serverJvm");
1:67614ad: 	if ((srvJvm!=null) && ((srvJvm.toUpperCase().startsWith("J9")) || (srvJvm.equalsIgnoreCase("wsdd5.6"))))
1:67614ad: 	{
1:67614ad: 		String wshome = guessWSHome();
1:67614ad: 		// note, may have to switch to sep instead of hardcoding the slashes...
1:67614ad: 		setJavaCmd(wshome+"/wsdd5.6/ive/bin/j9");
1:67614ad: 	}
1:67614ad: 	else
1:67614ad: 		setJavaCmd("j9");
1:67614ad:     }
1:67614ad: 
1:67614ad:     // return the command line to invoke this VM.  The caller then adds
1:67614ad:     // the class and program arguments.
1:3f5c48a:     public Vector<String> getCommandLine()
1:67614ad:     {
1:67614ad: 
1:67614ad:         StringBuffer sb = new StringBuffer();
1:3f5c48a:         Vector<String> v = super.getCommandLine();
1:67614ad: 
1:67614ad:         appendOtherFlags(sb);
1:67614ad:         String s = sb.toString();
1:67614ad:         StringTokenizer st = new StringTokenizer(s);
1:67614ad:         while (st.hasMoreTokens())
1:67614ad:         {
1:67614ad:             v.addElement(st.nextToken());
1:67614ad:         }
1:67614ad:         return v;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	public void appendOtherFlags(StringBuffer sb)
1:67614ad: 	{
1:67614ad: 
1:67614ad: 	Properties sp = System.getProperties();
1:67614ad: 	String bootcp = sp.getProperty("bootcp");
1:67614ad: 	String srvJvm = sp.getProperty("serverJvm");
1:67614ad: 	// if we're coming in to be the server jvm for networkserver testing on j9,
1:67614ad: 	// bootcp is null, so we need to try to setup the bootclasspath from scratch
1:67614ad: 	// for now, assume we're only interested in doing this for wsdd5.6, worry about
1:67614ad: 	// newer versions, multiple class libraries, or multiple releases later.
1:67614ad: 	if ((srvJvm !=null ) && ((srvJvm.toUpperCase().startsWith("J9")) || (srvJvm.equalsIgnoreCase("wsdd5.6"))))
1:67614ad: 	{
1:67614ad: 		String pathsep = System.getProperty("path.separator");
1:67614ad: 		String wshome = guessWSHome();
1:67614ad: 		// note, may have to switch to sep instead of hardcoding the slashes...
1:67614ad: 		sb.append(" -Xbootclasspath/a:" + wshome + "/wsdd5.6/ive/lib/jclMax/classes.zip"
1:67614ad: 			+ pathsep + wshome + "/wsdd5.6/ive/lib/charconv.zip"
1:67614ad: 			+ pathsep + wshome + "/wsdd5.6/ive/lib/jclMax");
1:67614ad: 	} 
1:67614ad: 	else
1:67614ad: 		sb.append(" -Xbootclasspath/a:" + bootcp);
1:67614ad:         if (noasyncgc) warn("j9_13 does not support noasyncgc");
1:67614ad:         if (verbosegc) sb.append(" -verbose:gc");
1:67614ad:         if (noclassgc) warn("j9_13 does not support noclassgc");
1:67614ad:         if (ss>=0) warn("j9_13 does not support ss");
1:67614ad:         if (oss>=0) warn("j9_13 does not support oss");
1:67614ad:         if (ms>=0) {
1:67614ad:           sb.append(" -Xss");
1:67614ad:           sb.append(ms);
1:67614ad: 		  //sb.append("k");
1:67614ad:         }
1:67614ad:         if (mx>=0) {
1:67614ad:           sb.append(" -Xmx");
1:67614ad:           sb.append(mx);
1:67614ad: 		  //sb.append("k");
1:67614ad:         }
1:67614ad:         if (classpath!=null) warn("j9_13 does not support classpath, use -Xbootclasspath,-Xbootclasspath/p,-Xbootclasspath/a"); 
1:67614ad:         if (prof!=null) warn("j9_13 does not support prof");
1:67614ad:         if (verify) sb.append(" -verify");
1:67614ad:         if (noverify) warn("j9_13 does not support noverify");
1:67614ad:         if (nojit) sb.append(" -Xnojit");
1:67614ad:         if (D != null)
1:67614ad:           for (int i=0; i<D.size();i++) {
1:67614ad: 	        sb.append(" -D");
1:67614ad: 	        sb.append((String)(D.elementAt(i)));
1:67614ad:           }
1:67614ad:     }
1:67614ad: 	public String getDintro() { return "-D"; }
1:67614ad: 
1:67614ad: 	protected void setSecurityProps()
1:67614ad: 	{
1:67614ad: 		System.out.println("Note: J9 tests do not run with security manager");		
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     boolean verify, boolean noverify, boolean nojit, Vector<String> D) {
1:     public j9_13(String classpath, Vector<String> D) {
1:     public j9_13(long ms, long mx, String classpath, Vector<String> D) {
/////////////////////////////////////////////////////////////////////////
1:     public Vector<String> getCommandLine()
1:         Vector<String> v = super.getCommandLine();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.Vector;
1: import java.util.StringTokenizer;
1: import java.util.Properties;
1: 
1: 
1: /**
1:   <p>This class is for IBM's J9 jdk 1.3.
1: 
0:   @author ge
1:  */
1: public class j9_13 extends jvm {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1: 	public String getName(){return "j9_13";}
1:     public j9_13(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
1:     long ss, long oss, long ms, long mx, String classpath, String prof,
0:     boolean verify, boolean noverify, boolean nojit, Vector D) {
1:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
1: 		verify,noverify,nojit,D);
1:     }
1:     // more typical use:
0:     public j9_13(String classpath, Vector D) {
1:         super(classpath,D);
1:     }
1:     // more typical use:
0:     public j9_13(long ms, long mx, String classpath, Vector D) {
1:         super(ms,mx,classpath,D);
1:     }
1:     // actual use
1:     public j9_13() {
1: 	Properties sp = System.getProperties();
1: 	String srvJvm = sp.getProperty("serverJvm");
1: 	if ((srvJvm!=null) && ((srvJvm.toUpperCase().startsWith("J9")) || (srvJvm.equalsIgnoreCase("wsdd5.6"))))
1: 	{
1: 		String wshome = guessWSHome();
1: 		// note, may have to switch to sep instead of hardcoding the slashes...
1: 		setJavaCmd(wshome+"/wsdd5.6/ive/bin/j9");
1: 	}
1: 	else
1: 		setJavaCmd("j9");
1:     }
1: 
1:     // return the command line to invoke this VM.  The caller then adds
1:     // the class and program arguments.
0:     public Vector getCommandLine() 
1:     {
1: 
1:         StringBuffer sb = new StringBuffer();
0:         Vector v = super.getCommandLine();
1: 
1:         appendOtherFlags(sb);
1:         String s = sb.toString();
1:         StringTokenizer st = new StringTokenizer(s);
1:         while (st.hasMoreTokens())
1:         {
1:             v.addElement(st.nextToken());
1:         }
1:         return v;
1: 	}
1: 
1: 	public void appendOtherFlags(StringBuffer sb)
1: 	{
1: 
1: 	Properties sp = System.getProperties();
1: 	String bootcp = sp.getProperty("bootcp");
1: 	String srvJvm = sp.getProperty("serverJvm");
1: 	// if we're coming in to be the server jvm for networkserver testing on j9,
1: 	// bootcp is null, so we need to try to setup the bootclasspath from scratch
1: 	// for now, assume we're only interested in doing this for wsdd5.6, worry about
1: 	// newer versions, multiple class libraries, or multiple releases later.
1: 	if ((srvJvm !=null ) && ((srvJvm.toUpperCase().startsWith("J9")) || (srvJvm.equalsIgnoreCase("wsdd5.6"))))
1: 	{
1: 		String pathsep = System.getProperty("path.separator");
1: 		String wshome = guessWSHome();
1: 		// note, may have to switch to sep instead of hardcoding the slashes...
1: 		sb.append(" -Xbootclasspath/a:" + wshome + "/wsdd5.6/ive/lib/jclMax/classes.zip"
1: 			+ pathsep + wshome + "/wsdd5.6/ive/lib/charconv.zip"
1: 			+ pathsep + wshome + "/wsdd5.6/ive/lib/jclMax");
1: 	} 
1: 	else
1: 		sb.append(" -Xbootclasspath/a:" + bootcp);
1:         if (noasyncgc) warn("j9_13 does not support noasyncgc");
1:         if (verbosegc) sb.append(" -verbose:gc");
1:         if (noclassgc) warn("j9_13 does not support noclassgc");
1:         if (ss>=0) warn("j9_13 does not support ss");
1:         if (oss>=0) warn("j9_13 does not support oss");
1:         if (ms>=0) {
1:           sb.append(" -Xss");
1:           sb.append(ms);
1: 		  //sb.append("k");
1:         }
1:         if (mx>=0) {
1:           sb.append(" -Xmx");
1:           sb.append(mx);
1: 		  //sb.append("k");
1:         }
1:         if (classpath!=null) warn("j9_13 does not support classpath, use -Xbootclasspath,-Xbootclasspath/p,-Xbootclasspath/a"); 
1:         if (prof!=null) warn("j9_13 does not support prof");
1:         if (verify) sb.append(" -verify");
1:         if (noverify) warn("j9_13 does not support noverify");
1:         if (nojit) sb.append(" -Xnojit");
1:         if (D != null)
1:           for (int i=0; i<D.size();i++) {
1: 	        sb.append(" -D");
1: 	        sb.append((String)(D.elementAt(i)));
1:           }
1:     }
1: 	public String getDintro() { return "-D"; }
1: 
1: 	protected void setSecurityProps()
1: 	{
1: 		System.out.println("Note: J9 tests do not run with security manager");		
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.j9_13
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.util.Vector;
0: import java.util.StringTokenizer;
0: import java.util.Properties;
1: 
1: 
0: /**
0:   <p>This class is for IBM's J9 jdk 1.3.
1: 
0:   @author ge
0:  */
0: public class j9_13 extends jvm {
1: 
0: 	public String getName(){return "j9_13";}
0:     public j9_13(boolean noasyncgc, boolean verbosegc, boolean noclassgc,
0:     long ss, long oss, long ms, long mx, String classpath, String prof,
0:     boolean verify, boolean noverify, boolean nojit, Vector D) {
0:         super(noasyncgc,verbosegc,noclassgc,ss,oss,ms,mx,classpath,prof,
0: 		verify,noverify,nojit,D);
0:     }
0:     // more typical use:
0:     public j9_13(String classpath, Vector D) {
0:         super(classpath,D);
0:     }
0:     // more typical use:
0:     public j9_13(long ms, long mx, String classpath, Vector D) {
0:         super(ms,mx,classpath,D);
0:     }
0:     // actual use
0:     public j9_13() {
0: 	Properties sp = System.getProperties();
0: 	String srvJvm = sp.getProperty("serverJvm");
0: 	if ((srvJvm!=null) && ((srvJvm.toUpperCase().startsWith("J9")) || (srvJvm.equalsIgnoreCase("wsdd5.6"))))
0: 	{
0: 		String wshome = guessWSHome();
0: 		// note, may have to switch to sep instead of hardcoding the slashes...
0: 		setJavaCmd(wshome+"/wsdd5.6/ive/bin/j9");
0: 	}
0: 	else
0: 		setJavaCmd("j9");
0:     }
1: 
0:     // return the command line to invoke this VM.  The caller then adds
0:     // the class and program arguments.
0:     public Vector getCommandLine() 
0:     {
1: 
0:         StringBuffer sb = new StringBuffer();
0:         Vector v = super.getCommandLine();
1: 
0:         appendOtherFlags(sb);
0:         String s = sb.toString();
0:         StringTokenizer st = new StringTokenizer(s);
0:         while (st.hasMoreTokens())
0:         {
0:             v.addElement(st.nextToken());
0:         }
0:         return v;
0: 	}
1: 
0: 	public void appendOtherFlags(StringBuffer sb)
0: 	{
1: 
0: 	Properties sp = System.getProperties();
0: 	String bootcp = sp.getProperty("bootcp");
0: 	String srvJvm = sp.getProperty("serverJvm");
0: 	// if we're coming in to be the server jvm for networkserver testing on j9,
0: 	// bootcp is null, so we need to try to setup the bootclasspath from scratch
0: 	// for now, assume we're only interested in doing this for wsdd5.6, worry about
0: 	// newer versions, multiple class libraries, or multiple releases later.
0: 	if ((srvJvm !=null ) && ((srvJvm.toUpperCase().startsWith("J9")) || (srvJvm.equalsIgnoreCase("wsdd5.6"))))
0: 	{
0: 		String pathsep = System.getProperty("path.separator");
0: 		String wshome = guessWSHome();
0: 		// note, may have to switch to sep instead of hardcoding the slashes...
0: 		sb.append(" -Xbootclasspath/a:" + wshome + "/wsdd5.6/ive/lib/jclMax/classes.zip"
0: 			+ pathsep + wshome + "/wsdd5.6/ive/lib/charconv.zip"
0: 			+ pathsep + wshome + "/wsdd5.6/ive/lib/jclMax");
0: 	} 
0: 	else
0: 		sb.append(" -Xbootclasspath/a:" + bootcp);
0:         if (noasyncgc) warn("j9_13 does not support noasyncgc");
0:         if (verbosegc) sb.append(" -verbose:gc");
0:         if (noclassgc) warn("j9_13 does not support noclassgc");
0:         if (ss>=0) warn("j9_13 does not support ss");
0:         if (oss>=0) warn("j9_13 does not support oss");
0:         if (ms>=0) {
0:           sb.append(" -Xss");
0:           sb.append(ms);
0: 		  //sb.append("k");
0:         }
0:         if (mx>=0) {
0:           sb.append(" -Xmx");
0:           sb.append(mx);
0: 		  //sb.append("k");
0:         }
0:         if (classpath!=null) warn("j9_13 does not support classpath, use -Xbootclasspath,-Xbootclasspath/p,-Xbootclasspath/a"); 
0:         if (prof!=null) warn("j9_13 does not support prof");
0:         if (verify) sb.append(" -verify");
0:         if (noverify) warn("j9_13 does not support noverify");
0:         if (nojit) sb.append(" -Xnojit");
0:         if (D != null)
0:           for (int i=0; i<D.size();i++) {
0: 	        sb.append(" -D");
0: 	        sb.append((String)(D.elementAt(i)));
0:           }
0:     }
0: 	public String getDintro() { return "-D"; }
1: 
0: 	protected void setSecurityProps()
0: 	{
0: 		System.out.println("Note: J9 tests do not run with security manager");		
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.j9_13
0: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
============================================================================