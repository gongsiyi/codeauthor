1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.LogicalUndoable
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A LogicalUndoable is a log operation that operates on the content of a page
1:eac0369: 	and the log operation needs logical undo.  This interface is used by
1:eac0369: 	LogicalUndo to extract information out of the log record, and to pass back
1:eac0369: 	to the logging system the real location where the roll back should happen.
1:eac0369: 	<P>
1:eac0369: 	It has specific page information such as its segment Id, container Id, page
1:eac0369: 	number, and it knows how to restore a storable row from the information
1:eac0369: 	stored in the log record.  
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.store.access.conglomerate.LogicalUndo
1:eac0369: */
1:eac0369: public interface LogicalUndoable extends Undoable
1:eac0369: {
1:eac0369: 	/** 
1:eac0369: 		Return the containerHandle used by this log operation.  Logical cannot
1:eac0369: 		change container identity between roll forward and roll back.  This
1:eac0369: 		method should only be called by LogicalUndo to extract information from
1:eac0369: 		the log record.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public ContainerHandle getContainer() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the recordHandle stored in the log operation that correspond to
1:eac0369: 		the record that was changed in the rollforward.  This method should
1:eac0369: 		only be called by LogicalUndo to extract information from the log
1:eac0369: 		record.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public RecordHandle getRecordHandle();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Restore the row stored in the log operation.   This method should only
1:eac0369: 		be called by LogicalUndo to extract information from the log record.
1:eac0369: 
1:eac0369: 		@param row an IN/OUT parameter, caller passed in the row with
1:eac0369: 		the correct column number and type, the log operation will restore the
1:eac0369: 		row with the optional data stored in the log record.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy
1:eac0369: 		@exception IOException Method may read from in
1:eac0369: 
1:eac0369: 		@see LogicalUndo
1:eac0369: 	*/
1:eac0369: 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
1:eac0369: 		throws StandardException, IOException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If the row has moved, reset the record handle that the undo should be applied on.
1:eac0369: 
1:eac0369: 		@param rh the RecordHandle that represents the row's new location
1:eac0369: 	*/
1:eac0369: 	public void resetRecordHandle(RecordHandle rh);
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.LogicalUndoable
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: import java.io.IOException;
1: 
1: /**
1: 	A LogicalUndoable is a log operation that operates on the content of a page
1: 	and the log operation needs logical undo.  This interface is used by
1: 	LogicalUndo to extract information out of the log record, and to pass back
1: 	to the logging system the real location where the roll back should happen.
1: 	<P>
1: 	It has specific page information such as its segment Id, container Id, page
1: 	number, and it knows how to restore a storable row from the information
1: 	stored in the log record.  
1: 
1: 	@see org.apache.derby.iapi.store.access.conglomerate.LogicalUndo
1: */
1: public interface LogicalUndoable extends Undoable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/** 
1: 		Return the containerHandle used by this log operation.  Logical cannot
1: 		change container identity between roll forward and roll back.  This
1: 		method should only be called by LogicalUndo to extract information from
1: 		the log record.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public ContainerHandle getContainer() throws StandardException;
1: 
1: 	/**
1: 		Return the recordHandle stored in the log operation that correspond to
1: 		the record that was changed in the rollforward.  This method should
1: 		only be called by LogicalUndo to extract information from the log
1: 		record.
1: 
1: 	*/
1: 	public RecordHandle getRecordHandle();
1: 
1: 	/**
1: 		Restore the row stored in the log operation.   This method should only
1: 		be called by LogicalUndo to extract information from the log record.
1: 
1: 		@param row an IN/OUT parameter, caller passed in the row with
1: 		the correct column number and type, the log operation will restore the
1: 		row with the optional data stored in the log record.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 		@exception IOException Method may read from in
1: 
1: 		@see LogicalUndo
1: 	*/
1: 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
1: 		throws StandardException, IOException;
1: 
1: 	/**
1: 		If the row has moved, reset the record handle that the undo should be applied on.
1: 
1: 		@param rh the RecordHandle that represents the row's new location
1: 	*/
1: 	public void resetRecordHandle(RecordHandle rh);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: import java.io.IOException;
0: 
0: /**
0: 	A LogicalUndoable is a log operation that operates on the content of a page
0: 	and the log operation needs logical undo.  This interface is used by
0: 	LogicalUndo to extract information out of the log record, and to pass back
0: 	to the logging system the real location where the roll back should happen.
0: 	<P>
0: 	It has specific page information such as its segment Id, container Id, page
0: 	number, and it knows how to restore a storable row from the information
0: 	stored in the log record.  
0: 
0: 	@see org.apache.derby.iapi.store.access.conglomerate.LogicalUndo
0: */
0: public interface LogicalUndoable extends Undoable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/** 
0: 		Return the containerHandle used by this log operation.  Logical cannot
0: 		change container identity between roll forward and roll back.  This
0: 		method should only be called by LogicalUndo to extract information from
0: 		the log record.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public ContainerHandle getContainer() throws StandardException;
0: 
0: 	/**
0: 		Return the recordHandle stored in the log operation that correspond to
0: 		the record that was changed in the rollforward.  This method should
0: 		only be called by LogicalUndo to extract information from the log
0: 		record.
0: 
0: 	*/
0: 	public RecordHandle getRecordHandle();
0: 
0: 	/**
0: 		Restore the row stored in the log operation.   This method should only
0: 		be called by LogicalUndo to extract information from the log record.
0: 
0: 		@param row an IN/OUT parameter, caller passed in the row with
0: 		the correct column number and type, the log operation will restore the
0: 		row with the optional data stored in the log record.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 		@exception IOException Method may read from in
0: 
0: 		@see LogicalUndo
0: 	*/
0: 	public void restoreLoggedRow(Object[] row, LimitObjectInput in)
0: 		throws StandardException, IOException;
0: 
0: 	/**
0: 		If the row has moved, reset the record handle that the undo should be applied on.
0: 
0: 		@param rh the RecordHandle that represents the row's new location
0: 	*/
0: 	public void resetRecordHandle(RecordHandle rh);
0: }
============================================================================