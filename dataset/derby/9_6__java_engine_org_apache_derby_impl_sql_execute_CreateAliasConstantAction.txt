1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.CreateAliasConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
19:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:3bb140c: import java.util.List;
1:78920ff: import org.apache.derby.catalog.AliasInfo;
1:78920ff: import org.apache.derby.catalog.UUID;
1:78920ff: import org.apache.derby.catalog.types.RoutineAliasInfo;
1:78920ff: import org.apache.derby.catalog.types.SynonymAliasInfo;
1:78920ff: import org.apache.derby.iapi.error.StandardException;
1:78920ff: import org.apache.derby.iapi.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:78920ff: import org.apache.derby.iapi.sql.Activation;
1:78920ff: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:582425f: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:78920ff: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:78920ff: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:78920ff: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
2:eac0369: /**
1:4112e91:  *	This class performs actions that are ALWAYS performed for a
1:78920ff:  *	CREATE FUNCTION, PROCEDURE or SYNONYM Statement at execution time.
1:4112e91:  *  These SQL objects are stored in the SYS.SYSALIASES table and
1:4112e91:  *  represented as AliasDescriptors.
2:eac0369:  *
1:eac0369:  */
1:eac0369: class CreateAliasConstantAction extends DDLConstantAction
12:eac0369: {
1:eac0369: 
1:eac0369: 	private final String					aliasName;
1:eac0369: 	private final String					schemaName;
1:eac0369: 	private final String					javaClassName;
1:eac0369: 	private final char					aliasType;
1:eac0369: 	private final char					nameSpace;
1:eac0369: 	private final AliasInfo				aliasInfo;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:78920ff: 	 *	Make the ConstantAction for a CREATE alias statement.
1:eac0369: 	 *
1:eac0369: 	 *  @param aliasName		Name of alias.
1:eac0369: 	 *  @param schemaName		Name of alias's schema.
1:eac0369: 	 *  @param javaClassName	Name of java class.
1:582425f: 	 *  @param aliasInfo		AliasInfo
1:eac0369: 	 *  @param aliasType		The type of the alias
1:eac0369: 	 */
1:eac0369: 	CreateAliasConstantAction(
1:eac0369: 								String	aliasName,
1:eac0369: 								String	schemaName,
1:eac0369: 								String	javaClassName,
1:eac0369: 								AliasInfo	aliasInfo,
1:eac0369: 								char	aliasType)
1:eac0369: 	{
1:eac0369: 		this.aliasName = aliasName;
1:eac0369: 		this.schemaName = schemaName;
1:eac0369: 		this.javaClassName = javaClassName;
1:eac0369: 		this.aliasInfo = aliasInfo;
1:eac0369: 		this.aliasType = aliasType;
2:eac0369: 		switch (aliasType)
1:eac0369: 		{
1:22d64f5: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1:22d64f5: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR;
1:22d64f5: 				break;
1:22d64f5: 
2:eac0369: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1:eac0369: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
1:eac0369: 				break;
1:22d64f5: 
2:eac0369: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1:eac0369: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR;
1:eac0369: 				break;
1:eac0369: 
1:582425f: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1:582425f: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_SYNONYM_AS_CHAR;
1:eac0369: 				break;
1:eac0369: 
1:fa292b9: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1:fa292b9: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_CHAR;
1:fa292b9: 				break;
1:fa292b9: 
2:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT(
1:eac0369: 						"Unexpected value for aliasType (" + aliasType + ")");
13:eac0369: 				}
1:eac0369: 				nameSpace = '\0';
1:eac0369: 				break;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// OBJECT SHADOWS
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		// Do not put this under SanityManager.DEBUG - it is needed for
1:eac0369: 		// error reporting.
1:eac0369: 		String type = null;
1:eac0369: 
1:eac0369: 		switch (aliasType)
1:eac0369: 		{
1:22d64f5: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1:22d64f5: 				type = "CREATE DERBY AGGREGATE ";
1:22d64f5: 				break;
1:22d64f5: 
1:eac0369: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1:eac0369: 				type = "CREATE PROCEDURE ";
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1:eac0369: 				type = "CREATE FUNCTION ";
1:eac0369: 				break;
1:eac0369: 
1:582425f: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1:582425f: 				type = "CREATE SYNONYM ";
1:eac0369: 				break;
1:eac0369: 
1:fa292b9: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1:fa292b9: 				type = "CREATE TYPE ";
1:fa292b9: 				break;
1:fa292b9: 
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT(
1:eac0369: 						"Unexpected value for aliasType (" + aliasType + ")");
1:eac0369: 				}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return	type + aliasName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:78920ff: 	 *	This is the guts of the Execution-time logic for
1:fa292b9:      *  CREATE FUNCTION, PROCEDURE, SYNONYM, and TYPE.
1:4112e91:      *  <P>
1:fa292b9:      *  A function, procedure, or udt is represented as:
1:4112e91:      *  <UL>
1:4112e91:      *  <LI> AliasDescriptor
1:4112e91:      *  </UL>
1:4112e91:      *  Routine dependencies are created as:
1:4112e91:      *  <UL>
1:4112e91:      *  <LI> None
1:4112e91:      *  </UL>
1:4112e91:      *  
1:4112e91:      *  <P>
1:4112e91:      *  A synonym is represented as:
1:4112e91:      *  <UL>
1:4112e91:      *  <LI> AliasDescriptor
1:4112e91:      *  <LI> TableDescriptor
1:4112e91:      *  </UL>
1:4112e91:      *  Synonym dependencies are created as:
1:4112e91:      *  <UL>
1:4112e91:      *  <LI> None
1:4112e91:      *  </UL>
1:4112e91:      *  
1:4112e91:      *  In both cases a SchemaDescriptor will be created if
1:4112e91:      *  needed. No dependency is created on the SchemaDescriptor.
1:4112e91:      *  
1:4112e91: 	 * @see ConstantAction#executeConstantAction
1:4112e91:      * @see AliasDescriptor
1:4112e91:      * @see TableDescriptor
1:4112e91:      * @see SchemaDescriptor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:78920ff: 		LanguageConnectionContext lcc =
1:78920ff:             activation.getLanguageConnectionContext();
1:78920ff: 
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:582425f: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:78920ff: 		// For routines no validity checking is made
1:78920ff:         // on the Java method, that is checked when the
1:78920ff:         // routine is executed.
1:78920ff:         
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		
1:78920ff: 		SchemaDescriptor sd =
1:78920ff:             DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
1:eac0369: 
1:eac0369: 		//
1:fa292b9: 		// Create a new alias descriptor with aliasID filled in.
1:eac0369: 		// 
1:eac0369: 		UUID aliasID = dd.getUUIDFactory().createUUID();
1:eac0369: 
1:eac0369: 		AliasDescriptor ads = new AliasDescriptor(dd, aliasID,
1:eac0369: 									 aliasName,
1:78920ff: 									 sd.getUUID(),
1:eac0369: 									 javaClassName,
1:eac0369: 									 aliasType,
1:eac0369: 									 nameSpace,
1:eac0369: 									 false,
1:eac0369: 									 aliasInfo, null);
1:eac0369: 
1:582425f: 		// perform duplicate rule checking
1:22d64f5:         switch (aliasType)
1:22d64f5:         {
1:22d64f5:         case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1:22d64f5: 
1:22d64f5:             AliasDescriptor duplicateAlias = dd.getAliasDescriptor( sd.getUUID().toString(), aliasName, nameSpace );
1:22d64f5:             if ( duplicateAlias != null )
1:22d64f5:             {
1:22d64f5:                 throw StandardException.newException( SQLState.LANG_OBJECT_ALREADY_EXISTS, ads.getDescriptorType(), aliasName );
1:22d64f5:             }
1:22d64f5: 
1:22d64f5:             // also don't want to collide with 1-arg functions by the same name
1:3bb140c:             List<AliasDescriptor> funcList =
1:3bb140c:                 dd.getRoutineList(sd.getUUID().toString(),
1:3bb140c:                                   aliasName,
1:3bb140c:                                   AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR);
1:3bb140c: 
1:22d64f5:             for ( int i = 0; i < funcList.size(); i++ )
1:22d64f5:             {
1:3bb140c:                 AliasDescriptor func = funcList.get(i);
1:22d64f5: 
1:22d64f5: 				RoutineAliasInfo funcInfo = (RoutineAliasInfo) func.getAliasInfo();
1:22d64f5:                 if ( funcInfo.getParameterCount() == 1 )
1:22d64f5:                 {
1:22d64f5:                     throw StandardException.newException
1:22d64f5:                         ( SQLState.LANG_BAD_UDA_OR_FUNCTION_NAME, schemaName, aliasName );
1:22d64f5:                 }
1:22d64f5: 			}
1:22d64f5:             
1:22d64f5:             break;
1:22d64f5:             
1:fa292b9: 		case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1:fa292b9: 
1:fa292b9:             AliasDescriptor duplicateUDT = dd.getAliasDescriptor( sd.getUUID().toString(), aliasName, nameSpace );
1:fa292b9:             if ( duplicateUDT != null ) { throw StandardException.newException( SQLState.LANG_OBJECT_ALREADY_EXISTS, ads.getDescriptorType(), aliasName ); }
1:fa292b9:             break;
1:fa292b9:             
1:eac0369: 		case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1:eac0369: 
1:22d64f5:             vetRoutine( dd, sd, ads );
1:22d64f5:             break;
1:22d64f5:             
1:eac0369: 		case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1:eac0369: 
1:22d64f5:             vetRoutine( dd, sd, ads );
1:eac0369: 
1:22d64f5:             // if this is a 1-arg function, make sure there isn't an aggregate
1:22d64f5:             // by the same qualified name
1:eac0369: 
1:22d64f5:             int paramCount = ((RoutineAliasInfo) aliasInfo).getParameterCount();
1:22d64f5:             if ( paramCount == 1 )
1:22d64f5:             {
1:22d64f5:                 AliasDescriptor aliasCollision = dd.getAliasDescriptor
1:22d64f5:                     ( sd.getUUID().toString(), aliasName, AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR );
1:22d64f5:                 if ( aliasCollision != null )
1:22d64f5:                 {
1:22d64f5:                     throw StandardException.newException
1:22d64f5:                         ( SQLState.LANG_BAD_UDA_OR_FUNCTION_NAME, schemaName, aliasName );
1:22d64f5:                 }
1:22d64f5:             }
1:22d64f5:             
1:22d64f5:             break;
1:eac0369: 
1:582425f: 		case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1:582425f: 			// If target table/view exists already, error.
1:0978789: 			TableDescriptor targetTD = dd.getTableDescriptor(aliasName, sd, tc);
1:582425f: 			if (targetTD != null)
1:eac0369: 			{
1:582425f: 				throw StandardException.newException(
1:582425f: 								SQLState.LANG_OBJECT_ALREADY_EXISTS,
1:582425f: 								targetTD.getDescriptorType(),
1:582425f: 								targetTD.getDescriptorName());
1:eac0369: 			}
1:eac0369: 
1:582425f: 			// Detect synonym cycles, if present.
1:582425f: 			String nextSynTable = ((SynonymAliasInfo)aliasInfo).getSynonymTable();
1:582425f: 			String nextSynSchema = ((SynonymAliasInfo)aliasInfo).getSynonymSchema();
1:582425f: 			SchemaDescriptor nextSD;
1:582425f: 			for (;;)
1:eac0369: 			{
1:582425f: 				nextSD = dd.getSchemaDescriptor(nextSynSchema, tc, false);
1:582425f: 				if (nextSD == null)
1:eac0369: 					break;
1:eac0369: 				
1:582425f: 				AliasDescriptor nextAD = dd.getAliasDescriptor(nextSD.getUUID().toString(),
1:582425f: 						 nextSynTable, nameSpace);
1:582425f: 				if (nextAD == null)
1:eac0369: 					break;
1:eac0369: 
1:582425f: 				SynonymAliasInfo info = (SynonymAliasInfo) nextAD.getAliasInfo();
1:582425f: 				nextSynTable = info.getSynonymTable();
1:582425f: 				nextSynSchema = info.getSynonymSchema();
1:eac0369: 
1:582425f: 				if (aliasName.equals(nextSynTable) && schemaName.equals(nextSynSchema))
1:582425f: 					throw StandardException.newException(SQLState.LANG_SYNONYM_CIRCULAR,
1:582425f: 							aliasName, ((SynonymAliasInfo)aliasInfo).getSynonymTable());
1:eac0369: 			}
1:eac0369: 
1:582425f: 			// If synonym final target is not present, raise a warning
1:582425f: 			if (nextSD != null)
1:0978789: 				targetTD = dd.getTableDescriptor(nextSynTable, nextSD, tc);
1:582425f: 			if (nextSD == null || targetTD == null)
1:582425f: 				activation.addWarning(
1:582425f: 					StandardException.newWarning(SQLState.LANG_SYNONYM_UNDEFINED,
1:582425f: 								aliasName, nextSynSchema+"."+nextSynTable));
1:eac0369: 
1:582425f: 			// To prevent any possible deadlocks with SYSTABLES, we insert a row into
1:582425f: 			// SYSTABLES also for synonyms. This also ensures tables/views/synonyms share
1:582425f: 			// same namespace
1:582425f: 			TableDescriptor td;
1:582425f: 			DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:582425f: 			td = ddg.newTableDescriptor(aliasName, sd, TableDescriptor.SYNONYM_TYPE,
1:582425f: 						TableDescriptor.DEFAULT_LOCK_GRANULARITY);
1:582425f: 			dd.addDescriptor(td, sd, DataDictionary.SYSTABLES_CATALOG_NUM, false, tc);
1:78920ff:             break;
1:eac0369: 		
1:eac0369: 		default:
1:582425f: 			break;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		dd.addDescriptor(ads, null, DataDictionary.SYSALIASES_CATALOG_NUM,
1:4112e91: 						 false, tc);
1:2209325: 
1:2209325:         adjustUDTDependencies( lcc, dd, ads, true );
1:eac0369: 	}
1:22d64f5: 
1:22d64f5:     /** Common checks to be performed for functions and procedures */
1:22d64f5:     private void    vetRoutine
1:22d64f5:         (
1:22d64f5:          DataDictionary dd,
1:22d64f5:          SchemaDescriptor sd,
1:22d64f5:          AliasDescriptor ads
1:22d64f5:          )
1:22d64f5:         throws StandardException
1:22d64f5:     {
1:3bb140c:         List<AliasDescriptor> list = dd.getRoutineList(
1:3bb140c:             sd.getUUID().toString(), aliasName, aliasType);
1:22d64f5:         
1:22d64f5:         for (int i = list.size() - 1; i >= 0; i--)
1:22d64f5:         {
1:3bb140c:             AliasDescriptor proc = list.get(i);
1:22d64f5:             
1:22d64f5:             RoutineAliasInfo procedureInfo = (RoutineAliasInfo) proc.getAliasInfo();
1:22d64f5:             int parameterCount = procedureInfo.getParameterCount();
1:22d64f5:             if (parameterCount != ((RoutineAliasInfo) aliasInfo).getParameterCount())
1:22d64f5:             { continue; }
1:22d64f5:             
1:22d64f5:             // procedure duplicate checking is simple, only
1:22d64f5:             // one procedure with a given number of parameters.
1:22d64f5:             throw StandardException.newException
1:22d64f5:                 (
1:22d64f5:                  SQLState.LANG_OBJECT_ALREADY_EXISTS,
1:22d64f5:                  ads.getDescriptorType(),
1:22d64f5:                  aliasName
1:22d64f5:                  );
1:22d64f5:         }
1:22d64f5:     }
1:22d64f5:         
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:             List<AliasDescriptor> funcList =
1:                 dd.getRoutineList(sd.getUUID().toString(),
1:                                   aliasName,
1:                                   AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR);
1: 
1:                 AliasDescriptor func = funcList.get(i);
/////////////////////////////////////////////////////////////////////////
1:         List<AliasDescriptor> list = dd.getRoutineList(
1:             sd.getUUID().toString(), aliasName, aliasType);
1:             AliasDescriptor proc = list.get(i);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:22d64f5
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR;
1: 				break;
1: 
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1: 				type = "CREATE DERBY AGGREGATE ";
1: 				break;
1: 
/////////////////////////////////////////////////////////////////////////
1:         switch (aliasType)
1:         {
1:         case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
1: 
1:             AliasDescriptor duplicateAlias = dd.getAliasDescriptor( sd.getUUID().toString(), aliasName, nameSpace );
1:             if ( duplicateAlias != null )
1:             {
1:                 throw StandardException.newException( SQLState.LANG_OBJECT_ALREADY_EXISTS, ads.getDescriptorType(), aliasName );
1:             }
1: 
1:             // also don't want to collide with 1-arg functions by the same name
0:             java.util.List funcList = dd.getRoutineList( sd.getUUID().toString(), aliasName, AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR );
1:             for ( int i = 0; i < funcList.size(); i++ )
1:             {
0: 				AliasDescriptor func = (AliasDescriptor) funcList.get(i);
1: 
1: 				RoutineAliasInfo funcInfo = (RoutineAliasInfo) func.getAliasInfo();
1:                 if ( funcInfo.getParameterCount() == 1 )
1:                 {
1:                     throw StandardException.newException
1:                         ( SQLState.LANG_BAD_UDA_OR_FUNCTION_NAME, schemaName, aliasName );
1:                 }
1: 			}
1:             
1:             break;
1:             
/////////////////////////////////////////////////////////////////////////
1: 
1:             vetRoutine( dd, sd, ads );
1:             break;
1:             
1:             vetRoutine( dd, sd, ads );
1:             // if this is a 1-arg function, make sure there isn't an aggregate
1:             // by the same qualified name
1:             int paramCount = ((RoutineAliasInfo) aliasInfo).getParameterCount();
1:             if ( paramCount == 1 )
1:             {
1:                 AliasDescriptor aliasCollision = dd.getAliasDescriptor
1:                     ( sd.getUUID().toString(), aliasName, AliasInfo.ALIAS_NAME_SPACE_AGGREGATE_AS_CHAR );
1:                 if ( aliasCollision != null )
1:                 {
1:                     throw StandardException.newException
1:                         ( SQLState.LANG_BAD_UDA_OR_FUNCTION_NAME, schemaName, aliasName );
1:                 }
1:             }
1:             
1:             break;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Common checks to be performed for functions and procedures */
1:     private void    vetRoutine
1:         (
1:          DataDictionary dd,
1:          SchemaDescriptor sd,
1:          AliasDescriptor ads
1:          )
1:         throws StandardException
1:     {
0:         java.util.List list = dd.getRoutineList( sd.getUUID().toString(), aliasName, aliasType );
1:         
1:         for (int i = list.size() - 1; i >= 0; i--)
1:         {
0:             AliasDescriptor proc = (AliasDescriptor) list.get(i);
1:             
1:             RoutineAliasInfo procedureInfo = (RoutineAliasInfo) proc.getAliasInfo();
1:             int parameterCount = procedureInfo.getParameterCount();
1:             if (parameterCount != ((RoutineAliasInfo) aliasInfo).getParameterCount())
1:             { continue; }
1:             
1:             // procedure duplicate checking is simple, only
1:             // one procedure with a given number of parameters.
1:             throw StandardException.newException
1:                 (
1:                  SQLState.LANG_OBJECT_ALREADY_EXISTS,
1:                  ads.getDescriptorType(),
1:                  aliasName
1:                  );
1:         }
1:     }
1:         
commit:2209325
/////////////////////////////////////////////////////////////////////////
1: 
1:         adjustUDTDependencies( lcc, dd, ads, true );
commit:fa292b9
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_CHAR;
1: 				break;
1: 
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1: 				type = "CREATE TYPE ";
1: 				break;
1: 
/////////////////////////////////////////////////////////////////////////
1:      *  CREATE FUNCTION, PROCEDURE, SYNONYM, and TYPE.
1:      *  A function, procedure, or udt is represented as:
/////////////////////////////////////////////////////////////////////////
1: 		// Create a new alias descriptor with aliasID filled in.
/////////////////////////////////////////////////////////////////////////
1: 		case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1: 
1:             AliasDescriptor duplicateUDT = dd.getAliasDescriptor( sd.getUUID().toString(), aliasName, nameSpace );
1:             if ( duplicateUDT != null ) { throw StandardException.newException( SQLState.LANG_OBJECT_ALREADY_EXISTS, ads.getDescriptorType(), aliasName ); }
1:             break;
1:             
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:0978789
/////////////////////////////////////////////////////////////////////////
1: 			TableDescriptor targetTD = dd.getTableDescriptor(aliasName, sd, tc);
/////////////////////////////////////////////////////////////////////////
1: 				targetTD = dd.getTableDescriptor(nextSynTable, nextSD, tc);
commit:4112e91
/////////////////////////////////////////////////////////////////////////
1:  *	This class performs actions that are ALWAYS performed for a
1:  *  These SQL objects are stored in the SYS.SYSALIASES table and
1:  *  represented as AliasDescriptors.
/////////////////////////////////////////////////////////////////////////
1:      *  <P>
0:      *  A routine (function or procedure) is represented as:
1:      *  <UL>
1:      *  <LI> AliasDescriptor
1:      *  </UL>
1:      *  Routine dependencies are created as:
1:      *  <UL>
1:      *  <LI> None
1:      *  </UL>
1:      *  
1:      *  <P>
1:      *  A synonym is represented as:
1:      *  <UL>
1:      *  <LI> AliasDescriptor
1:      *  <LI> TableDescriptor
1:      *  </UL>
1:      *  Synonym dependencies are created as:
1:      *  <UL>
1:      *  <LI> None
1:      *  </UL>
1:      *  
1:      *  In both cases a SchemaDescriptor will be created if
1:      *  needed. No dependency is created on the SchemaDescriptor.
1:      *  
1: 	 * @see ConstantAction#executeConstantAction
1:      * @see AliasDescriptor
1:      * @see TableDescriptor
1:      * @see SchemaDescriptor
/////////////////////////////////////////////////////////////////////////
1: 						 false, tc);
commit:78920ff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.AliasInfo;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.types.RoutineAliasInfo;
1: import org.apache.derby.catalog.types.SynonymAliasInfo;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.store.access.TransactionController;
1:  *	CREATE FUNCTION, PROCEDURE or SYNONYM Statement at execution time.
0:  *  These SQL objects are stored in the SYS.SYSALIASES table.
/////////////////////////////////////////////////////////////////////////
1: 	 *	Make the ConstantAction for a CREATE alias statement.
/////////////////////////////////////////////////////////////////////////
1: 	 *	This is the guts of the Execution-time logic for
0:      *  CREATE FUNCTION, PROCEDURE or SYNONYM.
0:      *  Each will result in a row inserted into SYS.SYSALIASES.
/////////////////////////////////////////////////////////////////////////
1: 		LanguageConnectionContext lcc =
1:             activation.getLanguageConnectionContext();
1: 
1: 		// For routines no validity checking is made
1:         // on the Java method, that is checked when the
1:         // routine is executed.
1:         
/////////////////////////////////////////////////////////////////////////
1: 		SchemaDescriptor sd =
1:             DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
/////////////////////////////////////////////////////////////////////////
1: 									 sd.getUUID(),
/////////////////////////////////////////////////////////////////////////
1:             break;
commit:2542f1d
/////////////////////////////////////////////////////////////////////////
0: 			catch (ClassNotFoundException t)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.CreateAliasConstantAction
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.context.ContextService;
1: 
0: import org.apache.derby.catalog.UUID;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.catalog.AliasInfo;
0: import org.apache.derby.catalog.types.RoutineAliasInfo;
1: 
0: import java.lang.reflect.Method;
0: import java.lang.reflect.Modifier;
1: 
1: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	CREATE ALIAS Statement at Execution time.
1:  *
0:  *	@author Jerry Brenner.
1:  */
1: class CreateAliasConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	private final String					aliasName;
1: 	private final String					schemaName;
1: 	private final String					javaClassName;
1: 	private final char					aliasType;
1: 	private final char					nameSpace;
1: 	private final AliasInfo				aliasInfo;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
0: 	 *	Make the ConstantAction for a CREATE ALIAS statement.
1: 	 *
1: 	 *  @param aliasName		Name of alias.
1: 	 *  @param schemaName		Name of alias's schema.
1: 	 *  @param javaClassName	Name of java class.
0: 	 *  @param methodName		Name of method.
0: 	 *  @param targetClassName	Name of java class at Target database.
0: 	 *  @param targetMethodName	Name of method at Target database.
1: 	 *  @param aliasType		The type of the alias
1: 	 */
1: 	CreateAliasConstantAction(
1: 								String	aliasName,
1: 								String	schemaName,
1: 								String	javaClassName,
1: 								AliasInfo	aliasInfo,
1: 								char	aliasType)
1: 	{
1: 		this.aliasName = aliasName;
1: 		this.schemaName = schemaName;
1: 		this.javaClassName = javaClassName;
1: 		this.aliasInfo = aliasInfo;
1: 		this.aliasType = aliasType;
1: 		switch (aliasType)
1: 		{
1: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
1: 				break;
1: 
1: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR;
1: 				break;
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT(
1: 						"Unexpected value for aliasType (" + aliasType + ")");
1: 				}
1: 				nameSpace = '\0';
1: 				break;
1: 		}
1: 	}
1: 
1: 	// OBJECT SHADOWS
1: 
1: 	public	String	toString()
1: 	{
1: 		// Do not put this under SanityManager.DEBUG - it is needed for
1: 		// error reporting.
1: 		String type = null;
1: 
1: 		switch (aliasType)
1: 		{
1: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1: 				type = "CREATE PROCEDURE ";
1: 				break;
1: 
1: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1: 				type = "CREATE FUNCTION ";
1: 				break;
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT(
1: 						"Unexpected value for aliasType (" + aliasType + ")");
1: 				}
1: 		}
1: 
1: 		return	type + aliasName;
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
0: 	 *	This is the guts of the Execution-time logic for CREATE ALIAS.
1: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
0: 		LanguageConnectionContext lcc;
0: 		if (activation != null)
1: 		{
0: 			lcc = activation.getLanguageConnectionContext();
1: 		}
0: 		else // only for direct executions by the database meta data
1: 		{
0: 			lcc = (LanguageConnectionContext) ContextService.getContext
0:           				(LanguageConnectionContext.CONTEXT_ID);
1: 		}
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 
0: 		/* Verify the method alias:
0: 		**		Aggregates - just verify the class
0: 		**		Method alias - verify the class and method
0: 		**		Work units - verify the class and method 
0: 		**				(depends on whether we're at a source or target)
1: 		*/
0: 		String checkMethodName = null;
1: 
1: 			
0: 		String checkClassName = javaClassName;
1: 
0: 		if (aliasInfo != null)
0: 			checkMethodName = aliasInfo.getMethodName();
1: 
0: 		// Procedures do not check class or method validity until runtime execution of the procedure.
0: 		// This matches DB2 behaviour
1: 		switch (aliasType)
1: 		{
1: 		case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1: 		case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1: 			break;
1: 		default:
1: 		{
1: 
0: 			ClassFactory cf = lcc.getLanguageConnectionFactory().getClassFactory();
1: 
0: 			Class realClass = null;
0: 			try
1: 			{
0: 				// Does the class exist?
0: 				realClass = cf.loadApplicationClass(checkClassName);
1: 			}
0: 			catch (Throwable t)
1: 			{
0: 				throw StandardException.newException(SQLState.LANG_TYPE_DOESNT_EXIST2, t, checkClassName);
1: 			}
1: 
0: 			if (! Modifier.isPublic(realClass.getModifiers()))
1: 			{
0: 				throw StandardException.newException(SQLState.LANG_TYPE_DOESNT_EXIST2, checkClassName);
1: 			}
1: 
0: 			if (checkMethodName != null)
1: 			{
0: 				// Is the method public and static
0: 				Method[] methods = realClass.getMethods();
1: 				
0: 				int index = 0;
0: 				for ( ; index < methods.length; index++) 
1: 				{
0: 					if (!Modifier.isStatic(methods[index].getModifiers()))
1: 					{
0: 						continue;
1: 					}
1: 
0: 					if (checkMethodName.equals(methods[index].getName())) 
1: 					{
1: 						break;
1: 					}
1: 				}
1: 
0: 				if (index == methods.length)
1: 				{
0: 					throw StandardException.newException(SQLState.LANG_NO_METHOD_MATCHING_ALIAS, 
0: 									checkMethodName, checkClassName);
1: 				}
1: 			}
1: 		}
1: 		}
1: 			
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
1: 		
0: 		SchemaDescriptor sd = null;
0: 		if (activation == null)
0: 			sd = dd.getSysIBMSchemaDescriptor();
0: 		else if (schemaName != null)
0: 			sd = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
1: 
1: 		//
0: 		// Create a new method alias descriptor with aliasID filled in.
1: 		// 
1: 		UUID aliasID = dd.getUUIDFactory().createUUID();
1: 
1: 		AliasDescriptor ads = new AliasDescriptor(dd, aliasID,
1: 									 aliasName,
0: 									 sd != null ? sd.getUUID() : null,
1: 									 javaClassName,
1: 									 aliasType,
1: 									 nameSpace,
1: 									 false,
1: 									 aliasInfo, null);
1: 
0: 		// perform duplicate rule checking for routine
0: 		switch (aliasType) {
1: 		case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1: 		case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1: 		{
1: 
0: 			java.util.List list = dd.getRoutineList(
0: 				sd.getUUID().toString(), aliasName, aliasType);
0: 			for (int i = list.size() - 1; i >= 0; i--) {
1: 
0: 				AliasDescriptor proc = (AliasDescriptor) list.get(i);
1: 
0: 				RoutineAliasInfo procedureInfo = (RoutineAliasInfo) proc.getAliasInfo();
0: 				int parameterCount = procedureInfo.getParameterCount();
0: 				if (parameterCount != ((RoutineAliasInfo) aliasInfo).getParameterCount())
0: 					continue;
1: 
0: 				// procedure duplicate checking is simple, only
0: 				// one procedure with a given number of parameters.
0: 				throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
0: 												ads.getDescriptorType(),
0: 												aliasName);
1: 			}
1: 		}
1: 		break;
1: 		default:
1: 			break;
1: 		}
1: 
1: 		dd.addDescriptor(ads, null, DataDictionary.SYSALIASES_CATALOG_NUM,
0: 						 false, lcc.getTransactionExecute());
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:582425f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.catalog.types.SynonymAliasInfo;
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param aliasInfo		AliasInfo
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_SYNONYM_AS_CHAR;
1: 				break;
0: 
/////////////////////////////////////////////////////////////////////////
1: 			case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1: 				type = "CREATE SYNONYM ";
0: 				break;
0: 
/////////////////////////////////////////////////////////////////////////
1: 		TransactionController tc = lcc.getTransactionExecute();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
0: 
/////////////////////////////////////////////////////////////////////////
1: 		// perform duplicate rule checking
/////////////////////////////////////////////////////////////////////////
0: 		case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1: 			// If target table/view exists already, error.
0: 			TableDescriptor targetTD = dd.getTableDescriptor(aliasName, sd);
1: 			if (targetTD != null)
0: 			{
1: 				throw StandardException.newException(
1: 								SQLState.LANG_OBJECT_ALREADY_EXISTS,
1: 								targetTD.getDescriptorType(),
1: 								targetTD.getDescriptorName());
0: 			}
0: 
1: 			// Detect synonym cycles, if present.
1: 			String nextSynTable = ((SynonymAliasInfo)aliasInfo).getSynonymTable();
1: 			String nextSynSchema = ((SynonymAliasInfo)aliasInfo).getSynonymSchema();
1: 			SchemaDescriptor nextSD;
1: 			for (;;)
0: 			{
1: 				nextSD = dd.getSchemaDescriptor(nextSynSchema, tc, false);
1: 				if (nextSD == null)
0: 					break;
0: 				
1: 				AliasDescriptor nextAD = dd.getAliasDescriptor(nextSD.getUUID().toString(),
1: 						 nextSynTable, nameSpace);
1: 				if (nextAD == null)
0: 					break;
0: 
1: 				SynonymAliasInfo info = (SynonymAliasInfo) nextAD.getAliasInfo();
1: 				nextSynTable = info.getSynonymTable();
1: 				nextSynSchema = info.getSynonymSchema();
0: 
1: 				if (aliasName.equals(nextSynTable) && schemaName.equals(nextSynSchema))
1: 					throw StandardException.newException(SQLState.LANG_SYNONYM_CIRCULAR,
1: 							aliasName, ((SynonymAliasInfo)aliasInfo).getSynonymTable());
0: 			}
0: 
1: 			// If synonym final target is not present, raise a warning
1: 			if (nextSD != null)
0: 				targetTD = dd.getTableDescriptor(nextSynTable, nextSD);
1: 			if (nextSD == null || targetTD == null)
1: 				activation.addWarning(
1: 					StandardException.newWarning(SQLState.LANG_SYNONYM_UNDEFINED,
1: 								aliasName, nextSynSchema+"."+nextSynTable));
0: 
1: 			// To prevent any possible deadlocks with SYSTABLES, we insert a row into
1: 			// SYSTABLES also for synonyms. This also ensures tables/views/synonyms share
1: 			// same namespace
1: 			TableDescriptor td;
1: 			DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 			td = ddg.newTableDescriptor(aliasName, sd, TableDescriptor.SYNONYM_TYPE,
1: 						TableDescriptor.DEFAULT_LOCK_GRANULARITY);
1: 			dd.addDescriptor(td, sd, DataDictionary.SYSTABLES_CATALOG_NUM, false, tc);
0: 		
/////////////////////////////////////////////////////////////////////////
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.AliasInfo;
0: import org.apache.derby.catalog.types.RoutineAliasInfo;
0: 
0: import java.lang.reflect.Method;
0: import java.lang.reflect.Modifier;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	CREATE ALIAS Statement at Execution time.
0:  *
0:  *	@author Jerry Brenner.
0:  */
0: class CreateAliasConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	private final String					aliasName;
0: 	private final String					schemaName;
0: 	private final String					javaClassName;
0: 	private final char					aliasType;
0: 	private final char					nameSpace;
0: 	private final AliasInfo				aliasInfo;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 *	Make the ConstantAction for a CREATE ALIAS statement.
0: 	 *
0: 	 *  @param aliasName		Name of alias.
0: 	 *  @param schemaName		Name of alias's schema.
0: 	 *  @param javaClassName	Name of java class.
0: 	 *  @param methodName		Name of method.
0: 	 *  @param targetClassName	Name of java class at Target database.
0: 	 *  @param targetMethodName	Name of method at Target database.
0: 	 *  @param aliasType		The type of the alias
0: 	 */
0: 	CreateAliasConstantAction(
0: 								String	aliasName,
0: 								String	schemaName,
0: 								String	javaClassName,
0: 								AliasInfo	aliasInfo,
0: 								char	aliasType)
0: 	{
0: 		this.aliasName = aliasName;
0: 		this.schemaName = schemaName;
0: 		this.javaClassName = javaClassName;
0: 		this.aliasInfo = aliasInfo;
0: 		this.aliasType = aliasType;
0: 		switch (aliasType)
0: 		{
0: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
0: 				break;
0: 
0: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 				nameSpace = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR;
0: 				break;
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected value for aliasType (" + aliasType + ")");
0: 				}
0: 				nameSpace = '\0';
0: 				break;
0: 		}
0: 	}
0: 
0: 	// OBJECT SHADOWS
0: 
0: 	public	String	toString()
0: 	{
0: 		// Do not put this under SanityManager.DEBUG - it is needed for
0: 		// error reporting.
0: 		String type = null;
0: 
0: 		switch (aliasType)
0: 		{
0: 			case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 				type = "CREATE PROCEDURE ";
0: 				break;
0: 
0: 			case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 				type = "CREATE FUNCTION ";
0: 				break;
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"Unexpected value for aliasType (" + aliasType + ")");
0: 				}
0: 		}
0: 
0: 		return	type + aliasName;
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for CREATE ALIAS.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		LanguageConnectionContext lcc;
0: 		if (activation != null)
0: 		{
0: 			lcc = activation.getLanguageConnectionContext();
0: 		}
0: 		else // only for direct executions by the database meta data
0: 		{
0: 			lcc = (LanguageConnectionContext) ContextService.getContext
0:           				(LanguageConnectionContext.CONTEXT_ID);
0: 		}
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 
0: 		/* Verify the method alias:
0: 		**		Aggregates - just verify the class
0: 		**		Method alias - verify the class and method
0: 		**		Work units - verify the class and method 
0: 		**				(depends on whether we're at a source or target)
0: 		*/
0: 		String checkMethodName = null;
0: 
0: 			
0: 		String checkClassName = javaClassName;
0: 
0: 		if (aliasInfo != null)
0: 			checkMethodName = aliasInfo.getMethodName();
0: 
0: 		// Procedures do not check class or method validity until runtime execution of the procedure.
0: 		// This matches DB2 behaviour
0: 		switch (aliasType)
0: 		{
0: 		case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 		case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 			break;
0: 		default:
0: 		{
0: 
0: 			ClassFactory cf = lcc.getLanguageConnectionFactory().getClassFactory();
0: 
0: 			Class realClass = null;
0: 			try
0: 			{
0: 				// Does the class exist?
0: 				realClass = cf.loadApplicationClass(checkClassName);
0: 			}
0: 			catch (Throwable t)
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_TYPE_DOESNT_EXIST2, t, checkClassName);
0: 			}
0: 
0: 			if (! Modifier.isPublic(realClass.getModifiers()))
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_TYPE_DOESNT_EXIST2, checkClassName);
0: 			}
0: 
0: 			if (checkMethodName != null)
0: 			{
0: 				// Is the method public and static
0: 				Method[] methods = realClass.getMethods();
0: 				
0: 				int index = 0;
0: 				for ( ; index < methods.length; index++) 
0: 				{
0: 					if (!Modifier.isStatic(methods[index].getModifiers()))
0: 					{
0: 						continue;
0: 					}
0: 
0: 					if (checkMethodName.equals(methods[index].getName())) 
0: 					{
0: 						break;
0: 					}
0: 				}
0: 
0: 				if (index == methods.length)
0: 				{
0: 					throw StandardException.newException(SQLState.LANG_NO_METHOD_MATCHING_ALIAS, 
0: 									checkMethodName, checkClassName);
0: 				}
0: 			}
0: 		}
0: 		}
0: 			
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		
0: 		SchemaDescriptor sd = null;
0: 		if (activation == null)
0: 			sd = dd.getSysIBMSchemaDescriptor();
0: 		else if (schemaName != null)
0: 			sd = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
0: 
0: 		//
0: 		// Create a new method alias descriptor with aliasID filled in.
0: 		// 
0: 		UUID aliasID = dd.getUUIDFactory().createUUID();
0: 
0: 		AliasDescriptor ads = new AliasDescriptor(dd, aliasID,
0: 									 aliasName,
0: 									 sd != null ? sd.getUUID() : null,
0: 									 javaClassName,
0: 									 aliasType,
0: 									 nameSpace,
0: 									 false,
0: 									 aliasInfo, null);
0: 
0: 		// perform duplicate rule checking for routine
0: 		switch (aliasType) {
0: 		case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 		case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 		{
0: 
0: 			java.util.List list = dd.getRoutineList(
0: 				sd.getUUID().toString(), aliasName, aliasType);
0: 			for (int i = list.size() - 1; i >= 0; i--) {
0: 
0: 				AliasDescriptor proc = (AliasDescriptor) list.get(i);
0: 
0: 				RoutineAliasInfo procedureInfo = (RoutineAliasInfo) proc.getAliasInfo();
0: 				int parameterCount = procedureInfo.getParameterCount();
0: 				if (parameterCount != ((RoutineAliasInfo) aliasInfo).getParameterCount())
0: 					continue;
0: 
0: 				// procedure duplicate checking is simple, only
0: 				// one procedure with a given number of parameters.
0: 				throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
0: 												ads.getDescriptorType(),
0: 												aliasName);
0: 			}
0: 		}
0: 		break;
0: 		default:
0: 			break;
0: 		}
0: 
0: 		dd.addDescriptor(ads, null, DataDictionary.SYSALIASES_CATALOG_NUM,
0: 						 false, lcc.getTransactionExecute());
0: 	}
0: 
0: }
============================================================================