1:f43b12c: /*
4:f43b12c: 
1:f43b12c:    Derby - Class org.apache.derby.client.am.SQLExceptionFactory
1:f43b12c: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:f43b12c: 
1:f43b12c:       http://www.apache.org/licenses/LICENSE-2.0
1:f43b12c: 
1:f43b12c:    Unless required by applicable law or agreed to in writing, software
1:f43b12c:    distributed under the License is distributed on an "AS IS" BASIS,
1:f43b12c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f43b12c:    See the License for the specific language governing permissions and
1:f43b12c:    limitations under the License.
1:f43b12c: 
1:f43b12c: */
1:f43b12c: package org.apache.derby.client.am;
1:f43b12c: 
1:f43b12c: import org.apache.derby.shared.common.reference.SQLState;
1:9a0cdf1: import org.apache.derby.shared.common.error.ExceptionSeverity;
1:9a0cdf1: 
1:9a0cdf1: import java.sql.SQLDataException;
1:9a0cdf1: import java.sql.SQLException;
1:9a0cdf1: import java.sql.SQLFeatureNotSupportedException;
1:9a0cdf1: import java.sql.SQLIntegrityConstraintViolationException;
1:9a0cdf1: import java.sql.SQLInvalidAuthorizationSpecException;
1:9a0cdf1: import java.sql.SQLNonTransientConnectionException;
1:9a0cdf1: import java.sql.SQLSyntaxErrorException;
1:9a0cdf1: import java.sql.SQLTimeoutException;
1:9a0cdf1: import java.sql.SQLTransactionRollbackException;
1:d57ff17: import org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException;
1:9a0cdf1: 
1:f43b12c: 
1:f43b12c: /**
1:9a0cdf1:  * SQLException factory class to create jdbc 40 exception classes
1:f43b12c:  */
1:f43b12c: 
1:9a0cdf1: public class SQLExceptionFactory {
1:f43b12c:     
1:9a0cdf1:     // Important DRDA SQL States, from DRDA v3 spec, Section 8.2
1:9a0cdf1:     // We have to consider these as well as the standard SQLState classes
1:9a0cdf1:     // when choosing the right exception subclass
1:9a0cdf1:     private static final String DRDA_CONVERSATION_TERMINATED    = "58009";    
1:9a0cdf1:     private static final String DRDA_COMMAND_NOT_SUPPORTED      = "58014";
1:9a0cdf1:     private static final String DRDA_OBJECT_NOT_SUPPORTED       = "58015";
1:9a0cdf1:     private static final String DRDA_PARAM_NOT_SUPPORTED        = "58016";
1:9a0cdf1:     private static final String DRDA_VALUE_NOT_SUPPORTED        = "58017";
1:9a0cdf1:     private static final String DRDA_SQLTYPE_NOT_SUPPORTED      = "56084";
1:9a0cdf1:     private static final String DRDA_CONVERSION_NOT_SUPPORTED   = "57017";
1:9a0cdf1:     private static final String DRDA_REPLY_MSG_NOT_SUPPORTED    = "58018";
1:9a0cdf1:        
1:04a6ee6:     /**
1:9a0cdf1:      * creates jdbc4.0 SQLException and its subclass based on sql state
1:9a0cdf1:      * 
1:9a0cdf1:      * @param message description of the 
1:9a0cdf1:      * @param sqlState 
1:9a0cdf1:      * @param errCode derby error code
1:04a6ee6:      */
1:04a6ee6:     public SQLException getSQLException (String message, String sqlState, 
1:d57ff17:                                          int errCode, Object []args) { 
1:9a0cdf1:         SQLException ex = null;
1:9a0cdf1:         if (sqlState == null) {
1:9a0cdf1:             ex = new SQLException(message, sqlState, errCode); 
1:9a0cdf1:         } else if (sqlState.startsWith(SQLState.CONNECTIVITY_PREFIX)) {
1:9a0cdf1:             //none of the sqlstate supported by derby belongs to
1:9a0cdf1:             //TransientConnectionException. DERBY-3075
1:9a0cdf1:             ex = new SQLNonTransientConnectionException(message, sqlState, errCode);
1:9a0cdf1:         } else if (sqlState.startsWith(SQLState.SQL_DATA_PREFIX)) {
1:9a0cdf1:             ex = new SQLDataException(message, sqlState, errCode);
1:9a0cdf1:         } else if (sqlState.startsWith(SQLState.INTEGRITY_VIOLATION_PREFIX)) {
1:d02bb72:             if ( sqlState.equals( SQLState.LANG_NULL_INTO_NON_NULL ) )
1:d02bb72:                 ex = new SQLIntegrityConstraintViolationException(message, sqlState,
1:d02bb72:                     errCode);
1:d02bb72:             else if ( sqlState.equals( SQLState.LANG_CHECK_CONSTRAINT_VIOLATED ) )
1:d02bb72:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:d02bb72:                     errCode, args[1], args[0]);
1:d02bb72:             else
1:d02bb72:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:d57ff17:                     errCode, args[0], args[1]);
1:9a0cdf1:         } else if (sqlState.startsWith(SQLState.AUTHORIZATION_SPEC_PREFIX)) {
1:9a0cdf1:             ex = new SQLInvalidAuthorizationSpecException(message, sqlState,
2:9a0cdf1:                     errCode);
1:9a0cdf1:         } else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX)) {
1:9a0cdf1:             ex = new SQLTransactionRollbackException(message, sqlState,
1:9a0cdf1:                     errCode);
1:9a0cdf1:         } else if (sqlState.startsWith(SQLState.LSE_COMPILATION_PREFIX)) {
1:9a0cdf1:             ex = new SQLSyntaxErrorException(message, sqlState, errCode);
1:9a0cdf1:         } else if (
1:9a0cdf1:             sqlState.startsWith (SQLState.UNSUPPORTED_PREFIX)   ||
1:9a0cdf1:             sqlState.equals(DRDA_COMMAND_NOT_SUPPORTED)         ||
1:9a0cdf1:             sqlState.equals(DRDA_OBJECT_NOT_SUPPORTED)          ||
1:9a0cdf1:             sqlState.equals(DRDA_PARAM_NOT_SUPPORTED)           ||
1:9a0cdf1:             sqlState.equals(DRDA_VALUE_NOT_SUPPORTED)           ||
1:9a0cdf1:             sqlState.equals(DRDA_SQLTYPE_NOT_SUPPORTED)         ||
1:9a0cdf1:             sqlState.equals(DRDA_REPLY_MSG_NOT_SUPPORTED)           ) {
1:9a0cdf1:             ex = new SQLFeatureNotSupportedException(message, sqlState, 
1:9a0cdf1:                     errCode);
1:9a0cdf1:         } else if
1:9a0cdf1:                 (
1:9a0cdf1:                  sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5)) ||
1:9a0cdf1:                  sqlState.equals(SQLState.LOGIN_TIMEOUT.substring(0, 5))
1:9a0cdf1:                  ) {
1:9a0cdf1:             ex = new SQLTimeoutException(message, sqlState, errCode);
1:9a0cdf1:         }
1:9a0cdf1:         // If the sub-class cannot be determined based on the SQLState, use
1:9a0cdf1:         // the severity instead.
1:9a0cdf1:         else if (errCode >= ExceptionSeverity.SESSION_SEVERITY) {
1:9a0cdf1:             ex = new SQLNonTransientConnectionException(
1:9a0cdf1:                     message, sqlState, errCode);
1:9a0cdf1:         } else if (errCode >= ExceptionSeverity.TRANSACTION_SEVERITY) {
1:9a0cdf1:             ex = new SQLTransactionRollbackException(
1:9a0cdf1:                     message, sqlState, errCode);
1:9a0cdf1:         }
1:9a0cdf1:         // If none of the above fit, return a plain SQLException.
1:9a0cdf1:         else {
1:9a0cdf1:             ex = new SQLException(message, sqlState, errCode); 
1:9a0cdf1:         }
1:9a0cdf1:         return ex;
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public static SQLFeatureNotSupportedException
1:9a0cdf1:             notImplemented(String feature) {
1:9a0cdf1:         SqlException sqlException = new SqlException(null,
1:9a0cdf1:                 new ClientMessageId(SQLState.NOT_IMPLEMENTED), feature);
1:9a0cdf1:         return (SQLFeatureNotSupportedException) sqlException.getSQLException();
1:9a0cdf1:     }
2:f43b12c: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:d02bb72
/////////////////////////////////////////////////////////////////////////
1:             if ( sqlState.equals( SQLState.LANG_NULL_INTO_NON_NULL ) )
1:                 ex = new SQLIntegrityConstraintViolationException(message, sqlState,
1:                     errCode);
1:             else if ( sqlState.equals( SQLState.LANG_CHECK_CONSTRAINT_VIOLATED ) )
1:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:                     errCode, args[1], args[0]);
1:             else
1:                 ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
commit:d57ff17
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException;
/////////////////////////////////////////////////////////////////////////
1:                                          int errCode, Object []args) { 
/////////////////////////////////////////////////////////////////////////
0:             ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,
1:                     errCode, args[0], args[1]);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.error.ExceptionSeverity;
1: 
1: import java.sql.SQLDataException;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.sql.SQLIntegrityConstraintViolationException;
1: import java.sql.SQLInvalidAuthorizationSpecException;
1: import java.sql.SQLNonTransientConnectionException;
1: import java.sql.SQLSyntaxErrorException;
1: import java.sql.SQLTimeoutException;
1: import java.sql.SQLTransactionRollbackException;
1: 
1:  * SQLException factory class to create jdbc 40 exception classes
1: public class SQLExceptionFactory {
1:     // Important DRDA SQL States, from DRDA v3 spec, Section 8.2
1:     // We have to consider these as well as the standard SQLState classes
1:     // when choosing the right exception subclass
1:     private static final String DRDA_CONVERSATION_TERMINATED    = "58009";    
1:     private static final String DRDA_COMMAND_NOT_SUPPORTED      = "58014";
1:     private static final String DRDA_OBJECT_NOT_SUPPORTED       = "58015";
1:     private static final String DRDA_PARAM_NOT_SUPPORTED        = "58016";
1:     private static final String DRDA_VALUE_NOT_SUPPORTED        = "58017";
1:     private static final String DRDA_SQLTYPE_NOT_SUPPORTED      = "56084";
1:     private static final String DRDA_CONVERSION_NOT_SUPPORTED   = "57017";
1:     private static final String DRDA_REPLY_MSG_NOT_SUPPORTED    = "58018";
1:        
1:      * creates jdbc4.0 SQLException and its subclass based on sql state
1:      * 
1:      * @param message description of the 
1:      * @param sqlState 
1:      * @param errCode derby error code
0:                                                             int errCode) { 
1:         SQLException ex = null;
1:         if (sqlState == null) {
1:             ex = new SQLException(message, sqlState, errCode); 
1:         } else if (sqlState.startsWith(SQLState.CONNECTIVITY_PREFIX)) {
1:             //none of the sqlstate supported by derby belongs to
1:             //TransientConnectionException. DERBY-3075
1:             ex = new SQLNonTransientConnectionException(message, sqlState, errCode);
1:         } else if (sqlState.startsWith(SQLState.SQL_DATA_PREFIX)) {
1:             ex = new SQLDataException(message, sqlState, errCode);
1:         } else if (sqlState.startsWith(SQLState.INTEGRITY_VIOLATION_PREFIX)) {
0:             ex = new SQLIntegrityConstraintViolationException(message, sqlState,
1:                     errCode);
1:         } else if (sqlState.startsWith(SQLState.AUTHORIZATION_SPEC_PREFIX)) {
1:             ex = new SQLInvalidAuthorizationSpecException(message, sqlState,
1:                     errCode);
1:         } else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX)) {
1:             ex = new SQLTransactionRollbackException(message, sqlState,
1:                     errCode);
1:         } else if (sqlState.startsWith(SQLState.LSE_COMPILATION_PREFIX)) {
1:             ex = new SQLSyntaxErrorException(message, sqlState, errCode);
1:         } else if (
1:             sqlState.startsWith (SQLState.UNSUPPORTED_PREFIX)   ||
1:             sqlState.equals(DRDA_COMMAND_NOT_SUPPORTED)         ||
1:             sqlState.equals(DRDA_OBJECT_NOT_SUPPORTED)          ||
1:             sqlState.equals(DRDA_PARAM_NOT_SUPPORTED)           ||
1:             sqlState.equals(DRDA_VALUE_NOT_SUPPORTED)           ||
1:             sqlState.equals(DRDA_SQLTYPE_NOT_SUPPORTED)         ||
1:             sqlState.equals(DRDA_REPLY_MSG_NOT_SUPPORTED)           ) {
1:             ex = new SQLFeatureNotSupportedException(message, sqlState, 
1:                     errCode);
1:         } else if
1:                 (
1:                  sqlState.equals(SQLState.LANG_STATEMENT_CANCELLED_OR_TIMED_OUT.substring(0, 5)) ||
1:                  sqlState.equals(SQLState.LOGIN_TIMEOUT.substring(0, 5))
1:                  ) {
1:             ex = new SQLTimeoutException(message, sqlState, errCode);
1:         }
1:         // If the sub-class cannot be determined based on the SQLState, use
1:         // the severity instead.
1:         else if (errCode >= ExceptionSeverity.SESSION_SEVERITY) {
1:             ex = new SQLNonTransientConnectionException(
1:                     message, sqlState, errCode);
1:         } else if (errCode >= ExceptionSeverity.TRANSACTION_SEVERITY) {
1:             ex = new SQLTransactionRollbackException(
1:                     message, sqlState, errCode);
1:         }
1:         // If none of the above fit, return a plain SQLException.
1:         else {
1:             ex = new SQLException(message, sqlState, errCode); 
1:         }
1:         return ex;
1:     }
1: 
1:     public static SQLFeatureNotSupportedException
1:             notImplemented(String feature) {
1:         SqlException sqlException = new SqlException(null,
1:                 new ClientMessageId(SQLState.NOT_IMPLEMENTED), feature);
1:         return (SQLFeatureNotSupportedException) sqlException.getSQLException();
1:     }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:e65b4db
/////////////////////////////////////////////////////////////////////////
0:                 new ClientMessageId (SQLState.NOT_IMPLEMENTED), feature);
commit:f43b12c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.SQLExceptionFactory
1: 
0:    Copyright (c) 2006 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
0: import java.sql.SQLException;
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: /**
0:  * class to create SQLException
1:  */
1: 
0: public class SQLExceptionFactory {     
1:      
0:     public static SQLException notImplemented (String feature) {
0:         SqlException sqlException = new SqlException (null, 
0:                 new MessageId (SQLState.NOT_IMPLEMENTED), feature);
0:         return sqlException.getSQLException();
1:     }
1:     
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2e6696
/////////////////////////////////////////////////////////////////////////
commit:04a6ee6
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * creates SQLException initialized with all the params received from the 
0:      * caller. This method will be overwritten to support jdbc version specific 
0:      * exception class.
0:      * @param message 
0:      * @param sqlState SQL 
0:      * @param errCode derby error code
0:      * @param next next excewption for chaining
0:      * @param cause root cause of the exception
0:      * @return SQLException
1:      */
1:     public SQLException getSQLException (String message, String sqlState, 
0:             int errCode) {
0:         return new SQLException (message, sqlState, errCode);           
0:     }    
0:  
============================================================================