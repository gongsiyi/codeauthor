1:b8d1d8a: /*
2:b8d1d8a: 
1:b8d1d8a:  Derby - Class org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester
1:b8d1d8a: 
1:b8d1d8a:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d1d8a:  contributor license agreements.  See the NOTICE file distributed with
1:b8d1d8a:  this work for additional information regarding copyright ownership.
1:b8d1d8a:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b8d1d8a:  (the "License"); you may not use this file except in compliance with
1:b8d1d8a:  the License.  You may obtain a copy of the License at
1:b8d1d8a: 
1:b8d1d8a:  http://www.apache.org/licenses/LICENSE-2.0
1:b8d1d8a: 
1:b8d1d8a:  Unless required by applicable law or agreed to in writing, software
1:b8d1d8a:  distributed under the License is distributed on an "AS IS" BASIS,
1:b8d1d8a:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d1d8a:  See the License for the specific language governing permissions and
1:b8d1d8a:  limitations under the License.
1:b8d1d8a: 
1:b8d1d8a:  */
1:b8d1d8a: 
1:b8d1d8a: package org.apache.derbyTesting.system.nstest.tester;
1:b8d1d8a: 
1:b8d1d8a: import java.io.File;
1:b8d1d8a: import java.io.FileWriter;
1:b8d1d8a: import java.io.IOException;
1:b8d1d8a: import java.io.PrintWriter;
1:b8d1d8a: import java.sql.CallableStatement;
1:b8d1d8a: import java.sql.Connection;
1:b8d1d8a: import java.sql.DriverManager;
1:b8d1d8a: import java.sql.ResultSet;
1:b8d1d8a: import java.sql.SQLException;
1:b8d1d8a: import java.sql.Statement;
1:b8d1d8a: 
1:b8d1d8a: import org.apache.derbyTesting.system.nstest.NsTest;
1:b8d1d8a: 
1:b8d1d8a: /**
1:b8d1d8a:  * BackupRestoreReEncryptTester: The thread that invokes the
1:b8d1d8a:  * Backup/Restore/Re-Encrypt functions. By default one instance of this thread
1:b8d1d8a:  * is always started, unless the System property 'derby.nstest.backupRestore'
1:b8d1d8a:  * set to 'false'
1:b8d1d8a:  */
1:b8d1d8a: public class BackupRestoreReEncryptTester extends TesterObject {
1:b8d1d8a: 	String logFile = "backup.log";
1:b8d1d8a: 
1:b8d1d8a: 	PrintWriter logger = null;
1:b8d1d8a: 
1:b8d1d8a: 	// *******************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// Constructor. Get's the name of the thread running this for use in
1:b8d1d8a: 	// messages
1:b8d1d8a: 	//
1:b8d1d8a: 	// *******************************************************************************
1:b8d1d8a: 	public BackupRestoreReEncryptTester(String name) throws IOException {
1:b8d1d8a: 		super(name);
1:b8d1d8a: 		logger = new PrintWriter(new FileWriter(logFile));
1:b8d1d8a: 
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	// *********************************************************************************
1:b8d1d8a: 	//
1:b8d1d8a: 	// This starts the acutal test operations. Overrides the startTesting() of
1:b8d1d8a: 	// parent.
1:b8d1d8a: 	// Tester3 profile -
1:b8d1d8a: 	// Query only kind of client that deals with a large result
1:b8d1d8a: 	// set based on a select query that returns a large number of
1:b8d1d8a: 	// rows (stress condition). Connection is closed after each
1:b8d1d8a: 	// query. The query will need to run in a DIRTY_READ mode, i.e.
1:b8d1d8a: 	// READ UNCOMMITTED isolation level. We work over the untouched
1:b8d1d8a: 	// portion of rows in the table (i.e. serialkey 1 to NUM_UNTOUCHED_ROWS)
1:b8d1d8a: 	//
1:b8d1d8a: 	// *********************************************************************************
1:b8d1d8a: 	public void startTesting() {
1:e276048:         
1:b8d1d8a: 		// The following loop will be done nstest.MAX_ITERATIONS times after
1:b8d1d8a: 		// which we exit the thread
1:b8d1d8a: 		// Note that a different connection is used for each operation. The
1:e276048: 		// purpose of this client is to work on a large set of data as defined 
1:e276048:         // by the parameter NUM_HIGH_STRESS_ROWS
1:b8d1d8a: 		// This thread could be made to pause (sleep) for a bit between each
1:b8d1d8a: 		// iteration.
1:b8d1d8a: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1:b8d1d8a: 			log(getTimestamp() + " Thread " + getThread_id() + " starting");
1:b8d1d8a: 			String message = "";
1:b8d1d8a: 			// Get the connection. It will be closed at the end of the loop
1:b8d1d8a: 			connex = getConnection();
1:b8d1d8a: 			if (connex == null) {
1:c043274: 				NsTest.logger.println("FAIL: " + getThread_id()
1:b8d1d8a: 						+ " could not get the database connection");
1:b8d1d8a: 				return; // quit
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			// set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED to
1:e276048: 			// reduce number of deadlocks/lock issues
1:b8d1d8a: 			setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1:b8d1d8a: 
1:b8d1d8a: 			// Now select nstest.NUM_HIGH_STRESS_ROWS number of rows
1:b8d1d8a: 			try {
1:b8d1d8a: 				doBackup();
1:b8d1d8a: 
1:b8d1d8a: 			} catch (Exception e) {
1:b8d1d8a: 				message = getTimestamp() + "FAILED - BackUp thread doBackup"
1:b8d1d8a: 						+ getThread_id() + " threw " + e;
1:c043274: 				NsTest.logger.println(message);
1:b8d1d8a: 				log(message);
1:b8d1d8a: 				printException("call to doBackup() in BackupThread ", e);
1:c043274:                 if ( NsTest.justCountErrors() ) { NsTest.printException( BackupRestoreReEncryptTester.class.getName(), e ); }
1:c043274: 				else { e.printStackTrace( NsTest.logger ); }
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			try {
1:b8d1d8a: 				doRestoreandReEncrypt();
1:b8d1d8a: 
1:b8d1d8a: 			} catch (SQLException e) {
1:c043274:                 if ( NsTest.justCountErrors() ) { NsTest.printException( BackupRestoreReEncryptTester.class.getName(), e ); }
1:c043274: 				else { e.printStackTrace( NsTest.logger ); }
1:c043274: 				NsTest.logger
1:b8d1d8a: 						.println("FAILED at doRestoreandReEncrypt() - BackUp thread "
1:b8d1d8a: 								+ getThread_id() + " threw " + e);
1:b8d1d8a: 				printException(
1:b8d1d8a: 						"call to doRestoreandReEncrypt() in BackupThread ", e);
1:b8d1d8a: 				log(getTimestamp()
1:b8d1d8a: 						+ " call to doRestoreandReEncrypt() in BackupThread FAILED "
1:b8d1d8a: 						+ e.getSQLState() + " " + e);
1:b8d1d8a: 
1:c043274: 				e.printStackTrace( logger );
1:b8d1d8a: 			}
1:b8d1d8a: 
1:b8d1d8a: 			// close the connection
1:b8d1d8a: 			closeConnection();
1:b8d1d8a: 			try {
1:b8d1d8a: 				log(getTimestamp() + " Thread " + getThread_id() + " sleeping");
1:b8d1d8a: 				Thread.sleep(10 * 60000); // 10 minutes sleep before second
1:b8d1d8a: 				// backup
1:b8d1d8a: 			} catch (InterruptedException ie) {
1:b8d1d8a: 				message = getTimestamp() + "FAILED - " + getThread_id()
1:b8d1d8a: 						+ " Sleep interrupted " + ie;
1:b8d1d8a: 				log(message);
1:b8d1d8a: 			}
1:b8d1d8a: 
1:e276048:             // first check if there are still active tester threads, so 
1:e276048:             // we do not make backups on an unchanged db every 10 mins for
1:e276048:             // the remainder of MAX_ITERATIONS.
1:e276048:             if (NsTest.numActiveTestThreads() > 1)
1:e276048:             {
1:e276048:                 log("active test threads > 1, backup will continue in 10 minutes");
1:e276048:                 continue;
1:e276048:             }
1:e276048:             else
1:e276048:             {
1:e276048:                 log("no more test threads, finishing backup also");
1:e276048:                 break;
1:e276048:             }
1:e276048:     
1:b8d1d8a: 		}// end of for (int i=0;...)
1:b8d1d8a: 
1:c043274: 		NsTest.logger.println("Thread " + getThread_id() + " is now terminating");
1:b8d1d8a: 
1:b8d1d8a: 	}// end of startTesting()
1:b8d1d8a: 
1:b8d1d8a: 	public void doBackup() throws SQLException {
1:b8d1d8a: 		log("--------------------- B A C K U P  S E C T I O N  B E G I N ------------------------");
1:b8d1d8a: 		CallableStatement cs = connex
1:b8d1d8a: 				.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT(?, ?)");
1:b8d1d8a: 		cs.setString(1, NsTest.BACKUPDIR);
1:b8d1d8a: 		cs.setInt(2, 1);
1:b8d1d8a: 		long start = System.currentTimeMillis();
1:b8d1d8a: 		cs.execute();
1:b8d1d8a: 		cs.close();
1:b8d1d8a: 		long end = System.currentTimeMillis();
1:b8d1d8a: 		log(getTimestamp() + " Backup completed successfully in "
1:b8d1d8a: 				+ (end - start) / 100 + " seconds");
1:b8d1d8a: 		try {
1:b8d1d8a: 			String backupDbURL = NsTest.getDriverURL() + NsTest.BACKUPDIR
1:b8d1d8a: 					+ File.separator + NsTest.dbName + ";" + NsTest.bootPwd;
1:b8d1d8a: 			// Consistency check not required everytime
1:b8d1d8a: 			doConsistCheck(backupDbURL, "BACKUP");
1:b8d1d8a: 
1:b8d1d8a: 		} catch (Exception e) {
1:b8d1d8a: 			String message = getTimestamp()
1:b8d1d8a: 					+ "FAILED - BackUp thread doConsistCheck() "
1:b8d1d8a: 					+ getThread_id() + " threw " + e;
1:b8d1d8a: 			log(message);
1:b8d1d8a: 			printException("call to doConsistCheck() in BackupThread ", e);
1:c043274: 			e.printStackTrace( logger );
1:b8d1d8a: 		}
1:b8d1d8a: 		log("--------------------- B A C K U P  S E C T I O N  E N D ----------------------------");
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	public void doConsistCheck(String dbURL, String dbType) throws SQLException {
1:b8d1d8a: 		/*
1:b8d1d8a: 		 * SELECT schemaname, tablename,
1:b8d1d8a: 		 * SYSCS_UTIL.SYSCS_CHECK_TABLE(schemaname, tablename) FROM
1:b8d1d8a: 		 * sys.sysschemas s, sys.systables t WHERE s.schemaid = t.schemaid;
1:b8d1d8a: 		 */
1:b8d1d8a: 		Connection conn = DriverManager.getConnection(dbURL);
1:b8d1d8a: 		Statement stmt = conn.createStatement();
1:b8d1d8a: 		long start = System.currentTimeMillis();
1:b8d1d8a: 		ResultSet rs = stmt
1:b8d1d8a: 				.executeQuery("SELECT schemaname, tablename,	SYSCS_UTIL.SYSCS_CHECK_TABLE(schemaname, tablename)	FROM sys.sysschemas s, sys.systables t	WHERE s.schemaid = t.schemaid");
1:b8d1d8a: 		while (rs.next()) {
1:b8d1d8a: 			// Iterate thru ResultSet
1:b8d1d8a: 			rs.getString(1);
1:b8d1d8a: 			rs.getString(2);
1:b8d1d8a: 			rs.getString(3);
1:b8d1d8a: 		}
1:b8d1d8a: 		long end = System.currentTimeMillis();
1:b8d1d8a: 		log(getTimestamp() + " Consistency Check on the " + dbType
1:b8d1d8a: 				+ " database Completed successfully " + (end - start) / 100
1:b8d1d8a: 				+ " seconds");
1:b8d1d8a: 		stmt.close();
2:b8d1d8a: 		conn.close();
1:b8d1d8a: 		shutDownDB(dbURL, dbType);
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	public void doRestoreandReEncrypt() throws SQLException {
1:b8d1d8a: 		log("--------------------- R E S T O R E   S E C T I O N  B E G I N ------------------------");
1:b8d1d8a: 		String dbType = "RESTORED";
1:b8d1d8a: 		Connection conn = null;
1:b8d1d8a: 
1:b8d1d8a: 		long newKey = System.currentTimeMillis();
1:b8d1d8a: 		String restoreDbURL = NsTest.getDriverURL() + NsTest.RESTOREDIR
1:b8d1d8a: 				+ File.separator + NsTest.dbName;
1:b8d1d8a: 		String dbUrl = restoreDbURL + ";" + NsTest.bootPwd + ";restoreFrom="
1:b8d1d8a: 				+ NsTest.BACKUPDIR + File.separator + NsTest.dbName;
1:b8d1d8a: 		try {
1:b8d1d8a: 			conn = DriverManager.getConnection(dbUrl);
1:b8d1d8a: 			log(getTimestamp() + " Database restored successfully " + dbUrl);
1:b8d1d8a: 		} catch (SQLException e) {
1:b8d1d8a: 			log(getTimestamp() + " FAILURE ! to restore database " + dbUrl);
1:c043274: 			e.printStackTrace( logger );
1:b8d1d8a: 
1:b8d1d8a: 		}
1:b8d1d8a: 
1:b8d1d8a: 		// Consistency check not required everytime
1:c043274: 		if ( conn != null ) { conn.close(); }
1:b8d1d8a: 		dbUrl = restoreDbURL + ";" + NsTest.bootPwd;
1:b8d1d8a: 		doConsistCheck(dbUrl, dbType);
1:b8d1d8a: 		// DERBY-1737, hence create a new connection
1:b8d1d8a: 		log("--------------------- R E S T O R E   S E C T I O N  E N D ----------------------------");
1:b8d1d8a: 
1:b8d1d8a: 		conn = DriverManager.getConnection(dbUrl);
1:b8d1d8a: 		// Disable log archival
1:b8d1d8a: 		// call SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE(1);
1:b8d1d8a: 		CallableStatement cs = conn
1:b8d1d8a: 				.prepareCall("CALL SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE(?)");
1:b8d1d8a: 		cs.setInt(1, 1);
1:b8d1d8a: 		cs.execute();
1:b8d1d8a: 		conn.close();
1:b8d1d8a: 		log(getTimestamp()
1:b8d1d8a: 				+ " Disable log archival mode to enable re-encryption " + dbUrl);
1:b8d1d8a: 		shutDownDB(restoreDbURL, dbType);
1:b8d1d8a: 		log("--------------------- ENCRYPT AND RECONNECT  S E C T I O N  BEGIN ------------------------");
1:b8d1d8a: 		String encryptDbURL = restoreDbURL + ";dataEncryption=true;";
1:b8d1d8a: 
1:b8d1d8a: 		// Try Re-Encrypting Now
1:b8d1d8a: 		encryptDbURL += ";" + NsTest.bootPwd + ";newBootPassword=" + newKey;
1:b8d1d8a: 
1:b8d1d8a: 		long start = System.currentTimeMillis();
1:b8d1d8a: 		log(getTimestamp() + " Encrypting database, url = " + encryptDbURL);
1:b8d1d8a: 		conn = DriverManager.getConnection(encryptDbURL);
1:b8d1d8a: 		conn.close();
1:b8d1d8a: 		long end = System.currentTimeMillis();
1:b8d1d8a: 		log(getTimestamp()
1:b8d1d8a: 				+ " Re-encryption completed on restored database in "
1:b8d1d8a: 				+ (end - start) / 100 + " seconds, url = " + encryptDbURL);
1:b8d1d8a: 		// Shutdown the db
1:b8d1d8a: 		dbType = "ENCRYPTED";
1:b8d1d8a: 		shutDownDB(restoreDbURL, dbType);
1:b8d1d8a: 		// Attempt to connect with old key should fail
1:b8d1d8a: 		try {
1:b8d1d8a: 			conn = DriverManager.getConnection(dbUrl);
1:b8d1d8a: 			log(getTimestamp()
1:b8d1d8a: 					+ " FAILURE ! - Attempt to boot with old password/url should have failed, url ="
1:b8d1d8a: 					+ dbUrl);
1:b8d1d8a: 		} catch (SQLException sqe) {
1:b8d1d8a: 			if ((sqe.getSQLState().equalsIgnoreCase("XJ040"))
1:b8d1d8a: 					|| (sqe.getSQLState().equalsIgnoreCase("XBM06"))) {
1:b8d1d8a: 				log(getTimestamp()
1:b8d1d8a: 						+ " PASS - Unsuccessful attempt to boot with old password/url, "
1:b8d1d8a: 						+ dbUrl);
1:b8d1d8a: 			} else {
1:b8d1d8a: 				throw sqe;
1:b8d1d8a: 			}
1:b8d1d8a: 		}
1:b8d1d8a: 		/*
1:b8d1d8a: 		 * A Shutdown is not needed, since the part gets exected only when a
1:b8d1d8a: 		 * unsuccessful attempt is made to boot the db with an old password
1:b8d1d8a: 		 */
1:b8d1d8a: 		// shutDownDB(restoreDbURL, dbType);
1:b8d1d8a: 		log("--------------------- ENCRYPT AND RECONNECT  S E C T I O N  END --------------------------");
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	private void shutDownDB(String dbURL, String dbType) throws SQLException {
1:b8d1d8a: 		Connection conn = null;
1:b8d1d8a: 		dbURL = dbURL + ";shutdown=true";
1:b8d1d8a: 		try {
1:b8d1d8a: 			conn = DriverManager.getConnection(dbURL);
1:b8d1d8a: 
1:b8d1d8a: 		} catch (SQLException sqe) {
1:b8d1d8a: 			if (conn != null)
1:b8d1d8a: 				conn.close();
1:b8d1d8a: 			if (!sqe.getSQLState().equalsIgnoreCase("08006")) {
1:b8d1d8a: 				throw sqe;
1:b8d1d8a: 			} else {
1:b8d1d8a: 				log(getTimestamp() + " " + dbType
1:b8d1d8a: 						+ " database shutdown completed, url = " + dbURL);
1:b8d1d8a: 			}
1:b8d1d8a: 		}
1:b8d1d8a: 	}
1:b8d1d8a: 
1:b8d1d8a: 	public void log(String msg) {
1:b8d1d8a: 		logger.write(msg + "\n");
1:b8d1d8a: 		logger.flush();
1:b8d1d8a: 
1:c043274: 		NsTest.logger.println(msg);
1:b8d1d8a: 	}
1:b8d1d8a: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println("FAIL: " + getThread_id()
/////////////////////////////////////////////////////////////////////////
1: 				NsTest.logger.println(message);
1:                 if ( NsTest.justCountErrors() ) { NsTest.printException( BackupRestoreReEncryptTester.class.getName(), e ); }
1: 				else { e.printStackTrace( NsTest.logger ); }
1:                 if ( NsTest.justCountErrors() ) { NsTest.printException( BackupRestoreReEncryptTester.class.getName(), e ); }
1: 				else { e.printStackTrace( NsTest.logger ); }
1: 				NsTest.logger
/////////////////////////////////////////////////////////////////////////
1: 				e.printStackTrace( logger );
/////////////////////////////////////////////////////////////////////////
1: 		NsTest.logger.println("Thread " + getThread_id() + " is now terminating");
/////////////////////////////////////////////////////////////////////////
1: 			e.printStackTrace( logger );
/////////////////////////////////////////////////////////////////////////
1: 			e.printStackTrace( logger );
1: 		if ( conn != null ) { conn.close(); }
/////////////////////////////////////////////////////////////////////////
1: 		NsTest.logger.println(msg);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:e276048
/////////////////////////////////////////////////////////////////////////
1:         
1: 		// purpose of this client is to work on a large set of data as defined 
1:         // by the parameter NUM_HIGH_STRESS_ROWS
/////////////////////////////////////////////////////////////////////////
1: 			// reduce number of deadlocks/lock issues
/////////////////////////////////////////////////////////////////////////
1:             // first check if there are still active tester threads, so 
1:             // we do not make backups on an unchanged db every 10 mins for
1:             // the remainder of MAX_ITERATIONS.
1:             if (NsTest.numActiveTestThreads() > 1)
1:             {
1:                 log("active test threads > 1, backup will continue in 10 minutes");
1:                 continue;
1:             }
1:             else
1:             {
1:                 log("no more test threads, finishing backup also");
1:                 break;
1:             }
1:     
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:b8d1d8a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.tester;
1: 
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: 
1: /**
1:  * BackupRestoreReEncryptTester: The thread that invokes the
1:  * Backup/Restore/Re-Encrypt functions. By default one instance of this thread
1:  * is always started, unless the System property 'derby.nstest.backupRestore'
1:  * set to 'false'
1:  */
1: public class BackupRestoreReEncryptTester extends TesterObject {
1: 	String logFile = "backup.log";
1: 
1: 	PrintWriter logger = null;
1: 
1: 	// *******************************************************************************
1: 	//
1: 	// Constructor. Get's the name of the thread running this for use in
1: 	// messages
1: 	//
1: 	// *******************************************************************************
1: 	public BackupRestoreReEncryptTester(String name) throws IOException {
1: 		super(name);
1: 		logger = new PrintWriter(new FileWriter(logFile));
1: 
1: 	}
1: 
1: 	// *********************************************************************************
1: 	//
1: 	// This starts the acutal test operations. Overrides the startTesting() of
1: 	// parent.
1: 	// Tester3 profile -
1: 	// Query only kind of client that deals with a large result
1: 	// set based on a select query that returns a large number of
1: 	// rows (stress condition). Connection is closed after each
1: 	// query. The query will need to run in a DIRTY_READ mode, i.e.
1: 	// READ UNCOMMITTED isolation level. We work over the untouched
1: 	// portion of rows in the table (i.e. serialkey 1 to NUM_UNTOUCHED_ROWS)
1: 	//
1: 	// *********************************************************************************
1: 	public void startTesting() {
1: 
1: 		// The following loop will be done nstest.MAX_ITERATIONS times after
1: 		// which we exit the thread
1: 		// Note that a different connection is used for each operation. The
0: 		// purpose of this client is
0: 		// to work on a large set of data as defined by the parameter
0: 		// NUM_HIGH_STRESS_ROWS
1: 		// This thread could be made to pause (sleep) for a bit between each
1: 		// iteration.
1: 		for (int i = 0; i < NsTest.MAX_ITERATIONS; i++) {
1: 			log(getTimestamp() + " Thread " + getThread_id() + " starting");
1: 			String message = "";
1: 			// Get the connection. It will be closed at the end of the loop
1: 			connex = getConnection();
1: 			if (connex == null) {
0: 				System.out.println("FAIL: " + getThread_id()
1: 						+ " could not get the database connection");
1: 				return; // quit
1: 			}
1: 
1: 			// set isolation level to Connection.TRANSACTION_READ_UNCOMMITTED to
0: 			// reduce number of
0: 			// deadlocks/lock issues
1: 			setIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED);
1: 
1: 			// Now select nstest.NUM_HIGH_STRESS_ROWS number of rows
1: 			try {
1: 				doBackup();
1: 
1: 			} catch (Exception e) {
1: 				message = getTimestamp() + "FAILED - BackUp thread doBackup"
1: 						+ getThread_id() + " threw " + e;
0: 				System.out.println(message);
1: 				log(message);
1: 				printException("call to doBackup() in BackupThread ", e);
0: 				e.printStackTrace();
1: 			}
1: 
1: 			try {
1: 				doRestoreandReEncrypt();
1: 
1: 			} catch (SQLException e) {
0: 				e.printStackTrace();
0: 				System.out
1: 						.println("FAILED at doRestoreandReEncrypt() - BackUp thread "
1: 								+ getThread_id() + " threw " + e);
1: 				printException(
1: 						"call to doRestoreandReEncrypt() in BackupThread ", e);
1: 				log(getTimestamp()
1: 						+ " call to doRestoreandReEncrypt() in BackupThread FAILED "
1: 						+ e.getSQLState() + " " + e);
1: 
0: 				e.printStackTrace(logger);
1: 			}
1: 
1: 			// close the connection
1: 			closeConnection();
1: 			try {
1: 				log(getTimestamp() + " Thread " + getThread_id() + " sleeping");
1: 				Thread.sleep(10 * 60000); // 10 minutes sleep before second
1: 				// backup
1: 			} catch (InterruptedException ie) {
1: 				message = getTimestamp() + "FAILED - " + getThread_id()
1: 						+ " Sleep interrupted " + ie;
1: 				log(message);
1: 			}
1: 
1: 		}// end of for (int i=0;...)
1: 
0: 		System.out.println("Thread " + getThread_id() + " is now terminating");
1: 
1: 	}// end of startTesting()
1: 
1: 	public void doBackup() throws SQLException {
1: 		log("--------------------- B A C K U P  S E C T I O N  B E G I N ------------------------");
1: 		CallableStatement cs = connex
1: 				.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT(?, ?)");
1: 		cs.setString(1, NsTest.BACKUPDIR);
1: 		cs.setInt(2, 1);
1: 		long start = System.currentTimeMillis();
1: 		cs.execute();
1: 		cs.close();
1: 		long end = System.currentTimeMillis();
1: 		log(getTimestamp() + " Backup completed successfully in "
1: 				+ (end - start) / 100 + " seconds");
1: 		try {
1: 			String backupDbURL = NsTest.getDriverURL() + NsTest.BACKUPDIR
1: 					+ File.separator + NsTest.dbName + ";" + NsTest.bootPwd;
1: 			// Consistency check not required everytime
1: 			doConsistCheck(backupDbURL, "BACKUP");
1: 
1: 		} catch (Exception e) {
1: 			String message = getTimestamp()
1: 					+ "FAILED - BackUp thread doConsistCheck() "
1: 					+ getThread_id() + " threw " + e;
1: 			log(message);
1: 			printException("call to doConsistCheck() in BackupThread ", e);
0: 			e.printStackTrace(logger);
1: 		}
1: 		log("--------------------- B A C K U P  S E C T I O N  E N D ----------------------------");
1: 	}
1: 
1: 	public void doConsistCheck(String dbURL, String dbType) throws SQLException {
1: 		/*
1: 		 * SELECT schemaname, tablename,
1: 		 * SYSCS_UTIL.SYSCS_CHECK_TABLE(schemaname, tablename) FROM
1: 		 * sys.sysschemas s, sys.systables t WHERE s.schemaid = t.schemaid;
1: 		 */
1: 		Connection conn = DriverManager.getConnection(dbURL);
1: 		Statement stmt = conn.createStatement();
1: 		long start = System.currentTimeMillis();
1: 		ResultSet rs = stmt
1: 				.executeQuery("SELECT schemaname, tablename,	SYSCS_UTIL.SYSCS_CHECK_TABLE(schemaname, tablename)	FROM sys.sysschemas s, sys.systables t	WHERE s.schemaid = t.schemaid");
1: 		while (rs.next()) {
1: 			// Iterate thru ResultSet
1: 			rs.getString(1);
1: 			rs.getString(2);
1: 			rs.getString(3);
1: 		}
1: 		long end = System.currentTimeMillis();
1: 		log(getTimestamp() + " Consistency Check on the " + dbType
1: 				+ " database Completed successfully " + (end - start) / 100
1: 				+ " seconds");
1: 		stmt.close();
1: 		conn.close();
1: 		shutDownDB(dbURL, dbType);
1: 	}
1: 
1: 	public void doRestoreandReEncrypt() throws SQLException {
1: 		log("--------------------- R E S T O R E   S E C T I O N  B E G I N ------------------------");
1: 		String dbType = "RESTORED";
1: 		Connection conn = null;
1: 
1: 		long newKey = System.currentTimeMillis();
1: 		String restoreDbURL = NsTest.getDriverURL() + NsTest.RESTOREDIR
1: 				+ File.separator + NsTest.dbName;
1: 		String dbUrl = restoreDbURL + ";" + NsTest.bootPwd + ";restoreFrom="
1: 				+ NsTest.BACKUPDIR + File.separator + NsTest.dbName;
1: 		try {
1: 			conn = DriverManager.getConnection(dbUrl);
1: 			log(getTimestamp() + " Database restored successfully " + dbUrl);
1: 		} catch (SQLException e) {
1: 			log(getTimestamp() + " FAILURE ! to restore database " + dbUrl);
0: 			e.printStackTrace(logger);
1: 
1: 		}
1: 
1: 		// Consistency check not required everytime
1: 		conn.close();
1: 		dbUrl = restoreDbURL + ";" + NsTest.bootPwd;
1: 		doConsistCheck(dbUrl, dbType);
1: 		// DERBY-1737, hence create a new connection
1: 		log("--------------------- R E S T O R E   S E C T I O N  E N D ----------------------------");
1: 
1: 		conn = DriverManager.getConnection(dbUrl);
1: 		// Disable log archival
1: 		// call SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE(1);
1: 		CallableStatement cs = conn
1: 				.prepareCall("CALL SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE(?)");
1: 		cs.setInt(1, 1);
1: 		cs.execute();
1: 		conn.close();
1: 		log(getTimestamp()
1: 				+ " Disable log archival mode to enable re-encryption " + dbUrl);
1: 		shutDownDB(restoreDbURL, dbType);
1: 		log("--------------------- ENCRYPT AND RECONNECT  S E C T I O N  BEGIN ------------------------");
1: 		String encryptDbURL = restoreDbURL + ";dataEncryption=true;";
1: 
1: 		// Try Re-Encrypting Now
1: 		encryptDbURL += ";" + NsTest.bootPwd + ";newBootPassword=" + newKey;
1: 
1: 		long start = System.currentTimeMillis();
1: 		log(getTimestamp() + " Encrypting database, url = " + encryptDbURL);
1: 		conn = DriverManager.getConnection(encryptDbURL);
1: 		conn.close();
1: 		long end = System.currentTimeMillis();
1: 		log(getTimestamp()
1: 				+ " Re-encryption completed on restored database in "
1: 				+ (end - start) / 100 + " seconds, url = " + encryptDbURL);
1: 		// Shutdown the db
1: 		dbType = "ENCRYPTED";
1: 		shutDownDB(restoreDbURL, dbType);
1: 		// Attempt to connect with old key should fail
1: 		try {
1: 			conn = DriverManager.getConnection(dbUrl);
1: 			log(getTimestamp()
1: 					+ " FAILURE ! - Attempt to boot with old password/url should have failed, url ="
1: 					+ dbUrl);
1: 		} catch (SQLException sqe) {
1: 			if ((sqe.getSQLState().equalsIgnoreCase("XJ040"))
1: 					|| (sqe.getSQLState().equalsIgnoreCase("XBM06"))) {
1: 				log(getTimestamp()
1: 						+ " PASS - Unsuccessful attempt to boot with old password/url, "
1: 						+ dbUrl);
1: 			} else {
1: 				throw sqe;
1: 			}
1: 		}
1: 		/*
1: 		 * A Shutdown is not needed, since the part gets exected only when a
1: 		 * unsuccessful attempt is made to boot the db with an old password
1: 		 */
1: 		// shutDownDB(restoreDbURL, dbType);
1: 		log("--------------------- ENCRYPT AND RECONNECT  S E C T I O N  END --------------------------");
1: 	}
1: 
1: 	private void shutDownDB(String dbURL, String dbType) throws SQLException {
1: 		Connection conn = null;
1: 		dbURL = dbURL + ";shutdown=true";
1: 		try {
1: 			conn = DriverManager.getConnection(dbURL);
1: 
1: 		} catch (SQLException sqe) {
1: 			if (conn != null)
1: 				conn.close();
1: 			if (!sqe.getSQLState().equalsIgnoreCase("08006")) {
1: 				throw sqe;
1: 			} else {
1: 				log(getTimestamp() + " " + dbType
1: 						+ " database shutdown completed, url = " + dbURL);
1: 			}
1: 		}
1: 	}
1: 
1: 	public void log(String msg) {
1: 		logger.write(msg + "\n");
1: 		logger.flush();
1: 
0: 		System.out.println(msg);
1: 	}
1: }
============================================================================