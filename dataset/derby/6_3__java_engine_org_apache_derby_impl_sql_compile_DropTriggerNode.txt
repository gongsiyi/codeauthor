1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DropTriggerNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A DropTriggerNode is the root of a QueryTree that represents a DROP TRIGGER
1:eac0369:  * statement.
1:eac0369:  *
1:eac0369:  */
1:3bb140c: class DropTriggerNode extends DDLStatementNode
1:eac0369: {
1:eac0369: 	private TableDescriptor td;
1:eac0369: 
1:3bb140c:     DropTriggerNode(TableName trigger, ContextManager cm) {
1:3bb140c:         super(trigger, cm);
1:3bb140c:     }
1:3bb140c: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "DROP TRIGGER";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this DropTriggerNode.  This means looking up the trigger,
1:eac0369: 	 * verifying it exists and getting its table uuid.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:eac0369: 		CompilerContext			cc = getCompilerContext();
1:eac0369: 		DataDictionary			dd = getDataDictionary();
1:eac0369: 
1:eac0369: 		SchemaDescriptor sd = getSchemaDescriptor();
1:eac0369: 
1:eac0369: 		TriggerDescriptor triggerDescriptor = null;
1:eac0369: 		
1:eac0369: 		if (sd.getUUID() != null)
1:eac0369: 			triggerDescriptor = dd.getTriggerDescriptor(getRelativeName(), sd);
1:eac0369: 
1:eac0369: 		if (triggerDescriptor == null)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "TRIGGER", getFullName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Get the table descriptor */
1:eac0369: 		td = triggerDescriptor.getTableDescriptor();
1:eac0369: 		cc.createDependency(td);
1:eac0369: 		cc.createDependency(triggerDescriptor);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// inherit generate() method from DDLStatementNode
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		return	getGenericConstantActionFactory().getDropTriggerConstantAction(
1:eac0369: 										 	getSchemaDescriptor(),
1:eac0369: 											getRelativeName(),
1:eac0369: 											td.getUUID());
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: class DropTriggerNode extends DDLStatementNode
1:     DropTriggerNode(TableName trigger, ContextManager cm) {
1:         super(trigger, cm);
0:         setNodeType(C_NodeTypes.DROP_TRIGGER_NODE);
1:     }
1: 
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:0061383
/////////////////////////////////////////////////////////////////////////
0: public class DropTriggerNode extends DDLStatementNode
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DropTriggerNode
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * A DropTriggerNode is the root of a QueryTree that represents a DROP TRIGGER
1:  * statement.
1:  *
0:  * @author Jamie
1:  */
0: public class DropTriggerNode extends DropStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	private TableDescriptor td;
1: 
0: 	public String statementToString()
1: 	{
1: 		return "DROP TRIGGER";
1: 	}
1: 
1: 	/**
1: 	 * Bind this DropTriggerNode.  This means looking up the trigger,
1: 	 * verifying it exists and getting its table uuid.
1: 	 *
0: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
1: 		CompilerContext			cc = getCompilerContext();
1: 		DataDictionary			dd = getDataDictionary();
1: 
1: 		SchemaDescriptor sd = getSchemaDescriptor();
1: 
1: 		TriggerDescriptor triggerDescriptor = null;
1: 		
1: 		if (sd.getUUID() != null)
1: 			triggerDescriptor = dd.getTriggerDescriptor(getRelativeName(), sd);
1: 
1: 		if (triggerDescriptor == null)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "TRIGGER", getFullName());
1: 		}
1: 
1: 		/* Get the table descriptor */
1: 		td = triggerDescriptor.getTableDescriptor();
1: 		cc.createDependency(td);
1: 		cc.createDependency(triggerDescriptor);
1: 			
0: 		return this;
1: 	}
1: 
1: 	// inherit generate() method from DDLStatementNode
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
1: 		return	getGenericConstantActionFactory().getDropTriggerConstantAction(
1: 										 	getSchemaDescriptor(),
1: 											getRelativeName(),
1: 											td.getUUID());
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * A DropTriggerNode is the root of a QueryTree that represents a DROP TRIGGER
0:  * statement.
0:  *
0:  * @author Jamie
0:  */
0: public class DropTriggerNode extends DropStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private TableDescriptor td;
0: 
0: 	public String statementToString()
0: 	{
0: 		return "DROP TRIGGER";
0: 	}
0: 
0: 	/**
0: 	 * Bind this DropTriggerNode.  This means looking up the trigger,
0: 	 * verifying it exists and getting its table uuid.
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public QueryTreeNode bind() throws StandardException
0: 	{
0: 		CompilerContext			cc = getCompilerContext();
0: 		DataDictionary			dd = getDataDictionary();
0: 
0: 		SchemaDescriptor sd = getSchemaDescriptor();
0: 
0: 		TriggerDescriptor triggerDescriptor = null;
0: 		
0: 		if (sd.getUUID() != null)
0: 			triggerDescriptor = dd.getTriggerDescriptor(getRelativeName(), sd);
0: 
0: 		if (triggerDescriptor == null)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "TRIGGER", getFullName());
0: 		}
0: 
0: 		/* Get the table descriptor */
0: 		td = triggerDescriptor.getTableDescriptor();
0: 		cc.createDependency(td);
0: 		cc.createDependency(triggerDescriptor);
0: 			
0: 		return this;
0: 	}
0: 
0: 	// inherit generate() method from DDLStatementNode
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return	getGenericConstantActionFactory().getDropTriggerConstantAction(
0: 										 	getSchemaDescriptor(),
0: 											getRelativeName(),
0: 											td.getUUID());
0: 	}
0: }
============================================================================