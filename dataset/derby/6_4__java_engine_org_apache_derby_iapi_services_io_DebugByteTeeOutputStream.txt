1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.DebugByteTeeOutputStream
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.*;
1:eac0369: import org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: 
1:eac0369: class DebugByteTeeOutputStream extends FilterOutputStream {
1:eac0369: 	private AccessibleByteArrayOutputStream tee = new AccessibleByteArrayOutputStream(256);
1:eac0369: 
1:eac0369: 	DebugByteTeeOutputStream(OutputStream out) {
1:eac0369: 		super(out);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public void write(int b) throws IOException {
1:eac0369: 		out.write(b);
1:eac0369: 		tee.write(b);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void write(byte[] b, int off, int len) throws IOException {
1:eac0369: 
1:eac0369: 		out.write(b,off,len);
1:eac0369: 		tee.write(b,off,len);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	void checkObject(Formatable f) {
1:eac0369: 
1:eb9f9c6: 		ByteArrayInputStream in = 
1:eb9f9c6:             new ByteArrayInputStream(tee.getInternalByteArray(), 0, tee.size());
1:eac0369: 
1:eac0369: 		FormatIdInputStream fin = new FormatIdInputStream(in);
1:eac0369: 
1:eac0369: 		// now get an empty object given the format identification
1:eac0369: 		// read it in
1:eac0369: 		// then compare it???
1:eac0369: 
1:eac0369: 		Formatable f1 = null;
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			f1 = (Formatable) fin.readObject();
1:eac0369: 
1:eac0369: 			if (f1.equals(f)) {
1:eac0369: 				return;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// If the two objects are not equal and it looks
1:eac0369: 			// like they don't implement their own equals()
1:eac0369: 			// (which requires a matching hashCode() then
1:eac0369: 			// just return. The object was read sucessfully.
1:eac0369: 
1:eac0369: 			if ((f1.hashCode() == System.identityHashCode(f1)) &&
1:eac0369: 				(f.hashCode() == System.identityHashCode(f)))
1:eac0369: 				return;
1:eb9f9c6: 
1:eac0369: 		} catch (Throwable t) {
1:eb9f9c6: 
1:eb9f9c6:             // for debugging purposes print this both to derby.log and to
1:eb9f9c6:             // System.out.
1:eb9f9c6:             String err_msg = 
1:eb9f9c6:                 "FormatableError:read error    : " + t.toString() + 
1:eb9f9c6:                 "\nFormatableError:class written : " + f.getClass();
1:eb9f9c6: 
1:eb9f9c6:             err_msg += (f1 == null) ? 
1:eb9f9c6:                 "FormatableError:read back as null" :
1:eb9f9c6:                 ("FormatableError:class read    : " + f1.getClass());
1:eb9f9c6: 
1:eb9f9c6:             err_msg +=
1:eb9f9c6:                 "FormatableError:write id      : " + 
1:eb9f9c6:                     FormatIdUtil.formatIdToString(f.getTypeFormatId());
1:eb9f9c6: 
1:eb9f9c6:             if (f1 != null) {
1:eb9f9c6:                 err_msg += "FormatableError:read id       : " + 
1:eb9f9c6:                     FormatIdUtil.formatIdToString(f1.getTypeFormatId());
1:eb9f9c6:             }
1:eb9f9c6: 
1:eb9f9c6:             System.out.println(err_msg);
1:eac0369: 			t.printStackTrace(System.out);
1:eb9f9c6: 
1:eb9f9c6:             if (SanityManager.DEBUG) {
1:eb9f9c6:                 SanityManager.DEBUG_PRINT("DebugByteTeeOutputStream", err_msg);
1:eb9f9c6:                 SanityManager.showTrace(t);
1:eb9f9c6:             }
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		//System.out.println("FormatableError:Class written " + f.getClass() + " format id " + f.getTypeFormatId());
1:eac0369: 		//if (f1 != null)
1:eac0369: 			//System.out.println("FormatableError:Class read    " + f1.getClass() + " format id " + f1.getTypeFormatId());
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:eb9f9c6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 		ByteArrayInputStream in = 
1:             new ByteArrayInputStream(tee.getInternalByteArray(), 0, tee.size());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             // for debugging purposes print this both to derby.log and to
1:             // System.out.
1:             String err_msg = 
1:                 "FormatableError:read error    : " + t.toString() + 
1:                 "\nFormatableError:class written : " + f.getClass();
1: 
1:             err_msg += (f1 == null) ? 
1:                 "FormatableError:read back as null" :
1:                 ("FormatableError:class read    : " + f1.getClass());
1: 
1:             err_msg +=
1:                 "FormatableError:write id      : " + 
1:                     FormatIdUtil.formatIdToString(f.getTypeFormatId());
1: 
1:             if (f1 != null) {
1:                 err_msg += "FormatableError:read id       : " + 
1:                     FormatIdUtil.formatIdToString(f1.getTypeFormatId());
1:             }
1: 
1:             System.out.println(err_msg);
1: 
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.DEBUG_PRINT("DebugByteTeeOutputStream", err_msg);
1:                 SanityManager.showTrace(t);
1:             }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.DebugByteTeeOutputStream
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.*;
1: import org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;
1: 
1: 
1: class DebugByteTeeOutputStream extends FilterOutputStream {
1: 
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	private AccessibleByteArrayOutputStream tee = new AccessibleByteArrayOutputStream(256);
1: 
1: 	DebugByteTeeOutputStream(OutputStream out) {
1: 		super(out);
1: 	}
1: 	
1: 	public void write(int b) throws IOException {
1: 		out.write(b);
1: 		tee.write(b);
1: 	}
1: 
1: 	public void write(byte[] b, int off, int len) throws IOException {
1: 
1: 		out.write(b,off,len);
1: 		tee.write(b,off,len);
1: 	}
1: 
1: 
1: 	void checkObject(Formatable f) {
1: 
0: 		ByteArrayInputStream in = new ByteArrayInputStream(tee.getInternalByteArray(), 0, tee.size());
1: 
1: 		FormatIdInputStream fin = new FormatIdInputStream(in);
1: 
1: 		// now get an empty object given the format identification
1: 		// read it in
1: 		// then compare it???
1: 
1: 		Formatable f1 = null;
1: 		try {
1: 
1: 			f1 = (Formatable) fin.readObject();
1: 
1: 			if (f1.equals(f)) {
1: 				return;
1: 			}
1: 
1: 			// If the two objects are not equal and it looks
1: 			// like they don't implement their own equals()
1: 			// (which requires a matching hashCode() then
1: 			// just return. The object was read sucessfully.
1: 
1: 			if ((f1.hashCode() == System.identityHashCode(f1)) &&
1: 				(f.hashCode() == System.identityHashCode(f)))
1: 				return;
1: 		} catch (Throwable t) {
0: 			System.out.println("FormatableError:read error    : " + t.toString());
0: 			System.out.println("FormatableError:class written : " + f.getClass());
0:             if( null == f1)
0:                 System.out.println("FormatableError:read back as null");
0:             else
0:                 System.out.println("FormatableError:class read    : " + f1.getClass());
0: 			System.out.println("FormatableError:write id      : " + FormatIdUtil.formatIdToString(f.getTypeFormatId()));
0:             if( null != f1)
0:                 System.out.println("FormatableError:read id       : " + FormatIdUtil.formatIdToString(f1.getTypeFormatId()));
1: 			t.printStackTrace(System.out);
1: 		}
1: 
1: 		//System.out.println("FormatableError:Class written " + f.getClass() + " format id " + f.getTypeFormatId());
1: 		//if (f1 != null)
1: 			//System.out.println("FormatableError:Class read    " + f1.getClass() + " format id " + f1.getTypeFormatId());
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.*;
0: import org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;
0: 
0: 
0: class DebugByteTeeOutputStream extends FilterOutputStream {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	private AccessibleByteArrayOutputStream tee = new AccessibleByteArrayOutputStream(256);
0: 
0: 	DebugByteTeeOutputStream(OutputStream out) {
0: 		super(out);
0: 	}
0: 	
0: 	public void write(int b) throws IOException {
0: 		out.write(b);
0: 		tee.write(b);
0: 	}
0: 
0: 	public void write(byte[] b, int off, int len) throws IOException {
0: 
0: 		out.write(b,off,len);
0: 		tee.write(b,off,len);
0: 	}
0: 
0: 
0: 	void checkObject(Formatable f) {
0: 
0: 		ByteArrayInputStream in = new ByteArrayInputStream(tee.getInternalByteArray(), 0, tee.size());
0: 
0: 		FormatIdInputStream fin = new FormatIdInputStream(in);
0: 
0: 		// now get an empty object given the format identification
0: 		// read it in
0: 		// then compare it???
0: 
0: 		Formatable f1 = null;
0: 		try {
0: 
0: 			f1 = (Formatable) fin.readObject();
0: 
0: 			if (f1.equals(f)) {
0: 				return;
0: 			}
0: 
0: 			// If the two objects are not equal and it looks
0: 			// like they don't implement their own equals()
0: 			// (which requires a matching hashCode() then
0: 			// just return. The object was read sucessfully.
0: 
0: 			if ((f1.hashCode() == System.identityHashCode(f1)) &&
0: 				(f.hashCode() == System.identityHashCode(f)))
0: 				return;
0: 		} catch (Throwable t) {
0: 			System.out.println("FormatableError:read error    : " + t.toString());
0: 			System.out.println("FormatableError:class written : " + f.getClass());
0:             if( null == f1)
0:                 System.out.println("FormatableError:read back as null");
0:             else
0:                 System.out.println("FormatableError:class read    : " + f1.getClass());
0: 			System.out.println("FormatableError:write id      : " + FormatIdUtil.formatIdToString(f.getTypeFormatId()));
0:             if( null != f1)
0:                 System.out.println("FormatableError:read id       : " + FormatIdUtil.formatIdToString(f1.getTypeFormatId()));
0: 			t.printStackTrace(System.out);
0: 		}
0: 
0: 		//System.out.println("FormatableError:Class written " + f.getClass() + " format id " + f.getTypeFormatId());
0: 		//if (f1 != null)
0: 			//System.out.println("FormatableError:Class read    " + f1.getClass() + " format id " + f1.getTypeFormatId());
0: 	}
0: 
0: }
============================================================================