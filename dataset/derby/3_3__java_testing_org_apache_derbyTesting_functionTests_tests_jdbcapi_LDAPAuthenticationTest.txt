1:f047724: /*
7:f047724: 
1:f047724:    Derby - Class 
1:f047724:        org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest
1:f047724: 
1:f047724:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f047724:    contributor license agreements.  See the NOTICE file distributed with
1:f047724:    this work for additional information regarding copyright ownership.
1:f047724:    The ASF licenses this file to You under the Apache License, Version 2.0
1:f047724:    (the "License"); you may not use this file except in compliance with
1:f047724:    the License.  You may obtain a copy of the License at
1:f047724: 
1:f047724:       http://www.apache.org/licenses/LICENSE-2.0
1:f047724: 
1:f047724:    Unless required by applicable law or agreed to in writing, software
1:f047724:    distributed under the License is distributed on an "AS IS" BASIS,
1:f047724:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f047724:    See the License for the specific language governing permissions and
1:f047724:    limitations under the License.
1:f047724: 
2:f047724:  */
1:f047724: 
1:f047724: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:f047724: 
1:f047724: import java.sql.CallableStatement;
1:f047724: import java.sql.Connection;
1:f047724: import java.sql.DriverManager;
1:f047724: import java.sql.PreparedStatement;
1:f047724: import java.sql.ResultSet;
1:f047724: import java.sql.SQLException;
1:f047724: import java.util.Properties;
1:f047724: import javax.sql.DataSource;
1:f047724: import junit.framework.Test;
1:f047724: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f047724: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:f047724: import org.apache.derbyTesting.junit.JDBC;
1:f047724: import org.apache.derbyTesting.junit.JDBCDataSource;
1:f047724: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:f047724: import org.apache.derbyTesting.junit.TestConfiguration;
1:f047724: 
1:f047724: // tests that appropriate and invalid connections can be made to 
1:f047724: // an LDAPServer when property authenticationProvider is set to 'LDAP'.
1:f047724: // This test assumes at least one valid user (to be passed in) and one
1:f047724: // additional user (kathy / kathyS) to be setup in ou=People on the
1:f047724: // LDAPServer.
1:f047724: public class LDAPAuthenticationTest extends BaseJDBCTestCase {
1:f047724: 
1:f047724:     private static String ldapServer;
1:f047724:     private static String ldapPort;
1:f047724:     private static String dnString;
1:f047724:     private static String ldapUser; // existing valid user on ldap server
1:f047724:     private static String ldapPassword; // password for existing valid user on ldap server
1:7b9c4ca:     private static String ldapContextFactory; // optional initial context factory
1:7b9c4ca:         // if not passed in with -DderbyTesting.ldapContextFactory, uses sun's
1:f047724: 
1:2327361:     // create own policy file, so we can connect to the ldap server
1:b32256d:     private static final String POLICY_FILE_NAME =
1:b32256d:         "org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPTests.policy";
1:f047724:     
1:f047724:     /** Creates a new instance of the Test */
1:f047724:     public LDAPAuthenticationTest(String name) {
1:f047724:         super(name);
6:f047724:     }
1:f047724: 
2:f047724:     /**
1:f047724:      * Ensure all connections are not in auto commit mode.
1:f047724:      */
1:f047724:     protected void initializeConnection(Connection conn) throws SQLException {
1:f047724:         conn.setAutoCommit(false);
1:f047724:     }
1:f047724: 
1:f047724:     public static Test suite() {
1:f047724:         if (JDBC.vmSupportsJSR169())
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "cannot run with JSR169 - missing functionality" +
1:f047724:                 " for org.apache.derby.iapi.jdbc.AuthenticationService");
1:1ae02c9: 
1:f047724:         ldapUser=getSystemProperty("derbyTesting.ldapUser");
1:1ae02c9: 
1:f047724:         if (ldapUser == null || ldapUser.length() < 1)
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "LDAPAuthenticationTest requires property " +
1:f047724:                 "derbyTesting.ldapUser set to a valid user set up on the " +
1:f047724:                 "ldapServer, eg: -DderbyTesting.ldapUser=CharliesPwd. In addition," +
1:f047724:                 "test requires a user 'kathy', pwd 'kathyS' to be set up");
1:1ae02c9: 
1:f047724:         ldapPassword=getSystemProperty("derbyTesting.ldapPassword");
1:1ae02c9: 
1:f047724:         if (ldapPassword == null || ldapPassword.length() < 1)
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "LDAPAuthenticationTest requires property " +
1:f047724:                 "derbyTesting.ldapPassword set the password of a valid user set" +
1:f047724:                 " up on the ldapServer, eg: -DderbyTesting.ldapPassword=Charlie");
1:1ae02c9: 
1:f047724:         ldapServer=getSystemProperty("derbyTesting.ldapServer");
1:1ae02c9: 
1:f047724:         if (ldapServer == null || ldapServer.length() < 1)
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "LDAPAuthenticationTest requires property " +
1:f047724:                 "derbyTesting.ldapServer set, eg: " +
1:f047724:                 "-DderbyTesting.ldapServer=myldapserver.myorg.org");
1:1ae02c9: 
1:f047724:         ldapPort=getSystemProperty("derbyTesting.ldapPort");
1:1ae02c9: 
1:f047724:         if (ldapPort == null || ldapPort.length() < 1)
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "LDAPAuthenticationTest requires property " +
1:f047724:                 "derbyTesting.ldapPort set, eg: -DderbyTesting.ldapPort=333");
1:1ae02c9: 
1:f047724:         dnString=getSystemProperty("derbyTesting.dnString");
1:1ae02c9: 
1:f047724:         if (dnString == null || dnString.length() < 1)
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "LDAPAuthenticationTest requires property " +
1:f047724:                 "derbyTesting.dnString for setting o=, eg: " +
1:f047724:                 "-DderbyTesting.dnString=myJNDIstring");
1:1ae02c9: 
1:7b9c4ca:         ldapContextFactory=getSystemProperty("derbyTesting.ldapContextFactory");
1:f047724: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("LDAPAuthenticationTest");
1:0e5e822:         suite.addTest(baseSuite("LDAPAuthenticationTest:embedded",
1:0e5e822:             "testLDAPConnection"));
1:f047724:         suite.addTest(TestConfiguration.clientServerDecorator(
1:0e5e822:             baseSuite("LDAPAuthenticationTest:client", "testLDAPConnection")));
1:b32256d: 
1:b32256d:         // Grant ALL FILES execute, and getPolicy permissions, as well as
1:b32256d:         // resolve/connect for the LDAP server identified with the property.
1:b32256d:         return new SecurityManagerSetup(suite, POLICY_FILE_NAME);
1:f047724:     }
1:f047724: 
1:f047724:     public static Test baseSuite(String name, String fixture) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:f047724:         Test test = new LDAPAuthenticationTest(fixture);
1:f047724:         setBaseProps(suite, test);
1:f047724: 
1:f047724:         // This test needs to run in a new single use database as we're setting
1:f047724:         // a number of properties
1:f047724:         return TestConfiguration.singleUseDatabaseDecorator(suite);
1:f047724:     }
1:f047724: 
1:1ae02c9:     protected static void setBaseProps(BaseTestSuite suite, Test test)
3:f047724:     {
1:f047724:         // set some debugging at database level properties
1:f047724:         Properties props = new Properties();
1:f047724:         props.setProperty("derby.infolog.append", "true");
1:f047724:         props.setProperty("derby.debug.true", "AuthenticationTrace");
1:f047724:         // add some users. these should not be defined on the ldap server
1:f047724:         props.setProperty("derby.user.system", "manager");
1:f047724:         props.setProperty("derby.user.Jamie", "theHooligan");
1:f047724:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:f047724:     }
1:f047724: 
1:f047724:     protected void tearDown() throws Exception {
1:f047724:         removeSystemProperty("derby.connection.requireAuthentication");
1:f047724:         super.tearDown();
1:f047724:     }
1:f047724: 
1:f047724:     protected void setDatabaseProperty(
1:f047724:             String propertyName, String value, Connection conn) 
1:f047724:     throws SQLException {
1:f047724:         CallableStatement setDBP =  conn.prepareCall(
1:f047724:         "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:f047724:         setDBP.setString(1, propertyName);
1:f047724:         setDBP.setString(2, value);
1:f047724:         setDBP.execute();
1:f047724:         setDBP.close();
1:f047724:     }
1:f047724: 
1:f047724:     protected String getDatabaseProperty(
1:f047724:             String propertyName, Connection conn) 
1:f047724:     throws SQLException {
1:f047724:         PreparedStatement getDBP =  conn.prepareStatement(
1:f047724:         "VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(?)");
1:f047724:         getDBP.setString(1, propertyName);
1:f047724:         ResultSet rs = getDBP.executeQuery();
1:f047724:         rs.next();
1:f047724:         String value = rs.getString(1);
1:f047724:         rs.close();
1:f047724:         return value;
1:f047724:     }    
1:f047724:      
1:0e5e822:     public void testLDAPConnection() throws SQLException {
1:f047724:         // setup 
1:f047724:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:f047724:         DataSource ds = JDBCDataSource.getDataSource();
1:f047724:         Connection conn = ds.getConnection("system", "admin");
1:f047724:         // set the ldap properties
1:f047724:         setDatabaseProperty("derby.connection.requireAuthentication", "true", conn);
1:f047724:         setDatabaseProperty("derby.authentication.provider", "LDAP", conn);
1:f047724:         setDatabaseProperty("derby.authentication.server", ldapServer, conn);
1:f047724:         setDatabaseProperty("derby.authentication.ldap.searchBase", "o=" + dnString, conn);
1:f047724:         setDatabaseProperty("derby.authentication.ldap.searchFilter","(&(objectClass=inetOrgPerson)(uid=%USERNAME%))", conn);
1:7b9c4ca:         // java.naming.factory.initial is Context.INITIAL_CONTEXT_FACTORY
1:7b9c4ca:         // but using literal string here to avoid unnecessary import.
1:7b9c4ca:         // If the initial context factory is not provided it'll default to 
1:7b9c4ca:         // com.sun.jndi.ldap.LdapCtxFactory in LDAPAuthenticationSchemeImpl.
1:7b9c4ca:         if ((ldapContextFactory != null) && (ldapContextFactory.length() > 0))
1:7b9c4ca:             setDatabaseProperty("java.naming.factory.initial", ldapContextFactory, conn);
1:f047724:         commit();
1:f047724:         // shutdown the database as system, so the properties take effect
1:f047724:         TestConfiguration.getCurrent().shutdownDatabase();
1:f047724:         conn.close();
1:f047724: 
1:f047724:         // actual test. 
1:f047724:         // first attempt simple connection that should succeed
1:f047724:         ds = JDBCDataSource.getDataSource(dbName);
1:f047724:         assertLDAPDSConnectionOK(ds, ldapUser, ldapPassword);
1:f047724:         assertLDAPDrvMgrConnectionOK(dbName, ldapUser, ldapPassword);
1:f047724:         // try to get a connection for a user that has been added, but who
1:f047724:         // should *not* be on the ldap server; should fail
1:f047724:         assertInvalidLDAPDSConnectionFails(ds, "Jamie", "theHooligan");
1:f047724:         assertInvalidLDAPDrvMgrConnectionFails(dbName, "Jamie", "thHooligan");
1:f047724:         // try to get a connection using the valid ldapuser, but incorrect pwd
1:f047724:         assertInvalidLDAPDSConnectionFails(ds, ldapUser, ldapPassword + "ish");
1:f047724:         assertInvalidLDAPDrvMgrConnectionFails(dbName, ldapUser, ldapPassword + "ish");
1:f047724: 
1:f047724:         // set the users DN locally
1:f047724:         Connection conn3 = ds.getConnection(ldapUser, ldapPassword);
1:f047724:         String tmpString1 = "derby.user." + ldapUser;
1:f047724:         String tmpString2 = "uid=" + ldapUser + ",ou=People,o=" + dnString; 
1:f047724:         setDatabaseProperty(tmpString1, tmpString2, conn3);
1:f047724:         conn3.commit();
1:f047724:         // restart to let setting take effect
1:f047724:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:f047724:         // shutdown really only happens on next attempt to connect
2:f047724:         try {
1:f047724:             ds.getConnection(ldapUser, ldapPassword);
1:f047724:             fail("expected system shutdown resulting in 08006 error.");
1:f047724:         } catch (SQLException e) {
1:f047724:             assertSQLState("08006", e);
1:f047724:         }
1:f047724:         conn3.close();
1:f047724:         
1:f047724:         // It is now required to re-establish the name
1:f047724:         // of the database...
1:f047724:         dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:f047724:         ds = JDBCDataSource.getDataSource(dbName);
1:f047724:         // test again
1:f047724:         // connect using a valid ldap user/pwd
1:f047724:         assertLDAPDSConnectionOK(ds, ldapUser, ldapPassword);
1:f047724:         assertLDAPDrvMgrConnectionOK(dbName, ldapUser, ldapPassword);
1:f047724:         // try to use a not specified elsewhere, but hopefully valid ldapUser:
1:f047724:         // as no local DN is cached, look-up will be performed with the default
1:f047724:         // search filter.
1:f047724:         assertLDAPDSConnectionOK(ds, "kathy", "kathyS");
1:f047724:         assertLDAPDrvMgrConnectionOK(dbName, "kathy", "kathyS");
1:f047724:         // again try to get a connection for a user that has been added, but
1:f047724:         // should *not* be on the ldap server; should fail
1:f047724:         assertInvalidLDAPDSConnectionFails(ds, "Jamie", "theHooligan");
1:f047724:         assertInvalidLDAPDrvMgrConnectionFails(dbName, "Jamie", "theHooligan");
1:f047724:         // try to get a connection using the valid ldapuser, but incorrect pwd
1:f047724:         assertInvalidLDAPDSConnectionFails(ds, ldapUser, ldapPassword + "ish");
1:f047724:         assertInvalidLDAPDrvMgrConnectionFails(dbName, ldapUser, ldapPassword + "ish");
1:f047724:         
1:f047724:         assertLDAPDSConnectionOK(ds, ldapUser, ldapPassword);
1:f047724:         // as we don't have requireAuthentication, or the authentication provider,
1:f047724:         // set on system level, we can shutdown the system with any user.
1:f047724:         assertDSSystemShutdownOK("someuser", "somestring");
1:f047724:         
1:f047724:         // cleanup. Can't use default teardown mechanism yet as it uses default
1:f047724:         // user/password and we're set to LDAP Authentication at this point.
1:f047724:         cleanup(ds);
1:f047724:     }
1:f047724: 
1:f047724:     // cleanup gets a conn using the ldap user & pwd, so we can unset the
1:f047724:     // requireAuthentication so the default teardown & db cleanup can happen
1:f047724:     protected void cleanup(DataSource ds) throws SQLException {
1:f047724:         Connection conn2 = ds.getConnection(ldapUser, ldapPassword);
1:f047724:         setDatabaseProperty("derby.connection.requireAuthentication", "false", conn2);
1:f047724:         conn2.commit();
1:f047724:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:f047724:         // shutdown only really happens on attempting to get a connection;
1:f047724:         // this exercise is needed so the DatabasePropertySetup.teardown() can work.
1:f047724:         // Getting a 08006 is not really part of the test, but would be good
1:f047724:         // to be warned of if it happens.
1:f047724:         try {
1:f047724:             ds.getConnection(ldapUser, ldapPassword);
1:f047724:             fail("expected system shutdown resulting in 08006 error.");
1:f047724:         } catch (SQLException e) {
1:f047724:             assertSQLState("08006", e);
1:f047724:         }
1:f047724:         conn2.close();
1:f047724:     }
1:f047724: 
1:f047724:     public void assertLDAPDSConnectionOK(
1:f047724:             DataSource ds, String user, String password)
1:f047724:     throws SQLException {
1:f047724:         Connection conn = ds.getConnection(user, password);
1:f047724:         assertNotNull(conn);
1:f047724:         conn.close();
1:f047724:     }
1:f047724: 
1:f047724:     protected void assertLDAPDrvMgrConnectionOK(
1:f047724:             String dbName, String user, String password)
1:f047724:     throws SQLException
1:f047724:     {
1:f047724:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:f047724:         Connection conn = DriverManager.getConnection(url, user, password);
1:f047724:         assertNotNull(conn);
1:f047724:         conn.close();
1:f047724:     }
1:f047724: 
1:f047724:     public void assertInvalidLDAPDSConnectionFails(
1:f047724:             DataSource ds, String user, String password)
1:f047724:     throws SQLException {
1:f047724:         try {
1:f047724:             ds.getConnection(user, password);
1:f047724:             fail("expected invalid connection error (for DataSource)");
1:f047724:         } catch (SQLException se) {
1:f047724:             assertSQLState("08004", se);
1:f047724:         }
1:f047724:     }
1:f047724: 
1:f047724:     protected void assertInvalidLDAPDrvMgrConnectionFails(
1:f047724:             String dbName, String user, String password)
1:f047724:     throws SQLException
1:f047724:     {
1:f047724:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:f047724:         try {
1:f047724:             DriverManager.getConnection(url, user, password).close();
1:f047724:             fail("expected invalid connection error (for DataSource)");
1:f047724:         } catch (SQLException se) {
1:f047724:             assertSQLState("08004", se);
1:f047724:         }
1:f047724:     }
1:f047724: 
1:f047724:     protected void assertDSSystemShutdownOK(
1:f047724:             String user, String password)
1:f047724:     throws SQLException {
1:f047724:         DataSource ds;
1:f047724:         if (usingEmbedded())
1:f047724:         {
1:f047724:             // we cannot use JDBCDataSource.getDataSource() (which uses the
1:f047724:             // default database name), unless we specifically clear the 
1:f047724:             // databaseName. Otherwise, only the database will be shutdown.
1:f047724:             // The alternative is to use jDBCDataSource.getDatasource(dbName),
1:f047724:             // where dbName is an empty string - this will in the current code
1:f047724:             // be interpreted as a system shutdown.
1:f047724:             ds = JDBCDataSource.getDataSource();
1:f047724:             JDBCDataSource.clearStringBeanProperty(ds, "databaseName");
1:f047724:         }
1:f047724:         else 
1:f047724:         {
1:f047724:             // With client, we cannot user clearStringBeanProperty on the  
1:f047724:             // databaseName, that will result in error 08001 - 
1:f047724:             // Required DataSource property databaseName not set.
1:f047724:             // So, we pass an empty string as databaseName, which the current
1:f047724:             // code interprets as a system shutdown.
1:f047724:             ds = JDBCDataSource.getDataSource("");
1:f047724:         }
1:f047724: 
1:f047724:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:f047724:         try {
1:f047724:             ds.getConnection(user, password);
1:f047724:             fail("expected system shutdown resulting in XJ015 error");
1:f047724:         } catch (SQLException e) {
1:f047724:             // expect XJ015, system shutdown, on successful shutdown
1:f047724:             assertSQLState("XJ015", e);
1:1ae02c9:         }
1:f047724:     }
1:f047724: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(
1:                 "cannot run with JSR169 - missing functionality" +
1: 
1: 
1:             return new BaseTestSuite(
1:                 "LDAPAuthenticationTest requires property " +
1: 
1: 
1:             return new BaseTestSuite(
1:                 "LDAPAuthenticationTest requires property " +
1: 
1: 
1:             return new BaseTestSuite(
1:                 "LDAPAuthenticationTest requires property " +
1: 
1: 
1:             return new BaseTestSuite(
1:                 "LDAPAuthenticationTest requires property " +
1: 
1: 
1:             return new BaseTestSuite(
1:                 "LDAPAuthenticationTest requires property " +
1: 
1:         BaseTestSuite suite = new BaseTestSuite("LDAPAuthenticationTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
/////////////////////////////////////////////////////////////////////////
1:     protected static void setBaseProps(BaseTestSuite suite, Test test)
/////////////////////////////////////////////////////////////////////////
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b32256d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String POLICY_FILE_NAME =
1:         "org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPTests.policy";
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Grant ALL FILES execute, and getPolicy permissions, as well as
1:         // resolve/connect for the LDAP server identified with the property.
1:         return new SecurityManagerSetup(suite, POLICY_FILE_NAME);
/////////////////////////////////////////////////////////////////////////
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:7b9c4ca
/////////////////////////////////////////////////////////////////////////
1:     private static String ldapContextFactory; // optional initial context factory
1:         // if not passed in with -DderbyTesting.ldapContextFactory, uses sun's
/////////////////////////////////////////////////////////////////////////
1:         ldapContextFactory=getSystemProperty("derbyTesting.ldapContextFactory");
/////////////////////////////////////////////////////////////////////////
1:         // java.naming.factory.initial is Context.INITIAL_CONTEXT_FACTORY
1:         // but using literal string here to avoid unnecessary import.
1:         // If the initial context factory is not provided it'll default to 
1:         // com.sun.jndi.ldap.LdapCtxFactory in LDAPAuthenticationSchemeImpl.
1:         if ((ldapContextFactory != null) && (ldapContextFactory.length() > 0))
1:             setDatabaseProperty("java.naming.factory.initial", ldapContextFactory, conn);
commit:2327361
/////////////////////////////////////////////////////////////////////////
1:     // create own policy file, so we can connect to the ldap server
0:         "functionTests/tests/jdbcapi/LDAPTests.policy";
commit:0e5e822
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(baseSuite("LDAPAuthenticationTest:embedded",
1:             "testLDAPConnection"));
1:             baseSuite("LDAPAuthenticationTest:client", "testLDAPConnection")));
/////////////////////////////////////////////////////////////////////////
1:     public void testLDAPConnection() throws SQLException {
commit:f047724
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class 
1:        org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.io.File;
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: import javax.sql.DataSource;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
0: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: // tests that appropriate and invalid connections can be made to 
1: // an LDAPServer when property authenticationProvider is set to 'LDAP'.
1: // This test assumes at least one valid user (to be passed in) and one
1: // additional user (kathy / kathyS) to be setup in ou=People on the
1: // LDAPServer.
1: public class LDAPAuthenticationTest extends BaseJDBCTestCase {
1: 
1:     private static String ldapServer;
1:     private static String ldapPort;
1:     private static String dnString;
1:     private static String ldapUser; // existing valid user on ldap server
1:     private static String ldapPassword; // password for existing valid user on ldap server
1: 
0:     // create own policy file, use the one from XAJNDITest so
0:     // we can connect to the ldap server
0:     private static String POLICY_FILE_NAME = 
0:         "functionTests/tests/jdbcapi/XAJNDITest.policy";
0:     private static String TARGET_POLICY_FILE_NAME = "derby_tests.policy";
1:     
1:     /** Creates a new instance of the Test */
1:     public LDAPAuthenticationTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Ensure all connections are not in auto commit mode.
1:      */
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:     }
1: 
1:     public static Test suite() {
1:         if (JDBC.vmSupportsJSR169())
0:             return new TestSuite("cannt run with JSR169 - missing functionality" +
1:                 " for org.apache.derby.iapi.jdbc.AuthenticationService");
1:         ldapUser=getSystemProperty("derbyTesting.ldapUser");
1:         if (ldapUser == null || ldapUser.length() < 1)
0:             return new TestSuite("LDAPAuthenticationTest requires property " +
1:                 "derbyTesting.ldapUser set to a valid user set up on the " +
1:                 "ldapServer, eg: -DderbyTesting.ldapUser=CharliesPwd. In addition," +
1:                 "test requires a user 'kathy', pwd 'kathyS' to be set up");
1:         ldapPassword=getSystemProperty("derbyTesting.ldapPassword");
1:         if (ldapPassword == null || ldapPassword.length() < 1)
0:             return new TestSuite("LDAPAuthenticationTest requires property " +
1:                 "derbyTesting.ldapPassword set the password of a valid user set" +
1:                 " up on the ldapServer, eg: -DderbyTesting.ldapPassword=Charlie");
1:         ldapServer=getSystemProperty("derbyTesting.ldapServer");
1:         if (ldapServer == null || ldapServer.length() < 1)
0:             return new TestSuite("LDAPAuthenticationTest requires property " +
1:                 "derbyTesting.ldapServer set, eg: " +
1:                 "-DderbyTesting.ldapServer=myldapserver.myorg.org");
1:         ldapPort=getSystemProperty("derbyTesting.ldapPort");
1:         if (ldapPort == null || ldapPort.length() < 1)
0:             return new TestSuite("LDAPAuthenticationTest requires property " +
1:                 "derbyTesting.ldapPort set, eg: -DderbyTesting.ldapPort=333");
1:         dnString=getSystemProperty("derbyTesting.dnString");
1:         if (dnString == null || dnString.length() < 1)
0:             return new TestSuite("LDAPAuthenticationTest requires property " +
1:                 "derbyTesting.dnString for setting o=, eg: " +
1:                 "-DderbyTesting.dnString=myJNDIstring");
1: 
0:         TestSuite suite = new TestSuite("LDAPAuthenticationTest");
0:         suite.addTest(baseSuite("LDAPAuthenticationTest:embedded", "testConnection"));
1:         suite.addTest(TestConfiguration.clientServerDecorator(
0:                 baseSuite("LDAPAuthenticationTest:client", "testConnection")));
0:         Test test = decorateWithPolicy(suite);
0:         return test;            
1:     }
1: 
1:     public static Test baseSuite(String name, String fixture) {
0:         TestSuite suite = new TestSuite(name);
1:         Test test = new LDAPAuthenticationTest(fixture);
1:         setBaseProps(suite, test);
1: 
1:         // This test needs to run in a new single use database as we're setting
1:         // a number of properties
1:         return TestConfiguration.singleUseDatabaseDecorator(suite);
1:     }
1: 
0:     protected static void setBaseProps(TestSuite suite, Test test) 
1:     {
1:         // set some debugging at database level properties
1:         Properties props = new Properties();
1:         props.setProperty("derby.infolog.append", "true");
1:         props.setProperty("derby.debug.true", "AuthenticationTrace");
1:         // add some users. these should not be defined on the ldap server
1:         props.setProperty("derby.user.system", "manager");
1:         props.setProperty("derby.user.Jamie", "theHooligan");
1:         suite.addTest(new DatabasePropertyTestSetup (test, props, true));
1:     }
1: 
0:     // grant ALL FILES execute, and getPolicy permissions, as well
0:     // as resolve/connect for the ldap server identified with the property
0:     private static Test decorateWithPolicy(Test test) {
0:         String ldapPolicyName = new LDAPAuthenticationTest("test").makeServerPolicyName();
0:         //
0:         // Install a security manager using the initial policy file.
0:         //
0:         test = new SecurityManagerSetup(test,ldapPolicyName );
0:         // Copy over the policy file we want to use.
0:         //
0:         test = new SupportFilesSetup(
0:             test, null, new String[] {POLICY_FILE_NAME},
0:             null, new String[] {TARGET_POLICY_FILE_NAME}
0:         );
0:         return test;
1:     }
1:     
1:     /**
0:      * Construct the name of the server policy file.
1:      */
0:     private String makeServerPolicyName()
1:     {
1:         try {
0:             String  userDir = getSystemProperty( "user.dir" );
0:             String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
0:             File      file = new File( fileName );
0:             String  urlString = file.toURL().toExternalForm();
1: 
0:             return urlString;
1:         }
0:         catch (Exception e)
1:         {
0:             return null;
1:         }
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         removeSystemProperty("derby.connection.requireAuthentication");
1:         super.tearDown();
1:     }
1: 
1:     protected void setDatabaseProperty(
1:             String propertyName, String value, Connection conn) 
1:     throws SQLException {
1:         CallableStatement setDBP =  conn.prepareCall(
1:         "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
1:         setDBP.setString(1, propertyName);
1:         setDBP.setString(2, value);
1:         setDBP.execute();
1:         setDBP.close();
1:     }
1: 
1:     protected String getDatabaseProperty(
1:             String propertyName, Connection conn) 
1:     throws SQLException {
1:         PreparedStatement getDBP =  conn.prepareStatement(
1:         "VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(?)");
1:         getDBP.setString(1, propertyName);
1:         ResultSet rs = getDBP.executeQuery();
1:         rs.next();
1:         String value = rs.getString(1);
1:         rs.close();
1:         return value;
1:     }    
1:      
0:     public void testConnection() throws SQLException {
1:         // setup 
1:         String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         Connection conn = ds.getConnection("system", "admin");
1:         // set the ldap properties
1:         setDatabaseProperty("derby.connection.requireAuthentication", "true", conn);
1:         setDatabaseProperty("derby.authentication.provider", "LDAP", conn);
1:         setDatabaseProperty("derby.authentication.server", ldapServer, conn);
1:         setDatabaseProperty("derby.authentication.ldap.searchBase", "o=" + dnString, conn);
1:         setDatabaseProperty("derby.authentication.ldap.searchFilter","(&(objectClass=inetOrgPerson)(uid=%USERNAME%))", conn);
1:         commit();
1:         // shutdown the database as system, so the properties take effect
1:         TestConfiguration.getCurrent().shutdownDatabase();
1:         conn.close();
1: 
1:         // actual test. 
1:         // first attempt simple connection that should succeed
1:         ds = JDBCDataSource.getDataSource(dbName);
1:         assertLDAPDSConnectionOK(ds, ldapUser, ldapPassword);
1:         assertLDAPDrvMgrConnectionOK(dbName, ldapUser, ldapPassword);
1:         // try to get a connection for a user that has been added, but who
1:         // should *not* be on the ldap server; should fail
1:         assertInvalidLDAPDSConnectionFails(ds, "Jamie", "theHooligan");
1:         assertInvalidLDAPDrvMgrConnectionFails(dbName, "Jamie", "thHooligan");
1:         // try to get a connection using the valid ldapuser, but incorrect pwd
1:         assertInvalidLDAPDSConnectionFails(ds, ldapUser, ldapPassword + "ish");
1:         assertInvalidLDAPDrvMgrConnectionFails(dbName, ldapUser, ldapPassword + "ish");
1: 
1:         // set the users DN locally
1:         Connection conn3 = ds.getConnection(ldapUser, ldapPassword);
1:         String tmpString1 = "derby.user." + ldapUser;
1:         String tmpString2 = "uid=" + ldapUser + ",ou=People,o=" + dnString; 
1:         setDatabaseProperty(tmpString1, tmpString2, conn3);
1:         conn3.commit();
1:         // restart to let setting take effect
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         // shutdown really only happens on next attempt to connect
1:         try {
1:             ds.getConnection(ldapUser, ldapPassword);
1:             fail("expected system shutdown resulting in 08006 error.");
1:         } catch (SQLException e) {
1:             assertSQLState("08006", e);
1:         }
1:         conn3.close();
1:         
1:         // It is now required to re-establish the name
1:         // of the database...
1:         dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:         ds = JDBCDataSource.getDataSource(dbName);
1:         // test again
1:         // connect using a valid ldap user/pwd
1:         assertLDAPDSConnectionOK(ds, ldapUser, ldapPassword);
1:         assertLDAPDrvMgrConnectionOK(dbName, ldapUser, ldapPassword);
1:         // try to use a not specified elsewhere, but hopefully valid ldapUser:
1:         // as no local DN is cached, look-up will be performed with the default
1:         // search filter.
1:         assertLDAPDSConnectionOK(ds, "kathy", "kathyS");
1:         assertLDAPDrvMgrConnectionOK(dbName, "kathy", "kathyS");
1:         // again try to get a connection for a user that has been added, but
1:         // should *not* be on the ldap server; should fail
1:         assertInvalidLDAPDSConnectionFails(ds, "Jamie", "theHooligan");
1:         assertInvalidLDAPDrvMgrConnectionFails(dbName, "Jamie", "theHooligan");
1:         // try to get a connection using the valid ldapuser, but incorrect pwd
1:         assertInvalidLDAPDSConnectionFails(ds, ldapUser, ldapPassword + "ish");
1:         assertInvalidLDAPDrvMgrConnectionFails(dbName, ldapUser, ldapPassword + "ish");
1:         
1:         assertLDAPDSConnectionOK(ds, ldapUser, ldapPassword);
1:         // as we don't have requireAuthentication, or the authentication provider,
1:         // set on system level, we can shutdown the system with any user.
1:         assertDSSystemShutdownOK("someuser", "somestring");
1:         
1:         // cleanup. Can't use default teardown mechanism yet as it uses default
1:         // user/password and we're set to LDAP Authentication at this point.
1:         cleanup(ds);
1:     }
1: 
1:     // cleanup gets a conn using the ldap user & pwd, so we can unset the
1:     // requireAuthentication so the default teardown & db cleanup can happen
1:     protected void cleanup(DataSource ds) throws SQLException {
1:         Connection conn2 = ds.getConnection(ldapUser, ldapPassword);
1:         setDatabaseProperty("derby.connection.requireAuthentication", "false", conn2);
1:         conn2.commit();
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         // shutdown only really happens on attempting to get a connection;
1:         // this exercise is needed so the DatabasePropertySetup.teardown() can work.
1:         // Getting a 08006 is not really part of the test, but would be good
1:         // to be warned of if it happens.
1:         try {
1:             ds.getConnection(ldapUser, ldapPassword);
1:             fail("expected system shutdown resulting in 08006 error.");
1:         } catch (SQLException e) {
1:             assertSQLState("08006", e);
1:         }
1:         conn2.close();
1:     }
1: 
1:     public void assertLDAPDSConnectionOK(
1:             DataSource ds, String user, String password)
1:     throws SQLException {
1:         Connection conn = ds.getConnection(user, password);
1:         assertNotNull(conn);
1:         conn.close();
1:     }
1: 
1:     protected void assertLDAPDrvMgrConnectionOK(
1:             String dbName, String user, String password)
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         Connection conn = DriverManager.getConnection(url, user, password);
1:         assertNotNull(conn);
1:         conn.close();
1:     }
1: 
1:     public void assertInvalidLDAPDSConnectionFails(
1:             DataSource ds, String user, String password)
1:     throws SQLException {
1:         try {
1:             ds.getConnection(user, password);
1:             fail("expected invalid connection error (for DataSource)");
1:         } catch (SQLException se) {
1:             assertSQLState("08004", se);
1:         }
1:     }
1: 
1:     protected void assertInvalidLDAPDrvMgrConnectionFails(
1:             String dbName, String user, String password)
1:     throws SQLException
1:     {
1:         String url = TestConfiguration.getCurrent().getJDBCUrl(dbName);
1:         try {
1:             DriverManager.getConnection(url, user, password).close();
1:             fail("expected invalid connection error (for DataSource)");
1:         } catch (SQLException se) {
1:             assertSQLState("08004", se);
1:         }
1:     }
1: 
1:     protected void assertDSSystemShutdownOK(
1:             String user, String password)
1:     throws SQLException {
1:         DataSource ds;
1:         if (usingEmbedded())
1:         {
1:             // we cannot use JDBCDataSource.getDataSource() (which uses the
1:             // default database name), unless we specifically clear the 
1:             // databaseName. Otherwise, only the database will be shutdown.
1:             // The alternative is to use jDBCDataSource.getDatasource(dbName),
1:             // where dbName is an empty string - this will in the current code
1:             // be interpreted as a system shutdown.
1:             ds = JDBCDataSource.getDataSource();
1:             JDBCDataSource.clearStringBeanProperty(ds, "databaseName");
1:         }
1:         else 
1:         {
1:             // With client, we cannot user clearStringBeanProperty on the  
1:             // databaseName, that will result in error 08001 - 
1:             // Required DataSource property databaseName not set.
1:             // So, we pass an empty string as databaseName, which the current
1:             // code interprets as a system shutdown.
1:             ds = JDBCDataSource.getDataSource("");
1:         }
1: 
1:         JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
1:         try {
1:             ds.getConnection(user, password);
1:             fail("expected system shutdown resulting in XJ015 error");
1:         } catch (SQLException e) {
1:             // expect XJ015, system shutdown, on successful shutdown
1:             assertSQLState("XJ015", e);
1:         }
1:     }
1: }
============================================================================