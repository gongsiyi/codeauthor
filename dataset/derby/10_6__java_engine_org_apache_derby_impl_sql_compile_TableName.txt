2:fe77ca5: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.TableName
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:fe77ca5: 
4:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package	org.apache.derby.impl.sql.compile;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:a8f9739: import org.apache.derby.iapi.util.IdUtil;
1:fe77ca5: 
3:fe77ca5: /**
1:fe77ca5:  * A TableName represents a qualified name, externally represented as a schema name
1:3bb140c:  * and an object name separated by a dot. This class is misnamed: it is used to
1:fe77ca5:  * represent the names of other object types in addition to tables.
4:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public class TableName extends QueryTreeNode
3:fe77ca5: {
1:fe77ca5: 	/* Both schemaName and tableName can be null, however, if 
1:fe77ca5: 	** tableName is null then schemaName must also be null.
1:fe77ca5: 	*/
1:fe77ca5: 	String	tableName;
1:fe77ca5: 	String	schemaName;
1:f1d4e9d: 	private boolean hasSchema;
1:fe77ca5: 
1:fe77ca5: 	/**
1:3bb140c:      * Constructor for when we have both the table and schema names.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param schemaName	The name of the schema being referenced
1:3bb140c:      * @param tableName     The name of the table or other object being
1:3bb140c:      *                      referenced
1:3bb140c:      * @param cm            The context manager
1:fe77ca5: 	 */
1:fe77ca5: 
1:3bb140c:     TableName(String schemaName, String tableName, ContextManager cm)
1:fe77ca5: 	{
2:3bb140c:         super(cm);
1:3bb140c: 		hasSchema = schemaName != null;
1:3bb140c:         this.schemaName = schemaName;
2:3bb140c:         this.tableName = tableName;
2:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:3bb140c:      * Constructor for when we have both the table and schema names.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param schemaName	The name of the schema being referenced
1:3bb140c:      * @param tableName     The name of the table or other object being
1:3bb140c:      *                      referenced
1:fe77ca5: 	 * @param tokBeginOffset begin position of token for the table name 
1:fe77ca5: 	 *					identifier from parser.  pass in -1 if unknown
1:fe77ca5: 	 * @param tokEndOffset	end position of token for the table name 
1:fe77ca5: 	 *					identifier from parser.  pass in -1 if unknown
1:3bb140c:      * @param cm            The context manager
1:fe77ca5: 	 */
1:3bb140c:     TableName(
1:3bb140c:         String schemaName,
1:3bb140c:         String tableName,
1:3bb140c:         int tokBeginOffset,
1:3bb140c:         int tokEndOffset,
1:3bb140c:         ContextManager cm)
1:fe77ca5: 	{
1:1c42a93:         this(schemaName, tableName, cm);
1:3bb140c:         this.setBeginOffset(tokBeginOffset);
1:3bb140c:         this.setEndOffset(tokEndOffset);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the table name (without the schema name).
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return Table name as a String
1:fe77ca5: 	 */
1:fe77ca5: 
1:fe77ca5: 	public String getTableName()
1:fe77ca5: 	{
1:fe77ca5: 		return tableName;
1:fe77ca5: 	}
1:fe77ca5: 
1:a8f9739: 	/**
1:a15163c: 	 * Return true if this instance was initialized with not null schemaName.
1:fe77ca5: 	 *
1:a15163c: 	 * @return true if this instance was initialized with not null schemaName
1:fe77ca5: 	 */
1:d8804a8:     public boolean hasSchema() {
1:a15163c: 		return hasSchema;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the schema name.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return Schema name as a String
1:fe77ca5: 	 */
1:fe77ca5: 
1:fe77ca5: 	public String getSchemaName()
1:fe77ca5: 	{
1:fe77ca5: 		return schemaName;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set the schema name.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param schemaName	 Schema name as a String
1:fe77ca5: 	 */
1:fe77ca5: 
1:3bb140c:     void setSchemaName(String schemaName)
1:fe77ca5: 	{
1:3bb140c: 		this.schemaName = schemaName;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the full table name (with the schema name, if explicitly
1:fe77ca5: 	 * specified).
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return Full table name as a String
1:fe77ca5: 	 */
1:fe77ca5: 
1:3bb140c:     String getFullTableName()
1:fe77ca5: 	{
1:fe77ca5: 		if (schemaName != null)
1:fe77ca5: 			return schemaName + "." + tableName;
1:fe77ca5: 		else
1:fe77ca5: 			return tableName;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5:     /**
1:a8f9739:      * Get the full SQL name of this object, properly quoted and escaped.
1:a8f9739:      */
1:a8f9739:     public  String  getFullSQLName()
1:a8f9739:     {
1:a8f9739:         return IdUtil.mkQualifiedName( schemaName, tableName );
1:a8f9739:     }
1:a8f9739: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:fe77ca5: 	 * for how this should be done for tree printing.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	This object as a String
1:fe77ca5: 	 */
1:3bb140c:     @Override
1:fe77ca5: 	public String toString()
1:fe77ca5: 	{
1:f1d4e9d: 		if (hasSchema)
1:f1d4e9d: 			return getFullTableName();
1:f1d4e9d: 		else
1:f1d4e9d: 			return tableName;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * 2 TableNames are equal if their both their schemaNames and tableNames are
1:fe77ca5: 	 * equal, or if this node's full table name is null (which happens when a
1:fe77ca5: 	 * SELECT * is expanded).  Also, only check table names if the schema
1:fe77ca5: 	 * name(s) are null.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param otherTableName	The other TableName.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return boolean		Whether or not the 2 TableNames are equal.
1:fe77ca5: 	 */
1:3bb140c:     boolean equals(TableName otherTableName)
1:fe77ca5: 	{
1:baadbde:         if( otherTableName == null)
1:baadbde:             return false;
1:fe77ca5:         
1:fe77ca5: 		String fullTableName = getFullTableName();
1:fe77ca5: 		if (fullTableName == null)
1:fe77ca5: 		{
1:fe77ca5: 			return true;
1:fe77ca5: 		}
1:fe77ca5: 		else if ((schemaName == null) || 
1:fe77ca5: 				 (otherTableName.getSchemaName() == null))
1:fe77ca5: 		{
1:fe77ca5: 			return tableName.equals(otherTableName.getTableName());
1:fe77ca5: 		}
1:fe77ca5: 		else
1:fe77ca5: 		{
1:fe77ca5: 			return fullTableName.equals(otherTableName.getFullTableName());
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * 2 TableNames are equal if their both their schemaNames and tableNames are
1:fe77ca5: 	 * equal, or if this node's full table name is null (which happens when a
1:fe77ca5: 	 * SELECT * is expanded).  Also, only check table names if the schema
1:fe77ca5: 	 * name(s) are null.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param otherSchemaName	The other TableName.
1:fe77ca5: 	 * @param otherTableName	The other TableName.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return boolean		Whether or not the 2 TableNames are equal.
1:fe77ca5: 	 */
1:3bb140c:     boolean equals(String otherSchemaName, String otherTableName)
1:fe77ca5: 	{
1:fe77ca5: 		String fullTableName = getFullTableName();
1:fe77ca5: 		if (fullTableName == null)
1:fe77ca5: 		{
1:fe77ca5: 			return true;
1:fe77ca5: 		}
1:fe77ca5: 		else if ((schemaName == null) || 
1:fe77ca5: 				 (otherSchemaName == null))
1:fe77ca5: 		{
1:fe77ca5: 			return tableName.equals(otherTableName);
1:fe77ca5: 		}
1:fe77ca5: 		else
1:fe77ca5: 		{
1:fe77ca5: 			return fullTableName.equals(otherSchemaName+"."+otherTableName);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:b3f38f8:     /** Clone this TableName */
1:b3f38f8:     public  TableName   cloneMe()
1:b3f38f8:     {
1:b3f38f8:         return new TableName( schemaName, tableName, getContextManager() );
1:b3f38f8:     }
1:b3f38f8: 
1:fe77ca5: 	///////////////////////////////////////////////////////////////////////
1:fe77ca5: 	//
1:fe77ca5: 	//	BIND METHODS
1:fe77ca5: 	//
1:fe77ca5: 	///////////////////////////////////////////////////////////////////////
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	  *	Bind this TableName. This means filling in the schema name if it
1:fe77ca5: 	  *	wasn't specified.
1:fe77ca5: 	  *
1:fe77ca5: 	  *	@exception StandardException		Thrown on error
1:fe77ca5: 	  */
1:eab88ec:     void bind() throws StandardException
1:fe77ca5: 	{
1:fe77ca5:         schemaName = getSchemaDescriptor(schemaName).getSchemaName();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	///////////////////////////////////////////////////////////////////////
1:fe77ca5: 	//
1:fe77ca5: 	//	OBJECT INTERFACE
1:fe77ca5: 	//
1:fe77ca5: 	///////////////////////////////////////////////////////////////////////
1:fe77ca5: 
1:fe77ca5: 	/**
1:3bb140c:       * Returns a hash code for this tableName. This allows us to use TableNames
1:fe77ca5: 	  *	as keys in hash lists.
1:fe77ca5: 	  *
1:3bb140c:       * @return hash code for this table name
1:fe77ca5: 	  */
1:3bb140c:     @Override
1:fe77ca5: 	public	int	hashCode()
1:fe77ca5: 	{
1:fe77ca5: 		return	getFullTableName().hashCode();
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	  *	Compares two TableNames. Needed for hashing logic to work.
1:fe77ca5: 	  *
1:fe77ca5: 	  *	@param	other	other tableName
1:fe77ca5: 	  */
1:3bb140c:     @Override
1:fe77ca5: 	public	boolean	equals( Object other )
1:fe77ca5: 	{
1:fe77ca5: 		if ( !( other instanceof TableName ) ) { return false; }
1:fe77ca5: 
1:fe77ca5: 		TableName		that = (TableName) other;
1:fe77ca5: 
1:fe77ca5: 		return	this.getFullTableName().equals( that.getFullTableName() );
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:eab88ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     void bind() throws StandardException
commit:d8804a8
/////////////////////////////////////////////////////////////////////////
1:     public boolean hasSchema() {
commit:1c42a93
/////////////////////////////////////////////////////////////////////////
1:         this(schemaName, tableName, cm);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b3f38f8
/////////////////////////////////////////////////////////////////////////
1:     /** Clone this TableName */
1:     public  TableName   cloneMe()
1:     {
1:         return new TableName( schemaName, tableName, getContextManager() );
1:     }
1: 
commit:a8f9739
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.IdUtil;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get the full SQL name of this object, properly quoted and escaped.
1:      */
1:     public  String  getFullSQLName()
1:     {
1:         return IdUtil.mkQualifiedName( schemaName, tableName );
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:  * and an object name separated by a dot. This class is misnamed: it is used to
/////////////////////////////////////////////////////////////////////////
1:      * Constructor for when we have both the table and schema names.
1:      * @param tableName     The name of the table or other object being
1:      *                      referenced
1:      * @param cm            The context manager
1:     TableName(String schemaName, String tableName, ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.TABLE_NAME);
1:         this.schemaName = schemaName;
1:         this.tableName = tableName;
1:      * Constructor for when we have both the table and schema names.
1:      * @param tableName     The name of the table or other object being
1:      *                      referenced
1:      * @param cm            The context manager
1:     TableName(
1:         String schemaName,
1:         String tableName,
1:         int tokBeginOffset,
1:         int tokEndOffset,
1:         ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.TABLE_NAME);
1:         hasSchema = schemaName != null;
1:         this.schemaName = schemaName;
1:         this.tableName = tableName;
1:         this.setBeginOffset(tokBeginOffset);
1:         this.setEndOffset(tokEndOffset);
/////////////////////////////////////////////////////////////////////////
0:     boolean hasSchema(){
/////////////////////////////////////////////////////////////////////////
1:     void setSchemaName(String schemaName)
/////////////////////////////////////////////////////////////////////////
1:     String getFullTableName()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     boolean equals(TableName otherTableName)
/////////////////////////////////////////////////////////////////////////
1:     boolean equals(String otherSchemaName, String otherTableName)
/////////////////////////////////////////////////////////////////////////
0:     void    bind( DataDictionary    dataDictionary )
/////////////////////////////////////////////////////////////////////////
1:       * Returns a hash code for this tableName. This allows us to use TableNames
1:       * @return hash code for this table name
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7f1493a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		this.setBeginOffset(((Integer) tokBeginOffset).intValue());
0: 		this.setEndOffset(((Integer) tokEndOffset).intValue());
/////////////////////////////////////////////////////////////////////////
commit:f1d4e9d
/////////////////////////////////////////////////////////////////////////
1: 	private boolean hasSchema;
/////////////////////////////////////////////////////////////////////////
0: 		hasSchema = schemaName != null;
/////////////////////////////////////////////////////////////////////////
0: 		init(schemaName, tableName);
/////////////////////////////////////////////////////////////////////////
1: 		if (hasSchema)
1: 			return getFullTableName();
1: 		else
1: 			return tableName;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.TableName
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:  * A TableName represents a qualified name, externally represented as a schema name
0:  * and an object name separated by a dot. This class is mis-named: it is used to
1:  * represent the names of other object types in addition to tables.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
1: public class TableName extends QueryTreeNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/* Both schemaName and tableName can be null, however, if 
1: 	** tableName is null then schemaName must also be null.
1: 	*/
1: 	String	tableName;
1: 	String	schemaName;
1: 
1: 	/*
0: 	** These fields are used to track the being and end
0: 	** offset of the token from which the TableName came.
0: 	** These are always set to legitimate values in the
0: 	** parser.  If a tableName has been generated elsewhere,
0: 	** they may not be set.  -1 means unset.
1: 	*/
0: 	private int		tokBeginOffset = -1;
0: 	private int		tokEndOffset = -1;
1: 
1: 	/**
0: 	 * Initializer for when you have both the table and schema names.
1: 	 *
1: 	 * @param schemaName	The name of the schema being referenced
0: 	 * @param tableName		The name of the table being referenced	 
1: 	 */
1: 
0: 	public void init(Object schemaName, Object tableName)
1: 	{
0: 		this.schemaName = (String) schemaName;
0: 		this.tableName = (String) tableName;
1: 	}
1: 
1: 	/**
0: 	 * Initializer for when you have both the table and schema names.
1: 	 *
1: 	 * @param schemaName	The name of the schema being referenced
0: 	 * @param tableName		The name of the table being referenced	 
1: 	 * @param tokBeginOffset begin position of token for the table name 
1: 	 *					identifier from parser.  pass in -1 if unknown
1: 	 * @param tokEndOffset	end position of token for the table name 
1: 	 *					identifier from parser.  pass in -1 if unknown
1: 	 */
0: 	public void init
0: 	(
0: 		Object schemaName, 
0: 		Object tableName, 
0: 		Object	tokBeginOffset,
0: 		Object	tokEndOffset
0: 	)
1: 	{
0: 		this.schemaName = (String) schemaName;
0: 		this.tableName = (String) tableName;
0: 		this.tokBeginOffset = ((Integer) tokBeginOffset).intValue();
0: 		this.tokEndOffset = ((Integer) tokEndOffset).intValue();
1: 	}
1: 
1: 	/**
1: 	 * Get the table name (without the schema name).
1: 	 *
1: 	 * @return Table name as a String
1: 	 */
1: 
1: 	public String getTableName()
1: 	{
1: 		return tableName;
1: 	}
1: 
1: 	/**
1: 	 * Get the schema name.
1: 	 *
1: 	 * @return Schema name as a String
1: 	 */
1: 
1: 	public String getSchemaName()
1: 	{
1: 		return schemaName;
1: 	}
1: 
1: 	/**
0: 	 * Get the begin offset of the parser token for the table name
0: 	 * Will only be set when the TableName was generated by the
0: 	 * parser.
1: 	 *
0: 	 * @return the begin offset of the token.  -1 means unknown
1: 	 */
0: 	public int getTokenBeginOffset()
1: 	{
0: 		return tokBeginOffset;
1: 	}
1: 
1: 	/**
0: 	 * Get the end offset of the parser token for the table name.
0: 	 * Will only be set when the TableName was generated by the
0: 	 * parser.
1: 	 *
0: 	 * @return the end offset of the token.  -1 means unknown
1: 	 */
0: 	public int getTokenEndOffset()
1: 	{
0: 		return tokEndOffset;
1: 	}
1: 
1: 	/**
1: 	 * Set the schema name.
1: 	 *
1: 	 * @param schemaName	 Schema name as a String
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 
0: 	public void setSchemaName(String schemaName)
1: 	{
0: 		this.schemaName = schemaName;
1: 	}
1: 
1: 	/**
1: 	 * Get the full table name (with the schema name, if explicitly
1: 	 * specified).
1: 	 *
1: 	 * @return Full table name as a String
1: 	 */
1: 
0: 	public String getFullTableName()
1: 	{
1: 		if (schemaName != null)
1: 			return schemaName + "." + tableName;
1: 		else
1: 			return tableName;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
0: 		return getFullTableName();
1: 	}
1: 
1: 	/**
1: 	 * 2 TableNames are equal if their both their schemaNames and tableNames are
1: 	 * equal, or if this node's full table name is null (which happens when a
1: 	 * SELECT * is expanded).  Also, only check table names if the schema
1: 	 * name(s) are null.
1: 	 *
1: 	 * @param otherTableName	The other TableName.
1: 	 *
1: 	 * @return boolean		Whether or not the 2 TableNames are equal.
1: 	 */
0: 	public boolean equals(TableName otherTableName)
1: 	{
1: 		String fullTableName = getFullTableName();
1: 		if (fullTableName == null)
1: 		{
1: 			return true;
1: 		}
1: 		else if ((schemaName == null) || 
1: 				 (otherTableName.getSchemaName() == null))
1: 		{
1: 			return tableName.equals(otherTableName.getTableName());
1: 		}
1: 		else
1: 		{
1: 			return fullTableName.equals(otherTableName.getFullTableName());
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * 2 TableNames are equal if their both their schemaNames and tableNames are
1: 	 * equal, or if this node's full table name is null (which happens when a
1: 	 * SELECT * is expanded).  Also, only check table names if the schema
1: 	 * name(s) are null.
1: 	 *
1: 	 * @param otherSchemaName	The other TableName.
1: 	 * @param otherTableName	The other TableName.
1: 	 *
1: 	 * @return boolean		Whether or not the 2 TableNames are equal.
1: 	 */
0: 	public boolean equals(String otherSchemaName, String otherTableName)
1: 	{
1: 		String fullTableName = getFullTableName();
1: 		if (fullTableName == null)
1: 		{
1: 			return true;
1: 		}
1: 		else if ((schemaName == null) || 
1: 				 (otherSchemaName == null))
1: 		{
1: 			return tableName.equals(otherTableName);
1: 		}
1: 		else
1: 		{
1: 			return fullTableName.equals(otherSchemaName+"."+otherTableName);
1: 		}
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	BIND METHODS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Bind this TableName. This means filling in the schema name if it
1: 	  *	wasn't specified.
1: 	  *
0: 	  *	@param	dataDictionary	Data dictionary to bind against.
1: 	  *
1: 	  *	@exception StandardException		Thrown on error
1: 	  */
0: 	public void	bind( DataDictionary	dataDictionary )
0: 		                       throws StandardException
1: 	{
1:         schemaName = getSchemaDescriptor(schemaName).getSchemaName();
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	OBJECT INTERFACE
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	  *	Returns a hashcode for this tableName. This allows us to use TableNames
1: 	  *	as keys in hash lists.
1: 	  *
0: 	  *	@return	hashcode for this tablename
1: 	  */
1: 	public	int	hashCode()
1: 	{
1: 		return	getFullTableName().hashCode();
1: 	}
1: 
1: 	/**
1: 	  *	Compares two TableNames. Needed for hashing logic to work.
1: 	  *
1: 	  *	@param	other	other tableName
1: 	  */
1: 	public	boolean	equals( Object other )
1: 	{
1: 		if ( !( other instanceof TableName ) ) { return false; }
1: 
1: 		TableName		that = (TableName) other;
1: 
1: 		return	this.getFullTableName().equals( that.getFullTableName() );
1: 	}
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:baadbde
/////////////////////////////////////////////////////////////////////////
1:         if( otherTableName == null)
1:             return false;
0:         
commit:a15163c
/////////////////////////////////////////////////////////////////////////
1: 	 * Return true if this instance was initialized with not null schemaName.
0: 	 *
1: 	 * @return true if this instance was initialized with not null schemaName
0: 	 */
0: 	
0: 	public boolean hasSchema(){
1: 		return hasSchema;
0: 	}
0: 
0: 	/**
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:  * A TableName represents a qualified name, externally represented as a schema name
0:  * and an object name separated by a dot. This class is mis-named: it is used to
0:  * represent the names of other object types in addition to tables.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class TableName extends QueryTreeNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/* Both schemaName and tableName can be null, however, if 
0: 	** tableName is null then schemaName must also be null.
0: 	*/
0: 	String	tableName;
0: 	String	schemaName;
0: 
0: 	/*
0: 	** These fields are used to track the being and end
0: 	** offset of the token from which the TableName came.
0: 	** These are always set to legitimate values in the
0: 	** parser.  If a tableName has been generated elsewhere,
0: 	** they may not be set.  -1 means unset.
0: 	*/
0: 	private int		tokBeginOffset = -1;
0: 	private int		tokEndOffset = -1;
0: 
0: 	/**
0: 	 * Initializer for when you have both the table and schema names.
0: 	 *
0: 	 * @param schemaName	The name of the schema being referenced
0: 	 * @param tableName		The name of the table being referenced	 
0: 	 */
0: 
0: 	public void init(Object schemaName, Object tableName)
0: 	{
0: 		this.schemaName = (String) schemaName;
0: 		this.tableName = (String) tableName;
0: 	}
0: 
0: 	/**
0: 	 * Initializer for when you have both the table and schema names.
0: 	 *
0: 	 * @param schemaName	The name of the schema being referenced
0: 	 * @param tableName		The name of the table being referenced	 
0: 	 * @param tokBeginOffset begin position of token for the table name 
0: 	 *					identifier from parser.  pass in -1 if unknown
0: 	 * @param tokEndOffset	end position of token for the table name 
0: 	 *					identifier from parser.  pass in -1 if unknown
0: 	 */
0: 	public void init
0: 	(
0: 		Object schemaName, 
0: 		Object tableName, 
0: 		Object	tokBeginOffset,
0: 		Object	tokEndOffset
0: 	)
0: 	{
0: 		this.schemaName = (String) schemaName;
0: 		this.tableName = (String) tableName;
0: 		this.tokBeginOffset = ((Integer) tokBeginOffset).intValue();
0: 		this.tokEndOffset = ((Integer) tokEndOffset).intValue();
0: 	}
0: 
0: 	/**
0: 	 * Get the table name (without the schema name).
0: 	 *
0: 	 * @return Table name as a String
0: 	 */
0: 
0: 	public String getTableName()
0: 	{
0: 		return tableName;
0: 	}
0: 
0: 	/**
0: 	 * Get the schema name.
0: 	 *
0: 	 * @return Schema name as a String
0: 	 */
0: 
0: 	public String getSchemaName()
0: 	{
0: 		return schemaName;
0: 	}
0: 
0: 	/**
0: 	 * Get the begin offset of the parser token for the table name
0: 	 * Will only be set when the TableName was generated by the
0: 	 * parser.
0: 	 *
0: 	 * @return the begin offset of the token.  -1 means unknown
0: 	 */
0: 	public int getTokenBeginOffset()
0: 	{
0: 		return tokBeginOffset;
0: 	}
0: 
0: 	/**
0: 	 * Get the end offset of the parser token for the table name.
0: 	 * Will only be set when the TableName was generated by the
0: 	 * parser.
0: 	 *
0: 	 * @return the end offset of the token.  -1 means unknown
0: 	 */
0: 	public int getTokenEndOffset()
0: 	{
0: 		return tokEndOffset;
0: 	}
0: 
0: 	/**
0: 	 * Set the schema name.
0: 	 *
0: 	 * @param schemaName	 Schema name as a String
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 
0: 	public void setSchemaName(String schemaName)
0: 	{
0: 		this.schemaName = schemaName;
0: 	}
0: 
0: 	/**
0: 	 * Get the full table name (with the schema name, if explicitly
0: 	 * specified).
0: 	 *
0: 	 * @return Full table name as a String
0: 	 */
0: 
0: 	public String getFullTableName()
0: 	{
0: 		if (schemaName != null)
0: 			return schemaName + "." + tableName;
0: 		else
0: 			return tableName;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		return getFullTableName();
0: 	}
0: 
0: 	/**
0: 	 * 2 TableNames are equal if their both their schemaNames and tableNames are
0: 	 * equal, or if this node's full table name is null (which happens when a
0: 	 * SELECT * is expanded).  Also, only check table names if the schema
0: 	 * name(s) are null.
0: 	 *
0: 	 * @param otherTableName	The other TableName.
0: 	 *
0: 	 * @return boolean		Whether or not the 2 TableNames are equal.
0: 	 */
0: 	public boolean equals(TableName otherTableName)
0: 	{
0: 		String fullTableName = getFullTableName();
0: 		if (fullTableName == null)
0: 		{
0: 			return true;
0: 		}
0: 		else if ((schemaName == null) || 
0: 				 (otherTableName.getSchemaName() == null))
0: 		{
0: 			return tableName.equals(otherTableName.getTableName());
0: 		}
0: 		else
0: 		{
0: 			return fullTableName.equals(otherTableName.getFullTableName());
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * 2 TableNames are equal if their both their schemaNames and tableNames are
0: 	 * equal, or if this node's full table name is null (which happens when a
0: 	 * SELECT * is expanded).  Also, only check table names if the schema
0: 	 * name(s) are null.
0: 	 *
0: 	 * @param otherSchemaName	The other TableName.
0: 	 * @param otherTableName	The other TableName.
0: 	 *
0: 	 * @return boolean		Whether or not the 2 TableNames are equal.
0: 	 */
0: 	public boolean equals(String otherSchemaName, String otherTableName)
0: 	{
0: 		String fullTableName = getFullTableName();
0: 		if (fullTableName == null)
0: 		{
0: 			return true;
0: 		}
0: 		else if ((schemaName == null) || 
0: 				 (otherSchemaName == null))
0: 		{
0: 			return tableName.equals(otherTableName);
0: 		}
0: 		else
0: 		{
0: 			return fullTableName.equals(otherSchemaName+"."+otherTableName);
0: 		}
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	BIND METHODS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Bind this TableName. This means filling in the schema name if it
0: 	  *	wasn't specified.
0: 	  *
0: 	  *	@param	dataDictionary	Data dictionary to bind against.
0: 	  *
0: 	  *	@exception StandardException		Thrown on error
0: 	  */
0: 	public void	bind( DataDictionary	dataDictionary )
0: 		                       throws StandardException
0: 	{
0:         schemaName = getSchemaDescriptor(schemaName).getSchemaName();
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	OBJECT INTERFACE
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Returns a hashcode for this tableName. This allows us to use TableNames
0: 	  *	as keys in hash lists.
0: 	  *
0: 	  *	@return	hashcode for this tablename
0: 	  */
0: 	public	int	hashCode()
0: 	{
0: 		return	getFullTableName().hashCode();
0: 	}
0: 
0: 	/**
0: 	  *	Compares two TableNames. Needed for hashing logic to work.
0: 	  *
0: 	  *	@param	other	other tableName
0: 	  */
0: 	public	boolean	equals( Object other )
0: 	{
0: 		if ( !( other instanceof TableName ) ) { return false; }
0: 
0: 		TableName		that = (TableName) other;
0: 
0: 		return	this.getFullTableName().equals( that.getFullTableName() );
0: 	}
0: 
0: }
============================================================================