2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
10:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:ea3f2e4: import java.sql.Types;
1:ea3f2e4: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Factory for creating a SYSDUMMY1 row.
1:eac0369:  *
1:eac0369:  * @version 0.01
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:ea3f2e4: class SYSDUMMY1RowFactory extends CatalogRowFactory
1:9e5097f: {
1:eac0369: 	protected static final int SYSDUMMY1_COLUMN_COUNT = 1;
1:eac0369: 
1:eac0369: 	private static final String[] uuids =
3:eac0369: 	{
1:eac0369: 		"c013800d-00f8-5b70-bea3-00000019ed88", // catalog UUID
1:eac0369: 		"c013800d-00f8-5b70-fee8-000000198c88"  // heap UUID.
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 *	CONSTRUCTORS
1:eac0369: 	 */
1:ea3f2e4:     SYSDUMMY1RowFactory(UUIDFactory uuidf, 
1:eac0369: 									ExecutionFactory ef, 
1:6870e87: 									DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:eac0369: 		
1:ea3f2e4: 		initInfo(SYSDUMMY1_COLUMN_COUNT, "SYSDUMMY1", 
1:c2ff613: 				 null, null, uuids);
2:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369:   /**
1:eac0369: 	 * Make a SYSDUMMY1 row
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSSTATISTICS.
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
2:eac0369: 					throws StandardException					
1:eac0369: 	{
1:eac0369: 		ExecRow row = getExecutionFactory().getValueRow(SYSDUMMY1_COLUMN_COUNT);
1:eac0369: 		
1:eb47bdb: 		row.setColumn(1, new SQLChar("Y"));
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		 ExecRow 			row,
1:eac0369: 		 TupleDescriptor    parentDesc,
1:eac0369: 		 DataDictionary 	dd)
1:eac0369: 		throws StandardException
1:eac0369: 		 
1:eac0369: 	{
2:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[] buildColumnList()
1:ea3f2e4: 	{        
1:ea3f2e4:         return new SystemColumn[] {
1:ea3f2e4:                 SystemColumnImpl.getColumn("IBMREQD", Types.CHAR, true, 1)
1:ea3f2e4:         };
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: }	
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1: 									DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(1, new SQLChar("Y"));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:ea3f2e4
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: 
/////////////////////////////////////////////////////////////////////////
1: class SYSDUMMY1RowFactory extends CatalogRowFactory
/////////////////////////////////////////////////////////////////////////
1:     SYSDUMMY1RowFactory(UUIDFactory uuidf, 
1: 		initInfo(SYSDUMMY1_COLUMN_COUNT, "SYSDUMMY1", 
/////////////////////////////////////////////////////////////////////////
1: 	{        
1:         return new SystemColumn[] {
1:                 SystemColumnImpl.getColumn("IBMREQD", Types.CHAR, true, 1)
1:         };
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
1: 				 null, null, uuids);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
1: {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  * Factory for creating a SYSDUMMY1 row.
1:  *
1:  * @version 0.01
1:  *
1:  */
1: 
0: public class SYSDUMMY1RowFactory extends CatalogRowFactory
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 	static final String TABLENAME_STRING = "SYSDUMMY1";
1: 
0: 	/* column #s for sysstatistics (1 based) */
1: 	
0: 	/* only column
1: 	*/
0: 	protected static final int 	SYSDUMMY1_IBMREQD = 1;
1: 
1: 	protected static final int SYSDUMMY1_COLUMN_COUNT = 1;
1: 
1: 	private static final String[] uuids =
1: 	{
1: 		"c013800d-00f8-5b70-bea3-00000019ed88", // catalog UUID
1: 		"c013800d-00f8-5b70-fee8-000000198c88"  // heap UUID.
1: 	};
1: 	/*
0: 	 * STATE
1: 	 */
0: 	private	SystemColumn[]		columnList;
1: 
1: 	/*
1: 	 *	CONSTRUCTORS
1: 	 */
0:     public	SYSDUMMY1RowFactory(UUIDFactory uuidf, 
1: 									ExecutionFactory ef, 
0: 									DataValueFactory dvf,
0:                                     boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		
0: 		initInfo(SYSDUMMY1_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 null, null, null, uuids);
1: 	}
1: 
1: 
1:   /**
1: 	 * Make a SYSDUMMY1 row
1: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param statDescriptor Descriptor from which to create the
0: 	 * statistic. 
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSSTATISTICS.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1: 					throws StandardException					
1: 	{
1: 		ExecRow row = getExecutionFactory().getValueRow(SYSDUMMY1_COLUMN_COUNT);
1: 		
0: 		row.setColumn(1, dvf.getCharDataValue("Y"));
1: 		return row;
1: 	}
1: 	
1: 	public TupleDescriptor buildDescriptor(
1: 		 ExecRow 			row,
1: 		 TupleDescriptor    parentDesc,
1: 		 DataDictionary 	dd)
1: 		throws StandardException
1: 		 
1: 	{
1: 		return null;
1: 	}
1: 
0:   	public ExecIndexRow	buildEmptyIndexRow(int indexNumber, RowLocation rowLocation)
1:   		throws StandardException
1: 	{
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[] buildColumnList()
1: 	{
0: 		if (columnList != null)
0: 			return columnList;
1: 
0: 		columnList = new SystemColumn[SYSDUMMY1_COLUMN_COUNT];
1: 		
0: 		columnList[0] = new SystemColumnImpl(
0: 						   convertIdCase( "IBMREQD"),			// column name
0: 						   SYSDUMMY1_IBMREQD,    // column number
0: 						   0,					// precision
0: 						   0,					// scale
0: 						   true,				// nullability
0: 						   "CHAR",				// dataType
0: 						   true,				// built-in type
0: 						   1					// maxLength
0: 						   );
1: 		
0: 		return columnList;
1: 	}
1: 
1: 
1: }	
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  * Factory for creating a SYSDUMMY1 row.
0:  *
0:  * @version 0.01
0:  *
0:  */
0: 
0: public class SYSDUMMY1RowFactory extends CatalogRowFactory
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 	static final String TABLENAME_STRING = "SYSDUMMY1";
0: 
0: 	/* column #s for sysstatistics (1 based) */
0: 	
0: 	/* only column
0: 	*/
0: 	protected static final int 	SYSDUMMY1_IBMREQD = 1;
0: 
0: 	protected static final int SYSDUMMY1_COLUMN_COUNT = 1;
0: 
0: 	private static final String[] uuids =
0: 	{
0: 		"c013800d-00f8-5b70-bea3-00000019ed88", // catalog UUID
0: 		"c013800d-00f8-5b70-fee8-000000198c88"  // heap UUID.
0: 	};
0: 	/*
0: 	 * STATE
0: 	 */
0: 	private	SystemColumn[]		columnList;
0: 
0: 	/*
0: 	 *	CONSTRUCTORS
0: 	 */
0:     public	SYSDUMMY1RowFactory(UUIDFactory uuidf, 
0: 									ExecutionFactory ef, 
0: 									DataValueFactory dvf,
0:                                     boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		
0: 		initInfo(SYSDUMMY1_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 null, null, null, uuids);
0: 	}
0: 
0: 
0:   /**
0: 	 * Make a SYSDUMMY1 row
0: 	 *
0: 	 * @param emptyRow	Make an empty row if this parameter is true
0: 	 * @param statDescriptor Descriptor from which to create the
0: 	 * statistic. 
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSSTATISTICS.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
0: 					throws StandardException					
0: 	{
0: 		ExecRow row = getExecutionFactory().getValueRow(SYSDUMMY1_COLUMN_COUNT);
0: 		
0: 		row.setColumn(1, dvf.getCharDataValue("Y"));
0: 		return row;
0: 	}
0: 	
0: 	public TupleDescriptor buildDescriptor(
0: 		 ExecRow 			row,
0: 		 TupleDescriptor    parentDesc,
0: 		 DataDictionary 	dd)
0: 		throws StandardException
0: 		 
0: 	{
0: 		return null;
0: 	}
0: 
0:   	public ExecIndexRow	buildEmptyIndexRow(int indexNumber, RowLocation rowLocation)
0:   		throws StandardException
0: 	{
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[] buildColumnList()
0: 	{
0: 		if (columnList != null)
0: 			return columnList;
0: 
0: 		columnList = new SystemColumn[SYSDUMMY1_COLUMN_COUNT];
0: 		
0: 		columnList[0] = new SystemColumnImpl(
0: 						   convertIdCase( "IBMREQD"),			// column name
0: 						   SYSDUMMY1_IBMREQD,    // column number
0: 						   0,					// precision
0: 						   0,					// scale
0: 						   true,				// nullability
0: 						   "CHAR",				// dataType
0: 						   true,				// built-in type
0: 						   1					// maxLength
0: 						   );
0: 		
0: 		return columnList;
0: 	}
0: 
0: 
0: }	
============================================================================