1:bb40bcb: /*
5:bb40bcb: 
1:bb40bcb:    Derby - Class org.apache.derby.iapi.sql.dictionary.SequenceDescriptor
1:bb40bcb: 
1:bb40bcb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:bb40bcb:    contributor license agreements.  See the NOTICE file distributed with
1:bb40bcb:    this work for additional information regarding copyright ownership.
1:bb40bcb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:bb40bcb:    (the "License"); you may not use this file except in compliance with
1:bb40bcb:    the License.  You may obtain a copy of the License at
1:bb40bcb: 
1:bb40bcb:       http://www.apache.org/licenses/LICENSE-2.0
1:bb40bcb: 
1:bb40bcb:    Unless required by applicable law or agreed to in writing, software
1:bb40bcb:    distributed under the License is distributed on an "AS IS" BASIS,
1:bb40bcb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb40bcb:    See the License for the specific language governing permissions and
1:bb40bcb:    limitations under the License.
1:bb40bcb: 
2:bb40bcb:  */
1:bb40bcb: 
1:bb40bcb: package org.apache.derby.iapi.sql.dictionary;
1:bb40bcb: 
1:bb40bcb: import org.apache.derby.catalog.UUID;
1:bb40bcb: import org.apache.derby.catalog.DependableFinder;
1:bb40bcb: import org.apache.derby.catalog.Dependable;
1:bb40bcb: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:bb40bcb: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:bb40bcb: import org.apache.derby.iapi.sql.depend.Provider;
1:80eb35f: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:80eb35f: import org.apache.derby.iapi.sql.depend.Dependent;
1:80eb35f: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:bb40bcb: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:80eb35f: import org.apache.derby.iapi.store.access.TransactionController;
1:bb40bcb: 
2:bb40bcb: /**
1:bb40bcb:  * This class is used by rows in the SYS.SYSSEQUENCES system table.
1:139ca85:  * See the header comment of SYSSEQUENCESRowFactory for the
1:139ca85:  * contract of that table. In particular, if the CURRENTVALUE column
1:139ca85:  * is null, then the sequence has been exhausted and no more values
1:139ca85:  * can be generated from it.
1:bb40bcb:  */
1:f2fad75: public class SequenceDescriptor
1:f2fad75:     extends PrivilegedSQLObject
1:f2fad75:     implements Provider, Dependent
1:98c7520: {
1:bb40bcb: 
1:bb40bcb:     private UUID sequenceUUID;
1:bb40bcb:     private String sequenceName;
1:bb40bcb:     private final SchemaDescriptor schemaDescriptor;
1:bb40bcb:     private UUID schemaId;
1:bb40bcb:     private DataTypeDescriptor dataType;
1:139ca85:     private Long currentValue; // could be null
1:bb40bcb:     private long startValue;
1:bb40bcb:     private long minimumValue;
1:bb40bcb:     private long maximumValue;
1:bb40bcb:     private long increment;
1:139ca85:     private boolean canCycle;
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Constructor
1:bb40bcb:      *
1:bb40bcb:      * @param dataDictionary data dictionary
1:bb40bcb:      * @param sequenceUUID   unique identification in time and space of this sequence
1:bb40bcb:      *                       descriptor
1:bb40bcb:      * @param sequenceName
1:bb40bcb:      */
1:bb40bcb: 
1:bb40bcb:     public SequenceDescriptor(DataDictionary dataDictionary, SchemaDescriptor sd, UUID sequenceUUID, String sequenceName,
1:139ca85:                               DataTypeDescriptor dataType, Long currentValue,
1:139ca85:                               long startValue, long minimumValue, long maximumValue, long increment, boolean canCycle) {
1:bb40bcb:         super(dataDictionary);
1:bb40bcb:         if (SanityManager.DEBUG) {
1:bb40bcb:             if (sd.getSchemaName() == null) {
1:bb40bcb:                 SanityManager.THROWASSERT("new SequenceDescriptor() schema " +
1:bb40bcb:                         "name is null for Sequence " + sequenceName);
4:bb40bcb:             }
1:80eb35f:         }
1:bb40bcb:         this.sequenceUUID = sequenceUUID;
1:bb40bcb:         this.schemaDescriptor = sd;
1:bb40bcb:         this.sequenceName = sequenceName;
1:bb40bcb:         this.schemaId = sd.getUUID();
1:bb40bcb:         this.dataType = dataType;
1:bb40bcb:         this.currentValue = currentValue;
1:bb40bcb:         this.startValue = startValue;
1:bb40bcb:         this.minimumValue = minimumValue;
1:bb40bcb:         this.maximumValue = maximumValue;
1:bb40bcb:         this.increment = increment;
1:139ca85:         this.canCycle = canCycle;
1:bb40bcb:     }
1:729be57: 
1:729be57:    /**
1:bb40bcb: 	 * @see UniqueTupleDescriptor#getUUID
1:729be57: 	 */
1:bb40bcb: 	public UUID	getUUID()
1:729be57: 	{
2:bb40bcb: 		return sequenceUUID;
1:bb40bcb: 	}
1:bb40bcb: 
1:98c7520:    /**
1:98c7520: 	 * @see PrivilegedSQLObject#getObjectTypeName
1:98c7520: 	 */
1:98c7520: 	public String getObjectTypeName()
1:98c7520: 	{
1:98c7520: 		return PermDescriptor.SEQUENCE_TYPE;
1:98c7520: 	}
1:98c7520: 
1:bb40bcb:     public String toString() {
1:bb40bcb:         if (SanityManager.DEBUG) {
1:bb40bcb:             return "sequenceUUID: " + sequenceUUID + "\n" +
1:bb40bcb:                     "sequenceName: " + sequenceName + "\n" +
1:bb40bcb:                     "schemaId: " + schemaId + "\n" +
1:bb40bcb:                     "dataType: " + dataType.getTypeName() + "\n" +
1:bb40bcb:                     "currentValue: " + currentValue + "\n" +
1:bb40bcb:                     "startValue: " + startValue + "\n" +
1:bb40bcb:                     "minimumValue: " + minimumValue + "\n" +
1:bb40bcb:                     "maximumValue: " + maximumValue + "\n" +
1:bb40bcb:                     "increment: " + increment + "\n" +
1:139ca85:                     "canCycle: " + canCycle + "\n";
1:729be57:         } else {
1:bb40bcb:             return "";
1:bb40bcb:         }
1:bb40bcb:     }
1:bb40bcb: 
1:80eb35f:     /**
1:2f4a1a0:      * Drop this sequence descriptor. Only restricted drops allowed right now.
1:80eb35f:      *
1:80eb35f:      * @throws StandardException Could not be dropped.
1:80eb35f:      */
1:80eb35f:     public void drop(LanguageConnectionContext lcc) throws StandardException
1:80eb35f:     {
1:80eb35f:         DataDictionary dd = getDataDictionary();
1:80eb35f:         DependencyManager dm = getDataDictionary().getDependencyManager();
1:80eb35f:         TransactionController tc = lcc.getTransactionExecute();
1:80eb35f: 
1:80eb35f:         // invalidate compiled statements which depend on this sequence
1:80eb35f:         dm.invalidateFor(this, DependencyManager.DROP_SEQUENCE, lcc);
1:80eb35f: 
1:80eb35f:         // drop the sequence
1:80eb35f:         dd.dropSequenceDescriptor(this, tc);
1:80eb35f: 
1:80eb35f:         // Clear the dependencies for the sequence
1:80eb35f:         dm.clearDependencies(lcc, this);
1:80eb35f: 
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f: 	 * Check that all of the dependent's dependencies are valid.
1:80eb35f: 	 *
1:80eb35f: 	 * @return true if the dependent is currently valid
1:80eb35f: 	 */
1:80eb35f: 	public synchronized boolean isValid()
1:80eb35f: 	{
1:80eb35f: 		return true;
1:80eb35f: 	}
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f: 	 * Prepare to mark the dependent as invalid (due to at least one of
1:80eb35f: 	 * its dependencies being invalid).
1:80eb35f: 	 *
1:80eb35f: 	 * @param action	The action causing the invalidation
1:80eb35f: 	 * @param p			the provider
1:80eb35f: 	 * @param lcc		the language connection context
1:80eb35f: 	 *
1:80eb35f: 	 * @exception StandardException thrown if unable to make it invalid
1:80eb35f: 	 */
1:80eb35f: 	public void prepareToInvalidate
1:729be57: 	(
1:80eb35f: 		Provider 					p,
1:80eb35f: 		int							action,
1:80eb35f: 		LanguageConnectionContext	lcc
1:80eb35f: 	) throws StandardException
1:80eb35f: 	{
1:80eb35f: 		switch (action)
1:80eb35f: 		{   			
1:80eb35f: 			default:
1:80eb35f: 				break;
1:729be57: 		}
1:729be57: 	}
1:80eb35f:     /**
1:80eb35f: 	 * Mark the dependent as invalid (due to at least one of
1:80eb35f: 	 * its dependencies being invalid).
1:80eb35f: 	 *
1:80eb35f: 	 * @param 	lcc the language connection context
1:80eb35f: 	 * @param	action	The action causing the invalidation
1:80eb35f: 	 *
1:80eb35f: 	 * @exception StandardException thrown if called in sanity mode
1:80eb35f: 	 */
1:80eb35f: 	public void makeInvalid(int action, LanguageConnectionContext lcc) throws StandardException
1:80eb35f: 	{
1:80eb35f: 		switch (action)
1:80eb35f: 		{
1:80eb35f: 			// invalidate this sequence descriptor
1:80eb35f: 			case DependencyManager.USER_RECOMPILE_REQUEST:
1:80eb35f: 				DependencyManager dm = getDataDictionary().getDependencyManager();
1:80eb35f: 				dm.invalidateFor(this, DependencyManager.PREPARED_STATEMENT_RELEASE, lcc);
1:80eb35f: 				break;
1:729be57: 
1:80eb35f: 			default:
1:80eb35f: 				break;
1:80eb35f: 		}
1:729be57: 
1:80eb35f: 	}
1:80eb35f: 
1:bb40bcb:     public String getName() {
1:bb40bcb:         return sequenceName;
1:80eb35f:     }
1:80eb35f: 
1:bb40bcb:     public SchemaDescriptor getSchemaDescriptor() throws StandardException {
1:bb40bcb:         return schemaDescriptor;
1:bb40bcb:     }
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * @see TupleDescriptor#getDescriptorType
1:80eb35f:      */
1:80eb35f:     public String getDescriptorType() {
1:80eb35f:         return "Sequence";
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * @see TupleDescriptor#getDescriptorName
1:80eb35f:      */
1:80eb35f:     public String getDescriptorName() {
1:80eb35f:         return sequenceName; }
1:80eb35f: 
1:bb40bcb:     //////////////////////////////////////////////
1:bb40bcb:     //
1:bb40bcb:     // PROVIDER INTERFACE
1:bb40bcb:     //
1:bb40bcb:     //////////////////////////////////////////////
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Get the provider's UUID
1:bb40bcb:      *
1:bb40bcb:      * @return The provider's UUID
1:bb40bcb:      */
1:bb40bcb:     public UUID getObjectID() {
1:bb40bcb:         return sequenceUUID;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Is this provider persistent?  A stored dependency will be required
1:bb40bcb:      * if both the dependent and provider are persistent.
1:bb40bcb:      *
1:bb40bcb:      * @return boolean              Whether or not this provider is persistent.
1:bb40bcb:      */
1:bb40bcb:     public boolean isPersistent() {
1:bb40bcb:         return true;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Return the name of this Provider.  (Useful for errors.)
1:bb40bcb:      *
1:bb40bcb:      * @return String   The name of this provider.
1:bb40bcb:      */
1:bb40bcb:     public String getObjectName() {
1:bb40bcb:         return (sequenceName);
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * Get the provider's type.
1:bb40bcb:      *
1:bb40bcb:      * @return char         The provider's type.
1:bb40bcb:      */
1:bb40bcb:     public String getClassType() {
1:bb40bcb:         return Dependable.SEQUENCE;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /**
1:bb40bcb:      * @return the stored form of this provider
1:bb40bcb:      * @see Dependable#getDependableFinder
1:bb40bcb:      */
1:bb40bcb:     public DependableFinder getDependableFinder() {
1:999e32a:         return getDependableFinder(
1:999e32a:                 StoredFormatIds.SEQUENCE_DESCRIPTOR_FINDER_V01_ID);
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     /*Accessor methods*/
1:bb40bcb:     public String getSequenceName() {
1:bb40bcb:         return sequenceName;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public UUID getSchemaId() {
1:bb40bcb:         return schemaId;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public DataTypeDescriptor getDataType() {
1:bb40bcb:         return dataType;
1:bb40bcb:     }
1:bb40bcb: 
1:139ca85:     public Long getCurrentValue() {
1:bb40bcb:         return currentValue;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public long getStartValue() {
1:bb40bcb:         return startValue;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public long getMinimumValue() {
1:bb40bcb:         return minimumValue;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public long getMaximumValue() {
1:bb40bcb:         return maximumValue;
1:bb40bcb:     }
1:bb40bcb: 
1:bb40bcb:     public long getIncrement() {
1:bb40bcb:         return increment;
1:bb40bcb:     }
1:bb40bcb: 
1:139ca85:     public boolean canCycle() {
1:139ca85:         return canCycle;
1:bb40bcb:     }
1:bb40bcb: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1: public class SequenceDescriptor
1:     extends PrivilegedSQLObject
1:     implements Provider, Dependent
commit:bb4cfe9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:729be57
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
0:     // indexes into array of computed min/max values
0:     public  static  final   int MIN_VALUE = 0;
0:     public  static  final   int MAX_VALUE = MIN_VALUE + 1;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Compute the minimum and maximum values for a sequence range.
0:      * Returns an array of two Longs. The first Long is the minimum value,
0:      * The second is the maximum value.
1:      */
0:     public  static  Long[]  computeMinMax
1:         (
0:          DataTypeDescriptor dataType,
0:          Object minValue,
0:          Object maxValue
0:          )
1:     {
0:         Long[]  retval = new Long[ 2 ];
1: 
0:         if (dataType.getTypeId().equals(TypeId.SMALLINT_ID)) {
0:             retval[ MIN_VALUE ] = (minValue != null ? (Long) minValue : new Long(Short.MIN_VALUE));
0:             retval[ MAX_VALUE ] = (maxValue != null ? (Long) maxValue : new Long(Short.MAX_VALUE));
0:         } else if (dataType.getTypeId().equals(TypeId.INTEGER_ID)) {
0:             retval[ MIN_VALUE ]  = (minValue != null ? (Long) minValue : new Long(Integer.MIN_VALUE));
0:             retval[ MAX_VALUE ]  = (maxValue != null ? (Long) maxValue : new Long(Integer.MAX_VALUE));
1:         } else {
0:             // Could only be BIGINT
0:             retval[ MIN_VALUE ]  = (minValue != null ? (Long) minValue : new Long(Long.MIN_VALUE));
0:             retval[ MAX_VALUE ]  = (maxValue != null ? (Long) maxValue : new Long(Long.MAX_VALUE));
1:         }
1: 
0:         return retval;
1:     }
1: 
commit:2f4a1a0
/////////////////////////////////////////////////////////////////////////
1:      * Drop this sequence descriptor. Only restricted drops allowed right now.
commit:139ca85
/////////////////////////////////////////////////////////////////////////
1:  * See the header comment of SYSSEQUENCESRowFactory for the
1:  * contract of that table. In particular, if the CURRENTVALUE column
1:  * is null, then the sequence has been exhausted and no more values
1:  * can be generated from it.
/////////////////////////////////////////////////////////////////////////
1:     private Long currentValue; // could be null
1:     private boolean canCycle;
/////////////////////////////////////////////////////////////////////////
1:                               DataTypeDescriptor dataType, Long currentValue,
1:                               long startValue, long minimumValue, long maximumValue, long increment, boolean canCycle) {
/////////////////////////////////////////////////////////////////////////
1:         this.canCycle = canCycle;
/////////////////////////////////////////////////////////////////////////
1:                     "canCycle: " + canCycle + "\n";
/////////////////////////////////////////////////////////////////////////
1:     public Long getCurrentValue() {
/////////////////////////////////////////////////////////////////////////
1:     public boolean canCycle() {
1:         return canCycle;
commit:98c7520
/////////////////////////////////////////////////////////////////////////
0:         implements Provider, Dependent, PrivilegedSQLObject
1: {
/////////////////////////////////////////////////////////////////////////
1:    /**
1: 	 * @see PrivilegedSQLObject#getObjectTypeName
1: 	 */
1: 	public String getObjectTypeName()
1: 	{
1: 		return PermDescriptor.SEQUENCE_TYPE;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
commit:80eb35f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.depend.Dependent;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
0:         implements Provider, Dependent, UniqueSQLObjectDescriptor {
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Drop this sequence descriptor
1:      *
1:      * @throws StandardException Could not be dropped.
1:      */
1:     public void drop(LanguageConnectionContext lcc) throws StandardException
1:     {
1:         DataDictionary dd = getDataDictionary();
1:         DependencyManager dm = getDataDictionary().getDependencyManager();
1:         TransactionController tc = lcc.getTransactionExecute();
1: 
1:         // invalidate compiled statements which depend on this sequence
1:         dm.invalidateFor(this, DependencyManager.DROP_SEQUENCE, lcc);
1: 
1:         // drop the sequence
1:         dd.dropSequenceDescriptor(this, tc);
1: 
1:         // Clear the dependencies for the sequence
1:         dm.clearDependencies(lcc, this);
1: 
1:     }
1: 
1:     /**
1: 	 * Check that all of the dependent's dependencies are valid.
1: 	 *
1: 	 * @return true if the dependent is currently valid
1: 	 */
1: 	public synchronized boolean isValid()
1: 	{
1: 		return true;
1: 	}
1: 
1:     /**
1: 	 * Prepare to mark the dependent as invalid (due to at least one of
1: 	 * its dependencies being invalid).
1: 	 *
1: 	 * @param action	The action causing the invalidation
1: 	 * @param p			the provider
1: 	 * @param lcc		the language connection context
1: 	 *
1: 	 * @exception StandardException thrown if unable to make it invalid
1: 	 */
1: 	public void prepareToInvalidate
0: 	(
1: 		Provider 					p,
1: 		int							action,
1: 		LanguageConnectionContext	lcc
1: 	) throws StandardException
1: 	{
1: 		switch (action)
1: 		{   			
1: 			default:
1: 				break;
1: 		}
1: 	}
1:     /**
1: 	 * Mark the dependent as invalid (due to at least one of
1: 	 * its dependencies being invalid).
1: 	 *
1: 	 * @param 	lcc the language connection context
1: 	 * @param	action	The action causing the invalidation
1: 	 *
1: 	 * @exception StandardException thrown if called in sanity mode
1: 	 */
1: 	public void makeInvalid(int action, LanguageConnectionContext lcc) throws StandardException
1: 	{
1: 		switch (action)
1: 		{
1: 			// invalidate this sequence descriptor
1: 			case DependencyManager.USER_RECOMPILE_REQUEST:
1: 				DependencyManager dm = getDataDictionary().getDependencyManager();
1: 				dm.invalidateFor(this, DependencyManager.PREPARED_STATEMENT_RELEASE, lcc);
1: 				break;
1: 
1: 			default:
1: 				break;
1: 		}
1: 
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see TupleDescriptor#getDescriptorType
1:      */
1:     public String getDescriptorType() {
1:         return "Sequence";
1:     }
1: 
1:     /**
1:      * @see TupleDescriptor#getDescriptorName
1:      */
1:     public String getDescriptorName() {
1:         return sequenceName; }
1: 
commit:bb40bcb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.SequenceDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.Dependable;
0: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.sql.depend.Provider;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.impl.sql.catalog.DDdependableFinder;
1: 
1: /**
1:  * This class is used by rows in the SYS.SYSSEQUENCES system table.
1:  */
0: public class SequenceDescriptor extends TupleDescriptor
0:         implements Provider, UniqueSQLObjectDescriptor {
1: 
1:     private UUID sequenceUUID;
1:     private String sequenceName;
1:     private final SchemaDescriptor schemaDescriptor;
1:     private UUID schemaId;
1:     private DataTypeDescriptor dataType;
0:     private long currentValue;
1:     private long startValue;
1:     private long minimumValue;
1:     private long maximumValue;
1:     private long increment;
0:     private boolean cycle;
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param dataDictionary data dictionary
1:      * @param sequenceUUID   unique identification in time and space of this sequence
1:      *                       descriptor
1:      * @param sequenceName
1:      */
1: 
1:     public SequenceDescriptor(DataDictionary dataDictionary, SchemaDescriptor sd, UUID sequenceUUID, String sequenceName,
0:                               DataTypeDescriptor dataType, long currentValue,
0:                               long startValue, long minimumValue, long maximumValue, long increment, boolean cycle) {
1:         super(dataDictionary);
1:         if (SanityManager.DEBUG) {
1:             if (sd.getSchemaName() == null) {
1:                 SanityManager.THROWASSERT("new SequenceDescriptor() schema " +
1:                         "name is null for Sequence " + sequenceName);
1:             }
1:         }
1:         this.sequenceUUID = sequenceUUID;
1:         this.schemaDescriptor = sd;
1:         this.sequenceName = sequenceName;
1:         this.schemaId = sd.getUUID();
1:         this.dataType = dataType;
1:         this.currentValue = currentValue;
1:         this.startValue = startValue;
1:         this.minimumValue = minimumValue;
1:         this.maximumValue = maximumValue;
1:         this.increment = increment;
0:         this.cycle = cycle;
1:     }
1: 
1:    /**
1: 	 * @see UniqueTupleDescriptor#getUUID
1: 	 */
1: 	public UUID	getUUID()
0: 	{
1: 		return sequenceUUID;
1: 	}
1: 
1:     public String toString() {
1:         if (SanityManager.DEBUG) {
1:             return "sequenceUUID: " + sequenceUUID + "\n" +
1:                     "sequenceName: " + sequenceName + "\n" +
1:                     "schemaId: " + schemaId + "\n" +
1:                     "dataType: " + dataType.getTypeName() + "\n" +
1:                     "currentValue: " + currentValue + "\n" +
1:                     "startValue: " + startValue + "\n" +
1:                     "minimumValue: " + minimumValue + "\n" +
1:                     "maximumValue: " + maximumValue + "\n" +
1:                     "increment: " + increment + "\n" +
0:                     "cycle: " + cycle + "\n";
0:         } else {
1:             return "";
1:         }
1:     }
1: 
1:     public String getName() {
1:         return sequenceName;
1:     }
1: 
1:     public SchemaDescriptor getSchemaDescriptor() throws StandardException {
1:         return schemaDescriptor;
1:     }
1: 
1:     //////////////////////////////////////////////
1:     //
1:     // PROVIDER INTERFACE
1:     //
1:     //////////////////////////////////////////////
1: 
1:     /**
1:      * Get the provider's UUID
1:      *
1:      * @return The provider's UUID
1:      */
1:     public UUID getObjectID() {
1:         return sequenceUUID;
1:     }
1: 
1:     /**
1:      * Is this provider persistent?  A stored dependency will be required
1:      * if both the dependent and provider are persistent.
1:      *
1:      * @return boolean              Whether or not this provider is persistent.
1:      */
1:     public boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     /**
1:      * Return the name of this Provider.  (Useful for errors.)
1:      *
1:      * @return String   The name of this provider.
1:      */
1:     public String getObjectName() {
1:         return (sequenceName);
1:     }
1: 
1:     /**
1:      * Get the provider's type.
1:      *
1:      * @return char         The provider's type.
1:      */
1:     public String getClassType() {
1:         return Dependable.SEQUENCE;
1:     }
1: 
1:     /**
1:      * @return the stored form of this provider
1:      * @see Dependable#getDependableFinder
1:      */
1:     public DependableFinder getDependableFinder() {
0:         return new DDdependableFinder(StoredFormatIds.SEQUENCE_DESCRIPTOR_FINDER_V01_ID);
1:     }
1: 
1:     /*Accessor methods*/
1:     public String getSequenceName() {
1:         return sequenceName;
1:     }
1: 
0:     public UUID getSequenceUUID() {
1:         return sequenceUUID;
1:     }
1: 
1:     public UUID getSchemaId() {
1:         return schemaId;
1:     }
1: 
1:     public DataTypeDescriptor getDataType() {
1:         return dataType;
1:     }
1: 
0:     public long getCurrentValue() {
1:         return currentValue;
1:     }
1: 
1:     public long getStartValue() {
1:         return startValue;
1:     }
1: 
1:     public long getMinimumValue() {
1:         return minimumValue;
1:     }
1: 
1:     public long getMaximumValue() {
1:         return maximumValue;
1:     }
1: 
1:     public long getIncrement() {
1:         return increment;
1:     }
1: 
0:     public boolean isCycle() {
0:         return cycle;
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:999e32a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return getDependableFinder(
1:                 StoredFormatIds.SEQUENCE_DESCRIPTOR_FINDER_V01_ID);
============================================================================