1:89c881d: /*
29:89c881d: 
1:89c881d:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest
1:89c881d: 
1:89c881d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:89c881d:    contributor license agreements.  See the NOTICE file distributed with
1:89c881d:    this work for additional information regarding copyright ownership.
1:89c881d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:89c881d:    (the "License"); you may not use this file except in compliance with
1:89c881d:    the License.  You may obtain a copy of the License at
1:89c881d: 
1:89c881d:       http://www.apache.org/licenses/LICENSE-2.0
1:89c881d: 
1:89c881d:    Unless required by applicable law or agreed to in writing, software
1:89c881d:    distributed under the License is distributed on an "AS IS" BASIS,
1:89c881d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89c881d:    See the License for the specific language governing permissions and
1:89c881d:    limitations under the License.
1:89c881d: 
12:89c881d:  */
1:89c881d: 
1:89c881d: package org.apache.derbyTesting.functionTests.tests.management;
1:adb927d: 
1:89c881d: import java.util.Hashtable;
1:89c881d: import javax.management.ObjectName;
1:89c881d: import junit.framework.Test;
1:adb927d: 
10:89c881d: /**
1:89c881d:  * <p>
1:89c881d:  * This JUnit test class is for testing the VersionMBean that is available in
1:89c881d:  * Derby. Running these tests requires a JVM supporting J2SE 5.0 or better, due 
1:89c881d:  * to the implementation's dependency of the platform management agent.</p>
1:89c881d:  * <p>
1:89c881d:  * This class currently tests the following:</p>
1:89c881d:  * <ul>
1:89c881d:  *   <li>That the attributes we expect to be available exist</li>
1:89c881d:  *   <li>That these attributes are readable</li>
1:89c881d:  *   <li>That these attributes have the correct type</li>
1:89c881d:  * <p>
1:89c881d:  * The test fixtures will fail if an exception occurs (will be reported as an 
1:89c881d:  * error in JUnit).</p>
1:89c881d:  */
1:adb927d: public class VersionMBeanTest extends MBeanTest {
1:adb927d:     
1:89c881d:     public VersionMBeanTest(String name) {
1:89c881d:         super(name);
12:89c881d:     }
1:89c881d:     
1:89c881d:     public static Test suite() {
1:89c881d:         
1:39961b1:         /* The current test fixtures of this class assume that both instances
1:39961b1:          * of the version MBean are accessible, i.e. both for derby.jar and
1:39961b1:          * derbynet.jar. This means that it is assumed that the Network Server
1:39961b1:          * is running and that JMX is enabled. This is being handled by the
1:39961b1:          * super class. */
1:a3ffa1e:         return MBeanTest.suite(VersionMBeanTest.class, 
1:ffd9cf9:                                         "VersionMBeanTest");
1:89c881d:     }
1:89c881d:     
1:89c881d:     /**
1:89c881d:      * <p>
1:39961b1:      * Creates an object name instance for the Derby MBean whose object name's 
1:39961b1:      * textual representation includes the following key properties:</p>
1:39961b1:      * <ul>
1:39961b1:      *   <li>type=Version</li>
1:39961b1:      *   <li>jar=derby.jar</li>
1:39961b1:      * </ul>
1:39961b1:      * <p>
1:39961b1:      * The object name may also include other key properties such as a system
1:39961b1:      * identifier (DERBY-3466).</p>
1:89c881d:      * @return the object name representing the VersionMBean for the derby 
1:39961b1:      *         engine in this Derby system.
1:89c881d:      * @throws MalformedObjectNameException if the object name is not valid
1:89c881d:      */
1:89c881d:     private ObjectName getDerbyJarObjectName() 
1:9f69067:             throws Exception {
1:89c881d:         
1:89c881d:         // get a reference to the VersionMBean instance for derby.jar
1:89c881d:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:89c881d:         keyProps.put("type", "Version");
1:89c881d:         keyProps.put("jar", "derby.jar");
1:9f69067:         return getDerbyMBeanName(keyProps);
1:89c881d:     }
1:89c881d:     
1:39961b1:     /**
1:39961b1:      * <p>
1:39961b1:      * Creates an object name instance for the Derby MBean whose object name's 
1:39961b1:      * textual representation includes the following key properties:</p>
1:39961b1:      * <ul>
1:39961b1:      *   <li>type=Version</li>
1:39961b1:      *   <li>jar=derbynet.jar</li>
1:39961b1:      * </ul>
1:39961b1:      * <p>
1:39961b1:      * The object name may also include other key properties such as a system
1:39961b1:      * identifier (DERBY-3466).</p>
1:39961b1:      * @return the object name representing the VersionMBean for the Network 
1:39961b1:      *         Server running the Derby system represented by the system
1:39961b1:      *         identifier obtained from Derby's management service.
1:39961b1:      * @throws MalformedObjectNameException if the object name is not valid
1:39961b1:      */
1:39961b1:     private ObjectName getDerbynetJarObjectName() 
1:39961b1:             throws Exception {
1:39961b1:         
1:39961b1:         // get a reference to the VersionMBean instance for derbynet.jar
1:39961b1:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:39961b1:         keyProps.put("type", "Version");
1:39961b1:         keyProps.put("jar", "derbynet.jar");
1:39961b1:         return getDerbyMBeanName(keyProps);
1:39961b1:     }
1:39961b1:     
1:89c881d:     //
1:89c881d:     // ---------- TEST FIXTURES ------------
1:89c881d:     //
1:89c881d:     // This MBean currently has only read-only attributes. Test that it is
1:89c881d:     // possible to read all attribute values that we expect to be there.
1:89c881d:     // There are no operations to test.
1:89c881d:     
1:89c881d:     
1:89c881d:     public void testDerbyJarAttributeAlpha() throws Exception {
1:89c881d:         checkBooleanAttributeValue(getDerbyJarObjectName(), "Alpha");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeAlpha() throws Exception {
1:39961b1:         checkBooleanAttributeValue(getDerbynetJarObjectName(), "Alpha");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeBeta() throws Exception {
1:89c881d:         checkBooleanAttributeValue(getDerbyJarObjectName(), "Beta");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeBeta() throws Exception {
1:39961b1:         checkBooleanAttributeValue(getDerbynetJarObjectName(), "Beta");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeBuildNumber() throws Exception {
1:89c881d:         checkStringAttributeValue(getDerbyJarObjectName(), "BuildNumber");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeBuildNumber() throws Exception {
1:39961b1:         checkStringAttributeValue(getDerbynetJarObjectName(), "BuildNumber");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeMaintenanceVersion() throws Exception {
1:89c881d:         checkIntAttributeValue(getDerbyJarObjectName(), "MaintenanceVersion");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeMaintenanceVersion() throws Exception {
1:39961b1:         checkIntAttributeValue(getDerbynetJarObjectName(), "MaintenanceVersion");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeMajorVersion() throws Exception {
1:89c881d:         checkIntAttributeValue(getDerbyJarObjectName(), "MajorVersion");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeMajorVersion() throws Exception {
1:39961b1:         checkIntAttributeValue(getDerbynetJarObjectName(), "MajorVersion");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeMinorVersion() throws Exception {
1:89c881d:         checkIntAttributeValue(getDerbyJarObjectName(), "MinorVersion");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeMinorVersion() throws Exception {
1:39961b1:         checkIntAttributeValue(getDerbynetJarObjectName(), "MinorVersion");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeProductName() throws Exception {
1:89c881d:         checkStringAttributeValue(getDerbyJarObjectName(), "ProductName");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeProductName() throws Exception {
1:39961b1:         checkStringAttributeValue(getDerbynetJarObjectName(), "ProductName");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeProductTechnologyName() throws Exception {
1:89c881d:         checkStringAttributeValue(getDerbyJarObjectName(), 
1:89c881d:                                    "ProductTechnologyName");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeProductTechnologyName() throws Exception {
1:39961b1:         checkStringAttributeValue(getDerbynetJarObjectName(), 
1:39961b1:                                    "ProductTechnologyName");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeProductVendorName() throws Exception {
1:89c881d:         checkStringAttributeValue(getDerbyJarObjectName(), "ProductVendorName");
1:89c881d:     }
1:89c881d:     
1:39961b1:     public void testDerbynetJarAttributeProductVendorName() throws Exception {
1:39961b1:         checkStringAttributeValue(getDerbynetJarObjectName(), "ProductVendorName");
1:39961b1:     }
1:39961b1:     
1:89c881d:     public void testDerbyJarAttributeVersionString() throws Exception {
1:89c881d:         checkStringAttributeValue(getDerbyJarObjectName(), "VersionString");
1:89c881d:     }
1:39961b1:     
1:39961b1:     public void testDerbynetJarAttributeVersionString() throws Exception {
1:39961b1:         checkStringAttributeValue(getDerbynetJarObjectName(), "VersionString");
1:39961b1:     }
1:39961b1:     
1:89c881d: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:39961b1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         /* The current test fixtures of this class assume that both instances
1:          * of the version MBean are accessible, i.e. both for derby.jar and
1:          * derbynet.jar. This means that it is assumed that the Network Server
1:          * is running and that JMX is enabled. This is being handled by the
1:          * super class. */
1:      * Creates an object name instance for the Derby MBean whose object name's 
1:      * textual representation includes the following key properties:</p>
1:      * <ul>
1:      *   <li>type=Version</li>
1:      *   <li>jar=derby.jar</li>
1:      * </ul>
1:      * <p>
1:      * The object name may also include other key properties such as a system
1:      * identifier (DERBY-3466).</p>
1:      *         engine in this Derby system.
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Creates an object name instance for the Derby MBean whose object name's 
1:      * textual representation includes the following key properties:</p>
1:      * <ul>
1:      *   <li>type=Version</li>
1:      *   <li>jar=derbynet.jar</li>
1:      * </ul>
1:      * <p>
1:      * The object name may also include other key properties such as a system
1:      * identifier (DERBY-3466).</p>
1:      * @return the object name representing the VersionMBean for the Network 
1:      *         Server running the Derby system represented by the system
1:      *         identifier obtained from Derby's management service.
1:      * @throws MalformedObjectNameException if the object name is not valid
1:      */
1:     private ObjectName getDerbynetJarObjectName() 
1:             throws Exception {
1:         
1:         // get a reference to the VersionMBean instance for derbynet.jar
1:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:         keyProps.put("type", "Version");
1:         keyProps.put("jar", "derbynet.jar");
1:         return getDerbyMBeanName(keyProps);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     public void testDerbynetJarAttributeAlpha() throws Exception {
1:         checkBooleanAttributeValue(getDerbynetJarObjectName(), "Alpha");
1:     }
1:     
1:     public void testDerbynetJarAttributeBeta() throws Exception {
1:         checkBooleanAttributeValue(getDerbynetJarObjectName(), "Beta");
1:     }
1:     
1:     public void testDerbynetJarAttributeBuildNumber() throws Exception {
1:         checkStringAttributeValue(getDerbynetJarObjectName(), "BuildNumber");
1:     }
1:     
1:     public void testDerbynetJarAttributeMaintenanceVersion() throws Exception {
1:         checkIntAttributeValue(getDerbynetJarObjectName(), "MaintenanceVersion");
1:     }
1:     
1:     public void testDerbynetJarAttributeMajorVersion() throws Exception {
1:         checkIntAttributeValue(getDerbynetJarObjectName(), "MajorVersion");
1:     }
1:     
1:     public void testDerbynetJarAttributeMinorVersion() throws Exception {
1:         checkIntAttributeValue(getDerbynetJarObjectName(), "MinorVersion");
1:     }
1:     
1:     public void testDerbynetJarAttributeProductName() throws Exception {
1:         checkStringAttributeValue(getDerbynetJarObjectName(), "ProductName");
1:     }
1:     
1:     public void testDerbynetJarAttributeProductTechnologyName() throws Exception {
1:         checkStringAttributeValue(getDerbynetJarObjectName(), 
1:                                    "ProductTechnologyName");
1:     }
1:     
1:     public void testDerbynetJarAttributeProductVendorName() throws Exception {
1:         checkStringAttributeValue(getDerbynetJarObjectName(), "ProductVendorName");
1:     }
1:     
1:     
1:     public void testDerbynetJarAttributeVersionString() throws Exception {
1:         checkStringAttributeValue(getDerbynetJarObjectName(), "VersionString");
1:     }
1:     
commit:9f69067
/////////////////////////////////////////////////////////////////////////
1:             throws Exception {
1:         return getDerbyMBeanName(keyProps);
commit:ffd9cf9
/////////////////////////////////////////////////////////////////////////
1:                                         "VersionMBeanTest");
commit:a3ffa1e
/////////////////////////////////////////////////////////////////////////
1:         return MBeanTest.suite(VersionMBeanTest.class, 
commit:adb927d
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: public class VersionMBeanTest extends MBeanTest {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:89c881d
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.management;
1: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.net.MalformedURLException;
0: import java.util.ArrayList;
1: import java.util.Hashtable;
0: import javax.management.InstanceAlreadyExistsException;
0: import javax.management.MBeanServerConnection;
0: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseTestCase;
0: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * <p>
1:  * This JUnit test class is for testing the VersionMBean that is available in
1:  * Derby. Running these tests requires a JVM supporting J2SE 5.0 or better, due 
1:  * to the implementation's dependency of the platform management agent.</p>
1:  * <p>
1:  * This class currently tests the following:</p>
1:  * <ul>
1:  *   <li>That the attributes we expect to be available exist</li>
1:  *   <li>That these attributes are readable</li>
1:  *   <li>That these attributes have the correct type</li>
1:  * <p>
1:  * The test fixtures will fail if an exception occurs (will be reported as an 
1:  * error in JUnit).</p>
1:  */
0: public class VersionMBeanTest extends BaseTestCase {
1:     
1:     public VersionMBeanTest(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
1:                 
0:         // TODO -
0:         // Check for J2SE 5.0 or better? Or java.lang.management.ManagementFactory?
0:         // Older VMs will get UnsupportedClassVersionError anyway...
1:         
0:         // Create a suite of all "test..." methods in this class.
0:         TestSuite suite = new TestSuite(VersionMBeanTest.class, 
0:                                         "VersionMBeanTest:client");
1: 
0:         /* Connecting to an MBean server using a URL requires setting up remote
0:          * JMX in the JVM to which we want to connect. This is usually done by
0:          * setting a few system properties at JVM startup.
0:          * A quick solution is to set up a new network server JVM with
0:          * the required jmx properties.
0:          * A future improvement could be to fork a new JVM for embedded (?).
0:          *
0:          * This requires that the default security policy of the network server
0:          * includes the permissions required to perform the actions of these 
0:          * tests. Otherwise, we'd probably have to supply a custom policy file
0:          * and specify this using additional command line properties at server 
0:          * startup.
1:          */
0:         NetworkServerTestSetup networkServerTestSetup = 
0:                 new NetworkServerTestSetup (
0:                         suite, // run all tests in this class in the same setup
0:                         getCommandLineProperties(), // need to set up JMX in JVM
0:                         new String[0], // no server arguments needed
0:                         true,   // wait for the server to start properly
0:                         new InputStream[1] // no need to check server output
0:                 );
1: 
0:         /* Since the server will be started in a new process we need "execute" 
0:          * FilePermission on all files (at least Java executables)...
0:          * Will run without SecurityManager for now, but could probably add a 
0:          * JMX specific policy file later. Or use the property trick reported
0:          * on derby-dev 2008-02-26 and add the permission to the generic 
0:          * policy.
1:          */
0:         Test testSetup = 
0:                 SecurityManagerSetup.noSecurityManager(networkServerTestSetup);
0:         // this decorator makes sure the suite is empty if this configration
0:         // does not support the network server:
0:         return TestConfiguration.defaultServerDecorator(testSetup);
1:     }
1:     
1:     /**
0:      * Setup code to be run before each test fixture. This method will make
0:      * sure that JMX Management is enabled in Derby, so that the test fixtures
0:      * can access the VersionMBean without problems.
0:      * 
0:      * @throws java.lang.Exception if an unexpected Exception occurs
1:      */
0:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         enableManagement();
1:     }
1:     
0:     // ---------- UTILITY METHODS ------------
1:     
1:     /**
0:      * Returns a set of startup properties suitable for VersionMBeanTest.
0:      * These properties are used to configure JMX in a different JVM.
0:      * Will set up remote JMX using the port 9999 (TODO: make this 
0:      * configurable), and with JMX security (authentication & SSL) disabled.
0:      * 
0:      * @return a set of Java system properties to be set on the command line
0:      *         when starting a new JVM in order to enable remote JMX.
1:      */
0:     private static String[] getCommandLineProperties()
0:     {
0:         ArrayList<String> list = new ArrayList<String>();
0:         list.add("com.sun.management.jmxremote.port=" 
0:                 + TestConfiguration.getCurrent().getJmxPort());
0:         list.add("com.sun.management.jmxremote.authenticate=false");
0:         list.add("com.sun.management.jmxremote.ssl=false");
0:         String[] result = new String[list.size()];
0:         list.toArray(result);
0:         return result;
1:     }
1:     
1:     /**
0:      * Creates a URL for connecting to the platform MBean server on the host
0:      * specified by the network server hostname of this test configuration.
0:      * The JMX port number used is also retreived from the test configuration.
0:      * @return a service URL for connecting to the platform MBean server
0:      * @throws MalformedURLException if the URL is malformed
1:      */
0:     private JMXServiceURL getJmxUrl() throws MalformedURLException {
1:         
0:         // NOTE: This hostname is only valid in a client/server configuration
0:         String hostname = TestConfiguration.getCurrent().getHostName();
0:         //String hostname = TestConfiguration.DEFAULT_HOSTNAME; // for embedded?
0:         int jmxPort = TestConfiguration.getCurrent().getJmxPort();
1:                 
0:         /* "jmxrmi" is the name of the RMI server connector of the platform
0:          * MBean server, which is used by Derby */
0:         JMXServiceURL url = new JMXServiceURL(
0:                 "service:jmx:rmi:///jndi/rmi://" 
0:                     + hostname
0:                     + ":" + jmxPort + "/jmxrmi");
1:         
0:         return url;
1:     }
1:     
1:     /**
0:      * Creates a client connector for JMX and uses this to obtain a connection
0:      * to an MBean server. This method assumes that JMX security has been
0:      * disabled, meaning that authentication credentials and SSL configuration 
0:      * details are not supplied to the MBeanServer.
0:      * 
0:      * @return a plain connection to an MBean server
0:      * @throws MalformedURLException if the JMX Service URL used is invalid
0:      * @throws IOException if connecting to the MBean server fails
1:      */
0:     private MBeanServerConnection getMBeanServerConnection() 
0:             throws MalformedURLException, IOException {
1:                 
0:         // assumes that JMX authentication and SSL is not required (hence null)
0:         JMXConnector jmxc = JMXConnectorFactory.connect(getJmxUrl(), null);
0:         return jmxc.getMBeanServerConnection();
1:     }
1:     
1:     /**
0:      * Enables Derby's MBeans in the MBeanServer by accessing Derby's 
0:      * ManagementMBean. If Derby JMX management has already been enabled, no 
0:      * changes will be made. The test fixtures in this class require that
0:      * JMX Management is enabled in Derby, hence this method.
0:      * 
0:      * @throws Exception JMX-related exceptions if an unexpected error occurs.
1:      */
0:     private void enableManagement() throws Exception {
0:         // prepare the Management mbean. Use the same ObjectName that Derby uses
0:         // by default, to avoid creating multiple instances of the same bean
0:         ObjectName mgmtObjName 
0:                 = new ObjectName("org.apache.derby", "type", "Management");
0:         // create/register the MBean. If the same MBean has already been
0:         // registered with the MBeanServer, that MBean will be referenced.
0:         //ObjectInstance mgmtObj = 
0:         MBeanServerConnection serverConn = getMBeanServerConnection();
1:         
0:         try {
0:             serverConn.createMBean("org.apache.derby.mbeans.Management", 
0:                     mgmtObjName);
0:         } catch (InstanceAlreadyExistsException e) {
0:             // Derby's ManagementMBean has already been created
1:         }
0:         // check the status of the management service
0:         Boolean active = (Boolean) 
0:                 serverConn.getAttribute(mgmtObjName, "ManagementActive");
1: 
0:         if (!active.booleanValue()) {
0:             // JMX management is not active, so activate it by invoking the
0:             // startManagement operation.
0:             serverConn.invoke(
0:                     mgmtObjName, 
0:                     "startManagement", 
0:                     new Object[0], new String[0]); // no arguments
0:             active = (Boolean) 
0:                     serverConn.getAttribute(mgmtObjName, "ManagementActive");
1:         }
1:         
0:         assertTrue("Failed to activate Derby's JMX management", active);
1:     }
1: 
1:     /**
1:      * <p>
0:      * Creates an object name instance for the MBean whose object name's textual
0:      * representation is:</p>
0:      * <pre>
0:      *     org.apache.derby:type=Version,jar=derby.jar
0:      * </pre>
1:      * @return the object name representing the VersionMBean for the derby 
0:      *         engine
1:      * @throws MalformedObjectNameException if the object name is not valid
1:      */
1:     private ObjectName getDerbyJarObjectName() 
0:             throws MalformedObjectNameException {
1:         
1:         // get a reference to the VersionMBean instance for derby.jar
1:         Hashtable<String, String> keyProps = new Hashtable<String, String>();
1:         keyProps.put("type", "Version");
1:         keyProps.put("jar", "derby.jar");
0:         return new ObjectName("org.apache.derby", keyProps);
1:     }
1:     
1:     /**
0:      * Gets the value of a given attribute that is exposed by the MBean 
0:      * represented by the given object name.
0:      * @param objName the object name defining a specific MBean instance
0:      * @param name the name of the attribute
0:      * @return the value of the attribute
0:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
0:     private Object getAttribute(ObjectName objName, String name) 
0:             throws Exception {
1:         
0:         return getMBeanServerConnection().getAttribute(objName, name);
1:     }
1:     
1:     /**
0:      * Checks the readability and type of an attribute value that is supposed 
0:      * to be a boolean.
0:      * @param objName the object name representing the MBean instance from which
0:      *        the attribute value will be retreived
0:      * @param name the name of the attribute
0:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
0:     private void checkBooleanAttributeValue(ObjectName objName, String name) 
0:             throws Exception {
1:         
0:         Object value = getAttribute(objName, name);
0:         boolean unboxedValue = ((Boolean)value).booleanValue();
0:         println(name + " = " + unboxedValue); // for debugging
1:     }
1:     
1:     /**
0:      * Checks the readability and type of an attribute value that is supposed 
0:      * to be an int.
0:      * @param objName the object name representing the MBean instance from which
0:      *        the attribute value will be retreived
0:      * @param name the name of the attribute
0:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
0:     private void checkIntAttributeValue(ObjectName objName, String name) 
0:             throws Exception {
1:         
0:         Object value = getAttribute(objName, name);
0:         int unboxedValue = ((Integer)value).intValue();
0:         println(name + " = " + unboxedValue); // for debugging
1:     }
1:     
1:     /**
0:      * Checks the readability and type of an attribute value that is supposed 
0:      * to be a String.
0:      * @param objName the object name representing the MBean instance from which
0:      *        the attribute value will be retreived
0:      * @param name the name of the attribute
0:      * @throws java.lang.Exception if an unexpected error occurs
1:      */
0:     private void checkStringAttributeValue(ObjectName objName, String name) 
0:             throws Exception {
1:         
0:         String value = (String)getAttribute(objName, name);
0:         println(name + " = " + value); // for debugging
1:     }
1:     
1:     //
1:     // ---------- TEST FIXTURES ------------
1:     //
1:     // This MBean currently has only read-only attributes. Test that it is
1:     // possible to read all attribute values that we expect to be there.
1:     // There are no operations to test.
1:     
1:     
1:     public void testDerbyJarAttributeAlpha() throws Exception {
1:         checkBooleanAttributeValue(getDerbyJarObjectName(), "Alpha");
1:     }
1:     
1:     public void testDerbyJarAttributeBeta() throws Exception {
1:         checkBooleanAttributeValue(getDerbyJarObjectName(), "Beta");
1:     }
1:     
1:     public void testDerbyJarAttributeBuildNumber() throws Exception {
1:         checkStringAttributeValue(getDerbyJarObjectName(), "BuildNumber");
1:     }
1:     
0:     // Will fail until the MBean is updated (MaintVersion -> MaintenanceVersion)
1:     public void testDerbyJarAttributeMaintenanceVersion() throws Exception {
1:         checkIntAttributeValue(getDerbyJarObjectName(), "MaintenanceVersion");
1:     }
1:     
1:     public void testDerbyJarAttributeMajorVersion() throws Exception {
1:         checkIntAttributeValue(getDerbyJarObjectName(), "MajorVersion");
1:     }
1:     
1:     public void testDerbyJarAttributeMinorVersion() throws Exception {
1:         checkIntAttributeValue(getDerbyJarObjectName(), "MinorVersion");
1:     }
1:     
1:     public void testDerbyJarAttributeProductName() throws Exception {
1:         checkStringAttributeValue(getDerbyJarObjectName(), "ProductName");
1:     }
1:     
1:     public void testDerbyJarAttributeProductTechnologyName() throws Exception {
1:         checkStringAttributeValue(getDerbyJarObjectName(), 
1:                                    "ProductTechnologyName");
1:     }
1:     
1:     public void testDerbyJarAttributeProductVendorName() throws Exception {
1:         checkStringAttributeValue(getDerbyJarObjectName(), "ProductVendorName");
1:     }
1:     
1:     public void testDerbyJarAttributeVersionString() throws Exception {
1:         checkStringAttributeValue(getDerbyJarObjectName(), "VersionString");
1:     }
1: 
1: }
============================================================================