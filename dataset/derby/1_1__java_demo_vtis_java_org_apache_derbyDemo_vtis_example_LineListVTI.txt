1:a3a55b3: /*
1:a3a55b3: 
1:a3a55b3: Derby - Class org.apache.derbyDemo.vtis.example.LineListVTI
1:a3a55b3: 
1:a3a55b3: Licensed to the Apache Software Foundation (ASF) under one or more
1:a3a55b3: contributor license agreements.  See the NOTICE file distributed with
1:a3a55b3: this work for additional information regarding copyright ownership.
1:a3a55b3: The ASF licenses this file to You under the Apache License, Version 2.0
1:a3a55b3: (the "License"); you may not use this file except in compliance with
1:a3a55b3: the License.  You may obtain a copy of the License at
1:a3a55b3: 
1:a3a55b3: http://www.apache.org/licenses/LICENSE-2.0
1:a3a55b3: 
1:a3a55b3: Unless required by applicable law or agreed to in writing, software
1:a3a55b3: distributed under the License is distributed on an "AS IS" BASIS,
1:a3a55b3: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3a55b3: See the License for the specific language governing permissions and
1:a3a55b3: limitations under the License.
1:a3a55b3: 
1:a3a55b3: */
1:a3a55b3: 
1:a3a55b3: package org.apache.derbyDemo.vtis.example;
1:a3a55b3: 
1:a3a55b3: import java.io.*;
1:a3a55b3: import java.sql.*;
1:a3a55b3: import java.text.SimpleDateFormat;
1:a3a55b3: 
1:a3a55b3: import org.apache.derbyDemo.vtis.core.*;
1:a3a55b3: 
1:a3a55b3: /**
1:a3a55b3:  * <p>
1:a3a55b3:  * This VTI makes a table out of a text file. The table has one column,
1:a3a55b3:  * containing the contents of a line in the file. Leading and trailing white
1:a3a55b3:  * space are trimmed.
1:a3a55b3:  * </p>
1:a3a55b3:  */
1:a3a55b3: public    class   LineListVTI  extends FlatFileVTI
1:a3a55b3: {
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     //
1:a3a55b3:     // CONSTANTS
1:a3a55b3:     //
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3: 
1:a3a55b3:     private static  final   String[]    COLUMN_NAMES =
1:a3a55b3:     {
1:a3a55b3:         "line"
1:a3a55b3:     };
1:a3a55b3: 
1:a3a55b3:     private static  final   int LINE = 0;
1:a3a55b3: 
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     //
1:a3a55b3:     // STATE
1:a3a55b3:     //
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     //
1:a3a55b3:     // CONSTRUCTORS
1:a3a55b3:     //
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3: 
1:a3a55b3:     /**
1:a3a55b3:      * <p>
1:a3a55b3:      * Build a LineListVTI given the name of a file.
1:a3a55b3:      * </p>
1:a3a55b3:      */
1:a3a55b3:     public  LineListVTI( String fileName )
1:a3a55b3:     {
1:a3a55b3:         super( COLUMN_NAMES, fileName );
1:a3a55b3:     }
1:a3a55b3: 
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     //
1:a3a55b3:     // TABLE FUNCTION METHOD
1:a3a55b3:     //
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3: 
1:a3a55b3: 
1:a3a55b3:     /**
1:a3a55b3:      * <p>
1:a3a55b3:      * This is the method which is registered as a table function.
1:a3a55b3:      * </p>
1:a3a55b3:      */
1:a3a55b3:     public  static  ResultSet   lineListVTI( String fileName )
1:a3a55b3:         throws SQLException
1:a3a55b3:     {
1:a3a55b3:         return new LineListVTI( fileName );
1:a3a55b3:     }
1:a3a55b3: 
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     //
1:a3a55b3:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:a3a55b3:     //
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3: 
1:a3a55b3:     /**
1:a3a55b3:      * <p>
1:a3a55b3:      * Parse the next chunk of text, using readLine(), and return the next row.
1:a3a55b3:      * Returns null if the file is exhausted.
1:a3a55b3:      * </p>
1:a3a55b3:      */
1:a3a55b3:     protected  String[]  parseRow( ) throws SQLException
1:a3a55b3:     {
1:a3a55b3:         String[]    newRow = new String[ COLUMN_NAMES.length ];
1:a3a55b3:         String      nextLine = null;
1:a3a55b3: 
1:a3a55b3:         nextLine = readLine();
1:a3a55b3: 
1:a3a55b3:         // if at EOF, get out of here
1:a3a55b3:         if ( nextLine == null ) { return null; }
1:a3a55b3: 
1:a3a55b3:         nextLine = nextLine.trim();
1:a3a55b3: 
1:a3a55b3:         newRow[ LINE ] = nextLine;
1:a3a55b3: 
1:a3a55b3:         return newRow;
1:a3a55b3:     }
1:a3a55b3: 
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     //
1:a3a55b3:     // ResultSet METHODS
1:a3a55b3:     //
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3: 
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3:     //
1:a3a55b3:     // MINIONS
1:a3a55b3:     //
1:a3a55b3:     ///////////////////////////////////////////////////////////////////////////////////
1:a3a55b3: 
1:a3a55b3: 
1:a3a55b3: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a3a55b3
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyDemo.vtis.example.LineListVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyDemo.vtis.example;
1: 
1: import java.io.*;
1: import java.sql.*;
1: import java.text.SimpleDateFormat;
1: 
1: import org.apache.derbyDemo.vtis.core.*;
1: 
1: /**
1:  * <p>
1:  * This VTI makes a table out of a text file. The table has one column,
1:  * containing the contents of a line in the file. Leading and trailing white
1:  * space are trimmed.
1:  * </p>
1:  */
1: public    class   LineListVTI  extends FlatFileVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String[]    COLUMN_NAMES =
1:     {
1:         "line"
1:     };
1: 
1:     private static  final   int LINE = 0;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Build a LineListVTI given the name of a file.
1:      * </p>
1:      */
1:     public  LineListVTI( String fileName )
1:     {
1:         super( COLUMN_NAMES, fileName );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TABLE FUNCTION METHOD
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * <p>
1:      * This is the method which is registered as a table function.
1:      * </p>
1:      */
1:     public  static  ResultSet   lineListVTI( String fileName )
1:         throws SQLException
1:     {
1:         return new LineListVTI( fileName );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Parse the next chunk of text, using readLine(), and return the next row.
1:      * Returns null if the file is exhausted.
1:      * </p>
1:      */
1:     protected  String[]  parseRow( ) throws SQLException
1:     {
1:         String[]    newRow = new String[ COLUMN_NAMES.length ];
1:         String      nextLine = null;
1: 
1:         nextLine = readLine();
1: 
1:         // if at EOF, get out of here
1:         if ( nextLine == null ) { return null; }
1: 
1:         nextLine = nextLine.trim();
1: 
1:         newRow[ LINE ] = nextLine;
1: 
1:         return newRow;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ResultSet METHODS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: }
============================================================================