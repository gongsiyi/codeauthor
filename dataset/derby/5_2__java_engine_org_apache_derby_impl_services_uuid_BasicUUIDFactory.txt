1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.uuid.BasicUUIDFactory
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.uuid;
1:eac0369: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:56c1dc2: 
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: 
3:eac0369: /**
1:eac0369: 
1:eac0369:   A hack implementation of something similar to a DCE UUID 
1:eac0369:   generator.  Generates unique 128-bit numbers based on the
1:eac0369:   current machine's internet address, the current time, and
1:eac0369:   a sequence number.  This implementation should be made to
1:eac0369:   conform to the DCE specification. ("DEC/HP, Network Computing
1:eac0369:   Architecture, Remote Procedure Call Runtime Extensions
1:eac0369:   Specification, version OSF TX1.0.11," Steven Miller, July
1:eac0369:   23, 1992.  This is part of the OSF DCE Documentation.
1:eac0369:   Chapter 10 describes the UUID generation algorithm.)
1:eac0369:   <P>
1:eac0369:   Some known deficiencies:
1:eac0369:   <ul>
1:eac0369:   <li> Rather than using the 48-bit hardware network address,
1:eac0369:   it uses the 32-bit IP address. IP addresses are not
1:eac0369:   guaranteed to be unique.
1:eac0369:   <li> There is no provision for generating a suitably unique
1:eac0369:   number if no IP address is available.
1:eac0369:   <li> Two processes running on this machine which start their
1:eac0369:   respective UUID services within a millisecond of one another
1:eac0369:   may generate duplicate UUIDS.
1:eac0369:   </ul>
1:eac0369:   <P>
1:eac0369:   However, the intention is that UUIDs generated from this class
1:eac0369:   will be unique with respect to UUIDs generated by other DCE
1:eac0369:   UUID generators.
1:eac0369: 
2:eac0369: **/
1:eac0369: 
1:eac0369: public final class BasicUUIDFactory
1:eac0369: 	implements UUIDFactory
1:1f9b9c4: {
1:eac0369:     /*
1:eac0369: 	** Fields of BasicUUIDFactory.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	private long majorId;  // 48 bits only
1:eac0369: 	private long timemillis;
1:eac0369: 
1:eac0369: 	public BasicUUIDFactory() {
1:56c1dc2: 		Object env = getMonitor().getEnvironment();
1:eac0369: 		if (env != null) {
1:eac0369: 			String s = env.toString();
1:eac0369: 			if (s != null)
1:eac0369: 				env = s;
1:eac0369: 
1:eac0369: 			majorId = ((long) env.hashCode());
1:eac0369: 
1:eac0369: 			
1:eac0369: 		} else {
1:eac0369: 			majorId = Runtime.getRuntime().freeMemory();
2:eac0369: 		}
1:eac0369: 
1:eac0369: 		majorId &= 0x0000ffffffffffffL;
1:eac0369: 		resetCounters();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	//	Constants and fields for computing the sequence number. We started out with monotonically
1:eac0369: 	//	increasing sequence numbers but realized that this causes collisions at the
1:eac0369: 	//	ends of BTREEs built on UUID columns. So now we have a random number
1:eac0369: 	//	generator. We generate these numbers using a technique from Knuth
1:eac0369: 	//	"Seminumerical Algorithms," section 3.2 (Generating Uniform Random Numbers).
1:eac0369: 	//	The formula is:
1:eac0369: 	//
1:eac0369: 	//		next = ( (MULTIPLIER * current) + STEP ) % MODULUS
1:eac0369: 	//
1:eac0369: 	//	Here
1:eac0369: 	//
1:eac0369: 	//		MODULUS			=	int size.
1:eac0369: 	//		MULTIPLIER		=	fairly close to the square root of MODULUS to force the
1:eac0369: 	//							sequence number to jump around. satisifies the rule that
1:eac0369: 	//							(MULTIPLIER-1) is divisible by 4 and by all the primes which
1:eac0369: 	//							divide MODULUS.
1:eac0369: 	//		STEP			=	a large number that keeps the sequence number jumping around.
1:eac0369: 	//							must be relatively prime to MODULUS.
1:eac0369: 	//		INITIAL_VALUE	=	a number guaranteeing that the first couple sequence numbers
1:eac0369: 	//							won't be monotonically increasing.
1:eac0369: 	//
1:eac0369: 	//	The sequence numbers should jump around and cycle through all numbers which fit in an int.
1:eac0369: 
1:eac0369: 	private	static	final	long	MODULUS			=	( 1L << 32 );
1:eac0369: 	private	static	final	long	MULTIPLIER		=	( ( 1L << 14 ) + 1 );
1:eac0369: 	private	static	final	long	STEP			=	( ( 1L << 27 ) + 1 );
1:eac0369: 	private	static	final	long	INITIAL_VALUE	=	( 2551218188L );
1:eac0369: 
1:eac0369: 	private			long	currentValue;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods of UUID
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Generate a new UUID.
1:eac0369: 		@see UUIDFactory#createUUID
1:eac0369: 	**/
1:eac0369: 	public synchronized UUID createUUID()
3:eac0369: 	{
1:eac0369: 		long cv = currentValue = ( ( MULTIPLIER * currentValue ) + STEP ) % MODULUS;
1:eac0369: 		if ( cv == INITIAL_VALUE ) { bumpMajor(); }
1:eac0369: 		int sequence = (int) cv;
1:eac0369: 
1:eac0369: 		return new BasicUUID(majorId, timemillis, sequence);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Recreate a UUID previously generated UUID value.
2:eac0369: 		@see UUIDFactory#recreateUUID
1:eac0369: 	**/
1:eac0369: 	public UUID recreateUUID(String uuidstring)
1:eac0369: 	{
1:eac0369: 		return new BasicUUID(uuidstring);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	private void bumpMajor() {
1:eac0369: 
1:eac0369: 		// 48 bits only
1:eac0369: 		majorId = (majorId + 1L) & 0x0000ffffffffffffL;
1:eac0369: 		if (majorId == 0L)
1:eac0369: 			resetCounters();
1:eac0369: 
1:eac0369: 	}
1:eac0369: 	private void resetCounters()
1:eac0369: 	{
1:eac0369: 		timemillis = System.currentTimeMillis();
1:eac0369: 		currentValue = INITIAL_VALUE;
1:eac0369: 	}
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1: 		Object env = getMonitor().getEnvironment();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
1:     }
1: 
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b9bd28c
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.uuid.BasicUUIDFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
1: {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.uuid
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.uuid;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
1: /**
1: 
1:   A hack implementation of something similar to a DCE UUID 
1:   generator.  Generates unique 128-bit numbers based on the
1:   current machine's internet address, the current time, and
1:   a sequence number.  This implementation should be made to
1:   conform to the DCE specification. ("DEC/HP, Network Computing
1:   Architecture, Remote Procedure Call Runtime Extensions
1:   Specification, version OSF TX1.0.11," Steven Miller, July
1:   23, 1992.  This is part of the OSF DCE Documentation.
1:   Chapter 10 describes the UUID generation algorithm.)
1:   <P>
1:   Some known deficiencies:
1:   <ul>
1:   <li> Rather than using the 48-bit hardware network address,
1:   it uses the 32-bit IP address. IP addresses are not
1:   guaranteed to be unique.
1:   <li> There is no provision for generating a suitably unique
1:   number if no IP address is available.
1:   <li> Two processes running on this machine which start their
1:   respective UUID services within a millisecond of one another
1:   may generate duplicate UUIDS.
1:   </ul>
1:   <P>
1:   However, the intention is that UUIDs generated from this class
1:   will be unique with respect to UUIDs generated by other DCE
1:   UUID generators.
1: 
1: **/
1: 
1: public final class BasicUUIDFactory
1: 	implements UUIDFactory
1: {	
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1:     /*
1: 	** Fields of BasicUUIDFactory.
1: 	*/
1: 
1: 	private long majorId;  // 48 bits only
1: 	private long timemillis;
1: 
1: 	public BasicUUIDFactory() {
0: 		Object env = Monitor.getMonitor().getEnvironment();
1: 		if (env != null) {
1: 			String s = env.toString();
1: 			if (s != null)
1: 				env = s;
1: 
1: 			majorId = ((long) env.hashCode());
1: 
1: 			
1: 		} else {
1: 			majorId = Runtime.getRuntime().freeMemory();
1: 		}
1: 
1: 		majorId &= 0x0000ffffffffffffL;
1: 		resetCounters();
1: 	}
1: 
1: 
1: 	//
1: 	//	Constants and fields for computing the sequence number. We started out with monotonically
1: 	//	increasing sequence numbers but realized that this causes collisions at the
1: 	//	ends of BTREEs built on UUID columns. So now we have a random number
1: 	//	generator. We generate these numbers using a technique from Knuth
1: 	//	"Seminumerical Algorithms," section 3.2 (Generating Uniform Random Numbers).
1: 	//	The formula is:
1: 	//
1: 	//		next = ( (MULTIPLIER * current) + STEP ) % MODULUS
1: 	//
1: 	//	Here
1: 	//
1: 	//		MODULUS			=	int size.
1: 	//		MULTIPLIER		=	fairly close to the square root of MODULUS to force the
1: 	//							sequence number to jump around. satisifies the rule that
1: 	//							(MULTIPLIER-1) is divisible by 4 and by all the primes which
1: 	//							divide MODULUS.
1: 	//		STEP			=	a large number that keeps the sequence number jumping around.
1: 	//							must be relatively prime to MODULUS.
1: 	//		INITIAL_VALUE	=	a number guaranteeing that the first couple sequence numbers
1: 	//							won't be monotonically increasing.
1: 	//
1: 	//	The sequence numbers should jump around and cycle through all numbers which fit in an int.
1: 
1: 	private	static	final	long	MODULUS			=	( 1L << 32 );
1: 	private	static	final	long	MULTIPLIER		=	( ( 1L << 14 ) + 1 );
1: 	private	static	final	long	STEP			=	( ( 1L << 27 ) + 1 );
1: 	private	static	final	long	INITIAL_VALUE	=	( 2551218188L );
1: 
1: 	private			long	currentValue;
1: 
1: 	/*
1: 	** Methods of UUID
1: 	*/
1: 
1: 	/**
1: 		Generate a new UUID.
1: 		@see UUIDFactory#createUUID
1: 	**/
1: 	public synchronized UUID createUUID()
1: 	{
1: 		long cv = currentValue = ( ( MULTIPLIER * currentValue ) + STEP ) % MODULUS;
1: 		if ( cv == INITIAL_VALUE ) { bumpMajor(); }
1: 		int sequence = (int) cv;
1: 
1: 		return new BasicUUID(majorId, timemillis, sequence);
1: 	}
1: 
1: 	/**
1: 		Recreate a UUID previously generated UUID value.
1: 		@see UUIDFactory#recreateUUID
1: 	**/
1: 	public UUID recreateUUID(String uuidstring)
1: 	{
1: 		return new BasicUUID(uuidstring);
1: 	}
1: 
1: 	/**
1: 		@see UUIDFactory#recreateUUID
1: 	**/
0: 	public UUID recreateUUID(byte[] b)
1: 	{
0: 		return new BasicUUID(b);
1: 	}
1: 
1: 	private void bumpMajor() {
1: 
1: 		// 48 bits only
1: 		majorId = (majorId + 1L) & 0x0000ffffffffffffL;
1: 		if (majorId == 0L)
1: 			resetCounters();
1: 
1: 	}
1: 	private void resetCounters()
1: 	{
1: 		timemillis = System.currentTimeMillis();
1: 		currentValue = INITIAL_VALUE;
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.uuid
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.uuid;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: 
0: /**
0: 
0:   A hack implementation of something similar to a DCE UUID 
0:   generator.  Generates unique 128-bit numbers based on the
0:   current machine's internet address, the current time, and
0:   a sequence number.  This implementation should be made to
0:   conform to the DCE specification. ("DEC/HP, Network Computing
0:   Architecture, Remote Procedure Call Runtime Extensions
0:   Specification, version OSF TX1.0.11," Steven Miller, July
0:   23, 1992.  This is part of the OSF DCE Documentation.
0:   Chapter 10 describes the UUID generation algorithm.)
0:   <P>
0:   Some known deficiencies:
0:   <ul>
0:   <li> Rather than using the 48-bit hardware network address,
0:   it uses the 32-bit IP address. IP addresses are not
0:   guaranteed to be unique.
0:   <li> There is no provision for generating a suitably unique
0:   number if no IP address is available.
0:   <li> Two processes running on this machine which start their
0:   respective UUID services within a millisecond of one another
0:   may generate duplicate UUIDS.
0:   </ul>
0:   <P>
0:   However, the intention is that UUIDs generated from this class
0:   will be unique with respect to UUIDs generated by other DCE
0:   UUID generators.
0: 
0: **/
0: 
0: public final class BasicUUIDFactory
0: 	implements UUIDFactory
0: {	
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0:     /*
0: 	** Fields of BasicUUIDFactory.
0: 	*/
0: 
0: 	private long majorId;  // 48 bits only
0: 	private long timemillis;
0: 
0: 	public BasicUUIDFactory() {
0: 		Object env = Monitor.getMonitor().getEnvironment();
0: 		if (env != null) {
0: 			String s = env.toString();
0: 			if (s != null)
0: 				env = s;
0: 
0: 			majorId = ((long) env.hashCode());
0: 
0: 			
0: 		} else {
0: 			majorId = Runtime.getRuntime().freeMemory();
0: 		}
0: 
0: 		majorId &= 0x0000ffffffffffffL;
0: 		resetCounters();
0: 	}
0: 
0: 
0: 	//
0: 	//	Constants and fields for computing the sequence number. We started out with monotonically
0: 	//	increasing sequence numbers but realized that this causes collisions at the
0: 	//	ends of BTREEs built on UUID columns. So now we have a random number
0: 	//	generator. We generate these numbers using a technique from Knuth
0: 	//	"Seminumerical Algorithms," section 3.2 (Generating Uniform Random Numbers).
0: 	//	The formula is:
0: 	//
0: 	//		next = ( (MULTIPLIER * current) + STEP ) % MODULUS
0: 	//
0: 	//	Here
0: 	//
0: 	//		MODULUS			=	int size.
0: 	//		MULTIPLIER		=	fairly close to the square root of MODULUS to force the
0: 	//							sequence number to jump around. satisifies the rule that
0: 	//							(MULTIPLIER-1) is divisible by 4 and by all the primes which
0: 	//							divide MODULUS.
0: 	//		STEP			=	a large number that keeps the sequence number jumping around.
0: 	//							must be relatively prime to MODULUS.
0: 	//		INITIAL_VALUE	=	a number guaranteeing that the first couple sequence numbers
0: 	//							won't be monotonically increasing.
0: 	//
0: 	//	The sequence numbers should jump around and cycle through all numbers which fit in an int.
0: 
0: 	private	static	final	long	MODULUS			=	( 1L << 32 );
0: 	private	static	final	long	MULTIPLIER		=	( ( 1L << 14 ) + 1 );
0: 	private	static	final	long	STEP			=	( ( 1L << 27 ) + 1 );
0: 	private	static	final	long	INITIAL_VALUE	=	( 2551218188L );
0: 
0: 	private			long	currentValue;
0: 
0: 	/*
0: 	** Methods of UUID
0: 	*/
0: 
0: 	/**
0: 		Generate a new UUID.
0: 		@see UUIDFactory#createUUID
0: 	**/
0: 	public synchronized UUID createUUID()
0: 	{
0: 		long cv = currentValue = ( ( MULTIPLIER * currentValue ) + STEP ) % MODULUS;
0: 		if ( cv == INITIAL_VALUE ) { bumpMajor(); }
0: 		int sequence = (int) cv;
0: 
0: 		return new BasicUUID(majorId, timemillis, sequence);
0: 	}
0: 
0: 	/**
0: 		Recreate a UUID previously generated UUID value.
0: 		@see UUIDFactory#recreateUUID
0: 	**/
0: 	public UUID recreateUUID(String uuidstring)
0: 	{
0: 		return new BasicUUID(uuidstring);
0: 	}
0: 
0: 	/**
0: 		@see UUIDFactory#recreateUUID
0: 	**/
0: 	public UUID recreateUUID(byte[] b)
0: 	{
0: 		return new BasicUUID(b);
0: 	}
0: 
0: 	private void bumpMajor() {
0: 
0: 		// 48 bits only
0: 		majorId = (majorId + 1L) & 0x0000ffffffffffffL;
0: 		if (majorId == 0L)
0: 			resetCounters();
0: 
0: 	}
0: 	private void resetCounters()
0: 	{
0: 		timemillis = System.currentTimeMillis();
0: 		currentValue = INITIAL_VALUE;
0: 	}
0: }
0: 
============================================================================