1:90731d5: /*
4:90731d5: 
1:90731d5:    Derby - Class org.apache.derby.iapi.reference.DRDAConstants
1:506f4c8: 
1:f5c9a3b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f5c9a3b:    contributor license agreements.  See the NOTICE file distributed with
1:f5c9a3b:    this work for additional information regarding copyright ownership.
1:f5c9a3b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f5c9a3b:    (the "License"); you may not use this file except in compliance with
1:f5c9a3b:    the License.  You may obtain a copy of the License at
1:90731d5: 
1:90731d5:       http://www.apache.org/licenses/LICENSE-2.0
1:90731d5: 
1:90731d5:    Unless required by applicable law or agreed to in writing, software
1:90731d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:90731d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90731d5:    See the License for the specific language governing permissions and
1:90731d5:    limitations under the License.
1:90731d5: 
1:90731d5:  */
1:90731d5: /**
1:90731d5:  * <p>
1:90731d5:  * Machinery shared across Derby DRDA clients and server.
1:90731d5:  * </p>
1:90731d5:  */
1:90731d5: 
1:90731d5: package org.apache.derby.iapi.reference;
1:90731d5: 
1:90731d5: public	interface	DRDAConstants
1:90731d5: {
1:90731d5: 	/////////////////////////////////////////////////////////////
1:90731d5: 	//
1:90731d5: 	//	CONSTANTS
1:90731d5: 	//
1:90731d5: 	/////////////////////////////////////////////////////////////
1:90731d5: 
1:90731d5: 	//
1:90731d5: 	// Derby Product Identifiers as defined by the Open Group.
1:90731d5: 	// See http://www.opengroup.org/dbiop/prodid.htm for the
1:90731d5: 	// list of legal DRDA Product Identifiers.
1:90731d5: 	//
1:90731d5: 	public	static	final	String	DERBY_DRDA_SERVER_ID = "CSS";
1:90731d5: 	public	static	final	String	DERBY_DRDA_CLIENT_ID = "DNC";
1:506f4c8: 
1:506f4c8:     // Maximum size of a DDM block
1:506f4c8:     public static final int DATA_STREAM_STRUCTURE_MAX_LENGTH = 32767;
1:90731d5: 	
1:90731d5: 	///////////////////////
1:90731d5: 	//
1:90731d5: 	// DRDA Type constants.
1:90731d5: 	//
1:90731d5: 	///////////////////////
1:90731d5: 
1:90731d5: 	public	static final int DRDA_TYPE_INTEGER = 0x02;
1:90731d5: 	public	static final int DRDA_TYPE_NINTEGER = 0x03;
1:90731d5: 	public	static final int DRDA_TYPE_SMALL = 0x04;
1:90731d5: 	public	static final int DRDA_TYPE_NSMALL = 0x05;
1:90731d5: 	public	static final int DRDA_TYPE_1BYTE_INT = 0x06;
1:90731d5: 	public	static final int DRDA_TYPE_N1BYTE_INT = 0x07;
1:90731d5: 	public	static final int DRDA_TYPE_FLOAT16 = 0x08;
1:90731d5: 	public	static final int DRDA_TYPE_NFLOAT16 = 0x09;
1:90731d5: 	public	static final int DRDA_TYPE_FLOAT8 = 0x0A;
1:90731d5: 	public	static final int DRDA_TYPE_NFLOAT8 = 0x0B;
1:90731d5: 	public	static final int DRDA_TYPE_FLOAT4 = 0x0C;
1:90731d5: 	public	static final int DRDA_TYPE_NFLOAT4 = 0x0D;
1:90731d5: 	public	static final int DRDA_TYPE_DECIMAL = 0x0E;
1:90731d5: 	public	static final int DRDA_TYPE_NDECIMAL = 0x0F;
1:90731d5: 	public	static final int DRDA_TYPE_ZDECIMAL = 0x10;
1:90731d5: 	public	static final int DRDA_TYPE_NZDECIMAL = 0x11;
1:90731d5: 	public	static final int DRDA_TYPE_NUMERIC_CHAR = 0x12;
1:90731d5: 	public	static final int DRDA_TYPE_NNUMERIC_CHAR = 0x13;
1:90731d5: 	public	static final int DRDA_TYPE_RSET_LOC = 0x14;
1:90731d5: 	public	static final int DRDA_TYPE_NRSET_LOC = 0x15;
1:90731d5: 	public	static final int DRDA_TYPE_INTEGER8 = 0x16;
1:90731d5: 	public	static final int DRDA_TYPE_NINTEGER8 = 0x17;
1:90731d5: 	public	static final int DRDA_TYPE_LOBLOC = 0x18;
1:90731d5: 	public	static final int DRDA_TYPE_NLOBLOC = 0x19;
1:90731d5: 	public	static final int DRDA_TYPE_CLOBLOC = 0x1A;
1:90731d5: 	public	static final int DRDA_TYPE_NCLOBLOC = 0x1B;
1:90731d5: 	public	static final int DRDA_TYPE_DBCSCLOBLOC = 0x1C;
1:90731d5: 	public	static final int DRDA_TYPE_NDBCSCLOBLOC = 0x1D;
1:90731d5: 	public	static final int DRDA_TYPE_ROWID = 0x1E;
1:90731d5: 	public	static final int DRDA_TYPE_NROWID = 0x1F;
1:90731d5: 	public	static final int DRDA_TYPE_DATE = 0x20;
1:90731d5: 	public	static final int DRDA_TYPE_NDATE = 0x21;
1:90731d5: 	public	static final int DRDA_TYPE_TIME = 0x22;
1:90731d5: 	public	static final int DRDA_TYPE_NTIME = 0x23;
1:90731d5: 	public	static final int DRDA_TYPE_TIMESTAMP = 0x24;
1:90731d5: 	public	static final int DRDA_TYPE_NTIMESTAMP = 0x25;
1:90731d5: 	public	static final int DRDA_TYPE_FIXBYTE = 0x26;
1:90731d5: 	public	static final int DRDA_TYPE_NFIXBYTE = 0x27;
1:90731d5: 	public	static final int DRDA_TYPE_VARBYTE = 0x28;
1:90731d5: 	public	static final int DRDA_TYPE_NVARBYTE = 0x29;
1:90731d5: 	public	static final int DRDA_TYPE_LONGVARBYTE = 0x2A;
1:90731d5: 	public	static final int DRDA_TYPE_NLONGVARBYTE = 0x2B;
1:90731d5: 	public	static final int DRDA_TYPE_NTERMBYTE = 0x2C;
1:90731d5: 	public	static final int DRDA_TYPE_NNTERMBYTE = 0x2D;
1:90731d5: 	public	static final int DRDA_TYPE_CSTR = 0x2E;
1:90731d5: 	public	static final int DRDA_TYPE_NCSTR = 0x2F;
1:90731d5: 	public	static final int DRDA_TYPE_CHAR = 0x30;
1:90731d5: 	public	static final int DRDA_TYPE_NCHAR = 0x31;
1:90731d5: 	public	static final int DRDA_TYPE_VARCHAR = 0x32;
1:90731d5: 	public	static final int DRDA_TYPE_NVARCHAR = 0x33;
1:90731d5: 	public	static final int DRDA_TYPE_LONG = 0x34;
1:90731d5: 	public	static final int DRDA_TYPE_NLONG = 0x35;
1:90731d5: 	public	static final int DRDA_TYPE_GRAPHIC = 0x36;
1:90731d5: 	public	static final int DRDA_TYPE_NGRAPHIC = 0x37;
1:90731d5: 	public	static final int DRDA_TYPE_VARGRAPH = 0x38;
1:90731d5: 	public	static final int DRDA_TYPE_NVARGRAPH = 0x39;
1:90731d5: 	public	static final int DRDA_TYPE_LONGRAPH = 0x3A;
1:90731d5: 	public	static final int DRDA_TYPE_NLONGRAPH = 0x3B;
1:90731d5: 	public	static final int DRDA_TYPE_MIX = 0x3C;
1:90731d5: 	public	static final int DRDA_TYPE_NMIX = 0x3D;
1:90731d5: 	public	static final int DRDA_TYPE_VARMIX = 0x3E;
1:90731d5: 	public	static final int DRDA_TYPE_NVARMIX = 0x3F;
1:90731d5: 	public	static final int DRDA_TYPE_LONGMIX = 0x40;
1:90731d5: 	public	static final int DRDA_TYPE_NLONGMIX = 0x41;
1:90731d5: 	public	static final int DRDA_TYPE_CSTRMIX = 0x42;
1:90731d5: 	public	static final int DRDA_TYPE_NCSTRMIX = 0x43;
1:90731d5: 	public	static final int DRDA_TYPE_PSCLBYTE = 0x44;
1:90731d5: 	public	static final int DRDA_TYPE_NPSCLBYTE = 0x45;
1:90731d5: 	public	static final int DRDA_TYPE_LSTR = 0x46;
1:90731d5: 	public	static final int DRDA_TYPE_NLSTR = 0x47;
1:90731d5: 	public	static final int DRDA_TYPE_LSTRMIX = 0x48;
1:90731d5: 	public	static final int DRDA_TYPE_NLSTRMIX = 0x49;
1:90731d5: 	public	static final int DRDA_TYPE_SDATALINK = 0x4C;
1:90731d5: 	public	static final int DRDA_TYPE_NSDATALINK = 0x4D;
1:90731d5: 	public	static final int DRDA_TYPE_MDATALINK = 0x4E;
1:90731d5: 	public	static final int DRDA_TYPE_NMDATALINK = 0x4F;
1:90731d5: 
1:90731d5: 	// --- Override LIDs 0x50 - 0xAF
1:506f4c8: 
1:506f4c8:     // this type is shown in the DRDA spec, volume 1, in the
1:506f4c8:     // section on SQLUDTGRP
1:506f4c8: 	public	static final int DRDA_TYPE_UDT = 0x50;
1:506f4c8: 	public	static final int DRDA_TYPE_NUDT = 0x51;
1:506f4c8:     
1:90731d5: 	public	static final int DRDA_TYPE_LOBBYTES = 0xC8;
1:90731d5: 	public	static final int DRDA_TYPE_NLOBBYTES = 0xC9;
1:90731d5: 	public	static final int DRDA_TYPE_LOBCSBCS = 0xCA;
1:90731d5: 	public	static final int DRDA_TYPE_NLOBCSBCS = 0xCB;
1:90731d5: 	public	static final int DRDA_TYPE_LOBCDBCS = 0xCC;
1:90731d5: 	public	static final int DRDA_TYPE_NLOBCDBCS = 0xCD;
1:90731d5: 	public	static final int DRDA_TYPE_LOBCMIXED = 0xCE;
1:90731d5: 	public	static final int DRDA_TYPE_NLOBCMIXED = 0xCF;
1:90731d5: 
1:eff3919: 	public	static final int DRDA_TYPE_BOOLEAN = 0xBE;
1:eff3919: 	public	static final int DRDA_TYPE_NBOOLEAN = 0xBF;
1:90731d5: 
1:506f4c8:     // This is the maximum size which a udt can serialize to in order to
1:506f4c8:     // be transported across DRDA
1:506f4c8:     public static final int MAX_DRDA_UDT_SIZE = DATA_STREAM_STRUCTURE_MAX_LENGTH;
1:506f4c8:     
1:90731d5: 	///////////////////////
1:90731d5: 	//
1:90731d5: 	// DB2 datatypes
1:90731d5: 	//
1:90731d5: 	///////////////////////
1:90731d5: 
1:90731d5: 	public	static final  int DB2_SQLTYPE_DATE = 384;        // DATE
1:90731d5: 	public	static final  int DB2_SQLTYPE_NDATE = 385;
1:90731d5: 	public	static final  int DB2_SQLTYPE_TIME = 388;        // TIME
1:90731d5: 	public	static final  int DB2_SQLTYPE_NTIME = 389;
1:90731d5: 	public	static final  int DB2_SQLTYPE_TIMESTAMP = 392;   // TIMESTAMP
1:90731d5: 	public	static final  int DB2_SQLTYPE_NTIMESTAMP = 393;
1:90731d5: 	public	static final  int DB2_SQLTYPE_DATALINK = 396;    // DATALINK
1:90731d5: 	public	static final  int DB2_SQLTYPE_NDATALINK = 397;
1:90731d5: 
1:90731d5: 	public	static final  int DB2_SQLTYPE_BLOB = 404;        // BLOB
1:90731d5: 	public	static final  int DB2_SQLTYPE_NBLOB = 405;
1:90731d5: 	public	static final  int DB2_SQLTYPE_CLOB = 408;        // CLOB
1:90731d5: 	public	static final  int DB2_SQLTYPE_NCLOB = 409;
1:90731d5: 	public	static final  int DB2_SQLTYPE_DBCLOB = 412;      // DBCLOB
1:90731d5: 	public	static final  int DB2_SQLTYPE_NDBCLOB = 413;
1:90731d5: 
1:90731d5: 	public	static final  int DB2_SQLTYPE_VARCHAR = 448;     // VARCHAR(i) - varying length string
1:90731d5: 	public	static final  int DB2_SQLTYPE_NVARCHAR = 449;
1:90731d5: 	public	static final  int DB2_SQLTYPE_CHAR = 452;        // CHAR(i) - fixed length
1:90731d5: 	public	static final  int DB2_SQLTYPE_NCHAR = 453;
1:90731d5: 	public	static final  int DB2_SQLTYPE_LONG = 456;        // LONG VARCHAR - varying length string
1:90731d5: 	public	static final  int DB2_SQLTYPE_NLONG = 457;
1:90731d5: 	public	static final  int DB2_SQLTYPE_CSTR = 460;        // SBCS - null terminated
1:90731d5: 	public	static final  int DB2_SQLTYPE_NCSTR = 461;
1:90731d5: 	public	static final  int DB2_SQLTYPE_VARGRAPH = 464;    // VARGRAPHIC(i) - varying length
1:90731d5:                                                   // graphic string (2 byte length)
1:90731d5: 	public	static final  int DB2_SQLTYPE_NVARGRAPH = 465;
1:90731d5: 	public	static final  int DB2_SQLTYPE_GRAPHIC = 468;     // GRAPHIC(i) - fixed length graphic string                                                             */
1:90731d5: 	public	static final  int DB2_SQLTYPE_NGRAPHIC = 469;
1:90731d5: 	public	static final  int DB2_SQLTYPE_LONGRAPH = 472;    // LONG VARGRAPHIC(i) - varying length graphic string                                              */
1:90731d5: 	public	static final  int DB2_SQLTYPE_NLONGRAPH = 473;
1:90731d5: 	public	static final  int DB2_SQLTYPE_LSTR = 476;        // varying length string for Pascal (1-byte length)                                                     */
1:90731d5: 	public	static final  int DB2_SQLTYPE_NLSTR = 477;
1:90731d5: 
1:90731d5: 	public	static final  int DB2_SQLTYPE_FLOAT = 480;       // FLOAT - 4 or 8 byte floating point
1:90731d5: 	public	static final  int DB2_SQLTYPE_NFLOAT = 481;
1:90731d5: 	public	static final  int DB2_SQLTYPE_DECIMAL = 484;     // DECIMAL (m,n)
1:90731d5: 	public	static final  int DB2_SQLTYPE_NDECIMAL = 485;
1:90731d5: 	public	static final  int DB2_SQLTYPE_ZONED = 488;       // Zoned Decimal -> DECIMAL(m,n)
1:90731d5: 	public	static final  int DB2_SQLTYPE_NZONED = 489;
1:90731d5: 
1:90731d5: 	public	static final  int DB2_SQLTYPE_BIGINT = 492;      // BIGINT - 8-byte signed integer
1:90731d5: 	public	static final  int DB2_SQLTYPE_NBIGINT = 493;
1:90731d5: 	public	static final  int DB2_SQLTYPE_INTEGER = 496;     // INTEGER
1:90731d5: 	public	static final  int DB2_SQLTYPE_NINTEGER = 497;
1:90731d5: 	public	static final  int DB2_SQLTYPE_SMALL = 500;       // SMALLINT - 2-byte signed integer                                                                    */
1:90731d5: 	public	static final  int DB2_SQLTYPE_NSMALL = 501;
1:90731d5: 
1:90731d5: 	public	static final  int DB2_SQLTYPE_NUMERIC = 504;     // NUMERIC -> DECIMAL (m,n)
1:90731d5: 	public	static final  int DB2_SQLTYPE_NNUMERIC = 505;
1:90731d5: 
1:90731d5: 	public	static final  int DB2_SQLTYPE_ROWID = 904;           // ROWID
1:90731d5: 	public	static final  int DB2_SQLTYPE_NROWID = 905;
1:90731d5: 	public	static final  int DB2_SQLTYPE_BLOB_LOCATOR = 960;    // BLOB locator
1:90731d5: 	public	static final  int DB2_SQLTYPE_NBLOB_LOCATOR = 961;
1:90731d5: 	public	static final  int DB2_SQLTYPE_CLOB_LOCATOR = 964;    // CLOB locator
1:90731d5: 	public	static final  int DB2_SQLTYPE_NCLOB_LOCATOR = 965;
1:90731d5: 	public	static final  int DB2_SQLTYPE_DBCLOB_LOCATOR = 968;  // DBCLOB locator
1:90731d5: 	public	static final  int DB2_SQLTYPE_NDBCLOB_LOCATOR = 969;
1:90731d5: 
1:eff3919:     public	static final  int DB2_SQLTYPE_BOOLEAN = 2436;     // BOOLEAN
1:eff3919:     public	static final  int DB2_SQLTYPE_NBOOLEAN = 2437;
1:90731d5: 
1:506f4c8:     // there is no DB2 type for UDTs. we invent one
1:506f4c8:     public   static final int DB2_SQLTYPE_FAKE_UDT = 2000;
1:506f4c8:     public   static final int DB2_SQLTYPE_FAKE_NUDT = 2001;
1:506f4c8: 
1:bead0ab:     // DB2 and DRDA support timestamps with microseconds precision, but not
1:bead0ab:     // nanoseconds precision: yyyy-mm-dd-hh.mm.ss.ffffff
1:bead0ab:     // In contrast, JDBC supports full nanoseconds precision: yyyy-mm-dd-hh.mm.ss.fffffffff
1:bead0ab:     //
1:60f5182:     public   static final int DRDA_OLD_TIMESTAMP_LENGTH = 26;
1:1e90bf4:     public   static final int DRDA_TIMESTAMP_LENGTH = 29;
1:bead0ab:     public   static final int JDBC_TIMESTAMP_LENGTH = 29;
1:bead0ab: 
1:cf5cebf:     // Values for the EXTDTA stream status byte.
1:cf5cebf:     // The use of this status byte is a product specific extension. The same
1:cf5cebf:     // goes for the values below, they are not described by DRDA (nor DDM).
1:cf5cebf: 
1:cf5cebf:     /** Constant indicating a valid stream transfer. */
1:cf5cebf:     public static final byte STREAM_OK = 0x7F;
1:cf5cebf:     /**
1:cf5cebf:      * Constant indicating that the client encountered an error when reading
1:cf5cebf:      * the user stream.
1:cf5cebf:      */
1:cf5cebf:     public static final byte STREAM_READ_ERROR = 0x01;
1:cf5cebf:     /** Constant indicating that the user stream was too short. */
1:cf5cebf:     public static final byte STREAM_TOO_SHORT = 0x02;
1:cf5cebf:     /** Constant indicating that the user stream was too long. */
1:cf5cebf:     public static final byte STREAM_TOO_LONG = 0x04;
1:90731d5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:60f5182
/////////////////////////////////////////////////////////////////////////
1:     public   static final int DRDA_OLD_TIMESTAMP_LENGTH = 26;
commit:1e90bf4
/////////////////////////////////////////////////////////////////////////
1:     public   static final int DRDA_TIMESTAMP_LENGTH = 29;
commit:eff3919
/////////////////////////////////////////////////////////////////////////
1: 	public	static final int DRDA_TYPE_BOOLEAN = 0xBE;
1: 	public	static final int DRDA_TYPE_NBOOLEAN = 0xBF;
/////////////////////////////////////////////////////////////////////////
1:     public	static final  int DB2_SQLTYPE_BOOLEAN = 2436;     // BOOLEAN
1:     public	static final  int DB2_SQLTYPE_NBOOLEAN = 2437;
commit:bead0ab
/////////////////////////////////////////////////////////////////////////
1:     // DB2 and DRDA support timestamps with microseconds precision, but not
1:     // nanoseconds precision: yyyy-mm-dd-hh.mm.ss.ffffff
1:     // In contrast, JDBC supports full nanoseconds precision: yyyy-mm-dd-hh.mm.ss.fffffffff
1:     //
0:     public   static final int DRDA_TIMESTAMP_LENGTH = 26;
1:     public   static final int JDBC_TIMESTAMP_LENGTH = 29;
1: 
commit:506f4c8
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Maximum size of a DDM block
1:     public static final int DATA_STREAM_STRUCTURE_MAX_LENGTH = 32767;
/////////////////////////////////////////////////////////////////////////
1: 
1:     // this type is shown in the DRDA spec, volume 1, in the
1:     // section on SQLUDTGRP
1: 	public	static final int DRDA_TYPE_UDT = 0x50;
1: 	public	static final int DRDA_TYPE_NUDT = 0x51;
1:     
/////////////////////////////////////////////////////////////////////////
1: 
1:     // This is the maximum size which a udt can serialize to in order to
1:     // be transported across DRDA
1:     public static final int MAX_DRDA_UDT_SIZE = DATA_STREAM_STRUCTURE_MAX_LENGTH;
1:     
/////////////////////////////////////////////////////////////////////////
1:     // there is no DB2 type for UDTs. we invent one
1:     public   static final int DB2_SQLTYPE_FAKE_UDT = 2000;
1:     public   static final int DB2_SQLTYPE_FAKE_NUDT = 2001;
1: 
commit:93cfc7f
/////////////////////////////////////////////////////////////////////////
0: 	// public	static final int DRDA_TYPE_BOOLEAN = 0xBE;
0: 	// public	static final int DRDA_TYPE_NBOOLEAN = 0xBF;
/////////////////////////////////////////////////////////////////////////
0:     // public	static final  int DB2_SQLTYPE_BOOLEAN = 1000;     // BOOLEAN
0:     // public	static final  int DB2_SQLTYPE_NBOOLEAN = 1001;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cf5cebf
/////////////////////////////////////////////////////////////////////////
1:     // Values for the EXTDTA stream status byte.
1:     // The use of this status byte is a product specific extension. The same
1:     // goes for the values below, they are not described by DRDA (nor DDM).
1: 
1:     /** Constant indicating a valid stream transfer. */
1:     public static final byte STREAM_OK = 0x7F;
1:     /**
1:      * Constant indicating that the client encountered an error when reading
1:      * the user stream.
1:      */
1:     public static final byte STREAM_READ_ERROR = 0x01;
1:     /** Constant indicating that the user stream was too short. */
1:     public static final byte STREAM_TOO_SHORT = 0x02;
1:     /** Constant indicating that the user stream was too long. */
1:     public static final byte STREAM_TOO_LONG = 0x04;
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f5c9a3b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:90731d5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.reference.DRDAConstants
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: /**
1:  * <p>
1:  * Machinery shared across Derby DRDA clients and server.
1:  * </p>
0:  * @author Rick
1:  */
1: 
1: package org.apache.derby.iapi.reference;
1: 
1: public	interface	DRDAConstants
1: {
1: 	/////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTANTS
1: 	//
1: 	/////////////////////////////////////////////////////////////
1: 
1: 	//
1: 	// Derby Product Identifiers as defined by the Open Group.
1: 	// See http://www.opengroup.org/dbiop/prodid.htm for the
1: 	// list of legal DRDA Product Identifiers.
1: 	//
1: 	public	static	final	String	DERBY_DRDA_SERVER_ID = "CSS";
1: 	public	static	final	String	DERBY_DRDA_CLIENT_ID = "DNC";
1: 	
1: 	///////////////////////
1: 	//
1: 	// DRDA Type constants.
1: 	//
1: 	///////////////////////
1: 
1: 	public	static final int DRDA_TYPE_INTEGER = 0x02;
1: 	public	static final int DRDA_TYPE_NINTEGER = 0x03;
1: 	public	static final int DRDA_TYPE_SMALL = 0x04;
1: 	public	static final int DRDA_TYPE_NSMALL = 0x05;
1: 	public	static final int DRDA_TYPE_1BYTE_INT = 0x06;
1: 	public	static final int DRDA_TYPE_N1BYTE_INT = 0x07;
1: 	public	static final int DRDA_TYPE_FLOAT16 = 0x08;
1: 	public	static final int DRDA_TYPE_NFLOAT16 = 0x09;
1: 	public	static final int DRDA_TYPE_FLOAT8 = 0x0A;
1: 	public	static final int DRDA_TYPE_NFLOAT8 = 0x0B;
1: 	public	static final int DRDA_TYPE_FLOAT4 = 0x0C;
1: 	public	static final int DRDA_TYPE_NFLOAT4 = 0x0D;
1: 	public	static final int DRDA_TYPE_DECIMAL = 0x0E;
1: 	public	static final int DRDA_TYPE_NDECIMAL = 0x0F;
1: 	public	static final int DRDA_TYPE_ZDECIMAL = 0x10;
1: 	public	static final int DRDA_TYPE_NZDECIMAL = 0x11;
1: 	public	static final int DRDA_TYPE_NUMERIC_CHAR = 0x12;
1: 	public	static final int DRDA_TYPE_NNUMERIC_CHAR = 0x13;
1: 	public	static final int DRDA_TYPE_RSET_LOC = 0x14;
1: 	public	static final int DRDA_TYPE_NRSET_LOC = 0x15;
1: 	public	static final int DRDA_TYPE_INTEGER8 = 0x16;
1: 	public	static final int DRDA_TYPE_NINTEGER8 = 0x17;
1: 	public	static final int DRDA_TYPE_LOBLOC = 0x18;
1: 	public	static final int DRDA_TYPE_NLOBLOC = 0x19;
1: 	public	static final int DRDA_TYPE_CLOBLOC = 0x1A;
1: 	public	static final int DRDA_TYPE_NCLOBLOC = 0x1B;
1: 	public	static final int DRDA_TYPE_DBCSCLOBLOC = 0x1C;
1: 	public	static final int DRDA_TYPE_NDBCSCLOBLOC = 0x1D;
1: 	public	static final int DRDA_TYPE_ROWID = 0x1E;
1: 	public	static final int DRDA_TYPE_NROWID = 0x1F;
1: 	public	static final int DRDA_TYPE_DATE = 0x20;
1: 	public	static final int DRDA_TYPE_NDATE = 0x21;
1: 	public	static final int DRDA_TYPE_TIME = 0x22;
1: 	public	static final int DRDA_TYPE_NTIME = 0x23;
1: 	public	static final int DRDA_TYPE_TIMESTAMP = 0x24;
1: 	public	static final int DRDA_TYPE_NTIMESTAMP = 0x25;
1: 	public	static final int DRDA_TYPE_FIXBYTE = 0x26;
1: 	public	static final int DRDA_TYPE_NFIXBYTE = 0x27;
1: 	public	static final int DRDA_TYPE_VARBYTE = 0x28;
1: 	public	static final int DRDA_TYPE_NVARBYTE = 0x29;
1: 	public	static final int DRDA_TYPE_LONGVARBYTE = 0x2A;
1: 	public	static final int DRDA_TYPE_NLONGVARBYTE = 0x2B;
1: 	public	static final int DRDA_TYPE_NTERMBYTE = 0x2C;
1: 	public	static final int DRDA_TYPE_NNTERMBYTE = 0x2D;
1: 	public	static final int DRDA_TYPE_CSTR = 0x2E;
1: 	public	static final int DRDA_TYPE_NCSTR = 0x2F;
1: 	public	static final int DRDA_TYPE_CHAR = 0x30;
1: 	public	static final int DRDA_TYPE_NCHAR = 0x31;
1: 	public	static final int DRDA_TYPE_VARCHAR = 0x32;
1: 	public	static final int DRDA_TYPE_NVARCHAR = 0x33;
1: 	public	static final int DRDA_TYPE_LONG = 0x34;
1: 	public	static final int DRDA_TYPE_NLONG = 0x35;
1: 	public	static final int DRDA_TYPE_GRAPHIC = 0x36;
1: 	public	static final int DRDA_TYPE_NGRAPHIC = 0x37;
1: 	public	static final int DRDA_TYPE_VARGRAPH = 0x38;
1: 	public	static final int DRDA_TYPE_NVARGRAPH = 0x39;
1: 	public	static final int DRDA_TYPE_LONGRAPH = 0x3A;
1: 	public	static final int DRDA_TYPE_NLONGRAPH = 0x3B;
1: 	public	static final int DRDA_TYPE_MIX = 0x3C;
1: 	public	static final int DRDA_TYPE_NMIX = 0x3D;
1: 	public	static final int DRDA_TYPE_VARMIX = 0x3E;
1: 	public	static final int DRDA_TYPE_NVARMIX = 0x3F;
1: 	public	static final int DRDA_TYPE_LONGMIX = 0x40;
1: 	public	static final int DRDA_TYPE_NLONGMIX = 0x41;
1: 	public	static final int DRDA_TYPE_CSTRMIX = 0x42;
1: 	public	static final int DRDA_TYPE_NCSTRMIX = 0x43;
1: 	public	static final int DRDA_TYPE_PSCLBYTE = 0x44;
1: 	public	static final int DRDA_TYPE_NPSCLBYTE = 0x45;
1: 	public	static final int DRDA_TYPE_LSTR = 0x46;
1: 	public	static final int DRDA_TYPE_NLSTR = 0x47;
1: 	public	static final int DRDA_TYPE_LSTRMIX = 0x48;
1: 	public	static final int DRDA_TYPE_NLSTRMIX = 0x49;
1: 	public	static final int DRDA_TYPE_SDATALINK = 0x4C;
1: 	public	static final int DRDA_TYPE_NSDATALINK = 0x4D;
1: 	public	static final int DRDA_TYPE_MDATALINK = 0x4E;
1: 	public	static final int DRDA_TYPE_NMDATALINK = 0x4F;
1: 
1: 	// --- Override LIDs 0x50 - 0xAF
1: 	public	static final int DRDA_TYPE_LOBBYTES = 0xC8;
1: 	public	static final int DRDA_TYPE_NLOBBYTES = 0xC9;
1: 	public	static final int DRDA_TYPE_LOBCSBCS = 0xCA;
1: 	public	static final int DRDA_TYPE_NLOBCSBCS = 0xCB;
1: 	public	static final int DRDA_TYPE_LOBCDBCS = 0xCC;
1: 	public	static final int DRDA_TYPE_NLOBCDBCS = 0xCD;
1: 	public	static final int DRDA_TYPE_LOBCMIXED = 0xCE;
1: 	public	static final int DRDA_TYPE_NLOBCMIXED = 0xCF;
1: 
0: 	// Experimental types. These codes will change when the Open Group
0: 	// publishes an addendum to the DRDA spec covering these
0: 	// datatypes.
1: 	
0: 	public	static final int DRDA_TYPE_BOOLEAN = 0xD0;
0: 	public	static final int DRDA_TYPE_NBOOLEAN = 0xD1;
1: 	
1: 	///////////////////////
1: 	//
1: 	// DB2 datatypes
1: 	//
1: 	///////////////////////
1: 
1: 	public	static final  int DB2_SQLTYPE_DATE = 384;        // DATE
1: 	public	static final  int DB2_SQLTYPE_NDATE = 385;
1: 	public	static final  int DB2_SQLTYPE_TIME = 388;        // TIME
1: 	public	static final  int DB2_SQLTYPE_NTIME = 389;
1: 	public	static final  int DB2_SQLTYPE_TIMESTAMP = 392;   // TIMESTAMP
1: 	public	static final  int DB2_SQLTYPE_NTIMESTAMP = 393;
1: 	public	static final  int DB2_SQLTYPE_DATALINK = 396;    // DATALINK
1: 	public	static final  int DB2_SQLTYPE_NDATALINK = 397;
1: 
1: 	public	static final  int DB2_SQLTYPE_BLOB = 404;        // BLOB
1: 	public	static final  int DB2_SQLTYPE_NBLOB = 405;
1: 	public	static final  int DB2_SQLTYPE_CLOB = 408;        // CLOB
1: 	public	static final  int DB2_SQLTYPE_NCLOB = 409;
1: 	public	static final  int DB2_SQLTYPE_DBCLOB = 412;      // DBCLOB
1: 	public	static final  int DB2_SQLTYPE_NDBCLOB = 413;
1: 
1: 	public	static final  int DB2_SQLTYPE_VARCHAR = 448;     // VARCHAR(i) - varying length string
1: 	public	static final  int DB2_SQLTYPE_NVARCHAR = 449;
1: 	public	static final  int DB2_SQLTYPE_CHAR = 452;        // CHAR(i) - fixed length
1: 	public	static final  int DB2_SQLTYPE_NCHAR = 453;
1: 	public	static final  int DB2_SQLTYPE_LONG = 456;        // LONG VARCHAR - varying length string
1: 	public	static final  int DB2_SQLTYPE_NLONG = 457;
1: 	public	static final  int DB2_SQLTYPE_CSTR = 460;        // SBCS - null terminated
1: 	public	static final  int DB2_SQLTYPE_NCSTR = 461;
1: 	public	static final  int DB2_SQLTYPE_VARGRAPH = 464;    // VARGRAPHIC(i) - varying length
1:                                                   // graphic string (2 byte length)
1: 	public	static final  int DB2_SQLTYPE_NVARGRAPH = 465;
1: 	public	static final  int DB2_SQLTYPE_GRAPHIC = 468;     // GRAPHIC(i) - fixed length graphic string                                                             */
1: 	public	static final  int DB2_SQLTYPE_NGRAPHIC = 469;
1: 	public	static final  int DB2_SQLTYPE_LONGRAPH = 472;    // LONG VARGRAPHIC(i) - varying length graphic string                                              */
1: 	public	static final  int DB2_SQLTYPE_NLONGRAPH = 473;
1: 	public	static final  int DB2_SQLTYPE_LSTR = 476;        // varying length string for Pascal (1-byte length)                                                     */
1: 	public	static final  int DB2_SQLTYPE_NLSTR = 477;
1: 
1: 	public	static final  int DB2_SQLTYPE_FLOAT = 480;       // FLOAT - 4 or 8 byte floating point
1: 	public	static final  int DB2_SQLTYPE_NFLOAT = 481;
1: 	public	static final  int DB2_SQLTYPE_DECIMAL = 484;     // DECIMAL (m,n)
1: 	public	static final  int DB2_SQLTYPE_NDECIMAL = 485;
1: 	public	static final  int DB2_SQLTYPE_ZONED = 488;       // Zoned Decimal -> DECIMAL(m,n)
1: 	public	static final  int DB2_SQLTYPE_NZONED = 489;
1: 
1: 	public	static final  int DB2_SQLTYPE_BIGINT = 492;      // BIGINT - 8-byte signed integer
1: 	public	static final  int DB2_SQLTYPE_NBIGINT = 493;
1: 	public	static final  int DB2_SQLTYPE_INTEGER = 496;     // INTEGER
1: 	public	static final  int DB2_SQLTYPE_NINTEGER = 497;
1: 	public	static final  int DB2_SQLTYPE_SMALL = 500;       // SMALLINT - 2-byte signed integer                                                                    */
1: 	public	static final  int DB2_SQLTYPE_NSMALL = 501;
1: 
1: 	public	static final  int DB2_SQLTYPE_NUMERIC = 504;     // NUMERIC -> DECIMAL (m,n)
1: 	public	static final  int DB2_SQLTYPE_NNUMERIC = 505;
1: 
1: 	public	static final  int DB2_SQLTYPE_ROWID = 904;           // ROWID
1: 	public	static final  int DB2_SQLTYPE_NROWID = 905;
1: 	public	static final  int DB2_SQLTYPE_BLOB_LOCATOR = 960;    // BLOB locator
1: 	public	static final  int DB2_SQLTYPE_NBLOB_LOCATOR = 961;
1: 	public	static final  int DB2_SQLTYPE_CLOB_LOCATOR = 964;    // CLOB locator
1: 	public	static final  int DB2_SQLTYPE_NCLOB_LOCATOR = 965;
1: 	public	static final  int DB2_SQLTYPE_DBCLOB_LOCATOR = 968;  // DBCLOB locator
1: 	public	static final  int DB2_SQLTYPE_NDBCLOB_LOCATOR = 969;
1: 
0: 	// extensions to the db2 datatypes
0:     public	static final  int DB2_SQLTYPE_BOOLEAN = 1000;     // BOOLEAN
0:     public	static final  int DB2_SQLTYPE_NBOOLEAN = 1001;
1: 
1: }
============================================================================