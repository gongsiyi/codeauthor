1:a8908bd: /*
1:a8908bd:  
1:a8908bd:    Derby - Class org.apache.derby.client.am.UpdateSensitiveClobLocatorInputStream
1:a8908bd:  
1:a8908bd:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a8908bd:    contributor license agreements.  See the NOTICE file distributed with
1:a8908bd:    this work for additional information regarding copyright ownership.
1:a8908bd:    The ASF licenses this file to You under the Apache License, Version 2.0
1:a8908bd:    (the "License"); you may not use this file except in compliance with
1:a8908bd:    the License.  You may obtain a copy of the License at
1:a8908bd:  
1:a8908bd:       http://www.apache.org/licenses/LICENSE-2.0
1:a8908bd:  
1:a8908bd:    Unless required by applicable law or agreed to in writing, software
1:a8908bd:    distributed under the License is distributed on an "AS IS" BASIS,
1:a8908bd:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8908bd:    See the License for the specific language governing permissions and
1:a8908bd:    limitations under the License.
1:a8908bd:  
1:a8908bd:  */
1:a8908bd: 
1:a8908bd: package org.apache.derby.client.am;
1:a8908bd: 
1:a8908bd: import java.io.BufferedInputStream;
1:a8908bd: import java.io.InputStream;
1:a8908bd: 
1:a8908bd: /**
1:a8908bd:  * This class extends from the UpdateSensitiveLOBLocatorInputStream
1:a8908bd:  * and creates and returns an implementation of the Clob specific
1:a8908bd:  * locator InputStream. It also over-rides the reCreateStream method
1:a8908bd:  * which re-creates the underlying Clob locator stream whenever a
1:a8908bd:  * update happens on the Clob object associated with this stream.
1:a8908bd:  */
1:ee33904: class UpdateSensitiveClobLocatorInputStream
1:a8908bd:         extends UpdateSensitiveLOBLocatorInputStream {
1:a8908bd:     //Stores the Clob instance associated with
1:a8908bd:     //this InputStream.
1:69e3d06:     private ClientClob clob = null;
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Creates an instance of the ClobLocatorInputStream
1:a8908bd:      * wrapped in a BufferedInputStream and and calls the 
1:a8908bd:      * super class constructor with appropriate initializers.
1:a8908bd:      *
1:90543a4:      * @param con connection to be used to read the
1:b13b17c:      *        {@code Clob} value from the server
1:b13b17c:      * @param clob {@code Clob} object that contains locator for
1:b13b17c:      *        the {@code Clob} value on the server.
1:a8908bd:      *
1:a8908bd:      * @throws SqlException If any exception occurs during stream
1:a8908bd:      *                      creation.
1:a8908bd:      */
1:69e3d06:     UpdateSensitiveClobLocatorInputStream(
1:69e3d06:             ClientConnection con,
1:69e3d06:             ClientClob clob) throws SqlException {
1:69e3d06: 
1:a8908bd:         super(con, clob, new BufferedInputStream
1:a8908bd:                 (new ClobLocatorInputStream(con, clob)));
1:a8908bd:         this.clob = clob;
1:a8908bd:     }
1:a8908bd:     
1:a8908bd:     /**
1:a8908bd:      * Re-creates the underlying Locator stream
1:a8908bd:      * with the current position and the length
1:a8908bd:      * values if specified.
1:a8908bd:      */
1:a8908bd:     protected InputStream reCreateStream() throws SqlException {
1:a8908bd:         return new ClobLocatorInputStream(con, clob, currentPos);
1:a8908bd:     }
1:a8908bd: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1:     private ClientClob clob = null;
/////////////////////////////////////////////////////////////////////////
1:     UpdateSensitiveClobLocatorInputStream(
1:             ClientConnection con,
1:             ClientClob clob) throws SqlException {
1: 
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
1:      *        {@code Clob} value from the server
1:      * @param clob {@code Clob} object that contains locator for
1:      *        the {@code Clob} value on the server.
commit:ee33904
/////////////////////////////////////////////////////////////////////////
1: class UpdateSensitiveClobLocatorInputStream
/////////////////////////////////////////////////////////////////////////
0:     UpdateSensitiveClobLocatorInputStream(Connection con, Clob clob)
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:90543a4
/////////////////////////////////////////////////////////////////////////
1:      * @param con connection to be used to read the
commit:a8908bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.UpdateSensitiveClobLocatorInputStream
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
1: import java.io.BufferedInputStream;
1: import java.io.InputStream;
1: 
1: /**
1:  * This class extends from the UpdateSensitiveLOBLocatorInputStream
1:  * and creates and returns an implementation of the Clob specific
1:  * locator InputStream. It also over-rides the reCreateStream method
1:  * which re-creates the underlying Clob locator stream whenever a
1:  * update happens on the Clob object associated with this stream.
1:  */
0: public class UpdateSensitiveClobLocatorInputStream 
1:         extends UpdateSensitiveLOBLocatorInputStream {
1:     //Stores the Clob instance associated with
1:     //this InputStream.
0:     private Clob clob = null;
1:     
1:     /**
1:      * Creates an instance of the ClobLocatorInputStream
1:      * wrapped in a BufferedInputStream and and calls the 
1:      * super class constructor with appropriate initializers.
1:      *
0:      * @param connection connection to be used to read the
0:      *        <code>Clob</code> value from the server
0:      * @param clob <code>Clob</code> object that contains locator for
0:      *        the <code>Clob</code> value on the server.
1:      *
1:      * @throws SqlException If any exception occurs during stream
1:      *                      creation.
1:      */
0:     public UpdateSensitiveClobLocatorInputStream(Connection con, Clob clob)
0:     throws SqlException {
1:         super(con, clob, new BufferedInputStream
1:                 (new ClobLocatorInputStream(con, clob)));
1:         this.clob = clob;
1:     }
1:     
1:     /**
1:      * Re-creates the underlying Locator stream
1:      * with the current position and the length
1:      * values if specified.
1:      */
1:     protected InputStream reCreateStream() throws SqlException {
1:         return new ClobLocatorInputStream(con, clob, currentPos);
1:     }
1: }
============================================================================