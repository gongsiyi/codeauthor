1:fe77ca5: /*
1:985fc85: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.mtTester
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import java.util.Vector;
1:fe77ca5: import java.io.IOException;
1:fe77ca5: import java.io.FileNotFoundException;
1:fe77ca5: import java.io.BufferedInputStream;
1:fe77ca5: import java.util.Date;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * mtTester grabs test and runs them forever.
1:fe77ca5:  * The spawner of tester is responsible for 
1:fe77ca5:  * killing it.
1:fe77ca5:  */
1:fe77ca5: public class mtTester implements Runnable
1:fe77ca5: {
1:fe77ca5: 	private mtTestSuite	suite;
1:fe77ca5: 	private String		name;
1:fe77ca5: 	private LocalizedOutput	log;
1:fe77ca5: 	private LocalizedOutput	out;
1:fe77ca5: 	private boolean		stop = false;
1:cd5dc32: 	private boolean   testOK = false;
1:fe77ca5: 							
1:fe77ca5: 	public mtTester(String name, mtTestSuite suite, LocalizedOutput out, LocalizedOutput log)
1:fe77ca5: 	{ 
1:fe77ca5: 		this.name = name;
1:fe77ca5: 		this.suite = suite;
1:fe77ca5: 		this.log = log;
1:fe77ca5: 		this.out = out;
1:fe77ca5: 		log.println("...initialized "+ name + " at " + new Date());
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	** Run until killed or until there is a problem.
1:fe77ca5: 	** If we get other than 'connection closed' we'll
1:fe77ca5: 	** signal that we recieved a fatal error before
1:fe77ca5: 	** quittiing; otherwise, we are silent.
1:fe77ca5: 	*/
1:fe77ca5: 	public void run()
1:fe77ca5: 	{
1:fe77ca5: 		int numIterations = 0;
1:fe77ca5: 
1:fe77ca5: 		try 
1:fe77ca5: 		{
1:fe77ca5: 			mtTestCase testCase;
1:fe77ca5: 			BufferedInputStream	in;
1:fe77ca5: 
1:fe77ca5: 			// loop until we get an error or
1:fe77ca5: 			// are killed.	
1:fe77ca5: 			while (!stop)
1:fe77ca5: 			{
1:fe77ca5: 				numIterations++;
1:fe77ca5: 				testCase = suite.grabTestCase();
1:fe77ca5: 				try 
1:fe77ca5: 				{
1:fe77ca5: 					in = testCase.initialize(suite.getRoot());
1:fe77ca5: 				} catch (FileNotFoundException e) 
1:fe77ca5: 				{
1:fe77ca5: 					System.out.println(e);
1:fe77ca5: 					return;
1:fe77ca5: 				}
1:fe77ca5: 				catch (IOException e)
1:fe77ca5: 				{
1:fe77ca5: 					System.out.println(e);
1:fe77ca5: 					return;
1:fe77ca5: 				}
1:fe77ca5: 	
1:fe77ca5: 				log.println(name + ": "+ testCase.getName() + " " + new Date());
1:fe77ca5: 				testCase.runMe(log, out, in);
1:fe77ca5: 			}
1:fe77ca5: 		}	
1:fe77ca5: 		catch (ijFatalException e)
1:fe77ca5: 		{
1:fe77ca5: 
1:fe77ca5: 			/*
1:fe77ca5: 			** If we got connection closed (XJ010), we'll
1:fe77ca5: 			** assume that we were deliberately killed
1:fe77ca5: 			** via a Thread.stop() and it was caught by
1:fe77ca5: 			** jbms.  Otherwise, we'll print out an
1:fe77ca5: 			** error message.
1:fe77ca5: 			*/
1:fe77ca5: 			if (e.getSQLState() == null || !(e.getSQLState().equals("XJ010")))
1:fe77ca5: 			{
1:fe77ca5: 				log.println(name + ": TERMINATING due to unexpected error:\n"+e);
1:fe77ca5: 				throw new ThreadDeath();
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 		if (stop)
1:fe77ca5: 		{
1:fe77ca5: 			log.println(name + ": stopping on request after " + numIterations +
1:fe77ca5: 						" iterations");
1:cd5dc32: 			testOK = true;
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	public void stop()
1:fe77ca5: 	{
1:fe77ca5: 		stop = true;
1:fe77ca5: 	}
1:cd5dc32: 	public boolean noFailure()
1:cd5dc32: 	{
1:cd5dc32: 		return testOK;
1:cd5dc32: 	}
1:fe77ca5: }
============================================================================
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:cd5dc32
/////////////////////////////////////////////////////////////////////////
1: 	private boolean   testOK = false;
/////////////////////////////////////////////////////////////////////////
1: 			testOK = true;
/////////////////////////////////////////////////////////////////////////
1: 	public boolean noFailure()
1: 	{
1: 		return testOK;
1: 	}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.mtTester
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import java.util.Vector;
1: import java.io.IOException;
1: import java.io.FileNotFoundException;
1: import java.io.BufferedInputStream;
1: import java.util.Date;
1: 
1: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1: 
1: /**
1:  * mtTester grabs test and runs them forever.
1:  * The spawner of tester is responsible for 
1:  * killing it.
1:  */
1: public class mtTester implements Runnable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	private mtTestSuite	suite;
1: 	private String		name;
1: 	private LocalizedOutput	log;
1: 	private LocalizedOutput	out;
1: 	private boolean		stop = false;
1: 							
1: 	public mtTester(String name, mtTestSuite suite, LocalizedOutput out, LocalizedOutput log)
1: 	{ 
1: 		this.name = name;
1: 		this.suite = suite;
1: 		this.log = log;
1: 		this.out = out;
1: 		log.println("...initialized "+ name + " at " + new Date());
1: 	}
1: 
1: 	/**
1: 	** Run until killed or until there is a problem.
1: 	** If we get other than 'connection closed' we'll
1: 	** signal that we recieved a fatal error before
1: 	** quittiing; otherwise, we are silent.
1: 	*/
1: 	public void run()
1: 	{
1: 		int numIterations = 0;
1: 
1: 		try 
1: 		{
1: 			mtTestCase testCase;
1: 			BufferedInputStream	in;
1: 
1: 			// loop until we get an error or
1: 			// are killed.	
1: 			while (!stop)
1: 			{
1: 				numIterations++;
1: 				testCase = suite.grabTestCase();
1: 				try 
1: 				{
1: 					in = testCase.initialize(suite.getRoot());
1: 				} catch (FileNotFoundException e) 
1: 				{
1: 					System.out.println(e);
1: 					return;
1: 				}
1: 				catch (IOException e)
1: 				{
1: 					System.out.println(e);
1: 					return;
1: 				}
1: 	
1: 				log.println(name + ": "+ testCase.getName() + " " + new Date());
1: 				testCase.runMe(log, out, in);
1: 			}
1: 		}	
1: 		catch (ijFatalException e)
1: 		{
1: 
1: 			/*
1: 			** If we got connection closed (XJ010), we'll
1: 			** assume that we were deliberately killed
1: 			** via a Thread.stop() and it was caught by
1: 			** jbms.  Otherwise, we'll print out an
1: 			** error message.
1: 			*/
1: 			if (e.getSQLState() == null || !(e.getSQLState().equals("XJ010")))
1: 			{
1: 				log.println(name + ": TERMINATING due to unexpected error:\n"+e);
1: 				throw new ThreadDeath();
1: 			}
1: 		}
1: 		if (stop)
1: 		{
1: 			log.println(name + ": stopping on request after " + numIterations +
1: 						" iterations");
1: 		}
1: 	}
1: 
1: 	public void stop()
1: 	{
1: 		stop = true;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import java.util.Vector;
0: import java.io.IOException;
0: import java.io.FileNotFoundException;
0: import java.io.BufferedInputStream;
0: import java.util.Date;
0: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
0: 
0: /**
0:  * mtTester grabs test and runs them forever.
0:  * The spawner of tester is responsible for 
0:  * killing it.
0:  */
0: public class mtTester implements Runnable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	private mtTestSuite	suite;
0: 	private String		name;
0: 	private LocalizedOutput	log;
0: 	private LocalizedOutput	out;
0: 	private boolean		stop = false;
0: 							
0: 	public mtTester(String name, mtTestSuite suite, LocalizedOutput out, LocalizedOutput log)
0: 	{ 
0: 		this.name = name;
0: 		this.suite = suite;
0: 		this.log = log;
0: 		this.out = out;
0: 		log.println("...initialized "+ name + " at " + new Date());
0: 	}
0: 
0: 	/**
0: 	** Run until killed or until there is a problem.
0: 	** If we get other than 'connection closed' we'll
0: 	** signal that we recieved a fatal error before
0: 	** quittiing; otherwise, we are silent.
0: 	*/
0: 	public void run()
0: 	{
0: 		int numIterations = 0;
0: 
0: 		try 
0: 		{
0: 			mtTestCase testCase;
0: 			BufferedInputStream	in;
0: 
0: 			// loop until we get an error or
0: 			// are killed.	
0: 			while (!stop)
0: 			{
0: 				numIterations++;
0: 				testCase = suite.grabTestCase();
0: 				try 
0: 				{
0: 					in = testCase.initialize(suite.getRoot());
0: 				} catch (FileNotFoundException e) 
0: 				{
0: 					System.out.println(e);
0: 					return;
0: 				}
0: 				catch (IOException e)
0: 				{
0: 					System.out.println(e);
0: 					return;
0: 				}
0: 	
0: 				log.println(name + ": "+ testCase.getName() + " " + new Date());
0: 				testCase.runMe(log, out, in);
0: 			}
0: 		}	
0: 		catch (ijFatalException e)
0: 		{
0: 
0: 			/*
0: 			** If we got connection closed (XJ010), we'll
0: 			** assume that we were deliberately killed
0: 			** via a Thread.stop() and it was caught by
0: 			** jbms.  Otherwise, we'll print out an
0: 			** error message.
0: 			*/
0: 			if (e.getSQLState() == null || !(e.getSQLState().equals("XJ010")))
0: 			{
0: 				log.println(name + ": TERMINATING due to unexpected error:\n"+e);
0: 				throw new ThreadDeath();
0: 			}
0: 		}
0: 		if (stop)
0: 		{
0: 			log.println(name + ": stopping on request after " + numIterations +
0: 						" iterations");
0: 		}
0: 	}
0: 
0: 	public void stop()
0: 	{
0: 		stop = true;
0: 	}
0: }
============================================================================