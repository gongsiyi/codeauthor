1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.db.DatabaseContextImpl
1:345de35: 
1:2724c48:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2724c48:    contributor license agreements.  See the NOTICE file distributed with
1:2724c48:    this work for additional information regarding copyright ownership.
1:2724c48:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2724c48:    (the "License"); you may not use this file except in compliance with
1:2724c48:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.db;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextImpl;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
1:ee17158: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:56c1dc2: import org.apache.derby.iapi.services.monitor.ModuleFactory;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.db.Database;
1:eac0369: import org.apache.derby.iapi.db.DatabaseContext;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.error.ExceptionSeverity;
1:eac0369: 
1:a0dbbd7: import java.security.PrivilegedAction;
1:a0dbbd7: import java.security.AccessController;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A context that shutdowns down the database on a databsae exception.
1:eac0369: */
1:913815a: final class DatabaseContextImpl extends ContextImpl implements DatabaseContext
3:a0dbbd7: {
1:eac0369: 
1:eac0369: 	private final Database	db;
1:eac0369: 
1:eac0369: 	DatabaseContextImpl(ContextManager cm, Database db) {
1:eac0369: 		super(cm, DatabaseContextImpl.CONTEXT_ID);
1:eac0369: 		this.db = db;
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void cleanupOnError(Throwable t) {
1:eac0369: 		if (!(t instanceof StandardException)) return;
1:eac0369: 		StandardException se = (StandardException)t;
1:913815a: 
1:913815a:         // Ensure the context is popped if the session is
1:913815a:         // going away.
1:913815a:         if (se.getSeverity() < ExceptionSeverity.SESSION_SEVERITY)
1:913815a:             return;
1:913815a: 
1:913815a:         popMe();
1:913815a:         
1:ee17158:         if (se.getSeverity() >= ExceptionSeverity.DATABASE_SEVERITY) {
1:ee17158:             // DERBY-5108: Shut down the istat daemon thread before shutting
1:ee17158:             // down the various modules belonging to the database. An active
1:ee17158:             // istat daemon thread at the time of shutdown may result in
1:ee17158:             // containers being reopened after the container cache has been
1:ee17158:             // shut down. On certain platforms, this results in database
1:ee17158:             // files that can't be deleted until the VM exits.
1:ee17158:             DataDictionary dd = db.getDataDictionary();
1:ee17158:             // dd is null if the db is an active slave db (replication)
1:ee17158:             if (dd != null) {
1:ee17158:                 dd.disableIndexStatsRefresher();
1:a0dbbd7:             }
1:a0dbbd7:         }
1:ee17158: 
1:913815a:         if (se.getSeverity() == ExceptionSeverity.DATABASE_SEVERITY) {
1:a0dbbd7: 		    getContextService().notifyAllActiveThreads(this);
1:c406220:             // This may be called multiple times, but is short-circuited
1:c406220:             // in the monitor.
1:56c1dc2: 		    getMonitor().shutdown(db);
1:ee17158:         }
1:ee17158: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object other) {
1:eac0369: 		if (other instanceof DatabaseContext) {
1:eac0369: 			return ((DatabaseContextImpl) other).db == db;
1:913815a: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public int hashCode() {
1:eac0369: 		return db.hashCode();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public Database getDatabase() {return db;}
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of the ContextService. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  ContextService    getContextService()
1:a0dbbd7:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ContextService>()
1:56c1dc2:              {
1:56c1dc2:                  public ContextService run()
1:a0dbbd7:                  {
1:56c1dc2:                      return ContextService.getFactory();
1:56c1dc2:                  }
1:a0dbbd7:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:56c1dc2:     /**
1:56c1dc2:      * Privileged Monitor lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  ModuleFactory  getMonitor()
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<ModuleFactory>()
1:56c1dc2:              {
1:56c1dc2:                  public ModuleFactory run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getMonitor();
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:a0dbbd7:     }
1:a0dbbd7: 
1:a0dbbd7: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.ModuleFactory;
/////////////////////////////////////////////////////////////////////////
1: 		    getMonitor().shutdown(db);
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ContextService>()
1:              {
1:                  public ContextService run()
1:                      return ContextService.getFactory();
1:              }
1:              );
1:     }
1: 
1:     /**
1:      * Privileged Monitor lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ModuleFactory  getMonitor()
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<ModuleFactory>()
1:              {
1:                  public ModuleFactory run()
1:                  {
1:                      return Monitor.getMonitor();
1:                  }
1:              }
1:              );
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
1: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
1: 		    getContextService().notifyAllActiveThreads(this);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of the ContextService. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ContextService    getContextService()
1:     {
0:         if ( System.getSecurityManager() == null )
1:         {
0:             return ContextService.getFactory();
1:         }
0:         else
1:         {
0:             return AccessController.doPrivileged
0:                 (
0:                  new PrivilegedAction<ContextService>()
1:                  {
0:                      public ContextService run()
1:                      {
0:                          return ContextService.getFactory();
1:                      }
1:                  }
0:                  );
1:         }
1:     }
1: 
commit:2724c48
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:ee17158
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
/////////////////////////////////////////////////////////////////////////
1:         if (se.getSeverity() >= ExceptionSeverity.DATABASE_SEVERITY) {
1:             // DERBY-5108: Shut down the istat daemon thread before shutting
1:             // down the various modules belonging to the database. An active
1:             // istat daemon thread at the time of shutdown may result in
1:             // containers being reopened after the container cache has been
1:             // shut down. On certain platforms, this results in database
1:             // files that can't be deleted until the VM exits.
1:             DataDictionary dd = db.getDataDictionary();
1:             // dd is null if the db is an active slave db (replication)
1:             if (dd != null) {
1:                 dd.disableIndexStatsRefresher();
1:             }
1:         }
1: 
commit:c406220
/////////////////////////////////////////////////////////////////////////
1:             // This may be called multiple times, but is short-circuited
1:             // in the monitor.
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:913815a
/////////////////////////////////////////////////////////////////////////
1: final class DatabaseContextImpl extends ContextImpl implements DatabaseContext
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Ensure the context is popped if the session is
1:         // going away.
1:         if (se.getSeverity() < ExceptionSeverity.SESSION_SEVERITY)
1:             return;
1: 
1:         popMe();
1:         
1:         if (se.getSeverity() == ExceptionSeverity.DATABASE_SEVERITY) {
0: 		    ContextService.getFactory().notifyAllActiveThreads(this);
0: 		    Monitor.getMonitor().shutdown(db);
1:         }
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.db.DatabaseContextImpl
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.db
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.db;
1: 
1: import org.apache.derby.iapi.services.context.ContextImpl;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.db.Database;
1: import org.apache.derby.iapi.db.DatabaseContext;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: 
1: 
1: /**
1: 	A context that shutdowns down the database on a databsae exception.
1: */
0: class DatabaseContextImpl extends ContextImpl implements DatabaseContext
0: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private final Database	db;
1: 
1: 	DatabaseContextImpl(ContextManager cm, Database db) {
1: 		super(cm, DatabaseContextImpl.CONTEXT_ID);
1: 		this.db = db;
1: 	}
1: 
1: 	public void cleanupOnError(Throwable t) {
1: 		if (!(t instanceof StandardException)) return;
1: 		StandardException se = (StandardException)t;
0: 		if (se.getSeverity() != ExceptionSeverity.DATABASE_SEVERITY) return;
0: 		popMe();
0: 		ContextService.getFactory().notifyAllActiveThreads(this);
0: 		Monitor.getMonitor().shutdown(db);
1: 	}
1: 
1: 	public boolean equals(Object other) {
1: 		if (other instanceof DatabaseContext) {
1: 			return ((DatabaseContextImpl) other).db == db;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	public int hashCode() {
1: 		return db.hashCode();
1: 	}
1: 
1: 	public Database getDatabase() {return db;}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.db
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.db;
0: 
0: import org.apache.derby.iapi.services.context.ContextImpl;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.db.Database;
0: import org.apache.derby.iapi.db.DatabaseContext;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: 
0: 
0: /**
0: 	A context that shutdowns down the database on a databsae exception.
0: */
0: class DatabaseContextImpl extends ContextImpl implements DatabaseContext
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private final Database	db;
0: 
0: 	DatabaseContextImpl(ContextManager cm, Database db) {
0: 		super(cm, DatabaseContextImpl.CONTEXT_ID);
0: 		this.db = db;
0: 	}
0: 
0: 	public void cleanupOnError(Throwable t) {
0: 		if (!(t instanceof StandardException)) return;
0: 		StandardException se = (StandardException)t;
0: 		if (se.getSeverity() != ExceptionSeverity.DATABASE_SEVERITY) return;
0: 		popMe();
0: 		ContextService.getFactory().notifyAllActiveThreads(this);
0: 		Monitor.getMonitor().shutdown(db);
0: 	}
0: 
0: 	public boolean equals(Object other) {
0: 		if (other instanceof DatabaseContext) {
0: 			return ((DatabaseContextImpl) other).db == db;
0: 		}
0: 		return false;
0: 	}
0: 
0: 	public int hashCode() {
0: 		return db.hashCode();
0: 	}
0: 
0: 	public Database getDatabase() {return db;}
0: }
============================================================================