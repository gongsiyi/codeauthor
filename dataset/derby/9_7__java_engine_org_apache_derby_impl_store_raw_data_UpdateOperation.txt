1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.UpdateOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:af5936c: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:af5936c: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
2:eac0369: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Represents the update of a particular row on a page.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	LOGOP_UPDATE
1:eac0369: 		the formatId is written by FormatIdOutputStream when this object is
1:eac0369: 		written out by writeObject
1:787ceb4: 	@derby.purpose	update a record on the page
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		PhysicalPageOperation	the super class
1:eac0369: 		doMeSlot(CompressedInt)	the slot the updated record is in
1:eac0369: 		recordId(CompressedInt) the recordId of the updated record
1:eac0369: 
1:eac0369: 		OptionalData	The new image of the record (length included), 
1:eac0369: 						follow by the old image of the record (length included)
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: */
1:eac0369: 
1:eac0369: public final class UpdateOperation extends PhysicalPageOperation {
1:eac0369: 
1:eac0369: 	protected int			doMeSlot;	// record slot - only valid during a doMe() operation
1:eac0369: 	protected int			recordId;	// record id
1:eac0369: 	transient protected int nextColumn;	// next column that needs to be updated in a row.
1:eac0369: 
1:eac0369: 	transient protected ByteArray preparedLog;
1:eac0369: 	
1:3546404:     UpdateOperation(
1:eac0369:     RawTransaction              t, 
1:eac0369:     BasePage                    page, 
1:eac0369:     int                         slot, 
1:eac0369:     int                         recordId,
1:eac0369:     Object[]       row, 
1:eac0369:     FormatableBitSet                     validColumns,
1:eac0369:     int                         realStartColumn, 
1:eac0369:     DynamicByteArrayOutputStream      logBuffer, 
1:eac0369:     int                         realSpaceOnPage, 
1:eac0369:     RecordHandle                headRowHandle)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 
1:eac0369: 		this.doMeSlot = slot;
1:eac0369: 		this.recordId = recordId;
1:eac0369: 		this.nextColumn = -1;
1:eac0369: 		
1:eac0369: 		// RESOLVE SRW-DJD/YYZ
1:eac0369: 		try {
1:eac0369: 			writeOptionalDataToBuffer(t, (DynamicByteArrayOutputStream) logBuffer,
1:eac0369: 				row, validColumns, realStartColumn,
1:eac0369: 				realSpaceOnPage, headRowHandle);
1:eac0369: 		} catch (IOException ioe) {
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public UpdateOperation() { super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException 
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		CompressedNumber.writeInt(out, doMeSlot);
1:eac0369: 		CompressedNumber.writeInt(out, recordId);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read this in
1:eac0369: 		@exception IOException error reading from log stream
1:eac0369: 		@exception ClassNotFoundException log stream corrupted
1:eac0369: 	*/
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		doMeSlot = CompressedNumber.readInt(in);
1:eac0369: 		recordId = CompressedNumber.readInt(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_UPDATE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the last column of the row this operation logged
1:eac0369: 	*/
1:eac0369: 	public int getNextStartColumn() {
1:eac0369: 		return nextColumn;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Loggable methods
1:eac0369: 	 */
1:eac0369: 	/**
1:eac0369: 		Store the new record directly over the old record, the implementation
1:eac0369: 		of storeRecord is responsible for removing any old data.
1:eac0369: 
1:eac0369: 		@exception StandardException Thrown by methods I call
1:eac0369: 		@exception IOException Thrown by methods I call
1:eac0369: 
1:eac0369: 		@see BasePage#storeRecord
1:eac0369: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1:eac0369: 	*/
1:eac0369: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		this.page.storeRecord(instant, doMeSlot, false, in);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PhysicalPageOperation methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Store the old record directly over the new record, the implementation
1:eac0369: 		of storeRecord is responsible for removing any new data.
1:eac0369: 
1:eac0369: 		@exception StandardException Thrown by methods I call
1:eac0369: 		@exception IOException Thrown by methods I call
1:eac0369: 
1:eac0369: 		@see BasePage#storeRecord
1:eac0369: 		@see PhysicalPageOperation#undoMe
1:eac0369: 	*/
1:eac0369: 	public void undoMe(Transaction xact, BasePage undoPage,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		int slot = undoPage.findRecordById(recordId, Page.FIRST_SLOT_NUMBER);
1:eac0369: 
1:eac0369: 		// skip the after image of the record
1:eac0369: 		undoPage.skipRecord(in);
1:eac0369: 
1:eac0369: 		undoPage.storeRecord(CLRInstant, slot, false, in);
1:eac0369: 		undoPage.setAuxObject(null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 		methods to support prepared log
1:eac0369: 		
1:eac0369: 		the following two methods should not be called during recover
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public ByteArray getPreparedLog()
1:eac0369: 	{
1:eac0369: 		return (this.preparedLog);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Write out the changed colums of new record (from the row) followed by 
1:eac0369:         changed columns of the old record (from the page).
1:eac0369: 
1:eac0369: 		@exception StandardException Thrown by methods I call
1:eac0369: 		@exception IOException Thrown by methods I call
1:eac0369: 	*/
1:eac0369: 	private void writeOptionalDataToBuffer(
1:eac0369:     RawTransaction                  t, 
1:eac0369:     DynamicByteArrayOutputStream    logBuffer,
1:eac0369:     Object[]           row, 
1:eac0369:     FormatableBitSet                         validColumns,
1:eac0369:     int                             realStartColumn, 
1:eac0369:     int                             realSpaceOnPage, 
1:eac0369:     RecordHandle                    headRowHandle)
1:eac0369: 		throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) 
1:eac0369:         {
1:eac0369: 			SanityManager.ASSERT(this.page != null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (realStartColumn == (-1)) 
1:eac0369:         {
1:eac0369: 			logBuffer = t.getLogBuffer();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		int optionalDataStart = logBuffer.getPosition();
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) 
1:eac0369:         {
1:eac0369: 
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 (realStartColumn != -1 || optionalDataStart == 0),
1:eac0369:                 "Buffer for writing optional data should start at position 0");
1:eac0369:         }
1:eac0369: 
1:eac0369: 
1:eac0369: 		this.nextColumn = 
1:eac0369:             this.page.logRow(
1:eac0369:                 doMeSlot, false, recordId, row, validColumns,
1:eac0369:                 logBuffer, 0, Page.INSERT_OVERFLOW, realStartColumn,
1:eac0369:                 realSpaceOnPage, 100);
1:eac0369: 
1:eac0369: 		FormatableBitSet loggedColumns = validColumns;
1:eac0369: 
1:eac0369:         // If this update results in moving columns off the current page to
1:eac0369:         // another page, then we must log the before image values of the columns
1:eac0369:         // being moved (deleted from this page) in addition to logging the
1:eac0369:         // columns actually being changed as part of the update.
1:eac0369: 
1:eac0369:         if ((nextColumn != -1) && (validColumns != null))
1:eac0369:         {
1:eac0369:             // if nextColumn is not -1, then this must be an update which moves
1:eac0369:             // columns off of the current page.  If validColumns == null then
1:eac0369:             // we are logging all of the before image columns anyway.
1:eac0369: 
1:eac0369:             // get total number of fields of the old record.
1:eac0369: 			int numberFields = page.getHeaderAtSlot(doMeSlot).getNumberFields();
1:eac0369: 
1:eac0369:             // create new bit map, copying all bits that were set in original
1:eac0369: 			loggedColumns = new FormatableBitSet(validColumns);
1:eac0369: 
1:eac0369:             // make sure there is room in the bit map to add the columns being
1:eac0369:             // deleted from the end of the row.
1:eac0369:             // The important thing is that endField must be at least as big as
1:eac0369:             // the number of columns in the entire record (including previous
1:eac0369:             // pages of a long row) up to the end of this page.
1:eac0369:             int endField = nextColumn + numberFields;
1:eac0369:             loggedColumns.grow(endField);
1:eac0369:             // now include all columns being deleted.
1:eac0369:             // This actually sets too many bits in this bit set but
1:eac0369:             // logRecord will just ignore the extra bits.
1:eac0369: 			for (int i = nextColumn; i < endField; i++)
1:eac0369:             {
1:eac0369: 				loggedColumns.set(i);
1:eac0369: 			}
1:eac0369:         }
1:eac0369: 
1:eac0369: 		// log the old version of the changed data
1:eac0369: 		this.page.logRecord(
1:eac0369:             doMeSlot, BasePage.LOG_RECORD_FOR_UPDATE,
1:eac0369:             recordId, loggedColumns, logBuffer, headRowHandle);
1:eac0369: 
1:eac0369:         // get length of all the optional data.
1:eac0369: 		optionalDataStart = logBuffer.getBeginPosition();
1:eac0369: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
1:eac0369: 
1:eac0369: 		// set the position to the beginning of the buffer
1:eac0369: 		logBuffer.setPosition(optionalDataStart);
1:eac0369: 
1:eac0369: 		this.preparedLog = new ByteArray(
1:eac0369:             logBuffer.getByteArray(), optionalDataStart, optionalDataLength);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * PageBasicOperation
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * restore the before image of the page
1:eac0369: 	 *
1:94f158a: 	 * @exception StandardException Standard Derby Error Policy
1:eac0369: 	 * @exception IOException problem reading the complete log record from the
1:eac0369: 	 * input stream
1:eac0369: 	 */
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage,
1:eac0369: 					   LogInstant CLRInstant, LimitObjectInput in)
1:eac0369: 		 throws StandardException, IOException 
1:eac0369: 	{
1:eac0369: 		undoMe(xact, undoPage, CLRInstant, in);
1:eac0369: 	}
1:eac0369: 
1:af5936c:     /**
1:af5936c:      * return RecordHandle of the update row.
1:af5936c:      * <p>
1:af5936c:      * Return the RecordHandle that should be locked when updating the
1:af5936c:      * row in this UpdateOperation.
1:af5936c:      * <p>
1:af5936c:      **/
1:af5936c: 	private RecordHandle getRecordHandle()
1:af5936c: 	{
1:af5936c: 		return new RecordId(getPageId(), recordId);
1:af5936c: 	}
1:af5936c: 
1:af5936c:     /**************************************************************************
1:af5936c:      * Public Methods of RePreparable Interface:
1:af5936c:      **************************************************************************
1:af5936c:      */
1:af5936c: 
1:af5936c:     /**
1:af5936c:      * reclaim locks associated with the changes in this log record.
1:af5936c:      * <p>
1:af5936c: 	 * @param locking_policy  The locking policy to use to claim the locks.
1:af5936c:      * 
1:af5936c:      *
1:af5936c: 	 * @exception  StandardException  Standard exception policy.
1:af5936c:      **/
1:af5936c:     public void reclaimPrepareLocks(
1:af5936c:     Transaction     t,
1:af5936c:     LockingPolicy   locking_policy)
1:af5936c: 		throws StandardException
1:af5936c:     {
1:af5936c:         if (SanityManager.DEBUG)
1:af5936c:         {
1:af5936c:             SanityManager.DEBUG_PRINT(
1:af5936c:                 "", "UpdateOperation.reclaimPrepareLocks().");
1:af5936c: 
1:af5936c:             SanityManager.ASSERT(getRecordHandle() != null);
1:af5936c:         }
1:af5936c: 
1:af5936c:         ContainerHandle ch = t.openContainer(
1:af5936c:             getPageId().getContainerId(), locking_policy, 
1:af5936c:             (ContainerHandle.MODE_FORUPDATE          | 
1:af5936c:              ContainerHandle.MODE_OPEN_FOR_LOCK_ONLY | 
1:af5936c:              ContainerHandle.MODE_LOCK_NOWAIT));
1:af5936c: 
1:af5936c:         if (SanityManager.DEBUG)
1:af5936c:         {
1:af5936c:             SanityManager.ASSERT(ch != null);
1:af5936c:         }
1:af5936c: 
1:af5936c:         if (ch != null)
1:af5936c:             ch.close();
1:af5936c: 
1:af5936c:         // get the row lock on the updated row.
1:af5936c:         boolean lock_granted = 
1:af5936c:             locking_policy.lockRecordForWrite(
1:af5936c:                 t, 
1:af5936c:                 getRecordHandle(), 
1:af5936c:                 false,          // default is not for insert. 
1:af5936c:                 false);         // don't wait for the lock, it is bug if a 
1:af5936c:                                 // lock has to wait while reclaiming locks 
1:af5936c:                                 // during recovery.
1:af5936c: 
1:af5936c:         releaseResource(t);
1:af5936c: 
1:af5936c:         if (SanityManager.DEBUG)
1:af5936c:         {
1:af5936c:             SanityManager.ASSERT(lock_granted);
1:af5936c:         }
1:af5936c:     }
1:af5936c: 
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() + 
1:eac0369: 			"Update " +
1:eac0369: 			" Slot=" + doMeSlot + 
1:eac0369: 			" recordId=" + recordId;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:af5936c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * return RecordHandle of the update row.
1:      * <p>
1:      * Return the RecordHandle that should be locked when updating the
1:      * row in this UpdateOperation.
1:      * <p>
1:      **/
1: 	private RecordHandle getRecordHandle()
1: 	{
1: 		return new RecordId(getPageId(), recordId);
1: 	}
1: 
1:     /**************************************************************************
1:      * Public Methods of RePreparable Interface:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * reclaim locks associated with the changes in this log record.
1:      * <p>
1: 	 * @param locking_policy  The locking policy to use to claim the locks.
1:      * 
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void reclaimPrepareLocks(
1:     Transaction     t,
1:     LockingPolicy   locking_policy)
1: 		throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.DEBUG_PRINT(
1:                 "", "UpdateOperation.reclaimPrepareLocks().");
1: 
1:             SanityManager.ASSERT(getRecordHandle() != null);
1:         }
1: 
1:         ContainerHandle ch = t.openContainer(
1:             getPageId().getContainerId(), locking_policy, 
1:             (ContainerHandle.MODE_FORUPDATE          | 
1:              ContainerHandle.MODE_OPEN_FOR_LOCK_ONLY | 
1:              ContainerHandle.MODE_LOCK_NOWAIT));
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(ch != null);
1:         }
1: 
1:         if (ch != null)
1:             ch.close();
1: 
1:         // get the row lock on the updated row.
1:         boolean lock_granted = 
1:             locking_policy.lockRecordForWrite(
1:                 t, 
1:                 getRecordHandle(), 
1:                 false,          // default is not for insert. 
1:                 false);         // don't wait for the lock, it is bug if a 
1:                                 // lock has to wait while reclaiming locks 
1:                                 // during recovery.
1: 
1:         releaseResource(t);
1: 
1:         if (SanityManager.DEBUG)
1:         {
1:             SanityManager.ASSERT(lock_granted);
1:         }
1:     }
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     UpdateOperation(
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	LOGOP_UPDATE
1: 	@derby.purpose	update a record on the page
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	 * @exception StandardException Standard Derby Error Policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.UpdateOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.util.ByteArray;
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
1: 
0: import java.io.OutputStream;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: 
1: /**
1: 	Represents the update of a particular row on a page.
1: 
1: 	<PRE>
0: 	@format_id	LOGOP_UPDATE
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose	update a record on the page
0: 	@upgrade
0: 	@disk_layout
1: 		PhysicalPageOperation	the super class
1: 		doMeSlot(CompressedInt)	the slot the updated record is in
1: 		recordId(CompressedInt) the recordId of the updated record
1: 
1: 		OptionalData	The new image of the record (length included), 
1: 						follow by the old image of the record (length included)
0: 	@end_format
1: 	</PRE>
1: */
1: 
1: public final class UpdateOperation extends PhysicalPageOperation {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected int			doMeSlot;	// record slot - only valid during a doMe() operation
1: 	protected int			recordId;	// record id
1: 	transient protected int nextColumn;	// next column that needs to be updated in a row.
1: 
1: 	transient protected ByteArray preparedLog;
1: 	
0: 	public UpdateOperation(
1:     RawTransaction              t, 
1:     BasePage                    page, 
1:     int                         slot, 
1:     int                         recordId,
1:     Object[]       row, 
1:     FormatableBitSet                     validColumns,
1:     int                         realStartColumn, 
1:     DynamicByteArrayOutputStream      logBuffer, 
1:     int                         realSpaceOnPage, 
1:     RecordHandle                headRowHandle)
1: 		throws StandardException
1: 	{
1: 		super(page);
1: 
1: 		this.doMeSlot = slot;
1: 		this.recordId = recordId;
1: 		this.nextColumn = -1;
1: 		
1: 		// RESOLVE SRW-DJD/YYZ
1: 		try {
1: 			writeOptionalDataToBuffer(t, (DynamicByteArrayOutputStream) logBuffer,
1: 				row, validColumns, realStartColumn,
1: 				realSpaceOnPage, headRowHandle);
1: 		} catch (IOException ioe) {
1: 			throw StandardException.newException(
1:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
1: 		}
1: 
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public UpdateOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException 
1: 	{
1: 		super.writeExternal(out);
1: 		CompressedNumber.writeInt(out, doMeSlot);
1: 		CompressedNumber.writeInt(out, recordId);
1: 	}
1: 
1: 	/**
1: 		Read this in
1: 		@exception IOException error reading from log stream
1: 		@exception ClassNotFoundException log stream corrupted
1: 	*/
1: 	public void readExternal(ObjectInput in)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		doMeSlot = CompressedNumber.readInt(in);
1: 		recordId = CompressedNumber.readInt(in);
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_UPDATE;
1: 	}
1: 
1: 	/**
1: 		Return the last column of the row this operation logged
1: 	*/
1: 	public int getNextStartColumn() {
1: 		return nextColumn;
1: 	}
1: 
1: 	/*
1: 	 * Loggable methods
1: 	 */
1: 	/**
1: 		Store the new record directly over the old record, the implementation
1: 		of storeRecord is responsible for removing any old data.
1: 
1: 		@exception StandardException Thrown by methods I call
1: 		@exception IOException Thrown by methods I call
1: 
1: 		@see BasePage#storeRecord
1: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
1: 	*/
1: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		this.page.storeRecord(instant, doMeSlot, false, in);
1: 	}
1: 	
1: 
1: 	/*
1: 	 * PhysicalPageOperation methods
1: 	 */
1: 
1: 	/**
1: 		Store the old record directly over the new record, the implementation
1: 		of storeRecord is responsible for removing any new data.
1: 
1: 		@exception StandardException Thrown by methods I call
1: 		@exception IOException Thrown by methods I call
1: 
1: 		@see BasePage#storeRecord
1: 		@see PhysicalPageOperation#undoMe
1: 	*/
1: 	public void undoMe(Transaction xact, BasePage undoPage,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 
1: 		int slot = undoPage.findRecordById(recordId, Page.FIRST_SLOT_NUMBER);
1: 
1: 		// skip the after image of the record
1: 		undoPage.skipRecord(in);
1: 
1: 		undoPage.storeRecord(CLRInstant, slot, false, in);
1: 		undoPage.setAuxObject(null);
1: 	}
1: 
1: 	/*
1: 		methods to support prepared log
1: 		
1: 		the following two methods should not be called during recover
1: 	*/
1: 
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return (this.preparedLog);
1: 	}
1: 
1: 	/**
1: 		Write out the changed colums of new record (from the row) followed by 
1:         changed columns of the old record (from the page).
1: 
1: 		@exception StandardException Thrown by methods I call
1: 		@exception IOException Thrown by methods I call
1: 	*/
1: 	private void writeOptionalDataToBuffer(
1:     RawTransaction                  t, 
1:     DynamicByteArrayOutputStream    logBuffer,
1:     Object[]           row, 
1:     FormatableBitSet                         validColumns,
1:     int                             realStartColumn, 
1:     int                             realSpaceOnPage, 
1:     RecordHandle                    headRowHandle)
1: 		throws StandardException, IOException
1: 	{
1: 
1: 		if (SanityManager.DEBUG) 
1:         {
1: 			SanityManager.ASSERT(this.page != null);
1: 		}
1: 
1: 		if (realStartColumn == (-1)) 
1:         {
1: 			logBuffer = t.getLogBuffer();
1: 		}
1: 
1: 		int optionalDataStart = logBuffer.getPosition();
1: 
1: 		if (SanityManager.DEBUG) 
1:         {
1: 
1:             SanityManager.ASSERT(
1:                 (realStartColumn != -1 || optionalDataStart == 0),
1:                 "Buffer for writing optional data should start at position 0");
1:         }
1: 
1: 
1: 		this.nextColumn = 
1:             this.page.logRow(
1:                 doMeSlot, false, recordId, row, validColumns,
1:                 logBuffer, 0, Page.INSERT_OVERFLOW, realStartColumn,
1:                 realSpaceOnPage, 100);
1: 
1: 		FormatableBitSet loggedColumns = validColumns;
1: 
1:         // If this update results in moving columns off the current page to
1:         // another page, then we must log the before image values of the columns
1:         // being moved (deleted from this page) in addition to logging the
1:         // columns actually being changed as part of the update.
1: 
1:         if ((nextColumn != -1) && (validColumns != null))
1:         {
1:             // if nextColumn is not -1, then this must be an update which moves
1:             // columns off of the current page.  If validColumns == null then
1:             // we are logging all of the before image columns anyway.
1: 
1:             // get total number of fields of the old record.
1: 			int numberFields = page.getHeaderAtSlot(doMeSlot).getNumberFields();
1: 
1:             // create new bit map, copying all bits that were set in original
1: 			loggedColumns = new FormatableBitSet(validColumns);
1: 
1:             // make sure there is room in the bit map to add the columns being
1:             // deleted from the end of the row.
1:             // The important thing is that endField must be at least as big as
1:             // the number of columns in the entire record (including previous
1:             // pages of a long row) up to the end of this page.
1:             int endField = nextColumn + numberFields;
1:             loggedColumns.grow(endField);
1:             // now include all columns being deleted.
1:             // This actually sets too many bits in this bit set but
1:             // logRecord will just ignore the extra bits.
1: 			for (int i = nextColumn; i < endField; i++)
1:             {
1: 				loggedColumns.set(i);
1: 			}
1:         }
1: 
1: 		// log the old version of the changed data
1: 		this.page.logRecord(
1:             doMeSlot, BasePage.LOG_RECORD_FOR_UPDATE,
1:             recordId, loggedColumns, logBuffer, headRowHandle);
1: 
1:         // get length of all the optional data.
1: 		optionalDataStart = logBuffer.getBeginPosition();
1: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
1: 
1: 		// set the position to the beginning of the buffer
1: 		logBuffer.setPosition(optionalDataStart);
1: 
1: 		this.preparedLog = new ByteArray(
1:             logBuffer.getByteArray(), optionalDataStart, optionalDataLength);
1: 	}
1: 
1: 	/*
1: 	 * PageBasicOperation
1: 	 */
1: 
1: 	/**
1: 	 * restore the before image of the page
1: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
1: 	 * @exception IOException problem reading the complete log record from the
1: 	 * input stream
1: 	 */
1: 	public void restoreMe(Transaction xact, BasePage undoPage,
1: 					   LogInstant CLRInstant, LimitObjectInput in)
1: 		 throws StandardException, IOException 
1: 	{
1: 		undoMe(xact, undoPage, CLRInstant, in);
1: 	}
1: 
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() + 
1: 			"Update " +
1: 			" Slot=" + doMeSlot + 
1: 			" recordId=" + recordId;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction; 
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: 
0: /**
0: 	Represents the update of a particular row on a page.
0: 
0: 	<PRE>
0: 	@format_id	LOGOP_UPDATE
0: 		the formatId is written by FormatIdOutputStream when this object is
0: 		written out by writeObject
0: 	@purpose	update a record on the page
0: 	@upgrade
0: 	@disk_layout
0: 		PhysicalPageOperation	the super class
0: 		doMeSlot(CompressedInt)	the slot the updated record is in
0: 		recordId(CompressedInt) the recordId of the updated record
0: 
0: 		OptionalData	The new image of the record (length included), 
0: 						follow by the old image of the record (length included)
0: 	@end_format
0: 	</PRE>
0: */
0: 
0: public final class UpdateOperation extends PhysicalPageOperation {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected int			doMeSlot;	// record slot - only valid during a doMe() operation
0: 	protected int			recordId;	// record id
0: 	transient protected int nextColumn;	// next column that needs to be updated in a row.
0: 
0: 	transient protected ByteArray preparedLog;
0: 	
0: 	public UpdateOperation(
0:     RawTransaction              t, 
0:     BasePage                    page, 
0:     int                         slot, 
0:     int                         recordId,
0:     Object[]       row, 
0:     FormatableBitSet                     validColumns,
0:     int                         realStartColumn, 
0:     DynamicByteArrayOutputStream      logBuffer, 
0:     int                         realSpaceOnPage, 
0:     RecordHandle                headRowHandle)
0: 		throws StandardException
0: 	{
0: 		super(page);
0: 
0: 		this.doMeSlot = slot;
0: 		this.recordId = recordId;
0: 		this.nextColumn = -1;
0: 		
0: 		// RESOLVE SRW-DJD/YYZ
0: 		try {
0: 			writeOptionalDataToBuffer(t, (DynamicByteArrayOutputStream) logBuffer,
0: 				row, validColumns, realStartColumn,
0: 				realSpaceOnPage, headRowHandle);
0: 		} catch (IOException ioe) {
0: 			throw StandardException.newException(
0:                     SQLState.DATA_UNEXPECTED_EXCEPTION, ioe);
0: 		}
0: 
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public UpdateOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException 
0: 	{
0: 		super.writeExternal(out);
0: 		CompressedNumber.writeInt(out, doMeSlot);
0: 		CompressedNumber.writeInt(out, recordId);
0: 	}
0: 
0: 	/**
0: 		Read this in
0: 		@exception IOException error reading from log stream
0: 		@exception ClassNotFoundException log stream corrupted
0: 	*/
0: 	public void readExternal(ObjectInput in)
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		doMeSlot = CompressedNumber.readInt(in);
0: 		recordId = CompressedNumber.readInt(in);
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_UPDATE;
0: 	}
0: 
0: 	/**
0: 		Return the last column of the row this operation logged
0: 	*/
0: 	public int getNextStartColumn() {
0: 		return nextColumn;
0: 	}
0: 
0: 	/*
0: 	 * Loggable methods
0: 	 */
0: 	/**
0: 		Store the new record directly over the old record, the implementation
0: 		of storeRecord is responsible for removing any old data.
0: 
0: 		@exception StandardException Thrown by methods I call
0: 		@exception IOException Thrown by methods I call
0: 
0: 		@see BasePage#storeRecord
0: 		@see org.apache.derby.iapi.store.raw.Loggable#doMe
0: 	*/
0: 	public void doMe(Transaction xact, LogInstant instant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		this.page.storeRecord(instant, doMeSlot, false, in);
0: 	}
0: 	
0: 
0: 	/*
0: 	 * PhysicalPageOperation methods
0: 	 */
0: 
0: 	/**
0: 		Store the old record directly over the new record, the implementation
0: 		of storeRecord is responsible for removing any new data.
0: 
0: 		@exception StandardException Thrown by methods I call
0: 		@exception IOException Thrown by methods I call
0: 
0: 		@see BasePage#storeRecord
0: 		@see PhysicalPageOperation#undoMe
0: 	*/
0: 	public void undoMe(Transaction xact, BasePage undoPage,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 
0: 		int slot = undoPage.findRecordById(recordId, Page.FIRST_SLOT_NUMBER);
0: 
0: 		// skip the after image of the record
0: 		undoPage.skipRecord(in);
0: 
0: 		undoPage.storeRecord(CLRInstant, slot, false, in);
0: 		undoPage.setAuxObject(null);
0: 	}
0: 
0: 	/*
0: 		methods to support prepared log
0: 		
0: 		the following two methods should not be called during recover
0: 	*/
0: 
0: 	public ByteArray getPreparedLog()
0: 	{
0: 		return (this.preparedLog);
0: 	}
0: 
0: 	/**
0: 		Write out the changed colums of new record (from the row) followed by 
0:         changed columns of the old record (from the page).
0: 
0: 		@exception StandardException Thrown by methods I call
0: 		@exception IOException Thrown by methods I call
0: 	*/
0: 	private void writeOptionalDataToBuffer(
0:     RawTransaction                  t, 
0:     DynamicByteArrayOutputStream    logBuffer,
0:     Object[]           row, 
0:     FormatableBitSet                         validColumns,
0:     int                             realStartColumn, 
0:     int                             realSpaceOnPage, 
0:     RecordHandle                    headRowHandle)
0: 		throws StandardException, IOException
0: 	{
0: 
0: 		if (SanityManager.DEBUG) 
0:         {
0: 			SanityManager.ASSERT(this.page != null);
0: 		}
0: 
0: 		if (realStartColumn == (-1)) 
0:         {
0: 			logBuffer = t.getLogBuffer();
0: 		}
0: 
0: 		int optionalDataStart = logBuffer.getPosition();
0: 
0: 		if (SanityManager.DEBUG) 
0:         {
0: 
0:             SanityManager.ASSERT(
0:                 (realStartColumn != -1 || optionalDataStart == 0),
0:                 "Buffer for writing optional data should start at position 0");
0:         }
0: 
0: 
0: 		this.nextColumn = 
0:             this.page.logRow(
0:                 doMeSlot, false, recordId, row, validColumns,
0:                 logBuffer, 0, Page.INSERT_OVERFLOW, realStartColumn,
0:                 realSpaceOnPage, 100);
0: 
0: 		FormatableBitSet loggedColumns = validColumns;
0: 
0:         // If this update results in moving columns off the current page to
0:         // another page, then we must log the before image values of the columns
0:         // being moved (deleted from this page) in addition to logging the
0:         // columns actually being changed as part of the update.
0: 
0:         if ((nextColumn != -1) && (validColumns != null))
0:         {
0:             // if nextColumn is not -1, then this must be an update which moves
0:             // columns off of the current page.  If validColumns == null then
0:             // we are logging all of the before image columns anyway.
0: 
0:             // get total number of fields of the old record.
0: 			int numberFields = page.getHeaderAtSlot(doMeSlot).getNumberFields();
0: 
0:             // create new bit map, copying all bits that were set in original
0: 			loggedColumns = new FormatableBitSet(validColumns);
0: 
0:             // make sure there is room in the bit map to add the columns being
0:             // deleted from the end of the row.
0:             // The important thing is that endField must be at least as big as
0:             // the number of columns in the entire record (including previous
0:             // pages of a long row) up to the end of this page.
0:             int endField = nextColumn + numberFields;
0:             loggedColumns.grow(endField);
0:             // now include all columns being deleted.
0:             // This actually sets too many bits in this bit set but
0:             // logRecord will just ignore the extra bits.
0: 			for (int i = nextColumn; i < endField; i++)
0:             {
0: 				loggedColumns.set(i);
0: 			}
0:         }
0: 
0: 		// log the old version of the changed data
0: 		this.page.logRecord(
0:             doMeSlot, BasePage.LOG_RECORD_FOR_UPDATE,
0:             recordId, loggedColumns, logBuffer, headRowHandle);
0: 
0:         // get length of all the optional data.
0: 		optionalDataStart = logBuffer.getBeginPosition();
0: 		int optionalDataLength = logBuffer.getPosition() - optionalDataStart;
0: 
0: 		// set the position to the beginning of the buffer
0: 		logBuffer.setPosition(optionalDataStart);
0: 
0: 		this.preparedLog = new ByteArray(
0:             logBuffer.getByteArray(), optionalDataStart, optionalDataLength);
0: 	}
0: 
0: 	/*
0: 	 * PageBasicOperation
0: 	 */
0: 
0: 	/**
0: 	 * restore the before image of the page
0: 	 *
0: 	 * @exception StandardException Standard Cloudscape Error Policy
0: 	 * @exception IOException problem reading the complete log record from the
0: 	 * input stream
0: 	 */
0: 	public void restoreMe(Transaction xact, BasePage undoPage,
0: 					   LogInstant CLRInstant, LimitObjectInput in)
0: 		 throws StandardException, IOException 
0: 	{
0: 		undoMe(xact, undoPage, CLRInstant, in);
0: 	}
0: 
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() + 
0: 			"Update " +
0: 			" Slot=" + doMeSlot + 
0: 			" recordId=" + recordId;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: }
============================================================================