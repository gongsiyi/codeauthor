1:9ce7492: /*
1:9ce7492: 
1:9ce7492:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Sequence
1:9ce7492: 
1:9ce7492:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9ce7492:    contributor license agreements.  See the NOTICE file distributed with
1:9ce7492:    this work for additional information regarding copyright ownership.
1:9ce7492:    The ASF licenses this file to you under the Apache License, Version 2.0
1:9ce7492:    (the "License"); you may not use this file except in compliance with
1:9ce7492:    the License.  You may obtain a copy of the License at
1:9ce7492: 
1:9ce7492:       http://www.apache.org/licenses/LICENSE-2.0
1:9ce7492: 
1:9ce7492:    Unless required by applicable law or agreed to in writing, software
1:9ce7492:    distributed under the License is distributed on an "AS IS" BASIS,
1:9ce7492:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ce7492:    See the License for the specific language governing permissions and
1:9ce7492:    limitations under the License.
1:9ce7492: 
1:9ce7492:  */
1:9ce7492: 
1:9ce7492: package org.apache.derby.impl.tools.dblook;
1:9ce7492: 
1:9ce7492: import java.sql.Connection;
1:9ce7492: import java.sql.Statement;
1:9ce7492: import java.sql.PreparedStatement;
1:9ce7492: import java.sql.ResultSet;
1:9ce7492: import java.sql.SQLException;
1:9ce7492: import java.sql.DatabaseMetaData;
1:9ce7492: 
1:9ce7492: import java.util.HashMap;
1:9ce7492: import org.apache.derby.tools.dblook;
1:9ce7492: 
1:9ce7492: /**
1:9ce7492:  * Dblook implementation for SEQUENCEs.
1:9ce7492:  */
1:9ce7492: public class DB_Sequence
1:9ce7492: {
1:9ce7492:     ///////////////////////////////////////////////////////////////////////////////////
1:9ce7492:     //
1:9ce7492:     // CONSTANTS
1:9ce7492:     //
1:9ce7492:     ///////////////////////////////////////////////////////////////////////////////////
1:9ce7492: 
1:9ce7492: 
1:9ce7492:     ///////////////////////////////////////////////////////////////////////////////////
1:9ce7492:     //
1:9ce7492:     // BEHAVIOR
1:9ce7492:     //
1:9ce7492:     ///////////////////////////////////////////////////////////////////////////////////
1:9ce7492: 
1:9ce7492: 
1:9ce7492: 	/**
1:9ce7492:      * <p>
1:9ce7492: 	 * Generate the DDL for all sequences and output it via Logs.java.
1:9ce7492:      * </p>
1:9ce7492:      *
1:9ce7492: 	 * @param conn Connection to the source database.
1:9ce7492:      */
1:9ce7492: 
1:9ce7492: 	public static void doSequences( Connection conn )
1:9ce7492: 		throws SQLException
1:9ce7492:     {
1:7fd0c6e:         // exclude system-generated sequences. see DERBY-6542.
1:9ce7492: 		PreparedStatement ps = conn.prepareStatement
1:9ce7492:             (
1:9ce7492:              "SELECT SCHEMAID, SEQUENCENAME, SEQUENCEDATATYPE, STARTVALUE, MINIMUMVALUE, MAXIMUMVALUE, INCREMENT, CYCLEOPTION\n" +
1:7fd0c6e:              "FROM SYS.SYSSEQUENCES\n" +
1:7fd0c6e:              "WHERE CAST( SCHEMAID AS CHAR( 36) ) != '8000000d-00d0-fd77-3ed8-000a0a0b1900'"
1:9ce7492:              );
1:9ce7492:         ResultSet rs = ps.executeQuery();
1:9ce7492: 
1:9ce7492: 		boolean firstTime = true;
1:9ce7492: 		while (rs.next())
1:9ce7492:         {
1:9ce7492:             int  col = 1;
1:9ce7492:             String schemaName = dblook.lookupSchemaId( rs.getString( col++ ) );
1:9ce7492:             String sequenceName = rs.getString( col++ );
1:9ce7492:             String typeName = stripNotNull( rs.getString( col++ ) );
1:9ce7492:             long startValue = rs.getLong( col++ );
1:9ce7492:             long minimumValue = rs.getLong( col++ );
1:9ce7492:             long maximumValue = rs.getLong( col++ );
1:9ce7492:             long increment = rs.getLong( col++ );
1:9ce7492:             String cycleOption = "Y".equals( rs.getString( col++ ) ) ? "CYCLE" : "NO CYCLE";
1:9ce7492: 
1:9ce7492: 			if (firstTime)
1:9ce7492:             {
1:9ce7492: 				Logs.reportString("----------------------------------------------");
1:9ce7492:                 Logs.reportMessage( "DBLOOK_SequenceHeader" );
1:9ce7492: 				Logs.reportString("----------------------------------------------\n");
1:9ce7492: 			}
1:9ce7492: 
1:9ce7492: 			String fullName = dblook.addQuotes( dblook.expandDoubleQuotes( sequenceName ) );
1:9ce7492: 			fullName = schemaName + "." + fullName;
1:9ce7492: 
1:9ce7492: 			String creationString = createSequenceString
1:9ce7492:                 ( fullName, typeName, startValue, minimumValue, maximumValue, increment, cycleOption );
1:9ce7492: 			Logs.writeToNewDDL(creationString);
1:9ce7492: 			Logs.writeStmtEndToNewDDL();
1:9ce7492: 			Logs.writeNewlineToNewDDL();
1:9ce7492: 			firstTime = false;
1:9ce7492: 		}
1:9ce7492: 
1:9ce7492:         rs.close();
1:9ce7492:         ps.close();
1:9ce7492: 	}
1:9ce7492:     /** Strip the trailing NOT NULL off of the string representation of a datatype */
1:9ce7492:     private static String stripNotNull( String datatypeName )
1:9ce7492:     {
1:9ce7492:         int idx = datatypeName.indexOf( "NOT" );
1:9ce7492:         if ( idx > 0 ) { return datatypeName.substring( 0, idx ); }
1:9ce7492:         else { return datatypeName; }
1:9ce7492:     }
1:9ce7492: 
1:9ce7492: 	/**
1:9ce7492:      * <p>
1:9ce7492: 	 * Generate DDL for a specific sequence.
1:9ce7492:      * </p>
1:9ce7492:      *
1:9ce7492:      * @param fullName Fully qualified name of the sequence
1:9ce7492:      * @param dataTypeName Name of the datatype of the sequence
1:9ce7492:      * @param startValue First value to use in the range of the sequence
1:9ce7492:      * @param minimumValue Smallest value in the range
1:9ce7492:      * @param maximumValue Largest value in the range
1:9ce7492:      * @param increment Step size of the sequence
1:9ce7492:      * @param cycleOption CYCLE or NO CYCLE
1:9ce7492:      *
1:9ce7492: 	 * @return DDL for the current stored sequence
1:9ce7492:      */
1:9ce7492: 	private static String createSequenceString
1:9ce7492:         (
1:9ce7492:          String fullName,
1:9ce7492:          String dataTypeName,
1:9ce7492:          long startValue,
1:9ce7492:          long minimumValue,
1:9ce7492:          long maximumValue,
1:9ce7492:          long increment,
1:9ce7492:          String cycleOption
1:9ce7492:          )
1:9ce7492: 		throws SQLException
1:9ce7492: 	{
1:9ce7492: 		StringBuffer buffer = new StringBuffer();
1:9ce7492: 
1:9ce7492:         buffer.append( "CREATE SEQUENCE " + fullName + '\n' );
1:9ce7492: 
1:9ce7492:         buffer.append( "    AS " + dataTypeName + '\n' );
1:9ce7492: 
1:9ce7492:         buffer.append( "    START WITH " + Long.toString( startValue ) + '\n' );
1:9ce7492: 
1:9ce7492:         buffer.append( "    INCREMENT BY " + Long.toString( increment ) + '\n' );
1:9ce7492: 
1:9ce7492:         buffer.append( "    MAXVALUE " + Long.toString( maximumValue ) + '\n' );
1:9ce7492: 
1:9ce7492:         buffer.append( "    MINVALUE " + Long.toString( minimumValue ) + '\n' );
1:9ce7492: 
1:9ce7492:         buffer.append( "    " + cycleOption + '\n' );
1:9ce7492: 
1:9ce7492: 		return buffer.toString();
1:9ce7492: 	}
1:9ce7492: 
1:9ce7492: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7fd0c6e
/////////////////////////////////////////////////////////////////////////
1:         // exclude system-generated sequences. see DERBY-6542.
1:              "FROM SYS.SYSSEQUENCES\n" +
1:              "WHERE CAST( SCHEMAID AS CHAR( 36) ) != '8000000d-00d0-fd77-3ed8-000a0a0b1900'"
commit:9ce7492
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Sequence
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.dblook;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.DatabaseMetaData;
1: 
1: import java.util.HashMap;
1: import org.apache.derby.tools.dblook;
1: 
1: /**
1:  * Dblook implementation for SEQUENCEs.
1:  */
1: public class DB_Sequence
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	/**
1:      * <p>
1: 	 * Generate the DDL for all sequences and output it via Logs.java.
1:      * </p>
1:      *
1: 	 * @param conn Connection to the source database.
1:      */
1: 
1: 	public static void doSequences( Connection conn )
1: 		throws SQLException
1:     {
1: 		PreparedStatement ps = conn.prepareStatement
1:             (
1:              "SELECT SCHEMAID, SEQUENCENAME, SEQUENCEDATATYPE, STARTVALUE, MINIMUMVALUE, MAXIMUMVALUE, INCREMENT, CYCLEOPTION\n" +
0:              "FROM SYS.SYSSEQUENCES"
1:              );
1:         ResultSet rs = ps.executeQuery();
1: 
1: 		boolean firstTime = true;
1: 		while (rs.next())
1:         {
1:             int  col = 1;
1:             String schemaName = dblook.lookupSchemaId( rs.getString( col++ ) );
1:             String sequenceName = rs.getString( col++ );
1:             String typeName = stripNotNull( rs.getString( col++ ) );
1:             long startValue = rs.getLong( col++ );
1:             long minimumValue = rs.getLong( col++ );
1:             long maximumValue = rs.getLong( col++ );
1:             long increment = rs.getLong( col++ );
1:             String cycleOption = "Y".equals( rs.getString( col++ ) ) ? "CYCLE" : "NO CYCLE";
1: 
1: 			if (firstTime)
1:             {
1: 				Logs.reportString("----------------------------------------------");
1:                 Logs.reportMessage( "DBLOOK_SequenceHeader" );
1: 				Logs.reportString("----------------------------------------------\n");
1: 			}
1: 
1: 			String fullName = dblook.addQuotes( dblook.expandDoubleQuotes( sequenceName ) );
1: 			fullName = schemaName + "." + fullName;
1: 
1: 			String creationString = createSequenceString
1:                 ( fullName, typeName, startValue, minimumValue, maximumValue, increment, cycleOption );
1: 			Logs.writeToNewDDL(creationString);
1: 			Logs.writeStmtEndToNewDDL();
1: 			Logs.writeNewlineToNewDDL();
1: 			firstTime = false;
1: 		}
1: 
1:         rs.close();
1:         ps.close();
1: 	}
1:     /** Strip the trailing NOT NULL off of the string representation of a datatype */
1:     private static String stripNotNull( String datatypeName )
1:     {
1:         int idx = datatypeName.indexOf( "NOT" );
1:         if ( idx > 0 ) { return datatypeName.substring( 0, idx ); }
1:         else { return datatypeName; }
1:     }
1: 
1: 	/**
1:      * <p>
1: 	 * Generate DDL for a specific sequence.
1:      * </p>
1:      *
1:      * @param fullName Fully qualified name of the sequence
1:      * @param dataTypeName Name of the datatype of the sequence
1:      * @param startValue First value to use in the range of the sequence
1:      * @param minimumValue Smallest value in the range
1:      * @param maximumValue Largest value in the range
1:      * @param increment Step size of the sequence
1:      * @param cycleOption CYCLE or NO CYCLE
1:      *
1: 	 * @return DDL for the current stored sequence
1:      */
1: 	private static String createSequenceString
1:         (
1:          String fullName,
1:          String dataTypeName,
1:          long startValue,
1:          long minimumValue,
1:          long maximumValue,
1:          long increment,
1:          String cycleOption
1:          )
1: 		throws SQLException
1: 	{
1: 		StringBuffer buffer = new StringBuffer();
1: 
1:         buffer.append( "CREATE SEQUENCE " + fullName + '\n' );
1: 
1:         buffer.append( "    AS " + dataTypeName + '\n' );
1: 
1:         buffer.append( "    START WITH " + Long.toString( startValue ) + '\n' );
1: 
1:         buffer.append( "    INCREMENT BY " + Long.toString( increment ) + '\n' );
1: 
1:         buffer.append( "    MAXVALUE " + Long.toString( maximumValue ) + '\n' );
1: 
1:         buffer.append( "    MINVALUE " + Long.toString( minimumValue ) + '\n' );
1: 
1:         buffer.append( "    " + cycleOption + '\n' );
1: 
1: 		return buffer.toString();
1: 	}
1: 
1: }
============================================================================