1:fe77ca5: /*
1:3d3820d: 
1:985fc85:    Derby - Class org.apache.derby.impl.tools.ij.Session
1:985fc85: 
1:11bc2d0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:11bc2d0:    contributor license agreements.  See the NOTICE file distributed with
1:11bc2d0:    this work for additional information regarding copyright ownership.
1:11bc2d0:    The ASF licenses this file to You under the Apache License, Version 2.0
1:11bc2d0:    (the "License"); you may not use this file except in compliance with
1:11bc2d0:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
1:985fc85: 
2:fe77ca5:  */
4:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.tools.ij;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1:fe77ca5: 
1:fe77ca5: import java.sql.Connection;
1:fe77ca5: import java.sql.PreparedStatement;
1:fe77ca5: import java.sql.Statement;
1:fe77ca5: import java.sql.ResultSet;
1:fe77ca5: import java.sql.SQLException;
1:fe77ca5: import java.util.Hashtable;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5: 	Session holds the objects local to a particular database session,
1:fe77ca5: 	which starts with a connection and is all other JDBC
1:fe77ca5: 	stuff used on that connection, along with some ij state
1:fe77ca5: 	that is connection-based as well.
1:fe77ca5: 
1:fe77ca5: 	This is separated out to localize database objects and
1:fe77ca5: 	also group objects by session.
1:fe77ca5: 
1:fe77ca5:  */
1:fe77ca5: class Session {
1:fe77ca5: 	static final String DEFAULT_NAME="CONNECTION";
1:fe77ca5: 
1:fe77ca5: 	boolean singleSession = true;
1:fe77ca5: 	Connection conn = null;
1:fe77ca5: 	String tag, name;
1:16d3334: 	Hashtable<String,PreparedStatement> prepStmts = new Hashtable<String,PreparedStatement>();
1:16d3334: 	Hashtable<String,Statement> cursorStmts = new Hashtable<String,Statement>();
1:16d3334: 	Hashtable<String,ResultSet> cursors = new Hashtable<String,ResultSet>();
1:16d3334: 	Hashtable<String,AsyncStatement> asyncStmts = new Hashtable<String,AsyncStatement>();
1:fe77ca5: 	boolean isJCC= false;      // Is this the IBM UNIVERSAL DRIVER.
1:3d3820d: 	boolean isDNC = false;     // Is this the Derby Network Client JDBC Driver
1:d02fa84: 	boolean isEmbeddedDerby = false; // Is this the Derby Embedded JDBC Driver
1:d02fa84: 
1:fe77ca5: 	Session(Connection newConn, String newTag, String newName) {
1:fe77ca5: 		conn = newConn;
1:fe77ca5: 		tag = newTag;
1:fe77ca5: 		name = newName;
1:fe77ca5: 
1:fe77ca5: 		try
1:fe77ca5: 		{
1:fe77ca5: 			isJCC = conn.getMetaData().getDriverName().startsWith("IBM DB2 JDBC Universal Driver");
1:56dc695: 			isDNC = conn.getMetaData().getDriverName().startsWith("Apache Derby Network Client");
1:d02fa84: 			isEmbeddedDerby = conn.getMetaData().getDriverName().
1:d02fa84: 				startsWith("Apache Derby Embedded JDBC Driver");
1:fe77ca5: 		}
1:fe77ca5: 		catch (SQLException se)
1:fe77ca5: 		{
1:3d3820d: 			// if there is a problem getting the driver name we will
1:3d3820d: 			// assume it is not JCC or DNC.
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	Connection getConnection() {
1:fe77ca5: 		// CHECK: should never be null
1:fe77ca5: 		return conn;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	boolean getIsJCC()
1:fe77ca5: 	{
1:fe77ca5: 		return isJCC;
1:fe77ca5: 	}
1:fe77ca5: 
1:3d3820d: 	boolean getIsDNC()
1:3d3820d: 	{
1:3d3820d: 		return isDNC;
1:3d3820d: 	}
1:3d3820d: 
1:d02fa84: 	boolean getIsEmbeddedDerby()
1:d02fa84: 	{
1:d02fa84: 		return isEmbeddedDerby;
1:d02fa84: 	}
1:d02fa84: 
1:fe77ca5: 	String getName() {
1:fe77ca5: 		return name;
1:fe77ca5: 	}
1:fe77ca5: 
1:16d3334: 	PreparedStatement addPreparedStatement(String name, PreparedStatement ps) {
1:fe77ca5: 		return prepStmts.put(name,ps);
1:fe77ca5: 	}
1:fe77ca5: 
1:16d3334: 	Statement addCursorStatement(String name, Statement s) {
1:fe77ca5: 		return cursorStmts.put(name, s);
1:fe77ca5: 	}
1:fe77ca5: 
1:16d3334: 	ResultSet addCursor(String name, ResultSet rs) {
1:fe77ca5: 		return cursors.put(name, rs);
1:fe77ca5: 	}
1:fe77ca5: 
1:16d3334: 	AsyncStatement addAsyncStatement(String name, AsyncStatement s) {
1:fe77ca5: 		return asyncStmts.put(name, s);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	PreparedStatement getPreparedStatement(String name) {
1:16d3334: 		return prepStmts.get(name);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	Statement getCursorStatement(String name) {
1:16d3334: 		return cursorStmts.get(name);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	ResultSet getCursor(String name) {
1:16d3334: 		return cursors.get(name);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	AsyncStatement getAsyncStatement(String name) {
1:16d3334: 		return asyncStmts.get(name);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	boolean removePreparedStatement(String name) {
1:fe77ca5: 		return prepStmts.remove(name)!=null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	boolean removeCursorStatement(String name) {
1:fe77ca5: 		return cursorStmts.remove(name)!=null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	boolean removeCursor(String name) {
1:fe77ca5: 		return cursors.remove(name)!=null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5:     void doPrompt(boolean newStatement, LocalizedOutput out, boolean multiSessions) {
1:fe77ca5: 		// check if tag should be increased...
1:fe77ca5: 		if (multiSessions && singleSession) {
1:fe77ca5: 			singleSession = false;
1:fe77ca5: 
1:fe77ca5: 			if (tag == null) tag = "("+name+")";
1:fe77ca5: 			else tag = tag.substring(0,tag.length()-1)+":"+name+")";
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		// check if tag should be reduced...
1:fe77ca5: 		if (!multiSessions && !singleSession) {
1:fe77ca5: 			singleSession = true;
1:fe77ca5: 
1:fe77ca5: 			if (tag == null) {}
1:fe77ca5: 			else if (tag.length() == name.length()+2) tag = null;
1:fe77ca5: 			else tag = tag.substring(0,tag.length()-2-name.length())+")";
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		utilMain.doPrompt(newStatement, out, tag);
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	void close() throws SQLException {
1:fe77ca5: 
1:fe77ca5: 		if (!conn.isClosed())
1:fe77ca5: 		{
1:fe77ca5: 			if  (!conn.getAutoCommit() && name != null && ! name.startsWith("XA"))
1:fe77ca5: 				conn.rollback();
1:fe77ca5: 			conn.close();
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		prepStmts.clear(); // should we check & close them individually?
1:fe77ca5: 		cursorStmts.clear();
1:fe77ca5: 		cursors.clear();
1:fe77ca5: 		asyncStmts.clear();
1:fe77ca5: 
1:fe77ca5: 		conn = null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:16d3334
/////////////////////////////////////////////////////////////////////////
1: 	Hashtable<String,PreparedStatement> prepStmts = new Hashtable<String,PreparedStatement>();
1: 	Hashtable<String,Statement> cursorStmts = new Hashtable<String,Statement>();
1: 	Hashtable<String,ResultSet> cursors = new Hashtable<String,ResultSet>();
1: 	Hashtable<String,AsyncStatement> asyncStmts = new Hashtable<String,AsyncStatement>();
/////////////////////////////////////////////////////////////////////////
1: 	PreparedStatement addPreparedStatement(String name, PreparedStatement ps) {
1: 	Statement addCursorStatement(String name, Statement s) {
1: 	ResultSet addCursor(String name, ResultSet rs) {
1: 	AsyncStatement addAsyncStatement(String name, AsyncStatement s) {
1: 		return prepStmts.get(name);
1: 		return cursorStmts.get(name);
1: 		return cursors.get(name);
1: 		return asyncStmts.get(name);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:d02fa84
/////////////////////////////////////////////////////////////////////////
1: 	boolean isEmbeddedDerby = false; // Is this the Derby Embedded JDBC Driver
1: 
/////////////////////////////////////////////////////////////////////////
1: 			isEmbeddedDerby = conn.getMetaData().getDriverName().
1: 				startsWith("Apache Derby Embedded JDBC Driver");
/////////////////////////////////////////////////////////////////////////
1: 	boolean getIsEmbeddedDerby()
1: 	{
1: 		return isEmbeddedDerby;
1: 	}
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:11bc2d0
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:56dc695
/////////////////////////////////////////////////////////////////////////
1: 			isDNC = conn.getMetaData().getDriverName().startsWith("Apache Derby Network Client");
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:3d3820d
/////////////////////////////////////////////////////////////////////////
1: 	boolean isDNC = false;     // Is this the Derby Network Client JDBC Driver
/////////////////////////////////////////////////////////////////////////
0: 			isDNC = conn.getMetaData().getDriverName().startsWith("DERBY Network Client JDBC Driver");
1: 
1: 			// if there is a problem getting the driver name we will
1: 			// assume it is not JCC or DNC.
/////////////////////////////////////////////////////////////////////////
1: 	boolean getIsDNC()
1: 	{
1: 		return isDNC;
1: 	}
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.ij.Session
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.tools.ij;
1: 
1: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.Hashtable;
1: 
1: /**
1: 	Session holds the objects local to a particular database session,
1: 	which starts with a connection and is all other JDBC
1: 	stuff used on that connection, along with some ij state
1: 	that is connection-based as well.
1: 
1: 	This is separated out to localize database objects and
1: 	also group objects by session.
1: 
0: 	@author ames
1:  */
1: class Session {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	static final String DEFAULT_NAME="CONNECTION";
1: 
1: 	boolean singleSession = true;
1: 	Connection conn = null;
1: 	String tag, name;
0: 	Hashtable prepStmts = new Hashtable();
0: 	Hashtable cursorStmts = new Hashtable();
0: 	Hashtable cursors = new Hashtable();
0: 	Hashtable asyncStmts = new Hashtable();
1: 	boolean isJCC= false;      // Is this the IBM UNIVERSAL DRIVER.
1: 
1: 	Session(Connection newConn, String newTag, String newName) {
1: 		conn = newConn;
1: 		tag = newTag;
1: 		name = newName;
1: 
1: 		try
1: 		{
1: 			isJCC = conn.getMetaData().getDriverName().startsWith("IBM DB2 JDBC Universal Driver");
1: 		}
1: 		catch (SQLException se)
1: 		{
0: 			// if there is a problem getting the driver name we will 
0: 			// assume it is not jcc.
1: 		}
1: 	}
1: 
1: 	Connection getConnection() {
1: 		// CHECK: should never be null
1: 		return conn;
1: 	}
1: 
1: 	boolean getIsJCC()
1: 	{
1: 		return isJCC;
1: 	}
1: 
1: 	String getName() {
1: 		return name;
1: 	}
1: 
0: 	Object addPreparedStatement(String name, PreparedStatement ps) {
1: 		return prepStmts.put(name,ps);
1: 	}
1: 
0: 	Object addCursorStatement(String name, Statement s) {
1: 		return cursorStmts.put(name, s);
1: 	}
1: 
0: 	Object addCursor(String name, ResultSet rs) {
1: 		return cursors.put(name, rs);
1: 	}
1: 
0: 	Object addAsyncStatement(String name, AsyncStatement s) {
1: 		return asyncStmts.put(name, s);
1: 	}
1: 
1: 	PreparedStatement getPreparedStatement(String name) {
0: 		return (PreparedStatement) prepStmts.get(name);
1: 	}
1: 
1: 	Statement getCursorStatement(String name) {
0: 		return (Statement)cursorStmts.get(name);
1: 	}
1: 
1: 	ResultSet getCursor(String name) {
0: 		return (ResultSet)cursors.get(name);
1: 	}
1: 
1: 	AsyncStatement getAsyncStatement(String name) {
0: 		return (AsyncStatement)asyncStmts.get(name);
1: 	}
1: 
1: 	boolean removePreparedStatement(String name) {
1: 		return prepStmts.remove(name)!=null;
1: 	}
1: 
1: 	boolean removeCursorStatement(String name) {
1: 		return cursorStmts.remove(name)!=null;
1: 	}
1: 
1: 	boolean removeCursor(String name) {
1: 		return cursors.remove(name)!=null;
1: 	}
1: 
1:     void doPrompt(boolean newStatement, LocalizedOutput out, boolean multiSessions) {
1: 		// check if tag should be increased...
1: 		if (multiSessions && singleSession) {
1: 			singleSession = false;
1: 
1: 			if (tag == null) tag = "("+name+")";
1: 			else tag = tag.substring(0,tag.length()-1)+":"+name+")";
1: 		}
1: 
1: 		// check if tag should be reduced...
1: 		if (!multiSessions && !singleSession) {
1: 			singleSession = true;
1: 
1: 			if (tag == null) {}
1: 			else if (tag.length() == name.length()+2) tag = null;
1: 			else tag = tag.substring(0,tag.length()-2-name.length())+")";
1: 		}
1: 
1: 		utilMain.doPrompt(newStatement, out, tag);
1: 	}
1: 
1: 	void close() throws SQLException {
1: 
1: 		if (!conn.isClosed())
1: 		{
1: 			if  (!conn.getAutoCommit() && name != null && ! name.startsWith("XA"))
1: 				conn.rollback();
1: 			conn.close();
1: 		}
1: 
1: 		prepStmts.clear(); // should we check & close them individually?
1: 		cursorStmts.clear();
1: 		cursors.clear();
1: 		asyncStmts.clear();
1: 
1: 		conn = null;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.ij
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.ij;
0: 
0: import org.apache.derby.iapi.tools.i18n.LocalizedOutput;
0: 
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.Statement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.util.Hashtable;
0: 
0: /**
0: 	Session holds the objects local to a particular database session,
0: 	which starts with a connection and is all other JDBC
0: 	stuff used on that connection, along with some ij state
0: 	that is connection-based as well.
0: 
0: 	This is separated out to localize database objects and
0: 	also group objects by session.
0: 
0: 	@author ames
0:  */
0: class Session {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	static final String DEFAULT_NAME="CONNECTION";
0: 
0: 	boolean singleSession = true;
0: 	Connection conn = null;
0: 	String tag, name;
0: 	Hashtable prepStmts = new Hashtable();
0: 	Hashtable cursorStmts = new Hashtable();
0: 	Hashtable cursors = new Hashtable();
0: 	Hashtable asyncStmts = new Hashtable();
0: 	boolean isJCC= false;      // Is this the IBM UNIVERSAL DRIVER.
0: 
0: 	Session(Connection newConn, String newTag, String newName) {
0: 		conn = newConn;
0: 		tag = newTag;
0: 		name = newName;
0: 
0: 		try
0: 		{
0: 			isJCC = conn.getMetaData().getDriverName().startsWith("IBM DB2 JDBC Universal Driver");
0: 		}
0: 		catch (SQLException se)
0: 		{
0: 			// if there is a problem getting the driver name we will 
0: 			// assume it is not jcc.
0: 		}
0: 	}
0: 
0: 	Connection getConnection() {
0: 		// CHECK: should never be null
0: 		return conn;
0: 	}
0: 
0: 	boolean getIsJCC()
0: 	{
0: 		return isJCC;
0: 	}
0: 
0: 	String getName() {
0: 		return name;
0: 	}
0: 
0: 	Object addPreparedStatement(String name, PreparedStatement ps) {
0: 		return prepStmts.put(name,ps);
0: 	}
0: 
0: 	Object addCursorStatement(String name, Statement s) {
0: 		return cursorStmts.put(name, s);
0: 	}
0: 
0: 	Object addCursor(String name, ResultSet rs) {
0: 		return cursors.put(name, rs);
0: 	}
0: 
0: 	Object addAsyncStatement(String name, AsyncStatement s) {
0: 		return asyncStmts.put(name, s);
0: 	}
0: 
0: 	PreparedStatement getPreparedStatement(String name) {
0: 		return (PreparedStatement) prepStmts.get(name);
0: 	}
0: 
0: 	Statement getCursorStatement(String name) {
0: 		return (Statement)cursorStmts.get(name);
0: 	}
0: 
0: 	ResultSet getCursor(String name) {
0: 		return (ResultSet)cursors.get(name);
0: 	}
0: 
0: 	AsyncStatement getAsyncStatement(String name) {
0: 		return (AsyncStatement)asyncStmts.get(name);
0: 	}
0: 
0: 	boolean removePreparedStatement(String name) {
0: 		return prepStmts.remove(name)!=null;
0: 	}
0: 
0: 	boolean removeCursorStatement(String name) {
0: 		return cursorStmts.remove(name)!=null;
0: 	}
0: 
0: 	boolean removeCursor(String name) {
0: 		return cursors.remove(name)!=null;
0: 	}
0: 
0:     void doPrompt(boolean newStatement, LocalizedOutput out, boolean multiSessions) {
0: 		// check if tag should be increased...
0: 		if (multiSessions && singleSession) {
0: 			singleSession = false;
0: 
0: 			if (tag == null) tag = "("+name+")";
0: 			else tag = tag.substring(0,tag.length()-1)+":"+name+")";
0: 		}
0: 
0: 		// check if tag should be reduced...
0: 		if (!multiSessions && !singleSession) {
0: 			singleSession = true;
0: 
0: 			if (tag == null) {}
0: 			else if (tag.length() == name.length()+2) tag = null;
0: 			else tag = tag.substring(0,tag.length()-2-name.length())+")";
0: 		}
0: 
0: 		utilMain.doPrompt(newStatement, out, tag);
0: 	}
0: 
0: 	void close() throws SQLException {
0: 
0: 		if (!conn.isClosed())
0: 		{
0: 			if  (!conn.getAutoCommit() && name != null && ! name.startsWith("XA"))
0: 				conn.rollback();
0: 			conn.close();
0: 		}
0: 
0: 		prepStmts.clear(); // should we check & close them individually?
0: 		cursorStmts.clear();
0: 		cursors.clear();
0: 		asyncStmts.clear();
0: 
0: 		conn = null;
0: 	}
0: 
0: }
============================================================================