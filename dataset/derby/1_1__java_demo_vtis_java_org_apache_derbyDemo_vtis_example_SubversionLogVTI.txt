1:b7ecfd9: /*
1:b7ecfd9: 
1:b7ecfd9: Derby - Class org.apache.derbyDemo.vtis.example.SubversionLogVTI
1:b7ecfd9: 
1:b7ecfd9: Licensed to the Apache Software Foundation (ASF) under one or more
1:b7ecfd9: contributor license agreements.  See the NOTICE file distributed with
1:b7ecfd9: this work for additional information regarding copyright ownership.
1:b7ecfd9: The ASF licenses this file to You under the Apache License, Version 2.0
1:b7ecfd9: (the "License"); you may not use this file except in compliance with
1:b7ecfd9: the License.  You may obtain a copy of the License at
1:b7ecfd9: 
1:b7ecfd9: http://www.apache.org/licenses/LICENSE-2.0
1:b7ecfd9: 
1:b7ecfd9: Unless required by applicable law or agreed to in writing, software
1:b7ecfd9: distributed under the License is distributed on an "AS IS" BASIS,
1:b7ecfd9: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7ecfd9: See the License for the specific language governing permissions and
1:b7ecfd9: limitations under the License.
1:b7ecfd9: 
1:b7ecfd9: */
1:b7ecfd9: 
1:b7ecfd9: package org.apache.derbyDemo.vtis.example;
1:b7ecfd9: 
1:b7ecfd9: import java.io.*;
1:b7ecfd9: import java.sql.*;
1:b7ecfd9: import java.text.SimpleDateFormat;
1:b7ecfd9: 
1:b7ecfd9: import org.apache.derbyDemo.vtis.core.*;
1:b7ecfd9: 
1:b7ecfd9: /**
1:b7ecfd9:  * <p>
1:b7ecfd9:  * This VTI makes a table out of the output of the subversion log ("svn log") command.
1:b7ecfd9:  * </p>
1:b7ecfd9:  */
1:b7ecfd9: public    class   SubversionLogVTI  extends FlatFileVTI
1:b7ecfd9: {
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTANTS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     private static  final   String[]    COLUMN_NAMES =
1:b7ecfd9:     {
1:b7ecfd9:         "XID", "committer", "commit_time", "line_count", "description"
1:b7ecfd9:     };
1:b7ecfd9: 
1:b7ecfd9:     private static  final   int XID = 0;
1:b7ecfd9:     private static  final   int COMMITTER = XID + 1;
1:b7ecfd9:     private static  final   int COMMIT_TIME = COMMITTER + 1;
1:b7ecfd9:     private static  final   int LINE_COUNT = COMMIT_TIME + 1;
1:b7ecfd9:     private static  final   int DESCRIPTION = LINE_COUNT + 1;
1:b7ecfd9: 
1:b7ecfd9:     private static  final   String  RECORD_HEADER = "------------------------------------------------------------------------";
1:b7ecfd9:     
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // STATE
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     private SimpleDateFormat    _dateFormatter;
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTRUCTORS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Build a SubversionLogVTI given the name of the output file created by the
1:b7ecfd9:      * "svn log" command.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public  SubversionLogVTI( String logFileName )
1:b7ecfd9:     {
1:b7ecfd9:         super( COLUMN_NAMES, logFileName );
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // TABLE FUNCTION METHOD
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * This is the method which is registered as a table function.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public  static  ResultSet   subversionLogVTI( String logFileName )
1:b7ecfd9:         throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         return new SubversionLogVTI( logFileName );
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Parse the next chunk of text, using readLine(), and return the next row.
1:b7ecfd9:      * Returns null if the file is exhausted.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected  String[]  parseRow( ) throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         String[]    newRow = new String[ COLUMN_NAMES.length ];
1:b7ecfd9: 
1:b7ecfd9:         String      headerLine = readNextLine();
1:b7ecfd9: 
1:b7ecfd9:         if ( headerLine == null ) { return null; }
1:b7ecfd9:         if ( !isRecordHeader( headerLine ) )
1:b7ecfd9:         {
1:b7ecfd9:             throw new SQLException( "Badly formatted record header: " + headerLine );
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         // the next line has all of the columns except for DESCRIPTION
1:b7ecfd9: 
1:b7ecfd9:         String      mainline = readNextLine();
1:b7ecfd9: 
1:b7ecfd9:         if ( mainline == null ) { return null; }
1:b7ecfd9:         
1:b7ecfd9:         int         oldIdx[] = new int[ 1 ];
1:b7ecfd9: 
1:b7ecfd9:         oldIdx[ 0 ] = 0;
1:b7ecfd9: 
1:b7ecfd9:         for ( int i = 0; i < DESCRIPTION; i++ ) { newRow[ i ] = readField( mainline, oldIdx ); }
1:b7ecfd9: 
1:b7ecfd9:         // get the number of lines in the DESCRIPTION
1:b7ecfd9:         int     descriptionLineCount = 0;
1:b7ecfd9: 
1:b7ecfd9:         try {
1:b7ecfd9:             String  lineCountField = newRow[ LINE_COUNT ];
1:b7ecfd9: 
1:b7ecfd9:             if ( lineCountField != null )
1:b7ecfd9:             {
1:b7ecfd9:                 lineCountField = lineCountField.trim();
1:b7ecfd9:                 String  numberString = lineCountField.substring( 0, lineCountField.indexOf( ' ' ) );
1:b7ecfd9: 
1:b7ecfd9:                 descriptionLineCount = Integer.parseInt( numberString );
1:b7ecfd9:             }
1:b7ecfd9:         }
1:b7ecfd9:         catch ( Throwable t )
1:b7ecfd9:         {
1:b7ecfd9:             throw wrap( "Error parsing description line count at line " + getLineNumber() + ": " + mainline, t );
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         // account for extra blank line
1:b7ecfd9:         descriptionLineCount++;
1:b7ecfd9: 
1:b7ecfd9:         // the rest of the record is the DESCRIPTION
1:b7ecfd9: 
1:b7ecfd9:         StringBuffer buffer = new StringBuffer();
1:b7ecfd9: 
1:b7ecfd9:         for ( int i = 0; i < descriptionLineCount; i++ )
1:b7ecfd9:         {
1:b7ecfd9:             String  nextLine = readNextLine();
1:b7ecfd9:             
1:b7ecfd9:             buffer.append( nextLine );
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         newRow[ DESCRIPTION ] = buffer.toString();
1:b7ecfd9: 
1:b7ecfd9:         return newRow;
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // ResultSet METHOD
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Subversion formats timestamps thusly: "2007-09-16 11:17:37 -0700 (Sun, 16 Sep 2007)"
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         String          columnValue = getString( columnIndex ).trim();
1:b7ecfd9: 
1:b7ecfd9:         try {
1:b7ecfd9:             SimpleDateFormat    dateFormatter = getDateFormatter();
1:b7ecfd9:             java.util.Date      rawDate = dateFormatter.parse( columnValue );
1:b7ecfd9:             long                time = rawDate.getTime();
1:b7ecfd9: 
1:b7ecfd9:             return new java.sql.Timestamp( time );            
1:b7ecfd9: 
1:b7ecfd9:         } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // MINIONS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Read the next field in the main line of the record. Fields are delimited
1:b7ecfd9:      * by | or line-end.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     private String  readField( String mainline, int[] oldIdx )
1:b7ecfd9:         throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         String      result = null;
1:b7ecfd9:         int           fieldStart = oldIdx[ 0 ];
1:b7ecfd9: 
1:b7ecfd9:         int           fieldEnd = mainline.indexOf( "|", fieldStart );
1:b7ecfd9: 
1:b7ecfd9:         if ( fieldEnd < 0 ) { fieldEnd = mainline.length(); }
1:b7ecfd9: 
1:b7ecfd9:         // this can happen, if for instance, we encounter a badly formatted record
1:b7ecfd9:         if ( fieldStart > fieldEnd ) { return null; }
1:b7ecfd9: 
1:b7ecfd9:         try {
1:b7ecfd9:             result = mainline.substring( fieldStart, fieldEnd );
1:b7ecfd9: 
1:b7ecfd9:             if ( result != null ) { result = result.trim(); }
1:b7ecfd9:             
1:b7ecfd9:         } catch (Throwable t)
1:b7ecfd9:         {
1:b7ecfd9:             throw wrap( "Bad record at line " + getLineNumber() + ". Field start = " + fieldStart + ", fieldEnd = " + fieldEnd + ": " + mainline, t );
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         oldIdx[ 0 ] = fieldEnd + 1;
1:b7ecfd9: 
1:b7ecfd9:         return result;
1:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Returns true if a line is a record header.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     private boolean isRecordHeader( String line )
1:b7ecfd9:     {
1:b7ecfd9:         if ( line.startsWith( RECORD_HEADER ) ) { return true; }
1:b7ecfd9:         else { return false; }
1:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Read a line, possibly just using the last line that was pushed back.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     private String  readNextLine()  throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         String      retval;
1:b7ecfd9:         
1:b7ecfd9:         retval = readLine();
1:b7ecfd9: 
1:b7ecfd9:         return retval;
1:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Subversion formats timestamps thusly: "2007-09-16 11:17:37 -0700 (Sun, 16 Sep 2007)"
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     private SimpleDateFormat    getDateFormatter()
1:b7ecfd9:     {
1:b7ecfd9:         if ( _dateFormatter == null )
1:b7ecfd9:         {
1:b7ecfd9:             _dateFormatter = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss Z (EEE, dd MMM yyyy)" );
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         return _dateFormatter;
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9: 
1:b7ecfd9: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b7ecfd9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyDemo.vtis.example.SubversionLogVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyDemo.vtis.example;
1: 
1: import java.io.*;
1: import java.sql.*;
1: import java.text.SimpleDateFormat;
1: 
1: import org.apache.derbyDemo.vtis.core.*;
1: 
1: /**
1:  * <p>
1:  * This VTI makes a table out of the output of the subversion log ("svn log") command.
1:  * </p>
1:  */
1: public    class   SubversionLogVTI  extends FlatFileVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String[]    COLUMN_NAMES =
1:     {
1:         "XID", "committer", "commit_time", "line_count", "description"
1:     };
1: 
1:     private static  final   int XID = 0;
1:     private static  final   int COMMITTER = XID + 1;
1:     private static  final   int COMMIT_TIME = COMMITTER + 1;
1:     private static  final   int LINE_COUNT = COMMIT_TIME + 1;
1:     private static  final   int DESCRIPTION = LINE_COUNT + 1;
1: 
1:     private static  final   String  RECORD_HEADER = "------------------------------------------------------------------------";
1:     
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private SimpleDateFormat    _dateFormatter;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Build a SubversionLogVTI given the name of the output file created by the
1:      * "svn log" command.
1:      * </p>
1:      */
1:     public  SubversionLogVTI( String logFileName )
1:     {
1:         super( COLUMN_NAMES, logFileName );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TABLE FUNCTION METHOD
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * <p>
1:      * This is the method which is registered as a table function.
1:      * </p>
1:      */
1:     public  static  ResultSet   subversionLogVTI( String logFileName )
1:         throws SQLException
1:     {
1:         return new SubversionLogVTI( logFileName );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Parse the next chunk of text, using readLine(), and return the next row.
1:      * Returns null if the file is exhausted.
1:      * </p>
1:      */
1:     protected  String[]  parseRow( ) throws SQLException
1:     {
1:         String[]    newRow = new String[ COLUMN_NAMES.length ];
1: 
1:         String      headerLine = readNextLine();
1: 
1:         if ( headerLine == null ) { return null; }
1:         if ( !isRecordHeader( headerLine ) )
1:         {
1:             throw new SQLException( "Badly formatted record header: " + headerLine );
1:         }
1: 
1:         // the next line has all of the columns except for DESCRIPTION
1: 
1:         String      mainline = readNextLine();
1: 
1:         if ( mainline == null ) { return null; }
1:         
1:         int         oldIdx[] = new int[ 1 ];
1: 
1:         oldIdx[ 0 ] = 0;
1: 
1:         for ( int i = 0; i < DESCRIPTION; i++ ) { newRow[ i ] = readField( mainline, oldIdx ); }
1: 
1:         // get the number of lines in the DESCRIPTION
1:         int     descriptionLineCount = 0;
1: 
1:         try {
1:             String  lineCountField = newRow[ LINE_COUNT ];
1: 
1:             if ( lineCountField != null )
1:             {
1:                 lineCountField = lineCountField.trim();
1:                 String  numberString = lineCountField.substring( 0, lineCountField.indexOf( ' ' ) );
1: 
1:                 descriptionLineCount = Integer.parseInt( numberString );
1:             }
1:         }
1:         catch ( Throwable t )
1:         {
1:             throw wrap( "Error parsing description line count at line " + getLineNumber() + ": " + mainline, t );
1:         }
1: 
1:         // account for extra blank line
1:         descriptionLineCount++;
1: 
1:         // the rest of the record is the DESCRIPTION
1: 
1:         StringBuffer buffer = new StringBuffer();
1: 
1:         for ( int i = 0; i < descriptionLineCount; i++ )
1:         {
1:             String  nextLine = readNextLine();
1:             
1:             buffer.append( nextLine );
1:         }
1: 
1:         newRow[ DESCRIPTION ] = buffer.toString();
1: 
1:         return newRow;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ResultSet METHOD
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Subversion formats timestamps thusly: "2007-09-16 11:17:37 -0700 (Sun, 16 Sep 2007)"
1:      * </p>
1:      */
1:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException
1:     {
1:         String          columnValue = getString( columnIndex ).trim();
1: 
1:         try {
1:             SimpleDateFormat    dateFormatter = getDateFormatter();
1:             java.util.Date      rawDate = dateFormatter.parse( columnValue );
1:             long                time = rawDate.getTime();
1: 
1:             return new java.sql.Timestamp( time );            
1: 
1:         } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Read the next field in the main line of the record. Fields are delimited
1:      * by | or line-end.
1:      * </p>
1:      */
1:     private String  readField( String mainline, int[] oldIdx )
1:         throws SQLException
1:     {
1:         String      result = null;
1:         int           fieldStart = oldIdx[ 0 ];
1: 
1:         int           fieldEnd = mainline.indexOf( "|", fieldStart );
1: 
1:         if ( fieldEnd < 0 ) { fieldEnd = mainline.length(); }
1: 
1:         // this can happen, if for instance, we encounter a badly formatted record
1:         if ( fieldStart > fieldEnd ) { return null; }
1: 
1:         try {
1:             result = mainline.substring( fieldStart, fieldEnd );
1: 
1:             if ( result != null ) { result = result.trim(); }
1:             
1:         } catch (Throwable t)
1:         {
1:             throw wrap( "Bad record at line " + getLineNumber() + ". Field start = " + fieldStart + ", fieldEnd = " + fieldEnd + ": " + mainline, t );
1:         }
1: 
1:         oldIdx[ 0 ] = fieldEnd + 1;
1: 
1:         return result;
1:     }
1:     
1:     /**
1:      * <p>
1:      * Returns true if a line is a record header.
1:      * </p>
1:      */
1:     private boolean isRecordHeader( String line )
1:     {
1:         if ( line.startsWith( RECORD_HEADER ) ) { return true; }
1:         else { return false; }
1:     }
1:     
1:     /**
1:      * <p>
1:      * Read a line, possibly just using the last line that was pushed back.
1:      * </p>
1:      */
1:     private String  readNextLine()  throws SQLException
1:     {
1:         String      retval;
1:         
1:         retval = readLine();
1: 
1:         return retval;
1:     }
1:     
1:     /**
1:      * <p>
1:      * Subversion formats timestamps thusly: "2007-09-16 11:17:37 -0700 (Sun, 16 Sep 2007)"
1:      * </p>
1:      */
1:     private SimpleDateFormat    getDateFormatter()
1:     {
1:         if ( _dateFormatter == null )
1:         {
1:             _dateFormatter = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss Z (EEE, dd MMM yyyy)" );
1:         }
1: 
1:         return _dateFormatter;
1:     }
1: 
1: 
1: }
============================================================================