1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.InsertVTIResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: 
1:eac0369: import org.apache.derby.vti.DeferModification;
1:eac0369: 
1:eac0369: import java.sql.PreparedStatement;
1:eac0369: import java.sql.ResultSet;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Insert the rows from the source into the specified
1:eac0369:  * base table. This will cause constraints to be checked
1:eac0369:  * and triggers to be executed based on the c's and t's
1:eac0369:  * compiled into the insert plan.
1:eac0369:  */
1:6bc9897: class InsertVTIResultSet extends DMLVTIResultSet
3:eac0369: {
1:eac0369: 
1:eac0369: 	private PreparedStatement		ps;
1:eac0369: 	private VTIResultSet			vtiRS;
1:eac0369: 	private java.sql.ResultSet		rs;
1:eac0369: 
1:eac0369: 	private	TemporaryRowHolderImpl	rowHolder;
1:eac0369: 
1:eac0369:     /**
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369:      */
1:eac0369:     public InsertVTIResultSet(NoPutResultSet source, 
1:eac0369: 							  NoPutResultSet vtiRS,
1:eac0369: 						   Activation activation)
2:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369: 		super(source, activation);
1:eac0369: 		this.vtiRS = (VTIResultSet) vtiRS;
2:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	protected void openCore() throws StandardException
1:eac0369: 	{
1:eac0369: 		/* We must instantiate the VTI on each execution if any of the
1:eac0369: 		 * parameters contain a ?.
1:eac0369: 		 */
1:eac0369: 		if (ps == null) 
1:eac0369: 		{
1:eac0369: 			ps = (PreparedStatement) vtiRS.getVTIConstructor().invoke(activation);
1:eac0369: 		}
1:eac0369: 
1:eac0369:         if( ps instanceof DeferModification)
1:eac0369:         {
1:eac0369:             try
1:eac0369:             {
1:eac0369:                 ((DeferModification) ps).modificationNotify( DeferModification.INSERT_STATEMENT, constants.deferred);
1:eac0369:             }
1:eac0369:             catch (Throwable t)
1:eac0369:             {
1:eac0369:                 throw StandardException.unexpectedUserException(t);
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:6bc9897: 		ExecRow row = getNextRowCore(sourceResultSet);
1:eac0369: 
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			rs = ps.executeQuery();
1:eac0369: 		}
1:eac0369: 		catch (Throwable t)
1:eac0369: 		{
1:eac0369: 			throw StandardException.unexpectedUserException(t);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* The source does not know whether or not we are doing a
1:eac0369: 		 * deferred mode insert.  If we are, then we must clear the
1:eac0369: 		 * index scan info from the activation so that the row changer
1:eac0369: 		 * does not re-use that information (which won't be valid for
1:eac0369: 		 * a deferred mode insert).
1:eac0369: 		 */
1:eac0369: 		if (constants.deferred)
1:eac0369: 		{
1:eac0369: 			activation.clearIndexScanInfo();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (firstExecute && constants.deferred)
1:eac0369: 		{
1:eac0369: 			Properties properties = new Properties();
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** If deferred we save a copy of the entire row.
1:eac0369: 			*/
1:81b9853: 			rowHolder =
1:c69c8b0: 				new TemporaryRowHolderImpl(activation, properties,
1:c69c8b0: 										   resultDescription);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		while ( row != null )
1:eac0369:         {
1:eac0369: 			/*
1:eac0369: 			** If we're doing a deferred insert, insert into the temporary
1:eac0369: 			** conglomerate.  Otherwise, insert directly into the permanent
1:eac0369: 			** conglomerates using the rowChanger.
1:eac0369: 			*/
1:eac0369: 			if (constants.deferred)
1:eac0369: 			{
1:eac0369: 				rowHolder.insert(row);
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:6bc9897: 				insertIntoVTI(rs, row);
1:eac0369: 			}
1:eac0369: 
1:eac0369:             rowCount++;
1:eac0369: 
1:eac0369: 			// No need to do a next on a single row source
1:eac0369: 			if (constants.singleRowSource)
1:eac0369: 			{
1:eac0369: 				row = null;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
2:eac0369: 				row = getNextRowCore(sourceResultSet);
1:eac0369: 			}
1:eac0369:         }
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If it's a deferred insert, scan the temporary conglomerate and
1:eac0369: 		** insert the rows into the permanent conglomerates using rowChanger.
1:eac0369: 		*/
1:eac0369: 		if (constants.deferred)
1:eac0369: 		{
1:eac0369: 			CursorResultSet tempRS = rowHolder.getResultSet();
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				tempRS.open();
1:6bc9897: 				while ((row = tempRS.getNextRow()) != null)
1:eac0369: 				{
1:6bc9897: 					insertIntoVTI(rs, row);
1:eac0369: 				}
1:eac0369: 			} finally
1:eac0369: 			{
1:eac0369: 				sourceResultSet.clearCurrentRow();
1:eac0369: 				tempRS.close();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (rowHolder != null)
1:eac0369: 		{
1:eac0369: 			rowHolder.close();
1:eac0369: 			// rowHolder kept across opens
1:eac0369: 		}
1:eac0369:     } // end of normalInsertCore
1:eac0369: 
1:6bc9897: 	private void insertIntoVTI(ResultSet target, ExecRow row)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			target.moveToInsertRow();
1:eac0369: 
1:eac0369: 			DataValueDescriptor[] rowArray = row.getRowArray();
1:eac0369: 			for (int index = 0; index < rowArray.length; index++)
1:eac0369: 			{
1:eac0369: 				DataValueDescriptor dvd = rowArray[index];
1:eac0369: 
1:eac0369: 				try {
1:eac0369: 					if (dvd.isNull())
1:eac0369: 						target.updateNull(index + 1);
1:eac0369: 					else
1:eac0369: 						dvd.setInto(target, index + 1);
1:eac0369: 				} catch (Throwable t) {
1:eac0369: 					// backwards compatibility - 5.0 and before used
1:eac0369: 					// updateObject always.
1:eac0369: 					target.updateObject(index + 1, dvd.getObject());
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			target.insertRow();
1:eac0369: 		}
1:eac0369: 		catch (Throwable t)
1:eac0369: 		{
1:eac0369: 			throw StandardException.unexpectedUserException(t);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	cleanUp() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (rowHolder != null)
1:eac0369: 		{
1:eac0369: 			rowHolder.close();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (rs != null)
1:eac0369: 		{
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				rs.close();
1:eac0369: 			}
1:eac0369: 			catch (Throwable t)
1:eac0369: 			{
1:eac0369: 				throw StandardException.unexpectedUserException(t);
1:eac0369: 			}
1:eac0369: 			rs = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Close the ps if it needs to be instantiated on each execution
1:eac0369: 		if (!vtiRS.isReuseablePs() && ps != null)
1:eac0369: 		{
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				ps.close();
1:eac0369: 				ps = null;
1:eac0369: 			}
1:eac0369: 			catch (Throwable t)
1:eac0369: 			{
1:eac0369: 				throw StandardException.unexpectedUserException(t);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		super.cleanUp();
1:eac0369: 	} // end of cleanUp
1:eac0369: 
1:01632c2:     @Override
1:01632c2:     public void close() throws StandardException
1:01632c2:     {
1:01632c2:         close( false );
1:01632c2:     }
1:01632c2:                                
1:eac0369: 	// Class implementation
1:eac0369: 
1:eac0369: 	public void finish() throws StandardException {
1:eac0369: 
1:eac0369: 		if ((ps != null) && !vtiRS.isReuseablePs())
1:eac0369: 		{
1:eac0369: 			try
1:eac0369: 			{
1:eac0369: 				ps.close();
1:eac0369: 				ps = null;
1:eac0369: 			}
1:eac0369: 			catch (Throwable t)
1:eac0369: 			{
1:eac0369: 				throw StandardException.unexpectedUserException(t);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		super.finish();
1:eac0369: 	} // end of finish
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void close() throws StandardException
1:     {
1:         close( false );
1:     }
1:                                
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1: 				new TemporaryRowHolderImpl(activation, properties,
1: 										   resultDescription);
commit:300bbeb
/////////////////////////////////////////////////////////////////////////
commit:81b9853
/////////////////////////////////////////////////////////////////////////
1: 			rowHolder =
0: 				new TemporaryRowHolderImpl(activation, properties,
0: 										   resultDescription);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:88bb146
/////////////////////////////////////////////////////////////////////////
0: 				new TemporaryRowHolderImpl(activation, properties);
commit:6bc9897
/////////////////////////////////////////////////////////////////////////
1: class InsertVTIResultSet extends DMLVTIResultSet
/////////////////////////////////////////////////////////////////////////
1: 		ExecRow row = getNextRowCore(sourceResultSet);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				insertIntoVTI(rs, row);
/////////////////////////////////////////////////////////////////////////
1: 				while ((row = tempRS.getNextRow()) != null)
1: 					insertIntoVTI(rs, row);
/////////////////////////////////////////////////////////////////////////
1: 	private void insertIntoVTI(ResultSet target, ExecRow row)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.InsertVTIResultSet
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: 
1: import org.apache.derby.vti.DeferModification;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  * Insert the rows from the source into the specified
1:  * base table. This will cause constraints to be checked
1:  * and triggers to be executed based on the c's and t's
1:  * compiled into the insert plan.
1:  */
0: public class InsertVTIResultSet extends DMLVTIResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	private PreparedStatement		ps;
1: 	private VTIResultSet			vtiRS;
1: 	private java.sql.ResultSet		rs;
1: 
1: 	private	TemporaryRowHolderImpl	rowHolder;
1: 
1:     /**
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1:      */
1:     public InsertVTIResultSet(NoPutResultSet source, 
1: 							  NoPutResultSet vtiRS,
1: 						   Activation activation)
1: 		throws StandardException
1:     {
1: 		super(source, activation);
1: 		this.vtiRS = (VTIResultSet) vtiRS;
1: 	}
1: 	
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	protected void openCore() throws StandardException
1: 	{
1: 		/* We must instantiate the VTI on each execution if any of the
1: 		 * parameters contain a ?.
1: 		 */
1: 		if (ps == null) 
1: 		{
1: 			ps = (PreparedStatement) vtiRS.getVTIConstructor().invoke(activation);
1: 		}
1: 
1:         if( ps instanceof DeferModification)
1:         {
1:             try
1:             {
1:                 ((DeferModification) ps).modificationNotify( DeferModification.INSERT_STATEMENT, constants.deferred);
1:             }
1:             catch (Throwable t)
1:             {
1:                 throw StandardException.unexpectedUserException(t);
1:             }
1:         }
1: 
1: 		row = getNextRowCore(sourceResultSet);
1: 
1: 		try
1: 		{
1: 			rs = ps.executeQuery();
1: 		}
1: 		catch (Throwable t)
1: 		{
1: 			throw StandardException.unexpectedUserException(t);
1: 		}
0: 		normalInsertCore(lcc, firstExecute);
0: 	} // end of openCore
1: 
1: 
0: 	// Do the work for a "normal" insert
0: 	private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecute)
1: 		throws StandardException
1: 	{
0: 		/* Get or re-use the row changer.
0: 		 * NOTE: We need to set ourself as the top result set
0: 		 * if this is not the 1st execution.  (Done in constructor
0: 		 * for 1st execution.)
1: 		 */
0: 		if (! firstExecute)
1: 		{
0: 			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
1: 		}
1: 
1: 		/* The source does not know whether or not we are doing a
1: 		 * deferred mode insert.  If we are, then we must clear the
1: 		 * index scan info from the activation so that the row changer
1: 		 * does not re-use that information (which won't be valid for
1: 		 * a deferred mode insert).
1: 		 */
1: 		if (constants.deferred)
1: 		{
1: 			activation.clearIndexScanInfo();
1: 		}
1: 
1: 		if (firstExecute && constants.deferred)
1: 		{
1: 			Properties properties = new Properties();
1: 
1: 			/*
1: 			** If deferred we save a copy of the entire row.
1: 			*/
0: 			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
1: 		}
1: 
1: 		while ( row != null )
1:         {
1: 			/*
1: 			** If we're doing a deferred insert, insert into the temporary
1: 			** conglomerate.  Otherwise, insert directly into the permanent
1: 			** conglomerates using the rowChanger.
1: 			*/
1: 			if (constants.deferred)
1: 			{
1: 				rowHolder.insert(row);
1: 			}
1: 			else
1: 			{
0: 				insertIntoVTI(rs);
1: 			}
1: 
1:             rowCount++;
1: 
1: 			// No need to do a next on a single row source
1: 			if (constants.singleRowSource)
1: 			{
1: 				row = null;
1: 			}
1: 			else
1: 			{
1: 				row = getNextRowCore(sourceResultSet);
1: 			}
1:         }
1: 
1: 		/*
1: 		** If it's a deferred insert, scan the temporary conglomerate and
1: 		** insert the rows into the permanent conglomerates using rowChanger.
1: 		*/
1: 		if (constants.deferred)
1: 		{
1: 			CursorResultSet tempRS = rowHolder.getResultSet();
1: 			try
1: 			{
0:                 ExecRow	deferredRowBuffer = null;
1: 
1: 				tempRS.open();
0: 				while ((deferredRowBuffer = tempRS.getNextRow()) != null)
1: 				{
0: 					row = deferredRowBuffer;
0: 					insertIntoVTI(rs);
1: 				}
1: 			} finally
1: 			{
1: 				sourceResultSet.clearCurrentRow();
1: 				tempRS.close();
1: 			}
1: 		}
1: 
1: 		if (rowHolder != null)
1: 		{
1: 			rowHolder.close();
1: 			// rowHolder kept across opens
1: 		}
1:     } // end of normalInsertCore
1: 
0: 	private void insertIntoVTI(ResultSet target)
1: 		throws StandardException
1: 	{
1: 		try
1: 		{
1: 			target.moveToInsertRow();
1: 
1: 			DataValueDescriptor[] rowArray = row.getRowArray();
1: 			for (int index = 0; index < rowArray.length; index++)
1: 			{
1: 				DataValueDescriptor dvd = rowArray[index];
1: 
1: 				try {
1: 					if (dvd.isNull())
1: 						target.updateNull(index + 1);
1: 					else
1: 						dvd.setInto(target, index + 1);
1: 				} catch (Throwable t) {
1: 					// backwards compatibility - 5.0 and before used
1: 					// updateObject always.
1: 					target.updateObject(index + 1, dvd.getObject());
1: 				}
1: 			}
1: 
1: 			target.insertRow();
1: 		}
1: 		catch (Throwable t)
1: 		{
1: 			throw StandardException.unexpectedUserException(t);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public void	cleanUp() throws StandardException
1: 	{
1: 		if (rowHolder != null)
1: 		{
1: 			rowHolder.close();
1: 		}
1: 
1: 		if (rs != null)
1: 		{
1: 			try
1: 			{
1: 				rs.close();
1: 			}
1: 			catch (Throwable t)
1: 			{
1: 				throw StandardException.unexpectedUserException(t);
1: 			}
1: 			rs = null;
1: 		}
1: 
1: 		// Close the ps if it needs to be instantiated on each execution
1: 		if (!vtiRS.isReuseablePs() && ps != null)
1: 		{
1: 			try
1: 			{
1: 				ps.close();
1: 				ps = null;
1: 			}
1: 			catch (Throwable t)
1: 			{
1: 				throw StandardException.unexpectedUserException(t);
1: 			}
1: 		}
1: 		super.cleanUp();
1: 	} // end of cleanUp
1: 
1: 	// Class implementation
1: 
1: 	public void finish() throws StandardException {
1: 
1: 		if ((ps != null) && !vtiRS.isReuseablePs())
1: 		{
1: 			try
1: 			{
1: 				ps.close();
1: 				ps = null;
1: 			}
1: 			catch (Throwable t)
1: 			{
1: 				throw StandardException.unexpectedUserException(t);
1: 			}
1: 		}
1: 		super.finish();
1: 	} // end of finish
1: }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.vti.DeferModification;
0: 
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * Insert the rows from the source into the specified
0:  * base table. This will cause constraints to be checked
0:  * and triggers to be executed based on the c's and t's
0:  * compiled into the insert plan.
0:  */
0: public class InsertVTIResultSet extends DMLVTIResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0: 	private PreparedStatement		ps;
0: 	private VTIResultSet			vtiRS;
0: 	private java.sql.ResultSet		rs;
0: 
0: 	private	TemporaryRowHolderImpl	rowHolder;
0: 
0:     /**
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0:      */
0:     public InsertVTIResultSet(NoPutResultSet source, 
0: 							  NoPutResultSet vtiRS,
0: 						   Activation activation)
0: 		throws StandardException
0:     {
0: 		super(source, activation);
0: 		this.vtiRS = (VTIResultSet) vtiRS;
0: 	}
0: 	
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	protected void openCore() throws StandardException
0: 	{
0: 		/* We must instantiate the VTI on each execution if any of the
0: 		 * parameters contain a ?.
0: 		 */
0: 		if (ps == null) 
0: 		{
0: 			ps = (PreparedStatement) vtiRS.getVTIConstructor().invoke(activation);
0: 		}
0: 
0:         if( ps instanceof DeferModification)
0:         {
0:             try
0:             {
0:                 ((DeferModification) ps).modificationNotify( DeferModification.INSERT_STATEMENT, constants.deferred);
0:             }
0:             catch (Throwable t)
0:             {
0:                 throw StandardException.unexpectedUserException(t);
0:             }
0:         }
0: 
0: 		row = getNextRowCore(sourceResultSet);
0: 
0: 		try
0: 		{
0: 			rs = ps.executeQuery();
0: 		}
0: 		catch (Throwable t)
0: 		{
0: 			throw StandardException.unexpectedUserException(t);
0: 		}
0: 		normalInsertCore(lcc, firstExecute);
0: 	} // end of openCore
0: 
0: 
0: 	// Do the work for a "normal" insert
0: 	private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecute)
0: 		throws StandardException
0: 	{
0: 		/* Get or re-use the row changer.
0: 		 * NOTE: We need to set ourself as the top result set
0: 		 * if this is not the 1st execution.  (Done in constructor
0: 		 * for 1st execution.)
0: 		 */
0: 		if (! firstExecute)
0: 		{
0: 			lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);
0: 		}
0: 
0: 		/* The source does not know whether or not we are doing a
0: 		 * deferred mode insert.  If we are, then we must clear the
0: 		 * index scan info from the activation so that the row changer
0: 		 * does not re-use that information (which won't be valid for
0: 		 * a deferred mode insert).
0: 		 */
0: 		if (constants.deferred)
0: 		{
0: 			activation.clearIndexScanInfo();
0: 		}
0: 
0: 		if (firstExecute && constants.deferred)
0: 		{
0: 			Properties properties = new Properties();
0: 
0: 			/*
0: 			** If deferred we save a copy of the entire row.
0: 			*/
0: 			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
0: 		}
0: 
0: 		while ( row != null )
0:         {
0: 			/*
0: 			** If we're doing a deferred insert, insert into the temporary
0: 			** conglomerate.  Otherwise, insert directly into the permanent
0: 			** conglomerates using the rowChanger.
0: 			*/
0: 			if (constants.deferred)
0: 			{
0: 				rowHolder.insert(row);
0: 			}
0: 			else
0: 			{
0: 				insertIntoVTI(rs);
0: 			}
0: 
0:             rowCount++;
0: 
0: 			// No need to do a next on a single row source
0: 			if (constants.singleRowSource)
0: 			{
0: 				row = null;
0: 			}
0: 			else
0: 			{
0: 				row = getNextRowCore(sourceResultSet);
0: 			}
0:         }
0: 
0: 		/*
0: 		** If it's a deferred insert, scan the temporary conglomerate and
0: 		** insert the rows into the permanent conglomerates using rowChanger.
0: 		*/
0: 		if (constants.deferred)
0: 		{
0: 			CursorResultSet tempRS = rowHolder.getResultSet();
0: 			try
0: 			{
0:                 ExecRow	deferredRowBuffer = null;
0: 
0: 				tempRS.open();
0: 				while ((deferredRowBuffer = tempRS.getNextRow()) != null)
0: 				{
0: 					row = deferredRowBuffer;
0: 					insertIntoVTI(rs);
0: 				}
0: 			} finally
0: 			{
0: 				sourceResultSet.clearCurrentRow();
0: 				tempRS.close();
0: 			}
0: 		}
0: 
0: 		if (rowHolder != null)
0: 		{
0: 			rowHolder.close();
0: 			// rowHolder kept across opens
0: 		}
0:     } // end of normalInsertCore
0: 
0: 	private void insertIntoVTI(ResultSet target)
0: 		throws StandardException
0: 	{
0: 		try
0: 		{
0: 			target.moveToInsertRow();
0: 
0: 			DataValueDescriptor[] rowArray = row.getRowArray();
0: 			for (int index = 0; index < rowArray.length; index++)
0: 			{
0: 				DataValueDescriptor dvd = rowArray[index];
0: 
0: 				try {
0: 					if (dvd.isNull())
0: 						target.updateNull(index + 1);
0: 					else
0: 						dvd.setInto(target, index + 1);
0: 				} catch (Throwable t) {
0: 					// backwards compatibility - 5.0 and before used
0: 					// updateObject always.
0: 					target.updateObject(index + 1, dvd.getObject());
0: 				}
0: 			}
0: 
0: 			target.insertRow();
0: 		}
0: 		catch (Throwable t)
0: 		{
0: 			throw StandardException.unexpectedUserException(t);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.sql.ResultSet#cleanUp
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void	cleanUp() throws StandardException
0: 	{
0: 		if (rowHolder != null)
0: 		{
0: 			rowHolder.close();
0: 		}
0: 
0: 		if (rs != null)
0: 		{
0: 			try
0: 			{
0: 				rs.close();
0: 			}
0: 			catch (Throwable t)
0: 			{
0: 				throw StandardException.unexpectedUserException(t);
0: 			}
0: 			rs = null;
0: 		}
0: 
0: 		// Close the ps if it needs to be instantiated on each execution
0: 		if (!vtiRS.isReuseablePs() && ps != null)
0: 		{
0: 			try
0: 			{
0: 				ps.close();
0: 				ps = null;
0: 			}
0: 			catch (Throwable t)
0: 			{
0: 				throw StandardException.unexpectedUserException(t);
0: 			}
0: 		}
0: 		super.cleanUp();
0: 	} // end of cleanUp
0: 
0: 	// Class implementation
0: 
0: 	public void finish() throws StandardException {
0: 
0: 		if ((ps != null) && !vtiRS.isReuseablePs())
0: 		{
0: 			try
0: 			{
0: 				ps.close();
0: 				ps = null;
0: 			}
0: 			catch (Throwable t)
0: 			{
0: 				throw StandardException.unexpectedUserException(t);
0: 			}
0: 		}
0: 		super.finish();
0: 	} // end of finish
0: }
0: 
============================================================================