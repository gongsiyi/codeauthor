1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.ConnectionChild
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
11:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc;
1:eac0369: 
1:0e38470: import org.apache.derby.jdbc.InternalDriver;
1:1ae0d7d: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:3a6f4cf: import org.apache.derby.iapi.util.InterruptStatus;
1:eac0369: 
1:1ae0d7d: import java.security.AccessController;
1:1ae0d7d: import java.security.PrivilegedAction;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
4:eac0369: /**
1:5b2f5de: 	Any class in the embedded JDBC driver (ie this package) that needs to
1:eac0369: 	refer back to the EmbedConnection object extends this class.
1:eac0369: */
1:eac0369: 
1:867a530: abstract class ConnectionChild {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Local connection is the current EmbedConnection
1:eac0369: 	** object that we use for all our work.
1:eac0369: 	*/
1:5b2f5de: 	EmbedConnection localConn;
1:eac0369: 
1:a57220c:     /** Cached LanguageConnectionContext */
1:a57220c:     private LanguageConnectionContext   lcc;
1:a57220c: 
1:eac0369: 	/**	
1:eac0369: 		Factory for JDBC objects to be created.
1:eac0369: 	*/
1:5b2f5de: 	final InternalDriver factory;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Calendar for data operations.
1:eac0369: 	*/
1:eac0369: 	private java.util.Calendar cal;
1:eac0369: 
1:eac0369: 
1:5b2f5de: 	ConnectionChild(EmbedConnection conn) {
1:eac0369: 		super();
1:eac0369: 		localConn = conn;
1:eac0369: 		factory = conn.getLocalDriver();
9:eac0369: 	}
1:3a6f4cf: 
1:7cfb7e6: 	/**
1:eac0369: 		Return a reference to the EmbedConnection
1:7cfb7e6: 	*/
1:5b2f5de: 	final EmbedConnection getEmbedConnection() {
1:eac0369: 		return localConn;
1:eac0369: 	}
1:3a6f4cf: 
1:eac0369: 	/**
1:eac0369: 	 * Return an object to be used for connection
1:eac0369: 	 * synchronization.
1:eac0369: 	 */
1:5b2f5de: 	final Object getConnectionSynchronization()
3:eac0369: 	{
1:eac0369: 		return localConn.getConnectionSynchronization();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
2:eac0369: 		Handle any exception.
2:eac0369: 		@see EmbedConnection#handleException
2:eac0369: 		@exception SQLException thrown if can't handle
1:eac0369: 	*/
1:5b2f5de: 	final SQLException handleException(Throwable t)
2:eac0369: 			throws SQLException {
1:eac0369: 		return localConn.handleException(t);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		If Autocommit is on, note that a commit is needed.
1:eac0369: 		@see EmbedConnection#needCommit
1:eac0369: 	 */
1:5b2f5de: 	final void needCommit() {
1:eac0369: 		localConn.needCommit();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Perform a commit if one is needed.
1:eac0369: 		@see EmbedConnection#commitIfNeeded
1:eac0369: 		@exception SQLException thrown on failure
1:eac0369: 	 */
1:5b2f5de: 	final void commitIfNeeded() throws SQLException {
1:eac0369: 		//System.out.println(this + " <> " + localConn.getClass());
1:eac0369: 		//new Throwable("cin").printStackTrace(System.out);
1:eac0369: 		localConn.commitIfNeeded();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Perform a commit if autocommit is enabled.
1:eac0369: 		@see EmbedConnection#commitIfNeeded
1:eac0369: 		@exception SQLException thrown on failure
1:eac0369: 	 */
1:5b2f5de: 	final void commitIfAutoCommit() throws SQLException {
1:eac0369: 		//System.out.println(this + " <> " + localConn.getClass());
1:eac0369: 		//new Throwable("cin").printStackTrace(System.out);
1:eac0369: 		localConn.commitIfAutoCommit();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Setup the context stack (a.k.a. context manager)
1:eac0369: 		for this connection.
1:eac0369: 		@see EmbedConnection#setupContextStack
1:eac0369: 		@exception SQLException thrown on failure
1:eac0369: 	 */
1:5b2f5de: 	final void setupContextStack() throws SQLException {
1:eac0369: 		localConn.setupContextStack();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Setup the context stack (a.k.a. context manager)
1:eac0369: 		for this connection.
1:eac0369: 		@see EmbedConnection#restoreContextStack
1:eac0369: 		@exception SQLException thrown on failure
1:eac0369: 	 */
1:5b2f5de: 	final void restoreContextStack() throws SQLException {
1:eac0369: 		localConn.restoreContextStack();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get and save a unique calendar object for this JDBC object.
1:eac0369: 		No need to synchronize because multiple threads should not
1:eac0369: 		be using a single JDBC object. Even if they do there is only
1:eac0369: 		a small window where each would get its own Calendar for a
1:eac0369: 		single call.
1:eac0369: 	*/
1:5b2f5de: 	java.util.Calendar getCal() {
1:eac0369: 		if (cal == null)
1:eac0369: 			cal = new java.util.GregorianCalendar();
1:eac0369: 		return cal;
1:7cfb7e6: 	}
1:7cfb7e6: 
1:434e165:     static SQLException newSQLException(String messageId, Object... args) {
1:434e165:         return EmbedConnection.newSQLException(messageId, args);
1:7cfb7e6:     }
1:7cfb7e6: 
1:3a6f4cf:     protected static void restoreIntrFlagIfSeen(
1:3a6f4cf:         boolean pushStack, EmbedConnection ec) {
1:7cfb7e6: 
1:3a6f4cf:         if (pushStack) {
1:a57220c:             InterruptStatus.restoreIntrFlagIfSeen( getLCC( ec ) );
1:3a6f4cf:         } else {
1:3a6f4cf:             // no lcc if connection is closed:
1:3a6f4cf:             InterruptStatus.restoreIntrFlagIfSeen();
1:434e165:         }
1:3a6f4cf:     }
1:1ae0d7d:     
1:1ae0d7d: 	/**
1:a57220c: 	  *	Get and cache the LanguageConnectionContext for this connection.
1:a57220c: 	  */
1:a57220c: 	LanguageConnectionContext	getLanguageConnectionContext( final EmbedConnection conn )
1:a57220c: 	{
1:a57220c:         if ( lcc == null ) { lcc = getLCC( conn ); }
1:a57220c: 
1:a57220c:         return lcc;
1:a57220c: 	}
1:a57220c: 	/**
1:1ae0d7d: 	  *	Gets the LanguageConnectionContext for this connection.
1:1ae0d7d: 	  */
1:a57220c: 	static LanguageConnectionContext	getLCC( final EmbedConnection conn )
1:1ae0d7d: 	{
1:1ae0d7d:         return AccessController.doPrivileged
1:1ae0d7d:             (
1:1ae0d7d:              new PrivilegedAction<LanguageConnectionContext>()
1:1ae0d7d:              {
1:1ae0d7d:                  public LanguageConnectionContext run()
1:1ae0d7d:                  {
1:1ae0d7d:                      return conn.getLanguageConnection();
1:1ae0d7d:                  }
1:1ae0d7d:              }
1:1ae0d7d:              );
1:1ae0d7d: 	}
1:1ae0d7d: 
1:3a6f4cf: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a57220c
/////////////////////////////////////////////////////////////////////////
1:     /** Cached LanguageConnectionContext */
1:     private LanguageConnectionContext   lcc;
1: 
/////////////////////////////////////////////////////////////////////////
1:             InterruptStatus.restoreIntrFlagIfSeen( getLCC( ec ) );
/////////////////////////////////////////////////////////////////////////
1: 	  *	Get and cache the LanguageConnectionContext for this connection.
1: 	  */
1: 	LanguageConnectionContext	getLanguageConnectionContext( final EmbedConnection conn )
1: 	{
1:         if ( lcc == null ) { lcc = getLCC( conn ); }
1: 
1:         return lcc;
1: 	}
1: 	/**
1: 	static LanguageConnectionContext	getLCC( final EmbedConnection conn )
commit:1ae0d7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
0:             InterruptStatus.restoreIntrFlagIfSeen( getLanguageConnectionContext( ec ) );
1:     
1: 	/**
1: 	  *	Gets the LanguageConnectionContext for this connection.
1: 	  */
0: 	static LanguageConnectionContext	getLanguageConnectionContext( final EmbedConnection conn )
1: 	{
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<LanguageConnectionContext>()
1:              {
1:                  public LanguageConnectionContext run()
1:                  {
1:                      return conn.getLanguageConnection();
1:                  }
1:              }
1:              );
1: 	}
1: 
commit:4c2fc4a
/////////////////////////////////////////////////////////////////////////
commit:01c7f83
/////////////////////////////////////////////////////////////////////////
0:         case Types.DISTINCT:
0:         case Types.NULL:
0:         case Types.OTHER:
commit:7cfb7e6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.JDBC40Translation;
0: import org.apache.derby.iapi.reference.SQLState;
0: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Checks whether a data type is supported for
0:      * <code>setObject(int, Object, int)</code> and
0:      * <code>setObject(int, Object, int, int)</code>.
0:      *
0:      * @param dataType the data type to check
0:      * @exception SQLException if the type is not supported
1:      */
0:     public void checkForSupportedDataType(int dataType) throws SQLException {
1: 
0:         // JDBC 4.0 javadoc for setObject() says:
0:         //
0:         // Throws: (...) SQLFeatureNotSupportedException - if
0:         // targetSqlType is a ARRAY, BLOB, CLOB, DATALINK,
0:         // JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF,
0:         // ROWID, SQLXML or STRUCT data type and the JDBC driver does
0:         // not support this data type
0:         //
0:         // Of these types, we only support BLOB, CLOB and
0:         // (sort of) JAVA_OBJECT.
1: 
0:         switch (dataType) {
0:         case Types.ARRAY:
0:         case Types.DATALINK:
0:         case JDBC40Translation.NCHAR:
0:         case JDBC40Translation.NCLOB:
0:         case JDBC40Translation.NVARCHAR:
0:         case JDBC40Translation.LONGNVARCHAR:
0:         case Types.REF:
0:         case JDBC40Translation.REF_CURSOR:
0:         case JDBC40Translation.ROWID:
0:         case JDBC40Translation.SQLXML:
0:         case Types.STRUCT:
0:             throw newSQLException(SQLState.DATA_TYPE_NOT_SUPPORTED,
0:                                   Util.typeName(dataType));
1:         }
1:     }
1: 
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:434e165
/////////////////////////////////////////////////////////////////////////
1:     static SQLException newSQLException(String messageId, Object... args) {
1:         return EmbedConnection.newSQLException(messageId, args);
1:     }
commit:e33b8d8
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3a6f4cf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.InterruptStatus;
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected static void restoreIntrFlagIfSeen(
1:         boolean pushStack, EmbedConnection ec) {
1: 
1:         if (pushStack) {
0:             InterruptStatus.restoreIntrFlagIfSeen(ec.getLanguageConnection());
1:         } else {
1:             // no lcc if connection is closed:
1:             InterruptStatus.restoreIntrFlagIfSeen();
1:         }
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4161301
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5b2f5de
/////////////////////////////////////////////////////////////////////////
1: 	Any class in the embedded JDBC driver (ie this package) that needs to
0: 	static final boolean CLOSE = true;
0: 	static final boolean NOCLOSE = false;
1: 	EmbedConnection localConn;
1: 	final InternalDriver factory;
/////////////////////////////////////////////////////////////////////////
1: 	ConnectionChild(EmbedConnection conn) {
/////////////////////////////////////////////////////////////////////////
1: 	final EmbedConnection getEmbedConnection() {
/////////////////////////////////////////////////////////////////////////
1: 	final Object getConnectionSynchronization()
/////////////////////////////////////////////////////////////////////////
1: 	final SQLException handleException(Throwable t)
/////////////////////////////////////////////////////////////////////////
0: 	final SQLException handleException(Throwable t, boolean close)
/////////////////////////////////////////////////////////////////////////
1: 	final void needCommit() {
/////////////////////////////////////////////////////////////////////////
1: 	final void commitIfNeeded() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1: 	final void commitIfAutoCommit() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1: 	final void setupContextStack() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1: 	final void restoreContextStack() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1: 	java.util.Calendar getCal() {
0: 	SQLException newSQLException(String messageId) {
0: 	SQLException newSQLException(String messageId, Object arg1) {
0: 	SQLException newSQLException(String messageId, Object arg1, Object arg2) {
commit:0e38470
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.jdbc.InternalDriver;
/////////////////////////////////////////////////////////////////////////
0: 	protected final InternalDriver factory;
commit:867a530
/////////////////////////////////////////////////////////////////////////
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
/////////////////////////////////////////////////////////////////////////
1: abstract class ConnectionChild {
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.ConnectionChild
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
0: public abstract class ConnectionChild {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
0: import org.apache.derby.jdbc.Driver169;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.db.Database;
1: 
1: import java.sql.SQLException;
1: 
1: /**
0: 	Any class in the local JDBC driver (ie this package) that needs to
1: 	refer back to the EmbedConnection object extends this class.
1: */
1: 
0: public abstract class ConnectionChild { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
0: 	// parameters to handleException
0: 	protected static final boolean CLOSE = true;
0: 	protected static final boolean NOCLOSE = false;
1: 
1: 	/*
1: 	** Local connection is the current EmbedConnection
1: 	** object that we use for all our work.
1: 	*/
0: 	protected EmbedConnection localConn;
1: 
1: 	/**	
1: 		Factory for JDBC objects to be created.
1: 	*/
0: 	protected final Driver169 factory;
1: 
1: 	/**
1: 		Calendar for data operations.
1: 	*/
1: 	private java.util.Calendar cal;
1: 
1: 
0: 	protected ConnectionChild(EmbedConnection conn) {
1: 		super();
1: 		localConn = conn;
1: 		factory = conn.getLocalDriver();
1: 	}
1: 
1: 	/**
1: 		Return a reference to the EmbedConnection
1: 	*/
0: 	protected final EmbedConnection getEmbedConnection() {
1: 		return localConn;
1: 	}
1: 
1: 	/**
1: 	 * Return an object to be used for connection
1: 	 * synchronization.
1: 	 */
0: 	protected final Object getConnectionSynchronization()
1: 	{
1: 		return localConn.getConnectionSynchronization();
1: 	}
1: 
1: 	/**
1: 		Handle any exception.
1: 		@see EmbedConnection#handleException
1: 		@exception SQLException thrown if can't handle
1: 	*/
0: 	protected final SQLException handleException(Throwable t)
1: 			throws SQLException {
1: 		return localConn.handleException(t);
1: 	}
1: 
1: 	/**
1: 		Handle any exception.
1: 		@see EmbedConnection#handleException
1: 		@exception SQLException thrown if can't handle
1: 	*/
0: 	protected final SQLException handleException(Throwable t, boolean close)
1: 			throws SQLException {
0: 		return localConn.handleException(t, close);
1: 	}
1: 	/**
1: 		If Autocommit is on, note that a commit is needed.
1: 		@see EmbedConnection#needCommit
1: 	 */
0: 	protected final void needCommit() {
1: 		localConn.needCommit();
1: 	}
1: 
1: 	/**
1: 		Perform a commit if one is needed.
1: 		@see EmbedConnection#commitIfNeeded
1: 		@exception SQLException thrown on failure
1: 	 */
0: 	protected final void commitIfNeeded() throws SQLException {
1: 		//System.out.println(this + " <> " + localConn.getClass());
1: 		//new Throwable("cin").printStackTrace(System.out);
1: 		localConn.commitIfNeeded();
1: 	}
1: 
1: 	/**
1: 		Perform a commit if autocommit is enabled.
1: 		@see EmbedConnection#commitIfNeeded
1: 		@exception SQLException thrown on failure
1: 	 */
0: 	protected final void commitIfAutoCommit() throws SQLException {
1: 		//System.out.println(this + " <> " + localConn.getClass());
1: 		//new Throwable("cin").printStackTrace(System.out);
1: 		localConn.commitIfAutoCommit();
1: 	}
1: 
1: 	/**
1: 		Setup the context stack (a.k.a. context manager)
1: 		for this connection.
1: 		@see EmbedConnection#setupContextStack
1: 		@exception SQLException thrown on failure
1: 	 */
0: 	protected final void setupContextStack() throws SQLException {
1: 		localConn.setupContextStack();
1: 	}
1: 
1: 	/**
1: 		Setup the context stack (a.k.a. context manager)
1: 		for this connection.
1: 		@see EmbedConnection#restoreContextStack
1: 		@exception SQLException thrown on failure
1: 	 */
0: 	protected final void restoreContextStack() throws SQLException {
1: 		localConn.restoreContextStack();
1: 	}
1: 
0:     public ContextManager getContextManager()
1:     {
0:         return localConn.getContextManager();
1:     }
1: 
0:     public Database getDatabase()
1:     {
0:         return localConn.getDatabase();
1:     }
1: 
1: 	/**
1: 		Get and save a unique calendar object for this JDBC object.
1: 		No need to synchronize because multiple threads should not
1: 		be using a single JDBC object. Even if they do there is only
1: 		a small window where each would get its own Calendar for a
1: 		single call.
1: 	*/
0: 	protected java.util.Calendar getCal() {
1: 		if (cal == null)
1: 			cal = new java.util.GregorianCalendar();
1: 		return cal;
1: 	}
1: 
0: 	protected SQLException newSQLException(String messageId) {
0: 		return localConn.newSQLException(messageId);
1: 	}
0: 	protected SQLException newSQLException(String messageId, Object arg1) {
0: 		return localConn.newSQLException(messageId, arg1);
1: 	}
0: 	protected SQLException newSQLException(String messageId, Object arg1, Object arg2) {
0: 		return localConn.newSQLException(messageId, arg1, arg2);
1: 	}
1: }
1: 
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc;
0: 
0: import org.apache.derby.jdbc.Driver169;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.db.Database;
0: 
0: import java.sql.SQLException;
0: 
0: /**
0: 	Any class in the local JDBC driver (ie this package) that needs to
0: 	refer back to the EmbedConnection object extends this class.
0: */
0: 
0: public abstract class ConnectionChild { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	// parameters to handleException
0: 	protected static final boolean CLOSE = true;
0: 	protected static final boolean NOCLOSE = false;
0: 
0: 	/*
0: 	** Local connection is the current EmbedConnection
0: 	** object that we use for all our work.
0: 	*/
0: 	protected EmbedConnection localConn;
0: 
0: 	/**	
0: 		Factory for JDBC objects to be created.
0: 	*/
0: 	protected final Driver169 factory;
0: 
0: 	/**
0: 		Calendar for data operations.
0: 	*/
0: 	private java.util.Calendar cal;
0: 
0: 
0: 	protected ConnectionChild(EmbedConnection conn) {
0: 		super();
0: 		localConn = conn;
0: 		factory = conn.getLocalDriver();
0: 	}
0: 
0: 	/**
0: 		Return a reference to the EmbedConnection
0: 	*/
0: 	protected final EmbedConnection getEmbedConnection() {
0: 		return localConn;
0: 	}
0: 
0: 	/**
0: 	 * Return an object to be used for connection
0: 	 * synchronization.
0: 	 */
0: 	protected final Object getConnectionSynchronization()
0: 	{
0: 		return localConn.getConnectionSynchronization();
0: 	}
0: 
0: 	/**
0: 		Handle any exception.
0: 		@see EmbedConnection#handleException
0: 		@exception SQLException thrown if can't handle
0: 	*/
0: 	protected final SQLException handleException(Throwable t)
0: 			throws SQLException {
0: 		return localConn.handleException(t);
0: 	}
0: 
0: 	/**
0: 		Handle any exception.
0: 		@see EmbedConnection#handleException
0: 		@exception SQLException thrown if can't handle
0: 	*/
0: 	protected final SQLException handleException(Throwable t, boolean close)
0: 			throws SQLException {
0: 		return localConn.handleException(t, close);
0: 	}
0: 	/**
0: 		If Autocommit is on, note that a commit is needed.
0: 		@see EmbedConnection#needCommit
0: 	 */
0: 	protected final void needCommit() {
0: 		localConn.needCommit();
0: 	}
0: 
0: 	/**
0: 		Perform a commit if one is needed.
0: 		@see EmbedConnection#commitIfNeeded
0: 		@exception SQLException thrown on failure
0: 	 */
0: 	protected final void commitIfNeeded() throws SQLException {
0: 		//System.out.println(this + " <> " + localConn.getClass());
0: 		//new Throwable("cin").printStackTrace(System.out);
0: 		localConn.commitIfNeeded();
0: 	}
0: 
0: 	/**
0: 		Perform a commit if autocommit is enabled.
0: 		@see EmbedConnection#commitIfNeeded
0: 		@exception SQLException thrown on failure
0: 	 */
0: 	protected final void commitIfAutoCommit() throws SQLException {
0: 		//System.out.println(this + " <> " + localConn.getClass());
0: 		//new Throwable("cin").printStackTrace(System.out);
0: 		localConn.commitIfAutoCommit();
0: 	}
0: 
0: 	/**
0: 		Setup the context stack (a.k.a. context manager)
0: 		for this connection.
0: 		@see EmbedConnection#setupContextStack
0: 		@exception SQLException thrown on failure
0: 	 */
0: 	protected final void setupContextStack() throws SQLException {
0: 		localConn.setupContextStack();
0: 	}
0: 
0: 	/**
0: 		Setup the context stack (a.k.a. context manager)
0: 		for this connection.
0: 		@see EmbedConnection#restoreContextStack
0: 		@exception SQLException thrown on failure
0: 	 */
0: 	protected final void restoreContextStack() throws SQLException {
0: 		localConn.restoreContextStack();
0: 	}
0: 
0:     public ContextManager getContextManager()
0:     {
0:         return localConn.getContextManager();
0:     }
0: 
0:     public Database getDatabase()
0:     {
0:         return localConn.getDatabase();
0:     }
0: 
0: 	/**
0: 		Get and save a unique calendar object for this JDBC object.
0: 		No need to synchronize because multiple threads should not
0: 		be using a single JDBC object. Even if they do there is only
0: 		a small window where each would get its own Calendar for a
0: 		single call.
0: 	*/
0: 	protected java.util.Calendar getCal() {
0: 		if (cal == null)
0: 			cal = new java.util.GregorianCalendar();
0: 		return cal;
0: 	}
0: 
0: 	protected SQLException newSQLException(String messageId) {
0: 		return localConn.newSQLException(messageId);
0: 	}
0: 	protected SQLException newSQLException(String messageId, Object arg1) {
0: 		return localConn.newSQLException(messageId, arg1);
0: 	}
0: 	protected SQLException newSQLException(String messageId, Object arg1, Object arg2) {
0: 		return localConn.newSQLException(messageId, arg1, arg2);
0: 	}
0: }
0: 
0: 
============================================================================