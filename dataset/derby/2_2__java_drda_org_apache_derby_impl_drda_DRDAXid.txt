1:bc61783: /*
4:bc61783: 
1:bc61783:    Derby - Class org.apache.derby.impl.drda.DRDAXid.java
1:bc61783: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:bc61783: 
1:bc61783:       http://www.apache.org/licenses/LICENSE-2.0
1:bc61783: 
1:bc61783:    Unless required by applicable law or agreed to in writing, software
1:bc61783:    distributed under the License is distributed on an "AS IS" BASIS,
1:bc61783:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc61783:    See the License for the specific language governing permissions and
1:bc61783:    limitations under the License.
1:bc61783: 
2:bc61783:  */
1:bc61783: 
2:bc61783: /**
1:bc61783:  * This class provides an Xid implementation for Network Server XA
1:bc61783:  */
1:bc61783: 
1:bc61783: package org.apache.derby.impl.drda;
1:bc61783: import javax.transaction.xa.Xid;
1:bc61783: 
1:bc61783: class DRDAXid implements Xid
5:bc61783: {
1:bc61783: 
1:4f996a4:     private final int format_id;
1:4f996a4:     private final byte[] global_id;
1:4f996a4:     private final byte[] branch_id;
1:bc61783: 
1:bc61783: 
1:4f996a4:     DRDAXid(int formatid, byte[] globalid, byte[] branchid)
1:4f996a4:     {
1:bc61783: 
1:4f996a4:         format_id = formatid;
1:4f996a4:         global_id = globalid;
1:4f996a4:         branch_id = branchid;
1:4f996a4:         
1:4f996a4:     }
1:bc61783: 
1:bc61783:     /**
1:bc61783:      * Obtain the format id part of the Xid.
1:bc61783:      * <p>
2:bc61783:      *
1:bc61783:      * @return Format identifier. O means the OSI CCR format.
1:bc61783:      **/
1:bc61783:     public int getFormatId()
1:bc61783:     {
1:bc61783:         return(format_id);
5:bc61783:     }
1:bc61783: 
1:bc61783:     /**
1:bc61783:      * Obtain the global transaction identifier part of XID as an array of 
1:bc61783:      * bytes.
1:bc61783:      * <p>
1:bc61783:      *
1:4f996a4:      * @return A byte array containing the global transaction identifier.
1:bc61783:      **/
1:bc61783:     public byte[] getGlobalTransactionId()
1:bc61783:     {
1:bc61783:         return(global_id);
1:bc61783:     }
1:bc61783: 
1:bc61783:     /**
1:bc61783:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:bc61783:      * <p>
1:bc61783:      *
1:4f996a4:      * @return A byte array containing the branch qualifier of the transaction.
1:bc61783:      **/
1:bc61783:     public byte[] getBranchQualifier()
1:bc61783:     {
1:bc61783:         return(branch_id);
1:bc61783:     }
1:bc61783: 
1:4f996a4:     public String toString()
1:4f996a4:     {
1:4f996a4:         
1:4f996a4:        String s =  "{DRDAXid: " +
1:4f996a4:            "formatId("     + format_id   + "), " +
1:4f996a4:            "globalTransactionId(" +  convertToHexString(global_id) + ")" +
1:4f996a4:            "branchQualifier(" +  convertToHexString(branch_id) + ")";
1:4f996a4:        return s;
1:4f996a4:     }
1:bc61783: 
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      * convert byte array to a Hex string
1:4f996a4:      * 
1:4f996a4:      * @param buf buffer to  convert
1:4f996a4:      * @return hex string representation of byte array
1:4f996a4:      */
1:4f996a4:     private static String convertToHexString(byte [] buf)
1:4f996a4:     {
1:4f996a4:         if (buf == null)
1:4f996a4:             return null;
1:4f996a4:         StringBuffer str = new StringBuffer();
1:4f996a4:         str.append("0x");
1:4f996a4:         String val;
1:4f996a4:         int byteVal;
1:4f996a4:         for (int i = 0; i < buf.length; i++)
1:4f996a4:         {
1:4f996a4:             byteVal = buf[i] & 0xff;
1:4f996a4:             val = Integer.toHexString(byteVal);
1:4f996a4:             if (val.length() < 2)
1:4f996a4:                 str.append("0");
1:4f996a4:             str.append(val);
1:4f996a4:         }
1:4f996a4:         return str.toString();
1:4f996a4:     }
1:bc61783: }
1:bc61783: 
1:bc61783: 
1:bc61783: 
1:bc61783: 
1:bc61783: 
1:bc61783: 
1:bc61783: 
1:bc61783: 
1:bc61783: 
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     private final int format_id;
1:     private final byte[] global_id;
1:     private final byte[] branch_id;
1:     DRDAXid(int formatid, byte[] globalid, byte[] branchid)
1:     {
1:         format_id = formatid;
1:         global_id = globalid;
1:         branch_id = branchid;
1:         
1:     }
/////////////////////////////////////////////////////////////////////////
1:      * @return A byte array containing the global transaction identifier.
/////////////////////////////////////////////////////////////////////////
1:      * @return A byte array containing the branch qualifier of the transaction.
1:     public String toString()
1:     {
1:         
1:        String s =  "{DRDAXid: " +
1:            "formatId("     + format_id   + "), " +
1:            "globalTransactionId(" +  convertToHexString(global_id) + ")" +
1:            "branchQualifier(" +  convertToHexString(branch_id) + ")";
1:        return s;
1:     }
1:     /**
1:      * convert byte array to a Hex string
1:      * 
1:      * @param buf buffer to  convert
1:      * @return hex string representation of byte array
1:      */
1:     private static String convertToHexString(byte [] buf)
1:     {
1:         if (buf == null)
1:             return null;
1:         StringBuffer str = new StringBuffer();
1:         str.append("0x");
1:         String val;
1:         int byteVal;
1:         for (int i = 0; i < buf.length; i++)
1:         {
1:             byteVal = buf[i] & 0xff;
1:             val = Integer.toHexString(byteVal);
1:             if (val.length() < 2)
1:                 str.append("0");
1:             str.append(val);
1:         }
1:         return str.toString();
1:     }
commit:bc61783
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.drda.DRDAXid.java
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: /**
1:  * This class provides an Xid implementation for Network Server XA
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: import javax.transaction.xa.Xid;
1: 
1: class DRDAXid implements Xid
1: {
1: 
0: 	private final int format_id;
0: 	private final byte[] global_id;
0: 	private final byte[] branch_id;
1: 
1: 
0: 	DRDAXid(int formatid, byte[] globalid, byte[] branchid)
1: 	{
1: 
0: 		format_id = formatid;
0: 		global_id = globalid;
0: 		branch_id = branchid;
1: 		
1: 	}
1: 
1:     /**
1:      * Obtain the format id part of the Xid.
1:      * <p>
1:      *
1:      * @return Format identifier. O means the OSI CCR format.
1:      **/
1:     public int getFormatId()
1:     {
1:         return(format_id);
1:     }
1: 
1:     /**
1:      * Obtain the global transaction identifier part of XID as an array of 
1:      * bytes.
1:      * <p>
1:      *
0: 	 * @return A byte array containing the global transaction identifier.
1:      **/
1:     public byte[] getGlobalTransactionId()
1:     {
1:         return(global_id);
1:     }
1: 
1:     /**
1:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
1:      * <p>
1:      *
0: 	 * @return A byte array containing the branch qualifier of the transaction.
1:      **/
1:     public byte[] getBranchQualifier()
1:     {
1:         return(branch_id);
1:     }
1: 
0: 	public String toString()
1: 	{
1: 		
0: 	   String s =  "{DRDAXid: " +
0: 		   "formatId("     + format_id   + "), " +
0: 		   "globalTransactionId(" +  convertToHexString(global_id) + ")" +
0: 		   "branchQualifier(" +  convertToHexString(branch_id) + ")";
0: 	   return s;
1: 	}
1: 
1: 
1: 	/**
0: 	 * convert byte array to a Hex string
1: 	 * 
0: 	 * @param buf buffer to  convert
0: 	 * @return hex string representation of byte array
1: 	 */
0: 	private static String convertToHexString(byte [] buf)
1: 	{
0: 		if (buf == null)
0: 			return null;
0: 		StringBuffer str = new StringBuffer();
0: 		str.append("0x");
0: 		String val;
0: 		int byteVal;
0: 		for (int i = 0; i < buf.length; i++)
1: 		{
0: 			byteVal = buf[i] & 0xff;
0: 			val = Integer.toHexString(byteVal);
0: 			if (val.length() < 2)
0: 				str.append("0");
0: 			str.append(val);
1: 		}
0: 		return str.toString();
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
commit:4383496
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derby.impl.drda.DRDAXid.java
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: /**
0:  * This class provides an Xid implementation for Network Server XA
0:  */
0: 
0: package org.apache.derby.impl.drda;
0: import javax.transaction.xa.Xid;
0: 
0: class DRDAXid implements Xid
0: {
0: 
0: 	private final int format_id;
0: 	private final byte[] global_id;
0: 	private final byte[] branch_id;
0: 
0: 
0: 	DRDAXid(int formatid, byte[] globalid, byte[] branchid)
0: 	{
0: 
0: 		format_id = formatid;
0: 		global_id = globalid;
0: 		branch_id = branchid;
0: 		
0: 	}
0: 
0:     /**
0:      * Obtain the format id part of the Xid.
0:      * <p>
0:      *
0:      * @return Format identifier. O means the OSI CCR format.
0:      **/
0:     public int getFormatId()
0:     {
0:         return(format_id);
0:     }
0: 
0:     /**
0:      * Obtain the global transaction identifier part of XID as an array of 
0:      * bytes.
0:      * <p>
0:      *
0: 	 * @return A byte array containing the global transaction identifier.
0:      **/
0:     public byte[] getGlobalTransactionId()
0:     {
0:         return(global_id);
0:     }
0: 
0:     /**
0:      * Obtain the transaction branch qualifier part of the Xid in a byte array.
0:      * <p>
0:      *
0: 	 * @return A byte array containing the branch qualifier of the transaction.
0:      **/
0:     public byte[] getBranchQualifier()
0:     {
0:         return(branch_id);
0:     }
0: 
0: 	public String toString()
0: 	{
0: 		
0: 	   String s =  "{DRDAXid: " +
0: 		   "formatId("     + format_id   + "), " +
0: 		   "globalTransactionId(" +  convertToHexString(global_id) + ")" +
0: 		   "branchQualifier(" +  convertToHexString(branch_id) + ")";
0: 	   return s;
0: 	}
0: 
0: 
0: 	/**
0: 	 * convert byte array to a Hex string
0: 	 * 
0: 	 * @param buf buffer to  convert
0: 	 * @return hex string representation of byte array
0: 	 */
0: 	private static String convertToHexString(byte [] buf)
0: 	{
0: 		if (buf == null)
0: 			return null;
0: 		StringBuffer str = new StringBuffer();
0: 		str.append("0x");
0: 		String val;
0: 		int byteVal;
0: 		for (int i = 0; i < buf.length; i++)
0: 		{
0: 			byteVal = buf[i] & 0xff;
0: 			val = Integer.toHexString(byteVal);
0: 			if (val.length() < 2)
0: 				str.append("0");
0: 			str.append(val);
0: 		}
0: 		return str.toString();
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
============================================================================