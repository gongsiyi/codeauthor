1:eac0369: /*
33:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:4309044: import org.apache.derby.iapi.types.SQLBoolean;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:4309044: import org.apache.derby.iapi.types.UserType;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.ReferencedColumns;
1:eac0369: import org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:4309044: import org.apache.derby.iapi.types.SQLTimestamp;
1:eac0369: import java.sql.Timestamp;
1:082459a: import java.sql.Types;
1:531b469: import java.util.Calendar;
1:531b469: import java.util.TimeZone;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * Factory for creating a SYSTRIGGERS row.
4:eac0369:  *
1:eac0369:  *
1:eac0369:  * @version 0.1
1:eac0369:  */
1:eac0369: 
1:eac0369: public class SYSTRIGGERSRowFactory extends CatalogRowFactory
5:eac0369: {
1:eac0369: 	static	final	String	TABLENAME_STRING = "SYSTRIGGERS";
1:eac0369: 
1:eac0369: 	/* Column #s for sysinfo (1 based) */
1:eac0369: 	public	static	final	int		SYSTRIGGERS_TRIGGERID = 1;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_TRIGGERNAME = 2;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_SCHEMAID = 3;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_CREATIONTIMESTAMP = 4;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_EVENT = 5;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_FIRINGTIME = 6;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_TYPE = 7;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_STATE = TriggerDescriptor.SYSTRIGGERS_STATE_FIELD;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_TABLEID = 9;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_WHENSTMTID = 10;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_ACTIONSTMTID = 11;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_REFERENCEDCOLUMNS = 12;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_TRIGGERDEFINITION = 13;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_REFERENCINGOLD = 14;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_REFERENCINGNEW = 15;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_OLDREFERENCINGNAME = 16;
1:eac0369: 	public	static	final	int		SYSTRIGGERS_NEWREFERENCINGNAME = 17;
1:d9878ca:     public  static  final   int     SYSTRIGGERS_WHENCLAUSETEXT = 18;
1:eac0369: 
1:d9878ca:     public  static  final   int     SYSTRIGGERS_COLUMN_COUNT = SYSTRIGGERS_WHENCLAUSETEXT;
1:eac0369: 
1:eac0369: 	public  static final int		SYSTRIGGERS_INDEX1_ID = 0;
1:eac0369: 	public  static final int		SYSTRIGGERS_INDEX2_ID = 1;
1:eac0369: 	public  static final int		SYSTRIGGERS_INDEX3_ID = 2;
1:eac0369: 
1:eac0369: 	private static final int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{SYSTRIGGERS_TRIGGERID},
1:eac0369: 		{SYSTRIGGERS_TRIGGERNAME, SYSTRIGGERS_SCHEMAID},
1:eac0369: 		{SYSTRIGGERS_TABLEID, SYSTRIGGERS_CREATIONTIMESTAMP}
2:eac0369: 	};
1:eac0369: 
1:eac0369: 	private	static	final	boolean[]	uniqueness = {
1:eac0369: 													   true,
1:eac0369: 													   true,
1:eac0369: 													   false,
1:eac0369: 	                                                 };
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "c013800d-00d7-c025-4809-000a0a411200"	// catalog UUID
1:eac0369: 		,"c013800d-00d7-c025-480a-000a0a411200"	// heap UUID
1:eac0369: 		,"c013800d-00d7-c025-480b-000a0a411200"	// SYSTRIGGERS_INDEX1 
1:eac0369: 		,"c013800d-00d7-c025-480c-000a0a411200"	// SYSTRIGGERS_INDEX2
1:eac0369: 		,"c013800d-00d7-c025-480d-000a0a411200"	// SYSTRIGGERS_INDEX3
1:eac0369: 	};
1:eac0369: 
1:531b469:     /** TimeZone object representing Coordinated Universal Time. */
1:531b469:     private final static TimeZone UTC = TimeZone.getTimeZone("UTC");
1:531b469: 
1:d9878ca:     private final DataDictionary dataDictionary;
1:d9878ca: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:d9878ca:     SYSTRIGGERSRowFactory(
1:d9878ca:             DataDictionary dd,
1:d9878ca:             UUIDFactory uuidf,
1:d9878ca:             ExecutionFactory ef,
1:d9878ca:             DataValueFactory dvf)
1:d9878ca:         throws StandardException
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:d9878ca:         this.dataDictionary = dd;
1:eac0369: 		initInfo(SYSTRIGGERS_COLUMN_COUNT, TABLENAME_STRING, 
1:c2ff613: 				 indexColumnPositions,  uniqueness, uuids);
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Make a SYSTRIGGERS row. 
1:eac0369: 	 * 
1:eac0369: 	 * @return	Row suitable for inserting into SYSTRIGGERS.
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:d9878ca:     @Override
1:eac0369: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
2:eac0369: 		throws StandardException
1:eac0369: 	{
1:d9878ca:         return makeRow(td, getHeapColumnCount());
1:d9878ca:     }
1:d9878ca: 
1:d9878ca:     @Override
1:d9878ca:     public ExecRow makeEmptyRowForCurrentVersion() throws StandardException {
1:d9878ca:         return makeRow(null, SYSTRIGGERS_COLUMN_COUNT);
1:d9878ca:     }
1:d9878ca: 
1:d9878ca:     /**
1:d9878ca:      * Helper method that contains common logic for {@code makeRow()} and
1:d9878ca:      * {@code makeEmptyRowForCurrentVersion()}. Creates a row for the
1:d9878ca:      * SYSTRIGGERS conglomerate.
1:d9878ca:      *
1:d9878ca:      * @param td the {@code TriggerDescriptor} to create a row from (can be
1:d9878ca:      *   {@code null} if the returned row should be empty)
1:d9878ca:      * @param columnCount the number of columns in the returned row (used for
1:d9878ca:      *   trimming off columns in soft upgrade mode to match the format in
1:d9878ca:      *   the old dictionary version)
1:d9878ca:      * @return a row for the SYSTRIGGERS conglomerate
1:d9878ca:      * @throws StandardException if an error happens when creating the row
1:d9878ca:      */
1:d9878ca:     private ExecRow makeRow(TupleDescriptor td, int columnCount)
1:d9878ca:             throws StandardException {
1:eac0369: 		String					name = null;
1:eac0369: 		UUID					uuid = null;	
1:eac0369: 		UUID					suuid = null;			// schema	
1:eac0369: 		UUID					tuuid = null;			// referenced table	
1:eac0369: 		UUID					actionSPSID = null;		// action sps uuid string
1:eac0369: 		UUID					whenSPSID = null;		// when clause sps uuid string
1:eac0369: 		Timestamp				createTime = null;
1:eac0369: 		String					event = null;
1:eac0369: 		String					time = null;
1:eac0369: 		String					type = null;
1:eac0369: 		String					enabled = null;
1:eac0369: 		String					triggerDefinition = null;
1:eac0369: 		String					oldReferencingName = null;
1:eac0369: 		String					newReferencingName = null;
1:eac0369: 		ReferencedColumns rcd = null;
1:eac0369: 		boolean					referencingOld = false;
1:eac0369: 		boolean					referencingNew = false;
1:d9878ca:         String                  whenClauseText = null;
1:eac0369: 
1:eac0369: 		if (td != null)
1:eac0369: 		{
1:eac0369: 			TriggerDescriptor triggerDescriptor = (TriggerDescriptor)td;
1:eac0369: 			name = triggerDescriptor.getName();
1:eac0369: 			uuid = triggerDescriptor.getUUID();
1:eac0369: 			suuid = triggerDescriptor.getSchemaDescriptor().getUUID();
1:eac0369: 			createTime = triggerDescriptor.getCreationTimestamp();
1:eac0369: 			// for now we are assuming that a trigger can only listen to a single event
1:eac0369: 			event = triggerDescriptor.listensForEvent(TriggerDescriptor.TRIGGER_EVENT_UPDATE) ? "U" :
1:eac0369: 					triggerDescriptor.listensForEvent(TriggerDescriptor.TRIGGER_EVENT_DELETE) ? "D" : "I";
1:eac0369: 			time = triggerDescriptor.isBeforeTrigger() ? "B" : "A";
1:eac0369: 			type = triggerDescriptor.isRowTrigger() ? "R" : "S";
1:eac0369: 			enabled = triggerDescriptor.isEnabled() ? "E" : "D";
1:eac0369: 			tuuid = triggerDescriptor.getTableDescriptor().getUUID();
1:eac0369: 			int[] refCols = triggerDescriptor.getReferencedCols();
1:a6f9586: 			int[] refColsInTriggerAction = triggerDescriptor.getReferencedColsInTriggerAction();
1:a6f9586: 			rcd = (refCols != null || refColsInTriggerAction != null) ? new
1:a6f9586: 				ReferencedColumnsDescriptorImpl(refCols, refColsInTriggerAction) : null;
1:eac0369: 
1:eac0369: 			actionSPSID =  triggerDescriptor.getActionId();
1:eac0369: 			whenSPSID =  triggerDescriptor.getWhenClauseId();
1:eac0369: 			triggerDefinition = triggerDescriptor.getTriggerDefinition();
1:eac0369: 			referencingOld = triggerDescriptor.getReferencingOld();
1:eac0369: 			referencingNew = triggerDescriptor.getReferencingNew();
1:eac0369: 			oldReferencingName = triggerDescriptor.getOldReferencingName();
1:eac0369: 			newReferencingName = triggerDescriptor.getNewReferencingName();
1:d9878ca:             whenClauseText = triggerDescriptor.getWhenClauseText();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Build the row to insert */
1:d9878ca:         ExecRow row = getExecutionFactory().getValueRow(columnCount);
1:eac0369: 
1:eac0369: 		/* 1st column is TRIGGERID */
1:eb47bdb: 		row.setColumn(1, new SQLChar((uuid == null) ? null : uuid.toString()));
1:eac0369: 
1:eac0369: 		/* 2nd column is TRIGGERNAME */
1:eb47bdb: 		row.setColumn(2, new SQLVarchar(name));
1:eac0369: 
1:eac0369: 		/* 3rd column is SCHEMAID */
1:eb47bdb: 		row.setColumn(3, new SQLChar((suuid == null) ? null : suuid.toString()));
1:eac0369: 
1:eac0369: 		/* 4th column is CREATIONTIMESTAMP */
1:531b469:         SQLTimestamp creationTimestamp = (createTime == null)
1:531b469:             ? new SQLTimestamp(null)
1:531b469:             : new SQLTimestamp(createTime, getCalendarForCreationTimestamp());
1:531b469:         row.setColumn(4, creationTimestamp);
1:eac0369: 
1:eac0369: 		/* 5th column is EVENT */
1:eb47bdb: 		row.setColumn(5, new SQLChar(event));
1:eac0369: 
1:eac0369: 		/* 6th column is FIRINGTIME */
1:eb47bdb: 		row.setColumn(6, new SQLChar(time));
1:eac0369: 
1:eac0369: 		/* 7th column is TYPE */
1:eb47bdb: 		row.setColumn(7, new SQLChar(type));
1:eac0369: 
1:eac0369: 		/* 8th column is STATE */
1:eb47bdb: 		row.setColumn(8, new SQLChar(enabled));
1:eac0369: 
1:eac0369: 		/* 9th column is TABLEID */
1:eb47bdb: 		row.setColumn(9, new SQLChar((tuuid == null) ? null : tuuid.toString()));
1:eac0369: 
1:eac0369: 		/* 10th column is WHENSTMTID */
1:eb47bdb: 		row.setColumn(10, new SQLChar((whenSPSID == null) ? null : whenSPSID.toString()));
1:eac0369: 
1:eac0369: 		/* 11th column is ACTIONSTMTID */
1:eb47bdb: 		row.setColumn(11, new SQLChar((actionSPSID == null) ? null : actionSPSID.toString()));
1:eac0369: 
1:eac0369: 		/* 12th column is REFERENCEDCOLUMNS 
1:eac0369: 		 *  (user type org.apache.derby.catalog.ReferencedColumns)
1:eac0369: 		 */
1:4309044: 		row.setColumn(12, new UserType(rcd));
1:eac0369: 
1:eac0369: 		/* 13th column is TRIGGERDEFINITION */
1:eac0369: 		row.setColumn(13, dvf.getLongvarcharDataValue(triggerDefinition));
1:eac0369: 
1:eac0369: 		/* 14th column is REFERENCINGOLD */
1:4309044: 		row.setColumn(14, new SQLBoolean(referencingOld));
1:eac0369: 
1:eac0369: 		/* 15th column is REFERENCINGNEW */
1:4309044: 		row.setColumn(15, new SQLBoolean(referencingNew));
1:eac0369: 
1:eac0369: 		/* 16th column is OLDREFERENCINGNAME */
1:eb47bdb: 		row.setColumn(16, new SQLVarchar(oldReferencingName));
1:eac0369: 
1:eac0369: 		/* 17th column is NEWREFERENCINGNAME */
1:eb47bdb: 		row.setColumn(17, new SQLVarchar(newReferencingName));
1:eac0369: 
1:d9878ca:         /* 18th column is WHENCLAUSETEXT */
1:d9878ca:         if (row.nColumns() >= 18) {
1:d9878ca:             // This column is present only if the data dictionary version is
1:d9878ca:             // 10.11 or higher.
1:d9878ca:             row.setColumn(18, dvf.getLongvarcharDataValue(whenClauseText));
1:d9878ca:         }
1:d9878ca: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:531b469:     /**
1:531b469:      * Get a calendar instance with the correct time zone for storing and
1:531b469:      * retrieving creation timestamps. Creation timestamps are stored in UTC
1:531b469:      * to avoid ambiguities around the change from daylight saving time to
1:531b469:      * standard time, or other time zone changes. If the data dictionary
1:531b469:      * version is less than 10.11, however, the timestamps are stored in the
1:531b469:      * local time zone.
1:531b469:      *
1:531b469:      * @return a calendar instance that can be used for storing and retrieving
1:531b469:      *   trigger creation timestamps
1:531b469:      * @throws StandardException if an error occurs
1:531b469:      */
1:531b469:     private Calendar getCalendarForCreationTimestamp()
1:531b469:             throws StandardException {
1:531b469:         if (dataDictionary.checkVersion(
1:531b469:                 DataDictionary.DD_VERSION_DERBY_10_11, null)) {
1:531b469:             return Calendar.getInstance(UTC);
1:531b469:         } else {
1:531b469:             return Calendar.getInstance();
1:531b469:         }
1:531b469:     }
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make an  Tuple Descriptor out of a SYSTRIGGERS row
1:eac0369: 	 *
1:eac0369: 	 * @param row 					a SYSTRIGGERS row
1:eac0369: 	 * @param parentTupleDescriptor	unused
1:eac0369: 	 * @param dd 					dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @return	a  descriptor equivalent to a SYSTRIGGERS row
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public TupleDescriptor buildDescriptor
1:eac0369: 	(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd 
1:eac0369: 	) throws StandardException
1:eac0369: 	{
2:eac0369: 		DataValueDescriptor		col;
1:eac0369: 		String					name;
1:eac0369: 		char					theChar;
1:eac0369: 		String					uuidStr;
1:eac0369: 		String					triggerDefinition;
1:eac0369: 		String					oldReferencingName;
1:eac0369: 		String					newReferencingName;
1:eac0369: 		UUID					uuid;	
1:eac0369: 		UUID					suuid;					// schema	
1:eac0369: 		UUID					tuuid;					// referenced table	
1:eac0369: 		UUID					actionSPSID = null;		// action sps uuid string
1:eac0369: 		UUID					whenSPSID = null;		// when clause sps uuid string
1:eac0369: 		Timestamp				createTime;
1:eac0369: 		int						eventMask = 0;
1:eac0369: 		boolean					isBefore;
1:eac0369: 		boolean					isRow;
1:eac0369: 		boolean					isEnabled;
1:eac0369: 		boolean					referencingOld;
1:eac0369: 		boolean					referencingNew;
1:eac0369: 		ReferencedColumns rcd;
1:eac0369: 		TriggerDescriptor		descriptor;
1:eac0369: 		DataDescriptorGenerator	ddg = dd.getDataDescriptorGenerator();
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:d9878ca:             // The expected number of columns depends on the version of the
1:d9878ca:             // data dictionary. The WHENCLAUSETEXT column was added in version
1:d9878ca:             // 10.11 (DERBY-534).
1:d9878ca:             int expectedCols =
1:d9878ca:                 dd.checkVersion(DataDictionary.DD_VERSION_DERBY_10_11, null)
1:d9878ca:                     ? SYSTRIGGERS_COLUMN_COUNT
1:d9878ca:                     : (SYSTRIGGERS_COLUMN_COUNT - 1);
1:d9878ca: 
1:d9878ca:             SanityManager.ASSERT(row.nColumns() == expectedCols,
1:eac0369: 								 "Wrong number of columns for a SYSTRIGGERS row");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// 1st column is TRIGGERID (UUID - char(36))
1:eac0369: 		col = row.getColumn(1);
1:eac0369: 		uuidStr = col.getString();
1:eac0369: 		uuid = getUUIDFactory().recreateUUID(uuidStr);
1:eac0369: 
1:eac0369: 		// 2nd column is TRIGGERNAME (varchar(128))
1:eac0369: 		col = row.getColumn(2);
1:eac0369: 		name = col.getString();
1:eac0369: 
1:eac0369: 		// 3rd column is SCHEMAID (UUID - char(36))
1:eac0369: 		col = row.getColumn(3);
1:eac0369: 		uuidStr = col.getString();
1:eac0369: 		suuid = getUUIDFactory().recreateUUID(uuidStr);
1:eac0369: 
1:eac0369: 		// 4th column is CREATIONTIMESTAMP (TIMESTAMP)
1:eac0369: 		col = row.getColumn(4);
1:531b469:         createTime = col.getTimestamp(getCalendarForCreationTimestamp());
1:eac0369: 
1:eac0369: 		// 5th column is EVENT (char(1))
1:eac0369: 		col = row.getColumn(5);
1:eac0369: 		theChar = col.getString().charAt(0);
1:eac0369: 		switch (theChar)
1:eac0369: 		{
1:eac0369: 			case 'U': 
1:eac0369: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_UPDATE;
4:eac0369: 						break;
1:eac0369: 
1:eac0369: 			case 'I': 
1:eac0369: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_INSERT;
1:eac0369: 						break;
1:eac0369: 
1:eac0369: 			case 'D': 
1:eac0369: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_DELETE;
1:eac0369: 						break;
1:eac0369: 
1:eac0369: 			default:
1:eac0369: 					if (SanityManager.DEBUG)	
1:eac0369: 					{
1:eac0369: 						SanityManager.THROWASSERT("bad event mask: "+theChar);
1:eac0369: 					}
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		// 6th column is FIRINGTIME (char(1))
1:eac0369: 		isBefore = getCharBoolean(row.getColumn(6), 'B', 'A');
1:eac0369: 
1:eac0369: 		// 7th column is TYPE (char(1))
1:eac0369: 		isRow = getCharBoolean(row.getColumn(7), 'R', 'S');
1:eac0369: 
1:eac0369: 		// 8th column is STATE (char(1))
1:eac0369: 		isEnabled = getCharBoolean(row.getColumn(8), 'E', 'D');
1:eac0369: 
1:eac0369: 		// 9th column is TABLEID (UUID - char(36))
1:eac0369: 		col = row.getColumn(9);
1:eac0369: 		uuidStr = col.getString();
1:eac0369: 		tuuid = getUUIDFactory().recreateUUID(uuidStr);
1:eac0369: 
1:eac0369: 		// 10th column is WHENSTMTID (UUID - char(36))
1:eac0369: 		col = row.getColumn(10);
1:eac0369: 		uuidStr = col.getString();
1:eac0369: 		if (uuidStr != null)
1:eac0369: 			whenSPSID = getUUIDFactory().recreateUUID(uuidStr);
1:eac0369: 
1:eac0369: 		// 11th column is ACTIONSTMTID (UUID - char(36))
1:eac0369: 		col = row.getColumn(11);
1:eac0369: 		uuidStr = col.getString();
1:eac0369: 		if (uuidStr != null)
1:eac0369: 			actionSPSID = getUUIDFactory().recreateUUID(uuidStr);
1:eac0369: 
1:eac0369: 		// 12th column is REFERENCEDCOLUMNS user type org.apache.derby.catalog.ReferencedColumns
1:eac0369: 		col = row.getColumn(12);
1:eac0369: 		rcd = (ReferencedColumns) col.getObject();
1:a6f9586: 		
1:d9878ca:         // 13th column is TRIGGERDEFINITION (longvarchar)
1:eac0369: 		col = row.getColumn(13);
1:eac0369: 		triggerDefinition = col.getString();
1:eac0369: 
1:eac0369: 		// 14th column is REFERENCINGOLD (boolean)
1:eac0369: 		col = row.getColumn(14);
1:eac0369: 		referencingOld = col.getBoolean();
1:eac0369: 
1:eac0369: 		// 15th column is REFERENCINGNEW (boolean)
1:eac0369: 		col = row.getColumn(15);
1:eac0369: 		referencingNew = col.getBoolean();
1:eac0369: 
1:eac0369: 		// 16th column is REFERENCINGNAME (varchar(128))
1:eac0369: 		col = row.getColumn(16);
1:eac0369: 		oldReferencingName = col.getString();
1:eac0369: 
1:eac0369: 		// 17th column is REFERENCINGNAME (varchar(128))
1:eac0369: 		col = row.getColumn(17);
1:eac0369: 		newReferencingName = col.getString();
1:eac0369: 
1:d9878ca:         // 18th column is WHENCLAUSETEXT (longvarchar)
1:d9878ca:         String whenClauseText = null;
1:d9878ca:         if (row.nColumns() >= 18) {
1:d9878ca:             // This column is present only if the data dictionary version is
1:d9878ca:             // 10.11 or higher.
1:d9878ca:             col = row.getColumn(18);
1:d9878ca:             whenClauseText = col.getString();
1:d9878ca:         }
1:d9878ca: 
1:3221b8c:         descriptor = ddg.newTriggerDescriptor(
1:eac0369: 									dd.getSchemaDescriptor(suuid, null),
1:eac0369: 									uuid, 
1:eac0369: 									name, 
1:eac0369: 									eventMask,
1:eac0369: 									isBefore, 
1:eac0369: 									isRow,
1:eac0369: 									isEnabled,
1:eac0369: 									dd.getTableDescriptor(tuuid),
1:eac0369: 									whenSPSID,
1:eac0369: 									actionSPSID,
1:eac0369: 									createTime,
1:eac0369: 									(rcd == null) ? (int[])null : rcd.getReferencedColumnPositions(),
1:a6f9586: 									(rcd == null) ? (int[])null : rcd.getTriggerActionReferencedColumnPositions(),
1:eac0369: 									triggerDefinition,
1:eac0369: 									referencingOld,
1:eac0369: 									referencingNew,
1:eac0369: 									oldReferencingName,
1:d9878ca:                                     newReferencingName,
1:d9878ca:                                     whenClauseText
18:eac0369: 									);
1:eac0369: 
1:eac0369: 		return descriptor;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 			
1:eac0369: 	/**
1:eac0369: 	 * Builds a list of columns suitable for creating this Catalog.
1:eac0369: 	 * The last column, the serialized statement, is not added
1:eac0369: 	 * to the column list.  This is done deliberately to make it
1:eac0369: 	 * a 'hidden' column -- one that is not visible to customers,
1:eac0369: 	 * but is visible to the system.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return array of SystemColumn suitable for making this catalog.
1:eac0369: 	 */
1:eac0369: 	public SystemColumn[] buildColumnList()
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:082459a:         return new SystemColumn[] {
1:082459a:             SystemColumnImpl.getUUIDColumn("TRIGGERID", false),
1:082459a:             SystemColumnImpl.getIdentifierColumn("TRIGGERNAME", false),
1:082459a:             SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:082459a:             SystemColumnImpl.getColumn("CREATIONTIMESTAMP", Types.TIMESTAMP, false),
1:082459a:             SystemColumnImpl.getIndicatorColumn("EVENT"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("FIRINGTIME"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("TYPE"),
1:082459a:             SystemColumnImpl.getIndicatorColumn("STATE"),
1:082459a:             SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:082459a:             SystemColumnImpl.getUUIDColumn("WHENSTMTID", true),
1:082459a:             SystemColumnImpl.getUUIDColumn("ACTIONSTMTID", true),
1:082459a:             SystemColumnImpl.getJavaColumn("REFERENCEDCOLUMNS",
1:082459a:                     "org.apache.derby.catalog.ReferencedColumns", true),
1:082459a:             SystemColumnImpl.getColumn("TRIGGERDEFINITION",
1:082459a:                     Types.LONGVARCHAR, true, Integer.MAX_VALUE),
1:082459a:             SystemColumnImpl.getColumn("REFERENCINGOLD", Types.BOOLEAN, true),
1:082459a:             SystemColumnImpl.getColumn("REFERENCINGNEW", Types.BOOLEAN, true),
1:082459a:             SystemColumnImpl.getIdentifierColumn("OLDREFERENCINGNAME", true),
1:082459a:             SystemColumnImpl.getIdentifierColumn("NEWREFERENCINGNAME", true),
1:d9878ca:             SystemColumnImpl.getColumn("WHENCLAUSETEXT",
1:d9878ca:                     Types.LONGVARCHAR, true, Integer.MAX_VALUE),
1:082459a:            };
1:eac0369: 	}
1:082459a: 
1:eac0369: 	// a little helper
1:eac0369: 	private boolean getCharBoolean(DataValueDescriptor col, char trueValue, char falseValue) throws StandardException
1:eac0369: 	{
1:eac0369: 		char theChar = col.getString().charAt(0);
1:eac0369: 		if (theChar == trueValue)
1:eac0369: 		{
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 		else if (theChar == falseValue)
1:eac0369: 		{
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.THROWASSERT("bad char value "+theChar);
1:d9878ca: 		
1:eac0369: 			return true;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:d9878ca:     @Override
1:d9878ca:     public int getHeapColumnCount() throws StandardException {
1:d9878ca:         // The WHEN clause (DERBY-534) is only supported if the dictionary
1:d9878ca:         // version is 10.11 or higher. Older versions of the dictionary don't
1:d9878ca:         // include the WHENCLAUSETEXT column, so adjust the column count
1:d9878ca:         // accordingly.
1:d9878ca:         boolean supportsWhenClause = dataDictionary
1:d9878ca:                 .checkVersion(DataDictionary.DD_VERSION_DERBY_10_11, null);
1:d9878ca:         int heapCols = super.getHeapColumnCount();
1:d9878ca:         return supportsWhenClause ? heapCols : (heapCols - 1);
1:d9878ca:     }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:531b469
/////////////////////////////////////////////////////////////////////////
1: import java.util.Calendar;
1: import java.util.TimeZone;
/////////////////////////////////////////////////////////////////////////
1:     /** TimeZone object representing Coordinated Universal Time. */
1:     private final static TimeZone UTC = TimeZone.getTimeZone("UTC");
1: 
/////////////////////////////////////////////////////////////////////////
1:         SQLTimestamp creationTimestamp = (createTime == null)
1:             ? new SQLTimestamp(null)
1:             : new SQLTimestamp(createTime, getCalendarForCreationTimestamp());
1:         row.setColumn(4, creationTimestamp);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get a calendar instance with the correct time zone for storing and
1:      * retrieving creation timestamps. Creation timestamps are stored in UTC
1:      * to avoid ambiguities around the change from daylight saving time to
1:      * standard time, or other time zone changes. If the data dictionary
1:      * version is less than 10.11, however, the timestamps are stored in the
1:      * local time zone.
1:      *
1:      * @return a calendar instance that can be used for storing and retrieving
1:      *   trigger creation timestamps
1:      * @throws StandardException if an error occurs
1:      */
1:     private Calendar getCalendarForCreationTimestamp()
1:             throws StandardException {
1:         if (dataDictionary.checkVersion(
1:                 DataDictionary.DD_VERSION_DERBY_10_11, null)) {
1:             return Calendar.getInstance(UTC);
1:         } else {
1:             return Calendar.getInstance();
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         createTime = col.getTimestamp(getCalendarForCreationTimestamp());
commit:d9878ca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public  static  final   int     SYSTRIGGERS_WHENCLAUSETEXT = 18;
1:     public  static  final   int     SYSTRIGGERS_COLUMN_COUNT = SYSTRIGGERS_WHENCLAUSETEXT;
/////////////////////////////////////////////////////////////////////////
1:     private final DataDictionary dataDictionary;
1: 
1:     SYSTRIGGERSRowFactory(
1:             DataDictionary dd,
1:             UUIDFactory uuidf,
1:             ExecutionFactory ef,
1:             DataValueFactory dvf)
1:         throws StandardException
1:         this.dataDictionary = dd;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         return makeRow(td, getHeapColumnCount());
1:     }
1: 
1:     @Override
1:     public ExecRow makeEmptyRowForCurrentVersion() throws StandardException {
1:         return makeRow(null, SYSTRIGGERS_COLUMN_COUNT);
1:     }
1: 
1:     /**
1:      * Helper method that contains common logic for {@code makeRow()} and
1:      * {@code makeEmptyRowForCurrentVersion()}. Creates a row for the
1:      * SYSTRIGGERS conglomerate.
1:      *
1:      * @param td the {@code TriggerDescriptor} to create a row from (can be
1:      *   {@code null} if the returned row should be empty)
1:      * @param columnCount the number of columns in the returned row (used for
1:      *   trimming off columns in soft upgrade mode to match the format in
1:      *   the old dictionary version)
1:      * @return a row for the SYSTRIGGERS conglomerate
1:      * @throws StandardException if an error happens when creating the row
1:      */
1:     private ExecRow makeRow(TupleDescriptor td, int columnCount)
1:             throws StandardException {
/////////////////////////////////////////////////////////////////////////
1:         String                  whenClauseText = null;
/////////////////////////////////////////////////////////////////////////
1:             whenClauseText = triggerDescriptor.getWhenClauseText();
1:         ExecRow row = getExecutionFactory().getValueRow(columnCount);
/////////////////////////////////////////////////////////////////////////
1:         /* 18th column is WHENCLAUSETEXT */
1:         if (row.nColumns() >= 18) {
1:             // This column is present only if the data dictionary version is
1:             // 10.11 or higher.
1:             row.setColumn(18, dvf.getLongvarcharDataValue(whenClauseText));
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             // The expected number of columns depends on the version of the
1:             // data dictionary. The WHENCLAUSETEXT column was added in version
1:             // 10.11 (DERBY-534).
1:             int expectedCols =
1:                 dd.checkVersion(DataDictionary.DD_VERSION_DERBY_10_11, null)
1:                     ? SYSTRIGGERS_COLUMN_COUNT
1:                     : (SYSTRIGGERS_COLUMN_COUNT - 1);
1: 
1:             SanityManager.ASSERT(row.nColumns() == expectedCols,
/////////////////////////////////////////////////////////////////////////
1:         // 13th column is TRIGGERDEFINITION (longvarchar)
/////////////////////////////////////////////////////////////////////////
1:         // 18th column is WHENCLAUSETEXT (longvarchar)
1:         String whenClauseText = null;
1:         if (row.nColumns() >= 18) {
1:             // This column is present only if the data dictionary version is
1:             // 10.11 or higher.
1:             col = row.getColumn(18);
1:             whenClauseText = col.getString();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                                     newReferencingName,
1:                                     whenClauseText
/////////////////////////////////////////////////////////////////////////
1:             SystemColumnImpl.getColumn("WHENCLAUSETEXT",
1:                     Types.LONGVARCHAR, true, Integer.MAX_VALUE),
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public int getHeapColumnCount() throws StandardException {
1:         // The WHEN clause (DERBY-534) is only supported if the dictionary
1:         // version is 10.11 or higher. Older versions of the dictionary don't
1:         // include the WHENCLAUSETEXT column, so adjust the column count
1:         // accordingly.
1:         boolean supportsWhenClause = dataDictionary
1:                 .checkVersion(DataDictionary.DD_VERSION_DERBY_10_11, null);
1:         int heapCols = super.getHeapColumnCount();
1:         return supportsWhenClause ? heapCols : (heapCols - 1);
1:     }
commit:3221b8c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         descriptor = ddg.newTriggerDescriptor(
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLBoolean;
1: import org.apache.derby.iapi.types.SQLTimestamp;
1: import org.apache.derby.iapi.types.UserType;
/////////////////////////////////////////////////////////////////////////
0: 		row.setColumn(4, new SQLTimestamp(createTime));
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(12, new UserType(rcd));
1: 		row.setColumn(14, new SQLBoolean(referencingOld));
1: 		row.setColumn(15, new SQLBoolean(referencingNew));
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:a6f9586
/////////////////////////////////////////////////////////////////////////
1: 			int[] refColsInTriggerAction = triggerDescriptor.getReferencedColsInTriggerAction();
1: 			rcd = (refCols != null || refColsInTriggerAction != null) ? new
1: 				ReferencedColumnsDescriptorImpl(refCols, refColsInTriggerAction) : null;
/////////////////////////////////////////////////////////////////////////
1: 		
/////////////////////////////////////////////////////////////////////////
1: 									(rcd == null) ? (int[])null : rcd.getTriggerActionReferencedColumnPositions(),
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:6870e87
/////////////////////////////////////////////////////////////////////////
0: 	SYSTRIGGERSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:082459a
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1:         return new SystemColumn[] {
1:             SystemColumnImpl.getUUIDColumn("TRIGGERID", false),
1:             SystemColumnImpl.getIdentifierColumn("TRIGGERNAME", false),
1:             SystemColumnImpl.getUUIDColumn("SCHEMAID", false),
1:             SystemColumnImpl.getColumn("CREATIONTIMESTAMP", Types.TIMESTAMP, false),
1:             SystemColumnImpl.getIndicatorColumn("EVENT"),
1:             SystemColumnImpl.getIndicatorColumn("FIRINGTIME"),
1:             SystemColumnImpl.getIndicatorColumn("TYPE"),
1:             SystemColumnImpl.getIndicatorColumn("STATE"),
1:             SystemColumnImpl.getUUIDColumn("TABLEID", false),
1:             SystemColumnImpl.getUUIDColumn("WHENSTMTID", true),
1:             SystemColumnImpl.getUUIDColumn("ACTIONSTMTID", true),
1:             SystemColumnImpl.getJavaColumn("REFERENCEDCOLUMNS",
1:                     "org.apache.derby.catalog.ReferencedColumns", true),
1:             SystemColumnImpl.getColumn("TRIGGERDEFINITION",
1:                     Types.LONGVARCHAR, true, Integer.MAX_VALUE),
1:             SystemColumnImpl.getColumn("REFERENCINGOLD", Types.BOOLEAN, true),
1:             SystemColumnImpl.getColumn("REFERENCINGNEW", Types.BOOLEAN, true),
1:             SystemColumnImpl.getIdentifierColumn("OLDREFERENCINGNAME", true),
1:             SystemColumnImpl.getIdentifierColumn("NEWREFERENCINGNAME", true),
1:             
1:            };
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(1, new SQLChar((uuid == null) ? null : uuid.toString()));
1: 		row.setColumn(2, new SQLVarchar(name));
1: 		row.setColumn(3, new SQLChar((suuid == null) ? null : suuid.toString()));
1: 		row.setColumn(5, new SQLChar(event));
1: 		row.setColumn(6, new SQLChar(time));
1: 		row.setColumn(7, new SQLChar(type));
1: 		row.setColumn(8, new SQLChar(enabled));
1: 		row.setColumn(9, new SQLChar((tuuid == null) ? null : tuuid.toString()));
1: 		row.setColumn(10, new SQLChar((whenSPSID == null) ? null : whenSPSID.toString()));
1: 		row.setColumn(11, new SQLChar((actionSPSID == null) ? null : actionSPSID.toString()));
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(16, new SQLVarchar(oldReferencingName));
1: 		row.setColumn(17, new SQLVarchar(newReferencingName));
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				 indexColumnPositions,  uniqueness, uuids);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.types.TypeId;
1: 
1: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.catalog.ReferencedColumns;
1: import org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.types.SQLTimestamp;
1: import java.sql.Timestamp;
1: 
1: /**
1:  * Factory for creating a SYSTRIGGERS row.
1:  *
1:  *
1:  * @version 0.1
0:  * @author Jamie
1:  */
1: 
1: public class SYSTRIGGERSRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	static	final	String	TABLENAME_STRING = "SYSTRIGGERS";
1: 
1: 	/* Column #s for sysinfo (1 based) */
1: 	public	static	final	int		SYSTRIGGERS_TRIGGERID = 1;
1: 	public	static	final	int		SYSTRIGGERS_TRIGGERNAME = 2;
1: 	public	static	final	int		SYSTRIGGERS_SCHEMAID = 3;
1: 	public	static	final	int		SYSTRIGGERS_CREATIONTIMESTAMP = 4;
1: 	public	static	final	int		SYSTRIGGERS_EVENT = 5;
1: 	public	static	final	int		SYSTRIGGERS_FIRINGTIME = 6;
1: 	public	static	final	int		SYSTRIGGERS_TYPE = 7;
1: 	public	static	final	int		SYSTRIGGERS_STATE = TriggerDescriptor.SYSTRIGGERS_STATE_FIELD;
1: 	public	static	final	int		SYSTRIGGERS_TABLEID = 9;
1: 	public	static	final	int		SYSTRIGGERS_WHENSTMTID = 10;
1: 	public	static	final	int		SYSTRIGGERS_ACTIONSTMTID = 11;
1: 	public	static	final	int		SYSTRIGGERS_REFERENCEDCOLUMNS = 12;
1: 	public	static	final	int		SYSTRIGGERS_TRIGGERDEFINITION = 13;
1: 	public	static	final	int		SYSTRIGGERS_REFERENCINGOLD = 14;
1: 	public	static	final	int		SYSTRIGGERS_REFERENCINGNEW = 15;
1: 	public	static	final	int		SYSTRIGGERS_OLDREFERENCINGNAME = 16;
1: 	public	static	final	int		SYSTRIGGERS_NEWREFERENCINGNAME = 17;
1: 
0: 	public	static	final	int		SYSTRIGGERS_COLUMN_COUNT = SYSTRIGGERS_NEWREFERENCINGNAME;
1: 
1: 	public  static final int		SYSTRIGGERS_INDEX1_ID = 0;
1: 	public  static final int		SYSTRIGGERS_INDEX2_ID = 1;
1: 	public  static final int		SYSTRIGGERS_INDEX3_ID = 2;
1: 
1: 	private static final int[][] indexColumnPositions =
1: 	{
1: 		{SYSTRIGGERS_TRIGGERID},
1: 		{SYSTRIGGERS_TRIGGERNAME, SYSTRIGGERS_SCHEMAID},
1: 		{SYSTRIGGERS_TABLEID, SYSTRIGGERS_CREATIONTIMESTAMP}
1: 	};
1: 
0: 	private static final String[][] indexColumnNames =
1: 	{
0: 		{"TRIGGERID"},
0: 		{"TRIGGERNAME", "SCHEMAID"},
0: 		{"CREATIONTIMESTAMP"}
1: 	};
1: 
1: 	private	static	final	boolean[]	uniqueness = {
1: 													   true,
1: 													   true,
1: 													   false,
1: 	                                                 };
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "c013800d-00d7-c025-4809-000a0a411200"	// catalog UUID
1: 		,"c013800d-00d7-c025-480a-000a0a411200"	// heap UUID
1: 		,"c013800d-00d7-c025-480b-000a0a411200"	// SYSTRIGGERS_INDEX1 
1: 		,"c013800d-00d7-c025-480c-000a0a411200"	// SYSTRIGGERS_INDEX2
1: 		,"c013800d-00d7-c025-480d-000a0a411200"	// SYSTRIGGERS_INDEX3
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
0: 	public	SYSTRIGGERSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                   boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
1: 		initInfo(SYSTRIGGERS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames,  uniqueness, uuids);
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Make a SYSTRIGGERS row. 
1: 	 * 
0: 	 * @param emptyRow			Make an empty row if this parameter is true
0: 	 * @param triggerDescriptor	In-memory tuple to be converted to a disk row.
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSTRIGGERS.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 
1: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
1: 		throws StandardException
1: 	{
0: 		DataTypeDescriptor		dtd;
0: 		ExecRow    				row;
1: 		DataValueDescriptor		col;
1: 		String					name = null;
1: 		UUID					uuid = null;	
1: 		UUID					suuid = null;			// schema	
1: 		UUID					tuuid = null;			// referenced table	
1: 		UUID					actionSPSID = null;		// action sps uuid string
1: 		UUID					whenSPSID = null;		// when clause sps uuid string
1: 		Timestamp				createTime = null;
1: 		String					event = null;
1: 		String					time = null;
1: 		String					type = null;
1: 		String					enabled = null;
1: 		String					triggerDefinition = null;
1: 		String					oldReferencingName = null;
1: 		String					newReferencingName = null;
1: 		ReferencedColumns rcd = null;
1: 		boolean					referencingOld = false;
1: 		boolean					referencingNew = false;
1: 
1: 		if (td != null)
1: 		{
1: 			TriggerDescriptor triggerDescriptor = (TriggerDescriptor)td;
1: 			name = triggerDescriptor.getName();
1: 			uuid = triggerDescriptor.getUUID();
1: 			suuid = triggerDescriptor.getSchemaDescriptor().getUUID();
1: 			createTime = triggerDescriptor.getCreationTimestamp();
1: 			// for now we are assuming that a trigger can only listen to a single event
1: 			event = triggerDescriptor.listensForEvent(TriggerDescriptor.TRIGGER_EVENT_UPDATE) ? "U" :
1: 					triggerDescriptor.listensForEvent(TriggerDescriptor.TRIGGER_EVENT_DELETE) ? "D" : "I";
1: 			time = triggerDescriptor.isBeforeTrigger() ? "B" : "A";
1: 			type = triggerDescriptor.isRowTrigger() ? "R" : "S";
1: 			enabled = triggerDescriptor.isEnabled() ? "E" : "D";
1: 			tuuid = triggerDescriptor.getTableDescriptor().getUUID();
1: 			int[] refCols = triggerDescriptor.getReferencedCols();
0: 			rcd = (refCols != null) ? new
0: 				ReferencedColumnsDescriptorImpl(refCols) : null;
1: 
1: 			actionSPSID =  triggerDescriptor.getActionId();
1: 			whenSPSID =  triggerDescriptor.getWhenClauseId();
1: 			triggerDefinition = triggerDescriptor.getTriggerDefinition();
1: 			referencingOld = triggerDescriptor.getReferencingOld();
1: 			referencingNew = triggerDescriptor.getReferencingNew();
1: 			oldReferencingName = triggerDescriptor.getOldReferencingName();
1: 			newReferencingName = triggerDescriptor.getNewReferencingName();
1: 		}
1: 
1: 		/* Build the row to insert */
0: 		row = getExecutionFactory().getValueRow(SYSTRIGGERS_COLUMN_COUNT);
1: 
1: 		/* 1st column is TRIGGERID */
0: 		row.setColumn(1, dvf.getCharDataValue((uuid == null) ? null : uuid.toString()));
1: 
1: 		/* 2nd column is TRIGGERNAME */
0: 		row.setColumn(2, dvf.getVarcharDataValue(name));
1: 
1: 		/* 3rd column is SCHEMAID */
0: 		row.setColumn(3, dvf.getCharDataValue((suuid == null) ? null : suuid.toString()));
1: 
1: 		/* 4th column is CREATIONTIMESTAMP */
0: 		row.setColumn(4, dvf.getDataValue(createTime));
1: 
1: 		/* 5th column is EVENT */
0: 		row.setColumn(5, dvf.getCharDataValue(event));
1: 
1: 		/* 6th column is FIRINGTIME */
0: 		row.setColumn(6, dvf.getCharDataValue(time));
1: 
1: 		/* 7th column is TYPE */
0: 		row.setColumn(7, dvf.getCharDataValue(type));
1: 
1: 		/* 8th column is STATE */
0: 		row.setColumn(8, dvf.getCharDataValue(enabled));
1: 
1: 		/* 9th column is TABLEID */
0: 		row.setColumn(9, dvf.getCharDataValue((tuuid == null) ? null : tuuid.toString()));
1: 
1: 		/* 10th column is WHENSTMTID */
0: 		row.setColumn(10, dvf.getCharDataValue((whenSPSID == null) ? null : whenSPSID.toString()));
1: 
1: 		/* 11th column is ACTIONSTMTID */
0: 		row.setColumn(11, dvf.getCharDataValue((actionSPSID == null) ? null : actionSPSID.toString()));
1: 
1: 		/* 12th column is REFERENCEDCOLUMNS 
1: 		 *  (user type org.apache.derby.catalog.ReferencedColumns)
1: 		 */
0: 		row.setColumn(12, dvf.getDataValue(rcd));
1: 
1: 		/* 13th column is TRIGGERDEFINITION */
1: 		row.setColumn(13, dvf.getLongvarcharDataValue(triggerDefinition));
1: 
1: 		/* 14th column is REFERENCINGOLD */
0: 		row.setColumn(14, dvf.getDataValue(referencingOld));
1: 
1: 		/* 15th column is REFERENCINGNEW */
0: 		row.setColumn(15, dvf.getDataValue(referencingNew));
1: 
1: 		/* 16th column is OLDREFERENCINGNAME */
0: 		row.setColumn(16, dvf.getVarcharDataValue(oldReferencingName));
1: 
1: 		/* 17th column is NEWREFERENCINGNAME */
0: 		row.setColumn(17, dvf.getVarcharDataValue(newReferencingName));
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 * @param	indexNumber	Index to build empty row for.
0: 	 * @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
1: 
0: 		row.setColumn(ncols + 1, rowLocation);
1: 
0: 		switch( indexNumber )
1: 		{
0: 		    case SYSTRIGGERS_INDEX1_ID:
0: 				/* 1st column is TRIGGERID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 				break;
1: 
0: 		    case SYSTRIGGERS_INDEX2_ID:
0: 				/* 1st column is TRIGGERNAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
1: 
0: 				/* 2nd column is SCHEMAID (char(32)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
1: 				break;
1: 
0: 		    case SYSTRIGGERS_INDEX3_ID:
0: 				/* 1nd column is TABLEID (char(32)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
1: 
0: 				/* 2nd column is COMPILATIONTIMESTAMP (timestamp) */
0: 				row.setColumn(2, new SQLTimestamp());
1: 				break;
0: 		}	// end switch
1: 
0: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make an  Tuple Descriptor out of a SYSTRIGGERS row
1: 	 *
1: 	 * @param row 					a SYSTRIGGERS row
1: 	 * @param parentTupleDescriptor	unused
1: 	 * @param dd 					dataDictionary
1: 	 *
1: 	 * @return	a  descriptor equivalent to a SYSTRIGGERS row
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor
1: 	(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd 
1: 	) throws StandardException
1: 	{
1: 		DataValueDescriptor		col;
1: 		String					name;
1: 		char					theChar;
1: 		String					uuidStr;
1: 		String					triggerDefinition;
1: 		String					oldReferencingName;
1: 		String					newReferencingName;
1: 		UUID					uuid;	
1: 		UUID					suuid;					// schema	
1: 		UUID					tuuid;					// referenced table	
1: 		UUID					actionSPSID = null;		// action sps uuid string
1: 		UUID					whenSPSID = null;		// when clause sps uuid string
1: 		Timestamp				createTime;
1: 		int						eventMask = 0;
1: 		boolean					isBefore;
1: 		boolean					isRow;
1: 		boolean					isEnabled;
1: 		boolean					referencingOld;
1: 		boolean					referencingNew;
1: 		ReferencedColumns rcd;
1: 		TriggerDescriptor		descriptor;
1: 		DataDescriptorGenerator	ddg = dd.getDataDescriptorGenerator();
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			SanityManager.ASSERT(row.nColumns() == SYSTRIGGERS_COLUMN_COUNT, 
1: 								 "Wrong number of columns for a SYSTRIGGERS row");
1: 		}
1: 
1: 		// 1st column is TRIGGERID (UUID - char(36))
1: 		col = row.getColumn(1);
1: 		uuidStr = col.getString();
1: 		uuid = getUUIDFactory().recreateUUID(uuidStr);
1: 
1: 		// 2nd column is TRIGGERNAME (varchar(128))
1: 		col = row.getColumn(2);
1: 		name = col.getString();
1: 
1: 		// 3rd column is SCHEMAID (UUID - char(36))
1: 		col = row.getColumn(3);
1: 		uuidStr = col.getString();
1: 		suuid = getUUIDFactory().recreateUUID(uuidStr);
1: 
1: 		// 4th column is CREATIONTIMESTAMP (TIMESTAMP)
1: 		col = row.getColumn(4);
0: 		createTime = (Timestamp) col.getObject();
1: 
1: 		// 5th column is EVENT (char(1))
1: 		col = row.getColumn(5);
1: 		theChar = col.getString().charAt(0);
1: 		switch (theChar)
1: 		{
1: 			case 'U': 
1: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_UPDATE;
1: 						break;
1: 
1: 			case 'I': 
1: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_INSERT;
1: 						break;
1: 
1: 			case 'D': 
1: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_DELETE;
1: 						break;
1: 
1: 			default:
1: 					if (SanityManager.DEBUG)	
1: 					{
1: 						SanityManager.THROWASSERT("bad event mask: "+theChar);
1: 					}
1: 		}
1: 		
1: 		// 6th column is FIRINGTIME (char(1))
1: 		isBefore = getCharBoolean(row.getColumn(6), 'B', 'A');
1: 
1: 		// 7th column is TYPE (char(1))
1: 		isRow = getCharBoolean(row.getColumn(7), 'R', 'S');
1: 
1: 		// 8th column is STATE (char(1))
1: 		isEnabled = getCharBoolean(row.getColumn(8), 'E', 'D');
1: 
1: 		// 9th column is TABLEID (UUID - char(36))
1: 		col = row.getColumn(9);
1: 		uuidStr = col.getString();
1: 		tuuid = getUUIDFactory().recreateUUID(uuidStr);
1: 
1: 		// 10th column is WHENSTMTID (UUID - char(36))
1: 		col = row.getColumn(10);
1: 		uuidStr = col.getString();
1: 		if (uuidStr != null)
1: 			whenSPSID = getUUIDFactory().recreateUUID(uuidStr);
1: 
1: 		// 11th column is ACTIONSTMTID (UUID - char(36))
1: 		col = row.getColumn(11);
1: 		uuidStr = col.getString();
1: 		if (uuidStr != null)
1: 			actionSPSID = getUUIDFactory().recreateUUID(uuidStr);
1: 
1: 		// 12th column is REFERENCEDCOLUMNS user type org.apache.derby.catalog.ReferencedColumns
1: 		col = row.getColumn(12);
1: 		rcd = (ReferencedColumns) col.getObject();
1: 
0: 		// 13th column is TRIGGERDEFINITION (longvarhar)
1: 		col = row.getColumn(13);
1: 		triggerDefinition = col.getString();
1: 
1: 		// 14th column is REFERENCINGOLD (boolean)
1: 		col = row.getColumn(14);
1: 		referencingOld = col.getBoolean();
1: 
1: 		// 15th column is REFERENCINGNEW (boolean)
1: 		col = row.getColumn(15);
1: 		referencingNew = col.getBoolean();
1: 
1: 		// 16th column is REFERENCINGNAME (varchar(128))
1: 		col = row.getColumn(16);
1: 		oldReferencingName = col.getString();
1: 
1: 		// 17th column is REFERENCINGNAME (varchar(128))
1: 		col = row.getColumn(17);
1: 		newReferencingName = col.getString();
1: 
0: 		descriptor = new TriggerDescriptor(
0: 									dd,
1: 									dd.getSchemaDescriptor(suuid, null),
1: 									uuid, 
1: 									name, 
1: 									eventMask,
1: 									isBefore, 
1: 									isRow,
1: 									isEnabled,
1: 									dd.getTableDescriptor(tuuid),
1: 									whenSPSID,
1: 									actionSPSID,
1: 									createTime,
1: 									(rcd == null) ? (int[])null : rcd.getReferencedColumnPositions(),
1: 									triggerDefinition,
1: 									referencingOld,
1: 									referencingNew,
1: 									oldReferencingName,
0: 									newReferencingName
1: 									);
1: 
1: 		return descriptor;
1: 	}
1: 
1: 			
1: 	/**
1: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 * The last column, the serialized statement, is not added
1: 	 * to the column list.  This is done deliberately to make it
1: 	 * a 'hidden' column -- one that is not visible to customers,
1: 	 * but is visible to the system.
1: 	 *
1: 	 *
1: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
1: 	public SystemColumn[] buildColumnList()
1: 	{
0: 		SystemColumn[]	columnList = new SystemColumn[SYSTRIGGERS_COLUMN_COUNT];
1: 
0: 		// describe columns
0: 		columnList[SYSTRIGGERS_TRIGGERID-1] = new SystemColumnImpl(	
0: 							convertIdCase( "TRIGGERID"),			// name 
0: 							SYSTRIGGERS_TRIGGERID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_TRIGGERNAME-1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "TRIGGERNAME"),			// column name
0: 							SYSTRIGGERS_TRIGGERNAME,	// column number
0: 							false				// nullability
1: 							);
1: 
0: 		columnList[SYSTRIGGERS_SCHEMAID-1] = new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),				// name 
0: 							SYSTRIGGERS_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_CREATIONTIMESTAMP-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "CREATIONTIMESTAMP"),		// name 
0: 							SYSTRIGGERS_CREATIONTIMESTAMP,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							false,						// nullability
0: 							"TIMESTAMP",				// dataType
0: 							true,						// built-in type
0: 							TypeId.TIMESTAMP_MAXWIDTH	// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_EVENT-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "EVENT"),			// name 
0: 							SYSTRIGGERS_EVENT,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_FIRINGTIME-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "FIRINGTIME"),		// name 
0: 							SYSTRIGGERS_FIRINGTIME, // column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_TYPE-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TYPE"),				// name 
0: 							SYSTRIGGERS_TYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_STATE-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "STATE"),			// name 
0: 							SYSTRIGGERS_STATE,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_TABLEID-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// name 
0: 							SYSTRIGGERS_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_WHENSTMTID-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "WHENSTMTID"),				// name 
0: 							SYSTRIGGERS_WHENSTMTID,		// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"CHAR",						// dataType
0: 							true,						// built-in type
0: 							36							// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_ACTIONSTMTID-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "ACTIONSTMTID"),				// name 
0: 							SYSTRIGGERS_ACTIONSTMTID,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"CHAR",						// dataType
0: 							true,						// built-in type
0: 							36							// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_REFERENCEDCOLUMNS-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "REFERENCEDCOLUMNS"),			// name 
0: 							SYSTRIGGERS_REFERENCEDCOLUMNS,	// column number
0: 							0,								// precision
0: 							0,								// scale
0: 							true,							// nullability
0: 							"org.apache.derby.catalog.ReferencedColumns",	//datatype
0: 							false,							// built-in type
0: 							DataTypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_TRIGGERDEFINITION-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TRIGGERDEFINITION"),				// name 
0: 							SYSTRIGGERS_TRIGGERDEFINITION,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"LONG VARCHAR",			// dataType
0: 							true,				// built-in type
0: 							Integer.MAX_VALUE	// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_REFERENCINGOLD-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "REFERENCINGOLD"),			// name 
0: 							SYSTRIGGERS_REFERENCINGOLD,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_REFERENCINGNEW-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "REFERENCINGNEW"),			// name 
0: 							SYSTRIGGERS_REFERENCINGNEW,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
1: 			                );
1: 
0: 		columnList[SYSTRIGGERS_OLDREFERENCINGNAME-1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "OLDREFERENCINGNAME"),			// column name
0: 							SYSTRIGGERS_OLDREFERENCINGNAME,	// column number
0: 							true				// nullability
1: 							);
1: 
0: 		columnList[SYSTRIGGERS_NEWREFERENCINGNAME-1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "NEWREFERENCINGNAME"),			// column name
0: 							SYSTRIGGERS_NEWREFERENCINGNAME,	// column number
0: 							true				// nullability
1: 							);
1: 
0: 		return	columnList;
1: 	}
1: 
0: 	public int heapColumnCount()
1: 	{
0: 		return SYSTRIGGERS_COLUMN_COUNT;
1: 	}
1: 
1: 	// a little helper
1: 	private boolean getCharBoolean(DataValueDescriptor col, char trueValue, char falseValue) throws StandardException
1: 	{
1: 		char theChar = col.getString().charAt(0);
1: 		if (theChar == trueValue)
1: 		{
1: 			return true;
1: 		}
1: 		else if (theChar == falseValue)
1: 		{
1: 			return false;
1: 		}
1: 		else
1: 		{
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.THROWASSERT("bad char value "+theChar);
1: 		
1: 			return true;
1: 		}
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.catalog.ReferencedColumns;
0: import org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl;
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.types.SQLTimestamp;
0: import java.sql.Timestamp;
0: 
0: /**
0:  * Factory for creating a SYSTRIGGERS row.
0:  *
0:  *
0:  * @version 0.1
0:  * @author Jamie
0:  */
0: 
0: public class SYSTRIGGERSRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	static	final	String	TABLENAME_STRING = "SYSTRIGGERS";
0: 
0: 	/* Column #s for sysinfo (1 based) */
0: 	public	static	final	int		SYSTRIGGERS_TRIGGERID = 1;
0: 	public	static	final	int		SYSTRIGGERS_TRIGGERNAME = 2;
0: 	public	static	final	int		SYSTRIGGERS_SCHEMAID = 3;
0: 	public	static	final	int		SYSTRIGGERS_CREATIONTIMESTAMP = 4;
0: 	public	static	final	int		SYSTRIGGERS_EVENT = 5;
0: 	public	static	final	int		SYSTRIGGERS_FIRINGTIME = 6;
0: 	public	static	final	int		SYSTRIGGERS_TYPE = 7;
0: 	public	static	final	int		SYSTRIGGERS_STATE = TriggerDescriptor.SYSTRIGGERS_STATE_FIELD;
0: 	public	static	final	int		SYSTRIGGERS_TABLEID = 9;
0: 	public	static	final	int		SYSTRIGGERS_WHENSTMTID = 10;
0: 	public	static	final	int		SYSTRIGGERS_ACTIONSTMTID = 11;
0: 	public	static	final	int		SYSTRIGGERS_REFERENCEDCOLUMNS = 12;
0: 	public	static	final	int		SYSTRIGGERS_TRIGGERDEFINITION = 13;
0: 	public	static	final	int		SYSTRIGGERS_REFERENCINGOLD = 14;
0: 	public	static	final	int		SYSTRIGGERS_REFERENCINGNEW = 15;
0: 	public	static	final	int		SYSTRIGGERS_OLDREFERENCINGNAME = 16;
0: 	public	static	final	int		SYSTRIGGERS_NEWREFERENCINGNAME = 17;
0: 
0: 	public	static	final	int		SYSTRIGGERS_COLUMN_COUNT = SYSTRIGGERS_NEWREFERENCINGNAME;
0: 
0: 	public  static final int		SYSTRIGGERS_INDEX1_ID = 0;
0: 	public  static final int		SYSTRIGGERS_INDEX2_ID = 1;
0: 	public  static final int		SYSTRIGGERS_INDEX3_ID = 2;
0: 
0: 	private static final int[][] indexColumnPositions =
0: 	{
0: 		{SYSTRIGGERS_TRIGGERID},
0: 		{SYSTRIGGERS_TRIGGERNAME, SYSTRIGGERS_SCHEMAID},
0: 		{SYSTRIGGERS_TABLEID, SYSTRIGGERS_CREATIONTIMESTAMP}
0: 	};
0: 
0: 	private static final String[][] indexColumnNames =
0: 	{
0: 		{"TRIGGERID"},
0: 		{"TRIGGERNAME", "SCHEMAID"},
0: 		{"CREATIONTIMESTAMP"}
0: 	};
0: 
0: 	private	static	final	boolean[]	uniqueness = {
0: 													   true,
0: 													   true,
0: 													   false,
0: 	                                                 };
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "c013800d-00d7-c025-4809-000a0a411200"	// catalog UUID
0: 		,"c013800d-00d7-c025-480a-000a0a411200"	// heap UUID
0: 		,"c013800d-00d7-c025-480b-000a0a411200"	// SYSTRIGGERS_INDEX1 
0: 		,"c013800d-00d7-c025-480c-000a0a411200"	// SYSTRIGGERS_INDEX2
0: 		,"c013800d-00d7-c025-480d-000a0a411200"	// SYSTRIGGERS_INDEX3
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	public	SYSTRIGGERSRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                   boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSTRIGGERS_COLUMN_COUNT, TABLENAME_STRING, 
0: 				 indexColumnPositions, indexColumnNames,  uniqueness, uuids);
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	/**
0: 	 * Make a SYSTRIGGERS row. 
0: 	 * 
0: 	 * @param emptyRow			Make an empty row if this parameter is true
0: 	 * @param triggerDescriptor	In-memory tuple to be converted to a disk row.
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSTRIGGERS.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 
0: 	public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent)
0: 		throws StandardException
0: 	{
0: 		DataTypeDescriptor		dtd;
0: 		ExecRow    				row;
0: 		DataValueDescriptor		col;
0: 		String					name = null;
0: 		UUID					uuid = null;	
0: 		UUID					suuid = null;			// schema	
0: 		UUID					tuuid = null;			// referenced table	
0: 		UUID					actionSPSID = null;		// action sps uuid string
0: 		UUID					whenSPSID = null;		// when clause sps uuid string
0: 		Timestamp				createTime = null;
0: 		String					event = null;
0: 		String					time = null;
0: 		String					type = null;
0: 		String					enabled = null;
0: 		String					triggerDefinition = null;
0: 		String					oldReferencingName = null;
0: 		String					newReferencingName = null;
0: 		ReferencedColumns rcd = null;
0: 		boolean					referencingOld = false;
0: 		boolean					referencingNew = false;
0: 
0: 		if (td != null)
0: 		{
0: 			TriggerDescriptor triggerDescriptor = (TriggerDescriptor)td;
0: 			name = triggerDescriptor.getName();
0: 			uuid = triggerDescriptor.getUUID();
0: 			suuid = triggerDescriptor.getSchemaDescriptor().getUUID();
0: 			createTime = triggerDescriptor.getCreationTimestamp();
0: 			// for now we are assuming that a trigger can only listen to a single event
0: 			event = triggerDescriptor.listensForEvent(TriggerDescriptor.TRIGGER_EVENT_UPDATE) ? "U" :
0: 					triggerDescriptor.listensForEvent(TriggerDescriptor.TRIGGER_EVENT_DELETE) ? "D" : "I";
0: 			time = triggerDescriptor.isBeforeTrigger() ? "B" : "A";
0: 			type = triggerDescriptor.isRowTrigger() ? "R" : "S";
0: 			enabled = triggerDescriptor.isEnabled() ? "E" : "D";
0: 			tuuid = triggerDescriptor.getTableDescriptor().getUUID();
0: 			int[] refCols = triggerDescriptor.getReferencedCols();
0: 			rcd = (refCols != null) ? new
0: 				ReferencedColumnsDescriptorImpl(refCols) : null;
0: 
0: 			actionSPSID =  triggerDescriptor.getActionId();
0: 			whenSPSID =  triggerDescriptor.getWhenClauseId();
0: 			triggerDefinition = triggerDescriptor.getTriggerDefinition();
0: 			referencingOld = triggerDescriptor.getReferencingOld();
0: 			referencingNew = triggerDescriptor.getReferencingNew();
0: 			oldReferencingName = triggerDescriptor.getOldReferencingName();
0: 			newReferencingName = triggerDescriptor.getNewReferencingName();
0: 		}
0: 
0: 		/* Build the row to insert */
0: 		row = getExecutionFactory().getValueRow(SYSTRIGGERS_COLUMN_COUNT);
0: 
0: 		/* 1st column is TRIGGERID */
0: 		row.setColumn(1, dvf.getCharDataValue((uuid == null) ? null : uuid.toString()));
0: 
0: 		/* 2nd column is TRIGGERNAME */
0: 		row.setColumn(2, dvf.getVarcharDataValue(name));
0: 
0: 		/* 3rd column is SCHEMAID */
0: 		row.setColumn(3, dvf.getCharDataValue((suuid == null) ? null : suuid.toString()));
0: 
0: 		/* 4th column is CREATIONTIMESTAMP */
0: 		row.setColumn(4, dvf.getDataValue(createTime));
0: 
0: 		/* 5th column is EVENT */
0: 		row.setColumn(5, dvf.getCharDataValue(event));
0: 
0: 		/* 6th column is FIRINGTIME */
0: 		row.setColumn(6, dvf.getCharDataValue(time));
0: 
0: 		/* 7th column is TYPE */
0: 		row.setColumn(7, dvf.getCharDataValue(type));
0: 
0: 		/* 8th column is STATE */
0: 		row.setColumn(8, dvf.getCharDataValue(enabled));
0: 
0: 		/* 9th column is TABLEID */
0: 		row.setColumn(9, dvf.getCharDataValue((tuuid == null) ? null : tuuid.toString()));
0: 
0: 		/* 10th column is WHENSTMTID */
0: 		row.setColumn(10, dvf.getCharDataValue((whenSPSID == null) ? null : whenSPSID.toString()));
0: 
0: 		/* 11th column is ACTIONSTMTID */
0: 		row.setColumn(11, dvf.getCharDataValue((actionSPSID == null) ? null : actionSPSID.toString()));
0: 
0: 		/* 12th column is REFERENCEDCOLUMNS 
0: 		 *  (user type org.apache.derby.catalog.ReferencedColumns)
0: 		 */
0: 		row.setColumn(12, dvf.getDataValue(rcd));
0: 
0: 		/* 13th column is TRIGGERDEFINITION */
0: 		row.setColumn(13, dvf.getLongvarcharDataValue(triggerDefinition));
0: 
0: 		/* 14th column is REFERENCINGOLD */
0: 		row.setColumn(14, dvf.getDataValue(referencingOld));
0: 
0: 		/* 15th column is REFERENCINGNEW */
0: 		row.setColumn(15, dvf.getDataValue(referencingNew));
0: 
0: 		/* 16th column is OLDREFERENCINGNAME */
0: 		row.setColumn(16, dvf.getVarcharDataValue(oldReferencingName));
0: 
0: 		/* 17th column is NEWREFERENCINGNAME */
0: 		row.setColumn(17, dvf.getVarcharDataValue(newReferencingName));
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 * @param	indexNumber	Index to build empty row for.
0: 	 * @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
0: 
0: 		row.setColumn(ncols + 1, rowLocation);
0: 
0: 		switch( indexNumber )
0: 		{
0: 		    case SYSTRIGGERS_INDEX1_ID:
0: 				/* 1st column is TRIGGERID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
0: 
0: 		    case SYSTRIGGERS_INDEX2_ID:
0: 				/* 1st column is TRIGGERNAME (varchar(128)) */
0: 				row.setColumn(1, getDataValueFactory().getVarcharDataValue((String) null));
0: 
0: 				/* 2nd column is SCHEMAID (char(32)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
0: 				break;
0: 
0: 		    case SYSTRIGGERS_INDEX3_ID:
0: 				/* 1nd column is TABLEID (char(32)) */
0: 				row.setColumn(2, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				/* 2nd column is COMPILATIONTIMESTAMP (timestamp) */
0: 				row.setColumn(2, new SQLTimestamp());
0: 				break;
0: 		}	// end switch
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make an  Tuple Descriptor out of a SYSTRIGGERS row
0: 	 *
0: 	 * @param row 					a SYSTRIGGERS row
0: 	 * @param parentTupleDescriptor	unused
0: 	 * @param dd 					dataDictionary
0: 	 *
0: 	 * @return	a  descriptor equivalent to a SYSTRIGGERS row
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public TupleDescriptor buildDescriptor
0: 	(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd 
0: 	) throws StandardException
0: 	{
0: 		DataValueDescriptor		col;
0: 		String					name;
0: 		char					theChar;
0: 		String					uuidStr;
0: 		String					triggerDefinition;
0: 		String					oldReferencingName;
0: 		String					newReferencingName;
0: 		UUID					uuid;	
0: 		UUID					suuid;					// schema	
0: 		UUID					tuuid;					// referenced table	
0: 		UUID					actionSPSID = null;		// action sps uuid string
0: 		UUID					whenSPSID = null;		// when clause sps uuid string
0: 		Timestamp				createTime;
0: 		int						eventMask = 0;
0: 		boolean					isBefore;
0: 		boolean					isRow;
0: 		boolean					isEnabled;
0: 		boolean					referencingOld;
0: 		boolean					referencingNew;
0: 		ReferencedColumns rcd;
0: 		TriggerDescriptor		descriptor;
0: 		DataDescriptorGenerator	ddg = dd.getDataDescriptorGenerator();
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(row.nColumns() == SYSTRIGGERS_COLUMN_COUNT, 
0: 								 "Wrong number of columns for a SYSTRIGGERS row");
0: 		}
0: 
0: 		// 1st column is TRIGGERID (UUID - char(36))
0: 		col = row.getColumn(1);
0: 		uuidStr = col.getString();
0: 		uuid = getUUIDFactory().recreateUUID(uuidStr);
0: 
0: 		// 2nd column is TRIGGERNAME (varchar(128))
0: 		col = row.getColumn(2);
0: 		name = col.getString();
0: 
0: 		// 3rd column is SCHEMAID (UUID - char(36))
0: 		col = row.getColumn(3);
0: 		uuidStr = col.getString();
0: 		suuid = getUUIDFactory().recreateUUID(uuidStr);
0: 
0: 		// 4th column is CREATIONTIMESTAMP (TIMESTAMP)
0: 		col = row.getColumn(4);
0: 		createTime = (Timestamp) col.getObject();
0: 
0: 		// 5th column is EVENT (char(1))
0: 		col = row.getColumn(5);
0: 		theChar = col.getString().charAt(0);
0: 		switch (theChar)
0: 		{
0: 			case 'U': 
0: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_UPDATE;
0: 						break;
0: 
0: 			case 'I': 
0: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_INSERT;
0: 						break;
0: 
0: 			case 'D': 
0: 						eventMask = TriggerDescriptor.TRIGGER_EVENT_DELETE;
0: 						break;
0: 
0: 			default:
0: 					if (SanityManager.DEBUG)	
0: 					{
0: 						SanityManager.THROWASSERT("bad event mask: "+theChar);
0: 					}
0: 		}
0: 		
0: 		// 6th column is FIRINGTIME (char(1))
0: 		isBefore = getCharBoolean(row.getColumn(6), 'B', 'A');
0: 
0: 		// 7th column is TYPE (char(1))
0: 		isRow = getCharBoolean(row.getColumn(7), 'R', 'S');
0: 
0: 		// 8th column is STATE (char(1))
0: 		isEnabled = getCharBoolean(row.getColumn(8), 'E', 'D');
0: 
0: 		// 9th column is TABLEID (UUID - char(36))
0: 		col = row.getColumn(9);
0: 		uuidStr = col.getString();
0: 		tuuid = getUUIDFactory().recreateUUID(uuidStr);
0: 
0: 		// 10th column is WHENSTMTID (UUID - char(36))
0: 		col = row.getColumn(10);
0: 		uuidStr = col.getString();
0: 		if (uuidStr != null)
0: 			whenSPSID = getUUIDFactory().recreateUUID(uuidStr);
0: 
0: 		// 11th column is ACTIONSTMTID (UUID - char(36))
0: 		col = row.getColumn(11);
0: 		uuidStr = col.getString();
0: 		if (uuidStr != null)
0: 			actionSPSID = getUUIDFactory().recreateUUID(uuidStr);
0: 
0: 		// 12th column is REFERENCEDCOLUMNS user type org.apache.derby.catalog.ReferencedColumns
0: 		col = row.getColumn(12);
0: 		rcd = (ReferencedColumns) col.getObject();
0: 
0: 		// 13th column is TRIGGERDEFINITION (longvarhar)
0: 		col = row.getColumn(13);
0: 		triggerDefinition = col.getString();
0: 
0: 		// 14th column is REFERENCINGOLD (boolean)
0: 		col = row.getColumn(14);
0: 		referencingOld = col.getBoolean();
0: 
0: 		// 15th column is REFERENCINGNEW (boolean)
0: 		col = row.getColumn(15);
0: 		referencingNew = col.getBoolean();
0: 
0: 		// 16th column is REFERENCINGNAME (varchar(128))
0: 		col = row.getColumn(16);
0: 		oldReferencingName = col.getString();
0: 
0: 		// 17th column is REFERENCINGNAME (varchar(128))
0: 		col = row.getColumn(17);
0: 		newReferencingName = col.getString();
0: 
0: 		descriptor = new TriggerDescriptor(
0: 									dd,
0: 									dd.getSchemaDescriptor(suuid, null),
0: 									uuid, 
0: 									name, 
0: 									eventMask,
0: 									isBefore, 
0: 									isRow,
0: 									isEnabled,
0: 									dd.getTableDescriptor(tuuid),
0: 									whenSPSID,
0: 									actionSPSID,
0: 									createTime,
0: 									(rcd == null) ? (int[])null : rcd.getReferencedColumnPositions(),
0: 									triggerDefinition,
0: 									referencingOld,
0: 									referencingNew,
0: 									oldReferencingName,
0: 									newReferencingName
0: 									);
0: 
0: 		return descriptor;
0: 	}
0: 
0: 			
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 * The last column, the serialized statement, is not added
0: 	 * to the column list.  This is done deliberately to make it
0: 	 * a 'hidden' column -- one that is not visible to customers,
0: 	 * but is visible to the system.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[] buildColumnList()
0: 	{
0: 		SystemColumn[]	columnList = new SystemColumn[SYSTRIGGERS_COLUMN_COUNT];
0: 
0: 		// describe columns
0: 		columnList[SYSTRIGGERS_TRIGGERID-1] = new SystemColumnImpl(	
0: 							convertIdCase( "TRIGGERID"),			// name 
0: 							SYSTRIGGERS_TRIGGERID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_TRIGGERNAME-1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "TRIGGERNAME"),			// column name
0: 							SYSTRIGGERS_TRIGGERNAME,	// column number
0: 							false				// nullability
0: 							);
0: 
0: 		columnList[SYSTRIGGERS_SCHEMAID-1] = new SystemColumnImpl(	
0: 							convertIdCase( "SCHEMAID"),				// name 
0: 							SYSTRIGGERS_SCHEMAID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_CREATIONTIMESTAMP-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "CREATIONTIMESTAMP"),		// name 
0: 							SYSTRIGGERS_CREATIONTIMESTAMP,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							false,						// nullability
0: 							"TIMESTAMP",				// dataType
0: 							true,						// built-in type
0: 							TypeId.TIMESTAMP_MAXWIDTH	// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_EVENT-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "EVENT"),			// name 
0: 							SYSTRIGGERS_EVENT,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_FIRINGTIME-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "FIRINGTIME"),		// name 
0: 							SYSTRIGGERS_FIRINGTIME, // column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_TYPE-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "TYPE"),				// name 
0: 							SYSTRIGGERS_TYPE,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_STATE-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "STATE"),			// name 
0: 							SYSTRIGGERS_STATE,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_TABLEID-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TABLEID"),			// name 
0: 							SYSTRIGGERS_TABLEID,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_WHENSTMTID-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "WHENSTMTID"),				// name 
0: 							SYSTRIGGERS_WHENSTMTID,		// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"CHAR",						// dataType
0: 							true,						// built-in type
0: 							36							// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_ACTIONSTMTID-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "ACTIONSTMTID"),				// name 
0: 							SYSTRIGGERS_ACTIONSTMTID,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"CHAR",						// dataType
0: 							true,						// built-in type
0: 							36							// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_REFERENCEDCOLUMNS-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "REFERENCEDCOLUMNS"),			// name 
0: 							SYSTRIGGERS_REFERENCEDCOLUMNS,	// column number
0: 							0,								// precision
0: 							0,								// scale
0: 							true,							// nullability
0: 							"org.apache.derby.catalog.ReferencedColumns",	//datatype
0: 							false,							// built-in type
0: 							DataTypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_TRIGGERDEFINITION-1] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "TRIGGERDEFINITION"),				// name 
0: 							SYSTRIGGERS_TRIGGERDEFINITION,	// column number
0: 							0,							// precision
0: 							0,							// scale
0: 							true,						// nullability
0: 							"LONG VARCHAR",			// dataType
0: 							true,				// built-in type
0: 							Integer.MAX_VALUE	// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_REFERENCINGOLD-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "REFERENCINGOLD"),			// name 
0: 							SYSTRIGGERS_REFERENCINGOLD,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_REFERENCINGNEW-1] = 
0: 					new SystemColumnImpl(		
0: 							convertIdCase( "REFERENCINGNEW"),			// name 
0: 							SYSTRIGGERS_REFERENCINGNEW,// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 			                );
0: 
0: 		columnList[SYSTRIGGERS_OLDREFERENCINGNAME-1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "OLDREFERENCINGNAME"),			// column name
0: 							SYSTRIGGERS_OLDREFERENCINGNAME,	// column number
0: 							true				// nullability
0: 							);
0: 
0: 		columnList[SYSTRIGGERS_NEWREFERENCINGNAME-1] = 
0: 					new SystemColumnImpl(		// SQL IDENTIFIER
0: 							convertIdCase( "NEWREFERENCINGNAME"),			// column name
0: 							SYSTRIGGERS_NEWREFERENCINGNAME,	// column number
0: 							true				// nullability
0: 							);
0: 
0: 		return	columnList;
0: 	}
0: 
0: 	public int heapColumnCount()
0: 	{
0: 		return SYSTRIGGERS_COLUMN_COUNT;
0: 	}
0: 
0: 	// a little helper
0: 	private boolean getCharBoolean(DataValueDescriptor col, char trueValue, char falseValue) throws StandardException
0: 	{
0: 		char theChar = col.getString().charAt(0);
0: 		if (theChar == trueValue)
0: 		{
0: 			return true;
0: 		}
0: 		else if (theChar == falseValue)
0: 		{
0: 			return false;
0: 		}
0: 		else
0: 		{
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("bad char value "+theChar);
0: 		
0: 			return true;
0: 		}
0: 	}
0: }
============================================================================