1:cdfb2d1: /*
1:cdfb2d1: 
1:cdfb2d1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.Utf8CcsidManagerTest
1:cdfb2d1: 
1:cdfb2d1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:cdfb2d1:    contributor license agreements.  See the NOTICE file distributed with
1:cdfb2d1:    this work for additional information regarding copyright ownership.
1:cdfb2d1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:cdfb2d1:    (the "License"); you may not use this file except in compliance with
1:cdfb2d1:    the License.  You may obtain a copy of the License at
1:cdfb2d1: 
1:cdfb2d1:       http://www.apache.org/licenses/LICENSE-2.0
1:cdfb2d1: 
1:cdfb2d1:    Unless required by applicable law or agreed to in writing, software
1:cdfb2d1:    distributed under the License is distributed on an "AS IS" BASIS,
1:cdfb2d1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdfb2d1:    See the License for the specific language governing permissions and
1:cdfb2d1:    limitations under the License.
1:cdfb2d1: 
1:cdfb2d1:  */
1:cdfb2d1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:cdfb2d1: 
1:cdfb2d1: import java.nio.ByteBuffer;
1:cdfb2d1: import java.util.Arrays;
1:cdfb2d1: 
1:cdfb2d1: import junit.framework.Test;
1:cdfb2d1: 
1:cdfb2d1: import org.apache.derby.impl.drda.Utf8CcsidManager;
1:cdfb2d1: import org.apache.derbyTesting.junit.BaseTestCase;
1:cdfb2d1: import org.apache.derbyTesting.junit.TestConfiguration;
1:cdfb2d1: 
1:cdfb2d1: /* This test uses internal APIs which might change over consequent releases. */
1:cdfb2d1: public class Utf8CcsidManagerTest extends BaseTestCase {
1:cdfb2d1:     private Utf8CcsidManager ccsidManager;
1:cdfb2d1:     
1:cdfb2d1:     public Utf8CcsidManagerTest(String name) {
1:cdfb2d1:         super(name);
1:cdfb2d1:         
1:cdfb2d1:         ccsidManager = new Utf8CcsidManager();
1:cdfb2d1:     }
1:cdfb2d1:     
1:cdfb2d1:     /**
1:cdfb2d1:      * Use the Utf8CcsidManager to convert strings from UCS2/UTF-16 into UTF-8
1:cdfb2d1:      */
1:3b96611:     public void testConvertFromJavaString() throws Exception {
1:cdfb2d1:         // Get the UTF-16 representation of "Hello World" in Chinese
1:cdfb2d1:         String ucs2String = new String(new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-16"),"UTF-16");
1:cdfb2d1:         
1:cdfb2d1:         // Get the same as above but in UTF-8
1:cdfb2d1:         byte[] utf8Bytes = new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-8");
1:cdfb2d1:         
1:cdfb2d1:         // Use the CcsidManager to convert the UTF-16 string to UTF-8 bytes
1:cdfb2d1:         byte[] utf8Converted = ccsidManager.convertFromJavaString(ucs2String);
1:cdfb2d1:         
1:cdfb2d1:         // Compare the bytes
1:cdfb2d1:         assertTrue("UTF-8 conversion isn't equal to bytes",
1:cdfb2d1:                 Arrays.equals(utf8Bytes, utf8Converted));
1:cdfb2d1:         
1:cdfb2d1:         // Repeat the process for the conversion using a buffer
1:cdfb2d1:         ByteBuffer buffer = ByteBuffer.allocate(utf8Bytes.length);
1:cdfb2d1:         
1:cdfb2d1:         ccsidManager.convertFromJavaString(ucs2String, buffer);
1:cdfb2d1:         if (buffer.hasArray()) {
1:cdfb2d1:             utf8Converted = buffer.array();
1:cdfb2d1:             
1:cdfb2d1:             assertTrue("UTF-8 conversion isn't equal to bytes (with buffer)",
1:cdfb2d1:                     Arrays.equals(utf8Bytes, utf8Converted));
1:cdfb2d1:         } else {
1:cdfb2d1:             fail("Could not convert from UCS2 to UTF-8 using a buffer");
1:cdfb2d1:         }
1:cdfb2d1:     }
1:cdfb2d1:     
1:cdfb2d1:     /**
1:cdfb2d1:      * Use the Utf8CcsidManager to convert strings from UTF-8 into UCS2/UTF-16
1:cdfb2d1:      */
1:3b96611:     public void testConvertToJavaString() throws Exception {
1:cdfb2d1:         // Get the UTF-8 bytes for "Hello World" in Chinese
1:cdfb2d1:         byte[] utf8Bytes = new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-8");
1:cdfb2d1:         
1:cdfb2d1:         // Get the UTF-16 string for "Hello World" in Chinese
1:cdfb2d1:         String ucs2String = new String(new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-16"),"UTF-16");
1:cdfb2d1:         
1:cdfb2d1:         // Get the 2nd and 3rd Chinese characters in UTF-16
1:cdfb2d1:         String offsetUcs2String = new String(new String("\u597d\u4e16").getBytes("UTF-16"),"UTF-16");
1:cdfb2d1:         
1:cdfb2d1:         // Convert our UTF-8 bytes to UTF-16 using the CcsidManager and compare
1:cdfb2d1:         String convertedString = ccsidManager.convertToJavaString(utf8Bytes);
1:cdfb2d1:         assertEquals(ucs2String, convertedString);
1:cdfb2d1:         
1:cdfb2d1:         // Convert just the two characters as offset above and compare
1:9b816c6:         String convertedOffset = ccsidManager.convertToJavaString(utf8Bytes, 3, 6);
1:cdfb2d1:         assertEquals(offsetUcs2String, convertedOffset);
1:cdfb2d1:     }
1:cdfb2d1:     
1:cdfb2d1:     public static Test suite() {
1:cdfb2d1:         return TestConfiguration.clientServerSuite(Utf8CcsidManagerTest.class);
1:cdfb2d1:     }
1:cdfb2d1: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:9b816c6
/////////////////////////////////////////////////////////////////////////
1:         String convertedOffset = ccsidManager.convertToJavaString(utf8Bytes, 3, 6);
commit:3b96611
/////////////////////////////////////////////////////////////////////////
1:     public void testConvertFromJavaString() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testConvertToJavaString() throws Exception {
commit:cdfb2d1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.Utf8CcsidManagerTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derby.impl.drda.Utf8CcsidManager;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /* This test uses internal APIs which might change over consequent releases. */
1: public class Utf8CcsidManagerTest extends BaseTestCase {
1:     private Utf8CcsidManager ccsidManager;
1:     
1:     public Utf8CcsidManagerTest(String name) {
1:         super(name);
1:         
1:         ccsidManager = new Utf8CcsidManager();
1:     }
1:     
1:     /**
1:      * Use the Utf8CcsidManager to convert strings from UCS2/UTF-16 into UTF-8
1:      */
0:     public void testConvertFromUCS2() throws Exception {
1:         // Get the UTF-16 representation of "Hello World" in Chinese
1:         String ucs2String = new String(new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-16"),"UTF-16");
1:         
1:         // Get the same as above but in UTF-8
1:         byte[] utf8Bytes = new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-8");
1:         
1:         // Use the CcsidManager to convert the UTF-16 string to UTF-8 bytes
1:         byte[] utf8Converted = ccsidManager.convertFromJavaString(ucs2String);
1:         
1:         // Compare the bytes
1:         assertTrue("UTF-8 conversion isn't equal to bytes",
1:                 Arrays.equals(utf8Bytes, utf8Converted));
1:         
1:         // Repeat the process for the conversion using a buffer
1:         ByteBuffer buffer = ByteBuffer.allocate(utf8Bytes.length);
1:         
1:         ccsidManager.convertFromJavaString(ucs2String, buffer);
1:         if (buffer.hasArray()) {
1:             utf8Converted = buffer.array();
1:             
1:             assertTrue("UTF-8 conversion isn't equal to bytes (with buffer)",
1:                     Arrays.equals(utf8Bytes, utf8Converted));
1:         } else {
1:             fail("Could not convert from UCS2 to UTF-8 using a buffer");
1:         }
1:     }
1:     
1:     /**
1:      * Use the Utf8CcsidManager to convert strings from UTF-8 into UCS2/UTF-16
1:      */
0:     public void testConvertToUCS2() throws Exception {
1:         // Get the UTF-8 bytes for "Hello World" in Chinese
1:         byte[] utf8Bytes = new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-8");
1:         
1:         // Get the UTF-16 string for "Hello World" in Chinese
1:         String ucs2String = new String(new String("\u4f60\u597d\u4e16\u754c").getBytes("UTF-16"),"UTF-16");
1:         
1:         // Get the 2nd and 3rd Chinese characters in UTF-16
1:         String offsetUcs2String = new String(new String("\u597d\u4e16").getBytes("UTF-16"),"UTF-16");
1:         
1:         // Convert our UTF-8 bytes to UTF-16 using the CcsidManager and compare
1:         String convertedString = ccsidManager.convertToJavaString(utf8Bytes);
1:         assertEquals(ucs2String, convertedString);
1:         
1:         // Convert just the two characters as offset above and compare
0:         String convertedOffset = ccsidManager.convertToJavaString(utf8Bytes, 1, 2);
1:         assertEquals(offsetUcs2String, convertedOffset);
1:     }
1:     
1:     public static Test suite() {
1:         return TestConfiguration.clientServerSuite(Utf8CcsidManagerTest.class);
1:     }
1: }
============================================================================