1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.HandleResult
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
18:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.io.InputStream;
1:67614ad: import java.io.InputStreamReader;
1:67614ad: import java.io.BufferedReader;
1:67614ad: import java.io.PrintWriter;
1:67614ad: import java.io.IOException;
1:67614ad: 
2:67614ad: /**
1:67614ad:   Class: HandleResult
1:dbed020:   Purpose: To capture stdout and stderr to a file
1:67614ad:   (PrintWriter is used for writing the output)
1:67614ad: */
1:67614ad: 
1:67614ad: public class HandleResult
1:67614ad: {
1:67614ad: 
1:67614ad: 	public static void main(String[] args) throws Exception
1:67614ad: 	{
1:67614ad: 	}
1:67614ad: 
1:fb605fe: 	public static String handleResult(int exitCode, InputStream stdout,
1:fb605fe: 	        InputStream stderr, PrintWriter printWriter)
1:fb605fe: 	        throws IOException
1:fb605fe: 	{
1:fb605fe: 		return handleResult(exitCode, stdout, stderr, printWriter, null);
1:fb605fe: 	}
1:fb605fe: 	
1:67614ad:     public static String handleResult(int exitCode, InputStream stdout,
1:fb605fe:         InputStream stderr, PrintWriter printWriter, String encoding)
1:67614ad:         throws IOException
1:67614ad:     {
1:67614ad: 		StringBuffer sb = new StringBuffer();
1:67614ad: 
1:67614ad: 		// only used for debugging
1:67614ad: 		sb.append("exitcode=");
1:67614ad: 		sb.append(exitCode);
1:67614ad: 
1:67614ad:         if (stdout != null)
1:67614ad:         {
1:67614ad:     		// reader for stdout
1:fb605fe:         	BufferedReader outReader;
1:fb605fe:         	if(encoding != null)
1:fb605fe:         		outReader = new BufferedReader(new InputStreamReader(stdout, encoding));
1:fb605fe:         	else
1:fb605fe:         		outReader = new BufferedReader(new InputStreamReader(stdout));
1:67614ad: 
1:67614ad:             // Read each line and write to printWriter
1:67614ad:     		String s = null;
1:67614ad:     		int lines = 0;
1:67614ad:     		while ((s = outReader.readLine()) != null)
1:67614ad:     		{
1:67614ad:     		    lines++;
1:67614ad:     		    if (printWriter == null)
1:67614ad:     			    System.out.println(s);
1:67614ad:     			else
1:67614ad:     			    printWriter.println(s);
1:67614ad:     		}
1:67614ad:     		sb.append(",");
1:67614ad:     		sb.append(lines);
1:67614ad:     		outReader.close();
1:67614ad:     		printWriter.flush();
1:67614ad:         }
1:67614ad: 
1:67614ad:         if (stderr != null)
1:67614ad:         {
1:67614ad:             // reader for stderr
1:fb605fe:         	BufferedReader errReader;
1:fb605fe:         	if(encoding != null)
1:fb605fe:         		errReader = new BufferedReader(new InputStreamReader(stderr, encoding));
1:fb605fe:         	else
1:fb605fe:         		errReader = new BufferedReader(new InputStreamReader(stderr));
1:67614ad: 
1:67614ad:     		String s = null;
1:67614ad:     		int lines = 0;
1:67614ad:     		while ((s = errReader.readLine()) != null)
1:67614ad:     		{
1:67614ad:     		    if (printWriter == null)
1:67614ad:     			    System.out.println(s);
1:67614ad:     			else
1:67614ad:     			    printWriter.println(s);
1:67614ad:     		}
1:67614ad:     		errReader.close();
1:67614ad:     		printWriter.flush();
1:67614ad:     	}
1:67614ad: 
1:67614ad: 		return sb.toString();
1:67614ad: 	}
1:67614ad: }
1:67614ad: 
1:67614ad: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:   Purpose: To capture stdout and stderr to a file
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:fb605fe
/////////////////////////////////////////////////////////////////////////
1: 	public static String handleResult(int exitCode, InputStream stdout,
1: 	        InputStream stderr, PrintWriter printWriter)
1: 	        throws IOException
1: 	{
1: 		return handleResult(exitCode, stdout, stderr, printWriter, null);
1: 	}
1: 	
1:         InputStream stderr, PrintWriter printWriter, String encoding)
/////////////////////////////////////////////////////////////////////////
1:         	BufferedReader outReader;
1:         	if(encoding != null)
1:         		outReader = new BufferedReader(new InputStreamReader(stdout, encoding));
1:         	else
1:         		outReader = new BufferedReader(new InputStreamReader(stdout));
/////////////////////////////////////////////////////////////////////////
1:         	BufferedReader errReader;
1:         	if(encoding != null)
1:         		errReader = new BufferedReader(new InputStreamReader(stderr, encoding));
1:         	else
1:         		errReader = new BufferedReader(new InputStreamReader(stderr));
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.BufferedReader;
1: import java.io.PrintWriter;
1: import java.io.IOException;
1: 
1: /**
1:   Class: HandleResult
0:   Purpose: To capture stdout & stderr to a file
1:   (PrintWriter is used for writing the output)
1: */
1: 
1: public class HandleResult
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	public static void main(String[] args) throws Exception
1: 	{
1: 	}
1: 
1:     public static String handleResult(int exitCode, InputStream stdout,
0:         InputStream stderr, PrintWriter printWriter)
1:         throws IOException
1:     {
1: 		StringBuffer sb = new StringBuffer();
1: 
1: 		// only used for debugging
1: 		sb.append("exitcode=");
1: 		sb.append(exitCode);
1: 
1:         if (stdout != null)
1:         {
1:     		// reader for stdout
0:     		BufferedReader outReader = new BufferedReader(new InputStreamReader(stdout));
1: 
1:             // Read each line and write to printWriter
1:     		String s = null;
1:     		int lines = 0;
1:     		while ((s = outReader.readLine()) != null)
1:     		{
1:     		    lines++;
1:     		    if (printWriter == null)
1:     			    System.out.println(s);
1:     			else
1:     			    printWriter.println(s);
1:     		}
1:     		sb.append(",");
1:     		sb.append(lines);
1:     		outReader.close();
1:     		printWriter.flush();
1:         }
1: 
1:         if (stderr != null)
1:         {
1:             // reader for stderr
0:     		BufferedReader errReader = new BufferedReader(new InputStreamReader(stderr));
1: 
1:     		String s = null;
1:     		int lines = 0;
1:     		while ((s = errReader.readLine()) != null)
1:     		{
1:     		    if (printWriter == null)
1:     			    System.out.println(s);
1:     			else
1:     			    printWriter.println(s);
1:     		}
1:     		errReader.close();
1:     		printWriter.flush();
1:     	}
1: 
1: 		return sb.toString();
1: 	}
1: }
1: 
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.HandleResult
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.io.InputStream;
0: import java.io.InputStreamReader;
0: import java.io.BufferedReader;
0: import java.io.PrintWriter;
0: import java.io.IOException;
1: 
0: /**
0:   Class: HandleResult
0:   Purpose: To capture stdout & stderr to a file
0:   (PrintWriter is used for writing the output)
0: */
1: 
0: public class HandleResult
0: {
1: 
0: 	public static void main(String[] args) throws Exception
0: 	{
0: 	}
1: 
0:     public static String handleResult(int exitCode, InputStream stdout,
0:         InputStream stderr, PrintWriter printWriter)
0:         throws IOException
0:     {
0: 		StringBuffer sb = new StringBuffer();
1: 
0: 		// only used for debugging
0: 		sb.append("exitcode=");
0: 		sb.append(exitCode);
1: 
0:         if (stdout != null)
0:         {
0:     		// reader for stdout
0:     		BufferedReader outReader = new BufferedReader(new InputStreamReader(stdout));
1: 
0:             // Read each line and write to printWriter
0:     		String s = null;
0:     		int lines = 0;
0:     		while ((s = outReader.readLine()) != null)
0:     		{
0:     		    lines++;
0:     		    if (printWriter == null)
0:     			    System.out.println(s);
0:     			else
0:     			    printWriter.println(s);
0:     		}
0:     		sb.append(",");
0:     		sb.append(lines);
0:     		outReader.close();
0:     		printWriter.flush();
0:         }
1: 
0:         if (stderr != null)
0:         {
0:             // reader for stderr
0:     		BufferedReader errReader = new BufferedReader(new InputStreamReader(stderr));
1: 
0:     		String s = null;
0:     		int lines = 0;
0:     		while ((s = errReader.readLine()) != null)
0:     		{
0:     		    if (printWriter == null)
0:     			    System.out.println(s);
0:     			else
0:     			    printWriter.println(s);
0:     		}
0:     		errReader.close();
0:     		printWriter.flush();
0:     	}
1: 
0: 		return sb.toString();
0: 	}
0: }
1: 
1: 
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.HandleResult
0: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================