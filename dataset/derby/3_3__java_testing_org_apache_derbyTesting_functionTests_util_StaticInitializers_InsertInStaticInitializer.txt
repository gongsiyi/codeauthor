1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.util.StaticInitializers.InsertInStaticInitializer
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
14:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.util.StaticInitializers;
1:67614ad: 
1:67614ad: import java.sql.DriverManager;
1:67614ad: import java.sql.Statement;
1:67614ad: import java.sql.ResultSet;
1:67614ad: import java.sql.SQLException;
1:67614ad: 
1:67614ad: /** Test Insert statement called from within static initializer holds
1:67614ad:  * onto locks it should hold onto and doesn't hold onto locks it shouldn't
1:67614ad:  * hold onto.
1:67614ad: */
1:67614ad: public class InsertInStaticInitializer
1:67614ad: {
1:67614ad: 
1:67614ad: 	/* This is the method that is invoked from the outer query */
1:67614ad: 	public static int getANumber()
1:67614ad: 	{
1:67614ad: 		return 1;
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	static
1:67614ad: 	{
1:67614ad: 		/* Execute a DML statement from within the static initializer */
1:67614ad: 		doADMLStatement();
1:67614ad: 	}
1:67614ad: 
1:67614ad: 	private static void doADMLStatement()
1:67614ad: 	{
1:67614ad: 		ResultSet rs = null;
1:67614ad: 
1:67614ad: 		try
1:67614ad: 		{
1:67614ad: 			int	value;
1:67614ad: 
1:67614ad: 			/* Connect to the database */
1:67614ad: 			Statement s = DriverManager.getConnection(
1:67614ad: 						"jdbc:default:connection").createStatement();
1:67614ad: 
1:67614ad: 			/* Execute a DML statement.  This depends on t1 existing. */
1:67614ad: 			boolean b = s.execute("INSERT into t1 values (1)");
1:67614ad: 
1:67614ad: 			//if (rs.next())
1:67614ad: 			//{
1:67614ad: 			//	System.out.println("Value of t1.s is " + rs.getShort(1));
1:67614ad: 			//}
1:67614ad: 		}
1:67614ad: 		catch (SQLException se)
1:67614ad: 		{
1:9fa19f4: 			// we expected the above s.execute(INSERT) to fail
1:9fa19f4: 			if (!se.getSQLState().equals("38001")) {
1:9fa19f4: 				throw new ExceptionInInitializerError(se);
1:9fa19f4: 			}
1:67614ad: 		}
1:67614ad: 		finally
1:67614ad: 		{
1:67614ad: 			try
1:67614ad: 			{
1:67614ad: 				if (rs != null)
1:67614ad: 					rs.close();
1:67614ad: 			}
1:67614ad: 			catch (SQLException se)
1:67614ad: 			{
1:9fa19f4: 				if (!se.getSQLState().equals("38001"))
1:9fa19f4: 					throw new ExceptionInInitializerError(se);
1:67614ad: 			}
1:67614ad: 		}
1:67614ad: 	}
1:67614ad: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:9fa19f4
/////////////////////////////////////////////////////////////////////////
1: 			// we expected the above s.execute(INSERT) to fail
1: 			if (!se.getSQLState().equals("38001")) {
1: 				throw new ExceptionInInitializerError(se);
1: 			}
/////////////////////////////////////////////////////////////////////////
1: 				if (!se.getSQLState().equals("38001"))
1: 					throw new ExceptionInInitializerError(se);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.util.StaticInitializers
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.StaticInitializers;
1: 
1: import java.sql.DriverManager;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: /** Test Insert statement called from within static initializer holds
1:  * onto locks it should hold onto and doesn't hold onto locks it shouldn't
1:  * hold onto.
1: */
1: public class InsertInStaticInitializer
1: { 
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1: 	/* This is the method that is invoked from the outer query */
1: 	public static int getANumber()
1: 	{
1: 		return 1;
1: 	}
1: 
1: 	static
1: 	{
1: 		/* Execute a DML statement from within the static initializer */
1: 		doADMLStatement();
1: 	}
1: 
1: 	private static void doADMLStatement()
1: 	{
1: 		ResultSet rs = null;
1: 
1: 		try
1: 		{
1: 			int	value;
1: 
1: 			/* Connect to the database */
1: 			Statement s = DriverManager.getConnection(
1: 						"jdbc:default:connection").createStatement();
1: 
1: 			/* Execute a DML statement.  This depends on t1 existing. */
1: 			boolean b = s.execute("INSERT into t1 values (1)");
1: 
1: 			//if (rs.next())
1: 			//{
1: 			//	System.out.println("Value of t1.s is " + rs.getShort(1));
1: 			//}
1: 		}
1: 		catch (SQLException se)
1: 		{
0: 			System.out.println("Caught exception " + se);
0: 			se.printStackTrace(System.out);
1: 		}
1: 		finally
1: 		{
1: 			try
1: 			{
1: 				if (rs != null)
1: 					rs.close();
1: 			}
1: 			catch (SQLException se)
1: 			{
0: 				System.out.println("Caught exception " + se);
0: 				se.printStackTrace(System.out);
1: 			}
1: 		}
1: 	}
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.StaticInitializers.InsertInStaticInitializer
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.util.StaticInitializers;
1: 
0: import java.sql.DriverManager;
0: import java.sql.Statement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
1: 
0: /** Test Insert statement called from within static initializer holds
0:  * onto locks it should hold onto and doesn't hold onto locks it shouldn't
0:  * hold onto.
0: */
0: public class InsertInStaticInitializer
0: {
1: 
0: 	/* This is the method that is invoked from the outer query */
0: 	public static int getANumber()
0: 	{
0: 		return 1;
0: 	}
1: 
0: 	static
0: 	{
0: 		/* Execute a DML statement from within the static initializer */
0: 		doADMLStatement();
0: 	}
1: 
0: 	private static void doADMLStatement()
0: 	{
0: 		ResultSet rs = null;
1: 
0: 		try
0: 		{
0: 			int	value;
1: 
0: 			/* Connect to the database */
0: 			Statement s = DriverManager.getConnection(
0: 						"jdbc:default:connection").createStatement();
1: 
0: 			/* Execute a DML statement.  This depends on t1 existing. */
0: 			boolean b = s.execute("INSERT into t1 values (1)");
1: 
0: 			//if (rs.next())
0: 			//{
0: 			//	System.out.println("Value of t1.s is " + rs.getShort(1));
0: 			//}
0: 		}
0: 		catch (SQLException se)
0: 		{
0: 			System.out.println("Caught exception " + se);
0: 			se.printStackTrace(System.out);
0: 		}
0: 		finally
0: 		{
0: 			try
0: 			{
0: 				if (rs != null)
0: 					rs.close();
0: 			}
0: 			catch (SQLException se)
0: 			{
0: 				System.out.println("Caught exception " + se);
0: 				se.printStackTrace(System.out);
0: 			}
0: 		}
0: 	}
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.util.StaticInitializers.InsertInStaticInitializer
0: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================