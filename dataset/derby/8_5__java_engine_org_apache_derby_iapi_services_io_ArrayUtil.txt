1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.ArrayUtil
1:57465ef: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
6:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:554386c: import java.util.Arrays;
1:554386c: import java.util.Collections;
1:554386c: import java.util.List;
1:eac0369: 
2:eac0369: /**
1:eac0369:   Utility class for constructing and reading and writing arrays from/to
1:57465ef:   formatId streams and for performing other operations on arrays.
1:eac0369:  
1:eac0369:   @version 0.1
1:eac0369:  */
1:eac0369: public abstract class ArrayUtil
3:eac0369: {
1:bb5be6f:     /**
1:bb5be6f:      * An instance of an empty byte array. Since empty arrays are immutable,
1:bb5be6f:      * this instance can safely be shared. Code that needs an empty byte
1:bb5be6f:      * array can use this static instance instead of allocating a new one.
1:bb5be6f:      */
1:bb5be6f:     public final static byte[] EMPTY_BYTE_ARRAY = {};
1:bb5be6f: 
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:3f7581c: 	// Methods to copy arrays.
1:57465ef: 	//
1:57465ef: 	///////////////////////////////////////////////////////////////////
1:57465ef: 
1:9c18af1:     /** Copy an array of objects; the original array could be null */
1:3f7581c:     public  static <T> T[] copy( T[] original )
1:9c18af1:     {
1:3f7581c:         return (original == null) ?
1:3f7581c:                 null :
1:3f7581c:                 Arrays.copyOf(original, original.length);
1:9c18af1:     }
1:9c18af1: 
1:57465ef:     /** Copy a (possibly null) array of booleans */
1:57465ef:     public  static  boolean[]   copy( boolean[] original )
1:57465ef:     {
1:57465ef:         return (original == null) ? null : (boolean[]) original.clone();
1:57465ef:     }
1:57465ef: 
1:6b23802:     /** Copy a (possibly null) array of bytes */
1:6b23802:     public  static  byte[]   copy( byte[] original )
1:6b23802:     {
1:6b23802:         return (original == null) ? null : (byte[]) original.clone();
1:6b23802:     }
1:6b23802: 
1:57465ef:     /** Copy a (possibly null) array of ints */
1:57465ef:     public  static  int[]   copy( int[] original )
1:57465ef:     {
1:57465ef:         return (original == null) ? null : (int[]) original.clone();
1:57465ef:     }
1:57465ef: 
1:bc2c59e:     /** Copy a (possibly null) array of longs */
1:bc2c59e:     public  static  long[]   copy( long[] original )
1:bc2c59e:     {
1:bc2c59e:         return (original == null) ? null : (long[]) original.clone();
1:bc2c59e:     }
1:bc2c59e: 
1:bc2c59e:     /** Copy a (possibly null) 2-dimensional array of ints */
1:bc2c59e:     public  static  int[][]   copy2( int[][] original )
1:bc2c59e:     {
1:bc2c59e:         if ( original == null ) { return null; }
1:bc2c59e: 
1:bc2c59e:         int[][] result = new int[ original.length ][];
1:bc2c59e:         for ( int i = 0; i < original.length; i++ )
1:bc2c59e:         {
1:bc2c59e:             result[ i ] = copy( original[ i ] );
1:bc2c59e:         }
1:bc2c59e:         
1:bc2c59e:         return result;
1:bc2c59e:     }
1:bc2c59e: 
1:554386c:     /**
1:554386c:      * Make the contents of an array available as a read-only list. If the
1:554386c:      * array is null, an empty list will be returned.
1:554386c:      */
1:579dc9f:     @SafeVarargs
1:3f7581c:     public static <T> List<T> asReadOnlyList(T... array) {
1:3f7581c:         if (array == null) {
1:3f7581c:             return Collections.emptyList();
1:3f7581c:         } else {
1:3f7581c:             return Collections.unmodifiableList(Arrays.asList(array));
1:3f7581c:         }
1:554386c:     }
1:554386c: 
1:57465ef: 	///////////////////////////////////////////////////////////////////
1:57465ef: 	//
1:eac0369: 	// Methods for Arrays of OBJECTS.  Cannot be used for an
1:eac0369: 	// array of primitives, see below for something for primitives
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	  Write the length of an array of objects to an output stream.
1:eac0369: 
1:eac0369: 	  The length
1:eac0369: 
1:eac0369: 	  @param	out		ObjectOutput stream
1:eac0369: 	  @param	a		array of objects whose length should be written.
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static void writeArrayLength(ObjectOutput out, Object[] a)
1:eac0369: 		 throws IOException
1:57465ef: 	{
1:eac0369: 		out.writeInt(a.length);
1:57465ef: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Write an array of objects to an output stream.
1:eac0369: 
1:eac0369: 	  @param	out		Object output stream to write to.
1:eac0369: 	  @param	a		array of objects to write.
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static void writeArrayItems(ObjectOutput out, Object[] a)
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		if (a == null)
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		for(int ix = 0; ix < a.length; ix++)
1:eac0369: 		{	out.writeObject(a[ix]); }
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Write an array of objects and length to an output stream.
1:eac0369: 	  Does equivalent of writeArrayLength() followed by writeArrayItems()
1:eac0369: 
1:eac0369: 	  @param	out		Object output stream to write to.
1:eac0369: 	  @param	a		array of objects to write.
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static void writeArray(ObjectOutput out, Object[] a)
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		if (a == null) 
1:eac0369: 		{
1:eac0369: 			out.writeInt(0);
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		out.writeInt(a.length);
1:eac0369: 		for(int ix = 0; ix < a.length; ix++)
1:eac0369: 		{	out.writeObject(a[ix]); }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read an array of objects out of a stream.
1:eac0369: 
1:eac0369: 	  @param	in	Input stream
1:eac0369: 	  @param	a	array to read into
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  @exception java.lang.ClassNotFoundException The Class for an Object we are reading does not exist
1:eac0369: 	  */
1:eac0369: 	public static void readArrayItems(ObjectInput in, Object[] a)
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		for (int ix=0; ix<a.length; ix++)
1:eac0369: 		{
1:eac0369: 			a[ix]=in.readObject();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read the length of an array of objects in an object stream.
1:eac0369: 
1:eac0369: 	  @param	in	Input stream.
1:eac0369: 
1:eac0369: 	  @return	length of the array of objects
1:eac0369: 	  
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static int readArrayLength(ObjectInput in)
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		return in.readInt();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Reads an array of objects from the stream.
1:eac0369: 
1:eac0369: 	  @param	in	Input stream
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  @exception java.lang.ClassNotFoundException The Class for an Object we are reading does not exist
1:eac0369: 	  */
1:eac0369: 	public static Object[] readObjectArray(ObjectInput in)
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		int	size = in.readInt();
1:eac0369: 		if ( size == 0 ) { return null; }
1:eac0369: 
1:eac0369: 		Object[]	result = new Object[ size ];
1:eac0369: 
1:eac0369: 		readArrayItems( in, result );
1:eac0369: 
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// Methods for Arrays of INTs
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Write an array of integers to an ObjectOutput. This writes the array
1:eac0369: 	  in a format readIntArray understands.
1:eac0369: 
1:eac0369: 	  @param out the ObjectOutput.
1:eac0369: 	  @param a the array.
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static void writeIntArray(ObjectOutput out, int[] a) throws IOException {
1:eac0369: 		if (a == null)
1:eac0369: 			out.writeInt(0);
1:eac0369: 		else {
1:eac0369: 			out.writeInt(a.length);
1:eac0369: 			for (int i=0; i<a.length; i++)
1:eac0369: 				out.writeInt(a[i]);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read an array of integers from an ObjectInput. This allocates the
1:eac0369: 	  array.
1:eac0369: 
1:eac0369: 	  @param	in	the ObjectInput.
1:eac0369: 	  @return   the array of integers.
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static int[] readIntArray(ObjectInput in) throws IOException {
1:eac0369: 		int length = in.readInt();
1:eac0369: 		if (length == 0)
2:eac0369: 			return null;
1:eac0369: 		int[] a = new int[length];
1:eac0369: 		for (int i=0; i<length; i++)
1:eac0369: 			a[i] = in.readInt();
1:eac0369: 		return a;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public	static	void	writeInts( ObjectOutput out, int[][] val )
1:eac0369: 		throws IOException
1:eac0369: 	{
1:eac0369: 		if (val == null)
1:eac0369: 		{
1:eac0369: 			out.writeBoolean(false);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			out.writeBoolean(true);
1:eac0369: 
1:eac0369: 			int	count = val.length;
1:eac0369: 			out.writeInt( count );
1:eac0369: 
1:eac0369: 			for (int i = 0; i < count; i++)
1:eac0369: 			{
1:eac0369: 				ArrayUtil.writeIntArray( out, val[i] );
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public	static	int[][]	readInts( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		int[][]	retVal = null;
1:eac0369: 
1:eac0369: 		if ( in.readBoolean() )
1:eac0369: 		{
1:eac0369: 			int	count = in.readInt();
1:eac0369: 
1:eac0369: 			retVal = new int[ count ][];
1:eac0369: 
1:eac0369: 			for (int i = 0; i < count; i++)
1:eac0369: 			{
1:eac0369: 				retVal[ i ] = ArrayUtil.readIntArray( in );
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retVal;
1:eac0369: 	}
1:0c91b19: 
1:0c91b19:     public static String toString(int[] value)
1:0c91b19:     {
1:0c91b19:         if (value == null || value.length == 0)
1:0c91b19:         {
1:a9c3863:             return "null";
1:0c91b19:         }
1:0c91b19:         else
1:0c91b19:         {
1:a9c3863:             StringBuffer ret_val = new StringBuffer();
1:0c91b19:             for (int i = 0; i < value.length; i++)
1:0c91b19:             {
1:a9c3863:                 ret_val.append("[").append(value[i]).append("],");
1:0c91b19:             }
1:a9c3863:             return ret_val.toString();
1:0c91b19:         }
1:0c91b19:     }
1:0c91b19: 
1:0c91b19: 
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// Methods for Arrays of LONGs
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Write an array of longs to an ObjectOutput. This writes the array
1:eac0369: 	  in a format readLongArray understands.
1:eac0369: 
1:eac0369: 	  @param out the ObjectOutput.
1:eac0369: 	  @param a the array.
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static void writeLongArray(ObjectOutput out, long[] a) throws IOException {
1:eac0369: 		if (a == null)
1:eac0369: 			out.writeInt(0);
1:eac0369: 		else {
1:eac0369: 			out.writeInt(a.length);
1:eac0369: 			for (int i=0; i<a.length; i++)
1:eac0369: 				out.writeLong(a[i]);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read an array of integers from an ObjectInput. This allocates the
1:eac0369: 	  array.
1:eac0369: 
1:eac0369: 	  @param	in	the ObjectInput.
1:eac0369: 	  @return   the array of integers.
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static long[] readLongArray(ObjectInput in) throws IOException {
1:eac0369: 		int length = in.readInt();
1:eac0369: 		long[] a = new long[length];
1:eac0369: 		for (int i=0; i<length; i++)
1:eac0369: 			a[i] = in.readLong();
1:eac0369: 		return a;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read an array of strings from an ObjectInput. This allocates the
1:eac0369: 	  array.
1:eac0369: 
1:eac0369: 	  @param	in	the ObjectInput.
1:eac0369: 	  @return   the array of integers.
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static String[] readStringArray(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:dda453e:         String[] stringArray = null;
1:eac0369: 
1:dda453e:         int size = readArrayLength(in);
1:dda453e:         if (size > 0) {
1:dda453e:             stringArray = new String[size];
1:dda453e:             readArrayItems(in, stringArray);
1:dda453e:         }
1:eac0369: 
1:eac0369: 		return stringArray;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// Methods for Arrays of BOOLEANS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Write an array of booleans to an ObjectOutput. This writes the array
1:eac0369: 	  in a format readBooleanArray understands.
1:eac0369: 
1:eac0369: 	  @param out the ObjectOutput.
1:eac0369: 	  @param a the array.
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static void writeBooleanArray(ObjectOutput out, boolean[] a) throws IOException {
1:eac0369: 		if (a == null)
1:eac0369: 			out.writeInt(0);
1:eac0369: 		else {
1:eac0369: 			out.writeInt(a.length);
1:eac0369: 			for (int i=0; i<a.length; i++)
1:eac0369: 				out.writeBoolean(a[i]);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Read an array of integers from an ObjectInput. This allocates the
1:eac0369: 	  array.
1:eac0369: 
1:eac0369: 	  @param	in	the ObjectInput.
1:eac0369: 	  @return   the array of integers.
1:eac0369: 
1:eac0369: 	  @exception java.io.IOException The write caused an IOException. 
1:eac0369: 	  */
1:eac0369: 	public static boolean[] readBooleanArray(ObjectInput in) throws IOException {
1:eac0369: 		int length = in.readInt();
1:eac0369: 		boolean[] a = new boolean[length];
1:eac0369: 		for (int i=0; i<length; i++)
1:eac0369: 			a[i] = in.readBoolean();
1:eac0369: 		return a;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:bb5be6f
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * An instance of an empty byte array. Since empty arrays are immutable,
1:      * this instance can safely be shared. Code that needs an empty byte
1:      * array can use this static instance instead of allocating a new one.
1:      */
1:     public final static byte[] EMPTY_BYTE_ARRAY = {};
1: 
commit:3f7581c
/////////////////////////////////////////////////////////////////////////
1: 	// Methods to copy arrays.
1:     public  static <T> T[] copy( T[] original )
1:         return (original == null) ?
1:                 null :
1:                 Arrays.copyOf(original, original.length);
/////////////////////////////////////////////////////////////////////////
1:     public static <T> List<T> asReadOnlyList(T... array) {
1:         if (array == null) {
1:             return Collections.emptyList();
1:         } else {
1:             return Collections.unmodifiableList(Arrays.asList(array));
1:         }
commit:554386c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Make the contents of an array available as a read-only list. If the
1:      * array is null, an empty list will be returned.
1:      */
0:     public static List asReadOnlyList(Object[] array) {
0:         return array == null ?
0:                 Collections.EMPTY_LIST :
0:                 Collections.unmodifiableList(Arrays.asList(array));
1:     }
1: 
commit:dda453e
/////////////////////////////////////////////////////////////////////////
1:         String[] stringArray = null;
1:         int size = readArrayLength(in);
1:         if (size > 0) {
1:             stringArray = new String[size];
1:             readArrayItems(in, stringArray);
1:         }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:579dc9f
/////////////////////////////////////////////////////////////////////////
1:     @SafeVarargs
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
0:     public static List<Object> asReadOnlyList(Object[] array) {
0:         return (List<Object>)
0:             (
0:              array == null ?
0:              Collections.EMPTY_LIST :
0:              Collections.unmodifiableList(Arrays.asList(array))
0:              );
commit:bc2c59e
/////////////////////////////////////////////////////////////////////////
1:     /** Copy a (possibly null) array of longs */
1:     public  static  long[]   copy( long[] original )
1:     {
1:         return (original == null) ? null : (long[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) 2-dimensional array of ints */
1:     public  static  int[][]   copy2( int[][] original )
1:     {
1:         if ( original == null ) { return null; }
1: 
1:         int[][] result = new int[ original.length ][];
1:         for ( int i = 0; i < original.length; i++ )
1:         {
1:             result[ i ] = copy( original[ i ] );
1:         }
1:         
1:         return result;
1:     }
1: 
commit:6b23802
/////////////////////////////////////////////////////////////////////////
0:     /** Copy a (possibly null) array of strings */
/////////////////////////////////////////////////////////////////////////
1:     /** Copy a (possibly null) array of bytes */
1:     public  static  byte[]   copy( byte[] original )
1:     {
1:         return (original == null) ? null : (byte[]) original.clone();
1:     }
1: 
commit:9c18af1
/////////////////////////////////////////////////////////////////////////
1:     /** Copy an array of objects; the original array could be null */
0:     public  static  Object[]    copy( Object[] original )
1:     {
0:         return (original == null) ? null : (Object[]) original.clone();
1:     }
1: 
commit:57465ef
/////////////////////////////////////////////////////////////////////////
1:   formatId streams and for performing other operations on arrays.
/////////////////////////////////////////////////////////////////////////
0: 	// Methods to copy arrays. We'd like to use java.util.copyOf(), but
0:     // we have to run on Java 5.
1: 	//
1: 	///////////////////////////////////////////////////////////////////
1: 
0:     /** Copy an array of strings; the original array could be null */
0:     public  static  String[]    copy( String[] original )
1:     {
0:         return (original == null) ? null : (String[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) array of booleans */
1:     public  static  boolean[]   copy( boolean[] original )
1:     {
1:         return (original == null) ? null : (boolean[]) original.clone();
1:     }
1: 
1:     /** Copy a (possibly null) array of ints */
1:     public  static  int[]   copy( int[] original )
1:     {
1:         return (original == null) ? null : (int[]) original.clone();
1:     }
1: 
1: 	///////////////////////////////////////////////////////////////////
1: 	//
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Lily Wei
-------------------------------------------------------------------------------
commit:a9c3863
/////////////////////////////////////////////////////////////////////////
1:             return "null";
1:             StringBuffer ret_val = new StringBuffer();
1:                 ret_val.append("[").append(value[i]).append("],");
1:             return ret_val.toString();
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:0c91b19
/////////////////////////////////////////////////////////////////////////
1:     public static String toString(int[] value)
1:     {
0:         String ret_val;
1: 
1:         if (value == null || value.length == 0)
1:         {
0:             ret_val = "null";
1:         }
1:         else
1:         {
0:             ret_val = "";
1:             for (int i = 0; i < value.length; i++)
1:             {
0:                 ret_val += "[" + value[i] + "],";
1:             }
1:         }
0:         return(ret_val);
1:     }
1: 
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.ArrayUtil
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
0: import java.lang.reflect.Array;
1: 
1: /**
1:   Utility class for constructing and reading and writing arrays from/to
0:   formatId streams.
1:  
1:   @version 0.1
0:   @author Rick Hillegas
1:  */
1: public abstract class ArrayUtil
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	///////////////////////////////////////////////////////////////////
1: 	//
1: 	// Methods for Arrays of OBJECTS.  Cannot be used for an
1: 	// array of primitives, see below for something for primitives
1: 	//
1: 	///////////////////////////////////////////////////////////////////
1: 	/**
1: 	  Write the length of an array of objects to an output stream.
1: 
1: 	  The length
1: 
1: 	  @param	out		ObjectOutput stream
1: 	  @param	a		array of objects whose length should be written.
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static void writeArrayLength(ObjectOutput out, Object[] a)
1: 		 throws IOException
1: 	{
1: 		out.writeInt(a.length);
1: 	}
1: 
1: 	/**
1: 	  Write an array of objects to an output stream.
1: 
1: 	  @param	out		Object output stream to write to.
1: 	  @param	a		array of objects to write.
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static void writeArrayItems(ObjectOutput out, Object[] a)
1: 		 throws IOException
1: 	{
1: 		if (a == null)
1: 			return;
1: 
1: 		for(int ix = 0; ix < a.length; ix++)
1: 		{	out.writeObject(a[ix]); }
1: 	}
1: 
1: 	/**
1: 	  Write an array of objects and length to an output stream.
1: 	  Does equivalent of writeArrayLength() followed by writeArrayItems()
1: 
1: 	  @param	out		Object output stream to write to.
1: 	  @param	a		array of objects to write.
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static void writeArray(ObjectOutput out, Object[] a)
1: 		 throws IOException
1: 	{
1: 		if (a == null) 
1: 		{
1: 			out.writeInt(0);
1: 			return;
1: 		}
1: 
1: 		out.writeInt(a.length);
1: 		for(int ix = 0; ix < a.length; ix++)
1: 		{	out.writeObject(a[ix]); }
1: 	}
1: 
1: 	/**
1: 	  Read an array of objects out of a stream.
1: 
1: 	  @param	in	Input stream
1: 	  @param	a	array to read into
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  @exception java.lang.ClassNotFoundException The Class for an Object we are reading does not exist
1: 	  */
1: 	public static void readArrayItems(ObjectInput in, Object[] a)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		for (int ix=0; ix<a.length; ix++)
1: 		{
1: 			a[ix]=in.readObject();
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Read the length of an array of objects in an object stream.
1: 
1: 	  @param	in	Input stream.
1: 
1: 	  @return	length of the array of objects
1: 	  
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static int readArrayLength(ObjectInput in)
1: 		 throws IOException
1: 	{
1: 		return in.readInt();
1: 	}
1: 
1: 	/**
1: 	  Reads an array of objects from the stream.
1: 
1: 	  @param	in	Input stream
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  @exception java.lang.ClassNotFoundException The Class for an Object we are reading does not exist
1: 	  */
1: 	public static Object[] readObjectArray(ObjectInput in)
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		int	size = in.readInt();
1: 		if ( size == 0 ) { return null; }
1: 
1: 		Object[]	result = new Object[ size ];
1: 
1: 		readArrayItems( in, result );
1: 
1: 		return result;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////
1: 	//
1: 	// Methods for Arrays of INTs
1: 	//
1: 	///////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  Write an array of integers to an ObjectOutput. This writes the array
1: 	  in a format readIntArray understands.
1: 
1: 	  @param out the ObjectOutput.
1: 	  @param a the array.
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static void writeIntArray(ObjectOutput out, int[] a) throws IOException {
1: 		if (a == null)
1: 			out.writeInt(0);
1: 		else {
1: 			out.writeInt(a.length);
1: 			for (int i=0; i<a.length; i++)
1: 				out.writeInt(a[i]);
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Read an array of integers from an ObjectInput. This allocates the
1: 	  array.
1: 
1: 	  @param	in	the ObjectInput.
1: 	  @return   the array of integers.
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static int[] readIntArray(ObjectInput in) throws IOException {
1: 		int length = in.readInt();
1: 		if (length == 0)
1: 			return null;
1: 		int[] a = new int[length];
1: 		for (int i=0; i<length; i++)
1: 			a[i] = in.readInt();
1: 		return a;
1: 	}
1: 
1: 	public	static	void	writeInts( ObjectOutput out, int[][] val )
1: 		throws IOException
1: 	{
1: 		if (val == null)
1: 		{
1: 			out.writeBoolean(false);
1: 		}
1: 		else
1: 		{
1: 			out.writeBoolean(true);
1: 
1: 			int	count = val.length;
1: 			out.writeInt( count );
1: 
1: 			for (int i = 0; i < count; i++)
1: 			{
1: 				ArrayUtil.writeIntArray( out, val[i] );
1: 			}
1: 		}
1: 	}
1: 
1: 	public	static	int[][]	readInts( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		int[][]	retVal = null;
1: 
1: 		if ( in.readBoolean() )
1: 		{
1: 			int	count = in.readInt();
1: 
1: 			retVal = new int[ count ][];
1: 
1: 			for (int i = 0; i < count; i++)
1: 			{
1: 				retVal[ i ] = ArrayUtil.readIntArray( in );
1: 			}
1: 		}
1: 
1: 		return retVal;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////
1: 	//
1: 	// Methods for Arrays of LONGs
1: 	//
1: 	///////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  Write an array of longs to an ObjectOutput. This writes the array
1: 	  in a format readLongArray understands.
1: 
1: 	  @param out the ObjectOutput.
1: 	  @param a the array.
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static void writeLongArray(ObjectOutput out, long[] a) throws IOException {
1: 		if (a == null)
1: 			out.writeInt(0);
1: 		else {
1: 			out.writeInt(a.length);
1: 			for (int i=0; i<a.length; i++)
1: 				out.writeLong(a[i]);
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Read an array of integers from an ObjectInput. This allocates the
1: 	  array.
1: 
1: 	  @param	in	the ObjectInput.
1: 	  @return   the array of integers.
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static long[] readLongArray(ObjectInput in) throws IOException {
1: 		int length = in.readInt();
1: 		long[] a = new long[length];
1: 		for (int i=0; i<length; i++)
1: 			a[i] = in.readLong();
1: 		return a;
1: 	}
1: 
1: 	/**
1: 	  Read an array of strings from an ObjectInput. This allocates the
1: 	  array.
1: 
1: 	  @param	in	the ObjectInput.
1: 	  @return   the array of integers.
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static String[] readStringArray(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
0: 		Object[] objArray = readObjectArray(in);
0: 		int size = 0;
1: 
0: 		if (objArray == null)
1: 			return null;
1: 
0: 		String[] stringArray = new String[size = objArray.length];
1: 
0: 		for (int i = 0; i < size; i++)
1: 		{
0: 			stringArray[i] = (String)objArray[i];
1: 		} 
1: 
1: 		return stringArray;
1: 	}
1: 	
1: 	///////////////////////////////////////////////////////////////////
1: 	//
1: 	// Methods for Arrays of BOOLEANS
1: 	//
1: 	///////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  Write an array of booleans to an ObjectOutput. This writes the array
1: 	  in a format readBooleanArray understands.
1: 
1: 	  @param out the ObjectOutput.
1: 	  @param a the array.
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static void writeBooleanArray(ObjectOutput out, boolean[] a) throws IOException {
1: 		if (a == null)
1: 			out.writeInt(0);
1: 		else {
1: 			out.writeInt(a.length);
1: 			for (int i=0; i<a.length; i++)
1: 				out.writeBoolean(a[i]);
1: 		}
1: 	}
1: 
1: 	/**
1: 	  Read an array of integers from an ObjectInput. This allocates the
1: 	  array.
1: 
1: 	  @param	in	the ObjectInput.
1: 	  @return   the array of integers.
1: 
1: 	  @exception java.io.IOException The write caused an IOException. 
1: 	  */
1: 	public static boolean[] readBooleanArray(ObjectInput in) throws IOException {
1: 		int length = in.readInt();
1: 		boolean[] a = new boolean[length];
1: 		for (int i=0; i<length; i++)
1: 			a[i] = in.readBoolean();
1: 		return a;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.lang.reflect.Array;
0: 
0: /**
0:   Utility class for constructing and reading and writing arrays from/to
0:   formatId streams.
0:  
0:   @version 0.1
0:   @author Rick Hillegas
0:  */
0: public abstract class ArrayUtil
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	///////////////////////////////////////////////////////////////////
0: 	//
0: 	// Methods for Arrays of OBJECTS.  Cannot be used for an
0: 	// array of primitives, see below for something for primitives
0: 	//
0: 	///////////////////////////////////////////////////////////////////
0: 	/**
0: 	  Write the length of an array of objects to an output stream.
0: 
0: 	  The length
0: 
0: 	  @param	out		ObjectOutput stream
0: 	  @param	a		array of objects whose length should be written.
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static void writeArrayLength(ObjectOutput out, Object[] a)
0: 		 throws IOException
0: 	{
0: 		out.writeInt(a.length);
0: 	}
0: 
0: 	/**
0: 	  Write an array of objects to an output stream.
0: 
0: 	  @param	out		Object output stream to write to.
0: 	  @param	a		array of objects to write.
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static void writeArrayItems(ObjectOutput out, Object[] a)
0: 		 throws IOException
0: 	{
0: 		if (a == null)
0: 			return;
0: 
0: 		for(int ix = 0; ix < a.length; ix++)
0: 		{	out.writeObject(a[ix]); }
0: 	}
0: 
0: 	/**
0: 	  Write an array of objects and length to an output stream.
0: 	  Does equivalent of writeArrayLength() followed by writeArrayItems()
0: 
0: 	  @param	out		Object output stream to write to.
0: 	  @param	a		array of objects to write.
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static void writeArray(ObjectOutput out, Object[] a)
0: 		 throws IOException
0: 	{
0: 		if (a == null) 
0: 		{
0: 			out.writeInt(0);
0: 			return;
0: 		}
0: 
0: 		out.writeInt(a.length);
0: 		for(int ix = 0; ix < a.length; ix++)
0: 		{	out.writeObject(a[ix]); }
0: 	}
0: 
0: 	/**
0: 	  Read an array of objects out of a stream.
0: 
0: 	  @param	in	Input stream
0: 	  @param	a	array to read into
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  @exception java.lang.ClassNotFoundException The Class for an Object we are reading does not exist
0: 	  */
0: 	public static void readArrayItems(ObjectInput in, Object[] a)
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		for (int ix=0; ix<a.length; ix++)
0: 		{
0: 			a[ix]=in.readObject();
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Read the length of an array of objects in an object stream.
0: 
0: 	  @param	in	Input stream.
0: 
0: 	  @return	length of the array of objects
0: 	  
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static int readArrayLength(ObjectInput in)
0: 		 throws IOException
0: 	{
0: 		return in.readInt();
0: 	}
0: 
0: 	/**
0: 	  Reads an array of objects from the stream.
0: 
0: 	  @param	in	Input stream
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  @exception java.lang.ClassNotFoundException The Class for an Object we are reading does not exist
0: 	  */
0: 	public static Object[] readObjectArray(ObjectInput in)
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		int	size = in.readInt();
0: 		if ( size == 0 ) { return null; }
0: 
0: 		Object[]	result = new Object[ size ];
0: 
0: 		readArrayItems( in, result );
0: 
0: 		return result;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////
0: 	//
0: 	// Methods for Arrays of INTs
0: 	//
0: 	///////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  Write an array of integers to an ObjectOutput. This writes the array
0: 	  in a format readIntArray understands.
0: 
0: 	  @param out the ObjectOutput.
0: 	  @param a the array.
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static void writeIntArray(ObjectOutput out, int[] a) throws IOException {
0: 		if (a == null)
0: 			out.writeInt(0);
0: 		else {
0: 			out.writeInt(a.length);
0: 			for (int i=0; i<a.length; i++)
0: 				out.writeInt(a[i]);
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Read an array of integers from an ObjectInput. This allocates the
0: 	  array.
0: 
0: 	  @param	in	the ObjectInput.
0: 	  @return   the array of integers.
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static int[] readIntArray(ObjectInput in) throws IOException {
0: 		int length = in.readInt();
0: 		if (length == 0)
0: 			return null;
0: 		int[] a = new int[length];
0: 		for (int i=0; i<length; i++)
0: 			a[i] = in.readInt();
0: 		return a;
0: 	}
0: 
0: 	public	static	void	writeInts( ObjectOutput out, int[][] val )
0: 		throws IOException
0: 	{
0: 		if (val == null)
0: 		{
0: 			out.writeBoolean(false);
0: 		}
0: 		else
0: 		{
0: 			out.writeBoolean(true);
0: 
0: 			int	count = val.length;
0: 			out.writeInt( count );
0: 
0: 			for (int i = 0; i < count; i++)
0: 			{
0: 				ArrayUtil.writeIntArray( out, val[i] );
0: 			}
0: 		}
0: 	}
0: 
0: 	public	static	int[][]	readInts( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		int[][]	retVal = null;
0: 
0: 		if ( in.readBoolean() )
0: 		{
0: 			int	count = in.readInt();
0: 
0: 			retVal = new int[ count ][];
0: 
0: 			for (int i = 0; i < count; i++)
0: 			{
0: 				retVal[ i ] = ArrayUtil.readIntArray( in );
0: 			}
0: 		}
0: 
0: 		return retVal;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////
0: 	//
0: 	// Methods for Arrays of LONGs
0: 	//
0: 	///////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  Write an array of longs to an ObjectOutput. This writes the array
0: 	  in a format readLongArray understands.
0: 
0: 	  @param out the ObjectOutput.
0: 	  @param a the array.
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static void writeLongArray(ObjectOutput out, long[] a) throws IOException {
0: 		if (a == null)
0: 			out.writeInt(0);
0: 		else {
0: 			out.writeInt(a.length);
0: 			for (int i=0; i<a.length; i++)
0: 				out.writeLong(a[i]);
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Read an array of integers from an ObjectInput. This allocates the
0: 	  array.
0: 
0: 	  @param	in	the ObjectInput.
0: 	  @return   the array of integers.
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static long[] readLongArray(ObjectInput in) throws IOException {
0: 		int length = in.readInt();
0: 		long[] a = new long[length];
0: 		for (int i=0; i<length; i++)
0: 			a[i] = in.readLong();
0: 		return a;
0: 	}
0: 
0: 	/**
0: 	  Read an array of strings from an ObjectInput. This allocates the
0: 	  array.
0: 
0: 	  @param	in	the ObjectInput.
0: 	  @return   the array of integers.
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static String[] readStringArray(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		Object[] objArray = readObjectArray(in);
0: 		int size = 0;
0: 
0: 		if (objArray == null)
0: 			return null;
0: 
0: 		String[] stringArray = new String[size = objArray.length];
0: 
0: 		for (int i = 0; i < size; i++)
0: 		{
0: 			stringArray[i] = (String)objArray[i];
0: 		} 
0: 
0: 		return stringArray;
0: 	}
0: 	
0: 	///////////////////////////////////////////////////////////////////
0: 	//
0: 	// Methods for Arrays of BOOLEANS
0: 	//
0: 	///////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  Write an array of booleans to an ObjectOutput. This writes the array
0: 	  in a format readBooleanArray understands.
0: 
0: 	  @param out the ObjectOutput.
0: 	  @param a the array.
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static void writeBooleanArray(ObjectOutput out, boolean[] a) throws IOException {
0: 		if (a == null)
0: 			out.writeInt(0);
0: 		else {
0: 			out.writeInt(a.length);
0: 			for (int i=0; i<a.length; i++)
0: 				out.writeBoolean(a[i]);
0: 		}
0: 	}
0: 
0: 	/**
0: 	  Read an array of integers from an ObjectInput. This allocates the
0: 	  array.
0: 
0: 	  @param	in	the ObjectInput.
0: 	  @return   the array of integers.
0: 
0: 	  @exception java.io.IOException The write caused an IOException. 
0: 	  */
0: 	public static boolean[] readBooleanArray(ObjectInput in) throws IOException {
0: 		int length = in.readInt();
0: 		boolean[] a = new boolean[length];
0: 		for (int i=0; i<length; i++)
0: 			a[i] = in.readBoolean();
0: 		return a;
0: 	}
0: }
============================================================================