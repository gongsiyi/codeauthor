1:318307e: /*
2:318307e: 
1:318307e:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.JitTest
1:318307e: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:318307e: 
1:318307e:       http://www.apache.org/licenses/LICENSE-2.0
1:318307e: 
1:318307e:    Unless required by applicable law or agreed to in writing, software
1:318307e:    distributed under the License is distributed on an "AS IS" BASIS,
1:318307e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:318307e:    See the License for the specific language governing permissions and
1:318307e:    limitations under the License.
1:318307e: 
1:318307e:  */
1:318307e: 
1:318307e: package org.apache.derbyTesting.functionTests.tests.lang;
1:318307e: 
1:318307e: import java.sql.Connection;
1:318307e: import java.sql.DatabaseMetaData;
1:318307e: import java.sql.ResultSet;
1:318307e: import java.sql.Statement;
1:318307e: import java.sql.SQLException;
1:318307e: 
1:318307e: import org.apache.derby.tools.ij;
1:318307e: import org.apache.derby.tools.JDBCDisplayUtil;
1:318307e: 
1:318307e: /**
1:318307e:  * DERBY-1327
1:318307e:  * Identity column can be created with wrong and very large start with 
1:318307e:  * value with "J2RE 1.5.0 IBM Windows 32 build pwi32dev-20060412 (SR2)" 
1:318307e:  * with JIT on
1:318307e:  */
1:318307e: public class JitTest {
1:318307e: 
1:318307e:   public static void main (String args[]) 
1:318307e:   { 
1:318307e:     try {
1:318307e:     	/* Load the JDBC Driver class */
1:318307e:     	// use the ij utility to read the property file and
1:318307e:     	// make the initial connection.
1:318307e:     	ij.getPropertyArg(args);
1:318307e:     	Connection conn = ij.startJBMS();
1:318307e: 
1:205404e:     	System.out.println("Start JitTest");
1:318307e:     	//add tests specific to a jit issue
1:318307e:     	testDerby1327BadStartWithForAutoIncColumn(conn);
1:318307e:     	conn.close();
1:318307e:     } catch (Exception e) {
1:318307e:     	System.out.println("FAIL -- unexpected exception "+e);
1:318307e:     	JDBCDisplayUtil.ShowException(System.out, e);
1:96c3cce:       	e.printStackTrace(System.out);
1:318307e:     }
1:318307e:   }
1:318307e:   
1:318307e:   /**
1:318307e:    * After some number of table creations with JIT turned on, the START WITH  
1:318307e:    * value for the table being created and all the ones already created gets 
1:318307e:    * mysteriously changed with pwi32dev-20060412 (SR2)
1:318307e:    * 
1:318307e:    * @throws Exception
1:318307e:    */
1:318307e:   public static void testDerby1327BadStartWithForAutoIncColumn(Connection conn) 
1:318307e:   	throws Exception
1:318307e:   {
1:318307e: 	conn.setAutoCommit(false);
1:318307e: 		Statement stmt = null;		
1:318307e: 
1:318307e: 		dropAllAppTables(conn);
1:318307e: 		System.out.println("Create tables until we get a wrong Start with value");
1:318307e: 		stmt = conn.createStatement();
1:318307e: 
1:318307e: 		// numBadStartWith will be changed if any columns get a bad start with value.
1:318307e: 		int numBadStartWith = 0; 
1:318307e: 		String createTableSQL = null;
1:318307e: 		try {
1:318307e: 			// create 200 tables.  Break out if we get a table that has a bad
1:318307e: 			// start with value.
1:318307e: 			for (int i = 0; (i < 200) && (numBadStartWith == 0); i++)
1:318307e: 			{
1:318307e: 				String tableName = "APP.MYTABLE" + i;
1:318307e: 			    createTableSQL = "CREATE TABLE " + tableName + 
1:318307e: 				"  (ROLEID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY ("+
1:318307e: 				"START WITH 2, INCREMENT BY 1), INSTANCEID INTEGER, STATUS"+
1:318307e: 				" INTEGER, LOGICAL_STATE INTEGER, LSTATE_TSTAMP  TIMESTAMP,"+
1:318307e: 				" UPDT_TSTAMP TIMESTAMP, TSTAMP TIMESTAMP,"+
1:318307e: 				" CLALEVEL1_CLALEVEL2_CLALEVEL2ID VARCHAR(255),  "+
1:318307e: 				"CLALEVEL1_CLALEVEL2_CLALEVEL3_CLALEVEL3ID VARCHAR(255))";
1:318307e: 				
1:318307e: 				stmt.executeUpdate(createTableSQL);
1:318307e: 				conn.commit();
1:318307e:                 numBadStartWith = checkBadStartWithCols(conn,2);
1:318307e: 				if (numBadStartWith > 0)
1:318307e: 					break;
1:318307e: 			}
1:318307e: 		} catch (SQLException se)
1:318307e: 		{
1:318307e: 			System.out.println("Failed on " + createTableSQL);
1:318307e: 			JDBCDisplayUtil.ShowSQLException(System.out,se);
1:318307e: 
1:318307e: 		}
1:318307e: 		
1:318307e: 		if (numBadStartWith == 0)
1:318307e: 		{
1:318307e: 			System.out.println("PASS: All 200 tables created without problems");
1:318307e: 			dropAllAppTables(conn);
1:318307e: 		}
1:318307e: 		stmt.close();
1:318307e: 		conn.rollback();
1:318307e:   } 
1:318307e: 
1:318307e: 
1:318307e:   /**
1:318307e:    * Check that all tables in App do not have a an autoincrementstart value
1:318307e:    * greater tan maxautoincrementstart
1:318307e:    * @param conn
1:318307e:    * @param maxautoincrementstart  Maximum expected autoincrementstart value
1:318307e:    * @return number of columns with bad autoincrementstart value
1:318307e:    */
1:318307e:   	private static int checkBadStartWithCols(Connection conn, int
1:318307e:   	  		maxautoincrementstart) throws Exception
1:318307e:   	{
1:318307e:   		Statement stmt = conn.createStatement();
1:318307e:   		ResultSet rs =stmt.executeQuery("select count(autoincrementstart) from"+
1:318307e:   				" sys.syscolumns c, sys.systables t, sys.sysschemas s WHERE"+
1:96c3cce: 				" t.schemaid =  s.schemaid and CAST(s.schemaname AS VARCHAR(128))= 'APP' and"+
1:318307e: 				" autoincrementstart > " +  maxautoincrementstart);
1:318307e: 
1:318307e:   		rs.next();
1:318307e:   		int numBadStartWith = rs.getInt(1);
1:318307e:   		if (numBadStartWith > 0)
1:318307e:   			System.out.println(numBadStartWith + " columns have bad START WITH VALUE");
1:318307e:   		rs.close();
1:318307e:   		
1:318307e:   		if (numBadStartWith > 0)
1:318307e:   		{
1:318307e:   			rs =stmt.executeQuery("select tablename, columnname,"+
1:318307e:   					" autoincrementstart from sys.syscolumns c, sys.systables t,"+
1:96c3cce: 					" CAST(sys.sysschemas AS VARCHAR(128)) s WHERE t.schemaid = s.schemaid and"+
1:96c3cce: 					" CAST(s.schemaname AS VARCHAR(128)) = 'APP' and autoincrementstart > 2 ORDER"+
1:318307e: 					" BY tablename");
1:318307e:   			while (rs.next())
1:318307e:   			{
1:318307e:   				System.out.println("Unexpected start value: " +
1:318307e:   								   rs.getLong(3) + 
1:318307e:   								   " on column " + rs.getString(1) +
1:318307e:   								   "(" + rs.getString(2) + ")");
1:318307e:   				
1:318307e:   				
1:318307e:   			}
1:318307e:   		}
1:318307e:          return numBadStartWith;
1:318307e:   	}
1:318307e: 
1:318307e:   	/**
1:318307e:        * Drop all tables in schema APP
1:318307e:   	 * @param conn
1:318307e:   	 * @throws SQLException
1:318307e:   	 */
1:318307e:   	private  static void dropAllAppTables(Connection conn) throws SQLException
1:318307e:   	{
1:318307e:   		Statement stmt1 = conn.createStatement();
1:318307e:   		Statement stmt2 = conn.createStatement();
1:318307e:   		System.out.println("Drop all tables in APP schema");
1:318307e:   		ResultSet rs = stmt1.executeQuery("SELECT tablename from sys.systables"+
1:318307e:   				" t, sys.sysschemas s where t.schemaid = s.schemaid and"+
1:96c3cce: 				" CAST(s.schemaname AS VARCHAR(128)) = 'APP'");
1:318307e: 
1:318307e:   		while (rs.next())
1:318307e:   		{
1:318307e:   			String tableName = rs.getString(1);
1:318307e:   			
1:318307e:   			try {
1:318307e:   				stmt2.executeUpdate("DROP TABLE " + tableName);
1:318307e:   			}
1:318307e:   			catch (SQLException se)
1:318307e:   			{
1:318307e:   				System.out.println("Error dropping table:" + tableName);
1:318307e:   				se.printStackTrace();
1:318307e:   				continue;
1:318307e:   			}
1:318307e:   		}
1:318307e:   	}
1:318307e: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:96c3cce
/////////////////////////////////////////////////////////////////////////
1:       	e.printStackTrace(System.out);
/////////////////////////////////////////////////////////////////////////
1: 				" t.schemaid =  s.schemaid and CAST(s.schemaname AS VARCHAR(128))= 'APP' and"+
/////////////////////////////////////////////////////////////////////////
1: 					" CAST(sys.sysschemas AS VARCHAR(128)) s WHERE t.schemaid = s.schemaid and"+
1: 					" CAST(s.schemaname AS VARCHAR(128)) = 'APP' and autoincrementstart > 2 ORDER"+
/////////////////////////////////////////////////////////////////////////
1: 				" CAST(s.schemaname AS VARCHAR(128)) = 'APP'");
commit:205404e
/////////////////////////////////////////////////////////////////////////
1:     	System.out.println("Start JitTest");
/////////////////////////////////////////////////////////////////////////
commit:318307e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.JitTest
1: 
0:    Copyright (c) 2001, 2006 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.tools.ij;
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /**
1:  * DERBY-1327
1:  * Identity column can be created with wrong and very large start with 
1:  * value with "J2RE 1.5.0 IBM Windows 32 build pwi32dev-20060412 (SR2)" 
1:  * with JIT on
1:  */
1: public class JitTest {
1: 
1:   public static void main (String args[]) 
1:   { 
1:     try {
1:     	/* Load the JDBC Driver class */
1:     	// use the ij utility to read the property file and
1:     	// make the initial connection.
1:     	ij.getPropertyArg(args);
1:     	Connection conn = ij.startJBMS();
1: 
1:     	//add tests specific to a jit issue
1:     	testDerby1327BadStartWithForAutoIncColumn(conn);
1:     	conn.close();
1:     } catch (Exception e) {
1:     	System.out.println("FAIL -- unexpected exception "+e);
1:     	JDBCDisplayUtil.ShowException(System.out, e);
0:       	e.printStackTrace();
1:     }
1:   }
1:   
1:   /**
1:    * After some number of table creations with JIT turned on, the START WITH  
1:    * value for the table being created and all the ones already created gets 
1:    * mysteriously changed with pwi32dev-20060412 (SR2)
1:    * 
1:    * @throws Exception
1:    */
1:   public static void testDerby1327BadStartWithForAutoIncColumn(Connection conn) 
1:   	throws Exception
1:   {
1: 	conn.setAutoCommit(false);
1: 		Statement stmt = null;		
1: 
0: 		DatabaseMetaData md = conn.getMetaData() ;
0: 		System.out.println(md.getDatabaseProductVersion());
0: 		System.out.println(md.getDatabaseProductName());
0: 		System.out.println(md.getDriverName());
1: 		dropAllAppTables(conn);
1: 		System.out.println("Create tables until we get a wrong Start with value");
1: 		stmt = conn.createStatement();
1: 
1: 		// numBadStartWith will be changed if any columns get a bad start with value.
1: 		int numBadStartWith = 0; 
1: 		String createTableSQL = null;
1: 		try {
1: 			// create 200 tables.  Break out if we get a table that has a bad
1: 			// start with value.
1: 			for (int i = 0; (i < 200) && (numBadStartWith == 0); i++)
1: 			{
1: 				String tableName = "APP.MYTABLE" + i;
1: 			    createTableSQL = "CREATE TABLE " + tableName + 
1: 				"  (ROLEID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY ("+
1: 				"START WITH 2, INCREMENT BY 1), INSTANCEID INTEGER, STATUS"+
1: 				" INTEGER, LOGICAL_STATE INTEGER, LSTATE_TSTAMP  TIMESTAMP,"+
1: 				" UPDT_TSTAMP TIMESTAMP, TSTAMP TIMESTAMP,"+
1: 				" CLALEVEL1_CLALEVEL2_CLALEVEL2ID VARCHAR(255),  "+
1: 				"CLALEVEL1_CLALEVEL2_CLALEVEL3_CLALEVEL3ID VARCHAR(255))";
1: 				
1: 				stmt.executeUpdate(createTableSQL);
1: 				conn.commit();
1:                 numBadStartWith = checkBadStartWithCols(conn,2);
1: 				if (numBadStartWith > 0)
1: 					break;
1: 			}
1: 		} catch (SQLException se)
1: 		{
1: 			System.out.println("Failed on " + createTableSQL);
1: 			JDBCDisplayUtil.ShowSQLException(System.out,se);
1: 
1: 		}
1: 		
1: 		if (numBadStartWith == 0)
1: 		{
1: 			System.out.println("PASS: All 200 tables created without problems");
1: 			dropAllAppTables(conn);
1: 		}
1: 		stmt.close();
1: 		conn.rollback();
1:   } 
1: 
1: 
1:   /**
1:    * Check that all tables in App do not have a an autoincrementstart value
1:    * greater tan maxautoincrementstart
1:    * @param conn
1:    * @param maxautoincrementstart  Maximum expected autoincrementstart value
1:    * @return number of columns with bad autoincrementstart value
1:    */
1:   	private static int checkBadStartWithCols(Connection conn, int
1:   	  		maxautoincrementstart) throws Exception
1:   	{
1:   		Statement stmt = conn.createStatement();
1:   		ResultSet rs =stmt.executeQuery("select count(autoincrementstart) from"+
1:   				" sys.syscolumns c, sys.systables t, sys.sysschemas s WHERE"+
0: 				" t.schemaid =  s.schemaid and s.schemaname = 'APP' and"+
1: 				" autoincrementstart > " +  maxautoincrementstart);
1: 
1:   		rs.next();
1:   		int numBadStartWith = rs.getInt(1);
1:   		if (numBadStartWith > 0)
1:   			System.out.println(numBadStartWith + " columns have bad START WITH VALUE");
1:   		rs.close();
1:   		
1:   		if (numBadStartWith > 0)
1:   		{
1:   			rs =stmt.executeQuery("select tablename, columnname,"+
1:   					" autoincrementstart from sys.syscolumns c, sys.systables t,"+
0: 					" sys.sysschemas s WHERE t.schemaid = s.schemaid and"+
0: 					" s.schemaname = 'APP' and autoincrementstart > 2 ORDER"+
1: 					" BY tablename");
1:   			while (rs.next())
1:   			{
1:   				System.out.println("Unexpected start value: " +
1:   								   rs.getLong(3) + 
1:   								   " on column " + rs.getString(1) +
1:   								   "(" + rs.getString(2) + ")");
1:   				
1:   				
1:   			}
1:   		}
1:          return numBadStartWith;
1:   	}
1: 
1:   	/**
1:        * Drop all tables in schema APP
1:   	 * @param conn
1:   	 * @throws SQLException
1:   	 */
1:   	private  static void dropAllAppTables(Connection conn) throws SQLException
1:   	{
1:   		Statement stmt1 = conn.createStatement();
1:   		Statement stmt2 = conn.createStatement();
1:   		System.out.println("Drop all tables in APP schema");
1:   		ResultSet rs = stmt1.executeQuery("SELECT tablename from sys.systables"+
1:   				" t, sys.sysschemas s where t.schemaid = s.schemaid and"+
0: 				" s.schemaname = 'APP'");
1: 
1:   		while (rs.next())
1:   		{
1:   			String tableName = rs.getString(1);
1:   			
1:   			try {
1:   				stmt2.executeUpdate("DROP TABLE " + tableName);
1:   			}
1:   			catch (SQLException se)
1:   			{
1:   				System.out.println("Error dropping table:" + tableName);
1:   				se.printStackTrace();
1:   				continue;
1:   			}
1:   		}
1:   	}
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
============================================================================