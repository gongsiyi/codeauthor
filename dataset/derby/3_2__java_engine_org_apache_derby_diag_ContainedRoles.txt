1:7cbf021: /*
2:7cbf021: 
1:2d3c23a:    Derby - Class org.apache.derby.diag.ContainedRoles
1:7cbf021: 
1:7cbf021:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7cbf021:    contributor license agreements.  See the NOTICE file distributed with
1:7cbf021:    this work for additional information regarding copyright ownership.
1:7cbf021:    The ASF licenses this file to You under the Apache License, Version 2.0
1:7cbf021:    (the "License"); you may not use this file except in compliance with
1:7cbf021:    the License.  You may obtain a copy of the License at
1:7cbf021: 
1:7cbf021:       http://www.apache.org/licenses/LICENSE-2.0
1:7cbf021: 
1:7cbf021:    Unless required by applicable law or agreed to in writing, software
1:7cbf021:    distributed under the License is distributed on an "AS IS" BASIS,
1:7cbf021:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7cbf021:    See the License for the specific language governing permissions and
1:7cbf021:    limitations under the License.
1:7cbf021: 
1:7cbf021:  */
1:7cbf021: 
1:7cbf021: package org.apache.derby.diag;
1:7cbf021: 
1:7cbf021: import java.sql.ResultSetMetaData;
1:7cbf021: import java.sql.SQLException;
1:7cbf021: import java.sql.Types;
1:7cbf021: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1:7cbf021: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:7cbf021: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:7cbf021: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
1:2d3c23a: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1:2d3c23a: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:7cbf021: import org.apache.derby.iapi.error.StandardException;
1:7cbf021: import org.apache.derby.iapi.reference.Limits;
1:7cbf021: import org.apache.derby.iapi.error.PublicAPI;
1:2d3c23a: import org.apache.derby.iapi.util.IdUtil;
1:7cbf021: import org.apache.derby.vti.VTITemplate;
1:7cbf021: 
1:7cbf021: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
1:7cbf021: 
1:7cbf021: 
1:7cbf021: /**
1:2d3c23a:  * Contained roles shows all roles contained in the given identifier, or if the
1:2d3c23a:  * second argument, if given, is not 0, the inverse relation; all roles who
1:2d3c23a:  * contain the given role identifier.
2:7cbf021:  *
1:7cbf021:  * <p>To use it, query it as follows:
1:7cbf021:  * </p>
1:2d3c23a:  * <pre> SELECT * FROM TABLE(SUSCS_DIAG.CONTAINED_ROLES('FOO')) t; </pre>
1:2d3c23a:  * <pre> SELECT * FROM TABLE(CONTAINED_ROLES('FOO', 1)) t; </pre>
1:bf414a2:  *
1:7cbf021:  * <p>The following columns will be returned:
1:7cbf021:  *    <ul><li>ROLEID -- VARCHAR(128) NOT NULL
1:7cbf021:  *    </ul>
1:bf414a2:  * </p>
1:7cbf021:  */
1:2d3c23a: public class ContainedRoles extends VTITemplate {
1:7cbf021: 
1:7cbf021:     RoleClosureIterator rci;
1:7cbf021:     String nextRole;
1:7cbf021:     boolean initialized;
1:2d3c23a:     String role;
1:2d3c23a:     boolean inverse;
1:7cbf021: 
1:2d3c23a:     /**
1:2d3c23a:      * Constructor.
1:2d3c23a:      *
1:2d3c23a:      * @param roleid The role identifier for which we want to find the set of
1:2d3c23a:      *               contained roles (inclusive). The identifier is expected to
1:2d3c23a:      *               be in SQL form (not case normal form).
1:2d3c23a:      * @param inverse If != 0, use the inverse relation: find those roles which
1:2d3c23a:      *                all contain roleid (inclusive).
1:2d3c23a:      * @throws SQLException This is a public API, so the internal exception is
1:2d3c23a:      *                      wrapped in SQLException.
1:2d3c23a:      */
1:2d3c23a:     public ContainedRoles(String roleid, int inverse) throws SQLException {
1:2d3c23a:         try {
1:2d3c23a:             if (roleid != null) {
1:2d3c23a:                 role = IdUtil.parseSQLIdentifier(roleid);
1:2d3c23a:             }
1:2d3c23a: 
1:2d3c23a:             this.inverse = (inverse != 0);
1:2d3c23a:         } catch (StandardException e) {
1:2d3c23a:             throw PublicAPI.wrapStandardException(e);
1:2d3c23a:         }
1:2d3c23a:     }
1:2d3c23a: 
1:2d3c23a:     /**
1:2d3c23a:      * Constructor.
1:2d3c23a:      *
1:2d3c23a:      * @param roleid The role identifier for which we want to find the set of
1:2d3c23a:      *               contained roles (inclusive). The identifier is expected to
1:2d3c23a:      *               be in SQL form (not case normal form).
1:2d3c23a:      * @throws SQLException This is a public API, so the internal exception is
1:2d3c23a:      *                      wrapped in SQLException.
1:2d3c23a:      */
1:2d3c23a:     public ContainedRoles(String roleid)  throws SQLException {
1:2d3c23a:         this(roleid, 0);
1:7cbf021:     }
1:7cbf021: 
1:7cbf021:     /**
1:7cbf021:      * @see java.sql.ResultSet#next
1:7cbf021:      */
1:7cbf021:     public boolean next() throws SQLException {
1:7cbf021:         try {
1:2d3c23a:             // Need to defer initialization here to make sure we have an
1:2d3c23a:             // activation.
1:7cbf021:             if (!initialized) {
1:7cbf021:                 initialized = true;
1:7cbf021:                 LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
1:2d3c23a:                 DataDictionary dd = lcc.getDataDictionary();
1:2d3c23a:                 RoleGrantDescriptor rdDef =
1:2d3c23a:                     dd.getRoleDefinitionDescriptor(role);
1:7cbf021: 
1:2d3c23a:                 if (rdDef != null) {
1:7cbf021:                     lcc.beginNestedTransaction(true);
1:7cbf021:                     try {
1:7cbf021:                         int mode = dd.startReading(lcc);
1:7cbf021:                         try {
1:7cbf021:                             rci = dd.createRoleClosureIterator
1:7cbf021:                                 (lcc.getLastActivation().
1:7cbf021:                                      getTransactionController(),
1:2d3c23a:                                  role, !inverse);
1:7cbf021:                         } finally {
1:7cbf021:                             dd.doneReading(mode, lcc);
1:7cbf021:                         }
1:7cbf021:                     } finally {
1:7cbf021:                         // make sure we commit; otherwise, we will end up with
1:7cbf021:                         // mismatch nested level in the language connection
1:7cbf021:                         // context.
1:7cbf021:                         lcc.commitNestedTransaction();
1:7cbf021:                     }
1:7cbf021:                 }
1:7cbf021:             }
1:7cbf021: 
1:7cbf021:             return rci != null && ((nextRole = rci.next()) != null);
1:7cbf021: 
1:7cbf021:         } catch (StandardException e) {
1:7cbf021:             throw PublicAPI.wrapStandardException(e);
1:7cbf021:         }
1:7cbf021:     }
1:7cbf021: 
1:7cbf021: 
1:7cbf021:     /**
1:7cbf021:      * @see java.sql.ResultSet#close
1:7cbf021:      */
1:7cbf021:     public void close() {
1:7cbf021:     }
1:7cbf021: 
1:7cbf021: 
1:7cbf021:     /**
1:7cbf021:      * @see java.sql.ResultSet#getMetaData
1:7cbf021:      */
1:7cbf021:     public ResultSetMetaData getMetaData() {
1:7cbf021:         return metadata;
1:7cbf021:     }
1:7cbf021: 
1:7cbf021:     /**
1:7cbf021:      * @see java.sql.ResultSet#getString
1:7cbf021:      */
1:7cbf021:     public String getString(int columnIndex) throws SQLException {
1:7cbf021:         return nextRole;
1:7cbf021:     }
1:7cbf021: 
1:7cbf021:     /*
1:7cbf021:      * Metadata
1:7cbf021:      */
1:7cbf021:     private static final ResultColumnDescriptor[] columnInfo = {
1:7cbf021:         EmbedResultSetMetaData.getResultColumnDescriptor
1:7cbf021:         ("ROLEID", Types.VARCHAR, false, Limits.MAX_IDENTIFIER_LENGTH)
1:7cbf021:     };
1:7cbf021: 
1:7cbf021:     private static final ResultSetMetaData metadata =
1:8514aa2:         new EmbedResultSetMetaData(columnInfo);
1:7cbf021: 
1:7cbf021: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8514aa2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         new EmbedResultSetMetaData(columnInfo);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5570eb0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData40;
/////////////////////////////////////////////////////////////////////////
0:         new EmbedResultSetMetaData40(columnInfo);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2d3c23a
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.diag.ContainedRoles
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor;
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.util.IdUtil;
1:  * Contained roles shows all roles contained in the given identifier, or if the
1:  * second argument, if given, is not 0, the inverse relation; all roles who
1:  * contain the given role identifier.
1:  * <pre> SELECT * FROM TABLE(SUSCS_DIAG.CONTAINED_ROLES('FOO')) t; </pre>
1:  * <pre> SELECT * FROM TABLE(CONTAINED_ROLES('FOO', 1)) t; </pre>
1: public class ContainedRoles extends VTITemplate {
1:     String role;
1:     boolean inverse;
1:     /**
1:      * Constructor.
1:      *
1:      * @param roleid The role identifier for which we want to find the set of
1:      *               contained roles (inclusive). The identifier is expected to
1:      *               be in SQL form (not case normal form).
1:      * @param inverse If != 0, use the inverse relation: find those roles which
1:      *                all contain roleid (inclusive).
1:      * @throws SQLException This is a public API, so the internal exception is
1:      *                      wrapped in SQLException.
1:      */
1:     public ContainedRoles(String roleid, int inverse) throws SQLException {
1:         try {
1:             if (roleid != null) {
1:                 role = IdUtil.parseSQLIdentifier(roleid);
1:             }
1: 
1:             this.inverse = (inverse != 0);
1:         } catch (StandardException e) {
1:             throw PublicAPI.wrapStandardException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Constructor.
1:      *
1:      * @param roleid The role identifier for which we want to find the set of
1:      *               contained roles (inclusive). The identifier is expected to
1:      *               be in SQL form (not case normal form).
1:      * @throws SQLException This is a public API, so the internal exception is
1:      *                      wrapped in SQLException.
1:      */
1:     public ContainedRoles(String roleid)  throws SQLException {
1:         this(roleid, 0);
/////////////////////////////////////////////////////////////////////////
1:             // Need to defer initialization here to make sure we have an
1:             // activation.
1:                 DataDictionary dd = lcc.getDataDictionary();
1:                 RoleGrantDescriptor rdDef =
1:                     dd.getRoleDefinitionDescriptor(role);
1:                 if (rdDef != null) {
/////////////////////////////////////////////////////////////////////////
1:                                  role, !inverse);
/////////////////////////////////////////////////////////////////////////
0:         new EmbedResultSetMetaData(columnInfo);
commit:bf414a2
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * </p>
commit:7cbf021
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.diag.EnabledRoles
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.diag;
1: 
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.RoleClosureIterator;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.Limits;
1: import org.apache.derby.iapi.error.PublicAPI;
1: 
1: import org.apache.derby.vti.VTITemplate;
0: import org.apache.derby.vti.VTICosting;
0: import org.apache.derby.vti.VTIEnvironment;
1: 
1: import org.apache.derby.impl.jdbc.EmbedResultSetMetaData;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: 
1: 
1: /**
0:  * EnabledRoles shows all enabled roles for the current session.
1:  *
1:  * <p>To use it, query it as follows:
1:  * </p>
0:  * <pre> SELECT * FROM SYSCS_DIAG.ENABLED_ROLES; </pre>
0:  [
1:  * <p>The following columns will be returned:
1:  *    <ul><li>ROLEID -- VARCHAR(128) NOT NULL
0:  *        </li>
1:  *    </ul>
1:  *
1:  */
0: public final class EnabledRoles extends VTITemplate {
1: 
1:     RoleClosureIterator rci;
1:     String nextRole;
1:     boolean initialized;
1: 
0:     public EnabledRoles() {
1:     }
1: 
1:     /**
1:      * @see java.sql.ResultSet#next
1:      */
1:     public boolean next() throws SQLException {
1:         try {
0: 			// Need to defer initialization here to make sure we have an
0: 			// activation.
1:             if (!initialized) {
1:                 initialized = true;
1:                 LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
0:                 String role = lcc.getCurrentRoleId(lcc.getLastActivation());
1: 
0:                 if (role != null) {
0:                     DataDictionary dd = lcc.getDataDictionary();
1:                     lcc.beginNestedTransaction(true);
1:                     try {
1:                         int mode = dd.startReading(lcc);
1:                         try {
1:                             rci = dd.createRoleClosureIterator
1:                                 (lcc.getLastActivation().
1:                                      getTransactionController(),
0:                                  role, true);
1:                         } finally {
1:                             dd.doneReading(mode, lcc);
1:                         }
1:                     } finally {
1:                         // make sure we commit; otherwise, we will end up with
1:                         // mismatch nested level in the language connection
1:                         // context.
1:                         lcc.commitNestedTransaction();
1:                     }
1:                 }
1:             }
1: 
1:             return rci != null && ((nextRole = rci.next()) != null);
1: 
1:         } catch (StandardException e) {
1:             throw PublicAPI.wrapStandardException(e);
1:         }
1:     }
1: 
1: 
1:     /**
1:      * @see java.sql.ResultSet#close
1:      */
1:     public void close() {
1:     }
1: 
1: 
1:     /**
1:      * @see java.sql.ResultSet#getMetaData
1:      */
1:     public ResultSetMetaData getMetaData() {
1:         return metadata;
1:     }
1: 
1:     /**
1:      * @see java.sql.ResultSet#getString
1:      */
1:     public String getString(int columnIndex) throws SQLException {
1:         return nextRole;
1:     }
1: 
1:     /*
1:      * Metadata
1:      */
1:     private static final ResultColumnDescriptor[] columnInfo = {
1:         EmbedResultSetMetaData.getResultColumnDescriptor
1:         ("ROLEID", Types.VARCHAR, false, Limits.MAX_IDENTIFIER_LENGTH)
1:     };
1: 
1:     private static final ResultSetMetaData metadata =
0: 		new EmbedResultSetMetaData(columnInfo);
1: 
1: }
============================================================================