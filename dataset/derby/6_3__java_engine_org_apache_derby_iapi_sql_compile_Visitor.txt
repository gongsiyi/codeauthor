1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.Visitor
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.iapi.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A visitor is an object that traverses the querytree
1:eac0369:  * and performs some action. 
1:eac0369:  *
1:eac0369:  */
1:eac0369: public interface Visitor
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * This is the default visit operation on a 
1:eac0369: 	 * QueryTreeNode.  It just returns the node.  This
1:eac0369: 	 * will typically suffice as the default visit 
1:eac0369: 	 * operation for most visitors unless the visitor 
1:eac0369: 	 * needs to count the number of nodes visited or 
1:eac0369: 	 * something like that.
1:eac0369: 	 * <p>
1:eac0369: 	 * Visitors will overload this method by implementing
1:eac0369: 	 * a version with a signature that matches a specific
1:eac0369: 	 * type of node.  For example, if I want to do
1:eac0369: 	 * something special with aggregate nodes, then
1:eac0369: 	 * that Visitor will implement a 
1:eac0369: 	 * 		<I> visit(AggregateNode node)</I>
1:eac0369: 	 * method which does the aggregate specific processing.
1:eac0369: 	 *
1:eac0369: 	 * @param node 	the node to process
1:eac0369: 	 *
1:eac0369: 	 * @return a query tree node.  Often times this is
1:eac0369: 	 * the same node that was passed in, but Visitors that
1:eac0369: 	 * replace nodes with other nodes will use this to
1:eac0369: 	 * return the new replacement node.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException may be throw an error
1:eac0369: 	 *	as needed by the visitor (i.e. may be a normal error
1:eac0369: 	 *	if a particular node is found, e.g. if checking 
1:eac0369: 	 *	a group by, we don't expect to find any ColumnReferences
1:eac0369: 	 *	that aren't under an AggregateNode -- the easiest
1:eac0369: 	 *	thing to do is just throw an error when we find the
1:eac0369: 	 *	questionable node).
1:eac0369: 	 */
1:eac0369: 	Visitable visit(Visitable node)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:dd2f5a8: 	 * Method that is called to see if {@code visit()} should be called on
1:dd2f5a8: 	 * the children of {@code node} before it is called on {@code node} itself.
1:dd2f5a8: 	 * If this method always returns {@code true}, the visitor will walk the
1:dd2f5a8: 	 * tree bottom-up. If it always returns {@code false}, the tree is visited
1:dd2f5a8: 	 * top-down.
1:dd2f5a8: 	 *
1:dd2f5a8: 	 * @param node the top node of a sub-tree about to be visited
1:dd2f5a8: 	 * @return {@code true} if {@code node}'s children should be visited
1:dd2f5a8: 	 * before {@code node}, {@code false} otherwise
1:dd2f5a8: 	 */
1:dd2f5a8: 	boolean visitChildrenFirst(Visitable node);
1:dd2f5a8: 
1:dd2f5a8: 	/**
1:eac0369: 	 * Method that is called to see
1:eac0369: 	 * if query tree traversal should be
1:eac0369: 	 * stopped before visiting all nodes.
1:eac0369: 	 * Useful for short circuiting traversal
1:eac0369: 	 * if we already know we are done.
1:eac0369: 	 *
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:eac0369: 	boolean stopTraversal();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Method that is called to indicate whether
1:eac0369: 	 * we should skip all nodes below this node
1:eac0369: 	 * for traversal.  Useful if we want to effectively
1:eac0369: 	 * ignore/prune all branches under a particular 
1:eac0369: 	 * node.  
1:eac0369: 	 * <p>
1:eac0369: 	 * Differs from stopTraversal() in that it
1:eac0369: 	 * only affects subtrees, rather than the
1:eac0369: 	 * entire traversal.
1:eac0369: 	 *
1:eac0369: 	 * @param node 	the node to process
1:eac0369: 	 * 
1:eac0369: 	 * @return true/false
1:eac0369: 	 */
1:01217c2: 	boolean skipChildren(Visitable node) throws StandardException;
1:eac0369: }	
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	 * Method that is called to see if {@code visit()} should be called on
1: 	 * the children of {@code node} before it is called on {@code node} itself.
1: 	 * If this method always returns {@code true}, the visitor will walk the
1: 	 * tree bottom-up. If it always returns {@code false}, the tree is visited
1: 	 * top-down.
1: 	 *
1: 	 * @param node the top node of a sub-tree about to be visited
1: 	 * @return {@code true} if {@code node}'s children should be visited
1: 	 * before {@code node}, {@code false} otherwise
1: 	 */
1: 	boolean visitChildrenFirst(Visitable node);
1: 
1: 	/**
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1: 	boolean skipChildren(Visitable node) throws StandardException;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.Visitor
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * A visitor is an object that traverses the querytree
1:  * and performs some action. 
1:  *
0:  * @author jamie
1:  */
1: public interface Visitor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * This is the default visit operation on a 
1: 	 * QueryTreeNode.  It just returns the node.  This
1: 	 * will typically suffice as the default visit 
1: 	 * operation for most visitors unless the visitor 
1: 	 * needs to count the number of nodes visited or 
1: 	 * something like that.
1: 	 * <p>
1: 	 * Visitors will overload this method by implementing
1: 	 * a version with a signature that matches a specific
1: 	 * type of node.  For example, if I want to do
1: 	 * something special with aggregate nodes, then
1: 	 * that Visitor will implement a 
1: 	 * 		<I> visit(AggregateNode node)</I>
1: 	 * method which does the aggregate specific processing.
1: 	 *
1: 	 * @param node 	the node to process
1: 	 *
1: 	 * @return a query tree node.  Often times this is
1: 	 * the same node that was passed in, but Visitors that
1: 	 * replace nodes with other nodes will use this to
1: 	 * return the new replacement node.
1: 	 *
1: 	 * @exception StandardException may be throw an error
1: 	 *	as needed by the visitor (i.e. may be a normal error
1: 	 *	if a particular node is found, e.g. if checking 
1: 	 *	a group by, we don't expect to find any ColumnReferences
1: 	 *	that aren't under an AggregateNode -- the easiest
1: 	 *	thing to do is just throw an error when we find the
1: 	 *	questionable node).
1: 	 */
1: 	Visitable visit(Visitable node)
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * Method that is called to see
1: 	 * if query tree traversal should be
1: 	 * stopped before visiting all nodes.
1: 	 * Useful for short circuiting traversal
1: 	 * if we already know we are done.
1: 	 *
1: 	 * @return true/false
1: 	 */
1: 	boolean stopTraversal();
1: 
1: 	/**
1: 	 * Method that is called to indicate whether
1: 	 * we should skip all nodes below this node
1: 	 * for traversal.  Useful if we want to effectively
1: 	 * ignore/prune all branches under a particular 
1: 	 * node.  
1: 	 * <p>
1: 	 * Differs from stopTraversal() in that it
1: 	 * only affects subtrees, rather than the
1: 	 * entire traversal.
1: 	 *
1: 	 * @param node 	the node to process
1: 	 * 
1: 	 * @return true/false
1: 	 */
0: 	boolean skipChildren(Visitable node);
1: }	
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * A visitor is an object that traverses the querytree
0:  * and performs some action. 
0:  *
0:  * @author jamie
0:  */
0: public interface Visitor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * This is the default visit operation on a 
0: 	 * QueryTreeNode.  It just returns the node.  This
0: 	 * will typically suffice as the default visit 
0: 	 * operation for most visitors unless the visitor 
0: 	 * needs to count the number of nodes visited or 
0: 	 * something like that.
0: 	 * <p>
0: 	 * Visitors will overload this method by implementing
0: 	 * a version with a signature that matches a specific
0: 	 * type of node.  For example, if I want to do
0: 	 * something special with aggregate nodes, then
0: 	 * that Visitor will implement a 
0: 	 * 		<I> visit(AggregateNode node)</I>
0: 	 * method which does the aggregate specific processing.
0: 	 *
0: 	 * @param node 	the node to process
0: 	 *
0: 	 * @return a query tree node.  Often times this is
0: 	 * the same node that was passed in, but Visitors that
0: 	 * replace nodes with other nodes will use this to
0: 	 * return the new replacement node.
0: 	 *
0: 	 * @exception StandardException may be throw an error
0: 	 *	as needed by the visitor (i.e. may be a normal error
0: 	 *	if a particular node is found, e.g. if checking 
0: 	 *	a group by, we don't expect to find any ColumnReferences
0: 	 *	that aren't under an AggregateNode -- the easiest
0: 	 *	thing to do is just throw an error when we find the
0: 	 *	questionable node).
0: 	 */
0: 	Visitable visit(Visitable node)
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * Method that is called to see
0: 	 * if query tree traversal should be
0: 	 * stopped before visiting all nodes.
0: 	 * Useful for short circuiting traversal
0: 	 * if we already know we are done.
0: 	 *
0: 	 * @return true/false
0: 	 */
0: 	boolean stopTraversal();
0: 
0: 	/**
0: 	 * Method that is called to indicate whether
0: 	 * we should skip all nodes below this node
0: 	 * for traversal.  Useful if we want to effectively
0: 	 * ignore/prune all branches under a particular 
0: 	 * node.  
0: 	 * <p>
0: 	 * Differs from stopTraversal() in that it
0: 	 * only affects subtrees, rather than the
0: 	 * entire traversal.
0: 	 *
0: 	 * @param node 	the node to process
0: 	 * 
0: 	 * @return true/false
0: 	 */
0: 	boolean skipChildren(Visitable node);
0: }	
============================================================================