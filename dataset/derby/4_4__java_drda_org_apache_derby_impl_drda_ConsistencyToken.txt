1:ee2a860: /*
1:ee2a860:  * Derby - class org.apache.derby.impl.drda.ConsistencyToken
2:ee2a860:  *
1:59e5225:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:  * contributor license agreements.  See the NOTICE file distributed with
1:59e5225:  * this work for additional information regarding copyright ownership.
1:59e5225:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:  * (the "License"); you may not use this file except in compliance with
1:59e5225:  * the License.  You may obtain a copy of the License at
1:ee2a860:  *
1:ee2a860:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ee2a860:  *
1:ee2a860:  * Unless required by applicable law or agreed to in writing, software
1:ee2a860:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee2a860:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
1:ee2a860:  * implied. See the License for the specific language governing
1:ee2a860:  * permissions and limitations under the License.
1:ee2a860:  *
1:ee2a860:  */
1:ee2a860: 
1:ee2a860: package org.apache.derby.impl.drda;
1:ee2a860: 
1:ee2a860: /**
1:ee2a860:  * Class which represents an RDB Package Consistency Token.
1:ee2a860:  */
1:ee2a860: final class ConsistencyToken {
1:ee2a860:     /** Byte array representation of the token. */
1:ee2a860:     private final byte[] bytes;
1:ee2a860:     /** Cached hash code. */
1:ee2a860:     private int hash = 0;
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Create a new <code>ConsistencyToken</code> instance.
1:ee2a860:      *
1:ee2a860:      * @param bytes byte array representing the token
1:ee2a860:      */
1:7df5ffe:     ConsistencyToken(byte[] bytes) {
1:ee2a860:         this.bytes = bytes;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Get the byte array representation of the consistency token.
1:ee2a860:      *
1:ee2a860:      * @return a <code>byte[]</code> value
1:ee2a860:      */
1:ee2a860:     public byte[] getBytes() {
1:ee2a860:         return bytes;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Check whether this object is equal to another object.
1:ee2a860:      *
1:ee2a860:      * @param o another object
1:ee2a860:      * @return true if the objects are equal
1:ee2a860:      */
1:ee2a860:     public boolean equals(Object o) {
1:ee2a860:         if (!(o instanceof ConsistencyToken)) return false;
1:ee2a860:         ConsistencyToken ct = (ConsistencyToken) o;
1:ee2a860:         int len = bytes.length;
1:ee2a860:         if (len != ct.bytes.length) return false;
1:ee2a860:         for (int i = 0; i < len; ++i) {
1:ee2a860:             if (bytes[i] != ct.bytes[i]) return false;
1:ee2a860:         }
1:ee2a860:         return true;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Calculate the hash code.
1:ee2a860:      *
1:ee2a860:      * @return hash code
1:ee2a860:      */
1:ee2a860:     public int hashCode() {
1:cc8ea12:         // ConsistencyToken objects might be kept for a long time and are
1:cc8ea12:         // frequently used as keys in hash tables. Therefore, it is a good idea
1:cc8ea12:         // to cache their hash codes.
1:cc8ea12:         int h = hash;
1:cc8ea12:         if (h == 0) {
1:cc8ea12:             // The hash code has not been calculated yet (or perhaps the hash
1:cc8ea12:             // code actually is 0). Calculate a new one and cache it. No
1:cc8ea12:             // synchronization is needed since reads and writes of 32-bit
1:cc8ea12:             // primitive values are guaranteed to be atomic. See The
1:cc8ea12:             // "Double-Checked Locking is Broken" Declaration for details.
1:ee2a860:             int len = bytes.length;
1:ee2a860:             for (int i = 0; i < len; ++i) {
1:cc8ea12:                 h ^= bytes[i];
1:ee2a860:             }
1:cc8ea12:             hash = h;
1:ee2a860:         }
1:cc8ea12:         return h;
1:ee2a860:     }
1:ee2a860: 
1:ee2a860:     /**
1:ee2a860:      * Return a string representation of the consistency token by
1:ee2a860:      * converting it to a <code>BigInteger</code> value. (For
1:ee2a860:      * debugging only.)
1:ee2a860:      *
1:ee2a860:      * @return a <code>String</code> value
1:ee2a860:      */
1:ee2a860:     public String toString() {
1:ee2a860:         return new java.math.BigInteger(bytes).toString();
1:ee2a860:     }
1:ee2a860: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cc8ea12
/////////////////////////////////////////////////////////////////////////
1:         // ConsistencyToken objects might be kept for a long time and are
1:         // frequently used as keys in hash tables. Therefore, it is a good idea
1:         // to cache their hash codes.
1:         int h = hash;
1:         if (h == 0) {
1:             // The hash code has not been calculated yet (or perhaps the hash
1:             // code actually is 0). Calculate a new one and cache it. No
1:             // synchronization is needed since reads and writes of 32-bit
1:             // primitive values are guaranteed to be atomic. See The
1:             // "Double-Checked Locking is Broken" Declaration for details.
1:                 h ^= bytes[i];
1:             hash = h;
1:         return h;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
1:     ConsistencyToken(byte[] bytes) {
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:ee2a860
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - class org.apache.derby.impl.drda.ConsistencyToken
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its licensors, as
0:  * applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you
0:  * may not use this file except in compliance with the License. You
0:  * may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
1:  * implied. See the License for the specific language governing
1:  * permissions and limitations under the License.
1:  *
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
1: /**
1:  * Class which represents an RDB Package Consistency Token.
1:  */
1: final class ConsistencyToken {
1:     /** Byte array representation of the token. */
1:     private final byte[] bytes;
1:     /** Cached hash code. */
1:     private int hash = 0;
1: 
1:     /**
1:      * Create a new <code>ConsistencyToken</code> instance.
1:      *
1:      * @param bytes byte array representing the token
1:      */
0:     public ConsistencyToken(byte[] bytes) {
1:         this.bytes = bytes;
1:     }
1: 
1:     /**
1:      * Get the byte array representation of the consistency token.
1:      *
1:      * @return a <code>byte[]</code> value
1:      */
1:     public byte[] getBytes() {
1:         return bytes;
1:     }
1: 
1:     /**
1:      * Check whether this object is equal to another object.
1:      *
1:      * @param o another object
1:      * @return true if the objects are equal
1:      */
1:     public boolean equals(Object o) {
1:         if (!(o instanceof ConsistencyToken)) return false;
1:         ConsistencyToken ct = (ConsistencyToken) o;
1:         int len = bytes.length;
1:         if (len != ct.bytes.length) return false;
1:         for (int i = 0; i < len; ++i) {
1:             if (bytes[i] != ct.bytes[i]) return false;
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Calculate the hash code.
1:      *
1:      * @return hash code
1:      */
1:     public int hashCode() {
0:         if (hash == 0) {
1:             int len = bytes.length;
1:             for (int i = 0; i < len; ++i) {
0:                 hash ^= bytes[i];
1:             }
1:         }
0:         return hash;
1:     }
1: 
1:     /**
1:      * Return a string representation of the consistency token by
1:      * converting it to a <code>BigInteger</code> value. (For
1:      * debugging only.)
1:      *
1:      * @return a <code>String</code> value
1:      */
1:     public String toString() {
1:         return new java.math.BigInteger(bytes).toString();
1:     }
1: }
============================================================================