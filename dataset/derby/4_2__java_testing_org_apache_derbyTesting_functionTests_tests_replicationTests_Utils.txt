1:db8dae7: /*
5:db8dae7:  
1:db8dae7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:db8dae7:  
1:db8dae7: Licensed to the Apache Software Foundation (ASF) under one or more
1:db8dae7: contributor license agreements.  See the NOTICE file distributed with
1:db8dae7: this work for additional information regarding copyright ownership.
1:db8dae7: The ASF licenses this file to You under the Apache License, Version 2.0
1:db8dae7: (the "License"); you may not use this file except in compliance with
1:db8dae7: the License.  You may obtain a copy of the License at
1:db8dae7:  
1:db8dae7:    http://www.apache.org/licenses/LICENSE-2.0
1:db8dae7:  
1:db8dae7: Unless required by applicable law or agreed to in writing, software
1:db8dae7: distributed under the License is distributed on an "AS IS" BASIS,
1:db8dae7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db8dae7: See the License for the specific language governing permissions and
1:db8dae7: limitations under the License.
1:db8dae7:  
3:db8dae7:  */
1:db8dae7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:db8dae7: 
1:db8dae7: import java.io.*;
1:f0951ab: import java.util.List;
1:db8dae7: 
1:db8dae7: 
3:db8dae7: /**
1:db8dae7:  * Utilities for replication test framework:
1:db8dae7:  * cleaning directories, copying directories for 
1:db8dae7:  * test databases.
1:db8dae7:  * Debug printing.
1:db8dae7:  */
1:db8dae7: 
1:db8dae7: class Utils
14:db8dae7: {
1:40a554b:     boolean printDebug = false;
1:db8dae7:     
1:db8dae7:     private final static String FS = File.separator;
1:db8dae7:     
1:db8dae7:     ///////////////////////////////////////////////////////////////////////////
1:db8dae7:     // File utilities:
1:db8dae7:     
1:db8dae7:     /**
1:db8dae7:      * Copy directory sourcePath into directory destPath
1:db8dae7:      * @param sourcePath Directory to copy
1:db8dae7:      * @param destPath Directory to copy into
1:db8dae7:      * @throws IOException If copying failed.
1:db8dae7:      */
1:db8dae7:     void copyDir(String sourcePath, String destPath)
2:db8dae7:     throws IOException
1:db8dae7:     {
1:db8dae7:         DEBUG("copyDir from " + sourcePath + " to " + destPath);
1:db8dae7:         copyFiles(sourcePath,destPath);
14:db8dae7:     }
1:db8dae7:    /** Copy files
1:db8dae7:     * @param srcPath Directory or file to copy from
1:db8dae7:     * @param destPath Directory or file to copy to
1:db8dae7:     * @throws IOException If copying failed.
1:db8dae7:     */
1:5d24c78:     void copyFiles(String srcPath, String destPath) 
1:db8dae7:     throws IOException
1:db8dae7:     {
1:5d24c78:         File src = new File(srcPath);
1:5d24c78:         File dest = new File(destPath);
1:db8dae7:         
1:db8dae7:         if (src.isDirectory())
1:db8dae7:         {
1:db8dae7:             DEBUG("Make dir: " + dest.getAbsolutePath());
1:db8dae7:             dest.mkdirs();
1:db8dae7:             String list[] = src.list();
1:db8dae7:             for (int i = 0; i < list.length; i++)
1:db8dae7:             {
1:db8dae7:                 String srcFile = src.getAbsolutePath() + FS + list[i];
1:db8dae7:                 String destFile = dest.getAbsolutePath() + FS + list[i];
1:db8dae7:                 // DEBUG("Copy " + srcFile + " to " + destFile);
1:db8dae7:                 copyFiles(srcFile , destFile);
1:db8dae7:             }
1:db8dae7:         }
4:db8dae7:         else
1:db8dae7:         {
1:5ef7c5f:             copy(src,dest);  // Also works w/ JVM 1.4
1:5ef7c5f:             // NIOcopy(src,dest); // Requires JVM 1.5 or 1.6
1:db8dae7:         }
1:db8dae7:     }
1:db8dae7:     private void copy(File source, File dest) 
1:db8dae7:     throws IOException
1:db8dae7:     {
1:db8dae7:         // DEBUG("Copy file " + source.getAbsolutePath() + " to " + dest.getAbsolutePath());
1:db8dae7:         FileInputStream src = new FileInputStream(source);
1:db8dae7:         FileOutputStream dst = new FileOutputStream(dest);
1:db8dae7:         int c;
1:db8dae7:         while ((c = src.read()) >= 0)
1:db8dae7:             dst.write(c);
1:db8dae7:         src.close();
1:db8dae7:         dst.close();
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     void writeToFile(String text, String outFile)
1:db8dae7:     throws IOException
1:db8dae7:     {
1:db8dae7:         DEBUG("writeToFile " + outFile);
1:db8dae7:         FileWriter out = new FileWriter(outFile);
1:db8dae7:         out.write(text);
1:db8dae7:         out.close();
1:db8dae7:     }
1:5d24c78: 
1:5d24c78:     void mkDirs(String dirPath)
1:5d24c78:     {
1:5d24c78:         File dir = new File(dirPath);
1:5d24c78:         dir.mkdirs();
1:5d24c78:     }
1:db8dae7:     
1:db8dae7:     ///////////////////////////////////////////////////////////////////////////////////
1:db8dae7:     // Debug
1:db8dae7:         
1:db8dae7:     void DEBUG(String s)
1:db8dae7:     {
1:db8dae7:         if ( printDebug )
1:db8dae7:             System.out.println(s);
1:db8dae7:     }
1:db8dae7:     void DEBUG(String s, PrintWriter out)
1:db8dae7:     {
1:db8dae7:         if ( printDebug )
1:db8dae7:             out.println(s);
1:db8dae7:     }
1:db8dae7:     
1:db8dae7:     // Sleep w/Debug...
1:db8dae7:     void sleep(long sleepTime, String ID) 
1:db8dae7:     throws InterruptedException
1:db8dae7:     {
1:db8dae7:         DEBUG(ID + ": sleep " + sleepTime + "ms.");
1:db8dae7:         Thread.sleep(sleepTime);
1:db8dae7:     }
1:db8dae7: 
1:f0951ab:     /**
1:f0951ab:      * Convert a list of strings to an array of strings.
1:f0951ab:      */
1:3f5c48a:     String[] toStringArray(List<String> list) {
1:3f5c48a:         return list.toArray(new String[list.size()]);
1:f0951ab:     }
1:f0951ab: 
1:f0951ab:     /**
1:f0951ab:      * Splice together strings. Separate the sub-strings by the specified
1:f0951ab:      * separator character.
1:f0951ab:      */
1:f0951ab:     String splice(String[] strings, char sep) {
1:f0951ab:         StringBuilder sb = new StringBuilder();
1:f0951ab:         for (int i = 0; i < strings.length; i++) {
1:f0951ab:             if (i > 0) sb.append(sep);
1:f0951ab:             sb.append(strings[i]);
1:f0951ab:         }
1:f0951ab:         return sb.toString();
1:f0951ab:     }
1:db8dae7: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     String[] toStringArray(List<String> list) {
1:         return list.toArray(new String[list.size()]);
commit:f0951ab
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Convert a list of strings to an array of strings.
1:      */
0:     String[] toStringArray(List list) {
0:         return (String[]) list.toArray(new String[list.size()]);
1:     }
1: 
1:     /**
1:      * Splice together strings. Separate the sub-strings by the specified
1:      * separator character.
1:      */
1:     String splice(String[] strings, char sep) {
1:         StringBuilder sb = new StringBuilder();
1:         for (int i = 0; i < strings.length; i++) {
1:             if (i > 0) sb.append(sep);
1:             sb.append(strings[i]);
1:         }
1:         return sb.toString();
1:     }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:840ed3f
/////////////////////////////////////////////////////////////////////////
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
0:                     if (!deleted) DEBUG("file NOT deleted " + f.getAbsolutePath());
0:                 boolean deleted = dir.delete();
0:                 if (!deleted) DEBUG("dir NOT deleted " + dir.getAbsolutePath());
0:             boolean deleted = dir.delete();
0:             if (!deleted) DEBUG("file NOT deleted " + dir.getAbsolutePath());
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:5ef7c5f
/////////////////////////////////////////////////////////////////////////
1:             copy(src,dest);  // Also works w/ JVM 1.4
1:             // NIOcopy(src,dest); // Requires JVM 1.5 or 1.6
commit:40a554b
/////////////////////////////////////////////////////////////////////////
1:     boolean printDebug = false;
commit:5d24c78
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     void copyFiles(String srcPath, String destPath) 
1:         File src = new File(srcPath);
1:         File dest = new File(destPath);
/////////////////////////////////////////////////////////////////////////
1: 
1:     void mkDirs(String dirPath)
1:     {
1:         File dir = new File(dirPath);
1:         dir.mkdirs();
1:     }
commit:db8dae7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
0: import java.nio.channels.FileChannel;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derby.drda.NetworkServerControl;
0: import java.net.InetAddress;
0: import java.net.Inet6Address;
1: 
0: import java.sql.*;
1: import java.io.*;
0: import java.util.*;
1: 
0: import org.apache.derbyTesting.junit.BaseTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * Utilities for replication test framework:
1:  * cleaning directories, copying directories for 
1:  * test databases.
1:  * Debug printing.
1:  */
1: 
1: class Utils
1: {
0:     boolean printDebug = true;
1:     
1:     private final static String FS = File.separator;
1:     
1:     ///////////////////////////////////////////////////////////////////////////
1:     // File utilities:
1:     
1:     /**
0:      * Deletes files in the given directory.
0:      * NB! May also delete subdirectories!
0:      * @param dir where to delete files.
0:      * @param deleteRootDirectory if true deletes also the given root directory.
0:      * @return number of files/directories deleted.
0:      * @throws IOException if operation fails.
1:      */
0:     void cleanDir(String dir, boolean deleteRootDirectory)
0:     throws Exception
1:     {
0:         try
1:         {
0:             File rootDir = new File(dir);
0:             if (rootDir.isDirectory())
1:             {
0:                 DEBUG("cleanDir: " + dir);
0:                 rmFiles(rootDir,deleteRootDirectory);
1:             }
1:             else
1:             {
0:                 throw new IOException("Given path is not a directory: " + dir);
1:             }
1:         }
0:         catch (Exception ex)
1:         {
0:             DEBUG("Got exception " + ex.getMessage());
0:             throw new Exception("Exception deleting files " + ex);
1:         }
1:     }
1:     /**
0:      * Recursively delete files and directories in param dir.
0:      * @param dir Where to delete files.
0:      * @param rmdir If true delete also the given root directory (param dir).
0:      * @throws IOException If operation fails.
1:      */
0:     void rmFiles(File dir,boolean rmdir) throws Exception
1:     {
0:         // DEBUG("Getting dir " + dir.getAbsolutePath());
0:         String currDir = dir.getAbsolutePath();
0:         if (dir.isDirectory())
1:         {
0:             String[] filelist = dir.list();
0:             // DEBUG("Dir has " + filelist.length + " files");
0:             for (int i = 0; i<filelist.length;i++)
1:             {
0:                 // DEBUG("adding files, i " + i);
0:                 File f = new File(currDir + FS + filelist[i]);
0:                 if (f.isDirectory())
1:                 {
0:                     // DEBUG("file is dir, get recursive");
0:                     rmFiles(f,true);
1:                 }
1:                 else
1:                 {
0:                     // DEBUG("delete file " + f.getAbsolutePath());
0:                     boolean deleted = f.delete();
0:                     // DEBUG("file deleted " + deleted);
1:                 }
1:             }
1:             
0:             if (rmdir)
1:             {
0:                 DEBUG("deleting directory " + dir.getAbsolutePath());
0:                 dir.delete();
1:             }
1:         }
1:         else
1:         {
0:             DEBUG("deleting file " +dir.getAbsolutePath());
0:             dir.delete();
1:         }
1:     }
1: 
1:     /**
1:      * Copy directory sourcePath into directory destPath
1:      * @param sourcePath Directory to copy
1:      * @param destPath Directory to copy into
0:      * @return number of files copied.
1:      * @throws IOException If copying failed.
1:      */
1:     void copyDir(String sourcePath, String destPath)
1:     throws IOException
1:     {
1:         DEBUG("copyDir from " + sourcePath + " to " + destPath);
1:         copyFiles(sourcePath,destPath);
1:     }
1:    /** Copy files
1:     * @param srcPath Directory or file to copy from
1:     * @param destPath Directory or file to copy to
1:     * @throws IOException If copying failed.
0:     * @return number of files copied.
1:     */
0:     void copyFiles(String srcDir, String destDir) 
1:     throws IOException
1:     {
0:         File src = new File(srcDir);
0:         File dest = new File(destDir);
1:         
1:         if (src.isDirectory())
1:         {
1:             DEBUG("Make dir: " + dest.getAbsolutePath());
1:             dest.mkdirs();
1:             String list[] = src.list();
1:             for (int i = 0; i < list.length; i++)
1:             {
1:                 String srcFile = src.getAbsolutePath() + FS + list[i];
1:                 String destFile = dest.getAbsolutePath() + FS + list[i];
1:                 // DEBUG("Copy " + srcFile + " to " + destFile);
1:                 copyFiles(srcFile , destFile);
1:             }
1:         }
1:         else
1:         {
0:             // copy(src,dest);
0:             NIOcopy(src,dest);
1:         }
1:     }
1:     private void copy(File source, File dest) 
1:     throws IOException
1:     {
1:         // DEBUG("Copy file " + source.getAbsolutePath() + " to " + dest.getAbsolutePath());
1:         FileInputStream src = new FileInputStream(source);
1:         FileOutputStream dst = new FileOutputStream(dest);
1:         int c;
1:         while ((c = src.read()) >= 0)
1:             dst.write(c);
1:         src.close();
1:         dst.close();
1:     }
0:     private void NIOcopy(File source, File dest) 
1:     throws IOException
1:     {
0:         // DEBUG("NIO Copy file " + source.getAbsolutePath() + " to " + dest.getAbsolutePath());
0:         FileChannel sourceCh = new FileInputStream(source).getChannel();
0:         FileChannel targetCh = new FileOutputStream(dest).getChannel();
0:         sourceCh.transferTo(0, sourceCh.size(), targetCh);
0:         sourceCh.close();
0:         targetCh.close();
1:     }
1:     
1:     void writeToFile(String text, String outFile)
1:     throws IOException
1:     {
1:         DEBUG("writeToFile " + outFile);
1:         FileWriter out = new FileWriter(outFile);
1:         out.write(text);
1:         out.close();
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     // Debug
1:         
1:     void DEBUG(String s)
1:     {
1:         if ( printDebug )
1:             System.out.println(s);
1:     }
1:     void DEBUG(String s, PrintWriter out)
1:     {
1:         if ( printDebug )
1:             out.println(s);
1:     }
1:     
1:     // Sleep w/Debug...
1:     void sleep(long sleepTime, String ID) 
1:     throws InterruptedException
1:     {
1:         DEBUG(ID + ": sleep " + sleepTime + "ms.");
1:         Thread.sleep(sleepTime);
1:     }
1: 
1: }
============================================================================