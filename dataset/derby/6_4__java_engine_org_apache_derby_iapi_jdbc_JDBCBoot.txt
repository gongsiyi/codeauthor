1:eac0369: /*
8:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.jdbc.JDBCBoot
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.jdbc;
1:eac0369: 
1:850aba4: import java.io.PrintWriter;
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:eac0369: import java.util.Properties;
1:850aba4: import org.apache.derby.iapi.error.StandardException;
1:850aba4: import org.apache.derby.iapi.reference.MessageId;
1:850aba4: import org.apache.derby.iapi.reference.Property;
1:850aba4: import org.apache.derby.iapi.services.monitor.Monitor;
1:850aba4: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: 
2:eac0369: /**
1:3fd26f3: 	A class to boot a Derby system that includes a JDBC driver.
1:eac0369: 	Should be used indirectly through JDBCDriver or JDBCServletBoot
1:eac0369: 	or any other useful booting mechanism that comes along.
1:eac0369: */
1:5d24b1a: public class JDBCBoot {
1:eac0369: 
1:eac0369: 	private Properties bootProperties;
1:eac0369: 
1:eac0369:     private static final String NETWORK_SERVER_AUTOSTART_CLASS_NAME = "org.apache.derby.iapi.jdbc.DRDAServerStarter";
1:eac0369: 
1:eac0369: 	public JDBCBoot() {
1:eac0369: 		bootProperties = new Properties();
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	void addProperty(String name, String value) {
1:eac0369: 		bootProperties.put(name, value);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Boot a system requesting a JDBC driver but only if there is
1:eac0369: 		no current JDBC driver that is handling the required protocol.
1:eac0369: 
1:eac0369: 	*/
1:56c1dc2: 	public void boot(String protocol, final PrintWriter logging) {
1:eac0369: 
1:0e38470: 		if (org.apache.derby.jdbc.InternalDriver.activeDriver() == null)
1:9cf79ea: 		{
1:eac0369: 
1:0e38470: 			// request that the InternalDriver (JDBC) service and the
1:eac0369: 			// authentication service be started.
1:eac0369: 			//
1:0e38470: 			addProperty("derby.service.jdbc", "org.apache.derby.jdbc.InternalDriver");
1:eac0369: 			addProperty("derby.service.authentication", AuthenticationService.MODULE);
1:eac0369: 
1:56c1dc2: 			boot( bootProperties, logging);
1:eac0369: 		}
1:eac0369: 	}
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  void    boot( final Properties props, final PrintWriter logging )
1:56c1dc2:     {
1:56c1dc2:         AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<Object>()
1:56c1dc2:              {
1:56c1dc2:                  public Object run()
1:56c1dc2:                  {
1:56c1dc2:                      Monitor.startMonitor(props, logging);
1:56c1dc2: 
1:56c1dc2:                      /* The network server starter module is started differently from other modules because
1:56c1dc2:                       * 1. its start is conditional, depending on a system property, and PropertyUtil.getSystemProperty
1:56c1dc2:                       *    does not work until the Monitor has started,
1:56c1dc2:                       * 2. we do not want the server to try to field requests before Derby has booted, and
1:56c1dc2:                       * 3. if the module fails to start we want to log a message to the error log and continue as
1:56c1dc2:                       *    an embedded database.
1:56c1dc2:                       */
1:56c1dc2:                      if( Boolean.valueOf(PropertyUtil.getSystemProperty(Property.START_DRDA)).booleanValue())
1:56c1dc2:                      {
1:56c1dc2:                          try
1:56c1dc2:                          {
1:56c1dc2:                              Monitor.startSystemModule( NETWORK_SERVER_AUTOSTART_CLASS_NAME);
1:56c1dc2:                          }
1:56c1dc2:                          catch( StandardException se)
1:56c1dc2:                          {
1:56c1dc2:                              Monitor.logTextMessage( MessageId.CONN_NETWORK_SERVER_START_EXCEPTION,
1:56c1dc2:                                                      se.getMessage());
1:56c1dc2:                          }
1:56c1dc2:                      }
1:56c1dc2:                      
1:56c1dc2:                      return null;
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1: 	public void boot(String protocol, final PrintWriter logging) {
/////////////////////////////////////////////////////////////////////////
1: 			boot( bootProperties, logging);
1:     
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  void    boot( final Properties props, final PrintWriter logging )
1:     {
1:         AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<Object>()
1:              {
1:                  public Object run()
1:                  {
1:                      Monitor.startMonitor(props, logging);
1: 
1:                      /* The network server starter module is started differently from other modules because
1:                       * 1. its start is conditional, depending on a system property, and PropertyUtil.getSystemProperty
1:                       *    does not work until the Monitor has started,
1:                       * 2. we do not want the server to try to field requests before Derby has booted, and
1:                       * 3. if the module fails to start we want to log a message to the error log and continue as
1:                       *    an embedded database.
1:                       */
1:                      if( Boolean.valueOf(PropertyUtil.getSystemProperty(Property.START_DRDA)).booleanValue())
1:                      {
1:                          try
1:                          {
1:                              Monitor.startSystemModule( NETWORK_SERVER_AUTOSTART_CLASS_NAME);
1:                          }
1:                          catch( StandardException se)
1:                          {
1:                              Monitor.logTextMessage( MessageId.CONN_NETWORK_SERVER_START_EXCEPTION,
1:                                                      se.getMessage());
1:                          }
1:                      }
1:                      
1:                      return null;
1:                  }
1:              }
1:              );
1:     }
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.MessageId;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
/////////////////////////////////////////////////////////////////////////
0: 	public void boot(String protocol, PrintWriter logging) {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 	A class to boot a Derby system that includes a JDBC driver.
/////////////////////////////////////////////////////////////////////////
0:              * 2. we do not want the server to try to field requests before Derby has booted, and
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7d1ee7d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0e38470
/////////////////////////////////////////////////////////////////////////
1: 		if (org.apache.derby.jdbc.InternalDriver.activeDriver() == null)
1: 			// request that the InternalDriver (JDBC) service and the
1: 			addProperty("derby.service.jdbc", "org.apache.derby.jdbc.InternalDriver");
commit:9cf79ea
/////////////////////////////////////////////////////////////////////////
0: 		if (org.apache.derby.jdbc.Driver169.activeDriver() == null)
1: 		{
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.jdbc.JDBCBoot
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public class JDBCBoot {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.jdbc;
1: 
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.jdbc.AuthenticationService;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
1: 
1: import java.util.Properties;
0: import java.io.PrintStream;
1: 
1: /**
0: 	A class to boot a cloudscape system that includes a JDBC driver.
1: 	Should be used indirectly through JDBCDriver or JDBCServletBoot
1: 	or any other useful booting mechanism that comes along.
1: */
0: public class JDBCBoot { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private Properties bootProperties;
1: 
1:     private static final String NETWORK_SERVER_AUTOSTART_CLASS_NAME = "org.apache.derby.iapi.jdbc.DRDAServerStarter";
1: 
1: 	public JDBCBoot() {
1: 		bootProperties = new Properties();
1: 	}
1: 
1: 	void addProperty(String name, String value) {
1: 		bootProperties.put(name, value);
1: 	}
1: 
1: 	/**
1: 		Boot a system requesting a JDBC driver but only if there is
1: 		no current JDBC driver that is handling the required protocol.
1: 
1: 	*/
0: 	public void boot(String protocol, PrintStream logging) {
1: 
0: 		try {
1: 
0: 			// throws a SQLException if there is no driver
0: 			DriverManager.getDriver(protocol);
1: 
0: 		} catch (SQLException sqle) {
1: 
0: 			// request that the java.sql.Driver (JDBC) service and the
1: 			// authentication service be started.
1: 			//
0: 			addProperty("derby.service.jdbc", "org.apache.derby.jdbc.Driver169");
1: 			addProperty("derby.service.authentication", AuthenticationService.MODULE);
1: 
0: 			Monitor.startMonitor(bootProperties, logging);
1: 
0:             /* The network server starter module is started differently from other modules because
0:              * 1. its start is conditional, depending on a system property, and PropertyUtil.getSystemProperty
0:              *    does not work until the Monitor has started,
0:              * 2. we do not want the server to try to field requests before Cloudscape has booted, and
0:              * 3. if the module fails to start we want to log a message to the error log and continue as
0:              *    an embedded database.
1:              */
0:             if( Boolean.valueOf(PropertyUtil.getSystemProperty(Property.START_DRDA)).booleanValue())
0:             {
0:                 try
0:                 {
0:                     Monitor.startSystemModule( NETWORK_SERVER_AUTOSTART_CLASS_NAME);
1:                 }
0:                 catch( StandardException se)
0:                 {
0:                     Monitor.logTextMessage( MessageId.CONN_NETWORK_SERVER_START_EXCEPTION,
0:                                             se.getMessage());
1:                 }
1:             }
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.jdbc
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.jdbc;
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: import org.apache.derby.iapi.reference.Property;
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.jdbc.AuthenticationService;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
0: 
0: import java.util.Properties;
0: import java.io.PrintStream;
0: 
0: /**
0: 	A class to boot a cloudscape system that includes a JDBC driver.
0: 	Should be used indirectly through JDBCDriver or JDBCServletBoot
0: 	or any other useful booting mechanism that comes along.
0: */
0: public class JDBCBoot { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private Properties bootProperties;
0: 
0:     private static final String NETWORK_SERVER_AUTOSTART_CLASS_NAME = "org.apache.derby.iapi.jdbc.DRDAServerStarter";
0: 
0: 	public JDBCBoot() {
0: 		bootProperties = new Properties();
0: 	}
0: 
0: 	void addProperty(String name, String value) {
0: 		bootProperties.put(name, value);
0: 	}
0: 
0: 	/**
0: 		Boot a system requesting a JDBC driver but only if there is
0: 		no current JDBC driver that is handling the required protocol.
0: 
0: 	*/
0: 	public void boot(String protocol, PrintStream logging) {
0: 
0: 		try {
0: 
0: 			// throws a SQLException if there is no driver
0: 			DriverManager.getDriver(protocol);
0: 
0: 		} catch (SQLException sqle) {
0: 
0: 			// request that the java.sql.Driver (JDBC) service and the
0: 			// authentication service be started.
0: 			//
0: 			addProperty("derby.service.jdbc", "org.apache.derby.jdbc.Driver169");
0: 			addProperty("derby.service.authentication", AuthenticationService.MODULE);
0: 
0: 			Monitor.startMonitor(bootProperties, logging);
0: 
0:             /* The network server starter module is started differently from other modules because
0:              * 1. its start is conditional, depending on a system property, and PropertyUtil.getSystemProperty
0:              *    does not work until the Monitor has started,
0:              * 2. we do not want the server to try to field requests before Cloudscape has booted, and
0:              * 3. if the module fails to start we want to log a message to the error log and continue as
0:              *    an embedded database.
0:              */
0:             if( Boolean.valueOf(PropertyUtil.getSystemProperty(Property.START_DRDA)).booleanValue())
0:             {
0:                 try
0:                 {
0:                     Monitor.startSystemModule( NETWORK_SERVER_AUTOSTART_CLASS_NAME);
0:                 }
0:                 catch( StandardException se)
0:                 {
0:                     Monitor.logTextMessage( MessageId.CONN_NETWORK_SERVER_START_EXCEPTION,
0:                                             se.getMessage());
0:                 }
0:             }
0: 		}
0: 	}
0: }
============================================================================