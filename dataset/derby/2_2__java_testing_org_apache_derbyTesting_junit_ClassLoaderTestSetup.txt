1:493b80e: /*
1:493b80e:  * Derby - Class org.apache.derbyTesting.junit.ClassLoaderTestSetup
1:493b80e:  *
1:493b80e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:493b80e:  * contributor license agreements.  See the NOTICE file distributed with
1:493b80e:  * this work for additional information regarding copyright ownership.
1:493b80e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:493b80e:  * (the "License"); you may not use this file except in compliance with
1:493b80e:  * the License.  You may obtain a copy of the License at
1:493b80e:  *
1:493b80e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:493b80e:  *
1:493b80e:  * Unless required by applicable law or agreed to in writing,
1:493b80e:  * software distributed under the License is distributed on an
1:493b80e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:493b80e:  * either express or implied. See the License for the specific
1:493b80e:  * language governing permissions and limitations under the License.
1:493b80e:  */
1:493b80e: 
1:493b80e: package org.apache.derbyTesting.junit;
1:493b80e: 
1:493b80e: import java.net.URL;
1:493b80e: import java.net.URLClassLoader;
1:493b80e: import java.security.AccessController;
1:493b80e: import java.security.PrivilegedAction;
1:493b80e: import junit.framework.Test;
1:493b80e: 
1:493b80e: /**
1:493b80e:  * A decorator that changes the context class loader for the current
1:493b80e:  * configuration and resets it afterwards.
1:493b80e:  */
1:493b80e: public class ClassLoaderTestSetup extends BaseJDBCTestSetup {
1:493b80e: 
1:493b80e:     private ClassLoader oldLoader;
1:493b80e: 
1:493b80e:     /**
1:493b80e:      * Create a decorator that makes {@code test} run with non-default
1:493b80e:      * class loader. It also shuts down the engine so Derby classes will
1:493b80e:      * be loaded with the new class loader.
1:493b80e:      *
1:493b80e:      * @param test the test to decorate
1:493b80e:      */
1:493b80e:     public ClassLoaderTestSetup(Test test) {
1:493b80e:         super(test);
2:493b80e:     }
1:493b80e: 
1:349d2a2:     private static ClassLoader makeClassLoader() {
1:349d2a2:         PrivilegedAction<ClassLoader> pa = () -> new URLClassLoader(new URL[0]);
1:349d2a2:         return AccessController.doPrivileged(pa);
1:493b80e:     }
1:493b80e: 
2:493b80e:     @Override
1:493b80e:     protected void setUp() throws Exception {
1:493b80e:         super.setUp();
1:493b80e:         TestConfiguration.getCurrent().shutdownEngine();
1:493b80e:         oldLoader = getThreadLoader();
1:349d2a2:         setThreadLoader(makeClassLoader());
1:493b80e:     }
1:493b80e: 
1:493b80e:     @Override
1:493b80e:     protected void tearDown() throws Exception {
1:493b80e:         setThreadLoader(oldLoader);
1:493b80e:         super.tearDown();
1:493b80e:     }
1:493b80e: 
1:493b80e:     /**
1:493b80e:      * Force this thread to use a specific class loader.
1:493b80e:      * @param which class loader to set
1:493b80e:      *
1:493b80e:      * @throws  SecurityException
1:493b80e:      *          if the current thread cannot set the context ClassLoader
1:493b80e:      */
1:493b80e:     public static void setThreadLoader(final ClassLoader which) {
1:493b80e:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:493b80e:             @Override
1:493b80e:             public Void run() {
1:493b80e:                 java.lang.Thread.currentThread().setContextClassLoader(which);
1:493b80e:               return null;
1:493b80e:             }
2:493b80e:         });
1:493b80e:     }
1:493b80e: 
1:493b80e:     /**
1:493b80e:      * <p>
1:493b80e:      * Retrieve the class loader currently being used by this thread.
1:493b80e:      * </p>
1:493b80e:      * @return the current context class loader
1:493b80e:      */
1:493b80e:     public static ClassLoader getThreadLoader() {
2:493b80e:         return AccessController.doPrivileged(
1:493b80e:                 new PrivilegedAction<ClassLoader>() {
1:493b80e:             public ClassLoader run() {
1:493b80e:                 return Thread.currentThread().getContextClassLoader();
1:493b80e:             }
1:493b80e:         });
1:493b80e:     }
1:493b80e: 
1:493b80e: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:349d2a2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static ClassLoader makeClassLoader() {
1:         PrivilegedAction<ClassLoader> pa = () -> new URLClassLoader(new URL[0]);
1:         return AccessController.doPrivileged(pa);
/////////////////////////////////////////////////////////////////////////
1:         setThreadLoader(makeClassLoader());
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:493b80e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.junit.ClassLoaderTestSetup
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.junit;
1: 
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import junit.framework.Test;
0: import org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeClassLoader;
1: 
1: /**
1:  * A decorator that changes the context class loader for the current
1:  * configuration and resets it afterwards.
1:  */
1: public class ClassLoaderTestSetup extends BaseJDBCTestSetup {
1: 
1:     private ClassLoader oldLoader;
1: 
1:     /**
1:      * Create a decorator that makes {@code test} run with non-default
1:      * class loader. It also shuts down the engine so Derby classes will
1:      * be loaded with the new class loader.
1:      *
1:      * @param test the test to decorate
1:      */
1:     public ClassLoaderTestSetup(Test test) {
1:         super(test);
1:     }
1: 
0:     private static ClassLoader makeClassLoader(final ClassLoader old) {
1:         return AccessController.doPrivileged(
0:             new PrivilegedAction<URLClassLoader>() {
1:                 @Override
0:                 public URLClassLoader run() {
0:                         URL[] jars = ((URLClassLoader)old).getURLs();
0:                         return new URLClassLoader(jars, null);
1:                 }
1:             });
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         TestConfiguration.getCurrent().shutdownEngine();
1:         oldLoader = getThreadLoader();
0:         setThreadLoader(makeClassLoader(oldLoader));
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         setThreadLoader(oldLoader);
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Force this thread to use a specific class loader.
1:      * @param which class loader to set
1:      *
1:      * @throws  SecurityException
1:      *          if the current thread cannot set the context ClassLoader
1:      */
1:     public static void setThreadLoader(final ClassLoader which) {
1:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:             @Override
1:             public Void run() {
1:                 java.lang.Thread.currentThread().setContextClassLoader(which);
1:               return null;
1:             }
1:         });
1:     }
1: 
1:     /**
1:      * <p>
1:      * Retrieve the class loader currently being used by this thread.
1:      * </p>
1:      * @return the current context class loader
1:      */
1:     public static ClassLoader getThreadLoader() {
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<ClassLoader>() {
1:             public ClassLoader run() {
1:                 return Thread.currentThread().getContextClassLoader();
1:             }
1:         });
1:     }
1: 
1: }
============================================================================