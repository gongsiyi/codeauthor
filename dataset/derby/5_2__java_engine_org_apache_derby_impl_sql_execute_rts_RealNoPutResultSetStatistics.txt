1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for NoPutResultSetImpl.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: abstract class RealNoPutResultSetStatistics 
1:eac0369: 	extends RealBasicNoPutResultSetStatistics
1:eac0369: {
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369: 	public int resultSetNumber;
1:eac0369: 
1:eac0369: 	/* fields used for formating run time statistics output */
1:eac0369: 	protected String indent;
1:eac0369: 	protected String subIndent;
1:eac0369: 	protected int sourceDepth;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * 
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	RealNoPutResultSetStatistics(
1:eac0369: 										int numOpens,
1:eac0369: 										int rowsSeen,
1:eac0369: 										int rowsFiltered,
1:eac0369: 										long constructorTime,
1:eac0369: 										long openTime,
1:eac0369: 										long nextTime,
1:eac0369: 										long closeTime,
1:eac0369: 										int resultSetNumber,
1:eac0369: 										double optimizerEstimatedRowCount,
1:eac0369: 										double optimizerEstimatedCost
1:eac0369: 										)
1:eac0369: 	{
1:eac0369: 		super(
1:eac0369: 				numOpens,
1:eac0369: 				rowsSeen,
1:eac0369: 				rowsFiltered,
1:eac0369: 				constructorTime,
1:eac0369: 				openTime,
1:eac0369: 				nextTime,
1:eac0369: 				closeTime,
1:eac0369: 				optimizerEstimatedRowCount,
1:eac0369: 				optimizerEstimatedCost
1:eac0369: 				);
1:eac0369: 
1:eac0369: 		this.resultSetNumber = resultSetNumber;
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * Initialize the format info for run time statistics.
1:eac0369: 	 */
1:eac0369: 	protected void initFormatInfo(int depth)
1:eac0369: 	{
1:eac0369: 		char[] indentchars = new char[depth];
1:eac0369: 		char[] subIndentchars = new char[depth + 1];
1:eac0369: 		sourceDepth = depth + 1;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Form an array of tab characters for indentation.
1:eac0369: 		*/
1:eac0369: 		subIndentchars[depth] = '\t';
1:eac0369: 		while (depth > 0)
1:eac0369: 		{
1:eac0369: 			subIndentchars[depth - 1] = '\t';
1:eac0369: 			indentchars[depth - 1] = '\t';
1:eac0369: 			depth--;
1:eac0369: 		}
1:eac0369:                 // convert char[] to String to avoid problems during 
1:eac0369:                 // String concatenation.
1:eac0369:                 indent = new String(indentchars);
1:eac0369:                 subIndent = new String(subIndentchars);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:   ResultSetStatistics implemenation for NoPutResultSetImpl.
1: 
0:   @author jerry
1: 
1: */
1: abstract class RealNoPutResultSetStatistics 
1: 	extends RealBasicNoPutResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/* Leave these fields public for object inspectors */
1: 	public int resultSetNumber;
1: 
1: 	/* fields used for formating run time statistics output */
1: 	protected String indent;
1: 	protected String subIndent;
1: 	protected int sourceDepth;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * 
1: 	 *
1: 	 */
1:     public	RealNoPutResultSetStatistics(
1: 										int numOpens,
1: 										int rowsSeen,
1: 										int rowsFiltered,
1: 										long constructorTime,
1: 										long openTime,
1: 										long nextTime,
1: 										long closeTime,
1: 										int resultSetNumber,
1: 										double optimizerEstimatedRowCount,
1: 										double optimizerEstimatedCost
1: 										)
1: 	{
1: 		super(
1: 				numOpens,
1: 				rowsSeen,
1: 				rowsFiltered,
1: 				constructorTime,
1: 				openTime,
1: 				nextTime,
1: 				closeTime,
1: 				optimizerEstimatedRowCount,
1: 				optimizerEstimatedCost
1: 				);
1: 
1: 		this.resultSetNumber = resultSetNumber;
1: 	}
1:  
1: 	/**
1: 	 * Initialize the format info for run time statistics.
1: 	 */
1: 	protected void initFormatInfo(int depth)
1: 	{
1: 		char[] indentchars = new char[depth];
1: 		char[] subIndentchars = new char[depth + 1];
1: 		sourceDepth = depth + 1;
1: 
1: 		/*
1: 		** Form an array of tab characters for indentation.
1: 		*/
1: 		subIndentchars[depth] = '\t';
1: 		while (depth > 0)
1: 		{
1: 			subIndentchars[depth - 1] = '\t';
1: 			indentchars[depth - 1] = '\t';
1: 			depth--;
1: 		}
1:                 // convert char[] to String to avoid problems during 
1:                 // String concatenation.
1:                 indent = new String(indentchars);
1:                 subIndent = new String(subIndentchars);
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:   ResultSetStatistics implemenation for NoPutResultSetImpl.
0: 
0:   @author jerry
0: 
0: */
0: abstract class RealNoPutResultSetStatistics 
0: 	extends RealBasicNoPutResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/* Leave these fields public for object inspectors */
0: 	public int resultSetNumber;
0: 
0: 	/* fields used for formating run time statistics output */
0: 	protected String indent;
0: 	protected String subIndent;
0: 	protected int sourceDepth;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * 
0: 	 *
0: 	 */
0:     public	RealNoPutResultSetStatistics(
0: 										int numOpens,
0: 										int rowsSeen,
0: 										int rowsFiltered,
0: 										long constructorTime,
0: 										long openTime,
0: 										long nextTime,
0: 										long closeTime,
0: 										int resultSetNumber,
0: 										double optimizerEstimatedRowCount,
0: 										double optimizerEstimatedCost
0: 										)
0: 	{
0: 		super(
0: 				numOpens,
0: 				rowsSeen,
0: 				rowsFiltered,
0: 				constructorTime,
0: 				openTime,
0: 				nextTime,
0: 				closeTime,
0: 				optimizerEstimatedRowCount,
0: 				optimizerEstimatedCost
0: 				);
0: 
0: 		this.resultSetNumber = resultSetNumber;
0: 	}
0:  
0: 	/**
0: 	 * Initialize the format info for run time statistics.
0: 	 */
0: 	protected void initFormatInfo(int depth)
0: 	{
0: 		char[] indentchars = new char[depth];
0: 		char[] subIndentchars = new char[depth + 1];
0: 		sourceDepth = depth + 1;
0: 
0: 		/*
0: 		** Form an array of tab characters for indentation.
0: 		*/
0: 		subIndentchars[depth] = '\t';
0: 		while (depth > 0)
0: 		{
0: 			subIndentchars[depth - 1] = '\t';
0: 			indentchars[depth - 1] = '\t';
0: 			depth--;
0: 		}
0:                 // convert char[] to String to avoid problems during 
0:                 // String concatenation.
0:                 indent = new String(indentchars);
0:                 subIndent = new String(subIndentchars);
0: 	}
0: }
============================================================================