1:38520af: /*
1:38520af:  *
1:38520af:  * Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTests
1:38520af:  *
1:38520af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:38520af:  * contributor license agreements.  See the NOTICE file distributed with
1:38520af:  * this work for additional information regarding copyright ownership.
1:38520af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:38520af:  * (the "License"); you may not use this file except in compliance with
1:38520af:  * the License.  You may obtain a copy of the License at
1:38520af:  *
1:38520af:  *    http://www.apache.org/licenses/LICENSE-2.0
1:38520af:  *
1:38520af:  * Unless required by applicable law or agreed to in writing, 
1:38520af:  * software distributed under the License is distributed on an 
1:38520af:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:38520af:  * either express or implied. See the License for the specific 
1:38520af:  * language governing permissions and limitations under the License.
1:38520af:  */
7:38520af: 
1:38520af: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:38520af: 
1:a39c84c: import java.util.Properties;
1:38520af: import junit.framework.Test;
1:cb69fa9: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:cb69fa9: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:a39c84c: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:38520af: import org.apache.derbyTesting.junit.TestConfiguration;
1:cb69fa9: 
1:38520af: /**
1:38520af:  * Network client .sql tests to run via ij.
1:38520af:  */
1:cb69fa9: /**
1:cb69fa9:  * NetScripts runs ij scripts (.sql files) in the derbynet package
1:cb69fa9:  * and compares the output to a canon file in the standard master package.
1:cb69fa9:  * <BR>
1:cb69fa9:  * Its suite() method returns a set of tests where each test is an instance of
1:cb69fa9:  * this class for an individual script wrapped in a clean database decorator.
1:cb69fa9:  * <BR>
1:cb69fa9:  * It can also be used as a command line program to run one or more
1:cb69fa9:  * ij scripts as tests.
1:cb69fa9:  *
1:cb69fa9:  */
1:cb69fa9: public final class NetIjTest extends ScriptTestCase {
1:cb69fa9: 
1:cb69fa9:     /**
1:cb69fa9:      * scripts (.sql files) - only run in client.
1:cb69fa9:      */
1:cb69fa9:     private static final String[] CLIENT_TESTS = {
1:cb69fa9:         "testclientij",
1:cb69fa9:     };
1:cb69fa9: 
1:cb69fa9:     /**
1:cb69fa9:      * Run a set of scripts (.sql files) passed in on the
1:cb69fa9:      * command line. Note the .sql suffix must not be provided as
1:cb69fa9:      * part of the script name.
1:cb69fa9:      * <code>
1:cb69fa9:      * example
1:cb69fa9:      * java org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest case union
1:cb69fa9:      * </code>
1:cb69fa9:      */
1:cb69fa9:     public static void main(String[] args)
1:cb69fa9:         {
1:cb69fa9:             junit.textui.TestRunner.run(getSuite(args));
1:cb69fa9:         }
1:cb69fa9: 
1:cb69fa9:     /**
1:cb69fa9:      * Return the suite that runs all the derbynet scripts.
1:cb69fa9:      */
1:cb69fa9:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("NetScripts");
1:cb69fa9: 
1:cb69fa9:         // Set up the scripts run with the network client
1:1ae02c9:         BaseTestSuite clientTests = new BaseTestSuite("NetScripts:client");
1:cb69fa9:         clientTests.addTest(getSuite(CLIENT_TESTS));
1:cb69fa9: 
1:a39c84c:         int port = TestConfiguration.getCurrent().getPort();
1:a39c84c: 
1:a39c84c:         Properties prop = new Properties();
1:a39c84c:         prop.setProperty("ij.protocol",
1:a39c84c:                 "jdbc:derby://localhost:"+port+"/");
1:a39c84c: 
1:a39c84c:         Test client = new SystemPropertyTestSetup(
1:a39c84c:                 TestConfiguration.clientServerDecoratorWithPort(clientTests,port),
1:a39c84c:                 prop);
1:a39c84c:                     
1:cb69fa9:         // add those client tests into the top-level suite.
1:cb69fa9:         suite.addTest(client);
1:cb69fa9: 
1:38520af:         return suite;
1:cb69fa9:     }
1:cb69fa9: 
1:cb69fa9:     /*
1:cb69fa9:      * A single JUnit test that runs a single derbynet script.
1:cb69fa9:      */
1:cb69fa9:     private NetIjTest(String netTest){
1:a39c84c:         super(netTest,true);
1:cb69fa9:     }
1:cb69fa9: 
1:cb69fa9:     /**
1:cb69fa9:      * Return a suite of derbynet tests from the list of
1:cb69fa9:      * script names. Each test is surrounded in a decorator
1:cb69fa9:      * that cleans the database.
1:cb69fa9:      */
1:cb69fa9:     private static Test getSuite(String[] list) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Net scripts");
1:cb69fa9:         for (int i = 0; i < list.length; i++)
1:cb69fa9:             suite.addTest(
1:cb69fa9:                 new CleanDatabaseTestSetup(
1:cb69fa9:                     new NetIjTest(list[i])));
1:cb69fa9: 
1:cb69fa9:         return getIJConfig(suite);
1:1ae02c9:     }
1:cb69fa9: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("NetScripts");
1:         BaseTestSuite clientTests = new BaseTestSuite("NetScripts:client");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Net scripts");
/////////////////////////////////////////////////////////////////////////
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:a39c84c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1:         int port = TestConfiguration.getCurrent().getPort();
1: 
1:         Properties prop = new Properties();
1:         prop.setProperty("ij.protocol",
1:                 "jdbc:derby://localhost:"+port+"/");
1: 
1:         Test client = new SystemPropertyTestSetup(
1:                 TestConfiguration.clientServerDecoratorWithPort(clientTests,port),
1:                 prop);
1:                     
/////////////////////////////////////////////////////////////////////////
1:         super(netTest,true);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:cb69fa9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: /**
1:  * NetScripts runs ij scripts (.sql files) in the derbynet package
1:  * and compares the output to a canon file in the standard master package.
1:  * <BR>
1:  * Its suite() method returns a set of tests where each test is an instance of
1:  * this class for an individual script wrapped in a clean database decorator.
1:  * <BR>
1:  * It can also be used as a command line program to run one or more
1:  * ij scripts as tests.
1:  *
1:  */
1: public final class NetIjTest extends ScriptTestCase {
1: 
1:     /**
1:      * scripts (.sql files) - only run in client.
1:      */
1:     private static final String[] CLIENT_TESTS = {
1:         "testclientij",
1:     };
1: 
1:     /**
1:      * Run a set of scripts (.sql files) passed in on the
1:      * command line. Note the .sql suffix must not be provided as
1:      * part of the script name.
1:      * <code>
1:      * example
1:      * java org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest case union
1:      * </code>
1:      */
1:     public static void main(String[] args)
1:         {
1:             junit.textui.TestRunner.run(getSuite(args));
1:         }
1: 
1:     /**
1:      * Return the suite that runs all the derbynet scripts.
1:      */
1:     public static Test suite() {
1: 
0:         TestSuite suite = new TestSuite("NetScripts");
1: 
1:         // Set up the scripts run with the network client
0:         TestSuite clientTests = new TestSuite("NetScripts:client");
1:         clientTests.addTest(getSuite(CLIENT_TESTS));
0:         Test client = TestConfiguration.clientServerDecorator(clientTests);
1: 
1:         // add those client tests into the top-level suite.
1:         suite.addTest(client);
1: 
1: 
1:     /*
1:      * A single JUnit test that runs a single derbynet script.
1:      */
1:     private NetIjTest(String netTest){
0:         super(netTest);
1:     }
1: 
1:     /**
1:      * Return a suite of derbynet tests from the list of
1:      * script names. Each test is surrounded in a decorator
1:      * that cleans the database.
1:      */
1:     private static Test getSuite(String[] list) {
0:         TestSuite suite = new TestSuite("Net scripts");
1:         for (int i = 0; i < list.length; i++)
1:             suite.addTest(
1:                 new CleanDatabaseTestSetup(
1:                     new NetIjTest(list[i])));
1: 
1:         return getIJConfig(suite);
1:     }
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:ce97577
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
0: public class NetIjTest extends IjTestCase {
0: 	private NetIjTest(String name) {
0:         suite.addTest(new SupportFilesSetup(
0:         		TestConfiguration.clientServerDecorator(
0:         		new NetIjTest("testclientij"))));
commit:38520af
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTests
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derbyTesting.functionTests.util.IjTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Network client .sql tests to run via ij.
1:  */
0: public class NetIjTests extends IjTestCase {
1: 	
0: 	private NetIjTests(String name) {
0: 		super(name);
0: 	}
1: 	
0: 	public static Test suite() {
1:         
0:         TestSuite suite = new TestSuite("NetIjTests");
0:         suite.addTest(TestConfiguration.clientServerDecorator(
0:         		new NetIjTests("testclientij")));
1:         
1:         return suite;
0:     }
0: }
============================================================================