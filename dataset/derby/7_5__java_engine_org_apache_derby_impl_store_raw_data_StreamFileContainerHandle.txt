1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.StreamFileContainerHandle
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:a12152a: import org.apache.derby.iapi.services.monitor.DerbyObservable;
1:a12152a: import org.apache.derby.iapi.services.monitor.DerbyObserver;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.raw.data.DropOnCommit;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A handle to an open stream container, implememts StreamContainerHandle.
1:eac0369: 	<P>
1:eac0369: 	This class is an Observer to observe RawTransactions
1:eac0369: 
1:eac0369: 	<BR> MT - Mutable - Immutable identity - Thread Aware
1:eac0369: */
1:eac0369: 
1:eac0369: final class StreamFileContainerHandle 
1:a12152a:     implements  StreamContainerHandle, DerbyObserver 
1:eac0369: {
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Fields
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Raw Store identifier
1:eac0369: 		<BR> MT - Immutable
1:eac0369: 	*/
1:eac0369: 	private final UUID rawStoreId;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Container identifier
1:eac0369: 		<BR> MT - Immutable
1:eac0369: 	*/
1:eac0369: 	protected final ContainerKey identity;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Is this StreamContainerHandle active.
1:eac0369: 
1:eac0369: 		<BR> MT - Mutable : scoped
1:eac0369: 	*/
1:eac0369: 	protected boolean active;	
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The actual container we are accessing. Only valid when active is true.
1:eac0369: 
1:eac0369: 		<BR> MT - Mutable : scoped
1:eac0369: 	*/
1:eac0369: 	protected StreamFileContainer container;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		our transaction. Only valid when active is true.
1:eac0369: 
1:eac0369: 		<BR> MT - Mutable : scoped
1:eac0369: 	*/
1:eac0369: 	protected RawTransaction xact;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Whether this container should be held open across commit.  
1:eac0369:         Only valid when active is true.
1:eac0369: 
1:eac0369: 		<BR> MT - Mutable : scoped
1:eac0369: 	*/
1:eac0369: 	private boolean     hold;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Constructor
1:eac0369: 	*/
1:eac0369: 	public StreamFileContainerHandle(
1:eac0369:     UUID            rawStoreId, 
1:eac0369:     RawTransaction  xact, 
1:eac0369:     ContainerKey    identity,
1:eac0369:     boolean         hold) 
1:eac0369:     {
1:eac0369: 		this.identity   = identity;
1:eac0369: 		this.xact       = xact;
1:eac0369: 		this.rawStoreId = rawStoreId;
1:eac0369: 		this.hold       = hold;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public StreamFileContainerHandle(
1:eac0369:     UUID                rawStoreId, 
1:eac0369:     RawTransaction      xact, 
1:eac0369:     StreamFileContainer container,
1:eac0369:     boolean             hold) 
1:eac0369:     {
1:eac0369: 
1:eac0369: 		this.identity   = container.getIdentity();
1:eac0369: 		this.xact       = xact;
1:eac0369: 		this.rawStoreId = rawStoreId;
1:eac0369: 		this.hold       = hold;
1:eac0369: 
1:eac0369: 		this.container  = container;
1:eac0369: 
1:eac0369: 		// we are inactive until useContainer is called.
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods from StreamContainerHandle
1:eac0369: 	*/
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Request the system properties associated with a container. 
1:eac0369: 	 * @see StreamContainerHandle#getContainerProperties
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void getContainerProperties(Properties prop)
1:eac0369: 		throws StandardException {
1:eac0369: 
1:eac0369:         container.getContainerProperties(prop);
1:eac0369:         return;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * fetch a row from the container. 
1:eac0369:     *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 	public boolean fetchNext(DataValueDescriptor[] row) 
1:eac0369:         throws StandardException {
1:eac0369: 
1:eac0369: 		return container.fetchNext(row);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@see StreamContainerHandle#close
1:eac0369: 
1:eac0369: 	    @exception  StandardException  Standard exception policy.
1:eac0369: 	*/
1:eac0369: 	public void close() 
1:eac0369:     {
1:eac0369: 
1:eac0369:         if (xact == null) {
1:eac0369: 
1:eac0369:             // Probably be closed explicitly by a client, after closing 
1:eac0369:             // automatically after an abort.
1:eac0369:             if (SanityManager.DEBUG)
1:eac0369:                 SanityManager.ASSERT(!active);
1:eac0369: 
1:eac0369:             return;
1:eac0369:         }
1:eac0369: 
1:eac0369: 		active = false;
1:eac0369: 
1:eac0369: 		// let go of the container
1:eac0369:         container.close();
1:eac0369: 		container = null;
1:eac0369: 
1:eac0369: 		// and remove ourseleves from this transaction
1:eac0369: 		xact.deleteObserver(this);
1:eac0369: 
1:eac0369: 		xact = null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		remove the stream container
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy		
1:eac0369: 		@see StreamContainerHandle#removeContainer
1:eac0369: 	 */
1:eac0369: 	public void removeContainer() throws StandardException {
1:eac0369: 		container.removeContainer();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		get the container key for the stream container
1:eac0369: 	 */
1:eac0369: 	public ContainerKey getId() {
1:eac0369: 		return identity;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**	Methods of Observer
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Called when the transaction is about to complete.
1:eac0369: 
1:d21039a: 		@see DerbyObserver#update
1:eac0369: 	*/
1:a12152a: 	public void update(DerbyObservable obj, Object arg) 
1:eac0369:     {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (arg == null)
1:eac0369: 				SanityManager.THROWASSERT("still on observr list " + this);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// already been removed from the list
1:eac0369: 		if (xact == null) {
1:eac0369: 
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			// just check reference equality
1:eac0369: 
1:eac0369: 			if (obj != xact)
1:eac0369: 				SanityManager.THROWASSERT("Observable passed to update is incorrect expected "
1:eac0369: 					+ xact + " got " + obj);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// close on a commit, abort or drop of this container.
1:eac0369: 		if (arg.equals(RawTransaction.COMMIT) || 
1:eac0369:             arg.equals(RawTransaction.ABORT)  || 
1:eac0369:             arg.equals(identity)) 
1:eac0369:         {
1:eac0369: 			// close the container		
1:eac0369:             close();
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		if (arg.equals(RawTransaction.SAVEPOINT_ROLLBACK)) {
1:eac0369: 
1:eac0369: 			// remain open
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Implementation specific methods, these are public so that they can be called
1:eac0369: 	** in other packages that are specific implementations of Data, ie.
1:eac0369: 	** a directory at the level
1:eac0369: 	**
1:94f158a: 	** org.apache.derby.impl.store.raw.data.*
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Attach me to a container. If this method returns false then
1:eac0369: 		I cannot be used anymore, and any reference to me must be discarded.
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public boolean useContainer() throws StandardException {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(!active);
1:eac0369: 			SanityManager.ASSERT(container != null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// always set forUpdate to false
1:eac0369: 		if (!container.use(this)) {
1:eac0369: 			container = null;
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		active = true;
1:eac0369: 
1:eac0369: 		// watch transaction and close ourseleves just before it completes.
1:eac0369:         if (!hold)
1:eac0369:         {
1:eac0369:             xact.addObserver(this);
1:eac0369:             xact.addObserver(new DropOnCommit(identity, true));
1:eac0369:         }
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the RawTransaction this object was opened in.
1:eac0369: 	*/
1:eac0369: 	public final RawTransaction getTransaction() {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(xact != null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return xact;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Implementation specific methods for myself and my sub-classes
1:eac0369: 	*/
1:eac0369: 	public String toString() {
1:eac0369:         if (SanityManager.DEBUG) {
1:4a4b0a8:             String str = "StreamContainerHandle:(" + identity.toString() + ")";
1:eac0369:             return(str);
1:eac0369:         } else {
1:eac0369:             return(super.toString());
1:eac0369:         }
1:eac0369:     }
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:d21039a
/////////////////////////////////////////////////////////////////////////
1: 		@see DerbyObserver#update
commit:a12152a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.monitor.DerbyObservable;
1: import org.apache.derby.iapi.services.monitor.DerbyObserver;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     implements  StreamContainerHandle, DerbyObserver 
/////////////////////////////////////////////////////////////////////////
1: 	public void update(DerbyObservable obj, Object arg) 
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4a4b0a8
/////////////////////////////////////////////////////////////////////////
1:             String str = "StreamContainerHandle:(" + identity.toString() + ")";
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy		
/////////////////////////////////////////////////////////////////////////
1: 	** org.apache.derby.impl.store.raw.data.*
1: 		@exception StandardException Standard Derby error policy
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.StreamFileContainerHandle
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.impl.store.raw.data.DropOnCommit;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
0: import java.util.Observable;
0: import java.util.Observer;
1: import java.util.Properties;
1: 
1: /**
1: 	A handle to an open stream container, implememts StreamContainerHandle.
1: 	<P>
1: 	This class is an Observer to observe RawTransactions
1: 
1: 	<BR> MT - Mutable - Immutable identity - Thread Aware
1: */
1: 
1: final class StreamFileContainerHandle 
0:     implements  StreamContainerHandle, Observer 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	/*
1: 	** Fields
1: 	*/
1: 
1: 	/**
1: 		Raw Store identifier
1: 		<BR> MT - Immutable
1: 	*/
1: 	private final UUID rawStoreId;
1: 
1: 	/**
1: 		Container identifier
1: 		<BR> MT - Immutable
1: 	*/
1: 	protected final ContainerKey identity;
1: 
1: 
1: 	/**
1: 		Is this StreamContainerHandle active.
1: 
1: 		<BR> MT - Mutable : scoped
1: 	*/
1: 	protected boolean active;	
1: 
1: 	/**
1: 		The actual container we are accessing. Only valid when active is true.
1: 
1: 		<BR> MT - Mutable : scoped
1: 	*/
1: 	protected StreamFileContainer container;
1: 
1: 	/**
1: 		our transaction. Only valid when active is true.
1: 
1: 		<BR> MT - Mutable : scoped
1: 	*/
1: 	protected RawTransaction xact;
1: 
1: 	/**
1: 		Whether this container should be held open across commit.  
1:         Only valid when active is true.
1: 
1: 		<BR> MT - Mutable : scoped
1: 	*/
1: 	private boolean     hold;
1: 
1: 	/*
1: 	** Constructor
1: 	*/
1: 	public StreamFileContainerHandle(
1:     UUID            rawStoreId, 
1:     RawTransaction  xact, 
1:     ContainerKey    identity,
1:     boolean         hold) 
1:     {
1: 		this.identity   = identity;
1: 		this.xact       = xact;
1: 		this.rawStoreId = rawStoreId;
1: 		this.hold       = hold;
1: 	}
1: 
1: 	public StreamFileContainerHandle(
1:     UUID                rawStoreId, 
1:     RawTransaction      xact, 
1:     StreamFileContainer container,
1:     boolean             hold) 
1:     {
1: 
1: 		this.identity   = container.getIdentity();
1: 		this.xact       = xact;
1: 		this.rawStoreId = rawStoreId;
1: 		this.hold       = hold;
1: 
1: 		this.container  = container;
1: 
1: 		// we are inactive until useContainer is called.
1: 	}
1: 
1: 	/*
1: 	** Methods from StreamContainerHandle
1: 	*/
1: 
1:     /**
1:      * Request the system properties associated with a container. 
1: 	 * @see StreamContainerHandle#getContainerProperties
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void getContainerProperties(Properties prop)
1: 		throws StandardException {
1: 
1:         container.getContainerProperties(prop);
1:         return;
1:     }
1: 
1:     /**
1:      * fetch a row from the container. 
1:     *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public boolean fetchNext(DataValueDescriptor[] row) 
1:         throws StandardException {
1: 
1: 		return container.fetchNext(row);
1: 	}
1: 
1: 	/**
1: 		@see StreamContainerHandle#close
1: 
1: 	    @exception  StandardException  Standard exception policy.
1: 	*/
1: 	public void close() 
1:     {
1: 
1:         if (xact == null) {
1: 
1:             // Probably be closed explicitly by a client, after closing 
1:             // automatically after an abort.
1:             if (SanityManager.DEBUG)
1:                 SanityManager.ASSERT(!active);
1: 
1:             return;
1:         }
1: 
1: 		active = false;
1: 
1: 		// let go of the container
1:         container.close();
1: 		container = null;
1: 
1: 		// and remove ourseleves from this transaction
1: 		xact.deleteObserver(this);
1: 
1: 		xact = null;
1: 	}
1: 
1: 	/**
1: 		remove the stream container
1: 
0: 		@exception StandardException Standard Cloudscape error policy		
1: 		@see StreamContainerHandle#removeContainer
1: 	 */
1: 	public void removeContainer() throws StandardException {
1: 		container.removeContainer();
1: 	}
1: 
1: 	/**
1: 		get the container key for the stream container
1: 	 */
1: 	public ContainerKey getId() {
1: 		return identity;
1: 	}
1: 
1: 	/*
1: 	**	Methods of Observer
1: 	*/
1: 
1: 	/**
1: 		Called when the transaction is about to complete.
1: 
0: 		@see Observer#update
1: 	*/
0: 	public void update(Observable obj, Object arg) 
1:     {
1: 		if (SanityManager.DEBUG) {
1: 			if (arg == null)
1: 				SanityManager.THROWASSERT("still on observr list " + this);
1: 		}
1: 
1: 		// already been removed from the list
1: 		if (xact == null) {
1: 
1: 			return;
1: 		}
1: 
1: 		if (SanityManager.DEBUG) {
1: 			// just check reference equality
1: 
1: 			if (obj != xact)
1: 				SanityManager.THROWASSERT("Observable passed to update is incorrect expected "
1: 					+ xact + " got " + obj);
1: 		}
1: 
1: 		// close on a commit, abort or drop of this container.
1: 		if (arg.equals(RawTransaction.COMMIT) || 
1:             arg.equals(RawTransaction.ABORT)  || 
1:             arg.equals(identity)) 
1:         {
1: 			// close the container		
1:             close();
1: 			return;
1: 
1: 		}
1: 		
1: 		if (arg.equals(RawTransaction.SAVEPOINT_ROLLBACK)) {
1: 
1: 			// remain open
1: 			return;
1: 		}
1: 	}
1: 
1: 	/*
1: 	** Implementation specific methods, these are public so that they can be called
1: 	** in other packages that are specific implementations of Data, ie.
1: 	** a directory at the level
1: 	**
0: 	** com.ibm.db2j.impl.Database.Storage.RawStore.Data.*
1: 	*/
1: 
1: 	/**
1: 		Attach me to a container. If this method returns false then
1: 		I cannot be used anymore, and any reference to me must be discarded.
1: 
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public boolean useContainer() throws StandardException {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(!active);
1: 			SanityManager.ASSERT(container != null);
1: 		}
1: 
1: 		// always set forUpdate to false
1: 		if (!container.use(this)) {
1: 			container = null;
1: 			return false;
1: 		}
1: 
1: 		active = true;
1: 
1: 		// watch transaction and close ourseleves just before it completes.
1:         if (!hold)
1:         {
1:             xact.addObserver(this);
1:             xact.addObserver(new DropOnCommit(identity, true));
1:         }
1: 
1: 		return true;
1: 	}
1: 
1: 	/**
1: 		Return the RawTransaction this object was opened in.
1: 	*/
1: 	public final RawTransaction getTransaction() {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(xact != null);
1: 		}
1: 
1: 		return xact;
1: 	}
1: 
1: 	/*
1: 	** Implementation specific methods for myself and my sub-classes
1: 	*/
1: 	public String toString() {
1:         if (SanityManager.DEBUG) {
0:             String str = new String();
0:             str += "StreamContainerHandle:(" + identity.toString() + ")";
1:             return(str);
1:         } else {
1:             return(super.toString());
1:         }
1:     }
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.StreamContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.impl.store.raw.data.DropOnCommit;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Observable;
0: import java.util.Observer;
0: import java.util.Properties;
0: 
0: /**
0: 	A handle to an open stream container, implememts StreamContainerHandle.
0: 	<P>
0: 	This class is an Observer to observe RawTransactions
0: 
0: 	<BR> MT - Mutable - Immutable identity - Thread Aware
0: */
0: 
0: final class StreamFileContainerHandle 
0:     implements  StreamContainerHandle, Observer 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	/*
0: 	** Fields
0: 	*/
0: 
0: 	/**
0: 		Raw Store identifier
0: 		<BR> MT - Immutable
0: 	*/
0: 	private final UUID rawStoreId;
0: 
0: 	/**
0: 		Container identifier
0: 		<BR> MT - Immutable
0: 	*/
0: 	protected final ContainerKey identity;
0: 
0: 
0: 	/**
0: 		Is this StreamContainerHandle active.
0: 
0: 		<BR> MT - Mutable : scoped
0: 	*/
0: 	protected boolean active;	
0: 
0: 	/**
0: 		The actual container we are accessing. Only valid when active is true.
0: 
0: 		<BR> MT - Mutable : scoped
0: 	*/
0: 	protected StreamFileContainer container;
0: 
0: 	/**
0: 		our transaction. Only valid when active is true.
0: 
0: 		<BR> MT - Mutable : scoped
0: 	*/
0: 	protected RawTransaction xact;
0: 
0: 	/**
0: 		Whether this container should be held open across commit.  
0:         Only valid when active is true.
0: 
0: 		<BR> MT - Mutable : scoped
0: 	*/
0: 	private boolean     hold;
0: 
0: 	/*
0: 	** Constructor
0: 	*/
0: 	public StreamFileContainerHandle(
0:     UUID            rawStoreId, 
0:     RawTransaction  xact, 
0:     ContainerKey    identity,
0:     boolean         hold) 
0:     {
0: 		this.identity   = identity;
0: 		this.xact       = xact;
0: 		this.rawStoreId = rawStoreId;
0: 		this.hold       = hold;
0: 	}
0: 
0: 	public StreamFileContainerHandle(
0:     UUID                rawStoreId, 
0:     RawTransaction      xact, 
0:     StreamFileContainer container,
0:     boolean             hold) 
0:     {
0: 
0: 		this.identity   = container.getIdentity();
0: 		this.xact       = xact;
0: 		this.rawStoreId = rawStoreId;
0: 		this.hold       = hold;
0: 
0: 		this.container  = container;
0: 
0: 		// we are inactive until useContainer is called.
0: 	}
0: 
0: 	/*
0: 	** Methods from StreamContainerHandle
0: 	*/
0: 
0:     /**
0:      * Request the system properties associated with a container. 
0: 	 * @see StreamContainerHandle#getContainerProperties
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void getContainerProperties(Properties prop)
0: 		throws StandardException {
0: 
0:         container.getContainerProperties(prop);
0:         return;
0:     }
0: 
0:     /**
0:      * fetch a row from the container. 
0:     *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public boolean fetchNext(DataValueDescriptor[] row) 
0:         throws StandardException {
0: 
0: 		return container.fetchNext(row);
0: 	}
0: 
0: 	/**
0: 		@see StreamContainerHandle#close
0: 
0: 	    @exception  StandardException  Standard exception policy.
0: 	*/
0: 	public void close() 
0:     {
0: 
0:         if (xact == null) {
0: 
0:             // Probably be closed explicitly by a client, after closing 
0:             // automatically after an abort.
0:             if (SanityManager.DEBUG)
0:                 SanityManager.ASSERT(!active);
0: 
0:             return;
0:         }
0: 
0: 		active = false;
0: 
0: 		// let go of the container
0:         container.close();
0: 		container = null;
0: 
0: 		// and remove ourseleves from this transaction
0: 		xact.deleteObserver(this);
0: 
0: 		xact = null;
0: 	}
0: 
0: 	/**
0: 		remove the stream container
0: 
0: 		@exception StandardException Standard Cloudscape error policy		
0: 		@see StreamContainerHandle#removeContainer
0: 	 */
0: 	public void removeContainer() throws StandardException {
0: 		container.removeContainer();
0: 	}
0: 
0: 	/**
0: 		get the container key for the stream container
0: 	 */
0: 	public ContainerKey getId() {
0: 		return identity;
0: 	}
0: 
0: 	/*
0: 	**	Methods of Observer
0: 	*/
0: 
0: 	/**
0: 		Called when the transaction is about to complete.
0: 
0: 		@see Observer#update
0: 	*/
0: 	public void update(Observable obj, Object arg) 
0:     {
0: 		if (SanityManager.DEBUG) {
0: 			if (arg == null)
0: 				SanityManager.THROWASSERT("still on observr list " + this);
0: 		}
0: 
0: 		// already been removed from the list
0: 		if (xact == null) {
0: 
0: 			return;
0: 		}
0: 
0: 		if (SanityManager.DEBUG) {
0: 			// just check reference equality
0: 
0: 			if (obj != xact)
0: 				SanityManager.THROWASSERT("Observable passed to update is incorrect expected "
0: 					+ xact + " got " + obj);
0: 		}
0: 
0: 		// close on a commit, abort or drop of this container.
0: 		if (arg.equals(RawTransaction.COMMIT) || 
0:             arg.equals(RawTransaction.ABORT)  || 
0:             arg.equals(identity)) 
0:         {
0: 			// close the container		
0:             close();
0: 			return;
0: 
0: 		}
0: 		
0: 		if (arg.equals(RawTransaction.SAVEPOINT_ROLLBACK)) {
0: 
0: 			// remain open
0: 			return;
0: 		}
0: 	}
0: 
0: 	/*
0: 	** Implementation specific methods, these are public so that they can be called
0: 	** in other packages that are specific implementations of Data, ie.
0: 	** a directory at the level
0: 	**
0: 	** com.ibm.db2j.impl.Database.Storage.RawStore.Data.*
0: 	*/
0: 
0: 	/**
0: 		Attach me to a container. If this method returns false then
0: 		I cannot be used anymore, and any reference to me must be discarded.
0: 
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public boolean useContainer() throws StandardException {
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(!active);
0: 			SanityManager.ASSERT(container != null);
0: 		}
0: 
0: 		// always set forUpdate to false
0: 		if (!container.use(this)) {
0: 			container = null;
0: 			return false;
0: 		}
0: 
0: 		active = true;
0: 
0: 		// watch transaction and close ourseleves just before it completes.
0:         if (!hold)
0:         {
0:             xact.addObserver(this);
0:             xact.addObserver(new DropOnCommit(identity, true));
0:         }
0: 
0: 		return true;
0: 	}
0: 
0: 	/**
0: 		Return the RawTransaction this object was opened in.
0: 	*/
0: 	public final RawTransaction getTransaction() {
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(xact != null);
0: 		}
0: 
0: 		return xact;
0: 	}
0: 
0: 	/*
0: 	** Implementation specific methods for myself and my sub-classes
0: 	*/
0: 	public String toString() {
0:         if (SanityManager.DEBUG) {
0:             String str = new String();
0:             str += "StreamContainerHandle:(" + identity.toString() + ")";
0:             return(str);
0:         } else {
0:             return(super.toString());
0:         }
0:     }
0: }
0: 
============================================================================