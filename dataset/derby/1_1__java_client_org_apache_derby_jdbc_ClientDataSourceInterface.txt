1:8269b78: /*
2:8269b78: 
1:8269b78:    Derby - Class org.apache.derby.jdbc.ClientDataSourceInterface
1:8269b78: 
1:8269b78:    Licensed to the Apache Software Foundation (ASF) under one or more
1:8269b78:    contributor license agreements.  See the NOTICE file distributed with
1:8269b78:    this work for additional information regarding copyright ownership.
1:8269b78:    The ASF licenses this file to You under the Apache License, Version 2.0
1:8269b78:    (the "License"); you may not use this file except in compliance with
1:8269b78:    the License.  You may obtain a copy of the License at
1:8269b78: 
1:8269b78:       http://www.apache.org/licenses/LICENSE-2.0
1:8269b78: 
1:8269b78:    Unless required by applicable law or agreed to in writing, software
1:8269b78:    distributed under the License is distributed on an "AS IS" BASIS,
1:8269b78:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8269b78:    See the License for the specific language governing permissions and
1:8269b78:    limitations under the License.
1:8269b78: 
1:8269b78: */
1:8269b78: 
1:8269b78: package org.apache.derby.jdbc;
1:8269b78: 
1:69e3d06: import javax.sql.DataSource;
1:8269b78: import org.apache.derby.client.am.SqlException;
1:8269b78: import org.apache.derby.client.net.NetConfiguration;
1:8269b78: 
1:8269b78: /**
1:8269b78:  * Specifies Derby extensions to the {@code java.sqlx.DataSource}
1:8269b78:  * API common to all Derby client driver data sources.
1:8269b78:  */
1:69e3d06: public interface ClientDataSourceInterface extends DataSource {
1:8269b78: 
1:8269b78:     public void setPassword(String password);
1:8269b78:     public String getPassword();
1:8269b78: 
1:8269b78:     public void setDatabaseName(String databaseName);
1:8269b78:     public String getDatabaseName();
1:8269b78: 
1:8269b78:     public void setDataSourceName(String dataSourceName);
1:8269b78:     public String getDataSourceName();
1:8269b78: 
1:8269b78:     public void setDescription(String description);
1:8269b78:     public String getDescription();
1:8269b78: 
1:8269b78:     public final static int propertyDefault_portNumber = 1527;
1:8269b78:     public void setPortNumber(int portNumber);
1:8269b78:     public int getPortNumber();
1:8269b78: 
1:8269b78:     public final static String propertyDefault_serverName = "localhost";
1:8269b78:     public void setServerName(String serverName);
1:8269b78:     public String getServerName();
1:8269b78: 
1:8269b78:     public final static String propertyDefault_user = "APP";
1:8269b78: 
1:8269b78:     public void setUser(String user);
1:8269b78:     public String getUser();
1:8269b78: 
1:8269b78:     public final static boolean propertyDefault_retrieveMessageText = true;
1:8269b78:     public void setRetrieveMessageText(boolean retrieveMessageText);
1:8269b78:     public boolean getRetrieveMessageText();
1:8269b78: 
1:8269b78:     /**
1:8269b78:      * The source security mechanism to use when connecting to a client data
1:8269b78:      * source.
1:8269b78:      * <p/>
1:8269b78:      * Security mechanism options are:
1:8269b78:      * <ul>
1:8269b78:      *   <li> USER_ONLY_SECURITY
1:8269b78:      *   <li> CLEAR_TEXT_PASSWORD_SECURITY
1:8269b78:      *   <li> ENCRYPTED_PASSWORD_SECURITY
1:8269b78:      *   <li> ENCRYPTED_USER_AND_PASSWORD_SECURITY - both password and
1:8269b78:      *        user are encrypted
1:8269b78:      *   <li> STRONG_PASSWORD_SUBSTITUTE_SECURITY
1:8269b78:      * </ul> The default security mechanism is USER_ONLY SECURITY
1:8269b78:      * <p/>
1:8269b78:      * If the application specifies a security mechanism then it will be the
1:8269b78:      * only one attempted. If the specified security mechanism is not
1:8269b78:      * supported by the conversation then an exception will be thrown and
1:8269b78:      * there will be no additional retries.
1:8269b78:      * <p/>
1:8269b78:      * Both user and password need to be set for all security mechanism except
1:8269b78:      * USER_ONLY_SECURITY.
1:8269b78:      */
1:8269b78:     public final static short USER_ONLY_SECURITY =
1:8269b78:         (short)NetConfiguration.SECMEC_USRIDONL;
1:8269b78: 
1:8269b78:     public final static short CLEAR_TEXT_PASSWORD_SECURITY =
1:8269b78:         (short)NetConfiguration.SECMEC_USRIDPWD;
1:8269b78: 
1:8269b78:     public final static short ENCRYPTED_PASSWORD_SECURITY =
1:8269b78:         (short)NetConfiguration.SECMEC_USRENCPWD;
1:8269b78: 
1:8269b78:     public final static short ENCRYPTED_USER_AND_PASSWORD_SECURITY =
1:8269b78:         (short)NetConfiguration.SECMEC_EUSRIDPWD;
1:8269b78: 
1:8269b78:     public final static short STRONG_PASSWORD_SUBSTITUTE_SECURITY =
1:8269b78:         (short)NetConfiguration.SECMEC_USRSSBPWD;
1:8269b78: 
1:8269b78:     /**
1:8269b78:      * Default security mechanism is USER_ONLY_SECURITY.
1:8269b78:      */
1:8269b78:     public final static short propertyDefault_securityMechanism =
1:8269b78:         (short)NetConfiguration.SECMEC_USRIDONL;
1:8269b78: 
1:8269b78:     public void setSecurityMechanism(short securityMechanism);
1:8269b78:     public short getSecurityMechanism();
1:8269b78:     public short getSecurityMechanism(String password);
1:8269b78: 
1:8269b78:     public void setSsl(String mode) throws SqlException;
1:8269b78:     public String getSsl();
1:8269b78: 
1:8269b78:     public void setCreateDatabase(String create);
1:8269b78:     public String getCreateDatabase();
1:8269b78: 
1:8269b78:     public void setShutdownDatabase(String shutdown);
1:8269b78:     public String getShutdownDatabase();
1:8269b78: 
1:8269b78:     public void setConnectionAttributes(String prop);
1:8269b78:     public String getConnectionAttributes();
1:8269b78: 
1:8269b78:     public void setTraceLevel(int traceLevel);
1:8269b78:     public int getTraceLevel();
1:8269b78: 
1:8269b78:     public void setTraceFile(String traceFile);
1:8269b78:     public String getTraceFile();
1:8269b78: 
1:8269b78:     public void setTraceDirectory(String traceDirectory);
1:8269b78:     public String getTraceDirectory();
1:8269b78: 
1:8269b78:     public final static boolean propertyDefault_traceFileAppend = false;
1:8269b78: 
1:8269b78:     public void setTraceFileAppend(boolean traceFileAppend);
1:8269b78:     public boolean getTraceFileAppend();
1:8269b78: 
1:8269b78: 
1:8269b78: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:7863d83
/////////////////////////////////////////////////////////////////////////
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
1: public interface ClientDataSourceInterface extends DataSource {
commit:8269b78
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.jdbc.ClientDataSourceInterface
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.jdbc;
1: 
1: import org.apache.derby.client.am.SqlException;
1: import org.apache.derby.client.net.NetConfiguration;
1: 
1: /**
1:  * Specifies Derby extensions to the {@code java.sqlx.DataSource}
1:  * API common to all Derby client driver data sources.
1:  */
0: public interface ClientDataSourceInterface extends javax.sql.DataSource {
1: 
1:     public void setPassword(String password);
1:     public String getPassword();
1: 
1:     public void setDatabaseName(String databaseName);
1:     public String getDatabaseName();
1: 
1:     public void setDataSourceName(String dataSourceName);
1:     public String getDataSourceName();
1: 
1:     public void setDescription(String description);
1:     public String getDescription();
1: 
1:     public final static int propertyDefault_portNumber = 1527;
1:     public void setPortNumber(int portNumber);
1:     public int getPortNumber();
1: 
1:     public final static String propertyDefault_serverName = "localhost";
1:     public void setServerName(String serverName);
1:     public String getServerName();
1: 
1:     public final static String propertyDefault_user = "APP";
1: 
1:     public void setUser(String user);
1:     public String getUser();
1: 
1:     public final static boolean propertyDefault_retrieveMessageText = true;
1:     public void setRetrieveMessageText(boolean retrieveMessageText);
1:     public boolean getRetrieveMessageText();
1: 
1:     /**
1:      * The source security mechanism to use when connecting to a client data
1:      * source.
1:      * <p/>
1:      * Security mechanism options are:
1:      * <ul>
1:      *   <li> USER_ONLY_SECURITY
1:      *   <li> CLEAR_TEXT_PASSWORD_SECURITY
1:      *   <li> ENCRYPTED_PASSWORD_SECURITY
1:      *   <li> ENCRYPTED_USER_AND_PASSWORD_SECURITY - both password and
1:      *        user are encrypted
1:      *   <li> STRONG_PASSWORD_SUBSTITUTE_SECURITY
1:      * </ul> The default security mechanism is USER_ONLY SECURITY
1:      * <p/>
1:      * If the application specifies a security mechanism then it will be the
1:      * only one attempted. If the specified security mechanism is not
1:      * supported by the conversation then an exception will be thrown and
1:      * there will be no additional retries.
1:      * <p/>
1:      * Both user and password need to be set for all security mechanism except
1:      * USER_ONLY_SECURITY.
1:      */
1:     public final static short USER_ONLY_SECURITY =
1:         (short)NetConfiguration.SECMEC_USRIDONL;
1: 
1:     public final static short CLEAR_TEXT_PASSWORD_SECURITY =
1:         (short)NetConfiguration.SECMEC_USRIDPWD;
1: 
1:     public final static short ENCRYPTED_PASSWORD_SECURITY =
1:         (short)NetConfiguration.SECMEC_USRENCPWD;
1: 
1:     public final static short ENCRYPTED_USER_AND_PASSWORD_SECURITY =
1:         (short)NetConfiguration.SECMEC_EUSRIDPWD;
1: 
1:     public final static short STRONG_PASSWORD_SUBSTITUTE_SECURITY =
1:         (short)NetConfiguration.SECMEC_USRSSBPWD;
1: 
1:     /**
1:      * Default security mechanism is USER_ONLY_SECURITY.
1:      */
1:     public final static short propertyDefault_securityMechanism =
1:         (short)NetConfiguration.SECMEC_USRIDONL;
1: 
1:     public void setSecurityMechanism(short securityMechanism);
1:     public short getSecurityMechanism();
1:     public short getSecurityMechanism(String password);
1: 
1:     public void setSsl(String mode) throws SqlException;
1:     public String getSsl();
1: 
1:     public void setCreateDatabase(String create);
1:     public String getCreateDatabase();
1: 
1:     public void setShutdownDatabase(String shutdown);
1:     public String getShutdownDatabase();
1: 
1:     public void setConnectionAttributes(String prop);
1:     public String getConnectionAttributes();
1: 
1:     public void setTraceLevel(int traceLevel);
1:     public int getTraceLevel();
1: 
1:     public void setTraceFile(String traceFile);
1:     public String getTraceFile();
1: 
1:     public void setTraceDirectory(String traceDirectory);
1:     public String getTraceDirectory();
1: 
1:     public final static boolean propertyDefault_traceFileAppend = false;
1: 
1:     public void setTraceFileAppend(boolean traceFileAppend);
1:     public boolean getTraceFileAppend();
1: 
1: 
0:     // ---------------------------- traceLevel -------------------------------
0:     //
1: 
0:     public final static int TRACE_NONE = 0x0;
0:     public final static int TRACE_CONNECTION_CALLS = 0x1;
0:     public final static int TRACE_STATEMENT_CALLS = 0x2;
0:     public final static int TRACE_RESULT_SET_CALLS = 0x4;
0:     public final static int TRACE_DRIVER_CONFIGURATION = 0x10;
0:     public final static int TRACE_CONNECTS = 0x20;
0:     public final static int TRACE_PROTOCOL_FLOWS = 0x40;
0:     public final static int TRACE_RESULT_SET_META_DATA = 0x80;
0:     public final static int TRACE_PARAMETER_META_DATA = 0x100;
0:     public final static int TRACE_DIAGNOSTICS = 0x200;
0:     public final static int TRACE_XA_CALLS = 0x800;
0:     public final static int TRACE_ALL = 0xFFFFFFFF;
0:     public final static int propertyDefault_traceLevel = TRACE_ALL;
1: }
============================================================================