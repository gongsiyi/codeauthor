1:98c7520: /*
2:98c7520: 
1:98c7520:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UDTPermsTest
1:98c7520: 
1:98c7520:    Licensed to the Apache Software Foundation (ASF) under one or more
1:98c7520:    contributor license agreements.  See the NOTICE file distributed with
1:98c7520:    this work for additional information regarding copyright ownership.
1:98c7520:    The ASF licenses this file to you under the Apache License, Version 2.0
1:98c7520:    (the "License"); you may not use this file except in compliance with
1:98c7520:    the License.  You may obtain a copy of the License at
1:98c7520: 
1:98c7520:      http://www.apache.org/licenses/LICENSE-2.0
1:98c7520: 
1:98c7520:    Unless required by applicable law or agreed to in writing, software
1:98c7520:    distributed under the License is distributed on an "AS IS" BASIS,
1:98c7520:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98c7520:    See the License for the specific language governing permissions and
1:98c7520:    limitations under the License.
1:98c7520: 
1:98c7520:  */
1:98c7520: 
1:98c7520: package org.apache.derbyTesting.functionTests.tests.lang;
1:98c7520: 
1:98c7520: import java.sql.Connection;
1:98c7520: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:98c7520: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:98c7520: 
1:98c7520: /**
1:98c7520:  * <p>
1:98c7520:  * Test permissions on UDTs. See DERBY-651.
1:98c7520:  * </p>
1:98c7520:  */
1:98c7520: public class UDTPermsTest extends GeneratedColumnsHelper
1:98c7520: {
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // CONSTANTS
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520:     private static  final   String      TEST_DBO = "TEST_DBO";
1:98c7520:     private static  final   String      RUTH = "RUTH";
1:98c7520:     private static  final   String      ALICE = "ALICE";
1:90f42b4:     private static  final   String      FRANK = "FRANK";
1:90f42b4:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
1:98c7520: 
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // STATE
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // CONSTRUCTOR
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Create a new instance.
1:98c7520:      */
1:98c7520: 
1:98c7520:     public UDTPermsTest(String name)
1:98c7520:     {
1:98c7520:         super(name);
1:98c7520:     }
1:98c7520: 
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // JUnit BEHAVIOR
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * Construct top level suite in this JUnit test
1:98c7520:      */
1:98c7520:     public static Test suite()
1:98c7520:     {
1:1ae02c9:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:1ae02c9:             UDTPermsTest.class);
1:98c7520: 
1:98c7520:         Test        cleanTest = new CleanDatabaseTestSetup( suite );
1:98c7520:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:98c7520:             ( cleanTest, LEGAL_USERS, "udtPermissions" );
1:98c7520:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1:98c7520: 
1:98c7520:         return authorizedTest;
1:98c7520:     }
1:98c7520: 
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520:     //
1:98c7520:     // TESTS
1:98c7520:     //
1:98c7520:     ///////////////////////////////////////////////////////////////////////////////////
1:98c7520: 
1:98c7520:     /**
1:98c7520:      * <p>
1:98c7520:      * Test that you need USAGE privilege on a type in order to select columns
1:98c7520:      * of that type and in order to declare objects which mention that type.
1:98c7520:      * </p>
1:98c7520:      */
1:98c7520:     public  void    test_001_basicGrant()
1:98c7520:         throws Exception
1:98c7520:     {
1:98c7520:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:98c7520:         Connection  ruthConnection = openUserConnection( RUTH );
1:98c7520:         Connection  aliceConnection = openUserConnection( ALICE );
1:98c7520: 
1:98c7520:         //
1:98c7520:         // Create a type, function, and table. make the function and table
1:98c7520:         // public. Verify that they are still not generally usable because the
1:98c7520:         // type is not public yet.
1:98c7520:         //
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "create type price_ruth_01_a external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n"
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "create function makePrice_ruth_01( )\n" +
1:98c7520:              "returns price_ruth_01_a\n" +
1:98c7520:              "language java\n" +
1:98c7520:              "parameter style java\n" +
1:98c7520:              "no sql\n" +
1:98c7520:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "create table t_ruth_01( a price_ruth_01_a )\n"
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "insert into t_ruth_01( a ) values ( makePrice_ruth_01() )\n"
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "grant select on t_ruth_01 to public\n"
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "grant execute on function makePrice_ruth_01 to public\n"
1:98c7520:              );
1:98c7520: 
1:b93f9db:         // should work fine. no USAGE priv required.
1:b93f9db:         goodStatement
1:98c7520:             (
1:b93f9db:              ruthConnection,
1:98c7520:              "select * from ruth.t_ruth_01\n"
1:98c7520:              );
1:b93f9db:         goodStatement
1:98c7520:             (
1:b93f9db:              ruthConnection,
1:98c7520:              "values( ruth.makePrice_ruth_01() )\n"
1:98c7520:              );
1:b93f9db:         
3:98c7520:         expectExecutionError
1:98c7520:             (
3:98c7520:              aliceConnection,
3:98c7520:              LACK_USAGE_PRIV,
1:98c7520:              "create table t_alice_01( a ruth.price_ruth_01_a )\n"
1:98c7520:              );
1:98c7520:         expectExecutionError
1:98c7520:             (
1:98c7520:              aliceConnection,
1:98c7520:              LACK_USAGE_PRIV,
1:98c7520:              "create function makePrice_alice_01_a( )\n" +
1:98c7520:              "returns ruth.price_ruth_01_a\n" +
1:98c7520:              "language java\n" +
1:98c7520:              "parameter style java\n" +
1:98c7520:              "no sql\n" +
1:98c7520:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:98c7520:              );
1:98c7520:         expectExecutionError
1:98c7520:             (
1:98c7520:              aliceConnection,
1:98c7520:              LACK_USAGE_PRIV,
1:98c7520:              "create function makePrice_alice_01_b( a ruth.price_ruth_01_a )\n" +
1:98c7520:              "returns int\n" +
1:98c7520:              "language java\n" +
1:98c7520:              "parameter style java\n" +
1:98c7520:              "no sql\n" +
1:98c7520:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:98c7520:              );
1:98c7520: 
1:98c7520:         //
1:98c7520:         // The DBO however is almighty.
1:98c7520:         //
1:98c7520:         assertResults
1:98c7520:             (
1:98c7520:              dboConnection,
1:98c7520:              "select * from ruth.t_ruth_01",
1:98c7520:              new String[][]
1:98c7520:              {
1:989beca:                  { "Price( USD, 1, XXX )" },
1:98c7520:              },
1:98c7520:              false
1:98c7520:              );
1:98c7520:         assertResults
1:98c7520:             (
1:98c7520:              dboConnection,
1:98c7520:              "values( ruth.makePrice_ruth_01() )\n",
1:98c7520:              new String[][]
1:98c7520:              {
1:989beca:                  { "Price( USD, 1, XXX )" },
1:98c7520:              },
1:98c7520:              false
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              dboConnection,
1:98c7520:              "create table t_dbo_01( a ruth.price_ruth_01_a )\n"
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              dboConnection,
1:98c7520:              "insert into t_dbo_01( a ) values ( ruth.makePrice_ruth_01() )\n"
1:98c7520:              );
1:98c7520:         assertResults
1:98c7520:             (
1:98c7520:              dboConnection,
1:98c7520:              "select * from t_dbo_01\n",
1:98c7520:              new String[][]
1:98c7520:              {
1:989beca:                  { "Price( USD, 1, XXX )" },
1:98c7520:              },
1:98c7520:              false
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              dboConnection,
1:98c7520:              "drop table t_dbo_01\n"
1:98c7520:              );
1:98c7520: 
1:98c7520:         //
1:98c7520:         // Now grant USAGE on the type. User Alice should now have all the
1:98c7520:         // privileges she needs.
1:98c7520:         //
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "grant usage on type price_ruth_01_a to public\n"
1:98c7520:              );
1:98c7520:         
1:98c7520:         assertResults
1:98c7520:             (
1:98c7520:              aliceConnection,
1:98c7520:              "select * from ruth.t_ruth_01",
1:98c7520:              new String[][]
1:98c7520:              {
1:989beca:                  { "Price( USD, 1, XXX )" },
1:98c7520:              },
1:98c7520:              false
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              aliceConnection,
1:98c7520:              "create table t_alice_01( a ruth.price_ruth_01_a )\n"
1:98c7520:              );
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              aliceConnection,
1:98c7520:              "insert into t_alice_01( a ) values ( ruth.makePrice_ruth_01() )\n"
1:98c7520:              );
1:98c7520:         assertResults
1:98c7520:             (
1:98c7520:              aliceConnection,
1:98c7520:              "select * from t_alice_01\n",
1:98c7520:              new String[][]
1:98c7520:              {
1:989beca:                  { "Price( USD, 1, XXX )" },
1:98c7520:              },
1:98c7520:              false
1:98c7520:              );
1:98c7520: 
1:98c7520:     }
1:98c7520:     
1:90f42b4:    /**
1:90f42b4:      * <p>
1:98c7520:      * Test that USAGE privilege can't be revoked if it would make objects
1:98c7520:      * unusable by their owners.
1:98c7520:      * </p>
1:98c7520:      */
1:98c7520:     public  void    test_002_basicRevoke()
1:98c7520:         throws Exception
1:98c7520:     {
1:98c7520:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:98c7520:         Connection  ruthConnection = openUserConnection( RUTH );
1:98c7520:         Connection  aliceConnection = openUserConnection( ALICE );
1:98c7520: 
1:98c7520:         goodStatement
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              "create type price_ruth_02_a external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n"
1:98c7520:              );
1:98c7520: 
1:98c7520:         // only RESTRICTed revocations allowed
1:98c7520:         expectCompilationError( ruthConnection, SYNTAX_ERROR, "revoke usage on type price_ruth_02_a from ruth\n" );
1:98c7520: 
1:98c7520:         // can't revoke USAGE from owner
1:98c7520:         expectCompilationError
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              GRANT_REVOKE_NOT_ALLOWED,
1:98c7520:              "revoke usage on type price_ruth_02_a from ruth restrict\n"
1:98c7520:              );
1:98c7520: 
1:98c7520:         String grantUsage = "grant usage on type price_ruth_02_a to alice\n";
1:98c7520:         String revokeUsage = "revoke usage on type price_ruth_02_a from alice restrict\n";
1:98c7520:         String createStatement;
1:98c7520:         String dropStatement;
1:98c7520:         String badRevokeSQLState;
1:98c7520:         
1:98c7520:         // can't revoke USAGE if a routine depends on it
1:98c7520:         createStatement =
1:98c7520:              "create function makePrice_alice_02( )\n" +
1:98c7520:              "returns ruth.price_ruth_02_a\n" +
1:98c7520:              "language java\n" +
1:98c7520:              "parameter style java\n" +
1:98c7520:              "no sql\n" +
1:98c7520:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:98c7520:             ;
1:98c7520:         dropStatement = "drop function makePrice_alice_02\n";
1:98c7520:         badRevokeSQLState = ROUTINE_DEPENDS_ON_TYPE;
1:98c7520:         verifyRevokePrivilege
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              aliceConnection,
1:98c7520:              grantUsage,
1:98c7520:              revokeUsage,
1:98c7520:              createStatement,
1:98c7520:              dropStatement,
1:98c7520:              badRevokeSQLState
1:98c7520:              );
1:21d74bf: 
1:98c7520:         // can't revoke USAGE if a table depends on it
1:98c7520:         createStatement = "create table t_alice_02( a ruth.price_ruth_02_a )\n";
1:98c7520:         dropStatement = "drop table t_alice_02\n";
1:98c7520:         badRevokeSQLState = TABLE_DEPENDS_ON_TYPE;
1:98c7520:         verifyRevokePrivilege
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              aliceConnection,
1:98c7520:              grantUsage,
1:98c7520:              revokeUsage,
1:98c7520:              createStatement,
1:98c7520:              dropStatement,
1:98c7520:              badRevokeSQLState
1:98c7520:              );
1:98c7520: 
1:98c7520:         // can't revoke USAGE if a view depends on it
1:98c7520:         createStatement = "create view v_alice_02( a ) as select cast (null as ruth.price_ruth_02_a ) from sys.systables\n";
1:98c7520:         dropStatement = "drop view v_alice_02\n";
1:2f4a1a0:         badRevokeSQLState = VIEW_DEPENDENCY;
1:98c7520:         verifyRevokePrivilege
1:98c7520:             (
1:98c7520:              ruthConnection,
1:98c7520:              aliceConnection,
1:98c7520:              grantUsage,
1:98c7520:              revokeUsage,
1:98c7520:              createStatement,
1:98c7520:              dropStatement,
1:98c7520:              badRevokeSQLState
1:98c7520:              );
1:98c7520: 
1:21d74bf:         // can't revoke USAGE if a trigger depends on it
1:21d74bf:         goodStatement( aliceConnection, "create table t_03_a( a int )\n" );
1:21d74bf:         goodStatement( aliceConnection, "create table t_03_b( a int )\n" );
1:21d74bf:         createStatement =
1:21d74bf:             "create trigger trig_03_a after insert on t_03_a\n" +
1:21d74bf:             "  insert into t_03_b( a ) select a from t_03_a where ( cast( null as ruth.price_ruth_02_a ) ) is not null\n";
1:21d74bf:         dropStatement = "drop trigger trig_03_a\n";
1:21d74bf:         badRevokeSQLState = OPERATION_FORBIDDEN;
1:21d74bf:         verifyRevokePrivilege
1:21d74bf:             (
1:21d74bf:              ruthConnection,
1:21d74bf:              aliceConnection,
1:21d74bf:              grantUsage,
1:21d74bf:              revokeUsage,
1:21d74bf:              createStatement,
1:21d74bf:              dropStatement,
1:21d74bf:              badRevokeSQLState
1:21d74bf:              );
1:98c7520:     }
1:98c7520:     
1:98c7520:   /**
1:98c7520:      * <p>
1:90f42b4:      * Test that you can't drop a schema if it contains a UDT or routine.
1:90f42b4:      * </p>
1:90f42b4:      */
1:90f42b4:     public  void    test_003_dropSchema()
1:90f42b4:         throws Exception
1:90f42b4:     {
1:90f42b4:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:90f42b4:         Connection  frankConnection = openUserConnection( FRANK );
1:90f42b4: 
1:90f42b4:         goodStatement
1:90f42b4:             ( frankConnection, "create function f_frank_03( a int ) returns int language java parameter style java no sql external name 'foo.bar.Wibble'\n" );
1:90f42b4:         expectExecutionError( dboConnection, NON_EMPTY_SCHEMA, "drop schema frank restrict\n" );
1:90f42b4: 
1:90f42b4:         goodStatement
1:90f42b4:             (frankConnection, "drop function f_frank_03\n" );
1:90f42b4:         goodStatement
1:90f42b4:             ( frankConnection, "create type price_frank_03_a external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n" );
1:90f42b4:         expectExecutionError( dboConnection, NON_EMPTY_SCHEMA, "drop schema frank restrict\n" );
1:90f42b4: 
1:90f42b4:         goodStatement
1:90f42b4:             ( frankConnection, "drop type price_frank_03_a restrict\n" );
1:90f42b4:         goodStatement
1:90f42b4:             ( dboConnection, "drop schema frank restrict\n" );
1:90f42b4:     }
1:90f42b4:     
1:98c7520: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = (BaseTestSuite)TestConfiguration.embeddedSuite(
1:             UDTPermsTest.class);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b93f9db
/////////////////////////////////////////////////////////////////////////
1:         // should work fine. no USAGE priv required.
1:         goodStatement
1:              ruthConnection,
1:         goodStatement
1:              ruthConnection,
1:         
commit:2f4a1a0
/////////////////////////////////////////////////////////////////////////
1:         badRevokeSQLState = VIEW_DEPENDENCY;
commit:90f42b4
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      FRANK = "FRANK";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH, FRANK  };
/////////////////////////////////////////////////////////////////////////
1:   /**
1:      * <p>
1:      * Test that you can't drop a schema if it contains a UDT or routine.
1:      * </p>
1:      */
1:     public  void    test_003_dropSchema()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  frankConnection = openUserConnection( FRANK );
1: 
1:         goodStatement
1:             ( frankConnection, "create function f_frank_03( a int ) returns int language java parameter style java no sql external name 'foo.bar.Wibble'\n" );
1:         expectExecutionError( dboConnection, NON_EMPTY_SCHEMA, "drop schema frank restrict\n" );
1: 
1:         goodStatement
1:             (frankConnection, "drop function f_frank_03\n" );
1:         goodStatement
1:             ( frankConnection, "create type price_frank_03_a external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n" );
1:         expectExecutionError( dboConnection, NON_EMPTY_SCHEMA, "drop schema frank restrict\n" );
1: 
1:         goodStatement
1:             ( frankConnection, "drop type price_frank_03_a restrict\n" );
1:         goodStatement
1:             ( dboConnection, "drop schema frank restrict\n" );
1:     }
1:     
commit:21d74bf
/////////////////////////////////////////////////////////////////////////
1: 
1:         // can't revoke USAGE if a trigger depends on it
1:         goodStatement( aliceConnection, "create table t_03_a( a int )\n" );
1:         goodStatement( aliceConnection, "create table t_03_b( a int )\n" );
1:         createStatement =
1:             "create trigger trig_03_a after insert on t_03_a\n" +
1:             "  insert into t_03_b( a ) select a from t_03_a where ( cast( null as ruth.price_ruth_02_a ) ) is not null\n";
1:         dropStatement = "drop trigger trig_03_a\n";
1:         badRevokeSQLState = OPERATION_FORBIDDEN;
1:         verifyRevokePrivilege
1:             (
1:              ruthConnection,
1:              aliceConnection,
1:              grantUsage,
1:              revokeUsage,
1:              createStatement,
1:              dropStatement,
1:              badRevokeSQLState
1:              );
commit:989beca
/////////////////////////////////////////////////////////////////////////
1:                  { "Price( USD, 1, XXX )" },
/////////////////////////////////////////////////////////////////////////
1:                  { "Price( USD, 1, XXX )" },
/////////////////////////////////////////////////////////////////////////
1:                  { "Price( USD, 1, XXX )" },
/////////////////////////////////////////////////////////////////////////
1:                  { "Price( USD, 1, XXX )" },
/////////////////////////////////////////////////////////////////////////
1:                  { "Price( USD, 1, XXX )" },
commit:98c7520
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UDTPermsTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.DriverManager;
0: import java.util.ArrayList;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.iapi.util.StringUtil;
0: import org.apache.derby.catalog.DefaultInfo;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
0: import org.apache.derby.catalog.types.RoutineAliasInfo;
1: 
1: /**
1:  * <p>
1:  * Test permissions on UDTs. See DERBY-651.
1:  * </p>
1:  */
1: public class UDTPermsTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      RUTH = "RUTH";
1:     private static  final   String      ALICE = "ALICE";
0:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, ALICE, RUTH  };
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public UDTPermsTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(UDTPermsTest.class);
1: 
1:         Test        cleanTest = new CleanDatabaseTestSetup( suite );
1:         Test        authenticatedTest = DatabasePropertyTestSetup.builtinAuthentication
1:             ( cleanTest, LEGAL_USERS, "udtPermissions" );
1:         Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
1: 
1:         return authorizedTest;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test that you need USAGE privilege on a type in order to select columns
1:      * of that type and in order to declare objects which mention that type.
1:      * </p>
1:      */
1:     public  void    test_001_basicGrant()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  ruthConnection = openUserConnection( RUTH );
1:         Connection  aliceConnection = openUserConnection( ALICE );
1: 
1:         //
1:         // Create a type, function, and table. make the function and table
1:         // public. Verify that they are still not generally usable because the
1:         // type is not public yet.
1:         //
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create type price_ruth_01_a external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create function makePrice_ruth_01( )\n" +
1:              "returns price_ruth_01_a\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create table t_ruth_01( a price_ruth_01_a )\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "insert into t_ruth_01( a ) values ( makePrice_ruth_01() )\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "grant select on t_ruth_01 to public\n"
1:              );
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "grant execute on function makePrice_ruth_01 to public\n"
1:              );
1: 
1:         expectExecutionError
1:             (
1:              aliceConnection,
1:              LACK_USAGE_PRIV,
1:              "select * from ruth.t_ruth_01\n"
1:              );
1:         expectExecutionError
1:             (
1:              aliceConnection,
1:              LACK_USAGE_PRIV,
1:              "values( ruth.makePrice_ruth_01() )\n"
1:              );
1:         expectExecutionError
1:             (
1:              aliceConnection,
1:              LACK_USAGE_PRIV,
1:              "create table t_alice_01( a ruth.price_ruth_01_a )\n"
1:              );
1:         expectExecutionError
1:             (
1:              aliceConnection,
1:              LACK_USAGE_PRIV,
1:              "create function makePrice_alice_01_a( )\n" +
1:              "returns ruth.price_ruth_01_a\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:              );
1:         expectExecutionError
1:             (
1:              aliceConnection,
1:              LACK_USAGE_PRIV,
1:              "create function makePrice_alice_01_b( a ruth.price_ruth_01_a )\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:              );
1: 
1:         //
1:         // The DBO however is almighty.
1:         //
1:         assertResults
1:             (
1:              dboConnection,
1:              "select * from ruth.t_ruth_01",
1:              new String[][]
1:              {
0:                  { "Price( USD, 1, 1969-12-31 16:00:00.0 )" },
1:              },
1:              false
1:              );
1:         assertResults
1:             (
1:              dboConnection,
1:              "values( ruth.makePrice_ruth_01() )\n",
1:              new String[][]
1:              {
0:                  { "Price( USD, 1, 1969-12-31 16:00:00.0 )" },
1:              },
1:              false
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create table t_dbo_01( a ruth.price_ruth_01_a )\n"
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "insert into t_dbo_01( a ) values ( ruth.makePrice_ruth_01() )\n"
1:              );
1:         assertResults
1:             (
1:              dboConnection,
1:              "select * from t_dbo_01\n",
1:              new String[][]
1:              {
0:                  { "Price( USD, 1, 1969-12-31 16:00:00.0 )" },
1:              },
1:              false
1:              );
1:         goodStatement
1:             (
1:              dboConnection,
1:              "drop table t_dbo_01\n"
1:              );
1: 
1:         //
1:         // Now grant USAGE on the type. User Alice should now have all the
1:         // privileges she needs.
1:         //
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "grant usage on type price_ruth_01_a to public\n"
1:              );
1:         
1:         assertResults
1:             (
1:              aliceConnection,
1:              "select * from ruth.t_ruth_01",
1:              new String[][]
1:              {
0:                  { "Price( USD, 1, 1969-12-31 16:00:00.0 )" },
1:              },
1:              false
1:              );
1:         goodStatement
1:             (
1:              aliceConnection,
1:              "create table t_alice_01( a ruth.price_ruth_01_a )\n"
1:              );
1:         goodStatement
1:             (
1:              aliceConnection,
1:              "insert into t_alice_01( a ) values ( ruth.makePrice_ruth_01() )\n"
1:              );
1:         assertResults
1:             (
1:              aliceConnection,
1:              "select * from t_alice_01\n",
1:              new String[][]
1:              {
0:                  { "Price( USD, 1, 1969-12-31 16:00:00.0 )" },
1:              },
1:              false
1:              );
1: 
1:     }
1:     
1:    /**
1:      * <p>
1:      * Test that USAGE privilege can't be revoked if it would make objects
1:      * unusable by their owners.
1:      * </p>
1:      */
1:     public  void    test_002_basicRevoke()
1:         throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  ruthConnection = openUserConnection( RUTH );
1:         Connection  aliceConnection = openUserConnection( ALICE );
1: 
1:         goodStatement
1:             (
1:              ruthConnection,
1:              "create type price_ruth_02_a external name 'org.apache.derbyTesting.functionTests.tests.lang.Price' language java\n"
1:              );
1: 
1:         // only RESTRICTed revocations allowed
1:         expectCompilationError( ruthConnection, SYNTAX_ERROR, "revoke usage on type price_ruth_02_a from ruth\n" );
1: 
1:         // can't revoke USAGE from owner
1:         expectCompilationError
1:             (
1:              ruthConnection,
1:              GRANT_REVOKE_NOT_ALLOWED,
1:              "revoke usage on type price_ruth_02_a from ruth restrict\n"
1:              );
1: 
1:         String grantUsage = "grant usage on type price_ruth_02_a to alice\n";
1:         String revokeUsage = "revoke usage on type price_ruth_02_a from alice restrict\n";
1:         String createStatement;
1:         String dropStatement;
1:         String badRevokeSQLState;
1:         
1:         // can't revoke USAGE if a routine depends on it
1:         createStatement =
1:              "create function makePrice_alice_02( )\n" +
1:              "returns ruth.price_ruth_02_a\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"
1:             ;
1:         dropStatement = "drop function makePrice_alice_02\n";
1:         badRevokeSQLState = ROUTINE_DEPENDS_ON_TYPE;
1:         verifyRevokePrivilege
1:             (
1:              ruthConnection,
1:              aliceConnection,
1:              grantUsage,
1:              revokeUsage,
1:              createStatement,
1:              dropStatement,
1:              badRevokeSQLState
1:              );
1: 
1:         // can't revoke USAGE if a table depends on it
1:         createStatement = "create table t_alice_02( a ruth.price_ruth_02_a )\n";
1:         dropStatement = "drop table t_alice_02\n";
1:         badRevokeSQLState = TABLE_DEPENDS_ON_TYPE;
1:         verifyRevokePrivilege
1:             (
1:              ruthConnection,
1:              aliceConnection,
1:              grantUsage,
1:              revokeUsage,
1:              createStatement,
1:              dropStatement,
1:              badRevokeSQLState
1:              );
1: 
1:         // can't revoke USAGE if a view depends on it
1:         createStatement = "create view v_alice_02( a ) as select cast (null as ruth.price_ruth_02_a ) from sys.systables\n";
1:         dropStatement = "drop view v_alice_02\n";
0:         badRevokeSQLState = VIEW_DEPENDS_ON_PRIVILEGE;
1:         verifyRevokePrivilege
1:             (
1:              ruthConnection,
1:              aliceConnection,
1:              grantUsage,
1:              revokeUsage,
1:              createStatement,
1:              dropStatement,
1:              badRevokeSQLState
1:              );
1:     }
1:     
1: }
============================================================================