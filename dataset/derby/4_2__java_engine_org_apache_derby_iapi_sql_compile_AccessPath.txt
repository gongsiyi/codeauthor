1:fe77ca5: /*
2:fe77ca5: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.compile.AccessPath
1:7ecc1f2: 
1:d4580ab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:d4580ab:    contributor license agreements.  See the NOTICE file distributed with
1:d4580ab:    this work for additional information regarding copyright ownership.
1:d4580ab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:d4580ab:    (the "License"); you may not use this file except in compliance with
1:d4580ab:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql.compile;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:fe77ca5: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:fe77ca5: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * AccessPath represents a proposed access path for an Optimizable.
1:fe77ca5:  * An Optimizable may have more than one proposed AccessPath.
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public interface AccessPath {
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set the conglomerate descriptor for this access path.
4:fe77ca5: 	 *
1:fe77ca5: 	 * @param cd	A ConglomerateDescriptor
1:fe77ca5: 	 */
1:fe77ca5: 	void setConglomerateDescriptor(ConglomerateDescriptor cd);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get whatever was last set as the conglomerate descriptor.
1:fe77ca5: 	 * Returns null if nothing was set since the last call to startOptimizing()
1:fe77ca5: 	 */
1:fe77ca5: 	ConglomerateDescriptor getConglomerateDescriptor();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set the given cost estimate in this AccessPath.  Generally, this will
1:fe77ca5: 	 * be the CostEstimate for the plan currently under consideration.
1:fe77ca5: 	 */
1:fe77ca5: 	public void setCostEstimate(CostEstimate costEstimate);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the cost estimate for this AccessPath.  This is the last one
1:fe77ca5: 	 * set by setCostEstimate.
1:fe77ca5: 	 */
1:fe77ca5: 	public CostEstimate getCostEstimate();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set whether or not to consider a covering index scan on the optimizable.
1:fe77ca5: 	 */
1:fe77ca5: 	public void setCoveringIndexScan(boolean coveringIndexScan);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return whether or not the optimizer is considering a covering index
1:fe77ca5: 	 * scan on this AccessPath. 
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return boolean		Whether or not the optimizer chose a covering
1:fe77ca5: 	 *						index scan.
1:fe77ca5: 	 */
1:fe77ca5: 	public boolean getCoveringIndexScan();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set whether or not to consider a non-matching index scan on this
1:fe77ca5: 	 * AccessPath. 
1:fe77ca5: 	 */
1:fe77ca5: 	public void setNonMatchingIndexScan(boolean nonMatchingIndexScan);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return whether or not the optimizer is considering a non-matching
1:fe77ca5: 	 * index scan on this AccessPath. We expect to call this during
1:fe77ca5: 	 * generation, after access path selection is complete.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return boolean		Whether or not the optimizer is considering
1:fe77ca5: 	 *						a non-matching index scan.
1:fe77ca5: 	 */
1:fe77ca5: 	public boolean getNonMatchingIndexScan();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Remember the given join strategy
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param joinStrategy	The best join strategy
1:fe77ca5: 	 */
1:fe77ca5: 	public void setJoinStrategy(JoinStrategy joinStrategy);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the join strategy, as set by setJoinStrategy().
1:fe77ca5: 	 */
1:fe77ca5: 	public JoinStrategy getJoinStrategy();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set the lock mode
1:fe77ca5: 	 */
1:fe77ca5: 	public void setLockMode(int lockMode);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the lock mode, as last set in setLockMode().
1:fe77ca5: 	 */
1:fe77ca5: 	public int getLockMode();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Copy all information from the given AccessPath to this one.
1:fe77ca5: 	 */
1:fe77ca5: 	public void copy(AccessPath copyFrom);
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the optimizer associated with this access path.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The optimizer associated with this access path.
1:fe77ca5: 	 */
1:fe77ca5: 	public Optimizer getOptimizer();
1:fe77ca5: 	
1:fe77ca5: 	/**
1:fe77ca5: 	 * Sets the "name" of the access path. if the access path represents an
1:fe77ca5: 	 * index then set the name to the name of the index. if it is an index
1:fe77ca5: 	 * created for a constraint, use the constraint name. This is called only
1:fe77ca5: 	 * for base tables.
1:fe77ca5: 	 * 
1:fe77ca5: 	 * @param 	td		TableDescriptor of the base table.
1:fe77ca5: 	 * @param 	dd		Datadictionary.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException 	on error.
1:fe77ca5: 	 */
1:fe77ca5: 	public void initializeAccessPathName(DataDictionary dd, TableDescriptor td)
1:fe77ca5: 		throws StandardException;
1:fe77ca5: }	
============================================================================
author:David Van Couvering
-------------------------------------------------------------------------------
commit:d4580ab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.compile.AccessPath
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * AccessPath represents a proposed access path for an Optimizable.
1:  * An Optimizable may have more than one proposed AccessPath.
1:  */
1: 
1: public interface AccessPath {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
1: 	 * Set the conglomerate descriptor for this access path.
1: 	 *
1: 	 * @param cd	A ConglomerateDescriptor
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	void setConglomerateDescriptor(ConglomerateDescriptor cd);
1: 
1: 	/**
1: 	 * Get whatever was last set as the conglomerate descriptor.
1: 	 * Returns null if nothing was set since the last call to startOptimizing()
1: 	 */
1: 	ConglomerateDescriptor getConglomerateDescriptor();
1: 
1: 	/**
1: 	 * Set the given cost estimate in this AccessPath.  Generally, this will
1: 	 * be the CostEstimate for the plan currently under consideration.
1: 	 */
1: 	public void setCostEstimate(CostEstimate costEstimate);
1: 
1: 	/**
1: 	 * Get the cost estimate for this AccessPath.  This is the last one
1: 	 * set by setCostEstimate.
1: 	 */
1: 	public CostEstimate getCostEstimate();
1: 
1: 	/**
1: 	 * Set whether or not to consider a covering index scan on the optimizable.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setCoveringIndexScan(boolean coveringIndexScan);
1: 
1: 	/**
1: 	 * Return whether or not the optimizer is considering a covering index
1: 	 * scan on this AccessPath. 
1: 	 *
1: 	 * @return boolean		Whether or not the optimizer chose a covering
1: 	 *						index scan.
1: 	 */
1: 	public boolean getCoveringIndexScan();
1: 
1: 	/**
1: 	 * Set whether or not to consider a non-matching index scan on this
1: 	 * AccessPath. 
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setNonMatchingIndexScan(boolean nonMatchingIndexScan);
1: 
1: 	/**
1: 	 * Return whether or not the optimizer is considering a non-matching
1: 	 * index scan on this AccessPath. We expect to call this during
1: 	 * generation, after access path selection is complete.
1: 	 *
1: 	 * @return boolean		Whether or not the optimizer is considering
1: 	 *						a non-matching index scan.
1: 	 */
1: 	public boolean getNonMatchingIndexScan();
1: 
1: 	/**
1: 	 * Remember the given join strategy
1: 	 *
1: 	 * @param joinStrategy	The best join strategy
1: 	 */
1: 	public void setJoinStrategy(JoinStrategy joinStrategy);
1: 
1: 	/**
1: 	 * Get the join strategy, as set by setJoinStrategy().
1: 	 */
1: 	public JoinStrategy getJoinStrategy();
1: 
1: 	/**
1: 	 * Set the lock mode
1: 	 */
1: 	public void setLockMode(int lockMode);
1: 
1: 	/**
1: 	 * Get the lock mode, as last set in setLockMode().
1: 	 */
1: 	public int getLockMode();
1: 
1: 	/**
1: 	 * Copy all information from the given AccessPath to this one.
1: 	 */
1: 	public void copy(AccessPath copyFrom);
1: 
1: 	/**
1: 	 * Get the optimizer associated with this access path.
1: 	 *
1: 	 * @return	The optimizer associated with this access path.
1: 	 */
1: 	public Optimizer getOptimizer();
1: 	
1: 	/**
1: 	 * Sets the "name" of the access path. if the access path represents an
1: 	 * index then set the name to the name of the index. if it is an index
1: 	 * created for a constraint, use the constraint name. This is called only
1: 	 * for base tables.
1: 	 * 
1: 	 * @param 	td		TableDescriptor of the base table.
1: 	 * @param 	dd		Datadictionary.
1: 	 *
1: 	 * @exception StandardException 	on error.
1: 	 */
1: 	public void initializeAccessPathName(DataDictionary dd, TableDescriptor td)
1: 		throws StandardException;
1: }	
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * AccessPath represents a proposed access path for an Optimizable.
0:  * An Optimizable may have more than one proposed AccessPath.
0:  */
0: 
0: public interface AccessPath {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 	 * Set the conglomerate descriptor for this access path.
0: 	 *
0: 	 * @param cd	A ConglomerateDescriptor
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	void setConglomerateDescriptor(ConglomerateDescriptor cd);
0: 
0: 	/**
0: 	 * Get whatever was last set as the conglomerate descriptor.
0: 	 * Returns null if nothing was set since the last call to startOptimizing()
0: 	 */
0: 	ConglomerateDescriptor getConglomerateDescriptor();
0: 
0: 	/**
0: 	 * Set the given cost estimate in this AccessPath.  Generally, this will
0: 	 * be the CostEstimate for the plan currently under consideration.
0: 	 */
0: 	public void setCostEstimate(CostEstimate costEstimate);
0: 
0: 	/**
0: 	 * Get the cost estimate for this AccessPath.  This is the last one
0: 	 * set by setCostEstimate.
0: 	 */
0: 	public CostEstimate getCostEstimate();
0: 
0: 	/**
0: 	 * Set whether or not to consider a covering index scan on the optimizable.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setCoveringIndexScan(boolean coveringIndexScan);
0: 
0: 	/**
0: 	 * Return whether or not the optimizer is considering a covering index
0: 	 * scan on this AccessPath. 
0: 	 *
0: 	 * @return boolean		Whether or not the optimizer chose a covering
0: 	 *						index scan.
0: 	 */
0: 	public boolean getCoveringIndexScan();
0: 
0: 	/**
0: 	 * Set whether or not to consider a non-matching index scan on this
0: 	 * AccessPath. 
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setNonMatchingIndexScan(boolean nonMatchingIndexScan);
0: 
0: 	/**
0: 	 * Return whether or not the optimizer is considering a non-matching
0: 	 * index scan on this AccessPath. We expect to call this during
0: 	 * generation, after access path selection is complete.
0: 	 *
0: 	 * @return boolean		Whether or not the optimizer is considering
0: 	 *						a non-matching index scan.
0: 	 */
0: 	public boolean getNonMatchingIndexScan();
0: 
0: 	/**
0: 	 * Remember the given join strategy
0: 	 *
0: 	 * @param joinStrategy	The best join strategy
0: 	 */
0: 	public void setJoinStrategy(JoinStrategy joinStrategy);
0: 
0: 	/**
0: 	 * Get the join strategy, as set by setJoinStrategy().
0: 	 */
0: 	public JoinStrategy getJoinStrategy();
0: 
0: 	/**
0: 	 * Set the lock mode
0: 	 */
0: 	public void setLockMode(int lockMode);
0: 
0: 	/**
0: 	 * Get the lock mode, as last set in setLockMode().
0: 	 */
0: 	public int getLockMode();
0: 
0: 	/**
0: 	 * Copy all information from the given AccessPath to this one.
0: 	 */
0: 	public void copy(AccessPath copyFrom);
0: 
0: 	/**
0: 	 * Get the optimizer associated with this access path.
0: 	 *
0: 	 * @return	The optimizer associated with this access path.
0: 	 */
0: 	public Optimizer getOptimizer();
0: 	
0: 	/**
0: 	 * Sets the "name" of the access path. if the access path represents an
0: 	 * index then set the name to the name of the index. if it is an index
0: 	 * created for a constraint, use the constraint name. This is called only
0: 	 * for base tables.
0: 	 * 
0: 	 * @param 	td		TableDescriptor of the base table.
0: 	 * @param 	dd		Datadictionary.
0: 	 *
0: 	 * @exception StandardException 	on error.
0: 	 */
0: 	public void initializeAccessPathName(DataDictionary dd, TableDescriptor td)
0: 		throws StandardException;
0: }	
============================================================================