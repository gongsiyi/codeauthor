1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.CardinalityCounter
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.RowLocationRetRowSource;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:af1c18c: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This is a decorator (in Design Patterns Terminology)
1:eac0369:  * class to enhance the functionality
1:eac0369:  * of a RowLocationRetRowSource. It assumes that the rows are coming
1:eac0369:  * in sorted order from the row source and it simply keeps track of
1:eac0369:  * the cardinality of all the leading columns.
1:eac0369:  */
1:eac0369: 
1:ca6ed17: class CardinalityCounter implements RowLocationRetRowSource
1:eac0369: {
1:eac0369: 	private RowLocationRetRowSource rowSource;
1:eac0369: 	private DataValueDescriptor[] prevKey;
1:eac0369: 	private long[] cardinality;
1:eac0369: 	private long numRows;
1:eac0369: 
1:eac0369: 	public CardinalityCounter(RowLocationRetRowSource rowSource)
1:eac0369: 	{
1:eac0369: 		this.rowSource = rowSource;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RowLocationRetRowSource#needsRowLocation */
1:eac0369: 	public boolean needsRowLocation() 
1:eac0369: 	{ 
1:eac0369: 		return rowSource.needsRowLocation();
1:eac0369: 	}
1:af1c18c: 
1:eac0369: 
1:af1c18c:     public boolean needsRowLocationForDeferredCheckConstraints()
1:af1c18c:     {
1:af1c18c:         return rowSource.needsRowLocationForDeferredCheckConstraints();
1:af1c18c:     }
1:af1c18c: 
1:af1c18c:     public void offendingRowLocation(
1:af1c18c:             RowLocation rl, long containdId) throws StandardException {
1:af1c18c:         rowSource.offendingRowLocation(rl, containdId);
1:af1c18c:     }
1:af1c18c: 
1:af1c18c: 
1:eac0369: 	/** @see RowLocationRetRowSource#rowLocation */
1:eac0369: 	public void rowLocation(RowLocation rl) throws StandardException
1:eac0369: 	{ 
1:eac0369: 		rowSource.rowLocation(rl);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * Gets next row from the row source and update the count of unique values
1:eac0369: 	 * that are returned.
1:eac0369: 	 * @see RowLocationRetRowSource#getNextRowFromRowSource 
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor[] getNextRowFromRowSource() throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor[] nextRow;
1:eac0369: 		nextRow = rowSource.getNextRowFromRowSource();
1:eac0369: 		if (nextRow != null)
1:eac0369: 			keepCount(nextRow);
1:eac0369: 		return nextRow;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/** @see RowLocationRetRowSource#needsToClone */
1:eac0369: 	public boolean needsToClone()
1:eac0369: 	{
1:eac0369: 		return rowSource.needsToClone();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RowLocationRetRowSource#getValidColumns */
1:eac0369: 	public FormatableBitSet getValidColumns()
1:eac0369: 	{
1:eac0369: 		return rowSource.getValidColumns();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RowLocationRetRowSource#closeRowSource */
1:eac0369: 	public void closeRowSource()
1:eac0369: 	{
1:eac0369: 		rowSource.closeRowSource();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	private DataValueDescriptor[] clone(DataValueDescriptor[] clonee)
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor[] cloned;
1:eac0369: 
1:eac0369: 		cloned = new DataValueDescriptor[clonee.length];
1:eac0369: 		for (int i = 0; i < clonee.length - 1; i++)
1:eac0369: 		{
1:854dd10: 			cloned[i] = clonee[i].cloneValue(false);
1:eac0369: 		}
1:eac0369: 		return cloned;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void keepCount(DataValueDescriptor[] currentKey) throws StandardException
1:eac0369: 	{
1:eac0369: 		int numKeys = currentKey.length - 1; // always row location.
1:eac0369: 		numRows++;
1:eac0369: 		if (prevKey == null)
1:eac0369: 		{
1:eac0369: 			prevKey = clone(currentKey);
1:eac0369: 			cardinality = new long[currentKey.length - 1];
1:eac0369: 			for (int i = 0; i < numKeys; i++)
1:eac0369: 				cardinality[i] = 1;
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		int i;
1:eac0369: 		for (i = 0; i < numKeys; i++)
1:eac0369: 		{
1:801cf0d:             if (prevKey[i].isNull()) {
1:eac0369: 				break;
1:801cf0d:             }
1:eac0369: 
1:eac0369: 			if ((prevKey[i]).compare(currentKey[i]) != 0)
1:eac0369: 			{
1:eac0369: 				// null out prevKey, so that the object gets 
1:eac0369: 				// garbage collected. is this too much object
1:eac0369: 				// creation? can we do setColumn or some such
1:eac0369: 				// in the object that already exists in prevKey?
1:eac0369: 				// xxxstatRESOLVE--
1:eac0369: 				prevKey = null; 
1:eac0369: 				prevKey = clone(currentKey);
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 		} // for
1:eac0369: 		
1:eac0369: 		for (int j = i; j < numKeys; j++)
1:eac0369: 			cardinality[j]++;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/** return the array of cardinalities that are kept internally. One value
1:eac0369: 	 * for each leading key; i.e c1, (c1,c2), (c1,c2,c3) etc.
1:eac0369: 	 * @return 	an array of unique values.
1:eac0369: 	 */
1:eac0369: 	public long[] getCardinality() { return cardinality; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * get the number of rows seen in the row source thus far.
1:eac0369: 	 * @return total rows seen from the row source.
1:eac0369: 	 */
1:eac0369: 	public long getRowCount() { return numRows; }
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean needsRowLocationForDeferredCheckConstraints()
1:     {
1:         return rowSource.needsRowLocationForDeferredCheckConstraints();
1:     }
1: 
1:     public void offendingRowLocation(
1:             RowLocation rl, long containdId) throws StandardException {
1:         rowSource.offendingRowLocation(rl, containdId);
1:     }
1: 
1: 
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1:             if (prevKey[i].isNull()) {
1:             }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ca6ed17
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: class CardinalityCounter implements RowLocationRetRowSource
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9495437
/////////////////////////////////////////////////////////////////////////
commit:92268ac
/////////////////////////////////////////////////////////////////////////
0:         throws StandardException
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: 			cloned[i] = clonee[i].cloneValue(false);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.CardinalityCounter
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
0: import org.apache.derby.iapi.services.io.Storable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.RowLocationRetRowSource;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
1: /**
1:  * This is a decorator (in Design Patterns Terminology)
1:  * class to enhance the functionality
1:  * of a RowLocationRetRowSource. It assumes that the rows are coming
1:  * in sorted order from the row source and it simply keeps track of
1:  * the cardinality of all the leading columns.
1:  */
1: 
0: public class CardinalityCounter implements RowLocationRetRowSource
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	private RowLocationRetRowSource rowSource;
1: 	private DataValueDescriptor[] prevKey;
1: 	private long[] cardinality;
1: 	private long numRows;
1: 
1: 	public CardinalityCounter(RowLocationRetRowSource rowSource)
1: 	{
1: 		this.rowSource = rowSource;
1: 	}
1: 
1: 	/** @see RowLocationRetRowSource#needsRowLocation */
1: 	public boolean needsRowLocation() 
1: 	{ 
1: 		return rowSource.needsRowLocation();
1: 	}
1: 
1: 	/** @see RowLocationRetRowSource#rowLocation */
1: 	public void rowLocation(RowLocation rl) throws StandardException
1: 	{ 
1: 		rowSource.rowLocation(rl);
1: 	}
1: 
1: 	/** 
1: 	 * Gets next row from the row source and update the count of unique values
1: 	 * that are returned.
1: 	 * @see RowLocationRetRowSource#getNextRowFromRowSource 
1: 	 */
1: 	public DataValueDescriptor[] getNextRowFromRowSource() throws StandardException
1: 	{
1: 		DataValueDescriptor[] nextRow;
1: 		nextRow = rowSource.getNextRowFromRowSource();
1: 		if (nextRow != null)
1: 			keepCount(nextRow);
1: 		return nextRow;
1: 	}
1: 
1: 
1: 	/** @see RowLocationRetRowSource#needsToClone */
1: 	public boolean needsToClone()
1: 	{
1: 		return rowSource.needsToClone();
1: 	}
1: 
1: 	/** @see RowLocationRetRowSource#getValidColumns */
1: 	public FormatableBitSet getValidColumns()
1: 	{
1: 		return rowSource.getValidColumns();
1: 	}
1: 
1: 	/** @see RowLocationRetRowSource#closeRowSource */
1: 	public void closeRowSource()
1: 	{
1: 		rowSource.closeRowSource();
1: 	}
1: 	
1: 	private DataValueDescriptor[] clone(DataValueDescriptor[] clonee)
1: 	{
1: 		DataValueDescriptor[] cloned;
1: 
1: 		cloned = new DataValueDescriptor[clonee.length];
1: 		for (int i = 0; i < clonee.length - 1; i++)
1: 		{
0: 			cloned[i] = ((DataValueDescriptor)clonee[i]).getClone();
1: 		}
1: 		return cloned;
1: 	}
1: 
1: 	public void keepCount(DataValueDescriptor[] currentKey) throws StandardException
1: 	{
1: 		int numKeys = currentKey.length - 1; // always row location.
1: 		numRows++;
1: 		if (prevKey == null)
1: 		{
1: 			prevKey = clone(currentKey);
1: 			cardinality = new long[currentKey.length - 1];
1: 			for (int i = 0; i < numKeys; i++)
1: 				cardinality[i] = 1;
1: 			return;
1: 		}
1: 		
1: 		int i;
1: 		for (i = 0; i < numKeys; i++)
1: 		{
0: 			if (((DataValueDescriptor)prevKey[i]).isNull())
1: 				break;
1: 
1: 			if ((prevKey[i]).compare(currentKey[i]) != 0)
1: 			{
1: 				// null out prevKey, so that the object gets 
1: 				// garbage collected. is this too much object
1: 				// creation? can we do setColumn or some such
1: 				// in the object that already exists in prevKey?
1: 				// xxxstatRESOLVE--
1: 				prevKey = null; 
1: 				prevKey = clone(currentKey);
1: 				break;
1: 			}
1: 		} // for
1: 		
1: 		for (int j = i; j < numKeys; j++)
1: 			cardinality[j]++;
1: 	}
1: 	
1: 	/** return the array of cardinalities that are kept internally. One value
1: 	 * for each leading key; i.e c1, (c1,c2), (c1,c2,c3) etc.
1: 	 * @return 	an array of unique values.
1: 	 */
1: 	public long[] getCardinality() { return cardinality; }
1: 
1: 	/**
1: 	 * get the number of rows seen in the row source thus far.
1: 	 * @return total rows seen from the row source.
1: 	 */
1: 	public long getRowCount() { return numRows; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import org.apache.derby.iapi.services.io.Storable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.RowLocationRetRowSource;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: /**
0:  * This is a decorator (in Design Patterns Terminology)
0:  * class to enhance the functionality
0:  * of a RowLocationRetRowSource. It assumes that the rows are coming
0:  * in sorted order from the row source and it simply keeps track of
0:  * the cardinality of all the leading columns.
0:  */
0: 
0: public class CardinalityCounter implements RowLocationRetRowSource
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	private RowLocationRetRowSource rowSource;
0: 	private DataValueDescriptor[] prevKey;
0: 	private long[] cardinality;
0: 	private long numRows;
0: 
0: 	public CardinalityCounter(RowLocationRetRowSource rowSource)
0: 	{
0: 		this.rowSource = rowSource;
0: 	}
0: 
0: 	/** @see RowLocationRetRowSource#needsRowLocation */
0: 	public boolean needsRowLocation() 
0: 	{ 
0: 		return rowSource.needsRowLocation();
0: 	}
0: 
0: 	/** @see RowLocationRetRowSource#rowLocation */
0: 	public void rowLocation(RowLocation rl) throws StandardException
0: 	{ 
0: 		rowSource.rowLocation(rl);
0: 	}
0: 
0: 	/** 
0: 	 * Gets next row from the row source and update the count of unique values
0: 	 * that are returned.
0: 	 * @see RowLocationRetRowSource#getNextRowFromRowSource 
0: 	 */
0: 	public DataValueDescriptor[] getNextRowFromRowSource() throws StandardException
0: 	{
0: 		DataValueDescriptor[] nextRow;
0: 		nextRow = rowSource.getNextRowFromRowSource();
0: 		if (nextRow != null)
0: 			keepCount(nextRow);
0: 		return nextRow;
0: 	}
0: 
0: 
0: 	/** @see RowLocationRetRowSource#needsToClone */
0: 	public boolean needsToClone()
0: 	{
0: 		return rowSource.needsToClone();
0: 	}
0: 
0: 	/** @see RowLocationRetRowSource#getValidColumns */
0: 	public FormatableBitSet getValidColumns()
0: 	{
0: 		return rowSource.getValidColumns();
0: 	}
0: 
0: 	/** @see RowLocationRetRowSource#closeRowSource */
0: 	public void closeRowSource()
0: 	{
0: 		rowSource.closeRowSource();
0: 	}
0: 	
0: 	private DataValueDescriptor[] clone(DataValueDescriptor[] clonee)
0: 	{
0: 		DataValueDescriptor[] cloned;
0: 
0: 		cloned = new DataValueDescriptor[clonee.length];
0: 		for (int i = 0; i < clonee.length - 1; i++)
0: 		{
0: 			cloned[i] = ((DataValueDescriptor)clonee[i]).getClone();
0: 		}
0: 		return cloned;
0: 	}
0: 
0: 	public void keepCount(DataValueDescriptor[] currentKey) throws StandardException
0: 	{
0: 		int numKeys = currentKey.length - 1; // always row location.
0: 		numRows++;
0: 		if (prevKey == null)
0: 		{
0: 			prevKey = clone(currentKey);
0: 			cardinality = new long[currentKey.length - 1];
0: 			for (int i = 0; i < numKeys; i++)
0: 				cardinality[i] = 1;
0: 			return;
0: 		}
0: 		
0: 		int i;
0: 		for (i = 0; i < numKeys; i++)
0: 		{
0: 			if (((DataValueDescriptor)prevKey[i]).isNull())
0: 				break;
0: 
0: 			if ((prevKey[i]).compare(currentKey[i]) != 0)
0: 			{
0: 				// null out prevKey, so that the object gets 
0: 				// garbage collected. is this too much object
0: 				// creation? can we do setColumn or some such
0: 				// in the object that already exists in prevKey?
0: 				// xxxstatRESOLVE--
0: 				prevKey = null; 
0: 				prevKey = clone(currentKey);
0: 				break;
0: 			}
0: 		} // for
0: 		
0: 		for (int j = i; j < numKeys; j++)
0: 			cardinality[j]++;
0: 	}
0: 	
0: 	/** return the array of cardinalities that are kept internally. One value
0: 	 * for each leading key; i.e c1, (c1,c2), (c1,c2,c3) etc.
0: 	 * @return 	an array of unique values.
0: 	 */
0: 	public long[] getCardinality() { return cardinality; }
0: 
0: 	/**
0: 	 * get the number of rows seen in the row source thus far.
0: 	 * @return total rows seen from the row source.
0: 	 */
0: 	public long getRowCount() { return numRows; }
0: }
============================================================================