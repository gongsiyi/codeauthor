1:0eb5627: /*
1:0eb5627:  *
1:0eb5627:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest
1:0eb5627:  *
1:0eb5627:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0eb5627:  * contributor license agreements.  See the NOTICE file distributed with
1:0eb5627:  * this work for additional information regarding copyright ownership.
1:0eb5627:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0eb5627:  * (the "License"); you may not use this file except in compliance with
1:0eb5627:  * the License.  You may obtain a copy of the License at
1:0eb5627:  *
1:0eb5627:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0eb5627:  *
1:0eb5627:  * Unless required by applicable law or agreed to in writing, 
1:0eb5627:  * software distributed under the License is distributed on an 
1:0eb5627:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:0eb5627:  * either express or implied. See the License for the specific 
1:0eb5627:  * language governing permissions and limitations under the License.
1:0eb5627:  */
4:0eb5627: 
1:0eb5627: package org.apache.derbyTesting.functionTests.tests.store;
1:0eb5627: 
1:0eb5627: import java.sql.CallableStatement;
1:0eb5627: import java.sql.PreparedStatement;
1:0eb5627: import java.sql.SQLException;
1:0eb5627: import java.sql.Statement;
1:0eb5627: import junit.framework.Test;
1:0eb5627: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:0eb5627: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0eb5627: import org.apache.derbyTesting.junit.TestConfiguration;
1:0eb5627: 
1:0eb5627: public class OCRecoveryTest extends BaseJDBCTestCase {
1:0eb5627: 
1:0eb5627:     private static final String tableName = "RECTEST1";
1:0eb5627:     
1:0eb5627:     public OCRecoveryTest(String name) {
1:0eb5627:         super(name);
1:0eb5627:     }
1:0eb5627: 
1:0eb5627:     public static Test suite()
1:0eb5627:     {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("OCRecoveryTest");
1:0eb5627:         //DERBY-4647 exec does not work on weme
1:0eb5627:         if (BaseTestCase.isJ9Platform())
1:0eb5627:             return suite;
1:0eb5627:         suite.addTest(decorateTest());
1:0eb5627:         return suite;
1:0eb5627:     }
1:0eb5627: 
1:0eb5627:     private static Test decorateTest()
1:0eb5627:     {
1:0eb5627:         Test test = TestConfiguration.embeddedSuite(
1:0eb5627:                         OCRecoveryTest.class);
1:4ee7918:         // using a singleUseDatabaseDecorator which should not create
1:4ee7918:         // the database until the first connection is made
1:4ee7918:         return TestConfiguration.singleUseDatabaseDecorator(test,
1:4ee7918:             "OCRecoveryDB");
1:0eb5627:     }
1:0eb5627: 
1:e06ed55:     public void testOCRecovery() throws Exception
1:0eb5627:     {
1:4ee7918:         
1:e06ed55:         // Now call forked processes - each of these will do something,
1:e06ed55:         // then *not* shutdown, forcing the next one to recover the
1:e06ed55:         // database.
1:4ee7918:         // Pass in the name of the database to be used.
1:e06ed55:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
1:4ee7918:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_1",
1:4ee7918:                 "OCRecoveryDB");
1:0eb5627:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
1:4ee7918:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_2",
1:4ee7918:                 "OCRecoveryDB");
1:0eb5627:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
1:4ee7918:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_3",
1:4ee7918:                 "OCRecoveryDB");
1:0eb5627:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
1:4ee7918:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_4",
1:4ee7918:                 "OCRecoveryDB");
1:0eb5627:     }
1:0eb5627: 
1:e06ed55:     public void launchOCRecovery_1() throws Exception
1:e06ed55:     {
1:e06ed55:         // setup to test restart recovery of online compress.  Real work
1:e06ed55:         // is done in next method launchOCRecovery_2 which will run restart
1:e06ed55:         // recovery on the work done in this step.
1:4ee7918:         // open a connection to the database, this should create the db
1:4ee7918:         getConnection();
1:4ee7918:         setAutoCommit(false);        
1:e06ed55:         createAndLoadTable(tableName, true, 5000, 0);
1:e06ed55:         Statement st = createStatement();
1:e06ed55:         st.executeUpdate("DELETE FROM " + tableName);
1:e06ed55:         commit();
1:e06ed55:         callCompress(tableName, true, true, true, true);
1:e06ed55:         st.close();        
1:e06ed55:     }
1:e06ed55: 
1:0eb5627:     public void launchOCRecovery_2() throws Exception
1:0eb5627:     {
2:0eb5627:         setAutoCommit(false);
1:0eb5627:         assertCheckTable(tableName);
1:e06ed55:         // make sure we can add data to the existing table after redo
1:e06ed55:         // recovery.
1:0eb5627:         createAndLoadTable(tableName, false, 6000, 0);
1:0eb5627:         assertCheckTable(tableName);
1:0eb5627:         String table_name =  tableName + "_2";
1:e06ed55:         // setup to test redo recovery on: 
1:e06ed55:         //      create table, delete rows, compress, commit
1:0eb5627:         createAndLoadTable(table_name, true, 2000, 0);
2:0eb5627:         Statement st = createStatement();
2:0eb5627:         st.executeUpdate("DELETE FROM " + tableName);
2:0eb5627:         commit();
2:0eb5627:         callCompress(tableName, true, true, true, true);
1:0eb5627: 
2:0eb5627:         st.close();
1:0eb5627:     }
1:0eb5627: 
1:0eb5627:     public void launchOCRecovery_3() throws SQLException
1:0eb5627:     {
1:0eb5627:         setAutoCommit(false);
1:0eb5627:         String table_name =  tableName + "_2";
1:0eb5627:         assertCheckTable(table_name);
1:0eb5627:         // make sure we can add data to the existing table after redo
1:0eb5627:         // recovery.
1:0eb5627:         createAndLoadTable(tableName, false, 2000, 0);
1:0eb5627:         assertCheckTable(tableName);
1:0eb5627: 
1:0eb5627:         // setup to test redo recovery on: 
1:e06ed55:         //      add more rows, delete rows, commit, compress, no commit
1:0eb5627:         createAndLoadTable(table_name, false, 4000, 2000);
1:0eb5627:         Statement st = createStatement();
1:0eb5627:         st.executeUpdate("DELETE FROM " + table_name);
1:0eb5627:         commit();
1:0eb5627:         callCompress(table_name, true, true, true, false);
1:0eb5627:         st.close();
1:0eb5627:     }
1:0eb5627:     
1:0eb5627:     public void launchOCRecovery_4() throws SQLException
1:0eb5627:     {
1:e06ed55:         // oc_rec3 left the table  with no rows, but compress command
1:e06ed55:         // did not commit.
1:0eb5627:         setAutoCommit(false);
1:0eb5627:         String table_name =  tableName + "_2";
1:0eb5627:         assertCheckTable(table_name);
1:e06ed55:         // make sure we can add data to the existing table after redo
1:e06ed55:         // recovery.
1:0eb5627:         createAndLoadTable(table_name, false, 6000, 0);
1:0eb5627:         assertCheckTable(table_name);
1:0eb5627:     }
1:0eb5627:     
1:0eb5627:     /**
1:0eb5627:      * Create and load a table.
1:0eb5627:      * <p>
1:0eb5627:      * If create_table is set creates a test data table with indexes.
1:0eb5627:      * Loads num_rows into the table.  This table defaults to 32k page size.
1:0eb5627:      * This schema fits 25 rows per page
1:0eb5627:      * <p>
1:0eb5627:      *
1:0eb5627:      * @param create_table  If true, create new table - otherwise load into
1:0eb5627:      *                      existing table.
1:0eb5627:      * @param tblname       table to use.
1:0eb5627:      * @param num_rows      number of rows to add to the table.
1:0eb5627:      *
1:0eb5627:      * @exception  SQLException  Standard exception policy.
1:0eb5627:      **/
1:0eb5627:     private void createAndLoadTable(
1:0eb5627:     String      tblname,
1:0eb5627:     boolean     create_table,
1:0eb5627:     int         num_rows,
1:0eb5627:     int         start_value)
1:0eb5627:         throws SQLException
1:0eb5627:     {
1:0eb5627:         if (create_table)
1:0eb5627:         {
1:0eb5627:             Statement s = createStatement();
1:0eb5627: 
1:0eb5627:             s.execute(
1:0eb5627:                 "CREATE TABLE " + tblname + 
1:0eb5627:                     "(keycol int, indcol1 int, indcol2 int, indcol3 int, " +
1:0eb5627:                     "data1 varchar(2000), data2 varchar(2000))");
1:0eb5627:             s.close();
1:0eb5627:             println("table created: " + tblname);
1:0eb5627:         }
1:0eb5627: 
1:0eb5627:         PreparedStatement insert_stmt = 
1:0eb5627:                 prepareStatement(
1:0eb5627:                     "INSERT INTO " + tblname + " VALUES(?, ?, ?, ?, ?, ?)");
1:0eb5627: 
1:0eb5627:         char[]  data1_data = new char[500];
1:0eb5627:         char[]  data2_data = new char[500];
1:0eb5627: 
1:0eb5627:         for (int i = 0; i < data1_data.length; i++)
1:0eb5627:         {
1:0eb5627:             data1_data[i] = 'a';
1:0eb5627:             data2_data[i] = 'b';
1:0eb5627:         }
1:0eb5627: 
1:0eb5627:         String  data1_str = new String(data1_data);
1:0eb5627:         String  data2_str = new String(data2_data);
1:0eb5627: 
1:0eb5627:         int row_count = 0;
1:0eb5627:             for (int i = start_value; row_count < num_rows; row_count++, i++)
1:0eb5627:             {
1:0eb5627:                 insert_stmt.setInt(1, i);               // keycol
1:0eb5627:                 insert_stmt.setInt(2, i * 10);          // indcol1
1:0eb5627:                 insert_stmt.setInt(3, i * 100);         // indcol2
1:0eb5627:                 insert_stmt.setInt(4, -i);              // indcol3
1:0eb5627:                 insert_stmt.setString(5, data1_str);    // data1_data
1:0eb5627:                 insert_stmt.setString(6, data2_str);    // data2_data
1:0eb5627: 
1:0eb5627:                 insert_stmt.execute();
1:0eb5627:             }
1:0eb5627: 
1:0eb5627:         if (create_table)
1:0eb5627:         {
1:0eb5627:             Statement s = createStatement();
1:0eb5627: 
1:0eb5627:             s.execute(
1:0eb5627:                 "create index " + tblname + "_idx_keycol on " + tblname +
1:0eb5627:                     "(keycol)");
1:0eb5627:             s.execute(
1:0eb5627:                 "create index " + tblname + "_idx_indcol1 on " + tblname +
1:0eb5627:                     "(indcol1)");
1:0eb5627:             s.execute(
1:0eb5627:                 "create index " + tblname + "_idx_indcol2 on " + tblname +
1:0eb5627:                     "(indcol2)");
1:0eb5627:             s.execute(
1:0eb5627:                 "create unique index " + tblname + "_idx_indcol3 on " + 
1:0eb5627:                     tblname + "(indcol3)");
1:0eb5627:             s.close();
1:0eb5627:         }
1:0eb5627:         commit();
1:0eb5627:     }
1:0eb5627:     
1:0eb5627:     /**
1:0eb5627:      * call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE() system procedure.
1:0eb5627:      **/
1:0eb5627:     private void callCompress(
1:0eb5627:     String      tableName,
1:0eb5627:     boolean     purgeRows,
1:0eb5627:     boolean     defragmentRows,
1:0eb5627:     boolean     truncateEnd,
1:0eb5627:     boolean     commit_operation)
1:0eb5627:         throws SQLException
1:0eb5627:     {
1:0eb5627:         CallableStatement cstmt = 
1:0eb5627:                 prepareCall(
1:0eb5627:                 "call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, ?, ?, ?)");
1:0eb5627:         cstmt.setString(1, getTestConfiguration().getUserName());
1:0eb5627:         cstmt.setString(2, tableName);
1:0eb5627:         cstmt.setInt   (3, purgeRows      ? 1 : 0);
1:0eb5627:         cstmt.setInt   (4, defragmentRows ? 1 : 0);
1:0eb5627:         cstmt.setInt   (5, truncateEnd    ? 1 : 0);
1:0eb5627:         cstmt.execute();
1:0eb5627:         if (commit_operation) {
1:0eb5627:             commit();
1:0eb5627:         }
1:0eb5627:     }
1:0eb5627: 
1:0eb5627: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("OCRecoveryTest");
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:4ee7918
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // using a singleUseDatabaseDecorator which should not create
1:         // the database until the first connection is made
1:         return TestConfiguration.singleUseDatabaseDecorator(test,
1:             "OCRecoveryDB");
1:         
1:         // Pass in the name of the database to be used.
1:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_1",
1:                 "OCRecoveryDB");
1:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_2",
1:                 "OCRecoveryDB");
1:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_3",
1:                 "OCRecoveryDB");
1:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_4",
1:                 "OCRecoveryDB");
/////////////////////////////////////////////////////////////////////////
1:         // open a connection to the database, this should create the db
1:         getConnection();
1:         setAutoCommit(false);        
commit:e06ed55
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testOCRecovery() throws Exception
1:         // Now call forked processes - each of these will do something,
1:         // then *not* shutdown, forcing the next one to recover the
1:         // database.
1:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
0:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_1");
/////////////////////////////////////////////////////////////////////////
1:     public void launchOCRecovery_1() throws Exception
1:     {
1:         // setup to test restart recovery of online compress.  Real work
1:         // is done in next method launchOCRecovery_2 which will run restart
1:         // recovery on the work done in this step.
1:         createAndLoadTable(tableName, true, 5000, 0);
1:         Statement st = createStatement();
1:         st.executeUpdate("DELETE FROM " + tableName);
1:         commit();
1:         callCompress(tableName, true, true, true, true);
1:         st.close();        
1:     }
1: 
1:         // make sure we can add data to the existing table after redo
1:         // recovery.
1:         // setup to test redo recovery on: 
1:         //      create table, delete rows, compress, commit
/////////////////////////////////////////////////////////////////////////
1:         //      add more rows, delete rows, commit, compress, no commit
1:         // oc_rec3 left the table  with no rows, but compress command
1:         // did not commit.
1:         // make sure we can add data to the existing table after redo
1:         // recovery.
commit:0eb5627
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.CallableStatement;
0: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class OCRecoveryTest extends BaseJDBCTestCase {
1: 
1:     private static final String tableName = "RECTEST1";
1:     
1:     public OCRecoveryTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("OCRecoveryTest");
1:         //DERBY-4647 exec does not work on weme
1:         if (BaseTestCase.isJ9Platform())
1:             return suite;
1:         suite.addTest(decorateTest());
1:         return suite;
1:     }
1: 
1:     private static Test decorateTest()
1:     {
1:         Test test = TestConfiguration.embeddedSuite(
1:                         OCRecoveryTest.class);
0:         return new CleanDatabaseTestSetup(test);
1:     }
1: 
0:     public void testOCRecovery_1() throws Exception
1:     {
1:         setAutoCommit(false);
1:         Statement st = createStatement();
1: 
0:         createAndLoadTable(tableName, true, 5000, 0);
1:         st.executeUpdate("DELETE FROM " + tableName);
1:         commit();
1:         callCompress(tableName, true, true, true, true);
0:         TestConfiguration.getCurrent().shutdownDatabase();
1:         st.close();
1:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
0:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_2");
1:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
0:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_3");
1:         assertLaunchedJUnitTestMethod("org.apache.derbyTesting." +
0:                 "functionTests.tests.store.OCRecoveryTest.launchOCRecovery_4");
1:     }
1: 
1:     public void launchOCRecovery_2() throws Exception
1:     {
1:         setAutoCommit(false);
1:         assertCheckTable(tableName);
1:         createAndLoadTable(tableName, false, 6000, 0);
1:         assertCheckTable(tableName);
1:         String table_name =  tableName + "_2";
1:         createAndLoadTable(table_name, true, 2000, 0);
1:         Statement st = createStatement();
1:         st.executeUpdate("DELETE FROM " + tableName);
1:         commit();
1:         callCompress(tableName, true, true, true, true);
0:         TestConfiguration.getCurrent().shutdownDatabase();
1: 
1:         st.close();
1:     }
1: 
1:     public void launchOCRecovery_3() throws SQLException
1:     {
1:         setAutoCommit(false);
1:         String table_name =  tableName + "_2";
1:         assertCheckTable(table_name);
1:         // make sure we can add data to the existing table after redo
1:         // recovery.
1:         createAndLoadTable(tableName, false, 2000, 0);
1:         assertCheckTable(tableName);
1: 
1:         // setup to test redo recovery on: 
0:         // add more rows, delete rows, compress, add more, no commit
1:         createAndLoadTable(table_name, false, 4000, 2000);
1:         Statement st = createStatement();
1:         st.executeUpdate("DELETE FROM " + table_name);
1:         commit();
1:         callCompress(table_name, true, true, true, false);
0:         TestConfiguration.getCurrent().shutdownDatabase();
1:         st.close();
1:     }
1:     
1:     public void launchOCRecovery_4() throws SQLException
1:     {
1:         setAutoCommit(false);
1:         String table_name =  tableName + "_2";
1:         assertCheckTable(table_name);
1:         createAndLoadTable(table_name, false, 6000, 0);
1:         assertCheckTable(table_name);
0:         TestConfiguration.getCurrent().shutdownDatabase();
1:     }
1:     
1:     /**
1:      * Create and load a table.
1:      * <p>
1:      * If create_table is set creates a test data table with indexes.
1:      * Loads num_rows into the table.  This table defaults to 32k page size.
1:      * This schema fits 25 rows per page
1:      * <p>
1:      *
1:      * @param create_table  If true, create new table - otherwise load into
1:      *                      existing table.
1:      * @param tblname       table to use.
1:      * @param num_rows      number of rows to add to the table.
1:      *
1:      * @exception  SQLException  Standard exception policy.
1:      **/
1:     private void createAndLoadTable(
1:     String      tblname,
1:     boolean     create_table,
1:     int         num_rows,
1:     int         start_value)
1:         throws SQLException
1:     {
1:         if (create_table)
1:         {
1:             Statement s = createStatement();
1: 
1:             s.execute(
1:                 "CREATE TABLE " + tblname + 
1:                     "(keycol int, indcol1 int, indcol2 int, indcol3 int, " +
1:                     "data1 varchar(2000), data2 varchar(2000))");
1:             s.close();
1:             println("table created: " + tblname);
1:         }
1: 
1:         PreparedStatement insert_stmt = 
1:                 prepareStatement(
1:                     "INSERT INTO " + tblname + " VALUES(?, ?, ?, ?, ?, ?)");
1: 
1:         char[]  data1_data = new char[500];
1:         char[]  data2_data = new char[500];
1: 
1:         for (int i = 0; i < data1_data.length; i++)
1:         {
1:             data1_data[i] = 'a';
1:             data2_data[i] = 'b';
1:         }
1: 
1:         String  data1_str = new String(data1_data);
1:         String  data2_str = new String(data2_data);
1: 
1:         int row_count = 0;
1:             for (int i = start_value; row_count < num_rows; row_count++, i++)
1:             {
1:                 insert_stmt.setInt(1, i);               // keycol
1:                 insert_stmt.setInt(2, i * 10);          // indcol1
1:                 insert_stmt.setInt(3, i * 100);         // indcol2
1:                 insert_stmt.setInt(4, -i);              // indcol3
1:                 insert_stmt.setString(5, data1_str);    // data1_data
1:                 insert_stmt.setString(6, data2_str);    // data2_data
1: 
1:                 insert_stmt.execute();
1:             }
1: 
1:         if (create_table)
1:         {
1:             Statement s = createStatement();
1: 
1:             s.execute(
1:                 "create index " + tblname + "_idx_keycol on " + tblname +
1:                     "(keycol)");
1:             s.execute(
1:                 "create index " + tblname + "_idx_indcol1 on " + tblname +
1:                     "(indcol1)");
1:             s.execute(
1:                 "create index " + tblname + "_idx_indcol2 on " + tblname +
1:                     "(indcol2)");
1:             s.execute(
1:                 "create unique index " + tblname + "_idx_indcol3 on " + 
1:                     tblname + "(indcol3)");
1:             s.close();
1:         }
1:         commit();
1:     }
1:     
1:     /**
1:      * call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE() system procedure.
1:      **/
1:     private void callCompress(
1:     String      tableName,
1:     boolean     purgeRows,
1:     boolean     defragmentRows,
1:     boolean     truncateEnd,
1:     boolean     commit_operation)
1:         throws SQLException
1:     {
1:         CallableStatement cstmt = 
1:                 prepareCall(
1:                 "call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, ?, ?, ?)");
1:         cstmt.setString(1, getTestConfiguration().getUserName());
1:         cstmt.setString(2, tableName);
1:         cstmt.setInt   (3, purgeRows      ? 1 : 0);
1:         cstmt.setInt   (4, defragmentRows ? 1 : 0);
1:         cstmt.setInt   (5, truncateEnd    ? 1 : 0);
1:         cstmt.execute();
1:         if (commit_operation) {
1:             commit();
1:         }
1:     }
1: 
1: }
============================================================================