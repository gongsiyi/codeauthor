1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.GenericLanguageFactory
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PropertyFactory;
1:eac0369: import org.apache.derby.iapi.store.access.AccessFactory;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import org.apache.derby.iapi.sql.LanguageFactory;
1:eac0369: import org.apache.derby.iapi.sql.ParameterValueSet;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.Row;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
1:eac0369: import org.apache.derby.iapi.services.loader.ClassInspector;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedActionException;
1:56c1dc2: import java.security.PrivilegedExceptionAction;
1:eac0369: import java.util.Properties;
1:eac0369: 
3:eac0369: /**
1:eac0369: 	The LanguageFactory provides system-wide services that
1:eac0369: 	are available on the Database API.
1:eac0369: 
1:eac0369:  */
1:eac0369: public class GenericLanguageFactory implements LanguageFactory, ModuleControl
2:eac0369: {
1:eac0369: 
1:eac0369: 	private GenericParameterValueSet emptySet;
1:eac0369: 
1:eac0369: 	public GenericLanguageFactory() { }
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 		ModuleControl interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Start-up method for this instance of the language factory.
1:eac0369: 	 * This service is expected to be started and accessed relative 
1:eac0369: 	 * to a database.
4:eac0369: 	 *
1:eac0369: 	 * @param startParams	The start-up parameters (ignored in this case)
1:eac0369: 
1:eac0369:        @exception StandardException Thrown if module cannot be booted.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void boot(boolean create, Properties startParams) throws StandardException 
1:eac0369: 	{		
1:56c1dc2: 		LanguageConnectionFactory lcf = (LanguageConnectionFactory)  findServiceModule(this, LanguageConnectionFactory.MODULE);
1:eac0369: 		PropertyFactory pf = lcf.getPropertyFactory();
1:eac0369: 		if (pf != null)
1:eac0369: 			pf.addPropertySetNotification(new LanguageDbPropertySetter());
1:eac0369: 
1:eac0369: 		emptySet = new GenericParameterValueSet(null, 0, false);
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Stop this module.  In this case, nothing needs to be done.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public void stop() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* LanguageFactory methods */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Factory method for getting a ParameterValueSet
1:eac0369: 	 *
1:eac0369: 	 * @see LanguageFactory#newParameterValueSet
1:eac0369: 	 */
1:eac0369: 	public ParameterValueSet newParameterValueSet(ClassInspector ci, int numParms, boolean hasReturnParam)
1:eac0369: 	{
1:eac0369: 		if (numParms == 0)
1:eac0369: 			return emptySet;
1:eac0369: 
1:eac0369: 		return new GenericParameterValueSet(ci, numParms, hasReturnParam);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:c69c8b0: 	 * Get a new result description from the input result
1:c69c8b0: 	 * description.  Picks only the columns in the column
1:c69c8b0: 	 * array from the inputResultDescription.
1:c69c8b0: 	 *
1:c69c8b0:  	 * @param inputResultDescription  the input rd
1:c69c8b0: 	 * @param theCols array of ints, non null
1:c69c8b0: 	 *
1:c69c8b0: 	 * @return ResultDescription the rd
1:c69c8b0: 	 */
1:c69c8b0: 	public ResultDescription getResultDescription
1:c69c8b0: 	(
1:c69c8b0: 		ResultDescription	inputResultDescription,
1:c69c8b0: 		int[]				theCols
1:c69c8b0: 	)
1:c69c8b0: 	{
1:c69c8b0: 		return new GenericResultDescription(inputResultDescription, theCols);
1:c69c8b0: 	} 
1:c69c8b0: 
1:c69c8b0: 	/**
1:eac0369: 	 * Get a new result description
1:eac0369: 	 *
1:eac0369:  	 * @param cols an array of col descriptors
1:eac0369: 	 * @param type the statement type
1:eac0369: 	 *
2:eac0369: 	 * @return ResultDescription the rd
1:eac0369: 	 */
2:eac0369: 	public ResultDescription getResultDescription
2:eac0369: 	(
1:eac0369: 		ResultColumnDescriptor[]	cols,
1:eac0369: 		String						type
2:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		return new GenericResultDescription(cols, type);
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/*
1:eac0369: 	** REMIND: we will need a row and column factory
1:eac0369: 	** when we make putResultSets available for users'
1:eac0369: 	** server-side JDBC methods.
1:eac0369: 	*/
1:56c1dc2:     /**
1:56c1dc2:      * Privileged startup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private  static  Object findServiceModule( final Object serviceModule, final String factoryInterface)
1:56c1dc2:         throws StandardException
1:56c1dc2:     {
1:56c1dc2:         try {
1:56c1dc2:             return AccessController.doPrivileged
1:56c1dc2:                 (
1:56c1dc2:                  new PrivilegedExceptionAction<Object>()
1:56c1dc2:                  {
1:56c1dc2:                      public Object run()
1:56c1dc2:                          throws StandardException
1:56c1dc2:                      {
1:56c1dc2:                          return Monitor.findServiceModule( serviceModule, factoryInterface );
1:56c1dc2:                      }
1:56c1dc2:                  }
1:56c1dc2:                  );
1:56c1dc2:         } catch (PrivilegedActionException pae)
1:56c1dc2:         {
1:56c1dc2:             throw StandardException.plainWrapException( pae );
1:56c1dc2:         }
1:56c1dc2:     }
1:56c1dc2: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: 		LanguageConnectionFactory lcf = (LanguageConnectionFactory)  findServiceModule(this, LanguageConnectionFactory.MODULE);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Privileged startup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  Object findServiceModule( final Object serviceModule, final String factoryInterface)
1:         throws StandardException
1:     {
1:         try {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedExceptionAction<Object>()
1:                  {
1:                      public Object run()
1:                          throws StandardException
1:                      {
1:                          return Monitor.findServiceModule( serviceModule, factoryInterface );
1:                      }
1:                  }
1:                  );
1:         } catch (PrivilegedActionException pae)
1:         {
1:             throw StandardException.plainWrapException( pae );
1:         }
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1: 	 * Get a new result description from the input result
1: 	 * description.  Picks only the columns in the column
1: 	 * array from the inputResultDescription.
1: 	 *
1:  	 * @param inputResultDescription  the input rd
1: 	 * @param theCols array of ints, non null
1: 	 *
1: 	 * @return ResultDescription the rd
1: 	 */
1: 	public ResultDescription getResultDescription
1: 	(
1: 		ResultDescription	inputResultDescription,
1: 		int[]				theCols
1: 	)
1: 	{
1: 		return new GenericResultDescription(inputResultDescription, theCols);
1: 	} 
1: 
1: 	/**
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:51572c8
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.GenericLanguageFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
1: import org.apache.derby.iapi.services.property.PropertyFactory;
1: import org.apache.derby.iapi.store.access.AccessFactory;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.sql.LanguageFactory;
1: import org.apache.derby.iapi.sql.ParameterValueSet;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.sql.Row;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
1: import org.apache.derby.iapi.services.loader.ClassInspector;
1: 
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 	The LanguageFactory provides system-wide services that
1: 	are available on the Database API.
1: 
0: 	@author ames
1:  */
1: public class GenericLanguageFactory implements LanguageFactory, ModuleControl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	private GenericParameterValueSet emptySet;
1: 
1: 	public GenericLanguageFactory() { }
1: 
1: 	/*
1: 		ModuleControl interface
1: 	 */
1: 
1: 	/**
1: 	 * Start-up method for this instance of the language factory.
1: 	 * This service is expected to be started and accessed relative 
1: 	 * to a database.
1: 	 *
1: 	 * @param startParams	The start-up parameters (ignored in this case)
1: 
1:        @exception StandardException Thrown if module cannot be booted.
1: 	 *
1: 	 */
1: 	public void boot(boolean create, Properties startParams) throws StandardException 
1: 	{		
0: 		LanguageConnectionFactory lcf = (LanguageConnectionFactory)  Monitor.findServiceModule(this, LanguageConnectionFactory.MODULE);
1: 		PropertyFactory pf = lcf.getPropertyFactory();
1: 		if (pf != null)
1: 			pf.addPropertySetNotification(new LanguageDbPropertySetter());
1: 
1: 		emptySet = new GenericParameterValueSet(null, 0, false);
1: 	}
1: 
1: 	/**
1: 	 * Stop this module.  In this case, nothing needs to be done.
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
1: 	public void stop() {
1: 	}
1: 
1: 	/* LanguageFactory methods */
1: 
1: 	/**
1: 	 * Factory method for getting a ParameterValueSet
1: 	 *
1: 	 * @see LanguageFactory#newParameterValueSet
1: 	 */
1: 	public ParameterValueSet newParameterValueSet(ClassInspector ci, int numParms, boolean hasReturnParam)
1: 	{
1: 		if (numParms == 0)
1: 			return emptySet;
1: 
1: 		return new GenericParameterValueSet(ci, numParms, hasReturnParam);
1: 	}
1: 
1: 	/**
0: 	 * Get a new result description from the input result
0: 	 * description.  Picks only the columns in the column
0: 	 * array from the inputResultDescription.
1: 	 *
0:  	 * @param inputResultDescription  the input rd
0: 	 * @param theCols array of ints, non null
1: 	 *
1: 	 * @return ResultDescription the rd
1: 	 */
1: 	public ResultDescription getResultDescription
1: 	(
0: 		ResultDescription	inputResultDescription,
0: 		int[]				theCols
1: 	)
1: 	{
0: 		return new GenericResultDescription(inputResultDescription, theCols);
1: 	} 
1: 
1: 	/**
1: 	 * Get a new result description
1: 	 *
1:  	 * @param cols an array of col descriptors
1: 	 * @param type the statement type
1: 	 *
1: 	 * @return ResultDescription the rd
1: 	 */
1: 	public ResultDescription getResultDescription
1: 	(
1: 		ResultColumnDescriptor[]	cols,
1: 		String						type
1: 	)
1: 	{
1: 		return new GenericResultDescription(cols, type);
1: 	}
1:  
1: 	/*
1: 	** REMIND: we will need a row and column factory
1: 	** when we make putResultSets available for users'
1: 	** server-side JDBC methods.
1: 	*/
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.services.property.PropertyFactory;
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.sql.LanguageFactory;
0: import org.apache.derby.iapi.sql.ParameterValueSet;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.Row;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
0: import org.apache.derby.iapi.services.loader.ClassInspector;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 	The LanguageFactory provides system-wide services that
0: 	are available on the Database API.
0: 
0: 	@author ames
0:  */
0: public class GenericLanguageFactory implements LanguageFactory, ModuleControl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	private GenericParameterValueSet emptySet;
0: 
0: 	public GenericLanguageFactory() { }
0: 
0: 	/*
0: 		ModuleControl interface
0: 	 */
0: 
0: 	/**
0: 	 * Start-up method for this instance of the language factory.
0: 	 * This service is expected to be started and accessed relative 
0: 	 * to a database.
0: 	 *
0: 	 * @param startParams	The start-up parameters (ignored in this case)
0: 
0:        @exception StandardException Thrown if module cannot be booted.
0: 	 *
0: 	 */
0: 	public void boot(boolean create, Properties startParams) throws StandardException 
0: 	{		
0: 		LanguageConnectionFactory lcf = (LanguageConnectionFactory)  Monitor.findServiceModule(this, LanguageConnectionFactory.MODULE);
0: 		PropertyFactory pf = lcf.getPropertyFactory();
0: 		if (pf != null)
0: 			pf.addPropertySetNotification(new LanguageDbPropertySetter());
0: 
0: 		emptySet = new GenericParameterValueSet(null, 0, false);
0: 	}
0: 
0: 	/**
0: 	 * Stop this module.  In this case, nothing needs to be done.
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	public void stop() {
0: 	}
0: 
0: 	/* LanguageFactory methods */
0: 
0: 	/**
0: 	 * Factory method for getting a ParameterValueSet
0: 	 *
0: 	 * @see LanguageFactory#newParameterValueSet
0: 	 */
0: 	public ParameterValueSet newParameterValueSet(ClassInspector ci, int numParms, boolean hasReturnParam)
0: 	{
0: 		if (numParms == 0)
0: 			return emptySet;
0: 
0: 		return new GenericParameterValueSet(ci, numParms, hasReturnParam);
0: 	}
0: 
0: 	/**
0: 	 * Get a new result description from the input result
0: 	 * description.  Picks only the columns in the column
0: 	 * array from the inputResultDescription.
0: 	 *
0:  	 * @param inputResultDescription  the input rd
0: 	 * @param theCols array of ints, non null
0: 	 *
0: 	 * @return ResultDescription the rd
0: 	 */
0: 	public ResultDescription getResultDescription
0: 	(
0: 		ResultDescription	inputResultDescription,
0: 		int[]				theCols
0: 	)
0: 	{
0: 		return new GenericResultDescription(inputResultDescription, theCols);
0: 	} 
0: 
0: 	/**
0: 	 * Get a new result description
0: 	 *
0:  	 * @param cols an array of col descriptors
0: 	 * @param type the statement type
0: 	 *
0: 	 * @return ResultDescription the rd
0: 	 */
0: 	public ResultDescription getResultDescription
0: 	(
0: 		ResultColumnDescriptor[]	cols,
0: 		String						type
0: 	)
0: 	{
0: 		return new GenericResultDescription(cols, type);
0: 	}
0:  
0: 	/*
0: 	** REMIND: we will need a row and column factory
0: 	** when we make putResultSets available for users'
0: 	** server-side JDBC methods.
0: 	*/
0: }
============================================================================