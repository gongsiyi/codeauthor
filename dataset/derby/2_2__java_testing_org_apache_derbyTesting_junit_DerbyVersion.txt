1:3174d2a: /*
1:3174d2a: 
1:3174d2a:    Derby - Class org.apache.derbyTesting.junit.DerbyVersion
1:3174d2a: 
1:3174d2a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3174d2a:    contributor license agreements.  See the NOTICE file distributed with
1:3174d2a:    this work for additional information regarding copyright ownership.
1:3174d2a:    The ASF licenses this file to you under the Apache License, Version 2.0
1:3174d2a:    (the "License"); you may not use this file except in compliance with
1:3174d2a:    the License.  You may obtain a copy of the License at
1:3174d2a: 
1:3174d2a:       http://www.apache.org/licenses/LICENSE-2.0
1:3174d2a: 
1:3174d2a:    Unless required by applicable law or agreed to in writing, software
1:3174d2a:    distributed under the License is distributed on an "AS IS" BASIS,
1:3174d2a:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3174d2a:    See the License for the specific language governing permissions and
1:3174d2a:    limitations under the License.
1:3174d2a: 
1:3174d2a:  */
1:3174d2a: 
1:3174d2a: package org.apache.derbyTesting.junit;
1:3174d2a: 
1:3174d2a: /**
1:3174d2a:  * Representation of a Derby version on the form major.minor.fixpack.point,
1:3174d2a:  * for instance "10.8.1.2".
1:3174d2a:  * <p>
1:3174d2a:  * This class doesn't consider the alpha/beta flag nor the revision number.
1:3174d2a:  */
1:3174d2a: public class DerbyVersion
1:3174d2a:         implements Comparable {
1:3174d2a: 
1:3174d2a:     // A list of all known "branches" (major and minor levels).
1:3174d2a:     public static final DerbyVersion _10_0     = new DerbyVersion(10,0,0,0);
1:3174d2a:     public static final DerbyVersion _10_1     = new DerbyVersion(10,1,0,0);
1:3174d2a:     public static final DerbyVersion _10_2     = new DerbyVersion(10,2,0,0);
1:3174d2a:     public static final DerbyVersion _10_3     = new DerbyVersion(10,3,0,0);
1:3174d2a:     public static final DerbyVersion _10_4     = new DerbyVersion(10,4,0,0);
1:3174d2a:     public static final DerbyVersion _10_5     = new DerbyVersion(10,5,0,0);
1:3174d2a:     public static final DerbyVersion _10_6     = new DerbyVersion(10,6,0,0);
1:3174d2a:     public static final DerbyVersion _10_7     = new DerbyVersion(10,7,0,0);
1:3174d2a:     public static final DerbyVersion _10_8     = new DerbyVersion(10,8,0,0);
1:6be56bc:     public static final DerbyVersion _10_9     = new DerbyVersion(10,9,0,0);
1:4131bd7:     public static final DerbyVersion _10_10    = new DerbyVersion(10,10,0,0);
1:3174d2a: 
1:3174d2a:     // A list of all known official Derby releases.
1:3174d2a: 
1:3174d2a:     /** 10.0.2.1 (incubator release) */
1:3174d2a:     public static final DerbyVersion _10_0_2_1 = new DerbyVersion(10,0,2,1);
1:3174d2a:     /** 10.1.1.0 (Aug 3, 2005 / SVN 208786) */
1:3174d2a:     public static final DerbyVersion _10_1_1_0 = new DerbyVersion(10,1,1,0);
1:3174d2a:     /** 10.1.2.1 (Nov 18, 2005 / SVN 330608) */
1:3174d2a:     public static final DerbyVersion _10_1_2_1 = new DerbyVersion(10,1,2,1);
1:3174d2a:     /** 10.1.3.1 (Jun 30, 2006 / SVN 417277) */
1:3174d2a:     public static final DerbyVersion _10_1_3_1 = new DerbyVersion(10,1,3,1);
1:3174d2a:     /** 10.2.1.6 (Oct 02, 2006 / SVN 452058) */
1:3174d2a:     public static final DerbyVersion _10_2_1_6 = new DerbyVersion(10,2,1,6);
1:3174d2a:     /** 10.2.2.0 (Dec 12, 2006 / SVN 485682) */
1:3174d2a:     public static final DerbyVersion _10_2_2_0 = new DerbyVersion(10,2,2,0);
1:3174d2a:     /** 10.3.1.4 (Aug 1, 2007 / SVN 561794) */
1:3174d2a:     public static final DerbyVersion _10_3_1_4 = new DerbyVersion(10,3,1,4);
1:3174d2a:     /** 10.3.3.0 (May 12, 2008 / SVN 652961) */
1:3174d2a:     public static final DerbyVersion _10_3_3_0 = new DerbyVersion(10,3,3,0);
1:3174d2a:     /** 10.4.1.3 (April 24, 2008 / SVN 648739) */
1:3174d2a:     public static final DerbyVersion _10_4_1_3 = new DerbyVersion(10,4,1,3);
1:3174d2a:     /** 10.4.2.0 (September 05, 2008 / SVN 693552) */
1:3174d2a:     public static final DerbyVersion _10_4_2_0 = new DerbyVersion(10,4,2,0);
1:3174d2a:     /** 10.5.1.1 (April 28, 2009 / SVN 764942) */
1:3174d2a:     public static final DerbyVersion _10_5_1_1 = new DerbyVersion(10,5,1,1);
1:3174d2a:     /** 10.5.3.0 (August 21, 2009 / SVN 802917) */
1:3174d2a:     public static final DerbyVersion _10_5_3_0 = new DerbyVersion(10,5,3,0);
1:3174d2a:     /** 10.6.1.0 (May 18, 2010/ SVN 938214) */
1:3174d2a:     public static final DerbyVersion _10_6_1_0 = new DerbyVersion(10,6,1,0);
1:3174d2a:     /** 10.6.2.1 (Oct 6, 2010/ SVN 999685) */
1:3174d2a:     public static final DerbyVersion _10_6_2_1 = new DerbyVersion(10,6,2,1);
1:3174d2a:     /** 10.7.1.1 (December 14, 2010/ SVN 1040133) */
1:3174d2a:     public static final DerbyVersion _10_7_1_1 = new DerbyVersion(10,7,1,1);
1:3174d2a:     /** 10.8.1.2 (April 29, 2011/ SVN 1095077) */
1:3174d2a:     public static final DerbyVersion _10_8_1_2 = new DerbyVersion(10,8,1,2);
1:3174d2a:     /** 10.8.2.2 (October 24, 2011/ SVN 1181258) */
1:3174d2a:     public static final DerbyVersion _10_8_2_2 = new DerbyVersion(10,8,2,2);
1:6be56bc:     /** 10.8.3.0 (November 16, 2012/ SVN 1405108) */
1:6be56bc:     public static final DerbyVersion _10_8_3_0 = new DerbyVersion(10,8,3,0);
1:6be56bc:     /** 10.9.1.0 (June 25, 2012/ SVN 1344872) */
1:6be56bc:     public static final DerbyVersion _10_9_1_0 = new DerbyVersion(10,9,1,0);
1:3174d2a: 
1:3174d2a:     private final int major;
1:3174d2a:     private final int minor;
1:3174d2a:     private final int fixpack;
1:3174d2a:     private final int point;
1:e8c9fe3:     private final Version simpleVersion;
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Parses the given string as a Derby version.
1:3174d2a:      *
1:3174d2a:      * @param versionString the string to parse, for instance "10.7.1.1" or
1:3174d2a:      *      "10.9.0.0 alpha - (1180861M)"
1:3174d2a:      * @return A Derby version object.
1:3174d2a:      * @throws IllegalArgumentException if the specified version string cannot
1:3174d2a:      *      be parsed
1:3174d2a:      */
1:3174d2a:     public static DerbyVersion parseVersionString(String versionString)
1:3174d2a:             throws IllegalArgumentException {
1:3174d2a:         String[] components = Utilities.split(versionString.trim(), ' ');
1:3174d2a:         components = Utilities.split(components[0], '.');
1:3174d2a:         if (components.length != 4) {
1:3174d2a:             throw new IllegalArgumentException(
1:3174d2a:                     "invalid number of version components, got " +
1:3174d2a:                     components.length + " expected 4: " + versionString);
1:3174d2a:         }
1:3174d2a:         return new DerbyVersion(
1:3174d2a:                 Integer.parseInt(components[0]),
1:3174d2a:                 Integer.parseInt(components[1]),
1:3174d2a:                 Integer.parseInt(components[2]),
1:3174d2a:                 Integer.parseInt(components[3]));
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public DerbyVersion(int major, int minor, int fixpack, int point) {
1:3174d2a:         this.major = major;
1:3174d2a:         this.minor = minor;
1:3174d2a:         this.fixpack = fixpack;
1:3174d2a:         this.point = point;
1:e8c9fe3:         this.simpleVersion = new Version(major, minor);
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public int getMajor() {
1:3174d2a:         return major;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public int getMinor() {
1:3174d2a:         return minor;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public int getFixpack() {
1:3174d2a:         return fixpack;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public int getPoint() {
1:3174d2a:         return point;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public boolean lessThan(DerbyVersion other) {
1:3174d2a:         return compareTo(other) < 0;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public boolean greaterThan(DerbyVersion other) {
1:3174d2a:         return compareTo(other) > 0;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Checks if this version is at a greater minor level than the other
1:3174d2a:      * version.
1:3174d2a:      *
1:3174d2a:      * @param other version to compare with
1:3174d2a:      * @return {@code true} if the minor level is greater, {@code false} if the
1:3174d2a:      *      minor level is the same or smaller.
1:3174d2a:      * @throws IllegalArgumentException if the major level of the two versions
1:3174d2a:      *      are unequal
1:3174d2a:      */
1:3174d2a:     public boolean greaterMinorThan(DerbyVersion other) {
1:3174d2a:         if (!sameMajorAs(other)) {
1:3174d2a:             throw new IllegalArgumentException(
1:3174d2a:                     "major versions must be equal");
1:3174d2a:         }
1:3174d2a:         return minor > other.minor;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Checks if this version is at the same or higher level as the other
1:3174d2a:      * version.
1:3174d2a:      *
1:3174d2a:      * @param other version to compare with
1:e8c9fe3:      * @return {@code true} if this version is equal to or higher than
1:e8c9fe3:      *      {@code other}, {@code false} otherwise.
1:3174d2a:      */
1:e8c9fe3:     public boolean atLeast(DerbyVersion other) {
1:3174d2a:         return compareTo(other) >= 0;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Checks if this version is at the same or lower level as the other
1:3174d2a:      * version.
1:3174d2a:      *
1:3174d2a:      * @param other version to compare with
1:e8c9fe3:      * @return {@code true} if this version is equal to or lower than
1:e8c9fe3:      *      {@code other}, {@code false} otherwise.
1:3174d2a:      */
1:e8c9fe3:     public boolean atMost(DerbyVersion other) {
1:3174d2a:         return compareTo(other) <= 0;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Checks if this version is at the same major and minor level as the other
1:3174d2a:      * version.
1:3174d2a:      *
1:3174d2a:      * @param major major level to compare with
1:3174d2a:      * @param minor minor level to compare with
1:3174d2a:      * @return {@code true} if major and minor level of the two versions are
1:3174d2a:      *      the same, {@code false} otherwise.
1:3174d2a:      */
1:3174d2a:     public boolean atMajorMinor(int major, int minor) {
1:3174d2a:         return this.major == major && this.minor == minor;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Checks if this version is at the same major and minor level as the other
1:3174d2a:      * version.
1:3174d2a:      *
1:3174d2a:      * @param other version to compare with
1:3174d2a:      * @return {@code true} if major and minor level of the two versions are
1:3174d2a:      *      the same, {@code false} otherwise.
1:3174d2a:      */
1:3174d2a:     public boolean atMajorMinorOf(DerbyVersion other) {
1:3174d2a:         return major == other.major && minor == other.minor;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     //@Override
1:3174d2a:     public String toString() {
1:3174d2a:         return major + "." + minor + "." + fixpack + "." + point;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     //@Override
1:3174d2a:     public boolean equals(Object obj) {
1:3174d2a:         if (obj == null) {
1:3174d2a:             return false;
1:3174d2a:         }
1:3174d2a:         if (getClass() != obj.getClass()) {
1:3174d2a:             return false;
1:3174d2a:         }
1:3174d2a:         final DerbyVersion other = (DerbyVersion) obj;
1:3174d2a:         if (this.major != other.major) {
1:3174d2a:             return false;
1:3174d2a:         }
1:3174d2a:         if (this.minor != other.minor) {
1:3174d2a:             return false;
1:3174d2a:         }
1:3174d2a:         if (this.fixpack != other.fixpack) {
1:3174d2a:             return false;
1:3174d2a:         }
1:3174d2a:         if (this.point != other.point) {
1:3174d2a:             return false;
1:3174d2a:         }
1:3174d2a:         return true;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     //@Override
1:3174d2a:     public int hashCode() {
1:3174d2a:         int hash = 3;
1:3174d2a:         hash = 23 * hash + this.major;
1:3174d2a:         hash = 23 * hash + this.minor;
1:3174d2a:         hash = 23 * hash + this.fixpack;
1:3174d2a:         hash = 23 * hash + this.point;
1:3174d2a:         return hash;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public int compareTo(Object o) {
1:3174d2a:         return compareTo((DerbyVersion)o);
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     public int compareTo(DerbyVersion o) {
1:3174d2a:         if (major < o.major) {
1:3174d2a:             return -1;
1:3174d2a:         } else if (major > o.major) {
1:3174d2a:             return 1;
1:3174d2a:         }
1:3174d2a:         if (minor < o.minor) {
1:3174d2a:             return -1;
1:3174d2a:         } else if (minor > o.minor) {
1:3174d2a:             return 1;
1:3174d2a:         }
1:3174d2a:         if (fixpack < o.fixpack) {
1:3174d2a:             return -1;
1:3174d2a:         } else if (fixpack > o.fixpack) {
1:3174d2a:             return 1;
1:3174d2a:         }
1:3174d2a:         if (point < o.point) {
1:3174d2a:             return -1;
1:3174d2a:         } else if (point > o.point) {
1:3174d2a:             return 1;
1:3174d2a:         }
1:3174d2a:         return 0;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Returns a simplified view of this version, where only the major and the
1:3174d2a:      * minor versions are included.
1:3174d2a:      * <p>
1:3174d2a:      * Introduced for compatibility with existing/older test code.
1:3174d2a:      *
1:3174d2a:      * @return A simplified version view.
1:3174d2a:      */
1:e8c9fe3:     public Version asSimpleVersion() {
1:3174d2a:         return this.simpleVersion;
1:3174d2a:     }
1:3174d2a: 
1:3174d2a:     /**
1:3174d2a:      * Checks if the major level of this version is the same as for the other
1:3174d2a:      * version.
1:3174d2a:      *
1:3174d2a:      * @param other version to compare with
1:3174d2a:      * @return {@code true} if the major levels match, {@code false} otherwise.
1:3174d2a:      */
1:3174d2a:     private boolean sameMajorAs(DerbyVersion other) {
1:3174d2a:         return major == other.major;
1:3174d2a:     }
1:3174d2a: }
1:3174d2a: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:4131bd7
/////////////////////////////////////////////////////////////////////////
1:     public static final DerbyVersion _10_10    = new DerbyVersion(10,10,0,0);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6be56bc
/////////////////////////////////////////////////////////////////////////
1:     public static final DerbyVersion _10_9     = new DerbyVersion(10,9,0,0);
/////////////////////////////////////////////////////////////////////////
1:     /** 10.8.3.0 (November 16, 2012/ SVN 1405108) */
1:     public static final DerbyVersion _10_8_3_0 = new DerbyVersion(10,8,3,0);
1:     /** 10.9.1.0 (June 25, 2012/ SVN 1344872) */
1:     public static final DerbyVersion _10_9_1_0 = new DerbyVersion(10,9,1,0);
commit:e8c9fe3
/////////////////////////////////////////////////////////////////////////
1:     private final Version simpleVersion;
/////////////////////////////////////////////////////////////////////////
1:         this.simpleVersion = new Version(major, minor);
/////////////////////////////////////////////////////////////////////////
1:      * @return {@code true} if this version is equal to or higher than
1:      *      {@code other}, {@code false} otherwise.
1:     public boolean atLeast(DerbyVersion other) {
/////////////////////////////////////////////////////////////////////////
1:      * @return {@code true} if this version is equal to or lower than
1:      *      {@code other}, {@code false} otherwise.
1:     public boolean atMost(DerbyVersion other) {
/////////////////////////////////////////////////////////////////////////
1:     public Version asSimpleVersion() {
commit:3174d2a
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.junit.DerbyVersion
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.junit;
1: 
1: /**
1:  * Representation of a Derby version on the form major.minor.fixpack.point,
1:  * for instance "10.8.1.2".
1:  * <p>
1:  * This class doesn't consider the alpha/beta flag nor the revision number.
1:  */
1: public class DerbyVersion
1:         implements Comparable {
1: 
1:     // A list of all known "branches" (major and minor levels).
1:     public static final DerbyVersion _10_0     = new DerbyVersion(10,0,0,0);
1:     public static final DerbyVersion _10_1     = new DerbyVersion(10,1,0,0);
1:     public static final DerbyVersion _10_2     = new DerbyVersion(10,2,0,0);
1:     public static final DerbyVersion _10_3     = new DerbyVersion(10,3,0,0);
1:     public static final DerbyVersion _10_4     = new DerbyVersion(10,4,0,0);
1:     public static final DerbyVersion _10_5     = new DerbyVersion(10,5,0,0);
1:     public static final DerbyVersion _10_6     = new DerbyVersion(10,6,0,0);
1:     public static final DerbyVersion _10_7     = new DerbyVersion(10,7,0,0);
1:     public static final DerbyVersion _10_8     = new DerbyVersion(10,8,0,0);
1: 
1:     // A list of all known official Derby releases.
1: 
1:     /** 10.0.2.1 (incubator release) */
1:     public static final DerbyVersion _10_0_2_1 = new DerbyVersion(10,0,2,1);
1:     /** 10.1.1.0 (Aug 3, 2005 / SVN 208786) */
1:     public static final DerbyVersion _10_1_1_0 = new DerbyVersion(10,1,1,0);
1:     /** 10.1.2.1 (Nov 18, 2005 / SVN 330608) */
1:     public static final DerbyVersion _10_1_2_1 = new DerbyVersion(10,1,2,1);
1:     /** 10.1.3.1 (Jun 30, 2006 / SVN 417277) */
1:     public static final DerbyVersion _10_1_3_1 = new DerbyVersion(10,1,3,1);
1:     /** 10.2.1.6 (Oct 02, 2006 / SVN 452058) */
1:     public static final DerbyVersion _10_2_1_6 = new DerbyVersion(10,2,1,6);
1:     /** 10.2.2.0 (Dec 12, 2006 / SVN 485682) */
1:     public static final DerbyVersion _10_2_2_0 = new DerbyVersion(10,2,2,0);
1:     /** 10.3.1.4 (Aug 1, 2007 / SVN 561794) */
1:     public static final DerbyVersion _10_3_1_4 = new DerbyVersion(10,3,1,4);
1:     /** 10.3.3.0 (May 12, 2008 / SVN 652961) */
1:     public static final DerbyVersion _10_3_3_0 = new DerbyVersion(10,3,3,0);
1:     /** 10.4.1.3 (April 24, 2008 / SVN 648739) */
1:     public static final DerbyVersion _10_4_1_3 = new DerbyVersion(10,4,1,3);
1:     /** 10.4.2.0 (September 05, 2008 / SVN 693552) */
1:     public static final DerbyVersion _10_4_2_0 = new DerbyVersion(10,4,2,0);
1:     /** 10.5.1.1 (April 28, 2009 / SVN 764942) */
1:     public static final DerbyVersion _10_5_1_1 = new DerbyVersion(10,5,1,1);
1:     /** 10.5.3.0 (August 21, 2009 / SVN 802917) */
1:     public static final DerbyVersion _10_5_3_0 = new DerbyVersion(10,5,3,0);
1:     /** 10.6.1.0 (May 18, 2010/ SVN 938214) */
1:     public static final DerbyVersion _10_6_1_0 = new DerbyVersion(10,6,1,0);
1:     /** 10.6.2.1 (Oct 6, 2010/ SVN 999685) */
1:     public static final DerbyVersion _10_6_2_1 = new DerbyVersion(10,6,2,1);
1:     /** 10.7.1.1 (December 14, 2010/ SVN 1040133) */
1:     public static final DerbyVersion _10_7_1_1 = new DerbyVersion(10,7,1,1);
1:     /** 10.8.1.2 (April 29, 2011/ SVN 1095077) */
1:     public static final DerbyVersion _10_8_1_2 = new DerbyVersion(10,8,1,2);
1:     /** 10.8.2.2 (October 24, 2011/ SVN 1181258) */
1:     public static final DerbyVersion _10_8_2_2 = new DerbyVersion(10,8,2,2);
1: 
1:     private final int major;
1:     private final int minor;
1:     private final int fixpack;
1:     private final int point;
0:     private final DerbyVersionSimple simpleVersion;
1: 
1:     /**
1:      * Parses the given string as a Derby version.
1:      *
1:      * @param versionString the string to parse, for instance "10.7.1.1" or
1:      *      "10.9.0.0 alpha - (1180861M)"
1:      * @return A Derby version object.
1:      * @throws IllegalArgumentException if the specified version string cannot
1:      *      be parsed
1:      */
1:     public static DerbyVersion parseVersionString(String versionString)
1:             throws IllegalArgumentException {
1:         String[] components = Utilities.split(versionString.trim(), ' ');
1:         components = Utilities.split(components[0], '.');
1:         if (components.length != 4) {
1:             throw new IllegalArgumentException(
1:                     "invalid number of version components, got " +
1:                     components.length + " expected 4: " + versionString);
1:         }
1:         return new DerbyVersion(
1:                 Integer.parseInt(components[0]),
1:                 Integer.parseInt(components[1]),
1:                 Integer.parseInt(components[2]),
1:                 Integer.parseInt(components[3]));
1:     }
1: 
1:     public DerbyVersion(int major, int minor, int fixpack, int point) {
1:         this.major = major;
1:         this.minor = minor;
1:         this.fixpack = fixpack;
1:         this.point = point;
0:         this.simpleVersion = new DerbyVersionSimple(major, minor);
1:     }
1: 
1:     public int getMajor() {
1:         return major;
1:     }
1: 
1:     public int getMinor() {
1:         return minor;
1:     }
1: 
1:     public int getFixpack() {
1:         return fixpack;
1:     }
1: 
1:     public int getPoint() {
1:         return point;
1:     }
1: 
1:     public boolean lessThan(DerbyVersion other) {
1:         return compareTo(other) < 0;
1:     }
1: 
1:     public boolean greaterThan(DerbyVersion other) {
1:         return compareTo(other) > 0;
1:     }
1: 
1:     /**
1:      * Checks if this version is at a greater minor level than the other
1:      * version.
1:      *
1:      * @param other version to compare with
1:      * @return {@code true} if the minor level is greater, {@code false} if the
1:      *      minor level is the same or smaller.
1:      * @throws IllegalArgumentException if the major level of the two versions
1:      *      are unequal
1:      */
1:     public boolean greaterMinorThan(DerbyVersion other) {
1:         if (!sameMajorAs(other)) {
1:             throw new IllegalArgumentException(
1:                     "major versions must be equal");
1:         }
1:         return minor > other.minor;
1:     }
1: 
1:     /**
1:      * Checks if this version is at the same or higher level as the other
1:      * version.
1:      *
1:      * @param other version to compare with
0:      * @return {@code true} if this version is equal/higher than {@code other},
0:      *      {@code false} otherwise.
1:      */
0:     public boolean atLeastAs(DerbyVersion other) {
1:         return compareTo(other) >= 0;
1:     }
1: 
1:     /**
1:      * Checks if this version is at the same or lower level as the other
1:      * version.
1:      *
1:      * @param other version to compare with
0:      * @return {@code true} if this version is equal/lower than {@code other},
0:      *      {@code false} otherwise.
1:      */
0:     public boolean atMostAs(DerbyVersion other) {
1:         return compareTo(other) <= 0;
1:     }
1: 
1:     /**
1:      * Checks if this version is at the same major and minor level as the other
1:      * version.
1:      *
1:      * @param major major level to compare with
1:      * @param minor minor level to compare with
1:      * @return {@code true} if major and minor level of the two versions are
1:      *      the same, {@code false} otherwise.
1:      */
1:     public boolean atMajorMinor(int major, int minor) {
1:         return this.major == major && this.minor == minor;
1:     }
1: 
1:     /**
1:      * Checks if this version is at the same major and minor level as the other
1:      * version.
1:      *
1:      * @param other version to compare with
1:      * @return {@code true} if major and minor level of the two versions are
1:      *      the same, {@code false} otherwise.
1:      */
1:     public boolean atMajorMinorOf(DerbyVersion other) {
1:         return major == other.major && minor == other.minor;
1:     }
1: 
1:     //@Override
1:     public String toString() {
1:         return major + "." + minor + "." + fixpack + "." + point;
1:     }
1: 
1:     //@Override
1:     public boolean equals(Object obj) {
1:         if (obj == null) {
1:             return false;
1:         }
1:         if (getClass() != obj.getClass()) {
1:             return false;
1:         }
1:         final DerbyVersion other = (DerbyVersion) obj;
1:         if (this.major != other.major) {
1:             return false;
1:         }
1:         if (this.minor != other.minor) {
1:             return false;
1:         }
1:         if (this.fixpack != other.fixpack) {
1:             return false;
1:         }
1:         if (this.point != other.point) {
1:             return false;
1:         }
1:         return true;
1:     }
1: 
1:     //@Override
1:     public int hashCode() {
1:         int hash = 3;
1:         hash = 23 * hash + this.major;
1:         hash = 23 * hash + this.minor;
1:         hash = 23 * hash + this.fixpack;
1:         hash = 23 * hash + this.point;
1:         return hash;
1:     }
1: 
1:     public int compareTo(Object o) {
1:         return compareTo((DerbyVersion)o);
1:     }
1: 
1:     public int compareTo(DerbyVersion o) {
1:         if (major < o.major) {
1:             return -1;
1:         } else if (major > o.major) {
1:             return 1;
1:         }
1:         if (minor < o.minor) {
1:             return -1;
1:         } else if (minor > o.minor) {
1:             return 1;
1:         }
1:         if (fixpack < o.fixpack) {
1:             return -1;
1:         } else if (fixpack > o.fixpack) {
1:             return 1;
1:         }
1:         if (point < o.point) {
1:             return -1;
1:         } else if (point > o.point) {
1:             return 1;
1:         }
1:         return 0;
1:     }
1: 
1:     /**
1:      * Returns a simplified view of this version, where only the major and the
1:      * minor versions are included.
1:      * <p>
1:      * Introduced for compatibility with existing/older test code.
1:      *
1:      * @return A simplified version view.
1:      */
0:     public DerbyVersionSimple asSimpleVersion() {
1:         return this.simpleVersion;
1:     }
1: 
1:     /**
1:      * Checks if the major level of this version is the same as for the other
1:      * version.
1:      *
1:      * @param other version to compare with
1:      * @return {@code true} if the major levels match, {@code false} otherwise.
1:      */
1:     private boolean sameMajorAs(DerbyVersion other) {
1:         return major == other.major;
1:     }
1: }
1: 
============================================================================