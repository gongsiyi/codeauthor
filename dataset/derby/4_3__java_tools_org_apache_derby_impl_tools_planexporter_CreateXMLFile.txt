1:782dbe1: /*
1:4e20a51: 
1:782dbe1:    Derby - Class org.apache.derby.impl.tools.planexporter.CreateXMLFile
1:4e20a51: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
4:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:4e20a51: 
1:4e20a51: package org.apache.derby.impl.tools.planexporter;
1:4e20a51: 
1:4e20a51: import java.io.IOException;
1:0c4389d: import java.io.Writer;
1:4e20a51: 
2:4e20a51: /**
1:4e20a51:  * This class is to create the final xml file, that will be used
1:4e20a51:  * by the Graphical Query Explainer.
1:4e20a51:  * This is called from org.apache.derby.tools.PlanExporter.
1:4e20a51:  */
1:4e20a51: public class CreateXMLFile {
1:4e20a51: 
1:4e20a51:     AccessDatabase access;
1:4e20a51: 
1:4e20a51:     public CreateXMLFile(AccessDatabase access) {
1:4e20a51:         this.access = access;
1:0c4389d:     }
1:4e20a51: 
1:4e20a51:     /**
1:ce855d2:      * @param stmt statement executed
1:ce855d2:      * @param time time which the statement was executed
1:aba4ea1:      * @param out where to write the XML file
1:4e20a51:      * @param xsl_sheet_name name of the style sheet
1:4e20a51:      * @throws IOException
1:4e20a51:      */
1:ce855d2:     public void writeTheXMLFile(String stmt, String time,
1:aba4ea1:                                 Writer out, String xsl_sheet_name)
1:0e72736:     throws IOException {
1:4e20a51: 
1:0c4389d:         String defaultXML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
1:4e20a51:         String embedXSL="";
1:4e20a51:         if(xsl_sheet_name != null)
1:4e20a51:             embedXSL ="<?xml-stylesheet type=\"text/xsl\" href=\""
1:4e20a51:                         +xsl_sheet_name+"\"?>\n";
1:ce855d2:         String comment = "<!-- Apache Derby Query Explainer (DERBY-4587)-->\n";
1:4e20a51:         String parentTagStart = "<plan>\n";
1:4e20a51:         String parentTagEnd = "</plan>\n";
1:4e20a51:         String childTagStart = "<details>\n";
1:4e20a51:         String childTagEnd = "</details>\n";
1:0c4389d: 
1:0c4389d:         out.write(defaultXML);
1:0c4389d: 
1:0c4389d:         out.write(embedXSL);
1:0c4389d:         out.write(comment);
1:0c4389d:         out.write(parentTagStart);
1:0c4389d: 
1:0c4389d:         out.write(access.indent(0));
1:0c4389d:         out.write(stmt);
1:0c4389d: 
1:0c4389d:         out.write(access.indent(0));
1:0c4389d:         out.write(time);
1:0c4389d: 
1:0c4389d:         out.write(access.indent(0));
1:0c4389d:         out.write(access.stmtID());
1:0c4389d: 
1:0c4389d:         out.write(access.indent(0));
1:0c4389d:         out.write(childTagStart);
1:0c4389d: 
1:0c4389d:         out.write(access.getXmlString());
1:0c4389d: 
1:0c4389d:         out.write(access.indent(0));
1:0c4389d:         out.write(childTagEnd);
1:0c4389d: 
1:0c4389d:         out.write(parentTagEnd);
1:0c4389d:     }
1:0e72736: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:aba4ea1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param out where to write the XML file
1:                                 Writer out, String xsl_sheet_name)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0c4389d
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedWriter;
0: import java.io.OutputStreamWriter;
1: import java.io.Writer;
0: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:         String defaultXML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
/////////////////////////////////////////////////////////////////////////
0:         FileOutputStream fos;
0:         try {
0:             fos = (FileOutputStream) AccessController.doPrivileged(
0:                     new PrivilegedExceptionAction() {
0:                         public Object run() throws IOException {
0:                             return new FileOutputStream(file_name);
1:                         }
0:                     });
0:         } catch (PrivilegedActionException pae) {
0:             throw (IOException) pae.getCause();
1:         }
0:         Writer out = new BufferedWriter(new OutputStreamWriter(fos, "UTF-8"));
1: 
1:         out.write(defaultXML);
1: 
1:         out.write(embedXSL);
1:         out.write(comment);
1:         out.write(parentTagStart);
1: 
1:         out.write(access.indent(0));
1:         out.write(stmt);
1: 
1:         out.write(access.indent(0));
1:         out.write(time);
1: 
1:         out.write(access.indent(0));
1:         out.write(access.stmtID());
1: 
1:         out.write(access.indent(0));
1:         out.write(childTagStart);
1: 
1:         out.write(access.getXmlString());
1: 
1:         out.write(access.indent(0));
1:         out.write(childTagEnd);
1: 
1:         out.write(parentTagEnd);
0:         out.close();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:16d3334
/////////////////////////////////////////////////////////////////////////
0:             fos = AccessController.doPrivileged(
0:                     new PrivilegedExceptionAction<FileOutputStream>() {
0:                         public FileOutputStream run() throws IOException {
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:0e72736
/////////////////////////////////////////////////////////////////////////
1:     throws IOException {
/////////////////////////////////////////////////////////////////////////
0:         DataOutputStream dos;
0: 		try {
0: 			dos = new DataOutputStream(
/////////////////////////////////////////////////////////////////////////
0: 		} catch (PrivilegedActionException pae) {
0: 			throw (IOException)pae.getCause(); 
1: 		}
commit:4e20a51
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * This class is to create the final xml file, that will be used 
1:  * by the Graphical Query Explainer.
1:  * This is called from org.apache.derby.tools.PlanExporter.
0:  * 
0:  * */
1: 
1: package org.apache.derby.impl.tools.planexporter;
1: 
0: import java.io.BufferedOutputStream;
0: import java.io.DataOutputStream;
0: import java.io.FileOutputStream;
1: import java.io.IOException;
0: import java.io.OutputStream;
0: import java.security.AccessController;
0: import java.security.PrivilegedActionException;
0: import org.apache.derby.impl.tools.planexporter.AccessDatabase;
1: 
1: /**
0:  * @author Nirmal
0:  *
1:  */
1: public class CreateXMLFile {
1: 
1: 	AccessDatabase access;
1: 
1: 	public CreateXMLFile(AccessDatabase access) {
1: 		this.access = access;
0: 	}
1: 
1: 	/**
0: 	 * 
0: 	 * @param data large xml data string array 
0: 	 * @param file_name name of the file to be written
1: 	 * @param xsl_sheet_name name of the style sheet
0: 	 * @throws PrivilegedActionException 
1: 	 * @throws IOException 
0: 	 * 
1: 	 */
0: 	public void writeTheXMLFile(String stmt, 
0: 			TreeNode[] data, final String file_name, String xsl_sheet_name) 
0: 	throws PrivilegedActionException, IOException {
1: 
0: 		String defaultXML = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
1: 		String embedXSL="";
1: 		if(xsl_sheet_name != null)
1: 			embedXSL ="<?xml-stylesheet type=\"text/xsl\" href=\""
1: 						+xsl_sheet_name+"\"?>\n";
0: 		String comment = "<!-- Designed & coded by C.S.Nirmal J. Fernando," +
0: 		" of University of Moratuwa, Sri Lanka, to Apache " +
0: 		"Derby Query Explainer (DERBY-4587)-->\n";
1: 		String parentTagStart = "<plan>\n";
1: 		String parentTagEnd = "</plan>\n";
1: 		String childTagStart = "<details>\n";
1: 		String childTagEnd = "</details>\n";
1: 
0: 		DataOutputStream dos =
0: 			new DataOutputStream(
0: 					new BufferedOutputStream(
0: 							(OutputStream)AccessController.doPrivileged
0: 							(new java.security.PrivilegedExceptionAction(){
0: 								public Object run() throws IOException{
0: 									return new FileOutputStream(file_name);
0: 								}
0: 							})));
1: 
0: 		dos.write(defaultXML.getBytes());
0: 		dos.write(embedXSL.getBytes());
0: 		dos.write(comment.getBytes());
0: 		dos.write(parentTagStart.getBytes());
0: 		dos.write((access.indent(0)+stmt).getBytes());
0: 		dos.write((access.indent(0)+childTagStart).getBytes());
0: 		dos.write(access.getXmlString().getBytes());
0: 		dos.write((access.indent(0)+childTagEnd).getBytes());
0: 		dos.write(parentTagEnd.getBytes());
0: 		dos.close();
0: 	}
0: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.tools.planexporter.CreateXMLFile
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
commit:ce855d2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * This class is to create the final xml file, that will be used
0:  * by the Graphical Query Explainer.
0:  * This is called from org.apache.derby.tools.PlanExporter.
0:  */
0:     AccessDatabase access;
0:     public CreateXMLFile(AccessDatabase access) {
0:         this.access = access;
0:     }
0:     /**
1:      * @param stmt statement executed
1:      * @param time time which the statement was executed
0:      * @param data large xml data string array
0:      * @param file_name name of the file to be written
0:      * @param xsl_sheet_name name of the style sheet
0:      * @throws PrivilegedActionException
0:      * @throws IOException
0:      * @throws PrivilegedActionException
0:      */
1:     public void writeTheXMLFile(String stmt, String time,
0:             TreeNode[] data, final String file_name, String xsl_sheet_name)
0:     throws IOException, PrivilegedActionException {
0:         String defaultXML = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
0:         String embedXSL="";
0:         if(xsl_sheet_name != null)
0:             embedXSL ="<?xml-stylesheet type=\"text/xsl\" href=\""
0:                         +xsl_sheet_name+"\"?>\n";
1:         String comment = "<!-- Apache Derby Query Explainer (DERBY-4587)-->\n";
0:         String parentTagStart = "<plan>\n";
0:         String parentTagEnd = "</plan>\n";
0:         String childTagStart = "<details>\n";
0:         String childTagEnd = "</details>\n";
0:         DataOutputStream dos =
0:             new DataOutputStream(
0:                     new BufferedOutputStream(
0:                             (OutputStream)AccessController.doPrivileged
0:                             (new java.security.PrivilegedExceptionAction(){
0:                                 public Object run() throws IOException{
0:                                     return new FileOutputStream(file_name);
0:                                 }
0:                             })));
0:         dos.write(defaultXML.getBytes());
0:         dos.write(embedXSL.getBytes());
0:         dos.write(comment.getBytes());
0:         dos.write(parentTagStart.getBytes());
0:         dos.write((access.indent(0)+stmt).getBytes());
0:         dos.write((access.indent(0)+time).getBytes());
0:         dos.write((access.indent(0)+access.stmtID()).getBytes());
0:         dos.write((access.indent(0)+childTagStart).getBytes());
0:         dos.write(access.getXmlString().getBytes());
0:         dos.write((access.indent(0)+childTagEnd).getBytes());
0:         dos.write(parentTagEnd.getBytes());
0:         dos.close();
0:     }
commit:82d6586
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	 * @param stmt statement executed
0: 	 * @param time time which the statement was executed 
0: 	 * @throws PrivilegedActionException 
0: 	public void writeTheXMLFile(String stmt, String time,
0: 	throws IOException, PrivilegedActionException {
0: 		String comment = "<!-- Apache Derby Query Explainer (DERBY-4587)-->\n";
/////////////////////////////////////////////////////////////////////////
0: 		dos.write((access.indent(0)+time).getBytes());
0: 		dos.write((access.indent(0)+access.stmtID()).getBytes());
============================================================================