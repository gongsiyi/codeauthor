1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.BaseExpressionActivation
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
11:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.types.UserDefinedTypeIdImpl;
1:b31849d: import org.apache.derby.iapi.error.StandardException;
1:0d23c0d: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:b31849d: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * BaseExpressionActivation
1:eac0369:  *
1:eac0369:  * Support needed by Expression evaluators (Filters) and by
1:eac0369:  * ResultSet materializers (Activations)
1:eac0369:  */
1:eac0369: public abstract class BaseExpressionActivation
1:eac0369: {
1:eac0369: 
1:eac0369: 	
1:eac0369: 	//
1:eac0369: 	// constructors
1:eac0369: 	//
1:eac0369: 	BaseExpressionActivation()
1:eac0369: 	{
1:eac0369: 		super();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:c7c5305: 	 * <p>
1:eac0369: 	 * Get the minimum value of 4 input values.  If less than 4 values, input
1:c7c5305: 	 * {@code null} for the unused parameters and place them at the end.
1:c7c5305: 	 * If more than 4 input values, call this multiple times to
1:eac0369: 	 * accumulate results.  Also have judge's type as parameter to have a base
1:eac0369: 	 * upon which the comparison is based.  An example use is for code 
1:eac0369: 	 * generation in bug 3858.
1:c7c5305: 	 * </p>
1:eac0369: 	 * 
1:c7c5305: 	 * <p>
1:c7c5305: 	 * If all the input values are SQL NULL, return SQL NULL. Otherwise, return
1:c7c5305: 	 * the minimum value of the non-NULL inputs.
1:c7c5305: 	 * </p>
1:c7c5305: 	 *
1:eac0369: 	 * @param v1		1st value
1:eac0369: 	 * @param v2		2nd value
1:eac0369: 	 * @param v3		3rd value
1:eac0369: 	 * @param v4		4th value
1:eac0369: 	 * @param judgeTypeFormatId		type format id of the judge
1:eac0369: 	 * @param judgeUserJDBCTypeId	JDBC type id if judge is user type;
1:eac0369: 	 *								-1 if not user type
1:0d23c0d: 	 * @param judgePrecision		precision of the judge
1:0d23c0d: 	 * @param judgeScale		    scale of the judge
1:0d23c0d: 	 * @param judgeIsNullable		nullability of the judge
1:0d23c0d: 	 * @param judgeMaximumWidth		maximum width of the judge
1:0d23c0d: 	 * @param judgeCollationType	collation type of the judge
1:0d23c0d: 	 * @param judgeCollationDerivation		collation derivation of the judge
1:eac0369: 	 *
1:0d23c0d: 	 * @return	The minimum value of the 4. 
1:eac0369: 	 */
1:eac0369: 	public static DataValueDescriptor minValue(DataValueDescriptor v1,
1:eac0369: 											  DataValueDescriptor v2,
1:eac0369: 											  DataValueDescriptor v3,
1:eac0369: 											  DataValueDescriptor v4,
1:eac0369: 											  int judgeTypeFormatId,
1:0d23c0d: 											  int judgeUserJDBCTypeId,
1:0d23c0d: 											  int judgePrecision,
1:0d23c0d: 											  int judgeScale,
1:0d23c0d: 											  boolean judgeIsNullable,
1:0d23c0d: 											  int judgeMaximumWidth,
1:0d23c0d: 											  int judgeCollationType,
1:0d23c0d: 											  int judgeCollationDerivation)
1:eac0369: 										throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor judge;
1:801cf0d: 
1:0d23c0d:         if (judgeUserJDBCTypeId == -1) {
1:0d23c0d:         	judge = new DataTypeDescriptor(
1:0d23c0d:         			new TypeId(judgeTypeFormatId, null),
1:0d23c0d:         			judgePrecision,judgeScale,judgeIsNullable,
1:0d23c0d:         			judgeMaximumWidth,judgeCollationType,
1:0d23c0d:         			judgeCollationDerivation).getNull();
1:801cf0d:         } else {
1:801cf0d:             judge = new TypeId(judgeTypeFormatId,
1:801cf0d:                                new UserDefinedTypeIdImpl()).getNull();
1:801cf0d:         }
1:eac0369: 			
1:eac0369: 		DataValueDescriptor minVal = v1;
1:c7c5305: 		if (v2 != null &&
1:c7c5305: 				(minVal.isNull() || judge.lessThan(v2, minVal).equals(true)))
1:eac0369: 			minVal = v2;
1:c7c5305: 		if (v3 != null &&
1:c7c5305: 				(minVal.isNull() || judge.lessThan(v3, minVal).equals(true)))
1:eac0369: 			minVal = v3;
1:c7c5305: 		if (v4 != null &&
1:c7c5305: 				(minVal.isNull() || judge.lessThan(v4, minVal).equals(true)))
1:eac0369: 			minVal = v4;
1:eac0369: 		return minVal;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:c7c5305: 	 * <p>
1:eac0369: 	 * Get the maximum value of 4 input values.  If less than 4 values, input
1:c7c5305: 	 * {@code null} for the unused parameters and place them at the end.
1:c7c5305: 	 * If more than 4 input values, call this multiple times to
1:eac0369: 	 * accumulate results.  Also have judge's type as parameter to have a base
1:eac0369: 	 * upon which the comparison is based.  An example use is for code 
1:eac0369: 	 * generation in bug 3858.
1:c7c5305: 	 * </p>
1:eac0369: 	 * 
1:c7c5305: 	 * <p>
1:c7c5305: 	 * If all the input values are SQL NULL, return SQL NULL. Otherwise, return
1:c7c5305: 	 * the maximum value of the non-NULL inputs.
1:c7c5305: 	 * </p>
1:c7c5305: 	 *
1:eac0369: 	 * @param v1		1st value
1:eac0369: 	 * @param v2		2nd value
1:eac0369: 	 * @param v3		3rd value
1:eac0369: 	 * @param v4		4th value
1:eac0369: 	 * @param judgeTypeFormatId		type format id of the judge
1:eac0369: 	 * @param judgeUserJDBCTypeId	JDBC type id if judge is user type;
1:eac0369: 	 *								-1 if not user type
1:eac0369: 	 *
1:eac0369: 	 * @return	The maximum value of the 4.
1:eac0369: 	 */
1:eac0369: 	public static DataValueDescriptor maxValue(DataValueDescriptor v1,
1:eac0369: 											  DataValueDescriptor v2,
1:eac0369: 											  DataValueDescriptor v3,
1:eac0369: 											  DataValueDescriptor v4,
1:eac0369: 											  int judgeTypeFormatId,
1:0d23c0d: 											  int judgeUserJDBCTypeId,
1:0d23c0d: 											  int judgePrecision,
1:0d23c0d: 											  int judgeScale,
1:0d23c0d: 											  boolean judgeIsNullable,
1:0d23c0d: 											  int judgeMaximumWidth,
1:0d23c0d: 											  int judgeCollationType,
1:0d23c0d: 											  int judgeCollationDerivation)
1:eac0369: 										throws StandardException
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor judge;
1:801cf0d: 		if (judgeUserJDBCTypeId == -1) {
1:0d23c0d:         	judge = new DataTypeDescriptor(
1:0d23c0d:         			new TypeId(judgeTypeFormatId, null),
1:0d23c0d:         			judgePrecision,judgeScale,judgeIsNullable,
1:0d23c0d:         			judgeMaximumWidth,judgeCollationType,
1:0d23c0d:         			judgeCollationDerivation).getNull();
1:0d23c0d: 		} else
1:eac0369: 			judge =  new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
1:eac0369: 
1:eac0369: 		DataValueDescriptor maxVal = v1;
1:c7c5305: 		if (v2 != null &&
1:c7c5305: 				(maxVal.isNull() || judge.greaterThan(v2, maxVal).equals(true)))
1:eac0369: 			maxVal = v2;
1:c7c5305: 		if (v3 != null &&
1:c7c5305: 				(maxVal.isNull() || judge.greaterThan(v3, maxVal).equals(true)))
1:eac0369: 			maxVal = v3;
1:c7c5305: 		if (v4 != null &&
1:c7c5305: 				(maxVal.isNull() || judge.greaterThan(v4, maxVal).equals(true)))
1:eac0369: 			maxVal = v4;
1:eac0369: 		return maxVal;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:0d23c0d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 	 * @param judgePrecision		precision of the judge
1: 	 * @param judgeScale		    scale of the judge
1: 	 * @param judgeIsNullable		nullability of the judge
1: 	 * @param judgeMaximumWidth		maximum width of the judge
1: 	 * @param judgeCollationType	collation type of the judge
1: 	 * @param judgeCollationDerivation		collation derivation of the judge
1: 	 * @return	The minimum value of the 4. 
1: 											  int judgeUserJDBCTypeId,
1: 											  int judgePrecision,
1: 											  int judgeScale,
1: 											  boolean judgeIsNullable,
1: 											  int judgeMaximumWidth,
1: 											  int judgeCollationType,
1: 											  int judgeCollationDerivation)
1:         	judge = new DataTypeDescriptor(
1:         			new TypeId(judgeTypeFormatId, null),
1:         			judgePrecision,judgeScale,judgeIsNullable,
1:         			judgeMaximumWidth,judgeCollationType,
1:         			judgeCollationDerivation).getNull();
/////////////////////////////////////////////////////////////////////////
1: 											  int judgeUserJDBCTypeId,
1: 											  int judgePrecision,
1: 											  int judgeScale,
1: 											  boolean judgeIsNullable,
1: 											  int judgeMaximumWidth,
1: 											  int judgeCollationType,
1: 											  int judgeCollationDerivation)
1: 		if (judgeUserJDBCTypeId == -1) {
1:         	judge = new DataTypeDescriptor(
1:         			new TypeId(judgeTypeFormatId, null),
1:         			judgePrecision,judgeScale,judgeIsNullable,
1:         			judgeMaximumWidth,judgeCollationType,
1:         			judgeCollationDerivation).getNull();
1: 		} else
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (judgeUserJDBCTypeId == -1) {
0:             judge = new TypeId(judgeTypeFormatId, null).getNull();
1:         } else {
1:             judge = new TypeId(judgeTypeFormatId,
1:                                new UserDefinedTypeIdImpl()).getNull();
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c7c5305
/////////////////////////////////////////////////////////////////////////
1: 	 * <p>
1: 	 * {@code null} for the unused parameters and place them at the end.
1: 	 * If more than 4 input values, call this multiple times to
1: 	 * </p>
1: 	 * <p>
1: 	 * If all the input values are SQL NULL, return SQL NULL. Otherwise, return
1: 	 * the minimum value of the non-NULL inputs.
1: 	 * </p>
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 		if (v2 != null &&
1: 				(minVal.isNull() || judge.lessThan(v2, minVal).equals(true)))
1: 		if (v3 != null &&
1: 				(minVal.isNull() || judge.lessThan(v3, minVal).equals(true)))
1: 		if (v4 != null &&
1: 				(minVal.isNull() || judge.lessThan(v4, minVal).equals(true)))
1: 	 * <p>
1: 	 * {@code null} for the unused parameters and place them at the end.
1: 	 * If more than 4 input values, call this multiple times to
1: 	 * </p>
1: 	 * <p>
1: 	 * If all the input values are SQL NULL, return SQL NULL. Otherwise, return
1: 	 * the maximum value of the non-NULL inputs.
1: 	 * </p>
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 		if (v2 != null &&
1: 				(maxVal.isNull() || judge.greaterThan(v2, maxVal).equals(true)))
1: 		if (v3 != null &&
1: 				(maxVal.isNull() || judge.greaterThan(v3, maxVal).equals(true)))
1: 		if (v4 != null &&
1: 				(maxVal.isNull() || judge.greaterThan(v4, maxVal).equals(true)))
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b31849d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.BaseExpressionActivation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:bff3c2e
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.catalog.types.UserDefinedTypeIdImpl;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.context.Context;
1: 
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
1: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.reference.Attribute;
1: 
0: import org.apache.derby.iapi.sql.ResultSet;
1: 
0: import java.sql.DriverManager;
0: import java.sql.Connection;
0: import java.sql.SQLException;
1: 
1: /**
1:  * BaseExpressionActivation
1:  *
1:  * Support needed by Expression evaluators (Filters) and by
1:  * ResultSet materializers (Activations)
1:  */
1: public abstract class BaseExpressionActivation
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	
1: 	//
1: 	// constructors
1: 	//
1: 	BaseExpressionActivation()
1: 	{
1: 		super();
1: 	}
1: 
1: 
1: 	/**
1: 	 * Get the minimum value of 4 input values.  If less than 4 values, input
0: 	 * NULL.  If more than 4 input values, call this multiple times to
1: 	 * accumulate results.  Also have judge's type as parameter to have a base
1: 	 * upon which the comparison is based.  An example use is for code 
1: 	 * generation in bug 3858.
1: 	 * 
1: 	 * @param v1		1st value
1: 	 * @param v2		2nd value
1: 	 * @param v3		3rd value
1: 	 * @param v4		4th value
1: 	 * @param judgeTypeFormatId		type format id of the judge
1: 	 * @param judgeUserJDBCTypeId	JDBC type id if judge is user type;
1: 	 *								-1 if not user type
1: 	 *
0: 	 * @return	The minimum value of the 4.
1: 	 */
1: 	public static DataValueDescriptor minValue(DataValueDescriptor v1,
1: 											  DataValueDescriptor v2,
1: 											  DataValueDescriptor v3,
1: 											  DataValueDescriptor v4,
1: 											  int judgeTypeFormatId,
0: 											  int judgeUserJDBCTypeId)
1: 										throws StandardException
1: 	{
1: 		DataValueDescriptor judge;
0: 		if (judgeUserJDBCTypeId == -1)
0: 			judge = (DataValueDescriptor) new TypeId(judgeTypeFormatId, null).getNull();
0: 		else
0: 			judge = (DataValueDescriptor) new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
1: 			
1: 		DataValueDescriptor minVal = v1;
0: 		if (v2 != null && judge.lessThan(v2, minVal).equals(true))
1: 			minVal = v2;
0: 		if (v3 != null && judge.lessThan(v3, minVal).equals(true))
1: 			minVal = v3;
0: 		if (v4 != null && judge.lessThan(v4, minVal).equals(true))
1: 			minVal = v4;
1: 		return minVal;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Get the maximum value of 4 input values.  If less than 4 values, input
0: 	 * NULL.  If more than 4 input values, call this multiple times to
1: 	 * accumulate results.  Also have judge's type as parameter to have a base
1: 	 * upon which the comparison is based.  An example use is for code 
1: 	 * generation in bug 3858.
1: 	 * 
1: 	 * @param v1		1st value
1: 	 * @param v2		2nd value
1: 	 * @param v3		3rd value
1: 	 * @param v4		4th value
1: 	 * @param judgeTypeFormatId		type format id of the judge
1: 	 * @param judgeUserJDBCTypeId	JDBC type id if judge is user type;
1: 	 *								-1 if not user type
1: 	 *
1: 	 * @return	The maximum value of the 4.
1: 	 */
1: 	public static DataValueDescriptor maxValue(DataValueDescriptor v1,
1: 											  DataValueDescriptor v2,
1: 											  DataValueDescriptor v3,
1: 											  DataValueDescriptor v4,
1: 											  int judgeTypeFormatId,
0: 											  int judgeUserJDBCTypeId)
1: 										throws StandardException
1: 	{
1: 		DataValueDescriptor judge;
0: 		if (judgeUserJDBCTypeId == -1)
0: 			judge =  new TypeId(judgeTypeFormatId, null).getNull();
0: 		else
1: 			judge =  new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
1: 
1: 		DataValueDescriptor maxVal = v1;
0: 		if (v2 != null && judge.greaterThan(v2, maxVal).equals(true))
1: 			maxVal = v2;
0: 		if (v3 != null && judge.greaterThan(v3, maxVal).equals(true))
1: 			maxVal = v3;
0: 		if (v4 != null && judge.greaterThan(v4, maxVal).equals(true))
1: 			maxVal = v4;
1: 		return maxVal;
1: 	}
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.catalog.types.UserDefinedTypeIdImpl;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.context.Context;
0: 
0: import org.apache.derby.iapi.jdbc.ConnectionContext;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.reference.Attribute;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import java.sql.DriverManager;
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: 
0: /**
0:  * BaseExpressionActivation
0:  *
0:  * Support needed by Expression evaluators (Filters) and by
0:  * ResultSet materializers (Activations)
0:  */
0: public abstract class BaseExpressionActivation
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	
0: 	//
0: 	// constructors
0: 	//
0: 	BaseExpressionActivation()
0: 	{
0: 		super();
0: 	}
0: 
0: 
0: 	/**
0: 	 * Get the minimum value of 4 input values.  If less than 4 values, input
0: 	 * NULL.  If more than 4 input values, call this multiple times to
0: 	 * accumulate results.  Also have judge's type as parameter to have a base
0: 	 * upon which the comparison is based.  An example use is for code 
0: 	 * generation in bug 3858.
0: 	 * 
0: 	 * @param v1		1st value
0: 	 * @param v2		2nd value
0: 	 * @param v3		3rd value
0: 	 * @param v4		4th value
0: 	 * @param judgeTypeFormatId		type format id of the judge
0: 	 * @param judgeUserJDBCTypeId	JDBC type id if judge is user type;
0: 	 *								-1 if not user type
0: 	 *
0: 	 * @return	The minimum value of the 4.
0: 	 */
0: 	public static DataValueDescriptor minValue(DataValueDescriptor v1,
0: 											  DataValueDescriptor v2,
0: 											  DataValueDescriptor v3,
0: 											  DataValueDescriptor v4,
0: 											  int judgeTypeFormatId,
0: 											  int judgeUserJDBCTypeId)
0: 										throws StandardException
0: 	{
0: 		DataValueDescriptor judge;
0: 		if (judgeUserJDBCTypeId == -1)
0: 			judge = (DataValueDescriptor) new TypeId(judgeTypeFormatId, null).getNull();
0: 		else
0: 			judge = (DataValueDescriptor) new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
0: 			
0: 		DataValueDescriptor minVal = v1;
0: 		if (v2 != null && judge.lessThan(v2, minVal).equals(true))
0: 			minVal = v2;
0: 		if (v3 != null && judge.lessThan(v3, minVal).equals(true))
0: 			minVal = v3;
0: 		if (v4 != null && judge.lessThan(v4, minVal).equals(true))
0: 			minVal = v4;
0: 		return minVal;
0: 	}
0: 
0: 
0: 	/**
0: 	 * Get the maximum value of 4 input values.  If less than 4 values, input
0: 	 * NULL.  If more than 4 input values, call this multiple times to
0: 	 * accumulate results.  Also have judge's type as parameter to have a base
0: 	 * upon which the comparison is based.  An example use is for code 
0: 	 * generation in bug 3858.
0: 	 * 
0: 	 * @param v1		1st value
0: 	 * @param v2		2nd value
0: 	 * @param v3		3rd value
0: 	 * @param v4		4th value
0: 	 * @param judgeTypeFormatId		type format id of the judge
0: 	 * @param judgeUserJDBCTypeId	JDBC type id if judge is user type;
0: 	 *								-1 if not user type
0: 	 *
0: 	 * @return	The maximum value of the 4.
0: 	 */
0: 	public static DataValueDescriptor maxValue(DataValueDescriptor v1,
0: 											  DataValueDescriptor v2,
0: 											  DataValueDescriptor v3,
0: 											  DataValueDescriptor v4,
0: 											  int judgeTypeFormatId,
0: 											  int judgeUserJDBCTypeId)
0: 										throws StandardException
0: 	{
0: 		DataValueDescriptor judge;
0: 		if (judgeUserJDBCTypeId == -1)
0: 			judge =  new TypeId(judgeTypeFormatId, null).getNull();
0: 		else
0: 			judge =  new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
0: 
0: 		DataValueDescriptor maxVal = v1;
0: 		if (v2 != null && judge.greaterThan(v2, maxVal).equals(true))
0: 			maxVal = v2;
0: 		if (v3 != null && judge.greaterThan(v3, maxVal).equals(true))
0: 			maxVal = v3;
0: 		if (v4 != null && judge.greaterThan(v4, maxVal).equals(true))
0: 			maxVal = v4;
0: 		return maxVal;
0: 	}
0: 
0: }
============================================================================