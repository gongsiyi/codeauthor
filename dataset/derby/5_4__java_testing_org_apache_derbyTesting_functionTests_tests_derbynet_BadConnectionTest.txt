1:912793e: /*
4:912793e: 
1:912793e:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest
1:166c272: 
1:912793e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:912793e:    contributor license agreements.  See the NOTICE file distributed with
1:912793e:    this work for additional information regarding copyright ownership.
1:912793e:    The ASF licenses this file to You under the Apache License, Version 2.0
1:912793e:    (the "License"); you may not use this file except in compliance with
1:912793e:    the License.  You may obtain a copy of the License at
1:912793e: 
1:912793e:       http://www.apache.org/licenses/LICENSE-2.0
1:912793e: 
1:912793e:    Unless required by applicable law or agreed to in writing, software
1:912793e:    distributed under the License is distributed on an "AS IS" BASIS,
1:912793e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:912793e:    See the License for the specific language governing permissions and
1:912793e:    limitations under the License.
1:912793e: 
1:912793e:  */
1:912793e: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:912793e: 
1:1ae02c9: import java.sql.Connection;
1:1ae02c9: import java.sql.DriverManager;
1:1ae02c9: import java.sql.SQLException;
1:912793e: import java.util.Properties;
1:912793e: import junit.framework.Test;
1:912793e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:912793e: import org.apache.derbyTesting.junit.TestConfiguration;
1:912793e: 
1:912793e: 
1:912793e: /**
1:912793e:  *	This tests some bad attempts at a client connection:
1:912793e:  *		- non-existant database
1:912793e:  *		- lack of user / password attributes
1:912793e:  *		- bad values for valid connection attributes
1:912793e:  */
1:912793e: 
1:912793e: public class BadConnectionTest extends BaseJDBCTestCase
1:912793e: {
1:912793e: 	public void setUp() throws SQLException
1:912793e: 	{
1:912793e: 		// get the default connection so the driver is loaded.
1:e055384: 		getConnection().close();
1:912793e: 	}
1:912793e: 	
1:912793e: 	/**
1:912793e: 	 * Try to connect without a username or password.
1:912793e: 	 * Should fail with SQLState 08004.
1:912793e: 	 */
1:912793e: 	public void testNoUserOrPassword()
1:912793e: 	{
1:912793e: 		try {
1:166c272: 			Connection c = DriverManager.getConnection(
1:e055384: 					"jdbc:derby://" + getTestConfiguration().getHostName()
1:e055384:                     + ":" + getTestConfiguration().getPort() + "/testbase");
1:e055384:             fail("Connection with no user or password succeeded");
1:912793e: 		} catch (SQLException e) {
1:912793e: 			assertSQLState("08004", e);
1:b54db0f:             assertErrorCode(40000, e);
1:912793e: 		}
1:912793e: 	}
1:912793e: 	
1:912793e: 	/**
1:912793e: 	 * Try to connect to a non-existent database without create=true.
1:912793e: 	 * Should fail with SQLState 08004.
1:912793e: 	 */
1:912793e: 	public void testDatabaseNotFound()
1:912793e: 	{
1:912793e: 		try {
1:912793e: 			Properties p = new Properties();
1:912793e: 			p.put("user", "admin");
1:912793e: 			p.put("password", "admin");
1:166c272: 			Connection c = DriverManager.getConnection(
1:e055384: 					"jdbc:derby://" + getTestConfiguration().getHostName()
1:e055384:                     + ":" + getTestConfiguration().getPort() + "/testbase", p);
1:e055384:             fail("Connection with no database succeeded");
1:912793e: 		} catch (SQLException e)
1:912793e: 		{
1:912793e: 			assertSQLState("08004", e);
1:b54db0f:             assertErrorCode(40000, e);
1:912793e: 		}
1:912793e: 	}
1:912793e: 	
1:912793e: 	/**
1:912793e: 	 * Check that only valid values for connection attributes are accepted.
1:912793e: 	 * For this check, we attempt to connect using the upgrade attribute
1:912793e: 	 * with an invalid value.
1:912793e: 	 * 
1:912793e:      * Should fail with SQLState XJ05B.
1:912793e: 	 */
1:912793e: 	public void testBadConnectionAttribute()
1:912793e: 	{
1:912793e: 		try {
1:166c272: 			Connection c = DriverManager.getConnection(
1:e055384: 					"jdbc:derby://" + getTestConfiguration().getHostName()
1:e055384:                     + ":" + getTestConfiguration().getPort() + "/badAttribute;upgrade=notValidValue");
1:e055384:             fail("Connection with bad atttributes succeeded");
1:912793e: 		} catch (SQLException e)
1:912793e: 		{
1:912793e: 			assertSQLState("XJ05B", e);
1:b54db0f:             assertErrorCode(40000, e);
1:912793e: 		}
1:912793e: 	}
1:912793e: 
1:912793e: 	public BadConnectionTest(String name)
1:912793e: 	{
1:912793e: 		super(name);
1:912793e: 	}
1:912793e: 	
1:912793e: 	public static Test suite()
1:912793e: 	{
1:e055384: 		return TestConfiguration.clientServerSuite(BadConnectionTest.class);
1:912793e: 	}
1:912793e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:b54db0f
/////////////////////////////////////////////////////////////////////////
1:             assertErrorCode(40000, e);
/////////////////////////////////////////////////////////////////////////
1:             assertErrorCode(40000, e);
/////////////////////////////////////////////////////////////////////////
1:             assertErrorCode(40000, e);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e055384
/////////////////////////////////////////////////////////////////////////
1: 		getConnection().close();
/////////////////////////////////////////////////////////////////////////
1: 					"jdbc:derby://" + getTestConfiguration().getHostName()
1:                     + ":" + getTestConfiguration().getPort() + "/testbase");
1:             fail("Connection with no user or password succeeded");
/////////////////////////////////////////////////////////////////////////
1: 					"jdbc:derby://" + getTestConfiguration().getHostName()
1:                     + ":" + getTestConfiguration().getPort() + "/testbase", p);
1:             fail("Connection with no database succeeded");
/////////////////////////////////////////////////////////////////////////
1: 					"jdbc:derby://" + getTestConfiguration().getHostName()
1:                     + ":" + getTestConfiguration().getPort() + "/badAttribute;upgrade=notValidValue");
1:             fail("Connection with bad atttributes succeeded");
/////////////////////////////////////////////////////////////////////////
1: 		return TestConfiguration.clientServerSuite(BadConnectionTest.class);
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:cb47a36
/////////////////////////////////////////////////////////////////////////
0: 			assertEquals(40000, e.getErrorCode());
/////////////////////////////////////////////////////////////////////////
0: 			assertEquals(40000, e.getErrorCode());
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:166c272
/////////////////////////////////////////////////////////////////////////
0: 	private static String host;
0: 	private static int port;
1: 
0: 		//
0: 		// host and port are set here, if set at the time the
0: 		// class is instantiated, they will get the default 
0: 		// embedded 'port' of -1.
0: 		host = TestConfiguration.getCurrent().getHostName();
0: 		port = TestConfiguration.getCurrent().getPort();
/////////////////////////////////////////////////////////////////////////
1: 			Connection c = DriverManager.getConnection(
0: 					"jdbc:derby://" + host + ":" + port + "/testbase");
/////////////////////////////////////////////////////////////////////////
1: 			Connection c = DriverManager.getConnection(
0: 					"jdbc:derby://" + host + ":" + port + "/testbase", p);
/////////////////////////////////////////////////////////////////////////
1: 			Connection c = DriverManager.getConnection(
0: 					"jdbc:derby://" + host + ":" + port + "/badAttribute;upgrade=notValidValue");
commit:912793e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import java.sql.*;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: 
1: /**
1:  *	This tests some bad attempts at a client connection:
1:  *		- non-existant database
1:  *		- lack of user / password attributes
1:  *		- bad values for valid connection attributes
1:  */
1: 
1: public class BadConnectionTest extends BaseJDBCTestCase
1: {
1: 	
1: 	public void setUp() throws SQLException
1: 	{
1: 		// get the default connection so the driver is loaded.
0: 		Connection c = getConnection();
0: 		c.close();
1: 	}
1: 	
1: 	/**
1: 	 * Try to connect without a username or password.
1: 	 * Should fail with SQLState 08004.
1: 	 */
1: 	public void testNoUserOrPassword()
1: 	{
1: 		try {
0: 			Connection c = DriverManager.getConnection("jdbc:derby://localhost:1527/testbase");
1: 		} catch (SQLException e) {
1: 			assertSQLState("08004", e);
0: 			assertEquals(-4499, e.getErrorCode());
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Try to connect to a non-existent database without create=true.
1: 	 * Should fail with SQLState 08004.
1: 	 */
1: 	public void testDatabaseNotFound()
1: 	{
1: 		try {
1: 			Properties p = new Properties();
1: 			p.put("user", "admin");
1: 			p.put("password", "admin");
0: 			Connection c = DriverManager.getConnection("jdbc:derby://localhost:1527/testbase", p);
1: 		} catch (SQLException e)
1: 		{
1: 			assertSQLState("08004", e);
0: 			assertEquals(-4499, e.getErrorCode());
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Check that only valid values for connection attributes are accepted.
1: 	 * For this check, we attempt to connect using the upgrade attribute
1: 	 * with an invalid value.
1: 	 * 
1:      * Should fail with SQLState XJ05B.
1: 	 */
1: 	public void testBadConnectionAttribute()
1: 	{
1: 		try {
0: 			Connection c = DriverManager.getConnection("jdbc:derby://localhost:1527/badAttribute;upgrade=notValidValue");
1: 		} catch (SQLException e)
1: 		{
1: 			assertSQLState("XJ05B", e);
0: 			assertEquals(-1, e.getErrorCode());
1: 		}
1: 	}
1: 
1: 	public BadConnectionTest(String name)
1: 	{
1: 		super(name);
1: 	}
1: 	
1: 	public static Test suite()
1: 	{
0: 		return TestConfiguration.clientServerDecorator(
0: 			new TestSuite(BadConnectionTest.class, "BadConnection"));
1: 	}
1: }
============================================================================