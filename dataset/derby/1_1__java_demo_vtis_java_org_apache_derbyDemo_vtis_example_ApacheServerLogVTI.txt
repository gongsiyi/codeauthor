1:b7ecfd9: /*
1:b7ecfd9: 
1:b7ecfd9: Derby - Class org.apache.derbyDemo.vtis.example.ApacheServerLogVTI
1:b7ecfd9: 
1:b7ecfd9: Licensed to the Apache Software Foundation (ASF) under one or more
1:b7ecfd9: contributor license agreements.  See the NOTICE file distributed with
1:b7ecfd9: this work for additional information regarding copyright ownership.
1:b7ecfd9: The ASF licenses this file to You under the Apache License, Version 2.0
1:b7ecfd9: (the "License"); you may not use this file except in compliance with
1:b7ecfd9: the License.  You may obtain a copy of the License at
1:b7ecfd9: 
1:b7ecfd9: http://www.apache.org/licenses/LICENSE-2.0
1:b7ecfd9: 
1:b7ecfd9: Unless required by applicable law or agreed to in writing, software
1:b7ecfd9: distributed under the License is distributed on an "AS IS" BASIS,
1:b7ecfd9: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7ecfd9: See the License for the specific language governing permissions and
1:b7ecfd9: limitations under the License.
1:b7ecfd9: 
1:b7ecfd9: */
1:b7ecfd9: 
1:b7ecfd9: package org.apache.derbyDemo.vtis.example;
1:b7ecfd9: 
1:66ed4a2: import java.io.FileInputStream;
1:fae21bf: import java.io.InputStream;
1:b7ecfd9: import java.sql.*;
1:b7ecfd9: import java.text.SimpleDateFormat;
1:b7ecfd9: 
1:fae21bf: import org.apache.derby.vti.XmlVTI;
1:b7ecfd9: import org.apache.derbyDemo.vtis.core.*;
1:b7ecfd9: 
1:b7ecfd9: /**
1:b7ecfd9:  * <p>
1:b7ecfd9:  * This is an XML-reading VTI which has been tweaked to handle
1:b7ecfd9:  * the formatting of timestamps and nulls found in Apache
1:b7ecfd9:  * server logs.
1:b7ecfd9:  * </p>
1:b7ecfd9:  *
1:b7ecfd9:   */
1:b7ecfd9: public  class   ApacheServerLogVTI  extends XmlVTI
3:b7ecfd9: {
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTANTS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // STATE
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     private SimpleDateFormat    _dateFormatter;
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTRUCTORS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Construct from the same arguments as our superclass.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:fae21bf:     public  ApacheServerLogVTI( InputStream is )
1:fae21bf:         throws Exception
1:fae21bf:     {        
1:fae21bf:         super
1:fae21bf:             (
1:fae21bf:              is,
1:fae21bf:              "Visitor",
1:fae21bf:              0,
1:fae21bf:              "IP", "accessDate", "request", "statusCode", "fileSize", "referrer", "userAgent"
1:fae21bf:              );
2:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:fae21bf:     // FUNCTION ENTRY POINT (BOUND BY THE CREATE FUNCTION STATEMENT)
1:fae21bf:     //
1:fae21bf:     ///////////////////////////////////////////////////////////////////////////////////
1:fae21bf: 
1:66ed4a2:     /** Create from a file name identifying the server log file */
1:fae21bf:     public  static  ApacheServerLogVTI  apacheNaturalLogFile( String xmlResourceName )
1:fae21bf:         throws Exception
1:fae21bf:     {
1:66ed4a2:         return new ApacheServerLogVTI( new FileInputStream( xmlResourceName ) );
1:fae21bf:     }
1:fae21bf:     
1:fae21bf: 
1:fae21bf:     ///////////////////////////////////////////////////////////////////////////////////
1:fae21bf:     //
1:19d913d:     // OVERRIDES
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * The Apache Server's logs represent nulls as "-".
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:19d913d:     public String getRawColumn(int columnIndex) throws SQLException
1:b7ecfd9:     {
1:19d913d:         String  columnValue = super.getRawColumn( columnIndex );
1:b7ecfd9: 
1:19d913d:         if ( "-".equals( columnValue ) ) { return null; }
1:b7ecfd9:         else { return columnValue; }
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * The Apache Server's logs format timestamps thusly: "01/Jul/2002:17:31:19 +0200"
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         String          columnValue = getString( columnIndex );
1:b7ecfd9: 
1:b7ecfd9:         try {
1:b7ecfd9:             SimpleDateFormat    dateFormatter = getDateFormatter();
1:b7ecfd9:             java.util.Date              rawDate = dateFormatter.parse( columnValue );
1:b7ecfd9:             long                            time = rawDate.getTime();
1:b7ecfd9: 
1:b7ecfd9:             return new java.sql.Timestamp( time );            
1:b7ecfd9: 
1:b7ecfd9:         } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // MINIONS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * The Apache Server's logs format timestamps thusly: "01/Jul/2002:17:31:19 +0200"
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     private SimpleDateFormat    getDateFormatter()
1:b7ecfd9:     {
1:b7ecfd9:         if ( _dateFormatter == null )
1:b7ecfd9:         {
1:b7ecfd9:             _dateFormatter = new SimpleDateFormat( "dd/MMM/yyyy:HH:mm:ss Z" );
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         return _dateFormatter;
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9: 
1:b7ecfd9: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:66ed4a2
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
/////////////////////////////////////////////////////////////////////////
1:     /** Create from a file name identifying the server log file */
1:         return new ApacheServerLogVTI( new FileInputStream( xmlResourceName ) );
commit:fae21bf
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
0: import java.net.URL;
1: import org.apache.derby.vti.XmlVTI;
/////////////////////////////////////////////////////////////////////////
1:     public  ApacheServerLogVTI( InputStream is )
1:         throws Exception
1:     {        
1:         super
1:             (
1:              is,
1:              "Visitor",
1:              0,
1:              "IP", "accessDate", "request", "statusCode", "fileSize", "referrer", "userAgent"
1:              );
1:     // FUNCTION ENTRY POINT (BOUND BY THE CREATE FUNCTION STATEMENT)
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
0:     /** Create from an URL string identifying the server log file */
1:     public  static  ApacheServerLogVTI  apacheNaturalLogFile( String xmlResourceName )
1:         throws Exception
1:     {
0:         return new ApacheServerLogVTI( (new URL( xmlResourceName )).openStream() );
1:     }
1:     
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
commit:19d913d
/////////////////////////////////////////////////////////////////////////
1:     // OVERRIDES
/////////////////////////////////////////////////////////////////////////
1:     public String getRawColumn(int columnIndex) throws SQLException
1:         String  columnValue = super.getRawColumn( columnIndex );
1:         if ( "-".equals( columnValue ) ) { return null; }
commit:b7ecfd9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyDemo.vtis.example.ApacheServerLogVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyDemo.vtis.example;
1: 
1: import java.sql.*;
1: import java.text.SimpleDateFormat;
1: 
1: import org.apache.derbyDemo.vtis.core.*;
1: 
1: /**
1:  * <p>
1:  * This is an XML-reading VTI which has been tweaked to handle
1:  * the formatting of timestamps and nulls found in Apache
1:  * server logs.
1:  * </p>
1:  *
1:   */
1: public  class   ApacheServerLogVTI  extends XmlVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private SimpleDateFormat    _dateFormatter;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Construct from the same arguments as our superclass.
1:      * </p>
1:      */
0:     public  ApacheServerLogVTI( String xmlResourceName, String rowTag, String[] childTags )
1:     {
0:         super( xmlResourceName, rowTag, childTags );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
0:     // ResultSet BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * The Apache Server's logs represent nulls as "-".
1:      * </p>
1:      */
0:     public String getString(int columnIndex) throws SQLException
1:     {
0:         String  columnValue = super.getString( columnIndex );
1: 
0:         if ( "-".equals( columnValue ) )
1:         {
0:             setWasNull();
0:             return null;
1:         }
1:         else { return columnValue; }
1:     }
1: 
1:     /**
1:      * <p>
1:      * The Apache Server's logs format timestamps thusly: "01/Jul/2002:17:31:19 +0200"
1:      * </p>
1:      */
1:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException
1:     {
1:         String          columnValue = getString( columnIndex );
1: 
1:         try {
1:             SimpleDateFormat    dateFormatter = getDateFormatter();
1:             java.util.Date              rawDate = dateFormatter.parse( columnValue );
1:             long                            time = rawDate.getTime();
1: 
1:             return new java.sql.Timestamp( time );            
1: 
1:         } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * The Apache Server's logs format timestamps thusly: "01/Jul/2002:17:31:19 +0200"
1:      * </p>
1:      */
1:     private SimpleDateFormat    getDateFormatter()
1:     {
1:         if ( _dateFormatter == null )
1:         {
1:             _dateFormatter = new SimpleDateFormat( "dd/MMM/yyyy:HH:mm:ss Z" );
1:         }
1: 
1:         return _dateFormatter;
1:     }
1: 
1: 
1: }
============================================================================