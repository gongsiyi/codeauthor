1:ee59de8: /*
1:ee59de8: 
1:4e3ddd7:    Derby - Class org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor
1:ee59de8: 
1:ee59de8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ee59de8:    contributor license agreements.  See the NOTICE file distributed with
1:ee59de8:    this work for additional information regarding copyright ownership.
1:ee59de8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:ee59de8:    (the "License"); you may not use this file except in compliance with
1:ee59de8:    the License.  You may obtain a copy of the License at
1:ee59de8: 
1:ee59de8:       http://www.apache.org/licenses/LICENSE-2.0
1:ee59de8: 
1:ee59de8:    Unless required by applicable law or agreed to in writing, software
1:ee59de8:    distributed under the License is distributed on an "AS IS" BASIS,
1:ee59de8:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee59de8:    See the License for the specific language governing permissions and
1:ee59de8:    limitations under the License.
1:ee59de8: 
1:ee59de8:  */
1:ee59de8: 
1:ee59de8: package org.apache.derby.iapi.sql.dictionary;
1:ee59de8: 
1:f717f79: import org.apache.derby.catalog.UUID;
1:f717f79: import org.apache.derby.catalog.DependableFinder;
1:f717f79: import org.apache.derby.catalog.Dependable;
1:ee59de8: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:f717f79: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:ee59de8: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:f717f79: import org.apache.derby.iapi.sql.depend.Provider;
1:ee59de8: import org.apache.derby.iapi.store.access.TransactionController;
1:ee59de8: 
1:ee59de8: /**
1:ee59de8:  * This class is used by rows in the SYS.SYSROLES system table.
1:4e3ddd7:  *
1:fe8c4c2:  * An instance contains information for exactly: One &lt;role
1:fe8c4c2:  * definition&gt;, cf. ISO/IEC 9075-2:2003 section 12.4
1:fe8c4c2:  * <bold>or</bold> one &lt;grant role statement&gt;, section 12.5.
1:4e3ddd7:  *
1:4e3ddd7:  * A role definition is also modeled as a role grant (hence the class
1:4e3ddd7:  * name), but with the special grantor "_SYSTEM", and with a grantee
1:4e3ddd7:  * of the definer, in Derby this is always the current user. For a
1:4e3ddd7:  * role definition, the WITH ADMIN flag is also set. The information
1:4e3ddd7:  * contained in the isDef flag is usually redundant, but was added as
1:4e3ddd7:  * a precaution against a real user named _SYSTEM, for example when
1:4e3ddd7:  * upgrading an older database that did not forbid this.
1:ee59de8:  */
1:4e3ddd7: public class RoleGrantDescriptor extends TupleDescriptor
1:4e3ddd7:     implements Provider
1:ee59de8: {
1:f717f79:     private final UUID uuid;
1:ee59de8:     private final String roleName;
1:ee59de8:     private final String grantee;
1:ee59de8:     private final String grantor;
1:ee59de8:     private boolean withAdminOption;
1:ee59de8:     private final boolean isDef; // if true, represents a role
1:ee59de8:                                  // definition, else a grant
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Constructor
1:ee59de8:      *
1:ee59de8:      * @param dd data dictionary
1:f717f79:      * @param uuid  unique identification in time and space of this role
1:f717f79:      *              descriptor
1:ee59de8:      * @param roleName
1:ee59de8:      * @param grantee
1:ee59de8:      * @param grantor
1:ee59de8:      * @param withAdminOption
1:ee59de8:      * @param isDef
1:ee59de8:      *
1:ee59de8:      */
1:0674d16:     public RoleGrantDescriptor(DataDictionary dd,
1:0674d16:                                UUID uuid,
1:0674d16:                                String roleName,
1:0674d16:                                String grantee,
1:0674d16:                                String grantor,
1:0674d16:                                boolean withAdminOption,
1:0674d16:                                boolean isDef) {
1:ee59de8:         super(dd);
1:f717f79:         this.uuid = uuid;
1:ee59de8:         this.roleName = roleName;
1:ee59de8:         this.grantee = grantee;
1:ee59de8:         this.grantor = grantor;
1:ee59de8:         this.withAdminOption = withAdminOption;
1:ee59de8:         this.isDef = isDef;
1:ee59de8:     }
1:7e729b6: 
1:f717f79:     public UUID getUUID() {
1:f717f79:         return uuid;
1:f717f79:     }
1:f717f79: 
1:ee59de8:     public String getGrantee() {
1:ee59de8:         return grantee;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public String getGrantor() {
1:ee59de8:         return grantor;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public boolean isDef() {
1:ee59de8:         return isDef;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public String getRoleName() {
1:ee59de8:         return roleName;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public boolean isWithAdminOption() {
1:ee59de8:         return withAdminOption;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public void setWithAdminOption(boolean b) {
1:ee59de8:         withAdminOption = b;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public String toString() {
1:ee59de8:         if (SanityManager.DEBUG) {
1:f717f79:             return "uuid: " + uuid + "\n" +
1:f717f79:                 "roleName: " + roleName + "\n" +
1:ee59de8:                 "grantor: " + grantor + "\n" +
1:ee59de8:                 "grantee: " + grantee + "\n" +
1:ee59de8:                 "withadminoption: " + withAdminOption + "\n" +
1:ee59de8:                 "isDef: " + isDef + "\n";
1:ee59de8:         } else {
1:ee59de8:             return "";
1:ee59de8:         }
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public String getDescriptorType()
1:ee59de8:     {
1:ee59de8:         return "Role";
1:ee59de8:     }
1:ee59de8: 
1:ee59de8:     public String getDescriptorName()
1:ee59de8:     {
1:ee59de8:         return roleName + " " + grantor + " " + grantee;
1:ee59de8:     }
1:ee59de8: 
1:ee59de8: 
1:ee59de8:     /**
1:ee59de8:      * Drop this role.descriptor
1:ee59de8:      *
1:ee59de8:      * @throws StandardException Could not be dropped.
1:ee59de8:      */
1:ee59de8:     public void drop(LanguageConnectionContext lcc) throws StandardException
1:ee59de8:     {
1:ee59de8:         DataDictionary dd = getDataDictionary();
1:ee59de8:         TransactionController tc = lcc.getTransactionExecute();
1:ee59de8: 
1:4e3ddd7:         dd.dropRoleGrant(roleName, grantee, grantor, tc);
1:ee59de8:     }
1:ee59de8: 
1:7e729b6:     //////////////////////////////////////////////
1:7e729b6:     //
1:7e729b6:     // PROVIDER INTERFACE
1:7e729b6:     //
1:7e729b6:     //////////////////////////////////////////////
1:7e729b6: 
1:7e729b6:     /**
1:7e729b6:      * Get the provider's UUID
1:7e729b6:      *
1:7e729b6:      * @return The provider's UUID
1:7e729b6:      */
1:7e729b6:     public UUID getObjectID()
1:7e729b6:     {
1:7e729b6:         return uuid;
1:7e729b6:     }
1:7e729b6: 
1:7e729b6:     /**
1:7e729b6:      * Is this provider persistent?  A stored dependency will be required
1:7e729b6:      * if both the dependent and provider are persistent.
1:7e729b6:      *
1:7e729b6:      * @return boolean              Whether or not this provider is persistent.
1:7e729b6:      */
1:7e729b6:     public boolean isPersistent()
1:7e729b6:     {
1:7e729b6:         return true;
1:7e729b6:     }
1:7e729b6: 
1:7e729b6:     /**
1:7e729b6:      * Return the name of this Provider.  (Useful for errors.)
1:7e729b6:      *
1:7e729b6:      * @return String   The name of this provider.
1:7e729b6:      */
1:7e729b6:     public String getObjectName()
1:7e729b6:     {
1:7e729b6:         return ((isDef ? "CREATE ROLE: " : "GRANT ROLE: ") + roleName +
1:7e729b6:                 " GRANT TO: " + grantee +
1:7e729b6:                 " GRANTED BY: " + grantor +
1:7e729b6:                 (withAdminOption? " WITH ADMIN OPTION" : ""));
1:7e729b6:     }
1:7e729b6: 
1:7e729b6:     /**
1:7e729b6:      * Get the provider's type.
1:7e729b6:      *
1:7e729b6:      * @return char         The provider's type.
1:7e729b6:      */
1:7e729b6:     public String getClassType()
1:7e729b6:     {
1:7e729b6:         return Dependable.ROLE_GRANT;
1:7e729b6:     }
1:7e729b6: 
1:7e729b6:     /**
1:7e729b6:      *  @return the stored form of this provider
1:7e729b6:      *
1:7e729b6:      *  @see Dependable#getDependableFinder
1:7e729b6:      */
1:7e729b6:     public DependableFinder getDependableFinder()
1:7e729b6:     {
1:999e32a:         return getDependableFinder(StoredFormatIds.ROLE_GRANT_FINDER_V01_ID);
1:7e729b6:     }
1:ee59de8: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:999e32a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return getDependableFinder(StoredFormatIds.ROLE_GRANT_FINDER_V01_ID);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0674d16
/////////////////////////////////////////////////////////////////////////
1:     public RoleGrantDescriptor(DataDictionary dd,
1:                                UUID uuid,
1:                                String roleName,
1:                                String grantee,
1:                                String grantor,
1:                                boolean withAdminOption,
1:                                boolean isDef) {
commit:fe8c4c2
/////////////////////////////////////////////////////////////////////////
1:  * An instance contains information for exactly: One &lt;role
1:  * definition&gt;, cf. ISO/IEC 9075-2:2003 section 12.4
1:  * <bold>or</bold> one &lt;grant role statement&gt;, section 12.5.
commit:4e3ddd7
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * An instance contains information for exactly:
0:  * One <role definition>, cf. ISO/IEC 9075-2:2003 section 12.4 *or*
0:  * one <grant role statement>, section 12.5.
1:  *
1:  * A role definition is also modeled as a role grant (hence the class
1:  * name), but with the special grantor "_SYSTEM", and with a grantee
1:  * of the definer, in Derby this is always the current user. For a
1:  * role definition, the WITH ADMIN flag is also set. The information
1:  * contained in the isDef flag is usually redundant, but was added as
1:  * a precaution against a real user named _SYSTEM, for example when
1:  * upgrading an older database that did not forbid this.
1: public class RoleGrantDescriptor extends TupleDescriptor
1:     implements Provider
/////////////////////////////////////////////////////////////////////////
0:     RoleGrantDescriptor(DataDictionary dd,
0:                         UUID uuid,
0:                         String roleName,
0:                         String grantee,
0:                         String grantor,
0:                         boolean withAdminOption,
0:                         boolean isDef) {
/////////////////////////////////////////////////////////////////////////
1:         dd.dropRoleGrant(roleName, grantee, grantor, tc);
commit:7e729b6
/////////////////////////////////////////////////////////////////////////
0:                                     implements Provider
/////////////////////////////////////////////////////////////////////////
1: 
1:     //////////////////////////////////////////////
1:     //
1:     // PROVIDER INTERFACE
1:     //
1:     //////////////////////////////////////////////
1: 
1:     /**
1:      * Get the provider's UUID
1:      *
1:      * @return The provider's UUID
1:      */
1:     public UUID getObjectID()
1:     {
1:         return uuid;
1:     }
1: 
1:     /**
1:      * Is this provider persistent?  A stored dependency will be required
1:      * if both the dependent and provider are persistent.
1:      *
1:      * @return boolean              Whether or not this provider is persistent.
1:      */
1:     public boolean isPersistent()
1:     {
1:         return true;
1:     }
1: 
1:     /**
1:      * Return the name of this Provider.  (Useful for errors.)
1:      *
1:      * @return String   The name of this provider.
1:      */
1:     public String getObjectName()
1:     {
1:         return ((isDef ? "CREATE ROLE: " : "GRANT ROLE: ") + roleName +
1:                 " GRANT TO: " + grantee +
1:                 " GRANTED BY: " + grantor +
1:                 (withAdminOption? " WITH ADMIN OPTION" : ""));
1:     }
1: 
1:     /**
1:      * Get the provider's type.
1:      *
1:      * @return char         The provider's type.
1:      */
1:     public String getClassType()
1:     {
1:         return Dependable.ROLE_GRANT;
1:     }
1: 
1:     /**
1:      *  @return the stored form of this provider
1:      *
1:      *  @see Dependable#getDependableFinder
1:      */
1:     public DependableFinder getDependableFinder()
1:     {
0:         return new DDdependableFinder(StoredFormatIds.ROLE_GRANT_FINDER_V01_ID);
1:     }
commit:f717f79
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.Dependable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.impl.sql.catalog.DDdependableFinder;
1:     private final UUID uuid;
/////////////////////////////////////////////////////////////////////////
1:      * @param uuid  unique identification in time and space of this role
1:      *              descriptor
/////////////////////////////////////////////////////////////////////////
0:                    UUID uuid,
1:         this.uuid = uuid;
/////////////////////////////////////////////////////////////////////////
1:     public UUID getUUID() {
1:         return uuid;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             return "uuid: " + uuid + "\n" +
1:                 "roleName: " + roleName + "\n" +
commit:ee59de8
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.iapi.sql.dictionary.RoleDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: /**
1:  * This class is used by rows in the SYS.SYSROLES system table.
1:  */
0: public class RoleDescriptor extends TupleDescriptor
1: {
1:     private final String roleName;
1:     private final String grantee;
1:     private final String grantor;
1:     private boolean withAdminOption;
1:     private final boolean isDef; // if true, represents a role
1:                                  // definition, else a grant
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param dd data dictionary
1:      * @param roleName
1:      * @param grantee
1:      * @param grantor
1:      * @param withAdminOption
1:      * @param isDef
1:      *
1:      */
0:     RoleDescriptor(DataDictionary dd,
0:                    String roleName,
0:                    String grantee,
0:                    String grantor,
0:                    boolean withAdminOption,
0:                    boolean isDef) {
1:         super(dd);
1:         this.roleName = roleName;
1:         this.grantee = grantee;
1:         this.grantor = grantor;
1:         this.withAdminOption = withAdminOption;
1:         this.isDef = isDef;
1:     }
1: 
1:     public String getGrantee() {
1:         return grantee;
1:     }
1: 
1:     public String getGrantor() {
1:         return grantor;
1:     }
1: 
1:     public boolean isDef() {
1:         return isDef;
1:     }
1: 
1:     public String getRoleName() {
1:         return roleName;
1:     }
1: 
1:     public boolean isWithAdminOption() {
1:         return withAdminOption;
1:     }
1: 
1:     public void setWithAdminOption(boolean b) {
1:         withAdminOption = b;
1:     }
1: 
1:     public String toString() {
1:         if (SanityManager.DEBUG) {
0:             return "roleName: " + roleName + "\n" +
1:                 "grantor: " + grantor + "\n" +
1:                 "grantee: " + grantee + "\n" +
1:                 "withadminoption: " + withAdminOption + "\n" +
1:                 "isDef: " + isDef + "\n";
1:         } else {
1:             return "";
1:         }
1:     }
1: 
1:     public String getDescriptorType()
1:     {
1:         return "Role";
1:     }
1: 
1:     public String getDescriptorName()
1:     {
1:         return roleName + " " + grantor + " " + grantee;
1:     }
1: 
1: 
1:     /**
1:      * Drop this role.descriptor
1:      *
1:      * @throws StandardException Could not be dropped.
1:      */
1:     public void drop(LanguageConnectionContext lcc) throws StandardException
1:     {
1:         DataDictionary dd = getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1: 
0:         dd.dropRoleDescriptor(roleName, grantee, grantor, tc);
1:     }
1: }
============================================================================