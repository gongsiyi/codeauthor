1:a69fa12: /*
1:a69fa12: 
1:a69fa12:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl
1:a69fa12: 
1:a69fa12:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a69fa12:    contributor license agreements.  See the NOTICE file distributed with
1:a69fa12:    this work for additional information regarding copyright ownership.
1:a69fa12:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a69fa12:    (the "License"); you may not use this file except in compliance with
1:a69fa12:    the License.  You may obtain a copy of the License at
1:a69fa12: 
1:a69fa12:       http://www.apache.org/licenses/LICENSE-2.0
1:a69fa12: 
1:a69fa12:    Unless required by applicable law or agreed to in writing, software
1:a69fa12:    distributed under the License is distributed on an "AS IS" BASIS,
1:a69fa12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a69fa12:    See the License for the specific language governing permissions and
1:a69fa12:    limitations under the License.
1:a69fa12: 
2:a69fa12:  */
1:a69fa12: package org.apache.derbyTesting.functionTests.tests.compatibility;
1:a69fa12: 
1:a69fa12: import java.io.File;
1:8294912: import java.net.URI;
1:a69fa12: 
1:a69fa12: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:a69fa12: import org.apache.derbyTesting.junit.DerbyDistribution;
1:a69fa12: import org.apache.derbyTesting.junit.DerbyVersion;
1:a69fa12: import org.apache.derbyTesting.junit.SpawnedProcess;
1:a69fa12: import org.apache.derbyTesting.junit.TestConfiguration;
1:a69fa12: 
2:a69fa12: /**
1:a69fa12:  * Spawns the JVM process running the compatibility tests for the given client
1:a69fa12:  * version.
1:a69fa12:  */
1:a69fa12: public class ClientCompatibilityRunControl
1:a69fa12:         extends BaseJDBCTestCase {
1:a69fa12: 
1:a69fa12:     static final String LOB_TESTING_PROP = "derby.tests.compat.testLOBs";
1:a69fa12: 
1:a69fa12:     /** The descriptive name of the test case. */
1:a69fa12:     private final String realName;
1:a69fa12:     /** The Derby client to use. */
1:a69fa12:     private final DerbyDistribution clientDist;
1:a69fa12:     /** The Derby version we expect to connect to. */
1:a69fa12:     private final DerbyVersion serverVersion;
1:a69fa12:     /** Path to the testing code to use (typically from trunk). */
1:a69fa12:     private final String testingPath;
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * Creates a control object for the given client version.
1:a69fa12:      *
1:a69fa12:      * @param client the Derby client to use
1:a69fa12:      * @param testingPath path to the testing code to use (typically
1:a69fa12:      *      {@literal derbyTesting.jar} from trunk)
1:a69fa12:      * @param serverVersion the expected server version
1:a69fa12:      */
1:a69fa12:     public ClientCompatibilityRunControl(DerbyDistribution client,
1:a69fa12:                                          String testingPath,
1:a69fa12:                                          DerbyVersion serverVersion) {
1:a69fa12:         super("testClient");
1:a69fa12:         this.clientDist = client;
1:a69fa12:         this.testingPath = testingPath;
1:a69fa12:         this.serverVersion = serverVersion;
1:a69fa12:         this.realName = "combination(client " + client.getVersion().toString() +
1:a69fa12:                 " <> server " + serverVersion.toString() + ")";
2:a69fa12:     }
1:a69fa12: 
1:a69fa12:     @Override
1:a69fa12:     public String getName() {
1:a69fa12:         return realName;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * Runs the client compatibility test suite with the client driver in a
1:a69fa12:      * separate JVM.
1:a69fa12:      * <p>
1:a69fa12:      * The server is expected to be running already.
1:a69fa12:      */
1:a69fa12:     public void testClient()
1:a69fa12:             throws Exception {
1:a69fa12:         boolean testLOBs = Boolean.parseBoolean(
1:a69fa12:                 getSystemProperty(LOB_TESTING_PROP));
1:a69fa12:         // Fork the client test with a minimal classpath.
1:a69fa12:         String classpath = clientDist.getDerbyClientJarPath() +
1:a69fa12:                 File.pathSeparator + testingPath +
1:8294912:                 File.pathSeparator + getJUnitPath();
1:a69fa12:         // If we are running the LOB tests we also need derby.jar, because the
1:a69fa12:         // test code being run references classes from the iapi package.
1:a69fa12:         // This may also happen for the non-LOB tests in the future.
1:a69fa12:         if (testLOBs) {
1:a69fa12:             classpath += File.pathSeparator + clientDist.getDerbyEngineJarPath();
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         String[] cmd = new String[] {
1:a69fa12:             "-Dderby.tests.compat.expectedClient=" +
1:a69fa12:                 clientDist.getVersion().toString(),
1:a69fa12:             "-Dderby.tests.compat.expectedServer=" +
1:a69fa12:                 serverVersion.toString(),
1:a69fa12:             "-Dderby.tests.compat.testLOBs=" +
1:a69fa12:                 testLOBs,
1:a69fa12:             "-Dderby.tests.basePort=" +
1:a69fa12:                 TestConfiguration.getBasePort(),
1:a69fa12:             "junit.textui.TestRunner",
1:a69fa12:             "org.apache.derbyTesting.functionTests.tests." +
1:a69fa12:                 "compatibility.ClientCompatibilitySuite"
1:a69fa12:         };
1:a69fa12:         Process proc = execJavaCmd(null, classpath, cmd, null);
1:a69fa12: 
1:a69fa12:         SpawnedProcess spawned = new SpawnedProcess(proc, realName);
1:a69fa12:         int exitCode = spawned.complete(30*60*1000); // 30 minutes
1:a69fa12:         assertTrue(spawned.getFailMessage("client VM failed: "), exitCode == 0);
1:a69fa12:         println(spawned.getFullServerOutput());
1:a69fa12:     }
1:a69fa12: 
1:8294912:     /**
1:8294912:      * Returns the path of the JUnit classes.
1:a69fa12:      *
1:8294912:      * @return A path.
1:8294912:      */
1:8294912:     private static String getJUnitPath() {
1:8294912:         URI uri = VersionCombinationConfigurator.getClassURI(
1:a69fa12:                 junit.framework.TestCase.class);
1:8294912:         return new File(uri).getPath();
1:8294912:     }
1:a69fa12: }
1:8294912: 
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:8294912
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:                 File.pathSeparator + getJUnitPath();
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the path of the JUnit classes.
1:      * @return A path.
1:      */
1:     private static String getJUnitPath() {
1:         URI uri = VersionCombinationConfigurator.getClassURI(
1:         return new File(uri).getPath();
1:     }
1: 
commit:a69fa12
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.compatibility;
1: 
1: import java.io.File;
0: import java.net.URL;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DerbyDistribution;
1: import org.apache.derbyTesting.junit.DerbyVersion;
1: import org.apache.derbyTesting.junit.SpawnedProcess;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Spawns the JVM process running the compatibility tests for the given client
1:  * version.
1:  */
1: public class ClientCompatibilityRunControl
1:         extends BaseJDBCTestCase {
1: 
1:     static final String LOB_TESTING_PROP = "derby.tests.compat.testLOBs";
1: 
1:     /** The descriptive name of the test case. */
1:     private final String realName;
1:     /** The Derby client to use. */
1:     private final DerbyDistribution clientDist;
1:     /** The Derby version we expect to connect to. */
1:     private final DerbyVersion serverVersion;
1:     /** Path to the testing code to use (typically from trunk). */
1:     private final String testingPath;
1: 
1:     /**
1:      * Creates a control object for the given client version.
1:      *
1:      * @param client the Derby client to use
1:      * @param testingPath path to the testing code to use (typically
1:      *      {@literal derbyTesting.jar} from trunk)
1:      * @param serverVersion the expected server version
1:      */
1:     public ClientCompatibilityRunControl(DerbyDistribution client,
1:                                          String testingPath,
1:                                          DerbyVersion serverVersion) {
1:         super("testClient");
1:         this.clientDist = client;
1:         this.testingPath = testingPath;
1:         this.serverVersion = serverVersion;
1:         this.realName = "combination(client " + client.getVersion().toString() +
1:                 " <> server " + serverVersion.toString() + ")";
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return realName;
1:     }
1: 
1:     /**
1:      * Runs the client compatibility test suite with the client driver in a
1:      * separate JVM.
1:      * <p>
1:      * The server is expected to be running already.
1:      */
1:     public void testClient()
1:             throws Exception {
1:         boolean testLOBs = Boolean.parseBoolean(
1:                 getSystemProperty(LOB_TESTING_PROP));
1:         // Fork the client test with a minimal classpath.
1:         String classpath = clientDist.getDerbyClientJarPath() +
1:                 File.pathSeparator + testingPath +
0:                 File.pathSeparator + getJUnitURL().getPath();
1:         // If we are running the LOB tests we also need derby.jar, because the
1:         // test code being run references classes from the iapi package.
1:         // This may also happen for the non-LOB tests in the future.
1:         if (testLOBs) {
1:             classpath += File.pathSeparator + clientDist.getDerbyEngineJarPath();
1:         }
1: 
1:         String[] cmd = new String[] {
1:             "-Dderby.tests.compat.expectedClient=" +
1:                 clientDist.getVersion().toString(),
1:             "-Dderby.tests.compat.expectedServer=" +
1:                 serverVersion.toString(),
1:             "-Dderby.tests.compat.testLOBs=" +
1:                 testLOBs,
1:             "-Dderby.tests.basePort=" +
1:                 TestConfiguration.getBasePort(),
1:             "junit.textui.TestRunner",
1:             "org.apache.derbyTesting.functionTests.tests." +
1:                 "compatibility.ClientCompatibilitySuite"
1:         };
1:         Process proc = execJavaCmd(null, classpath, cmd, null);
1: 
1:         SpawnedProcess spawned = new SpawnedProcess(proc, realName);
1:         int exitCode = spawned.complete(30*60*1000); // 30 minutes
1:         assertTrue(spawned.getFailMessage("client VM failed: "), exitCode == 0);
1:         println(spawned.getFullServerOutput());
1:     }
1: 
1: 	/**
0: 	 * Returns the URL of the JUnit classes.
1:      *
0:      * @return A URL.
1: 	 */
0:     private static URL getJUnitURL() {
0:         return VersionCombinationConfigurator.getClassURL(
1:                 junit.framework.TestCase.class);
1: 	}
1: }
============================================================================