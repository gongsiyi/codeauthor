1:782dbe1: /*
1:782dbe1: 
1:782dbe1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINTableDescriptor
1:782dbe1: 
1:782dbe1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:782dbe1:    contributor license agreements.  See the NOTICE file distributed with
1:782dbe1:    this work for additional information regarding copyright ownership.
1:782dbe1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:782dbe1:    (the "License"); you may not use this file except in compliance with
1:782dbe1:    the License.  You may obtain a copy of the License at
1:782dbe1: 
1:782dbe1:       http://www.apache.org/licenses/LICENSE-2.0
1:782dbe1: 
1:782dbe1:    Unless required by applicable law or agreed to in writing, software
1:782dbe1:    distributed under the License is distributed on an "AS IS" BASIS,
1:782dbe1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:782dbe1:    See the License for the specific language governing permissions and
1:782dbe1:    limitations under the License.
1:782dbe1: 
1:782dbe1:  */
1:782dbe1: 
1:48a9884: package org.apache.derby.impl.sql.catalog;
1:48a9884: 
1:48a9884: import org.apache.derby.iapi.util.IdUtil;
1:48a9884: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:48a9884: 
1:48a9884: public abstract class XPLAINTableDescriptor
1:48a9884: {
1:48a9884:     public abstract String getCatalogName();
1:48a9884:     protected abstract SystemColumn []buildColumnList();
1:48a9884: 
1:48a9884:     private String tableInsertStmt;
1:48a9884: 
1:48a9884:     public String[]getTableDDL(String schemaName)
1:48a9884:     {
1:48a9884:         String escapedSchema = IdUtil.normalToDelimited(schemaName);
1:48a9884:         String escapedTableName = IdUtil.normalToDelimited(getCatalogName());
1:48a9884:         SystemColumn []cols = buildColumnList();
1:48a9884:         StringBuffer buf = new StringBuffer();
1:48a9884:         StringBuffer insBuf = new StringBuffer();
1:48a9884:         StringBuffer valsBuf = new StringBuffer();
1:48a9884:         for (int c = 0; c < cols.length; c++)
1:48a9884:         {
1:48a9884:             if (c == 0)
1:48a9884:             {
1:48a9884:                 buf.append("(");
1:48a9884:                 insBuf.append("(");
1:48a9884:                 valsBuf.append("(");
1:48a9884:             }
1:48a9884:             else
1:48a9884:             {
1:48a9884:                 buf.append(",");
1:48a9884:                 insBuf.append(",");
1:48a9884:                 valsBuf.append(",");
1:48a9884:             }
1:48a9884:             buf.append(cols[c].getName());
1:48a9884:             insBuf.append(cols[c].getName());
1:48a9884:             valsBuf.append("?");
1:48a9884:             buf.append(" ");
1:48a9884:             buf.append(cols[c].getType().getCatalogType().getSQLstring());
1:48a9884:         }
1:48a9884:         buf.append(")");
1:48a9884:         insBuf.append(")");
1:48a9884:         valsBuf.append(")");
1:48a9884:         String query = 
1:48a9884:             "create table " + escapedSchema + "." + escapedTableName +
1:48a9884:             buf.toString();
1:48a9884: 
1:48a9884:         // FIXME -- need to create the index, too.
1:48a9884: 
1:48a9884:         tableInsertStmt =
1:48a9884:             "insert into " + escapedSchema + "." + escapedTableName +
1:48a9884:             insBuf.toString() + " values " + valsBuf.toString();
1:48a9884: 
1:48a9884:         return new String[]{query};
1:48a9884:     }
1:48a9884:     public String getTableInsert()
1:48a9884:     {
1:48a9884:         return tableInsertStmt;
1:48a9884:     }
1:48a9884: }
1:48a9884: 
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:782dbe1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.catalog.XPLAINTableDescriptor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.iapi.util.IdUtil;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: 
1: public abstract class XPLAINTableDescriptor
1: {
1:     public abstract String getCatalogName();
1:     protected abstract SystemColumn []buildColumnList();
1: 
1:     private String tableInsertStmt;
1: 
1:     public String[]getTableDDL(String schemaName)
1:     {
1:         String escapedSchema = IdUtil.normalToDelimited(schemaName);
1:         String escapedTableName = IdUtil.normalToDelimited(getCatalogName());
1:         SystemColumn []cols = buildColumnList();
1:         StringBuffer buf = new StringBuffer();
1:         StringBuffer insBuf = new StringBuffer();
1:         StringBuffer valsBuf = new StringBuffer();
1:         for (int c = 0; c < cols.length; c++)
1:         {
1:             if (c == 0)
1:             {
1:                 buf.append("(");
1:                 insBuf.append("(");
1:                 valsBuf.append("(");
1:             }
1:             else
1:             {
1:                 buf.append(",");
1:                 insBuf.append(",");
1:                 valsBuf.append(",");
1:             }
1:             buf.append(cols[c].getName());
1:             insBuf.append(cols[c].getName());
1:             valsBuf.append("?");
1:             buf.append(" ");
1:             buf.append(cols[c].getType().getCatalogType().getSQLstring());
1:         }
1:         buf.append(")");
1:         insBuf.append(")");
1:         valsBuf.append(")");
1:         String query = 
1:             "create table " + escapedSchema + "." + escapedTableName +
1:             buf.toString();
1: 
1:         // FIXME -- need to create the index, too.
1: 
1:         tableInsertStmt =
1:             "insert into " + escapedSchema + "." + escapedTableName +
1:             insBuf.toString() + " values " + valsBuf.toString();
1: 
1:         return new String[]{query};
1:     }
1:     public String getTableInsert()
1:     {
1:         return tableInsertStmt;
1:     }
1: }
1: 
============================================================================