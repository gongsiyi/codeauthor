1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLockingRR
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: package org.apache.derby.impl.store.raw.xact;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.LockFactory;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.RowLock;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A locking policy that implements row level locking with repeatable read
1:eac0369:     isolation.  Since phantom protection with previous key locking is actually 
1:eac0369:     handled by the upper level access methods, the only difference in repeatable
1:eac0369:     read is that read locks are of type RowLock.RS2.  This type will not 
1:eac0369:     conflict with a previous key insert lock.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1:eac0369: */
1:eac0369: public class RowLockingRR extends RowLocking3 
1:eac0369: {
1:eac0369: 
1:eac0369:     protected RowLockingRR(LockFactory lf)
1:eac0369:     {
1:eac0369:             super(lf);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	protected RowLock getReadLockType() 
1:eac0369:     {
1:eac0369: 		return(RowLock.RS2);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	protected RowLock getUpdateLockType() 
1:eac0369:     {
1:eac0369: 		return(RowLock.RU2);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	protected RowLock getWriteLockType() 
1:eac0369:     {
1:eac0369: 		return(RowLock.RX2);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Unlock a record after it has been locked for read.
1:eac0369:      * <p>
1:eac0369:      * In repeatable read only unlock records which "did not qualify".  For
1:eac0369:      * example in a query like "select * from foo where a = 1" on a table
1:eac0369:      * with no index it is only necessary to hold locks on rows where a=1, but
1:eac0369:      * in the process of finding those rows the system will get locks on other
1:eac0369:      * rows to verify they are committed before applying the qualifier.  Those
1:eac0369:      * locks can be released under repeatable read isolation.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 	public void unlockRecordAfterRead(
1:eac0369:     Transaction     t, 
1:eac0369:     ContainerHandle container_handle,
1:eac0369:     RecordHandle    record, 
1:eac0369:     boolean         forUpdate,
1:eac0369:     boolean         row_qualified)
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369:         if (!row_qualified)
1:eac0369:         {
1:eac0369:             Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
1:eac0369: 
1:eac0369:             int count = 
1:eac0369:                 lf.unlock(t.getCompatibilitySpace(), t, record, qualifier);
1:eac0369: 
1:eac0369:             if (SanityManager.DEBUG)
1:eac0369:             {
1:eac0369:                 // in the case of lock escalation the count could be 0.
1:eac0369:                 if (!(count == 1 || count == 0))
1:eac0369:                 {
1:eac0369:                     SanityManager.THROWASSERT(
1:eac0369:                     "count = " + count +
1:eac0369:                     "record.getContainerId() = " + record.getContainerId());
1:eac0369:                 }
1:eac0369:             }
1:eac0369:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:00d19b5
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.xact.RowLockingRR
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: package org.apache.derby.impl.store.raw.xact;
1: 
1: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.RowLock;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: 
1: /**
1: 	A locking policy that implements row level locking with repeatable read
1:     isolation.  Since phantom protection with previous key locking is actually 
1:     handled by the upper level access methods, the only difference in repeatable
1:     read is that read locks are of type RowLock.RS2.  This type will not 
1:     conflict with a previous key insert lock.
1: 
1: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
1: */
1: public class RowLockingRR extends RowLocking3 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 
1:     protected RowLockingRR(LockFactory lf)
1:     {
1:             super(lf);
1:     }
1: 
1: 	protected RowLock getReadLockType() 
1:     {
1: 		return(RowLock.RS2);
1:     }
1: 
1: 	protected RowLock getUpdateLockType() 
1:     {
1: 		return(RowLock.RU2);
1:     }
1: 
1: 	protected RowLock getWriteLockType() 
1:     {
1: 		return(RowLock.RX2);
1:     }
1: 
1:     /**
1:      * Unlock a record after it has been locked for read.
1:      * <p>
1:      * In repeatable read only unlock records which "did not qualify".  For
1:      * example in a query like "select * from foo where a = 1" on a table
1:      * with no index it is only necessary to hold locks on rows where a=1, but
1:      * in the process of finding those rows the system will get locks on other
1:      * rows to verify they are committed before applying the qualifier.  Those
1:      * locks can be released under repeatable read isolation.
1:      * <p>
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public void unlockRecordAfterRead(
1:     Transaction     t, 
1:     ContainerHandle container_handle,
1:     RecordHandle    record, 
1:     boolean         forUpdate,
1:     boolean         row_qualified)
1:         throws StandardException
1: 	{
1:         if (!row_qualified)
1:         {
1:             Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
1: 
1:             int count = 
1:                 lf.unlock(t.getCompatibilitySpace(), t, record, qualifier);
1: 
1:             if (SanityManager.DEBUG)
1:             {
1:                 // in the case of lock escalation the count could be 0.
1:                 if (!(count == 1 || count == 0))
1:                 {
1:                     SanityManager.THROWASSERT(
1:                     "count = " + count +
1:                     "record.getContainerId() = " + record.getContainerId());
1:                 }
1:             }
1:         }
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.xact
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: package org.apache.derby.impl.store.raw.xact;
0: 
0: import org.apache.derby.iapi.services.locks.LockFactory;
0: import org.apache.derby.iapi.services.locks.C_LockFactory;
0: import org.apache.derby.iapi.services.locks.Latch;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.RowLock;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: 
0: /**
0: 	A locking policy that implements row level locking with repeatable read
0:     isolation.  Since phantom protection with previous key locking is actually 
0:     handled by the upper level access methods, the only difference in repeatable
0:     read is that read locks are of type RowLock.RS2.  This type will not 
0:     conflict with a previous key insert lock.
0: 
0: 	@see org.apache.derby.iapi.store.raw.LockingPolicy
0: */
0: public class RowLockingRR extends RowLocking3 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 
0:     protected RowLockingRR(LockFactory lf)
0:     {
0:             super(lf);
0:     }
0: 
0: 	protected RowLock getReadLockType() 
0:     {
0: 		return(RowLock.RS2);
0:     }
0: 
0: 	protected RowLock getUpdateLockType() 
0:     {
0: 		return(RowLock.RU2);
0:     }
0: 
0: 	protected RowLock getWriteLockType() 
0:     {
0: 		return(RowLock.RX2);
0:     }
0: 
0:     /**
0:      * Unlock a record after it has been locked for read.
0:      * <p>
0:      * In repeatable read only unlock records which "did not qualify".  For
0:      * example in a query like "select * from foo where a = 1" on a table
0:      * with no index it is only necessary to hold locks on rows where a=1, but
0:      * in the process of finding those rows the system will get locks on other
0:      * rows to verify they are committed before applying the qualifier.  Those
0:      * locks can be released under repeatable read isolation.
0:      * <p>
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public void unlockRecordAfterRead(
0:     Transaction     t, 
0:     ContainerHandle container_handle,
0:     RecordHandle    record, 
0:     boolean         forUpdate,
0:     boolean         row_qualified)
0:         throws StandardException
0: 	{
0:         if (!row_qualified)
0:         {
0:             Object qualifier = forUpdate ? RowLock.RU2 : RowLock.RS2;
0: 
0:             int count = 
0:                 lf.unlock(t.getCompatibilitySpace(), t, record, qualifier);
0: 
0:             if (SanityManager.DEBUG)
0:             {
0:                 // in the case of lock escalation the count could be 0.
0:                 if (!(count == 1 || count == 0))
0:                 {
0:                     SanityManager.THROWASSERT(
0:                     "count = " + count +
0:                     "record.getContainerId() = " + record.getContainerId());
0:                 }
0:             }
0:         }
0: 	}
0: 
0: }
============================================================================