1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.load.ExportWriteDataAbstract
1:345de35: 
1:6d913c6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6d913c6:    contributor license agreements.  See the NOTICE file distributed with
1:6d913c6:    this work for additional information regarding copyright ownership.
1:6d913c6:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6d913c6:    (the "License"); you may not use this file except in compliance with
1:6d913c6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.load;
1:84e347a: import java.io.InputStream;
1:84e347a: import java.io.Reader;
1:eac0369: 
1:eac0369: abstract class ExportWriteDataAbstract {
1:eac0369: 
1:eac0369:   protected ControlInfo controlFileReader;
1:eac0369:   protected int[] columnLengths;
1:eac0369: 
1:eac0369:   protected String fieldSeparator;
1:eac0369:   protected String recordSeparator;
1:eac0369:   protected String nullString;
1:eac0369:   protected String columnDefinition;
1:eac0369:   protected String format;
1:eac0369:   protected String fieldStartDelimiter;
1:eac0369:   protected String fieldStopDelimiter;
1:eac0369:   protected String dataCodeset;
1:eac0369:   protected String dataLocale;
1:eac0369:   protected boolean hasDelimiterAtEnd;
1:eac0369:   protected boolean doubleDelimiter=true;
1:eac0369: 
1:eac0369:   //load properties locally for faster reference to them periodically
1:eac0369:   protected void loadPropertiesInfo() throws Exception {
1:eac0369:     fieldSeparator = controlFileReader.getFieldSeparator();
1:eac0369:     recordSeparator = controlFileReader.getRecordSeparator();
1:eac0369:     nullString = controlFileReader.getNullString();
1:eac0369:     columnDefinition = controlFileReader.getColumnDefinition();
1:eac0369:     format = controlFileReader.getFormat();
1:eac0369:     fieldStartDelimiter = controlFileReader.getFieldStartDelimiter();
1:eac0369:     fieldStopDelimiter = controlFileReader.getFieldEndDelimiter();
1:eac0369:     dataCodeset = controlFileReader.getDataCodeset();
1:eac0369:     hasDelimiterAtEnd = controlFileReader.getHasDelimiterAtEnd();
1:eac0369:   }
1:eac0369: 
1:eac0369:   //if control file says true for column definition, write it as first line of the
1:eac0369:   //data file
1:7a92d1f:   abstract void writeColumnDefinitionOptionally(String[] columnNames,
1:eac0369:   													   String[] columnTypes)
1:eac0369:   											throws Exception;
1:eac0369: 
1:eac0369:   //used in case of fixed format
1:eac0369:   public void setColumnLengths(int[] columnLengths) {
1:eac0369:     this.columnLengths = columnLengths;
1:eac0369:   }
1:eac0369: 
1:eac0369:   //write the passed row into the data file
1:eac0369:   public abstract void writeData(String[] oneRow, boolean[] isNumeric) throws Exception;
1:eac0369: 
1:84e347a:     /*
1:84e347a:      * Writes the binary data in the given input stream to an 
1:84e347a:      * external lob export file, and return it's location 
1:84e347a:      * information in the file as string. Location information 
1:84e347a:      * is written in the main export file. 
1:84e347a:      * @param istream   input streams that contains a binary column data.
1:84e347a:      * @return Location where the column data written in the external file. 
1:84e347a:      * @exception Exception  if any error occurs while writing the data.  
1:84e347a:      */
1:84e347a:     abstract String writeBinaryColumnToExternalFile(InputStream istream) 
1:84e347a:         throws Exception;
1:84e347a:     
1:84e347a:     /*
1:84e347a:      * Writes the clob data in the given input Reader to an 
1:84e347a:      * external lob export file, and return it's location 
1:84e347a:      * information in the file as string. Location information 
1:84e347a:      * is written in the main export file. 
1:84e347a:      * @param ir   Reader that contains a clob column data.
1:84e347a:      * @return Location where the column data written in the external file. 
1:84e347a:      * @exception Exception  if any error occurs while writing the data.   
1:84e347a:      */
1:84e347a:     abstract String writeCharColumnToExternalFile(Reader ir) 
1:84e347a:         throws Exception;
1:84e347a: 
1:eac0369:   //if nothing more to write, then close the file and write a message of completion
1:eac0369:   //in message file
1:eac0369:   public abstract void noMoreRows() throws Exception;
1:eac0369: }
============================================================================
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:84e347a
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.io.Reader;
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * Writes the binary data in the given input stream to an 
1:      * external lob export file, and return it's location 
1:      * information in the file as string. Location information 
1:      * is written in the main export file. 
1:      * @param istream   input streams that contains a binary column data.
1:      * @return Location where the column data written in the external file. 
1:      * @exception Exception  if any error occurs while writing the data.  
1:      */
1:     abstract String writeBinaryColumnToExternalFile(InputStream istream) 
1:         throws Exception;
1:     
1:     /*
1:      * Writes the clob data in the given input Reader to an 
1:      * external lob export file, and return it's location 
1:      * information in the file as string. Location information 
1:      * is written in the main export file. 
1:      * @param ir   Reader that contains a clob column data.
1:      * @return Location where the column data written in the external file. 
1:      * @exception Exception  if any error occurs while writing the data.   
1:      */
1:     abstract String writeCharColumnToExternalFile(Reader ir) 
1:         throws Exception;
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:6d913c6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
1:   abstract void writeColumnDefinitionOptionally(String[] columnNames,
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.load.ExportWriteDataAbstract
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: 
1: abstract class ExportWriteDataAbstract {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:   protected ControlInfo controlFileReader;
1:   protected int[] columnLengths;
1: 
1:   protected String fieldSeparator;
1:   protected String recordSeparator;
1:   protected String nullString;
1:   protected String columnDefinition;
1:   protected String format;
1:   protected String fieldStartDelimiter;
1:   protected String fieldStopDelimiter;
1:   protected String dataCodeset;
1:   protected String dataLocale;
1:   protected boolean hasDelimiterAtEnd;
1:   protected boolean doubleDelimiter=true;
1: 
1:   //load properties locally for faster reference to them periodically
1:   protected void loadPropertiesInfo() throws Exception {
1:     fieldSeparator = controlFileReader.getFieldSeparator();
1:     recordSeparator = controlFileReader.getRecordSeparator();
1:     nullString = controlFileReader.getNullString();
1:     columnDefinition = controlFileReader.getColumnDefinition();
1:     format = controlFileReader.getFormat();
1:     fieldStartDelimiter = controlFileReader.getFieldStartDelimiter();
1:     fieldStopDelimiter = controlFileReader.getFieldEndDelimiter();
1:     dataCodeset = controlFileReader.getDataCodeset();
1:     hasDelimiterAtEnd = controlFileReader.getHasDelimiterAtEnd();
1:   }
1: 
1:   //if control file says true for column definition, write it as first line of the
1:   //data file
0:   public abstract void writeColumnDefinitionOptionally(String[] columnNames,
1:   													   String[] columnTypes)
1:   											throws Exception;
1: 
1:   //used in case of fixed format
1:   public void setColumnLengths(int[] columnLengths) {
1:     this.columnLengths = columnLengths;
1:   }
1: 
1:   //write the passed row into the data file
1:   public abstract void writeData(String[] oneRow, boolean[] isNumeric) throws Exception;
1: 
1:   //if nothing more to write, then close the file and write a message of completion
1:   //in message file
1:   public abstract void noMoreRows() throws Exception;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.load;
0: 
0: abstract class ExportWriteDataAbstract {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:   protected ControlInfo controlFileReader;
0:   protected int[] columnLengths;
0: 
0:   protected String fieldSeparator;
0:   protected String recordSeparator;
0:   protected String nullString;
0:   protected String columnDefinition;
0:   protected String format;
0:   protected String fieldStartDelimiter;
0:   protected String fieldStopDelimiter;
0:   protected String dataCodeset;
0:   protected String dataLocale;
0:   protected boolean hasDelimiterAtEnd;
0:   protected boolean doubleDelimiter=true;
0: 
0:   //load properties locally for faster reference to them periodically
0:   protected void loadPropertiesInfo() throws Exception {
0:     fieldSeparator = controlFileReader.getFieldSeparator();
0:     recordSeparator = controlFileReader.getRecordSeparator();
0:     nullString = controlFileReader.getNullString();
0:     columnDefinition = controlFileReader.getColumnDefinition();
0:     format = controlFileReader.getFormat();
0:     fieldStartDelimiter = controlFileReader.getFieldStartDelimiter();
0:     fieldStopDelimiter = controlFileReader.getFieldEndDelimiter();
0:     dataCodeset = controlFileReader.getDataCodeset();
0:     hasDelimiterAtEnd = controlFileReader.getHasDelimiterAtEnd();
0:   }
0: 
0:   //if control file says true for column definition, write it as first line of the
0:   //data file
0:   public abstract void writeColumnDefinitionOptionally(String[] columnNames,
0:   													   String[] columnTypes)
0:   											throws Exception;
0: 
0:   //used in case of fixed format
0:   public void setColumnLengths(int[] columnLengths) {
0:     this.columnLengths = columnLengths;
0:   }
0: 
0:   //write the passed row into the data file
0:   public abstract void writeData(String[] oneRow, boolean[] isNumeric) throws Exception;
0: 
0:   //if nothing more to write, then close the file and write a message of completion
0:   //in message file
0:   public abstract void noMoreRows() throws Exception;
0: }
============================================================================