1:33776ff: /*
3:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetSqlca
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:33776ff: import org.apache.derby.client.am.Sqlca;
1:69e3d06: import org.apache.derby.client.am.ClientConnection;
1:33776ff: 
1:0326967: class NetSqlca extends Sqlca {
1:70f7692:     // these are the same variables that are in the Sqlca except ccsids
1:70f7692:     // are a little different
1:33776ff: 
1:69e3d06:     NetSqlca(ClientConnection connection,
1:70f7692:              int sqlCode,
1:99683a9:              String sqlState,
1:99683a9:              byte[] sqlErrpBytes) {
1:70f7692:         super(connection);
1:70f7692:         sqlCode_ = sqlCode;
1:99683a9:         sqlState_ = sqlState;
1:70f7692:         sqlErrpBytes_ = sqlErrpBytes;
3:70f7692:     }
1:95049cf: 
1:69e3d06:     NetSqlca(ClientConnection connection,
1:99683a9:             int sqlCode,
1:99683a9:             byte[] sqlState,
1:a0b8943:             byte[] sqlErrpBytes) {
1:99683a9:        super(connection);
1:99683a9:        sqlCode_ = sqlCode;
1:a0b8943:        sqlState_ = bytes2String(sqlState,0,sqlState.length);
1:99683a9:        sqlErrpBytes_ = sqlErrpBytes;
1:95049cf:     }
1:33776ff: 
1:95049cf:     void setSqlerrd(int[] sqlErrd) {
1:70f7692:         sqlErrd_ = sqlErrd;
1:99683a9:     }
1:33776ff: 
1:95049cf:     void setSqlwarnBytes(byte[] sqlWarnBytes) {
1:70f7692:         sqlWarnBytes_ = sqlWarnBytes;
1:99683a9:     }
1:33776ff: 
1:95049cf:     void setSqlerrmcBytes(byte[] sqlErrmcBytes) {
1:70f7692:         sqlErrmcBytes_ = sqlErrmcBytes;
1:70f7692:     }
1:70f7692: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a0b8943
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             byte[] sqlErrpBytes) {
1:        sqlState_ = bytes2String(sqlState,0,sqlState.length);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetSqlca extends Sqlca {
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.client.am.ClientConnection;
1:     NetSqlca(ClientConnection connection,
/////////////////////////////////////////////////////////////////////////
1:     NetSqlca(ClientConnection connection,
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.Connection;
0:     NetSqlca(Connection connection,
/////////////////////////////////////////////////////////////////////////
0:     NetSqlca(Connection connection,
commit:95049cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.DisconnectException;
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     void setSqlerrd(int[] sqlErrd) {
1:     void setSqlwarnBytes(byte[] sqlWarnBytes) {
1:     void setSqlerrmcBytes(byte[] sqlErrmcBytes) {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:99683a9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.reference.SQLState;
0: import org.apache.derby.client.am.ClientMessageId;
0: import org.apache.derby.client.am.SqlException;
0: import java.io.UnsupportedEncodingException;
/////////////////////////////////////////////////////////////////////////
1:              String sqlState,
1:              byte[] sqlErrpBytes) {
1:         sqlState_ = sqlState;
0:     NetSqlca(org.apache.derby.client.am.Connection connection,
1:             int sqlCode,
1:             byte[] sqlState,
0:             byte[] sqlErrpBytes) throws SqlException {
1:        super(connection);
1:        sqlCode_ = sqlCode;
0:        try
0:        {
0:            sqlState_ = bytes2String(sqlState,0,sqlState.length);
0:        }catch(UnsupportedEncodingException uee)
0:        {
0:             throw new SqlException(null, 
0:                   new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),
0:                        "sqlstate bytes", "SQLSTATE",uee);
1:        }
1:        sqlErrpBytes_ = sqlErrpBytes;
1:    }
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
0: public class NetSqlca extends Sqlca {
1:     // these are the same variables that are in the Sqlca except ccsids
1:     // are a little different
0:     NetSqlca(org.apache.derby.client.am.Connection connection,
1:              int sqlCode,
0:              byte[] sqlStateBytes,
0:              byte[] sqlErrpBytes,
0:              int ccsid) {
1:         super(connection);
1:         sqlCode_ = sqlCode;
0:         sqlStateBytes_ = sqlStateBytes;
1:         sqlErrpBytes_ = sqlErrpBytes;
0:         ccsid_ = ccsid;
1:     }
0:     protected void setSqlerrd(int[] sqlErrd) {
1:         sqlErrd_ = sqlErrd;
1:     }
0:     protected void setSqlwarnBytes(byte[] sqlWarnBytes) {
1:         sqlWarnBytes_ = sqlWarnBytes;
1:     }
0:     protected void setSqlerrmcBytes(byte[] sqlErrmcBytes, int sqlErrmcCcsid) {
1:         sqlErrmcBytes_ = sqlErrmcBytes;
0:         sqlErrmcCcsid_ = sqlErrmcCcsid;
1:     }
0:     public long getRowCount(Typdef typdef) throws org.apache.derby.client.am.DisconnectException {
0:         int byteOrder = typdef.getByteOrder();
0:         long num = (byteOrder == org.apache.derby.client.am.SignedBinary.BIG_ENDIAN) ?
0:                 super.getRowCount() : ((long) sqlErrd_[1] << 32) + sqlErrd_[0];
0:         return num;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetSqlca
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
1: import org.apache.derby.client.am.Sqlca;
1: 
0: public class NetSqlca extends Sqlca
0: {
0:   // these are the same variables that are in the Sqlca except ccsids
0:   // are a little different
1: 
0:   NetSqlca (org.apache.derby.client.am.Connection connection,
0:          int sqlCode,
0:          byte[] sqlStateBytes,
0:          byte[] sqlErrpBytes,
0:          int ccsid)
0:   {
0:     super(connection);
0:     sqlCode_ = sqlCode;
0:     sqlStateBytes_ = sqlStateBytes;
0:     sqlErrpBytes_ = sqlErrpBytes;
0:     ccsid_ = ccsid;
0:   }
1: 
0:   protected void setSqlerrd (int[] sqlErrd)
0:   {
0:     sqlErrd_ = sqlErrd;
0:   }
1: 
0:   protected void setSqlwarnBytes (byte[] sqlWarnBytes)
0:   {
0:     sqlWarnBytes_ = sqlWarnBytes;
0:   }
1: 
0:   protected void setSqlerrmcBytes (byte[] sqlErrmcBytes, int sqlErrmcCcsid)
0:   {
0:     sqlErrmcBytes_ = sqlErrmcBytes;
0:     sqlErrmcCcsid_ = sqlErrmcCcsid;
0:   }
1: 
0:   public long getRowCount (Typdef typdef) throws org.apache.derby.client.am.DisconnectException
0:   {
0:     int byteOrder = typdef.getByteOrder();
0:     long num = (byteOrder == org.apache.derby.client.am.SignedBinary.BIG_ENDIAN) ?
0:       super.getRowCount() : ((long)sqlErrd_[1]<<32) + sqlErrd_[0];
0:     return num;
0:   }
0: }
============================================================================