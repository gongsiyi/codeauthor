1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.AggregatorInfoList
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: import java.util.Vector;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Vector of AggergatorInfo objects.
1:eac0369:  *
1:eac0369:  * @see java.util.Vector
1:eac0369:  *
1:eac0369:  */
1:801cf0d: @SuppressWarnings("UseOfObsoleteCollectionType")
1:71c8e86: public class AggregatorInfoList extends Vector<AggregatorInfo> implements Formatable 
1:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.  OR, since this is something that is used
1:eac0369: 	**	in stored prepared statements, it is ok to change it
1:eac0369: 	**	if you make sure that stored prepared statements are
1:eac0369: 	**	invalidated across releases.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formatable
1:eac0369: 	 */
1:eac0369: 	public AggregatorInfoList() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Indicate whether i have a distinct or not.
1:eac0369: 	 *
1:eac0369: 	 * @return indicates if there is a distinct
1:eac0369: 	 */
1:eac0369: 	public boolean hasDistinct()
1:eac0369: 	{
1:801cf0d:         for (AggregatorInfo aggInfo : this)
1:eac0369: 		{
1:eac0369: 			if (aggInfo.isDistinct())
1:eac0369: 			{
1:eac0369: 				return true;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/** @exception  IOException thrown on error */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
2:eac0369: 		int count = size();
1:eac0369: 		out.writeInt(count);
2:eac0369: 		for (int i = 0; i < count; i++)
1:eac0369: 		{
1:eac0369: 			out.writeObject(elementAt(i));
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see java.io.Externalizable#readExternal 
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException on error	
1:eac0369: 	 * @exception ClassNotFoundException on error	
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		int count = in.readInt();
1:eac0369: 
1:eac0369: 		ensureCapacity(count);
1:eac0369: 		for (int i = 0; i < count; i++)
1:eac0369: 		{
1:eac0369: 			AggregatorInfo agg = (AggregatorInfo)in.readObject();
1:eac0369: 			addElement(agg);
1:eac0369: 		}	
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_INFO_LIST_V01_ID; }
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// OBJECT INTERFACE
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:801cf0d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("UseOfObsoleteCollectionType")
/////////////////////////////////////////////////////////////////////////
1:         for (AggregatorInfo aggInfo : this)
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1: public class AggregatorInfoList extends Vector<AggregatorInfo> implements Formatable 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.AggregatorInfoList
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: import java.util.Vector;
1: 
1: /**
1:  * Vector of AggergatorInfo objects.
1:  *
1:  * @see java.util.Vector
1:  *
0:  * @author jamie
1:  */
0: public class AggregatorInfoList extends Vector implements Formatable 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.  OR, since this is something that is used
1: 	**	in stored prepared statements, it is ok to change it
1: 	**	if you make sure that stored prepared statements are
1: 	**	invalidated across releases.
1: 	**
1: 	********************************************************/
1: 
1: 	/**
1: 	 * Niladic constructor for Formatable
1: 	 */
1: 	public AggregatorInfoList() {}
1: 
1: 	/**
1: 	 * Indicate whether i have a distinct or not.
1: 	 *
1: 	 * @return indicates if there is a distinct
1: 	 */
1: 	public boolean hasDistinct()
1: 	{
1: 		int count = size();
1: 		for (int i = 0; i < count; i++)
1: 		{
0: 			AggregatorInfo aggInfo = (AggregatorInfo) elementAt(i);
1: 			if (aggInfo.isDistinct())
1: 			{
1: 				return true;
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 
1: 	/** @exception  IOException thrown on error */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		int count = size();
1: 		out.writeInt(count);
1: 		for (int i = 0; i < count; i++)
1: 		{
1: 			out.writeObject(elementAt(i));
1: 		}
1: 	}
1: 
1: 	/** 
1: 	 * @see java.io.Externalizable#readExternal 
1: 	 *
1: 	 * @exception IOException on error	
1: 	 * @exception ClassNotFoundException on error	
1: 	 */
1: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
1: 	{
1: 		int count = in.readInt();
1: 
1: 		ensureCapacity(count);
1: 		for (int i = 0; i < count; i++)
1: 		{
1: 			AggregatorInfo agg = (AggregatorInfo)in.readObject();
1: 			addElement(agg);
1: 		}	
1: 	}
1: 
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_INFO_LIST_V01_ID; }
1: 
1: 	///////////////////////////////////////////////////////////////
1: 	//
1: 	// OBJECT INTERFACE
1: 	//
1: 	///////////////////////////////////////////////////////////////
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import java.util.Vector;
0: 
0: /**
0:  * Vector of AggergatorInfo objects.
0:  *
0:  * @see java.util.Vector
0:  *
0:  * @author jamie
0:  */
0: public class AggregatorInfoList extends Vector implements Formatable 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.  OR, since this is something that is used
0: 	**	in stored prepared statements, it is ok to change it
0: 	**	if you make sure that stored prepared statements are
0: 	**	invalidated across releases.
0: 	**
0: 	********************************************************/
0: 
0: 	/**
0: 	 * Niladic constructor for Formatable
0: 	 */
0: 	public AggregatorInfoList() {}
0: 
0: 	/**
0: 	 * Indicate whether i have a distinct or not.
0: 	 *
0: 	 * @return indicates if there is a distinct
0: 	 */
0: 	public boolean hasDistinct()
0: 	{
0: 		int count = size();
0: 		for (int i = 0; i < count; i++)
0: 		{
0: 			AggregatorInfo aggInfo = (AggregatorInfo) elementAt(i);
0: 			if (aggInfo.isDistinct())
0: 			{
0: 				return true;
0: 			}
0: 		}
0: 		return false;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 
0: 	/** @exception  IOException thrown on error */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		int count = size();
0: 		out.writeInt(count);
0: 		for (int i = 0; i < count; i++)
0: 		{
0: 			out.writeObject(elementAt(i));
0: 		}
0: 	}
0: 
0: 	/** 
0: 	 * @see java.io.Externalizable#readExternal 
0: 	 *
0: 	 * @exception IOException on error	
0: 	 * @exception ClassNotFoundException on error	
0: 	 */
0: 	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
0: 	{
0: 		int count = in.readInt();
0: 
0: 		ensureCapacity(count);
0: 		for (int i = 0; i < count; i++)
0: 		{
0: 			AggregatorInfo agg = (AggregatorInfo)in.readObject();
0: 			addElement(agg);
0: 		}	
0: 	}
0: 
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.AGG_INFO_LIST_V01_ID; }
0: 
0: 	///////////////////////////////////////////////////////////////
0: 	//
0: 	// OBJECT INTERFACE
0: 	//
0: 	///////////////////////////////////////////////////////////////
0: }
============================================================================