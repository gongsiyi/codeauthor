1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.GenericQualifier
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This is the implementation for Qualifier.  It is used for generated scans.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class GenericQualifier implements Qualifier
1:eac0369: {
1:eac0369: 	private int columnId;
1:eac0369: 	private int operator;
1:eac0369: 	private GeneratedMethod orderableGetter;
1:eac0369: 	private Activation	activation;
1:eac0369: 	private boolean orderedNulls;
1:eac0369: 	private boolean unknownRV;
1:eac0369: 	private boolean negateCompareResult;
1:eac0369: 	protected int variantType;
1:eac0369: 
1:eac0369: 	private DataValueDescriptor orderableCache = null;
1:eac0369: 
1:eac0369: 	public GenericQualifier(int columnId,
1:eac0369: 							int operator,
1:eac0369: 							GeneratedMethod orderableGetter,
1:eac0369: 							Activation activation,
1:eac0369: 							boolean orderedNulls,
1:eac0369: 							boolean unknownRV,
1:eac0369: 							boolean negateCompareResult,
1:eac0369: 							int variantType)
1:eac0369: 	{
1:eac0369: 		this.columnId = columnId;
1:eac0369: 		this.operator = operator;
1:eac0369: 		this.orderableGetter = orderableGetter;
1:eac0369: 		this.activation = activation;
1:eac0369: 		this.orderedNulls = orderedNulls;
1:eac0369: 		this.unknownRV = unknownRV;
1:eac0369: 		this.negateCompareResult = negateCompareResult;
1:eac0369: 		this.variantType = variantType;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* 
1:eac0369: 	 * Qualifier interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see Qualifier#getColumnId
1:eac0369: 	 */
1:eac0369: 	public int getColumnId()
1:eac0369: 	{
1:eac0369: 		return columnId;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see Qualifier#getOrderable
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getOrderable() throws StandardException
1:eac0369: 	{
1:eac0369: 		if (variantType != VARIANT)
1:eac0369: 		{
1:eac0369: 			if (orderableCache == null)
1:eac0369: 			{
1:eac0369: 				orderableCache = (DataValueDescriptor) (orderableGetter.invoke(activation));
1:eac0369: 			}
1:eac0369: 			return orderableCache;
1:eac0369: 		}
1:eac0369: 		return (DataValueDescriptor) (orderableGetter.invoke(activation));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Get the operator to use in the comparison. 
1:eac0369:      *
1:eac0369:      *  @see Qualifier#getOperator
1:eac0369:      **/
1:eac0369: 	public int getOperator()
1:eac0369: 	{
1:eac0369: 		return operator;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Should the result from the compare operation be negated?  If true
1:eac0369:      *  then only rows which fail the compare operation will qualify.
1:eac0369:      *
1:eac0369:      *  @see Qualifier#negateCompareResult
1:eac0369:      **/
1:eac0369: 	public boolean negateCompareResult()
1:eac0369: 	{
1:eac0369: 		return negateCompareResult;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Get the getOrderedNulls argument to use in the comparison. 
1:eac0369:      *  
1:eac0369:      *  @see Qualifier#getOrderedNulls
1:eac0369:      **/
1:eac0369:     public boolean getOrderedNulls()
1:eac0369: 	{
1:eac0369: 		return orderedNulls;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Get the getOrderedNulls argument to use in the comparison.
1:eac0369:      *  
1:eac0369:      *  @see Qualifier#getUnknownRV
1:eac0369:      **/
1:eac0369:     public boolean getUnknownRV()
1:eac0369: 	{
1:eac0369: 		return unknownRV;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Clear the DataValueDescriptor cache, if one exists.
1:eac0369: 	 *  (The DataValueDescriptor can be 1 of 3 types:
1:eac0369: 	 *		o  VARIANT		  - cannot be cached as its value can 
1:eac0369: 	 *							vary within a scan
1:eac0369: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
1:eac0369: 	 *							value will not change within a scan
1:eac0369: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
1:eac0369: 	 *							as its value will never change
1:eac0369: 	 *		o  CONSTANT		  - never changes
1:eac0369:      *  
1:eac0369:      *  @see Qualifier#getUnknownRV
1:eac0369: 	 */
1:eac0369: 	public void clearOrderableCache()
1:eac0369: 	{
1:eac0369: 		if ((variantType == SCAN_INVARIANT) || (variantType == VARIANT))
1:eac0369: 		{
1:eac0369: 			orderableCache = null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/** 
1:eac0369: 	 * This method reinitializes all the state of
1:eac0369: 	 * the Qualifier.  It is used to distinguish between
1:eac0369: 	 * resetting something that is query invariant
1:eac0369: 	 * and something that is constant over every
1:eac0369: 	 * execution of a query.  Basically, clearOrderableCache()
1:eac0369: 	 * will only clear out its cache if it is a VARIANT
1:eac0369: 	 * or SCAN_INVARIANT value.  However, each time a
1:eac0369: 	 * query is executed, the QUERY_INVARIANT qualifiers need
1:eac0369: 	 * to be reset.
1:eac0369: 	 */
1:eac0369: 	public void reinitialize()
1:eac0369: 	{
1:eac0369: 		if (variantType != CONSTANT)
1:eac0369: 		{
1:eac0369: 			orderableCache = null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "columnId: "+columnId+
1:eac0369: 				"\noperator: "+operator+
1:eac0369: 				"\norderedNulls: "+orderedNulls+
1:eac0369: 				"\nunknownRV: "+unknownRV+
1:eac0369: 				"\nnegateCompareResult: "+negateCompareResult;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.GenericQualifier
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.access.Qualifier;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  *	This is the implementation for Qualifier.  It is used for generated scans.
1:  *
0:  *	@author Jeff Lichtman
1:  */
1: 
1: public class GenericQualifier implements Qualifier
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private int columnId;
1: 	private int operator;
1: 	private GeneratedMethod orderableGetter;
1: 	private Activation	activation;
1: 	private boolean orderedNulls;
1: 	private boolean unknownRV;
1: 	private boolean negateCompareResult;
1: 	protected int variantType;
1: 
1: 	private DataValueDescriptor orderableCache = null;
1: 
1: 	public GenericQualifier(int columnId,
1: 							int operator,
1: 							GeneratedMethod orderableGetter,
1: 							Activation activation,
1: 							boolean orderedNulls,
1: 							boolean unknownRV,
1: 							boolean negateCompareResult,
1: 							int variantType)
1: 	{
1: 		this.columnId = columnId;
1: 		this.operator = operator;
1: 		this.orderableGetter = orderableGetter;
1: 		this.activation = activation;
1: 		this.orderedNulls = orderedNulls;
1: 		this.unknownRV = unknownRV;
1: 		this.negateCompareResult = negateCompareResult;
1: 		this.variantType = variantType;
1: 	}
1: 
1: 	/* 
1: 	 * Qualifier interface
1: 	 */
1: 
1: 	/** 
1: 	 * @see Qualifier#getColumnId
1: 	 */
1: 	public int getColumnId()
1: 	{
1: 		return columnId;
1: 	}
1: 
1: 	/** 
1: 	 * @see Qualifier#getOrderable
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public DataValueDescriptor getOrderable() throws StandardException
1: 	{
1: 		if (variantType != VARIANT)
1: 		{
1: 			if (orderableCache == null)
1: 			{
1: 				orderableCache = (DataValueDescriptor) (orderableGetter.invoke(activation));
1: 			}
1: 			return orderableCache;
1: 		}
1: 		return (DataValueDescriptor) (orderableGetter.invoke(activation));
1: 	}
1: 
1: 	/** Get the operator to use in the comparison. 
1:      *
1:      *  @see Qualifier#getOperator
1:      **/
1: 	public int getOperator()
1: 	{
1: 		return operator;
1: 	}
1: 
1: 	/** Should the result from the compare operation be negated?  If true
1:      *  then only rows which fail the compare operation will qualify.
1:      *
1:      *  @see Qualifier#negateCompareResult
1:      **/
1: 	public boolean negateCompareResult()
1: 	{
1: 		return negateCompareResult;
1: 	}
1: 
1: 	/** Get the getOrderedNulls argument to use in the comparison. 
1:      *  
1:      *  @see Qualifier#getOrderedNulls
1:      **/
1:     public boolean getOrderedNulls()
1: 	{
1: 		return orderedNulls;
1: 	}
1: 
1: 	/** Get the getOrderedNulls argument to use in the comparison.
1:      *  
1:      *  @see Qualifier#getUnknownRV
1:      **/
1:     public boolean getUnknownRV()
1: 	{
1: 		return unknownRV;
1: 	}
1: 
1: 	/** Clear the DataValueDescriptor cache, if one exists.
1: 	 *  (The DataValueDescriptor can be 1 of 3 types:
1: 	 *		o  VARIANT		  - cannot be cached as its value can 
1: 	 *							vary within a scan
1: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
1: 	 *							value will not change within a scan
1: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
1: 	 *							as its value will never change
1: 	 *		o  CONSTANT		  - never changes
1:      *  
1:      *  @see Qualifier#getUnknownRV
1: 	 */
1: 	public void clearOrderableCache()
1: 	{
1: 		if ((variantType == SCAN_INVARIANT) || (variantType == VARIANT))
1: 		{
1: 			orderableCache = null;
1: 		}
1: 	}
1: 	
1: 	/** 
1: 	 * This method reinitializes all the state of
1: 	 * the Qualifier.  It is used to distinguish between
1: 	 * resetting something that is query invariant
1: 	 * and something that is constant over every
1: 	 * execution of a query.  Basically, clearOrderableCache()
1: 	 * will only clear out its cache if it is a VARIANT
1: 	 * or SCAN_INVARIANT value.  However, each time a
1: 	 * query is executed, the QUERY_INVARIANT qualifiers need
1: 	 * to be reset.
1: 	 */
1: 	public void reinitialize()
1: 	{
1: 		if (variantType != CONSTANT)
1: 		{
1: 			orderableCache = null;
1: 		}
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "columnId: "+columnId+
1: 				"\noperator: "+operator+
1: 				"\norderedNulls: "+orderedNulls+
1: 				"\nunknownRV: "+unknownRV+
1: 				"\nnegateCompareResult: "+negateCompareResult;
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  *	This is the implementation for Qualifier.  It is used for generated scans.
0:  *
0:  *	@author Jeff Lichtman
0:  */
0: 
0: public class GenericQualifier implements Qualifier
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private int columnId;
0: 	private int operator;
0: 	private GeneratedMethod orderableGetter;
0: 	private Activation	activation;
0: 	private boolean orderedNulls;
0: 	private boolean unknownRV;
0: 	private boolean negateCompareResult;
0: 	protected int variantType;
0: 
0: 	private DataValueDescriptor orderableCache = null;
0: 
0: 	public GenericQualifier(int columnId,
0: 							int operator,
0: 							GeneratedMethod orderableGetter,
0: 							Activation activation,
0: 							boolean orderedNulls,
0: 							boolean unknownRV,
0: 							boolean negateCompareResult,
0: 							int variantType)
0: 	{
0: 		this.columnId = columnId;
0: 		this.operator = operator;
0: 		this.orderableGetter = orderableGetter;
0: 		this.activation = activation;
0: 		this.orderedNulls = orderedNulls;
0: 		this.unknownRV = unknownRV;
0: 		this.negateCompareResult = negateCompareResult;
0: 		this.variantType = variantType;
0: 	}
0: 
0: 	/* 
0: 	 * Qualifier interface
0: 	 */
0: 
0: 	/** 
0: 	 * @see Qualifier#getColumnId
0: 	 */
0: 	public int getColumnId()
0: 	{
0: 		return columnId;
0: 	}
0: 
0: 	/** 
0: 	 * @see Qualifier#getOrderable
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public DataValueDescriptor getOrderable() throws StandardException
0: 	{
0: 		if (variantType != VARIANT)
0: 		{
0: 			if (orderableCache == null)
0: 			{
0: 				orderableCache = (DataValueDescriptor) (orderableGetter.invoke(activation));
0: 			}
0: 			return orderableCache;
0: 		}
0: 		return (DataValueDescriptor) (orderableGetter.invoke(activation));
0: 	}
0: 
0: 	/** Get the operator to use in the comparison. 
0:      *
0:      *  @see Qualifier#getOperator
0:      **/
0: 	public int getOperator()
0: 	{
0: 		return operator;
0: 	}
0: 
0: 	/** Should the result from the compare operation be negated?  If true
0:      *  then only rows which fail the compare operation will qualify.
0:      *
0:      *  @see Qualifier#negateCompareResult
0:      **/
0: 	public boolean negateCompareResult()
0: 	{
0: 		return negateCompareResult;
0: 	}
0: 
0: 	/** Get the getOrderedNulls argument to use in the comparison. 
0:      *  
0:      *  @see Qualifier#getOrderedNulls
0:      **/
0:     public boolean getOrderedNulls()
0: 	{
0: 		return orderedNulls;
0: 	}
0: 
0: 	/** Get the getOrderedNulls argument to use in the comparison.
0:      *  
0:      *  @see Qualifier#getUnknownRV
0:      **/
0:     public boolean getUnknownRV()
0: 	{
0: 		return unknownRV;
0: 	}
0: 
0: 	/** Clear the DataValueDescriptor cache, if one exists.
0: 	 *  (The DataValueDescriptor can be 1 of 3 types:
0: 	 *		o  VARIANT		  - cannot be cached as its value can 
0: 	 *							vary within a scan
0: 	 *		o  SCAN_INVARIANT - can be cached within a scan as its
0: 	 *							value will not change within a scan
0: 	 *		o  QUERY_INVARIANT- can be cached across the life of the query
0: 	 *							as its value will never change
0: 	 *		o  CONSTANT		  - never changes
0:      *  
0:      *  @see Qualifier#getUnknownRV
0: 	 */
0: 	public void clearOrderableCache()
0: 	{
0: 		if ((variantType == SCAN_INVARIANT) || (variantType == VARIANT))
0: 		{
0: 			orderableCache = null;
0: 		}
0: 	}
0: 	
0: 	/** 
0: 	 * This method reinitializes all the state of
0: 	 * the Qualifier.  It is used to distinguish between
0: 	 * resetting something that is query invariant
0: 	 * and something that is constant over every
0: 	 * execution of a query.  Basically, clearOrderableCache()
0: 	 * will only clear out its cache if it is a VARIANT
0: 	 * or SCAN_INVARIANT value.  However, each time a
0: 	 * query is executed, the QUERY_INVARIANT qualifiers need
0: 	 * to be reset.
0: 	 */
0: 	public void reinitialize()
0: 	{
0: 		if (variantType != CONSTANT)
0: 		{
0: 			orderableCache = null;
0: 		}
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "columnId: "+columnId+
0: 				"\noperator: "+operator+
0: 				"\norderedNulls: "+orderedNulls+
0: 				"\nunknownRV: "+unknownRV+
0: 				"\nnegateCompareResult: "+negateCompareResult;
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
============================================================================