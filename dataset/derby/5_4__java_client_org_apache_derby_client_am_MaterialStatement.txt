1:33776ff: /*
3:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.am.MaterialStatement
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.am;
1:33776ff: 
1:69e3d06: import java.util.ArrayList;
1:69e3d06: 
1:33776ff: 
1:33776ff: 
1:70f7692: public interface MaterialStatement {
1:70f7692:     public abstract void writeExecuteImmediate_(String sql, Section section) throws SqlException;
1:33776ff: 
1:70f7692:     public abstract void readExecuteImmediate_() throws SqlException;
1:33776ff: 
1:70f7692:     // The sql parameter is supplied in the read method for drivers that
1:70f7692:     // process all commands on the "read-side" and do little/nothing on the "write-side".
1:70f7692:     // Drivers that follow the write/read paradigm (e.g. NET) will likely ignore the sql parameter.
1:70f7692:     public abstract void readExecuteImmediateForBatch_(String sql) throws SqlException;
1:33776ff: 
1:70f7692:     public abstract void writePrepareDescribeOutput_(String sql, Section section) throws SqlException;
1:33776ff: 
1:70f7692:     public abstract void readPrepareDescribeOutput_() throws SqlException;
1:33776ff: 
1:70f7692:     public abstract void writeOpenQuery_(Section section,
1:70f7692:                                          int fetchSize,
1:70f7692:                                          int resultSetType) throws SqlException;
1:33776ff: 
1:70f7692:     public abstract void readOpenQuery_() throws SqlException;
1:70f7692: 
1:70f7692:     public abstract void writeExecuteCall_(boolean outputExpected,
1:70f7692:                                            String procedureName,
1:70f7692:                                            Section section,
1:70f7692:                                            int fetchSize,
1:70f7692:                                            boolean suppressResultSets, // for batch updates set to true, otherwise to false
1:70f7692:                                            int resultSetType,
1:70f7692:                                            ColumnMetaData parameterMetaData,
1:70f7692:                                            Object[] inputs) throws SqlException;
1:70f7692: 
1:70f7692:     public abstract void readExecuteCall_() throws SqlException;
1:70f7692: 
1:70f7692:     // Used for re-prepares across commit and other places as well
1:70f7692:     public abstract void writePrepare_(String sql, Section section) throws SqlException;
1:70f7692: 
1:70f7692:     public abstract void readPrepare_() throws SqlException;
1:70f7692: 
1:69e3d06:     public abstract void writeSetSpecialRegister_(
1:69e3d06:         Section section, ArrayList sqlsttList) throws SqlException;
1:70f7692: 
1:70f7692:     public abstract void readSetSpecialRegister_() throws SqlException;
1:70f7692: 
1:70f7692:     public abstract void reset_();
1:70f7692: 
1:33776ff: }
1:33776ff: 
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:74fb1b0
/////////////////////////////////////////////////////////////////////////
commit:29c10e3
/////////////////////////////////////////////////////////////////////////
0:     public abstract void writeSetSpecialRegister_(Section section, java.util.ArrayList sqlsttList) throws SqlException;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public abstract void writeSetSpecialRegister_(
1:         Section section, ArrayList sqlsttList) throws SqlException;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: public interface MaterialStatement {
1:     public abstract void writeExecuteImmediate_(String sql, Section section) throws SqlException;
1:     public abstract void readExecuteImmediate_() throws SqlException;
1:     // The sql parameter is supplied in the read method for drivers that
1:     // process all commands on the "read-side" and do little/nothing on the "write-side".
1:     // Drivers that follow the write/read paradigm (e.g. NET) will likely ignore the sql parameter.
1:     public abstract void readExecuteImmediateForBatch_(String sql) throws SqlException;
1:     public abstract void writePrepareDescribeOutput_(String sql, Section section) throws SqlException;
1:     public abstract void readPrepareDescribeOutput_() throws SqlException;
1:     public abstract void writeOpenQuery_(Section section,
1:                                          int fetchSize,
1:                                          int resultSetType) throws SqlException;
1:     public abstract void readOpenQuery_() throws SqlException;
1: 
1:     public abstract void writeExecuteCall_(boolean outputExpected,
1:                                            String procedureName,
1:                                            Section section,
1:                                            int fetchSize,
1:                                            boolean suppressResultSets, // for batch updates set to true, otherwise to false
1:                                            int resultSetType,
1:                                            ColumnMetaData parameterMetaData,
1:                                            Object[] inputs) throws SqlException;
1: 
1:     public abstract void readExecuteCall_() throws SqlException;
1: 
1:     // Used for re-prepares across commit and other places as well
1:     public abstract void writePrepare_(String sql, Section section) throws SqlException;
1: 
1:     public abstract void readPrepare_() throws SqlException;
1: 
0:     public abstract void markClosedOnServer_();
1: 
0:     public abstract void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException;
1: 
1:     public abstract void readSetSpecialRegister_() throws SqlException;
1: 
1:     public abstract void reset_();
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.MaterialStatement
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.am;
1: 
0: import org.apache.derby.client.am.Section;
1: 
0: public interface MaterialStatement
0: {
0:   public abstract void writeExecuteImmediate_ (String sql, Section section) throws SqlException;
0:   public abstract void readExecuteImmediate_ () throws SqlException;
0:   // The sql parameter is supplied in the read method for drivers that
0:   // process all commands on the "read-side" and do little/nothing on the "write-side".
0:   // Drivers that follow the write/read paradigm (e.g. NET) will likely ignore the sql parameter.
0:   public abstract void readExecuteImmediateForBatch_ (String sql) throws SqlException;
1: 
0:   public abstract void writePrepareDescribeOutput_ (String sql, Section section) throws SqlException;
0:   public abstract void readPrepareDescribeOutput_ () throws SqlException;
1: 
0:   public abstract void writeOpenQuery_ (Section section,
0:                               int fetchSize,
0:                               int resultSetType) throws SqlException;
0:   public abstract void readOpenQuery_ () throws SqlException;
1: 
0:   public abstract void writeExecuteCall_ (boolean outputExpected,
0:                                 String procedureName,
0:                                 Section section,
0:                                 int fetchSize,
0:                                 boolean suppressResultSets,  // for batch updates set to true, otherwise to false
0:                                 int resultSetType,
0:                                 ColumnMetaData parameterMetaData,
0:                                 Object[] inputs) throws SqlException;
0:   public abstract void readExecuteCall_ () throws SqlException;
1: 
0:   // Used for re-prepares across commit and other places as well
0:   public abstract void writePrepare_ (String sql, Section section) throws SqlException;
0:   public abstract void readPrepare_ () throws SqlException;
1: 
0:   public abstract void markClosedOnServer_();
1: 
0:   public abstract void writeSetSpecialRegister_ (java.util.ArrayList sqlsttList) throws SqlException;
0:   public abstract void readSetSpecialRegister_ () throws SqlException;
1: 
0:  public abstract void reset_ ();
1: 
1: }
1: 
============================================================================