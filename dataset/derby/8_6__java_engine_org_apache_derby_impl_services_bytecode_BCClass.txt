3:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.BCClass
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
34:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: 
1:0393775: import java.io.IOException;
1:0393775: import java.lang.reflect.Modifier;
1:0393775: import java.security.AccessController;
1:a9b4b8d: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:a9b4b8d: import org.apache.derby.iapi.reference.SQLState;
1:0393775: import org.apache.derby.iapi.services.classfile.ClassFormatOutput;
1:0393775: import org.apache.derby.iapi.services.classfile.ClassHolder;
1:0393775: import org.apache.derby.iapi.services.classfile.ClassMember;
1:0393775: import org.apache.derby.iapi.services.compiler.LocalField;
1:0393775: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:0393775: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:0393775: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * ClassBuilder is used to construct a java class's byte array
1:eac0369:  * representation.
1:eac0369:  *
1:eac0369:  * Limitations:
1:eac0369:  *   No checking for language use violations such as invalid modifiers
1:eac0369:  *	or duplicate field names.
1:eac0369:  *   All classes must have a superclass; java.lang.Object must be
1:eac0369:  *      supplied if there is no superclass.
1:eac0369:  *
2:eac0369:  * <p>
1:eac0369:  * When a class is first created, it has:
1:eac0369:  * <ul>
1:eac0369:  * <li> a superclass
1:eac0369:  * <li> modifiers
1:eac0369:  * <li> a name
1:eac0369:  * <li> a package
1:eac0369:  * <li> no superinterfaces, methods, fields, or constructors
1:eac0369:  * <li> an empty static initializer
1:eac0369:  * <li> an empty initializer
1:eac0369:  * </ul>
1:eac0369:  * <p>
1:eac0369:  * MethodBuilder implementations are required to supply a way for
1:eac0369:  * Generators to give them code.  Most typically, they may have
1:eac0369:  * a stream to which the Generator writes the code that is of
1:eac0369:  * the type to satisfy what the Generator is writing.
1:eac0369:  * <p>
1:eac0369:  * BCClass is a ClassBuilder implementation for generating java bytecode
1:eac0369:  * directly.
1:eac0369:  *
1:eac0369:  */
1:eac0369: class BCClass extends GClass {
1:38fe427: 	
1:38fe427: 	/**
1:38fe427: 	 * Simple text indicating any limits execeeded while generating
1:38fe427: 	 * the class file.
1:38fe427: 	 */
1:ee1cc94: 	String limitMsg;
1:38fe427: 	
1:eac0369: 	//
1:eac0369: 	// ClassBuilder interface
1:eac0369: 	//
1:eac0369: 	/**
1:eac0369: 	 * add a field to this class. Fields cannot
1:eac0369: 	 * be initialized here, they must be initialized
1:eac0369: 	 * in the static initializer code (static fields)
1:eac0369: 	 * or in the constructors.
1:eac0369: 	 * <p>
1:eac0369: 	 * static fields also added to this list,
1:eac0369: 	 * with the modifier set appropriately.
1:eac0369: 	 */
1:eac0369: 	public LocalField addField(String javaType, String name, int modifiers) {
1:eac0369: 
1:eac0369: 		Type type = factory.type(javaType);
1:eac0369: 		// put it into the class holder right away.
1:eac0369: 		ClassMember field = classHold.addMember(name, type.vmName(), modifiers);
2:eac0369: 		int cpi = classHold.addFieldReference(field);
1:eac0369: 
1:eac0369: 		return new BCLocalField(type, cpi);
1:38fe427: 	}
1:38fe427: 
1:38fe427: 	/**
1:eac0369: 	 * At the time the class is completed and bytecode
1:eac0369: 	 * generated, if there are no constructors then
1:eac0369: 	 * the default no-arg constructor will be defined.
1:eac0369: 	 */
1:a9b4b8d: 	public ByteArray getClassBytecode() throws StandardException {
1:eac0369: 
1:eac0369: 		// return if already done
1:eac0369: 		if (bytecode != null) return bytecode;
1:a9b4b8d: 		
1:a9b4b8d: 		try {
1:eac0369: 
1:a9b4b8d: 			if (SanityManager.DEBUG) {
1:a9b4b8d: 				if (SanityManager.DEBUG_ON("ClassLineNumbers")) {
1:eac0369: 
1:a9b4b8d: 					ClassFormatOutput sout = new ClassFormatOutput(2);
1:eac0369: 
1:a9b4b8d: 					int cpiUTF = classHold.addUtf8("GC.java");
1:eac0369: 
1:a9b4b8d: 					sout.putU2(cpiUTF);
1:eac0369: 
1:a9b4b8d: 					classHold.addAttribute("SourceFile", sout);
1:a9b4b8d: 				}
3:eac0369: 			}
1:a9b4b8d: 
1:a9b4b8d: 			// the class is now complete, get its bytecode.
1:a9b4b8d: 			bytecode = classHold.getFileFormat();
1:a9b4b8d: 			
1:a9b4b8d: 		} catch (IOException ioe) {
1:a9b4b8d: 			throw StandardException.newException(
1:a9b4b8d: 					SQLState.GENERATED_CLASS_LINKAGE_ERROR, ioe, getFullName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// release resources, we have the code now.
1:eac0369: 		// name is not released, it may still be accessed.
1:eac0369: 		classHold = null;
1:eac0369: 
2:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			if (SanityManager.DEBUG_ON("DumpClassFile")) {
1:eac0369: 				/* Dump the file in derby.system.home */
1:a15a470: 				String systemHome = AccessController.doPrivileged
1:a15a470: 				(new java.security.PrivilegedAction<String>(){
1:03e89c8: 
1:a15a470: 					public String run(){
1:03e89c8: 						return System.getProperty(Property.SYSTEM_HOME_PROPERTY,".");
1:03e89c8: 
1:03e89c8: 					}
1:03e89c8: 				}
1:03e89c8: 				);				
1:eac0369: 				writeClassFile(systemHome,false,null);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 		  if (SanityManager.DEBUG_ON("ByteCodeGenInstr")) {
1:eac0369: 			SanityManager.DEBUG("ByteCodeGenInstr",
1:eac0369: 				"GEN complete for class "+name);
1:eac0369: 		  }
1:eac0369: 		}
1:38fe427: 		
1:38fe427: 		if (limitMsg != null)
1:38fe427: 			throw StandardException.newException(
1:38fe427: 					SQLState.GENERATED_CLASS_LIMIT_EXCEEDED, getFullName(), limitMsg);
1:eac0369: 		return bytecode;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * the class's unqualified name
1:eac0369: 	 */
1:eac0369: 	public String getName() {
1:eac0369: 		return name;
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * a method. Once it is created, thrown
1:eac0369: 	 * exceptions, statements, and local variable declarations
1:eac0369: 	 * must be added to it. It is put into its defining class
1:eac0369: 	 * when it is created.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: #modifiers #returnType #methodName() {}
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369: 	   </verbatim>
1:eac0369: 	 * <p>
1:eac0369: 	 * This is used to start a constructor as well; pass in
1:eac0369: 	 * null for the returnType when used in that manner.
1:eac0369: 	 *
1:6b50965: 	 * See java.lang.reflect.Modifiers
1:eac0369: 	 * @param modifiers the | of the Modifiers
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 * @param returnType the return type of the method as its
1:eac0369: 	 *	Java language type name.
1:eac0369: 	 * @param methodName the name of the method.
1:eac0369: 	 *
1:eac0369: 	 * @return the method builder.
1:eac0369: 	 */
1:eac0369: 	public MethodBuilder newMethodBuilder(int modifiers, String returnType,
1:eac0369: 		String methodName) {
1:eac0369: 
1:eac0369: 		return newMethodBuilder(modifiers, returnType,
1:eac0369: 			methodName, (String[]) null);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * a method with parameters. Once it is created, thrown
1:eac0369: 	 * exceptions, statements, and local variable declarations
1:eac0369: 	 * must be added to it. It is put into its defining class
1:eac0369: 	 * when it is created.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: #modifiers #returnType #methodName() {}
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369: 	   </verbatim>
1:0393775: 	 * <p>
1:eac0369: 	 * This is used to start a constructor as well; pass in
1:eac0369: 	 * null for the returnType when used in that manner.
1:eac0369: 	 *
1:6b50965: 	 * See java.lang.reflect.Modifiers
1:eac0369: 	 * @param modifiers the | of the Modifiers
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 * @param returnType the return type of the method as its
1:eac0369: 	 *	Java language type name.
1:eac0369: 	 * @param methodName the name of the method.
1:eac0369: 	 * @param parms an array of ParameterDeclarations representing the
1:eac0369: 	 *				method's parameters
1:eac0369: 	 *
1:eac0369: 	 * @return the method builder.
1:eac0369: 	 */
1:eac0369: 	public MethodBuilder newMethodBuilder(int modifiers, String returnType,
1:eac0369: 		String methodName, String[] parms) {
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(returnType!=null);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		BCMethod m = new BCMethod(this,
1:eac0369: 									returnType,
1:eac0369: 									methodName,
2:eac0369: 									modifiers,
1:eac0369: 									parms,
2:eac0369: 									factory);
1:eac0369: 
2:eac0369: 		return m;
1:eac0369: 		
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * a constructor. Once it is created, thrown
1:eac0369: 	 * exceptions, statements, and local variable declarations
1:eac0369: 	 * must be added to it. It is put into its defining class
1:eac0369: 	 * when it is created.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: #modifiers #className() {}
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369: 	  		// className is taken from definingClass.getName()
1:eac0369: 	   </verbatim>
1:0393775: 	 * <p>
1:eac0369: 	 * This is used to start a constructor as well; pass in
1:eac0369: 	 * null for the returnType when used in that manner.
1:eac0369:      * <p>
1:eac0369: 	 *
1:6b50965: 	 * See Modifiers
1:eac0369: 	 * @param modifiers the | of the Modifiers
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 *
1:eac0369: 	 * @return the method builder for the constructor.
1:eac0369: 	 */
1:eac0369: 	public MethodBuilder newConstructorBuilder(int modifiers) {
1:f542632:         return new BCMethod(this, "void", "<init>", modifiers, null, factory);
1:eac0369: 	}
1:eac0369:   	//
1:eac0369: 	// class interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	String getSuperClassName() {
1:eac0369: 		return superClassName;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Let those that need to get to the
1:eac0369: 	 * classModify tool to alter the class definition.
1:eac0369: 	 */
1:eac0369: 	ClassHolder modify() {
1:eac0369: 		return classHold;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Method descriptor caching
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	BCClass(ClassFactory cf, String packageName, int classModifiers,
1:eac0369: 			String className, String superClassName,
1:eac0369: 			BCJava factory) {
1:eac0369: 
1:eac0369: 		super(cf, packageName.concat(className));
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 		  if (SanityManager.DEBUG_ON("ByteCodeGenInstr")) {
1:eac0369: 			SanityManager.DEBUG("ByteCodeGenInstr",
1:eac0369: 				"GEN starting for class "+className);
1:eac0369: 		  }
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// by the time the constructor is done, we have:
1:eac0369: 		//
1:eac0369: 		// package #packageName;
1:eac0369: 		// #classModifiers class #className extends #superClassName
1:eac0369: 		// { }
1:eac0369: 		//
1:eac0369: 
1:eac0369: 		name = className;
1:eac0369: 		if (superClassName == null)
1:eac0369: 			superClassName = "java.lang.Object";
1:eac0369: 		this.superClassName = superClassName;
1:eac0369: 
1:eac0369: 		classType = factory.type(getFullName());
1:eac0369: 
1:eac0369: 		classHold = new ClassHolder(qualifiedName, factory.type(superClassName).vmNameSimple, classModifiers);
1:eac0369: 
1:eac0369: 		this.factory = factory;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected ClassHolder classHold;
1:eac0369: 
1:eac0369: 	protected String superClassName;
1:eac0369: 	protected String name;
1:eac0369: 
1:eac0369: 	BCJava factory;
1:eac0369: 	final Type classType;
1:eac0369: 
1:eac0369: 	ClassFactory getClassFactory() {
1:eac0369: 		return cf;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:38fe427: 	 * Add the fact that some class limit was exceeded while generating
1:b8ef064: 	 * the class. We create a set of them and report at the end, this
1:38fe427: 	 * allows the generated class file to still be dumped.
1:38fe427: 	 * @param mb
1:38fe427: 	 * @param limitName
1:38fe427: 	 * @param limit
1:38fe427: 	 * @param value
1:38fe427: 	 */
1:38fe427: 	void addLimitExceeded(BCMethod mb, String limitName, int limit, int value)
1:38fe427: 	{
1:38fe427: 		StringBuffer sb = new StringBuffer();
1:38fe427: 		if (limitMsg != null)
1:38fe427: 		{
1:38fe427: 			sb.append(limitMsg);
1:38fe427: 			sb.append(", ");
1:38fe427: 		}
1:38fe427: 		
1:38fe427: 		sb.append("method:");
1:38fe427: 		sb.append(mb.getName());
1:38fe427: 		sb.append(" ");
1:38fe427: 		sb.append(limitName);
1:38fe427: 		sb.append(" (");
1:38fe427: 		sb.append(value);
1:38fe427: 		sb.append(" > ");
1:38fe427: 		sb.append(limit);
1:38fe427: 		sb.append(")");
1:38fe427: 		
1:38fe427: 		limitMsg = sb.toString();
1:eac0369: 	}
1:b8ef064:     
1:b8ef064:     /**
1:b8ef064:      * Add the fact that some class limit was exceeded while generating
1:b8ef064:      * the class. Text is the simple string passed in.
1:b8ef064:      * @param rawText Text to be reported.
1:b8ef064:      * 
1:b8ef064:      * @see BCClass#addLimitExceeded(BCMethod, String, int, int)
1:b8ef064:      */
1:b8ef064:     void addLimitExceeded(String rawText)
1:b8ef064:     {
1:b8ef064:         if (limitMsg != null)
1:b8ef064:         {
1:b8ef064:             limitMsg = limitMsg + ", " + rawText;
1:b8ef064:        }
1:b8ef064:         else
1:b8ef064:         {
1:b8ef064:             limitMsg = rawText;
1:b8ef064:         }
1:b8ef064:     }
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1: 				String systemHome = AccessController.doPrivileged
1: 				(new java.security.PrivilegedAction<String>(){
1: 					public String run(){
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f542632
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new BCMethod(this, "void", "<init>", modifiers, null, factory);
commit:0393775
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.lang.reflect.Modifier;
1: import java.security.AccessController;
1: import org.apache.derby.iapi.services.classfile.ClassFormatOutput;
1: import org.apache.derby.iapi.services.classfile.ClassHolder;
1: import org.apache.derby.iapi.services.classfile.ClassMember;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.util.ByteArray;
/////////////////////////////////////////////////////////////////////////
1:      * <p>
0:      * If the modifiers include static, the returned method builder is for
0:      * a class or interface initialization method. Otherwise, the builder is
0:      * for an instance initialization method.
1:      * <p>
/////////////////////////////////////////////////////////////////////////
0:         String method = Modifier.isStatic(modifiers) ? "<clinit>" : "<init>";
0:         return new BCMethod(this, "void", method, modifiers, null, factory);
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:03e89c8
/////////////////////////////////////////////////////////////////////////
0: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
0: 				String systemHome = (String )AccessController.doPrivileged
0: 				(new java.security.PrivilegedAction(){
1: 
0: 					public Object run(){
1: 						return System.getProperty(Property.SYSTEM_HOME_PROPERTY,".");
1: 
1: 					}
1: 				}
1: 				);				
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b8ef064
/////////////////////////////////////////////////////////////////////////
0: 		CodeChunk chunk = new CodeChunk(this);
/////////////////////////////////////////////////////////////////////////
0: 		chunk = new CodeChunk(this);
/////////////////////////////////////////////////////////////////////////
1: 	 * the class. We create a set of them and report at the end, this
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Add the fact that some class limit was exceeded while generating
1:      * the class. Text is the simple string passed in.
1:      * @param rawText Text to be reported.
1:      * 
1:      * @see BCClass#addLimitExceeded(BCMethod, String, int, int)
1:      */
1:     void addLimitExceeded(String rawText)
1:     {
1:         if (limitMsg != null)
1:         {
1:             limitMsg = limitMsg + ", " + rawText;
1:        }
1:         else
1:         {
1:             limitMsg = rawText;
1:         }
1:     }
commit:ee1cc94
/////////////////////////////////////////////////////////////////////////
1: 	String limitMsg;
commit:af01856
/////////////////////////////////////////////////////////////////////////
0: 		CodeChunk chunk = new CodeChunk();
/////////////////////////////////////////////////////////////////////////
0: 		chunk = new CodeChunk();
commit:38fe427
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * Simple text indicating any limits execeeded while generating
1: 	 * the class file.
1: 	 */
0: 	private String limitMsg;
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		if (limitMsg != null)
1: 			throw StandardException.newException(
1: 					SQLState.GENERATED_CLASS_LIMIT_EXCEEDED, getFullName(), limitMsg);
/////////////////////////////////////////////////////////////////////////
0: 		chunk.complete(null, classHold, method, typeWidth, 1);
/////////////////////////////////////////////////////////////////////////
0: 		chunk.complete(null, classHold, method, typeWidth + (staticField ? 0 : 1), 1 + typeWidth);
1: 	}
1: 	
1: 	/**
1: 	 * Add the fact that some class limit was exceeded while generating
0: 	 * the class. We create a set ofg them and report at the end, this
1: 	 * allows the generated class file to still be dumped.
1: 	 * @param mb
1: 	 * @param limitName
1: 	 * @param limit
1: 	 * @param value
1: 	 */
1: 	void addLimitExceeded(BCMethod mb, String limitName, int limit, int value)
1: 	{
1: 		StringBuffer sb = new StringBuffer();
1: 		if (limitMsg != null)
1: 		{
1: 			sb.append(limitMsg);
1: 			sb.append(", ");
1: 		}
1: 		
1: 		sb.append("method:");
1: 		sb.append(mb.getName());
1: 		sb.append(" ");
1: 		sb.append(limitName);
1: 		sb.append(" (");
1: 		sb.append(value);
1: 		sb.append(" > ");
1: 		sb.append(limit);
1: 		sb.append(")");
1: 		
1: 		limitMsg = sb.toString();
commit:a9b4b8d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
1: 	public ByteArray getClassBytecode() throws StandardException {
1: 		
1: 		try {
1: 			if (SanityManager.DEBUG) {
1: 				if (SanityManager.DEBUG_ON("ClassLineNumbers")) {
1: 					ClassFormatOutput sout = new ClassFormatOutput(2);
1: 					int cpiUTF = classHold.addUtf8("GC.java");
1: 					sout.putU2(cpiUTF);
1: 					classHold.addAttribute("SourceFile", sout);
1: 				}
1: 
1: 			// the class is now complete, get its bytecode.
1: 			bytecode = classHold.getFileFormat();
1: 			
1: 		} catch (IOException ioe) {
1: 			throw StandardException.newException(
1: 					SQLState.GENERATED_CLASS_LINKAGE_ERROR, ioe, getFullName());
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.BCClass
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: 
0: import org.apache.derby.iapi.services.compiler.ClassBuilder;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
1: 
0: import org.apache.derby.iapi.services.classfile.ClassHolder;
0: import org.apache.derby.iapi.services.classfile.ClassMember;
0: import org.apache.derby.iapi.services.classfile.ClassFormatOutput;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: import org.apache.derby.iapi.reference.Property;
1: 
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
1: 
0: import java.lang.reflect.Modifier;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
1: 
0: import org.apache.derby.impl.services.bytecode.GClass;
1: 
0: import java.io.IOException;
1: 
1: /**
1:  * ClassBuilder is used to construct a java class's byte array
1:  * representation.
1:  *
1:  * Limitations:
1:  *   No checking for language use violations such as invalid modifiers
1:  *	or duplicate field names.
1:  *   All classes must have a superclass; java.lang.Object must be
1:  *      supplied if there is no superclass.
1:  *
1:  * <p>
1:  * When a class is first created, it has:
1:  * <ul>
1:  * <li> a superclass
1:  * <li> modifiers
1:  * <li> a name
1:  * <li> a package
1:  * <li> no superinterfaces, methods, fields, or constructors
1:  * <li> an empty static initializer
1:  * <li> an empty initializer
1:  * </ul>
1:  * <p>
1:  * MethodBuilder implementations are required to supply a way for
1:  * Generators to give them code.  Most typically, they may have
1:  * a stream to which the Generator writes the code that is of
1:  * the type to satisfy what the Generator is writing.
0:  * @see Generator#giveCode
1:  * <p>
1:  * BCClass is a ClassBuilder implementation for generating java bytecode
1:  * directly.
1:  *
1:  */
1: class BCClass extends GClass {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	//
1: 	// ClassBuilder interface
1: 	//
1: 	/**
1: 	 * add a field to this class. Fields cannot
1: 	 * be initialized here, they must be initialized
1: 	 * in the static initializer code (static fields)
1: 	 * or in the constructors.
1: 	 * <p>
1: 	 * static fields also added to this list,
1: 	 * with the modifier set appropriately.
1: 	 */
1: 	public LocalField addField(String javaType, String name, int modifiers) {
1: 
1: 		Type type = factory.type(javaType);
1: 		// put it into the class holder right away.
1: 		ClassMember field = classHold.addMember(name, type.vmName(), modifiers);
1: 		int cpi = classHold.addFieldReference(field);
1: 
1: 		return new BCLocalField(type, cpi);
1: 	}
1: 
1: 	/**
1: 	 * At the time the class is completed and bytecode
1: 	 * generated, if there are no constructors then
1: 	 * the default no-arg constructor will be defined.
1: 	 */
0: 	public ByteArray getClassBytecode() {
1: 
1: 		// return if already done
1: 		if (bytecode != null) return bytecode;
1: 
1: 		if (SanityManager.DEBUG) {
0: 		  if (SanityManager.DEBUG_ON("ClassLineNumbers")) {
1: 
0: 			try {
1: 
0: 				ClassFormatOutput sout = new ClassFormatOutput(2);
1: 
0: 				int cpiUTF = classHold.addUtf8("GC.java");
1: 
0: 				sout.putU2(cpiUTF);
1: 
0: 				classHold.addAttribute("SourceFile", sout);
0: 			} catch (IOException ioe) {
0: 				SanityManager.THROWASSERT("i/o exception generating class file " + ioe.toString());
1: 			}
1: 		  }
1: 		}
1: 
1: 
0: 		// the class is now complete, get its bytecode.
0: 		bytecode = classHold.getFileFormat();
1: 
1: 		// release resources, we have the code now.
1: 		// name is not released, it may still be accessed.
1: 		classHold = null;
1: 
1: 		if (SanityManager.DEBUG) {
1: 			if (SanityManager.DEBUG_ON("DumpClassFile")) {
1: 				/* Dump the file in derby.system.home */
0: 				String systemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY,".");
1: 				writeClassFile(systemHome,false,null);
1: 			}
1: 		}
1: 
1: 		if (SanityManager.DEBUG) {
1: 		  if (SanityManager.DEBUG_ON("ByteCodeGenInstr")) {
1: 			SanityManager.DEBUG("ByteCodeGenInstr",
1: 				"GEN complete for class "+name);
1: 		  }
1: 		}
1: 		return bytecode;
1: 	}
1: 
1: 
1: 	/**
1: 	 * the class's unqualified name
1: 	 */
1: 	public String getName() {
1: 		return name;
1: 	}
1:  
1: 	/**
1: 	 * a method. Once it is created, thrown
1: 	 * exceptions, statements, and local variable declarations
1: 	 * must be added to it. It is put into its defining class
1: 	 * when it is created.
1: 	 * <verbatim>
1: 	   Java: #modifiers #returnType #methodName() {}
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1: 	   </verbatim>
1: 	 * <p>
1: 	 * This is used to start a constructor as well; pass in
1: 	 * null for the returnType when used in that manner.
1: 	 *
0: 	 * @see java.lang.reflect..Modifiers
1: 	 * @param modifiers the | of the Modifiers
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 * @param returnType the return type of the method as its
1: 	 *	Java language type name.
1: 	 * @param methodName the name of the method.
1: 	 *
1: 	 * @return the method builder.
1: 	 */
1: 	public MethodBuilder newMethodBuilder(int modifiers, String returnType,
1: 		String methodName) {
1: 
1: 		return newMethodBuilder(modifiers, returnType,
1: 			methodName, (String[]) null);
1: 
1: 	}
1: 
1: 
1: 	/**
1: 	 * a method with parameters. Once it is created, thrown
1: 	 * exceptions, statements, and local variable declarations
1: 	 * must be added to it. It is put into its defining class
1: 	 * when it is created.
1: 	 * <verbatim>
1: 	   Java: #modifiers #returnType #methodName() {}
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1: 	   </verbatim>
1: 	 * <p>
1: 	 * This is used to start a constructor as well; pass in
1: 	 * null for the returnType when used in that manner.
1: 	 *
0: 	 * @see java.lang.reflect..Modifiers
1: 	 * @param modifiers the | of the Modifiers
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 * @param returnType the return type of the method as its
1: 	 *	Java language type name.
1: 	 * @param methodName the name of the method.
1: 	 * @param parms an array of ParameterDeclarations representing the
1: 	 *				method's parameters
1: 	 *
1: 	 * @return the method builder.
1: 	 */
1: 	public MethodBuilder newMethodBuilder(int modifiers, String returnType,
1: 		String methodName, String[] parms) {
1: 
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(returnType!=null);
1: 		}
1: 
1: 		BCMethod m = new BCMethod(this,
1: 									returnType,
1: 									methodName,
1: 									modifiers,
1: 									parms,
1: 									factory);
1: 
1: 		return m;
1: 		
1: 	}
1: 
1: 
1: 	/**
1: 	 * a constructor. Once it is created, thrown
1: 	 * exceptions, statements, and local variable declarations
1: 	 * must be added to it. It is put into its defining class
1: 	 * when it is created.
1: 	 * <verbatim>
1: 	   Java: #modifiers #className() {}
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1: 	  		// className is taken from definingClass.getName()
1: 	   </verbatim>
1: 	 * <p>
1: 	 * This is used to start a constructor as well; pass in
1: 	 * null for the returnType when used in that manner.
1: 	 *
0: 	 * @see Modifiers
1: 	 * @param modifiers the | of the Modifiers
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 *
1: 	 * @return the method builder for the constructor.
1: 	 */
1: 	public MethodBuilder newConstructorBuilder(int modifiers) {
1: 
0: 		BCMethod m = new BCMethod(this, "void", "<init>", 
1: 									modifiers,
0: 									(String []) null,
1: 									factory);
1: 
1: 		return m;
1: 	}
1:   	//
1: 	// class interface
1: 	//
1: 
1: 	String getSuperClassName() {
1: 		return superClassName;
1: 	}
1: 
1: 	/**
1: 	 * Let those that need to get to the
1: 	 * classModify tool to alter the class definition.
1: 	 */
1: 	ClassHolder modify() {
1: 		return classHold;
1: 	}
1: 
1: 	/*
1: 	** Method descriptor caching
1: 	*/
1: 
1: 	BCClass(ClassFactory cf, String packageName, int classModifiers,
1: 			String className, String superClassName,
1: 			BCJava factory) {
1: 
1: 		super(cf, packageName.concat(className));
1: 
1: 		if (SanityManager.DEBUG) {
1: 		  if (SanityManager.DEBUG_ON("ByteCodeGenInstr")) {
1: 			SanityManager.DEBUG("ByteCodeGenInstr",
1: 				"GEN starting for class "+className);
1: 		  }
1: 		}
1: 
1: 		// by the time the constructor is done, we have:
1: 		//
1: 		// package #packageName;
1: 		// #classModifiers class #className extends #superClassName
1: 		// { }
1: 		//
1: 
1: 		name = className;
1: 		if (superClassName == null)
1: 			superClassName = "java.lang.Object";
1: 		this.superClassName = superClassName;
1: 
1: 		classType = factory.type(getFullName());
1: 
1: 		classHold = new ClassHolder(qualifiedName, factory.type(superClassName).vmNameSimple, classModifiers);
1: 
1: 		this.factory = factory;
1: 	}
1: 
1: 	protected ClassHolder classHold;
1: 
1: 	protected String superClassName;
1: 	protected String name;
1: 
1: 	BCJava factory;
1: 	final Type classType;
1: 
1: 	ClassFactory getClassFactory() {
1: 		return cf;
1: 	}
1: 
0: 	public void newFieldWithAccessors(String getter, String setter,
0: 		int methodModifers,
0: 		boolean staticField, String type) {
1: 
0: 		String vmType = factory.type(type).vmName();
0: 		methodModifers |= Modifier.FINAL;
1: 
1: 
0: 		// add a field, field has same name as get method
0: 		int fieldModifiers = Modifier.PRIVATE;
0: 		if (staticField)
0: 			fieldModifiers |= Modifier.STATIC;
1: 
0: 		ClassMember field = classHold.addMember(getter, vmType, fieldModifiers);
1: 		int cpi = classHold.addFieldReference(field);
1: 
1: 		/*
0: 		** add the get method
1: 		*/
1: 
0: 		String sig = BCMethodDescriptor.get(BCMethodDescriptor.EMPTY, vmType, factory);
1: 
0: 		ClassMember method = classHold.addMember(getter, sig, methodModifers);
1: 
0: 		CodeChunk chunk = new CodeChunk(true);
1: 
0: 		// load 'this' if required
0: 		if (!staticField)
0: 			chunk.addInstr(VMOpcode.ALOAD_0); // this
1: 		
0: 		// get the field value
0: 		chunk.addInstrU2((staticField ? VMOpcode.GETSTATIC : VMOpcode.GETFIELD), cpi);
1: 
0: 		// and return it
0: 		short vmTypeId = BCJava.vmTypeId(vmType);
1: 
0: 		chunk.addInstr(CodeChunk.RETURN_OPCODE[vmTypeId]);
1: 
0: 		int typeWidth = Type.width(vmTypeId);
0: 		chunk.complete(classHold, method, typeWidth, 1);
1: 
1: 		/*
0: 		** add the set method
1: 		*/
0: 		String[] pda = new String[1];
0: 		pda[0] = vmType;
0: 		sig = new BCMethodDescriptor(pda, VMDescriptor.VOID, factory).toString();
0: 		method = classHold.addMember(setter, sig, methodModifers);
0: 		chunk = new CodeChunk(true);
1: 
0: 		// load 'this' if required
0: 		if (!staticField)
0: 			chunk.addInstr(VMOpcode.ALOAD_0); // this
0: 		// push the only parameter
0: 		chunk.addInstr((short) (CodeChunk.LOAD_VARIABLE_FAST[vmTypeId] + 1));
1: 		
0: 		// and set the field
0: 		chunk.addInstrU2((staticField ? VMOpcode.PUTSTATIC : VMOpcode.PUTFIELD), cpi);
1: 
0: 		chunk.addInstr(VMOpcode.RETURN);
1: 
0: 		chunk.complete(classHold, method, typeWidth + (staticField ? 0 : 1), 1 + typeWidth);
1: 	}
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * See java.lang.reflect.Modifiers
/////////////////////////////////////////////////////////////////////////
1: 	 * See java.lang.reflect.Modifiers
/////////////////////////////////////////////////////////////////////////
1: 	 * See Modifiers
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: 
0: import org.apache.derby.iapi.services.compiler.ClassBuilder;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: 
0: import org.apache.derby.iapi.services.classfile.ClassHolder;
0: import org.apache.derby.iapi.services.classfile.ClassMember;
0: import org.apache.derby.iapi.services.classfile.ClassFormatOutput;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import org.apache.derby.iapi.util.ByteArray;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: 
0: import java.lang.reflect.Modifier;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.classfile.VMDescriptor;
0: 
0: import org.apache.derby.impl.services.bytecode.GClass;
0: 
0: import java.io.IOException;
0: 
0: /**
0:  * ClassBuilder is used to construct a java class's byte array
0:  * representation.
0:  *
0:  * Limitations:
0:  *   No checking for language use violations such as invalid modifiers
0:  *	or duplicate field names.
0:  *   All classes must have a superclass; java.lang.Object must be
0:  *      supplied if there is no superclass.
0:  *
0:  * <p>
0:  * When a class is first created, it has:
0:  * <ul>
0:  * <li> a superclass
0:  * <li> modifiers
0:  * <li> a name
0:  * <li> a package
0:  * <li> no superinterfaces, methods, fields, or constructors
0:  * <li> an empty static initializer
0:  * <li> an empty initializer
0:  * </ul>
0:  * <p>
0:  * MethodBuilder implementations are required to supply a way for
0:  * Generators to give them code.  Most typically, they may have
0:  * a stream to which the Generator writes the code that is of
0:  * the type to satisfy what the Generator is writing.
0:  * @see Generator#giveCode
0:  * <p>
0:  * BCClass is a ClassBuilder implementation for generating java bytecode
0:  * directly.
0:  *
0:  */
0: class BCClass extends GClass {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	//
0: 	// ClassBuilder interface
0: 	//
0: 	/**
0: 	 * add a field to this class. Fields cannot
0: 	 * be initialized here, they must be initialized
0: 	 * in the static initializer code (static fields)
0: 	 * or in the constructors.
0: 	 * <p>
0: 	 * static fields also added to this list,
0: 	 * with the modifier set appropriately.
0: 	 */
0: 	public LocalField addField(String javaType, String name, int modifiers) {
0: 
0: 		Type type = factory.type(javaType);
0: 		// put it into the class holder right away.
0: 		ClassMember field = classHold.addMember(name, type.vmName(), modifiers);
0: 		int cpi = classHold.addFieldReference(field);
0: 
0: 		return new BCLocalField(type, cpi);
0: 	}
0: 
0: 	/**
0: 	 * At the time the class is completed and bytecode
0: 	 * generated, if there are no constructors then
0: 	 * the default no-arg constructor will be defined.
0: 	 */
0: 	public ByteArray getClassBytecode() {
0: 
0: 		// return if already done
0: 		if (bytecode != null) return bytecode;
0: 
0: 		if (SanityManager.DEBUG) {
0: 		  if (SanityManager.DEBUG_ON("ClassLineNumbers")) {
0: 
0: 			try {
0: 
0: 				ClassFormatOutput sout = new ClassFormatOutput(2);
0: 
0: 				int cpiUTF = classHold.addUtf8("GC.java");
0: 
0: 				sout.putU2(cpiUTF);
0: 
0: 				classHold.addAttribute("SourceFile", sout);
0: 			} catch (IOException ioe) {
0: 				SanityManager.THROWASSERT("i/o exception generating class file " + ioe.toString());
0: 			}
0: 		  }
0: 		}
0: 
0: 
0: 		// the class is now complete, get its bytecode.
0: 		bytecode = classHold.getFileFormat();
0: 
0: 		// release resources, we have the code now.
0: 		// name is not released, it may still be accessed.
0: 		classHold = null;
0: 
0: 		if (SanityManager.DEBUG) {
0: 			if (SanityManager.DEBUG_ON("DumpClassFile")) {
0: 				/* Dump the file in derby.system.home */
0: 				String systemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY,".");
0: 				writeClassFile(systemHome,false,null);
0: 			}
0: 		}
0: 
0: 		if (SanityManager.DEBUG) {
0: 		  if (SanityManager.DEBUG_ON("ByteCodeGenInstr")) {
0: 			SanityManager.DEBUG("ByteCodeGenInstr",
0: 				"GEN complete for class "+name);
0: 		  }
0: 		}
0: 		return bytecode;
0: 	}
0: 
0: 
0: 	/**
0: 	 * the class's unqualified name
0: 	 */
0: 	public String getName() {
0: 		return name;
0: 	}
0:  
0: 	/**
0: 	 * a method. Once it is created, thrown
0: 	 * exceptions, statements, and local variable declarations
0: 	 * must be added to it. It is put into its defining class
0: 	 * when it is created.
0: 	 * <verbatim>
0: 	   Java: #modifiers #returnType #methodName() {}
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0: 	   </verbatim>
0: 	 * <p>
0: 	 * This is used to start a constructor as well; pass in
0: 	 * null for the returnType when used in that manner.
0: 	 *
0: 	 * @see java.lang.reflect..Modifiers
0: 	 * @param modifiers the | of the Modifiers
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 * @param returnType the return type of the method as its
0: 	 *	Java language type name.
0: 	 * @param methodName the name of the method.
0: 	 *
0: 	 * @return the method builder.
0: 	 */
0: 	public MethodBuilder newMethodBuilder(int modifiers, String returnType,
0: 		String methodName) {
0: 
0: 		return newMethodBuilder(modifiers, returnType,
0: 			methodName, (String[]) null);
0: 
0: 	}
0: 
0: 
0: 	/**
0: 	 * a method with parameters. Once it is created, thrown
0: 	 * exceptions, statements, and local variable declarations
0: 	 * must be added to it. It is put into its defining class
0: 	 * when it is created.
0: 	 * <verbatim>
0: 	   Java: #modifiers #returnType #methodName() {}
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0: 	   </verbatim>
0: 	 * <p>
0: 	 * This is used to start a constructor as well; pass in
0: 	 * null for the returnType when used in that manner.
0: 	 *
0: 	 * @see java.lang.reflect..Modifiers
0: 	 * @param modifiers the | of the Modifiers
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 * @param returnType the return type of the method as its
0: 	 *	Java language type name.
0: 	 * @param methodName the name of the method.
0: 	 * @param parms an array of ParameterDeclarations representing the
0: 	 *				method's parameters
0: 	 *
0: 	 * @return the method builder.
0: 	 */
0: 	public MethodBuilder newMethodBuilder(int modifiers, String returnType,
0: 		String methodName, String[] parms) {
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(returnType!=null);
0: 		}
0: 
0: 		BCMethod m = new BCMethod(this,
0: 									returnType,
0: 									methodName,
0: 									modifiers,
0: 									parms,
0: 									factory);
0: 
0: 		return m;
0: 		
0: 	}
0: 
0: 
0: 	/**
0: 	 * a constructor. Once it is created, thrown
0: 	 * exceptions, statements, and local variable declarations
0: 	 * must be added to it. It is put into its defining class
0: 	 * when it is created.
0: 	 * <verbatim>
0: 	   Java: #modifiers #className() {}
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0: 	  		// className is taken from definingClass.getName()
0: 	   </verbatim>
0: 	 * <p>
0: 	 * This is used to start a constructor as well; pass in
0: 	 * null for the returnType when used in that manner.
0: 	 *
0: 	 * @see Modifiers
0: 	 * @param modifiers the | of the Modifiers
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 *
0: 	 * @return the method builder for the constructor.
0: 	 */
0: 	public MethodBuilder newConstructorBuilder(int modifiers) {
0: 
0: 		BCMethod m = new BCMethod(this, "void", "<init>", 
0: 									modifiers,
0: 									(String []) null,
0: 									factory);
0: 
0: 		return m;
0: 	}
0:   	//
0: 	// class interface
0: 	//
0: 
0: 	String getSuperClassName() {
0: 		return superClassName;
0: 	}
0: 
0: 	/**
0: 	 * Let those that need to get to the
0: 	 * classModify tool to alter the class definition.
0: 	 */
0: 	ClassHolder modify() {
0: 		return classHold;
0: 	}
0: 
0: 	/*
0: 	** Method descriptor caching
0: 	*/
0: 
0: 	BCClass(ClassFactory cf, String packageName, int classModifiers,
0: 			String className, String superClassName,
0: 			BCJava factory) {
0: 
0: 		super(cf, packageName.concat(className));
0: 
0: 		if (SanityManager.DEBUG) {
0: 		  if (SanityManager.DEBUG_ON("ByteCodeGenInstr")) {
0: 			SanityManager.DEBUG("ByteCodeGenInstr",
0: 				"GEN starting for class "+className);
0: 		  }
0: 		}
0: 
0: 		// by the time the constructor is done, we have:
0: 		//
0: 		// package #packageName;
0: 		// #classModifiers class #className extends #superClassName
0: 		// { }
0: 		//
0: 
0: 		name = className;
0: 		if (superClassName == null)
0: 			superClassName = "java.lang.Object";
0: 		this.superClassName = superClassName;
0: 
0: 		classType = factory.type(getFullName());
0: 
0: 		classHold = new ClassHolder(qualifiedName, factory.type(superClassName).vmNameSimple, classModifiers);
0: 
0: 		this.factory = factory;
0: 	}
0: 
0: 	protected ClassHolder classHold;
0: 
0: 	protected String superClassName;
0: 	protected String name;
0: 
0: 	BCJava factory;
0: 	final Type classType;
0: 
0: 	ClassFactory getClassFactory() {
0: 		return cf;
0: 	}
0: 
0: 	public void newFieldWithAccessors(String getter, String setter,
0: 		int methodModifers,
0: 		boolean staticField, String type) {
0: 
0: 		String vmType = factory.type(type).vmName();
0: 		methodModifers |= Modifier.FINAL;
0: 
0: 
0: 		// add a field, field has same name as get method
0: 		int fieldModifiers = Modifier.PRIVATE;
0: 		if (staticField)
0: 			fieldModifiers |= Modifier.STATIC;
0: 
0: 		ClassMember field = classHold.addMember(getter, vmType, fieldModifiers);
0: 		int cpi = classHold.addFieldReference(field);
0: 
0: 		/*
0: 		** add the get method
0: 		*/
0: 
0: 		String sig = BCMethodDescriptor.get(BCMethodDescriptor.EMPTY, vmType, factory);
0: 
0: 		ClassMember method = classHold.addMember(getter, sig, methodModifers);
0: 
0: 		CodeChunk chunk = new CodeChunk(true);
0: 
0: 		// load 'this' if required
0: 		if (!staticField)
0: 			chunk.addInstr(VMOpcode.ALOAD_0); // this
0: 		
0: 		// get the field value
0: 		chunk.addInstrU2((staticField ? VMOpcode.GETSTATIC : VMOpcode.GETFIELD), cpi);
0: 
0: 		// and return it
0: 		short vmTypeId = BCJava.vmTypeId(vmType);
0: 
0: 		chunk.addInstr(CodeChunk.RETURN_OPCODE[vmTypeId]);
0: 
0: 		int typeWidth = Type.width(vmTypeId);
0: 		chunk.complete(classHold, method, typeWidth, 1);
0: 
0: 		/*
0: 		** add the set method
0: 		*/
0: 		String[] pda = new String[1];
0: 		pda[0] = vmType;
0: 		sig = new BCMethodDescriptor(pda, VMDescriptor.VOID, factory).toString();
0: 		method = classHold.addMember(setter, sig, methodModifers);
0: 		chunk = new CodeChunk(true);
0: 
0: 		// load 'this' if required
0: 		if (!staticField)
0: 			chunk.addInstr(VMOpcode.ALOAD_0); // this
0: 		// push the only parameter
0: 		chunk.addInstr((short) (CodeChunk.LOAD_VARIABLE_FAST[vmTypeId] + 1));
0: 		
0: 		// and set the field
0: 		chunk.addInstrU2((staticField ? VMOpcode.PUTSTATIC : VMOpcode.PUTFIELD), cpi);
0: 
0: 		chunk.addInstr(VMOpcode.RETURN);
0: 
0: 		chunk.complete(classHold, method, typeWidth + (staticField ? 0 : 1), 1 + typeWidth);
0: 	}
0: 
0: }
============================================================================