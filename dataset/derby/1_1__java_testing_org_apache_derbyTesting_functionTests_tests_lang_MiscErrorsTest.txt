1:292e7b6: /*
1:292e7b6: 
1:292e7b6: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.MiscErrorsTest
1:292e7b6: 
1:292e7b6: Licensed to the Apache Software Foundation (ASF) under one or more
1:292e7b6: contributor license agreements.  See the NOTICE file distributed with
1:292e7b6: this work for additional information regarding copyright ownership.
1:292e7b6: The ASF licenses this file to You under the Apache License, Version 2.0
1:292e7b6: (the "License"); you may not use this file except in compliance with
1:292e7b6: the License.  You may obtain a copy of the License at
1:292e7b6: 
1:292e7b6: http://www.apache.org/licenses/LICENSE-2.0
1:292e7b6: 
1:292e7b6: Unless required by applicable law or agreed to in writing, software
1:292e7b6: distributed under the License is distributed on an "AS IS" BASIS,
1:292e7b6: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:292e7b6: See the License for the specific language governing permissions and
1:292e7b6: limitations under the License.
1:292e7b6: 
1:292e7b6: */
1:292e7b6: package org.apache.derbyTesting.functionTests.tests.lang;
1:292e7b6: 
1:292e7b6: import java.sql.SQLException;
1:292e7b6: import java.sql.Statement;
1:292e7b6: 
1:292e7b6: import junit.framework.Test;
1:292e7b6: 
1:292e7b6: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:292e7b6: import org.apache.derbyTesting.junit.JDBC;
1:292e7b6: import org.apache.derbyTesting.junit.TestConfiguration;
1:292e7b6: 
1:292e7b6: /**
1:292e7b6:  * Tests miscellaneous error situations.
1:292e7b6:  */
1:292e7b6: public class MiscErrorsTest extends BaseJDBCTestCase {
1:292e7b6: 
1:292e7b6:     public MiscErrorsTest(String name) {
1:292e7b6:         super(name);
1:292e7b6:     }
1:292e7b6: 
1:292e7b6:     public static Test suite() {
1:292e7b6:         return TestConfiguration.defaultSuite(MiscErrorsTest.class);
1:292e7b6:     }
1:292e7b6: 
1:292e7b6:     public void testLexicalError() {
1:292e7b6:         String sql = "select @#^%*&! from swearwords";
1:292e7b6:         assertCompileError("42X02", sql);
1:292e7b6:     }
1:292e7b6: 
1:292e7b6:     /**
1:292e7b6:      * Try to create duplicate table.
1:292e7b6:      */
1:292e7b6:     public void testDuplicateTableCreation() throws SQLException {
1:292e7b6:         String sql = "create table a (one int)";
1:292e7b6:         Statement st = createStatement();
1:292e7b6:         st.executeUpdate(sql);
1:292e7b6: 
1:292e7b6:         sql = "create table a (one int, two int)";
1:292e7b6:         assertStatementError("X0Y32", st, sql);
1:292e7b6: 
1:292e7b6:         sql = "create table a (one int)";
1:292e7b6:         assertStatementError("X0Y32", st, sql);
1:292e7b6: 
1:292e7b6:         dropTable("a");
1:292e7b6: 
1:292e7b6:         sql = "create table a (one int, two int, three int)";
1:292e7b6:         st.executeUpdate(sql);
1:292e7b6: 
1:292e7b6:         sql = "insert into a values (1,2,3)";
1:292e7b6:         assertEquals(1, st.executeUpdate(sql));
1:292e7b6: 
1:292e7b6:         sql = "select * from a";
1:292e7b6:         JDBC.assertUnorderedResultSet(st.executeQuery(sql),
1:292e7b6:                 new String[][] { { "1", "2", "3", } });
1:292e7b6: 
1:292e7b6:         dropTable("a");
1:292e7b6:     }
1:292e7b6: 
1:292e7b6:     /**
1:292e7b6:      * See that statements that fail at parse or bind time
1:292e7b6:      * are not put in the statement cache.
1:292e7b6:      */
1:292e7b6:     public void testStatementCache() throws SQLException {
1:292e7b6:         String sql = "values 1";
1:292e7b6:         Statement st = createStatement();
1:292e7b6:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1:292e7b6: 
1:292e7b6:         //a stronger test.
1:292e7b6:         sql = "select SQL_TEXT from syscs_diag.statement_cache"
1:292e7b6:             + " where CAST(SQL_TEXT AS LONG VARCHAR)" + " LIKE '%values 1%'";
1:292e7b6:         JDBC.assertUnorderedResultSet(st.executeQuery(sql),
1:292e7b6:                 new String[][] {
1:292e7b6:                     { sql }, { "values 1" }, }
1:292e7b6:         );
1:292e7b6: 
1:292e7b6:         sql = "select SQL_TEXT from syscs_diag.statement_cache"
1:292e7b6:                 + " where CAST(SQL_TEXT AS LONG VARCHAR)" + " LIKE '%932432%'";
1:292e7b6:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), sql);
1:292e7b6: 
1:292e7b6:         sql = "VALUES FRED932432";
1:292e7b6:         assertCompileError("42X04", sql);
1:292e7b6: 
1:292e7b6:         sql = "SELECT * FROM BILL932432";
1:292e7b6:         assertCompileError("42X05", sql);
1:292e7b6: 
1:292e7b6:         sql = "SELECT 932432";
1:292e7b6:         assertCompileError("42X01", sql);
1:292e7b6: 
1:292e7b6:         sql = "select SQL_TEXT from syscs_diag.statement_cache"
1:292e7b6:                 + " where CAST(SQL_TEXT AS LONG VARCHAR)" + " LIKE '%932432%'";
1:292e7b6:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), sql);
1:292e7b6:     }
1:292e7b6: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:292e7b6
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.MiscErrorsTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests miscellaneous error situations.
1:  */
1: public class MiscErrorsTest extends BaseJDBCTestCase {
1: 
1:     public MiscErrorsTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(MiscErrorsTest.class);
1:     }
1: 
1:     public void testLexicalError() {
1:         String sql = "select @#^%*&! from swearwords";
1:         assertCompileError("42X02", sql);
1:     }
1: 
1:     /**
1:      * Try to create duplicate table.
1:      */
1:     public void testDuplicateTableCreation() throws SQLException {
1:         String sql = "create table a (one int)";
1:         Statement st = createStatement();
1:         st.executeUpdate(sql);
1: 
1:         sql = "create table a (one int, two int)";
1:         assertStatementError("X0Y32", st, sql);
1: 
1:         sql = "create table a (one int)";
1:         assertStatementError("X0Y32", st, sql);
1: 
1:         dropTable("a");
1: 
1:         sql = "create table a (one int, two int, three int)";
1:         st.executeUpdate(sql);
1: 
1:         sql = "insert into a values (1,2,3)";
1:         assertEquals(1, st.executeUpdate(sql));
1: 
1:         sql = "select * from a";
1:         JDBC.assertUnorderedResultSet(st.executeQuery(sql),
1:                 new String[][] { { "1", "2", "3", } });
1: 
1:         dropTable("a");
1:     }
1: 
1:     /**
1:      * See that statements that fail at parse or bind time
1:      * are not put in the statement cache.
1:      */
1:     public void testStatementCache() throws SQLException {
1:         String sql = "values 1";
1:         Statement st = createStatement();
1:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), "1");
1: 
1:         //a stronger test.
1:         sql = "select SQL_TEXT from syscs_diag.statement_cache"
1:             + " where CAST(SQL_TEXT AS LONG VARCHAR)" + " LIKE '%values 1%'";
1:         JDBC.assertUnorderedResultSet(st.executeQuery(sql),
1:                 new String[][] {
1:                     { sql }, { "values 1" }, }
1:         );
1: 
1:         sql = "select SQL_TEXT from syscs_diag.statement_cache"
1:                 + " where CAST(SQL_TEXT AS LONG VARCHAR)" + " LIKE '%932432%'";
1:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), sql);
1: 
1:         sql = "VALUES FRED932432";
1:         assertCompileError("42X04", sql);
1: 
1:         sql = "SELECT * FROM BILL932432";
1:         assertCompileError("42X05", sql);
1: 
1:         sql = "SELECT 932432";
1:         assertCompileError("42X01", sql);
1: 
1:         sql = "select SQL_TEXT from syscs_diag.statement_cache"
1:                 + " where CAST(SQL_TEXT AS LONG VARCHAR)" + " LIKE '%932432%'";
1:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), sql);
1:     }
1: }
============================================================================