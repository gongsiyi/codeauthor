1:8a6cb02: /**
1:8a6cb02:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Bug4356Test
1:8a6cb02:  *  
1:8a6cb02:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a6cb02:  * or more contributor license agreements.  See the NOTICE file
1:8a6cb02:  * distributed with this work for additional information
1:8a6cb02:  * regarding copyright ownership.  The ASF licenses this file
1:8a6cb02:  * to you under the Apache License, Version 2.0 (the
1:8a6cb02:  * "License"); you may not use this file except in compliance
1:8a6cb02:  * with the License.  You may obtain a copy of the License at
1:8a6cb02:  *
1:8a6cb02:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8a6cb02:  *
1:8a6cb02:  * Unless required by applicable law or agreed to in writing,
1:8a6cb02:  * software distributed under the License is distributed on an
1:8a6cb02:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8a6cb02:  * KIND, either express or implied.  See the License for the
1:8a6cb02:  * specific language governing permissions and limitations
1:8a6cb02:  * under the License.
1:8a6cb02:  */
1:8a6cb02: package org.apache.derbyTesting.functionTests.tests.lang;
1:8a6cb02: 
1:8a6cb02: import java.sql.Connection;
1:8a6cb02: import java.sql.PreparedStatement;
1:8a6cb02: import java.sql.ResultSet;
1:8a6cb02: import java.sql.SQLException;
1:8a6cb02: import java.sql.Statement;
1:8a6cb02: 
1:8a6cb02: import junit.framework.Test;
1:8a6cb02: 
1:8a6cb02: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:8a6cb02: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:8a6cb02: import org.apache.derbyTesting.junit.JDBC;
1:8a6cb02: import org.apache.derbyTesting.junit.TestConfiguration;
1:8a6cb02: 
1:8a6cb02: /**
1:8a6cb02:  * Demonstrate subselect behavior with prepared statement.
1:8a6cb02:  */
1:8a6cb02: public class Bug4356Test extends BaseJDBCTestCase {
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Basic constructor.
1:8a6cb02:      */
1:8a6cb02:     public Bug4356Test(String name) {
1:8a6cb02:         super(name);
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Sets the auto commit to false.
1:8a6cb02:      */
1:8a6cb02:     protected void initializeConnection(Connection conn) throws SQLException {
1:8a6cb02:         conn.setAutoCommit(false);
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Returns the implemented tests.
1:8a6cb02:      * 
1:8a6cb02:      * @return An instance of <code>Test</code> with the implemented tests to
1:8a6cb02:      *         run.
1:8a6cb02:      */
1:8a6cb02:     public static Test suite() {
1:8a6cb02:         return new CleanDatabaseTestSetup(TestConfiguration
1:8a6cb02:                 .embeddedSuite(Bug4356Test.class)) {
1:8a6cb02:             protected void decorateSQL(Statement stmt) throws SQLException {
1:8a6cb02:                 stmt.executeUpdate("CREATE TABLE T1 (a integer, b integer)");
1:8a6cb02:                 stmt.executeUpdate("CREATE TABLE T2 (a integer)");
1:8a6cb02:                 stmt.executeUpdate("INSERT INTO T2 VALUES(1)");
1:8a6cb02:             }
1:8a6cb02:         };
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Bug only happens when autocommit is off.
1:8a6cb02:      */
1:8a6cb02:     protected void setUp() throws Exception {
1:8a6cb02:         super.setUp();
1:8a6cb02:     }
1:8a6cb02: 
1:8a6cb02:     /**
1:8a6cb02:      * Check fix for Bug4356 - Prepared statement parameter buffers are not cleared between calls 
1:8a6cb02:      * to executeUpdate() in the same transaction.
1:8a6cb02:      * Using a prepared statement to insert data into a table using 
1:8a6cb02:      * a sub select to get the data from a second table. The
1:8a6cb02:      * prepared statement doesn't seem to clear it's buffers between 
1:8a6cb02:      * execute statements within the same transaction.
1:8a6cb02:      * @throws SQLException
1:8a6cb02:      */
1:8a6cb02:     public void testBug4356() throws SQLException {
1:8a6cb02:         Statement stmt = createStatement();
1:8a6cb02:         ResultSet rs;
1:8a6cb02: 
1:8a6cb02:         PreparedStatement ps = prepareStatement("INSERT INTO T1 VALUES (?,(select count(*) from t2 where a = ?)) ");
1:8a6cb02: 
1:8a6cb02:         ps.setInt(1, 1);
1:8a6cb02:         ps.setInt(2, 1);
1:8a6cb02:         ps.executeUpdate();
1:8a6cb02: 
1:8a6cb02:         ps.setInt(1, 2);
1:8a6cb02:         ps.setInt(2, 2);
1:8a6cb02:         ps.executeUpdate();
1:8a6cb02: 
1:8a6cb02:         commit();
1:8a6cb02:      
1:8a6cb02: 
1:8a6cb02:         rs = stmt.executeQuery("SELECT * FROM T1");
1:8a6cb02:         JDBC.assertFullResultSet(rs,new String[][] {{"1","1"},
1:8a6cb02:                {"2","0"}});
1:8a6cb02:  
1:8a6cb02: 
1:8a6cb02:         rs.close();
1:8a6cb02:         stmt.close();
1:8a6cb02:     }
1:8a6cb02: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:8a6cb02
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.Bug4356Test
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Demonstrate subselect behavior with prepared statement.
1:  */
1: public class Bug4356Test extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Basic constructor.
1:      */
1:     public Bug4356Test(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Sets the auto commit to false.
1:      */
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:     }
1: 
1:     /**
1:      * Returns the implemented tests.
1:      * 
1:      * @return An instance of <code>Test</code> with the implemented tests to
1:      *         run.
1:      */
1:     public static Test suite() {
1:         return new CleanDatabaseTestSetup(TestConfiguration
1:                 .embeddedSuite(Bug4356Test.class)) {
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1:                 stmt.executeUpdate("CREATE TABLE T1 (a integer, b integer)");
1:                 stmt.executeUpdate("CREATE TABLE T2 (a integer)");
1:                 stmt.executeUpdate("INSERT INTO T2 VALUES(1)");
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * Bug only happens when autocommit is off.
1:      */
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     /**
1:      * Check fix for Bug4356 - Prepared statement parameter buffers are not cleared between calls 
1:      * to executeUpdate() in the same transaction.
1:      * Using a prepared statement to insert data into a table using 
1:      * a sub select to get the data from a second table. The
1:      * prepared statement doesn't seem to clear it's buffers between 
1:      * execute statements within the same transaction.
1:      * @throws SQLException
1:      */
1:     public void testBug4356() throws SQLException {
1:         Statement stmt = createStatement();
1:         ResultSet rs;
1: 
1:         PreparedStatement ps = prepareStatement("INSERT INTO T1 VALUES (?,(select count(*) from t2 where a = ?)) ");
1: 
1:         ps.setInt(1, 1);
1:         ps.setInt(2, 1);
1:         ps.executeUpdate();
1: 
1:         ps.setInt(1, 2);
1:         ps.setInt(2, 2);
1:         ps.executeUpdate();
1: 
1:         commit();
1:      
1: 
1:         rs = stmt.executeQuery("SELECT * FROM T1");
1:         JDBC.assertFullResultSet(rs,new String[][] {{"1","1"},
1:                {"2","0"}});
1:  
1: 
1:         rs.close();
1:         stmt.close();
1:     }
1: }
============================================================================