1:b7ecfd9: /*
1:b7ecfd9: 
1:b7ecfd9: Derby - Class org.apache.derbyDemo.vtis.core.FlatFileVTI
1:b7ecfd9: 
1:b7ecfd9: Licensed to the Apache Software Foundation (ASF) under one or more
1:b7ecfd9: contributor license agreements.  See the NOTICE file distributed with
1:b7ecfd9: this work for additional information regarding copyright ownership.
1:b7ecfd9: The ASF licenses this file to You under the Apache License, Version 2.0
1:b7ecfd9: (the "License"); you may not use this file except in compliance with
1:b7ecfd9: the License.  You may obtain a copy of the License at
1:b7ecfd9: 
1:b7ecfd9: http://www.apache.org/licenses/LICENSE-2.0
1:b7ecfd9: 
1:b7ecfd9: Unless required by applicable law or agreed to in writing, software
1:b7ecfd9: distributed under the License is distributed on an "AS IS" BASIS,
1:b7ecfd9: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7ecfd9: See the License for the specific language governing permissions and
1:b7ecfd9: limitations under the License.
1:b7ecfd9: 
1:b7ecfd9: */
1:b7ecfd9: 
1:b7ecfd9: package org.apache.derbyDemo.vtis.core;
1:b7ecfd9: 
1:b7ecfd9: import java.io.*;
1:b7ecfd9: import java.math.BigDecimal;
1:b7ecfd9: import java.sql.*;
1:b7ecfd9: import java.text.DateFormat;
1:b7ecfd9: import java.text.ParseException;
1:b7ecfd9: 
1:19d913d: import org.apache.derby.vti.StringColumnVTI;
1:19d913d: 
1:b7ecfd9: /**
1:b7ecfd9:  * <p>
1:b7ecfd9:  * This VTI makes a table out of the records in a flat file. This is an abstract
1:b7ecfd9:  * class. Child classes are responsible for implementing the following methods
1:b7ecfd9:  * which parse and advance the file:
1:b7ecfd9:  * </p>
1:b7ecfd9:  *
1:b7ecfd9:  * <ul>
1:b7ecfd9:  * <li>parseRow() - Parses the next record of the file into an array of Strings,
1:b7ecfd9:  * one for each column.</li>
1:b7ecfd9:  * </ul>
1:b7ecfd9:  */
1:b7ecfd9: public    abstract  class   FlatFileVTI  extends StringColumnVTI
1:b7ecfd9: {
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTANTS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // STATE
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     private String              _textFileName;
1:b7ecfd9: 
1:b7ecfd9:     private File                _file;
1:b7ecfd9:     private FileReader          _fileReader;
1:b7ecfd9:     private LineNumberReader    _lineReader;
1:b7ecfd9: 
1:b7ecfd9:     private boolean             _closed = false;
1:b7ecfd9: 
1:b7ecfd9:     private String[]            _row;
1:b7ecfd9: 
1:b7ecfd9:     private int                 _lineNumber = -1;
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Parse the next chunk of text, using readLine(), and return the next row.
1:b7ecfd9:      * Returns null if the file is exhausted.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected  abstract String[]  parseRow( ) throws SQLException;
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // StringColumnVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Get the string value of the column in the current row identified by the 1-based columnNumber.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected  String  getRawColumn( int columnNumber ) throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         return _row[ columnNumber - 1 ];
1:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTRUCTORS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Build a StringColumnVTI with the given column names
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public  FlatFileVTI( String[] columnNames, String textFileName )
1:b7ecfd9:     {
1:b7ecfd9:         super( columnNames );
1:b7ecfd9: 
1:b7ecfd9:         _textFileName = textFileName;
1:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // ResultSet BEHAVIOR
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     public  boolean next() throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         if ( _file == null )
1:b7ecfd9:         {
1:b7ecfd9:             try {
1:b7ecfd9:                 _file = new File( _textFileName );
1:b7ecfd9:                 _fileReader = new FileReader( _file );
1:b7ecfd9:                 _lineReader = new LineNumberReader( _fileReader );
1:b7ecfd9:             } catch (Throwable t) { throw wrap( t ); }
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         _row = parseRow();
1:b7ecfd9: 
1:b7ecfd9:         if ( _row == null ) { return false; }
1:b7ecfd9:         else { return true; }
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     public  void close() throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         try {
1:b7ecfd9:             if ( _lineReader != null ) { _lineReader.close(); }
1:b7ecfd9:             if ( _fileReader != null ) { _fileReader.close(); }
1:b7ecfd9: 
1:b7ecfd9:         } catch (Throwable t) { throw wrap( t ); }
1:b7ecfd9:         finally
1:b7ecfd9:         {
1:b7ecfd9:              _lineReader = null;
1:b7ecfd9:              _fileReader = null;
1:b7ecfd9:             _file = null;
1:b7ecfd9:         }
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     public  ResultSetMetaData   getMetaData() throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         throw new SQLException( "Not implemented." );
1:b7ecfd9:     }
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // MINIONS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Get the current line number.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected   int getLineNumber() { return _lineNumber; }
1:b7ecfd9:     
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Get the name of the file being read.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected   String getTextFileName() { return _textFileName; }
1:b7ecfd9:     
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Read the next line from the file and return it. Return null if the file
1:b7ecfd9:      * is exhausted.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected   String  readLine()  throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         try {
1:b7ecfd9:             String retval = _lineReader.readLine();
1:b7ecfd9: 
1:b7ecfd9:             _lineNumber++;
1:b7ecfd9:             return retval;
1:b7ecfd9:         } catch( Throwable t ) { throw wrap( t ); }
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Wrap an exception in a SQLException.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected SQLException    wrap( Throwable t )
1:b7ecfd9:     {
1:b7ecfd9:         SQLException    se = new SQLException( t.getMessage() );
1:b7ecfd9: 
1:b7ecfd9:         se.initCause( t );
1:b7ecfd9: 
1:b7ecfd9:         return se;
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Wrap an exception in a SQLException.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected SQLException    wrap( String message, Throwable t )
1:b7ecfd9:     {
1:b7ecfd9:         SQLException    se = new SQLException( message );
1:b7ecfd9: 
1:b7ecfd9:         se.initCause( t );
1:b7ecfd9: 
1:b7ecfd9:         return se;
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:19d913d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.vti.StringColumnVTI;
1: 
commit:b7ecfd9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyDemo.vtis.core.FlatFileVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyDemo.vtis.core;
1: 
1: import java.io.*;
1: import java.math.BigDecimal;
1: import java.sql.*;
1: import java.text.DateFormat;
1: import java.text.ParseException;
1: 
1: /**
1:  * <p>
1:  * This VTI makes a table out of the records in a flat file. This is an abstract
1:  * class. Child classes are responsible for implementing the following methods
1:  * which parse and advance the file:
1:  * </p>
1:  *
1:  * <ul>
1:  * <li>parseRow() - Parses the next record of the file into an array of Strings,
1:  * one for each column.</li>
1:  * </ul>
1:  */
1: public    abstract  class   FlatFileVTI  extends StringColumnVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private String              _textFileName;
1: 
1:     private File                _file;
1:     private FileReader          _fileReader;
1:     private LineNumberReader    _lineReader;
1: 
1:     private boolean             _closed = false;
1: 
1:     private String[]            _row;
1: 
1:     private int                 _lineNumber = -1;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Parse the next chunk of text, using readLine(), and return the next row.
1:      * Returns null if the file is exhausted.
1:      * </p>
1:      */
1:     protected  abstract String[]  parseRow( ) throws SQLException;
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // StringColumnVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the string value of the column in the current row identified by the 1-based columnNumber.
1:      * </p>
1:      */
1:     protected  String  getRawColumn( int columnNumber ) throws SQLException
1:     {
1:         return _row[ columnNumber - 1 ];
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Build a StringColumnVTI with the given column names
1:      * </p>
1:      */
1:     public  FlatFileVTI( String[] columnNames, String textFileName )
1:     {
1:         super( columnNames );
1: 
1:         _textFileName = textFileName;
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ResultSet BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  boolean next() throws SQLException
1:     {
1:         if ( _file == null )
1:         {
1:             try {
1:                 _file = new File( _textFileName );
1:                 _fileReader = new FileReader( _file );
1:                 _lineReader = new LineNumberReader( _fileReader );
1:             } catch (Throwable t) { throw wrap( t ); }
1:         }
1: 
1:         _row = parseRow();
1: 
1:         if ( _row == null ) { return false; }
1:         else { return true; }
1:     }
1: 
1:     public  void close() throws SQLException
1:     {
1:         try {
1:             if ( _lineReader != null ) { _lineReader.close(); }
1:             if ( _fileReader != null ) { _fileReader.close(); }
1: 
1:         } catch (Throwable t) { throw wrap( t ); }
1:         finally
1:         {
1:              _lineReader = null;
1:              _fileReader = null;
1:             _file = null;
1:         }
1:     }
1: 
1:     public  ResultSetMetaData   getMetaData() throws SQLException
1:     {
1:         throw new SQLException( "Not implemented." );
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the current line number.
1:      * </p>
1:      */
1:     protected   int getLineNumber() { return _lineNumber; }
1:     
1:     /**
1:      * <p>
1:      * Get the name of the file being read.
1:      * </p>
1:      */
1:     protected   String getTextFileName() { return _textFileName; }
1:     
1:     /**
1:      * <p>
1:      * Read the next line from the file and return it. Return null if the file
1:      * is exhausted.
1:      * </p>
1:      */
1:     protected   String  readLine()  throws SQLException
1:     {
1:         try {
1:             String retval = _lineReader.readLine();
1: 
1:             _lineNumber++;
1:             return retval;
1:         } catch( Throwable t ) { throw wrap( t ); }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Wrap an exception in a SQLException.
1:      * </p>
1:      */
1:     protected SQLException    wrap( Throwable t )
1:     {
1:         SQLException    se = new SQLException( t.getMessage() );
1: 
1:         se.initCause( t );
1: 
1:         return se;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Wrap an exception in a SQLException.
1:      * </p>
1:      */
1:     protected SQLException    wrap( String message, Throwable t )
1:     {
1:         SQLException    se = new SQLException( message );
1: 
1:         se.initCause( t );
1: 
1:         return se;
1:     }
1: 
1: }
============================================================================