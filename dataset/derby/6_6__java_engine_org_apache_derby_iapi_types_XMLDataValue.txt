2:099e28f: /*
3:099e28f: 
1:099e28f:    Derby - Class org.apache.derby.iapi.types.XMLDataValue
1:099e28f: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:099e28f: 
1:099e28f:       http://www.apache.org/licenses/LICENSE-2.0
1:099e28f: 
1:099e28f:    Unless required by applicable law or agreed to in writing, software
1:099e28f:    distributed under the License is distributed on an "AS IS" BASIS,
1:099e28f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:099e28f:    See the License for the specific language governing permissions and
1:099e28f:    limitations under the License.
1:099e28f: 
3:099e28f:  */
1:099e28f: 
1:099e28f: package org.apache.derby.iapi.types;
1:099e28f: 
1:099e28f: import org.apache.derby.iapi.error.StandardException;
1:099e28f: 
1:099e28f: public interface XMLDataValue extends DataValueDescriptor
1:099e28f: {
1:6e7bbc8:    /**
1:6e7bbc8:      * Method to parse an XML string and, if it's valid,
1:6e7bbc8:      * store the _serialized_ version locally and then return
1:6e7bbc8:      * this XMLDataValue.
1:6b50965:      *
1:d09782a:      * @param stringValue The string value to check.
1:6b50965:      * @param preserveWS Whether or not to preserve
1:6b50965:      *  ignorable whitespace.
1:6e7bbc8:      * @param sqlxUtil Contains SQL/XML objects and util
1:6e7bbc8:      *  methods that facilitate execution of XML-related
1:6e7bbc8:      *  operations
1:6e7bbc8:      * @return If 'text' constitutes a valid XML document,
1:6e7bbc8:      *  it has been stored in this XML value and this XML
1:6e7bbc8:      *  value returned; otherwise, an exception is thrown. 
1:6e7bbc8:      * @exception StandardException Thrown on error.
1:099e28f:      */
1:d09782a:     public XMLDataValue XMLParse(
1:d09782a:             StringDataValue stringValue,
1:d09782a:             boolean preserveWS,
1:d09782a:             SqlXmlUtil sqlxUtil)
1:d09782a:         throws StandardException;
1:099e28f: 
3:099e28f:     /**
1:099e28f:      * The SQL/XML XMLSerialize operator.
1:6e7bbc8:      * Serializes this XML value into a string with a user-specified
1:6e7bbc8:      * character type, and returns that string via the received
1:6e7bbc8:      * StringDataValue (if the received StringDataValue is non-null
1:6e7bbc8:      * and of the correct type; else, a new StringDataValue is
1:6e7bbc8:      * returned).
3:099e28f:      *
1:099e28f:      * @param result The result of a previous call to this method,
1:099e28f:      *  null if not called yet.
1:099e28f:      * @param targetType The string type to which we want to serialize.
1:099e28f:      * @param targetWidth The width of the target type.
1:27f9fd6:      * @param targetCollationType The collation type of the target type.
1:099e28f:      * @return A serialized (to string) version of this XML object,
1:099e28f:      *  in the form of a StringDataValue object.
1:099e28f:      * @exception StandardException Thrown on error
1:099e28f:      */
1:099e28f:     public StringDataValue XMLSerialize(StringDataValue result,
1:27f9fd6:         int targetType, int targetWidth, int targetCollationType) 
1:27f9fd6:     throws StandardException;
1:099e28f: 
1:099e28f:     /**
1:099e28f:      * The SQL/XML XMLExists operator.
1:6e7bbc8:      * Checks to see if evaluation of the query expression contained
1:6e7bbc8:      * within the received util object against this XML value returns
1:6e7bbc8:      * at least one item. NOTE: For now, the query expression must be
1:6e7bbc8:      * XPath only (XQuery not supported) because that's what Xalan
1:6e7bbc8:      * supports.
1:099e28f:      *
1:6e7bbc8:      * @param sqlxUtil Contains SQL/XML objects and util
1:6e7bbc8:      *  methods that facilitate execution of XML-related
1:6e7bbc8:      *  operations
1:6e7bbc8:      * @return True if evaluation of the query expression stored
1:6e7bbc8:      *  in sqlxUtil returns at least one node for this XML value;
1:6e7bbc8:      *  unknown if the xml value is NULL; false otherwise.
1:099e28f:      * @exception StandardException Thrown on error
1:099e28f:      */
1:6e7bbc8:     public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
1:6e7bbc8: 		throws StandardException;
1:099e28f: 
1:9f654e5:     /**
1:9f654e5:      * Evaluate the XML query expression contained within the received
1:9f654e5:      * util object against this XML value and store the results into
1:9f654e5:      * the received XMLDataValue "result" param (assuming "result" is
1:9f654e5:      * non-null; else create a new XMLDataValue).
1:9f654e5:      *
1:9f654e5:      * @param sqlxUtil Contains SQL/XML objects and util methods that
1:9f654e5:      *  facilitate execution of XML-related operations
1:d09782a:      * @param result The result of a previous call to this method; null
1:d09782a:      *  if not called yet.
1:9f654e5:      * @return An XMLDataValue whose content corresponds to the serialized
1:9f654e5:      *  version of the results from evaluation of the query expression.
1:9f654e5:      *  Note: this XMLDataValue may not be storable into Derby XML
1:9f654e5:      *  columns.
1:f668d94:      * @exception StandardException thrown on error
1:9f654e5:      */
1:d09782a:     public XMLDataValue XMLQuery(SqlXmlUtil sqlxUtil, XMLDataValue result)
1:9f654e5: 		throws StandardException;
1:9f654e5: 
1:9f654e5:     /* ****
1:9f654e5:      * Helper classes and methods.
1:9f654e5:      * */
1:9f654e5: 
1:9f654e5:     /**
1:9f654e5:      * Set this XML value's qualified type.
1:9f654e5:      */
1:9f654e5:     public void setXType(int xtype);
1:9f654e5: 
1:9f654e5:     /**
1:9f654e5:      * Retrieve this XML value's qualified type.
1:9f654e5:      */
1:9f654e5:     public int getXType();
1:0c5a8eb: 
1:0c5a8eb:     /**
1:0c5a8eb:      * Take note of the fact this XML value represents an XML
1:0c5a8eb:      * sequence that has one or more top-level attribute nodes.
1:0c5a8eb:      */
1:0c5a8eb:     public void markAsHavingTopLevelAttr();
1:0c5a8eb: 
1:0c5a8eb:     /**
1:0c5a8eb:      * Return whether or not this XML value represents a sequence
1:0c5a8eb:      * that has one or more top-level attribute nodes.
1:0c5a8eb:      */
1:0c5a8eb:     public boolean hasTopLevelAttr();
1:099e28f: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException thrown on error
commit:d09782a
/////////////////////////////////////////////////////////////////////////
1:      * @param stringValue The string value to check.
/////////////////////////////////////////////////////////////////////////
1:     public XMLDataValue XMLParse(
1:             StringDataValue stringValue,
1:             boolean preserveWS,
1:             SqlXmlUtil sqlxUtil)
1:         throws StandardException;
/////////////////////////////////////////////////////////////////////////
1:      * @param result The result of a previous call to this method; null
1:      *  if not called yet.
/////////////////////////////////////////////////////////////////////////
1:     public XMLDataValue XMLQuery(SqlXmlUtil sqlxUtil, XMLDataValue result)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:27f9fd6
/////////////////////////////////////////////////////////////////////////
1:      * @param targetCollationType The collation type of the target type.
1:         int targetType, int targetWidth, int targetCollationType) 
1:     throws StandardException;
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:0c5a8eb
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Take note of the fact this XML value represents an XML
1:      * sequence that has one or more top-level attribute nodes.
1:      */
1:     public void markAsHavingTopLevelAttr();
1: 
1:     /**
1:      * Return whether or not this XML value represents a sequence
1:      * that has one or more top-level attribute nodes.
1:      */
1:     public boolean hasTopLevelAttr();
commit:9f654e5
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Evaluate the XML query expression contained within the received
1:      * util object against this XML value and store the results into
1:      * the received XMLDataValue "result" param (assuming "result" is
1:      * non-null; else create a new XMLDataValue).
1:      *
0:      * @param result The result of a previous call to this method; null
0:      *  if not called yet.
1:      * @param sqlxUtil Contains SQL/XML objects and util methods that
1:      *  facilitate execution of XML-related operations
1:      * @return An XMLDataValue whose content corresponds to the serialized
1:      *  version of the results from evaluation of the query expression.
1:      *  Note: this XMLDataValue may not be storable into Derby XML
1:      *  columns.
0:      * @exception Exception thrown on error (and turned into a
0:      *  StandardException by the caller).
1:      */
0:     public XMLDataValue XMLQuery(XMLDataValue result, SqlXmlUtil sqlxUtil)
1: 		throws StandardException;
1: 
1:     /* ****
1:      * Helper classes and methods.
1:      * */
1: 
1:     /**
1:      * Set this XML value's qualified type.
1:      */
1:     public void setXType(int xtype);
1: 
1:     /**
1:      * Retrieve this XML value's qualified type.
1:      */
1:     public int getXType();
commit:6e7bbc8
/////////////////////////////////////////////////////////////////////////
1:    /**
1:      * Method to parse an XML string and, if it's valid,
1:      * store the _serialized_ version locally and then return
1:      * this XMLDataValue.
0:      * @param text The string value to check.
1:      * @param sqlxUtil Contains SQL/XML objects and util
1:      *  methods that facilitate execution of XML-related
1:      *  operations
1:      * @return If 'text' constitutes a valid XML document,
1:      *  it has been stored in this XML value and this XML
1:      *  value returned; otherwise, an exception is thrown. 
1:      * @exception StandardException Thrown on error.
0: 	public XMLDataValue XMLParse(String text, boolean preserveWS,
0: 		SqlXmlUtil sqlxUtil) throws StandardException;
1:      * Serializes this XML value into a string with a user-specified
1:      * character type, and returns that string via the received
1:      * StringDataValue (if the received StringDataValue is non-null
1:      * and of the correct type; else, a new StringDataValue is
1:      * returned).
/////////////////////////////////////////////////////////////////////////
1:      * Checks to see if evaluation of the query expression contained
1:      * within the received util object against this XML value returns
1:      * at least one item. NOTE: For now, the query expression must be
1:      * XPath only (XQuery not supported) because that's what Xalan
1:      * supports.
1:      * @param sqlxUtil Contains SQL/XML objects and util
1:      *  methods that facilitate execution of XML-related
1:      *  operations
1:      * @return True if evaluation of the query expression stored
1:      *  in sqlxUtil returns at least one node for this XML value;
1:      *  unknown if the xml value is NULL; false otherwise.
1:     public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
1: 		throws StandardException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0:      * contents of this XML value. If 'text' constitutes a valid XML document,
1:      *
0:      * @param xmlText The string value to check.
1:      * @param preserveWS Whether or not to preserve
1:      *  ignorable whitespace.
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:099e28f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.XMLDataValue
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public interface XMLDataValue extends DataValueDescriptor
1: {
1:     /*
0:      ** NOTE: Officially speaking, the XMLParse operator
0:      ** is not defined here; it is instead defined on the
0:      ** StringDataValue interface (and implemented in
0:      ** SQLChar.java) since it is called with a _String_
0:      ** operand, not with an XML operand.  That said,
0:      ** though, the implemention in SQLChar.java
0:      ** really just calls the "parseAndLoadXML" method that's
0:      ** defined on this interface, so it's this interface
0:      ** that really does the work.
0:      **
0:      ** XMLSerialize and XMLExists, on the other hand,
0:      ** are called with XML operands, and thus they
0:      ** can just be defined in this interface.
1:      */
1: 
1:     /**
0:      * Parse the received string value as XML.  If the
0:      * parse succeeds, store the string value as the
0:      * contents of this XML value.
1:      *
0:      * @param text The string value to check.
0:      * @param preserveWS Whether or not to preserve
0:      *  ignorable whitespace.
0:      * @return  If 'text' constitutes a valid XML document,
0:      *  it has been stored in this XML value and nothing
0:      *  is returned; otherwise, an exception is thrown.
0:      * @exception StandardException Thrown on parse error.
1:      */
0:     public void parseAndLoadXML(String xmlText, boolean preserveWS)
0:         throws StandardException;
1: 
1:     /**
1:      * The SQL/XML XMLSerialize operator.
0:      * Converts this XML value into a string with a user-specified
0:      * type, and returns that string via the received StringDataValue.
0:      * (if the received StringDataValue is non-null and of the
0:      * correct type; else, a new StringDataValue is returned).
1:      *
1:      * @param result The result of a previous call to this method,
1:      *  null if not called yet.
1:      * @param targetType The string type to which we want to serialize.
1:      * @param targetWidth The width of the target type.
1:      * @return A serialized (to string) version of this XML object,
1:      *  in the form of a StringDataValue object.
1:      * @exception StandardException Thrown on error
1:      */
1:     public StringDataValue XMLSerialize(StringDataValue result,
0:         int targetType, int targetWidth) throws StandardException;
1: 
1:     /**
1:      * The SQL/XML XMLExists operator.
0:      * Takes an XML query expression (as a string) and an XML
0:      * value and checks if at least one node in the XML
0:      * value matches the query expression.  NOTE: For now,
0:      * the query expression must be XPath only (XQuery not
0:      * supported).
1:      *
0:      * @param xExpr The query expression, as a string.
0:      * @param xml The XML value being queried.
0:      * @return True if the received query expression matches at
0:      *  least one node in the received XML value; unknown if
0:      *  either the query expression or the xml value is null;
0:      *  false otherwise.
1:      * @exception StandardException Thrown on error
1:      */
0:     public BooleanDataValue XMLExists(StringDataValue xExpr,
0:         XMLDataValue xml) throws StandardException;
1: 
1:     /**
0:      * Helper method for XMLExists.
0:      * See if the received XPath expression returns at least
0:      * one node when evaluated against _this_ XML value.
1:      *
0:      * @param xExpr The XPath expression.
0:      * @return True if at least one node in this XML value
0:      *  matches the received xExpr; false otherwise.
1:      */
0:     public boolean exists(String xExpr) throws StandardException;
1: }
============================================================================