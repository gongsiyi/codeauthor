1:dfdebd5: /*
2:dfdebd5: 
1:dfdebd5:    Derby - Class org.apache.derby.iapi.types.StreamHeaderGenerator
1:dfdebd5: 
1:dfdebd5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dfdebd5:    contributor license agreements.  See the NOTICE file distributed with
1:dfdebd5:    this work for additional information regarding copyright ownership.
1:dfdebd5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dfdebd5:    (the "License"); you may not use this file except in compliance with
1:dfdebd5:    the License.  You may obtain a copy of the License at
1:dfdebd5: 
1:dfdebd5:       http://www.apache.org/licenses/LICENSE-2.0
1:dfdebd5: 
1:dfdebd5:    Unless required by applicable law or agreed to in writing, software
1:dfdebd5:    distributed under the License is distributed on an "AS IS" BASIS,
1:dfdebd5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dfdebd5:    See the License for the specific language governing permissions and
1:dfdebd5:    limitations under the License.
1:dfdebd5: 
1:dfdebd5: */
1:dfdebd5: package org.apache.derby.iapi.types;
1:dfdebd5: 
1:dfdebd5: import java.io.IOException;
1:dfdebd5: import java.io.ObjectOutput;
1:dfdebd5: 
1:dfdebd5: /**
1:dfdebd5:  * Generates stream headers encoding the length of the stream.
1:dfdebd5:  */
1:dfdebd5: public interface StreamHeaderGenerator {
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Tells if the header encodes a character or byte count.
1:dfdebd5:      *
1:dfdebd5:      * @return {@code true} if the character count is encoded into the header,
1:dfdebd5:      *      {@code false} if the byte count is encoded into the header.
1:dfdebd5:      */
1:dfdebd5:     boolean expectsCharCount();
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Generates the header for the specified length and writes it into the
1:dfdebd5:      * provided buffer, starting at the specified offset.
1:dfdebd5:      *
1:dfdebd5:      * @param buf the buffer to write into
1:dfdebd5:      * @param offset starting offset in the buffer
1:dfdebd5:      * @param valueLength the length of the stream, can be in either bytes or
1:dfdebd5:      *      characters depending on the header format
1:dfdebd5:      * @return The number of bytes written into the buffer.
1:dfdebd5:      */
1:dfdebd5:     int generateInto(byte[] buf, int offset, long valueLength);
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Generates the header for the specified length and writes it into the
1:dfdebd5:      * destination stream.
1:dfdebd5:      *
1:dfdebd5:      * @param out the destination stream
1:dfdebd5:      * @param valueLength the length of the stream, can be in either bytes or
1:dfdebd5:      *      characters depending on the header format
1:dfdebd5:      * @return The number of bytes written to the destination stream.
1:dfdebd5:      * @throws IOException if writing to the destination stream fails
1:dfdebd5:      */
1:dfdebd5:     int generateInto(ObjectOutput out, long valueLength) throws IOException;
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Writes a Derby-specific end-of-stream marker to the buffer for a stream
1:dfdebd5:      * of the specified length, if required.
1:dfdebd5:      *
1:dfdebd5:      * @param buffer the buffer to write into
1:dfdebd5:      * @param offset starting offset in the buffer
1:dfdebd5:      * @param valueLength the length of the stream, can be in either bytes or
1:dfdebd5:      *      characters depending on the header format
1:dfdebd5:      * @return Number of bytes written (zero or more).
1:dfdebd5:      */
1:dfdebd5:     int writeEOF(byte[] buffer, int offset, long valueLength);
1:dfdebd5: 
1:dfdebd5:     /**
1:dfdebd5:      * Writes a Derby-specific end-of-stream marker to the destination stream
1:dfdebd5:      * for the specified length, if required.
1:dfdebd5:      *
1:dfdebd5:      * @param out the destination stream
1:dfdebd5:      * @param valueLength the length of the stream, can be in either bytes or
1:dfdebd5:      *      characters depending on the header format
1:dfdebd5:      * @return Number of bytes written (zero or more).
1:dfdebd5:      * @throws IOException if writing to the destination stream fails
1:dfdebd5:      */
1:dfdebd5:     int writeEOF(ObjectOutput out, long valueLength) throws IOException;
1:85de1e4: 
1:85de1e4:     /**
1:85de1e4:      * Returns the maximum length of the header.
1:85de1e4:      *
1:85de1e4:      * @return Max header length in bytes.
1:85de1e4:      */
1:85de1e4:     int getMaxHeaderLength();
1:dfdebd5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9e74139
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:85de1e4
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns the maximum length of the header.
1:      *
1:      * @return Max header length in bytes.
1:      */
1:     int getMaxHeaderLength();
commit:dfdebd5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.StreamHeaderGenerator
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: package org.apache.derby.iapi.types;
1: 
1: import java.io.IOException;
1: import java.io.ObjectOutput;
1: 
1: /**
1:  * Generates stream headers encoding the length of the stream.
1:  */
1: public interface StreamHeaderGenerator {
1: 
0:     /** The Derby-specific end-of-stream marker. */
0:     byte[] DERBY_EOF_MARKER = new byte[] {(byte)0xE0, 0x00, 0x00};
1: 
1:     /**
1:      * Tells if the header encodes a character or byte count.
1:      *
1:      * @return {@code true} if the character count is encoded into the header,
1:      *      {@code false} if the byte count is encoded into the header.
1:      */
1:     boolean expectsCharCount();
1: 
1:     /**
1:      * Generates the header for the specified length and writes it into the
1:      * provided buffer, starting at the specified offset.
1:      *
1:      * @param buf the buffer to write into
1:      * @param offset starting offset in the buffer
1:      * @param valueLength the length of the stream, can be in either bytes or
1:      *      characters depending on the header format
1:      * @return The number of bytes written into the buffer.
1:      */
1:     int generateInto(byte[] buf, int offset, long valueLength);
1: 
1:     /**
1:      * Generates the header for the specified length and writes it into the
1:      * destination stream.
1:      *
1:      * @param out the destination stream
1:      * @param valueLength the length of the stream, can be in either bytes or
1:      *      characters depending on the header format
1:      * @return The number of bytes written to the destination stream.
1:      * @throws IOException if writing to the destination stream fails
1:      */
1:     int generateInto(ObjectOutput out, long valueLength) throws IOException;
1: 
1:     /**
1:      * Writes a Derby-specific end-of-stream marker to the buffer for a stream
1:      * of the specified length, if required.
1:      *
1:      * @param buffer the buffer to write into
1:      * @param offset starting offset in the buffer
1:      * @param valueLength the length of the stream, can be in either bytes or
1:      *      characters depending on the header format
1:      * @return Number of bytes written (zero or more).
1:      */
1:     int writeEOF(byte[] buffer, int offset, long valueLength);
1: 
1:     /**
1:      * Writes a Derby-specific end-of-stream marker to the destination stream
1:      * for the specified length, if required.
1:      *
1:      * @param out the destination stream
1:      * @param valueLength the length of the stream, can be in either bytes or
1:      *      characters depending on the header format
1:      * @return Number of bytes written (zero or more).
1:      * @throws IOException if writing to the destination stream fails
1:      */
1:     int writeEOF(ObjectOutput out, long valueLength) throws IOException;
1: }
============================================================================