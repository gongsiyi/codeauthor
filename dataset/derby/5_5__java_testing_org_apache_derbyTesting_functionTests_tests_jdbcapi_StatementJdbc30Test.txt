1:81faa10: /*
1:e507229: 
1:e507229:  Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test
1:e507229: 
1:e507229:  Licensed to the Apache Software Foundation (ASF) under one or more
1:e507229:  contributor license agreements.  See the NOTICE file distributed with
1:e507229:  this work for additional information regarding copyright ownership.
1:e507229:  The ASF licenses this file to You under the Apache License, Version 2.0
1:e507229:  (the "License"); you may not use this file except in compliance with
1:e507229:  the License.  You may obtain a copy of the License at
1:e507229: 
1:e507229:  http://www.apache.org/licenses/LICENSE-2.0
1:e507229: 
1:e507229:  Unless required by applicable law or agreed to in writing, software
1:e507229:  distributed under the License is distributed on an "AS IS" BASIS,
1:e507229:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e507229:  See the License for the specific language governing permissions and
1:e507229:  limitations under the License.
1:e507229: 
1:e507229:  */
1:e507229: 
1:e507229: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:e507229: 
1:e507229: import java.sql.ResultSet;
1:e507229: import java.sql.SQLException;
1:e507229: import java.sql.Statement;
1:e507229: import junit.framework.Test;
1:e507229: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:e507229: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:e507229: import org.apache.derbyTesting.junit.TestConfiguration;
1:e507229: 
1:e507229: /**
1:e507229:  * Test the Statement class in JDBC 30. This test converts the old
1:e507229:  * jdbcapi/statementJdbc30.java test to JUnit.
1:e507229:  */
1:e507229: 
1:e507229: public class StatementJdbc30Test extends BaseJDBCTestCase {
1:29c10e3:     private static final String CLIENT_SUITE_NAME = 
1:29c10e3:         "StatementJdbc30Test:client";
1:e507229: 
1:e507229:     /**
1:e507229:      * Create a test with the given name.
3:e507229:      * 
1:e507229:      * @param name
1:e507229:      *            name of the test.
1:e507229:      */
1:e507229: 
1:e507229:     public StatementJdbc30Test(String name) {
1:e507229:         super(name);
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Create suite containing client and embedded tests and to run all tests in
1:e507229:      * this class
1:e507229:      */
1:e507229:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("StatementJdbc30Test");
1:e507229: 
1:e507229:         suite.addTest(baseSuite("StatementJdbc30Test:embedded"));
1:e507229:         suite
1:e507229:                 .addTest(TestConfiguration
1:29c10e3:                         .clientServerDecorator(baseSuite(CLIENT_SUITE_NAME)));
1:e507229: 
1:e507229:         return suite;
1:e507229:     }
1:e507229: 
1:e507229:     private static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:e507229: 
1:e507229:         suite.addTestSuite(StatementJdbc30Test.class);
1:e507229: 
1:29c10e3:         if  (name.equals(CLIENT_SUITE_NAME)) {
1:29c10e3:             // These test CAN be run in embedded mode as well, but
1:29c10e3:             // they're only meaningful in c/s mode and also take quite
1:29c10e3:             // a bit of time to run.
1:29c10e3:             suite.addTest(new StatementJdbc30Test
1:29c10e3:                           ("xtestMultiExecWithQueryTimeout"));
1:29c10e3:             suite.addTest(new StatementJdbc30Test
1:29c10e3:                           ("xtestMaxOpenStatementsWithQueryTimeout"));
1:29c10e3:         }
1:e507229: 
1:e507229:         return new CleanDatabaseTestSetup(suite) {
1:e507229:             /**
1:e507229:              * Creates the tables used in the test cases.
1:81faa10:              * 
1:e507229:              * @exception SQLException
1:e507229:              *                if a database error occurs
1:e507229:              */
1:e507229:             protected void decorateSQL(Statement stmt) throws SQLException {
1:e507229: 
1:e507229:                 /**
1:e507229:                  * Creates the table used in the test cases.
1:e507229:                  * 
1:e507229:                  */
1:e507229:                 stmt.execute("create table tab1 (i int, s smallint, r real)");
1:e507229:                 stmt.executeUpdate("insert into tab1 values(1, 2, 3.1)");
1:e507229:             }
1:e507229:         };
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Tests reading data from database
1:e507229:      * 
1:e507229:      * @exception SQLException
1:e507229:      *                if error occurs
1:e507229:      */
1:e507229:     public void testReadingData() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229:         ResultSet rs;
1:e507229: 
1:e507229:         // read the data just for the heck of it
1:e507229:         rs = stmt.executeQuery("select * from tab1");
1:e507229:         assertTrue(rs.next());
1:e507229: 
1:e507229:         rs.close();
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Tests stmt.getMoreResults(int)
1:e507229:      * 
1:e507229:      * @exception SQLException
1:e507229:      *                if error occurs
1:e507229:      */
1:e507229:     public void testGetMoreResults() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:a0118e1:         assertFalse(stmt.getMoreResults(Statement.CLOSE_CURRENT_RESULT));
1:e507229: 
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Tests stmt.executeUpdate(String, int) with NO_GENERATED_KEYS.
1:e507229:      * 
1:e507229:      * @exception SQLException
1:e507229:      *                if error occurs
1:e507229:      */
1:e507229:     public void testInsertNoGenKeys() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229:         stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
1:a0118e1:                 Statement.NO_GENERATED_KEYS);
1:e507229:         assertNull("Expected NULL ResultSet after stmt.execute()", stmt
1:e507229:                 .getGeneratedKeys());
1:e507229: 
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Tests stmt.executeUpdate(String, int[]) After doing an insert into a
1:e507229:      * table that doesn't have a generated column, the test should fail.
1:e507229:      * 
1:e507229:      * @throws SQLException
1:e507229:      */
1:e507229:     public void testExecuteUpdateNoAutoGenColumnIndex() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229: 
1:e507229:         int[] columnIndexes = new int[2];
1:e507229:         columnIndexes[0] = 1;
1:e507229:         columnIndexes[1] = 2;
1:e507229:         try {
1:e507229:             stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
1:e507229:                     columnIndexes);
1:e507229:             fail("FAIL -- executeUpdate should have failed...");
1:e507229:         } catch (SQLException ex) {
1:81faa10:             assertFailedExecuteUpdateForColumnIndex(ex);
1:e507229:         }
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Tests stmt.executeUpdate(String, String[]) After doing an insert into a
1:e507229:      * table that doesn't have a generated column, the test should fail.
1:e507229:      * 
1:e507229:      * @throws SQLException
1:e507229:      */
1:e507229:     public void testExecuteUpdateNoAutoGenColumnName() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229: 
1:e507229:         String[] columnNames = new String[2];
1:e507229:         columnNames[0] = "I";
1:e507229:         columnNames[1] = "S";
1:e507229:         try {
1:e507229:             stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
1:e507229:                     columnNames);
1:e507229:             fail("FAIL -- executeUpdate should have failed...");
1:e507229:         } catch (SQLException ex) {
1:81faa10:             assertFailedExecuteUpdateForColumnName(ex);
1:e507229:         }
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Tests stmt.execute(String, int) with NO_GENERATED_KEYS.
1:e507229:      * 
1:e507229:      * @exception SQLException
1:e507229:      *                if error occurs
1:e507229:      */
1:e507229:     public void testSelectNoGenKeys() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:a0118e1:         stmt.execute("select * from tab1", Statement.NO_GENERATED_KEYS);
1:e507229:         assertNull("Expected NULL ResultSet after stmt.execute()", stmt
1:e507229:                 .getGeneratedKeys());
1:e507229: 
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * After doing an insert into a table that doesn't have a generated column,
1:e507229:      * the test should fail.
1:e507229:      * 
1:e507229:      * @throws SQLException
1:e507229:      */
1:e507229:     public void testExecuteNoAutoGenColumnIndex() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229: 
1:e507229:         int[] columnIndexes = new int[2];
1:e507229:         columnIndexes[0] = 1;
1:e507229:         columnIndexes[1] = 2;
1:e507229:         try {
1:e507229:             stmt.execute("insert into tab1 values(2, 3, 4.1)", columnIndexes);
1:e507229:             fail("FAIL -- executeUpdate should have failed...");
1:e507229:         } catch (SQLException ex) {
1:81faa10:             assertFailedExecuteUpdateForColumnIndex(ex);
1:e507229:         }
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:81faa10:      * Assert executeUpdateForColumnIndex failed. There are different SQLStates 
1:81faa10:      * for ColumnName(X0X0E) and ColumnIndex(X0X0F) as well as client and server
1:e507229:      * 
1:e507229:      * @param ex
1:81faa10:      */
1:81faa10:     private void assertFailedExecuteUpdateForColumnIndex(SQLException ex) {
1:b52081a:         // In network client we only check columnIndex array length,
1:b52081a:         // so throw a different error.
1:e507229:         if (usingDerbyNetClient()) {
1:b52081a:             assertSQLState("X0X0D", ex);
1:e507229:         } else {
1:e507229:             assertSQLState("X0X0E", ex);
1:e507229:         }
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:81faa10:      * Assert executeUpdateForColumnName failed. There are different SQLStates 
1:81faa10:      * for ColumnIndex(X0X0F) and ColumnNam(X0X0E) as well as client and server.
1:81faa10:      *
1:81faa10:      * @param ex
1:81faa10:      */
1:81faa10:     private void assertFailedExecuteUpdateForColumnName(SQLException ex) {
1:aadfc18:         // Derby client complains that the array is too long.
1:aadfc18:         // Embedded is smart enough to know which column caused the problem.
1:81faa10:         if (usingDerbyNetClient()) {
1:aadfc18:             assertSQLState("X0X0D", ex);
1:81faa10:         } else {
1:81faa10:             assertSQLState("X0X0F", ex);
1:81faa10:         }
1:81faa10:     }
1:81faa10:     /**
1:e507229:      * After doing an insert into a table that doesn't have a generated column,
1:e507229:      * the test should fail.
1:e507229:      * 
1:e507229:      * @throws SQLException
1:e507229:      */
1:e507229:     public void testExecuteNoAutoGenColumnName() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229:         
1:e507229:             String[] columnNames = new String[2];
1:e507229:             columnNames[0] = "I";
1:e507229:             columnNames[1] = "S";
1:e507229:             try {
1:e507229:                 stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
1:e507229:                         columnNames);
1:e507229:                 fail("FAIL -- executeUpdate should have failed...");
1:e507229:             } catch (SQLException ex) {
1:81faa10:                 assertFailedExecuteUpdateForColumnName(ex);
1:e507229:             }
1:e507229:         
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:29c10e3:      * DERBY-3198: Verify that a statement can be executed
1:29c10e3:      * more than 32000 times, even when query timeout is enabled.
1:e507229:      */
1:29c10e3:     public void xtestMultiExecWithQueryTimeout() throws SQLException {
1:29c10e3:         Statement stmt = createStatement();
1:29c10e3:         stmt.setQueryTimeout(10);
1:29c10e3:         for (int i = 0; i < 33000; ++i) {
1:29c10e3:             ResultSet rs = stmt.executeQuery("VALUES(1)");
1:29c10e3:             rs.close();
1:29c10e3:         }
1:29c10e3:     }
1:e507229: 
1:29c10e3:     /**
1:29c10e3:      * DERBY-3198: Verify that we can have at least 16383 open Statements with
1:29c10e3:      * query timeout. With query timeout, each Statement holds on to 2
1:29c10e3:      * Section objects until it is closed.
1:e507229:      */
1:29c10e3:     public void xtestMaxOpenStatementsWithQueryTimeout() throws SQLException {
1:2cb19e2:         // Disable auto-commit for this test case. Otherwise, closing all the
1:2cb19e2:         // statements in tearDown() will take forever, since every close() will
1:2cb19e2:         // force a commit. DERBY-5524.
1:2cb19e2:         setAutoCommit(false);
1:2cb19e2: 
1:29c10e3:         Statement[] stmts = new Statement[16500];
1:29c10e3:         int i = 0;
1:29c10e3:         try {
1:29c10e3:             for (; i < 16500; ++i) {
1:29c10e3:                 stmts[i] = createStatement();
1:29c10e3:                 stmts[i].setQueryTimeout(10);
1:29c10e3:                 stmts[i].executeQuery("VALUES(1)");
1:29c10e3:             }
1:29c10e3:         } catch (SQLException e) {
1:29c10e3:             assertSQLState("XJ200",e);
1:29c10e3:             assertTrue("16383 >= (i="+ i +")", 16383 >= i);
1:29c10e3:         }  
1:29c10e3:     }
1:29c10e3: 
3:29c10e3: 
1:29c10e3:     /**
1:e507229:      * Testing stmt.getResultSetHoldability()
1:e507229:      * 
1:e507229:      * @throws SQLException
1:e507229:      */
1:e507229:     public void testGetResultSetHoldability() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229:         assertEquals(ResultSet.HOLD_CURSORS_OVER_COMMIT, stmt
1:e507229:                 .getResultSetHoldability());
1:e507229: 
1:e507229:     }
1:e507229: 
1:e507229:     /**
1:e507229:      * Testing stmt.getGeneratedKeys()
1:e507229:      * 
1:e507229:      * @throws SQLException
1:e507229:      */
1:e507229:     public void testGetGenerateKeys() throws SQLException {
1:e507229: 
1:e507229:         Statement stmt = createStatement();
1:e507229:         assertNull(stmt.getGeneratedKeys());
1:e507229: 
1:e507229:     }
1:e507229: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("StatementJdbc30Test");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2cb19e2
/////////////////////////////////////////////////////////////////////////
1:         // Disable auto-commit for this test case. Otherwise, closing all the
1:         // statements in tearDown() will take forever, since every close() will
1:         // force a commit. DERBY-5524.
1:         setAutoCommit(false);
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a0118e1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(stmt.getMoreResults(Statement.CLOSE_CURRENT_RESULT));
/////////////////////////////////////////////////////////////////////////
1:                 Statement.NO_GENERATED_KEYS);
/////////////////////////////////////////////////////////////////////////
1:         stmt.execute("select * from tab1", Statement.NO_GENERATED_KEYS);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:b52081a
/////////////////////////////////////////////////////////////////////////
1:         // In network client we only check columnIndex array length,
1:         // so throw a different error.
1:             assertSQLState("X0X0D", ex);
commit:aadfc18
/////////////////////////////////////////////////////////////////////////
1:         // Derby client complains that the array is too long.
1:         // Embedded is smart enough to know which column caused the problem.
1:             assertSQLState("X0X0D", ex);
commit:81faa10
/////////////////////////////////////////////////////////////////////////
1:             assertFailedExecuteUpdateForColumnIndex(ex);
/////////////////////////////////////////////////////////////////////////
1:             assertFailedExecuteUpdateForColumnName(ex);
/////////////////////////////////////////////////////////////////////////
1:             assertFailedExecuteUpdateForColumnIndex(ex);
1:      * Assert executeUpdateForColumnIndex failed. There are different SQLStates 
1:      * for ColumnName(X0X0E) and ColumnIndex(X0X0F) as well as client and server
1:     private void assertFailedExecuteUpdateForColumnIndex(SQLException ex) {
/////////////////////////////////////////////////////////////////////////
1:      * Assert executeUpdateForColumnName failed. There are different SQLStates 
1:      * for ColumnIndex(X0X0F) and ColumnNam(X0X0E) as well as client and server.
1:      *
1:      * @param ex
1:      */
1:     private void assertFailedExecuteUpdateForColumnName(SQLException ex) {
1:         /*
0:          * DERBY-2943 -- execute() and executeUpdate() return different
0:          * SQLState in embedded and network client
1:          *
1:          */
1:         if (usingDerbyNetClient()) {
0:             assertSQLState("0A000", ex);
1:         } else {
1:             assertSQLState("X0X0F", ex);
1:         }
1:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
1:                 assertFailedExecuteUpdateForColumnName(ex);
commit:e507229
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:  Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
0: import org.apache.derby.iapi.reference.JDBC30Translation;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test the Statement class in JDBC 30. This test converts the old
1:  * jdbcapi/statementJdbc30.java test to JUnit.
1:  */
1: 
1: public class StatementJdbc30Test extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Create a test with the given name.
1:      * 
1:      * @param name
1:      *            name of the test.
1:      */
1: 
1:     public StatementJdbc30Test(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create suite containing client and embedded tests and to run all tests in
1:      * this class
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("StatementJdbc30Test");
1: 
1:         suite.addTest(baseSuite("StatementJdbc30Test:embedded"));
1:         suite
1:                 .addTest(TestConfiguration
0:                         .clientServerDecorator(baseSuite("StatementJdbc30Test:client")));
1: 
1:         return suite;
1:     }
1: 
1:     private static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1: 
1:         suite.addTestSuite(StatementJdbc30Test.class);
1: 
1:         return new CleanDatabaseTestSetup(suite) {
1:             /**
1:              * Creates the tables used in the test cases.
1:              * 
1:              * @exception SQLException
1:              *                if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1: 
1:                 /**
1:                  * Creates the table used in the test cases.
1:                  * 
1:                  */
1:                 stmt.execute("create table tab1 (i int, s smallint, r real)");
1:                 stmt.executeUpdate("insert into tab1 values(1, 2, 3.1)");
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * Tests reading data from database
1:      * 
1:      * @exception SQLException
1:      *                if error occurs
1:      */
1:     public void testReadingData() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1:         ResultSet rs;
1: 
1:         // read the data just for the heck of it
1:         rs = stmt.executeQuery("select * from tab1");
1:         assertTrue(rs.next());
1: 
1:         rs.close();
1:     }
1: 
1:     /**
1:      * Tests stmt.getMoreResults(int)
1:      * 
1:      * @exception SQLException
1:      *                if error occurs
1:      */
1:     public void testGetMoreResults() throws SQLException {
1: 
1:         Statement stmt = createStatement();
0:         assertFalse(stmt.getMoreResults(JDBC30Translation.CLOSE_CURRENT_RESULT));
1: 
1:     }
1: 
1:     /**
1:      * Tests stmt.executeUpdate(String, int) with NO_GENERATED_KEYS.
1:      * 
1:      * @exception SQLException
1:      *                if error occurs
1:      */
1:     public void testInsertNoGenKeys() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
0:                 JDBC30Translation.NO_GENERATED_KEYS);
1:         assertNull("Expected NULL ResultSet after stmt.execute()", stmt
1:                 .getGeneratedKeys());
1: 
1:     }
1: 
1:     /**
1:      * Tests stmt.executeUpdate(String, int[]) After doing an insert into a
1:      * table that doesn't have a generated column, the test should fail.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testExecuteUpdateNoAutoGenColumnIndex() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1: 
1:         int[] columnIndexes = new int[2];
1:         columnIndexes[0] = 1;
1:         columnIndexes[1] = 2;
1:         try {
1:             stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
1:                     columnIndexes);
1:             fail("FAIL -- executeUpdate should have failed...");
1:         } catch (SQLException ex) {
0:             assertFailedExecuteUpdate(ex);
1:         }
1:     }
1: 
1:     /**
1:      * Tests stmt.executeUpdate(String, String[]) After doing an insert into a
1:      * table that doesn't have a generated column, the test should fail.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testExecuteUpdateNoAutoGenColumnName() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1: 
1:         String[] columnNames = new String[2];
1:         columnNames[0] = "I";
1:         columnNames[1] = "S";
1:         try {
1:             stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
1:                     columnNames);
1:             fail("FAIL -- executeUpdate should have failed...");
1:         } catch (SQLException ex) {
0:             assertFailedExecuteUpdate(ex);
1:         }
1:     }
1: 
1:     /**
1:      * Tests stmt.execute(String, int) with NO_GENERATED_KEYS.
1:      * 
1:      * @exception SQLException
1:      *                if error occurs
1:      */
1:     public void testSelectNoGenKeys() throws SQLException {
1: 
1:         Statement stmt = createStatement();
0:         stmt.execute("select * from tab1", JDBC30Translation.NO_GENERATED_KEYS);
1:         assertNull("Expected NULL ResultSet after stmt.execute()", stmt
1:                 .getGeneratedKeys());
1: 
1:     }
1: 
1:     /**
1:      * After doing an insert into a table that doesn't have a generated column,
1:      * the test should fail.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testExecuteNoAutoGenColumnIndex() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1: 
1:         int[] columnIndexes = new int[2];
1:         columnIndexes[0] = 1;
1:         columnIndexes[1] = 2;
1:         try {
1:             stmt.execute("insert into tab1 values(2, 3, 4.1)", columnIndexes);
1:             fail("FAIL -- executeUpdate should have failed...");
1:         } catch (SQLException ex) {
0:             assertFailedExecuteUpdate(ex);
1:         }
1:     }
1: 
1:     /**
0:      * Assert executeUpdate failed. There are different SQLStates for 
0:      * client and server.
1:      * 
1:      * @param ex
1:      */
0:     private void assertFailedExecuteUpdate(SQLException ex) {
0:         /*
0:          * DERBY-2943 -- execute() and executeUpdate() return different
0:          * SQLState in embedded and network client
1:          * 
1:          */
1:         if (usingDerbyNetClient()) {
0:             assertSQLState("0A000", ex);
1:         } else {
1:             assertSQLState("X0X0E", ex);
1:         }
1:     }
1: 
1:     /**
1:      * After doing an insert into a table that doesn't have a generated column,
1:      * the test should fail.
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testExecuteNoAutoGenColumnName() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1:         
1:             String[] columnNames = new String[2];
1:             columnNames[0] = "I";
1:             columnNames[1] = "S";
1:             try {
1:                 stmt.executeUpdate("insert into tab1 values(2, 3, 4.1)",
1:                         columnNames);
1:                 fail("FAIL -- executeUpdate should have failed...");
1:             } catch (SQLException ex) {
0:                 assertFailedExecuteUpdate(ex);
1:             }
1:         
1:     }
1: 
1:     /**
1:      * Testing stmt.getResultSetHoldability()
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testGetResultSetHoldability() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1:         assertEquals(ResultSet.HOLD_CURSORS_OVER_COMMIT, stmt
1:                 .getResultSetHoldability());
1: 
1:     }
1: 
1:     /**
1:      * Testing stmt.getGeneratedKeys()
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testGetGenerateKeys() throws SQLException {
1: 
1:         Statement stmt = createStatement();
1:         assertNull(stmt.getGeneratedKeys());
1: 
1:     }
1: }
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:29c10e3
/////////////////////////////////////////////////////////////////////////
1:     private static final String CLIENT_SUITE_NAME = 
1:         "StatementJdbc30Test:client";
/////////////////////////////////////////////////////////////////////////
1:                         .clientServerDecorator(baseSuite(CLIENT_SUITE_NAME)));
/////////////////////////////////////////////////////////////////////////
1:         if  (name.equals(CLIENT_SUITE_NAME)) {
1:             // These test CAN be run in embedded mode as well, but
1:             // they're only meaningful in c/s mode and also take quite
1:             // a bit of time to run.
1:             suite.addTest(new StatementJdbc30Test
1:                           ("xtestMultiExecWithQueryTimeout"));
1:             suite.addTest(new StatementJdbc30Test
1:                           ("xtestMaxOpenStatementsWithQueryTimeout"));
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * DERBY-3198: Verify that a statement can be executed
1:      * more than 32000 times, even when query timeout is enabled.
0:      */
1:     public void xtestMultiExecWithQueryTimeout() throws SQLException {
1:         Statement stmt = createStatement();
1:         stmt.setQueryTimeout(10);
1:         for (int i = 0; i < 33000; ++i) {
1:             ResultSet rs = stmt.executeQuery("VALUES(1)");
1:             rs.close();
1:         }
1:     }
1: 
1:     /**
1:      * DERBY-3198: Verify that we can have at least 16383 open Statements with
1:      * query timeout. With query timeout, each Statement holds on to 2
1:      * Section objects until it is closed.
0:      */
1:     public void xtestMaxOpenStatementsWithQueryTimeout() throws SQLException {
1:         Statement[] stmts = new Statement[16500];
1:         int i = 0;
1:         try {
1:             for (; i < 16500; ++i) {
1:                 stmts[i] = createStatement();
1:                 stmts[i].setQueryTimeout(10);
1:                 stmts[i].executeQuery("VALUES(1)");
1:             }
1:         } catch (SQLException e) {
1:             assertSQLState("XJ200",e);
1:             assertTrue("16383 >= (i="+ i +")", 16383 >= i);
1:         }  
1:     }
1: 
1: 
1:     /**
============================================================================