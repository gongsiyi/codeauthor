1:eac0369: /*
1:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.NoPutResultSet
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7d0f620: import org.apache.derby.iapi.sql.execute.RowChanger;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.store.access.RowLocationRetRowSource;
1:eac0369: 
1:eac0369: /**
1:eac0369:  * The NoPutResultSet interface is used to provide additional
1:eac0369:  * operations on result sets that can be used in returning rows
1:eac0369:  * up a ResultSet tree.
1:eac0369:  * <p>
1:eac0369:  * Since the ResulSet operations must also be supported by
1:eac0369:  * NoPutResultSets, we extend that interface here as well.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public interface NoPutResultSet extends ResultSet, RowLocationRetRowSource 
1:eac0369: {
1:eac0369: 	// method names for use with SQLState.LANG_RESULT_SET_NOT_OPEN exception
1:eac0369: 
1:eac0369: 	public	static	final	String	ABSOLUTE		=	"absolute";
1:eac0369: 	public	static	final	String	RELATIVE		=	"relative";
1:eac0369: 	public	static	final	String	FIRST			=	"first";
1:eac0369: 	public	static	final	String	NEXT			=	"next";
1:eac0369: 	public	static	final	String	LAST			=	"last";
1:eac0369: 	public	static	final	String	PREVIOUS		=	"previous";
1:eac0369: 
1:01632c2:     // result set number of all temporary result sets
1:01632c2:     public  static  final   int TEMPORARY_RESULT_SET_NUMBER = 0;
1:01632c2:     
1:eac0369: 	/**
1:eac0369: 	 * Mark the ResultSet as the topmost one in the ResultSet tree.
1:eac0369: 	 * Useful for closing down the ResultSet on an error.
1:eac0369: 	 */
1:eac0369: 	public void markAsTopResultSet();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * open a scan on the table. scan parameters are evaluated
1:eac0369: 	 * at each open, so there is probably some way of altering
1:eac0369: 	 * their values...
1:eac0369: 	 * <p>
1:eac0369: 	 * openCore() can only be called on a closed result
1:eac0369: 	 * set.  see reopenCore if you want to reuse an open
1:eac0369: 	 * result set.
1:7008b63: 	 * <p>
1:7008b63: 	 * For NoPutResultSet open() must only be called on
1:7008b63: 	 * the top ResultSet. Opening of NoPutResultSet's
1:7008b63: 	 * below the top result set are implemented by calling
1:7008b63: 	 * openCore.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369: 	 */
1:eac0369: 	public void openCore() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * reopen the scan.  behaves like openCore() but is 
1:eac0369: 	 * optimized where appropriate (e.g. where scanController
1:eac0369: 	 * has special logic for us).  
1:eac0369: 	 * <p>
1:eac0369: 	 * used by joiners
1:eac0369: 	 * <p>
1:eac0369: 	 * scan parameters are evaluated
1:eac0369:      * at each open, so there is probably some way of altering
1:eac0369:      * their values...  
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369:      */
1:eac0369: 	public void reopenCore() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * Return the requested values computed
1:eac0369:      * from the next row (if any) for which
1:eac0369:      * the restriction evaluates to true.
1:eac0369:      * <p>
1:eac0369:      * restriction and projection parameters
1:eac0369:      * are evaluated for each row.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 *
1:eac0369: 	 * @return the next row in the result
1:eac0369: 	 */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the point of attachment for this subquery.
1:eac0369: 	 * (Only meaningful for Any and Once ResultSets, which can and will only
1:eac0369: 	 * be at the top of a ResultSet for a subquery.)
1:eac0369: 	 *
1:eac0369: 	 * @return int	Point of attachment (result set number) for this
1:eac0369: 	 *			    subquery.  (-1 if not a subquery - also Sanity violation)
1:eac0369: 	 */
1:eac0369: 	public int getPointOfAttachment();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the isolation level of the scan in the result set.
1:eac0369: 	 * Only expected to be called for those ResultSets that
1:eac0369: 	 * contain a scan.
1:eac0369: 	 *
1:eac0369: 	 * @return The isolation level of the scan (in TransactionController constants).
1:eac0369: 	 */
1:eac0369: 	public int getScanIsolationLevel();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Notify a NPRS that it is the source for the specified 
1:eac0369: 	 * TargetResultSet.  This is useful when doing bulk insert.
1:eac0369: 	 *
1:eac0369: 	 * @param trs	The TargetResultSet.
1:eac0369: 	 */
1:eac0369: 	public void setTargetResultSet(TargetResultSet trs);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set whether or not the NPRS need the row location when acting
1:eac0369: 	 * as a row source.  (The target result set determines this.)
1:eac0369: 	 */
1:eac0369: 	public void setNeedsRowLocation(boolean needsRowLocation);
1:eac0369: 
1:af1c18c:     /**
1:af1c18c:      * Set that we are acting on behalf of an insert result set that has
1:af1c18c:      * deferrable check constraints
1:af1c18c:      */
1:af1c18c:     public void setHasDeferrableChecks();
1:af1c18c: 
1:eac0369: 	/**
1:eac0369: 	 * Get the estimated row count from this result set.
1:eac0369: 	 *
1:eac0369: 	 * @return	The estimated row count (as a double) from this result set.
1:eac0369: 	 */
1:eac0369: 	public double getEstimatedRowCount();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the number of this ResultSet, which is guaranteed to be unique
1:eac0369: 	 * within a statement.
1:eac0369: 	 */
1:eac0369: 	public int resultSetNumber();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the current row to the row passed in.
1:eac0369: 	 *
1:eac0369: 	 * @param row the new current row
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public void setCurrentRow(ExecRow row);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do we need to relock the row when going to the heap.
1:eac0369: 	 *
1:eac0369: 	 * @return Whether or not we need to relock the row when going to the heap.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public boolean requiresRelocking();
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Is this ResultSet or it's source result set for update
1:eac0369: 	 *
1:eac0369: 	 * @return Whether or not the result set is for update.
1:eac0369: 	 */
1:eac0369: 	public boolean isForUpdate();
1:eac0369: 
1:2700e3d: 	/* 
1:2700e3d: 	 * New methods for supporting detectability of own changes for
1:2700e3d: 	 * for updates and deletes when using ResultSets of type 
1:2700e3d: 	 * TYPE_SCROLL_INSENSITIVE and concurrency CONCUR_UPDATABLE.
1:eac0369: 	 */
1:eac0369: 	
1:eac0369: 	/**
1:2700e3d: 	 * Updates the resultSet's current row with it's new values after
1:2700e3d: 	 * an update has been issued either using positioned update or
1:2700e3d: 	 * JDBC's udpateRow method.
1:eac0369: 	 *
1:2700e3d: 	 * @param row new values for the currentRow
1:7d0f620: 	 * @param rowChanger holds information about row: what columns of it is to
1:7d0f620: 	 *        be used for updating, and what underlying base table column each
1:7d0f620: 	 *        such column corresponds to.
1:eac0369: 	 *
1:2700e3d: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 */
1:7d0f620: 	public void updateRow(ExecRow row, RowChanger rowChanger)
1:7d0f620: 			throws StandardException;
1:eac0369: 	
1:eac0369: 	/**
1:2700e3d: 	 * Marks the resultSet's currentRow as deleted after a delete has been 
1:2700e3d: 	 * issued by either by using positioned delete or JDBC's deleteRow
1:2700e3d: 	 * method.
1:eac0369: 	 *
1:2700e3d: 	 * @exception StandardException thrown on failure.
3:2700e3d: 	 */
1:2700e3d: 	public void markRowAsDeleted() throws StandardException;
3:2700e3d: 
3:2700e3d: 	/**
1:2700e3d: 	 * Positions the cursor in the specified rowLocation. Used for
1:2700e3d: 	 * scrollable insensitive result sets in order to position the
1:2700e3d: 	 * cursor back to a row that has already be visited.
1:eac0369: 	 * 
1:2700e3d: 	 * @param rLoc row location of the current cursor row
1:eac0369: 	 *
1:2700e3d: 	 * @exception StandardException thrown on failure to
1:2700e3d: 	 *	get location from storage engine
6:2700e3d: 	 *
1:2700e3d: 	 */
1:2700e3d: 	void positionScanAtRowLocation(RowLocation rLoc) 
1:2700e3d: 		throws StandardException;}
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Set that we are acting on behalf of an insert result set that has
1:      * deferrable check constraints
1:      */
1:     public void setHasDeferrableChecks();
1: 
commit:7d0f620
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.RowChanger;
/////////////////////////////////////////////////////////////////////////
1: 	 * @param rowChanger holds information about row: what columns of it is to
1: 	 *        be used for updating, and what underlying base table column each
1: 	 *        such column corresponds to.
1: 	public void updateRow(ExecRow row, RowChanger rowChanger)
1: 			throws StandardException;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:01632c2
/////////////////////////////////////////////////////////////////////////
1:     // result set number of all temporary result sets
1:     public  static  final   int TEMPORARY_RESULT_SET_NUMBER = 0;
1:     
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7008b63
/////////////////////////////////////////////////////////////////////////
1: 	 * <p>
1: 	 * For NoPutResultSet open() must only be called on
1: 	 * the top ResultSet. Opening of NoPutResultSet's
1: 	 * below the top result set are implemented by calling
1: 	 * openCore.
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.NoPutResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.store.access.RowLocationRetRowSource;
1: 
1: /**
1:  * The NoPutResultSet interface is used to provide additional
1:  * operations on result sets that can be used in returning rows
1:  * up a ResultSet tree.
1:  * <p>
1:  * Since the ResulSet operations must also be supported by
1:  * NoPutResultSets, we extend that interface here as well.
1:  *
0:  * @author jerry
1:  */
1: public interface NoPutResultSet extends ResultSet, RowLocationRetRowSource 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	// method names for use with SQLState.LANG_RESULT_SET_NOT_OPEN exception
1: 
1: 	public	static	final	String	ABSOLUTE		=	"absolute";
1: 	public	static	final	String	RELATIVE		=	"relative";
1: 	public	static	final	String	FIRST			=	"first";
1: 	public	static	final	String	NEXT			=	"next";
1: 	public	static	final	String	LAST			=	"last";
1: 	public	static	final	String	PREVIOUS		=	"previous";
1: 
1: 	/**
1: 	 * Mark the ResultSet as the topmost one in the ResultSet tree.
1: 	 * Useful for closing down the ResultSet on an error.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void markAsTopResultSet();
1: 
1: 	/**
1: 	 * open a scan on the table. scan parameters are evaluated
1: 	 * at each open, so there is probably some way of altering
1: 	 * their values...
1: 	 * <p>
1: 	 * openCore() can only be called on a closed result
1: 	 * set.  see reopenCore if you want to reuse an open
1: 	 * result set.
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1: 	 */
1: 	public void openCore() throws StandardException;
1: 
1: 	/**
1:      * reopen the scan.  behaves like openCore() but is 
1: 	 * optimized where appropriate (e.g. where scanController
1: 	 * has special logic for us).  
1: 	 * <p>
1: 	 * used by joiners
1: 	 * <p>
1: 	 * scan parameters are evaluated
1:      * at each open, so there is probably some way of altering
1:      * their values...  
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1:      */
1: 	public void reopenCore() throws StandardException;
1: 
1: 	/**
1:      * Return the requested values computed
1:      * from the next row (if any) for which
1:      * the restriction evaluates to true.
1:      * <p>
1:      * restriction and projection parameters
1:      * are evaluated for each row.
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1: 	 *
1: 	 * @return the next row in the result
1: 	 */
1: 	public ExecRow	getNextRowCore() throws StandardException;
1: 
1: 	/**
1: 	 * Return the point of attachment for this subquery.
1: 	 * (Only meaningful for Any and Once ResultSets, which can and will only
1: 	 * be at the top of a ResultSet for a subquery.)
1: 	 *
1: 	 * @return int	Point of attachment (result set number) for this
1: 	 *			    subquery.  (-1 if not a subquery - also Sanity violation)
1: 	 */
1: 	public int getPointOfAttachment();
1: 
1: 	/**
1: 	 * Return the isolation level of the scan in the result set.
1: 	 * Only expected to be called for those ResultSets that
1: 	 * contain a scan.
1: 	 *
1: 	 * @return The isolation level of the scan (in TransactionController constants).
1: 	 */
1: 	public int getScanIsolationLevel();
1: 
1: 	/**
1: 	 * Notify a NPRS that it is the source for the specified 
1: 	 * TargetResultSet.  This is useful when doing bulk insert.
1: 	 *
1: 	 * @param trs	The TargetResultSet.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setTargetResultSet(TargetResultSet trs);
1: 
1: 	/**
1: 	 * Set whether or not the NPRS need the row location when acting
1: 	 * as a row source.  (The target result set determines this.)
1: 	 * 
0: 	 * @param boolean needsRowLocation
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setNeedsRowLocation(boolean needsRowLocation);
1: 
1: 	/**
1: 	 * Get the estimated row count from this result set.
1: 	 *
1: 	 * @return	The estimated row count (as a double) from this result set.
1: 	 */
1: 	public double getEstimatedRowCount();
1: 
1: 	/**
1: 	 * Get the number of this ResultSet, which is guaranteed to be unique
1: 	 * within a statement.
1: 	 */
1: 	public int resultSetNumber();
1: 
1: 	/**
1: 	 * Set the current row to the row passed in.
1: 	 *
1: 	 * @param row the new current row
1: 	 *
1: 	 */
1: 	public void setCurrentRow(ExecRow row);
1: 
1: 	/**
0: 	 * Clear the current row
1: 	 *
1: 	 */
0: 	public void clearCurrentRow();
1: 
1: 	/**
1: 	 * Do we need to relock the row when going to the heap.
1: 	 *
1: 	 * @return Whether or not we need to relock the row when going to the heap.
1: 	 */
1: 
1: 	public boolean requiresRelocking();
1: 	
1: 	/**
1: 	 * Is this ResultSet or it's source result set for update
1: 	 *
1: 	 * @return Whether or not the result set is for update.
1: 	 */
1: 	public boolean isForUpdate();
1: 
0: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:9634cd2
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2700e3d
/////////////////////////////////////////////////////////////////////////
1: 	/* 
1: 	 * New methods for supporting detectability of own changes for
1: 	 * for updates and deletes when using ResultSets of type 
1: 	 * TYPE_SCROLL_INSENSITIVE and concurrency CONCUR_UPDATABLE.
1: 	 */
1: 	
1: 	/**
1: 	 * Updates the resultSet's current row with it's new values after
1: 	 * an update has been issued either using positioned update or
1: 	 * JDBC's udpateRow method.
1: 	 *
1: 	 * @param row new values for the currentRow
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1: 	 */
0: 	public void updateRow(ExecRow row) throws StandardException;
1: 	
1: 	/**
1: 	 * Marks the resultSet's currentRow as deleted after a delete has been 
1: 	 * issued by either by using positioned delete or JDBC's deleteRow
1: 	 * method.
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1: 	 */
1: 	public void markRowAsDeleted() throws StandardException;
1: 
1: 	/**
1: 	 * Positions the cursor in the specified rowLocation. Used for
1: 	 * scrollable insensitive result sets in order to position the
1: 	 * cursor back to a row that has already be visited.
1: 	 * 
1: 	 * @param rLoc row location of the current cursor row
1: 	 *
1: 	 * @exception StandardException thrown on failure to
1: 	 *	get location from storage engine
1: 	 *
1: 	 */
1: 	void positionScanAtRowLocation(RowLocation rLoc) 
1: 		throws StandardException;}
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.RowLocationRetRowSource;
0: 
0: /**
0:  * The NoPutResultSet interface is used to provide additional
0:  * operations on result sets that can be used in returning rows
0:  * up a ResultSet tree.
0:  * <p>
0:  * Since the ResulSet operations must also be supported by
0:  * NoPutResultSets, we extend that interface here as well.
0:  *
0:  * @author jerry
0:  */
0: public interface NoPutResultSet extends ResultSet, RowLocationRetRowSource 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	// method names for use with SQLState.LANG_RESULT_SET_NOT_OPEN exception
0: 
0: 	public	static	final	String	ABSOLUTE		=	"absolute";
0: 	public	static	final	String	RELATIVE		=	"relative";
0: 	public	static	final	String	FIRST			=	"first";
0: 	public	static	final	String	NEXT			=	"next";
0: 	public	static	final	String	LAST			=	"last";
0: 	public	static	final	String	PREVIOUS		=	"previous";
0: 
0: 	/**
0: 	 * Mark the ResultSet as the topmost one in the ResultSet tree.
0: 	 * Useful for closing down the ResultSet on an error.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void markAsTopResultSet();
0: 
0: 	/**
0: 	 * open a scan on the table. scan parameters are evaluated
0: 	 * at each open, so there is probably some way of altering
0: 	 * their values...
0: 	 * <p>
0: 	 * openCore() can only be called on a closed result
0: 	 * set.  see reopenCore if you want to reuse an open
0: 	 * result set.
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public void openCore() throws StandardException;
0: 
0: 	/**
0:      * reopen the scan.  behaves like openCore() but is 
0: 	 * optimized where appropriate (e.g. where scanController
0: 	 * has special logic for us).  
0: 	 * <p>
0: 	 * used by joiners
0: 	 * <p>
0: 	 * scan parameters are evaluated
0:      * at each open, so there is probably some way of altering
0:      * their values...  
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0:      */
0: 	public void reopenCore() throws StandardException;
0: 
0: 	/**
0:      * Return the requested values computed
0:      * from the next row (if any) for which
0:      * the restriction evaluates to true.
0:      * <p>
0:      * restriction and projection parameters
0:      * are evaluated for each row.
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0: 	 *
0: 	 * @return the next row in the result
0: 	 */
0: 	public ExecRow	getNextRowCore() throws StandardException;
0: 
0: 	/**
0: 	 * Return the point of attachment for this subquery.
0: 	 * (Only meaningful for Any and Once ResultSets, which can and will only
0: 	 * be at the top of a ResultSet for a subquery.)
0: 	 *
0: 	 * @return int	Point of attachment (result set number) for this
0: 	 *			    subquery.  (-1 if not a subquery - also Sanity violation)
0: 	 */
0: 	public int getPointOfAttachment();
0: 
0: 	/**
0: 	 * Return the isolation level of the scan in the result set.
0: 	 * Only expected to be called for those ResultSets that
0: 	 * contain a scan.
0: 	 *
0: 	 * @return The isolation level of the scan (in TransactionController constants).
0: 	 */
0: 	public int getScanIsolationLevel();
0: 
0: 	/**
0: 	 * Notify a NPRS that it is the source for the specified 
0: 	 * TargetResultSet.  This is useful when doing bulk insert.
0: 	 *
0: 	 * @param trs	The TargetResultSet.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setTargetResultSet(TargetResultSet trs);
0: 
0: 	/**
0: 	 * Set whether or not the NPRS need the row location when acting
0: 	 * as a row source.  (The target result set determines this.)
0: 	 * 
0: 	 * @param boolean needsRowLocation
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setNeedsRowLocation(boolean needsRowLocation);
0: 
0: 	/**
0: 	 * Get the estimated row count from this result set.
0: 	 *
0: 	 * @return	The estimated row count (as a double) from this result set.
0: 	 */
0: 	public double getEstimatedRowCount();
0: 
0: 	/**
0: 	 * Get the number of this ResultSet, which is guaranteed to be unique
0: 	 * within a statement.
0: 	 */
0: 	public int resultSetNumber();
0: 
0: 	/**
0: 	 * Set the current row to the row passed in.
0: 	 *
0: 	 * @param row the new current row
0: 	 *
0: 	 */
0: 	public void setCurrentRow(ExecRow row);
0: 
0: 	/**
0: 	 * Clear the current row
0: 	 *
0: 	 */
0: 	public void clearCurrentRow();
0: 
0: 	/**
0: 	 * Do we need to relock the row when going to the heap.
0: 	 *
0: 	 * @return Whether or not we need to relock the row when going to the heap.
0: 	 */
0: 
0: 	public boolean requiresRelocking();
0: 	
0: 	/**
0: 	 * Is this ResultSet or it's source result set for update
0: 	 *
0: 	 * @return Whether or not the result set is for update.
0: 	 */
0: 	public boolean isForUpdate();
0: 
0: }
============================================================================