1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.jdbc;
1:eac0369: 
1:eac0369: import java.sql.SQLException;
1:eac0369: import javax.sql.PooledConnection;
1:eec86ed: 
1:eac0369: 
1:78bdf36: /**
1:78bdf36:    <P>
1:2913612:     This datasource is suitable for an application using embedded Derby,
1:78bdf36:     running on full Java SE 6 and higher, corresponding to 4.0 and higher.
1:2913612:    EmbeddedConnectionPoolDataSource is a ConnectionPoolDataSource
1:2913612:    implementation.
1:78bdf36:     </P>
1:eac0369: 	
1:eac0369: 	<P>A ConnectionPoolDataSource is a factory for PooledConnection
1:eac0369: 	objects. An object that implements this interface will typically be
1:78bdf36: 	registered with a JNDI service.</P>
1:78bdf36:     
1:eac0369: 	<P>
1:eac0369: 	EmbeddedConnectionPoolDataSource automatically supports the correct JDBC specification version
1:78bdf36: 	for the Java Virtual Machine's environment.</P>
1:78bdf36:     
1:eac0369: 	<UL>
1:78bdf36:     <LI>JDBC 4.0 - Java SE 6</LI>
1:78bdf36:     <LI>JDBC 4.1 - Java SE 7</LI>
1:78bdf36:     <LI>JDBC 4.2 - full Java SE 8</LI>
1:eac0369: 	</UL>
1:eac0369: 
1:78bdf36:     <P>
1:78bdf36:     Use BasicEmbeddedConnectionPoolDataSource40 if your application runs on Java 8
1:78bdf36:     Compact Profile 2.
1:78bdf36:     </P>
1:eac0369: 
1:78bdf36: 	<P>EmbeddedConnectionPoolDataSource is serializable and referenceable.</P>
1:78bdf36: 
1:78bdf36: 	<P>See EmbeddedDataSource for DataSource properties.</P>
1:eac0369: 
1:eac0369:  */
1:eac0369: public class EmbeddedConnectionPoolDataSource extends EmbeddedDataSource
1:58bf06e:     implements EmbeddedConnectionPoolDataSourceInterface
1:eac0369: {
1:eac0369: 
1:eac0369: 	private static final long serialVersionUID = 7852784308039674160L;
1:eac0369: 
4:eac0369: 	/**
1:eac0369: 		No-arg constructor.
1:eac0369: 	 */
1:eac0369: 	public EmbeddedConnectionPoolDataSource() {
1:eac0369: 		super();
1:189ad05: 	}
1:eec86ed: 
1:eac0369: 	/*
1:eac0369: 	 * ConnectionPoolDataSource methods
1:eac0369: 	 */
1:eac0369: 
1:e175303: 	/**
1:eac0369: 		Attempt to establish a database connection.
1:eac0369: 
1:eac0369: 		@return a Connection to the database
1:eac0369: 
1:eac0369: 		@exception SQLException if a database-access error occurs.
1:eac0369: 	*/
1:a086620:     @Override
1:eac0369: 	public final PooledConnection getPooledConnection() throws SQLException { 
1:e175303: 		return createPooledConnection (getUser(), getPassword(), false);
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Attempt to establish a database connection.
1:eac0369: 
1:f0b0870: 		@param username the database user on whose behalf the Connection is being made
1:eac0369: 		@param password the user's password
1:eac0369: 
1:eac0369: 		@return a Connection to the database
1:eac0369: 
1:eac0369: 		@exception SQLException if a database-access error occurs.
1:eac0369: 	*/
1:a086620:     @Override
1:eac0369: 	public final PooledConnection getPooledConnection(String username, 
1:eac0369: 												String password)
1:eac0369: 		 throws SQLException
1:eec86ed: 	{
1:e175303: 		return createPooledConnection (username, password, true);
1:e175303: 	}
1:e175303:         
1:b004dff:     /**
1:b004dff:      * Create and return an EmbedPooledConnection from this instance
1:b004dff:      * of EmbeddedConnectionPoolDataSource.
1:b004dff:      *
1:b004dff:      * @param user The user name
1:b004dff:      * @param password The password
1:b004dff:      * @param requestPassword @{@code false} if original call is from a
1:b004dff:      *        no-argument constructor, otherwise {@code true}
1:b004dff:      * @return A pooled connection
1:b004dff:      * @throws SQLException An error occurred
1:b004dff:      */
1:58bf06e:     private PooledConnection createPooledConnection (String user,
1:8fcae92:         String password, boolean requestPassword) throws SQLException
1:eac0369:     {
1:8fcae92:         /* This object (EmbeddedConnectionPoolDataSource) is a JDBC 2
1:8fcae92:          * and JDBC 3 implementation of ConnectionPoolDatSource.  However,
1:8fcae92:          * it's possible that we are running with a newer driver (esp.
1:8fcae92:          * JDBC 4) in which case we should return a PooledConnection that
1:8fcae92:          * implements the newer JDBC interfaces--even if "this" object
1:8fcae92:          * does not itself satisfy those interfaces.  As an example, if
1:8fcae92:          * we have a JDK 6 application then even though this specific
1:8fcae92:          * object doesn't implement JDBC 4 (it only implements JDBC 2
1:8fcae92:          * and 3), we should still return a PooledConnection object that
1:8fcae92:          * *does* implement JDBC 4 because that's what a JDK 6 app
1:8fcae92:          * expects.
1:8fcae92:          *
1:8fcae92:          * By calling "findDriver()" here we will get the appropriate
1:8fcae92:          * driver for the JDK in use (ex. if using JDK 6 then findDriver()
1:8fcae92:          * will return the JDBC 4 driver).  If we then ask the driver to
1:8fcae92:          * give us a pooled connection, we will get a connection that
1:8fcae92:          * corresponds to whatever driver/JDBC implementation is being
1:8fcae92:          * used--which is what we want.  So for a JDK 6 application we
1:8fcae92:          * will correctly return a JDBC 4 PooledConnection. DERBY-2488.
1:8fcae92:          *
1:8fcae92:          * This type of scenario can occur if an application that was
1:8fcae92:          * previously running with an older JVM (ex. JDK 1.4/1.5) starts
1:8fcae92:          * running with a newer JVM (ex. JDK 6), in which case the app
1:8fcae92:          * is probably still using the "old" data source (ex. is still
1:8fcae92:          * instantiating EmbeddedConnectionPoolDataSource) instead of
1:8fcae92:          * the newer one (EmbeddedConnectionPoolDataSource40).
1:e175303:          */
1:595307e:         return findDriver().getNewPooledConnection(
1:8fcae92:             this, user, password, requestPassword);
1:eec86ed:     }
1:eec86ed: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b004dff
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Create and return an EmbedPooledConnection from this instance
1:      * of EmbeddedConnectionPoolDataSource.
1:      *
1:      * @param user The user name
1:      * @param password The password
1:      * @param requestPassword @{@code false} if original call is from a
1:      *        no-argument constructor, otherwise {@code true}
1:      * @return A pooled connection
1:      * @throws SQLException An error occurred
1:      */
commit:a086620
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     //
0:     // Create and return an EmbedPooledConnection from this instance
0:     // of EmbeddedConnectionPoolDataSource.
0:     //
commit:cb88209
/////////////////////////////////////////////////////////////////////////
0:     If running on Java SE 7 or higher, consider a more capable data source.
commit:2913612
/////////////////////////////////////////////////////////////////////////
1:     This datasource is suitable for an application using embedded Derby,
0:     running on full Java SE 5 or 6, corresponding to JDBC 3.0 and 4.0.
0:     If running on Java SE 7 og higher, consider a more capable data source.
0:     <p/>
1:    EmbeddedConnectionPoolDataSource is a ConnectionPoolDataSource
1:    implementation.
commit:58bf06e
/////////////////////////////////////////////////////////////////////////
1:     implements EmbeddedConnectionPoolDataSourceInterface
/////////////////////////////////////////////////////////////////////////
1:     private PooledConnection createPooledConnection (String user,
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:595307e
/////////////////////////////////////////////////////////////////////////
1:         return findDriver().getNewPooledConnection(
commit:46e89a9
/////////////////////////////////////////////////////////////////////////
0: 	implementation for JDBC 3.0 and JDBC 4.0.
/////////////////////////////////////////////////////////////////////////
0:     <LI> JDBC 3.0 - J2SE 5.0 </LI>
0:     <LI> JDBC 4.0 - Java SE 6 </LI>
commit:189ad05
/////////////////////////////////////////////////////////////////////////
0:     protected PooledConnection createPooledConnection (String user,
0:             String password, boolean requestPassword) throws SQLException {
0:         return new EmbedPooledConnection(this, user, password, requestPassword);
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:78bdf36
/////////////////////////////////////////////////////////////////////////
1: /**
1:    <P>
1:     running on full Java SE 6 and higher, corresponding to 4.0 and higher.
1:     </P>
1: 	registered with a JNDI service.</P>
1:     
1: 	for the Java Virtual Machine's environment.</P>
1:     
1:     <LI>JDBC 4.0 - Java SE 6</LI>
1:     <LI>JDBC 4.1 - Java SE 7</LI>
1:     <LI>JDBC 4.2 - full Java SE 8</LI>
1:     <P>
1:     Use BasicEmbeddedConnectionPoolDataSource40 if your application runs on Java 8
1:     Compact Profile 2.
1:     </P>
1: 	<P>EmbeddedConnectionPoolDataSource is serializable and referenceable.</P>
1: 
1: 	<P>See EmbeddedDataSource for DataSource properties.</P>
/////////////////////////////////////////////////////////////////////////
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLFeatureNotSupportedException;
0: import java.util.logging.Logger;
0: import org.apache.derby.impl.jdbc.Util;
1: 
/////////////////////////////////////////////////////////////////////////
0:     ////////////////////////////////////////////////////////////////////
0:     //
0:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
0:     //
0:     ////////////////////////////////////////////////////////////////////
1: 
0:     public  Logger getParentLogger()
0:         throws SQLFeatureNotSupportedException
1:     {
0:         throw (SQLFeatureNotSupportedException) Util.notImplemented( "getParentLogger()" );
1:     }
1: 
commit:b33b410
/////////////////////////////////////////////////////////////////////////
0: 	EmbeddedConnectionPoolDataSource is Derby's ConnectionPoolDataSource
0: 	implementation for the JDBC3.0 and JDBC2.0 environments.
commit:79fd819
/////////////////////////////////////////////////////////////////////////
commit:e175303
/////////////////////////////////////////////////////////////////////////
1: 		return createPooledConnection (getUser(), getPassword(), false);
/////////////////////////////////////////////////////////////////////////
1: 		return createPooledConnection (username, password, true);
1:         
1:     /**
0:      * create and returns EmbedPooledConnection.
0:      * @param user 
0:      * @param password 
0:      * @param requestPAssword 
0:      * @return 
1:      */
0:         protected PooledConnection createPooledConnection (String user, 
0:                 String password, boolean requestPAssword) throws SQLException {
0:             return new EmbedPooledConnection(this, user, password, true);
1:         }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fb8cf6e
/////////////////////////////////////////////////////////////////////////
0: 	implementation for the JDBC3.0 environment.
/////////////////////////////////////////////////////////////////////////
commit:374d2f1
/////////////////////////////////////////////////////////////////////////
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.jdbc;
1: 
1: import java.sql.SQLException;
1: 
0: /* -- New jdbc 20 extension types --- */
0: import javax.sql.ConnectionPoolDataSource;
1: import javax.sql.PooledConnection;
1: 
1: /** 
0: 	EmbeddedConnectionPoolDataSource is Cloudscape's ConnectionPoolDataSource implementation.
1: 	
1: 
1: 	<P>A ConnectionPoolDataSource is a factory for PooledConnection
1: 	objects. An object that implements this interface will typically be
0: 	registered with a JNDI service.
1: 	<P>
1: 	EmbeddedConnectionPoolDataSource automatically supports the correct JDBC specification version
0: 	for the Java Virtual Machine's environment.
1: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
1: 	</UL>
1: 
0: 	<P>EmbeddedConnectionPoolDataSource is serializable and referenceable.
1: 
0: 	<P>See EmbeddedDataSource for DataSource properties.
1: 
1:  */
1: public class EmbeddedConnectionPoolDataSource extends EmbeddedDataSource
0: 		implements	javax.sql.ConnectionPoolDataSource
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 
1: 	private static final long serialVersionUID = 7852784308039674160L;
1: 
1: 	/**
1: 		No-arg constructor.
1: 	 */
1: 	public EmbeddedConnectionPoolDataSource() {
1: 		super();
1: 	}
1: 
1: 	/*
1: 	 * ConnectionPoolDataSource methods
1: 	 */
1: 
1: 	/**
1: 		Attempt to establish a database connection.
1: 
1: 		@return a Connection to the database
1: 
1: 		@exception SQLException if a database-access error occurs.
1: 	*/
1: 	public final PooledConnection getPooledConnection() throws SQLException { 
0: 		return new EmbedPooledConnection(this, getUser(), getPassword(), false);
1: 	}
1: 
1: 	/**
1: 		Attempt to establish a database connection.
1: 
0: 		@param user the database user on whose behalf the Connection is being made
1: 		@param password the user's password
1: 
1: 		@return a Connection to the database
1: 
1: 		@exception SQLException if a database-access error occurs.
1: 	*/
1: 	public final PooledConnection getPooledConnection(String username, 
1: 												String password)
1: 		 throws SQLException
1: 	{
0: 		return new EmbedPooledConnection(this, username, password, true);
1: 	}
1: 
1: }
1: 
1: 
1: 
1: 
1: 
author:Army
-------------------------------------------------------------------------------
commit:8fcae92
/////////////////////////////////////////////////////////////////////////
0:      * Create and return an EmbedPooledConnection from this instance
0:      * of EmbeddedConnectionPoolDataSource.
1:         String password, boolean requestPassword) throws SQLException
0:     {
1:         /* This object (EmbeddedConnectionPoolDataSource) is a JDBC 2
1:          * and JDBC 3 implementation of ConnectionPoolDatSource.  However,
1:          * it's possible that we are running with a newer driver (esp.
1:          * JDBC 4) in which case we should return a PooledConnection that
1:          * implements the newer JDBC interfaces--even if "this" object
1:          * does not itself satisfy those interfaces.  As an example, if
1:          * we have a JDK 6 application then even though this specific
1:          * object doesn't implement JDBC 4 (it only implements JDBC 2
1:          * and 3), we should still return a PooledConnection object that
1:          * *does* implement JDBC 4 because that's what a JDK 6 app
1:          * expects.
1:          *
1:          * By calling "findDriver()" here we will get the appropriate
1:          * driver for the JDK in use (ex. if using JDK 6 then findDriver()
1:          * will return the JDBC 4 driver).  If we then ask the driver to
1:          * give us a pooled connection, we will get a connection that
1:          * corresponds to whatever driver/JDBC implementation is being
1:          * used--which is what we want.  So for a JDK 6 application we
1:          * will correctly return a JDBC 4 PooledConnection. DERBY-2488.
1:          *
1:          * This type of scenario can occur if an application that was
1:          * previously running with an older JVM (ex. JDK 1.4/1.5) starts
1:          * running with a newer JVM (ex. JDK 6), in which case the app
1:          * is probably still using the "old" data source (ex. is still
1:          * instantiating EmbeddedConnectionPoolDataSource) instead of
1:          * the newer one (EmbeddedConnectionPoolDataSource40).
0:          */
0:         return ((Driver30) findDriver()).getNewPooledConnection(
1:             this, user, password, requestPassword);
0: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:cd065ba
/////////////////////////////////////////////////////////////////////////
0: 	EmbeddedConnectionPoolDataSource is Derby's ConnectionPoolDataSource implementation.
commit:f0b0870
/////////////////////////////////////////////////////////////////////////
1: 		@param username the database user on whose behalf the Connection is being made
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.jdbc;
0: 
0: import java.sql.SQLException;
0: 
0: /* -- New jdbc 20 extension types --- */
0: import javax.sql.ConnectionPoolDataSource;
0: import javax.sql.PooledConnection;
0: 
0: /** 
0: 	EmbeddedConnectionPoolDataSource is Cloudscape's ConnectionPoolDataSource implementation.
0: 	
0: 
0: 	<P>A ConnectionPoolDataSource is a factory for PooledConnection
0: 	objects. An object that implements this interface will typically be
0: 	registered with a JNDI service.
0: 	<P>
0: 	EmbeddedConnectionPoolDataSource automatically supports the correct JDBC specification version
0: 	for the Java Virtual Machine's environment.
0: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
0: 	</UL>
0: 
0: 	<P>EmbeddedConnectionPoolDataSource is serializable and referenceable.
0: 
0: 	<P>See EmbeddedDataSource for DataSource properties.
0: 
0:  */
0: public class EmbeddedConnectionPoolDataSource extends EmbeddedDataSource
0: 		implements	javax.sql.ConnectionPoolDataSource
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 
0: 	private static final long serialVersionUID = 7852784308039674160L;
0: 
0: 	/**
0: 		No-arg constructor.
0: 	 */
0: 	public EmbeddedConnectionPoolDataSource() {
0: 		super();
0: 	}
0: 
0: 	/*
0: 	 * ConnectionPoolDataSource methods
0: 	 */
0: 
0: 	/**
0: 		Attempt to establish a database connection.
0: 
0: 		@return a Connection to the database
0: 
0: 		@exception SQLException if a database-access error occurs.
0: 	*/
0: 	public final PooledConnection getPooledConnection() throws SQLException { 
0: 		return new EmbedPooledConnection(this, getUser(), getPassword(), false);
0: 	}
0: 
0: 	/**
0: 		Attempt to establish a database connection.
0: 
0: 		@param user the database user on whose behalf the Connection is being made
0: 		@param password the user's password
0: 
0: 		@return a Connection to the database
0: 
0: 		@exception SQLException if a database-access error occurs.
0: 	*/
0: 	public final PooledConnection getPooledConnection(String username, 
0: 												String password)
0: 		 throws SQLException
0: 	{
0: 		return new EmbedPooledConnection(this, username, password, true);
0: 	}
0: 
0: }
0: 
0: 
0: 
0: 
0: 
============================================================================