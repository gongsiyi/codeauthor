1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.monitor.PersistentService
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.monitor;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: import java.util.Enumeration;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A PersistentService modularises the access to persistent services,
1:eac0369: 	abstracting out details such as finding the list of services to
1:eac0369: 	be started at boot time, finding the service.properties file
1:eac0369: 	and creating and deleting the persistent storage for a service.
1:eac0369: <P>
1:eac0369: 	These modules must only be used by the monitor.
1:eac0369: <P>
1:eac0369: 	Possible examples of implementations are:
1:eac0369: 
1:eac0369: 	<UL>
1:eac0369: 	<LI> Store services in a directory in the file system.
1:eac0369: 	<LI> Store services in a zip file
1:eac0369: 	<LI> Service data is provided by a web server
1:eac0369: 	<LI> Service data is stored on the class path.
1:eac0369: 	</UL>
1:eac0369: <P>
1:eac0369: 	This class also serves as the registry the defined name for all
1:eac0369: 	the implementations of PersistentService. These need to be kept track
1:eac0369: 	of as they can be used in JDBC URLS.
1:eac0369: <P>
1:eac0369: 	An implementation of PersistentService can implement ModuleSupportable
1:eac0369: 	but must not implement ModuleControl. This is because the monitor will
1:eac0369: 	not execute ModuleControl methods for a PersistentService.
1:eac0369: */
1:eac0369: 
1:eac0369: public interface PersistentService {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Service stored in a directory.
1:eac0369: 	*/
1:eac0369: 	public static final String DIRECTORY = "directory";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Service stored on the class path (can be in a zip/jar on the class path).
1:eac0369: 	*/
1:eac0369: 	public static final String CLASSPATH = "classpath";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Service stored in a jar/zip archive.
1:eac0369: 	*/
1:eac0369: 	public static final String JAR = "jar";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Service stored in a web server .
1:eac0369: 	*/
1:eac0369: 	public static final String HTTP = "http";
1:eac0369: 	public static final String HTTPS = "https";
1:eac0369: 
1:33467a5:     /** Service stored in memory only (not persistent), virtual file memory. */
1:f6b20cf:     public static final String INMEMORY = "memory";
1:651c99e:     /**
1:651c99e:         The readme file cautioning users against touching the files in
1:651c99e:         the database directory 
1:651c99e:     */
1:70ddc11:     public static final String DB_README_FILE_NAME = "README_DO_NOT_TOUCH_FILES.txt";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The typical name for the service's properties file.
1:eac0369: 	*/
1:eac0369: 	public static final String PROPERTIES_NAME = "service.properties";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The root of any stored data.
1:eac0369: 	*/
1:eac0369: 	public static final String ROOT = Property.PROPERTY_RUNTIME_PREFIX + "serviceDirectory";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		The type of PersistentService used to boot the service.
1:eac0369: 	*/
1:eac0369: 	public static final String TYPE = Property.PROPERTY_RUNTIME_PREFIX + "serviceType";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the type of this service.
1:eac0369: 	*/
1:eac0369: 	public String getType();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return an Enumeration of service names descriptors (Strings) that should be
1:eac0369: 		be started at boot time by the monitor. The monitor will boot the service if getServiceProperties()
1:eac0369: 		returns a Properties object and the properties does not indicate the service should not be
1:eac0369: 		auto-booted.
1:eac0369: 		<P>
1:eac0369: 		This method may return null if there are no services that need to be booted automatically at boot time.
1:eac0369: 
1:eac0369: 		<P>
1:eac0369: 		The service name returned by the Enumeration must be in its canonical form.
1:eac0369: 	*/
1:eac0369: 	public Enumeration getBootTimeServices();
1:eac0369: 
1:651c99e:     /**
1:651c99e:         Put a readme file in database directory which will caution users
1:651c99e:         against touching any files in the directory. This file will be
1:651c99e:         created at database creation time.
1:651c99e: 
1:651c99e:         @param sf StorageFactory will be used to create the file
1:651c99e: 
1:651c99e:         @exception StandardException File can't be created
1:651c99e:     */
1:651c99e:     public void createDataWarningFile(StorageFactory sf) throws StandardException;
1:651c99e: 
1:eac0369: 	/**
1:eac0369: 		For a service return its service properties, typically from the service.properties
1:eac0369: 		file.
1:eac0369: 
1:eac0369: 		@return A Properties object or null if serviceName does not represent a valid service.
1:eac0369: 
1:eac0369: 		@exception StandardException Service appears valid but the properties cannot be created.
1:eac0369: 	*/
1:eac0369: 	public Properties getServiceProperties(String serviceName, Properties defaultProperties)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		@exception StandardException Properties cannot be saved.
1:eac0369: 	*/
1:eac0369: 	public void saveServiceProperties(String serviceName,
1:eac0369:                                       StorageFactory storageFactory,
2:eac0369:                                       Properties properties,
2:eac0369:                                       boolean replace)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369:        Save to a backup file.
1:eac0369:        
1:eac0369: 		@exception StandardException Properties cannot be saved.
1:eac0369: 	*/
1:eac0369: 	public void saveServiceProperties(String serviceName,
1:5f5bc5f:                                       Properties properties)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Returns the canonical name of the service.
1:eac0369: 
1:eac0369: 		@exception StandardException Service root cannot be created.
1:eac0369: 	*/
1:eac0369: 	public String createServiceRoot(String name, boolean deleteExisting)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Remove a service's root and its contents.
1:eac0369: 	*/
1:eac0369: 	public boolean removeServiceRoot(String serviceName);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Convert a service name into its canonical form. Returns null if the name
1:eac0369: 		cannot be converted into a canonical form.
1:3982b7d: 		
1:f668d94:         @exception StandardException if an error happens when converting the
1:f668d94:         name (name probably invalid)
1:eac0369: 	*/
1:3982b7d: 	public String getCanonicalServiceName(String name)
1:3982b7d: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return the user form of a service name. This name is only valid within
1:eac0369: 		this system. The separator character used must be '/'
1:eac0369: 	*/
1:eac0369: 	public String getUserServiceName(String serviceName);
1:eac0369: 
1:eac0369: 
1:eac0369: 	public boolean isSameService(String serviceName1, String serviceName2);
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * @return true if the PersistentService has a StorageFactory, false if not.
1:eac0369:      */
1:eac0369:     public boolean hasStorageFactory();
1:eac0369:     
1:eac0369:     /**
1:eac0369:      * Get an initialized StorageFactoryInstance
1:eac0369:      *
1:eac0369:      * @param useHome If true and the database name is not absolute then the database directory will be
1:eac0369:      *                relative to the home directory, if one is defined in the properties file.
1:eac0369:      * @param databaseName The name of the database (directory). The name does not include the subSubProtocol.
1:eac0369:      *                     If null then the storage factory will only be used to deal with the directory containing
1:eac0369:      *                     the databases.
1:eac0369:      * @param tempDirName The name of the temporary file directory set in properties. If null then a default
1:eac0369:      *                    directory should be used. Each database should get a separate temporary file
1:eac0369:      *                    directory within this one to avoid collisions.
1:eac0369:      * @param uniqueName A unique name that can be used to create the temporary file directory for this database.
1:eac0369:      *                   If null then temporary files will not be created in this StorageFactory instance.
1:eac0369:      *
1:eac0369:      * @return An initialized StorageFactory.
1:eac0369:      */
1:eac0369:     public StorageFactory getStorageFactoryInstance(boolean useHome,
1:eac0369:                                                     String databaseName,
1:eac0369:                                                     String tempDirName,
1:eac0369:                                                     String uniqueName)
1:eac0369:         throws StandardException, IOException;
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:         @exception StandardException if an error happens when converting the
1:         name (name probably invalid)
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:70ddc11
/////////////////////////////////////////////////////////////////////////
1:     public static final String DB_README_FILE_NAME = "README_DO_NOT_TOUCH_FILES.txt";
commit:651c99e
/////////////////////////////////////////////////////////////////////////
1:     /**
1:         The readme file cautioning users against touching the files in
1:         the database directory 
1:     */
0:     public static final String DB_README_FILE_NAME = "README_DONT_TOUCH_FILES.txt";
/////////////////////////////////////////////////////////////////////////
1:     /**
1:         Put a readme file in database directory which will caution users
1:         against touching any files in the directory. This file will be
1:         created at database creation time.
1: 
1:         @param sf StorageFactory will be used to create the file
1: 
1:         @exception StandardException File can't be created
1:     */
1:     public void createDataWarningFile(StorageFactory sf) throws StandardException;
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:5f5bc5f
/////////////////////////////////////////////////////////////////////////
1:                                       Properties properties)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:f6b20cf
/////////////////////////////////////////////////////////////////////////
1:     public static final String INMEMORY = "memory";
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1:     /** Service stored in memory only (not persistent), virtual file memory. */
0:     public static final String INMEMORY = "in-memory";
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3982b7d
/////////////////////////////////////////////////////////////////////////
1: 		
0: 		@exception No canonical name, name probably invalid
1: 	public String getCanonicalServiceName(String name)
1: 		throws StandardException;
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.monitor.PersistentService
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.monitor
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.monitor;
1: 
1: import org.apache.derby.io.StorageFactory;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.Property;
1: 
1: import java.util.Properties;
1: import java.util.Enumeration;
1: 
1: import java.io.IOException;
1: 
1: /**
1: 	A PersistentService modularises the access to persistent services,
1: 	abstracting out details such as finding the list of services to
1: 	be started at boot time, finding the service.properties file
1: 	and creating and deleting the persistent storage for a service.
1: <P>
1: 	These modules must only be used by the monitor.
1: <P>
1: 	Possible examples of implementations are:
1: 
1: 	<UL>
1: 	<LI> Store services in a directory in the file system.
1: 	<LI> Store services in a zip file
1: 	<LI> Service data is provided by a web server
1: 	<LI> Service data is stored on the class path.
1: 	</UL>
1: <P>
1: 	This class also serves as the registry the defined name for all
1: 	the implementations of PersistentService. These need to be kept track
1: 	of as they can be used in JDBC URLS.
1: <P>
1: 	An implementation of PersistentService can implement ModuleSupportable
1: 	but must not implement ModuleControl. This is because the monitor will
1: 	not execute ModuleControl methods for a PersistentService.
1: */
1: 
1: public interface PersistentService {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/**
1: 		Service stored in a directory.
1: 	*/
1: 	public static final String DIRECTORY = "directory";
1: 
1: 	/**
1: 		Service stored on the class path (can be in a zip/jar on the class path).
1: 	*/
1: 	public static final String CLASSPATH = "classpath";
1: 
1: 	/**
1: 		Service stored in a jar/zip archive.
1: 	*/
1: 	public static final String JAR = "jar";
1: 
1: 	/**
1: 		Service stored in a web server .
1: 	*/
1: 	public static final String HTTP = "http";
1: 	public static final String HTTPS = "https";
1: 
1: 
1: 	/**
1: 		The typical name for the service's properties file.
1: 	*/
1: 	public static final String PROPERTIES_NAME = "service.properties";
1: 
1: 	/**
1: 		The root of any stored data.
1: 	*/
1: 	public static final String ROOT = Property.PROPERTY_RUNTIME_PREFIX + "serviceDirectory";
1: 
1: 	/**
1: 		The type of PersistentService used to boot the service.
1: 	*/
1: 	public static final String TYPE = Property.PROPERTY_RUNTIME_PREFIX + "serviceType";
1: 
1: 	/**
1: 		Return the type of this service.
1: 	*/
1: 	public String getType();
1: 
1: 	/**
1: 		Return an Enumeration of service names descriptors (Strings) that should be
1: 		be started at boot time by the monitor. The monitor will boot the service if getServiceProperties()
1: 		returns a Properties object and the properties does not indicate the service should not be
1: 		auto-booted.
1: 		<P>
1: 		This method may return null if there are no services that need to be booted automatically at boot time.
1: 
1: 		<P>
1: 		The service name returned by the Enumeration must be in its canonical form.
1: 	*/
1: 	public Enumeration getBootTimeServices();
1: 
1: 	/**
1: 		For a service return its service properties, typically from the service.properties
1: 		file.
1: 
1: 		@return A Properties object or null if serviceName does not represent a valid service.
1: 
1: 		@exception StandardException Service appears valid but the properties cannot be created.
1: 	*/
1: 	public Properties getServiceProperties(String serviceName, Properties defaultProperties)
1: 		throws StandardException;
1: 
1: 	/**
1: 		@exception StandardException Properties cannot be saved.
1: 	*/
1: 	public void saveServiceProperties(String serviceName,
1:                                       StorageFactory storageFactory,
1:                                       Properties properties,
1:                                       boolean replace)
1: 		throws StandardException;
1: 
1: 	/**
1:        Save to a backup file.
1:        
1: 		@exception StandardException Properties cannot be saved.
1: 	*/
1: 	public void saveServiceProperties(String serviceName,
1:                                       Properties properties,
1:                                       boolean replace)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Returns the canonical name of the service.
1: 
1: 		@exception StandardException Service root cannot be created.
1: 	*/
1: 	public String createServiceRoot(String name, boolean deleteExisting)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Remove a service's root and its contents.
1: 	*/
1: 	public boolean removeServiceRoot(String serviceName);
1: 
1: 	/**
1: 		Convert a service name into its canonical form. Returns null if the name
1: 		cannot be converted into a canonical form.
1: 	*/
0: 	public String getCanonicalServiceName(String name);
1: 
1: 	/**
1: 		Return the user form of a service name. This name is only valid within
1: 		this system. The separator character used must be '/'
1: 	*/
1: 	public String getUserServiceName(String serviceName);
1: 
1: 
1: 	public boolean isSameService(String serviceName1, String serviceName2);
1: 
1:     /**
1:      * @return true if the PersistentService has a StorageFactory, false if not.
1:      */
1:     public boolean hasStorageFactory();
1:     
1:     /**
1:      * Get an initialized StorageFactoryInstance
1:      *
1:      * @param useHome If true and the database name is not absolute then the database directory will be
1:      *                relative to the home directory, if one is defined in the properties file.
1:      * @param databaseName The name of the database (directory). The name does not include the subSubProtocol.
1:      *                     If null then the storage factory will only be used to deal with the directory containing
1:      *                     the databases.
1:      * @param tempDirName The name of the temporary file directory set in properties. If null then a default
1:      *                    directory should be used. Each database should get a separate temporary file
1:      *                    directory within this one to avoid collisions.
1:      * @param uniqueName A unique name that can be used to create the temporary file directory for this database.
1:      *                   If null then temporary files will not be created in this StorageFactory instance.
1:      *
1:      * @return An initialized StorageFactory.
1:      */
1:     public StorageFactory getStorageFactoryInstance(boolean useHome,
1:                                                     String databaseName,
1:                                                     String tempDirName,
1:                                                     String uniqueName)
1:         throws StandardException, IOException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.monitor
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.monitor;
0: 
0: import org.apache.derby.io.StorageFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import java.util.Properties;
0: import java.util.Enumeration;
0: 
0: import java.io.IOException;
0: 
0: /**
0: 	A PersistentService modularises the access to persistent services,
0: 	abstracting out details such as finding the list of services to
0: 	be started at boot time, finding the service.properties file
0: 	and creating and deleting the persistent storage for a service.
0: <P>
0: 	These modules must only be used by the monitor.
0: <P>
0: 	Possible examples of implementations are:
0: 
0: 	<UL>
0: 	<LI> Store services in a directory in the file system.
0: 	<LI> Store services in a zip file
0: 	<LI> Service data is provided by a web server
0: 	<LI> Service data is stored on the class path.
0: 	</UL>
0: <P>
0: 	This class also serves as the registry the defined name for all
0: 	the implementations of PersistentService. These need to be kept track
0: 	of as they can be used in JDBC URLS.
0: <P>
0: 	An implementation of PersistentService can implement ModuleSupportable
0: 	but must not implement ModuleControl. This is because the monitor will
0: 	not execute ModuleControl methods for a PersistentService.
0: */
0: 
0: public interface PersistentService {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/**
0: 		Service stored in a directory.
0: 	*/
0: 	public static final String DIRECTORY = "directory";
0: 
0: 	/**
0: 		Service stored on the class path (can be in a zip/jar on the class path).
0: 	*/
0: 	public static final String CLASSPATH = "classpath";
0: 
0: 	/**
0: 		Service stored in a jar/zip archive.
0: 	*/
0: 	public static final String JAR = "jar";
0: 
0: 	/**
0: 		Service stored in a web server .
0: 	*/
0: 	public static final String HTTP = "http";
0: 	public static final String HTTPS = "https";
0: 
0: 
0: 	/**
0: 		The typical name for the service's properties file.
0: 	*/
0: 	public static final String PROPERTIES_NAME = "service.properties";
0: 
0: 	/**
0: 		The root of any stored data.
0: 	*/
0: 	public static final String ROOT = Property.PROPERTY_RUNTIME_PREFIX + "serviceDirectory";
0: 
0: 	/**
0: 		The type of PersistentService used to boot the service.
0: 	*/
0: 	public static final String TYPE = Property.PROPERTY_RUNTIME_PREFIX + "serviceType";
0: 
0: 	/**
0: 		Return the type of this service.
0: 	*/
0: 	public String getType();
0: 
0: 	/**
0: 		Return an Enumeration of service names descriptors (Strings) that should be
0: 		be started at boot time by the monitor. The monitor will boot the service if getServiceProperties()
0: 		returns a Properties object and the properties does not indicate the service should not be
0: 		auto-booted.
0: 		<P>
0: 		This method may return null if there are no services that need to be booted automatically at boot time.
0: 
0: 		<P>
0: 		The service name returned by the Enumeration must be in its canonical form.
0: 	*/
0: 	public Enumeration getBootTimeServices();
0: 
0: 	/**
0: 		For a service return its service properties, typically from the service.properties
0: 		file.
0: 
0: 		@return A Properties object or null if serviceName does not represent a valid service.
0: 
0: 		@exception StandardException Service appears valid but the properties cannot be created.
0: 	*/
0: 	public Properties getServiceProperties(String serviceName, Properties defaultProperties)
0: 		throws StandardException;
0: 
0: 	/**
0: 		@exception StandardException Properties cannot be saved.
0: 	*/
0: 	public void saveServiceProperties(String serviceName,
0:                                       StorageFactory storageFactory,
0:                                       Properties properties,
0:                                       boolean replace)
0: 		throws StandardException;
0: 
0: 	/**
0:        Save to a backup file.
0:        
0: 		@exception StandardException Properties cannot be saved.
0: 	*/
0: 	public void saveServiceProperties(String serviceName,
0:                                       Properties properties,
0:                                       boolean replace)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Returns the canonical name of the service.
0: 
0: 		@exception StandardException Service root cannot be created.
0: 	*/
0: 	public String createServiceRoot(String name, boolean deleteExisting)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Remove a service's root and its contents.
0: 	*/
0: 	public boolean removeServiceRoot(String serviceName);
0: 
0: 	/**
0: 		Convert a service name into its canonical form. Returns null if the name
0: 		cannot be converted into a canonical form.
0: 	*/
0: 	public String getCanonicalServiceName(String name);
0: 
0: 	/**
0: 		Return the user form of a service name. This name is only valid within
0: 		this system. The separator character used must be '/'
0: 	*/
0: 	public String getUserServiceName(String serviceName);
0: 
0: 
0: 	public boolean isSameService(String serviceName1, String serviceName2);
0: 
0:     /**
0:      * @return true if the PersistentService has a StorageFactory, false if not.
0:      */
0:     public boolean hasStorageFactory();
0:     
0:     /**
0:      * Get an initialized StorageFactoryInstance
0:      *
0:      * @param useHome If true and the database name is not absolute then the database directory will be
0:      *                relative to the home directory, if one is defined in the properties file.
0:      * @param databaseName The name of the database (directory). The name does not include the subSubProtocol.
0:      *                     If null then the storage factory will only be used to deal with the directory containing
0:      *                     the databases.
0:      * @param tempDirName The name of the temporary file directory set in properties. If null then a default
0:      *                    directory should be used. Each database should get a separate temporary file
0:      *                    directory within this one to avoid collisions.
0:      * @param uniqueName A unique name that can be used to create the temporary file directory for this database.
0:      *                   If null then temporary files will not be created in this StorageFactory instance.
0:      *
0:      * @return An initialized StorageFactory.
0:      */
0:     public StorageFactory getStorageFactoryInstance(boolean useHome,
0:                                                     String databaseName,
0:                                                     String tempDirName,
0:                                                     String uniqueName)
0:         throws StandardException, IOException;
0: }
============================================================================