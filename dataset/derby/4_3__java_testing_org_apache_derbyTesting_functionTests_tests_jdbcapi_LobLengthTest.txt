1:164e806: /*
7:164e806: 
1:164e806:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest
1:164e806: 
1:164e806:    Licensed to the Apache Software Foundation (ASF) under one or more
1:164e806:    contributor license agreements.  See the NOTICE file distributed with
1:164e806:    this work for additional information regarding copyright ownership.
1:164e806:    The ASF licenses this file to You under the Apache License, Version 2.0
1:164e806:    (the "License"); you may not use this file except in compliance with
1:164e806:    the License.  You may obtain a copy of the License at
1:164e806: 
1:164e806:       http://www.apache.org/licenses/LICENSE-2.0
1:164e806: 
1:164e806:    Unless required by applicable law or agreed to in writing, software
1:164e806:    distributed under the License is distributed on an "AS IS" BASIS,
1:164e806:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:164e806:    See the License for the specific language governing permissions and
1:164e806:    limitations under the License.
1:164e806: 
1:164e806:  */
1:164e806: 
1:164e806: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:164e806: 
1:164e806: import java.sql.PreparedStatement;
1:164e806: import java.sql.Statement;
1:164e806: import junit.framework.Test;
1:1982e59: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:164e806: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:eba07fc: import org.apache.derbyTesting.junit.TestConfiguration;
1:164e806: 
1:164e806: /**
1:164e806:  * This tests a fix for a defect (DERBY-121) where the server and
1:164e806:  * client were processing lob lengths incorrectly.  For lob lengths
1:164e806:  * that are represented by 24 or more bits, the server and Derby
1:164e806:  * client were doing incorrect bit-shifting.  This test makes sure
1:164e806:  * that problem no longer occurs.
1:164e806:  */
1:164e806: 
1:164e806: public class LobLengthTest extends BaseJDBCTestCase {
1:164e806: 
1:164e806:     /**
1:164e806:      * Creates a new instance of LobLengthTest
1:164e806:      *
1:164e806:      * @param name name of the test.
1:164e806:      */
1:164e806:     public LobLengthTest(String name)
1:164e806:     {
1:164e806:         super(name);
1:164e806:     }
1:164e806: 
1:164e806:     
1:164e806:     public static Test suite() 
1:164e806:     {
1:eba07fc:         return TestConfiguration.defaultSuite(LobLengthTest.class);
1:164e806:     }
1:164e806: 
1:164e806: 
1:164e806:     /**
1:164e806:      * Create a JDBC connection using the arguments passed
1:164e806:      * in from the harness, and create the table to be used by the test.
1:164e806:      */
1:164e806:     public void setUp() throws Exception
1:164e806:     {
1:eba07fc:         getConnection().setAutoCommit(false);
1:164e806: 
1:164e806:         // Create a test table.
1:eba07fc:         Statement st = createStatement();
1:164e806:         st.execute("create table lobTable100M(bl blob(100M))");
1:164e806:         st.close();
1:164e806:     }
1:164e806: 
1:164e806: 
1:164e806:     /**
1:164e806:      * Cleanup: Drop table and close connection.
1:164e806:      */
1:164e806:     public void tearDown() throws Exception 
1:164e806:     {
1:eba07fc:         Statement st = createStatement();
1:164e806:         st.execute("drop table lobTable100M");
1:164e806:         st.close();
1:164e806: 
1:eba07fc:         commit();
1:eba07fc:         super.tearDown();
1:164e806:     }
1:164e806: 
1:164e806: 
1:164e806:     /**
1:164e806:      * There was a defect (DERBY-121) where the server and client
1:164e806:      * were processing lob lengths incorrectly.  For lob lengths
1:164e806:      * that are represented by 24 or more bits, the server and
1:164e806:      * Derby client were doing incorrect bit-shifting.  This
1:164e806:      * test makes sure that problem no longer occurs.
1:164e806:      */
1:164e806:     public void testLongLobLengths() throws Exception
1:164e806:     {
1:eba07fc:         PreparedStatement pSt = prepareStatement(
1:164e806:             "insert into lobTable100M(bl) values (?)");
1:164e806: 
1:164e806:         // The error we're testing occurs when the server
1:164e806:         // is shifting bits 24 and higher of the lob's
1:164e806:         // length (in bytes).  This means that, in order
1:164e806:         // to check for the error, we have to specify a
1:164e806:         // lob length (in bytes) that requires at least
1:164e806:         // 24 bits to represent.  Thus for a blob the
1:164e806:         // length of the test data must be specified as
1:164e806:         // at least 2^24 bytes (hence the '16800000' in
1:164e806:         // the next line).
1:1982e59:         int lobSize = 16800000;
1:164e806:         pSt.setBinaryStream(1,
1:1982e59:             new LoopingAlphabetStream(lobSize), lobSize);
1:164e806: 
1:164e806:         // Now try the insert; this is where the server processes
1:164e806:         // the lob length.
1:164e806:         pSt.execute();
1:164e806:         pSt.close();
1:164e806:     }
1:164e806: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1982e59
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
/////////////////////////////////////////////////////////////////////////
1:         int lobSize = 16800000;
1:             new LoopingAlphabetStream(lobSize), lobSize);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:eba07fc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return TestConfiguration.defaultSuite(LobLengthTest.class);
/////////////////////////////////////////////////////////////////////////
1:         getConnection().setAutoCommit(false);
1:         Statement st = createStatement();
/////////////////////////////////////////////////////////////////////////
1:         Statement st = createStatement();
1:         commit();
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement pSt = prepareStatement(
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:164e806
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.Statement;
0: import java.sql.SQLException;
1: 
0: import java.io.ByteArrayInputStream;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
1: /**
1:  * This tests a fix for a defect (DERBY-121) where the server and
1:  * client were processing lob lengths incorrectly.  For lob lengths
1:  * that are represented by 24 or more bits, the server and Derby
1:  * client were doing incorrect bit-shifting.  This test makes sure
1:  * that problem no longer occurs.
1:  */
1: 
1: public class LobLengthTest extends BaseJDBCTestCase {
1: 
1: 
0:     /* Connection to be used in test */
0:     private Connection conn = null; 
1: 
1:     /**
1:      * Creates a new instance of LobLengthTest
1:      *
1:      * @param name name of the test.
1:      */
1:     public LobLengthTest(String name)
1:     {
1:         super(name);
1:     }
1: 
1:     
1:     public static Test suite() 
1:     {
0:         final TestSuite suite = new TestSuite();
1:         
0:         suite.addTest(new LobLengthTest("testLongLobLengths"));
1: 
0:         return suite;
1:     }
1: 
1: 
1:     /**
1:      * Create a JDBC connection using the arguments passed
1:      * in from the harness, and create the table to be used by the test.
1:      */
1:     public void setUp() throws Exception
1:     {
0:         conn = getConnection();
0:         conn.setAutoCommit(false);
1: 
1:         // Create a test table.
0:         Statement st = conn.createStatement();
1:         st.execute("create table lobTable100M(bl blob(100M))");
1:         st.close();
1:     }
1: 
1: 
1:     /**
1:      * Cleanup: Drop table and close connection.
1:      */
1:     public void tearDown() throws Exception 
1:     {
0:         Statement st = conn.createStatement();
1:         st.execute("drop table lobTable100M");
1:         st.close();
1: 
0:         conn.commit();
0:         conn.close();
1:     }
1: 
1: 
1:     /**
1:      * There was a defect (DERBY-121) where the server and client
1:      * were processing lob lengths incorrectly.  For lob lengths
1:      * that are represented by 24 or more bits, the server and
1:      * Derby client were doing incorrect bit-shifting.  This
1:      * test makes sure that problem no longer occurs.
1:      */
1:     public void testLongLobLengths() throws Exception
1:     {
0:         PreparedStatement pSt = conn.prepareStatement(
1:             "insert into lobTable100M(bl) values (?)");
1: 
1:         // The error we're testing occurs when the server
1:         // is shifting bits 24 and higher of the lob's
1:         // length (in bytes).  This means that, in order
1:         // to check for the error, we have to specify a
1:         // lob length (in bytes) that requires at least
1:         // 24 bits to represent.  Thus for a blob the
1:         // length of the test data must be specified as
1:         // at least 2^24 bytes (hence the '16800000' in
1:         // the next line).
0:         byte [] bA = new byte[16800000];
1:         pSt.setBinaryStream(1,
0:             new java.io.ByteArrayInputStream(bA), bA.length);
1: 
1:         // Now try the insert; this is where the server processes
1:         // the lob length.
1:         pSt.execute();
1:         pSt.close();
1:     }
1: }
============================================================================