1:5d12015: /*
1:5d12015: 
1:5d12015:   Derby - Class org.apache.derbyTesting.functionTests.tests.store.col_rec2
1:5d12015: 
1:5d12015:    Licensed to the Apache Software Foundation (ASF) under one or more
1:5d12015:    contributor license agreements.  See the NOTICE file distributed with
1:5d12015:    this work for additional information regarding copyright ownership.
1:5d12015:    The ASF licenses this file to You under the Apache License, Version 2.0
1:5d12015:    (the "License"); you may not use this file except in compliance with
1:5d12015:    the License.  You may obtain a copy of the License at
1:5d12015: 
1:5d12015:       http://www.apache.org/licenses/LICENSE-2.0
1:5d12015: 
1:5d12015:    Unless required by applicable law or agreed to in writing, software
1:5d12015:    distributed under the License is distributed on an "AS IS" BASIS,
1:5d12015:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5d12015:    See the License for the specific language governing permissions and
1:5d12015:    limitations under the License.
1:5d12015: 
1:5d12015:  */
1:5d12015: 
1:5d12015: package org.apache.derbyTesting.functionTests.tests.store;
1:5d12015: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:5d12015: 
1:5d12015: import java.sql.CallableStatement;
1:5d12015: import java.sql.Connection;
1:5d12015: import java.sql.PreparedStatement;
1:5d12015: import java.sql.ResultSet;
1:5d12015: import java.sql.SQLException;
1:5d12015: import java.sql.Statement;
1:5d12015: 
1:5d12015: import org.apache.derby.tools.ij;
1:5d12015: 
1:5d12015: /**
1:5d12015:  * The purpose of this test and col_rec1 test is to create a territory based 
1:5d12015:  * database and create some objects with collation sensitive character types. 
1:5d12015:  * Then, make the database crash so that during the recovery, store engine has 
1:5d12015:  * to do collation related operations. Those collation related operations are 
1:5d12015:  * going to require that we use correct Collator object. DERBY-3302 
1:5d12015:  * demonstrated a npe during this operation because Derby was relying on
1:5d12015:  * database context to get the correct Collator object. But database context
1:5d12015:  * is not available at this point in the recovery. With the fix for DERBY-3302, 
1:5d12015:  * the Collator object will now be obtained from collation sensitive datatypes 
1:5d12015:  * itself rather than looking at database context which is not available at 
1:5d12015:  * this point in recovery. 
1:5d12015:  * 
1:5d12015:  * col_rec1 class will do the steps of create a territory based database
1:5d12015:  * and create some objects with collation sensitive character types. Then, make 
1:5d12015:  * the database crash. This test will do the part of rebooting the crashed
1:5d12015:  * db which will require store to go through recovery.
1:5d12015:  */
1:5d12015: 
1:5d12015: public class col_rec2 extends BaseTest
1:5d12015: {
1:5d12015: 
1:5d12015:     public col_rec2()
1:5d12015:     {
1:5d12015:     }
1:5d12015: 
1:5d12015:     /**
1:5d12015:      * setup for restart recovery test which will require the use of correct
1:5d12015:      * Collator object during recovery of territory based database that was 
1:5d12015:      * created and crashed in this col_rec1
1:5d12015:      **/
1:5d12015:     private void test1(
1:5d12015:     Connection  conn,
1:5d12015:     String      test_name,
1:5d12015:     String      table_name)
1:5d12015:         throws SQLException
1:5d12015:     {
1:5d12015:         beginTest(conn, test_name);
1:5d12015:         Statement s = conn.createStatement();
1:5d12015:         ResultSet rs = s.executeQuery("VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY" + 
1:5d12015:                     "('derby.database.collation')");
1:5d12015:         rs.next();
1:5d12015:         String collation = rs.getString(1);
1:5d12015:         if (!collation.equals("TERRITORY_BASED"))
1:5d12015:             logError("Collation should have been territory based but it is "
1:5d12015:             		+ collation);
1:5d12015: 
1:5d12015:         rs = s.executeQuery("select count(*) from t");
1:5d12015:         rs.next();
1:5d12015:         int numberOfRows = rs.getInt(1);
1:5d12015:         if (numberOfRows > 1)
1:5d12015:         	 logError("Expected 1 row in T but found " + numberOfRows +
1:5d12015:         			 " rows");
1:5d12015:         rs.close();
1:5d12015:         s.close();
1:5d12015:         endTest(conn, test_name);
1:5d12015:     }
1:5d12015: 
1:5d12015:     public void testList(Connection conn)
1:5d12015:         throws SQLException
1:5d12015:     {
1:5d12015:         test1(conn, "test1", "T");
1:5d12015:     }
1:5d12015: 
1:5d12015:     public static void main(String[] argv) 
1:5d12015:         throws Throwable
1:5d12015:     {
1:5d12015:     	col_rec2 test = new col_rec2();
1:5d12015: 
1:5d12015:    		ij.getPropertyArg(argv); 
1:5d12015:         Connection conn = ij.startJBMS();
1:5d12015:         conn.setAutoCommit(false);
1:5d12015: 
1:5d12015:         try
1:5d12015:         {
1:5d12015:             test.testList(conn);
1:5d12015:         }
1:5d12015:         catch (SQLException sqle)
1:5d12015:         {
1:5d12015: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:5d12015:                 System.out, sqle);
1:5d12015: 			sqle.printStackTrace(System.out);
1:5d12015: 		}
1:5d12015:     }
1:5d12015: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5d12015
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:   Derby - Class org.apache.derbyTesting.functionTests.tests.store.col_rec2
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derby.tools.ij;
1: 
1: /**
1:  * The purpose of this test and col_rec1 test is to create a territory based 
1:  * database and create some objects with collation sensitive character types. 
1:  * Then, make the database crash so that during the recovery, store engine has 
1:  * to do collation related operations. Those collation related operations are 
1:  * going to require that we use correct Collator object. DERBY-3302 
1:  * demonstrated a npe during this operation because Derby was relying on
1:  * database context to get the correct Collator object. But database context
1:  * is not available at this point in the recovery. With the fix for DERBY-3302, 
1:  * the Collator object will now be obtained from collation sensitive datatypes 
1:  * itself rather than looking at database context which is not available at 
1:  * this point in recovery. 
1:  * 
1:  * col_rec1 class will do the steps of create a territory based database
1:  * and create some objects with collation sensitive character types. Then, make 
1:  * the database crash. This test will do the part of rebooting the crashed
1:  * db which will require store to go through recovery.
1:  */
1: 
1: public class col_rec2 extends BaseTest
1: {
1: 
1:     public col_rec2()
1:     {
1:     }
1: 
1:     /**
1:      * setup for restart recovery test which will require the use of correct
1:      * Collator object during recovery of territory based database that was 
1:      * created and crashed in this col_rec1
1:      **/
1:     private void test1(
1:     Connection  conn,
1:     String      test_name,
1:     String      table_name)
1:         throws SQLException
1:     {
1:         beginTest(conn, test_name);
1:         Statement s = conn.createStatement();
1:         ResultSet rs = s.executeQuery("VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY" + 
1:                     "('derby.database.collation')");
1:         rs.next();
1:         String collation = rs.getString(1);
1:         if (!collation.equals("TERRITORY_BASED"))
1:             logError("Collation should have been territory based but it is "
1:             		+ collation);
1: 
1:         rs = s.executeQuery("select count(*) from t");
1:         rs.next();
1:         int numberOfRows = rs.getInt(1);
1:         if (numberOfRows > 1)
1:         	 logError("Expected 1 row in T but found " + numberOfRows +
1:         			 " rows");
1:         rs.close();
1:         s.close();
1:         endTest(conn, test_name);
1:     }
1: 
1:     public void testList(Connection conn)
1:         throws SQLException
1:     {
1:         test1(conn, "test1", "T");
1:     }
1: 
1:     public static void main(String[] argv) 
1:         throws Throwable
1:     {
1:     	col_rec2 test = new col_rec2();
1: 
1:    		ij.getPropertyArg(argv); 
1:         Connection conn = ij.startJBMS();
1:         conn.setAutoCommit(false);
1: 
1:         try
1:         {
1:             test.testList(conn);
1:         }
1:         catch (SQLException sqle)
1:         {
1: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:                 System.out, sqle);
1: 			sqle.printStackTrace(System.out);
1: 		}
1:     }
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:00b43c1
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:   Derby - Class org.apache.derbyTesting.functionTests.tests.store.col_rec2
0: 
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to You under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.sql.CallableStatement;
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: 
0: import org.apache.derby.tools.ij;
0: 
0: /**
0:  * The purpose of this test and col_rec1 test is to create a territory based 
0:  * database and create some objects with collation sensitive character types. 
0:  * Then, make the database crash so that during the recovery, store engine has 
0:  * to do collation related operations. Those collation related operations are 
0:  * going to require that we use correct Collator object. DERBY-3302 
0:  * demonstrated a npe during this operation because Derby was relying on
0:  * database context to get the correct Collator object. But database context
0:  * is not available at this point in the recovery. With the fix for DERBY-3302, 
0:  * the Collator object will now be obtained from collation sensitive datatypes 
0:  * itself rather than looking at database context which is not available at 
0:  * this point in recovery. 
0:  * 
0:  * col_rec1 class will do the steps of create a territory based database
0:  * and create some objects with collation sensitive character types. Then, make 
0:  * the database crash. This test will do the part of rebooting the crashed
0:  * db which will require store to go through recovery.
0:  */
0: 
0: public class col_rec2 extends BaseTest
0: {
0: 
0:     public col_rec2()
0:     {
0:     }
0: 
0:     /**
0:      * setup for restart recovery test which will require the use of correct
0:      * Collator object during recovery of territory based database that was 
0:      * created and crashed in this col_rec1
0:      **/
0:     private void test1(
0:     Connection  conn,
0:     String      test_name,
0:     String      table_name)
0:         throws SQLException
0:     {
0:         beginTest(conn, test_name);
0:         Statement s = conn.createStatement();
0:         ResultSet rs = s.executeQuery("VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY" + 
0:                     "('derby.database.collation')");
0:         rs.next();
0:         String collation = rs.getString(1);
0:         if (!collation.equals("TERRITORY_BASED"))
0:             logError("Collation should have been territory based but it is "
0:             		+ collation);
0: 
0:         rs = s.executeQuery("select count(*) from t");
0:         rs.next();
0:         int numberOfRows = rs.getInt(1);
0:         if (numberOfRows > 1)
0:         	 logError("Expected 1 row in T but found " + numberOfRows +
0:         			 " rows");
0:         rs.close();
0:         s.close();
0:         endTest(conn, test_name);
0:     }
0: 
0:     public void testList(Connection conn)
0:         throws SQLException
0:     {
0:         test1(conn, "test1", "T");
0:     }
0: 
0:     public static void main(String[] argv) 
0:         throws Throwable
0:     {
0:     	col_rec2 test = new col_rec2();
0: 
0:    		ij.getPropertyArg(argv); 
0:         Connection conn = ij.startJBMS();
0:         conn.setAutoCommit(false);
0: 
0:         try
0:         {
0:             test.testList(conn);
0:         }
0:         catch (SQLException sqle)
0:         {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                 System.out, sqle);
0: 			sqle.printStackTrace(System.out);
0: 		}
0:     }
0: }
============================================================================