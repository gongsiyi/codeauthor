1:86ee0a0: /*
1:86ee0a0: 
1:86ee0a0:    Derby - Class org.apache.derby.impl.services.cache.ConcurrentCacheMBeanImpl
1:86ee0a0: 
1:86ee0a0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:86ee0a0:    contributor license agreements.  See the NOTICE file distributed with
1:86ee0a0:    this work for additional information regarding copyright ownership.
1:86ee0a0:    The ASF licenses this file to you under the Apache License, Version 2.0
1:86ee0a0:    (the "License"); you may not use this file except in compliance with
1:86ee0a0:    the License.  You may obtain a copy of the License at
1:86ee0a0: 
1:86ee0a0:       http://www.apache.org/licenses/LICENSE-2.0
1:86ee0a0: 
1:86ee0a0:    Unless required by applicable law or agreed to in writing, software
1:86ee0a0:    distributed under the License is distributed on an "AS IS" BASIS,
1:86ee0a0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86ee0a0:    See the License for the specific language governing permissions and
1:86ee0a0:    limitations under the License.
1:86ee0a0: 
1:86ee0a0:  */
1:86ee0a0: 
1:86ee0a0: package org.apache.derby.impl.services.cache;
1:86ee0a0: 
1:86ee0a0: import java.security.AccessControlException;
1:86ee0a0: import java.security.AccessController;
1:86ee0a0: import org.apache.derby.mbeans.CacheManagerMBean;
1:86ee0a0: import org.apache.derby.security.SystemPermission;
1:86ee0a0: 
1:86ee0a0: /**
1:86ee0a0:  * This class provides monitoring capabilities for ConcurrentCache through
1:86ee0a0:  * Java Management Extension (JMX).
1:86ee0a0:  */
1:86ee0a0: final class ConcurrentCacheMBeanImpl implements CacheManagerMBean {
1:86ee0a0: 
1:86ee0a0:     private final ConcurrentCache cache;
1:86ee0a0: 
1:86ee0a0:     ConcurrentCacheMBeanImpl(ConcurrentCache cache) {
1:86ee0a0:         this.cache = cache;
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public void setCollectAccessCounts(boolean collect) {
1:86ee0a0:         checkPermission();
1:86ee0a0:         cache.setCollectAccessCounts(collect);
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public boolean getCollectAccessCounts() {
1:86ee0a0:         checkPermission();
1:86ee0a0:         return cache.getCollectAccessCounts();
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public long getHitCount() {
1:86ee0a0:         checkPermission();
1:86ee0a0:         return cache.getHitCount();
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public long getMissCount() {
1:86ee0a0:         checkPermission();
1:86ee0a0:         return cache.getMissCount();
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public long getEvictionCount() {
1:86ee0a0:         checkPermission();
1:86ee0a0:         return cache.getEvictionCount();
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public long getMaxEntries() {
1:86ee0a0:         checkPermission();
1:86ee0a0:         return cache.getMaxEntries();
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public long getAllocatedEntries() {
1:86ee0a0:         checkPermission();
1:86ee0a0:         return cache.getAllocatedEntries();
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     @Override
1:86ee0a0:     public long getUsedEntries() {
1:86ee0a0:         checkPermission();
1:86ee0a0:         return cache.getUsedEntries();
1:86ee0a0:     }
1:86ee0a0: 
1:86ee0a0:     private static void checkPermission() {
1:86ee0a0:         if (System.getSecurityManager() != null) {
1:86ee0a0:             try {
1:86ee0a0:                 AccessController.checkPermission(
1:86ee0a0:                         SystemPermission.ENGINE_MONITOR);
1:86ee0a0:             } catch (AccessControlException ace) {
1:86ee0a0:                 // Need to throw a simplified version as AccessControlException
1:86ee0a0:                 // will have a reference to Derby's SystemPermission class,
1:86ee0a0:                 // which most likely will not be available on the client.
1:86ee0a0:                 throw new SecurityException(ace.getMessage());
1:86ee0a0:             }
1:86ee0a0:         }
1:86ee0a0:     }
1:86ee0a0: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86ee0a0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.services.cache.ConcurrentCacheMBeanImpl
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.cache;
1: 
1: import java.security.AccessControlException;
1: import java.security.AccessController;
1: import org.apache.derby.mbeans.CacheManagerMBean;
1: import org.apache.derby.security.SystemPermission;
1: 
1: /**
1:  * This class provides monitoring capabilities for ConcurrentCache through
1:  * Java Management Extension (JMX).
1:  */
1: final class ConcurrentCacheMBeanImpl implements CacheManagerMBean {
1: 
1:     private final ConcurrentCache cache;
1: 
1:     ConcurrentCacheMBeanImpl(ConcurrentCache cache) {
1:         this.cache = cache;
1:     }
1: 
1:     @Override
1:     public void setCollectAccessCounts(boolean collect) {
1:         checkPermission();
1:         cache.setCollectAccessCounts(collect);
1:     }
1: 
1:     @Override
1:     public boolean getCollectAccessCounts() {
1:         checkPermission();
1:         return cache.getCollectAccessCounts();
1:     }
1: 
1:     @Override
1:     public long getHitCount() {
1:         checkPermission();
1:         return cache.getHitCount();
1:     }
1: 
1:     @Override
1:     public long getMissCount() {
1:         checkPermission();
1:         return cache.getMissCount();
1:     }
1: 
1:     @Override
1:     public long getEvictionCount() {
1:         checkPermission();
1:         return cache.getEvictionCount();
1:     }
1: 
1:     @Override
1:     public long getMaxEntries() {
1:         checkPermission();
1:         return cache.getMaxEntries();
1:     }
1: 
1:     @Override
1:     public long getAllocatedEntries() {
1:         checkPermission();
1:         return cache.getAllocatedEntries();
1:     }
1: 
1:     @Override
1:     public long getUsedEntries() {
1:         checkPermission();
1:         return cache.getUsedEntries();
1:     }
1: 
1:     private static void checkPermission() {
1:         if (System.getSecurityManager() != null) {
1:             try {
1:                 AccessController.checkPermission(
1:                         SystemPermission.ENGINE_MONITOR);
1:             } catch (AccessControlException ace) {
1:                 // Need to throw a simplified version as AccessControlException
1:                 // will have a reference to Derby's SystemPermission class,
1:                 // which most likely will not be available on the client.
1:                 throw new SecurityException(ace.getMessage());
1:             }
1:         }
1:     }
1: }
============================================================================