1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.JSQLType
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:2a5922a: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: 
2:eac0369: /**
1:3fd26f3:  *	Type descriptor which wraps all 3 kinds of types supported in Derby's
1:eac0369:  *	JSQL language: SQL types, Java primitives, Java classes.
1:eac0369:  *
1:eac0369:  *	This interface was originally added to support the serializing of WorkUnit
1:eac0369:  *	signatures.
1:eac0369:  *
1:eac0369:  *
1:eac0369:  */
1:eac0369: public final class JSQLType implements Formatable
1:eac0369: {
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTANTS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	public	static	final	byte	SQLTYPE			=	0;
1:eac0369: 	public	static	final	byte	JAVA_CLASS		=	1;
1:eac0369: 	public	static	final	byte	JAVA_PRIMITIVE	=	2;
1:eac0369: 
1:eac0369: 	public	static	final	byte	NOT_PRIMITIVE	=	-1;
1:eac0369: 	public	static	final	byte	BOOLEAN			=	0;
1:eac0369: 	public	static	final	byte	CHAR			=	1;
1:eac0369: 	public	static	final	byte	BYTE			=	2;
1:eac0369: 	public	static	final	byte	SHORT			=	3;
1:eac0369: 	public	static	final	byte	INT				=	4;
1:eac0369: 	public	static	final	byte	LONG			=	5;
1:eac0369: 	public	static	final	byte	FLOAT			=	6;
1:eac0369: 	public	static	final	byte	DOUBLE			=	7;
1:eac0369: 
1:eac0369: 	// these two arrays are in the order of the primitive constants
1:eac0369: 	static	private	final	String[]	wrapperClassNames =
1:eac0369: 	{
1:eac0369: 		"java.lang.Boolean",
1:eac0369: 		"java.lang.Integer",	// we can't serialize char, so we convert it to int
1:eac0369: 		"java.lang.Integer",
1:eac0369: 		"java.lang.Integer",
1:eac0369: 		"java.lang.Integer",
1:eac0369: 		"java.lang.Long",
1:eac0369: 		"java.lang.Float",
1:eac0369: 		"java.lang.Double"
1:eac0369: 	};
1:eac0369: 
1:23ecfcf: 	static	private	final	String[]	primitiveNames =
1:eac0369: 	{
1:eac0369: 		"boolean",
1:eac0369: 		"char",
1:eac0369: 		"byte",
1:eac0369: 		"short",
1:eac0369: 		"int",
1:eac0369: 		"long",
1:eac0369: 		"float",
1:eac0369: 		"double"
1:eac0369: 	};
1:eac0369: 
1:eac0369: 
1:eac0369: 	// here are the fields we serialize
1:eac0369: 
1:eac0369: 	private	byte				category = JAVA_PRIMITIVE;
1:eac0369: 	private	DataTypeDescriptor	sqlType;
1:eac0369: 	private	String				javaClassName;
1:eac0369: 	private	byte				primitiveKind;
1:eac0369: 
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Public 0-arg constructor for Formatable machinery.
1:eac0369: 	  */
1:eac0369:     public	JSQLType() { initialize( INT ); }
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Create a JSQLType from a SQL type.
1:eac0369: 	  *
1:eac0369: 	  *	@param	sqlType	the SQL type to wrap
1:eac0369: 	  */
1:eac0369: 	public	JSQLType
1:eac0369: 	(
1:eac0369: 		DataTypeDescriptor	sqlType
1:eac0369:     )
1:eac0369: 	{ initialize( sqlType ); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Create a JSQLType given the name of a Java primitive or java class.
1:eac0369: 	  *
1:eac0369: 	  *	@param	javaName	name of java primitive or class to wrap
1:eac0369: 	  */
1:eac0369: 	public	JSQLType
1:eac0369: 	(
1:eac0369: 		String	javaName
1:eac0369:     )
1:eac0369: 	{
1:eac0369: 		byte	primitiveID = getPrimitiveID( javaName );
1:eac0369: 
1:eac0369: 		if ( primitiveID != NOT_PRIMITIVE ) { initialize( primitiveID ); }
1:eac0369: 		else { initialize( javaName ); }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Create a JSQLType for a Java primitive.
1:eac0369: 	  *
1:eac0369: 	  *	@param	primitiveKind	primitive to wrap
1:eac0369: 	  */
1:eac0369: 	public	JSQLType
1:eac0369: 	(
1:eac0369: 		byte	primitiveKind
1:eac0369:     )
1:eac0369: 	{ initialize( primitiveKind ); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	What kind of type is this:
1:eac0369: 	  *
1:eac0369: 	  *	@return	one of the following: SQLTYPE, JAVA_PRIMITIVE, JAVA_CLASS
1:eac0369: 	  */
1:eac0369:     public	byte	getCategory() { return category; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	If this is a JAVA_PRIMITIVE, what is its name?
1:eac0369: 	  *
1:eac0369: 	  *	@return	BOOLEAN, INT, ... if this is a JAVA_PRIMITIVE.
1:eac0369: 	  *				NOT_PRIMITIVE if this is SQLTYPE or JAVA_CLASS.
1:eac0369: 	  */
1:eac0369:     public	byte	getPrimitiveKind() { return primitiveKind; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	If this is a JAVA_CLASS, what is it's name?
1:eac0369: 	  *
1:eac0369: 	  *	@return	java class name if this is a JAVA_CLASS
1:eac0369: 	  *				null if this is SQLTYPE or JAVA_PRIMITIVE
1:eac0369: 	  */
1:eac0369:     public	String	getJavaClassName() { return javaClassName; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	What's our SQLTYPE?
1:eac0369: 	  *
1:eac0369: 	  *	@return	the DataTypeDescriptor corresponding to this type
1:eac0369: 	  *
1:eac0369: 	  */
1:eac0369: 	public	DataTypeDescriptor	getSQLType
1:eac0369: 	(
1:eac0369:     )
1:2a5922a:         throws StandardException
1:eac0369: 	{
1:eac0369: 		// might not be filled in if this is a JAVA_CLASS or JAVA_PRIMITIVE
1:eac0369: 		if ( sqlType == null )
1:eac0369: 		{
1:eac0369: 			String	className;
1:eac0369: 
1:eac0369: 			if ( category == JAVA_CLASS )
1:eac0369: 			{
1:eac0369: 				className = javaClassName;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				className = getWrapperClassName( primitiveKind );
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			sqlType = DataTypeDescriptor.getSQLDataTypeDescriptor( className );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return sqlType;
1:eac0369: 	}
1:eac0369: 
1:23ecfcf:     // Give read-only access to array of strings
1:23ecfcf: 	public static String getPrimitiveName(byte index){
1:23ecfcf: 	    return primitiveNames[index];
1:23ecfcf: 	}
1:23ecfcf: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	Formatable BEHAVIOR
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.JSQLTYPEIMPL_ID; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  @see java.io.Externalizable#readExternal
1:eac0369: 	  @exception IOException thrown on error
1:eac0369: 	  @exception ClassNotFoundException	thrown on error
1:eac0369: 	  */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		byte	frozenCategory = in.readByte();
1:eac0369: 
1:eac0369: 		switch ( frozenCategory )
1:eac0369: 		{
1:eac0369: 		    case SQLTYPE:
1:eac0369: 
1:eac0369: 				initialize( (DataTypeDescriptor) in.readObject() );
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 		    case JAVA_CLASS:
1:eac0369: 
1:eac0369: 				initialize( (String) in.readObject() );
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 		    case JAVA_PRIMITIVE:
1:eac0369: 
1:eac0369: 				initialize( in.readByte() );
1:eac0369: 				break;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 
1:eac0369: 	  @exception IOException thrown on error
1:eac0369: 	  */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeByte( category );
1:eac0369: 
1:eac0369: 		switch ( category )
1:eac0369: 		{
1:eac0369: 		    case SQLTYPE:
1:eac0369: 
1:eac0369: 				out.writeObject( sqlType );
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 		    case JAVA_CLASS:
1:eac0369: 
1:eac0369: 				out.writeObject( javaClassName );
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 		    case JAVA_PRIMITIVE:
1:eac0369: 
1:eac0369: 				out.writeByte( primitiveKind );
1:eac0369: 				break;
1:eac0369: 
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	INITIALIZATION MINIONS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	private	void	initialize( byte primitiveKind )
1:eac0369: 	{ initialize( JAVA_PRIMITIVE, null, null, primitiveKind ); }
1:eac0369: 
1:eac0369: 	private	void	initialize( DataTypeDescriptor sqlType )
1:eac0369: 	{ initialize( SQLTYPE, sqlType, null, NOT_PRIMITIVE ); }
1:eac0369: 
1:eac0369: 	private	void	initialize( String javaClassName )
1:eac0369: 	{ initialize( JAVA_CLASS, null, javaClassName, NOT_PRIMITIVE ); }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Initialize this JSQL type. Minion of all constructors.
1:eac0369: 	  *
1:eac0369: 	  *	@param	category		SQLTYPE, JAVA_CLASS, JAVA_PRIMITIVE
1:eac0369: 	  *	@param	sqlType			corresponding SQL type if category=SQLTYPE
1:eac0369: 	  *	@param	javaClassName	corresponding java class if category=JAVA_CLASS
1:eac0369: 	  *	@param	primitiveKind	kind of primitive if category=JAVA_PRIMITIVE
1:eac0369: 	  */
1:eac0369: 	private	void	initialize
1:eac0369: 	(
1:eac0369: 		byte				category,
1:eac0369: 		DataTypeDescriptor	sqlType,
1:eac0369: 		String				javaClassName,
1:eac0369: 		byte				primitiveKind
1:eac0369:     )
1:eac0369: 	{
1:eac0369: 		this.category = category;
1:eac0369: 		this.sqlType = sqlType;
1:eac0369: 		this.javaClassName = javaClassName;
1:eac0369: 		this.primitiveKind = primitiveKind;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 	 
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	GENERAL MINIONS
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Gets the name of the java wrapper class corresponding to a primitive.
1:eac0369: 	  *
1:6b50965: 	  *	@param	primitive	BOOLEAN, INT, ... etc.
1:eac0369: 	  *
1:eac0369: 	  *	@return	name of the java wrapper class corresponding to the primitive
1:eac0369: 	  */
1:8c39c1c: 	public	static String	getWrapperClassName
1:eac0369: 	(
1:eac0369: 		byte	primitive
1:eac0369:     )
1:eac0369: 	{
1:eac0369: 		if ( primitive == NOT_PRIMITIVE ) { return ""; }
1:eac0369: 		return wrapperClassNames[ primitive ];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Translate the name of a java primitive to an id
1:eac0369: 	  *
1:eac0369: 	  *	@param	name	name of primitive
1:eac0369: 	  *
1:eac0369: 	  *	@return	BOOLEAN, INT, ... etc if the name is that of a primitive.
1:eac0369: 	  *			NOT_PRIMITIVE otherwise
1:eac0369: 	  */
1:8c39c1c: 	public	static byte	getPrimitiveID
1:eac0369: 	(
1:eac0369: 		String	name
1:eac0369:     )
1:eac0369: 	{
1:eac0369: 		for ( byte ictr = BOOLEAN; ictr <= DOUBLE; ictr++ )
1:eac0369: 		{
1:eac0369: 			if ( primitiveNames[ ictr ].equals( name ) ) { return ictr; }
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return	NOT_PRIMITIVE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:8c39c1c
/////////////////////////////////////////////////////////////////////////
1: 	public	static String	getWrapperClassName
/////////////////////////////////////////////////////////////////////////
1: 	public	static byte	getPrimitiveID
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:23ecfcf
/////////////////////////////////////////////////////////////////////////
1: 	static	private	final	String[]	primitiveNames =
/////////////////////////////////////////////////////////////////////////
1:     // Give read-only access to array of strings
1: 	public static String getPrimitiveName(byte index){
1: 	    return primitiveNames[index];
1: 	}
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1:  *	Type descriptor which wraps all 3 kinds of types supported in Derby's
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	  *	@param	primitive	BOOLEAN, INT, ... etc.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.JSQLType
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: 
1: /**
0:  *	Type descriptor which wraps all 3 kinds of types supported in Cloudscape's
1:  *	JSQL language: SQL types, Java primitives, Java classes.
1:  *
1:  *	This interface was originally added to support the serializing of WorkUnit
1:  *	signatures.
1:  *
1:  *
0:  * @author Rick
1:  */
1: public final class JSQLType implements Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTANTS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	public	static	final	byte	SQLTYPE			=	0;
1: 	public	static	final	byte	JAVA_CLASS		=	1;
1: 	public	static	final	byte	JAVA_PRIMITIVE	=	2;
1: 
1: 	public	static	final	byte	NOT_PRIMITIVE	=	-1;
1: 	public	static	final	byte	BOOLEAN			=	0;
1: 	public	static	final	byte	CHAR			=	1;
1: 	public	static	final	byte	BYTE			=	2;
1: 	public	static	final	byte	SHORT			=	3;
1: 	public	static	final	byte	INT				=	4;
1: 	public	static	final	byte	LONG			=	5;
1: 	public	static	final	byte	FLOAT			=	6;
1: 	public	static	final	byte	DOUBLE			=	7;
1: 
1: 	// these two arrays are in the order of the primitive constants
1: 	static	private	final	String[]	wrapperClassNames =
1: 	{
1: 		"java.lang.Boolean",
1: 		"java.lang.Integer",	// we can't serialize char, so we convert it to int
1: 		"java.lang.Integer",
1: 		"java.lang.Integer",
1: 		"java.lang.Integer",
1: 		"java.lang.Long",
1: 		"java.lang.Float",
1: 		"java.lang.Double"
1: 	};
1: 
0: 	static	public	final	String[]	primitiveNames =
1: 	{
1: 		"boolean",
1: 		"char",
1: 		"byte",
1: 		"short",
1: 		"int",
1: 		"long",
1: 		"float",
1: 		"double"
1: 	};
1: 
1: 
1: 	// here are the fields we serialize
1: 
1: 	private	byte				category = JAVA_PRIMITIVE;
1: 	private	DataTypeDescriptor	sqlType;
1: 	private	String				javaClassName;
1: 	private	byte				primitiveKind;
1: 
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Public 0-arg constructor for Formatable machinery.
1: 	  */
1:     public	JSQLType() { initialize( INT ); }
1: 
1: 
1: 	/**
1: 	  *	Create a JSQLType from a SQL type.
1: 	  *
1: 	  *	@param	sqlType	the SQL type to wrap
1: 	  */
1: 	public	JSQLType
1: 	(
1: 		DataTypeDescriptor	sqlType
1:     )
1: 	{ initialize( sqlType ); }
1: 
1: 	/**
1: 	  *	Create a JSQLType given the name of a Java primitive or java class.
1: 	  *
1: 	  *	@param	javaName	name of java primitive or class to wrap
1: 	  */
1: 	public	JSQLType
1: 	(
1: 		String	javaName
1:     )
1: 	{
1: 		byte	primitiveID = getPrimitiveID( javaName );
1: 
1: 		if ( primitiveID != NOT_PRIMITIVE ) { initialize( primitiveID ); }
1: 		else { initialize( javaName ); }
1: 	}
1: 
1: 	/**
1: 	  *	Create a JSQLType for a Java primitive.
1: 	  *
1: 	  *	@param	primitiveKind	primitive to wrap
1: 	  */
1: 	public	JSQLType
1: 	(
1: 		byte	primitiveKind
1:     )
1: 	{ initialize( primitiveKind ); }
1: 
1: 	/**
1: 	  *	What kind of type is this:
1: 	  *
1: 	  *	@return	one of the following: SQLTYPE, JAVA_PRIMITIVE, JAVA_CLASS
1: 	  */
1:     public	byte	getCategory() { return category; }
1: 
1: 	/**
1: 	  *	If this is a JAVA_PRIMITIVE, what is its name?
1: 	  *
1: 	  *	@return	BOOLEAN, INT, ... if this is a JAVA_PRIMITIVE.
1: 	  *				NOT_PRIMITIVE if this is SQLTYPE or JAVA_CLASS.
1: 	  */
1:     public	byte	getPrimitiveKind() { return primitiveKind; }
1: 
1: 	/**
1: 	  *	If this is a JAVA_CLASS, what is it's name?
1: 	  *
1: 	  *	@return	java class name if this is a JAVA_CLASS
1: 	  *				null if this is SQLTYPE or JAVA_PRIMITIVE
1: 	  */
1:     public	String	getJavaClassName() { return javaClassName; }
1: 
1: 	/**
1: 	  *	What's our SQLTYPE?
1: 	  *
1: 	  *	@return	the DataTypeDescriptor corresponding to this type
1: 	  *
1: 	  */
1: 	public	DataTypeDescriptor	getSQLType
1: 	(
1:     )
1: 	{
1: 		// might not be filled in if this is a JAVA_CLASS or JAVA_PRIMITIVE
1: 		if ( sqlType == null )
1: 		{
1: 			String	className;
1: 
1: 			if ( category == JAVA_CLASS )
1: 			{
1: 				className = javaClassName;
1: 			}
1: 			else
1: 			{
1: 				className = getWrapperClassName( primitiveKind );
1: 			}
1: 
1: 			sqlType = DataTypeDescriptor.getSQLDataTypeDescriptor( className );
1: 		}
1: 
1: 		return sqlType;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	Formatable BEHAVIOR
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.JSQLTYPEIMPL_ID; }
1: 
1: 	/**
1: 	  @see java.io.Externalizable#readExternal
1: 	  @exception IOException thrown on error
1: 	  @exception ClassNotFoundException	thrown on error
1: 	  */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		byte	frozenCategory = in.readByte();
1: 
1: 		switch ( frozenCategory )
1: 		{
1: 		    case SQLTYPE:
1: 
1: 				initialize( (DataTypeDescriptor) in.readObject() );
1: 				break;
1: 
1: 		    case JAVA_CLASS:
1: 
1: 				initialize( (String) in.readObject() );
1: 				break;
1: 
1: 		    case JAVA_PRIMITIVE:
1: 
1: 				initialize( in.readByte() );
1: 				break;
1: 		}
1: 	}
1: 
1: 	/**
1: 
1: 	  @exception IOException thrown on error
1: 	  */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeByte( category );
1: 
1: 		switch ( category )
1: 		{
1: 		    case SQLTYPE:
1: 
1: 				out.writeObject( sqlType );
1: 				break;
1: 
1: 		    case JAVA_CLASS:
1: 
1: 				out.writeObject( javaClassName );
1: 				break;
1: 
1: 		    case JAVA_PRIMITIVE:
1: 
1: 				out.writeByte( primitiveKind );
1: 				break;
1: 
1: 		}
1: 	}
1: 
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	INITIALIZATION MINIONS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	private	void	initialize( byte primitiveKind )
1: 	{ initialize( JAVA_PRIMITIVE, null, null, primitiveKind ); }
1: 
1: 	private	void	initialize( DataTypeDescriptor sqlType )
1: 	{ initialize( SQLTYPE, sqlType, null, NOT_PRIMITIVE ); }
1: 
1: 	private	void	initialize( String javaClassName )
1: 	{ initialize( JAVA_CLASS, null, javaClassName, NOT_PRIMITIVE ); }
1: 
1: 	/**
1: 	  *	Initialize this JSQL type. Minion of all constructors.
1: 	  *
1: 	  *	@param	category		SQLTYPE, JAVA_CLASS, JAVA_PRIMITIVE
1: 	  *	@param	sqlType			corresponding SQL type if category=SQLTYPE
1: 	  *	@param	javaClassName	corresponding java class if category=JAVA_CLASS
1: 	  *	@param	primitiveKind	kind of primitive if category=JAVA_PRIMITIVE
1: 	  */
1: 	private	void	initialize
1: 	(
1: 		byte				category,
1: 		DataTypeDescriptor	sqlType,
1: 		String				javaClassName,
1: 		byte				primitiveKind
1:     )
1: 	{
1: 		this.category = category;
1: 		this.sqlType = sqlType;
1: 		this.javaClassName = javaClassName;
1: 		this.primitiveKind = primitiveKind;
1: 
1: 	}
1: 	 
1: 
1: 	///////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	GENERAL MINIONS
1: 	//
1: 	///////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	  *	Gets the name of the java wrapper class corresponding to a primitive.
1: 	  *
0: 	  *	@param	BOOLEAN, INT, ... etc.
1: 	  *
1: 	  *	@return	name of the java wrapper class corresponding to the primitive
1: 	  */
0: 	private	static String	getWrapperClassName
1: 	(
1: 		byte	primitive
1:     )
1: 	{
1: 		if ( primitive == NOT_PRIMITIVE ) { return ""; }
1: 		return wrapperClassNames[ primitive ];
1: 	}
1: 
1: 
1: 	/**
1: 	  *	Translate the name of a java primitive to an id
1: 	  *
1: 	  *	@param	name	name of primitive
1: 	  *
1: 	  *	@return	BOOLEAN, INT, ... etc if the name is that of a primitive.
1: 	  *			NOT_PRIMITIVE otherwise
1: 	  */
0: 	private	static byte	getPrimitiveID
1: 	(
1: 		String	name
1:     )
1: 	{
1: 		for ( byte ictr = BOOLEAN; ictr <= DOUBLE; ictr++ )
1: 		{
1: 			if ( primitiveNames[ ictr ].equals( name ) ) { return ictr; }
1: 		}
1: 
1: 		return	NOT_PRIMITIVE;
1: 	}
1: 
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import java.io.IOException;
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: 
0: /**
0:  *	Type descriptor which wraps all 3 kinds of types supported in Cloudscape's
0:  *	JSQL language: SQL types, Java primitives, Java classes.
0:  *
0:  *	This interface was originally added to support the serializing of WorkUnit
0:  *	signatures.
0:  *
0:  *
0:  * @author Rick
0:  */
0: public final class JSQLType implements Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTANTS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	public	static	final	byte	SQLTYPE			=	0;
0: 	public	static	final	byte	JAVA_CLASS		=	1;
0: 	public	static	final	byte	JAVA_PRIMITIVE	=	2;
0: 
0: 	public	static	final	byte	NOT_PRIMITIVE	=	-1;
0: 	public	static	final	byte	BOOLEAN			=	0;
0: 	public	static	final	byte	CHAR			=	1;
0: 	public	static	final	byte	BYTE			=	2;
0: 	public	static	final	byte	SHORT			=	3;
0: 	public	static	final	byte	INT				=	4;
0: 	public	static	final	byte	LONG			=	5;
0: 	public	static	final	byte	FLOAT			=	6;
0: 	public	static	final	byte	DOUBLE			=	7;
0: 
0: 	// these two arrays are in the order of the primitive constants
0: 	static	private	final	String[]	wrapperClassNames =
0: 	{
0: 		"java.lang.Boolean",
0: 		"java.lang.Integer",	// we can't serialize char, so we convert it to int
0: 		"java.lang.Integer",
0: 		"java.lang.Integer",
0: 		"java.lang.Integer",
0: 		"java.lang.Long",
0: 		"java.lang.Float",
0: 		"java.lang.Double"
0: 	};
0: 
0: 	static	public	final	String[]	primitiveNames =
0: 	{
0: 		"boolean",
0: 		"char",
0: 		"byte",
0: 		"short",
0: 		"int",
0: 		"long",
0: 		"float",
0: 		"double"
0: 	};
0: 
0: 
0: 	// here are the fields we serialize
0: 
0: 	private	byte				category = JAVA_PRIMITIVE;
0: 	private	DataTypeDescriptor	sqlType;
0: 	private	String				javaClassName;
0: 	private	byte				primitiveKind;
0: 
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Public 0-arg constructor for Formatable machinery.
0: 	  */
0:     public	JSQLType() { initialize( INT ); }
0: 
0: 
0: 	/**
0: 	  *	Create a JSQLType from a SQL type.
0: 	  *
0: 	  *	@param	sqlType	the SQL type to wrap
0: 	  */
0: 	public	JSQLType
0: 	(
0: 		DataTypeDescriptor	sqlType
0:     )
0: 	{ initialize( sqlType ); }
0: 
0: 	/**
0: 	  *	Create a JSQLType given the name of a Java primitive or java class.
0: 	  *
0: 	  *	@param	javaName	name of java primitive or class to wrap
0: 	  */
0: 	public	JSQLType
0: 	(
0: 		String	javaName
0:     )
0: 	{
0: 		byte	primitiveID = getPrimitiveID( javaName );
0: 
0: 		if ( primitiveID != NOT_PRIMITIVE ) { initialize( primitiveID ); }
0: 		else { initialize( javaName ); }
0: 	}
0: 
0: 	/**
0: 	  *	Create a JSQLType for a Java primitive.
0: 	  *
0: 	  *	@param	primitiveKind	primitive to wrap
0: 	  */
0: 	public	JSQLType
0: 	(
0: 		byte	primitiveKind
0:     )
0: 	{ initialize( primitiveKind ); }
0: 
0: 	/**
0: 	  *	What kind of type is this:
0: 	  *
0: 	  *	@return	one of the following: SQLTYPE, JAVA_PRIMITIVE, JAVA_CLASS
0: 	  */
0:     public	byte	getCategory() { return category; }
0: 
0: 	/**
0: 	  *	If this is a JAVA_PRIMITIVE, what is its name?
0: 	  *
0: 	  *	@return	BOOLEAN, INT, ... if this is a JAVA_PRIMITIVE.
0: 	  *				NOT_PRIMITIVE if this is SQLTYPE or JAVA_CLASS.
0: 	  */
0:     public	byte	getPrimitiveKind() { return primitiveKind; }
0: 
0: 	/**
0: 	  *	If this is a JAVA_CLASS, what is it's name?
0: 	  *
0: 	  *	@return	java class name if this is a JAVA_CLASS
0: 	  *				null if this is SQLTYPE or JAVA_PRIMITIVE
0: 	  */
0:     public	String	getJavaClassName() { return javaClassName; }
0: 
0: 	/**
0: 	  *	What's our SQLTYPE?
0: 	  *
0: 	  *	@return	the DataTypeDescriptor corresponding to this type
0: 	  *
0: 	  */
0: 	public	DataTypeDescriptor	getSQLType
0: 	(
0:     )
0: 	{
0: 		// might not be filled in if this is a JAVA_CLASS or JAVA_PRIMITIVE
0: 		if ( sqlType == null )
0: 		{
0: 			String	className;
0: 
0: 			if ( category == JAVA_CLASS )
0: 			{
0: 				className = javaClassName;
0: 			}
0: 			else
0: 			{
0: 				className = getWrapperClassName( primitiveKind );
0: 			}
0: 
0: 			sqlType = DataTypeDescriptor.getSQLDataTypeDescriptor( className );
0: 		}
0: 
0: 		return sqlType;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	Formatable BEHAVIOR
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.JSQLTYPEIMPL_ID; }
0: 
0: 	/**
0: 	  @see java.io.Externalizable#readExternal
0: 	  @exception IOException thrown on error
0: 	  @exception ClassNotFoundException	thrown on error
0: 	  */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		byte	frozenCategory = in.readByte();
0: 
0: 		switch ( frozenCategory )
0: 		{
0: 		    case SQLTYPE:
0: 
0: 				initialize( (DataTypeDescriptor) in.readObject() );
0: 				break;
0: 
0: 		    case JAVA_CLASS:
0: 
0: 				initialize( (String) in.readObject() );
0: 				break;
0: 
0: 		    case JAVA_PRIMITIVE:
0: 
0: 				initialize( in.readByte() );
0: 				break;
0: 		}
0: 	}
0: 
0: 	/**
0: 
0: 	  @exception IOException thrown on error
0: 	  */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		out.writeByte( category );
0: 
0: 		switch ( category )
0: 		{
0: 		    case SQLTYPE:
0: 
0: 				out.writeObject( sqlType );
0: 				break;
0: 
0: 		    case JAVA_CLASS:
0: 
0: 				out.writeObject( javaClassName );
0: 				break;
0: 
0: 		    case JAVA_PRIMITIVE:
0: 
0: 				out.writeByte( primitiveKind );
0: 				break;
0: 
0: 		}
0: 	}
0: 
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	INITIALIZATION MINIONS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	private	void	initialize( byte primitiveKind )
0: 	{ initialize( JAVA_PRIMITIVE, null, null, primitiveKind ); }
0: 
0: 	private	void	initialize( DataTypeDescriptor sqlType )
0: 	{ initialize( SQLTYPE, sqlType, null, NOT_PRIMITIVE ); }
0: 
0: 	private	void	initialize( String javaClassName )
0: 	{ initialize( JAVA_CLASS, null, javaClassName, NOT_PRIMITIVE ); }
0: 
0: 	/**
0: 	  *	Initialize this JSQL type. Minion of all constructors.
0: 	  *
0: 	  *	@param	category		SQLTYPE, JAVA_CLASS, JAVA_PRIMITIVE
0: 	  *	@param	sqlType			corresponding SQL type if category=SQLTYPE
0: 	  *	@param	javaClassName	corresponding java class if category=JAVA_CLASS
0: 	  *	@param	primitiveKind	kind of primitive if category=JAVA_PRIMITIVE
0: 	  */
0: 	private	void	initialize
0: 	(
0: 		byte				category,
0: 		DataTypeDescriptor	sqlType,
0: 		String				javaClassName,
0: 		byte				primitiveKind
0:     )
0: 	{
0: 		this.category = category;
0: 		this.sqlType = sqlType;
0: 		this.javaClassName = javaClassName;
0: 		this.primitiveKind = primitiveKind;
0: 
0: 	}
0: 	 
0: 
0: 	///////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	GENERAL MINIONS
0: 	//
0: 	///////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	  *	Gets the name of the java wrapper class corresponding to a primitive.
0: 	  *
0: 	  *	@param	BOOLEAN, INT, ... etc.
0: 	  *
0: 	  *	@return	name of the java wrapper class corresponding to the primitive
0: 	  */
0: 	private	static String	getWrapperClassName
0: 	(
0: 		byte	primitive
0:     )
0: 	{
0: 		if ( primitive == NOT_PRIMITIVE ) { return ""; }
0: 		return wrapperClassNames[ primitive ];
0: 	}
0: 
0: 
0: 	/**
0: 	  *	Translate the name of a java primitive to an id
0: 	  *
0: 	  *	@param	name	name of primitive
0: 	  *
0: 	  *	@return	BOOLEAN, INT, ... etc if the name is that of a primitive.
0: 	  *			NOT_PRIMITIVE otherwise
0: 	  */
0: 	private	static byte	getPrimitiveID
0: 	(
0: 		String	name
0:     )
0: 	{
0: 		for ( byte ictr = BOOLEAN; ictr <= DOUBLE; ictr++ )
0: 		{
0: 			if ( primitiveNames[ ictr ].equals( name ) ) { return ictr; }
0: 		}
0: 
0: 		return	NOT_PRIMITIVE;
0: 	}
0: 
0: 
0: }
============================================================================