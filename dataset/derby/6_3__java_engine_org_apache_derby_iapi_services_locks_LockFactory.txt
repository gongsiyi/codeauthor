1:eac0369: /*
21:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.locks.LockFactory
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
6:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.locks;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.Matchable;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.property.PropertySetCallback;
1:eac0369: import java.util.Enumeration;
1:eac0369: 
1:eac0369: 
6:eac0369: /**
1:eac0369:     Generic locking of objects. Enables deadlock detection.
1:eac0369: 
4:eac0369:   <BR>
1:eac0369:     MT - Mutable - Container Object - Thread Safe
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:5d24b1a: public interface LockFactory extends PropertySetCallback {
1:eac0369: 
1:eac0369: 	/**
1:3c1f634: 	 * Create an object which can be used as a compatibility space. A
1:3c1f634: 	 * compatibility space object can only be used in the
1:3c1f634: 	 * <code>LockFactory</code> that created it.
1:3c1f634: 	 *
1:3c1f634: 	 * @param owner the owner of the compatibility space (typically a
1:3c1f634: 	 * transaction object). Might be <code>null</code>.
1:3c1f634: 	 * @return an object which represents a compatibility space
1:3c1f634: 	 */
1:85e3e12: 	public CompatibilitySpace createCompatibilitySpace(LockOwner owner);
1:3c1f634: 
1:3c1f634: 	/**
1:3c1f634: 		Lock an object within a compatibility space
3:eac0369: 		and associate the lock with a group object,
1:eac0369: 		waits up to timeout milli-seconds for the object to become unlocked. A 
1:eac0369:         timeout of 0 means do not wait for the lock to be unlocked.
1:eac0369: 		Note the actual time waited is approximate.
3:eac0369: 		<P>
2:eac0369: 		A compatibility space in an space where lock requests are assumed to be
1:3c1f634:         compatible and granted by the lock manager if the trio
1:3c1f634:         {compatibilitySpace, ref, qualifier} are equal (i.e. reference equality
1:3c1f634:         for qualifier and compatibilitySpace, equals() method for ref).
2:eac0369: 		Granted by the lock manager means that the Lockable object may or may 
2:eac0369:         not be queried to see if the request is compatible.
1:eac0369: 		<BR>
1:3c1f634: 		A compatibility space is not assumed to be owned by a single thread.
1:eac0369: 	
1:eac0369: 
1:eac0369: 
1:3c1f634: 		@param compatibilitySpace object defining compatibility space
2:eac0369: 		@param group handle of group, must be private to a thread.
3:eac0369: 		@param ref reference to object to be locked
3:eac0369: 		@param qualifier A qualification of the request.
1:eac0369: 		@param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
1:eac0369: 
1:eac0369: 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
1:eac0369: 		could not be granted.
1:eac0369: 
1:f668d94:         @exception StandardException if a deadlock has occurred (message id
1:f668d94:             will be LockFactory.Deadlock), or if the wait for the lock timed
1:f668d94:             out (message id will be LockFactory.TimeOut), or if another thread
1:f668d94:             interrupted this thread while it was waiting for the lock (this will
1:f668d94:             be a StandardException with a nested InterruptedException, and the
1:f668d94:             message id will be LockFactory.InterruptedExceptionId), or if
1:f668d94:             any other error occurs when locking the object
1:eac0369: 	*/
1:3c1f634: 	public boolean lockObject(CompatibilitySpace compatibilitySpace,
1:3c1f634: 							  Object group, Lockable ref, Object qualifier,
1:3c1f634: 							  int timeout)
3:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:3c1f634: 		Unlock a single lock on a single object held within this compatibility
1:3c1f634: 		space and locked with the supplied qualifier.
1:eac0369: 
1:3c1f634: 		@param compatibilitySpace object defining compatibility space
1:eac0369: 		@param group handle of group.
1:eac0369: 		@param ref Reference to object to be unlocked.
1:eac0369: 		@param qualifier qualifier of lock to be unlocked
1:eac0369: 
1:eac0369: 		@return number of locks released (one or zero).
1:eac0369: 	*/
1:3c1f634: 	public int unlock(CompatibilitySpace compatibilitySpace, Object group,
1:3c1f634: 					  Lockable ref, Object qualifier);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Unlock all locks in a group. 
1:eac0369: 
1:3c1f634: 		@param compatibilitySpace object defining compatibility space
1:eac0369: 		@param group handle of group that objects were locked with.
1:eac0369: 	*/
1:3c1f634: 	public void unlockGroup(CompatibilitySpace compatibilitySpace,
1:3c1f634: 							Object group);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Unlock all locks on a group that match the passed in value.
1:eac0369: 	*/
1:3c1f634: 	public void unlockGroup(CompatibilitySpace compatibilitySpace,
1:3c1f634: 							Object group, Matchable key);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Transfer a set of locks from one group to another.
1:eac0369: 	*/
1:3c1f634: 	public void transfer(CompatibilitySpace compatibilitySpace,
1:3c1f634: 						 Object oldGroup, Object newGroup);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Returns true if locks held by anyone are blocking anyone else
1:eac0369: 	*/
1:eac0369: 	public boolean anyoneBlocked();
1:eac0369: 
1:eac0369: 	/**
1:3c1f634: 		Return true if locks are held in this compatibility space and
1:eac0369: 		 this group.
1:eac0369: 
1:eac0369: 		@param group handle of group that objects were locked with.
1:eac0369: 
1:eac0369: 	*/
1:3c1f634: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace,
1:3c1f634: 								Object group);
1:eac0369: 
1:eac0369: 	/**
1:3c1f634: 		Return true if locks are held in this compatibility space.
1:eac0369: 	*/
1:3c1f634: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace);
1:eac0369: 
1:eac0369: 	/**
1:3c1f634: 		Lock an object with zero duration within a compatibility space,
1:eac0369: 		waits up to timeout milli-seconds for the object to become unlocked. A 
1:eac0369:         timeout of 0 means do not wait for the lock to be unlocked.
1:eac0369: 		Note the actual time waited is approximate.
1:eac0369: 		<P>
1:eac0369: 		Zero duration means the lock is released as soon as it is obtained.
1:eac0369: 		<P>
1:eac0369: 		A compatibility space in an space where lock requests are assumed to be
1:3c1f634:         compatible and granted by the lock manager if the trio
1:3c1f634:         {compatibilitySpace, ref, qualifier} are equal (i.e. reference equality
1:3c1f634:         for qualifier and compatibilitySpace, equals() method for ref).
1:eac0369: 		Granted by the lock manager means that the Lockable object may or may 
1:eac0369:         not be queried to see if the request is compatible.
1:eac0369: 		<BR>
1:3c1f634: 		A compatibility space is not assumed to be owned by a single thread.
1:eac0369: 	
1:eac0369: 
1:eac0369: 
1:3c1f634: 		@param compatibilitySpace object defining compatibility space
1:eac0369: 		@param ref reference to object to be locked
1:eac0369: 		@param qualifier A qualification of the request.
1:eac0369: 		@param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
1:eac0369: 
1:eac0369: 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
1:eac0369: 		could not be granted.
1:eac0369: 
1:f668d94:         @exception StandardException if a deadlock has occurred (message id
1:f668d94:             will be LockFactory.Deadlock), or if the wait for the lock timed
1:f668d94:             out (message id will be LockFactory.TimeOut), or if another thread
1:f668d94:             interrupted this thread while it was waiting for the lock (this will
1:f668d94:             be a StandardException with a nested InterruptedException, and the
1:f668d94:             message id will be LockFactory.InterruptedExceptionId), or if
1:f668d94:             any other error occurs when locking the object
1:eac0369: 
1:eac0369: 	*/
1:3c1f634: 	public boolean zeroDurationlockObject(CompatibilitySpace compatibilitySpace,
1:3c1f634: 										  Lockable ref, Object qualifier,
1:3c1f634: 										  int timeout)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Check to see if a specific lock is held.
1:eac0369: 	*/
1:3c1f634: 	public boolean isLockHeld(CompatibilitySpace compatibilitySpace,
1:3c1f634: 							  Object group, Lockable ref, Object qualifier);
1:eac0369: 
1:eac0369: 	/**
1:39c6ffc: 		Get the lock timeout in milliseconds. A negative number means that
1:39c6ffc:         there is no timeout.
1:39c6ffc: 	*/
1:39c6ffc: 	public int getWaitTimeout();
1:39c6ffc: 
1:39c6ffc: 	/**
1:eac0369: 		Install a limit that is called when the size of the group exceeds
1:eac0369: 		the required limit.
1:eac0369: 		<BR>
1:eac0369: 		It is not guaranteed that the callback method (Limit.reached) is
1:eac0369: 		called as soon as the group size exceeds the given limit.
1:eac0369: 		If the callback method does not result in a decrease in the
1:eac0369: 		number of locks held then the lock factory implementation
1:eac0369: 		may delay calling the method again. E.g. with a limit
1:eac0369: 		of 500 and a reached() method that does nothing, may result
1:eac0369: 		in the call back method only being called when the group size reaches
1:eac0369: 		550.
1:eac0369: 		<BR>
1:eac0369: 		Only one limit may be in place for a group at any time.
1:eac0369: 		@see Limit
1:eac0369: 	*/
1:3c1f634: 	public void setLimit(CompatibilitySpace compatibilitySpace, Object group,
1:3c1f634: 						 int limit, Limit callback);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clear a limit set by setLimit.
1:eac0369: 	*/
1:3c1f634: 	public void clearLimit(CompatibilitySpace compatibilitySpace, Object group);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Make a virtual lock table for diagnostics.
1:eac0369: 	 */
1:eac0369: 	public Enumeration makeVirtualLockTable();
1:eac0369: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:         @exception StandardException if a deadlock has occurred (message id
1:             will be LockFactory.Deadlock), or if the wait for the lock timed
1:             out (message id will be LockFactory.TimeOut), or if another thread
1:             interrupted this thread while it was waiting for the lock (this will
1:             be a StandardException with a nested InterruptedException, and the
1:             message id will be LockFactory.InterruptedExceptionId), or if
1:             any other error occurs when locking the object
/////////////////////////////////////////////////////////////////////////
1:         @exception StandardException if a deadlock has occurred (message id
1:             will be LockFactory.Deadlock), or if the wait for the lock timed
1:             out (message id will be LockFactory.TimeOut), or if another thread
1:             interrupted this thread while it was waiting for the lock (this will
1:             be a StandardException with a nested InterruptedException, and the
1:             message id will be LockFactory.InterruptedExceptionId), or if
1:             any other error occurs when locking the object
commit:85e3e12
/////////////////////////////////////////////////////////////////////////
1: 	public CompatibilitySpace createCompatibilitySpace(LockOwner owner);
commit:3c1f634
/////////////////////////////////////////////////////////////////////////
1: 	 * Create an object which can be used as a compatibility space. A
1: 	 * compatibility space object can only be used in the
1: 	 * <code>LockFactory</code> that created it.
1: 	 *
1: 	 * @param owner the owner of the compatibility space (typically a
1: 	 * transaction object). Might be <code>null</code>.
1: 	 * @return an object which represents a compatibility space
1: 	 */
0: 	public CompatibilitySpace createCompatibilitySpace(Object owner);
1: 
1: 	/**
1: 		Lock an object within a compatibility space
1:         compatible and granted by the lock manager if the trio
1:         {compatibilitySpace, ref, qualifier} are equal (i.e. reference equality
1:         for qualifier and compatibilitySpace, equals() method for ref).
1: 		A compatibility space is not assumed to be owned by a single thread.
1: 		@param compatibilitySpace object defining compatibility space
/////////////////////////////////////////////////////////////////////////
1: 	public boolean lockObject(CompatibilitySpace compatibilitySpace,
1: 							  Object group, Lockable ref, Object qualifier,
1: 							  int timeout)
1: 		Unlock a single lock on a single object held within this compatibility
1: 		space and locked with the supplied qualifier.
1: 		@param compatibilitySpace object defining compatibility space
1: 	public int unlock(CompatibilitySpace compatibilitySpace, Object group,
1: 					  Lockable ref, Object qualifier);
1: 		@param compatibilitySpace object defining compatibility space
1: 	public void unlockGroup(CompatibilitySpace compatibilitySpace,
1: 							Object group);
1: 	public void unlockGroup(CompatibilitySpace compatibilitySpace,
1: 							Object group, Matchable key);
1: 	public void transfer(CompatibilitySpace compatibilitySpace,
1: 						 Object oldGroup, Object newGroup);
/////////////////////////////////////////////////////////////////////////
1: 		Return true if locks are held in this compatibility space and
1: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace,
1: 								Object group);
1: 		Return true if locks are held in this compatibility space.
1: 	public boolean areLocksHeld(CompatibilitySpace compatibilitySpace);
1: 		Lock an object with zero duration within a compatibility space,
/////////////////////////////////////////////////////////////////////////
1:         compatible and granted by the lock manager if the trio
1:         {compatibilitySpace, ref, qualifier} are equal (i.e. reference equality
1:         for qualifier and compatibilitySpace, equals() method for ref).
1: 		A compatibility space is not assumed to be owned by a single thread.
1: 		@param compatibilitySpace object defining compatibility space
/////////////////////////////////////////////////////////////////////////
1: 	public boolean zeroDurationlockObject(CompatibilitySpace compatibilitySpace,
1: 										  Lockable ref, Object qualifier,
1: 										  int timeout)
1: 	public boolean isLockHeld(CompatibilitySpace compatibilitySpace,
1: 							  Object group, Lockable ref, Object qualifier);
/////////////////////////////////////////////////////////////////////////
1: 	public void setLimit(CompatibilitySpace compatibilitySpace, Object group,
1: 						 int limit, Limit callback);
1: 	public void clearLimit(CompatibilitySpace compatibilitySpace, Object group);
commit:1d8153c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:00d19b5
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39c6ffc
/////////////////////////////////////////////////////////////////////////
1: 		Get the lock timeout in milliseconds. A negative number means that
1:         there is no timeout.
1: 	*/
1: 	public int getWaitTimeout();
1: 
1: 	/**
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
0: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
0: 		@exception StandardException Standard Derby error policy.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.locks.LockFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface LockFactory extends PropertySetCallback {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.locks;
1: 
1: import org.apache.derby.iapi.util.Matchable;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.property.PropertySetCallback;
1: import java.util.Enumeration;
1: 
1: 
1: /**
1:     Generic locking of objects. Enables deadlock detection.
1: 
1:   <BR>
1:     MT - Mutable - Container Object - Thread Safe
1: 
1: 
1: */
0: public interface LockFactory extends PropertySetCallback { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
0: 		Lock an object within a compatability space
1: 		and associate the lock with a group object,
1: 		waits up to timeout milli-seconds for the object to become unlocked. A 
1:         timeout of 0 means do not wait for the lock to be unlocked.
1: 		Note the actual time waited is approximate.
1: 		<P>
1: 		A compatibility space in an space where lock requests are assumed to be
0:         compatabile and granted by the lock manager if the trio
0:         {compatabilitySpace, ref, qualifier} are equal (i.e. reference equality
0:         for qualifier, equals() method
0: 		for compatabilitySpace and ref ). A typical reference to use for the compatability
0: 		space is a reference to an object representing a transaction.
1: 		Granted by the lock manager means that the Lockable object may or may 
1:         not be queried to see if the request is compatible.
1: 		<BR>
0: 		A compatability space is not assumed to be owned by a single thread.
1: 	
1: 
1: 
0: 		@param compatabilitySpace object defining compatability space (by value)
1: 		@param group handle of group, must be private to a thread.
1: 		@param ref reference to object to be locked
1: 		@param qualifier A qualification of the request.
1: 		@param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
1: 
1: 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
1: 		could not be granted.
1: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException The wait for the lock timed out (message id will be LockFactory.TimeOut).
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 	*/
0: 	public boolean lockObject(Object compatabilitySpace, Object group, Lockable ref, Object qualifier, int timeout)
1: 		throws StandardException;
1: 
1: 	/**
0: 		Lock an object within a compatability space
1: 		and associate the lock with a group object,
0: 		waits forever the object to become unlocked.
1: 		<P>
1: 		A compatibility space in an space where lock requests are assumed to be
0:         compatabile and granted by the lock manager if the trio
0:         {compatabilitySpace, ref, qualifier} are equal (i.e. reference equality
0:         for qualifier, equals() method
0: 		for compatabilitySpace and ref ). A typical reference to use for the compatability
0: 		space is a reference to an object representing a transaction.
1: 		Granted by the lock manager means that the Lockable object may or may 
1:         not be queried to see if the request is compatible.
1: 		<BR>
0: 		A compatability space is not assumed to be owned by a single thread.
1: 	
1: 
1: 
0: 		@param compatabilitySpace object defining compatability space (by value)
1: 		@param group handle of group, must be private to a thread.
1: 		@param ref reference to object to be locked
1: 		@param qualifier A qualification of the request.
1: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 	*/
0: 	//public void lockObject(Object compatabilitySpace, Object group, Lockable ref, Object qualifier)
0: 	//	throws StandardException;
1: 
1: 	/**
0: 		Lock an object within a compatability space
1: 		and associate the lock with a group object,
0: 		In addition a held latch is passed in. If the lock
0: 		cannot be granted immediately, the latch will be released
0: 		and relatched after the lock is obtained. If the lock can be granted
0: 		immediately the latch is not released.
1: 		<BR>
0: 		The compatability space of the request is defined by the compatability
0: 		space of the latch.
1: 		<P>
0: 		@param group handle of group, must be private to a compatability space.
1: 		@param ref reference to object to be locked
1: 		@param qualifier A qualification of the request.
0: 		@param timeout amount of time to wait, <B>NO_WAIT is not supported</B>
0: 		@param latch latch to be atomically released/re-latched in a wait.
1: 
0: 		@return true if the latch was released, false otherwise.
1: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 	*/
0: 	public boolean lockObject(Object group, Lockable ref, Object qualifier, int timeout, Latch latch)
1: 		throws StandardException;
1: 
1: 	/**
0: 		Unlock a single lock on a single object held within this compatability space
0: 		that was locked with the supplied qualifier.
1: 
0: 		@param compatabilitySpace object defining compatability space (by value)
1: 		@param group handle of group.
1: 		@param ref Reference to object to be unlocked.
1: 		@param qualifier qualifier of lock to be unlocked
1: 
1: 		@return number of locks released (one or zero).
1: 	*/
0: 	public int unlock(Object compatabilitySpace, Object group, Lockable ref, Object qualifier);
1: 
1: 	/**
1: 		Unlock all locks in a group. 
1: 
1: 		@param group handle of group that objects were locked with.
1: 	*/
0: 	public void unlockGroup(Object compatabilitySpace, Object group);
1: 
1: 	/**
1: 		Unlock all locks on a group that match the passed in value.
1: 	*/
0: 	public void unlockGroup(Object compatabilitySpace, Object group, Matchable key);
1: 
1: 	/**
1: 		Transfer a set of locks from one group to another.
1: 	*/
0: 	public void transfer(Object compatabilitySpace, Object oldGroup, Object newGroup);
1: 
1: 	/**
1: 		Returns true if locks held by anyone are blocking anyone else
1: 	*/
1: 	public boolean anyoneBlocked();
1: 
1: 	/**
0: 		Return true if locks are held in this compatability space and
1: 		 this group.
1: 
1: 		@param group handle of group that objects were locked with.
1: 
1: 	*/
0: 	public boolean areLocksHeld(Object compatabilitySpace, Object group);
1: 
1: 	/**
0: 		Return true if locks are held in this compatability space.
1: 	*/
0: 	public boolean areLocksHeld(Object compatabilitySpace);
1: 
1: 
1: 	/**
0: 		Latch an object. A latch is a lock without a group.
0: 		This means that it must be released explicitly by the owner.
0: 		A latch is not released by any unlock methods, it must be
0: 		released by the unlatch method. A latch is assumed to only
0: 		be held by one locker at a time.
1: <BR>
0: 		The first argument passed to lockEvent() is the Latch that
0: 		is to be used in the unlatch() call.
0: 		The firstArgument passed to unlockEvent() should be ignored.
1: 
0:   		@return true if the latch was obtained,
0: 		false if timeout is equal to LockFactory.NO_WAIT and the lock could not be granted.
1: 
1: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the latch. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
0: 	public boolean latchObject(Object compatabilitySpace, Lockable ref, Object qualifier, int timeout)
1: 		throws StandardException;
1: 
1: 	/**
0: 		Unlatch an object.
1: 	*/
0: 	public void unlatch(Latch heldLatch);
1: 
1: 	
1: 	/**
0: 		Lock an object with zero duration within a compatability space,
1: 		waits up to timeout milli-seconds for the object to become unlocked. A 
1:         timeout of 0 means do not wait for the lock to be unlocked.
1: 		Note the actual time waited is approximate.
1: 		<P>
1: 		Zero duration means the lock is released as soon as it is obtained.
1: 		<P>
1: 		A compatibility space in an space where lock requests are assumed to be
0:         compatabile and granted by the lock manager if the trio
0:         {compatabilitySpace, ref, qualifier} are equal (i.e. reference equality
0:         for qualifier, equals() method
0: 		for compatabilitySpace and ref ). A typical reference to use for the compatability
0: 		space is a reference to an object representing a transaction.
1: 		Granted by the lock manager means that the Lockable object may or may 
1:         not be queried to see if the request is compatible.
1: 		<BR>
0: 		A compatability space is not assumed to be owned by a single thread.
1: 	
1: 
1: 
0: 		@param compatabilitySpace object defining compatability space (by value)
1: 		@param ref reference to object to be locked
1: 		@param qualifier A qualification of the request.
1: 		@param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
1: 
1: 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
1: 		could not be granted.
1: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException The wait for the lock timed out (message id will be LockFactory.TimeOut).
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 	*/
0: 	public boolean zeroDurationlockObject(Object compatabilitySpace, Lockable ref, Object qualifier, int timeout)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Check to see if a specific lock is held.
1: 	*/
0: 	public boolean isLockHeld(Object compatabilitySpace, Object group, Lockable ref, Object qualifier);
1: 
1: 	/**
1: 		Install a limit that is called when the size of the group exceeds
1: 		the required limit.
1: 		<BR>
1: 		It is not guaranteed that the callback method (Limit.reached) is
1: 		called as soon as the group size exceeds the given limit.
1: 		If the callback method does not result in a decrease in the
1: 		number of locks held then the lock factory implementation
1: 		may delay calling the method again. E.g. with a limit
1: 		of 500 and a reached() method that does nothing, may result
1: 		in the call back method only being called when the group size reaches
1: 		550.
1: 		<BR>
1: 		Only one limit may be in place for a group at any time.
1: 		@see Limit
1: 	*/
0: 	public void setLimit(Object compatabilitySpace, Object group, int limit, Limit callback);
1: 
1: 	/**
1: 		Clear a limit set by setLimit.
1: 	*/
0: 	public void clearLimit(Object compatabilitySpace, Object group); 
1: 
1: 	/**
1: 		Make a virtual lock table for diagnostics.
1: 	 */
1: 	public Enumeration makeVirtualLockTable();
1: 
1: }
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.locks
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.locks;
0: 
0: import org.apache.derby.iapi.util.Matchable;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.property.PropertySetCallback;
0: import java.util.Enumeration;
0: 
0: 
0: /**
0:     Generic locking of objects. Enables deadlock detection.
0: 
0:   <BR>
0:     MT - Mutable - Container Object - Thread Safe
0: 
0: 
0: */
0: public interface LockFactory extends PropertySetCallback { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 		Lock an object within a compatability space
0: 		and associate the lock with a group object,
0: 		waits up to timeout milli-seconds for the object to become unlocked. A 
0:         timeout of 0 means do not wait for the lock to be unlocked.
0: 		Note the actual time waited is approximate.
0: 		<P>
0: 		A compatibility space in an space where lock requests are assumed to be
0:         compatabile and granted by the lock manager if the trio
0:         {compatabilitySpace, ref, qualifier} are equal (i.e. reference equality
0:         for qualifier, equals() method
0: 		for compatabilitySpace and ref ). A typical reference to use for the compatability
0: 		space is a reference to an object representing a transaction.
0: 		Granted by the lock manager means that the Lockable object may or may 
0:         not be queried to see if the request is compatible.
0: 		<BR>
0: 		A compatability space is not assumed to be owned by a single thread.
0: 	
0: 
0: 
0: 		@param compatabilitySpace object defining compatability space (by value)
0: 		@param group handle of group, must be private to a thread.
0: 		@param ref reference to object to be locked
0: 		@param qualifier A qualification of the request.
0: 		@param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
0: 
0: 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
0: 		could not be granted.
0: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException The wait for the lock timed out (message id will be LockFactory.TimeOut).
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 	*/
0: 	public boolean lockObject(Object compatabilitySpace, Object group, Lockable ref, Object qualifier, int timeout)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Lock an object within a compatability space
0: 		and associate the lock with a group object,
0: 		waits forever the object to become unlocked.
0: 		<P>
0: 		A compatibility space in an space where lock requests are assumed to be
0:         compatabile and granted by the lock manager if the trio
0:         {compatabilitySpace, ref, qualifier} are equal (i.e. reference equality
0:         for qualifier, equals() method
0: 		for compatabilitySpace and ref ). A typical reference to use for the compatability
0: 		space is a reference to an object representing a transaction.
0: 		Granted by the lock manager means that the Lockable object may or may 
0:         not be queried to see if the request is compatible.
0: 		<BR>
0: 		A compatability space is not assumed to be owned by a single thread.
0: 	
0: 
0: 
0: 		@param compatabilitySpace object defining compatability space (by value)
0: 		@param group handle of group, must be private to a thread.
0: 		@param ref reference to object to be locked
0: 		@param qualifier A qualification of the request.
0: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 	*/
0: 	//public void lockObject(Object compatabilitySpace, Object group, Lockable ref, Object qualifier)
0: 	//	throws StandardException;
0: 
0: 	/**
0: 		Lock an object within a compatability space
0: 		and associate the lock with a group object,
0: 		In addition a held latch is passed in. If the lock
0: 		cannot be granted immediately, the latch will be released
0: 		and relatched after the lock is obtained. If the lock can be granted
0: 		immediately the latch is not released.
0: 		<BR>
0: 		The compatability space of the request is defined by the compatability
0: 		space of the latch.
0: 		<P>
0: 		@param group handle of group, must be private to a compatability space.
0: 		@param ref reference to object to be locked
0: 		@param qualifier A qualification of the request.
0: 		@param timeout amount of time to wait, <B>NO_WAIT is not supported</B>
0: 		@param latch latch to be atomically released/re-latched in a wait.
0: 
0: 		@return true if the latch was released, false otherwise.
0: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 	*/
0: 	public boolean lockObject(Object group, Lockable ref, Object qualifier, int timeout, Latch latch)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Unlock a single lock on a single object held within this compatability space
0: 		that was locked with the supplied qualifier.
0: 
0: 		@param compatabilitySpace object defining compatability space (by value)
0: 		@param group handle of group.
0: 		@param ref Reference to object to be unlocked.
0: 		@param qualifier qualifier of lock to be unlocked
0: 
0: 		@return number of locks released (one or zero).
0: 	*/
0: 	public int unlock(Object compatabilitySpace, Object group, Lockable ref, Object qualifier);
0: 
0: 	/**
0: 		Unlock all locks in a group. 
0: 
0: 		@param group handle of group that objects were locked with.
0: 	*/
0: 	public void unlockGroup(Object compatabilitySpace, Object group);
0: 
0: 	/**
0: 		Unlock all locks on a group that match the passed in value.
0: 	*/
0: 	public void unlockGroup(Object compatabilitySpace, Object group, Matchable key);
0: 
0: 	/**
0: 		Transfer a set of locks from one group to another.
0: 	*/
0: 	public void transfer(Object compatabilitySpace, Object oldGroup, Object newGroup);
0: 
0: 	/**
0: 		Returns true if locks held by anyone are blocking anyone else
0: 	*/
0: 	public boolean anyoneBlocked();
0: 
0: 	/**
0: 		Return true if locks are held in this compatability space and
0: 		 this group.
0: 
0: 		@param group handle of group that objects were locked with.
0: 
0: 	*/
0: 	public boolean areLocksHeld(Object compatabilitySpace, Object group);
0: 
0: 	/**
0: 		Return true if locks are held in this compatability space.
0: 	*/
0: 	public boolean areLocksHeld(Object compatabilitySpace);
0: 
0: 
0: 	/**
0: 		Latch an object. A latch is a lock without a group.
0: 		This means that it must be released explicitly by the owner.
0: 		A latch is not released by any unlock methods, it must be
0: 		released by the unlatch method. A latch is assumed to only
0: 		be held by one locker at a time.
0: <BR>
0: 		The first argument passed to lockEvent() is the Latch that
0: 		is to be used in the unlatch() call.
0: 		The firstArgument passed to unlockEvent() should be ignored.
0: 
0:   		@return true if the latch was obtained,
0: 		false if timeout is equal to LockFactory.NO_WAIT and the lock could not be granted.
0: 
0: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the latch. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public boolean latchObject(Object compatabilitySpace, Lockable ref, Object qualifier, int timeout)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Unlatch an object.
0: 	*/
0: 	public void unlatch(Latch heldLatch);
0: 
0: 	
0: 	/**
0: 		Lock an object with zero duration within a compatability space,
0: 		waits up to timeout milli-seconds for the object to become unlocked. A 
0:         timeout of 0 means do not wait for the lock to be unlocked.
0: 		Note the actual time waited is approximate.
0: 		<P>
0: 		Zero duration means the lock is released as soon as it is obtained.
0: 		<P>
0: 		A compatibility space in an space where lock requests are assumed to be
0:         compatabile and granted by the lock manager if the trio
0:         {compatabilitySpace, ref, qualifier} are equal (i.e. reference equality
0:         for qualifier, equals() method
0: 		for compatabilitySpace and ref ). A typical reference to use for the compatability
0: 		space is a reference to an object representing a transaction.
0: 		Granted by the lock manager means that the Lockable object may or may 
0:         not be queried to see if the request is compatible.
0: 		<BR>
0: 		A compatability space is not assumed to be owned by a single thread.
0: 	
0: 
0: 
0: 		@param compatabilitySpace object defining compatability space (by value)
0: 		@param ref reference to object to be locked
0: 		@param qualifier A qualification of the request.
0: 		@param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
0: 
0: 		@return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lock
0: 		could not be granted.
0: 
0: 		@exception org.apache.derby.iapi.error.StandardException A deadlock has occured (message id will be LockFactory.Deadlock)
0: 		@exception org.apache.derby.iapi.error.StandardException The wait for the lock timed out (message id will be LockFactory.TimeOut).
0: 		@exception org.apache.derby.iapi.error.StandardException Another thread interupted this thread while
0: 		it was waiting for the lock. This will be a StandardException with a nested java.lang.InterruptedException exception,
0: 		(message id will be LockFactory.InterruptedExceptionId)
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 	*/
0: 	public boolean zeroDurationlockObject(Object compatabilitySpace, Lockable ref, Object qualifier, int timeout)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Check to see if a specific lock is held.
0: 	*/
0: 	public boolean isLockHeld(Object compatabilitySpace, Object group, Lockable ref, Object qualifier);
0: 
0: 	/**
0: 		Install a limit that is called when the size of the group exceeds
0: 		the required limit.
0: 		<BR>
0: 		It is not guaranteed that the callback method (Limit.reached) is
0: 		called as soon as the group size exceeds the given limit.
0: 		If the callback method does not result in a decrease in the
0: 		number of locks held then the lock factory implementation
0: 		may delay calling the method again. E.g. with a limit
0: 		of 500 and a reached() method that does nothing, may result
0: 		in the call back method only being called when the group size reaches
0: 		550.
0: 		<BR>
0: 		Only one limit may be in place for a group at any time.
0: 		@see Limit
0: 	*/
0: 	public void setLimit(Object compatabilitySpace, Object group, int limit, Limit callback);
0: 
0: 	/**
0: 		Clear a limit set by setLimit.
0: 	*/
0: 	public void clearLimit(Object compatabilitySpace, Object group); 
0: 
0: 	/**
0: 		Make a virtual lock table for diagnostics.
0: 	 */
0: 	public Enumeration makeVirtualLockTable();
0: 
0: }
0: 
0: 
============================================================================