1:fe77ca5: /*
13:fe77ca5: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package	org.apache.derby.impl.sql.compile;
1:fe77ca5: 
1:fe77ca5: import java.lang.reflect.Member;
1:fe77ca5: import java.lang.reflect.Modifier;
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassInspector;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:3bb140c: import org.apache.derby.iapi.store.access.Qualifier;
1:3bb140c: import org.apache.derby.iapi.util.JBitSet;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * A StaticClassFieldReferenceNode represents a Java static field reference from 
1:fe77ca5:  * a Class (as opposed to an Object).  Field references can be 
1:fe77ca5:  * made in DML (as expressions).
2:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public final class StaticClassFieldReferenceNode extends JavaValueNode
1:fe77ca5: {
1:fe77ca5: 	/*
1:fe77ca5: 	** Name of the field.
1:fe77ca5: 	*/
1:fe77ca5: 	private String	fieldName;
1:fe77ca5: 
1:fe77ca5: 	/* The class name */
1:fe77ca5: 	private String	javaClassName;
1:fe77ca5: 	private boolean classNameDelimitedIdentifier;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		The field we are going to access.
1:fe77ca5: 	*/
1:fe77ca5: 	private Member			field;
1:fe77ca5: 
1:fe77ca5: 	/**
1:3bb140c:      * Constructor for a StaticClassFieldReferenceNode
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param	javaClassName	The class name
1:fe77ca5: 	 * @param	fieldName		The field name
1:3bb140c:      * @param   cm              The context manager
1:fe77ca5: 	 */
1:3bb140c:     StaticClassFieldReferenceNode(
1:3bb140c:             String javaClassName,
1:3bb140c:             String fieldName,
1:3bb140c:             boolean classNameDelimitedIdentifier,
1:3bb140c:             ContextManager cm)
1:fe77ca5: 	{
1:3bb140c:         super(cm);
1:3bb140c:         this.fieldName = fieldName;
1:3bb140c:         this.javaClassName = javaClassName;
1:3bb140c:         this.classNameDelimitedIdentifier = classNameDelimitedIdentifier;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Bind this expression.  This means binding the sub-expressions,
1:fe77ca5: 	 * as well as figuring out what the return type is for this expression.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param fromList		The FROM list for the query this
1:09c2697:      *                      expression is in, for binding columns.
1:09c2697:      * @param subqueryList  The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates    The aggregate list being built as we find AggregateNodes
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	Nothing
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     JavaValueNode bindExpression(FromList fromList,
1:3bb140c:                                  SubqueryList subqueryList,
1:3bb140c:                                  List<AggregateNode> aggregates)
1:fe77ca5: 			throws StandardException
1:fe77ca5: 	{
1:fe77ca5: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1:fe77ca5: 
1:fe77ca5: 
1:fe77ca5: 		if (((getCompilerContext().getReliability() & CompilerContext.INTERNAL_SQL_ILLEGAL) != 0)
1:fe77ca5: 			|| !javaClassName.startsWith("java.sql.")) {
1:fe77ca5: 
1:fe77ca5: 			throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, javaClassName + "::" + fieldName);
1:fe77ca5: 		}
1:fe77ca5: 
1:2e1b5e8: 		verifyClassExist(javaClassName);
1:fe77ca5: 
1:fe77ca5: 		/*
1:fe77ca5: 		** Find the field that is public.
1:fe77ca5: 		*/
1:fe77ca5: 		field = classInspector.findPublicField(javaClassName,
1:fe77ca5: 										fieldName,
1:fe77ca5: 										true);
1:fe77ca5: 		/* Get the field type */
1:fe77ca5: 	 	setJavaTypeName( classInspector.getType(field) );
1:fe77ca5: 
1:fe77ca5: 		return this;
1:fe77ca5: 
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Preprocess an expression tree.  We do a number of transformations
1:fe77ca5: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1:fe77ca5: 	 * subquery flattening.
1:fe77ca5: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param	numTables			Number of tables in the DML Statement
1:fe77ca5: 	 * @param	outerFromList		FromList from outer query block
1:fe77ca5: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1:fe77ca5: 	 * @param	outerPredicateList	PredicateList from outer query block
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:9f2ed7d:     void preprocess(int numTables,
1:fe77ca5: 							FromList outerFromList,
1:fe77ca5: 							SubqueryList outerSubqueryList,
1:fe77ca5: 							PredicateList outerPredicateList) 
1:fe77ca5: 					throws StandardException
1:fe77ca5: 	{
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Categorize this predicate.  Initially, this means
1:fe77ca5: 	 * building a bit map of the referenced tables for each predicate.
1:fe77ca5: 	 * If the source of this ColumnReference (at the next underlying level) 
1:fe77ca5: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1:fe77ca5: 	 * will not be pushed down.
1:fe77ca5: 	 *
1:fe77ca5: 	 * For example, in:
1:fe77ca5: 	 *		select * from (select 1 from s) a (x) where x = 1
1:fe77ca5: 	 * we will not push down x = 1.
1:fe77ca5: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1:fe77ca5: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1:fe77ca5: 	 * that tree into the pushed predicate, and that tree could contain
1:fe77ca5: 	 * subqueries and method calls.
1:fe77ca5: 	 * RESOLVE - revisit this issue once we have views.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1:fe77ca5: 	 * @param simplePredsOnly	Whether or not to consider method
1:fe77ca5: 	 *							calls, field references and conditional nodes
1:fe77ca5: 	 *							when building bit map
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1:fe77ca5: 	 *						or a VirtualColumnNode.
1:fe77ca5: 	 */
1:9f2ed7d:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1:fe77ca5: 	{
1:fe77ca5: 		return true;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Remap all ColumnReferences in this tree to be clones of the
1:fe77ca5: 	 * underlying expression.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return JavaValueNode			The remapped expression tree.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException			Thrown on error
1:fe77ca5: 	 */
1:9f2ed7d:     JavaValueNode remapColumnReferencesToExpressions()
1:fe77ca5: 		throws StandardException
1:fe77ca5: 	{
1:fe77ca5: 		return this;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return the variant type for the underlying expression.
1:fe77ca5: 	 * The variant type can be:
1:fe77ca5: 	 *		VARIANT				- variant within a scan
1:fe77ca5: 	 *							  (method calls and non-static field access)
1:fe77ca5: 	 *		SCAN_INVARIANT		- invariant within a scan
1:fe77ca5: 	 *							  (column references from outer tables)
1:fe77ca5: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1:fe77ca5: 	 *		CONSTANT			- constant
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The variant type for the underlying expression.
1:fe77ca5: 	 */
1:3bb140c:     @Override
1:9f2ed7d:     int getOrderableVariantType()
1:fe77ca5: 	{
1:fe77ca5: 		if (SanityManager.DEBUG)
1:fe77ca5: 		{
1:fe77ca5: 			SanityManager.ASSERT(field != null,
1:fe77ca5: 					"field is expected to be non-null");
1:fe77ca5: 		}
1:fe77ca5: 		/* Static field references are invariant for the life 
1:fe77ca5: 		 * of the query, non-static are variant.
1:fe77ca5: 		 */
1:fe77ca5: 		if (Modifier.isFinal(field.getModifiers()))
1:fe77ca5: 		{
1:fe77ca5: 			return Qualifier.CONSTANT;
1:fe77ca5: 		}
1:fe77ca5: 		else
1:fe77ca5: 		{
1:fe77ca5: 			return Qualifier.VARIANT;
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * @see QueryTreeNode#generate
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:9f2ed7d:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
1:d5bc20f: 	throws StandardException
1:fe77ca5: 	{
1:fe77ca5: 		/*
1:fe77ca5: 		** Generate the following:
1:fe77ca5: 		**
1:fe77ca5: 		** <javaClassName>.<field name>
1:fe77ca5: 		*/
1:fe77ca5: 
1:fe77ca5: 		mb.getStaticField(field.getDeclaringClass().getName(),
1:fe77ca5: 								 fieldName,
1:fe77ca5: 								 getJavaTypeName());
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.loader.ClassInspector;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.util.JBitSet;
/////////////////////////////////////////////////////////////////////////
1:      * Constructor for a StaticClassFieldReferenceNode
1:      * @param   cm              The context manager
1:     StaticClassFieldReferenceNode(
1:             String javaClassName,
1:             String fieldName,
1:             boolean classNameDelimitedIdentifier,
1:             ContextManager cm)
1:         super(cm);
0:         setNodeType(C_NodeTypes.STATIC_CLASS_FIELD_REFERENCE_NODE);
1:         this.fieldName = fieldName;
1:         this.javaClassName = javaClassName;
1:         this.classNameDelimitedIdentifier = classNameDelimitedIdentifier;
/////////////////////////////////////////////////////////////////////////
1:     JavaValueNode bindExpression(FromList fromList,
1:                                  SubqueryList subqueryList,
1:                                  List<AggregateNode> aggregates)
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9f2ed7d
/////////////////////////////////////////////////////////////////////////
1:     void preprocess(int numTables,
/////////////////////////////////////////////////////////////////////////
1:     boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
/////////////////////////////////////////////////////////////////////////
1:     JavaValueNode remapColumnReferencesToExpressions()
/////////////////////////////////////////////////////////////////////////
1:     int getOrderableVariantType()
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression(ExpressionClassBuilder acb, MethodBuilder mb)
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      *                      expression is in, for binding columns.
1:      * @param subqueryList  The subquery list being built as we find SubqueryNodes
1:      * @param aggregates    The aggregate list being built as we find AggregateNodes
0:     JavaValueNode bindExpression(FromList fromList, SubqueryList subqueryList, List aggregates)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2e1b5e8
/////////////////////////////////////////////////////////////////////////
1: 		verifyClassExist(javaClassName);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.loader.ClassInspector;
1: 
0: import org.apache.derby.iapi.store.access.Qualifier;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
0: import org.apache.derby.iapi.util.JBitSet;
1: 
1: import java.lang.reflect.Member;
1: import java.lang.reflect.Modifier;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * A StaticClassFieldReferenceNode represents a Java static field reference from 
1:  * a Class (as opposed to an Object).  Field references can be 
1:  * made in DML (as expressions).
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
1: public final class StaticClassFieldReferenceNode extends JavaValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/*
1: 	** Name of the field.
1: 	*/
1: 	private String	fieldName;
1: 
1: 	/* The class name */
1: 	private String	javaClassName;
1: 	private boolean classNameDelimitedIdentifier;
1: 
1: 	/**
1: 		The field we are going to access.
1: 	*/
1: 	private Member			field;
1: 
1: 	/**
0: 	 * Initializer for a StaticClassFieldReferenceNode
1: 	 *
1: 	 * @param	javaClassName	The class name
1: 	 * @param	fieldName		The field name
1: 	 */
0: 	public void init(Object javaClassName, Object fieldName, Object classNameDelimitedIdentifier)
1: 	{
0: 		this.fieldName = (String) fieldName;
0: 		this.javaClassName = (String) javaClassName;
0: 		this.classNameDelimitedIdentifier = ((Boolean) classNameDelimitedIdentifier).booleanValue();
1: 	}
1: 
1: 	/**
1: 	 * Bind this expression.  This means binding the sub-expressions,
1: 	 * as well as figuring out what the return type is for this expression.
1: 	 *
1: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public JavaValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector) 
1: 			throws StandardException
1: 	{
1: 		ClassInspector classInspector = getClassFactory().getClassInspector();
1: 
1: 
1: 		if (((getCompilerContext().getReliability() & CompilerContext.INTERNAL_SQL_ILLEGAL) != 0)
1: 			|| !javaClassName.startsWith("java.sql.")) {
1: 
1: 			throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, javaClassName + "::" + fieldName);
1: 		}
1: 
0: 		javaClassName = verifyClassExist(javaClassName, ! classNameDelimitedIdentifier);
1: 
1: 		/*
1: 		** Find the field that is public.
1: 		*/
1: 		field = classInspector.findPublicField(javaClassName,
1: 										fieldName,
1: 										true);
1: 		/* Get the field type */
1: 	 	setJavaTypeName( classInspector.getType(field) );
1: 
1: 		return this;
1: 
1: 	}
1: 
1: 	/**
1: 	 * Preprocess an expression tree.  We do a number of transformations
1: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1: 	 * subquery flattening.
1: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1: 	 *
1: 	 * @param	numTables			Number of tables in the DML Statement
1: 	 * @param	outerFromList		FromList from outer query block
1: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1: 	 * @param	outerPredicateList	PredicateList from outer query block
1: 	 *
0: 	 * @return	Nothing.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void preprocess(int numTables,
1: 							FromList outerFromList,
1: 							SubqueryList outerSubqueryList,
1: 							PredicateList outerPredicateList) 
1: 					throws StandardException
1: 	{
1: 	}
1: 
1: 	/**
1: 	 * Categorize this predicate.  Initially, this means
1: 	 * building a bit map of the referenced tables for each predicate.
1: 	 * If the source of this ColumnReference (at the next underlying level) 
1: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
1: 	 * will not be pushed down.
1: 	 *
1: 	 * For example, in:
1: 	 *		select * from (select 1 from s) a (x) where x = 1
1: 	 * we will not push down x = 1.
1: 	 * NOTE: It would be easy to handle the case of a constant, but if the
1: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
1: 	 * that tree into the pushed predicate, and that tree could contain
1: 	 * subqueries and method calls.
1: 	 * RESOLVE - revisit this issue once we have views.
1: 	 *
1: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
1: 	 * @param simplePredsOnly	Whether or not to consider method
1: 	 *							calls, field references and conditional nodes
1: 	 *							when building bit map
1: 	 *
1: 	 * @return boolean		Whether or not source.expression is a ColumnReference
1: 	 *						or a VirtualColumnNode.
1: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Remap all ColumnReferences in this tree to be clones of the
1: 	 * underlying expression.
1: 	 *
1: 	 * @return JavaValueNode			The remapped expression tree.
1: 	 *
1: 	 * @exception StandardException			Thrown on error
1: 	 */
0: 	public JavaValueNode remapColumnReferencesToExpressions()
1: 		throws StandardException
1: 	{
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return the variant type for the underlying expression.
1: 	 * The variant type can be:
1: 	 *		VARIANT				- variant within a scan
1: 	 *							  (method calls and non-static field access)
1: 	 *		SCAN_INVARIANT		- invariant within a scan
1: 	 *							  (column references from outer tables)
1: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1: 	 *		CONSTANT			- constant
1: 	 *
1: 	 * @return	The variant type for the underlying expression.
1: 	 */
0: 	protected int getOrderableVariantType()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(field != null,
1: 					"field is expected to be non-null");
1: 		}
1: 		/* Static field references are invariant for the life 
1: 		 * of the query, non-static are variant.
1: 		 */
1: 		if (Modifier.isFinal(field.getModifiers()))
1: 		{
1: 			return Qualifier.CONSTANT;
1: 		}
1: 		else
1: 		{
1: 			return Qualifier.VARIANT;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see QueryTreeNode#generate
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
1: 	{
1: 		/*
1: 		** Generate the following:
1: 		**
1: 		** <javaClassName>.<field name>
1: 		*/
1: 
1: 		mb.getStaticField(field.getDeclaringClass().getName(),
1: 								 fieldName,
1: 								 getJavaTypeName());
1: 	}
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d5bc20f
/////////////////////////////////////////////////////////////////////////
1: 	throws StandardException
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.loader.ClassInspector;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: import java.lang.reflect.Member;
0: import java.lang.reflect.Modifier;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * A StaticClassFieldReferenceNode represents a Java static field reference from 
0:  * a Class (as opposed to an Object).  Field references can be 
0:  * made in DML (as expressions).
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public final class StaticClassFieldReferenceNode extends JavaValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/*
0: 	** Name of the field.
0: 	*/
0: 	private String	fieldName;
0: 
0: 	/* The class name */
0: 	private String	javaClassName;
0: 	private boolean classNameDelimitedIdentifier;
0: 
0: 	/**
0: 		The field we are going to access.
0: 	*/
0: 	private Member			field;
0: 
0: 	/**
0: 	 * Initializer for a StaticClassFieldReferenceNode
0: 	 *
0: 	 * @param	javaClassName	The class name
0: 	 * @param	fieldName		The field name
0: 	 */
0: 	public void init(Object javaClassName, Object fieldName, Object classNameDelimitedIdentifier)
0: 	{
0: 		this.fieldName = (String) fieldName;
0: 		this.javaClassName = (String) javaClassName;
0: 		this.classNameDelimitedIdentifier = ((Boolean) classNameDelimitedIdentifier).booleanValue();
0: 	}
0: 
0: 	/**
0: 	 * Bind this expression.  This means binding the sub-expressions,
0: 	 * as well as figuring out what the return type is for this expression.
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public JavaValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
0: 		Vector aggregateVector) 
0: 			throws StandardException
0: 	{
0: 		ClassInspector classInspector = getClassFactory().getClassInspector();
0: 
0: 
0: 		if (((getCompilerContext().getReliability() & CompilerContext.INTERNAL_SQL_ILLEGAL) != 0)
0: 			|| !javaClassName.startsWith("java.sql.")) {
0: 
0: 			throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, javaClassName + "::" + fieldName);
0: 		}
0: 
0: 		javaClassName = verifyClassExist(javaClassName, ! classNameDelimitedIdentifier);
0: 
0: 		/*
0: 		** Find the field that is public.
0: 		*/
0: 		field = classInspector.findPublicField(javaClassName,
0: 										fieldName,
0: 										true);
0: 		/* Get the field type */
0: 	 	setJavaTypeName( classInspector.getType(field) );
0: 
0: 		return this;
0: 
0: 	}
0: 
0: 	/**
0: 	 * Preprocess an expression tree.  We do a number of transformations
0: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
0: 	 * subquery flattening.
0: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
0: 	 *
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
0: 	 *
0: 	 * @return	Nothing.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void preprocess(int numTables,
0: 							FromList outerFromList,
0: 							SubqueryList outerSubqueryList,
0: 							PredicateList outerPredicateList) 
0: 					throws StandardException
0: 	{
0: 	}
0: 
0: 	/**
0: 	 * Categorize this predicate.  Initially, this means
0: 	 * building a bit map of the referenced tables for each predicate.
0: 	 * If the source of this ColumnReference (at the next underlying level) 
0: 	 * is not a ColumnReference or a VirtualColumnNode then this predicate
0: 	 * will not be pushed down.
0: 	 *
0: 	 * For example, in:
0: 	 *		select * from (select 1 from s) a (x) where x = 1
0: 	 * we will not push down x = 1.
0: 	 * NOTE: It would be easy to handle the case of a constant, but if the
0: 	 * inner SELECT returns an arbitrary expression, then we would have to copy
0: 	 * that tree into the pushed predicate, and that tree could contain
0: 	 * subqueries and method calls.
0: 	 * RESOLVE - revisit this issue once we have views.
0: 	 *
0: 	 * @param referencedTabs	JBitSet with bit map of referenced FromTables
0: 	 * @param simplePredsOnly	Whether or not to consider method
0: 	 *							calls, field references and conditional nodes
0: 	 *							when building bit map
0: 	 *
0: 	 * @return boolean		Whether or not source.expression is a ColumnReference
0: 	 *						or a VirtualColumnNode.
0: 	 */
0: 	public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * Remap all ColumnReferences in this tree to be clones of the
0: 	 * underlying expression.
0: 	 *
0: 	 * @return JavaValueNode			The remapped expression tree.
0: 	 *
0: 	 * @exception StandardException			Thrown on error
0: 	 */
0: 	public JavaValueNode remapColumnReferencesToExpressions()
0: 		throws StandardException
0: 	{
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return the variant type for the underlying expression.
0: 	 * The variant type can be:
0: 	 *		VARIANT				- variant within a scan
0: 	 *							  (method calls and non-static field access)
0: 	 *		SCAN_INVARIANT		- invariant within a scan
0: 	 *							  (column references from outer tables)
0: 	 *		QUERY_INVARIANT		- invariant within the life of a query
0: 	 *		CONSTANT			- constant
0: 	 *
0: 	 * @return	The variant type for the underlying expression.
0: 	 */
0: 	protected int getOrderableVariantType()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(field != null,
0: 					"field is expected to be non-null");
0: 		}
0: 		/* Static field references are invariant for the life 
0: 		 * of the query, non-static are variant.
0: 		 */
0: 		if (Modifier.isFinal(field.getModifiers()))
0: 		{
0: 			return Qualifier.CONSTANT;
0: 		}
0: 		else
0: 		{
0: 			return Qualifier.VARIANT;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see QueryTreeNode#generate
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generateExpression(ExpressionClassBuilder acb,
0: 											MethodBuilder mb)
0: 	{
0: 		/*
0: 		** Generate the following:
0: 		**
0: 		** <javaClassName>.<field name>
0: 		*/
0: 
0: 		mb.getStaticField(field.getDeclaringClass().getName(),
0: 								 fieldName,
0: 								 getJavaTypeName());
0: 	}
0: 
0: }
============================================================================