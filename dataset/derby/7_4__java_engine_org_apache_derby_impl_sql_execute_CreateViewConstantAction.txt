1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.CreateViewConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.Provider;
1:eac0369: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes actions that are ALWAYS performed for a
1:eac0369:  *	CREATE VIEW Statement at Execution time.
1:9213b42:  *  A view is represented as:
1:9213b42:  *  <UL>
1:9213b42:  *  <LI> TableDescriptor with the name of the view and type VIEW_TYPE
1:9213b42:  *  <LI> Set of ColumnDescriptor's for the column names and types
1:9213b42:  *  <LI> ViewDescriptor describing the SQL query that makes up the view.
1:9213b42:  *  </UL>
1:9213b42:  *  Dependencies are created as:
1:9213b42:  *  <UL>
1:9213b42:  *  <LI> ViewDescriptor depends on the Providers that its compiled
1:9213b42:  *  query depends on.
1:9213b42:  *  <LI> ViewDescriptor depends on the privileges required to execute the view.
1:9213b42:  *  </UL>
1:9213b42:  *  Note there are no dependencies created between the ViewDescriptor, TableDecriptor
1:9213b42:  *  and the ColumnDescriptor's.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: class CreateViewConstantAction extends DDLConstantAction
4:eac0369: {
1:eac0369: 	
1:eac0369: 	private final String					tableName;
1:eac0369: 	private final String					schemaName;
1:eac0369: 	private final String					viewText;
1:eac0369: 	private final int						tableType;
1:eac0369: 	private final int						checkOption;
1:eac0369: 	private final ColumnInfo[]			columnInfo;
1:eac0369: 	private final ProviderInfo[]			providerInfo;
1:eac0369: 	private final UUID					compSchemaId;
1:eac0369: 	
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for a CREATE VIEW statement.
1:eac0369: 	 *
1:eac0369: 	 *  @param schemaName			name for the schema that view lives in.
1:9213b42: 	 *  @param tableName	Name of view.
1:9213b42: 	 *  @param tableType	Type of table (ie. TableDescriptor.VIEW_TYPE).
1:eac0369: 	 *	@param viewText		Text of query expression for view definition
1:eac0369: 	 *  @param checkOption	Check option type
1:eac0369: 	 *  @param columnInfo	Information on all the columns in the table.
1:eac0369: 	 *  @param providerInfo Information on all the Providers
1:6b50965: 	 *  @param compSchemaId 	Compilation Schema Id
1:eac0369: 	 */
1:eac0369: 	CreateViewConstantAction(
1:eac0369: 								String			schemaName,
1:eac0369: 								String			tableName,
1:eac0369: 								int				tableType,
1:eac0369: 								String			viewText,
1:eac0369: 								int				checkOption,
1:eac0369: 								ColumnInfo[]	columnInfo,
1:eac0369: 								ProviderInfo[]  providerInfo,
1:eac0369: 								UUID			compSchemaId)
1:eac0369: 	{
1:eac0369: 		this.schemaName = schemaName;
1:eac0369: 		this.tableName = tableName;
1:eac0369: 		this.tableType = tableType;
1:eac0369: 		this.viewText = viewText;
1:eac0369: 		this.checkOption = checkOption;
1:eac0369: 		this.columnInfo = columnInfo;
1:eac0369: 		this.providerInfo = providerInfo;
1:eac0369: 		this.compSchemaId = compSchemaId;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(schemaName != null, "Schema name is null");
4:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// OBJECT METHODS
1:eac0369: 
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		return constructToString("CREATE VIEW ", tableName);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:9213b42: 	 *	This is the guts of the Execution-time logic for CREATE VIEW.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:eac0369: 		TableDescriptor 			td;
1:eac0369: 		UUID 						toid;
1:eac0369: 		ColumnDescriptor			columnDescriptor;
1:eac0369: 		ViewDescriptor				vd;
1:eac0369: 
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 		DependencyManager dm = dd.getDependencyManager();
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Inform the data dictionary that we are about to write to it.
1:eac0369: 		** There are several calls to data dictionary "get" methods here
1:eac0369: 		** that might be done in "read" mode in the data dictionary, but
1:eac0369: 		** it seemed safer to do this whole operation in "write" mode.
1:eac0369: 		**
1:eac0369: 		** We tell the data dictionary we're done writing at the end of
1:eac0369: 		** the transaction.
1:eac0369: 		*/
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		SchemaDescriptor sd = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
1:eac0369: 
1:eac0369: 		/* Create a new table descriptor.
1:eac0369: 		 * (Pass in row locking, even though meaningless for views.)
1:eac0369: 		 */
1:eac0369: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:eac0369: 		td = ddg.newTableDescriptor(tableName,
1:eac0369: 									sd,
1:eac0369: 									tableType,
1:eac0369: 									TableDescriptor.ROW_LOCK_GRANULARITY);
1:eac0369: 
1:eac0369: 		dd.addDescriptor(td, sd, DataDictionary.SYSTABLES_CATALOG_NUM, false, tc);
1:eac0369: 		toid = td.getUUID();
1:eac0369: 
1:eac0369: 		// for each column, stuff system.column
1:eac0369: 		ColumnDescriptor[] cdlArray = new ColumnDescriptor[columnInfo.length];
1:eac0369: 		int index = 1;
1:eac0369: 		for (int ix = 0; ix < columnInfo.length; ix++)
1:eac0369: 		{
1:eac0369: 			columnDescriptor = new ColumnDescriptor(
1:eac0369: 				                   columnInfo[ix].name,
1:eac0369: 								   index++,
1:eac0369: 								   columnInfo[ix].dataType,
1:eac0369: 								   columnInfo[ix].defaultValue,
1:eac0369: 								   columnInfo[ix].defaultInfo,
1:eac0369: 								   td,
1:eac0369: 								   (UUID) null,
1:eac0369: 								   columnInfo[ix].autoincStart,
1:318307e: 								   columnInfo[ix].autoincInc
1:eac0369: 							   );
1:eac0369: 			cdlArray[ix] = columnDescriptor;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		dd.addDescriptorArray(cdlArray, td,
1:eac0369: 							  DataDictionary.SYSCOLUMNS_CATALOG_NUM, false, tc);
1:eac0369: 
1:eac0369: 		// add columns to the column descriptor list.
1:eac0369: 		ColumnDescriptorList cdl = td.getColumnDescriptorList();
1:eac0369: 		for (int i = 0; i < cdlArray.length; i++)
1:eac0369: 			cdl.add(cdlArray[i]);
1:eac0369: 
1:eac0369: 		/* Get and add a view descriptor */
1:eac0369: 		vd = ddg.newViewDescriptor(toid, tableName, viewText, 
1:eac0369: 									checkOption, 
1:eac0369: 									(compSchemaId == null) ?
1:eac0369: 										lcc.getDefaultSchema().getUUID() :
1:eac0369: 										compSchemaId);
1:eac0369: 
1:eac0369: 		for (int ix = 0; ix < providerInfo.length; ix++)
1:eac0369: 		{
1:eac0369: 			/* We should always be able to find the Provider */
1:eac0369: 				Provider provider = (Provider) providerInfo[ix].
1:eac0369: 										getDependableFinder().
1:2bb479f: 											getDependable(dd,
1:eac0369: 												providerInfo[ix].getObjectId());
1:eac0369: 				dm.addDependency(vd, provider, lcc.getContextManager());
1:eac0369: 		}
1:2d2e717: 		//store view's dependency on various privileges in the dependeny system
1:2d2e717: 		storeViewTriggerDependenciesOnPrivileges(activation, vd);
1:eac0369: 
1:eac0369: 		dd.addDescriptor(vd, sd, DataDictionary.SYSVIEWS_CATALOG_NUM, true, tc);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9213b42
/////////////////////////////////////////////////////////////////////////
1:  *  A view is represented as:
1:  *  <UL>
1:  *  <LI> TableDescriptor with the name of the view and type VIEW_TYPE
1:  *  <LI> Set of ColumnDescriptor's for the column names and types
1:  *  <LI> ViewDescriptor describing the SQL query that makes up the view.
1:  *  </UL>
1:  *  Dependencies are created as:
1:  *  <UL>
1:  *  <LI> ViewDescriptor depends on the Providers that its compiled
1:  *  query depends on.
1:  *  <LI> ViewDescriptor depends on the privileges required to execute the view.
1:  *  </UL>
1:  *  Note there are no dependencies created between the ViewDescriptor, TableDecriptor
1:  *  and the ColumnDescriptor's.
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param tableName	Name of view.
1: 	 *  @param tableType	Type of table (ie. TableDescriptor.VIEW_TYPE).
/////////////////////////////////////////////////////////////////////////
1: 	 *	This is the guts of the Execution-time logic for CREATE VIEW.
/////////////////////////////////////////////////////////////////////////
commit:2bb479f
/////////////////////////////////////////////////////////////////////////
1: 											getDependable(dd,
commit:2d2e717
/////////////////////////////////////////////////////////////////////////
1: 		//store view's dependency on various privileges in the dependeny system
1: 		storeViewTriggerDependenciesOnPrivileges(activation, vd);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.CreateViewConstantAction
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.depend.Provider;
1: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  *	This class  describes actions that are ALWAYS performed for a
1:  *	CREATE VIEW Statement at Execution time.
1:  *
0:  *	@author Jerry Brenner.
1:  */
1: 
1: class CreateViewConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	
1: 	private final String					tableName;
1: 	private final String					schemaName;
1: 	private final String					viewText;
1: 	private final int						tableType;
1: 	private final int						checkOption;
1: 	private final ColumnInfo[]			columnInfo;
1: 	private final ProviderInfo[]			providerInfo;
1: 	private final UUID					compSchemaId;
1: 	
1: 	// CONSTRUCTORS
1: 	/**
1: 	 *	Make the ConstantAction for a CREATE VIEW statement.
1: 	 *
1: 	 *  @param schemaName			name for the schema that view lives in.
0: 	 *  @param tableName	Name of table.
0: 	 *  @param tableType	Type of table (e.g., BASE).
1: 	 *	@param viewText		Text of query expression for view definition
1: 	 *  @param checkOption	Check option type
1: 	 *  @param columnInfo	Information on all the columns in the table.
1: 	 *  @param providerInfo Information on all the Providers
0: 	 *  @param compSchemId 	Compilation Schema Id
0: 	 *		 (REMIND tableDescriptor ignored)
1: 	 */
1: 	CreateViewConstantAction(
1: 								String			schemaName,
1: 								String			tableName,
1: 								int				tableType,
1: 								String			viewText,
1: 								int				checkOption,
1: 								ColumnInfo[]	columnInfo,
1: 								ProviderInfo[]  providerInfo,
1: 								UUID			compSchemaId)
1: 	{
1: 		this.schemaName = schemaName;
1: 		this.tableName = tableName;
1: 		this.tableType = tableType;
1: 		this.viewText = viewText;
1: 		this.checkOption = checkOption;
1: 		this.columnInfo = columnInfo;
1: 		this.providerInfo = providerInfo;
1: 		this.compSchemaId = compSchemaId;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(schemaName != null, "Schema name is null");
1: 		}
1: 	}
1: 
1: 	// OBJECT METHODS
1: 
1: 	public	String	toString()
1: 	{
1: 		return constructToString("CREATE VIEW ", tableName);
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
0: 	 *	This is the guts of the Execution-time logic for CREATE TABLE.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 						throws StandardException
1: 	{
1: 		TableDescriptor 			td;
1: 		UUID 						toid;
0: 		SchemaDescriptor			schemaDescriptor;
1: 		ColumnDescriptor			columnDescriptor;
1: 		ViewDescriptor				vd;
1: 
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 		DependencyManager dm = dd.getDependencyManager();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 		/*
1: 		** Inform the data dictionary that we are about to write to it.
1: 		** There are several calls to data dictionary "get" methods here
1: 		** that might be done in "read" mode in the data dictionary, but
1: 		** it seemed safer to do this whole operation in "write" mode.
1: 		**
1: 		** We tell the data dictionary we're done writing at the end of
1: 		** the transaction.
1: 		*/
1: 		dd.startWriting(lcc);
1: 
1: 		SchemaDescriptor sd = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
1: 
1: 		/* Create a new table descriptor.
1: 		 * (Pass in row locking, even though meaningless for views.)
1: 		 */
1: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 		td = ddg.newTableDescriptor(tableName,
1: 									sd,
1: 									tableType,
1: 									TableDescriptor.ROW_LOCK_GRANULARITY);
1: 
1: 		dd.addDescriptor(td, sd, DataDictionary.SYSTABLES_CATALOG_NUM, false, tc);
1: 		toid = td.getUUID();
1: 
1: 		// for each column, stuff system.column
1: 		ColumnDescriptor[] cdlArray = new ColumnDescriptor[columnInfo.length];
1: 		int index = 1;
1: 		for (int ix = 0; ix < columnInfo.length; ix++)
1: 		{
1: 			columnDescriptor = new ColumnDescriptor(
1: 				                   columnInfo[ix].name,
1: 								   index++,
1: 								   columnInfo[ix].dataType,
1: 								   columnInfo[ix].defaultValue,
1: 								   columnInfo[ix].defaultInfo,
1: 								   td,
1: 								   (UUID) null,
1: 								   columnInfo[ix].autoincStart,
0: 								   columnInfo[ix].autoincInc,
0: 								   columnInfo[ix].autoincInc != 0
1: 							   );
1: 			cdlArray[ix] = columnDescriptor;
1: 		}
1: 
1: 		dd.addDescriptorArray(cdlArray, td,
1: 							  DataDictionary.SYSCOLUMNS_CATALOG_NUM, false, tc);
1: 
1: 		// add columns to the column descriptor list.
1: 		ColumnDescriptorList cdl = td.getColumnDescriptorList();
1: 		for (int i = 0; i < cdlArray.length; i++)
1: 			cdl.add(cdlArray[i]);
1: 
1: 		/* Get and add a view descriptor */
1: 		vd = ddg.newViewDescriptor(toid, tableName, viewText, 
1: 									checkOption, 
1: 									(compSchemaId == null) ?
1: 										lcc.getDefaultSchema().getUUID() :
1: 										compSchemaId);
1: 
1: 		for (int ix = 0; ix < providerInfo.length; ix++)
1: 		{
1: 			/* We should always be able to find the Provider */
0: 			try 
1: 			{
1: 				Provider provider = (Provider) providerInfo[ix].
1: 										getDependableFinder().
0: 											getDependable(
1: 												providerInfo[ix].getObjectId());
0: 				if (provider == null)  //see beetle 4444
1: 				{
0: 					throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "OBJECT", providerInfo[ix].getObjectId());
1: 				}
1: 				dm.addDependency(vd, provider, lcc.getContextManager());
1: 			}
0: 			catch(java.sql.SQLException te)
1: 			{
0: 				// we should allow timeout to be thrown
0: 				throw StandardException.plainWrapException(te);
1: 			}
1: 		}
1: 
1: 		dd.addDescriptor(vd, sd, DataDictionary.SYSVIEWS_CATALOG_NUM, true, tc);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param compSchemaId 	Compilation Schema Id
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:318307e
/////////////////////////////////////////////////////////////////////////
1: 								   columnInfo[ix].autoincInc
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.iapi.sql.depend.ProviderInfo;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	CREATE VIEW Statement at Execution time.
0:  *
0:  *	@author Jerry Brenner.
0:  */
0: 
0: class CreateViewConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	
0: 	private final String					tableName;
0: 	private final String					schemaName;
0: 	private final String					viewText;
0: 	private final int						tableType;
0: 	private final int						checkOption;
0: 	private final ColumnInfo[]			columnInfo;
0: 	private final ProviderInfo[]			providerInfo;
0: 	private final UUID					compSchemaId;
0: 	
0: 	// CONSTRUCTORS
0: 	/**
0: 	 *	Make the ConstantAction for a CREATE VIEW statement.
0: 	 *
0: 	 *  @param schemaName			name for the schema that view lives in.
0: 	 *  @param tableName	Name of table.
0: 	 *  @param tableType	Type of table (e.g., BASE).
0: 	 *	@param viewText		Text of query expression for view definition
0: 	 *  @param checkOption	Check option type
0: 	 *  @param columnInfo	Information on all the columns in the table.
0: 	 *  @param providerInfo Information on all the Providers
0: 	 *  @param compSchemId 	Compilation Schema Id
0: 	 *		 (REMIND tableDescriptor ignored)
0: 	 */
0: 	CreateViewConstantAction(
0: 								String			schemaName,
0: 								String			tableName,
0: 								int				tableType,
0: 								String			viewText,
0: 								int				checkOption,
0: 								ColumnInfo[]	columnInfo,
0: 								ProviderInfo[]  providerInfo,
0: 								UUID			compSchemaId)
0: 	{
0: 		this.schemaName = schemaName;
0: 		this.tableName = tableName;
0: 		this.tableType = tableType;
0: 		this.viewText = viewText;
0: 		this.checkOption = checkOption;
0: 		this.columnInfo = columnInfo;
0: 		this.providerInfo = providerInfo;
0: 		this.compSchemaId = compSchemaId;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(schemaName != null, "Schema name is null");
0: 		}
0: 	}
0: 
0: 	// OBJECT METHODS
0: 
0: 	public	String	toString()
0: 	{
0: 		return constructToString("CREATE VIEW ", tableName);
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for CREATE TABLE.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 						throws StandardException
0: 	{
0: 		TableDescriptor 			td;
0: 		UUID 						toid;
0: 		SchemaDescriptor			schemaDescriptor;
0: 		ColumnDescriptor			columnDescriptor;
0: 		ViewDescriptor				vd;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 		/*
0: 		** Inform the data dictionary that we are about to write to it.
0: 		** There are several calls to data dictionary "get" methods here
0: 		** that might be done in "read" mode in the data dictionary, but
0: 		** it seemed safer to do this whole operation in "write" mode.
0: 		**
0: 		** We tell the data dictionary we're done writing at the end of
0: 		** the transaction.
0: 		*/
0: 		dd.startWriting(lcc);
0: 
0: 		SchemaDescriptor sd = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
0: 
0: 		/* Create a new table descriptor.
0: 		 * (Pass in row locking, even though meaningless for views.)
0: 		 */
0: 		DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
0: 		td = ddg.newTableDescriptor(tableName,
0: 									sd,
0: 									tableType,
0: 									TableDescriptor.ROW_LOCK_GRANULARITY);
0: 
0: 		dd.addDescriptor(td, sd, DataDictionary.SYSTABLES_CATALOG_NUM, false, tc);
0: 		toid = td.getUUID();
0: 
0: 		// for each column, stuff system.column
0: 		ColumnDescriptor[] cdlArray = new ColumnDescriptor[columnInfo.length];
0: 		int index = 1;
0: 		for (int ix = 0; ix < columnInfo.length; ix++)
0: 		{
0: 			columnDescriptor = new ColumnDescriptor(
0: 				                   columnInfo[ix].name,
0: 								   index++,
0: 								   columnInfo[ix].dataType,
0: 								   columnInfo[ix].defaultValue,
0: 								   columnInfo[ix].defaultInfo,
0: 								   td,
0: 								   (UUID) null,
0: 								   columnInfo[ix].autoincStart,
0: 								   columnInfo[ix].autoincInc,
0: 								   columnInfo[ix].autoincInc != 0
0: 							   );
0: 			cdlArray[ix] = columnDescriptor;
0: 		}
0: 
0: 		dd.addDescriptorArray(cdlArray, td,
0: 							  DataDictionary.SYSCOLUMNS_CATALOG_NUM, false, tc);
0: 
0: 		// add columns to the column descriptor list.
0: 		ColumnDescriptorList cdl = td.getColumnDescriptorList();
0: 		for (int i = 0; i < cdlArray.length; i++)
0: 			cdl.add(cdlArray[i]);
0: 
0: 		/* Get and add a view descriptor */
0: 		vd = ddg.newViewDescriptor(toid, tableName, viewText, 
0: 									checkOption, 
0: 									(compSchemaId == null) ?
0: 										lcc.getDefaultSchema().getUUID() :
0: 										compSchemaId);
0: 
0: 		for (int ix = 0; ix < providerInfo.length; ix++)
0: 		{
0: 			/* We should always be able to find the Provider */
0: 			try 
0: 			{
0: 				Provider provider = (Provider) providerInfo[ix].
0: 										getDependableFinder().
0: 											getDependable(
0: 												providerInfo[ix].getObjectId());
0: 				if (provider == null)  //see beetle 4444
0: 				{
0: 					throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, "OBJECT", providerInfo[ix].getObjectId());
0: 				}
0: 				dm.addDependency(vd, provider, lcc.getContextManager());
0: 			}
0: 			catch(java.sql.SQLException te)
0: 			{
0: 				// we should allow timeout to be thrown
0: 				throw StandardException.plainWrapException(te);
0: 			}
0: 		}
0: 
0: 		dd.addDescriptor(vd, sd, DataDictionary.SYSVIEWS_CATALOG_NUM, true, tc);
0: 	}
0: }
============================================================================