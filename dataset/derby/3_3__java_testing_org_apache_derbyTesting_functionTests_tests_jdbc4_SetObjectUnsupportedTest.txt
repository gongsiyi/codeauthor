1:054fa3a: /*
1:054fa3a:  * Licensed to the Apache Software Foundation (ASF) under one
1:054fa3a:  * or more contributor license agreements.  See the NOTICE file
1:054fa3a:  * distributed with this work for additional information
1:054fa3a:  * regarding copyright ownership.  The ASF licenses this file
1:054fa3a:  * to you under the Apache License, Version 2.0 (the
1:054fa3a:  * "License"); you may not use this file except in compliance
1:054fa3a:  * with the License.  You may obtain a copy of the License at
2:054fa3a:  *
1:054fa3a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:054fa3a:  *
1:054fa3a:  * Unless required by applicable law or agreed to in writing,
1:054fa3a:  * software distributed under the License is distributed on an
1:054fa3a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:054fa3a:  * KIND, either express or implied.  See the License for the
1:054fa3a:  * specific language governing permissions and limitations
1:054fa3a:  * under the License.
1:054fa3a:  */
1:054fa3a: 
1:054fa3a: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:054fa3a: 
1:054fa3a: import java.sql.PreparedStatement;
1:054fa3a: import java.sql.SQLException;
1:054fa3a: import java.sql.SQLFeatureNotSupportedException;
1:054fa3a: import java.sql.Types;
1:054fa3a: import junit.framework.Test;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:ec5ae26: import org.apache.derbyTesting.junit.TestConfiguration;
1:054fa3a: 
1:054fa3a: /**
1:dbbf9ff:  * Tests that calling <code>setObject()</code> and <code>setNull()</code> with
1:054fa3a:  * <code>sqlTargetType</code> set to an unsupported type fails with
1:054fa3a:  * <code>SQLFeatureNotSupportedException</code>.
1:054fa3a:  */
1:054fa3a: public class SetObjectUnsupportedTest extends BaseJDBCTestCase {
1:054fa3a:     /** Name and id of the target type used in the test. */
1:054fa3a:     private final TypeInfo typeInfo;
1:054fa3a:     /** Flag indicating whether the test should use a
1:054fa3a:      * CallableStatement instead of a PreparedStatement. */
1:054fa3a:     private final boolean callable;
1:054fa3a: 
1:054fa3a:     /**
1:054fa3a:      * Creates a new <code>SetObjectUnsupportedTest</code> instance.
1:054fa3a:      *
1:054fa3a:      * @param name name of the test
1:054fa3a:      * @param typeInfo description of the target type to use in the test
1:054fa3a:      * @param callable if <code>true</code>, use a
1:054fa3a:      * <code>CallableStatement</code> instead of a
1:054fa3a:      * <code>PreparedStatement</code>.
1:054fa3a:      */
1:054fa3a:     private SetObjectUnsupportedTest(String name, TypeInfo typeInfo,
1:054fa3a:                                      boolean callable) {
1:054fa3a:         super(name);
1:054fa3a:         this.typeInfo = typeInfo;
1:054fa3a:         this.callable = callable;
1:054fa3a:     }
1:054fa3a: 
1:054fa3a:     /**
1:054fa3a:      * Returns the name of the test.
1:054fa3a:      */
1:054fa3a:     public String getName() {
1:054fa3a:         return super.getName() + "_" + typeInfo.name;
1:054fa3a:     }
1:054fa3a: 
1:054fa3a:     /**
1:054fa3a:      * Prepares a <code>PreparedStatement</code> or a
1:054fa3a:      * <code>CallableStatement</code> to use in the test.
1:054fa3a:      *
1:054fa3a:      * @return a statement (prepared or callable)
1:054fa3a:      * @exception SQLException if a database error occurs
1:054fa3a:      */
1:054fa3a:     private PreparedStatement prepare() throws SQLException {
1:054fa3a:         String sql = "values (CAST (? AS VARCHAR(128)))";
1:13e9e78:         return callable ? prepareCall(sql) : prepareStatement(sql);
1:054fa3a:     }
1:054fa3a: 
1:054fa3a:     /**
1:054fa3a:      * Test that <code>setObject()</code> with the specified
1:dbbf9ff:      * <code>sqlTargetType</code> throws
1:dbbf9ff:      * <code>SQLFeatureNotSupportedException</code>.
1:054fa3a:      *
1:054fa3a:      * @exception SQLException if a database error occurs
1:054fa3a:      */
1:054fa3a:     public void testUnsupportedSetObject() throws SQLException {
1:054fa3a:         PreparedStatement ps = prepare();
1:054fa3a:         try {
1:054fa3a:             ps.setObject(1, null, typeInfo.type);
1:054fa3a:             fail("No exception thrown.");
1:054fa3a:         } catch (SQLFeatureNotSupportedException e) {
1:054fa3a:             // expected exception
1:054fa3a:         }
1:dbbf9ff:         ps.close();
1:dbbf9ff:     }
1:dbbf9ff: 
1:dbbf9ff:     /**
1:dbbf9ff:      * Test that <code>setObject()</code> with the specified
1:dbbf9ff:      * <code>sqlTargetType</code> throws
1:dbbf9ff:      * <code>SQLFeatureNotSupportedException</code>.
1:dbbf9ff:      *
1:dbbf9ff:      * @exception SQLException if a database error occurs
1:dbbf9ff:      */
1:dbbf9ff:     public void testUnsupportedSetObjectWithScale() throws SQLException {
1:dbbf9ff:         PreparedStatement ps = prepare();
1:dbbf9ff:         try {
1:dbbf9ff:             ps.setObject(1, null, typeInfo.type, 0);
1:dbbf9ff:             fail("No exception thrown.");
1:dbbf9ff:         } catch (SQLFeatureNotSupportedException e) {
1:dbbf9ff:             // expected exception
1:dbbf9ff:         }
1:dbbf9ff:         ps.close();
1:dbbf9ff:     }
1:dbbf9ff: 
1:dbbf9ff:     /**
1:dbbf9ff:      * Test that <code>setNull()</code> with the specified
1:dbbf9ff:      * <code>sqlTargetType</code> throws
1:dbbf9ff:      * <code>SQLFeatureNotSupportedException</code>.
1:dbbf9ff:      *
1:dbbf9ff:      * @exception SQLException if a database error occurs
1:dbbf9ff:      */
1:dbbf9ff:     public void testUnsupportedSetNull() throws SQLException {
1:dbbf9ff:         PreparedStatement ps = prepare();
1:dbbf9ff:         try {
1:dbbf9ff:             ps.setNull(1, typeInfo.type);
1:dbbf9ff:             fail("No exception thrown.");
1:dbbf9ff:         } catch (SQLFeatureNotSupportedException e) {
1:dbbf9ff:             // expected exception
1:dbbf9ff:         }
1:dbbf9ff:         ps.close();
1:dbbf9ff:     }
1:dbbf9ff: 
1:dbbf9ff:     /**
1:dbbf9ff:      * Test that <code>setNull()</code> with the specified
1:dbbf9ff:      * <code>sqlTargetType</code> throws
1:dbbf9ff:      * <code>SQLFeatureNotSupportedException</code>.
1:dbbf9ff:      *
1:dbbf9ff:      * @exception SQLException if a database error occurs
1:dbbf9ff:      */
1:dbbf9ff:     public void testUnsupportedSetNullWithTypeName() throws SQLException {
1:dbbf9ff:         PreparedStatement ps = prepare();
1:dbbf9ff:         try {
1:dbbf9ff:             ps.setNull(1, typeInfo.type, typeInfo.name);
1:dbbf9ff:             fail("No exception thrown.");
1:dbbf9ff:         } catch (SQLFeatureNotSupportedException e) {
1:dbbf9ff:             // expected exception
1:dbbf9ff:         }
1:dbbf9ff:         ps.close();
1:054fa3a:     }
1:054fa3a: 
1:054fa3a:     /**
1:054fa3a:      * The target types to test.
1:054fa3a:      */
1:054fa3a:     private static final TypeInfo[] TYPES = {
1:054fa3a:         new TypeInfo("ARRAY", Types.ARRAY),
1:054fa3a:         new TypeInfo("DATALINK", Types.DATALINK),
1:054fa3a:         new TypeInfo("NCHAR", Types.NCHAR),
1:054fa3a:         new TypeInfo("NCLOB", Types.NCLOB),
1:054fa3a:         new TypeInfo("NVARCHAR", Types.NVARCHAR),
1:054fa3a:         new TypeInfo("LONGNVARCHAR", Types.LONGNVARCHAR),
1:054fa3a:         new TypeInfo("REF", Types.REF),
1:054fa3a:         new TypeInfo("ROWID", Types.ROWID),
1:054fa3a:         new TypeInfo("SQLXML", Types.SQLXML),
1:054fa3a:         new TypeInfo("STRUCT", Types.STRUCT),
1:054fa3a:     };
1:054fa3a: 
1:054fa3a:     /**
1:ec5ae26:      * Create a suite with all tests.
1:ec5ae26:      */
1:ec5ae26:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("SetObjectUnsupportedTest suite");
1:1ae02c9: 
1:ec5ae26:         suite.addTest(baseSuite(false, "SetObjectUnsupportedTest:prepared"));
1:ec5ae26:         suite.addTest(baseSuite(true, "SetObjectUnsupportedTest:callable"));
1:1ae02c9: 
1:1ae02c9:         BaseTestSuite client =
1:1ae02c9:             new BaseTestSuite("SetObjectUnsupportedTest:client");
1:1ae02c9: 
1:ec5ae26:         client.addTest(baseSuite(false, "SetObjectUnsupportedTest:prepared"));
1:ec5ae26:         client.addTest(baseSuite(true, "SetObjectUnsupportedTest:callable"));
1:1ae02c9: 
1:ec5ae26:         suite.addTest(TestConfiguration.clientServerDecorator(client));
1:ec5ae26:         return suite;
1:ec5ae26:     }
1:ec5ae26: 
1:ec5ae26:     /**
1:054fa3a:      * Build a test suite which tests <code>setObject()</code> with
1:054fa3a:      * each of the types in <code>TYPES</code>.
1:054fa3a:      *
1:054fa3a:      * @param callable if <code>true</code>, test with a
1:054fa3a:      * <code>CallableStatement</code>; otherwise, test with a
1:054fa3a:      * <code>PreparedStatement</code>
1:054fa3a:      * @return a test suite
1:054fa3a:      */
1:ec5ae26:     static Test baseSuite(boolean callable, String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:054fa3a:         for (TypeInfo typeInfo : TYPES) {
1:054fa3a:             suite.addTest(new SetObjectUnsupportedTest
1:054fa3a:                           ("testUnsupportedSetObject", typeInfo, callable));
1:dbbf9ff:             suite.addTest(new SetObjectUnsupportedTest
1:dbbf9ff:                           ("testUnsupportedSetObjectWithScale",
1:dbbf9ff:                            typeInfo, callable));
1:dbbf9ff:             suite.addTest(new SetObjectUnsupportedTest
1:dbbf9ff:                           ("testUnsupportedSetNull", typeInfo, callable));
1:dbbf9ff:             suite.addTest(new SetObjectUnsupportedTest
1:dbbf9ff:                           ("testUnsupportedSetNullWithTypeName",
1:dbbf9ff:                            typeInfo, callable));
1:054fa3a:         }
1:054fa3a:         return suite;
1:054fa3a:     }
1:054fa3a: 
1:054fa3a:     /** Class with name and id for the target type used in a test. */
1:054fa3a:     private static class TypeInfo {
1:054fa3a:         final String name;
1:054fa3a:         final int type;
1:054fa3a:         TypeInfo(String name, int type) {
1:054fa3a:             this.name = name;
1:054fa3a:             this.type = type;
1:054fa3a:         }
1:054fa3a:     }
1:054fa3a: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("SetObjectUnsupportedTest suite");
1: 
1: 
1:         BaseTestSuite client =
1:             new BaseTestSuite("SetObjectUnsupportedTest:client");
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ec5ae26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:      * Create a suite with all tests.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("SetObjectUnsupportedTest suite");
1:         suite.addTest(baseSuite(false, "SetObjectUnsupportedTest:prepared"));
1:         suite.addTest(baseSuite(true, "SetObjectUnsupportedTest:callable"));
0:         TestSuite client = new TestSuite("SetObjectUnsupportedTest:client");
1:         client.addTest(baseSuite(false, "SetObjectUnsupportedTest:prepared"));
1:         client.addTest(baseSuite(true, "SetObjectUnsupportedTest:callable"));
1:         suite.addTest(TestConfiguration.clientServerDecorator(client));
1:         return suite;
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     static Test baseSuite(boolean callable, String name) {
0:         TestSuite suite = new TestSuite(name);
commit:dbbf9ff
/////////////////////////////////////////////////////////////////////////
1:  * Tests that calling <code>setObject()</code> and <code>setNull()</code> with
/////////////////////////////////////////////////////////////////////////
1:      * <code>sqlTargetType</code> throws
1:      * <code>SQLFeatureNotSupportedException</code>.
/////////////////////////////////////////////////////////////////////////
1:         ps.close();
1:     }
1: 
1:     /**
1:      * Test that <code>setObject()</code> with the specified
1:      * <code>sqlTargetType</code> throws
1:      * <code>SQLFeatureNotSupportedException</code>.
1:      *
1:      * @exception SQLException if a database error occurs
1:      */
1:     public void testUnsupportedSetObjectWithScale() throws SQLException {
1:         PreparedStatement ps = prepare();
1:         try {
1:             ps.setObject(1, null, typeInfo.type, 0);
1:             fail("No exception thrown.");
1:         } catch (SQLFeatureNotSupportedException e) {
1:             // expected exception
1:         }
1:         ps.close();
1:     }
1: 
1:     /**
1:      * Test that <code>setNull()</code> with the specified
1:      * <code>sqlTargetType</code> throws
1:      * <code>SQLFeatureNotSupportedException</code>.
1:      *
1:      * @exception SQLException if a database error occurs
1:      */
1:     public void testUnsupportedSetNull() throws SQLException {
1:         PreparedStatement ps = prepare();
1:         try {
1:             ps.setNull(1, typeInfo.type);
1:             fail("No exception thrown.");
1:         } catch (SQLFeatureNotSupportedException e) {
1:             // expected exception
1:         }
1:         ps.close();
1:     }
1: 
1:     /**
1:      * Test that <code>setNull()</code> with the specified
1:      * <code>sqlTargetType</code> throws
1:      * <code>SQLFeatureNotSupportedException</code>.
1:      *
1:      * @exception SQLException if a database error occurs
1:      */
1:     public void testUnsupportedSetNullWithTypeName() throws SQLException {
1:         PreparedStatement ps = prepare();
1:         try {
1:             ps.setNull(1, typeInfo.type, typeInfo.name);
1:             fail("No exception thrown.");
1:         } catch (SQLFeatureNotSupportedException e) {
1:             // expected exception
1:         }
1:         ps.close();
/////////////////////////////////////////////////////////////////////////
1:             suite.addTest(new SetObjectUnsupportedTest
1:                           ("testUnsupportedSetObjectWithScale",
1:                            typeInfo, callable));
1:             suite.addTest(new SetObjectUnsupportedTest
1:                           ("testUnsupportedSetNull", typeInfo, callable));
1:             suite.addTest(new SetObjectUnsupportedTest
1:                           ("testUnsupportedSetNullWithTypeName",
1:                            typeInfo, callable));
commit:054fa3a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
0: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.sql.Types;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: 
1: /**
0:  * Tests that calling <code>setObject()</code> with
1:  * <code>sqlTargetType</code> set to an unsupported type fails with
1:  * <code>SQLFeatureNotSupportedException</code>.
1:  *
0:  * <p> The test is run as part of <code>PreparedStatementTest</code>
0:  * and <code>CallableStatementTest</code>.
1:  */
1: public class SetObjectUnsupportedTest extends BaseJDBCTestCase {
1:     /** Name and id of the target type used in the test. */
1:     private final TypeInfo typeInfo;
1:     /** Flag indicating whether the test should use a
1:      * CallableStatement instead of a PreparedStatement. */
1:     private final boolean callable;
1: 
1:     /**
1:      * Creates a new <code>SetObjectUnsupportedTest</code> instance.
1:      *
1:      * @param name name of the test
1:      * @param typeInfo description of the target type to use in the test
1:      * @param callable if <code>true</code>, use a
1:      * <code>CallableStatement</code> instead of a
1:      * <code>PreparedStatement</code>.
1:      */
1:     private SetObjectUnsupportedTest(String name, TypeInfo typeInfo,
1:                                      boolean callable) {
1:         super(name);
1:         this.typeInfo = typeInfo;
1:         this.callable = callable;
1:     }
1: 
1:     /**
1:      * Returns the name of the test.
1:      */
1:     public String getName() {
1:         return super.getName() + "_" + typeInfo.name;
1:     }
1: 
1:     /**
1:      * Prepares a <code>PreparedStatement</code> or a
1:      * <code>CallableStatement</code> to use in the test.
1:      *
1:      * @return a statement (prepared or callable)
1:      * @exception SQLException if a database error occurs
1:      */
1:     private PreparedStatement prepare() throws SQLException {
1:         String sql = "values (CAST (? AS VARCHAR(128)))";
0:         Connection c = getConnection();
0:         return callable ? c.prepareCall(sql) : c.prepareStatement(sql);
1:     }
1: 
1:     /**
1:      * Test that <code>setObject()</code> with the specified
0:      * <code>sqlTargetType</code>.
1:      *
1:      * @exception SQLException if a database error occurs
1:      */
1:     public void testUnsupportedSetObject() throws SQLException {
1:         PreparedStatement ps = prepare();
1:         try {
1:             ps.setObject(1, null, typeInfo.type);
1:             fail("No exception thrown.");
1:         } catch (SQLFeatureNotSupportedException e) {
1:             // expected exception
1:         }
1:     }
1: 
1:     /**
1:      * The target types to test.
1:      */
1:     private static final TypeInfo[] TYPES = {
1:         new TypeInfo("ARRAY", Types.ARRAY),
1:         new TypeInfo("DATALINK", Types.DATALINK),
1:         new TypeInfo("NCHAR", Types.NCHAR),
1:         new TypeInfo("NCLOB", Types.NCLOB),
1:         new TypeInfo("NVARCHAR", Types.NVARCHAR),
1:         new TypeInfo("LONGNVARCHAR", Types.LONGNVARCHAR),
1:         new TypeInfo("REF", Types.REF),
1:         new TypeInfo("ROWID", Types.ROWID),
1:         new TypeInfo("SQLXML", Types.SQLXML),
1:         new TypeInfo("STRUCT", Types.STRUCT),
1:     };
1: 
1:     /**
1:      * Build a test suite which tests <code>setObject()</code> with
1:      * each of the types in <code>TYPES</code>.
1:      *
1:      * @param callable if <code>true</code>, test with a
1:      * <code>CallableStatement</code>; otherwise, test with a
1:      * <code>PreparedStatement</code>
1:      * @return a test suite
1:      */
0:     static Test suite(boolean callable) {
0:         TestSuite suite = new TestSuite();
1:         for (TypeInfo typeInfo : TYPES) {
1:             suite.addTest(new SetObjectUnsupportedTest
1:                           ("testUnsupportedSetObject", typeInfo, callable));
1:         }
1:         return suite;
1:     }
1: 
1:     /** Class with name and id for the target type used in a test. */
1:     private static class TypeInfo {
1:         final String name;
1:         final int type;
1:         TypeInfo(String name, int type) {
1:             this.name = name;
1:             this.type = type;
1:         }
1:     }
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("SetObjectUnsupportedTest suite");
commit:13e9e78
/////////////////////////////////////////////////////////////////////////
1:         return callable ? prepareCall(sql) : prepareStatement(sql);
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
============================================================================