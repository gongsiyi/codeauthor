1:f8bc019: /*
1:f8bc019: 
1:f8bc019:    Derby - Class org.apache.derby.mbeans.Management
1:f8bc019: 
1:f8bc019:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f8bc019:    contributor license agreements.  See the NOTICE file distributed with
1:f8bc019:    this work for additional information regarding copyright ownership.
1:f8bc019:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f8bc019:    (the "License"); you may not use this file except in compliance with
1:f8bc019:    the License.  You may obtain a copy of the License at
1:f8bc019: 
1:f8bc019:       http://www.apache.org/licenses/LICENSE-2.0
1:f8bc019: 
1:f8bc019:    Unless required by applicable law or agreed to in writing, software
1:f8bc019:    distributed under the License is distributed on an "AS IS" BASIS,
1:f8bc019:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f8bc019:    See the License for the specific language governing permissions and
1:f8bc019:    limitations under the License.
1:f8bc019: 
1:f8bc019: */
1:f8bc019: 
1:f8bc019: package org.apache.derby.mbeans;
1:f8bc019: 
1:56c1dc2: import java.security.AccessController;
1:56c1dc2: import java.security.PrivilegedAction;
1:56c1dc2: 
1:f8bc019: import org.apache.derby.iapi.reference.Module;
1:f8bc019: import org.apache.derby.iapi.services.monitor.Monitor;
1:f8bc019: 
1:f8bc019: /** 
1:3505778:  * Management MBean to allow applications to dynamically
1:3505778:  * control visibility of Derby's MBeans.
1:3505778:  * If Derby does not register its ManagementMBean then an
1:3505778:  * application may register this implementation
1:3505778:  * of ManagementMBean itself and use it to start Derby's
1:3505778:  * JMX management.
1:3505778:  * <P>
1:3505778:  * If Derby is not booted then invoking startManagement will
1:3505778:  * do nothing.
1:f8bc019: */
1:f8bc019: public class Management implements ManagementMBean {
1:f8bc019:     
1:f8bc019:     private ManagementMBean getManagementService() {
1:f8bc019:         return (ManagementMBean)
1:56c1dc2:              getSystemModule(Module.JMX);
1:f8bc019:     }
1:f8bc019:     
1:f8bc019:     /**
1:f8bc019:      * Start Derby's MBeans.
1:f8bc019:      * @see ManagementMBean#startManagement()
1:f8bc019:      */
1:f8bc019:     public void startManagement() {
1:f8bc019:         
1:f8bc019:         ManagementMBean mgmtService = getManagementService();
1:f8bc019:         if (mgmtService != null)
1:f8bc019:             mgmtService.startManagement();   
1:f8bc019:     }
1:f8bc019:     
1:f8bc019:     /**
1:f8bc019:      * Stop Derby's MBeans.
1:f8bc019:      * @see ManagementMBean#stopManagement()
1:f8bc019:      */
1:f8bc019:     public void stopManagement() {
1:f8bc019:         ManagementMBean mgmtService = getManagementService();
1:f8bc019:         if (mgmtService != null)
1:f8bc019:             mgmtService.stopManagement();
1:f8bc019:     }
1:f8bc019: 
1:f8bc019:     /**
1:f8bc019:      * Return state of Derby's JMX management.
1:f8bc019:      * @see ManagementMBean#isManagementActive()
1:f8bc019:      */
1:f8bc019:     public boolean isManagementActive() {
1:f8bc019:         ManagementMBean mgmtService = getManagementService();
1:f8bc019:         if (mgmtService == null)
1:f8bc019:              return false;
1:f8bc019:         return mgmtService.isManagementActive();
1:f8bc019:     }
1:9f69067: 
1:9f69067:     /**
1:9f69067:      * Return the system identifier that this MBean is managing.
1:9f69067:      * @see ManagementMBean#getSystemIdentifier()
1:9f69067:      */
1:9f69067:     public String getSystemIdentifier() {
1:9f69067:         ManagementMBean mgmtService = getManagementService();
1:9f69067:         if (mgmtService == null)
1:9f69067:              return null;
1:9f69067:         return mgmtService.getSystemIdentifier();
1:9f69067:     }
1:56c1dc2:     
1:56c1dc2:     /**
1:56c1dc2:      * Privileged module lookup. Must be private so that user code
1:56c1dc2:      * can't call this entry point.
1:56c1dc2:      */
1:56c1dc2:     private static  Object getSystemModule( final String factoryInterface )
1:56c1dc2:     {
1:56c1dc2:         return AccessController.doPrivileged
1:56c1dc2:             (
1:56c1dc2:              new PrivilegedAction<Object>()
1:56c1dc2:              {
1:56c1dc2:                  public Object run()
1:56c1dc2:                  {
1:56c1dc2:                      return Monitor.getSystemModule( factoryInterface );
1:56c1dc2:                  }
1:56c1dc2:              }
1:56c1dc2:              );
1:56c1dc2:     }
1:56c1dc2: 
1:f8bc019: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
/////////////////////////////////////////////////////////////////////////
1:              getSystemModule(Module.JMX);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged module lookup. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private static  Object getSystemModule( final String factoryInterface )
1:     {
1:         return AccessController.doPrivileged
1:             (
1:              new PrivilegedAction<Object>()
1:              {
1:                  public Object run()
1:                  {
1:                      return Monitor.getSystemModule( factoryInterface );
1:                  }
1:              }
1:              );
1:     }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9f69067
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return the system identifier that this MBean is managing.
1:      * @see ManagementMBean#getSystemIdentifier()
1:      */
1:     public String getSystemIdentifier() {
1:         ManagementMBean mgmtService = getManagementService();
1:         if (mgmtService == null)
1:              return null;
1:         return mgmtService.getSystemIdentifier();
1:     }
commit:3505778
/////////////////////////////////////////////////////////////////////////
1:  * Management MBean to allow applications to dynamically
1:  * control visibility of Derby's MBeans.
1:  * If Derby does not register its ManagementMBean then an
1:  * application may register this implementation
1:  * of ManagementMBean itself and use it to start Derby's
1:  * JMX management.
1:  * <P>
1:  * If Derby is not booted then invoking startManagement will
1:  * do nothing.
commit:f8bc019
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.mbeans.Management
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.mbeans;
1: 
1: import org.apache.derby.iapi.reference.Module;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: /** 
0:  * Management and information for the embedded JDBC driver.
1: */
1: public class Management implements ManagementMBean {
1:     
1:     private ManagementMBean getManagementService() {
1:         return (ManagementMBean)
0:              Monitor.getSystemModule(Module.JMX);
1:     }
1:     
1:     /**
1:      * Start Derby's MBeans.
1:      * @see ManagementMBean#startManagement()
1:      */
1:     public void startManagement() {
1:         
1:         ManagementMBean mgmtService = getManagementService();
1:         if (mgmtService != null)
1:             mgmtService.startManagement();   
1:     }
1:     
1:     /**
1:      * Stop Derby's MBeans.
1:      * @see ManagementMBean#stopManagement()
1:      */
1:     public void stopManagement() {
1:         ManagementMBean mgmtService = getManagementService();
1:         if (mgmtService != null)
1:             mgmtService.stopManagement();
1:     }
1: 
1:     /**
1:      * Return state of Derby's JMX management.
1:      * @see ManagementMBean#isManagementActive()
1:      */
1:     public boolean isManagementActive() {
1:         ManagementMBean mgmtService = getManagementService();
1:         if (mgmtService == null)
1:              return false;
1:         return mgmtService.isManagementActive();
1:     }
1: }
============================================================================