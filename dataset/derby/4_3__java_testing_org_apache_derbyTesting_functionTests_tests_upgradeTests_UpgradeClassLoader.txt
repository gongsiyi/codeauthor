1:e65365e: /*
20:e65365e: 
1:e65365e: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeClassLoader
1:f89c1b5: 
1:e65365e: Licensed to the Apache Software Foundation (ASF) under one or more
1:e65365e: contributor license agreements.  See the NOTICE file distributed with
1:e65365e: this work for additional information regarding copyright ownership.
1:e65365e: The ASF licenses this file to You under the Apache License, Version 2.0
1:e65365e: (the "License"); you may not use this file except in compliance with
1:e65365e: the License.  You may obtain a copy of the License at
1:e65365e: 
1:e65365e:    http://www.apache.org/licenses/LICENSE-2.0
1:e65365e: 
1:e65365e: Unless required by applicable law or agreed to in writing, software
1:e65365e: distributed under the License is distributed on an "AS IS" BASIS,
1:e65365e: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e65365e: See the License for the specific language governing permissions and
1:e65365e: limitations under the License.
1:e65365e: 
3:e65365e: */
1:e65365e: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:e65365e: 
1:f89c1b5: import java.io.ByteArrayOutputStream;
1:e65365e: import java.io.File;
1:e65365e: import java.io.IOException;
1:f89c1b5: import java.io.InputStream;
1:e65365e: import java.net.MalformedURLException;
1:e65365e: import java.net.URL;
1:e65365e: import java.net.URLClassLoader;
1:e65365e: import java.security.AccessController;
1:e18f54b: import java.security.PrivilegedAction;
1:e65365e: 
1:e65365e: import junit.framework.Assert;
1:e65365e: 
1:e65365e: import org.apache.derbyTesting.junit.BaseTestCase;
1:e65365e: 
3:e65365e: /**
3:e65365e:  * <p>
1:e65365e:  * This class factors out the machinery  needed to wrap a class loader around
1:e65365e:  * the jar files for an old release.
3:e65365e:  * </p>
1:e65365e:  */
1:e65365e: public class UpgradeClassLoader
1:e65365e: {
1:e65365e:     private static final String[] jarFiles = {
1:e65365e:             "derby.jar", 
1:e65365e:             //"derbynet.jar",
1:e65365e:             //"derbyclient.jar",
1:e65365e:             //"derbytools.jar"
1:e65365e:             };
1:e65365e: 
1:e18f54b:     static final String oldVersionsPath =
1:e18f54b:             getSystemProperty(_Suite.OLD_VERSIONS_PATH_PROPERTY);
1:e18f54b:     static final String jarPath =
1:e18f54b:             getSystemProperty(_Suite.OLD_RELEASE_PATH_PROPERTY);
1:e65365e: 
1:e18f54b:     private static String getSystemProperty(final String key) {
1:e18f54b:         return AccessController.doPrivileged(new PrivilegedAction<String>() {
1:e18f54b:             public String run() {
1:e18f54b:                 return System.getProperty(key);
9:e65365e:             }
1:e18f54b:         });
1:e65365e:     }
1:cd36286: 
1:e65365e:     protected static String getTextVersion(int[] iv)
1:e65365e:     {
1:e65365e:         String version = iv[0] + "." + iv[1] +
1:e65365e:         "." + iv[2] + "." + iv[3];
1:e65365e:         return version;
1:e65365e:     }
1:e65365e: 
1:e65365e:     /**
1:e65365e:      * <p>
1:e65365e:      * Wrap a class loader around the given version.
1:e65365e:      * </p>
1:e65365e:      */
1:e65365e:     public static ClassLoader makeClassLoader( final int[] version )
1:e65365e:     {
1:e18f54b:         ClassLoader oldLoader = AccessController.doPrivileged(
1:e18f54b:                 new PrivilegedAction<ClassLoader>() {
1:e18f54b:             public ClassLoader run() {
1:e18f54b:                 return createClassLoader(version);
1:e65365e:             }
1:e18f54b:         });
1:e65365e: 
1:e65365e:         if (oldLoader == null)
1:e65365e:         {
1:e65365e:             BaseTestCase.traceit("Empty: Skip upgrade Tests (no jars) for " + getTextVersion(version));
1:e65365e:         }
1:e65365e:         
1:e65365e:         return oldLoader;
1:e65365e:     }
1:e65365e: 
1:e65365e:     /**
1:e65365e:      * Get the location of jars of old release. The location is specified 
1:e65365e:      * in the property derbyTesting.oldReleasePath. If derbyTesting.oldReleasePath
1:e65365e:      * is set to the empty string it is ignored.
1:e65365e:      *  
1:e65365e:      * @return location of jars of old release
1:e65365e:      */
1:e65365e:     private static String getOldJarLocation(int[] oldVersion) {
1:e65365e:       
1:e65365e:         if (jarPath == null || jarPath.length() == 0)
2:e65365e:             return null;
1:e65365e:         
1:e65365e:         String version = getTextVersion(oldVersion);
1:e65365e:         String jarLocation = jarPath + File.separator + version;
1:e65365e:         
1:e65365e:         return jarLocation;
1:e65365e:     }
1:e65365e: 
1:e65365e:     /**
1:e65365e:      * Get the location of jars of old release, using the url for svn at apache.
1:e65365e:      *  
1:e65365e:      * @return location of jars of old release
1:e65365e:      */
1:e65365e:     private static String getOldJarURLLocation(int[] oldVersion) {
1:e65365e: 
1:e65365e:         String oldJarUrl = _Suite.OLD_JAR_URL;
1:e65365e:         
1:e65365e:         String version = getTextVersion(oldVersion);
1:e65365e:         String jarLocation = oldJarUrl + "/" + version;
1:e65365e:         
1:e65365e:         return jarLocation;       
1:e65365e:     }
1:e65365e: 
1:e65365e:     /**
1:e65365e:      * Create a class loader using jars in the specified location. Add all jars 
1:e65365e:      * specified in jarFiles and the testing jar.
1:e65365e:      * 
1:e65365e:      * @param version the Derby version to create a classloader for.
1:e65365e:      * @return class loader
1:e65365e:      */
1:e65365e:     private static ClassLoader createClassLoader(int[] version)
1:e65365e:     {
1:e65365e:         URL[] url = new URL[jarFiles.length];
1:e65365e:         
1:e65365e:         String jarLocation = getOldJarLocation(version);
1:e65365e:         
1:e65365e:         if (jarLocation != null)
1:e65365e:         {
1:e65365e:             File lib = new File(jarLocation);
1:e65365e: 
1:e65365e:             // If the jars do not exist then return null
1:e65365e:             // and the caller will set up to skip this.
1:e65365e:             if (!lib.exists()){
1:e65365e:                 BaseTestCase.alarm("Non-existing location for jar files: '" 
1:e65365e:                     + jarLocation + "'. Upgrade tests can NOT be run!");
1:e65365e:                 return null;
1:e65365e:             }
1:e65365e: 
1:e65365e:             for (int i=0; i < jarFiles.length; i++) {
1:e65365e:                 try {
1:eec86ed:                     url[i] = new File(lib, jarFiles[i]).toURI().toURL();
1:e65365e:                 } catch (MalformedURLException e) {
1:e65365e:                     Assert.fail(e.toString());
1:e65365e:                 }
1:e65365e:             }
1:e65365e:         }
1:e65365e:         else
1:e65365e:         
1:e65365e:         // if the property was not set, attempt to access the jars from 
1:e65365e:         // the saved svn location.
1:e65365e:         // Note, this means the test fails if there is no network connection
1:e65365e:         // (or the server at apache is down) unless the property is set
1:e65365e:         // to a valid location
1:e65365e:         {
1:e65365e:             String oldURLJarLocation = getOldJarURLLocation(version);
1:e65365e:             for (int i=0; i < jarFiles.length; i++) {
1:e65365e:                 try {
1:e65365e:                     url[i] = new URL(oldURLJarLocation + "/" + jarFiles[i]);
1:e65365e:                     Object dummy = url[i].getContent(); // IOException if not available.
1:e65365e:                 } catch (MalformedURLException e) {
1:e65365e:                     Assert.fail(e.toString());
1:e65365e:                 } catch (IOException e) {
1:9c32f1d:                     BaseTestCase.alarm("IOException connecting to location: " + oldURLJarLocation + ", msg: '" + e.getMessage() + "'." 
1:e65365e:                         + " Upgrade tests can NOT be run!");
1:9c32f1d:                         e.printStackTrace();
1:e65365e:                     return null;
1:e65365e:                 }
1:e65365e: 
1:e65365e:             }
1:e65365e:         }
1:e65365e: 
1:cd36286:         // Create a class loader which loads Derby classes from the specified
1:cd36286:         // URL, and JDBC classes and other system classes from the platform
1:cd36286:         // class loader.
1:cd36286:         ClassLoader oldVersionLoader =
1:cd36286:             new URLClassLoader(url, java.sql.Connection.class.getClassLoader());
1:e65365e: 
1:f89c1b5:         // DERBY-5316: We need to unload the JDBC driver when done with it,
1:f89c1b5:         // but that can only be done if the DriverUnloader class lives in a
1:f89c1b5:         // class-loader which is able to load the driver class.
1:f89c1b5:         return new ClassLoader(oldVersionLoader) {
1:f89c1b5:             protected Class findClass(String name)
1:f89c1b5:                     throws ClassNotFoundException {
1:f89c1b5:                 if (name.equals(DriverUnloader.class.getName())) {
1:f89c1b5:                     try {
1:f89c1b5:                         byte[] b = fetchDriverUnloaderBytes();
1:f89c1b5:                         return defineClass(name, b, 0, b.length);
1:f89c1b5:                     } catch (IOException ioe) {
1:f89c1b5:                         throw new ClassNotFoundException(name, ioe);
1:f89c1b5:                     }
1:f89c1b5:                 }
1:f89c1b5:                 throw new ClassNotFoundException(name);
1:f89c1b5:             }
1:f89c1b5:         };
1:e65365e:     }
1:f89c1b5: 
1:f89c1b5:     /**
1:f89c1b5:      * Get a byte array with the contents of the class file for the
1:f89c1b5:      * {@code DriverUnloader} class.
1:f89c1b5:      */
1:f89c1b5:     private static byte[] fetchDriverUnloaderBytes() throws IOException {
1:f89c1b5:         InputStream in =
1:f89c1b5:             DriverUnloader.class.getResourceAsStream("DriverUnloader.class");
1:f89c1b5:         try {
1:f89c1b5:             ByteArrayOutputStream out = new ByteArrayOutputStream();
1:f89c1b5:             byte[] buf = new byte[4096];
1:f89c1b5:             int len;
1:f89c1b5:             while ((len = in.read(buf)) > 0) {
1:f89c1b5:                 out.write(buf, 0, len);
1:f89c1b5:             }
1:f89c1b5:             return out.toByteArray();
1:f89c1b5:         } finally {
1:f89c1b5:             in.close();
1:f89c1b5:         }
1:f89c1b5:     }
1:e65365e: }
1:e65365e: 
1:e65365e:     
1:e65365e: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cd36286
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Create a class loader which loads Derby classes from the specified
1:         // URL, and JDBC classes and other system classes from the platform
1:         // class loader.
1:         ClassLoader oldVersionLoader =
1:             new URLClassLoader(url, java.sql.Connection.class.getClassLoader());
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:     static final String oldVersionsPath =
1:             getSystemProperty(_Suite.OLD_VERSIONS_PATH_PROPERTY);
1:     static final String jarPath =
1:             getSystemProperty(_Suite.OLD_RELEASE_PATH_PROPERTY);
1:     private static String getSystemProperty(final String key) {
1:         return AccessController.doPrivileged(new PrivilegedAction<String>() {
1:             public String run() {
1:                 return System.getProperty(key);
1:         });
/////////////////////////////////////////////////////////////////////////
1:         ClassLoader oldLoader = AccessController.doPrivileged(
1:                 new PrivilegedAction<ClassLoader>() {
1:             public ClassLoader run() {
1:                 return createClassLoader(version);
1:         });
/////////////////////////////////////////////////////////////////////////
0:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
0:             public Void run() {
/////////////////////////////////////////////////////////////////////////
0:         return AccessController.doPrivileged(
0:                 new PrivilegedAction<ClassLoader>() {
0:             public ClassLoader run() {
commit:f89c1b5
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
0:         ClassLoader oldVersionLoader = new URLClassLoader(url, null);
1: 
1:         // DERBY-5316: We need to unload the JDBC driver when done with it,
1:         // but that can only be done if the DriverUnloader class lives in a
1:         // class-loader which is able to load the driver class.
1:         return new ClassLoader(oldVersionLoader) {
1:             protected Class findClass(String name)
1:                     throws ClassNotFoundException {
1:                 if (name.equals(DriverUnloader.class.getName())) {
1:                     try {
1:                         byte[] b = fetchDriverUnloaderBytes();
1:                         return defineClass(name, b, 0, b.length);
1:                     } catch (IOException ioe) {
1:                         throw new ClassNotFoundException(name, ioe);
1:                     }
1:                 }
1:                 throw new ClassNotFoundException(name);
1:             }
1:         };
1: 
1:     /**
1:      * Get a byte array with the contents of the class file for the
1:      * {@code DriverUnloader} class.
1:      */
1:     private static byte[] fetchDriverUnloaderBytes() throws IOException {
1:         InputStream in =
1:             DriverUnloader.class.getResourceAsStream("DriverUnloader.class");
1:         try {
1:             ByteArrayOutputStream out = new ByteArrayOutputStream();
1:             byte[] buf = new byte[4096];
1:             int len;
1:             while ((len = in.read(buf)) > 0) {
1:                 out.write(buf, 0, len);
1:             }
1:             return out.toByteArray();
1:         } finally {
1:             in.close();
1:         }
1:     }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:493b80e
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:eec86ed
/////////////////////////////////////////////////////////////////////////
1:                     url[i] = new File(lib, jarFiles[i]).toURI().toURL();
commit:e65365e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeClassLoader
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
1: import java.io.File;
1: import java.io.IOException;
0: import java.lang.reflect.Method;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.security.AccessController;
0: import java.util.Properties;
1: 
0: import junit.extensions.TestSetup;
1: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * <p>
1:  * This class factors out the machinery  needed to wrap a class loader around
1:  * the jar files for an old release.
1:  * </p>
1:  */
1: public class UpgradeClassLoader
1: {
1:     private static final String[] jarFiles = {
1:             "derby.jar", 
1:             //"derbynet.jar",
1:             //"derbyclient.jar",
1:             //"derbytools.jar"
1:             };
1: 
0:     static final String oldVersionsPath;
0:     static final String jarPath;
1:     
0:     static {
1:          
0:         oldVersionsPath = (String) AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1: 
0:             public Object run(){
0:             return System.getProperty(_Suite.OLD_VERSIONS_PATH_PROPERTY);
1: 
1:             }
1: 
1:         }
0:          );
1: 
0:          jarPath = (String ) AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1: 
0:             public Object run(){
0:             return System.getProperty(_Suite.OLD_RELEASE_PATH_PROPERTY);
1: 
1:             }
1: 
1:         }
0:          );
1:     }
1: 
1:     protected static String getTextVersion(int[] iv)
1:     {
1:         String version = iv[0] + "." + iv[1] +
1:         "." + iv[2] + "." + iv[3];
1:         return version;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Wrap a class loader around the given version.
1:      * </p>
1:      */
1:     public static ClassLoader makeClassLoader( final int[] version )
1:     {
0:         ClassLoader oldLoader = (ClassLoader )AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1: 
0:             public Object run(){
0:             return createClassLoader(version);
1: 
1:             }
1: 
1:         }
0:          );
1:         
1:         if (oldLoader == null)
1:         {
1:             BaseTestCase.traceit("Empty: Skip upgrade Tests (no jars) for " + getTextVersion(version));
1:         }
1:         
1:         return oldLoader;
1:     }
1: 
1:     /**
1:      * <p>
0:      * Force this thread to use a specific class loader.
1:      * </p>
1:      */
0:     public static void setThreadLoader(final ClassLoader which) {
1: 
0:         AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1:             
0:             public Object run()  { 
0:                 java.lang.Thread.currentThread().setContextClassLoader(which);
1:               return null;
1:             }
0:         });
1:     }
1:     
1:     /**
1:      * <p>
0:      * Retrieve the class loader currently being used by this thread.
1:      * </p>
1:      */
0:     public static ClassLoader getThreadLoader() {
1: 
0:         return (ClassLoader) AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1:             
0:             public Object run()  { 
0:                 return Thread.currentThread().getContextClassLoader();
1:             }
0:         });
1:     }
1: 
1:     /**
1:      * Get the location of jars of old release. The location is specified 
1:      * in the property derbyTesting.oldReleasePath. If derbyTesting.oldReleasePath
1:      * is set to the empty string it is ignored.
1:      *  
1:      * @return location of jars of old release
1:      */
1:     private static String getOldJarLocation(int[] oldVersion) {
1:       
1:         if (jarPath == null || jarPath.length() == 0)
1:             return null;
1:         
1:         String version = getTextVersion(oldVersion);
1:         String jarLocation = jarPath + File.separator + version;
1:         
1:         return jarLocation;
1:     }
1: 
1:     /**
1:      * Get the location of jars of old release, using the url for svn at apache.
1:      *  
1:      * @return location of jars of old release
1:      */
1:     private static String getOldJarURLLocation(int[] oldVersion) {
1: 
1:         String oldJarUrl = _Suite.OLD_JAR_URL;
1:         
1:         String version = getTextVersion(oldVersion);
1:         String jarLocation = oldJarUrl + "/" + version;
1:         
1:         return jarLocation;       
1:     }
1: 
1:     /**
1:      * Create a class loader using jars in the specified location. Add all jars 
1:      * specified in jarFiles and the testing jar.
1:      * 
1:      * @param version the Derby version to create a classloader for.
1:      * @return class loader
1:      */
1:     private static ClassLoader createClassLoader(int[] version)
1:     {
1:         URL[] url = new URL[jarFiles.length];
1:         
1:         String jarLocation = getOldJarLocation(version);
1:         
1:         if (jarLocation != null)
1:         {
1:             File lib = new File(jarLocation);
1: 
1:             // If the jars do not exist then return null
1:             // and the caller will set up to skip this.
1:             if (!lib.exists()){
1:                 BaseTestCase.alarm("Non-existing location for jar files: '" 
1:                     + jarLocation + "'. Upgrade tests can NOT be run!");
1:                 return null;
1:             }
1: 
1:             for (int i=0; i < jarFiles.length; i++) {
1:                 try {
0:                     url[i] = new File(lib, jarFiles[i]).toURL();
1:                 } catch (MalformedURLException e) {
1:                     Assert.fail(e.toString());
1:                 }
1:             }
1:         }
1:         else
1:         
1:         // if the property was not set, attempt to access the jars from 
1:         // the saved svn location.
1:         // Note, this means the test fails if there is no network connection
1:         // (or the server at apache is down) unless the property is set
1:         // to a valid location
1:         {
1:             String oldURLJarLocation = getOldJarURLLocation(version);
1:             for (int i=0; i < jarFiles.length; i++) {
1:                 try {
1:                     url[i] = new URL(oldURLJarLocation + "/" + jarFiles[i]);
1:                     Object dummy = url[i].getContent(); // IOException if not available.
1:                 } catch (MalformedURLException e) {
1:                     Assert.fail(e.toString());
1:                 } catch (IOException e) {
0:                     BaseTestCase.alarm("IOException msg: '" + e.getMessage() + "'." 
1:                         + " Upgrade tests can NOT be run!");
1:                     return null;
1:                 }
1: 
1:             }
1:         }
1:         
0:         // Specify null for parent class loader to avoid mixing up 
0:         // jars specified in the system classpath
0:         return new URLClassLoader(url, null);       
1:     }
1:     
1: }
1: 
1:     
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:9c32f1d
/////////////////////////////////////////////////////////////////////////
1:                     BaseTestCase.alarm("IOException connecting to location: " + oldURLJarLocation + ", msg: '" + e.getMessage() + "'." 
1:                         e.printStackTrace();
============================================================================