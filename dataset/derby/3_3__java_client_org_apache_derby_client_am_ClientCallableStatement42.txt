1:9206d5b: /*
1:9206d5b:  
1:9206d5b:    Derby - Class org.apache.derby.client.am.CallableStatement42
1:9206d5b:  
1:9206d5b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9206d5b:    contributor license agreements.  See the NOTICE file distributed with
1:9206d5b:    this work for additional information regarding copyright ownership.
1:9206d5b:    The ASF licenses this file to You under the Apache License, Version 2.0
1:9206d5b:    (the "License"); you may not use this file except in compliance with
1:9206d5b:    the License.  You may obtain a copy of the License at
1:9206d5b:  
1:9206d5b:       http://www.apache.org/licenses/LICENSE-2.0
1:9206d5b:  
1:9206d5b:    Unless required by applicable law or agreed to in writing, software
1:9206d5b:    distributed under the License is distributed on an "AS IS" BASIS,
1:9206d5b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9206d5b:    See the License for the specific language governing permissions and
1:9206d5b:    limitations under the License.
1:9206d5b:  
1:9206d5b:  */
1:9206d5b: 
1:9206d5b: package org.apache.derby.client.am;
1:9206d5b: 
1:9206d5b: import java.sql.SQLException;
1:9206d5b: import java.sql.SQLType;
1:9206d5b: import org.apache.derby.client.ClientPooledConnection;
1:9206d5b: 
1:9206d5b: 
1:9a0cdf1: public class ClientCallableStatement42 extends ClientCallableStatement
1:17efc16: {    
1:9206d5b:     /**
1:9206d5b:      * Calls the superclass constructor and passes the parameters
1:9206d5b:      *
1:9206d5b:      * @param agent       The instance of NetAgent associated with this
1:9206d5b:      *                    CallableStatement object.
1:9206d5b:      * @param connection  The connection object associated with this
1:9206d5b:      *                    PreparedStatement Object.
1:9206d5b:      * @param sql         A String object that is the SQL statement to be sent 
1:9206d5b:      *                    to the database.
1:9206d5b:      * @param type        One of the ResultSet type constants
1:9206d5b:      * @param concurrency One of the ResultSet concurrency constants
1:9206d5b:      * @param holdability One of the ResultSet holdability constants
1:9206d5b:      * @param cpc         The PooledConnection object that will be used to 
1:9206d5b:      *                    notify the PooledConnection reference of the Error 
1:9206d5b:      *                    Occurred and the Close events.
1:9206d5b:      * @throws SqlException
1:9206d5b:      */
1:69e3d06:     public ClientCallableStatement42(Agent agent,
1:69e3d06:         ClientConnection connection,
1:9206d5b:         String sql,
1:9206d5b:         int type, int concurrency, int holdability,
1:9206d5b:         ClientPooledConnection cpc) throws SqlException {
1:9206d5b:         super(agent, connection, sql, type, concurrency, holdability,cpc);        
11:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType )
1:9206d5b:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             registerOutParameter( parameterIndex, Utils42.getTypeAsInt( agent_, sqlType ) );
1:17efc16:         }
1:17efc16:     }
1:9206d5b: 
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, int scale )
1:9206d5b:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType, scale );
1:9206d5b:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             registerOutParameter( parameterIndex, Utils42.getTypeAsInt( agent_, sqlType ), scale );
1:9206d5b:         }
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, String typeName )
1:9206d5b:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType, typeName );
1:9206d5b:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             registerOutParameter( parameterIndex, Utils42.getTypeAsInt(agent_, sqlType ), typeName );
1:9206d5b:         }
1:9206d5b:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName, SQLType sqlType )
1:9206d5b:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ) );
1:17efc16:         }
1:17efc16:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName, SQLType sqlType, int scale )
1:9206d5b:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType, scale );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ), scale );
1:17efc16:         }
1:17efc16:     }
1:9206d5b:     
1:9206d5b:     public  void registerOutParameter( String parameterName,  SQLType sqlType, String typeName )
1:9206d5b:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType, typeName );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ), typeName );
1:17efc16:         }
1:17efc16:     }
1:17efc16: 
1:17efc16:     public  void setObject
1:69e3d06:         ( int parameterIndex, Object x, SQLType sqlType )
1:17efc16:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "setObject", parameterIndex, x, sqlType );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             setObject( parameterIndex, x, Utils42.getTypeAsInt(agent_, sqlType ) );
1:17efc16:         }
1:17efc16:     }
1:17efc16:     
1:17efc16:     public void setObject
1:69e3d06:         ( int parameterIndex, Object x, SQLType sqlType, int scaleOrLength )
1:17efc16:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:39b3237:                 agent_.logWriter_.traceEntry( this, "setObject", parameterIndex, x, sqlType, scaleOrLength );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             setObject( parameterIndex, x, Utils42.getTypeAsInt(agent_, sqlType ), scaleOrLength );
1:17efc16:         }
1:17efc16:     }
1:17efc16: 
1:17efc16:     public  void setObject( String parameterName, Object x, SQLType sqlType )
1:17efc16:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "setObject", parameterName, x, sqlType );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             setObject( parameterName, x, Utils42.getTypeAsInt(agent_, sqlType ) );
1:17efc16:         }
1:17efc16:     }
1:17efc16:     
1:17efc16:     public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )
1:17efc16:         throws SQLException
1:17efc16:     {
1:01c7f83:         synchronized (connection_) {
1:01c7f83:             if (agent_.loggingEnabled()) {
1:01c7f83:                 agent_.logWriter_.traceEntry( this, "setObject", parameterName, x, sqlType, scaleOrLength );
1:17efc16:             }
1:01c7f83:             
1:01c7f83:             checkStatus();
1:01c7f83:             setObject( parameterName, x, Utils42.getTypeAsInt(agent_, sqlType ), scaleOrLength );
1:17efc16:         }
1:17efc16:     }
1:9206d5b: 
1:17efc16: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:                 agent_.logWriter_.traceEntry( this, "setObject", parameterIndex, x, sqlType, scaleOrLength );
commit:01c7f83
/////////////////////////////////////////////////////////////////////////
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType );
1:             
1:             checkStatus();
1:             registerOutParameter( parameterIndex, Utils42.getTypeAsInt( agent_, sqlType ) );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType, scale );
1:             
1:             checkStatus();
1:             registerOutParameter( parameterIndex, Utils42.getTypeAsInt( agent_, sqlType ), scale );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType, typeName );
1:             
1:             checkStatus();
1:             registerOutParameter( parameterIndex, Utils42.getTypeAsInt(agent_, sqlType ), typeName );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType );
1:             
1:             checkStatus();
1:             registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ) );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType, scale );
1:             
1:             checkStatus();
1:             registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ), scale );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType, typeName );
1:             
1:             checkStatus();
1:             registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ), typeName );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "setObject", parameterIndex, x, sqlType );
1:             
1:             checkStatus();
1:             setObject( parameterIndex, x, Utils42.getTypeAsInt(agent_, sqlType ) );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
0:                 agent_.logWriter_.traceEntry( this, "setObject", new Integer( parameterIndex ), x, sqlType, new Integer( scaleOrLength ) );
1:             
1:             checkStatus();
1:             setObject( parameterIndex, x, Utils42.getTypeAsInt(agent_, sqlType ), scaleOrLength );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "setObject", parameterName, x, sqlType );
1:             
1:             checkStatus();
1:             setObject( parameterName, x, Utils42.getTypeAsInt(agent_, sqlType ) );
1:         synchronized (connection_) {
1:             if (agent_.loggingEnabled()) {
1:                 agent_.logWriter_.traceEntry( this, "setObject", parameterName, x, sqlType, scaleOrLength );
1:             
1:             checkStatus();
1:             setObject( parameterName, x, Utils42.getTypeAsInt(agent_, sqlType ), scaleOrLength );
commit:17efc16
/////////////////////////////////////////////////////////////////////////
0:         try
1:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType );
1:                 }
0:                 checkForClosedStatement();
0:                 registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ) );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
0:         try
1:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType, scale );
1:                 }
0:                 checkForClosedStatement();
0:                 registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ), scale );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
0:         try
1:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterName, sqlType, typeName );
1:                 }
0:                 checkForClosedStatement();
0:                 registerOutParameter( parameterName, Utils42.getTypeAsInt(agent_, sqlType ), typeName );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
1:     }
1: 
1:     public  void setObject
0:         ( int parameterIndex, java.lang.Object x, SQLType sqlType )
1:         throws SQLException
1:     {
0:         try
1:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "setObject", parameterIndex, x, sqlType );
1:                 }
0:                 checkForClosedStatement();
0:                 setObject( parameterIndex, x, Utils42.getTypeAsInt(agent_, sqlType ) );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
1:     }
1:     
1:     public void setObject
0:         ( int parameterIndex, java.lang.Object x, SQLType sqlType, int scaleOrLength )
1:         throws SQLException
1:     {
0:         try
1:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "setObject", new Integer( parameterIndex ), x, sqlType, new Integer( scaleOrLength ) );
1:                 }
0:                 checkForClosedStatement();
0:                 setObject( parameterIndex, x, Utils42.getTypeAsInt(agent_, sqlType ), scaleOrLength );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
1:     }
1: 
1:     public  void setObject( String parameterName, Object x, SQLType sqlType )
1:         throws SQLException
1:     {
0:         try
1:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "setObject", parameterName, x, sqlType );
1:                 }
0:                 checkForClosedStatement();
0:                 setObject( parameterName, x, Utils42.getTypeAsInt(agent_, sqlType ) );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
1:     }
1:     
1:     public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )
1:         throws SQLException
1:     {
0:         try
1:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "setObject", parameterName, x, sqlType, scaleOrLength );
1:                 }
0:                 checkForClosedStatement();
0:                 setObject( parameterName, x, Utils42.getTypeAsInt(agent_, sqlType ), scaleOrLength );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
commit:9206d5b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.client.am.CallableStatement42
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.client.am;
1: 
1: import java.sql.SQLException;
1: import java.sql.SQLType;
1: import org.apache.derby.client.ClientPooledConnection;
0: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: 
0: public class CallableStatement42 extends CallableStatement40
0: {    
1:     /**
1:      * Calls the superclass constructor and passes the parameters
1:      *
1:      * @param agent       The instance of NetAgent associated with this
1:      *                    CallableStatement object.
1:      * @param connection  The connection object associated with this
1:      *                    PreparedStatement Object.
1:      * @param sql         A String object that is the SQL statement to be sent 
1:      *                    to the database.
1:      * @param type        One of the ResultSet type constants
1:      * @param concurrency One of the ResultSet concurrency constants
1:      * @param holdability One of the ResultSet holdability constants
1:      * @param cpc         The PooledConnection object that will be used to 
1:      *                    notify the PooledConnection reference of the Error 
1:      *                    Occurred and the Close events.
1:      * @throws SqlException
1:      */
0:     public CallableStatement42(Agent agent,
0:         Connection connection,
1:         String sql,
1:         int type, int concurrency, int holdability,
1:         ClientPooledConnection cpc) throws SqlException {
1:         super(agent, connection, sql, type, concurrency, holdability,cpc);        
1:     }
1:     
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType )
1:         throws SQLException
0:     {
0:         try
0:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType );
1:                 }
0:                 checkForClosedStatement();
0:                 registerOutParameter( parameterIndex, Utils42.getTypeAsInt( agent_, sqlType ) );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
1:     }
1: 
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, int scale )
1:         throws SQLException
0:     {
0:         try
0:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType, scale );
1:                 }
0:                 checkForClosedStatement();
0:                 registerOutParameter( parameterIndex, Utils42.getTypeAsInt( agent_, sqlType ), scale );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
1:     }
1:     
1:     public  void registerOutParameter( int parameterIndex, SQLType sqlType, String typeName )
1:         throws SQLException
0:     {
0:         try
0:         {
0:             synchronized (connection_) {
0:                 if (agent_.loggingEnabled()) {
0:                     agent_.logWriter_.traceEntry( this, "registerOutParameter", parameterIndex, sqlType, typeName );
1:                 }
0:                 checkForClosedStatement();
0:                 registerOutParameter( parameterIndex, Utils42.getTypeAsInt(agent_, sqlType ), typeName );
1:             }
1:         }
0:         catch ( SqlException se )  { throw se.getSQLException(); }
1:     }
1:     
1:     public  void registerOutParameter( String parameterName, SQLType sqlType )
1:         throws SQLException
0:     {
0:         throw jdbcMethodNotImplemented();
1:     }
1:     
1:     public  void registerOutParameter( String parameterName, SQLType sqlType, int scale )
1:         throws SQLException
0:     {
0:         throw jdbcMethodNotImplemented();
1:     }
1:     
1:     public  void registerOutParameter( String parameterName,  SQLType sqlType, String typeName )
1:         throws SQLException
0:     {
0:         throw jdbcMethodNotImplemented();
1:     }
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: public class ClientCallableStatement42 extends ClientCallableStatement
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
0: public class ClientCallableStatement42 extends ClientCallableStatement40
/////////////////////////////////////////////////////////////////////////
1:     public ClientCallableStatement42(Agent agent,
1:         ClientConnection connection,
/////////////////////////////////////////////////////////////////////////
1:         ( int parameterIndex, Object x, SQLType sqlType )
/////////////////////////////////////////////////////////////////////////
1:         ( int parameterIndex, Object x, SQLType sqlType, int scaleOrLength )
============================================================================