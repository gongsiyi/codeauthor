4:50d0853: /*
8:50d0853:  
1:50d0853:    Derby - Class 
1:50d0853:         org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception
1:21350fd:  
1:6e3dbab:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6e3dbab:    contributor license agreements.  See the NOTICE file distributed with
1:6e3dbab:    this work for additional information regarding copyright ownership.
1:6e3dbab:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6e3dbab:    (the "License"); you may not use this file except in compliance with
1:6e3dbab:    the License.  You may obtain a copy of the License at
1:50d0853:  
1:50d0853:       http://www.apache.org/licenses/LICENSE-2.0
1:50d0853:  
1:50d0853:    Unless required by applicable law or agreed to in writing, software
1:50d0853:    distributed under the License is distributed on an "AS IS" BASIS,
1:50d0853:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50d0853:    See the License for the specific language governing permissions and
1:50d0853:    limitations under the License.
1:50d0853:  
4:50d0853:  */
1:21350fd: 
1:50d0853: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1:21350fd: 
1:50d0853: import java.sql.Connection;
1:507841d: import java.sql.SQLNonTransientConnectionException;
1:50d0853: import java.sql.Statement;
1:50d0853: import java.sql.SQLDataException;
1:50d0853: import java.sql.SQLException;
1:50d0853: import java.sql.SQLIntegrityConstraintViolationException;
1:50d0853: import java.sql.SQLSyntaxErrorException;
1:50d0853: import java.sql.SQLTransactionRollbackException;
1:50d0853: 
1:507841d: import javax.sql.DataSource;
1:50d0853: 
1:50d0853: import junit.framework.Test;
1:f48e0cd: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:ec5ae26: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:507841d: import org.apache.derbyTesting.junit.J2EEDataSource;
1:507841d: import org.apache.derbyTesting.junit.JDBCDataSource;
1:ec5ae26: import org.apache.derbyTesting.junit.TestConfiguration;
1:21350fd: 
1:f48e0cd: public class TestJDBC40Exception extends BaseJDBCTestCase {
1:21350fd: 
1:f48e0cd:     public TestJDBC40Exception(String name) {
1:f48e0cd:         super(name);
1:50d0853:     }
1:50d0853: 
1:50d0853:     public static Test suite() {
1:ec5ae26:         Test suite = TestConfiguration.defaultSuite(TestJDBC40Exception.class);
1:ec5ae26:         return DatabasePropertyTestSetup.setLockTimeouts(suite, -1, 2);
1:50d0853:     }
1:50d0853: 
1:f48e0cd:     protected void setUp() throws SQLException {
1:f48e0cd:         Statement s = createStatement();
1:f48e0cd:         s.execute("create table EXCEPTION_TABLE1 (id integer " +
1:50d0853:                   "primary key, data varchar (5))");
1:f48e0cd:         s.execute("insert into EXCEPTION_TABLE1 (id, data)" +
2:50d0853:                   "values (1, 'data1')");
1:f48e0cd:         s.close();
1:50d0853:     }
1:50d0853: 
1:f48e0cd:     protected void tearDown() throws Exception {
1:9b52936:         Statement s = createStatement();
1:9b52936:         s.execute("drop table EXCEPTION_TABLE1");
1:9b52936:         s.close();
1:9b52936:         commit();
1:f48e0cd:         super.tearDown();
1:50d0853:     }
1:50d0853: 
1:f48e0cd:     public void testIntegrityConstraintViolationException()
1:f48e0cd:             throws SQLException {
1:50d0853:         try {
1:f48e0cd:             createStatement().execute(
1:f48e0cd:                 "insert into EXCEPTION_TABLE1 (id, data) values (1, 'data1')");
1:f48e0cd:             fail("Statement didn't fail.");
1:50d0853:         } catch (SQLIntegrityConstraintViolationException e) {
1:f48e0cd:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:f48e0cd:                        e.getSQLState().startsWith("23"));
1:50d0853:         }
1:50d0853:     }
1:50d0853:     
1:f48e0cd:     public void testDataException() throws SQLException {
1:50d0853:         try {
1:f48e0cd:             createStatement().execute(
1:f48e0cd:                 "insert into EXCEPTION_TABLE1 (id, data)" +
1:50d0853:                 "values (2, 'data1234556')");
1:f48e0cd:             fail("Statement didn't fail.");
1:50d0853:         } catch (SQLDataException e) {
1:f48e0cd:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:f48e0cd:                        e.getSQLState().startsWith("22"));
1:50d0853:         }
1:50d0853:     }
1:50d0853:     
1:f48e0cd:     public void testConnectionException() throws SQLException {
1:f48e0cd:         Statement stmt = createStatement();
1:f48e0cd:         getConnection().close();
1:50d0853:         try {
1:50d0853:             stmt.execute("select * from exception1");
1:f48e0cd:             fail("Statement didn't fail.");
1:507841d:         } catch (SQLNonTransientConnectionException cone) {
1:f48e0cd:             assertTrue("Unexpected SQL State: " + cone.getSQLState(),
1:f48e0cd:                        cone.getSQLState().startsWith("08"));
1:50d0853:         }
1:50d0853:         
1:507841d:         if (usingEmbedded())
1:507841d:         {
1:507841d:         	// test exception after database shutdown
1:507841d:         	// DERBY-3074
1:507841d:         	stmt = createStatement();
1:507841d:         	TestConfiguration.getCurrent().shutdownDatabase();
1:50d0853:         	try {
1:507841d:         		stmt.execute("select * from exception1");
1:507841d:         		fail("Statement didn't fail.");
1:507841d:         	} catch (SQLNonTransientConnectionException cone) {
1:507841d:         		assertTrue("Unexpected SQL State: " + cone.getSQLState(),
1:507841d:         				cone.getSQLState().startsWith("08"));        	  
1:50d0853:         	}
1:50d0853:         }
1:507841d:         // test connection to server which is not up.
1:507841d:         // DERBY-3075
1:507841d:         if (usingDerbyNetClient()) {
1:507841d:         	DataSource ds = JDBCDataSource.getDataSource();
1:39b3237:         	JDBCDataSource.setBeanProperty(ds, "portNumber", 0);
1:50d0853:         	try {
1:507841d:         		ds.getConnection();
1:507841d:         	} catch (SQLNonTransientConnectionException cone) {
1:507841d:         		assertTrue("Unexpected SQL State: " + cone.getSQLState(),
1:507841d:         				cone.getSQLState().startsWith("08"));   
1:50d0853:         	}
1:50d0853:         }
1:50d0853: 
4:507841d:     }
1:50d0853:     
1:f48e0cd:     public void testSyntaxErrorException() throws SQLException {
1:507841d:         try {
1:f48e0cd:             createStatement().execute("insert into EXCEPTION_TABLE1 " +
1:f48e0cd:                                       "(id, data) values ('2', 'data1')");
1:f48e0cd:             fail("Statement didn't fail.");
1:50d0853:         } catch (SQLSyntaxErrorException e) {
1:f48e0cd:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:f48e0cd:                        e.getSQLState().startsWith("42"));
1:50d0853:         }
1:50d0853:     }
1:50d0853: 
1:f48e0cd:     public void testTimeout() throws SQLException {
1:f48e0cd:         Connection con1 = openDefaultConnection();
1:f48e0cd:         Connection con2 = openDefaultConnection();
1:50d0853:         con1.setAutoCommit(false);
1:50d0853:         con2.setAutoCommit(false);
1:50d0853:         con1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:50d0853:         con2.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:f48e0cd:         con1.createStatement().execute(
1:f48e0cd:             "select * from EXCEPTION_TABLE1 for update");
1:507841d:         try {
1:f48e0cd:             con2.createStatement().execute(
1:f48e0cd:                 "select * from EXCEPTION_TABLE1 for update");
1:f48e0cd:             fail("Statement didn't fail.");
1:50d0853:         } catch (SQLTransactionRollbackException e) {
1:f48e0cd:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:f48e0cd:                        e.getSQLState().startsWith("40"));
1:50d0853:         }
1:f48e0cd:         con1.rollback();
1:f48e0cd:         con1.close();
1:f48e0cd:         con2.rollback();
1:f48e0cd:         con2.close();
1:50d0853:     }
1:50d0853: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:         	JDBCDataSource.setBeanProperty(ds, "portNumber", 0);
commit:6e3dbab
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:21350fd
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.tools.ij;
1: 
0: 	private	static	String[]	_startupArgs;
1: 	
/////////////////////////////////////////////////////////////////////////
0:     private Connection getConnection () throws Exception {
0: 		// use the ij utility to read the property file and
0: 		// make the initial connection.
0: 		ij.getPropertyArg( _startupArgs );
1: 		
0: 		Connection	conn_main = ij.startJBMS();
1: 		
0:         return conn_main;
/////////////////////////////////////////////////////////////////////////
1: 
0: 		_startupArgs = args;
commit:50d0853
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class 
1:         org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbc4;
1: 
1: import java.sql.Connection;
1: import java.sql.Statement;
1: import java.sql.SQLDataException;
1: import java.sql.SQLException;
1: import java.sql.SQLIntegrityConstraintViolationException;
1: import java.sql.SQLSyntaxErrorException;
0: import java.sql.SQLTransientConnectionException;
1: import java.sql.SQLTransactionRollbackException;
1: import junit.framework.Test;
0: import junit.framework.TestResult;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.functionTests.tests.derbynet.testconnection;
1: 
0: public class TestJDBC40Exception {    
1:     
0:     private static final String EXCEPTION_TABLE1 = "EXCEPTION_TABLE1";
0:     public TestJDBC40Exception() {
1:     }
1:     
1:     /*
0:      * Stub methods to be removed after 623 is fixed and test is 
0:      * moved to use junit
1:      */
0:     private Connection getConnection () throws SQLException {
0:         return new TestConnection ().createEmbeddedConnection();
1:     }
1:     
1:     /*
0:      * Stub methods to be removed after 623 is fixed and test is 
0:      * moved to use junit
1:      */
0:     private void close (Connection conn) throws SQLException {
0:         conn.close ();
1:     }
1: 
1:     /*
0:      * Stub methods to be removed after 623 is fixed and test is 
0:      * moved to use junit
1:      */    
0:     private void execute (Connection conn, String sql) throws SQLException {
0:         Statement stmt = conn.createStatement ();
0:         stmt.execute (sql);
0:         stmt.close ();
1:     }
1:     
1:     public static Test suite() {
0:         TestSuite testSuite = new TestSuite();
0:         testSuite.addTestSuite(TestJDBC40Exception.class);
0:         return testSuite;
1:     }
1:     
1:     
0:     public void testException() throws Exception{
0:         Connection conn = getConnection();
0:         execute(conn,  "create table " + EXCEPTION_TABLE1 + "(id integer " +
1:                 "primary key, data varchar (5))");
0:         execute(conn, "insert into " + EXCEPTION_TABLE1 + "(id, data)" +
1:                 "values (1, 'data1')");
0:         close(conn);
0:         checkDataException();
0:         checkIntegrityConstraintViolationException();
0:         checkSyntaxErrorException();
0:         checkConnectionException();
0:         checkTimeout();
1:     }
1:     
0:     private void checkIntegrityConstraintViolationException() throws Exception {
0:         Connection conn = getConnection();
1:         try {
0:             execute(conn, "insert into " + EXCEPTION_TABLE1 + "(id, data)" +
1:                     "values (1, 'data1')");
1:         } catch (SQLIntegrityConstraintViolationException e) {
0:               if (!e.getSQLState().startsWith ("23"))
0:                 System.out.println ("Unexpected SQL State" + e.getSQLState());
1:         }
1:     }
1:     
0:     private void checkDataException() throws Exception{
0:         Connection conn = getConnection();
1:         try {
0:             execute(conn, "insert into " + EXCEPTION_TABLE1 + "(id, data)" +
1:                     "values (2, 'data1234556')");
1:         } catch (SQLDataException e) {
0:              if (!e.getSQLState().startsWith ("22"))
0:                 System.out.println ("Unexpected SQL State" + e.getSQLState());
1:         }
1:     }
1:     
0:     private void checkConnectionException() throws Exception {
0:         Statement stmt = null;
0:         Connection con = null;
1:         try {
0:             con = getConnection();
0:             stmt = con.createStatement();
0:             con.close();
1:             stmt.execute("select * from exception1");
0:         } catch (SQLTransientConnectionException cone) {
0:             if (!cone.getSQLState().startsWith ("08"))
0:                 System.out.println ("Unexpected SQL State" + cone.getSQLState());
1:         }
1:     }
1:     
0:     private void checkSyntaxErrorException() throws Exception{
0:         Connection conn = getConnection();
1:         try {
0:             execute(conn, "insert into " + EXCEPTION_TABLE1 + "(id, data)" +
0:                     "values ('2', 'data1')");
1:         } catch (SQLSyntaxErrorException e) {
0:             if (!e.getSQLState().startsWith ("42"))
0:                 System.out.println ("Unexpected SQL State" + e.getSQLState());
1:         }
1:     }
1:     
0:     private void checkTimeout() throws Exception {
0:         Connection con1 = getConnection();
0:         Connection con2 = getConnection();
1:         try {
1:             con1.setAutoCommit(false);
1:             con2.setAutoCommit(false);
1:             con1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:             con2.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
0:             execute(con1, "select * from " + EXCEPTION_TABLE1 + " for update");
0:             execute(con2, "select * from " + EXCEPTION_TABLE1 + " for update");
1:         } catch (SQLTransactionRollbackException e) {
0:               if (!e.getSQLState().startsWith ("40"))
0:                 System.out.println ("Unexpected SQL State" + e.getSQLState());
1:         }
1:     }
1:     
1:     
0:     public static void main(String [] args) throws Exception {    
0:         TestJDBC40Exception test = new TestJDBC40Exception ();
0:         test.testException ();
1:     }
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:507841d
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLNonTransientConnectionException;
0: 
1: import javax.sql.DataSource;
0: 
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
/////////////////////////////////////////////////////////////////////////
1:         } catch (SQLNonTransientConnectionException cone) {
0:         
1:         if (usingEmbedded())
1:         {
1:         	// test exception after database shutdown
1:         	// DERBY-3074
1:         	stmt = createStatement();
1:         	TestConfiguration.getCurrent().shutdownDatabase();
1:         	try {
1:         		stmt.execute("select * from exception1");
1:         		fail("Statement didn't fail.");
1:         	} catch (SQLNonTransientConnectionException cone) {
1:         		assertTrue("Unexpected SQL State: " + cone.getSQLState(),
1:         				cone.getSQLState().startsWith("08"));        	  
1:         	}
1:         }
1:         // test connection to server which is not up.
1:         // DERBY-3075
1:         if (usingDerbyNetClient()) {
1:         	DataSource ds = JDBCDataSource.getDataSource();
0:         	JDBCDataSource.setBeanProperty(ds, "portNumber", new Integer(0));
1:         	try {
1:         		ds.getConnection();
1:         	} catch (SQLNonTransientConnectionException cone) {
1:         		assertTrue("Unexpected SQL State: " + cone.getSQLState(),
1:         				cone.getSQLState().startsWith("08"));   
1:         	}
1:         }
0: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9b52936
/////////////////////////////////////////////////////////////////////////
1:         Statement s = createStatement();
1:         s.execute("drop table EXCEPTION_TABLE1");
1:         s.close();
1:         commit();
commit:ec5ae26
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1:         Test suite = TestConfiguration.defaultSuite(TestJDBC40Exception.class);
1:         return DatabasePropertyTestSetup.setLockTimeouts(suite, -1, 2);
/////////////////////////////////////////////////////////////////////////
commit:f48e0cd
/////////////////////////////////////////////////////////////////////////
0: import java.sql.CallableStatement;
0: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derby.iapi.reference.Property;
1: public class TestJDBC40Exception extends BaseJDBCTestCase {
0:     /** Timeout value to restore to in tearDown(). */
0:     private int oldTimeout;
1:     public TestJDBC40Exception(String name) {
1:         super(name);
1:     protected void setUp() throws SQLException {
1:         Statement s = createStatement();
1:         s.execute("create table EXCEPTION_TABLE1 (id integer " +
0:                   "primary key, data varchar (5))");
1:         s.execute("insert into EXCEPTION_TABLE1 (id, data)" +
0:                   "values (1, 'data1')");
0:         // lower waitTimeout, otherwise testTimeout takes forever
0:         oldTimeout = getWaitTimeout();
0:         setWaitTimeout(2);
1:         s.close();
0:     }
0: 
1:     protected void tearDown() throws Exception {
0:         createStatement().execute("drop table EXCEPTION_TABLE1");
0:         setWaitTimeout(oldTimeout);
1:         super.tearDown();
0:     }
0: 
0:     /**
0:      * Set the value of the waitTimeout property.
0:      *
0:      * @param timeout time in seconds to wait for a lock
0:      * @exception SQLException if a database error occurs
0:      */
0:     private void setWaitTimeout(int timeout) throws SQLException {
0:         PreparedStatement ps = prepareStatement(
0:             "CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
0:             "'derby.locks.waitTimeout', ?)");
0:         ps.setInt(1, timeout);
0:         ps.execute();
0:         ps.close();
0:     }
0: 
0:     /**
0:      * Get the value of the waitTimeout property. If no timeout is set, use
0:      * org.apache.derby.iapi.reference.Property.WAIT_TIMEOUT_DEFAULT.
0:      *
0:      * @return the current timeout in seconds
0:      * @exception SQLException if a database error occurs
0:      */
0:     private int getWaitTimeout() throws SQLException {
0:         CallableStatement cs = prepareCall(
0:             "{ ? = CALL SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(" +
0:             "'derby.locks.waitTimeout') }");
0:         cs.registerOutParameter(1, Types.VARCHAR);
0:         cs.execute();
0:         int timeout = cs.getInt(1);
0:         if (cs.wasNull()) {
0:             timeout = Property.WAIT_TIMEOUT_DEFAULT;
0:         }
0:         cs.close();
0:         return timeout;
0:     }
0:     
1:     public void testIntegrityConstraintViolationException()
1:             throws SQLException {
0:         try {
1:             createStatement().execute(
1:                 "insert into EXCEPTION_TABLE1 (id, data) values (1, 'data1')");
1:             fail("Statement didn't fail.");
0:         } catch (SQLIntegrityConstraintViolationException e) {
1:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:                        e.getSQLState().startsWith("23"));
0:         }
0:     }
0:     
1:     public void testDataException() throws SQLException {
0:         try {
1:             createStatement().execute(
1:                 "insert into EXCEPTION_TABLE1 (id, data)" +
0:                 "values (2, 'data1234556')");
1:             fail("Statement didn't fail.");
0:         } catch (SQLDataException e) {
1:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:                        e.getSQLState().startsWith("22"));
0:         }
0:     }
0:     
1:     public void testConnectionException() throws SQLException {
1:         Statement stmt = createStatement();
1:         getConnection().close();
0:         try {
0:             stmt.execute("select * from exception1");
1:             fail("Statement didn't fail.");
0:         } catch (SQLTransientConnectionException cone) {
1:             assertTrue("Unexpected SQL State: " + cone.getSQLState(),
1:                        cone.getSQLState().startsWith("08"));
0:         }
0:     }
0:     
1:     public void testSyntaxErrorException() throws SQLException {
0:         try {
1:             createStatement().execute("insert into EXCEPTION_TABLE1 " +
1:                                       "(id, data) values ('2', 'data1')");
1:             fail("Statement didn't fail.");
0:         } catch (SQLSyntaxErrorException e) {
1:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:                        e.getSQLState().startsWith("42"));
0:         }
0:     }
0: 
1:     public void testTimeout() throws SQLException {
1:         Connection con1 = openDefaultConnection();
1:         Connection con2 = openDefaultConnection();
0:         con1.setAutoCommit(false);
0:         con2.setAutoCommit(false);
0:         con1.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
0:         con2.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:         con1.createStatement().execute(
1:             "select * from EXCEPTION_TABLE1 for update");
0:         try {
1:             con2.createStatement().execute(
1:                 "select * from EXCEPTION_TABLE1 for update");
1:             fail("Statement didn't fail.");
0:         } catch (SQLTransactionRollbackException e) {
1:             assertTrue("Unexpected SQL State: " + e.getSQLState(),
1:                        e.getSQLState().startsWith("40"));
0:         }
1:         con1.rollback();
1:         con1.close();
1:         con2.rollback();
1:         con2.close();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:         TestSuite testSuite = new TestSuite(TestJDBC40Exception.class,
0:                 "TestJDBC40Exception suite");
============================================================================