1:eac0369: /*
1:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.SQLLongvarchar
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:0cab10f: import java.text.RuleBasedCollator;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: 
2:eac0369: /**
1:403684d:  * SQLLongvarchar represents a LONG VARCHAR value with UCS_BASIC collation.
1:eac0369:  *
1:eac0369:  * SQLLongvarchar is mostly the same as SQLVarchar, so it is implemented as a
1:eac0369:  * subclass of SQLVarchar.  Only those methods with different behavior are
1:eac0369:  * implemented here.
1:eac0369:  */
1:eac0369: public class SQLLongvarchar
1:eac0369: 	extends SQLVarchar
1:eac0369: {
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface.
1:eac0369: 	 *
1:eac0369: 	 * These are actually all implemented in the super-class, but we need
1:eac0369: 	 * to duplicate some of them here so they can be called by byte-code
1:eac0369: 	 * generation, which needs to know the class the method appears in.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String getTypeName()
1:eac0369: 	{
1:eac0369: 		return TypeId.LONGVARCHAR_NAME;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:854dd10: 	/** @see DataValueDescriptor#cloneValue */
1:854dd10: 	public DataValueDescriptor cloneValue(boolean forceMaterialization)
1:eac0369: 	{
1:eac0369: 		try
1:eac0369: 		{
1:eac0369: 			return new SQLLongvarchar(getString());
1:eac0369: 		}
1:eac0369: 		catch (StandardException se)
1:eac0369: 		{
1:eac0369: 			if (SanityManager.DEBUG)
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", se);
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see DataValueDescriptor#getNewNull
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getNewNull()
1:eac0369: 	{
1:eac0369: 		return new SQLLongvarchar();
1:eac0369: 	}
1:eac0369: 
1:0cab10f: 	/** @see StringDataValue#getValue(RuleBasedCollator) */
1:0cab10f: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1:0cab10f: 	{
1:0cab10f: 		if (collatorForComparison == null)
1:0cab10f: 		{//null collatorForComparison means use UCS_BASIC for collation
1:0cab10f: 		    return this;			
1:0cab10f: 		} else {
1:0cab10f: 			//non-null collatorForComparison means use collator sensitive
1:0cab10f: 			//implementation of SQLLongvarchar
1:726b66f: 		     CollatorSQLLongvarchar s = new CollatorSQLLongvarchar(collatorForComparison);
1:0cab10f: 		     s.copyState(this);
1:0cab10f: 		     return s;
1:0cab10f: 		}
1:0cab10f: 	}
1:0cab10f: 
1:eac0369: 	/*
1:eac0369: 	 * Storable interface, implies Externalizable, TypedFormat
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 
1:eac0369: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1:eac0369: 	*/
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.SQL_LONGVARCHAR_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * constructors
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public SQLLongvarchar()
1:eac0369: 	{
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SQLLongvarchar(String val)
1:eac0369: 	{
1:eac0369: 		super(val);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected void normalize(DataTypeDescriptor desiredType, String sourceValue)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		//bug 5592 - for sql long varchar, any truncation is disallowed ie even the trailing blanks can't be truncated
1:eac0369: 		if (sourceValue.length() > desiredType.getMaximumWidth())
1:eac0369: 			throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, getTypeName(), StringUtil.formatForPrint(sourceValue), String.valueOf(desiredType.getMaximumWidth()));
1:eac0369: 
1:eac0369: 		setValue(sourceValue);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see StringDataValue#concatenate
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public StringDataValue concatenate(
1:eac0369: 				StringDataValue leftOperand,
1:eac0369: 				StringDataValue rightOperand,
1:eac0369: 				StringDataValue result)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:6d90df0: 		result = super.concatenate(leftOperand, rightOperand, result);
1:eac0369: 
1:eac0369: 		//bug 5600 - according to db2 concatenation documentation, for compatibility with previous versions, there is no automatic
1:eac0369: 		//escalation of results involving LONG data types to LOB data types. For eg, concatenation of a CHAR(200) value and a
1:eac0369: 		//completely full LONG VARCHAR value would result in an error rather than in a promotion to a CLOB data type
1:eac0369: 
1:eac0369: 		//need to check for concatenated string for null value
1:eac0369: 		if ((result.getString() != null) && (result.getString().length() > TypeId.LONGVARCHAR_MAXWIDTH))
1:eac0369: 			throw StandardException.newException(SQLState.LANG_CONCAT_STRING_OVERFLOW, "CONCAT", String.valueOf(TypeId.LONGVARCHAR_MAXWIDTH));
1:eac0369: 
1:eac0369: 		return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * DataValueDescriptor interface
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/* @see DataValueDescriptor#typePrecedence */
1:eac0369: 	public int typePrecedence()
1:eac0369: 	{
1:eac0369: 		return TypeId.LONGVARCHAR_PRECEDENCE;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6d90df0
/////////////////////////////////////////////////////////////////////////
1: 		result = super.concatenate(leftOperand, rightOperand, result);
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", se);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:18f3f91
/////////////////////////////////////////////////////////////////////////
commit:854dd10
/////////////////////////////////////////////////////////////////////////
1: 	/** @see DataValueDescriptor#cloneValue */
1: 	public DataValueDescriptor cloneValue(boolean forceMaterialization)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:726b66f
/////////////////////////////////////////////////////////////////////////
1: 		     CollatorSQLLongvarchar s = new CollatorSQLLongvarchar(collatorForComparison);
commit:403684d
/////////////////////////////////////////////////////////////////////////
1:  * SQLLongvarchar represents a LONG VARCHAR value with UCS_BASIC collation.
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.SQLLongvarchar
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.StringDataValue;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.util.StringUtil;
1: 
1: /**
0:  * SQLLongvarchar satisfies the DataValueDescriptor interfaces (i.e., OrderableDataType). It implements a String
0:  * holder, e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because OrderableDataType is a subclass of DataType,
0:  * SQLLongvarchar can play a role in either a DataType/ValueRow
0:  * or a OrderableDataType/KeyRow, interchangeably.
1:  *
1:  * SQLLongvarchar is mostly the same as SQLVarchar, so it is implemented as a
1:  * subclass of SQLVarchar.  Only those methods with different behavior are
1:  * implemented here.
1:  */
1: public class SQLLongvarchar
1: 	extends SQLVarchar
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/*
1: 	 * DataValueDescriptor interface.
1: 	 *
1: 	 * These are actually all implemented in the super-class, but we need
1: 	 * to duplicate some of them here so they can be called by byte-code
1: 	 * generation, which needs to know the class the method appears in.
1: 	 */
1: 
1: 	public String getTypeName()
1: 	{
1: 		return TypeId.LONGVARCHAR_NAME;
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
1: 	{
1: 		try
1: 		{
1: 			return new SQLLongvarchar(getString());
1: 		}
1: 		catch (StandardException se)
1: 		{
1: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unexpected exception " + se);
1: 			return null;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see DataValueDescriptor#getNewNull
1: 	 *
1: 	 */
1: 	public DataValueDescriptor getNewNull()
1: 	{
1: 		return new SQLLongvarchar();
1: 	}
1: 
1: 	/*
1: 	 * Storable interface, implies Externalizable, TypedFormat
1: 	 */
1: 
1: 	/**
1: 		Return my format identifier.
1: 
1: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
1: 	*/
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.SQL_LONGVARCHAR_ID;
1: 	}
1: 
1: 	/*
1: 	 * constructors
1: 	 */
1: 
1: 	public SQLLongvarchar()
1: 	{
1: 	}
1: 
1: 	public SQLLongvarchar(String val)
1: 	{
1: 		super(val);
1: 	}
1: 
1: 	protected void normalize(DataTypeDescriptor desiredType, String sourceValue)
1: 		throws StandardException
1: 	{
1: 		//bug 5592 - for sql long varchar, any truncation is disallowed ie even the trailing blanks can't be truncated
1: 		if (sourceValue.length() > desiredType.getMaximumWidth())
1: 			throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, getTypeName(), StringUtil.formatForPrint(sourceValue), String.valueOf(desiredType.getMaximumWidth()));
1: 
1: 		setValue(sourceValue);
1: 	}
1: 
1: 	/**
1: 	 * @see StringDataValue#concatenate
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public StringDataValue concatenate(
1: 				StringDataValue leftOperand,
1: 				StringDataValue rightOperand,
1: 				StringDataValue result)
1: 		throws StandardException
1: 	{
0: 		super.concatenate(leftOperand, rightOperand, result);
1: 
1: 		//bug 5600 - according to db2 concatenation documentation, for compatibility with previous versions, there is no automatic
1: 		//escalation of results involving LONG data types to LOB data types. For eg, concatenation of a CHAR(200) value and a
1: 		//completely full LONG VARCHAR value would result in an error rather than in a promotion to a CLOB data type
1: 
1: 		//need to check for concatenated string for null value
1: 		if ((result.getString() != null) && (result.getString().length() > TypeId.LONGVARCHAR_MAXWIDTH))
1: 			throw StandardException.newException(SQLState.LANG_CONCAT_STRING_OVERFLOW, "CONCAT", String.valueOf(TypeId.LONGVARCHAR_MAXWIDTH));
1: 
1: 		return result;
1: 	}
1: 
1: 	/*
1: 	 * DataValueDescriptor interface
1: 	 */
1: 
1: 	/* @see DataValueDescriptor#typePrecedence */
1: 	public int typePrecedence()
1: 	{
1: 		return TypeId.LONGVARCHAR_PRECEDENCE;
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:0cab10f
/////////////////////////////////////////////////////////////////////////
1: import java.text.RuleBasedCollator;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/** @see StringDataValue#getValue(RuleBasedCollator) */
1: 	public StringDataValue getValue(RuleBasedCollator collatorForComparison)
1: 	{
1: 		if (collatorForComparison == null)
1: 		{//null collatorForComparison means use UCS_BASIC for collation
1: 		    return this;			
1: 		} else {
1: 			//non-null collatorForComparison means use collator sensitive
1: 			//implementation of SQLLongvarchar
0: 		     CollatorSQLLongvarchar s = new CollatorSQLLongvarchar();
1: 		     s.copyState(this);
0: 		     s.setCollator(collatorForComparison);
1: 		     return s;
1: 		}
1: 	}
0: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.util.StringUtil;
0: 
0: /**
0:  * SQLLongvarchar satisfies the DataValueDescriptor interfaces (i.e., OrderableDataType). It implements a String
0:  * holder, e.g. for storing a column value; it can be specified
0:  * when constructed to not allow nulls. Nullability cannot be changed
0:  * after construction.
0:  * <p>
0:  * Because OrderableDataType is a subclass of DataType,
0:  * SQLLongvarchar can play a role in either a DataType/ValueRow
0:  * or a OrderableDataType/KeyRow, interchangeably.
0:  *
0:  * SQLLongvarchar is mostly the same as SQLVarchar, so it is implemented as a
0:  * subclass of SQLVarchar.  Only those methods with different behavior are
0:  * implemented here.
0:  */
0: public class SQLLongvarchar
0: 	extends SQLVarchar
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/*
0: 	 * DataValueDescriptor interface.
0: 	 *
0: 	 * These are actually all implemented in the super-class, but we need
0: 	 * to duplicate some of them here so they can be called by byte-code
0: 	 * generation, which needs to know the class the method appears in.
0: 	 */
0: 
0: 	public String getTypeName()
0: 	{
0: 		return TypeId.LONGVARCHAR_NAME;
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/** @see DataValueDescriptor#getClone */
0: 	public DataValueDescriptor getClone()
0: 	{
0: 		try
0: 		{
0: 			return new SQLLongvarchar(getString());
0: 		}
0: 		catch (StandardException se)
0: 		{
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.THROWASSERT("Unexpected exception " + se);
0: 			return null;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see DataValueDescriptor#getNewNull
0: 	 *
0: 	 */
0: 	public DataValueDescriptor getNewNull()
0: 	{
0: 		return new SQLLongvarchar();
0: 	}
0: 
0: 	/*
0: 	 * Storable interface, implies Externalizable, TypedFormat
0: 	 */
0: 
0: 	/**
0: 		Return my format identifier.
0: 
0: 		@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId
0: 	*/
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.SQL_LONGVARCHAR_ID;
0: 	}
0: 
0: 	/*
0: 	 * constructors
0: 	 */
0: 
0: 	public SQLLongvarchar()
0: 	{
0: 	}
0: 
0: 	public SQLLongvarchar(String val)
0: 	{
0: 		super(val);
0: 	}
0: 
0: 	protected void normalize(DataTypeDescriptor desiredType, String sourceValue)
0: 		throws StandardException
0: 	{
0: 		//bug 5592 - for sql long varchar, any truncation is disallowed ie even the trailing blanks can't be truncated
0: 		if (sourceValue.length() > desiredType.getMaximumWidth())
0: 			throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, getTypeName(), StringUtil.formatForPrint(sourceValue), String.valueOf(desiredType.getMaximumWidth()));
0: 
0: 		setValue(sourceValue);
0: 	}
0: 
0: 	/**
0: 	 * @see StringDataValue#concatenate
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public StringDataValue concatenate(
0: 				StringDataValue leftOperand,
0: 				StringDataValue rightOperand,
0: 				StringDataValue result)
0: 		throws StandardException
0: 	{
0: 		super.concatenate(leftOperand, rightOperand, result);
0: 
0: 		//bug 5600 - according to db2 concatenation documentation, for compatibility with previous versions, there is no automatic
0: 		//escalation of results involving LONG data types to LOB data types. For eg, concatenation of a CHAR(200) value and a
0: 		//completely full LONG VARCHAR value would result in an error rather than in a promotion to a CLOB data type
0: 
0: 		//need to check for concatenated string for null value
0: 		if ((result.getString() != null) && (result.getString().length() > TypeId.LONGVARCHAR_MAXWIDTH))
0: 			throw StandardException.newException(SQLState.LANG_CONCAT_STRING_OVERFLOW, "CONCAT", String.valueOf(TypeId.LONGVARCHAR_MAXWIDTH));
0: 
0: 		return result;
0: 	}
0: 
0: 	/*
0: 	 * DataValueDescriptor interface
0: 	 */
0: 
0: 	/* @see DataValueDescriptor#typePrecedence */
0: 	public int typePrecedence()
0: 	{
0: 		return TypeId.LONGVARCHAR_PRECEDENCE;
0: 	}
0: }
============================================================================