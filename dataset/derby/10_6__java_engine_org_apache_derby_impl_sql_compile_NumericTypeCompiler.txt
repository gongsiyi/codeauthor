1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.NumericTypeCompiler
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
16:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.ClassName;
1:b1f84c1: import org.apache.derby.iapi.reference.Limits;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:d7f7457: import org.apache.derby.iapi.services.compiler.LocalField;
1:d7f7457: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.NumberDataValue;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This class implements TypeId for the SQL numeric datatype.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public final class NumericTypeCompiler extends BaseTypeCompiler
3:eac0369: {
1:eac0369: 	/** @see TypeCompiler#interfaceName */
1:eac0369: 	public String interfaceName()
1:eac0369: 	{
1:eac0369: 		return ClassName.NumberDataValue;
3:eac0369: 	}
1:eac0369: 
1:cf58aec: 	/**
1:eac0369: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1:cf58aec: 	 */
1:eac0369: 
1:eac0369: 	public String getCorrespondingPrimitiveTypeName()
1:eac0369: 	{
1:eac0369: 		/* Only numerics and booleans get mapped to Java primitives */
1:eac0369: 		int formatId = getStoredFormatIdFromTypeId();
1:eac0369: 		switch (formatId)
1:eac0369: 		{
1:eac0369: 			case StoredFormatIds.DOUBLE_TYPE_ID:
2:eac0369: 				return "double";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.INT_TYPE_ID:
1:eac0369: 				return "int";
1:eac0369: 
1:3bb140c:             case StoredFormatIds.BIGINT_TYPE_ID:
1:eac0369: 				return "long";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.REAL_TYPE_ID:
1:eac0369: 				return "float";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1:eac0369: 				return "short";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.TINYINT_TYPE_ID:
1:eac0369: 				return "byte";
1:eac0369: 
1:509ccb9: 			case StoredFormatIds.DECIMAL_TYPE_ID:
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT(
1:eac0369: 						"unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
1:eac0369: 				}
1:eac0369: 				return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the method name for getting out the corresponding primitive
1:eac0369: 	 * Java type.
1:eac0369: 	 *
1:eac0369: 	 * @return String		The method call name for getting the
1:eac0369: 	 *						corresponding primitive Java type.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String getPrimitiveMethodName()
1:eac0369: 	{
1:eac0369: 		int formatId = getStoredFormatIdFromTypeId();
1:eac0369: 		switch (formatId)
1:eac0369: 		{
1:eac0369: 			case StoredFormatIds.DOUBLE_TYPE_ID:
2:eac0369: 				return "getDouble";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.INT_TYPE_ID:
1:eac0369: 				return "getInt";
1:eac0369: 
1:3bb140c:             case StoredFormatIds.BIGINT_TYPE_ID:
1:eac0369: 				return "getLong";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.REAL_TYPE_ID:
1:eac0369: 				return "getFloat";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1:eac0369: 				return "getShort";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.TINYINT_TYPE_ID:
1:eac0369: 				return "getByte";
1:eac0369: 
1:509ccb9: 			case StoredFormatIds.DECIMAL_TYPE_ID:
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT(
1:eac0369: 						"unexpected formatId in getPrimitiveMethodName() - " + formatId);
1:eac0369: 				}
1:eac0369: 				return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see TypeCompiler#getCastToCharWidth
1:eac0369: 	 */
1:eac0369: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1:eac0369: 	{
1:eac0369: 		int formatId = getStoredFormatIdFromTypeId();
1:eac0369: 		switch (formatId)
1:eac0369: 		{
3:eac0369: 			case StoredFormatIds.DECIMAL_TYPE_ID:
1:eac0369: 				// Need to have space for '-' and decimal point.
1:eac0369: 				return dts.getPrecision() + 2;
1:eac0369: 
1:eac0369: 			case StoredFormatIds.DOUBLE_TYPE_ID:
1:eac0369: 				return TypeCompiler.DOUBLE_MAXWIDTH_AS_CHAR;
1:eac0369: 
1:eac0369: 			case StoredFormatIds.INT_TYPE_ID:
1:eac0369: 				return TypeCompiler.INT_MAXWIDTH_AS_CHAR;
1:eac0369: 
1:3bb140c:             case StoredFormatIds.BIGINT_TYPE_ID:
1:eac0369: 				return TypeCompiler.LONGINT_MAXWIDTH_AS_CHAR;
1:eac0369: 
1:eac0369: 			case StoredFormatIds.REAL_TYPE_ID:
1:eac0369: 				return TypeCompiler.REAL_MAXWIDTH_AS_CHAR;
1:eac0369: 
1:eac0369: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1:eac0369: 				return TypeCompiler.SMALLINT_MAXWIDTH_AS_CHAR;
1:eac0369: 
1:eac0369: 			case StoredFormatIds.TINYINT_TYPE_ID:
1:eac0369: 				return TypeCompiler.TINYINT_MAXWIDTH_AS_CHAR;
1:eac0369: 
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT(
1:eac0369: 						"unexpected formatId in getCastToCharWidth() - " + formatId);
1:eac0369: 				}
1:eac0369: 				return 0;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see TypeCompiler#resolveArithmeticOperation
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public DataTypeDescriptor resolveArithmeticOperation(
1:3bb140c:             DataTypeDescriptor leftType,
1:3bb140c:             DataTypeDescriptor rightType,
1:3bb140c:             String operator) throws StandardException
1:eac0369: 	{
1:eac0369: 		NumericTypeCompiler higherTC;
1:eac0369: 		DataTypeDescriptor	higherType;
1:eac0369: 		boolean				nullable;
1:eac0369: 		int					precision, scale, maximumWidth;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Check the right type to be sure it's a number.  By convention,
1:eac0369: 		** we call this method off the TypeId of the left operand, so if
1:eac0369: 		** we get here, we know the left operand is a number.
1:eac0369: 		*/
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.ASSERT(leftType.getTypeId().isNumericTypeId(),
1:eac0369: 				"The left type is supposed to be a number because we're resolving an arithmetic operator");
1:eac0369: 
1:eac0369: 		TypeId leftTypeId = leftType.getTypeId();
1:eac0369: 		TypeId rightTypeId = rightType.getTypeId();
1:eac0369: 
1:eac0369: 		boolean supported = true;
1:eac0369: 
1:eac0369: 		if ( ! (rightTypeId.isNumericTypeId()) )
1:eac0369: 		{
1:eac0369: 			supported = false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (TypeCompiler.MOD_OP.equals(operator)) {
1:eac0369: 			switch (leftTypeId.getJDBCTypeId()) {
1:eac0369: 			case java.sql.Types.TINYINT:
1:eac0369: 			case java.sql.Types.SMALLINT:
1:eac0369: 			case java.sql.Types.INTEGER:
1:eac0369: 			case java.sql.Types.BIGINT:
1:eac0369: 				break;
1:eac0369: 			default:
1:eac0369: 				supported = false;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 			switch (rightTypeId.getJDBCTypeId()) {
1:eac0369: 			case java.sql.Types.TINYINT:
1:eac0369: 			case java.sql.Types.SMALLINT:
1:eac0369: 			case java.sql.Types.INTEGER:
1:eac0369: 			case java.sql.Types.BIGINT:
1:eac0369: 				break;
1:eac0369: 			default:
1:eac0369: 				supported = false;
1:eac0369: 				break;
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (!supported) {
1:eac0369: 			throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
1:eac0369: 					operator,
1:eac0369: 					leftType.getTypeId().getSQLTypeName(),
1:eac0369: 					rightType.getTypeId().getSQLTypeName()
1:eac0369: 					);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Take left as the higher precedence if equal
1:eac0369: 		*/
1:eac0369: 		if (rightTypeId.typePrecedence() > leftTypeId.typePrecedence())
1:eac0369: 		{
1:eac0369: 			higherType = rightType;
1:eac0369: 			higherTC = (NumericTypeCompiler) getTypeCompiler(rightTypeId);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			higherType = leftType;
1:eac0369: 			higherTC = (NumericTypeCompiler) getTypeCompiler(leftTypeId);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* The calculation of precision and scale should be based upon
1:eac0369: 		 * the type with higher precedence, which is going to be the result
1:eac0369: 		 * type, this is also to be consistent with maximumWidth.  Beetle 3906.
1:eac0369: 		 */
1:eac0369: 		precision = higherTC.getPrecision(operator, leftType, rightType);
1:eac0369: 
1:eac0369: 		if (higherType.getTypeId().isDecimalTypeId()) 
1:eac0369: 		{
1:4afca48: 			scale = higherTC.getScale(operator, leftType, rightType);
1:eac0369: 			maximumWidth = (scale > 0) ? precision + 3 : precision + 1;
1:eac0369: 
1:eac0369: 			/*
1:eac0369: 			** Be careful not to overflow
1:eac0369: 			*/
1:eac0369: 			if (maximumWidth < precision)
1:eac0369: 			{
1:eac0369: 				maximumWidth = Integer.MAX_VALUE;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:4afca48: 			scale = 0;
1:eac0369: 			maximumWidth = higherType.getMaximumWidth();
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		/* The result is nullable if either side is nullable */
1:eac0369: 		nullable = leftType.isNullable() || rightType.isNullable();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** The higher type does not have the right nullability.  Create a
1:eac0369: 		** new DataTypeDescriptor that has the correct type and nullability.
1:eac0369: 		**
1:eac0369: 		** It's OK to call the implementation of the DataTypeDescriptorFactory
1:eac0369: 		** here, because we're in the same package.
1:eac0369: 		*/
1:eac0369: 		return new DataTypeDescriptor(
1:eac0369: 					higherType.getTypeId(),
1:eac0369: 					precision,
1:eac0369: 					scale,
1:eac0369: 					nullable,
1:eac0369: 					maximumWidth
1:eac0369: 				);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#convertible */
1:eac0369: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1:eac0369: 	{
1:eac0369: 		return (numberConvertible(otherType, forDataTypeFunction));
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369:         /**
1:eac0369:          * Tell whether this type (numeric) is compatible with the given type.
1:eac0369:          *
1:eac0369:          * @param otherType     The TypeId of the other type.
1:eac0369:          */
1:eac0369: 	public boolean compatible(TypeId otherType)
1:eac0369: 	{
1:eac0369: 		// Numbers can only be compatible with other numbers.
1:eac0369: 		return (otherType.isNumericTypeId());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see TypeCompiler#storable */
1:eac0369: 	public boolean storable(TypeId otherType, ClassFactory cf)
1:eac0369: 	{
1:eac0369: 		return numberStorable(getTypeId(), otherType, cf);
1:eac0369: 	}
1:eac0369: 
1:5465561:     /**
1:5465561:      * Return the method name to get a Derby DataValueDescriptor object of the
1:5465561:      * correct type. This implementation returns {@code "getDataValue"}, unless
1:5465561:      * the type is {@code DECIMAL}, in which case {@code "getDecimalDataValue"}
1:5465561:      * is returned.
1:5465561:      */
1:3bb140c:     @Override
1:44fad02: 	String dataValueMethodName()
1:cf58aec: 	{
1:cf58aec: 		if (getStoredFormatIdFromTypeId() == StoredFormatIds.DECIMAL_TYPE_ID)
1:cf58aec: 			return "getDecimalDataValue";
1:cf58aec: 		else
1:cf58aec: 			return super.dataValueMethodName();
1:cf58aec: 	}
1:cf58aec: 
1:44fad02: 	String nullMethodName()
1:eac0369: 	{
1:eac0369: 		int formatId = getStoredFormatIdFromTypeId();
1:eac0369: 		switch (formatId)
1:eac0369: 		{
1:eac0369: 			case StoredFormatIds.DECIMAL_TYPE_ID:
1:cf58aec: 				return "getNullDecimal";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.DOUBLE_TYPE_ID:
1:eac0369: 				return "getNullDouble";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.INT_TYPE_ID:
1:eac0369: 				return "getNullInteger";
1:eac0369: 
1:3bb140c:             case StoredFormatIds.BIGINT_TYPE_ID:
1:eac0369: 				return "getNullLong";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.REAL_TYPE_ID:
1:eac0369: 				return "getNullFloat";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1:eac0369: 				return "getNullShort";
1:eac0369: 
1:eac0369: 			case StoredFormatIds.TINYINT_TYPE_ID:
1:eac0369: 				return "getNullByte";
1:eac0369: 
1:eac0369: 			default:
1:eac0369: 				if (SanityManager.DEBUG)
1:eac0369: 				{
1:eac0369: 					SanityManager.THROWASSERT(
1:eac0369: 						"unexpected formatId in nullMethodName() - " + formatId);
1:eac0369: 				}
1:eac0369: 				return null;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the precision of the operation involving
1:eac0369: 	 * two of the same types.  Only meaningful for
1:eac0369: 	 * decimals, which override this.
1:eac0369: 	 *
1:eac0369: 	 * @param operator a string representing the operator,
1:eac0369: 	 *		null means no operator, just a type merge
1:eac0369: 	 * @param leftType the left type
1:eac0369: 	 * @param rightType the left type
1:eac0369: 	 *
1:eac0369: 	 * @return	the resultant precision
1:eac0369: 	 */
1:eac0369: 	private int getPrecision(String operator,
1:eac0369: 							DataTypeDescriptor leftType,
1:eac0369: 							DataTypeDescriptor rightType)
1:eac0369: 	{
1:eac0369: 		// Only meaningful for decimal
2:eac0369: 		if (getStoredFormatIdFromTypeId() != StoredFormatIds.DECIMAL_TYPE_ID)
1:eac0369: 		{
1:eac0369: 			return leftType.getPrecision();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		long lscale = (long)leftType.getScale();
1:eac0369: 		long rscale = (long)rightType.getScale();
1:eac0369: 		long lprec = (long)leftType.getPrecision();
2:eac0369: 		long rprec = (long)rightType.getPrecision();
1:eac0369: 		long val;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Null means datatype merge.  Take the maximum
1:eac0369: 	 	** left of decimal digits plus the scale.
1:eac0369: 		*/
1:eac0369: 		if (operator == null)
1:eac0369: 		{
1:eac0369: 			val = this.getScale(operator, leftType, rightType) +
1:eac0369: 					Math.max(lprec - lscale, rprec - rscale);
1:eac0369: 		}
1:eac0369: 		else if (operator.equals(TypeCompiler.TIMES_OP))
1:eac0369: 		{
1:eac0369: 			val = lprec + rprec;
1:eac0369: 		}
1:eac0369: 		else if (operator.equals(TypeCompiler.SUM_OP))
1:eac0369: 		{
1:eac0369: 			val = lprec - lscale + rprec - rscale + 
1:eac0369: 						this.getScale(operator, leftType, rightType);
1:eac0369: 		}
1:eac0369: 		else if (operator.equals(TypeCompiler.DIVIDE_OP))
1:eac0369: 		{
1:eac0369: 			val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE,
1:eac0369: 						   this.getScale(operator, leftType, rightType) + lprec - lscale + rprec);
1:eac0369: 		}
1:eac0369: 		/*
1:eac0369: 		** AVG, -, +
1:eac0369: 		*/
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Take max scale and max left of decimal
1:eac0369: 			** plus one.
1:eac0369: 			*/
1:eac0369: 			val = this.getScale(operator, leftType, rightType) +
1:eac0369: 					Math.max(lprec - lscale, rprec - rscale) + 1;
1:eac0369: 
1:b1f84c1: 			if (val > Limits.DB2_MAX_DECIMAL_PRECISION_SCALE)
1:eac0369: 			// then, like DB2, just set it to the max possible.
1:b1f84c1: 				val = Limits.DB2_MAX_DECIMAL_PRECISION_SCALE;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (val > Integer.MAX_VALUE)
1:eac0369: 		{
1:eac0369: 			val = Integer.MAX_VALUE;
1:eac0369: 		}
1:eac0369: 		val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE, val);
1:eac0369: 		return (int)val;
1:eac0369: 	}
1:d7f7457: 
1:eac0369: 	/**
1:eac0369: 	 * Get the scale of the operation involving
1:eac0369: 	 * two of the same types.  Since we don't really
1:eac0369: 	 * have a good way to pass the resultant scale
1:eac0369: 	 * and precision around at execution time, we
1:eac0369: 	 * will model that BigDecimal does by default.
1:eac0369: 	 * This is good in most cases, though we would
1:eac0369: 	 * probably like to use something more sophisticated
1:eac0369: 	 * for division.
1:eac0369: 	 *
1:eac0369: 	 * @param operator a string representing the operator,
1:eac0369: 	 *		null means no operator, just a type merge
1:eac0369: 	 * @param leftType the left type
1:eac0369: 	 * @param rightType the left type
1:eac0369: 	 *
1:eac0369: 	 * @return	the resultant precision
1:eac0369: 	 */
1:eac0369: 	private int getScale(String operator,
1:eac0369: 							DataTypeDescriptor leftType,
1:eac0369: 							DataTypeDescriptor rightType)
1:eac0369: 	{
1:eac0369: 		// Only meaningful for decimal
1:d7f7457: 
1:eac0369: 		long val;
1:eac0369: 
1:eac0369: 		long lscale = (long)leftType.getScale();
1:eac0369: 		long rscale = (long)rightType.getScale();
1:eac0369: 		long lprec = (long)leftType.getPrecision();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Retain greatest scale, take sum of left
1:eac0369: 		** of decimal
1:eac0369: 		*/
1:eac0369: 		if (TypeCompiler.TIMES_OP.equals(operator))
1:eac0369: 		{	
1:eac0369: 			val = lscale + rscale;
1:eac0369: 		}
1:eac0369: 		else if (TypeCompiler.DIVIDE_OP.equals(operator))
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Take max left scale + right precision - right scale + 1, 
1:eac0369: 			** or 4, whichever is biggest 
1:eac0369: 			*/
1:eac0369: 			// Scale: 31 - left precision + left scale - right scale
1:3bb140c:             val = Math.max(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE
1:3bb140c:                                - lprec + lscale - rscale,
1:3bb140c:                            0);
1:eac0369: 
1:eac0369: 		}
1:eac0369: 		else if (TypeCompiler.AVG_OP.equals(operator))
1:eac0369: 		{
1:eac0369: 			val = Math.max(Math.max(lscale, rscale),
1:eac0369: 						NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE);
1:eac0369: 		}
1:eac0369: 		/*
1:eac0369: 		** SUM, -, + all take max(lscale,rscale)
1:eac0369: 		*/
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			val = Math.max(lscale, rscale);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (val > Integer.MAX_VALUE)
1:eac0369: 		{
1:eac0369: 			val = Integer.MAX_VALUE;
1:eac0369: 		}
1:eac0369: 		val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE, val);
1:eac0369: 		return (int)val;
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     @Override
1:a1aaa63: 	public void generateDataValue(MethodBuilder mb, int collationType,
1:a57c280: 			LocalField field)
1:d7f7457: 	{
1:38c638d:         if (getTypeId().isDecimalTypeId())
1:d7f7457: 		{
1:5465561:             // Cast the value to a Number for method resolution. It is most
1:5465561:             // frequently a BigDecimal, but it could also be an instance of
1:5465561:             // other subclasses of Number, such as Long.
1:d7f7457: 			mb.upCast("java.lang.Number");
1:d7f7457: 		}
1:d7f7457: 
1:a1aaa63: 		super.generateDataValue(mb, collationType, field);
1:d7f7457: 	}
1:d7f7457: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:4afca48
/////////////////////////////////////////////////////////////////////////
1: 			scale = higherTC.getScale(operator, leftType, rightType);
/////////////////////////////////////////////////////////////////////////
1: 			scale = 0;
/////////////////////////////////////////////////////////////////////////
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5465561
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Return the method name to get a Derby DataValueDescriptor object of the
1:      * correct type. This implementation returns {@code "getDataValue"}, unless
1:      * the type is {@code DECIMAL}, in which case {@code "getDecimalDataValue"}
1:      * is returned.
1:      */
/////////////////////////////////////////////////////////////////////////
1:             // Cast the value to a Number for method resolution. It is most
1:             // frequently a BigDecimal, but it could also be an instance of
1:             // other subclasses of Number, such as Long.
commit:38c638d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (getTypeId().isDecimalTypeId())
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.NumberDataValue;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:             case StoredFormatIds.BIGINT_TYPE_ID:
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             case StoredFormatIds.BIGINT_TYPE_ID:
/////////////////////////////////////////////////////////////////////////
1:             case StoredFormatIds.BIGINT_TYPE_ID:
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public DataTypeDescriptor resolveArithmeticOperation(
1:             DataTypeDescriptor leftType,
1:             DataTypeDescriptor rightType,
1:             String operator) throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             case StoredFormatIds.BIGINT_TYPE_ID:
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             val = Math.max(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE
1:                                - lprec + lscale - rscale,
1:                            0);
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a1aaa63
/////////////////////////////////////////////////////////////////////////
1: 	public void generateDataValue(MethodBuilder mb, int collationType,
/////////////////////////////////////////////////////////////////////////
1: 		super.generateDataValue(mb, collationType, field);
commit:44fad02
/////////////////////////////////////////////////////////////////////////
1: 	String dataValueMethodName()
/////////////////////////////////////////////////////////////////////////
1: 	String nullMethodName()
commit:1e9e925
/////////////////////////////////////////////////////////////////////////
commit:a57c280
/////////////////////////////////////////////////////////////////////////
1: 			LocalField field)
/////////////////////////////////////////////////////////////////////////
0: 		super.generateDataValue(eb, mb, collationType, field);
commit:19138a9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
0: 		if (!JVMInfo.J2ME && getTypeId().isDecimalTypeId())
0: 			// cast the value to a Number (from BigDecimal) for method resolution
0: 			// For J2ME there is no implementation of Number for DECIMAL
0: 			// so values are handled as thier original type, which is just
0: 			// a String for DECIMAL constants from the parser.
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0: 	public void generateDataValue(MethodBuilder mb,
0: 										LocalField field)
1: 	{
0: 		if (getTypeId().isDecimalTypeId())
1: 		{
0: 			// cast the value to an object for method resolution
1: 			mb.upCast("java.lang.Number");
1: 		}
1: 
0: 		super.generateDataValue(mb, field);
1: 	}
1: 
commit:cf58aec
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 		Return the method name to get a Derby DataValueDescriptor
0: 		object of the correct type. This implementation returns "getDataValue".
1: 	*/
0: 	protected String dataValueMethodName()
1: 	{
1: 		if (getStoredFormatIdFromTypeId() == StoredFormatIds.DECIMAL_TYPE_ID)
1: 			return "getDecimalDataValue";
1: 		else
1: 			return super.dataValueMethodName();
1: 	}
1: 
1: 				return "getNullDecimal";
commit:509ccb9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			case StoredFormatIds.DECIMAL_TYPE_ID:
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			case StoredFormatIds.DECIMAL_TYPE_ID:
commit:3d77775
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.NumericTypeCompiler
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.services.context.ContextService;
1: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: 
1: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.DB2Limit;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import java.math.BigDecimal;
1: 
1: /**
1:  * This class implements TypeId for the SQL numeric datatype.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public final class NumericTypeCompiler extends BaseTypeCompiler
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1: 	/** @see TypeCompiler#interfaceName */
1: 	public String interfaceName()
1: 	{
1: 		return ClassName.NumberDataValue;
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
1: 	 */
1: 
1: 	public String getCorrespondingPrimitiveTypeName()
1: 	{
1: 		/* Only numerics and booleans get mapped to Java primitives */
1: 		int formatId = getStoredFormatIdFromTypeId();
1: 		switch (formatId)
1: 		{
1: 			case StoredFormatIds.DECIMAL_TYPE_ID:
1: 				return "double";
1: 
1: 			case StoredFormatIds.DOUBLE_TYPE_ID:
1: 				return "double";
1: 
1: 			case StoredFormatIds.INT_TYPE_ID:
1: 				return "int";
1: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
1: 				return "long";
1: 
1: 			case StoredFormatIds.REAL_TYPE_ID:
1: 				return "float";
1: 
1: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1: 				return "short";
1: 
1: 			case StoredFormatIds.TINYINT_TYPE_ID:
1: 				return "byte";
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT(
1: 						"unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
1: 				}
1: 				return null;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the method name for getting out the corresponding primitive
1: 	 * Java type.
1: 	 *
1: 	 * @return String		The method call name for getting the
1: 	 *						corresponding primitive Java type.
1: 	 */
1: 	public String getPrimitiveMethodName()
1: 	{
1: 		int formatId = getStoredFormatIdFromTypeId();
1: 		switch (formatId)
1: 		{
1: 			case StoredFormatIds.DECIMAL_TYPE_ID:
1: 				return "getDouble";
1: 
1: 			case StoredFormatIds.DOUBLE_TYPE_ID:
1: 				return "getDouble";
1: 
1: 			case StoredFormatIds.INT_TYPE_ID:
1: 				return "getInt";
1: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
1: 				return "getLong";
1: 
1: 			case StoredFormatIds.REAL_TYPE_ID:
1: 				return "getFloat";
1: 
1: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1: 				return "getShort";
1: 
1: 			case StoredFormatIds.TINYINT_TYPE_ID:
1: 				return "getByte";
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT(
1: 						"unexpected formatId in getPrimitiveMethodName() - " + formatId);
1: 				}
1: 				return null;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#getCastToCharWidth
1: 	 */
1: 	public int getCastToCharWidth(DataTypeDescriptor dts)
1: 	{
1: 		int formatId = getStoredFormatIdFromTypeId();
1: 		switch (formatId)
1: 		{
1: 			case StoredFormatIds.DECIMAL_TYPE_ID:
1: 				// Need to have space for '-' and decimal point.
1: 				return dts.getPrecision() + 2;
1: 
1: 			case StoredFormatIds.DOUBLE_TYPE_ID:
1: 				return TypeCompiler.DOUBLE_MAXWIDTH_AS_CHAR;
1: 
1: 			case StoredFormatIds.INT_TYPE_ID:
1: 				return TypeCompiler.INT_MAXWIDTH_AS_CHAR;
1: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
1: 				return TypeCompiler.LONGINT_MAXWIDTH_AS_CHAR;
1: 
1: 			case StoredFormatIds.REAL_TYPE_ID:
1: 				return TypeCompiler.REAL_MAXWIDTH_AS_CHAR;
1: 
1: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1: 				return TypeCompiler.SMALLINT_MAXWIDTH_AS_CHAR;
1: 
1: 			case StoredFormatIds.TINYINT_TYPE_ID:
1: 				return TypeCompiler.TINYINT_MAXWIDTH_AS_CHAR;
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT(
1: 						"unexpected formatId in getCastToCharWidth() - " + formatId);
1: 				}
1: 				return 0;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * @see TypeCompiler#resolveArithmeticOperation
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public DataTypeDescriptor
0: 	resolveArithmeticOperation(DataTypeDescriptor leftType,
0: 								DataTypeDescriptor rightType,
0: 								String operator)
0: 							throws StandardException
1: 	{
1: 		NumericTypeCompiler higherTC;
1: 		DataTypeDescriptor	higherType;
1: 		boolean				nullable;
1: 		int					precision, scale, maximumWidth;
1: 
1: 		/*
1: 		** Check the right type to be sure it's a number.  By convention,
1: 		** we call this method off the TypeId of the left operand, so if
1: 		** we get here, we know the left operand is a number.
1: 		*/
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.ASSERT(leftType.getTypeId().isNumericTypeId(),
1: 				"The left type is supposed to be a number because we're resolving an arithmetic operator");
1: 
1: 		TypeId leftTypeId = leftType.getTypeId();
1: 		TypeId rightTypeId = rightType.getTypeId();
1: 
1: 		boolean supported = true;
1: 
1: 		if ( ! (rightTypeId.isNumericTypeId()) )
1: 		{
1: 			supported = false;
1: 		}
1: 
1: 		if (TypeCompiler.MOD_OP.equals(operator)) {
1: 			switch (leftTypeId.getJDBCTypeId()) {
1: 			case java.sql.Types.TINYINT:
1: 			case java.sql.Types.SMALLINT:
1: 			case java.sql.Types.INTEGER:
1: 			case java.sql.Types.BIGINT:
1: 				break;
1: 			default:
1: 				supported = false;
1: 				break;
1: 			}
1: 			switch (rightTypeId.getJDBCTypeId()) {
1: 			case java.sql.Types.TINYINT:
1: 			case java.sql.Types.SMALLINT:
1: 			case java.sql.Types.INTEGER:
1: 			case java.sql.Types.BIGINT:
1: 				break;
1: 			default:
1: 				supported = false;
1: 				break;
1: 			}
1: 
1: 		}
1: 
1: 		if (!supported) {
1: 			throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
1: 					operator,
1: 					leftType.getTypeId().getSQLTypeName(),
1: 					rightType.getTypeId().getSQLTypeName()
1: 					);
1: 		}
1: 
1: 		/*
1: 		** Take left as the higher precedence if equal
1: 		*/
1: 		if (rightTypeId.typePrecedence() > leftTypeId.typePrecedence())
1: 		{
1: 			higherType = rightType;
1: 			higherTC = (NumericTypeCompiler) getTypeCompiler(rightTypeId);
1: 		}
1: 		else
1: 		{
1: 			higherType = leftType;
1: 			higherTC = (NumericTypeCompiler) getTypeCompiler(leftTypeId);
1: 		}
1: 
1: 		/* The calculation of precision and scale should be based upon
1: 		 * the type with higher precedence, which is going to be the result
1: 		 * type, this is also to be consistent with maximumWidth.  Beetle 3906.
1: 		 */
1: 		precision = higherTC.getPrecision(operator, leftType, rightType);
0: 		scale = higherTC.getScale(operator, leftType, rightType);
1: 
1: 		if (higherType.getTypeId().isDecimalTypeId()) 
1: 		{
1: 			maximumWidth = (scale > 0) ? precision + 3 : precision + 1;
1: 
1: 			/*
1: 			** Be careful not to overflow
1: 			*/
1: 			if (maximumWidth < precision)
1: 			{
1: 				maximumWidth = Integer.MAX_VALUE;
1: 			}
1: 		}
1: 		else
1: 		{
1: 			maximumWidth = higherType.getMaximumWidth();
1: 		}
1: 		
1: 		/* The result is nullable if either side is nullable */
1: 		nullable = leftType.isNullable() || rightType.isNullable();
1: 
1: 		/*
1: 		** The higher type does not have the right nullability.  Create a
1: 		** new DataTypeDescriptor that has the correct type and nullability.
1: 		**
1: 		** It's OK to call the implementation of the DataTypeDescriptorFactory
1: 		** here, because we're in the same package.
1: 		*/
1: 		return new DataTypeDescriptor(
1: 					higherType.getTypeId(),
1: 					precision,
1: 					scale,
1: 					nullable,
1: 					maximumWidth
1: 				);
1: 	}
0: 	/** @see TypeCompiler#comparable */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
1: 	{
0: 		return numberComparable(otherType, forEquals, cf);
1: 	}
1: 
1: 
1: 	/** @see TypeCompiler#convertible */
1: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
1: 	{
1: 		return (numberConvertible(otherType, forDataTypeFunction));
1: 
1: 	}
1: 
1:         /**
1:          * Tell whether this type (numeric) is compatible with the given type.
1:          *
1:          * @param otherType     The TypeId of the other type.
1:          */
1: 	public boolean compatible(TypeId otherType)
1: 	{
1: 		// Numbers can only be compatible with other numbers.
1: 		return (otherType.isNumericTypeId());
1: 	}
1: 
1: 	/** @see TypeCompiler#storable */
1: 	public boolean storable(TypeId otherType, ClassFactory cf)
1: 	{
1: 		return numberStorable(getTypeId(), otherType, cf);
1: 	}
1: 
0: 	protected String nullMethodName()
1: 	{
1: 		int formatId = getStoredFormatIdFromTypeId();
1: 		switch (formatId)
1: 		{
1: 			case StoredFormatIds.DECIMAL_TYPE_ID:
0: 				return "getNullBigDecimal";
1: 
1: 			case StoredFormatIds.DOUBLE_TYPE_ID:
1: 				return "getNullDouble";
1: 
1: 			case StoredFormatIds.INT_TYPE_ID:
1: 				return "getNullInteger";
1: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
1: 				return "getNullLong";
1: 
1: 			case StoredFormatIds.REAL_TYPE_ID:
1: 				return "getNullFloat";
1: 
1: 			case StoredFormatIds.SMALLINT_TYPE_ID:
1: 				return "getNullShort";
1: 
1: 			case StoredFormatIds.TINYINT_TYPE_ID:
1: 				return "getNullByte";
1: 
1: 			default:
1: 				if (SanityManager.DEBUG)
1: 				{
1: 					SanityManager.THROWASSERT(
1: 						"unexpected formatId in nullMethodName() - " + formatId);
1: 				}
1: 				return null;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the precision of the operation involving
1: 	 * two of the same types.  Only meaningful for
1: 	 * decimals, which override this.
1: 	 *
1: 	 * @param operator a string representing the operator,
1: 	 *		null means no operator, just a type merge
1: 	 * @param leftType the left type
1: 	 * @param rightType the left type
1: 	 *
1: 	 * @return	the resultant precision
1: 	 */
1: 	private int getPrecision(String operator,
1: 							DataTypeDescriptor leftType,
1: 							DataTypeDescriptor rightType)
1: 	{
1: 		// Only meaningful for decimal
1: 		if (getStoredFormatIdFromTypeId() != StoredFormatIds.DECIMAL_TYPE_ID)
1: 		{
1: 			return leftType.getPrecision();
1: 		}
1: 
1: 		long lscale = (long)leftType.getScale();
1: 		long rscale = (long)rightType.getScale();
1: 		long lprec = (long)leftType.getPrecision();
1: 		long rprec = (long)rightType.getPrecision();
1: 		long val;
1: 
1: 		/*
1: 		** Null means datatype merge.  Take the maximum
1: 	 	** left of decimal digits plus the scale.
1: 		*/
1: 		if (operator == null)
1: 		{
1: 			val = this.getScale(operator, leftType, rightType) +
1: 					Math.max(lprec - lscale, rprec - rscale);
1: 		}
1: 		else if (operator.equals(TypeCompiler.TIMES_OP))
1: 		{
1: 			val = lprec + rprec;
1: 		}
1: 		else if (operator.equals(TypeCompiler.SUM_OP))
1: 		{
1: 			val = lprec - lscale + rprec - rscale + 
1: 						this.getScale(operator, leftType, rightType);
1: 		}
1: 		else if (operator.equals(TypeCompiler.DIVIDE_OP))
1: 		{
1: 			val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE,
1: 						   this.getScale(operator, leftType, rightType) + lprec - lscale + rprec);
1: 		}
1: 		/*
1: 		** AVG, -, +
1: 		*/
1: 		else
1: 		{
1: 			/*
1: 			** Take max scale and max left of decimal
1: 			** plus one.
1: 			*/
1: 			val = this.getScale(operator, leftType, rightType) +
1: 					Math.max(lprec - lscale, rprec - rscale) + 1;
1: 
0: 			if (val > DB2Limit.MAX_DECIMAL_PRECISION_SCALE)
1: 			// then, like DB2, just set it to the max possible.
0: 				val = DB2Limit.MAX_DECIMAL_PRECISION_SCALE;
1: 		}
1: 
1: 		if (val > Integer.MAX_VALUE)
1: 		{
1: 			val = Integer.MAX_VALUE;
1: 		}
1: 		val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE, val);
1: 		return (int)val;
1: 	}
1: 
1: 	/**
1: 	 * Get the scale of the operation involving
1: 	 * two of the same types.  Since we don't really
1: 	 * have a good way to pass the resultant scale
1: 	 * and precision around at execution time, we
1: 	 * will model that BigDecimal does by default.
1: 	 * This is good in most cases, though we would
1: 	 * probably like to use something more sophisticated
1: 	 * for division.
1: 	 *
1: 	 * @param operator a string representing the operator,
1: 	 *		null means no operator, just a type merge
1: 	 * @param leftType the left type
1: 	 * @param rightType the left type
1: 	 *
1: 	 * @return	the resultant precision
1: 	 */
1: 	private int getScale(String operator,
1: 							DataTypeDescriptor leftType,
1: 							DataTypeDescriptor rightType)
1: 	{
1: 		// Only meaningful for decimal
1: 		if (getStoredFormatIdFromTypeId() != StoredFormatIds.DECIMAL_TYPE_ID)
1: 		{
0: 			return leftType.getScale();
1: 		}
1: 
1: 		long val;
1: 
1: 		long lscale = (long)leftType.getScale();
1: 		long rscale = (long)rightType.getScale();
1: 		long lprec = (long)leftType.getPrecision();
1: 		long rprec = (long)rightType.getPrecision();
1: 
1: 		/*
1: 		** Retain greatest scale, take sum of left
1: 		** of decimal
1: 		*/
1: 		if (TypeCompiler.TIMES_OP.equals(operator))
1: 		{	
1: 			val = lscale + rscale;
1: 		}
1: 		else if (TypeCompiler.DIVIDE_OP.equals(operator))
1: 		{
1: 			/*
1: 			** Take max left scale + right precision - right scale + 1, 
1: 			** or 4, whichever is biggest 
1: 			*/
0: 			LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 				(ContextService.getContext(LanguageConnectionContext.CONTEXT_ID)); 
1: 
1: 			// Scale: 31 - left precision + left scale - right scale
0: 				val = Math.max(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE - lprec + lscale - rscale, 0);
1: 
1: 		}
1: 		else if (TypeCompiler.AVG_OP.equals(operator))
1: 		{
1: 			val = Math.max(Math.max(lscale, rscale),
1: 						NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE);
1: 		}
1: 		/*
1: 		** SUM, -, + all take max(lscale,rscale)
1: 		*/
1: 		else
1: 		{
1: 			val = Math.max(lscale, rscale);
1: 		}
1: 
1: 		if (val > Integer.MAX_VALUE)
1: 		{
1: 			val = Integer.MAX_VALUE;
1: 		}
1: 		val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE, val);
1: 		return (int)val;
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:869152f
/////////////////////////////////////////////////////////////////////////
0: 	/** @see TypeCompiler#generateDataValue(ExpressionClassBuilder, MethodBuilder, int, String, LocalField) */
0: 	public void generateDataValue(ExpressionClassBuilder eb,
0: 			MethodBuilder mb, int collationType,
/////////////////////////////////////////////////////////////////////////
0: 		super.generateDataValue(eb, mb, collationType, className, field);
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
0: 	public void generateDataValue(MethodBuilder mb, int collationType,
0: 			String className, LocalField field)
/////////////////////////////////////////////////////////////////////////
0: 		super.generateDataValue(mb, collationType, className, field);
commit:2bb198a
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b1f84c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 			if (val > Limits.DB2_MAX_DECIMAL_PRECISION_SCALE)
1: 				val = Limits.DB2_MAX_DECIMAL_PRECISION_SCALE;
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.NumberDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.reference.DB2Limit;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import java.math.BigDecimal;
0: 
0: /**
0:  * This class implements TypeId for the SQL numeric datatype.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public final class NumericTypeCompiler extends BaseTypeCompiler
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0: 	/** @see TypeCompiler#interfaceName */
0: 	public String interfaceName()
0: 	{
0: 		return ClassName.NumberDataValue;
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#getCorrespondingPrimitiveTypeName
0: 	 */
0: 
0: 	public String getCorrespondingPrimitiveTypeName()
0: 	{
0: 		/* Only numerics and booleans get mapped to Java primitives */
0: 		int formatId = getStoredFormatIdFromTypeId();
0: 		switch (formatId)
0: 		{
0: 			case StoredFormatIds.DECIMAL_TYPE_ID:
0: 				return "double";
0: 
0: 			case StoredFormatIds.DOUBLE_TYPE_ID:
0: 				return "double";
0: 
0: 			case StoredFormatIds.INT_TYPE_ID:
0: 				return "int";
0: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
0: 				return "long";
0: 
0: 			case StoredFormatIds.REAL_TYPE_ID:
0: 				return "float";
0: 
0: 			case StoredFormatIds.SMALLINT_TYPE_ID:
0: 				return "short";
0: 
0: 			case StoredFormatIds.TINYINT_TYPE_ID:
0: 				return "byte";
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"unexpected formatId in getCorrespondingPrimitiveTypeName() - " + formatId);
0: 				}
0: 				return null;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the method name for getting out the corresponding primitive
0: 	 * Java type.
0: 	 *
0: 	 * @return String		The method call name for getting the
0: 	 *						corresponding primitive Java type.
0: 	 */
0: 	public String getPrimitiveMethodName()
0: 	{
0: 		int formatId = getStoredFormatIdFromTypeId();
0: 		switch (formatId)
0: 		{
0: 			case StoredFormatIds.DECIMAL_TYPE_ID:
0: 				return "getDouble";
0: 
0: 			case StoredFormatIds.DOUBLE_TYPE_ID:
0: 				return "getDouble";
0: 
0: 			case StoredFormatIds.INT_TYPE_ID:
0: 				return "getInt";
0: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
0: 				return "getLong";
0: 
0: 			case StoredFormatIds.REAL_TYPE_ID:
0: 				return "getFloat";
0: 
0: 			case StoredFormatIds.SMALLINT_TYPE_ID:
0: 				return "getShort";
0: 
0: 			case StoredFormatIds.TINYINT_TYPE_ID:
0: 				return "getByte";
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"unexpected formatId in getPrimitiveMethodName() - " + formatId);
0: 				}
0: 				return null;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#getCastToCharWidth
0: 	 */
0: 	public int getCastToCharWidth(DataTypeDescriptor dts)
0: 	{
0: 		int formatId = getStoredFormatIdFromTypeId();
0: 		switch (formatId)
0: 		{
0: 			case StoredFormatIds.DECIMAL_TYPE_ID:
0: 				// Need to have space for '-' and decimal point.
0: 				return dts.getPrecision() + 2;
0: 
0: 			case StoredFormatIds.DOUBLE_TYPE_ID:
0: 				return TypeCompiler.DOUBLE_MAXWIDTH_AS_CHAR;
0: 
0: 			case StoredFormatIds.INT_TYPE_ID:
0: 				return TypeCompiler.INT_MAXWIDTH_AS_CHAR;
0: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
0: 				return TypeCompiler.LONGINT_MAXWIDTH_AS_CHAR;
0: 
0: 			case StoredFormatIds.REAL_TYPE_ID:
0: 				return TypeCompiler.REAL_MAXWIDTH_AS_CHAR;
0: 
0: 			case StoredFormatIds.SMALLINT_TYPE_ID:
0: 				return TypeCompiler.SMALLINT_MAXWIDTH_AS_CHAR;
0: 
0: 			case StoredFormatIds.TINYINT_TYPE_ID:
0: 				return TypeCompiler.TINYINT_MAXWIDTH_AS_CHAR;
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"unexpected formatId in getCastToCharWidth() - " + formatId);
0: 				}
0: 				return 0;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * @see TypeCompiler#resolveArithmeticOperation
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public DataTypeDescriptor
0: 	resolveArithmeticOperation(DataTypeDescriptor leftType,
0: 								DataTypeDescriptor rightType,
0: 								String operator)
0: 							throws StandardException
0: 	{
0: 		NumericTypeCompiler higherTC;
0: 		DataTypeDescriptor	higherType;
0: 		boolean				nullable;
0: 		int					precision, scale, maximumWidth;
0: 
0: 		/*
0: 		** Check the right type to be sure it's a number.  By convention,
0: 		** we call this method off the TypeId of the left operand, so if
0: 		** we get here, we know the left operand is a number.
0: 		*/
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.ASSERT(leftType.getTypeId().isNumericTypeId(),
0: 				"The left type is supposed to be a number because we're resolving an arithmetic operator");
0: 
0: 		TypeId leftTypeId = leftType.getTypeId();
0: 		TypeId rightTypeId = rightType.getTypeId();
0: 
0: 		boolean supported = true;
0: 
0: 		if ( ! (rightTypeId.isNumericTypeId()) )
0: 		{
0: 			supported = false;
0: 		}
0: 
0: 		if (TypeCompiler.MOD_OP.equals(operator)) {
0: 			switch (leftTypeId.getJDBCTypeId()) {
0: 			case java.sql.Types.TINYINT:
0: 			case java.sql.Types.SMALLINT:
0: 			case java.sql.Types.INTEGER:
0: 			case java.sql.Types.BIGINT:
0: 				break;
0: 			default:
0: 				supported = false;
0: 				break;
0: 			}
0: 			switch (rightTypeId.getJDBCTypeId()) {
0: 			case java.sql.Types.TINYINT:
0: 			case java.sql.Types.SMALLINT:
0: 			case java.sql.Types.INTEGER:
0: 			case java.sql.Types.BIGINT:
0: 				break;
0: 			default:
0: 				supported = false;
0: 				break;
0: 			}
0: 
0: 		}
0: 
0: 		if (!supported) {
0: 			throw StandardException.newException(SQLState.LANG_BINARY_OPERATOR_NOT_SUPPORTED, 
0: 					operator,
0: 					leftType.getTypeId().getSQLTypeName(),
0: 					rightType.getTypeId().getSQLTypeName()
0: 					);
0: 		}
0: 
0: 		/*
0: 		** Take left as the higher precedence if equal
0: 		*/
0: 		if (rightTypeId.typePrecedence() > leftTypeId.typePrecedence())
0: 		{
0: 			higherType = rightType;
0: 			higherTC = (NumericTypeCompiler) getTypeCompiler(rightTypeId);
0: 		}
0: 		else
0: 		{
0: 			higherType = leftType;
0: 			higherTC = (NumericTypeCompiler) getTypeCompiler(leftTypeId);
0: 		}
0: 
0: 		/* The calculation of precision and scale should be based upon
0: 		 * the type with higher precedence, which is going to be the result
0: 		 * type, this is also to be consistent with maximumWidth.  Beetle 3906.
0: 		 */
0: 		precision = higherTC.getPrecision(operator, leftType, rightType);
0: 		scale = higherTC.getScale(operator, leftType, rightType);
0: 
0: 		if (higherType.getTypeId().isDecimalTypeId()) 
0: 		{
0: 			maximumWidth = (scale > 0) ? precision + 3 : precision + 1;
0: 
0: 			/*
0: 			** Be careful not to overflow
0: 			*/
0: 			if (maximumWidth < precision)
0: 			{
0: 				maximumWidth = Integer.MAX_VALUE;
0: 			}
0: 		}
0: 		else
0: 		{
0: 			maximumWidth = higherType.getMaximumWidth();
0: 		}
0: 		
0: 		/* The result is nullable if either side is nullable */
0: 		nullable = leftType.isNullable() || rightType.isNullable();
0: 
0: 		/*
0: 		** The higher type does not have the right nullability.  Create a
0: 		** new DataTypeDescriptor that has the correct type and nullability.
0: 		**
0: 		** It's OK to call the implementation of the DataTypeDescriptorFactory
0: 		** here, because we're in the same package.
0: 		*/
0: 		return new DataTypeDescriptor(
0: 					higherType.getTypeId(),
0: 					precision,
0: 					scale,
0: 					nullable,
0: 					maximumWidth
0: 				);
0: 	}
0: 	/** @see TypeCompiler#comparable */
0: 	public boolean comparable(TypeId otherType,
0:                               boolean forEquals,
0:                               ClassFactory cf)
0: 	{
0: 		return numberComparable(otherType, forEquals, cf);
0: 	}
0: 
0: 
0: 	/** @see TypeCompiler#convertible */
0: 	public boolean convertible(TypeId otherType, boolean forDataTypeFunction)
0: 	{
0: 		return (numberConvertible(otherType, forDataTypeFunction));
0: 
0: 	}
0: 
0:         /**
0:          * Tell whether this type (numeric) is compatible with the given type.
0:          *
0:          * @param otherType     The TypeId of the other type.
0:          */
0: 	public boolean compatible(TypeId otherType)
0: 	{
0: 		// Numbers can only be compatible with other numbers.
0: 		return (otherType.isNumericTypeId());
0: 	}
0: 
0: 	/** @see TypeCompiler#storable */
0: 	public boolean storable(TypeId otherType, ClassFactory cf)
0: 	{
0: 		return numberStorable(getTypeId(), otherType, cf);
0: 	}
0: 
0: 	protected String nullMethodName()
0: 	{
0: 		int formatId = getStoredFormatIdFromTypeId();
0: 		switch (formatId)
0: 		{
0: 			case StoredFormatIds.DECIMAL_TYPE_ID:
0: 				return "getNullBigDecimal";
0: 
0: 			case StoredFormatIds.DOUBLE_TYPE_ID:
0: 				return "getNullDouble";
0: 
0: 			case StoredFormatIds.INT_TYPE_ID:
0: 				return "getNullInteger";
0: 
0: 			case StoredFormatIds.LONGINT_TYPE_ID:
0: 				return "getNullLong";
0: 
0: 			case StoredFormatIds.REAL_TYPE_ID:
0: 				return "getNullFloat";
0: 
0: 			case StoredFormatIds.SMALLINT_TYPE_ID:
0: 				return "getNullShort";
0: 
0: 			case StoredFormatIds.TINYINT_TYPE_ID:
0: 				return "getNullByte";
0: 
0: 			default:
0: 				if (SanityManager.DEBUG)
0: 				{
0: 					SanityManager.THROWASSERT(
0: 						"unexpected formatId in nullMethodName() - " + formatId);
0: 				}
0: 				return null;
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the precision of the operation involving
0: 	 * two of the same types.  Only meaningful for
0: 	 * decimals, which override this.
0: 	 *
0: 	 * @param operator a string representing the operator,
0: 	 *		null means no operator, just a type merge
0: 	 * @param leftType the left type
0: 	 * @param rightType the left type
0: 	 *
0: 	 * @return	the resultant precision
0: 	 */
0: 	private int getPrecision(String operator,
0: 							DataTypeDescriptor leftType,
0: 							DataTypeDescriptor rightType)
0: 	{
0: 		// Only meaningful for decimal
0: 		if (getStoredFormatIdFromTypeId() != StoredFormatIds.DECIMAL_TYPE_ID)
0: 		{
0: 			return leftType.getPrecision();
0: 		}
0: 
0: 		long lscale = (long)leftType.getScale();
0: 		long rscale = (long)rightType.getScale();
0: 		long lprec = (long)leftType.getPrecision();
0: 		long rprec = (long)rightType.getPrecision();
0: 		long val;
0: 
0: 		/*
0: 		** Null means datatype merge.  Take the maximum
0: 	 	** left of decimal digits plus the scale.
0: 		*/
0: 		if (operator == null)
0: 		{
0: 			val = this.getScale(operator, leftType, rightType) +
0: 					Math.max(lprec - lscale, rprec - rscale);
0: 		}
0: 		else if (operator.equals(TypeCompiler.TIMES_OP))
0: 		{
0: 			val = lprec + rprec;
0: 		}
0: 		else if (operator.equals(TypeCompiler.SUM_OP))
0: 		{
0: 			val = lprec - lscale + rprec - rscale + 
0: 						this.getScale(operator, leftType, rightType);
0: 		}
0: 		else if (operator.equals(TypeCompiler.DIVIDE_OP))
0: 		{
0: 			val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE,
0: 						   this.getScale(operator, leftType, rightType) + lprec - lscale + rprec);
0: 		}
0: 		/*
0: 		** AVG, -, +
0: 		*/
0: 		else
0: 		{
0: 			/*
0: 			** Take max scale and max left of decimal
0: 			** plus one.
0: 			*/
0: 			val = this.getScale(operator, leftType, rightType) +
0: 					Math.max(lprec - lscale, rprec - rscale) + 1;
0: 
0: 			if (val > DB2Limit.MAX_DECIMAL_PRECISION_SCALE)
0: 			// then, like DB2, just set it to the max possible.
0: 				val = DB2Limit.MAX_DECIMAL_PRECISION_SCALE;
0: 		}
0: 
0: 		if (val > Integer.MAX_VALUE)
0: 		{
0: 			val = Integer.MAX_VALUE;
0: 		}
0: 		val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE, val);
0: 		return (int)val;
0: 	}
0: 
0: 	/**
0: 	 * Get the scale of the operation involving
0: 	 * two of the same types.  Since we don't really
0: 	 * have a good way to pass the resultant scale
0: 	 * and precision around at execution time, we
0: 	 * will model that BigDecimal does by default.
0: 	 * This is good in most cases, though we would
0: 	 * probably like to use something more sophisticated
0: 	 * for division.
0: 	 *
0: 	 * @param operator a string representing the operator,
0: 	 *		null means no operator, just a type merge
0: 	 * @param leftType the left type
0: 	 * @param rightType the left type
0: 	 *
0: 	 * @return	the resultant precision
0: 	 */
0: 	private int getScale(String operator,
0: 							DataTypeDescriptor leftType,
0: 							DataTypeDescriptor rightType)
0: 	{
0: 		// Only meaningful for decimal
0: 		if (getStoredFormatIdFromTypeId() != StoredFormatIds.DECIMAL_TYPE_ID)
0: 		{
0: 			return leftType.getScale();
0: 		}
0: 
0: 		long val;
0: 
0: 		long lscale = (long)leftType.getScale();
0: 		long rscale = (long)rightType.getScale();
0: 		long lprec = (long)leftType.getPrecision();
0: 		long rprec = (long)rightType.getPrecision();
0: 
0: 		/*
0: 		** Retain greatest scale, take sum of left
0: 		** of decimal
0: 		*/
0: 		if (TypeCompiler.TIMES_OP.equals(operator))
0: 		{	
0: 			val = lscale + rscale;
0: 		}
0: 		else if (TypeCompiler.DIVIDE_OP.equals(operator))
0: 		{
0: 			/*
0: 			** Take max left scale + right precision - right scale + 1, 
0: 			** or 4, whichever is biggest 
0: 			*/
0: 			LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 				(ContextService.getContext(LanguageConnectionContext.CONTEXT_ID)); 
0: 
0: 			// Scale: 31 - left precision + left scale - right scale
0: 				val = Math.max(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE - lprec + lscale - rscale, 0);
0: 
0: 		}
0: 		else if (TypeCompiler.AVG_OP.equals(operator))
0: 		{
0: 			val = Math.max(Math.max(lscale, rscale),
0: 						NumberDataValue.MIN_DECIMAL_DIVIDE_SCALE);
0: 		}
0: 		/*
0: 		** SUM, -, + all take max(lscale,rscale)
0: 		*/
0: 		else
0: 		{
0: 			val = Math.max(lscale, rscale);
0: 		}
0: 
0: 		if (val > Integer.MAX_VALUE)
0: 		{
0: 			val = Integer.MAX_VALUE;
0: 		}
0: 		val = Math.min(NumberDataValue.MAX_DECIMAL_PRECISION_SCALE, val);
0: 		return (int)val;
0: 	}
0: }
============================================================================