1:eac0369: /*
7:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CharConstantNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.types.StringDataValue;
1:eac0369: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:eac0369: public final class CharConstantNode extends ConstantNode
6:eac0369: {
1:2706d1f: 
1:2706d1f:     // Allowed kinds
1:2706d1f:     final static int K_CHAR = 0;
1:2706d1f:     final static int K_VARCHAR = 1;
1:2706d1f:     final static int K_LONGVARCHAR = 2;
1:2706d1f:     final static int K_CLOB = 3;
1:2706d1f: 
1:2706d1f:     /**
1:2706d1f:      * This class is used to hold logically different objects for
1:2706d1f:      * space efficiency. {@code kind} represents the logical object
1:2706d1f:      * type. See also {@link ValueNode#isSameNodeKind}.
1:2706d1f:      */
1:2706d1f:     final int kind;
1:2706d1f: 
1:3bb140c:     CharConstantNode(String value, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(TypeId.CHAR_ID,
1:3bb140c:               value == null, // nullable?
1:3bb140c:               (value != null) ? value.length() : 0,
1:3bb140c:               cm);
1:eac0369: 
1:3bb140c:         setValue(getDataValueFactory().getCharDataValue(value));
1:2706d1f:         kind = K_CHAR;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     CharConstantNode(TypeId t, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(t, true, 0, cm);
1:2706d1f:         kind = K_CHAR;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:2706d1f:      * @param kind The node kind
1:2706d1f:      * @param t    The type id
1:2706d1f:      * @param cm   The context manager
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:2706d1f:     CharConstantNode(int kind, TypeId t, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(t, true, 0, cm);
1:2706d1f:         this.kind = kind;
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:3bb140c:      * Constructor for a CharConstantNode of a specific length.
1:3bb140c:      *
1:3bb140c:      * @param newValue A String containing the value of the constant
1:3bb140c:      * @param newLength The length of the new value of the constant
1:3bb140c:      * @param cm
1:3bb140c:      * @throws StandardException
1:3bb140c:      */
1:3bb140c:     CharConstantNode(String newValue, int newLength, ContextManager cm)
1:3bb140c:             throws StandardException {
1:eac0369: 
1:3bb140c:         super(TypeId.CHAR_ID,
1:3bb140c:               newValue == null,
1:3bb140c:               newLength,
1:3bb140c:               cm);
1:3bb140c: 
1:2706d1f:         kind = K_CHAR;
1:3bb140c: 
1:3bb140c:         if (newValue.length() > newLength) {
1:3bb140c:            throw StandardException.newException(
1:3bb140c:                     SQLState.LANG_STRING_TRUNCATION,
1:3bb140c:                     "CHAR",
1:3bb140c:                     newValue,
1:3bb140c:                     String.valueOf(newLength));
4:eac0369: 		}
1:eac0369: 
1:3bb140c:         // Blank pad the string if necessesary
1:3bb140c:        while (newValue.length() < newLength) {
1:3bb140c:            newValue = newValue + ' ';
1:eac0369: 		}
1:eac0369: 
1:3bb140c:        setValue(getDataValueFactory().getCharDataValue(newValue));
1:eac0369: 	}
1:eac0369: 
4:eac0369: 	/**
1:eac0369: 	 * Return the value from this CharConstantNode
8:eac0369: 	 *
1:eac0369: 	 * @return	The value of this CharConstantNode.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:3bb140c:     String  getString() throws StandardException
1:eac0369: 	{
1:eac0369: 		return value.getString();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the length
1:eac0369: 	 *
1:eac0369: 	 * @return	The length of the value this node represents
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	//public int	getLength() throws StandardException
1:eac0369: 	//{
1:eac0369: 	//	return value.getLength();
1:eac0369: 	//}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return an Object representing the bind time value of this
1:eac0369: 	 * expression tree.  If the expression tree does not evaluate to
1:eac0369: 	 * a constant at bind time then we return null.
1:eac0369: 	 * This is useful for bind time resolution of VTIs.
1:eac0369: 	 * RESOLVE: What do we do for primitives?
1:eac0369: 	 *
1:eac0369: 	 * @return	An Object representing the bind time value of this expression tree.
1:eac0369: 	 *			(null if not a bind time constant.)
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	Object getConstantValueAsObject() throws StandardException 
1:eac0369: 	{
1:eac0369: 		return value.getString();
1:eac0369: 	}
1:eac0369: 	
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:3bb140c:         FromList fromList,
1:3bb140c:         SubqueryList subqueryList,
1:3bb140c:         List<AggregateNode> aggregates) throws StandardException
1:eac0369: 	{
1:316ddc4: 		//The DTD for this character constant should get its collation type
1:316ddc4: 		//from the schema it is getting compiled in.
1:9ed7c4d: 		setCollationUsingCompilationSchema();
1:316ddc4: 	    //Once we have the collation type, we should check if the value
1:316ddc4: 	    //associated with this node should change from 
1:316ddc4: 	    //SQLChar/SQLVarchar/SQLLongvarchar/SQLClob
1:316ddc4: 	    //to
1:316ddc4: 	    //CollatorSQLChar/CollatoSQLVarchar/CollatoSQLLongvarchar/CollatoSQLClob.
1:316ddc4: 	    //By default, the value associated with char constants are SQLxxx
1:316ddc4: 	    //kind because that is what is needed for UCS_BASIC collation. But
1:316ddc4: 	    //if at this bind time, we find that the char constant's collation
1:316ddc4: 	    //type is territory based, then we should change value from SQLxxx
1:316ddc4: 	    //to CollatorSQLxxx. That is what is getting done below.
1:316ddc4: 	    value = ((StringDataValue)value).getValue(
1:316ddc4: 	    		getLanguageConnectionContext().getDataValueFactory().getCharacterCollator(
1:316ddc4: 	    				getTypeServices().getCollationType()));
1:3841b98: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This generates the proper constant.  It is implemented
1:eac0369: 	 * by every specific constant node (e.g. IntConstantNode).
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb) throws StandardException
1:eac0369: 	{
1:eac0369: 		// The generated java is the expression:
1:eac0369: 		// "#getString()"
1:eac0369: 		mb.push(getString());
1:eac0369: 	}
1:2706d1f: 
1:2706d1f:     @Override
1:2706d1f:     boolean isSameNodeKind(ValueNode o) {
1:2706d1f:         return super.isSameNodeKind(o) && ((CharConstantNode)o).kind == kind;
1:2706d1f:     }}
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Allowed kinds
1:     final static int K_CHAR = 0;
1:     final static int K_VARCHAR = 1;
1:     final static int K_LONGVARCHAR = 2;
1:     final static int K_CLOB = 3;
1: 
1:     /**
1:      * This class is used to hold logically different objects for
1:      * space efficiency. {@code kind} represents the logical object
1:      * type. See also {@link ValueNode#isSameNodeKind}.
1:      */
1:     final int kind;
1: 
/////////////////////////////////////////////////////////////////////////
1:         kind = K_CHAR;
1:         kind = K_CHAR;
1:      * @param kind The node kind
1:      * @param t    The type id
1:      * @param cm   The context manager
1:     CharConstantNode(int kind, TypeId t, ContextManager cm)
1:         this.kind = kind;
/////////////////////////////////////////////////////////////////////////
1:         kind = K_CHAR;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     boolean isSameNodeKind(ValueNode o) {
1:         return super.isSameNodeKind(o) && ((CharConstantNode)o).kind == kind;
1:     }}
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1:     CharConstantNode(String value, ContextManager cm)
1:             throws StandardException {
1:         super(TypeId.CHAR_ID,
1:               value == null, // nullable?
1:               (value != null) ? value.length() : 0,
1:               cm);
1:         setValue(getDataValueFactory().getCharDataValue(value));
0:         setNodeType(C_NodeTypes.CHAR_CONSTANT_NODE);
1:     }
1:     CharConstantNode(TypeId t, ContextManager cm)
1:             throws StandardException {
1:         super(t, true, 0, cm);
0:         setNodeType(C_NodeTypes.CHAR_CONSTANT_NODE);
1:     }
1:     /**
0:      * @param type VARCHAR_CONSTANT_NODE or LONGVARCHAR_CONSTANT_NODE
0:      * @param t typeId
0:      * @param cm context manager
1:      * @throws StandardException
1:      */
0:     CharConstantNode(int type, TypeId t, ContextManager cm)
1:             throws StandardException {
1:         super(t, true, 0, cm);
0:         setNodeType(type);
1:     }
1:     /**
1:      * Constructor for a CharConstantNode of a specific length.
1:      *
1:      * @param newValue A String containing the value of the constant
1:      * @param newLength The length of the new value of the constant
1:      * @param cm
1:      * @throws StandardException
1:      */
1:     CharConstantNode(String newValue, int newLength, ContextManager cm)
1:             throws StandardException {
1:         super(TypeId.CHAR_ID,
1:               newValue == null,
1:               newLength,
1:               cm);
1: 
0:         setNodeType(C_NodeTypes.CHAR_CONSTANT_NODE);
1: 
1:         if (newValue.length() > newLength) {
1:            throw StandardException.newException(
1:                     SQLState.LANG_STRING_TRUNCATION,
1:                     "CHAR",
1:                     newValue,
1:                     String.valueOf(newLength));
1:         // Blank pad the string if necessesary
1:        while (newValue.length() < newLength) {
1:            newValue = newValue + ' ';
1:        setValue(getDataValueFactory().getCharDataValue(newValue));
/////////////////////////////////////////////////////////////////////////
1:     String  getString() throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:         FromList fromList,
1:         SubqueryList subqueryList,
1:         List<AggregateNode> aggregates) throws StandardException
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         FromList fromList, SubqueryList subqueryList, List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9ed7c4d
/////////////////////////////////////////////////////////////////////////
1: 		setCollationUsingCompilationSchema();
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CharConstantNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.types.StringDataValue;
1: import org.apache.derby.iapi.types.TypeId;
1: 
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.util.ReuseFactory;
1: 
0: import java.sql.Types;
1: 
1: public final class CharConstantNode extends ConstantNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
0: 	 * Initializer for a CharConstantNode.
1: 	 *
0: 	 * @param arg1	A String containing the value of the constant
0: 	 * @param arg2	The factory to get the TypeId
0: 	 *			and DataTypeServices factories from.
1: 	 *
0: 	 * - OR *
1: 	 *
0: 	 * @param arg1	The TypeId for the type of the node
1: 	 *
0: 	 * @exception StandardException
1: 	 */
0: 	public void init(
0: 					Object arg1)
0: 		throws StandardException
1: 	{
0: 		if (arg1 instanceof TypeId)
1: 		{
0: 			super.init(
0: 						arg1,
0: 						Boolean.TRUE,
0: 						ReuseFactory.getInteger(0));
1: 		}
0: 		else
1: 		{
0: 			String val = (String) arg1;
1: 
0: 			super.init(
0: 				TypeId.CHAR_ID,
0: 				(val == null) ? Boolean.TRUE : Boolean.FALSE,
0: 				(val != null) ?
0: 					ReuseFactory.getInteger(val.length()) :
0: 					ReuseFactory.getInteger(0));
1: 
0: 			setValue(getDataValueFactory().getCharDataValue(val));
1: 		}
1: 	}
1: 
1: 	/**
0: 	 * Initializer for a CharConstantNode of a specific length.
1: 	 *
0: 	 * @param newValue	A String containing the value of the constant
0: 	 * @param newLength The length of the new value of the constant
0: 	 * @param typeCompilationFactory	The factory to get the TypeId
0: 	 *			and DataTypeServices factories from.
1: 	 *
0: 	 * @exception StandardException
1: 	 */
0: 	public void init(
0: 					Object newValue, 
0: 					Object newLength)
0: 		throws StandardException
1: 	{
0: 		String val = (String) newValue;
0: 		int newLen = ((Integer) newLength).intValue();
1: 
0: 		super.init(
0: 			 TypeId.CHAR_ID,
0: 			 (val == null) ? Boolean.TRUE : Boolean.FALSE,
0: 			 newLength);
1: 
0: 		if (val.length() > newLen)
1: 		{
0: 			throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, "CHAR", val, String.valueOf(newLen));
1: 		}
1: 
0: 		// Blank pad the string if necessesary
0: 		while (val.length() < newLen)
1: 		{
0: 			val = val + ' ';
1: 		}
1: 
0: 		setValue(getDataValueFactory().getCharDataValue(val));
1: 	}
1: 
1: 	/**
1: 	 * Return the value from this CharConstantNode
1: 	 *
1: 	 * @return	The value of this CharConstantNode.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public String	getString() throws StandardException
1: 	{
1: 		return value.getString();
1: 	}
1: 
1: 	/**
1: 	 * Return the length
1: 	 *
1: 	 * @return	The length of the value this node represents
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
1: 	//public int	getLength() throws StandardException
1: 	//{
1: 	//	return value.getLength();
1: 	//}
1: 
1: 	/**
1: 	 * Return an Object representing the bind time value of this
1: 	 * expression tree.  If the expression tree does not evaluate to
1: 	 * a constant at bind time then we return null.
1: 	 * This is useful for bind time resolution of VTIs.
1: 	 * RESOLVE: What do we do for primitives?
1: 	 *
1: 	 * @return	An Object representing the bind time value of this expression tree.
1: 	 *			(null if not a bind time constant.)
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	Object getConstantValueAsObject() throws StandardException 
1: 	{
1: 		return value.getString();
1: 	}
1: 
1: 	/**
1: 	 * This generates the proper constant.  It is implemented
1: 	 * by every specific constant node (e.g. IntConstantNode).
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
0: 	 * @return		The compiled Expression, 
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb) throws StandardException
1: 	{
1: 		// The generated java is the expression:
1: 		// "#getString()"
1: 		mb.push(getString());
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:f63b7da
/////////////////////////////////////////////////////////////////////////
0: 		setCollationUsingCompilationSchema(
0: 				StringDataValue.COLLATION_DERIVATION_IMPLICIT);
commit:316ddc4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		//The DTD for this character constant should get its collation type
1: 		//from the schema it is getting compiled in.
0: 		getTypeServices().setCollationType(
0: 				getLanguageConnectionContext().getDefaultSchema().getCollationType());
1: 	    //Once we have the collation type, we should check if the value
1: 	    //associated with this node should change from 
1: 	    //SQLChar/SQLVarchar/SQLLongvarchar/SQLClob
1: 	    //to
1: 	    //CollatorSQLChar/CollatoSQLVarchar/CollatoSQLLongvarchar/CollatoSQLClob.
1: 	    //By default, the value associated with char constants are SQLxxx
1: 	    //kind because that is what is needed for UCS_BASIC collation. But
1: 	    //if at this bind time, we find that the char constant's collation
1: 	    //type is territory based, then we should change value from SQLxxx
1: 	    //to CollatorSQLxxx. That is what is getting done below.
1: 	    value = ((StringDataValue)value).getValue(
1: 	    		getLanguageConnectionContext().getDataValueFactory().getCharacterCollator(
1: 	    				getTypeServices().getCollationType()));
commit:dbfbecb
/////////////////////////////////////////////////////////////////////////
0: 		    
0: 		    //Once we have the collation type, we should check if the value
0: 		    //associated with this node should change from 
0: 		    //SQLChar/SQLVarchar/SQLLongvarchar/SQLClob
0: 		    //to
0: 		    //CollatorSQLChar/CollatoSQLVarchar/CollatoSQLLongvarchar/CollatoSQLClob.
0: 		    //By default, the value associated with char constants are SQLxxx
0: 		    //kind because that is what is needed for UCS_BASIC collation. But
0: 		    //if at this bind time, we find that the char constant's collation
0: 		    //type is territory based, then we should change value from SQLxxx
0: 		    //to CollatorSQLxxx. That is what is getting done below.
0: 		    value = ((StringDataValue)value).getValue(
0: 		    		lcc.getDataValueFactory().getCharacterCollator(
0: 		    				getTypeServices().getCollationType()));
commit:3841b98
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.conn.ConnectionUtil;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
0: import java.util.Vector;
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public ValueNode bindExpression(
0: 			FromList fromList, SubqueryList subqueryList,
0: 			Vector	aggregateVector)
0: 	throws StandardException
0: 	{
0: 		try {
0: 			//The DTD for this character constant should get its collation type
0: 			//from the schema it is getting compiled in.
0: 			LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
0: 		    getTypeServices().setCollationType(lcc.getDefaultSchema().getCollationType());
0: 		}
0: 		catch( java.sql.SQLException sqle)
0: 		{
0: 			throw StandardException.plainWrapException( sqle);
0: 		}
1: 		return this;
0: 	}
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	 * @param arg1	A String containing the value of the constant OR The TypeId for the type of the node
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.types.StringDataValue;
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.util.ReuseFactory;
0: 
0: import java.sql.Types;
0: 
0: public final class CharConstantNode extends ConstantNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Initializer for a CharConstantNode.
0: 	 *
0: 	 * @param arg1	A String containing the value of the constant
0: 	 * @param arg2	The factory to get the TypeId
0: 	 *			and DataTypeServices factories from.
0: 	 *
0: 	 * - OR *
0: 	 *
0: 	 * @param arg1	The TypeId for the type of the node
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 	public void init(
0: 					Object arg1)
0: 		throws StandardException
0: 	{
0: 		if (arg1 instanceof TypeId)
0: 		{
0: 			super.init(
0: 						arg1,
0: 						Boolean.TRUE,
0: 						ReuseFactory.getInteger(0));
0: 		}
0: 		else
0: 		{
0: 			String val = (String) arg1;
0: 
0: 			super.init(
0: 				TypeId.CHAR_ID,
0: 				(val == null) ? Boolean.TRUE : Boolean.FALSE,
0: 				(val != null) ?
0: 					ReuseFactory.getInteger(val.length()) :
0: 					ReuseFactory.getInteger(0));
0: 
0: 			setValue(getDataValueFactory().getCharDataValue(val));
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Initializer for a CharConstantNode of a specific length.
0: 	 *
0: 	 * @param newValue	A String containing the value of the constant
0: 	 * @param newLength The length of the new value of the constant
0: 	 * @param typeCompilationFactory	The factory to get the TypeId
0: 	 *			and DataTypeServices factories from.
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 	public void init(
0: 					Object newValue, 
0: 					Object newLength)
0: 		throws StandardException
0: 	{
0: 		String val = (String) newValue;
0: 		int newLen = ((Integer) newLength).intValue();
0: 
0: 		super.init(
0: 			 TypeId.CHAR_ID,
0: 			 (val == null) ? Boolean.TRUE : Boolean.FALSE,
0: 			 newLength);
0: 
0: 		if (val.length() > newLen)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_STRING_TRUNCATION, "CHAR", val, String.valueOf(newLen));
0: 		}
0: 
0: 		// Blank pad the string if necessesary
0: 		while (val.length() < newLen)
0: 		{
0: 			val = val + ' ';
0: 		}
0: 
0: 		setValue(getDataValueFactory().getCharDataValue(val));
0: 	}
0: 
0: 	/**
0: 	 * Return the value from this CharConstantNode
0: 	 *
0: 	 * @return	The value of this CharConstantNode.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public String	getString() throws StandardException
0: 	{
0: 		return value.getString();
0: 	}
0: 
0: 	/**
0: 	 * Return the length
0: 	 *
0: 	 * @return	The length of the value this node represents
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	//public int	getLength() throws StandardException
0: 	//{
0: 	//	return value.getLength();
0: 	//}
0: 
0: 	/**
0: 	 * Return an Object representing the bind time value of this
0: 	 * expression tree.  If the expression tree does not evaluate to
0: 	 * a constant at bind time then we return null.
0: 	 * This is useful for bind time resolution of VTIs.
0: 	 * RESOLVE: What do we do for primitives?
0: 	 *
0: 	 * @return	An Object representing the bind time value of this expression tree.
0: 	 *			(null if not a bind time constant.)
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	Object getConstantValueAsObject() throws StandardException 
0: 	{
0: 		return value.getString();
0: 	}
0: 
0: 	/**
0: 	 * This generates the proper constant.  It is implemented
0: 	 * by every specific constant node (e.g. IntConstantNode).
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 * @return		The compiled Expression, 
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb) throws StandardException
0: 	{
0: 		// The generated java is the expression:
0: 		// "#getString()"
0: 		mb.push(getString());
0: 	}
0: }
============================================================================