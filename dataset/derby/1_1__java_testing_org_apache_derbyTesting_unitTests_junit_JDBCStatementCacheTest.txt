1:78944d5: /*
1:78944d5: 
1:78944d5:    Derby - Class org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest
1:78944d5: 
1:78944d5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:78944d5:    contributor license agreements.  See the NOTICE file distributed with
1:78944d5:    this work for additional information regarding copyright ownership.
1:78944d5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:78944d5:    (the "License"); you may not use this file except in compliance with
1:78944d5:    the License.  You may obtain a copy of the License at
1:78944d5: 
1:78944d5:       http://www.apache.org/licenses/LICENSE-2.0
1:78944d5: 
1:78944d5:    Unless required by applicable law or agreed to in writing, software
1:78944d5:    distributed under the License is distributed on an "AS IS" BASIS,
1:78944d5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:78944d5:    See the License for the specific language governing permissions and
1:78944d5:    limitations under the License.
1:78944d5: 
1:78944d5: */
1:78944d5: 
1:78944d5: package org.apache.derbyTesting.unitTests.junit;
1:78944d5: 
1:78944d5: import java.sql.CallableStatement;
1:78944d5: import java.sql.PreparedStatement;
1:78944d5: import java.sql.SQLException;
1:78944d5: import junit.framework.Test;
1:78944d5: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1:78944d5: import org.apache.derby.client.am.stmtcache.StatementKey;
1:78944d5: import org.apache.derby.client.am.stmtcache.StatementKeyFactory;
1:78944d5: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:78944d5: import org.apache.derbyTesting.junit.TestConfiguration;
1:78944d5: 
1:78944d5: /**
1:78944d5:  * Tests basic operation of the JDBC prepared statement object cache and the
1:78944d5:  * keys used to operate on it.
1:78944d5:  */
1:78944d5: public class JDBCStatementCacheTest
1:78944d5:         extends BaseJDBCTestCase {
1:78944d5: 
1:78944d5:     public JDBCStatementCacheTest(String name) {
1:78944d5:         super(name);
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Make sure a negative or zero max size is not allowed, as this will in
1:78944d5:      * effect be no caching but with an overhead.
1:78944d5:      * <p>
1:78944d5:      * The overhead would come from always throwing out the newly inserted
1:78944d5:      * element.
1:78944d5:      */
1:78944d5:     public void testCreateCacheWithZeroOrNegativeMaxSize() {
1:78944d5:         try {
1:78944d5:             new JDBCStatementCache(-10);
1:78944d5:             fail("Negative max size should not be allowed");
1:78944d5:         } catch (IllegalArgumentException iae) {
1:78944d5:             // As expected
1:78944d5:         }
1:78944d5:         try {
1:78944d5:             new JDBCStatementCache(0);
1:78944d5:             fail("Zero max size should not be allowed");
1:78944d5:         } catch (IllegalArgumentException iae) {
1:78944d5:             // As expected
1:78944d5:         }
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Test basic insertion into the cache.
1:78944d5:      * 
1:78944d5:      * @throws SQLException if obtaining a PreparedStatement fails
1:78944d5:      */
1:78944d5:     public void testBasicInsertion()
1:78944d5:             throws SQLException {
1:78944d5:         String sql = "values 1";
1:78944d5:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:78944d5:         PreparedStatement ps = prepareStatement(sql);
1:78944d5:         StatementKey key = StatementKeyFactory.newPrepared(sql, "app", 1);
1:78944d5:         assertTrue(cache.cacheStatement(key, ps));
1:78944d5:         assertEquals(ps, cache.getCached(key));
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Test insertion of a duplicate key.
1:78944d5:      * 
1:78944d5:      * @throws SQLException if obtaining a PreparedStatement fails
1:78944d5:      */
1:78944d5:     public void testBasicDuplicateKeyInsertion()
1:78944d5:             throws SQLException {
1:78944d5:         String sql = "values 1";
1:78944d5:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:78944d5:         PreparedStatement ps = prepareStatement(sql);
1:78944d5:         StatementKey key = StatementKeyFactory.newPrepared(sql, "app", 1);
1:78944d5:         assertTrue(cache.cacheStatement(key, ps));
1:78944d5:         // Duplicates shall not be inserted.
1:78944d5:         assertFalse(cache.cacheStatement(key, ps));
1:78944d5:         assertEquals(ps, cache.getCached(key));
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Make sure requesting a cached callable statement does not return a
1:78944d5:      * <code>PreparedStatement</code> object.
1:78944d5:      * 
1:78944d5:      * @throws SQLException if creating database resources fail
1:78944d5:      */
1:78944d5:     public void testBasicCallableVsPrepared()
1:78944d5:             throws SQLException {
1:78944d5:         String sql = "values 7";
1:78944d5:         String schema = "MYAPP";
1:78944d5:         int rsh = 1;
1:78944d5:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:78944d5:         PreparedStatement ps = prepareStatement(sql);
1:78944d5:         StatementKey key = StatementKeyFactory.newPrepared(sql, schema, rsh);
1:78944d5:         assertTrue(cache.cacheStatement(key, ps));
1:78944d5:         StatementKey callKey =
1:78944d5:                 StatementKeyFactory.newCallable(sql, schema, rsh);
1:78944d5:         assertNotSame(ps, cache.getCached(callKey));
1:78944d5:         CallableStatement cs = prepareCall(sql);
1:78944d5:         // No entry should exists yet.
1:78944d5:         assertNull(cache.getCached(callKey));
1:78944d5:         // New callable statements should be inserted.
1:78944d5:         assertTrue(cache.cacheStatement(callKey, cs));
1:78944d5:         // Make sure we get the same object back.
1:78944d5:         assertSame(cs, cache.getCached(callKey));
1:78944d5:         // Make sure we don't get a callable when we ask for a prepared.
1:78944d5:         assertNotSame(cs, cache.getCached(key));
1:78944d5:     }
1:78944d5: 
1:78944d5:     /**
1:78944d5:      * Returns the appropriate tests.
1:78944d5:      * <p>
1:78944d5:      * Run only client/server, because the code being tested does not live
1:78944d5:      * in the embedded driver (yet).
1:78944d5:      * 
1:78944d5:      * @return A suite of tests (may be empty).
1:78944d5:      */
1:78944d5:     public static Test suite() {
1:78944d5:         // Run only client/server, because the code being tested does not live
1:78944d5:         // in the embedded driver (yet).
1:78944d5:         return TestConfiguration.clientServerSuite(
1:78944d5:                 JDBCStatementCacheTest.class);
1:78944d5:     }
1:78944d5: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:78944d5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import junit.framework.Test;
1: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: import org.apache.derby.client.am.stmtcache.StatementKeyFactory;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests basic operation of the JDBC prepared statement object cache and the
1:  * keys used to operate on it.
1:  */
1: public class JDBCStatementCacheTest
1:         extends BaseJDBCTestCase {
1: 
1:     public JDBCStatementCacheTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Make sure a negative or zero max size is not allowed, as this will in
1:      * effect be no caching but with an overhead.
1:      * <p>
1:      * The overhead would come from always throwing out the newly inserted
1:      * element.
1:      */
1:     public void testCreateCacheWithZeroOrNegativeMaxSize() {
1:         try {
1:             new JDBCStatementCache(-10);
1:             fail("Negative max size should not be allowed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected
1:         }
1:         try {
1:             new JDBCStatementCache(0);
1:             fail("Zero max size should not be allowed");
1:         } catch (IllegalArgumentException iae) {
1:             // As expected
1:         }
1:     }
1: 
1:     /**
1:      * Test basic insertion into the cache.
1:      * 
1:      * @throws SQLException if obtaining a PreparedStatement fails
1:      */
1:     public void testBasicInsertion()
1:             throws SQLException {
1:         String sql = "values 1";
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         PreparedStatement ps = prepareStatement(sql);
1:         StatementKey key = StatementKeyFactory.newPrepared(sql, "app", 1);
1:         assertTrue(cache.cacheStatement(key, ps));
1:         assertEquals(ps, cache.getCached(key));
1:     }
1: 
1:     /**
1:      * Test insertion of a duplicate key.
1:      * 
1:      * @throws SQLException if obtaining a PreparedStatement fails
1:      */
1:     public void testBasicDuplicateKeyInsertion()
1:             throws SQLException {
1:         String sql = "values 1";
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         PreparedStatement ps = prepareStatement(sql);
1:         StatementKey key = StatementKeyFactory.newPrepared(sql, "app", 1);
1:         assertTrue(cache.cacheStatement(key, ps));
1:         // Duplicates shall not be inserted.
1:         assertFalse(cache.cacheStatement(key, ps));
1:         assertEquals(ps, cache.getCached(key));
1:     }
1: 
1:     /**
1:      * Make sure requesting a cached callable statement does not return a
1:      * <code>PreparedStatement</code> object.
1:      * 
1:      * @throws SQLException if creating database resources fail
1:      */
1:     public void testBasicCallableVsPrepared()
1:             throws SQLException {
1:         String sql = "values 7";
1:         String schema = "MYAPP";
1:         int rsh = 1;
1:         JDBCStatementCache cache = new JDBCStatementCache(10);
1:         PreparedStatement ps = prepareStatement(sql);
1:         StatementKey key = StatementKeyFactory.newPrepared(sql, schema, rsh);
1:         assertTrue(cache.cacheStatement(key, ps));
1:         StatementKey callKey =
1:                 StatementKeyFactory.newCallable(sql, schema, rsh);
1:         assertNotSame(ps, cache.getCached(callKey));
1:         CallableStatement cs = prepareCall(sql);
1:         // No entry should exists yet.
1:         assertNull(cache.getCached(callKey));
1:         // New callable statements should be inserted.
1:         assertTrue(cache.cacheStatement(callKey, cs));
1:         // Make sure we get the same object back.
1:         assertSame(cs, cache.getCached(callKey));
1:         // Make sure we don't get a callable when we ask for a prepared.
1:         assertNotSame(cs, cache.getCached(key));
1:     }
1: 
1:     /**
1:      * Returns the appropriate tests.
1:      * <p>
1:      * Run only client/server, because the code being tested does not live
1:      * in the embedded driver (yet).
1:      * 
1:      * @return A suite of tests (may be empty).
1:      */
1:     public static Test suite() {
1:         // Run only client/server, because the code being tested does not live
1:         // in the embedded driver (yet).
1:         return TestConfiguration.clientServerSuite(
1:                 JDBCStatementCacheTest.class);
1:     }
1: }
============================================================================