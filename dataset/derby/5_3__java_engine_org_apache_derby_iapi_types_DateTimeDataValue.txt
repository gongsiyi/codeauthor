1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.DateTimeDataValue
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: public interface DateTimeDataValue extends DataValueDescriptor
1:eac0369: {
1:eac0369: 	public static final int YEAR_FIELD = 0;
1:eac0369: 	public static final int MONTH_FIELD = 1;
1:eac0369: 	public static final int DAY_FIELD = 2;
1:eac0369: 	public static final int HOUR_FIELD = 3;
1:eac0369: 	public static final int MINUTE_FIELD = 4;
1:eac0369: 	public static final int SECOND_FIELD = 5;
1:eac0369: 
1:d365a22:     // The JDBC interval types
1:d365a22:     public static final int FRAC_SECOND_INTERVAL = 0;
1:d365a22:     public static final int SECOND_INTERVAL = 1;
1:d365a22:     public static final int MINUTE_INTERVAL = 2;
1:d365a22:     public static final int HOUR_INTERVAL = 3;
1:d365a22:     public static final int DAY_INTERVAL = 4;
1:d365a22:     public static final int WEEK_INTERVAL = 5;
1:d365a22:     public static final int MONTH_INTERVAL = 6;
1:d365a22:     public static final int QUARTER_INTERVAL = 7;
1:d365a22:     public static final int YEAR_INTERVAL = 8;
1:d365a22: 
2:eac0369: 	/**
1:eac0369: 	 * Get the year number out of a date.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	A NumberDataValue containing the year number.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	NumberDataValue getYear(NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the month number out of a date.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	A NumberDataValue containing the month number.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	NumberDataValue getMonth(NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the day of the month.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	A NumberDataValue containing the day of the month.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	NumberDataValue getDate(NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the hour of the day out of a time or timestamp.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	A NumberDataValue containing the hour of the day.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	NumberDataValue getHours(NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the minute of the hour out of a time or timestamp.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	A NumberDataValue containing the minute of the hour.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	NumberDataValue getMinutes(NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the second of the minute out of a time or timestamp.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	A NumberDataValue containing the second of the minute.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	NumberDataValue getSeconds(NumberDataValue result)
1:eac0369: 							throws StandardException;
1:d365a22: 
1:d365a22:     /**
1:d365a22:      * Add a number of intervals to a datetime value. Implements the JDBC escape TIMESTAMPADD function.
1:d365a22:      *
1:d365a22:      * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
1:d365a22:      *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
1:d365a22:      * @param intervalCount The number of intervals to add
1:d365a22:      * @param currentDate Used to convert time to timestamp
1:d365a22:      * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null then
1:d365a22:      *                     generate a new holder
1:d365a22:      *
1:d365a22:      * @return startTime + intervalCount intervals, as a timestamp
1:d365a22:      *
1:d365a22:      * @exception StandardException
1:d365a22:      */
1:d365a22:     DateTimeDataValue timestampAdd( int intervalType,
1:d365a22:                                     NumberDataValue intervalCount,
1:d365a22:                                     java.sql.Date currentDate,
1:d365a22:                                     DateTimeDataValue resultHolder)
1:d365a22:         throws StandardException;
1:d365a22: 
1:d365a22:     /**
1:d365a22:      * Finds the difference between two datetime values as a number of intervals. Implements the JDBC
1:d365a22:      * TIMESTAMPDIFF escape function.
1:d365a22:      *
1:d365a22:      * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
1:d365a22:      *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
1:d365a22:      * @param time1
1:d365a22:      * @param currentDate Used to convert time to timestamp
1:d365a22:      * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null then
1:d365a22:      *                     generate a new holder
1:d365a22:      *
1:d365a22:      * @return the number of intervals by which this datetime is greater than time1
1:d365a22:      *
1:d365a22:      * @exception StandardException
1:d365a22:      */
1:d365a22:     NumberDataValue timestampDiff( int intervalType,
1:d365a22:                                    DateTimeDataValue time1,
1:d365a22:                                    java.sql.Date currentDate,
1:d365a22:                                    NumberDataValue resultHolder)
1:d365a22:         throws StandardException;
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:d365a22
/////////////////////////////////////////////////////////////////////////
1:     // The JDBC interval types
1:     public static final int FRAC_SECOND_INTERVAL = 0;
1:     public static final int SECOND_INTERVAL = 1;
1:     public static final int MINUTE_INTERVAL = 2;
1:     public static final int HOUR_INTERVAL = 3;
1:     public static final int DAY_INTERVAL = 4;
1:     public static final int WEEK_INTERVAL = 5;
1:     public static final int MONTH_INTERVAL = 6;
1:     public static final int QUARTER_INTERVAL = 7;
1:     public static final int YEAR_INTERVAL = 8;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Add a number of intervals to a datetime value. Implements the JDBC escape TIMESTAMPADD function.
1:      *
1:      * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
1:      *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
1:      * @param intervalCount The number of intervals to add
1:      * @param currentDate Used to convert time to timestamp
1:      * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null then
1:      *                     generate a new holder
1:      *
1:      * @return startTime + intervalCount intervals, as a timestamp
1:      *
1:      * @exception StandardException
1:      */
1:     DateTimeDataValue timestampAdd( int intervalType,
1:                                     NumberDataValue intervalCount,
1:                                     java.sql.Date currentDate,
1:                                     DateTimeDataValue resultHolder)
1:         throws StandardException;
1: 
1:     /**
1:      * Finds the difference between two datetime values as a number of intervals. Implements the JDBC
1:      * TIMESTAMPDIFF escape function.
1:      *
1:      * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
1:      *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
1:      * @param time1
1:      * @param currentDate Used to convert time to timestamp
1:      * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null then
1:      *                     generate a new holder
1:      *
1:      * @return the number of intervals by which this datetime is greater than time1
1:      *
1:      * @exception StandardException
1:      */
1:     NumberDataValue timestampDiff( int intervalType,
1:                                    DateTimeDataValue time1,
1:                                    java.sql.Date currentDate,
1:                                    NumberDataValue resultHolder)
1:         throws StandardException;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:cf58aec
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.DateTimeDataValue
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
1: 
1: public interface DateTimeDataValue extends DataValueDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	public static final int YEAR_FIELD = 0;
1: 	public static final int MONTH_FIELD = 1;
1: 	public static final int DAY_FIELD = 2;
1: 	public static final int HOUR_FIELD = 3;
1: 	public static final int MINUTE_FIELD = 4;
1: 	public static final int SECOND_FIELD = 5;
1: 
1: 	/**
1: 	 * Get the year number out of a date.
1: 	 *
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	A NumberDataValue containing the year number.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	NumberDataValue getYear(NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * Get the month number out of a date.
1: 	 *
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	A NumberDataValue containing the month number.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	NumberDataValue getMonth(NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * Get the day of the month.
1: 	 *
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	A NumberDataValue containing the day of the month.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	NumberDataValue getDate(NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * Get the hour of the day out of a time or timestamp.
1: 	 *
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	A NumberDataValue containing the hour of the day.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	NumberDataValue getHours(NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * Get the minute of the hour out of a time or timestamp.
1: 	 *
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	A NumberDataValue containing the minute of the hour.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	NumberDataValue getMinutes(NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * Get the second of the minute out of a time or timestamp.
1: 	 *
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	A NumberDataValue containing the second of the minute.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	NumberDataValue getSeconds(NumberDataValue result)
1: 							throws StandardException;
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: 
0: public interface DateTimeDataValue extends DataValueDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	public static final int YEAR_FIELD = 0;
0: 	public static final int MONTH_FIELD = 1;
0: 	public static final int DAY_FIELD = 2;
0: 	public static final int HOUR_FIELD = 3;
0: 	public static final int MINUTE_FIELD = 4;
0: 	public static final int SECOND_FIELD = 5;
0: 
0: 	/**
0: 	 * Get the year number out of a date.
0: 	 *
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	A NumberDataValue containing the year number.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	NumberDataValue getYear(NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * Get the month number out of a date.
0: 	 *
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	A NumberDataValue containing the month number.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	NumberDataValue getMonth(NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * Get the day of the month.
0: 	 *
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	A NumberDataValue containing the day of the month.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	NumberDataValue getDate(NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * Get the hour of the day out of a time or timestamp.
0: 	 *
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	A NumberDataValue containing the hour of the day.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	NumberDataValue getHours(NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * Get the minute of the hour out of a time or timestamp.
0: 	 *
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	A NumberDataValue containing the minute of the hour.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	NumberDataValue getMinutes(NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * Get the second of the minute out of a time or timestamp.
0: 	 *
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	A NumberDataValue containing the second of the minute.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	NumberDataValue getSeconds(NumberDataValue result)
0: 							throws StandardException;
0: }
0: 
============================================================================