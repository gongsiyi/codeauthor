1:eac0369: /*
8:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
1:eac0369: public abstract class UnaryLogicalOperatorNode extends UnaryOperatorNode
2:eac0369: {
1:3bb140c:     UnaryLogicalOperatorNode(ValueNode operand,
1:3bb140c:             String methodName,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(operand, methodName, methodName, cm);
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     /**
1:eac0369: 	 * Bind this logical operator.  All that has to be done for binding
1:eac0369: 	 * a logical operator is to bind the operand, check that the operand
1:eac0369: 	 * is SQLBoolean, and set the result type to SQLBoolean.
3:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         bindOperand(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Logical operators work only on booleans.  If the operand 
1:eac0369: 		** is not boolean, throw an exception.
1:eac0369: 		**
1:eac0369: 		** For now, this exception will never happen, because the grammar
1:eac0369: 		** does not allow arbitrary expressions with NOT.  But when
1:eac0369: 		** we start allowing generalized boolean expressions, we will modify
1:eac0369: 		** the grammar, so this test will become useful.
1:eac0369: 		*/
1:eac0369: 
1:3233189: 		if ( ! operand.getTypeServices().getTypeId().isBooleanTypeId())
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_UNARY_LOGICAL_NON_BOOLEAN);
2:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Set the type info */
1:eac0369: 		setFullTypeInfo();
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 		
4:eac0369: 	/**
1:eac0369: 	 * Set all of the type info (nullability and DataTypeServices) for
1:eac0369: 	 * this node.  Extracts out tasks that must be done by both bind()
1:eac0369: 	 * and post-bind() AndNode generation.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	protected void setFullTypeInfo()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		boolean nullableResult;
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** Set the result type of this comparison operator based on the
1:eac0369: 		** operands.  The result type is always SQLBoolean - the only question
1:eac0369: 		** is whether it is nullable or not.  If either of the operands is
1:eac0369: 		** nullable, the result of the comparison must be nullable, too, so
1:eac0369: 		** we can represent the unknown truth value.
1:eac0369: 		*/
1:eac0369: 		nullableResult = operand.getTypeServices().isNullable();
1:eac0369: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, nullableResult));
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.types.TypeId;
1:     UnaryLogicalOperatorNode(ValueNode operand,
1:             String methodName,
1:             ContextManager cm) throws StandardException {
1:         super(operand, methodName, methodName, cm);
1:     }
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3233189
/////////////////////////////////////////////////////////////////////////
0: 		bindOperand(fromList, subqueryList,
/////////////////////////////////////////////////////////////////////////
1: 		if ( ! operand.getTypeServices().getTypeId().isBooleanTypeId())
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.types.TypeId;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.util.Vector;
1: 
1: public abstract class UnaryLogicalOperatorNode extends UnaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
0: 	 * Initializer for a UnaryLogicalOperatorNode
1: 	 *
0: 	 * @param operand	The operand of the operator
0: 	 * @param methodName	The name of the method to call in the generated
0: 	 *						class.  In this case, it's actually an operator
0: 	 *						name.
1: 	 */
1: 
0: 	public void init(
0: 				Object	operand,
0: 				Object		methodName)
1: 	{
0: 		/* For logical operators, the operator and method names are the same */
0: 		super.init(operand, methodName, methodName);
1: 	}
1: 
1: 	/**
1: 	 * Bind this logical operator.  All that has to be done for binding
1: 	 * a logical operator is to bind the operand, check that the operand
1: 	 * is SQLBoolean, and set the result type to SQLBoolean.
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException
1: 	{
0: 		super.bindExpression(fromList, subqueryList,
0: 							 aggregateVector);
1: 
1: 		/*
1: 		** Logical operators work only on booleans.  If the operand 
1: 		** is not boolean, throw an exception.
1: 		**
1: 		** For now, this exception will never happen, because the grammar
1: 		** does not allow arbitrary expressions with NOT.  But when
1: 		** we start allowing generalized boolean expressions, we will modify
1: 		** the grammar, so this test will become useful.
1: 		*/
1: 
0: 		if ( ! operand.getTypeServices().getTypeId().equals(TypeId.BOOLEAN_ID))
1: 		{
0: operand.treePrint();
1: 			throw StandardException.newException(SQLState.LANG_UNARY_LOGICAL_NON_BOOLEAN);
1: 		}
1: 
1: 		/* Set the type info */
1: 		setFullTypeInfo();
1: 
1: 		return this;
1: 	}
1: 		
1: 	/**
1: 	 * Set all of the type info (nullability and DataTypeServices) for
1: 	 * this node.  Extracts out tasks that must be done by both bind()
1: 	 * and post-bind() AndNode generation.
1: 	 *
0: 	 * @return	None.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	protected void setFullTypeInfo()
1: 		throws StandardException
1: 	{
1: 		boolean nullableResult;
1: 
1: 		/*
1: 		** Set the result type of this comparison operator based on the
1: 		** operands.  The result type is always SQLBoolean - the only question
1: 		** is whether it is nullable or not.  If either of the operands is
1: 		** nullable, the result of the comparison must be nullable, too, so
1: 		** we can represent the unknown truth value.
1: 		*/
1: 		nullableResult = operand.getTypeServices().isNullable();
1: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, nullableResult));
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.util.Vector;
0: 
0: public abstract class UnaryLogicalOperatorNode extends UnaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Initializer for a UnaryLogicalOperatorNode
0: 	 *
0: 	 * @param operand	The operand of the operator
0: 	 * @param methodName	The name of the method to call in the generated
0: 	 *						class.  In this case, it's actually an operator
0: 	 *						name.
0: 	 */
0: 
0: 	public void init(
0: 				Object	operand,
0: 				Object		methodName)
0: 	{
0: 		/* For logical operators, the operator and method names are the same */
0: 		super.init(operand, methodName, methodName);
0: 	}
0: 
0: 	/**
0: 	 * Bind this logical operator.  All that has to be done for binding
0: 	 * a logical operator is to bind the operand, check that the operand
0: 	 * is SQLBoolean, and set the result type to SQLBoolean.
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException
0: 	{
0: 		super.bindExpression(fromList, subqueryList,
0: 							 aggregateVector);
0: 
0: 		/*
0: 		** Logical operators work only on booleans.  If the operand 
0: 		** is not boolean, throw an exception.
0: 		**
0: 		** For now, this exception will never happen, because the grammar
0: 		** does not allow arbitrary expressions with NOT.  But when
0: 		** we start allowing generalized boolean expressions, we will modify
0: 		** the grammar, so this test will become useful.
0: 		*/
0: 
0: 		if ( ! operand.getTypeServices().getTypeId().equals(TypeId.BOOLEAN_ID))
0: 		{
0: operand.treePrint();
0: 			throw StandardException.newException(SQLState.LANG_UNARY_LOGICAL_NON_BOOLEAN);
0: 		}
0: 
0: 		/* Set the type info */
0: 		setFullTypeInfo();
0: 
0: 		return this;
0: 	}
0: 		
0: 	/**
0: 	 * Set all of the type info (nullability and DataTypeServices) for
0: 	 * this node.  Extracts out tasks that must be done by both bind()
0: 	 * and post-bind() AndNode generation.
0: 	 *
0: 	 * @return	None.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	protected void setFullTypeInfo()
0: 		throws StandardException
0: 	{
0: 		boolean nullableResult;
0: 
0: 		/*
0: 		** Set the result type of this comparison operator based on the
0: 		** operands.  The result type is always SQLBoolean - the only question
0: 		** is whether it is nullable or not.  If either of the operands is
0: 		** nullable, the result of the comparison must be nullable, too, so
0: 		** we can represent the unknown truth value.
0: 		*/
0: 		nullableResult = operand.getTypeServices().isNullable();
0: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, nullableResult));
0: 	}
0: }
============================================================================