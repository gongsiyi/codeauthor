1:88e3d5f: /*
2:88e3d5f: 
1:88e3d5f: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.maxMemPerTab
1:88e3d5f: 
1:dff95a1: Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1: contributor license agreements.  See the NOTICE file distributed with
1:dff95a1: this work for additional information regarding copyright ownership.
1:dff95a1: The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1: (the "License"); you may not use this file except in compliance with
1:dff95a1: the License.  You may obtain a copy of the License at
1:88e3d5f: 
1:88e3d5f:    http://www.apache.org/licenses/LICENSE-2.0
1:88e3d5f: 
1:88e3d5f: Unless required by applicable law or agreed to in writing, software
1:88e3d5f: distributed under the License is distributed on an "AS IS" BASIS,
1:88e3d5f: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88e3d5f: See the License for the specific language governing permissions and
1:88e3d5f: limitations under the License.
1:88e3d5f: 
1:88e3d5f: */
1:88e3d5f: 
1:88e3d5f: package org.apache.derbyTesting.functionTests.tests.lang;
1:88e3d5f: 
1:88e3d5f: import java.sql.Connection;
1:88e3d5f: import java.sql.PreparedStatement;
1:88e3d5f: import java.sql.Statement;
1:88e3d5f: import java.sql.ResultSet;
1:88e3d5f: import java.sql.SQLException;
1:88e3d5f: 
1:88e3d5f: import org.apache.derby.tools.JDBCDisplayUtil;
1:88e3d5f: import org.apache.derby.tools.ij;
1:88e3d5f: import org.apache.derbyTesting.functionTests.util.Formatters;
1:88e3d5f: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:88e3d5f: 
1:88e3d5f: public class maxMemPerTab {
1:88e3d5f: 
1:88e3d5f: 	public static void main(String[] args) {
1:88e3d5f: 		try {
1:88e3d5f: 			ij.getPropertyArg(args); 
1:88e3d5f: 		    Connection conn = ij.startJBMS();
1:88e3d5f: 		    conn.setAutoCommit(false);
1:88e3d5f: 		    
1:88e3d5f: 		    createTablesAndInsertData(conn);
1:88e3d5f: 		    getStatistics(conn);
1:88e3d5f: 		
1:88e3d5f: 		    conn.rollback();
1:88e3d5f: 		    conn.close();  
1:88e3d5f: 		} catch (SQLException e) {
1:88e3d5f: 			TestUtil.dumpSQLExceptions(e);
1:88e3d5f: 		} catch (Throwable e) {
1:88e3d5f: 			System.out.println("FAIL -- unexpected exception:" + e.toString());
1:88e3d5f: 		}
1:88e3d5f: 	}
1:88e3d5f: 
1:88e3d5f: 	private static void createTablesAndInsertData(Connection conn) throws SQLException {
1:88e3d5f: 		
1:88e3d5f: 		System.out.println("Start creating tables and inserting data ...");
1:88e3d5f: 		
1:88e3d5f: 		//create tables
1:88e3d5f: 		PreparedStatement ps = conn.prepareStatement("create table tab1 (c1 int, c2 varchar(20000))");
1:88e3d5f: 		ps.execute();
1:88e3d5f: 		ps = conn.prepareStatement("create table tab2 (c1 int, c2 varchar(20000))");
1:88e3d5f: 		ps.execute();
1:88e3d5f: 		ps = conn.prepareStatement("create table tab3 (c1 int, c2 varchar(2000))");
1:88e3d5f: 		ps.execute();
1:88e3d5f: 		ps = conn.prepareStatement("create table tab4 (c1 int, c2 varchar(2000))");
1:88e3d5f: 		ps.execute();
1:88e3d5f: 		
1:88e3d5f: 		//insert data
1:88e3d5f: 		String largeStringA20000 = new String(Formatters.repeatChar("a",20000));
1:88e3d5f: 		String largeStringA2000 = new String(Formatters.repeatChar("a",2000));
1:88e3d5f: 		String largeStringB20000 = new String(Formatters.repeatChar("b",20000));
1:88e3d5f: 		String largeStringB2000 = new String(Formatters.repeatChar("b",2000));
1:88e3d5f: 		String largeStringC20000 = new String(Formatters.repeatChar("c",20000));
1:88e3d5f: 		String largeStringC2000 = new String(Formatters.repeatChar("c",2000));
1:88e3d5f: 		String largeStringD20000 = new String(Formatters.repeatChar("d",20000));
1:88e3d5f: 		String largeStringD2000 = new String(Formatters.repeatChar("d",2000));
1:88e3d5f: 
1:88e3d5f: 		ps = conn.prepareStatement("insert into tab1 values (?, ?)");
1:88e3d5f: 		ps.setInt(1, 1);
1:88e3d5f: 		ps.setString(2, largeStringA20000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 2);
1:88e3d5f: 		ps.setString(2, largeStringB20000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 3);
1:88e3d5f: 		ps.setString(2, largeStringC20000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.close();
1:88e3d5f: 		ps = conn.prepareStatement("insert into tab2 values (?, ?)");
1:88e3d5f: 		ps.setInt(1, 1);
1:88e3d5f: 		ps.setString(2, largeStringA20000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 2);
1:88e3d5f: 		ps.setString(2, largeStringC20000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 3);
1:88e3d5f: 		ps.setString(2, largeStringD20000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.close();
1:88e3d5f: 		ps = conn.prepareStatement("insert into tab3 values (?, ?)");
1:88e3d5f: 		ps.setInt(1, 1);
1:88e3d5f: 		ps.setString(2, largeStringA2000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 2);
1:88e3d5f: 		ps.setString(2, largeStringB2000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 3);
1:88e3d5f: 		ps.setString(2, largeStringC2000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.close();
1:88e3d5f: 		ps = conn.prepareStatement("insert into tab4 values (?, ?)");
1:88e3d5f: 		ps.setInt(1, 1);
1:88e3d5f: 		ps.setString(2, largeStringA2000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 2);
1:88e3d5f: 		ps.setString(2, largeStringC2000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.setInt(1, 3);
1:88e3d5f: 		ps.setString(2, largeStringD2000);
1:88e3d5f: 		ps.executeUpdate();
1:88e3d5f: 		ps.close();
1:88e3d5f: 		
1:88e3d5f: 		System.out.println("... done creating tables and inserting data.");
1:88e3d5f: 	}
1:88e3d5f: 	
1:88e3d5f: 	private static void getStatistics(Connection conn) throws SQLException {
1:88e3d5f: 		
1:88e3d5f: 		Statement stmt = conn.createStatement();
1:88e3d5f: 		stmt.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:88e3d5f: 		System.out.println("Called SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:88e3d5f: 		
1:88e3d5f: 		JDBCDisplayUtil.setMaxDisplayWidth(2500);
1:88e3d5f: 		
1:88e3d5f: 		//should use nested loop join due to maxMemoryPerTable property setting
1:88e3d5f: 		executeQuery(stmt,conn,"select * from tab1, tab2 where tab1.c2 = tab2.c2");
1:88e3d5f: 		executeQuery(stmt,conn,"values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()");
1:88e3d5f: 		
1:88e3d5f: 		//should use hash join, maxMemoryPerTable property value is big enough
1:88e3d5f: 		executeQuery(stmt,conn,"select * from tab3, tab4 where tab3.c2 = tab4.c2");
1:88e3d5f: 		executeQuery(stmt,conn,"values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()");
1:88e3d5f: 		
1:88e3d5f: 		stmt.close();
1:88e3d5f: 	}
1:88e3d5f: 	
1:88e3d5f: 	private static void executeQuery(Statement stmt, Connection conn, String query) throws SQLException{
1:88e3d5f: 		System.out.println("#### Executing \""+ query + "\"");
1:88e3d5f: 		//Display results for select statements
1:88e3d5f: 		ResultSet rs = stmt.executeQuery(query);
1:88e3d5f: 		JDBCDisplayUtil.DisplayResults(System.out,rs,conn);
1:88e3d5f: 		rs.close();
1:88e3d5f: 	}
1:88e3d5f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:88e3d5f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.maxMemPerTab
1: 
0: Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0: Licensed under the Apache License, Version 2.0 (the "License");
0: you may not use this file except in compliance with the License.
0: You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.Statement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: import org.apache.derby.tools.ij;
1: import org.apache.derbyTesting.functionTests.util.Formatters;
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
1: public class maxMemPerTab {
1: 
1: 	public static void main(String[] args) {
1: 		try {
1: 			ij.getPropertyArg(args); 
1: 		    Connection conn = ij.startJBMS();
1: 		    conn.setAutoCommit(false);
1: 		    
1: 		    createTablesAndInsertData(conn);
1: 		    getStatistics(conn);
1: 		
1: 		    conn.rollback();
1: 		    conn.close();  
1: 		} catch (SQLException e) {
1: 			TestUtil.dumpSQLExceptions(e);
1: 		} catch (Throwable e) {
1: 			System.out.println("FAIL -- unexpected exception:" + e.toString());
1: 		}
1: 	}
1: 
1: 	private static void createTablesAndInsertData(Connection conn) throws SQLException {
1: 		
1: 		System.out.println("Start creating tables and inserting data ...");
1: 		
1: 		//create tables
1: 		PreparedStatement ps = conn.prepareStatement("create table tab1 (c1 int, c2 varchar(20000))");
1: 		ps.execute();
1: 		ps = conn.prepareStatement("create table tab2 (c1 int, c2 varchar(20000))");
1: 		ps.execute();
1: 		ps = conn.prepareStatement("create table tab3 (c1 int, c2 varchar(2000))");
1: 		ps.execute();
1: 		ps = conn.prepareStatement("create table tab4 (c1 int, c2 varchar(2000))");
1: 		ps.execute();
1: 		
1: 		//insert data
1: 		String largeStringA20000 = new String(Formatters.repeatChar("a",20000));
1: 		String largeStringA2000 = new String(Formatters.repeatChar("a",2000));
1: 		String largeStringB20000 = new String(Formatters.repeatChar("b",20000));
1: 		String largeStringB2000 = new String(Formatters.repeatChar("b",2000));
1: 		String largeStringC20000 = new String(Formatters.repeatChar("c",20000));
1: 		String largeStringC2000 = new String(Formatters.repeatChar("c",2000));
1: 		String largeStringD20000 = new String(Formatters.repeatChar("d",20000));
1: 		String largeStringD2000 = new String(Formatters.repeatChar("d",2000));
1: 
1: 		ps = conn.prepareStatement("insert into tab1 values (?, ?)");
1: 		ps.setInt(1, 1);
1: 		ps.setString(2, largeStringA20000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 2);
1: 		ps.setString(2, largeStringB20000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 3);
1: 		ps.setString(2, largeStringC20000);
1: 		ps.executeUpdate();
1: 		ps.close();
1: 		ps = conn.prepareStatement("insert into tab2 values (?, ?)");
1: 		ps.setInt(1, 1);
1: 		ps.setString(2, largeStringA20000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 2);
1: 		ps.setString(2, largeStringC20000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 3);
1: 		ps.setString(2, largeStringD20000);
1: 		ps.executeUpdate();
1: 		ps.close();
1: 		ps = conn.prepareStatement("insert into tab3 values (?, ?)");
1: 		ps.setInt(1, 1);
1: 		ps.setString(2, largeStringA2000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 2);
1: 		ps.setString(2, largeStringB2000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 3);
1: 		ps.setString(2, largeStringC2000);
1: 		ps.executeUpdate();
1: 		ps.close();
1: 		ps = conn.prepareStatement("insert into tab4 values (?, ?)");
1: 		ps.setInt(1, 1);
1: 		ps.setString(2, largeStringA2000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 2);
1: 		ps.setString(2, largeStringC2000);
1: 		ps.executeUpdate();
1: 		ps.setInt(1, 3);
1: 		ps.setString(2, largeStringD2000);
1: 		ps.executeUpdate();
1: 		ps.close();
1: 		
1: 		System.out.println("... done creating tables and inserting data.");
1: 	}
1: 	
1: 	private static void getStatistics(Connection conn) throws SQLException {
1: 		
1: 		Statement stmt = conn.createStatement();
1: 		stmt.execute("call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1: 		System.out.println("Called SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1: 		
1: 		JDBCDisplayUtil.setMaxDisplayWidth(2500);
1: 		
1: 		//should use nested loop join due to maxMemoryPerTable property setting
1: 		executeQuery(stmt,conn,"select * from tab1, tab2 where tab1.c2 = tab2.c2");
1: 		executeQuery(stmt,conn,"values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()");
1: 		
1: 		//should use hash join, maxMemoryPerTable property value is big enough
1: 		executeQuery(stmt,conn,"select * from tab3, tab4 where tab3.c2 = tab4.c2");
1: 		executeQuery(stmt,conn,"values SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()");
1: 		
1: 		stmt.close();
1: 	}
1: 	
1: 	private static void executeQuery(Statement stmt, Connection conn, String query) throws SQLException{
1: 		System.out.println("#### Executing \""+ query + "\"");
1: 		//Display results for select statements
1: 		ResultSet rs = stmt.executeQuery(query);
1: 		JDBCDisplayUtil.DisplayResults(System.out,rs,conn);
1: 		rs.close();
1: 	}
1: }
============================================================================