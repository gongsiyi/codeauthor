1:23e89eb: /*
3:23e89eb: 
1:23e89eb:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLOptimizerTraceTest
1:23e89eb:    
1:23e89eb:    Licensed to the Apache Software Foundation (ASF) under one or more
1:23e89eb:    contributor license agreements.  See the NOTICE file distributed with
1:23e89eb:    this work for additional information regarding copyright ownership.
1:23e89eb:    The ASF licenses this file to you under the Apache License, Version 2.0
1:23e89eb:    (the "License"); you may not use this file except in compliance with
1:23e89eb:    the License.  You may obtain a copy of the License at
1:23e89eb: 
1:23e89eb:      http://www.apache.org/licenses/LICENSE-2.0
1:23e89eb: 
1:23e89eb:    Unless required by applicable law or agreed to in writing, software
1:23e89eb:    distributed under the License is distributed on an "AS IS" BASIS,
1:23e89eb:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:23e89eb:    See the License for the specific language governing permissions and
1:23e89eb:    limitations under the License.
1:23e89eb: 
1:23e89eb:  */
1:23e89eb: 
1:23e89eb: package org.apache.derbyTesting.functionTests.tests.lang;
1:23e89eb: 
1:23e89eb: import java.io.File;
1:d08ab9b: import java.net.URL;
1:23e89eb: import java.sql.Connection;
1:23e89eb: import java.sql.PreparedStatement;
1:23e89eb: import java.sql.ResultSet;
1:23e89eb: import junit.framework.Test;
1:1f8bedf: 
1:1f8bedf: import org.apache.derby.iapi.services.info.JVMInfo;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:23e89eb: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:23e89eb: import org.apache.derbyTesting.junit.TestConfiguration;
1:23e89eb: 
1:23e89eb: /**
1:23e89eb:  * <p>
1:23e89eb:  * Test xml-based optimizer tracing, introduced by DERBY-6211.
1:23e89eb:  * </p>
1:23e89eb:  */
1:23e89eb: public class XMLOptimizerTraceTest  extends GeneratedColumnsHelper
1:23e89eb: {
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // CONSTANTS
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     private static  final   String  TRACE_FILE_NAME = "xott.xml";
1:d08ab9b:     private static  final   String  SAVED_TRACE_NAME = "xmlOptimizer.trace";
1:c670aa4:     private static  final   String  FILE_EXISTS = "XIE0S";
1:23e89eb: 
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // STATE
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // CONSTRUCTOR
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     /**
1:23e89eb:      * Create a new instance.
1:23e89eb:      */
1:23e89eb: 
1:23e89eb:     public XMLOptimizerTraceTest(String name)
1:23e89eb:     {
1:23e89eb:         super(name);
1:23e89eb:     }
1:23e89eb:     
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // JUnit BEHAVIOR
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb: 
1:23e89eb:     /**
1:23e89eb:      * Construct top level suite in this JUnit test
1:23e89eb:      */
1:23e89eb:     public static Test suite()
1:23e89eb:     {
1:d08ab9b:         String[]    testFiles = new String[] { "functionTests/tests/lang/" + SAVED_TRACE_NAME };
1:d08ab9b: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("XMLOptimizerTraceTest");
1:23e89eb: 
1:23e89eb:         suite.addTest( TestConfiguration.defaultSuite( XMLOptimizerTraceTest.class ) );
1:d08ab9b:  
1:d08ab9b:         return new SupportFilesSetup( TestConfiguration.singleUseDatabaseDecorator( suite ), testFiles );
1:23e89eb:     }
1:23e89eb: 
1:23e89eb:     protected void    setUp()
1:23e89eb:         throws Exception
1:23e89eb:     {
1:23e89eb:         super.setUp();
1:23e89eb: 
1:23e89eb:         Connection conn = getConnection();
1:23e89eb: 
1:23e89eb:         if ( !routineExists( conn, "INTEGERLIST" ) )
1:23e89eb:         {
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create function integerList()\n" +
1:23e89eb:                  "returns table( a int, b int, c int, d int )\n" +
1:23e89eb:                  "language java parameter style derby_jdbc_result_set no sql\n" +
1:23e89eb:                  "external name 'org.apache.derbyTesting.functionTests.tests.lang.RestrictedVTITest.integerList'\n"
1:23e89eb:                  );
1:23e89eb:         }
1:23e89eb:         
1:23e89eb:         if ( !routineExists( conn, "GETRESULTSETMETADATA" ) )
1:23e89eb:         {
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create function getResultSetMetaData( query varchar( 32672 ) )\n" +
1:23e89eb:                  "returns table\n" +
1:23e89eb:                  "(\n" +
1:23e89eb:                  "        getCatalogName varchar( 32672 ),\n" +
1:23e89eb:                  "        getColumnClassName varchar( 32672 ),\n" +
1:23e89eb:                  "        getColumnDisplaySize int,\n" +
1:23e89eb:                  "        getColumnLabel varchar( 32672 ),\n" +
1:23e89eb:                  "        getColumnName varchar( 32672 ),\n" +
1:23e89eb:                  "        getColumnType int,\n" +
1:23e89eb:                  "        getColumnTypeName varchar( 32672 ),\n" +
1:23e89eb:                  "        getPrecision int,\n" +
1:23e89eb:                  "        getScale int,\n" +
1:23e89eb:                  "        getSchemaName varchar( 32672 ),\n" +
1:23e89eb:                  "        getTableName varchar( 32672 ),\n" +
1:23e89eb:                  "        isAutoIncrement boolean,\n" +
1:23e89eb:                  "        isCaseSensitive boolean,\n" +
1:23e89eb:                  "        isCurrency boolean,\n" +
1:23e89eb:                  "        isDefinitelyWritable boolean,\n" +
1:23e89eb:                  "        isNullable int,\n" +
1:23e89eb:                  "        isReadOnly boolean,\n" +
1:23e89eb:                  "        isSearchable boolean,\n" +
1:23e89eb:                  "        isSigned boolean,\n" +
1:23e89eb:                  "        isWritable boolean\n" +
1:23e89eb:                  ")\n" +
1:23e89eb:                  "language java parameter style derby_jdbc_result_set reads sql data\n" +
1:23e89eb:                  "external name 'org.apache.derbyTesting.functionTests.tests.lang.RSMDWrapper.getResultSetMetaData'\n"
1:23e89eb:                  );
1:23e89eb:         }
1:23e89eb:         
1:23e89eb:         if ( !tableExists( conn, "T" ) )
1:23e89eb:         {
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create table t( a int, b varchar( 100 ) )"
1:23e89eb:                  );
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create index t_a on t( a )"
1:23e89eb:                  );
1:23e89eb:         }
1:23e89eb:         
1:23e89eb:         if ( !tableExists( conn, "S" ) )
1:23e89eb:         {
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create table s( a int, b varchar( 100 ) )"
1:23e89eb:                  );
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create index s_a on s( a )"
1:23e89eb:                  );
1:23e89eb:         }
1:23e89eb:         
1:23e89eb:         if ( !tableExists( conn, "R" ) )
1:23e89eb:         {
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create table r( a int, b varchar( 100 ) )"
1:23e89eb:                  );
1:23e89eb:             goodStatement
1:23e89eb:                 (
1:23e89eb:                  conn,
1:23e89eb:                  "create index r_a on r( a )"
1:23e89eb:                  );
1:23e89eb:         }
1:270c77b:         
1:270c77b:         if ( !tableExists( conn, "T1" ) )
1:270c77b:         {
1:270c77b:             goodStatement
1:270c77b:                 (
1:270c77b:                  conn,
1:270c77b:                  "create table t1( c1 int, c2 int, c3 int )"
1:270c77b:                  );
1:270c77b:         }
1:270c77b:         
1:270c77b:         if ( !tableExists( conn, "T2" ) )
1:270c77b:         {
1:270c77b:             goodStatement
1:270c77b:                 (
1:270c77b:                  conn,
1:270c77b:                  "create table t2( c1 int, c2 int, c3 int )"
1:270c77b:                  );
1:270c77b:         }
1:270c77b:         
1:270c77b:         if ( !tableExists( conn, "T3" ) )
1:270c77b:         {
1:270c77b:             goodStatement
1:270c77b:                 (
1:270c77b:                  conn,
1:270c77b:                  "create table t3( c1 int, c2 int, c3 int )"
1:270c77b:                  );
1:270c77b:         }
1:23e89eb:     }
1:23e89eb:     
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // TESTS
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:d08ab9b:     /**
1:d08ab9b:      * <p>
1:23e89eb:      * Test the planCost table function.
1:23e89eb:      * </p>
1:23e89eb:      */
1:23e89eb:     public void test_01_planCost() throws Exception
1:23e89eb:     {
1:23e89eb:         Connection conn = getConnection();
1:23e89eb:         File    traceFile = SupportFilesSetup.getReadWrite( TRACE_FILE_NAME );
1:23e89eb: 
1:c670aa4:         SupportFilesSetup.deleteFile( traceFile );
1:c670aa4: 
1:23e89eb:         // turn on xml-based optimizer tracing and run some queries
1:23e89eb:         goodStatement
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'xml' )"
1:23e89eb:              );
1:23e89eb: 
1:23e89eb:         // 2-table query
1:23e89eb:         goodStatement
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "select s.a from t, s where t.a = s.a"
1:23e89eb:              );
1:23e89eb:         // 3-table query
1:23e89eb:         goodStatement
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "select s.a from t, s, r where t.a = s.a and s.a = r.a"
1:23e89eb:              );
1:23e89eb:         // query involving a table function
1:23e89eb:         goodStatement
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "select s.a from s, table( integerList() ) i where s.a = i.a"
1:23e89eb:              );
1:23e89eb: 
1:23e89eb:         // turn off optimizer tracing and dump the xml trace to a file
1:23e89eb:         goodStatement
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false, '" + traceFile.getPath() + "' )"
1:23e89eb:              );
1:23e89eb: 
1:23e89eb:         // install the planCost table function and view
1:23e89eb:         goodStatement
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', true, '" + traceFile.getPath() + "' )"
1:23e89eb:              );
1:23e89eb: 
1:23e89eb:         // verify the full signature of the planCost table function
1:23e89eb:         assertResults
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "select getColumnName, getColumnTypeName, getPrecision from table( getResultSetMetaData( 'select * from planCost where 1=2' ) ) g",
1:23e89eb:              new String[][]
1:23e89eb:              {
1:23e89eb:                  { "TEXT", "VARCHAR", "32672" },
1:23e89eb:                  { "STMTID", "INTEGER", "10" },
1:23e89eb:                  { "QBID", "INTEGER", "10" },
1:23e89eb:                  { "COMPLETE", "BOOLEAN", "1" },
1:23e89eb:                  { "SUMMARY", "VARCHAR", "32672" },
1:23e89eb:                  { "TYPE", "VARCHAR", "50" },
1:23e89eb:                  { "ESTIMATEDCOST", "DOUBLE", "15" },
1:23e89eb:                  { "ESTIMATEDROWCOUNT", "BIGINT", "19" },         
1:23e89eb:              },
1:23e89eb:              false
1:23e89eb:              );
1:23e89eb: 
1:23e89eb:         // verify some contents of the xml output which we hope will remain stable
1:23e89eb:         // across test platforms
1:23e89eb:         assertResults
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "select distinct stmtID, summary from planCost where complete order by stmtID, summary",
1:23e89eb:              new String[][]
1:23e89eb:              {
1:23e89eb:                  { "1", "( \"APP\".\"S_A\" # \"APP\".\"T_A\" )" },
1:23e89eb:                  { "1", "( \"APP\".\"T_A\" # \"APP\".\"S_A\" )" },
1:23e89eb:                  { "2", "( ( \"APP\".\"R_A\" # \"APP\".\"S_A\" ) * \"APP\".\"T_A\" )" },
1:23e89eb:                  { "2", "( ( \"APP\".\"R_A\" # \"APP\".\"T_A\" ) * \"APP\".\"S_A\" )" },
1:23e89eb:                  { "2", "( ( \"APP\".\"S_A\" # \"APP\".\"R_A\" ) * \"APP\".\"T_A\" )" },
1:23e89eb:                  { "2", "( ( \"APP\".\"S_A\" # \"APP\".\"T_A\" ) * \"APP\".\"R_A\" )" },
1:23e89eb:                  { "2", "( ( \"APP\".\"T_A\" # \"APP\".\"R_A\" ) * \"APP\".\"S_A\" )" },
1:23e89eb:                  { "2", "( ( \"APP\".\"T_A\" # \"APP\".\"S_A\" ) * \"APP\".\"R_A\" )" },
1:23e89eb:                  { "3", "( \"APP\".\"INTEGERLIST\"() # \"APP\".\"S_A\" )" },
1:23e89eb:                  { "3", "( \"APP\".\"S_A\" # \"APP\".\"INTEGERLIST\"() )" },
1:23e89eb:              },
1:23e89eb:              false
1:23e89eb:              );
1:23e89eb: 
1:23e89eb:         // uninstall the planCost table function and view
1:23e89eb:         goodStatement
1:23e89eb:             (
1:23e89eb:              conn,
1:23e89eb:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', false )"
1:23e89eb:              );
1:270c77b: 
1:270c77b:         // use planCost to examine an outer join
1:270c77b:         vetOuterJoin( conn );
1:c670aa4: 
1:c670aa4:         // verify that you can't overwrite an existing file with xml output (DERBY-6635)
1:c670aa4:         goodStatement
1:c670aa4:             (
1:c670aa4:              conn,
1:c670aa4:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'xml' )"
1:c670aa4:              );
1:c670aa4:         expectExecutionError
1:c670aa4:             (
1:c670aa4:              conn,
1:0d57d84:              FILE_EXISTS,
1:c670aa4:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false, '" + traceFile.getPath() + "' )"
1:c670aa4:               );
1:c670aa4:         goodStatement
1:c670aa4:             (
1:c670aa4:              conn,
1:c670aa4:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false )"
1:c670aa4:              );
1:c670aa4: 
1:23e89eb:     }
1:23e89eb: 
1:23e89eb:     /**
1:23e89eb:      * <p>
1:d08ab9b:      * Some general tests for XmlVTI.
1:d08ab9b:      * </p>
1:d08ab9b:      */
1:d08ab9b:     public void test_02_xmlVTI() throws Exception
1:d08ab9b:     {
1:d08ab9b:         Connection conn = getConnection();
1:d08ab9b:         File    traceFile = SupportFilesSetup.getReadOnly( SAVED_TRACE_NAME );
1:d08ab9b:         URL     traceURL = SupportFilesSetup.getReadOnlyURL( SAVED_TRACE_NAME );
1:d08ab9b:         String[][]  resultsParentAndChild = new String[][]
1:d08ab9b:             {
1:d08ab9b:                 { "1", "R_A", "HASH", "20.1395", "6" },
1:d08ab9b:                 { "1", "R_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:d08ab9b:                 { "1",  "S_A", "HASH", "20.1395", "6" },
1:d08ab9b:                 { "1", "S_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:d08ab9b:                 { "1", "T_A", "HASH", "20.1395", "6" },
1:d08ab9b:                 { "1", "T_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:d08ab9b:             };
1:d08ab9b:         String[][]  resultsChildOnly = new String[][]
1:d08ab9b:             {
1:d08ab9b:                 { "R_A", "HASH", "20.1395", "6" },
1:d08ab9b:                 { "R_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:d08ab9b:                 { "S_A", "HASH", "20.1395", "6" },
1:d08ab9b:                 { "S_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:d08ab9b:                 { "T_A", "HASH", "20.1395", "6" },
1:d08ab9b:                 { "T_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:d08ab9b:             };
1:d08ab9b: 
1:d08ab9b:         // create the type and factory function needed by the XmlVTI
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create type ArrayList external name 'java.util.ArrayList' language java"
1:d08ab9b:              );
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create function asList( cell varchar( 32672 ) ... ) returns ArrayList\n" +
1:d08ab9b:              "language java parameter style derby no sql\n" +
1:d08ab9b:              "external name 'org.apache.derby.vti.XmlVTI.asList'\n"
1:d08ab9b:              );
1:d08ab9b: 
1:d08ab9b:         // create an XmlVTI which reads from a file and incorporates parent tags
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create function decorationWithParentInfo\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    fileName varchar( 32672 ),\n" +
1:d08ab9b:              "    rowTag varchar( 32672 ),\n" +
1:d08ab9b:              "    parentTags ArrayList,\n" +
1:d08ab9b:              "    childTags ArrayList\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "returns table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "        qbID int,\n" +
1:d08ab9b:              "        conglomerateName varchar( 36 ),\n" +
1:d08ab9b:              "        joinStrategy varchar( 20 ),\n" +
1:d08ab9b:              "        estimatedCost double,\n" +
1:d08ab9b:              "        estimatedRowCount int\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:d08ab9b:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTI'\n"
1:d08ab9b:              );
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create view decorationWithParentInfo as\n" +
1:d08ab9b:              "select * from table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    decorationWithParentInfo\n" +
1:d08ab9b:              "    (\n" +
1:d08ab9b:              "        '" + traceFile.getPath() + "',\n" +
1:d08ab9b:              "        'decoration',\n" +
1:d08ab9b:              "        asList( 'qbID' ),\n" +
1:d08ab9b:              "        asList( 'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount' )\n" +
1:d08ab9b:              "    )\n" +
1:d08ab9b:              ") v\n"
1:d08ab9b:              );
1:d08ab9b: 
1:d08ab9b:         // create an XmlVTI which reads from a file and only used child tags
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create function decorationChildOnly\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    fileName varchar( 32672 ),\n" +
1:d08ab9b:              "    rowTag varchar( 32672 ),\n" +
1:d08ab9b:              "    childTags varchar( 32672 )...\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "returns table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "        conglomerateName varchar( 36 ),\n" +
1:d08ab9b:              "        joinStrategy varchar( 20 ),\n" +
1:d08ab9b:              "        estimatedCost double,\n" +
1:d08ab9b:              "        estimatedRowCount int\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:d08ab9b:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTI'\n"
1:d08ab9b:              );
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create view decorationChildOnly as\n" +
1:d08ab9b:              "select * from table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    decorationChildOnly\n" +
1:d08ab9b:              "    (\n" +
1:d08ab9b:              "        '" + traceFile.getPath() + "',\n" +
1:d08ab9b:              "        'decoration',\n" +
1:d08ab9b:              "        'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount'\n" +
1:d08ab9b:              "    )\n" +
1:d08ab9b:              ") v\n"
1:d08ab9b:              );
1:d08ab9b: 
1:d08ab9b:         // create an XmlVTI which reads from an url file and uses parent tags
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create function decorationURLParentInfo\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    urlString varchar( 32672 ),\n" +
1:d08ab9b:              "    rowTag varchar( 32672 ),\n" +
1:d08ab9b:              "    parentTags ArrayList,\n" +
1:d08ab9b:              "    childTags ArrayList\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "returns table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "        qbID int,\n" +
1:d08ab9b:              "        conglomerateName varchar( 36 ),\n" +
1:d08ab9b:              "        joinStrategy varchar( 20 ),\n" +
1:d08ab9b:              "        estimatedCost double,\n" +
1:d08ab9b:              "        estimatedRowCount int\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:d08ab9b:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:d08ab9b:              );
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create view decorationURLParentInfo as\n" +
1:d08ab9b:              "select * from table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    decorationURLParentInfo\n" +
1:d08ab9b:              "    (\n" +
1:d08ab9b:              "        '" + traceURL.toString() + "',\n" +
1:d08ab9b:              "        'decoration',\n" +
1:d08ab9b:              "        asList( 'qbID' ),\n" +
1:d08ab9b:              "        asList( 'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount' )\n" +
1:d08ab9b:              "    )\n" +
1:d08ab9b:              ") v\n"
1:d08ab9b:              );
1:d08ab9b: 
1:d08ab9b:         // create an XmlVTI which reads from an url file and uses only child tags
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create function decorationURLChildOnly\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    urlString varchar( 32672 ),\n" +
1:d08ab9b:              "    rowTag varchar( 32672 ),\n" +
1:d08ab9b:              "    childTags varchar( 32672 )...\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "returns table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "        conglomerateName varchar( 36 ),\n" +
1:d08ab9b:              "        joinStrategy varchar( 20 ),\n" +
1:d08ab9b:              "        estimatedCost double,\n" +
1:d08ab9b:              "        estimatedRowCount int\n" +
1:d08ab9b:              ")\n" +
1:d08ab9b:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:d08ab9b:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:d08ab9b:              );
1:d08ab9b:         goodStatement
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "create view decorationURLChildOnly as\n" +
1:d08ab9b:              "select * from table\n" +
1:d08ab9b:              "(\n" +
1:d08ab9b:              "    decorationURLChildOnly\n" +
1:d08ab9b:              "    (\n" +
1:d08ab9b:              "        '" + traceURL.toString() + "',\n" +
1:d08ab9b:              "        'decoration',\n" +
1:d08ab9b:              "        'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount'\n" +
1:d08ab9b:              "    )\n" +
1:d08ab9b:              ") v\n"
1:d08ab9b:              );
1:d08ab9b: 
1:d08ab9b:         // verify that the XmlVTIs work
1:d08ab9b:         assertResults
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "select distinct qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:d08ab9b:              "from decorationWithParentInfo\n" +
1:d08ab9b:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:d08ab9b:              "order by qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:d08ab9b:              resultsParentAndChild,
1:d08ab9b:              false
1:d08ab9b:              );
1:d08ab9b: 
1:d08ab9b:         assertResults
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "select distinct conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:d08ab9b:              "from decorationChildOnly\n" +
1:d08ab9b:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:d08ab9b:              "order by conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:d08ab9b:              resultsChildOnly,
1:d08ab9b:              false
1:d08ab9b:              );
1:d08ab9b:         
1:d08ab9b:         assertResults
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "select distinct qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:d08ab9b:              "from decorationURLParentInfo\n" +
1:d08ab9b:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:d08ab9b:              "order by qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:d08ab9b:              resultsParentAndChild,
1:d08ab9b:              false
1:d08ab9b:              );
1:d08ab9b: 
1:d08ab9b:         assertResults
1:d08ab9b:             (
1:d08ab9b:              conn,
1:d08ab9b:              "select distinct conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:d08ab9b:              "from decorationURLChildOnly\n" +
1:d08ab9b:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:d08ab9b:              "order by conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:d08ab9b:              resultsChildOnly,
1:d08ab9b:              false
1:d08ab9b:              );
1:d08ab9b:         
1:d08ab9b:         // clean up after ourselves
1:d08ab9b:         goodStatement( conn, "drop view decorationURLChildOnly" );
1:d08ab9b:         goodStatement( conn, "drop function decorationURLChildOnly" );
1:d08ab9b:         goodStatement( conn, "drop view decorationURLParentInfo" );
1:d08ab9b:         goodStatement( conn, "drop function decorationURLParentInfo" );
1:d08ab9b:         goodStatement( conn, "drop view decorationChildOnly" );
1:d08ab9b:         goodStatement( conn, "drop function decorationChildOnly" );
1:d08ab9b:         goodStatement( conn, "drop view decorationWithParentInfo" );
1:d08ab9b:         goodStatement( conn, "drop function decorationWithParentInfo" );
1:d08ab9b:         goodStatement( conn, "drop function asList" );
1:d08ab9b:         goodStatement( conn, "drop type ArrayList restrict" );
1:d08ab9b:     }
1:270c77b: 
1:d08ab9b: 
1:270c77b:     /**
1:270c77b:      * <p>
1:270c77b:      * Test xml optimizer tracing of outer joins.
1:270c77b:      * </p>
1:270c77b:      */
1:270c77b:     private void vetOuterJoin( Connection conn ) throws Exception
1:270c77b:     {
1:270c77b:         File    traceFile = SupportFilesSetup.getReadWrite( TRACE_FILE_NAME );
1:c670aa4:         SupportFilesSetup.deleteFile( traceFile );
1:270c77b: 
1:270c77b:         // turn on xml-based optimizer tracing
1:270c77b:         goodStatement
1:270c77b:             (
1:270c77b:              conn,
1:270c77b:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'xml' )"
1:270c77b:              );
1:270c77b: 
1:270c77b:         // run an outer join
1:270c77b:         goodStatement
1:270c77b:             (
1:270c77b:              conn,
1:270c77b:              "select * from t3, (t1 left outer join t2 on t1.c1 = t2.c1) where t3.c1 = t1.c1"
1:270c77b:              );
1:270c77b: 
1:270c77b:         // turn off optimizer tracing
1:270c77b:         goodStatement
1:270c77b:             (
1:270c77b:              conn,
1:270c77b:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false, '" + traceFile.getPath() + "' )"
1:270c77b:              );
1:270c77b: 
1:270c77b:         // load the trace viewer
1:270c77b:         goodStatement
1:270c77b:             (
1:270c77b:              conn,
1:270c77b:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', true, '" + traceFile.getPath() + "' )"
1:270c77b:              );
1:270c77b: 
1:270c77b:         // verify the plan shapes which were considered
1:270c77b:         PreparedStatement   ps = chattyPrepare
1:270c77b:             (
1:270c77b:              conn,
1:270c77b:              "select distinct summary from planCost\n" +
1:270c77b:              "where complete and qbID = 1\n" +
1:270c77b:              "order by summary\n"
1:270c77b:              );
1:270c77b:         ResultSet   rs = ps.executeQuery();
1:270c77b:         rs.next();
1:270c77b:         String  summary1 = rs.getString( 1 ).trim();
1:270c77b:         rs.next();
1:270c77b:         String  summary2 = rs.getString( 1 ).trim();
1:270c77b:         assertTrue( summary1.startsWith( "( \"APP\"." ) );
1:270c77b:         assertTrue( summary1.endsWith( " * ProjectRestrictNode )" ) );
1:270c77b:         assertTrue( summary2.startsWith( "( ProjectRestrictNode # \"APP\"." ) );
1:270c77b:         rs.close();
1:270c77b:         ps.close();
1:270c77b: 
1:270c77b:         // unload the trace viewer
1:270c77b:         goodStatement
1:270c77b:             (
1:270c77b:              conn,
1:270c77b:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', false )"
1:270c77b:              );
1:270c77b: 
1:270c77b:     }
1:270c77b:     
1:23e89eb:    ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb:     //
1:23e89eb:     // MINIONS
1:23e89eb:     //
1:23e89eb:     ///////////////////////////////////////////////////////////////////////////////////
1:23e89eb: 
1:23e89eb:     /** Return true if the SQL routine exists */
1:23e89eb:     private boolean routineExists( Connection conn, String functionName ) throws Exception
1:23e89eb:     {
1:23e89eb:         PreparedStatement ps = chattyPrepare( conn, "select count (*) from sys.sysaliases where alias = ?" );
1:23e89eb:         ps.setString( 1, functionName );
1:23e89eb: 
1:23e89eb:         ResultSet rs = ps.executeQuery();
1:23e89eb:         rs.next();
1:23e89eb: 
1:23e89eb:         boolean retval = rs.getInt( 1 ) > 0 ? true : false;
1:23e89eb: 
1:23e89eb:         rs.close();
1:23e89eb:         ps.close();
1:23e89eb: 
1:23e89eb:         return retval;
1:23e89eb:     }
1:23e89eb: 
1:23e89eb:     /** Return true if the table exists */
1:23e89eb:     private boolean tableExists( Connection conn, String tableName ) throws Exception
1:23e89eb:     {
1:23e89eb:         PreparedStatement ps = chattyPrepare( conn, "select count (*) from sys.systables where tablename = ?" );
1:23e89eb:         ps.setString( 1, tableName );
1:23e89eb: 
1:23e89eb:         ResultSet rs = ps.executeQuery();
1:23e89eb:         rs.next();
1:23e89eb: 
1:23e89eb:         boolean retval = rs.getInt( 1 ) > 0 ? true : false;
1:23e89eb: 
1:23e89eb:         rs.close();
1:23e89eb:         ps.close();
1:23e89eb: 
1:23e89eb:         return retval;
1:23e89eb:     }
1:23e89eb: 
1:23e89eb: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0d57d84
/////////////////////////////////////////////////////////////////////////
1:              FILE_EXISTS,
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:1f8bedf
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.derby.iapi.services.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
0:         // IBM 1.6 is wrapping the exception in a 38000. See DERBY-6760.
0:         String expectedError = FILE_EXISTS;
0:         if (JVMInfo.isIBMJVM() && JVMInfo.JDK_ID==JVMInfo.J2SE_16)
0:             expectedError = "38000";
0:              expectedError,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c670aa4
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  FILE_EXISTS = "XIE0S";
/////////////////////////////////////////////////////////////////////////
1:         SupportFilesSetup.deleteFile( traceFile );
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // verify that you can't overwrite an existing file with xml output (DERBY-6635)
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'xml' )"
1:              );
1:         expectExecutionError
1:             (
1:              conn,
0:              FILE_EXISTS,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false, '" + traceFile.getPath() + "' )"
1:               );
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false )"
1:              );
1: 
/////////////////////////////////////////////////////////////////////////
1:         SupportFilesSetup.deleteFile( traceFile );
commit:270c77b
/////////////////////////////////////////////////////////////////////////
1:         
1:         if ( !tableExists( conn, "T1" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create table t1( c1 int, c2 int, c3 int )"
1:                  );
1:         }
1:         
1:         if ( !tableExists( conn, "T2" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create table t2( c1 int, c2 int, c3 int )"
1:                  );
1:         }
1:         
1:         if ( !tableExists( conn, "T3" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create table t3( c1 int, c2 int, c3 int )"
1:                  );
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:         // use planCost to examine an outer join
1:         vetOuterJoin( conn );
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test xml optimizer tracing of outer joins.
1:      * </p>
1:      */
1:     private void vetOuterJoin( Connection conn ) throws Exception
1:     {
1:         File    traceFile = SupportFilesSetup.getReadWrite( TRACE_FILE_NAME );
1: 
1:         // turn on xml-based optimizer tracing
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'xml' )"
1:              );
1: 
1:         // run an outer join
1:         goodStatement
1:             (
1:              conn,
1:              "select * from t3, (t1 left outer join t2 on t1.c1 = t2.c1) where t3.c1 = t1.c1"
1:              );
1: 
1:         // turn off optimizer tracing
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false, '" + traceFile.getPath() + "' )"
1:              );
1: 
1:         // load the trace viewer
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', true, '" + traceFile.getPath() + "' )"
1:              );
1: 
1:         // verify the plan shapes which were considered
1:         PreparedStatement   ps = chattyPrepare
1:             (
1:              conn,
1:              "select distinct summary from planCost\n" +
1:              "where complete and qbID = 1\n" +
1:              "order by summary\n"
1:              );
1:         ResultSet   rs = ps.executeQuery();
1:         rs.next();
1:         String  summary1 = rs.getString( 1 ).trim();
1:         rs.next();
1:         String  summary2 = rs.getString( 1 ).trim();
1:         assertTrue( summary1.startsWith( "( \"APP\"." ) );
1:         assertTrue( summary1.endsWith( " * ProjectRestrictNode )" ) );
1:         assertTrue( summary2.startsWith( "( ProjectRestrictNode # \"APP\"." ) );
1:         rs.close();
1:         ps.close();
1: 
1:         // unload the trace viewer
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', false )"
1:              );
1: 
1:     }
1:     
commit:d08ab9b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  SAVED_TRACE_NAME = "xmlOptimizer.trace";
/////////////////////////////////////////////////////////////////////////
1:         String[]    testFiles = new String[] { "functionTests/tests/lang/" + SAVED_TRACE_NAME };
1: 
1:  
1:         return new SupportFilesSetup( TestConfiguration.singleUseDatabaseDecorator( suite ), testFiles );
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Some general tests for XmlVTI.
1:      * </p>
1:      */
1:     public void test_02_xmlVTI() throws Exception
1:     {
1:         Connection conn = getConnection();
1:         File    traceFile = SupportFilesSetup.getReadOnly( SAVED_TRACE_NAME );
1:         URL     traceURL = SupportFilesSetup.getReadOnlyURL( SAVED_TRACE_NAME );
1:         String[][]  resultsParentAndChild = new String[][]
1:             {
1:                 { "1", "R_A", "HASH", "20.1395", "6" },
1:                 { "1", "R_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:                 { "1",  "S_A", "HASH", "20.1395", "6" },
1:                 { "1", "S_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:                 { "1", "T_A", "HASH", "20.1395", "6" },
1:                 { "1", "T_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:             };
1:         String[][]  resultsChildOnly = new String[][]
1:             {
1:                 { "R_A", "HASH", "20.1395", "6" },
1:                 { "R_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:                 { "S_A", "HASH", "20.1395", "6" },
1:                 { "S_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:                 { "T_A", "HASH", "20.1395", "6" },
1:                 { "T_A", "NESTEDLOOP", "20.039500000000004", "6" },
1:             };
1: 
1:         // create the type and factory function needed by the XmlVTI
1:         goodStatement
1:             (
1:              conn,
1:              "create type ArrayList external name 'java.util.ArrayList' language java"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create function asList( cell varchar( 32672 ) ... ) returns ArrayList\n" +
1:              "language java parameter style derby no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.asList'\n"
1:              );
1: 
1:         // create an XmlVTI which reads from a file and incorporates parent tags
1:         goodStatement
1:             (
1:              conn,
1:              "create function decorationWithParentInfo\n" +
1:              "(\n" +
1:              "    fileName varchar( 32672 ),\n" +
1:              "    rowTag varchar( 32672 ),\n" +
1:              "    parentTags ArrayList,\n" +
1:              "    childTags ArrayList\n" +
1:              ")\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "        qbID int,\n" +
1:              "        conglomerateName varchar( 36 ),\n" +
1:              "        joinStrategy varchar( 20 ),\n" +
1:              "        estimatedCost double,\n" +
1:              "        estimatedRowCount int\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTI'\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create view decorationWithParentInfo as\n" +
1:              "select * from table\n" +
1:              "(\n" +
1:              "    decorationWithParentInfo\n" +
1:              "    (\n" +
1:              "        '" + traceFile.getPath() + "',\n" +
1:              "        'decoration',\n" +
1:              "        asList( 'qbID' ),\n" +
1:              "        asList( 'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount' )\n" +
1:              "    )\n" +
1:              ") v\n"
1:              );
1: 
1:         // create an XmlVTI which reads from a file and only used child tags
1:         goodStatement
1:             (
1:              conn,
1:              "create function decorationChildOnly\n" +
1:              "(\n" +
1:              "    fileName varchar( 32672 ),\n" +
1:              "    rowTag varchar( 32672 ),\n" +
1:              "    childTags varchar( 32672 )...\n" +
1:              ")\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "        conglomerateName varchar( 36 ),\n" +
1:              "        joinStrategy varchar( 20 ),\n" +
1:              "        estimatedCost double,\n" +
1:              "        estimatedRowCount int\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTI'\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create view decorationChildOnly as\n" +
1:              "select * from table\n" +
1:              "(\n" +
1:              "    decorationChildOnly\n" +
1:              "    (\n" +
1:              "        '" + traceFile.getPath() + "',\n" +
1:              "        'decoration',\n" +
1:              "        'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount'\n" +
1:              "    )\n" +
1:              ") v\n"
1:              );
1: 
1:         // create an XmlVTI which reads from an url file and uses parent tags
1:         goodStatement
1:             (
1:              conn,
1:              "create function decorationURLParentInfo\n" +
1:              "(\n" +
1:              "    urlString varchar( 32672 ),\n" +
1:              "    rowTag varchar( 32672 ),\n" +
1:              "    parentTags ArrayList,\n" +
1:              "    childTags ArrayList\n" +
1:              ")\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "        qbID int,\n" +
1:              "        conglomerateName varchar( 36 ),\n" +
1:              "        joinStrategy varchar( 20 ),\n" +
1:              "        estimatedCost double,\n" +
1:              "        estimatedRowCount int\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create view decorationURLParentInfo as\n" +
1:              "select * from table\n" +
1:              "(\n" +
1:              "    decorationURLParentInfo\n" +
1:              "    (\n" +
1:              "        '" + traceURL.toString() + "',\n" +
1:              "        'decoration',\n" +
1:              "        asList( 'qbID' ),\n" +
1:              "        asList( 'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount' )\n" +
1:              "    )\n" +
1:              ") v\n"
1:              );
1: 
1:         // create an XmlVTI which reads from an url file and uses only child tags
1:         goodStatement
1:             (
1:              conn,
1:              "create function decorationURLChildOnly\n" +
1:              "(\n" +
1:              "    urlString varchar( 32672 ),\n" +
1:              "    rowTag varchar( 32672 ),\n" +
1:              "    childTags varchar( 32672 )...\n" +
1:              ")\n" +
1:              "returns table\n" +
1:              "(\n" +
1:              "        conglomerateName varchar( 36 ),\n" +
1:              "        joinStrategy varchar( 20 ),\n" +
1:              "        estimatedCost double,\n" +
1:              "        estimatedRowCount int\n" +
1:              ")\n" +
1:              "language java parameter style derby_jdbc_result_set no sql\n" +
1:              "external name 'org.apache.derby.vti.XmlVTI.xmlVTIFromURL'\n"
1:              );
1:         goodStatement
1:             (
1:              conn,
1:              "create view decorationURLChildOnly as\n" +
1:              "select * from table\n" +
1:              "(\n" +
1:              "    decorationURLChildOnly\n" +
1:              "    (\n" +
1:              "        '" + traceURL.toString() + "',\n" +
1:              "        'decoration',\n" +
1:              "        'decConglomerateName', 'decJoinStrategy', 'ceEstimatedCost', 'ceEstimatedRowCount'\n" +
1:              "    )\n" +
1:              ") v\n"
1:              );
1: 
1:         // verify that the XmlVTIs work
1:         assertResults
1:             (
1:              conn,
1:              "select distinct qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:              "from decorationWithParentInfo\n" +
1:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:              "order by qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:              resultsParentAndChild,
1:              false
1:              );
1: 
1:         assertResults
1:             (
1:              conn,
1:              "select distinct conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:              "from decorationChildOnly\n" +
1:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:              "order by conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:              resultsChildOnly,
1:              false
1:              );
1:         
1:         assertResults
1:             (
1:              conn,
1:              "select distinct qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:              "from decorationURLParentInfo\n" +
1:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:              "order by qbID, conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:              resultsParentAndChild,
1:              false
1:              );
1: 
1:         assertResults
1:             (
1:              conn,
1:              "select distinct conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n" +
1:              "from decorationURLChildOnly\n" +
1:              "where conglomerateName like '%_A' and estimatedCost is not null\n" +
1:              "order by conglomerateName, joinStrategy, estimatedCost, estimatedRowCount\n",
1:              resultsChildOnly,
1:              false
1:              );
1:         
1:         // clean up after ourselves
1:         goodStatement( conn, "drop view decorationURLChildOnly" );
1:         goodStatement( conn, "drop function decorationURLChildOnly" );
1:         goodStatement( conn, "drop view decorationURLParentInfo" );
1:         goodStatement( conn, "drop function decorationURLParentInfo" );
1:         goodStatement( conn, "drop view decorationChildOnly" );
1:         goodStatement( conn, "drop function decorationChildOnly" );
1:         goodStatement( conn, "drop view decorationWithParentInfo" );
1:         goodStatement( conn, "drop function decorationWithParentInfo" );
1:         goodStatement( conn, "drop function asList" );
1:         goodStatement( conn, "drop type ArrayList restrict" );
1:     }
1: 
commit:23e89eb
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.XMLOptimizerTraceTest
1:    
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.io.File;
0: import java.sql.CallableStatement;
1: import java.sql.Connection;
0: import java.sql.DriverManager;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.Decorator;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
0: import org.apache.derbyTesting.junit.JDBC;
1: 
1: /**
1:  * <p>
1:  * Test xml-based optimizer tracing, introduced by DERBY-6211.
1:  * </p>
1:  */
1: public class XMLOptimizerTraceTest  extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String  TRACE_FILE_NAME = "xott.xml";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public XMLOptimizerTraceTest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
0:         TestSuite       suite = new TestSuite( "XMLOptimizerTraceTest" );
1: 
1:         suite.addTest( TestConfiguration.defaultSuite( XMLOptimizerTraceTest.class ) );
1: 
0:         return new SupportFilesSetup( TestConfiguration.singleUseDatabaseDecorator( suite ) );
1:     }
1: 
1:     protected void    setUp()
1:         throws Exception
1:     {
1:         super.setUp();
1: 
1:         Connection conn = getConnection();
1: 
1:         if ( !routineExists( conn, "INTEGERLIST" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create function integerList()\n" +
1:                  "returns table( a int, b int, c int, d int )\n" +
1:                  "language java parameter style derby_jdbc_result_set no sql\n" +
1:                  "external name 'org.apache.derbyTesting.functionTests.tests.lang.RestrictedVTITest.integerList'\n"
1:                  );
1:         }
1:         
1:         if ( !routineExists( conn, "GETRESULTSETMETADATA" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create function getResultSetMetaData( query varchar( 32672 ) )\n" +
1:                  "returns table\n" +
1:                  "(\n" +
1:                  "        getCatalogName varchar( 32672 ),\n" +
1:                  "        getColumnClassName varchar( 32672 ),\n" +
1:                  "        getColumnDisplaySize int,\n" +
1:                  "        getColumnLabel varchar( 32672 ),\n" +
1:                  "        getColumnName varchar( 32672 ),\n" +
1:                  "        getColumnType int,\n" +
1:                  "        getColumnTypeName varchar( 32672 ),\n" +
1:                  "        getPrecision int,\n" +
1:                  "        getScale int,\n" +
1:                  "        getSchemaName varchar( 32672 ),\n" +
1:                  "        getTableName varchar( 32672 ),\n" +
1:                  "        isAutoIncrement boolean,\n" +
1:                  "        isCaseSensitive boolean,\n" +
1:                  "        isCurrency boolean,\n" +
1:                  "        isDefinitelyWritable boolean,\n" +
1:                  "        isNullable int,\n" +
1:                  "        isReadOnly boolean,\n" +
1:                  "        isSearchable boolean,\n" +
1:                  "        isSigned boolean,\n" +
1:                  "        isWritable boolean\n" +
1:                  ")\n" +
1:                  "language java parameter style derby_jdbc_result_set reads sql data\n" +
1:                  "external name 'org.apache.derbyTesting.functionTests.tests.lang.RSMDWrapper.getResultSetMetaData'\n"
1:                  );
1:         }
1:         
1:         if ( !tableExists( conn, "T" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create table t( a int, b varchar( 100 ) )"
1:                  );
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create index t_a on t( a )"
1:                  );
1:         }
1:         
1:         if ( !tableExists( conn, "S" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create table s( a int, b varchar( 100 ) )"
1:                  );
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create index s_a on s( a )"
1:                  );
1:         }
1:         
1:         if ( !tableExists( conn, "R" ) )
1:         {
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create table r( a int, b varchar( 100 ) )"
1:                  );
1:             goodStatement
1:                 (
1:                  conn,
1:                  "create index r_a on r( a )"
1:                  );
1:         }
1:     }
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Test the planCost table function.
1:      * </p>
1:      */
1:     public void test_01_planCost() throws Exception
1:     {
1:         Connection conn = getConnection();
1:         File    traceFile = SupportFilesSetup.getReadWrite( TRACE_FILE_NAME );
1: 
1:         // turn on xml-based optimizer tracing and run some queries
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', true, 'xml' )"
1:              );
1: 
1:         // 2-table query
1:         goodStatement
1:             (
1:              conn,
1:              "select s.a from t, s where t.a = s.a"
1:              );
1:         // 3-table query
1:         goodStatement
1:             (
1:              conn,
1:              "select s.a from t, s, r where t.a = s.a and s.a = r.a"
1:              );
1:         // query involving a table function
1:         goodStatement
1:             (
1:              conn,
1:              "select s.a from s, table( integerList() ) i where s.a = i.a"
1:              );
1: 
1:         // turn off optimizer tracing and dump the xml trace to a file
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracing', false, '" + traceFile.getPath() + "' )"
1:              );
1: 
1:         // install the planCost table function and view
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', true, '" + traceFile.getPath() + "' )"
1:              );
1: 
1:         // verify the full signature of the planCost table function
1:         assertResults
1:             (
1:              conn,
1:              "select getColumnName, getColumnTypeName, getPrecision from table( getResultSetMetaData( 'select * from planCost where 1=2' ) ) g",
1:              new String[][]
1:              {
1:                  { "TEXT", "VARCHAR", "32672" },
1:                  { "STMTID", "INTEGER", "10" },
1:                  { "QBID", "INTEGER", "10" },
1:                  { "COMPLETE", "BOOLEAN", "1" },
1:                  { "SUMMARY", "VARCHAR", "32672" },
1:                  { "TYPE", "VARCHAR", "50" },
1:                  { "ESTIMATEDCOST", "DOUBLE", "15" },
1:                  { "ESTIMATEDROWCOUNT", "BIGINT", "19" },         
1:              },
1:              false
1:              );
1: 
1:         // verify some contents of the xml output which we hope will remain stable
1:         // across test platforms
1:         assertResults
1:             (
1:              conn,
1:              "select distinct stmtID, summary from planCost where complete order by stmtID, summary",
1:              new String[][]
1:              {
1:                  { "1", "( \"APP\".\"S_A\" # \"APP\".\"T_A\" )" },
1:                  { "1", "( \"APP\".\"T_A\" # \"APP\".\"S_A\" )" },
1:                  { "2", "( ( \"APP\".\"R_A\" # \"APP\".\"S_A\" ) * \"APP\".\"T_A\" )" },
1:                  { "2", "( ( \"APP\".\"R_A\" # \"APP\".\"T_A\" ) * \"APP\".\"S_A\" )" },
1:                  { "2", "( ( \"APP\".\"S_A\" # \"APP\".\"R_A\" ) * \"APP\".\"T_A\" )" },
1:                  { "2", "( ( \"APP\".\"S_A\" # \"APP\".\"T_A\" ) * \"APP\".\"R_A\" )" },
1:                  { "2", "( ( \"APP\".\"T_A\" # \"APP\".\"R_A\" ) * \"APP\".\"S_A\" )" },
1:                  { "2", "( ( \"APP\".\"T_A\" # \"APP\".\"S_A\" ) * \"APP\".\"R_A\" )" },
1:                  { "3", "( \"APP\".\"INTEGERLIST\"() # \"APP\".\"S_A\" )" },
1:                  { "3", "( \"APP\".\"S_A\" # \"APP\".\"INTEGERLIST\"() )" },
1:              },
1:              false
1:              );
1: 
1:         // uninstall the planCost table function and view
1:         goodStatement
1:             (
1:              conn,
1:              "call syscs_util.syscs_register_tool( 'optimizerTracingViews', false )"
1:              );
1:     }
1: 
1:    ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Return true if the SQL routine exists */
1:     private boolean routineExists( Connection conn, String functionName ) throws Exception
1:     {
1:         PreparedStatement ps = chattyPrepare( conn, "select count (*) from sys.sysaliases where alias = ?" );
1:         ps.setString( 1, functionName );
1: 
1:         ResultSet rs = ps.executeQuery();
1:         rs.next();
1: 
1:         boolean retval = rs.getInt( 1 ) > 0 ? true : false;
1: 
1:         rs.close();
1:         ps.close();
1: 
1:         return retval;
1:     }
1: 
1:     /** Return true if the table exists */
1:     private boolean tableExists( Connection conn, String tableName ) throws Exception
1:     {
1:         PreparedStatement ps = chattyPrepare( conn, "select count (*) from sys.systables where tablename = ?" );
1:         ps.setString( 1, tableName );
1: 
1:         ResultSet rs = ps.executeQuery();
1:         rs.next();
1: 
1:         boolean retval = rs.getInt( 1 ) > 0 ? true : false;
1: 
1:         rs.close();
1:         ps.close();
1: 
1:         return retval;
1:     }
1: 
1: }
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("XMLOptimizerTraceTest");
============================================================================