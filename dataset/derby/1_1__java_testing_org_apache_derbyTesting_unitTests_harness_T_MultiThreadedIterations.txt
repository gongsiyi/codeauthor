1:2bc809f: /*
2:2bc809f: 
1:2bc809f:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations
1:2bc809f: 
1:c38b841:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c38b841:    contributor license agreements.  See the NOTICE file distributed with
1:c38b841:    this work for additional information regarding copyright ownership.
1:c38b841:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c38b841:    (the "License"); you may not use this file except in compliance with
1:c38b841:    the License.  You may obtain a copy of the License at
1:2bc809f: 
1:2bc809f:       http://www.apache.org/licenses/LICENSE-2.0
1:2bc809f: 
1:2bc809f:    Unless required by applicable law or agreed to in writing, software
1:2bc809f:    distributed under the License is distributed on an "AS IS" BASIS,
1:2bc809f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bc809f:    See the License for the specific language governing permissions and
1:2bc809f:    limitations under the License.
1:2bc809f: 
1:2bc809f:  */
1:2bc809f: 
1:2bc809f: package org.apache.derbyTesting.unitTests.harness;
1:2bc809f: 
1:2bc809f: import org.apache.derby.iapi.services.monitor.Monitor;
1:2bc809f: import org.apache.derby.iapi.services.property.PropertyUtil;
1:2bc809f: 
1:2bc809f: import java.util.Properties;
1:2bc809f: 
1:2bc809f: /**
1:2bc809f: 	Abstract class which executes T_MultiIterations. This allows multiple
1:2bc809f: 	threads running T_MultiIterations.
1:2bc809f: 
1:2bc809f: 	This allows the setup to be performed once, and then the
1:2bc809f: 	test itself to be run with multiple threads for a number of iterations. 
1:2bc809f: 	The number of threads and iterations are set by the property 
1:2bc809f: 	derby.unittests.numThreads and derby.unittests.iterations
1:2bc809f: 	and default to 1.
1:2bc809f: 	<P>
1:2bc809f: 	Statistics are provided about each iteration in the error log. The statistics
1:2bc809f: 	are time for each iteration, used and total memory changes per iteration.
1:2bc809f: 
1:2bc809f: 	@see T_Generic
1:2bc809f: */
1:2bc809f: public abstract class T_MultiThreadedIterations extends T_MultiIterations implements Runnable
1:2bc809f: {
1:2bc809f: 	protected int threadNumber = 0;
1:2bc809f: 
1:2bc809f: 	static volatile boolean inError = false;
1:2bc809f: 
1:2bc809f: 	static int numThreads = 1;
1:2bc809f: 	static int iterations = 1;
1:2bc809f: 
1:2bc809f: 	Throwable error = null;
1:2bc809f: 	static Thread[] TestThreads;
1:2bc809f: 	static T_MultiThreadedIterations[] TestObjects;
1:2bc809f: 
1:2bc809f: 	protected T_MultiThreadedIterations()
1:2bc809f: 	{
1:2bc809f: 		super();
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/**
1:2bc809f: 	  Run the test. The test should raise an exception if it
1:2bc809f: 	  fails. runTests should return if the tests pass.
1:2bc809f: 
1:2bc809f: 	  @exception T_Fail Test code throws these
1:2bc809f: 	  */
1:2bc809f: 	protected void runTests() throws T_Fail 
1:2bc809f: 	{
1:2bc809f: 		/*
1:2bc809f: 		** The property name for the number of iterations is
1:2bc809f: 		** derby.className.numThreads.  For example, if the test
1:2bc809f: 		** class is derby.com.package.to.test.T_Tester,
1:2bc809f: 		** the property name is derby.T_Tester.numThreads.
1:2bc809f: 		*/
1:2bc809f: 		String myClass = this.getClass().getName();
1:2bc809f: 		String noPackage = myClass.substring(myClass.lastIndexOf('.') + 1);
1:2bc809f: 		String propertyName = "derby." + noPackage + ".numThreads";
1:2bc809f: 
1:2bc809f: 		String nthread = PropertyUtil.getSystemProperty(propertyName);
1:2bc809f: 		if (nthread != null) {
1:2bc809f: 			try {
1:2bc809f: 					numThreads = Integer.parseInt(nthread);
1:2bc809f: 			} catch (NumberFormatException nfe) {
1:2bc809f: 				numThreads = 1;
1:2bc809f: 			}
1:2bc809f: 			if (numThreads <= 0)
1:2bc809f: 				numThreads = 1;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (numThreads == 1)	// just use this thread
1:2bc809f: 			super.runTests();	// use T_MultiIterations runtest
1:2bc809f: 		else
1:2bc809f: 		{
1:2bc809f: 			// start numThreads new threads, each with its own test object
1:2bc809f: 			TestThreads = new Thread[numThreads];
1:2bc809f: 			TestObjects = new T_MultiThreadedIterations[numThreads];
1:2bc809f: 
1:2bc809f: 			inError = false;
1:2bc809f: 
1:2bc809f: 			for (int i = 0; i < numThreads; i++)
1:2bc809f: 			{
1:2bc809f: 				TestObjects[i] = newTestObject();
1:2bc809f: 				TestObjects[i].out = this.out;
1:2bc809f: 
1:2bc809f: 				TestThreads[i] = new Thread(TestObjects[i], "Thread_" + i);
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			// use the first test object to setup the test
1:2bc809f: 			TestObjects[0].setupTest();
1:2bc809f: 			TestObjects[0].threadNumber = 0;
1:2bc809f: 
1:2bc809f: 			// make the other test objects to join in the setup
1:2bc809f: 			for (int i = 1; i < numThreads; i++)
1:2bc809f: 			{
1:2bc809f: 				TestObjects[i].threadNumber = i;
1:2bc809f: 				TestObjects[i].joinSetupTest();
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			// now run them 
1:2bc809f: 			propertyName = "derby." + noPackage + ".iterations";
1:2bc809f: 
1:2bc809f: 			String iter = PropertyUtil.getSystemProperty(propertyName);
1:2bc809f: 			if (iter != null) {
1:2bc809f: 				try {
1:2bc809f: 					iterations = Integer.parseInt(iter);
1:2bc809f: 				} catch (NumberFormatException nfe) {
1:2bc809f: 					// leave at one
1:2bc809f: 				}
1:2bc809f: 				if (iterations <= 0)
1:2bc809f: 					iterations = 1;
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			for (int i = 0; i < numThreads; i++)
1:2bc809f: 			{
1:2bc809f: 				TestThreads[i].start();
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			// wait for the threads to end
1:2bc809f: 			try
1:2bc809f: 			{
1:2bc809f: 				for (int i = 0; i < numThreads; i++)
1:2bc809f: 				{
1:2bc809f: 					TestThreads[i].join();
1:2bc809f: 				}
1:2bc809f: 			}
1:2bc809f: 			catch (InterruptedException ie) {
1:2bc809f: 				throw T_Fail.exceptionFail(ie);
1:2bc809f: 			}
1:2bc809f: 
1:2bc809f: 			// report error
1:2bc809f: 			for (int i = 0; i < numThreads; i++)
1:2bc809f: 			{
1:2bc809f: 				if (TestObjects[i].error != null)
1:2bc809f: 					throw T_Fail.exceptionFail(TestObjects[i].error);
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * run each worker test thread
1:2bc809f: 	 */
1:2bc809f: 	public void run()
1:2bc809f: 	{
1:2bc809f: 		String threadName = "[" + Thread.currentThread().getName() + "] ";
1:2bc809f: 
1:2bc809f: 		out.println(threadName + "started");
1:2bc809f: 
1:2bc809f: 		try
1:2bc809f: 		{
1:2bc809f: 
1:2bc809f: 			for (int i = 0; i < iterations; i++) 
1:2bc809f: 			{
1:2bc809f: 				Runtime.getRuntime().gc();
1:2bc809f: 				long btm = Runtime.getRuntime().totalMemory();
1:2bc809f: 				long bfm = Runtime.getRuntime().freeMemory();
1:2bc809f: 				long bum = btm - bfm;
1:2bc809f: 
1:2bc809f: 				long start = System. currentTimeMillis();
1:2bc809f: 
1:2bc809f: 				runTestSet();
1:2bc809f: 				long end = System. currentTimeMillis();
1:2bc809f: 
1:2bc809f: 				Runtime.getRuntime().gc();
1:2bc809f: 				long atm = Runtime.getRuntime().totalMemory();
1:2bc809f: 				long afm = Runtime.getRuntime().freeMemory();
1:2bc809f: 				long aum = atm - afm;
1:2bc809f: 
1:2bc809f: 				out.println(threadName + "Iteration " + i + " took " + (end - start) + "ms");
1:2bc809f: 				out.println(threadName + "Total memory increased by " + (atm - btm) + " is " + atm);
1:2bc809f: 				out.println(threadName + "Used  memory increased by " + (aum - bum) + " is " + aum);
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 		catch (ThreadDeath death) // some other thread has died and want to see my stack 
1:2bc809f: 		{
1:2bc809f: 			out.println(threadName + "caught thread death, printing stack");
1:2bc809f: 			death.printStackTrace(out.getPrintWriter());
1:2bc809f: 			Thread.dumpStack();
1:2bc809f: 
1:2bc809f: 			throw death;
1:2bc809f: 		}
1:2bc809f: 		catch (Throwable t)
1:2bc809f: 		{
1:2bc809f: 			error = t;
1:2bc809f: 		}
1:2bc809f: 
1:2bc809f: 		if (error == null)
1:2bc809f: 			out.println(threadName + "finished with no error");
1:2bc809f: 		else if (!inError)
1:2bc809f: 		{
1:2bc809f: 			inError = true;
1:2bc809f: 
1:2bc809f: 			error.printStackTrace(out.getPrintWriter());
1:2bc809f: 			for (int i = 0; i < numThreads; i++)
1:2bc809f: 			{
1:2bc809f: 				if (this != TestObjects[i]) // don't kill myself again
1:2bc809f: 					TestThreads[i].interrupt();
1:2bc809f: 			}
1:2bc809f: 		}
1:2bc809f: 	}
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * multi threaded test abstract methods
1:2bc809f: 	 */
1:2bc809f: 
1:2bc809f: 	/* 
1:2bc809f: 	 * joins an existing setup - do whatever remaining setup the test may need
1:2bc809f: 	 * to do given that setupTest has already been run by another test object
1:2bc809f: 	 *
1:2bc809f: 	 * This call will be executed in the main (parent) thread
1:2bc809f: 	 */
1:2bc809f: 	protected abstract void joinSetupTest() throws T_Fail;
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * make a new test object instance
1:2bc809f: 	 */
1:2bc809f: 	protected abstract T_MultiThreadedIterations newTestObject();
1:2bc809f: 
1:2bc809f: 
1:2bc809f: 	/*
1:2bc809f: 	 * class specific method
1:2bc809f: 	 */
1:2bc809f: 	protected int getNumThreads()
1:2bc809f: 	{
1:2bc809f: 		return numThreads;
1:2bc809f: 	}
1:2bc809f: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:c38b841
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:2bc809f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations
1: 
0:    Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.unitTests.harness;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 	Abstract class which executes T_MultiIterations. This allows multiple
1: 	threads running T_MultiIterations.
1: 
1: 	This allows the setup to be performed once, and then the
1: 	test itself to be run with multiple threads for a number of iterations. 
1: 	The number of threads and iterations are set by the property 
1: 	derby.unittests.numThreads and derby.unittests.iterations
1: 	and default to 1.
1: 	<P>
1: 	Statistics are provided about each iteration in the error log. The statistics
1: 	are time for each iteration, used and total memory changes per iteration.
1: 
1: 	@see T_Generic
1: */
1: public abstract class T_MultiThreadedIterations extends T_MultiIterations implements Runnable
1: {
1: 	protected int threadNumber = 0;
1: 
1: 	static volatile boolean inError = false;
1: 
1: 	static int numThreads = 1;
1: 	static int iterations = 1;
1: 
1: 	Throwable error = null;
1: 	static Thread[] TestThreads;
1: 	static T_MultiThreadedIterations[] TestObjects;
1: 
1: 	protected T_MultiThreadedIterations()
1: 	{
1: 		super();
1: 	}
1: 
1: 	/**
1: 	  Run the test. The test should raise an exception if it
1: 	  fails. runTests should return if the tests pass.
1: 
1: 	  @exception T_Fail Test code throws these
1: 	  */
1: 	protected void runTests() throws T_Fail 
1: 	{
1: 		/*
1: 		** The property name for the number of iterations is
1: 		** derby.className.numThreads.  For example, if the test
1: 		** class is derby.com.package.to.test.T_Tester,
1: 		** the property name is derby.T_Tester.numThreads.
1: 		*/
1: 		String myClass = this.getClass().getName();
1: 		String noPackage = myClass.substring(myClass.lastIndexOf('.') + 1);
1: 		String propertyName = "derby." + noPackage + ".numThreads";
1: 
1: 		String nthread = PropertyUtil.getSystemProperty(propertyName);
1: 		if (nthread != null) {
1: 			try {
1: 					numThreads = Integer.parseInt(nthread);
1: 			} catch (NumberFormatException nfe) {
1: 				numThreads = 1;
1: 			}
1: 			if (numThreads <= 0)
1: 				numThreads = 1;
1: 		}
1: 
1: 		if (numThreads == 1)	// just use this thread
1: 			super.runTests();	// use T_MultiIterations runtest
1: 		else
1: 		{
1: 			// start numThreads new threads, each with its own test object
1: 			TestThreads = new Thread[numThreads];
1: 			TestObjects = new T_MultiThreadedIterations[numThreads];
1: 
1: 			inError = false;
1: 
1: 			for (int i = 0; i < numThreads; i++)
1: 			{
1: 				TestObjects[i] = newTestObject();
1: 				TestObjects[i].out = this.out;
1: 
1: 				TestThreads[i] = new Thread(TestObjects[i], "Thread_" + i);
1: 			}
1: 
1: 			// use the first test object to setup the test
1: 			TestObjects[0].setupTest();
1: 			TestObjects[0].threadNumber = 0;
1: 
1: 			// make the other test objects to join in the setup
1: 			for (int i = 1; i < numThreads; i++)
1: 			{
1: 				TestObjects[i].threadNumber = i;
1: 				TestObjects[i].joinSetupTest();
1: 			}
1: 
1: 			// now run them 
1: 			propertyName = "derby." + noPackage + ".iterations";
1: 
1: 			String iter = PropertyUtil.getSystemProperty(propertyName);
1: 			if (iter != null) {
1: 				try {
1: 					iterations = Integer.parseInt(iter);
1: 				} catch (NumberFormatException nfe) {
1: 					// leave at one
1: 				}
1: 				if (iterations <= 0)
1: 					iterations = 1;
1: 			}
1: 
1: 			for (int i = 0; i < numThreads; i++)
1: 			{
1: 				TestThreads[i].start();
1: 			}
1: 
1: 			// wait for the threads to end
1: 			try
1: 			{
1: 				for (int i = 0; i < numThreads; i++)
1: 				{
1: 					TestThreads[i].join();
1: 				}
1: 			}
1: 			catch (InterruptedException ie) {
1: 				throw T_Fail.exceptionFail(ie);
1: 			}
1: 
1: 			// report error
1: 			for (int i = 0; i < numThreads; i++)
1: 			{
1: 				if (TestObjects[i].error != null)
1: 					throw T_Fail.exceptionFail(TestObjects[i].error);
1: 			}
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * run each worker test thread
1: 	 */
1: 	public void run()
1: 	{
1: 		String threadName = "[" + Thread.currentThread().getName() + "] ";
1: 
1: 		out.println(threadName + "started");
1: 
1: 		try
1: 		{
1: 
1: 			for (int i = 0; i < iterations; i++) 
1: 			{
1: 				Runtime.getRuntime().gc();
1: 				long btm = Runtime.getRuntime().totalMemory();
1: 				long bfm = Runtime.getRuntime().freeMemory();
1: 				long bum = btm - bfm;
1: 
1: 				long start = System. currentTimeMillis();
1: 
1: 				runTestSet();
1: 				long end = System. currentTimeMillis();
1: 
1: 				Runtime.getRuntime().gc();
1: 				long atm = Runtime.getRuntime().totalMemory();
1: 				long afm = Runtime.getRuntime().freeMemory();
1: 				long aum = atm - afm;
1: 
1: 				out.println(threadName + "Iteration " + i + " took " + (end - start) + "ms");
1: 				out.println(threadName + "Total memory increased by " + (atm - btm) + " is " + atm);
1: 				out.println(threadName + "Used  memory increased by " + (aum - bum) + " is " + aum);
1: 			}
1: 		}
1: 		catch (ThreadDeath death) // some other thread has died and want to see my stack 
1: 		{
1: 			out.println(threadName + "caught thread death, printing stack");
1: 			death.printStackTrace(out.getPrintWriter());
1: 			Thread.dumpStack();
1: 
1: 			throw death;
1: 		}
1: 		catch (Throwable t)
1: 		{
1: 			error = t;
1: 		}
1: 
1: 		if (error == null)
1: 			out.println(threadName + "finished with no error");
1: 		else if (!inError)
1: 		{
1: 			inError = true;
1: 
1: 			error.printStackTrace(out.getPrintWriter());
1: 			for (int i = 0; i < numThreads; i++)
1: 			{
1: 				if (this != TestObjects[i]) // don't kill myself again
1: 					TestThreads[i].interrupt();
1: 			}
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * multi threaded test abstract methods
1: 	 */
1: 
1: 	/* 
1: 	 * joins an existing setup - do whatever remaining setup the test may need
1: 	 * to do given that setupTest has already been run by another test object
1: 	 *
1: 	 * This call will be executed in the main (parent) thread
1: 	 */
1: 	protected abstract void joinSetupTest() throws T_Fail;
1: 
1: 	/*
1: 	 * make a new test object instance
1: 	 */
1: 	protected abstract T_MultiThreadedIterations newTestObject();
1: 
1: 
1: 	/*
1: 	 * class specific method
1: 	 */
1: 	protected int getNumThreads()
1: 	{
1: 		return numThreads;
1: 	}
1: }
============================================================================