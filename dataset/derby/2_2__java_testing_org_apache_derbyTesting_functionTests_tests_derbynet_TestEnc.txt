1:66bdd78: /*
2:66bdd78: 
1:66bdd78: Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.TestEnc
1:66bdd78: 
1:dff95a1: Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1: contributor license agreements.  See the NOTICE file distributed with
1:dff95a1: this work for additional information regarding copyright ownership.
1:dff95a1: The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1: (the "License"); you may not use this file except in compliance with
1:dff95a1: the License.  You may obtain a copy of the License at
1:66bdd78: 
1:66bdd78:    http://www.apache.org/licenses/LICENSE-2.0
1:66bdd78: 
1:66bdd78: Unless required by applicable law or agreed to in writing, software
1:66bdd78: distributed under the License is distributed on an "AS IS" BASIS,
1:66bdd78: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:66bdd78: See the License for the specific language governing permissions and
1:66bdd78: limitations under the License.
1:66bdd78: 
1:66bdd78: */
1:66bdd78: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:66bdd78: 
1:66bdd78: import java.io.PrintWriter;
1:66bdd78: import java.sql.Connection;
1:66bdd78: import java.sql.SQLException;
1:66bdd78: import java.sql.Statement;
1:66bdd78: 
1:66bdd78: import org.apache.derby.tools.ij;
1:66bdd78: 
1:66bdd78: /**
1:66bdd78:  * This test is part of the encodingTests suite and has regression testcases that
1:66bdd78:  * have caused problems because of usage of non-portable methods, constructors like
1:66bdd78:  * String(byte[]) etc. These problems were noticed on Z/OS but can be reproduced
1:66bdd78:  * when server and client are running with different native encoding
1:66bdd78:  */
1:66bdd78: public class TestEnc {
1:66bdd78:     
1:66bdd78:     private PrintWriter out;
1:66bdd78:     
1:66bdd78:     public static void main(String args[]) throws Exception {
1:66bdd78:         new TestEnc().go(args);
1:66bdd78:     }
1:66bdd78:     
1:66bdd78:     public void go(String[] args) throws Exception {
1:66bdd78:         
1:66bdd78:         // Load the JDBC Driver class
1:66bdd78:         // use the ij utility to read the property file and
1:66bdd78:         // make the initial connection.
1:66bdd78:         ij.getPropertyArg(args);
1:66bdd78:         Connection conn = ij.startJBMS();
1:66bdd78:         
1:66bdd78:         conn.setAutoCommit(true);
1:66bdd78:         Statement stmt = conn.createStatement();
1:66bdd78:         
1:66bdd78:         // Error messages on z/os were garbled because
1:66bdd78:         // of different native encoding on server/client
1:66bdd78:         // Related jira issues are 
1:66bdd78:         // DERBY-583,DERBY-900,DERBY-901,DERBY-902.
1:66bdd78:         try {
1:66bdd78:             stmt.execute("select bla");
1:66bdd78:         } catch (SQLException e) {
1:66bdd78:             if (e.getSQLState().equals("42X01")) {
1:66bdd78:                 System.out.println("Message "+e.getMessage());
1:66bdd78:             }
1:66bdd78:             else
1:66bdd78:                 handleSQLException("DERBY-583",e,false);
1:66bdd78:         }
1:66bdd78:         finally {
1:66bdd78:             if (stmt != null)
1:66bdd78:                 stmt.close();
1:66bdd78:         }
1:66bdd78:     }
1:66bdd78:     
1:66bdd78:     public void handleSQLException(String method,
1:66bdd78:             SQLException e,
1:66bdd78:             boolean expected) throws Exception {
1:66bdd78:         do {
1:66bdd78:             out.print("\t" + method + " \tException " +
1:66bdd78:                     "SQLSTATE:" + e.getSQLState());
1:66bdd78:             if (expected)
1:66bdd78:                 out.println("  (EXPECTED)");
1:66bdd78:             else
1:66bdd78:                 e.printStackTrace(out);
1:66bdd78:             e = e.getNextException();
1:66bdd78:         } while (e != null);
1:66bdd78:         
1:66bdd78:     }
1:66bdd78: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:66bdd78
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.TestEnc
1: 
0: Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0: Licensed under the Apache License, Version 2.0 (the "License");
0: you may not use this file except in compliance with the License.
0: You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import org.apache.derby.tools.ij;
1: 
1: /**
1:  * This test is part of the encodingTests suite and has regression testcases that
1:  * have caused problems because of usage of non-portable methods, constructors like
1:  * String(byte[]) etc. These problems were noticed on Z/OS but can be reproduced
1:  * when server and client are running with different native encoding
1:  */
1: public class TestEnc {
1:     
1:     private PrintWriter out;
1:     
1:     public static void main(String args[]) throws Exception {
1:         new TestEnc().go(args);
1:     }
1:     
1:     public void go(String[] args) throws Exception {
1:         
1:         // Load the JDBC Driver class
1:         // use the ij utility to read the property file and
1:         // make the initial connection.
1:         ij.getPropertyArg(args);
1:         Connection conn = ij.startJBMS();
1:         
1:         conn.setAutoCommit(true);
1:         Statement stmt = conn.createStatement();
1:         
1:         // Error messages on z/os were garbled because
1:         // of different native encoding on server/client
1:         // Related jira issues are 
1:         // DERBY-583,DERBY-900,DERBY-901,DERBY-902.
1:         try {
1:             stmt.execute("select bla");
1:         } catch (SQLException e) {
1:             if (e.getSQLState().equals("42X01")) {
1:                 System.out.println("Message "+e.getMessage());
1:             }
1:             else
1:                 handleSQLException("DERBY-583",e,false);
1:         }
1:         finally {
1:             if (stmt != null)
1:                 stmt.close();
1:         }
1:     }
1:     
1:     public void handleSQLException(String method,
1:             SQLException e,
1:             boolean expected) throws Exception {
1:         do {
1:             out.print("\t" + method + " \tException " +
1:                     "SQLSTATE:" + e.getSQLState());
1:             if (expected)
1:                 out.println("  (EXPECTED)");
1:             else
1:                 e.printStackTrace(out);
1:             e = e.getNextException();
1:         } while (e != null);
1:         
1:     }
1: }
============================================================================