1:eac0369: /*
1:6bc2e25: 
1:d7258ed:    Derby - Class org.apache.derby.impl.drda.ClientThread
1:6bc2e25: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
1:d7258ed: 
2:eac0369:  */
1:d7258ed: 
1:eac0369: package org.apache.derby.impl.drda;
17:eac0369: 
1:db4c995: import java.io.IOException;
1:db4c995: import java.net.ServerSocket;
1:db4c995: import java.net.Socket;
1:db4c995: import java.security.AccessController;
1:db4c995: import java.security.PrivilegedAction;
1:db4c995: import java.security.PrivilegedActionException;
1:eac0369: 
1:7a92d1f: final class ClientThread extends Thread {
1:eac0369: 
1:4f996a4:     NetworkServerControlImpl parent;
1:4f996a4:     ServerSocket serverSocket;
1:4f996a4:     private int timeSlice;
1:6bc2e25:     
1:6bc2e25:     ClientThread (NetworkServerControlImpl nsi, ServerSocket ss) {
1:b4af06b:         // Use a more meaningful name for this thread.
1:b4af06b:         super(NetworkServerControlImpl.getUniqueThreadName(
1:b4af06b:                 "NetworkServerThread"));
1:b4af06b: 
1:9085abb:         parent=nsi;
1:6bc2e25:         serverSocket=ss;
1:9085abb:         timeSlice=nsi.getTimeSlice();
3:6bc2e25:     }
1:4f996a4:     
1:6bc2e25:     public void run() 
2:6bc2e25:     {
1:6bc2e25:         Socket clientSocket = null;
1:6bc2e25:         
1:6bc2e25:         for (;;) { // Nearly infinite loop. The loop is terminated if
1:6bc2e25:                    // 1) We are shut down or 2) SSL won't work. In all
1:6bc2e25:                    // other cases we just continue and try another
1:6bc2e25:                    // accept on the socket.
1:6bc2e25: 
1:6bc2e25:             try { // Check for all other exceptions....
1:1f71856: 
1:6bc2e25:                 try { // Check for underlying InterruptedException,
1:6bc2e25:                       // SSLException and IOException
1:eac0369: 
1:d34c2ce:                     try { // Check for PrivilegedActionException
1:d34c2ce:                         clientSocket =
1:d34c2ce:                                     acceptClientWithRetry();
1:b18aea8:                         // Server may have been shut down.  If so, close this
1:b18aea8:                         // client socket and break out of the loop.
1:b18aea8:                         // DERBY-3869
1:b18aea8:                         if (parent.getShutdown()) {
1:d34c2ce:                             if (clientSocket != null)
1:d34c2ce:                                 clientSocket.close();
1:b18aea8:                             return;
1:b18aea8:                         }
1:b18aea8:                             
1:a2ecb05:                         clientSocket.setKeepAlive(parent.getKeepAlive());
1:6bc2e25:                         
1:6bc2e25:                         // Set time out: Stops DDMReader.fill() from
1:6bc2e25:                         // waiting indefinitely when timeSlice is set.
1:7fba0e1:                         if (timeSlice > 0)
1:6bc2e25:                             clientSocket.setSoTimeout(timeSlice);
1:6bc2e25:                         
1:6bc2e25:                         //create a new Session for this socket
1:aeb14c3:                         parent.addSession(clientSocket);
1:6bc2e25:                         
1:6bc2e25:                     } catch (PrivilegedActionException e) {
1:6bc2e25:                         // Just throw the underlying exception
1:6bc2e25:                         throw e.getException();
1:6bc2e25:                     } // end inner try/catch block
1:6bc2e25:                     
1:6bc2e25:                 } catch (InterruptedException ie) {
1:c275ab3:                     if (parent.getShutdown()) {
1:c275ab3:                         // This is a shutdown and we'll just exit the
1:c275ab3:                         // thread. NOTE: This is according to the logic
1:c275ab3:                         // before this rewrite. I am not convinced that it
1:c275ab3:                         // is allways the case, but will not alter the
1:c275ab3:                         // behaviour since it is not within the scope of
1:c275ab3:                         // this change (DERBY-2108).
1:4f996a4:                         clientSocket.close();
1:4f996a4:                         return;
1:c275ab3:                     }
1:c275ab3:                     parent.consoleExceptionPrintTrace(ie);
1:1ba604e:                     if (clientSocket != null)
1:b18aea8:                         clientSocket.close();
1:6bc2e25: 
1:6bc2e25:                 } catch (javax.net.ssl.SSLException ssle) {
1:6bc2e25:                     // SSLException is a subclass of
1:777cc86:                     // IOException. Print stack trace and...
1:6bc2e25:                     
1:6bc2e25:                     parent.consoleExceptionPrintTrace(ssle);
1:6bc2e25:                     
1:777cc86:                     // ... we need to do a controlled shutdown of the
1:777cc86:                     // server, since SSL for some reason will not
1:777cc86:                     // work.
1:486c497:                     // DERBY-3537: circumvent any shutdown security checks
1:486c497:                     parent.directShutdownInternal();
1:6bc2e25:                     
1:777cc86:                     return; // Exit the thread
1:6bc2e25:                     
1:6bc2e25:                 } catch (IOException ioe) {
1:c275ab3:                     if (clientSocket != null)
1:1ba604e:                         clientSocket.close();
1:777cc86:                     // IOException causes this thread to stop.  No
1:777cc86:                     // console error message if this was caused by a
1:777cc86:                     // shutdown
1:6bc2e25:                     synchronized (parent.getShutdownSync()) {
1:c275ab3:                         if (parent.getShutdown()) {
1:c275ab3:                             return; // Exit the thread
1:c275ab3:                         } 
1:6bc2e25:                     }
1:1ba604e:                     parent.consoleExceptionPrintTrace(ioe);
1:6bc2e25:                 }
1:6bc2e25:             } catch (Exception e) {
1:6bc2e25:                 // Catch and log all other exceptions
1:6bc2e25:                 
1:6bc2e25:                 parent.consoleExceptionPrintTrace(e);
1:1ba604e:                 try {
1:1ba604e:                     if (clientSocket != null)
1:1ba604e:                         clientSocket.close();
1:1ba604e:                 } catch (IOException closeioe)
1:1ba604e:                 {
1:1ba604e:                     parent.consoleExceptionPrintTrace(closeioe);
1:1ba604e:                 }
1:6bc2e25:             } // end outer try/catch block
1:6bc2e25:             
1:6bc2e25:         } // end for(;;)
1:eac0369:         
1:6bc2e25:     }// end run()
1:d34c2ce: 
1:d34c2ce:     /**
1:d34c2ce:      * Perform a server socket accept. Allow three attempts with a one second
1:d34c2ce:      * wait between each
1:d34c2ce:      * 
1:d34c2ce:      * @return client socket or null if accept failed.
1:d34c2ce:      * 
1:d34c2ce:      */
1:d34c2ce:     private Socket acceptClientWithRetry() {
1:27fbf33:         return AccessController.doPrivileged(
1:27fbf33:                 new PrivilegedAction<Socket>() {
1:27fbf33:                     public Socket run() {
1:d34c2ce:                         for (int trycount = 1; trycount <= 3; trycount++) {
1:d34c2ce:                             try {
1:d34c2ce:                                 // DERBY-5347 Need to exit if
1:d34c2ce:                                 // accept fails with IOException
1:d34c2ce:                                 // Cannot just aimlessly loop
1:d34c2ce:                                 // writing errors
1:d34c2ce:                                 return serverSocket.accept();
1:6f49e16:                             } catch (Exception acceptE) {
1:d34c2ce:                                 // If not a normal shutdown,
1:d34c2ce:                                 // log and shutdown the server
1:d34c2ce:                                 if (!parent.getShutdown()) {
1:d34c2ce:                                     parent
1:d34c2ce:                                             .consoleExceptionPrintTrace(acceptE);
1:d34c2ce:                                     if (trycount == 3) {
1:d34c2ce:                                         // give up after three tries
1:d34c2ce:                                         parent.directShutdownInternal();
1:d34c2ce:                                     } else {
1:d34c2ce:                                         // otherwise wait 1 second and retry
1:d34c2ce:                                         try {
1:d34c2ce:                                             Thread.sleep(1000);
1:d34c2ce:                                         } catch (InterruptedException ie) {
1:d34c2ce:                                             parent
1:d34c2ce:                                             .consoleExceptionPrintTrace(ie);
1:d34c2ce:                                         }
1:d34c2ce:                                     }
1:d34c2ce:                                 }
1:d34c2ce:                             }
1:d34c2ce:                         }
1:d34c2ce:                         return null; // no socket to return after three tries
1:d34c2ce:                     }
1:d34c2ce:                 }
1:d34c2ce: 
1:d34c2ce:                 );
1:d34c2ce:     }
1:6bc2e25: }
1:6bc2e25: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:6f49e16
/////////////////////////////////////////////////////////////////////////
1:                             } catch (Exception acceptE) {
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     NetworkServerControlImpl parent;
1:     ServerSocket serverSocket;
1:     private int timeSlice;
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:                         clientSocket.close();
1:                         return;
commit:d34c2ce
/////////////////////////////////////////////////////////////////////////
1:                     try { // Check for PrivilegedActionException
1:                         clientSocket =
1:                                     acceptClientWithRetry();
1:                             if (clientSocket != null)
1:                                 clientSocket.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Perform a server socket accept. Allow three attempts with a one second
1:      * wait between each
1:      * 
1:      * @return client socket or null if accept failed.
1:      * 
1:      */
1:     private Socket acceptClientWithRetry() {
0:         return (Socket) AccessController.doPrivileged(
0:                 new PrivilegedAction() {
0:                     public Object run() {
1:                         for (int trycount = 1; trycount <= 3; trycount++) {
1:                             try {
1:                                 // DERBY-5347 Need to exit if
1:                                 // accept fails with IOException
1:                                 // Cannot just aimlessly loop
1:                                 // writing errors
1:                                 return serverSocket.accept();
0:                             } catch (IOException acceptE) {
1:                                 // If not a normal shutdown,
1:                                 // log and shutdown the server
1:                                 if (!parent.getShutdown()) {
1:                                     parent
1:                                             .consoleExceptionPrintTrace(acceptE);
1:                                     if (trycount == 3) {
1:                                         // give up after three tries
1:                                         parent.directShutdownInternal();
1:                                     } else {
1:                                         // otherwise wait 1 second and retry
1:                                         try {
1:                                             Thread.sleep(1000);
1:                                         } catch (InterruptedException ie) {
1:                                             parent
1:                                             .consoleExceptionPrintTrace(ie);
1:                                         }
1:                                     }
1:                                 }
1:                             }
1:                         }
1:                         return null; // no socket to return after three tries
1:                     }
1:                 }
1: 
1:                 );
1:     }
commit:b18aea8
/////////////////////////////////////////////////////////////////////////
1:                         // Server may have been shut down.  If so, close this
1:                         // client socket and break out of the loop.
1:                         // DERBY-3869
1:                         if (parent.getShutdown()) {
1:                             clientSocket.close();
1:                             return;
1:                         }
1:                             
commit:1ba604e
/////////////////////////////////////////////////////////////////////////
1:                             parent.consoleExceptionPrintTrace(ioe);
1:                             if (clientSocket != null)
1:                                 clientSocket.close();
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     if (clientSocket != null)
1:                         clientSocket.close();
1:                 } catch (IOException closeioe)
1:                 {
1:                     parent.consoleExceptionPrintTrace(closeioe);
1:                 }
commit:22ccbb4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 				// Note that we always re-fetch the tracing
0: 				// configuration from the parent, because it
0: 				// may have changed (there are administrative
0: 				// commands which allow dynamic tracing
0: 				// reconfiguration).
0: 					parent.getTraceDirectory(),
0: 					parent.getTraceAll());
commit:41f0062
/////////////////////////////////////////////////////////////////////////
0:                                 if (parent.getLogConnections())
0:                                     parent.consolePropertyMessage("DRDA_ConnNumber.I", 
commit:9085abb
/////////////////////////////////////////////////////////////////////////
0: 	NetworkServerControlImpl parent;
0: 		protected ClientThread (NetworkServerControlImpl nsi, ServerSocket ss) {
0: 			NetworkServerControlImpl.setUniqueThreadName(this, "NetworkServerThread");
1: 			parent=nsi;
1: 			timeSlice=nsi.getTimeSlice();
commit:a2ecb05
/////////////////////////////////////////////////////////////////////////
0: 					 );
1: 							clientSocket.setKeepAlive(parent.getKeepAlive());
0: 					//set time out					
0: 					//this looks highly suspect.  Why does timeSlice setSoTimeout?		
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db4c995
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: import java.net.Socket;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedActionException;
commit:27fbf33
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(
1:                 new PrivilegedAction<Socket>() {
1:                     public Socket run() {
commit:b4af06b
/////////////////////////////////////////////////////////////////////////
1:         // Use a more meaningful name for this thread.
1:         super(NetworkServerControlImpl.getUniqueThreadName(
1:                 "NetworkServerThread"));
1: 
commit:aeb14c3
/////////////////////////////////////////////////////////////////////////
1: 				parent.addSession(clientSocket);
commit:86cae7b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 				parent.addSession(connNum, clientSocket);
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:c275ab3
/////////////////////////////////////////////////////////////////////////
1:                     if (parent.getShutdown()) {
1:                         // This is a shutdown and we'll just exit the
1:                         // thread. NOTE: This is according to the logic
1:                         // before this rewrite. I am not convinced that it
1:                         // is allways the case, but will not alter the
1:                         // behaviour since it is not within the scope of
1:                         // this change (DERBY-2108).
0:                     	clientSocket.close();
0:             	        return;
1:                     }
1:                     parent.consoleExceptionPrintTrace(ie);
1:                     if (clientSocket != null)
0:                         clientSocket.close();
/////////////////////////////////////////////////////////////////////////
0:                     if (clientSocket != null)
0:                         clientSocket.close();
1:                         if (parent.getShutdown()) {
1:                             return; // Exit the thread
1:                         } 
0:                     parent.consoleExceptionPrintTrace(ioe);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:486c497
/////////////////////////////////////////////////////////////////////////
1:                     // DERBY-3537: circumvent any shutdown security checks
1:                     parent.directShutdownInternal();
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:7fba0e1
/////////////////////////////////////////////////////////////////////////
1:                         if (timeSlice > 0)
commit:777cc86
/////////////////////////////////////////////////////////////////////////
1:                     // IOException. Print stack trace and...
1:                     // ... we need to do a controlled shutdown of the
1:                     // server, since SSL for some reason will not
1:                     // work.
1:                     // IOException causes this thread to stop.  No
1:                     // console error message if this was caused by a
1:                     // shutdown
1:                     return; // Exit the thread
commit:6bc2e25
/////////////////////////////////////////////////////////////////////////
1:     
1:     ClientThread (NetworkServerControlImpl nsi, ServerSocket ss) {
1:         
0:         // Create a more meaningful name for this thread (but preserve its
0:         // thread id from the default name).
0:         NetworkServerControlImpl.setUniqueThreadName(this, "NetworkServerThread");
1:         
0:         parent=nsi;
1:         serverSocket=ss;
0:         timeSlice=nsi.getTimeSlice();
1:     }
1: 	
1:     public void run() 
1:     {
1:         Socket clientSocket = null;
1:         
1:         for (;;) { // Nearly infinite loop. The loop is terminated if
1:                    // 1) We are shut down or 2) SSL won't work. In all
1:                    // other cases we just continue and try another
1:                    // accept on the socket.
1:             try { // Check for all other exceptions....
1:                 try { // Check for underlying InterruptedException,
1:                       // SSLException and IOException
0:                     try{ // Check for PrivilegedActionException
0:                         clientSocket = 
0:                             (Socket) AccessController.doPrivileged(
0:                                  new PrivilegedExceptionAction() {
0:                                      public Object run() throws IOException
1:                                      {
0:                                          return serverSocket.accept();
1:                                      }
1:                                  }
0:                                  );
0:                         clientSocket.setKeepAlive(parent.getKeepAlive());
1:                         
1:                         // Set time out: Stops DDMReader.fill() from
1:                         // waiting indefinitely when timeSlice is set.
0:                         if (timeSlice != 0)
1:                             clientSocket.setSoTimeout(timeSlice);
1:                         
1:                         //create a new Session for this socket
0:                         parent.addSession(clientSocket);
1:                         
1:                     } catch (PrivilegedActionException e) {
1:                         // Just throw the underlying exception
1:                         throw e.getException();
1:                     } // end inner try/catch block
1:                     
1:                 } catch (InterruptedException ie) {
0:                     // This is a shutdown and we'll just exit the
0:                     // thread. NOTE: This is according to the logic
0:                     // before this rewrite. I am not convinced that it
0:                     // is allways the case, but will not alter the
0:                     // behaviour since it is not within the scope of
0:                     // this change (DERBY-2108).
0:                     return;
1:                 } catch (javax.net.ssl.SSLException ssle) {
1:                     // SSLException is a subclass of
0:                     // IOException, but we should not continue
0:                     // if we get one. Print stack trace and...
1:                     
1:                     parent.consoleExceptionPrintTrace(ssle);
1:                     
0:                     // ... we need to shutdown the server, since SSL for
0:                     // some reason will not work.
1:                     
0:                     parent.directShutdown();
1:                     
0:                     return; // Exit the thread
1:                     
1:                 } catch (IOException ioe) {
0:                     // IOException are ignored.  No console error message
0:                     // if this was caused by a shutdown
1:                     synchronized (parent.getShutdownSync()) {
0:                         if (!parent.getShutdown()) {
0:                             parent.consolePropertyMessage("DRDA_UnableToAccept.S");
1:                         }
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 // Catch and log all other exceptions
1:                 
1:                 parent.consoleExceptionPrintTrace(e);
1:             } // end outer try/catch block
1:             
1:         } // end for(;;)
1:         
1:     }// end run()
commit:1f71856
/////////////////////////////////////////////////////////////////////////
1: 
0: 					// Set time out: Stops DDMReader.fill() from
0: 					// waiting indefinitely when timeSlice is set.
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
1: final class ClientThread extends Thread {
/////////////////////////////////////////////////////////////////////////
0: 		ClientThread (NetworkServerControlImpl nsi, ServerSocket ss) {
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.drda.ClientThread
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
0: import java.io.*;
0: import java.net.*;
0: import java.security.*;
1: 
0: class ClientThread extends Thread {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0:  private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
0: 	DB2jServerImpl parent;
0: 	ServerSocket serverSocket;
0: 	private int timeSlice;
0: 	private int connNum;
0: 	private String traceDir;
0: 	private boolean traceAll;
1: 
0: 		protected ClientThread (DB2jServerImpl dsi, ServerSocket ss) {
1: 
0: 			// Create a more meaningful name for this thread (but preserve its
0: 			// thread id from the default name).
0: 			DB2jServerImpl.setUniqueThreadName(this, "NetworkServerThread");
1: 
0: 			parent=dsi;
0: 			serverSocket=ss;
0: 			timeSlice=dsi.getTimeSlice();
0: 			traceDir=parent.getTraceDirectory();
0: 			traceAll=parent.getTraceAll();
0: 		}
1: 			
0: 		public void run() 
0: 		{
1: 
0: 			Socket clientSocket = null;
0: 			Session clientSession = null;
1: 
1: 
0: 			for (;;)
0: 			{
0: 				try {
0: 	          		try{
0: 	             			clientSocket = (Socket) AccessController.doPrivileged(
0: 						new PrivilegedExceptionAction() {
0: 							public Object run() throws IOException
0: 							{
0: 								return serverSocket.accept();
0: 							}
0: 						}
0: 					);
0: 					//set time out
1: 					
0: 					if (timeSlice != 0)
0: 						clientSocket.setSoTimeout(timeSlice);
0: 				} catch (PrivilegedActionException e) {
0: 					Exception e1 = e.getException();
0: 	            			if (e1 instanceof IOException){
0: 						synchronized(parent.getShutdownSync()) {
0: 							if (!parent.getShutdown())
0: 	                					parent.consolePropertyMessage("DRDA_UnableToAccept.S");
0: 							}
0: 					} else throw e1;
0: 	                		break;
0: 				} // end priv try/catch block
1: 				
0: 				connNum = parent.getNewConnNum();
0: 	                	parent.consolePropertyMessage("DRDA_ConnNumber.I", 
0: 							Integer.toString(connNum));
1: 
0: 				//create a new Session for this session
0: 				clientSession = new Session(connNum, clientSocket, 
0: 					traceDir, traceAll);
1: 
0: 				//add to Session list
0: 				parent.addToSessionTable(new Integer(connNum), clientSession);
1: 
0: 				//create a new thread for this connection if we need one
0: 				//and if we are allowed
0: 				if (parent.getFreeThreads() == 0 && 
0: 					(parent.getMaxThreads() == 0  || 
0: 					parent.getThreadList().size() < parent.getMaxThreads()))
0: 				{
0: 					DRDAConnThread thread = new DRDAConnThread(clientSession, 
0: 						parent, timeSlice, parent.getLogConnections());
0: 					parent.getThreadList().addElement(thread);
0: 					thread.start();
0: 				}
0: 				else //wait for a free thread
0: 					parent.runQueueAdd(clientSession);
0: 				}catch (Exception e) {
0: 					if (e instanceof InterruptedException)
0: 						return;
0: 					parent.consoleExceptionPrintTrace(e);
0: 				} // end outer try/catch block
0: 			} // end for(;;)
1: 
0: 		}// end run()
0: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.drda;
0: 
0: import java.io.*;
0: import java.net.*;
0: import java.security.*;
0: 
0: class ClientThread extends Thread {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0:  private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	DB2jServerImpl parent;
0: 	ServerSocket serverSocket;
0: 	private int timeSlice;
0: 	private int connNum;
0: 	private String traceDir;
0: 	private boolean traceAll;
0: 
0: 		protected ClientThread (DB2jServerImpl dsi, ServerSocket ss) {
0: 
0: 			// Create a more meaningful name for this thread (but preserve its
0: 			// thread id from the default name).
0: 			DB2jServerImpl.setUniqueThreadName(this, "NetworkServerThread");
0: 
0: 			parent=dsi;
0: 			serverSocket=ss;
0: 			timeSlice=dsi.getTimeSlice();
0: 			traceDir=parent.getTraceDirectory();
0: 			traceAll=parent.getTraceAll();
0: 		}
0: 			
0: 		public void run() 
0: 		{
0: 
0: 			Socket clientSocket = null;
0: 			Session clientSession = null;
0: 
0: 
0: 			for (;;)
0: 			{
0: 				try {
0: 	          		try{
0: 	             			clientSocket = (Socket) AccessController.doPrivileged(
0: 						new PrivilegedExceptionAction() {
0: 							public Object run() throws IOException
0: 							{
0: 								return serverSocket.accept();
0: 							}
0: 						}
0: 					);
0: 					//set time out
0: 					
0: 					if (timeSlice != 0)
0: 						clientSocket.setSoTimeout(timeSlice);
0: 				} catch (PrivilegedActionException e) {
0: 					Exception e1 = e.getException();
0: 	            			if (e1 instanceof IOException){
0: 						synchronized(parent.getShutdownSync()) {
0: 							if (!parent.getShutdown())
0: 	                					parent.consolePropertyMessage("DRDA_UnableToAccept.S");
0: 							}
0: 					} else throw e1;
0: 	                		break;
0: 				} // end priv try/catch block
0: 				
0: 				connNum = parent.getNewConnNum();
0: 	                	parent.consolePropertyMessage("DRDA_ConnNumber.I", 
0: 							Integer.toString(connNum));
0: 
0: 				//create a new Session for this session
0: 				clientSession = new Session(connNum, clientSocket, 
0: 					traceDir, traceAll);
0: 
0: 				//add to Session list
0: 				parent.addToSessionTable(new Integer(connNum), clientSession);
0: 
0: 				//create a new thread for this connection if we need one
0: 				//and if we are allowed
0: 				if (parent.getFreeThreads() == 0 && 
0: 					(parent.getMaxThreads() == 0  || 
0: 					parent.getThreadList().size() < parent.getMaxThreads()))
0: 				{
0: 					DRDAConnThread thread = new DRDAConnThread(clientSession, 
0: 						parent, timeSlice, parent.getLogConnections());
0: 					parent.getThreadList().addElement(thread);
0: 					thread.start();
0: 				}
0: 				else //wait for a free thread
0: 					parent.runQueueAdd(clientSession);
0: 				}catch (Exception e) {
0: 					if (e instanceof InterruptedException)
0: 						return;
0: 					parent.consoleExceptionPrintTrace(e);
0: 				} // end outer try/catch block
0: 			} // end for(;;)
0: 
0: 		}// end run()
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================