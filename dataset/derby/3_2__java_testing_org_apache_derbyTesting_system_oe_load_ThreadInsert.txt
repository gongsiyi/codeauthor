1:dbdd270: /*
1:dbdd270: * Licensed to the Apache Software Foundation (ASF) under one or more
1:dbdd270: * contributor license agreements.  See the NOTICE file distributed with
1:dbdd270: * this work for additional information regarding copyright ownership.
1:dbdd270: * The ASF licenses this file to you under the Apache License, Version 2.0
1:dbdd270: * (the "License"); you may not use this file except in compliance with
1:dbdd270: * the License.  You may obtain a copy of the License at
1:dbdd270: *
1:dbdd270: *     http://www.apache.org/licenses/LICENSE-2.0
1:dbdd270: *
1:dbdd270: * Unless required by applicable law or agreed to in writing, software
1:dbdd270: * distributed under the License is distributed on an "AS IS" BASIS,
1:dbdd270: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dbdd270: * See the License for the specific language governing permissions and
1:dbdd270: * limitations under the License.
1:dbdd270: */
1:88809ad: package org.apache.derbyTesting.system.oe.load;
1:88809ad: 
1:88809ad: import java.sql.Connection;
1:88809ad: import java.sql.SQLException;
1:88809ad: 
1:88809ad: import javax.sql.DataSource;
1:88809ad: 
1:88809ad: import org.apache.derbyTesting.system.oe.client.Load;
1:88809ad: 
1:88809ad: /**
1:88809ad:  * Multi-threaded version of SimpleInsert.
1:88809ad:  * A number of threads execute the INSERT statements
1:88809ad:  * (each with their own connection).
1:88809ad:  * All the rows for a given warehouse are executed by
1:88809ad:  * one thread. The threads each get a warehouse to
1:88809ad:  * complete and then insert all the rows. Then they
1:88809ad:  * loop back to get the next warehouse. Warehouses
1:88809ad:  * are assigned to threads in a first come first served
1:88809ad:  * fashion. The main thread also inserts the ITEM table.
1:88809ad:  * <BR>
1:88809ad:  * By default the number of threads is the number
1:88809ad:  * of cpus on the machine, unless the scale to be loaded
1:88809ad:  * is larger than the number of threads. Then the number
1:88809ad:  * of threads will be equal to the scale. If the scale
1:88809ad:  * is one or the number of threads is one then the
1:88809ad:  * load is just like SimpleInsert.
1:88809ad:  * <BR>
1:88809ad:  * The number of threads can be set but if it
1:88809ad:  * it larger than the scale then the number of threads
1:88809ad:  * will be equal to the scale.
1:88809ad:  * 
1:88809ad:  * <BR>
1:88809ad:  * It is assumed that foreign key constraints are
1:88809ad:  * created after the load.
1:88809ad:  *
1:88809ad:  */
1:88809ad: public class ThreadInsert extends SimpleInsert implements Runnable  {
1:88809ad:     
1:88809ad:     /**
1:88809ad:      * The main ThreadInsert, created by the main
1:88809ad:      * thread and holds the valid nextWarehouse.
1:88809ad:      */
1:88809ad:     private final ThreadInsert master;
1:88809ad:     
1:88809ad:     private SQLException loadExceptions;
1:88809ad:     
1:88809ad:     private int threadCount;
1:88809ad:     
1:88809ad:     private DataSource ds;
1:88809ad:  
1:88809ad:     
1:88809ad:     /**
1:88809ad:      * Next warehouse that needs to be populated.
1:88809ad:      */
1:88809ad:     private short nextWarehouse = 1;
1:88809ad: 
1:88809ad:     /**
1:88809ad:      * Create a ThreadInsert loader.
1:88809ad:      * @param ds getConnection() will be used to create connections
1:88809ad:      * for the spaened threads.
1:88809ad:      */
1:88809ad:     public ThreadInsert(DataSource ds) {
1:88809ad:         super();
1:88809ad:         master = this;
1:88809ad:         this.ds = ds;
1:88809ad:     }
1:88809ad:     private ThreadInsert(ThreadInsert master) {
1:88809ad:         super();
1:88809ad:         this.master = master;
1:88809ad:     }
1:88809ad:     
1:88809ad:     /**
1:88809ad:      * Initialize the load by calling the super-class's method
1:88809ad:      * and default the number of threads to the smaller of the number
1:88809ad:      * of cpus and the scale.
1:88809ad:      */
1:88809ad:     public void setupLoad(Connection conn, short scale) throws SQLException {
1:88809ad:         
1:88809ad:         super.setupLoad(conn, scale);
1:88809ad: 
1:88809ad:         int cpuCount = Runtime.getRuntime().availableProcessors();
1:88809ad:         
1:88809ad:         setThreadCount(cpuCount);
1:88809ad:     }
1:88809ad: 
1:88809ad:     /**
1:88809ad:      * Set the thread count.
1:88809ad:      * If the scale is less than the number of threads
1:88809ad:      * then the number of threads inserting data will 
1:88809ad:      * be equal to the scale.
1:88809ad:      */
1:88809ad:     public void setThreadCount(int threadCount) {
1:88809ad:         if (scale == 1) {
1:88809ad:             this.threadCount = 1;
1:88809ad:             return;
1:88809ad:         }
1:88809ad:         
1:88809ad:         if (scale < threadCount) {
1:88809ad:             this.threadCount = scale;
1:88809ad:             return;
1:88809ad:         }
1:88809ad:         
1:88809ad:         this.threadCount = threadCount;
1:88809ad:     }
1:88809ad:     
1:88809ad:     /**
1:88809ad:      * Populate the database.
1:88809ad:      */
1:88809ad:     public void populateAllTables() throws Exception {
1:88809ad:         if (threadCount == 1)
1:88809ad:             super.populateAllTables();
1:88809ad:         else
1:88809ad:             threadPopulate();
1:88809ad:     }
1:88809ad: 
1:88809ad:     /**
1:88809ad:      * Populate the database using multiple threads.
1:88809ad:      * The main thread (ie the one calling this method).
1:88809ad:      * is one of the threads that will insert the data
1:88809ad:      * It will handle the ITEM table by itself and
1:88809ad:      * its fair share of the remaining tables.
1:88809ad:      * @throws SQLException 
1:88809ad:      * @throws InterruptedException 
1:88809ad:      *
1:88809ad:      */
1:88809ad:     private void threadPopulate() throws SQLException, InterruptedException {
1:88809ad:         Thread[] threads = new Thread[threadCount - 1];
1:88809ad:         for (int t = 1; t < threadCount; t++)
1:88809ad:         {
1:88809ad:             // Need to open a new connection.
1:88809ad:             Connection loaderConn = ds.getConnection();
1:88809ad:            
1:88809ad:             ThreadInsert ti = new ThreadInsert(this);
1:88809ad:             ti.setSeed((seed * t) / 17);
1:88809ad:             ti.setupConnection(loaderConn, scale);
1:88809ad:             ti.setRandomGenerator();
1:88809ad:             
1:88809ad:             Thread loader = new Thread(ti, "OELoader:"+t);
1:88809ad:             threads[t - 1] = loader;
1:88809ad:             loader.start();
1:88809ad:         }
1:88809ad: 
1:88809ad:         // load item table
1:88809ad:         itemTable(1, Load.ITEM_COUNT);
1:88809ad:         
1:88809ad:         // and my share of the warehouse based tables.
1:88809ad:         run();
1:88809ad:         
1:88809ad:         for (int j = 0; j < threads.length; j++)
1:88809ad:         {
1:88809ad:             threads[j].join();
1:88809ad:         }
1:88809ad:         
1:88809ad:         synchronized (this) {
1:88809ad:             if (loadExceptions != null)
1:88809ad:                 throw loadExceptions;
1:88809ad:         }
1:88809ad:    }
1:88809ad:     
1:88809ad:     /**
1:88809ad:      * Get the next warehouse to populate.
1:88809ad:      * If all have been populated then -1 is returned.
1:88809ad:      * Warehouse is one based.
1:88809ad:      */
1:88809ad:     synchronized short getNextWarehouse() {
1:88809ad:         short next = nextWarehouse++;
1:88809ad:         if (next > scale)
1:88809ad:             return -1;
1:88809ad:         return next;
1:88809ad:     }
1:88809ad:     
1:88809ad:     /**
1:88809ad:      * Save all the exceptions seen during load.
1:88809ad:      */
1:88809ad:     synchronized void addException(SQLException sqle)
1:88809ad:     {
1:88809ad:         if (loadExceptions == null)
1:88809ad:             loadExceptions = sqle;
1:88809ad:         else
1:88809ad:         {
1:88809ad:             SQLException chain = loadExceptions;
1:88809ad:             for (;;)
1:88809ad:             {
1:88809ad:                 SQLException e = chain.getNextException();
1:88809ad:                 if (e != null) {
1:88809ad:                     chain = e;
1:88809ad:                     continue;
1:88809ad:                 }
1:88809ad:                 chain.setNextException(sqle);
1:88809ad:                 break;
1:88809ad:             }              
1:88809ad:         }      
1:88809ad:     }
1:88809ad:     
1:88809ad:     /**
1:88809ad:      * Run the load for a thread. Loop insert the data
1:88809ad:      * for a single warehouse while there are warehouses
1:88809ad:      * left to do.
1:88809ad:      */
1:88809ad:     public void run() {
1:88809ad:         
1:88809ad:         short w;
1:88809ad:         while ((w = master.getNextWarehouse()) != -1)
1:88809ad:         {
1:88809ad:             try {
1:88809ad:                 populateForOneWarehouse(w);
1:88809ad:             } catch (SQLException e) {
1:88809ad:                 master.addException(e);
1:88809ad:                 break;
1:88809ad:             }
1:88809ad:         }
1:88809ad:     }
1:88809ad: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:dbdd270
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one or more
1: * contributor license agreements.  See the NOTICE file distributed with
1: * this work for additional information regarding copyright ownership.
1: * The ASF licenses this file to you under the Apache License, Version 2.0
1: * (the "License"); you may not use this file except in compliance with
1: * the License.  You may obtain a copy of the License at
1: *
1: *     http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing, software
1: * distributed under the License is distributed on an "AS IS" BASIS,
1: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: * See the License for the specific language governing permissions and
1: * limitations under the License.
1: */
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:017a20a
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:88809ad
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.system.oe.load;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: 
1: import javax.sql.DataSource;
1: 
1: import org.apache.derbyTesting.system.oe.client.Load;
1: 
1: /**
1:  * Multi-threaded version of SimpleInsert.
1:  * A number of threads execute the INSERT statements
1:  * (each with their own connection).
1:  * All the rows for a given warehouse are executed by
1:  * one thread. The threads each get a warehouse to
1:  * complete and then insert all the rows. Then they
1:  * loop back to get the next warehouse. Warehouses
1:  * are assigned to threads in a first come first served
1:  * fashion. The main thread also inserts the ITEM table.
1:  * <BR>
1:  * By default the number of threads is the number
1:  * of cpus on the machine, unless the scale to be loaded
1:  * is larger than the number of threads. Then the number
1:  * of threads will be equal to the scale. If the scale
1:  * is one or the number of threads is one then the
1:  * load is just like SimpleInsert.
1:  * <BR>
1:  * The number of threads can be set but if it
1:  * it larger than the scale then the number of threads
1:  * will be equal to the scale.
1:  * 
1:  * <BR>
1:  * It is assumed that foreign key constraints are
1:  * created after the load.
1:  *
1:  */
1: public class ThreadInsert extends SimpleInsert implements Runnable  {
1:     
1:     /**
1:      * The main ThreadInsert, created by the main
1:      * thread and holds the valid nextWarehouse.
1:      */
1:     private final ThreadInsert master;
1:     
1:     private SQLException loadExceptions;
1:     
1:     private int threadCount;
1:     
1:     private DataSource ds;
1:  
1:     
1:     /**
1:      * Next warehouse that needs to be populated.
1:      */
1:     private short nextWarehouse = 1;
1: 
1:     /**
1:      * Create a ThreadInsert loader.
1:      * @param ds getConnection() will be used to create connections
1:      * for the spaened threads.
1:      */
1:     public ThreadInsert(DataSource ds) {
1:         super();
1:         master = this;
1:         this.ds = ds;
1:     }
1:     private ThreadInsert(ThreadInsert master) {
1:         super();
1:         this.master = master;
1:     }
1:     
1:     /**
1:      * Initialize the load by calling the super-class's method
1:      * and default the number of threads to the smaller of the number
1:      * of cpus and the scale.
1:      */
1:     public void setupLoad(Connection conn, short scale) throws SQLException {
1:         
1:         super.setupLoad(conn, scale);
1: 
1:         int cpuCount = Runtime.getRuntime().availableProcessors();
1:         
1:         setThreadCount(cpuCount);
1:     }
1: 
1:     /**
1:      * Set the thread count.
1:      * If the scale is less than the number of threads
1:      * then the number of threads inserting data will 
1:      * be equal to the scale.
1:      */
1:     public void setThreadCount(int threadCount) {
1:         if (scale == 1) {
1:             this.threadCount = 1;
1:             return;
1:         }
1:         
1:         if (scale < threadCount) {
1:             this.threadCount = scale;
1:             return;
1:         }
1:         
1:         this.threadCount = threadCount;
1:     }
1:     
1:     /**
1:      * Populate the database.
1:      */
1:     public void populateAllTables() throws Exception {
1:         if (threadCount == 1)
1:             super.populateAllTables();
1:         else
1:             threadPopulate();
1:     }
1: 
1:     /**
1:      * Populate the database using multiple threads.
1:      * The main thread (ie the one calling this method).
1:      * is one of the threads that will insert the data
1:      * It will handle the ITEM table by itself and
1:      * its fair share of the remaining tables.
1:      * @throws SQLException 
1:      * @throws InterruptedException 
1:      *
1:      */
1:     private void threadPopulate() throws SQLException, InterruptedException {
1:         Thread[] threads = new Thread[threadCount - 1];
1:         for (int t = 1; t < threadCount; t++)
1:         {
1:             // Need to open a new connection.
1:             Connection loaderConn = ds.getConnection();
1:            
1:             ThreadInsert ti = new ThreadInsert(this);
1:             ti.setSeed((seed * t) / 17);
1:             ti.setupConnection(loaderConn, scale);
1:             ti.setRandomGenerator();
1:             
1:             Thread loader = new Thread(ti, "OELoader:"+t);
1:             threads[t - 1] = loader;
1:             loader.start();
1:         }
1: 
1:         // load item table
1:         itemTable(1, Load.ITEM_COUNT);
1:         
1:         // and my share of the warehouse based tables.
1:         run();
1:         
1:         for (int j = 0; j < threads.length; j++)
1:         {
1:             threads[j].join();
1:         }
1:         
1:         synchronized (this) {
1:             if (loadExceptions != null)
1:                 throw loadExceptions;
1:         }
1:    }
1:     
1:     /**
1:      * Get the next warehouse to populate.
1:      * If all have been populated then -1 is returned.
1:      * Warehouse is one based.
0:      * @return
1:      */
1:     synchronized short getNextWarehouse() {
1:         short next = nextWarehouse++;
1:         if (next > scale)
1:             return -1;
1:         return next;
1:     }
1:     
1:     /**
1:      * Save all the exceptions seen during load.
1:      */
1:     synchronized void addException(SQLException sqle)
1:     {
1:         if (loadExceptions == null)
1:             loadExceptions = sqle;
1:         else
1:         {
1:             SQLException chain = loadExceptions;
1:             for (;;)
1:             {
1:                 SQLException e = chain.getNextException();
1:                 if (e != null) {
1:                     chain = e;
1:                     continue;
1:                 }
1:                 chain.setNextException(sqle);
1:                 break;
1:             }              
1:         }      
1:     }
1:     
1:     /**
1:      * Run the load for a thread. Loop insert the data
1:      * for a single warehouse while there are warehouses
1:      * left to do.
1:      */
1:     public void run() {
1:         
1:         short w;
1:         while ((w = master.getNextWarehouse()) != -1)
1:         {
1:             try {
1:                 populateForOneWarehouse(w);
1:             } catch (SQLException e) {
1:                 master.addException(e);
1:                 break;
1:             }
1:         }
1:     }
1: }
============================================================================