1:7a9ce7e: /*
6:7a9ce7e: 
1:7a9ce7e:    Derby - Class org.apache.derby.impl.sql.compile.WindowNode
1:7a9ce7e: 
1:7a9ce7e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9ce7e:    contributor license agreements.  See the NOTICE file distributed with
1:7a9ce7e:    this work for additional information regarding copyright ownership.
1:7a9ce7e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a9ce7e:    (the "License"); you may not use this file except in compliance with
1:7a9ce7e:    the License.  You may obtain a copy of the License at
1:7a9ce7e: 
1:7a9ce7e:       http://www.apache.org/licenses/LICENSE-2.0
1:7a9ce7e: 
1:7a9ce7e:    Unless required by applicable law or agreed to in writing, software
1:7a9ce7e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a9ce7e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9ce7e:    See the License for the specific language governing permissions and
1:7a9ce7e:    limitations under the License.
1:7a9ce7e: 
1:7a9ce7e:  */
1:7a9ce7e: 
1:7a9ce7e: package org.apache.derby.impl.sql.compile;
1:7a9ce7e: 
1:7a9ce7e: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7a9ce7e: 
1:7a9ce7e: /**
1:7a9ce7e:  * Superclass of window definition and window reference.
1:7a9ce7e:  */
1:7a9ce7e: public abstract class WindowNode extends QueryTreeNode
1:7a9ce7e: {
1:7a9ce7e:     /**
1:7a9ce7e:      * The provided name of the window if explicitly defined in a window
1:7a9ce7e:      * clause. If the definition is inlined, currently the definition has
1:7a9ce7e:      * windowName "IN_LINE".  The standard 2003 sec. 4.14.9 calls for a
1:3bb140c:      * implementation defined one.
1:7a9ce7e:      */
1:7a9ce7e:     private String windowName;
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:3bb140c:      * Constructor
1:7a9ce7e:      *
1:3bb140c:      * @param windowName The window name
1:3bb140c:      * @param cm         The context manager
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException
1:7a9ce7e:      */
1:3bb140c:     WindowNode(String windowName, ContextManager cm) throws StandardException
1:7a9ce7e:     {
1:3bb140c:         super(cm);
1:3bb140c:         this.windowName = windowName;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * @return the name of this window
1:7a9ce7e:      */
1:7a9ce7e:     public String getName() {
1:7a9ce7e:         return windowName;
1:7a9ce7e:     }
1:7a9ce7e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
1:      * implementation defined one.
1:      * Constructor
1:      * @param windowName The window name
1:      * @param cm         The context manager
1:     WindowNode(String windowName, ContextManager cm) throws StandardException
1:         super(cm);
1:         this.windowName = windowName;
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.WindowNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import java.sql.Types;
0: import java.util.Vector;
1: 
1: /**
1:  * Superclass of window definition and window reference.
1:  */
1: public abstract class WindowNode extends QueryTreeNode
1: {
1:     /**
1:      * The provided name of the window if explicitly defined in a window
1:      * clause. If the definition is inlined, currently the definition has
1:      * windowName "IN_LINE".  The standard 2003 sec. 4.14.9 calls for a
0:      * impl. defined one.
1:      */
1:     private String windowName;
1: 
1: 
1:     /**
0:      * Initializer
1:      *
0:      * @param arg1 The window name
1:      *
1:      * @exception StandardException
1:      */
0:     public void init(Object arg1)
0:         throws StandardException
1:     {
0:         windowName = (String)arg1;
1:     }
1: 
1: 
1:     /**
1:      * @return the name of this window
1:      */
1:     public String getName() {
1:         return windowName;
1:     }
1: 
1: 
1: 
1: }
commit:9faef25
commit:3527fd5
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:47d4a4c
/////////////////////////////////////////////////////////////////////////
author:Army
-------------------------------------------------------------------------------
commit:4343e2e
/////////////////////////////////////////////////////////////////////////
0: 	 * @param level The window function level of this window function column 
commit:c723732
/////////////////////////////////////////////////////////////////////////
0: /*
0: 	Derby - Class org.apache.derby.impl.sql.compile.WindowNode
0:  
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to you under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0: */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import java.util.Properties;
0: 
0: import java.util.Vector;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.ClassName;
0: import org.apache.derby.iapi.services.classfile.VMOpcode;
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: /**
0:  * This node type handles window functions. It takes a
0:  * FromTable as its source ResultSetNode, and generates an
0:  * WindowResultSet.
0:  * 
0:  * The implementation is based on IndexToBaseRowNode.
0:  */
0: public class WindowNode extends SingleChildResultSetNode {	
0: 	
0: 	/* The following members define the window properties 
0: 	 * 
0: 	 * NOTE: Named windows, and window partitions except the full ResultSet 
0: 	 *       are not yet supported.
0: 	 */
0: 	private String windowName;
0: 	private ResultColumnList partitionDefinition;
0: 	private OrderByList orderByList;
0: 	private Object frameDefinition; // TODO
0: 		
0: 	/* 
0: 	 * When there are multiple window function columns in a RCL, 
0: 	 * 'windowFunctionLevel' is used to identify which level this WindowNode 
0: 	 * is at in the chain.
0: 	 */
0: 	private int windowFunctionLevel;
0: 	
0: 	private Properties tableProperties;
0: 	private int numTables;
0: 	
0: 	public void init(Object windowName,
0: 		Object partitionDefinition,
0: 		Object orderByList,
0: 		Object frameDefinition)
0: 		throws StandardException {
0: 		this.windowName = (String) windowName;
0: 		this.partitionDefinition = (ResultColumnList) partitionDefinition;
0: 		this.orderByList = (OrderByList) orderByList;
0: 		this.frameDefinition = (Object) frameDefinition; // TODO		
0: 		this.windowFunctionLevel = -1;
0: 	}
0: 
0: 	/*
0: 	 *  ResultSet implementation
0: 	 */
0: 	
0: 	/**
0: 	 * Preprocess a WindowNode by calling into its source preprocess.
0: 	 *
0: 	 * RESOLVE: We should probably push predicates down as well?
0: 	 *
0: 	 * @param numTables			The number of tables in the DML Statement	 
0: 	 * @param fromList			The from list, if any
0: 	 * @param subqueryList		The subquery list, if any
0: 	 * @param predicateList		The predicate list, if any
0: 	 *
0: 	 * @return ResultSetNode at top of preprocessed tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ResultSetNode preprocess(int numTables,
0: 		FromList fromList,
0: 		SubqueryList subqueryList,
0: 		PredicateList predicateList)
0: 		throws StandardException {
0: 
0: 		/* Set up the referenced table map */
0: 		this.numTables = numTables;
0: 		referencedTableMap = new JBitSet(numTables);
0: 		int flSize = fromList.size();
0: 		for (int index = 0; index < flSize; index++)
0: 		{
0: 			referencedTableMap.or(((FromTable) fromList.elementAt(index)).
0: 													getReferencedTableMap());
0: 		}			
0: 		
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Bind this node. 
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *						expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error. Although this class
0: 	 * doesn't throw this exception, it's subclasses do and hence this method
0: 	 * signature here needs to have throws StandardException 
0: 	 */
0: 	public WindowNode bind(
0: 			FromList fromList, 
0: 			SubqueryList subqueryList,
0: 			Vector	aggregateVector)
0: 		throws StandardException
0: 	{
0: 		/*		 
0: 		 * This is simply a stub returning the new top of the querytree, since 
0: 		 * there is nothing to as long as we only support ROW_NUMBER(). It does 
0: 		 * not need any binding to source result columns.		 
0: 		 */
0: 		return this;
0: 	}
0: 	
0: 	/**
0: 	 * Generation of an WindowNode creates an WindowResultSet
0: 	 *
0: 	 * @param acb	The ActivationClassBuilder for the class being built
0: 	 * @param mb	the method  for the method to be built
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generate(ActivationClassBuilder acb,	
0: 		MethodBuilder mb)
0: 		throws StandardException {
0: 		int rclSize = resultColumns.size();
0: 		FormatableBitSet referencedCols = new FormatableBitSet(rclSize);
0: 		int erdNumber = -1;
0: 		int numSet = 0;
0: 
0: 		/*
0: 		 ** Get the next ResultSet #, so that we can number this ResultSetNode,
0: 		 ** its ResultColumnList and ResultSet.
0: 		 */
0: 		assignResultSetNumber();
0: 
0: 		// Get the CostEstimate info for the underlying scan
0: 		costEstimate = getFinalCostEstimate();
0: 
0: 		acb.pushGetResultSetFactoryExpression(mb);
0: 
0: 		/* 
0: 		 * Build a FormatableBitSet for columns to copy from source. If there are 
0: 		 * multiple window function coulmns, they will be added right to left.		 
0: 		 */
0: 		int skip = 0;
0: 		for (int index = rclSize-1; index >= 0; index--) {		
0: 			ResultColumn rc = (ResultColumn) resultColumns.elementAt(index);
0: 			if ( rc.isWindowFunction() && skip < this.windowFunctionLevel) {
0: 				// Skip this
0: 				skip++;
0: 				continue;
0: 			}
0: 			// if not
0: 			referencedCols.set(index);
0: 			numSet++;
0: 		}
0: 
0: 		erdNumber = acb.addItem(referencedCols);
0: 
0: 		acb.pushThisAsActivation(mb); // arg 1
0: 
0: 		childResult.generate(acb, mb);	  // arg 2
0: 		mb.upCast(ClassName.NoPutResultSet);
0: 
0: 		/* row allocator */
0: 		resultColumns.generateHolder(acb, mb); // arg 3		
0: 
0: 		mb.push(resultSetNumber); //arg 4
0: 		mb.push(windowFunctionLevel); //arg 5
0: 
0: 		/* Pass in the erdNumber for the referenced column FormatableBitSet */
0: 		mb.push(erdNumber); // arg 6		
0: 
0: 		/* There is no restriction at this level, we just want to pass null. */
0: 		mb.pushNull(ClassName.GeneratedMethod); // arg 7
0: 		
0: 		mb.push(costEstimate.rowCount()); //arg 8
0: 		mb.push(costEstimate.getEstimatedCost()); // arg 9
0: 
0: 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null,			
0: 			"getWindowResultSet", ClassName.NoPutResultSet, 9);
0: 
0: 		/*
0: 		 ** Remember if this result set is the cursor target table, so we
0: 		 ** can know which table to use when doing positioned update and delete.
0: 		 */
0: 		if (cursorTargetTable) {
0: 			acb.rememberCursorTarget(mb);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Consider materialization for this ResultSet tree if it is valid and cost 
0: 	 * effective. It is not valid if incorrect results would be returned.
0: 	 *
0: 	 * @return Top of the new/same ResultSet tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ResultSetNode considerMaterialization(JBitSet outerTables)
0: 		throws StandardException {
0: 		/* 
0: 		 * For queries involving window functions like ROW_NUMBER() we should
0: 		 * most likely materialize the ResultSet.
0: 		 * 
0: 		 * Return a reference to ourselves.
0: 		 */
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not to materialize this ResultSet tree.
0: 	 *
0: 	 * @return Whether or not to materialize this ResultSet tree.
0: 	 *			would return valid results.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public boolean performMaterialization(JBitSet outerTables)
0: 		throws StandardException {
0: 		/* 
0: 		 * Queries involving window functions will most likely benefit from 
0: 		 * materializing the ResultSet. It does not make sense for ROW_NUMBER 
0: 		 * though, so it should probably depend on what function is evaluated.
0: 		 */
0: 		return false;		
0: 	}
0: 	
0: 	/**
0: 	 * Get the windowFunctionLevel of this WindowNode in case there are 
0: 	 * multiple window functions in a RCL.
0: 	 *
0: 	 * @return the windowFunctionLevel for this window function column 
0: 	 */
0: 	public int getWindowFunctionLevel()
0: 	{
0: 		return this.windowFunctionLevel;
0: 	}
0: 	
0: 	/**
0: 	 * Set the windowFunctionLevel of this WindowNode in case there are 
0: 	 * multiple window functions in a RCL.
0: 	 *
0: 	 * @param	the window function level of this window function column 
0: 	 */	
0: 	public void setWindowFunctionLevel(int level)
0: 	{
0: 		this.windowFunctionLevel = level;
0: 	}
0: }
============================================================================