1:6de7104: /*
2:6de7104: 
1:6de7104:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.resultsetJdbc20
1:6de7104: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:6de7104: 
1:6de7104:       http://www.apache.org/licenses/LICENSE-2.0
1:6de7104: 
1:6de7104:    Unless required by applicable law or agreed to in writing, software
1:6de7104:    distributed under the License is distributed on an "AS IS" BASIS,
1:6de7104:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6de7104:    See the License for the specific language governing permissions and
1:6de7104:    limitations under the License.
1:6de7104: 
1:6de7104:  */
1:6de7104: 
1:6de7104: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:6de7104: 
1:6de7104: import java.sql.Connection;
1:6de7104: import java.sql.DriverManager;
1:6de7104: import java.sql.ResultSetMetaData;
1:6de7104: import java.sql.ResultSet;
1:6de7104: import java.sql.Statement;
1:6de7104: import java.sql.SQLException;
1:6de7104: import java.sql.Types;
1:6de7104: 
1:6de7104: import org.apache.derby.tools.ij;
1:6de7104: import org.apache.derby.tools.JDBCDisplayUtil;
1:6de7104: 
1:5ff5941: import org.apache.derbyTesting.functionTests.util.TestUtil;
1:5ff5941: 
1:6de7104: /**
1:6de7104:  * Test of additional methods in JDBC2.0 result set meta-data.
1:6de7104:  * This program simply calls each of the additional result set meta-data
1:6de7104:  * methods, one by one, and prints the results.
1:6de7104:  *
1:6de7104:  */
1:6de7104: 
1:6de7104: public class resultsetJdbc20 { 
1:5ff5941: 	private static String[] testObjects = { "TABLE T"};
1:6de7104: 	public static void main(String[] args) {
1:6de7104: 		Connection con;
1:6de7104: 		ResultSetMetaData met;
1:6de7104: 		ResultSet rs;
1:6de7104: 		Statement stmt;
1:5ff5941: 		
1:6de7104: 		String[]  columnNames = {"i", "s", "r", "d", "dt", "t", "ts", "c", "v", "dc"};
1:6de7104: 
1:6de7104: 		System.out.println("Test resultsetJdbc20 starting");
1:6de7104: 
1:6de7104: 		try
1:6de7104: 		{
1:6de7104: 			// use the ij utility to read the property file and
1:6de7104: 			// make the initial connection.
1:6de7104: 			ij.getPropertyArg(args);
1:6de7104: 			con = ij.startJBMS();
1:6de7104: 			stmt = con.createStatement();
1:5ff5941: 			// first clean up
1:5ff5941: 			TestUtil.cleanUpTest(stmt, testObjects);
1:6de7104: 
1:6de7104:       //create a table, insert a row, do a select from the table,
1:6de7104:       //get the resultset meta data and go through each column in
1:6de7104:       //the selection list and get it's column class name.
1:6de7104: 			stmt.execute("create table t (i int, s smallint, r real, "+
1:6de7104: 				"d double precision, dt date, t time, ts timestamp, "+
1:6de7104: 				"c char(10), v varchar(40) not null, dc dec(10,2))");
1:6de7104: 			stmt.execute("insert into t values(1,2,3.3,4.4,date('1990-05-05'),"+
1:6de7104: 						 "time('12:06:06'),timestamp('1990-07-07 07:07:07.07'),"+
1:6de7104: 						 "'eight','nine', 10.1)");
1:6de7104: 
1:6de7104: 			rs = stmt.executeQuery("select * from t");
1:6de7104: 			met = rs.getMetaData();
1:6de7104: 
1:6de7104: 			int colCount;
1:6de7104: 			System.out.println("getColumnCount(): "+(colCount=met.getColumnCount()));
1:6de7104: 
1:6de7104: 			// JDBC columns use 1-based counting
1:6de7104: 			for (int i=1;i<=colCount;i++) {
1:6de7104: 				// this test suffers from bug 5775.
1:6de7104: 				// this if should be removed if the bug is fixed.	
1:6de7104: 				if (i==2 && (met.getColumnClassName(i).equals("java.lang.Short")))
1:6de7104: 				{
1:6de7104: 					System.out.println("getColumnName("+i+"): "+met.getColumnName(i));
1:6de7104: 					//System.out.println("getColumnClassName("+i+"): "+met.getColumnClassName(i));
1:6de7104: 					System.out.println("FAIL: should be java.lang.Integer - but is java.lang.Short. see beetle 5775");	
1:6de7104: 				}
1:6de7104: 				else
1:6de7104: 				{
1:6de7104: 					System.out.println("getColumnName("+i+"): "+met.getColumnName(i));
1:6de7104: 					System.out.println("getColumnClassName("+i+"): "+met.getColumnClassName(i));
1:6de7104: 				}
1:6de7104: 			}
1:6de7104: 
1:6de7104: 			rs.close();
1:6de7104: 
1:5ff5941: 			TestUtil.cleanUpTest(stmt, testObjects);
1:6de7104: 			stmt.close();
1:6de7104: 			con.close();
1:6de7104: 
1:6de7104: 		}
1:6de7104: 		catch (SQLException e) {
1:6de7104: 			dumpSQLExceptions(e);
1:6de7104: 			e.printStackTrace();
1:6de7104: 		}
1:6de7104: 		catch (Throwable e) {
1:6de7104: 			System.out.println("FAIL -- unexpected exception: "+e);
1:6de7104: 			e.printStackTrace();
1:6de7104: 		}
1:6de7104: 
1:6de7104: 		System.out.println("Test resultsetJdbc20 finished");
1:6de7104:     }
1:6de7104: 
1:6de7104: 	static private void dumpSQLExceptions (SQLException se) {
1:6de7104: 		System.out.println("FAIL -- unexpected exception");
1:6de7104: 		while (se != null) {
1:6de7104: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1:6de7104: 			se = se.getNextException();
1:6de7104: 		}
1:6de7104: 	}
1:6de7104: 
1:6de7104: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.functionTests.util.TestUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	private static String[] testObjects = { "TABLE T"};
1: 		
/////////////////////////////////////////////////////////////////////////
1: 			// first clean up
1: 			TestUtil.cleanUpTest(stmt, testObjects);
/////////////////////////////////////////////////////////////////////////
1: 			TestUtil.cleanUpTest(stmt, testObjects);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6de7104
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.resultsetJdbc20
1: 
0:    Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.ResultSetMetaData;
1: import java.sql.ResultSet;
1: import java.sql.Statement;
1: import java.sql.SQLException;
1: import java.sql.Types;
1: 
1: import org.apache.derby.tools.ij;
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: /**
1:  * Test of additional methods in JDBC2.0 result set meta-data.
1:  * This program simply calls each of the additional result set meta-data
1:  * methods, one by one, and prints the results.
1:  *
1:  */
1: 
1: public class resultsetJdbc20 { 
1: 	public static void main(String[] args) {
1: 		Connection con;
1: 		ResultSetMetaData met;
1: 		ResultSet rs;
1: 		Statement stmt;
1: 		String[]  columnNames = {"i", "s", "r", "d", "dt", "t", "ts", "c", "v", "dc"};
1: 
1: 		System.out.println("Test resultsetJdbc20 starting");
1: 
1: 		try
1: 		{
1: 			// use the ij utility to read the property file and
1: 			// make the initial connection.
1: 			ij.getPropertyArg(args);
1: 			con = ij.startJBMS();
1: 			stmt = con.createStatement();
1: 
1:       //create a table, insert a row, do a select from the table,
1:       //get the resultset meta data and go through each column in
1:       //the selection list and get it's column class name.
1: 			stmt.execute("create table t (i int, s smallint, r real, "+
1: 				"d double precision, dt date, t time, ts timestamp, "+
1: 				"c char(10), v varchar(40) not null, dc dec(10,2))");
1: 			stmt.execute("insert into t values(1,2,3.3,4.4,date('1990-05-05'),"+
1: 						 "time('12:06:06'),timestamp('1990-07-07 07:07:07.07'),"+
1: 						 "'eight','nine', 10.1)");
1: 
1: 			rs = stmt.executeQuery("select * from t");
1: 			met = rs.getMetaData();
1: 
1: 			int colCount;
1: 			System.out.println("getColumnCount(): "+(colCount=met.getColumnCount()));
1: 
1: 			// JDBC columns use 1-based counting
1: 			for (int i=1;i<=colCount;i++) {
1: 				// this test suffers from bug 5775.
1: 				// this if should be removed if the bug is fixed.	
1: 				if (i==2 && (met.getColumnClassName(i).equals("java.lang.Short")))
1: 				{
1: 					System.out.println("getColumnName("+i+"): "+met.getColumnName(i));
1: 					//System.out.println("getColumnClassName("+i+"): "+met.getColumnClassName(i));
1: 					System.out.println("FAIL: should be java.lang.Integer - but is java.lang.Short. see beetle 5775");	
1: 				}
1: 				else
1: 				{
1: 					System.out.println("getColumnName("+i+"): "+met.getColumnName(i));
1: 					System.out.println("getColumnClassName("+i+"): "+met.getColumnClassName(i));
1: 				}
1: 			}
1: 
1: 			rs.close();
1: 
1: 			stmt.close();
1: 			con.close();
1: 
1: 		}
1: 		catch (SQLException e) {
1: 			dumpSQLExceptions(e);
1: 			e.printStackTrace();
1: 		}
1: 		catch (Throwable e) {
1: 			System.out.println("FAIL -- unexpected exception: "+e);
1: 			e.printStackTrace();
1: 		}
1: 
1: 		System.out.println("Test resultsetJdbc20 finished");
1:     }
1: 
1: 	static private void dumpSQLExceptions (SQLException se) {
1: 		System.out.println("FAIL -- unexpected exception");
1: 		while (se != null) {
1: 			System.out.println("SQLSTATE("+se.getSQLState()+"): "+se);
1: 			se = se.getNextException();
1: 		}
1: 	}
1: 
1: }
============================================================================