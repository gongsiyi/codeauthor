1:eac0369: /*
1:345de35: 
1:850aba4:    Derby - Class org.apache.derby.impl.jdbc.EmbedSavepoint
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
6:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc;
1:eac0369: 
1:1ae0d7d: import java.security.AccessController;
1:1ae0d7d: import java.security.PrivilegedAction;
1:850aba4: import java.sql.SQLException;
1:850aba4: import java.sql.Savepoint;
1:850aba4: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:1ae0d7d: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
2:eac0369: /**
1:850aba4:  * This class implements the Savepoint interface from JDBC 3.0.
1:eac0369:  * This allows to set, release, or rollback a transaction to
1:eac0369:  * designated Savepoints. Savepoints provide finer-grained
1:eac0369:  * control of transactions by marking intermediate points within
1:eac0369:  * a transaction. Once a savepoint has been set, the transaction
1:eac0369:  * can be rolled back to that savepoint without affecting preceding work.
1:4153b27:    <P><B>Supports</B>
1:4153b27:    <UL>
1:4153b27:    <LI> JSR169 - no subsetting for java.sql.Savepoint
1:4153b27:    <LI> JDBC 3.0 - class introduced in JDBC 3.0
1:4153b27:    </UL>
1:eac0369:  *
1:eac0369:  * @see java.sql.Savepoint
1:eac0369:  *
1:eac0369:  */
1:850aba4: final class EmbedSavepoint extends ConnectionChild
1:eac0369:     implements Savepoint {
1:eac0369: 
1:eac0369:     //In order to avoid name conflict, the external names are prepanded
1:eac0369:     //with "e." and internal names always start with "i." This is for bug 4467
1:eac0369:     private final String savepointName;
1:eac0369:     private final int savepointID;
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	/*
1:eac0369: 		Constructor assumes caller will setup context stack
1:eac0369: 		and restore it.
1:eac0369: 	    @exception SQLException on error
1:eac0369: 	 */
1:850aba4:     EmbedSavepoint(EmbedConnection conn, String name)
1:eac0369:     throws StandardException {
1:eac0369:    		super(conn);
1:eac0369:    		if (name == null) //this is an unnamed savepoint
1:eac0369:    		{
1:1ae0d7d:             //Generating a unique internal name for unnamed savepoints
1:1ae0d7d:             savepointName = "i." + getLanguageConnectionContext( conn ).getUniqueSavepointName();
1:1ae0d7d:             savepointID = getLanguageConnectionContext( conn ).getUniqueSavepointID();
1:eac0369:    		} else
1:eac0369:    		{
1:eac0369: 				savepointName = "e." + name;
1:eac0369: 				savepointID = -1;
2:eac0369:    		}
1:1ae0d7d:    		getLanguageConnectionContext( conn ).languageSetSavePoint(savepointName, this);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the generated ID for the savepoint that this Savepoint object
1:eac0369:     * represents.
1:eac0369:     *
1:eac0369:     * @return the numeric ID of this savepoint
1:eac0369:     * @exception SQLException if this is a named savepoint
1:eac0369:     */
1:eac0369:     public int getSavepointId() throws SQLException {
1:850aba4:    		if (savepointID == -1) {
1:eac0369: 			throw newSQLException(SQLState.NO_ID_FOR_NAMED_SAVEPOINT);
1:850aba4:         }
1:eac0369:    		return savepointID;
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the name of the savepoint that this Savepoint object
1:eac0369:     * represents.
1:eac0369:     *
1:eac0369:     * @return the name of this savepoint
1:eac0369:     * @exception SQLException if this is an un-named savepoint
1:eac0369:     */
1:eac0369:     public String getSavepointName() throws SQLException {
1:850aba4:    		if (savepointID != -1) {
1:eac0369: 			throw newSQLException(SQLState.NO_NAME_FOR_UNNAMED_SAVEPOINT);
1:850aba4:         }
1:eac0369:    		return savepointName.substring(2);
1:eac0369:     }
1:eac0369: 
1:94f158a:     // Derby internally keeps name for both named and unnamed savepoints
1:eac0369:     String getInternalName() {
1:eac0369:    		return savepointName;
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     //bug 4468 - verify that savepoint rollback/release is for a savepoint from
1:eac0369:     //the current connection
1:eac0369:     boolean sameConnection(EmbedConnection con) {
1:1ae0d7d:    		return
1:1ae0d7d:             (
1:a57220c:              getLCC( getEmbedConnection() ) ==
1:a57220c:              getLCC( con )
1:1ae0d7d:              );
1:1ae0d7d:     }
1:eac0369: 
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a57220c
/////////////////////////////////////////////////////////////////////////
1:              getLCC( getEmbedConnection() ) ==
1:              getLCC( con )
commit:1ae0d7d
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
/////////////////////////////////////////////////////////////////////////
1:             //Generating a unique internal name for unnamed savepoints
1:             savepointName = "i." + getLanguageConnectionContext( conn ).getUniqueSavepointName();
1:             savepointID = getLanguageConnectionContext( conn ).getUniqueSavepointID();
1:    		getLanguageConnectionContext( conn ).languageSetSavePoint(savepointName, this);
/////////////////////////////////////////////////////////////////////////
1:    		return
1:             (
0:              getLanguageConnectionContext( getEmbedConnection() ) ==
0:              getLanguageConnectionContext( con )
1:              );
1: }
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:850aba4
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.EmbedSavepoint
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import java.sql.Savepoint;
1: import org.apache.derby.iapi.error.StandardException;
1:  * This class implements the Savepoint interface from JDBC 3.0.
/////////////////////////////////////////////////////////////////////////
1: final class EmbedSavepoint extends ConnectionChild
/////////////////////////////////////////////////////////////////////////
1:     EmbedSavepoint(EmbedConnection conn, String name)
/////////////////////////////////////////////////////////////////////////
1:    		if (savepointID == -1) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:    		if (savepointID != -1) {
1:         }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1:     // Derby internally keeps name for both named and unnamed savepoints
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4153b27
/////////////////////////////////////////////////////////////////////////
1:    <P><B>Supports</B>
1:    <UL>
1:    <LI> JSR169 - no subsetting for java.sql.Savepoint
1:    <LI> JDBC 3.0 - class introduced in JDBC 3.0
1:    </UL>
commit:345de35
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derby.impl.jdbc.EmbedSavepoint30
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
0: import org.apache.derby.impl.jdbc.EmbedConnection;
0: import org.apache.derby.impl.jdbc.ConnectionChild;
0: import org.apache.derby.impl.jdbc.Util;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.sql.Savepoint;
0: import java.sql.SQLException;
1: 
1: /**
0:  * This class implements the Savepoint interface from JDBC3.0
1:  * This allows to set, release, or rollback a transaction to
1:  * designated Savepoints. Savepoints provide finer-grained
1:  * control of transactions by marking intermediate points within
1:  * a transaction. Once a savepoint has been set, the transaction
1:  * can be rolled back to that savepoint without affecting preceding work.
1:  *
1:  * @see java.sql.Savepoint
1:  *
1:  */
0: final class EmbedSavepoint30 extends ConnectionChild
1:     implements Savepoint {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1:     //In order to avoid name conflict, the external names are prepanded
1:     //with "e." and internal names always start with "i." This is for bug 4467
1:     private final String savepointName;
1:     private final int savepointID;
1: 
1: 	//////////////////////////////////////////////////////////////
1: 	//
1: 	// CONSTRUCTORS
1: 	//
1: 	//////////////////////////////////////////////////////////////
1: 	/*
1: 		Constructor assumes caller will setup context stack
1: 		and restore it.
1: 	    @exception SQLException on error
1: 	 */
0:     EmbedSavepoint30(EmbedConnection conn, String name)
1:     throws StandardException {
1:    		super(conn);
1:    		if (name == null) //this is an unnamed savepoint
1:    		{
0: 				//Generating a unique internal name for unnamed savepoints
0: 				savepointName = "i." + conn.getLanguageConnection().getUniqueSavepointName();
0: 				savepointID = conn.getLanguageConnection().getUniqueSavepointID();
1:    		} else
1:    		{
1: 				savepointName = "e." + name;
1: 				savepointID = -1;
1:    		}
0:    		conn.getLanguageConnection().languageSetSavePoint(savepointName, this);
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves the generated ID for the savepoint that this Savepoint object
1:     * represents.
1:     *
1:     * @return the numeric ID of this savepoint
1:     * @exception SQLException if this is a named savepoint
1:     */
1:     public int getSavepointId() throws SQLException {
0:    		if (savepointID == -1)
1: 			throw newSQLException(SQLState.NO_ID_FOR_NAMED_SAVEPOINT);
1:    		return savepointID;
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves the name of the savepoint that this Savepoint object
1:     * represents.
1:     *
1:     * @return the name of this savepoint
1:     * @exception SQLException if this is an un-named savepoint
1:     */
1:     public String getSavepointName() throws SQLException {
0:    		if (savepointID != -1)
1: 			throw newSQLException(SQLState.NO_NAME_FOR_UNNAMED_SAVEPOINT);
1:    		return savepointName.substring(2);
1:     }
1: 
0:     //Cloudscape internally keeps name for both named and unnamed savepoints
1:     String getInternalName() {
1:    		return savepointName;
1:     }
1: 
1: 
1:     //bug 4468 - verify that savepoint rollback/release is for a savepoint from
1:     //the current connection
1:     boolean sameConnection(EmbedConnection con) {
0:    		return (getEmbedConnection().getLanguageConnection() == con.getLanguageConnection());
1:     }
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc;
0: 
0: import org.apache.derby.impl.jdbc.EmbedConnection;
0: import org.apache.derby.impl.jdbc.ConnectionChild;
0: import org.apache.derby.impl.jdbc.Util;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.sql.Savepoint;
0: import java.sql.SQLException;
0: 
0: /**
0:  * This class implements the Savepoint interface from JDBC3.0
0:  * This allows to set, release, or rollback a transaction to
0:  * designated Savepoints. Savepoints provide finer-grained
0:  * control of transactions by marking intermediate points within
0:  * a transaction. Once a savepoint has been set, the transaction
0:  * can be rolled back to that savepoint without affecting preceding work.
0:  *
0:  * @see java.sql.Savepoint
0:  *
0:  */
0: final class EmbedSavepoint30 extends ConnectionChild
0:     implements Savepoint {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0:     //In order to avoid name conflict, the external names are prepanded
0:     //with "e." and internal names always start with "i." This is for bug 4467
0:     private final String savepointName;
0:     private final int savepointID;
0: 
0: 	//////////////////////////////////////////////////////////////
0: 	//
0: 	// CONSTRUCTORS
0: 	//
0: 	//////////////////////////////////////////////////////////////
0: 	/*
0: 		Constructor assumes caller will setup context stack
0: 		and restore it.
0: 	    @exception SQLException on error
0: 	 */
0:     EmbedSavepoint30(EmbedConnection conn, String name)
0:     throws StandardException {
0:    		super(conn);
0:    		if (name == null) //this is an unnamed savepoint
0:    		{
0: 				//Generating a unique internal name for unnamed savepoints
0: 				savepointName = "i." + conn.getLanguageConnection().getUniqueSavepointName();
0: 				savepointID = conn.getLanguageConnection().getUniqueSavepointID();
0:    		} else
0:    		{
0: 				savepointName = "e." + name;
0: 				savepointID = -1;
0:    		}
0:    		conn.getLanguageConnection().languageSetSavePoint(savepointName, this);
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves the generated ID for the savepoint that this Savepoint object
0:     * represents.
0:     *
0:     * @return the numeric ID of this savepoint
0:     * @exception SQLException if this is a named savepoint
0:     */
0:     public int getSavepointId() throws SQLException {
0:    		if (savepointID == -1)
0: 			throw newSQLException(SQLState.NO_ID_FOR_NAMED_SAVEPOINT);
0:    		return savepointID;
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves the name of the savepoint that this Savepoint object
0:     * represents.
0:     *
0:     * @return the name of this savepoint
0:     * @exception SQLException if this is an un-named savepoint
0:     */
0:     public String getSavepointName() throws SQLException {
0:    		if (savepointID != -1)
0: 			throw newSQLException(SQLState.NO_NAME_FOR_UNNAMED_SAVEPOINT);
0:    		return savepointName.substring(2);
0:     }
0: 
0:     //Cloudscape internally keeps name for both named and unnamed savepoints
0:     String getInternalName() {
0:    		return savepointName;
0:     }
0: 
0: 
0:     //bug 4468 - verify that savepoint rollback/release is for a savepoint from
0:     //the current connection
0:     boolean sameConnection(EmbedConnection con) {
0:    		return (getEmbedConnection().getLanguageConnection() == con.getLanguageConnection());
0:     }
0: }
0: 
============================================================================