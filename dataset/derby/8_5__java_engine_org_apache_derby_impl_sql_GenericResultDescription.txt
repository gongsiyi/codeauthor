1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.GenericResultDescription
1:345de35: 
1:67c1c96:    Licensed to the Apache Software Foundation (ASF) under one or more
1:67c1c96:    contributor license agreements.  See the NOTICE file distributed with
1:67c1c96:    this work for additional information regarding copyright ownership.
1:67c1c96:    The ASF licenses this file to you under the Apache License, Version 2.0
1:67c1c96:    (the "License"); you may not use this file except in compliance with
1:67c1c96:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:6cc0702: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:f512b2f: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:f512b2f: import java.sql.ResultSetMetaData;
1:f512b2f: import java.util.Collections;
1:f512b2f: import java.util.HashMap;
1:f512b2f: import java.util.Map;
1:f512b2f: 
4:eac0369: /**
1:eac0369:  * GenericResultDescription: basic implementation of result
1:eac0369:  * description, used in conjunction with the other 
1:eac0369:  * implementations in this package.  This implementation 
1:eac0369:  * of ResultDescription may be used by anyone.
4:eac0369:  *
1:eac0369:  */
1:eac0369: public final class GenericResultDescription
1:eac0369: 	implements ResultDescription, Formatable
8:eac0369: {
1:eac0369: 
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	private ResultColumnDescriptor[] columns;
1:eac0369: 	private String statementType;
1:f512b2f:     
1:f512b2f:     /**
1:f512b2f:      * Saved JDBC ResultSetMetaData object.
1:f512b2f:      * @see ResultDescription#setMetaData(java.sql.ResultSetMetaData)
1:f512b2f:      */
1:f512b2f:     private transient ResultSetMetaData metaData;
1:f512b2f:     
1:f512b2f:     /**
1:f512b2f:      * A map which maps a column name to a column number.
1:f512b2f:      * Entries only added when accessing columns with the name.
1:f512b2f:      */
1:71c8e86:     private Map<String,Integer> columnNameMap;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formatable
1:eac0369: 	 */
1:eac0369: 	public GenericResultDescription()
1:eac0369: 	{
8:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Build a GenericResultDescription from columns and type
1:eac0369: 	 *
1:eac0369: 	 * @param columns an array of col descriptors
1:eac0369: 	 * @param statementType the type
1:eac0369: 	 */
1:eac0369: 	public GenericResultDescription(ResultColumnDescriptor[] columns, 
1:eac0369: 					String statementType) 
1:eac0369: 	{
1:3f7581c:         this.columns = ArrayUtil.copy(columns);
1:eac0369: 		this.statementType = statementType;
1:eac0369: 	}
1:eac0369: 
1:c69c8b0: 	/**
1:c69c8b0: 	 * Build a GenericResultDescription 
1:c69c8b0: 	 *
1:c69c8b0: 	 * @param rd the result description
1:c69c8b0: 	 * @param theCols the columns to take from the input rd
1:c69c8b0: 	 */
1:c69c8b0: 	public GenericResultDescription
1:c69c8b0: 	(
1:c69c8b0: 		ResultDescription	rd, 
1:c69c8b0: 		int[]				theCols
1:c69c8b0: 	) 
1:c69c8b0: 	{
1:c69c8b0: 		if (SanityManager.DEBUG)
1:c69c8b0: 		{
1:c69c8b0: 			SanityManager.ASSERT(theCols != null, "theCols argument to GenericResultDescription is null");
1:c69c8b0: 		}
1:c69c8b0: 
1:c69c8b0: 		this.columns = new ResultColumnDescriptor[theCols.length];
1:c69c8b0: 		for (int i = 0; i < theCols.length; i++)
1:c69c8b0: 		{
1:c69c8b0: 			columns[i] = rd.getColumnDescriptor(theCols[i]);
1:c69c8b0: 		}
1:c69c8b0: 		this.statementType = rd.getStatementType();
1:c69c8b0: 	}
1:c69c8b0: 
1:eac0369: 	//
1:eac0369: 	// ResultDescription interface
1:eac0369: 	//
1:eac0369: 	/**
1:eac0369: 	 * @see ResultDescription#getStatementType
1:eac0369: 	 */
1:eac0369: 	public String	getStatementType() {
1:eac0369: 		return statementType;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see ResultDescription#getColumnCount
1:eac0369: 	 */
1:eac0369: 	public int	getColumnCount() 
1:eac0369: 	{
1:eac0369: 		return (columns == null) ? 0 : columns.length;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public ResultColumnDescriptor[] getColumnInfo() {
1:3f7581c:         return ArrayUtil.copy(columns);
1:eac0369: 	}
1:eac0369: 
1:6cc0702:     public  ResultColumnDescriptor  getColumnInfo( int idx ) { return columns[ idx ]; }
1:6cc0702: 
1:eac0369: 	/**
1:eac0369: 	 * position is 1-based.
1:eac0369: 	 * @see ResultDescription#getColumnDescriptor
1:eac0369: 	 */
1:eac0369: 	public ResultColumnDescriptor getColumnDescriptor(int position) {
1:eac0369: 		return columns[position-1];
1:eac0369: 	}
1:eac0369: 
1:c69c8b0: 	/**
1:c69c8b0: 	 * Get a new result description that has been truncated
1:c69c8b0: 	 * from input column number.   If the input column is
1:c69c8b0: 	 * 5, then columns 5 to getColumnCount() are removed.
1:c69c8b0: 	 * The new ResultDescription points to the same
1:c69c8b0: 	 * ColumnDescriptors (this method performs a shallow
1:c69c8b0: 	 * copy.
1:c69c8b0: 	 *
1:c69c8b0: 	 * @param truncateFrom the starting column to remove
1:c69c8b0: 	 *
1:c69c8b0: 	 * @return a new ResultDescription
1:c69c8b0: 	 */
1:c69c8b0: 	public ResultDescription truncateColumns(int truncateFrom)	
1:c69c8b0: 	{
1:c69c8b0: 		if (SanityManager.DEBUG) 
1:c69c8b0: 		{
1:c69c8b0: 			if (!(truncateFrom > 0 && columns != null))
1:c69c8b0: 			{
1:c69c8b0: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too low");
1:c69c8b0: 			}
1:c69c8b0: 			if (truncateFrom > columns.length)
1:c69c8b0: 			{
1:c69c8b0: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too high");
1:c69c8b0: 			}
1:c69c8b0: 		}
1:c69c8b0: 		ResultColumnDescriptor[] newColumns = new ResultColumnDescriptor[truncateFrom-1];
1:c69c8b0: 		System.arraycopy(columns, 0, newColumns, 0, newColumns.length);
1:c69c8b0: 		return new GenericResultDescription(newColumns, statementType);
1:c69c8b0: 	}
1:c69c8b0: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		int len = (columns == null) ? 0 : columns.length;
1:eac0369: 
1:eac0369: 		out.writeObject(statementType);
1:eac0369: 		out.writeInt(len);
1:eac0369: 		while(len-- > 0)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** If we don't have a GenericColumnsDescriptor, 
1:eac0369: 			** create one now and use that to write out.
1:eac0369: 			** Do this to avoid writing out query tree
1:eac0369: 			** implementations of ResultColumnDescriptor
1:eac0369: 			*/
1:eac0369: 			if (!(columns[len] instanceof 
1:eac0369: 						GenericColumnDescriptor))
1:eac0369: 			{
1:eac0369: 				columns[len] = new GenericColumnDescriptor(columns[len]);
1:eac0369: 			}
1:eac0369: 			out.writeObject(columns[len]);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		int len;
1:eac0369: 
1:eac0369: 		columns = null;
1:eac0369: 		statementType = (String)in.readObject();
1:eac0369: 		len = in.readInt();
1:eac0369: 		if (len > 0)
1:eac0369: 		{
1:eac0369: 			columns = new GenericColumnDescriptor[len];
1:eac0369: 			while(len-- > 0)
1:eac0369: 			{
1:eac0369: 				columns[len] = (ResultColumnDescriptor)in.readObject();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int getTypeFormatId()	{ return StoredFormatIds.GENERIC_RESULT_DESCRIPTION_V01_ID; }
1:eac0369: 
1:eac0369: 
1:eac0369: 	
1:eac0369: 	public String toString()
1:eac0369: 	{
3:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			StringBuffer colStr = new StringBuffer();
1:eac0369: 			for (int i = 0; i < columns.length; i++)
1:eac0369: 			{
1:eac0369: 				colStr.append("column["+i+"]\n");
1:eac0369: 				colStr.append(columns[i].toString());
1:eac0369: 			}	
1:eac0369: 			return "GenericResultDescription\n" +
1:eac0369: 					"\tStatementType = "+statementType+"\n" +
1:eac0369: 					"\tCOLUMNS\n" + colStr.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:f512b2f: 
1:f512b2f:     /**
1:f512b2f:      * Set the meta data if it has not already been set.
1:f512b2f:      */
1:f512b2f:     public synchronized void setMetaData(ResultSetMetaData rsmd) {
1:f512b2f:         if (metaData == null)
1:f512b2f:             metaData = rsmd;
1:f512b2f:     }
1:f512b2f: 
1:f512b2f:     /**
1:f512b2f:      * Get the saved meta data.
1:f512b2f:      */
1:f512b2f:     public synchronized ResultSetMetaData getMetaData() {
1:f512b2f:         return metaData;
1:f512b2f:     }
1:f512b2f: 
1:f512b2f:     /**
1:f512b2f:      * Find a column name based upon the JDBC rules for
1:f512b2f:      * getXXX and setXXX. Name matching is case-insensitive,
1:f512b2f:      * matching the first name (1-based) if there are multiple
1:f512b2f:      * columns that map to the same name.
1:f512b2f:      */
1:f512b2f:     public int findColumnInsenstive(String columnName) {
1:f512b2f:         
1:71c8e86:         final Map<String,Integer> workMap; 
1:f512b2f:         
1:f512b2f:         synchronized (this) {
1:f512b2f:             if (columnNameMap==null) {
1:f512b2f:                 // updateXXX and getXXX methods are case insensitive and the 
1:f512b2f:                 // first column should be returned. The loop goes backward to 
1:f512b2f:                 // create a map which preserves this property.
1:71c8e86:                 Map<String,Integer> map = new HashMap<String,Integer>();
1:f512b2f:                 for (int i = getColumnCount(); i>=1; i--) {
1:f512b2f:                     
1:f512b2f:                     final String key = StringUtil.
1:f512b2f:                         SQLToUpperCase(
1:f512b2f:                             getColumnDescriptor(i).getName());
1:f512b2f:                     
1:bb5be6f:                     final Integer value = i;
1:f512b2f:                     
1:f512b2f:                     map.put(key, value);
1:f512b2f:                 }
1:f512b2f:                 
1:f512b2f:                 // Ensure this map can never change.
1:f512b2f:                 columnNameMap = Collections.unmodifiableMap(map);
1:f512b2f:             }
1:f512b2f:             workMap = columnNameMap;
1:f512b2f:         }
1:f512b2f:         
1:f512b2f:         Integer val = (Integer) workMap.get(columnName);
1:f512b2f:         if (val==null) {
1:f512b2f:             val = (Integer) workMap.get(StringUtil.SQLToUpperCase(columnName));
1:f512b2f:         }
1:f512b2f:         if (val==null) {
1:f512b2f:             return -1;
1:f512b2f:         } else {
1:f512b2f:             return val.intValue();
1:f512b2f:         }
1:f512b2f:     }
1:eac0369: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:bb5be6f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     final Integer value = i;
commit:3f7581c
/////////////////////////////////////////////////////////////////////////
1:         this.columns = ArrayUtil.copy(columns);
/////////////////////////////////////////////////////////////////////////
1:         return ArrayUtil.copy(columns);
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
0:     private Map columnNameMap;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Build a GenericResultDescription 
1: 	 *
1: 	 * @param rd the result description
1: 	 * @param theCols the columns to take from the input rd
1: 	 */
1: 	public GenericResultDescription
1: 	(
1: 		ResultDescription	rd, 
1: 		int[]				theCols
1: 	) 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(theCols != null, "theCols argument to GenericResultDescription is null");
1: 		}
1: 
1: 		this.columns = new ResultColumnDescriptor[theCols.length];
1: 		for (int i = 0; i < theCols.length; i++)
1: 		{
1: 			columns[i] = rd.getColumnDescriptor(theCols[i]);
1: 		}
1: 		this.statementType = rd.getStatementType();
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Get a new result description that has been truncated
1: 	 * from input column number.   If the input column is
1: 	 * 5, then columns 5 to getColumnCount() are removed.
1: 	 * The new ResultDescription points to the same
1: 	 * ColumnDescriptors (this method performs a shallow
1: 	 * copy.
1: 	 *
1: 	 * @param truncateFrom the starting column to remove
1: 	 *
1: 	 * @return a new ResultDescription
1: 	 */
1: 	public ResultDescription truncateColumns(int truncateFrom)	
1: 	{
1: 		if (SanityManager.DEBUG) 
1: 		{
1: 			if (!(truncateFrom > 0 && columns != null))
1: 			{
1: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too low");
1: 			}
1: 			if (truncateFrom > columns.length)
1: 			{
1: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too high");
1: 			}
1: 		}
1: 		ResultColumnDescriptor[] newColumns = new ResultColumnDescriptor[truncateFrom-1];
1: 		System.arraycopy(columns, 0, newColumns, 0, newColumns.length);
1: 		return new GenericResultDescription(newColumns, statementType);
1: 	}
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:     private Map<String,Integer> columnNameMap;
/////////////////////////////////////////////////////////////////////////
1:         final Map<String,Integer> workMap; 
1:                 Map<String,Integer> map = new HashMap<String,Integer>();
commit:b046e71
/////////////////////////////////////////////////////////////////////////
0: 		this.columns = (ResultColumnDescriptor[]) ArrayUtil.copy( columns );
commit:6cc0702
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
0: 		return (ResultColumnDescriptor[]) ArrayUtil.copy( columns );
1:     public  ResultColumnDescriptor  getColumnInfo( int idx ) { return columns[ idx ]; }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:51572c8
/////////////////////////////////////////////////////////////////////////
0:     private transient Map columnNameMap;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f512b2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.util.ReuseFactory;
1: import org.apache.derby.iapi.util.StringUtil;
1: import java.sql.ResultSetMetaData;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Saved JDBC ResultSetMetaData object.
1:      * @see ResultDescription#setMetaData(java.sql.ResultSetMetaData)
1:      */
1:     private transient ResultSetMetaData metaData;
1:     
1:     /**
1:      * A map which maps a column name to a column number.
1:      * Entries only added when accessing columns with the name.
1:      */
0:     private Map columnNameMap;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set the meta data if it has not already been set.
1:      */
1:     public synchronized void setMetaData(ResultSetMetaData rsmd) {
1:         if (metaData == null)
1:             metaData = rsmd;
1:     }
1: 
1:     /**
1:      * Get the saved meta data.
1:      */
1:     public synchronized ResultSetMetaData getMetaData() {
1:         return metaData;
1:     }
1: 
1:     /**
1:      * Find a column name based upon the JDBC rules for
1:      * getXXX and setXXX. Name matching is case-insensitive,
1:      * matching the first name (1-based) if there are multiple
1:      * columns that map to the same name.
1:      */
1:     public int findColumnInsenstive(String columnName) {
1:         
0:         final Map workMap; 
1:         
1:         synchronized (this) {
1:             if (columnNameMap==null) {
1:                 // updateXXX and getXXX methods are case insensitive and the 
1:                 // first column should be returned. The loop goes backward to 
1:                 // create a map which preserves this property.
0:                 Map map = new HashMap();
1:                 for (int i = getColumnCount(); i>=1; i--) {
1:                     
1:                     final String key = StringUtil.
1:                         SQLToUpperCase(
1:                             getColumnDescriptor(i).getName());
1:                     
0:                     final Integer value = ReuseFactory.getInteger(i);
1:                     
1:                     map.put(key, value);
1:                 }
1:                 
1:                 // Ensure this map can never change.
1:                 columnNameMap = Collections.unmodifiableMap(map);
1:             }
1:             workMap = columnNameMap;
1:         }
1:         
1:         Integer val = (Integer) workMap.get(columnName);
1:         if (val==null) {
1:             val = (Integer) workMap.get(StringUtil.SQLToUpperCase(columnName));
1:         }
1:         if (val==null) {
1:             return -1;
1:         } else {
1:             return val.intValue();
1:         }
1:     }
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.GenericResultDescription
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql;
1: 
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: /**
1:  * GenericResultDescription: basic implementation of result
1:  * description, used in conjunction with the other 
1:  * implementations in this package.  This implementation 
1:  * of ResultDescription may be used by anyone.
1:  *
0:  * @author ames
1:  */
1: public final class GenericResultDescription
1: 	implements ResultDescription, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	private ResultColumnDescriptor[] columns;
1: 	private String statementType;
1: 	
1: 	/**
1: 	 * Niladic constructor for Formatable
1: 	 */
1: 	public GenericResultDescription()
1: 	{
1: 	}
1: 
1: 	/**
1: 	 * Build a GenericResultDescription from columns and type
1: 	 *
1: 	 * @param columns an array of col descriptors
1: 	 * @param statementType the type
1: 	 */
1: 	public GenericResultDescription(ResultColumnDescriptor[] columns, 
1: 					String statementType) 
1: 	{
0: 		this.columns = columns;
1: 		this.statementType = statementType;
1: 	}
1: 
1: 	/**
0: 	 * Build a GenericResultDescription 
1: 	 *
0: 	 * @param rd the result description
0: 	 * @param theCols the columns to take from the input rd
1: 	 */
0: 	public GenericResultDescription
0: 	(
0: 		ResultDescription	rd, 
0: 		int[]				theCols
0: 	) 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
0: 			SanityManager.ASSERT(theCols != null, "theCols argument to GenericResultDescription is null");
1: 		}
1: 
0: 		this.columns = new ResultColumnDescriptor[theCols.length];
0: 		for (int i = 0; i < theCols.length; i++)
1: 		{
0: 			columns[i] = rd.getColumnDescriptor(theCols[i]);
1: 		}
0: 		this.statementType = rd.getStatementType();
1: 	}
1: 
1: 	//
1: 	// ResultDescription interface
1: 	//
1: 	/**
1: 	 * @see ResultDescription#getStatementType
1: 	 */
1: 	public String	getStatementType() {
1: 		return statementType;
1: 	}
1: 
1: 	/**
1: 	 * @see ResultDescription#getColumnCount
1: 	 */
1: 	public int	getColumnCount() 
1: 	{
1: 		return (columns == null) ? 0 : columns.length;
1: 	}
1: 
1: 	public ResultColumnDescriptor[] getColumnInfo() {
0: 		return columns;
1: 	}
1: 
1: 	/**
1: 	 * position is 1-based.
1: 	 * @see ResultDescription#getColumnDescriptor
1: 	 */
1: 	public ResultColumnDescriptor getColumnDescriptor(int position) {
1: 		return columns[position-1];
1: 	}
1: 
1: 	/**
0: 	 * Get a new result description that has been truncated
0: 	 * from input column number.   If the input column is
0: 	 * 5, then columns 5 to getColumnCount() are removed.
0: 	 * The new ResultDescription points to the same
0: 	 * ColumnDescriptors (this method performs a shallow
0: 	 * copy.
1: 	 *
0: 	 * @param truncateFrom the starting column to remove
1: 	 *
0: 	 * @return a new ResultDescription
1: 	 */
0: 	public ResultDescription truncateColumns(int truncateFrom)	
1: 	{
1: 		if (SanityManager.DEBUG) 
1: 		{
0: 			if (!(truncateFrom > 0 && columns != null))
1: 			{
0: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too low");
1: 			}
0: 			if (truncateFrom > columns.length)
1: 			{
0: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too high");
1: 			}
1: 		}
0: 		ResultColumnDescriptor[] newColumns = new ResultColumnDescriptor[truncateFrom-1];
0: 		System.arraycopy(columns, 0, newColumns, 0, newColumns.length);
0: 		return new GenericResultDescription(newColumns, statementType);
1: 	}
1: 
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		int len = (columns == null) ? 0 : columns.length;
1: 
1: 		out.writeObject(statementType);
1: 		out.writeInt(len);
1: 		while(len-- > 0)
1: 		{
1: 			/*
1: 			** If we don't have a GenericColumnsDescriptor, 
1: 			** create one now and use that to write out.
1: 			** Do this to avoid writing out query tree
1: 			** implementations of ResultColumnDescriptor
1: 			*/
1: 			if (!(columns[len] instanceof 
1: 						GenericColumnDescriptor))
1: 			{
1: 				columns[len] = new GenericColumnDescriptor(columns[len]);
1: 			}
1: 			out.writeObject(columns[len]);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		int len;
1: 
1: 		columns = null;
1: 		statementType = (String)in.readObject();
1: 		len = in.readInt();
1: 		if (len > 0)
1: 		{
1: 			columns = new GenericColumnDescriptor[len];
1: 			while(len-- > 0)
1: 			{
1: 				columns[len] = (ResultColumnDescriptor)in.readObject();
1: 			}
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int getTypeFormatId()	{ return StoredFormatIds.GENERIC_RESULT_DESCRIPTION_V01_ID; }
1: 
1: 
1: 	
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			StringBuffer colStr = new StringBuffer();
1: 			for (int i = 0; i < columns.length; i++)
1: 			{
1: 				colStr.append("column["+i+"]\n");
1: 				colStr.append(columns[i].toString());
1: 			}	
1: 			return "GenericResultDescription\n" +
1: 					"\tStatementType = "+statementType+"\n" +
1: 					"\tCOLUMNS\n" + colStr.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:67c1c96
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql;
0: 
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: /**
0:  * GenericResultDescription: basic implementation of result
0:  * description, used in conjunction with the other 
0:  * implementations in this package.  This implementation 
0:  * of ResultDescription may be used by anyone.
0:  *
0:  * @author ames
0:  */
0: public final class GenericResultDescription
0: 	implements ResultDescription, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	private ResultColumnDescriptor[] columns;
0: 	private String statementType;
0: 	
0: 	/**
0: 	 * Niladic constructor for Formatable
0: 	 */
0: 	public GenericResultDescription()
0: 	{
0: 	}
0: 
0: 	/**
0: 	 * Build a GenericResultDescription from columns and type
0: 	 *
0: 	 * @param columns an array of col descriptors
0: 	 * @param statementType the type
0: 	 */
0: 	public GenericResultDescription(ResultColumnDescriptor[] columns, 
0: 					String statementType) 
0: 	{
0: 		this.columns = columns;
0: 		this.statementType = statementType;
0: 	}
0: 
0: 	/**
0: 	 * Build a GenericResultDescription 
0: 	 *
0: 	 * @param rd the result description
0: 	 * @param theCols the columns to take from the input rd
0: 	 */
0: 	public GenericResultDescription
0: 	(
0: 		ResultDescription	rd, 
0: 		int[]				theCols
0: 	) 
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(theCols != null, "theCols argument to GenericResultDescription is null");
0: 		}
0: 
0: 		this.columns = new ResultColumnDescriptor[theCols.length];
0: 		for (int i = 0; i < theCols.length; i++)
0: 		{
0: 			columns[i] = rd.getColumnDescriptor(theCols[i]);
0: 		}
0: 		this.statementType = rd.getStatementType();
0: 	}
0: 
0: 	//
0: 	// ResultDescription interface
0: 	//
0: 	/**
0: 	 * @see ResultDescription#getStatementType
0: 	 */
0: 	public String	getStatementType() {
0: 		return statementType;
0: 	}
0: 
0: 	/**
0: 	 * @see ResultDescription#getColumnCount
0: 	 */
0: 	public int	getColumnCount() 
0: 	{
0: 		return (columns == null) ? 0 : columns.length;
0: 	}
0: 
0: 	public ResultColumnDescriptor[] getColumnInfo() {
0: 		return columns;
0: 	}
0: 
0: 	/**
0: 	 * position is 1-based.
0: 	 * @see ResultDescription#getColumnDescriptor
0: 	 */
0: 	public ResultColumnDescriptor getColumnDescriptor(int position) {
0: 		return columns[position-1];
0: 	}
0: 
0: 	/**
0: 	 * Get a new result description that has been truncated
0: 	 * from input column number.   If the input column is
0: 	 * 5, then columns 5 to getColumnCount() are removed.
0: 	 * The new ResultDescription points to the same
0: 	 * ColumnDescriptors (this method performs a shallow
0: 	 * copy.
0: 	 *
0: 	 * @param truncateFrom the starting column to remove
0: 	 *
0: 	 * @return a new ResultDescription
0: 	 */
0: 	public ResultDescription truncateColumns(int truncateFrom)	
0: 	{
0: 		if (SanityManager.DEBUG) 
0: 		{
0: 			if (!(truncateFrom > 0 && columns != null))
0: 			{
0: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too low");
0: 			}
0: 			if (truncateFrom > columns.length)
0: 			{
0: 				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too high");
0: 			}
0: 		}
0: 		ResultColumnDescriptor[] newColumns = new ResultColumnDescriptor[truncateFrom-1];
0: 		System.arraycopy(columns, 0, newColumns, 0, newColumns.length);
0: 		return new GenericResultDescription(newColumns, statementType);
0: 	}
0: 
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		int len = (columns == null) ? 0 : columns.length;
0: 
0: 		out.writeObject(statementType);
0: 		out.writeInt(len);
0: 		while(len-- > 0)
0: 		{
0: 			/*
0: 			** If we don't have a GenericColumnsDescriptor, 
0: 			** create one now and use that to write out.
0: 			** Do this to avoid writing out query tree
0: 			** implementations of ResultColumnDescriptor
0: 			*/
0: 			if (!(columns[len] instanceof 
0: 						GenericColumnDescriptor))
0: 			{
0: 				columns[len] = new GenericColumnDescriptor(columns[len]);
0: 			}
0: 			out.writeObject(columns[len]);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		int len;
0: 
0: 		columns = null;
0: 		statementType = (String)in.readObject();
0: 		len = in.readInt();
0: 		if (len > 0)
0: 		{
0: 			columns = new GenericColumnDescriptor[len];
0: 			while(len-- > 0)
0: 			{
0: 				columns[len] = (ResultColumnDescriptor)in.readObject();
0: 			}
0: 		}
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int getTypeFormatId()	{ return StoredFormatIds.GENERIC_RESULT_DESCRIPTION_V01_ID; }
0: 
0: 
0: 	
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			StringBuffer colStr = new StringBuffer();
0: 			for (int i = 0; i < columns.length; i++)
0: 			{
0: 				colStr.append("column["+i+"]\n");
0: 				colStr.append(columns[i].toString());
0: 			}	
0: 			return "GenericResultDescription\n" +
0: 					"\tStatementType = "+statementType+"\n" +
0: 					"\tCOLUMNS\n" + colStr.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: }
0: 
============================================================================