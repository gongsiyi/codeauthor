1:eac0369: /*
6:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.conglomerate.GenericController
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.conglomerate;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.SpaceInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: 
1:eac0369: import java.util.Properties; 
1:eac0369: 
2:eac0369: /**
1:eac0369: **/
1:eac0369: 
1:b22462c: abstract class GenericController 
1:eac0369: {
1:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     protected OpenConglomerate    open_conglom;
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     protected void getRowPositionFromRowLocation(
1:eac0369:     RowLocation row_loc,
1:eac0369:     RowPosition pos)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         // Not implemented in default conglomerate, needs to be overridden.
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE);
1:eac0369:        
1:eac0369:     }
1:eac0369: 
1:eac0369:     protected void queueDeletePostCommitWork(
1:eac0369:     RowPosition pos)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         // Not implemented in default conglomerate, needs to be overridden.
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     public void init(
1:eac0369:     OpenConglomerate    open_conglom)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(open_conglom != null);
1:eac0369: 
1:eac0369:         this.open_conglom = open_conglom;
1:eac0369:     }
1:eac0369: 
1:eac0369:     public OpenConglomerate getOpenConglom()
1:eac0369:     {
1:eac0369:         return(open_conglom);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods implementing ConglomerateController which just 
1:eac0369:      *     delegate to OpenConglomerate:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     public void checkConsistency()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         open_conglom.checkConsistency();
1:eac0369:     }
1:eac0369: 
1:eac0369:     public void debugConglomerate()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         open_conglom.debugConglomerate();
1:eac0369:     }
1:eac0369: 
1:eac0369:     public void getTableProperties(Properties prop)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         open_conglom.getTableProperties(prop);
1:eac0369:     }
1:eac0369: 
1:eac0369:     public Properties getInternalTablePropertySet(Properties prop)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         return(open_conglom.getInternalTablePropertySet(prop));
1:eac0369:     }
1:eac0369: 
1:eac0369:     public SpaceInfo getSpaceInfo()
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         return(open_conglom.getSpaceInfo());
1:eac0369:     }
1:eac0369: 
1:eac0369:     public void close()
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         if (open_conglom != null)
1:eac0369:             open_conglom.close();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	public boolean isKeyed()
1:eac0369: 	{
1:eac0369: 		return(open_conglom.isKeyed());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public RowLocation newRowLocationTemplate()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369:         if (open_conglom.isClosed())
1:eac0369:             open_conglom.reopen();
1:eac0369: 
1:eac0369:         return(open_conglom.newRowLocationTemplate());
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * is the open btree table locked?
1:eac0369:      **/
1:eac0369:     public boolean isTableLocked()
1:eac0369:     {
1:eac0369:         return(open_conglom.isTableLocked());
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get the total estimated number of rows in the container.
1:eac0369:      * <p>
1:eac0369:      * The number is a rough estimate and may be grossly off.  In general
1:eac0369:      * the server will cache the row count and then occasionally write
1:eac0369:      * the count unlogged to a backing store.  If the system happens to 
1:eac0369:      * shutdown before the store gets a chance to update the row count it
1:eac0369:      * may wander from reality.
1:eac0369:      * <p>
1:eac0369:      * This call is currently only supported on Heap conglomerates, it
1:eac0369:      * will throw an exception if called on btree conglomerates.
2:eac0369:      *
2:eac0369: 	 * @return The total estimated number of rows in the conglomerate.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public long getEstimatedRowCount()
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (open_conglom.isClosed())
1:eac0369:             open_conglom.reopen();
1:eac0369: 
1:eac0369:         // Don't return 0 rows (return 1 instead), as this often leads the 
1:eac0369:         // optimizer to produce plans which don't use indexes because of the 0 
1:eac0369:         // row edge case.
1:eac0369:         //
1:eac0369:         // Eventually the plan is recompiled when rows are added, but we
1:eac0369:         // have seen multiple customer cases of deadlocks and timeouts 
1:eac0369:         // because of these 0 row based plans.  
1:eac0369:         long row_count = open_conglom.getContainer().getEstimatedRowCount(0);
1:eac0369: 
1:eac0369:         return( (row_count == 0) ? 1 : row_count);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Set the total estimated number of rows in the container.
1:eac0369:      * <p>
1:eac0369:      * Often, after a scan, the client of RawStore has a much better estimate
1:eac0369:      * of the number of rows in the container than what store has.  For 
1:eac0369:      * instance if we implement some sort of update statistics command, or
1:eac0369:      * just after a create index a complete scan will have been done of the
1:eac0369:      * table.  In this case this interface allows the client to set the
1:eac0369:      * estimated row count for the container, and store will use that number
1:eac0369:      * for all future references.
1:eac0369:      * <p>
1:eac0369:      * This call is currently only supported on Heap conglomerates, it
1:eac0369:      * will throw an exception if called on btree conglomerates.
1:eac0369:      *
1:eac0369:      * @param count the estimated number of rows in the container.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void setEstimatedRowCount(long count)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         ContainerHandle container = open_conglom.getContainer();
1:eac0369: 
1:eac0369:         if (container == null)
1:eac0369:             open_conglom.reopen();
1:eac0369: 
1:501b8b0:         // the container could still be null if a DROP TABLE or TRUNCATE TABLE
1:501b8b0:         // has removed the old conglomerate
1:501b8b0: 
1:501b8b0:         container = open_conglom.getContainer();
1:501b8b0: 
1:501b8b0:         if ( container != null )
1:501b8b0:         {
1:501b8b0:             container.setEstimatedRowCount(
1:eac0369:                 count, /* unused flag */ 0);
1:501b8b0:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods implementing ConglomerateController:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:501b8b0
/////////////////////////////////////////////////////////////////////////
1:         // the container could still be null if a DROP TABLE or TRUNCATE TABLE
1:         // has removed the old conglomerate
1: 
1:         container = open_conglom.getContainer();
1: 
1:         if ( container != null )
1:         {
1:             container.setEstimatedRowCount(
1:         }
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:b22462c
/////////////////////////////////////////////////////////////////////////
1: abstract class GenericController 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.conglomerate.GenericController
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.conglomerate;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.RowUtil;
1: import org.apache.derby.iapi.store.access.SpaceInfo;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: 
1: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import java.util.Properties; 
1: 
1: 
1: /**
1: **/
1: 
0: public abstract class GenericController 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1:     protected OpenConglomerate    open_conglom;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1:     protected void getRowPositionFromRowLocation(
1:     RowLocation row_loc,
1:     RowPosition pos)
1:         throws StandardException
1:     {
1:         // Not implemented in default conglomerate, needs to be overridden.
1:         throw StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE);
1:        
1:     }
1: 
1:     protected void queueDeletePostCommitWork(
1:     RowPosition pos)
1:         throws StandardException
1:     {
1:         // Not implemented in default conglomerate, needs to be overridden.
1:         throw StandardException.newException(
1:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE);
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1:     public void init(
1:     OpenConglomerate    open_conglom)
1:         throws StandardException
1:     {
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(open_conglom != null);
1: 
1:         this.open_conglom = open_conglom;
1:     }
1: 
1:     public OpenConglomerate getOpenConglom()
1:     {
1:         return(open_conglom);
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Public Methods implementing ConglomerateController which just 
1:      *     delegate to OpenConglomerate:
1:      **************************************************************************
1:      */
1: 
1:     public void checkConsistency()
1: 		throws StandardException
1:     {
1:         open_conglom.checkConsistency();
1:     }
1: 
1:     public void debugConglomerate()
1: 		throws StandardException
1:     {
1:         open_conglom.debugConglomerate();
1:     }
1: 
1:     public void getTableProperties(Properties prop)
1: 		throws StandardException
1:     {
1:         open_conglom.getTableProperties(prop);
1:     }
1: 
1:     public Properties getInternalTablePropertySet(Properties prop)
1: 		throws StandardException
1:     {
1:         return(open_conglom.getInternalTablePropertySet(prop));
1:     }
1: 
1:     public SpaceInfo getSpaceInfo()
1:         throws StandardException
1:     {
1:         return(open_conglom.getSpaceInfo());
1:     }
1: 
1:     public void close()
1:         throws StandardException
1:     {
1:         if (open_conglom != null)
1:             open_conglom.close();
1:     }
1: 
1: 	public boolean isKeyed()
1: 	{
1: 		return(open_conglom.isKeyed());
1: 	}
1: 
1: 	public RowLocation newRowLocationTemplate()
1: 		throws StandardException
1: 	{
1:         if (open_conglom.isClosed())
1:             open_conglom.reopen();
1: 
1:         return(open_conglom.newRowLocationTemplate());
1: 	}
1: 
1:     /**
1:      * is the open btree table locked?
1:      **/
1:     public boolean isTableLocked()
1:     {
1:         return(open_conglom.isTableLocked());
1:     }
1: 
1:     /**
1:      * Get the total estimated number of rows in the container.
1:      * <p>
1:      * The number is a rough estimate and may be grossly off.  In general
1:      * the server will cache the row count and then occasionally write
1:      * the count unlogged to a backing store.  If the system happens to 
1:      * shutdown before the store gets a chance to update the row count it
1:      * may wander from reality.
1:      * <p>
1:      * This call is currently only supported on Heap conglomerates, it
1:      * will throw an exception if called on btree conglomerates.
1:      *
1: 	 * @return The total estimated number of rows in the conglomerate.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public long getEstimatedRowCount()
1: 		throws StandardException
1:     {
1:         if (open_conglom.isClosed())
1:             open_conglom.reopen();
1: 
1:         // Don't return 0 rows (return 1 instead), as this often leads the 
1:         // optimizer to produce plans which don't use indexes because of the 0 
1:         // row edge case.
1:         //
1:         // Eventually the plan is recompiled when rows are added, but we
1:         // have seen multiple customer cases of deadlocks and timeouts 
1:         // because of these 0 row based plans.  
1:         long row_count = open_conglom.getContainer().getEstimatedRowCount(0);
1: 
1:         return( (row_count == 0) ? 1 : row_count);
1:     }
1: 
1:     /**
1:      * Set the total estimated number of rows in the container.
1:      * <p>
1:      * Often, after a scan, the client of RawStore has a much better estimate
1:      * of the number of rows in the container than what store has.  For 
1:      * instance if we implement some sort of update statistics command, or
1:      * just after a create index a complete scan will have been done of the
1:      * table.  In this case this interface allows the client to set the
1:      * estimated row count for the container, and store will use that number
1:      * for all future references.
1:      * <p>
1:      * This call is currently only supported on Heap conglomerates, it
1:      * will throw an exception if called on btree conglomerates.
1:      *
1:      * @param count the estimated number of rows in the container.
1:      *
1: 	 * @return The total estimated number of rows in the conglomerate.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void setEstimatedRowCount(long count)
1: 		throws StandardException
1:     {
1:         ContainerHandle container = open_conglom.getContainer();
1: 
1:         if (container == null)
1:             open_conglom.reopen();
1: 
0:         open_conglom.getContainer().setEstimatedRowCount(
1:                 count, /* unused flag */ 0);
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods implementing ConglomerateController:
1:      **************************************************************************
1:      */
1: 
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.conglomerate
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.conglomerate;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
0: import org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: import org.apache.derby.iapi.store.access.ConglomerateController;
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.RowUtil;
0: import org.apache.derby.iapi.store.access.SpaceInfo;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: 
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.util.Properties; 
0: 
0: 
0: /**
0: **/
0: 
0: public abstract class GenericController 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0:     protected OpenConglomerate    open_conglom;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0:     protected void getRowPositionFromRowLocation(
0:     RowLocation row_loc,
0:     RowPosition pos)
0:         throws StandardException
0:     {
0:         // Not implemented in default conglomerate, needs to be overridden.
0:         throw StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE);
0:        
0:     }
0: 
0:     protected void queueDeletePostCommitWork(
0:     RowPosition pos)
0:         throws StandardException
0:     {
0:         // Not implemented in default conglomerate, needs to be overridden.
0:         throw StandardException.newException(
0:                 SQLState.HEAP_UNIMPLEMENTED_FEATURE);
0:     }
0: 
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0:     public void init(
0:     OpenConglomerate    open_conglom)
0:         throws StandardException
0:     {
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(open_conglom != null);
0: 
0:         this.open_conglom = open_conglom;
0:     }
0: 
0:     public OpenConglomerate getOpenConglom()
0:     {
0:         return(open_conglom);
0:     }
0: 
0: 
0:     /**************************************************************************
0:      * Public Methods implementing ConglomerateController which just 
0:      *     delegate to OpenConglomerate:
0:      **************************************************************************
0:      */
0: 
0:     public void checkConsistency()
0: 		throws StandardException
0:     {
0:         open_conglom.checkConsistency();
0:     }
0: 
0:     public void debugConglomerate()
0: 		throws StandardException
0:     {
0:         open_conglom.debugConglomerate();
0:     }
0: 
0:     public void getTableProperties(Properties prop)
0: 		throws StandardException
0:     {
0:         open_conglom.getTableProperties(prop);
0:     }
0: 
0:     public Properties getInternalTablePropertySet(Properties prop)
0: 		throws StandardException
0:     {
0:         return(open_conglom.getInternalTablePropertySet(prop));
0:     }
0: 
0:     public SpaceInfo getSpaceInfo()
0:         throws StandardException
0:     {
0:         return(open_conglom.getSpaceInfo());
0:     }
0: 
0:     public void close()
0:         throws StandardException
0:     {
0:         if (open_conglom != null)
0:             open_conglom.close();
0:     }
0: 
0: 	public boolean isKeyed()
0: 	{
0: 		return(open_conglom.isKeyed());
0: 	}
0: 
0: 	public RowLocation newRowLocationTemplate()
0: 		throws StandardException
0: 	{
0:         if (open_conglom.isClosed())
0:             open_conglom.reopen();
0: 
0:         return(open_conglom.newRowLocationTemplate());
0: 	}
0: 
0:     /**
0:      * is the open btree table locked?
0:      **/
0:     public boolean isTableLocked()
0:     {
0:         return(open_conglom.isTableLocked());
0:     }
0: 
0:     /**
0:      * Get the total estimated number of rows in the container.
0:      * <p>
0:      * The number is a rough estimate and may be grossly off.  In general
0:      * the server will cache the row count and then occasionally write
0:      * the count unlogged to a backing store.  If the system happens to 
0:      * shutdown before the store gets a chance to update the row count it
0:      * may wander from reality.
0:      * <p>
0:      * This call is currently only supported on Heap conglomerates, it
0:      * will throw an exception if called on btree conglomerates.
0:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public long getEstimatedRowCount()
0: 		throws StandardException
0:     {
0:         if (open_conglom.isClosed())
0:             open_conglom.reopen();
0: 
0:         // Don't return 0 rows (return 1 instead), as this often leads the 
0:         // optimizer to produce plans which don't use indexes because of the 0 
0:         // row edge case.
0:         //
0:         // Eventually the plan is recompiled when rows are added, but we
0:         // have seen multiple customer cases of deadlocks and timeouts 
0:         // because of these 0 row based plans.  
0:         long row_count = open_conglom.getContainer().getEstimatedRowCount(0);
0: 
0:         return( (row_count == 0) ? 1 : row_count);
0:     }
0: 
0:     /**
0:      * Set the total estimated number of rows in the container.
0:      * <p>
0:      * Often, after a scan, the client of RawStore has a much better estimate
0:      * of the number of rows in the container than what store has.  For 
0:      * instance if we implement some sort of update statistics command, or
0:      * just after a create index a complete scan will have been done of the
0:      * table.  In this case this interface allows the client to set the
0:      * estimated row count for the container, and store will use that number
0:      * for all future references.
0:      * <p>
0:      * This call is currently only supported on Heap conglomerates, it
0:      * will throw an exception if called on btree conglomerates.
0:      *
0:      * @param count the estimated number of rows in the container.
0:      *
0: 	 * @return The total estimated number of rows in the conglomerate.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void setEstimatedRowCount(long count)
0: 		throws StandardException
0:     {
0:         ContainerHandle container = open_conglom.getContainer();
0: 
0:         if (container == null)
0:             open_conglom.reopen();
0: 
0:         open_conglom.getContainer().setEstimatedRowCount(
0:                 count, /* unused flag */ 0);
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods implementing ConglomerateController:
0:      **************************************************************************
0:      */
0: 
0: }
============================================================================