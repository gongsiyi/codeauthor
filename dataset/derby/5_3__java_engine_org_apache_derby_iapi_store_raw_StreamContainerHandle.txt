1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.raw.StreamContainerHandle
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.raw;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A Stream Container handle
1:eac0369: */
1:eac0369: 
1:eac0369: public interface StreamContainerHandle {
1:eac0369: 
1:eac0369: 	public static final int TEMPORARY_SEGMENT = -1;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my identifier.
1:eac0369: 	*/
1:eac0369: 	public ContainerKey getId();
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Request the system properties associated with a container. 
1:eac0369:      * <p>
1:eac0369:      * Request the value of properties that are associated with a stream table.
1:eac0369: 	 * The following properties can be requested:
1:eac0369:      *     derby.storage.streamFileBufferSize 
1:eac0369:      * <p>
1:eac0369:      * To get the value of a particular property add it to the property list,
1:eac0369:      * and on return the value of the property will be set to it's current 
1:eac0369:      * value.  For example:
1:eac0369:      *
1:eac0369:      * get_prop(ConglomerateController cc)
1:eac0369:      * {
1:eac0369:      *     Properties prop = new Properties();
1:eac0369:      *     prop.put("derby.storage.streamFileBufferSize", "");
1:eac0369:      *     cc.getTableProperties(prop);
1:eac0369:      *
1:eac0369:      *     System.out.println(
1:eac0369:      *         "table's buffer size = " + 
1:eac0369:      *         prop.getProperty("derby.storage.streamFileBufferSize");
1:eac0369:      * }
1:eac0369:      *
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     void getContainerProperties(Properties prop)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Fetch the next record.
1:eac0369: 		Fills in the Storable columns within the passed in row if
1:eac0369: 		row is not null, otherwise the record is not fetched.
1:eac0369: 		If the row.length is less than the number of fields in the row,
1:eac0369: 		then, will fill the row, and ignore the rest of the row.
1:eac0369: 		<BR>
1:eac0369: 		When no more row is found, then false is returned.
1:eac0369: 
1:eac0369: 		<P>
1:eac0369: 		<B>Locking Policy</B>
1:eac0369: 		<BR>
1:eac0369: 		No locks.
1:eac0369: 
1:eac0369: 		@param row Row to be filled in with information from the record.
1:eac0369: 
1:3fd26f3: 		@exception StandardException	Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	boolean fetchNext(DataValueDescriptor[] row) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Close me. After using this method the caller must throw away the
1:eac0369: 		reference to the Container object, e.g.
1:eac0369: 		<PRE>
1:eac0369: 			ref.close();
1:eac0369: 			ref = null;
1:eac0369: 		</PRE>
1:eac0369: 		<BR>
1:eac0369: 		The container will be closed automatically at the commit or abort
1:eac0369: 		of the transaction if this method is not called explictly.
1:eac0369: 	*/
1:eac0369: 	public void close();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		remove the stream container
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy		
1:eac0369: 	 */
1:eac0369: 	public void removeContainer() throws StandardException;
1:eac0369: }
============================================================================
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy		
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.raw.StreamContainerHandle
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.raw;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 	A Stream Container handle
1: */
1: 
1: public interface StreamContainerHandle {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
1: 
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	public static final int TEMPORARY_SEGMENT = -1;
1: 
1: 	/**
1: 		Return my identifier.
1: 	*/
1: 	public ContainerKey getId();
1: 
1:     /**
1:      * Request the system properties associated with a container. 
1:      * <p>
1:      * Request the value of properties that are associated with a stream table.
1: 	 * The following properties can be requested:
1:      *     derby.storage.streamFileBufferSize 
1:      * <p>
1:      * To get the value of a particular property add it to the property list,
1:      * and on return the value of the property will be set to it's current 
1:      * value.  For example:
1:      *
1:      * get_prop(ConglomerateController cc)
1:      * {
1:      *     Properties prop = new Properties();
1:      *     prop.put("derby.storage.streamFileBufferSize", "");
1:      *     cc.getTableProperties(prop);
1:      *
1:      *     System.out.println(
1:      *         "table's buffer size = " + 
1:      *         prop.getProperty("derby.storage.streamFileBufferSize");
1:      * }
1:      *
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     void getContainerProperties(Properties prop)
1: 		throws StandardException;
1: 
1: 	/**
1: 		Fetch the next record.
1: 		Fills in the Storable columns within the passed in row if
1: 		row is not null, otherwise the record is not fetched.
1: 		If the row.length is less than the number of fields in the row,
1: 		then, will fill the row, and ignore the rest of the row.
1: 		<BR>
1: 		When no more row is found, then false is returned.
1: 
1: 		<P>
1: 		<B>Locking Policy</B>
1: 		<BR>
1: 		No locks.
1: 
1: 		@param row Row to be filled in with information from the record.
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 	*/
1: 	boolean fetchNext(DataValueDescriptor[] row) throws StandardException;
1: 
1: 	/**
1: 		Close me. After using this method the caller must throw away the
1: 		reference to the Container object, e.g.
1: 		<PRE>
1: 			ref.close();
1: 			ref = null;
1: 		</PRE>
1: 		<BR>
1: 		The container will be closed automatically at the commit or abort
1: 		of the transaction if this method is not called explictly.
1: 	*/
1: 	public void close();
1: 
1: 	/**
1: 		remove the stream container
1: 
0: 		@exception StandardException Standard Cloudscape error policy		
1: 	 */
1: 	public void removeContainer() throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.raw
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.raw;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 	A Stream Container handle
0: */
0: 
0: public interface StreamContainerHandle {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0: 
0:     public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	public static final int TEMPORARY_SEGMENT = -1;
0: 
0: 	/**
0: 		Return my identifier.
0: 	*/
0: 	public ContainerKey getId();
0: 
0:     /**
0:      * Request the system properties associated with a container. 
0:      * <p>
0:      * Request the value of properties that are associated with a stream table.
0: 	 * The following properties can be requested:
0:      *     derby.storage.streamFileBufferSize 
0:      * <p>
0:      * To get the value of a particular property add it to the property list,
0:      * and on return the value of the property will be set to it's current 
0:      * value.  For example:
0:      *
0:      * get_prop(ConglomerateController cc)
0:      * {
0:      *     Properties prop = new Properties();
0:      *     prop.put("derby.storage.streamFileBufferSize", "");
0:      *     cc.getTableProperties(prop);
0:      *
0:      *     System.out.println(
0:      *         "table's buffer size = " + 
0:      *         prop.getProperty("derby.storage.streamFileBufferSize");
0:      * }
0:      *
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     void getContainerProperties(Properties prop)
0: 		throws StandardException;
0: 
0: 	/**
0: 		Fetch the next record.
0: 		Fills in the Storable columns within the passed in row if
0: 		row is not null, otherwise the record is not fetched.
0: 		If the row.length is less than the number of fields in the row,
0: 		then, will fill the row, and ignore the rest of the row.
0: 		<BR>
0: 		When no more row is found, then false is returned.
0: 
0: 		<P>
0: 		<B>Locking Policy</B>
0: 		<BR>
0: 		No locks.
0: 
0: 		@param row Row to be filled in with information from the record.
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 	*/
0: 	boolean fetchNext(DataValueDescriptor[] row) throws StandardException;
0: 
0: 	/**
0: 		Close me. After using this method the caller must throw away the
0: 		reference to the Container object, e.g.
0: 		<PRE>
0: 			ref.close();
0: 			ref = null;
0: 		</PRE>
0: 		<BR>
0: 		The container will be closed automatically at the commit or abort
0: 		of the transaction if this method is not called explictly.
0: 	*/
0: 	public void close();
0: 
0: 	/**
0: 		remove the stream container
0: 
0: 		@exception StandardException Standard Cloudscape error policy		
0: 	 */
0: 	public void removeContainer() throws StandardException;
0: }
============================================================================