1:c043274: /*
1:c043274: 
1:c043274:  Derby - Class org.apache.derbyTesting.system.nstest.NsTestPrintStream
1:c043274: 
1:c043274:  Licensed to the Apache Software Foundation (ASF) under one or more
1:c043274:  contributor license agreements.  See the NOTICE file distributed with
1:c043274:  this work for additional information regarding copyright ownership.
1:c043274:  The ASF licenses this file to You under the Apache License, Version 2.0
1:c043274:  (the "License"); you may not use this file except in compliance with
1:c043274:  the License.  You may obtain a copy of the License at
1:c043274: 
1:c043274:  http://www.apache.org/licenses/LICENSE-2.0
1:c043274: 
1:c043274:  Unless required by applicable law or agreed to in writing, software
1:c043274:  distributed under the License is distributed on an "AS IS" BASIS,
1:c043274:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c043274:  See the License for the specific language governing permissions and
1:c043274:  limitations under the License.
1:c043274: 
1:c043274:  */
1:c043274: package org.apache.derbyTesting.system.nstest;
1:c043274: 
1:c043274: import java.io.PrintStream;
1:c043274: import java.util.Locale;
1:c043274: 
1:c043274: /**
1:c043274:  * <p>
1:c043274:  * A stream whose output can be throttled.
1:c043274:  * </p>
1:c043274:  */
1:c043274: public  class   NsTestPrintStream   extends PrintStream
1:c043274: {
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // CONSTANTS
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // STATE
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     private boolean _chatty;
1:c043274: 
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // CONSTRUCTOR
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     /** Construct a quiet or chatty print stream */
1:c043274:     public  NsTestPrintStream( PrintStream wrappedStream, boolean chatty )
1:c043274:     {
1:c043274:         super( wrappedStream );
1:c043274:         _chatty = chatty;
1:c043274:     }
1:c043274: 
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274:     //
1:c043274:     // OVERRIDDEN BEHAVIOR
1:c043274:     //
1:c043274:     ///////////////////////////////////////////////////////////////////////////////////
1:c043274: 
1:c043274:     public PrintStream append( char c )
1:c043274:     {
1:c043274:         if ( _chatty ) { super.append( c ); }
1:c043274:         return this;
1:c043274:     }
1:c043274:     public PrintStream append( CharSequence csq )
1:c043274:     {
1:c043274:         if ( _chatty ) { super.append( csq ); }
1:c043274:         return this;
1:c043274:     }
1:c043274:     public PrintStream append( CharSequence csq, int start, int end )
1:c043274:     {
1:c043274:         if ( _chatty ) { super.append( csq, start, end ); }
1:c043274:         return this;
1:c043274:     }
1:c043274:     public boolean checkError() { return super.checkError(); }
1:c043274:     protected void clearError() { super.clearError(); }
1:c043274:     public void close() { super.close(); }
1:c043274:     public void flush() { super.flush(); }
1:c043274:     public void print( boolean b )   { if ( _chatty ) { super.print( b ); } }
1:c043274:     public void print( char c )   { if ( _chatty ) { super.print( c ); } }
1:c043274:     public void print( int i )   { if ( _chatty ) { super.print( i ); } }
1:c043274:     public void print( long l )   { if ( _chatty ) { super.print( l ); } }
1:c043274:     public void print( float f )   { if ( _chatty ) { super.print( f ); } }
1:c043274:     public void print( double d )   { if ( _chatty ) { super.print( d ); } }
1:c043274:     public void print( char[] s )   { if ( _chatty ) { super.print( s ); } }
1:c043274:     public void print( String s )   { if ( _chatty ) { super.print( s ); } }
1:c043274:     public void print( Object obj )   { if ( _chatty ) { super.print( obj ); } }
1:c043274:     public void println()   { if ( _chatty ) { super.println(); } }
1:c043274:     public void println( boolean x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( char x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( int x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( long x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( float x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( double x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( char[] x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( String x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public void println( Object x )   { if ( _chatty ) { super.println( x ); } }
1:c043274:     public PrintStream printf( String format, Object... args )
1:c043274:     {
1:c043274:         if ( _chatty ) { super.printf( format, args ); }
1:c043274:         return this;
1:c043274:     }
1:c043274:     public PrintStream printf( Locale l, String format, Object... args )
1:c043274:     {
1:c043274:         if ( _chatty ) { super.printf( l, format, args ); }
1:c043274:         return this;
1:c043274:     }
1:c043274:     public PrintStream format( String format, Object... args )
1:c043274:     {
1:c043274:         if ( _chatty ) { super.format( format, args ); }
1:c043274:         return this;
1:c043274:     }
1:c043274:     public PrintStream format( Locale l, String format, Object... args )
1:c043274:     {
1:c043274:         if ( _chatty ) { super.format( l, format, args ); }
1:c043274:         return this;
1:c043274:     }
1:c043274:     public void write( byte[] buf, int off, int len )   { if ( _chatty ) { super.write( buf, off, len ); } }
1:c043274:     public void write( int b )  { if ( _chatty ) { super.write( b ); } }
1:c043274: 
1:c043274: }
1:c043274: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c043274
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derbyTesting.system.nstest.NsTestPrintStream
1: 
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.system.nstest;
1: 
1: import java.io.PrintStream;
1: import java.util.Locale;
1: 
1: /**
1:  * <p>
1:  * A stream whose output can be throttled.
1:  * </p>
1:  */
1: public  class   NsTestPrintStream   extends PrintStream
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private boolean _chatty;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Construct a quiet or chatty print stream */
1:     public  NsTestPrintStream( PrintStream wrappedStream, boolean chatty )
1:     {
1:         super( wrappedStream );
1:         _chatty = chatty;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OVERRIDDEN BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public PrintStream append( char c )
1:     {
1:         if ( _chatty ) { super.append( c ); }
1:         return this;
1:     }
1:     public PrintStream append( CharSequence csq )
1:     {
1:         if ( _chatty ) { super.append( csq ); }
1:         return this;
1:     }
1:     public PrintStream append( CharSequence csq, int start, int end )
1:     {
1:         if ( _chatty ) { super.append( csq, start, end ); }
1:         return this;
1:     }
1:     public boolean checkError() { return super.checkError(); }
1:     protected void clearError() { super.clearError(); }
1:     public void close() { super.close(); }
1:     public void flush() { super.flush(); }
1:     public void print( boolean b )   { if ( _chatty ) { super.print( b ); } }
1:     public void print( char c )   { if ( _chatty ) { super.print( c ); } }
1:     public void print( int i )   { if ( _chatty ) { super.print( i ); } }
1:     public void print( long l )   { if ( _chatty ) { super.print( l ); } }
1:     public void print( float f )   { if ( _chatty ) { super.print( f ); } }
1:     public void print( double d )   { if ( _chatty ) { super.print( d ); } }
1:     public void print( char[] s )   { if ( _chatty ) { super.print( s ); } }
1:     public void print( String s )   { if ( _chatty ) { super.print( s ); } }
1:     public void print( Object obj )   { if ( _chatty ) { super.print( obj ); } }
1:     public void println()   { if ( _chatty ) { super.println(); } }
1:     public void println( boolean x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( char x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( int x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( long x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( float x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( double x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( char[] x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( String x )   { if ( _chatty ) { super.println( x ); } }
1:     public void println( Object x )   { if ( _chatty ) { super.println( x ); } }
1:     public PrintStream printf( String format, Object... args )
1:     {
1:         if ( _chatty ) { super.printf( format, args ); }
1:         return this;
1:     }
1:     public PrintStream printf( Locale l, String format, Object... args )
1:     {
1:         if ( _chatty ) { super.printf( l, format, args ); }
1:         return this;
1:     }
1:     public PrintStream format( String format, Object... args )
1:     {
1:         if ( _chatty ) { super.format( format, args ); }
1:         return this;
1:     }
1:     public PrintStream format( Locale l, String format, Object... args )
1:     {
1:         if ( _chatty ) { super.format( l, format, args ); }
1:         return this;
1:     }
1:     public void write( byte[] buf, int off, int len )   { if ( _chatty ) { super.write( buf, off, len ); } }
1:     public void write( int b )  { if ( _chatty ) { super.write( b ); } }
1: 
1: }
1: 
============================================================================