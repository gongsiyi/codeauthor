1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/FrameworkUtil.java,v 1.10 2007/02/21 16:49:05 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2005, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.lang.reflect.*;
1:a8b6921: import java.security.AccessController;
1:a8b6921: import java.security.PrivilegedAction;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * Framework Utility class.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * This class contains utility methods which access Framework functions that may
1:a8b6921:  * be useful to bundles.
1:a8b6921:  * 
1:a8b6921:  * @since 1.3
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.10 $
1:a8b6921:  */
1:a8b6921: public class FrameworkUtil {
1:a8b6921: 	/*
1:a8b6921: 	 * NOTE: A framework implementor may also choose to replace this class in
1:a8b6921: 	 * their distribution with a class that directly interfaces with the
1:a8b6921: 	 * framework implementation.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	/*
1:a8b6921: 	 * This class will load the FrameworkUtil class in the package named by the
1:a8b6921: 	 * org.osgi.vendor.framework package. For each instance of this class, an
1:a8b6921: 	 * instance of the vendor FrameworkUtil class will be created and this class
1:a8b6921: 	 * will delegate method calls to the vendor FrameworkUtil instance.
1:a8b6921: 	 */
1:a8b6921: 
1:7051698: 	private static class ImplHolder implements PrivilegedAction<Method> {
1:a8b6921: 		private static final String	packageProperty	= "org.osgi.vendor.framework";
1:a8b6921: 		
1:a8b6921: 		/*
1:a8b6921: 		 * This is the delegate method used by createFilter.
1:a8b6921: 		 */
1:a8b6921: 		static final Method	createFilter;
1:a8b6921: 		
1:a8b6921: 		static {
1:7051698: 			createFilter = AccessController.doPrivileged(new ImplHolder());
1:a8b6921: 		}
1:a8b6921: 		
1:a8b6921: 		private ImplHolder() {
1:a8b6921: 		}
1:a8b6921: 
1:7051698: 		public Method run() {
1:a8b6921: 			String packageName = System
1:a8b6921: 			.getProperty(packageProperty);
1:a8b6921: 			if (packageName == null) {
1:a8b6921: 				throw new NoClassDefFoundError(packageProperty
1:a8b6921: 						+ " property not set");
1:a8b6921: 			}
1:a8b6921: 			
1:7051698: 			Class<?> delegateClass;
1:a8b6921: 			try {
1:a8b6921: 				delegateClass = Class.forName(packageName
1:a8b6921: 						+ ".FrameworkUtil");
1:a8b6921: 			}
1:a8b6921: 			catch (ClassNotFoundException e) {
1:a8b6921: 				throw new NoClassDefFoundError(e.toString());
1:a8b6921: 			}
1:a8b6921: 			
1:a8b6921: 			Method result;
1:a8b6921: 			try {
1:a8b6921: 				result = delegateClass.getMethod("createFilter",
1:a8b6921: 						new Class[] {String.class});
1:a8b6921: 			}
1:a8b6921: 			catch (NoSuchMethodException e) {
1:a8b6921: 				throw new NoSuchMethodError(e.toString());
1:a8b6921: 			}
1:a8b6921: 			
1:a8b6921: 			if (!Modifier.isStatic(result.getModifiers())) {
1:a8b6921: 				throw new NoSuchMethodError(
1:a8b6921: 				"createFilter method must be static");
1:a8b6921: 			}
1:a8b6921: 			
1:a8b6921: 			return result;
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	
1:a8b6921: 	/**
1:a8b6921: 	 * FrameworkUtil objects may not be constructed. 
1:a8b6921: 	 */
1:a8b6921: 	private FrameworkUtil() {}
1:a8b6921: 	
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a <code>Filter</code> object. This <code>Filter</code> object
1:a8b6921: 	 * may be used to match a <code>ServiceReference</code> object or a
1:a8b6921: 	 * <code>Dictionary</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * If the filter cannot be parsed, an {@link InvalidSyntaxException} will be
1:a8b6921: 	 * thrown with a human readable message where the filter became unparsable.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param filter The filter string.
1:a8b6921: 	 * @return A <code>Filter</code> object encapsulating the filter string.
1:a8b6921: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1:a8b6921: 	 *         invalid filter string that cannot be parsed.
1:a8b6921: 	 * @throws NullPointerException If <code>filter</code> is null.
1:a8b6921: 	 * 
1:a8b6921: 	 * @see Filter
1:a8b6921: 	 */
1:a8b6921: 	public static Filter createFilter(String filter)
1:a8b6921: 			throws InvalidSyntaxException {
1:a8b6921: 		try {
1:a8b6921: 			try {
1:a8b6921: 				return (Filter) ImplHolder.createFilter
1:a8b6921: 						.invoke(null, new Object[] {filter});
1:a8b6921: 			}
1:a8b6921: 			catch (InvocationTargetException e) {
1:a8b6921: 				throw e.getTargetException();
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 		catch (InvalidSyntaxException e) {
1:a8b6921: 			throw e;
1:a8b6921: 		}
1:a8b6921: 		catch (Error e) {
1:a8b6921: 			throw e;
1:a8b6921: 		}
1:a8b6921: 		catch (RuntimeException e) {
1:a8b6921: 			throw e;
1:a8b6921: 		}
1:a8b6921: 		catch (Throwable e) {
1:a8b6921: 			throw new RuntimeException(e.toString());
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7051698
/////////////////////////////////////////////////////////////////////////
1: 	private static class ImplHolder implements PrivilegedAction<Method> {
/////////////////////////////////////////////////////////////////////////
1: 			createFilter = AccessController.doPrivileged(new ImplHolder());
1: 		public Method run() {
/////////////////////////////////////////////////////////////////////////
1: 			Class<?> delegateClass;
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/FrameworkUtil.java,v 1.10 2007/02/21 16:49:05 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2005, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.lang.reflect.*;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: /**
1:  * Framework Utility class.
1:  * 
1:  * <p>
1:  * This class contains utility methods which access Framework functions that may
1:  * be useful to bundles.
1:  * 
1:  * @since 1.3
1:  * @ThreadSafe
1:  * @version $Revision: 1.10 $
1:  */
1: public class FrameworkUtil {
1: 	/*
1: 	 * NOTE: A framework implementor may also choose to replace this class in
1: 	 * their distribution with a class that directly interfaces with the
1: 	 * framework implementation.
1: 	 */
1: 
1: 	/*
1: 	 * This class will load the FrameworkUtil class in the package named by the
1: 	 * org.osgi.vendor.framework package. For each instance of this class, an
1: 	 * instance of the vendor FrameworkUtil class will be created and this class
1: 	 * will delegate method calls to the vendor FrameworkUtil instance.
1: 	 */
1: 
0: 	private static class ImplHolder implements PrivilegedAction {
1: 		private static final String	packageProperty	= "org.osgi.vendor.framework";
1: 		
1: 		/*
1: 		 * This is the delegate method used by createFilter.
1: 		 */
1: 		static final Method	createFilter;
1: 		
1: 		static {
0: 			createFilter = (Method) AccessController.doPrivileged(new ImplHolder());
1: 		}
1: 		
1: 		private ImplHolder() {
1: 		}
1: 
0: 		public Object run() {
1: 			String packageName = System
1: 			.getProperty(packageProperty);
1: 			if (packageName == null) {
1: 				throw new NoClassDefFoundError(packageProperty
1: 						+ " property not set");
1: 			}
1: 			
0: 			Class delegateClass;
1: 			try {
1: 				delegateClass = Class.forName(packageName
1: 						+ ".FrameworkUtil");
1: 			}
1: 			catch (ClassNotFoundException e) {
1: 				throw new NoClassDefFoundError(e.toString());
1: 			}
1: 			
1: 			Method result;
1: 			try {
1: 				result = delegateClass.getMethod("createFilter",
1: 						new Class[] {String.class});
1: 			}
1: 			catch (NoSuchMethodException e) {
1: 				throw new NoSuchMethodError(e.toString());
1: 			}
1: 			
1: 			if (!Modifier.isStatic(result.getModifiers())) {
1: 				throw new NoSuchMethodError(
1: 				"createFilter method must be static");
1: 			}
1: 			
1: 			return result;
1: 		}
1: 	}
1: 
1: 	
1: 	/**
1: 	 * FrameworkUtil objects may not be constructed. 
1: 	 */
1: 	private FrameworkUtil() {}
1: 	
1: 	/**
1: 	 * Creates a <code>Filter</code> object. This <code>Filter</code> object
1: 	 * may be used to match a <code>ServiceReference</code> object or a
1: 	 * <code>Dictionary</code> object.
1: 	 * 
1: 	 * <p>
1: 	 * If the filter cannot be parsed, an {@link InvalidSyntaxException} will be
1: 	 * thrown with a human readable message where the filter became unparsable.
1: 	 * 
1: 	 * @param filter The filter string.
1: 	 * @return A <code>Filter</code> object encapsulating the filter string.
1: 	 * @throws InvalidSyntaxException If <code>filter</code> contains an
1: 	 *         invalid filter string that cannot be parsed.
1: 	 * @throws NullPointerException If <code>filter</code> is null.
1: 	 * 
1: 	 * @see Filter
1: 	 */
1: 	public static Filter createFilter(String filter)
1: 			throws InvalidSyntaxException {
1: 		try {
1: 			try {
1: 				return (Filter) ImplHolder.createFilter
1: 						.invoke(null, new Object[] {filter});
1: 			}
1: 			catch (InvocationTargetException e) {
1: 				throw e.getTargetException();
1: 			}
1: 		}
1: 		catch (InvalidSyntaxException e) {
1: 			throw e;
1: 		}
1: 		catch (Error e) {
1: 			throw e;
1: 		}
1: 		catch (RuntimeException e) {
1: 			throw e;
1: 		}
1: 		catch (Throwable e) {
1: 			throw new RuntimeException(e.toString());
1: 		}
1: 	}
1: }
============================================================================