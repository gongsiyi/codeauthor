2:61bcf0e: /**
1:61bcf0e:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest
2:61bcf0e:  *  
1:61bcf0e:  * Licensed to the Apache Software Foundation (ASF) under one
1:61bcf0e:  * or more contributor license agreements.  See the NOTICE file
1:61bcf0e:  * distributed with this work for additional information
1:61bcf0e:  * regarding copyright ownership.  The ASF licenses this file
1:61bcf0e:  * to you under the Apache License, Version 2.0 (the
1:61bcf0e:  * "License"); you may not use this file except in compliance
1:61bcf0e:  * with the License.  You may obtain a copy of the License at
1:61bcf0e:  *
1:61bcf0e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:61bcf0e:  *
1:61bcf0e:  * Unless required by applicable law or agreed to in writing,
1:61bcf0e:  * software distributed under the License is distributed on an
1:61bcf0e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:61bcf0e:  * KIND, either express or implied.  See the License for the
1:61bcf0e:  * specific language governing permissions and limitations
1:61bcf0e:  * under the License.
1:4d83c52:  */
1:61bcf0e: package org.apache.derbyTesting.functionTests.tests.lang;
1:9584a61: 
1:61bcf0e: import java.sql.Connection;
1:61bcf0e: import java.sql.PreparedStatement;
1:61bcf0e: import java.sql.ResultSet;
1:61bcf0e: import java.sql.SQLException;
1:61bcf0e: import java.sql.SQLWarning;
1:61bcf0e: import java.sql.Statement;
1:61bcf0e: import java.util.Properties;
1:61bcf0e: import junit.framework.Test;
1:61bcf0e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:61bcf0e: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:4d83c52: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:61bcf0e: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
6:61bcf0e: 
1:61bcf0e: /**
1:61bcf0e:  * This tests updateable cursor using index, Beetle entry 3865.
1:61bcf0e:  * 
1:61bcf0e:  * Not done in ij since we need to do many "next" and "update" to be able to
1:61bcf0e:  * excercise the code of creating temp conglomerate for virtual memory heap. We
1:61bcf0e:  * need at minimum 200 rows in table, if "maxMemoryPerTable" property is set to
1:91f376c:  * 1 (KB). This includes 100 rows to fill the in-memory portion of the hash
1:91f376c:  * table, and another 100 rows to fill an in-memory heap that was used until
1:91f376c:  * DERBY-5425 removed it.
5:61bcf0e:  */
1:61bcf0e: public class UpdateCursorTest extends BaseJDBCTestCase {
1:61bcf0e: 
1:61bcf0e: 	private static final int SIZE_OF_T1 = 250;
1:61bcf0e: 	private static final String EXPECTED_SQL_CODE = "02000";
1:61bcf0e: 
1:61bcf0e: 	/**
1:61bcf0e: 	 * Basic constructor.
1:61bcf0e: 	 */
1:61bcf0e: 	public UpdateCursorTest(String name) {
1:61bcf0e: 		super(name);
4:61bcf0e: 	}
1:61bcf0e: 
1:61bcf0e: 	/**
1:61bcf0e: 	 * Sets the auto commit to false.
1:9584a61: 	 */
1:61bcf0e: 	protected void initializeConnection(Connection conn) throws SQLException {
1:61bcf0e: 		conn.setAutoCommit(false);
1:61bcf0e: 	}
1:61bcf0e: 
1:61bcf0e: 	/**
1:61bcf0e: 	 * Returns the implemented tests.
1:9584a61: 	 * 
1:61bcf0e: 	 * @return An instance of <code>Test</code> with the implemented tests to
1:61bcf0e: 	 *         run.
1:61bcf0e: 	 */
1:61bcf0e: 	public static Test suite() {
1:61bcf0e: 		Properties props = new Properties();
1:61bcf0e: 
1:61bcf0e: 		props.setProperty("derby.language.maxMemoryPerTable", "1");
1:4d83c52: 		return new DatabasePropertyTestSetup(
1:1ae02c9:             new SystemPropertyTestSetup(
1:1ae02c9:                 new CleanDatabaseTestSetup(
1:1ae02c9:                     new BaseTestSuite(
1:1ae02c9:                         UpdateCursorTest.class, "UpdateCursorTest")) {
1:61bcf0e: 
1:61bcf0e: 			/**
1:61bcf0e: 			 * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1:61bcf0e: 			 */
1:61bcf0e: 			protected void decorateSQL(Statement s) throws SQLException {
1:61bcf0e: 				StringBuffer sb = new StringBuffer(1000);
1:61bcf0e: 				String largeString;
1:61bcf0e: 				PreparedStatement pstmt;
1:61bcf0e: 
1:61bcf0e: 				assertUpdateCount(s, 0, "create table T1 ("
1:61bcf0e: 						+ "  c1	int," + "  c2	char(50)," + "  c3	int," + "  c4   char(50),"
1:61bcf0e: 						+ "  c5   int," + "  c6   varchar(1000))"); 		
1:61bcf0e: 				assertUpdateCount(s, 0, "create index I11 on T1(c3, c1, c5)"); 	
1:61bcf0e: 				assertUpdateCount(s, 0, "create table T2("
1:61bcf0e: 						+ "  c1 	int)"); 		
1:61bcf0e: 				assertUpdateCount(s, 0, "create table T3("
1:61bcf0e: 						+ "  c1	char(20) not null primary key)"); 		
1:61bcf0e: 				assertUpdateCount(s, 0, "create table T4("
1:61bcf0e: 						+ "  c1 	char(20) references T3(c1) on delete cascade)"); 		
1:61bcf0e: 
1:61bcf0e: 				/* fill the newly created tables */
1:61bcf0e: 				for (int i = 0; i < 1000; i++) {
1:61bcf0e: 					sb.append('a');
1:61bcf0e: 				}
1:61bcf0e: 
1:61bcf0e: 				pstmt = s.getConnection().prepareStatement("insert into T1 values (?, ?, ?, ?, ?, ?), " +
1:61bcf0e: 						"(?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), "
1:61bcf0e: 						+ "(?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?)");
1:61bcf0e: 
1:61bcf0e: 				largeString = new String(sb);
1:61bcf0e: 				for (int i = 246; i > 0; i = i - 5) {
1:61bcf0e: 					int k = 0;
1:61bcf0e: 
1:61bcf0e: 					for (int j = 0; j < 5; j++) {
1:61bcf0e: 						pstmt.setInt(1 + k, i + (4 - j));
1:39b3237: 						pstmt.setString(2 + k, Integer.toString(i));
1:61bcf0e: 						pstmt.setInt(3 + k, i + j);
1:39b3237: 						pstmt.setString(4 + k, Integer.toString(i));
1:61bcf0e: 						pstmt.setInt(5 + k, i);
1:61bcf0e: 						pstmt.setString(6 + k, largeString);
1:61bcf0e: 
1:61bcf0e: 						k += 6;
1:61bcf0e: 					}
1:61bcf0e: 
1:61bcf0e: 					assertUpdateCount(pstmt, 5);
1:61bcf0e: 				}
1:61bcf0e: 				s.executeUpdate("insert into t2 values (1)");
1:61bcf0e: 				pstmt.close();
1:61bcf0e: 			}
1:9584a61: 
1:4d83c52: 		}, props), props, true);
1:61bcf0e: 	}
1:61bcf0e: 
1:4d83c52: 	/**
1:61bcf0e: 	 * Test the virtual memory heap.
1:61bcf0e: 	 * 
1:61bcf0e: 	 * @throws SQLException
1:4d83c52: 	 */
1:61bcf0e: 	public void testVirtualMemoryHeap() throws SQLException {
1:61bcf0e: 		PreparedStatement select = prepareStatement("select c1, c3 from t1 where c3 > 1 and c1 > 0 for update");
1:61bcf0e: 		Statement update = createStatement();
1:61bcf0e: 		String cursorName;
1:61bcf0e: 		ResultSet cursor;
1:61bcf0e: 		int expectedValue = 1;
1:61bcf0e: 
1:8a319fb: 		/* drop index and recreate it to be sure that it is ascending
1:8a319fb:                  * (other subtests may have changed it)
1:8a319fb:                  */
1:8a319fb: 		assertUpdateCount(update, 0, "drop index I11");
1:8a319fb: 		assertUpdateCount(update, 0, "create index I11 on T1 (c3, c1, c5)");
1:8a319fb: 
1:61bcf0e: 		cursor = select.executeQuery(); // cursor is now open
1:61bcf0e: 		cursorName = cursor.getCursorName();
1:61bcf0e: 
1:4d83c52: 		/* scan the entire table except the last row. */
1:61bcf0e: 		for (int i = 0; i < SIZE_OF_T1 - 1; i++) {	
1:91f376c:             // Expect the values to be returned in index order.
1:91f376c:             expectedValue++;
1:61bcf0e: 			
1:61bcf0e: 			assertEquals(cursor.next(), true);
1:61bcf0e: 			//System.out.println("Row " + i + ": "+cursor.getInt(1)+","+cursor.getInt(2)+": "+expectedValue);
1:61bcf0e: 			assertEquals("Virtual memory heap test failed! Got unexpected value.", expectedValue, cursor.getInt(2));
1:61bcf0e: 			update.execute("update t1 set c3 = c3 + 250 where current of " + cursorName);
1:61bcf0e: 		}
1:61bcf0e: 		assertFalse(
1:61bcf0e: 				"Update with virtual memory heap failed! Still got rows.",
1:61bcf0e: 				cursor.next());
1:61bcf0e: 
1:61bcf0e: 		cursor.close();
1:61bcf0e: 		update.close();
1:61bcf0e: 
1:4d83c52: 		/* see what we have in the table */
1:61bcf0e: 		select = prepareStatement("select c1, c3 from t1");
1:61bcf0e: 		cursor = select.executeQuery(); // cursor is now open
1:61bcf0e: 		for (int i = 0; i < SIZE_OF_T1; i++) {
1:61bcf0e: 			assertEquals(cursor.next(), true);
1:61bcf0e: 		}
1:61bcf0e: 		assertFalse(
1:61bcf0e: 				"Update with virtual memory heeap failed! Got more rows.",
1:61bcf0e: 				cursor.next());
1:61bcf0e: 
1:61bcf0e: 		select.close();
1:61bcf0e: 		cursor.close();
1:61bcf0e: 
1:61bcf0e: 		rollback();
1:61bcf0e: 	}
1:91f376c: 
1:91f376c: 	/**
1:61bcf0e: 	 * Tests non covering index.
1:61bcf0e: 	 * 
1:61bcf0e: 	 * @throws SQLException
1:61bcf0e: 	 */
1:61bcf0e: 	public void testNonCoveringIndex() throws SQLException {
1:61bcf0e: 		PreparedStatement select;
1:61bcf0e: 		Statement update;
1:61bcf0e: 		ResultSet cursor;
1:61bcf0e: 		String cursorName;
1:61bcf0e: 
1:61bcf0e: 		update = createStatement();
1:61bcf0e: 		select = prepareStatement("select c3, c2 from t1 where c3 > 125 and c1 > 0 for update");
1:61bcf0e: 		cursor = select.executeQuery(); // cursor is now open
1:61bcf0e: 		cursorName = cursor.getCursorName();
1:61bcf0e: 
1:61bcf0e: 		for (int i = 0; i < (SIZE_OF_T1 / 2); i++) {
1:61bcf0e: 			assertEquals(cursor.next(), true);
1:61bcf0e: 			update.execute("update t1 set c3 = c3 + 25 where current of " + cursorName);
1:61bcf0e: 		}
1:61bcf0e: 		assertFalse(
1:61bcf0e: 				"Update using noncovering index failed! Still got rows.",
1:61bcf0e: 				cursor.next());
1:61bcf0e: 
1:61bcf0e: 		cursor.close();
1:61bcf0e: 		select.close();
1:61bcf0e: 
2:61bcf0e: 		/* see what we have in the table */
1:61bcf0e: 		select = prepareStatement("select c1, c3 from t1");
1:61bcf0e: 		cursor = select.executeQuery(); // cursor is now open
1:61bcf0e: 		for (int i = 0; i < SIZE_OF_T1; i++) {
1:61bcf0e: 			assertEquals(cursor.next(), true);
1:61bcf0e: 		}
1:61bcf0e: 		assertFalse(
1:61bcf0e: 				"Update using noncovering index failed! Got more rows.", cursor
1:61bcf0e: 						.next());
1:61bcf0e: 
1:61bcf0e: 		select.close();
1:61bcf0e: 		cursor.close();
1:61bcf0e: 
1:61bcf0e: 		rollback();
1:61bcf0e: 	}
1:61bcf0e: 
1:61bcf0e: 	/**
1:61bcf0e: 	 * Tests descending index.
1:61bcf0e: 	 * 
1:61bcf0e: 	 * @throws SQLException
1:61bcf0e: 	 */
1:61bcf0e: 	public void testDescendingIndex() throws SQLException {
1:61bcf0e: 		PreparedStatement select;
1:61bcf0e: 		Statement update;
1:61bcf0e: 		ResultSet cursor;
1:61bcf0e: 
1:61bcf0e: 		update = createStatement();
1:61bcf0e: 
1:61bcf0e: 		/* drop index and recreate it */
1:61bcf0e: 		assertUpdateCount(update, 0, "drop index I11");
1:61bcf0e: 		assertUpdateCount(update, 0, "create index I11 on T1 (c3 desc, c1, c5 desc)");
1:61bcf0e: 		commit();
1:61bcf0e: 
1:61bcf0e: 		update = createStatement();
1:61bcf0e: 		select = prepareStatement("select c3, c1 from t1 where c3 > 125 and c1 > 0 for update");
1:61bcf0e: 		cursor = select.executeQuery(); // cursor is now open
1:61bcf0e: 
1:61bcf0e: 		for (int i = 0; i < (SIZE_OF_T1 / 2); i++) {
1:61bcf0e: 			assertEquals(cursor.next(), true);
1:61bcf0e: 			if ((i % 2) == 0) {
1:61bcf0e: 				update.execute("update t1 set c3 = c3 + 1 where current of " + cursor.getCursorName());
3:61bcf0e: 			} else {
1:61bcf0e: 				update.execute("update t1 set c3 = c3 - 1 where current of " + cursor.getCursorName());
1:61bcf0e: 			}
1:61bcf0e: 		}
1:61bcf0e: 		assertFalse("Update using desc index failed! Got more rows.",
1:61bcf0e: 				cursor.next());
1:61bcf0e: 
1:61bcf0e: 		cursor.close();
1:61bcf0e: 		select.close();
1:61bcf0e: 
1:61bcf0e: 		/* see what we have in the table */
1:61bcf0e: 		select = prepareStatement("select c3, c2 from t1");
1:61bcf0e: 		cursor = select.executeQuery(); // cursor is now open
1:61bcf0e: 		for (int i = 0; i < SIZE_OF_T1; i++) {
1:61bcf0e: 			assertEquals(cursor.next(), true);
1:61bcf0e: 		}
1:61bcf0e: 		assertFalse("Update using desc index failed! Got more rows.",
1:61bcf0e: 				cursor.next());
1:61bcf0e: 
1:61bcf0e: 		select.close();
1:61bcf0e: 		cursor.close();
1:61bcf0e: 
1:61bcf0e: 		rollback();
1:61bcf0e: 	}
1:61bcf0e: 
1:61bcf0e: 	/**
1:61bcf0e: 	 * Test if the correct warnings are raised.
1:61bcf0e: 	 * 
1:61bcf0e: 	 * @throws SQLException
1:61bcf0e: 	 */
1:61bcf0e: 	public void testUpdateDeleteWarning() throws SQLException {
1:61bcf0e: 		Statement stmt = createStatement();
1:61bcf0e: 		SQLWarning sw;
1:61bcf0e: 
1:61bcf0e: 		stmt.executeUpdate("update t2 set c1 = 2 where c1 = 1");
1:61bcf0e: 		sw = stmt.getWarnings();
1:61bcf0e: 		assertNull("The update should not return a warning.", sw);
1:61bcf0e: 
1:61bcf0e: 		stmt.executeUpdate("update t2 set c1 = 2 where c1 = 1");
1:61bcf0e: 		sw = stmt.getWarnings();
1:61bcf0e: 		assertNotNull("The update should return a warning.", sw);
1:61bcf0e: 		assertEquals("Wrong sql state.", EXPECTED_SQL_CODE, sw
1:61bcf0e: 				.getSQLState());
1:61bcf0e: 
1:61bcf0e: 		stmt.executeUpdate("delete from t2 where c1 = 2");
1:61bcf0e: 		sw = stmt.getWarnings();
1:61bcf0e: 		assertNull("The delete should not return a warning.", sw);
1:61bcf0e: 
1:61bcf0e: 		stmt.executeUpdate("delete from t2 where c1 = 2");
1:61bcf0e: 		sw = stmt.getWarnings();
1:61bcf0e: 		assertNotNull("The delete should return a warning.", sw);
1:61bcf0e: 		assertEquals("Wrong sql state.", EXPECTED_SQL_CODE, sw
1:61bcf0e: 				.getSQLState());
1:61bcf0e: 
1:61bcf0e: 		stmt.executeUpdate("delete from t3");
1:61bcf0e: 		sw = stmt.getWarnings();
1:61bcf0e: 		assertNotNull("The delete cascade should return a warning.", sw);
1:61bcf0e: 		assertEquals("Wrong sql state.", EXPECTED_SQL_CODE, sw
1:61bcf0e: 				.getSQLState());
1:61bcf0e: 
1:61bcf0e: 		stmt.close();
1:61bcf0e: 
1:61bcf0e: 		rollback();
1:61bcf0e: 	}
1:61bcf0e: 
1:61bcf0e:     /**
1:91f376c:      * Regression test case for DERBY-5425. The scan used to lose rows that
1:91f376c:      * had spilt to disk from the data structure that keeps track of already
1:91f376c:      * seen rows, if the transaction was committed in the middle of the scan.
1:91f376c:      */
1:91f376c:     public void testDerby5425HoldOverCommit() throws SQLException {
1:91f376c:         Statement stmt = createStatement();
1:91f376c: 
1:91f376c:         // Drop index and recreate it to be sure that it is ascending
1:91f376c:         // (other subtests may have changed it)
1:91f376c:         assertUpdateCount(stmt, 0, "drop index I11");
1:91f376c:         assertUpdateCount(stmt, 0, "create index I11 on T1 (c3, c1, c5)");
1:91f376c: 
1:91f376c:         PreparedStatement sel = prepareStatement(
1:91f376c:                 "select c3 from t1 --DERBY-PROPERTIES index=I11",
1:91f376c:                 ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1:91f376c: 
1:91f376c:         ResultSet rs = sel.executeQuery();
1:91f376c:         for (int i = 1; i <= SIZE_OF_T1; i++) {
1:91f376c:             assertTrue("Too few rows", rs.next());
1:91f376c:             assertEquals(i, rs.getInt(1));
1:91f376c:             rs.updateInt(1, i);
1:91f376c:             rs.updateRow();
1:91f376c:             commit();
1:91f376c:         }
1:91f376c:         assertFalse("Too many rows", rs.next());
1:91f376c:         rs.close();
1:91f376c:     }
1:61bcf0e: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1: 						pstmt.setString(2 + k, Integer.toString(i));
1: 						pstmt.setString(4 + k, Integer.toString(i));
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             new SystemPropertyTestSetup(
1:                 new CleanDatabaseTestSetup(
1:                     new BaseTestSuite(
1:                         UpdateCursorTest.class, "UpdateCursorTest")) {
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:91f376c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * 1 (KB). This includes 100 rows to fill the in-memory portion of the hash
1:  * table, and another 100 rows to fill an in-memory heap that was used until
1:  * DERBY-5425 removed it.
/////////////////////////////////////////////////////////////////////////
1:             // Expect the values to be returned in index order.
1:             expectedValue++;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Regression test case for DERBY-5425. The scan used to lose rows that
1:      * had spilt to disk from the data structure that keeps track of already
1:      * seen rows, if the transaction was committed in the middle of the scan.
1:      */
1:     public void testDerby5425HoldOverCommit() throws SQLException {
1:         Statement stmt = createStatement();
1: 
1:         // Drop index and recreate it to be sure that it is ascending
1:         // (other subtests may have changed it)
1:         assertUpdateCount(stmt, 0, "drop index I11");
1:         assertUpdateCount(stmt, 0, "create index I11 on T1 (c3, c1, c5)");
1: 
1:         PreparedStatement sel = prepareStatement(
1:                 "select c3 from t1 --DERBY-PROPERTIES index=I11",
1:                 ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1: 
1:         ResultSet rs = sel.executeQuery();
1:         for (int i = 1; i <= SIZE_OF_T1; i++) {
1:             assertTrue("Too few rows", rs.next());
1:             assertEquals(i, rs.getInt(1));
1:             rs.updateInt(1, i);
1:             rs.updateRow();
1:             commit();
1:         }
1:         assertFalse("Too many rows", rs.next());
1:         rs.close();
1:     }
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:8a319fb
/////////////////////////////////////////////////////////////////////////
1: 		/* drop index and recreate it to be sure that it is ascending
1:                  * (other subtests may have changed it)
1:                  */
1: 		assertUpdateCount(update, 0, "drop index I11");
1: 		assertUpdateCount(update, 0, "create index I11 on T1 (c3, c1, c5)");
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:4d83c52
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
/////////////////////////////////////////////////////////////////////////
1: 		return new DatabasePropertyTestSetup(
0: 				new SystemPropertyTestSetup(new CleanDatabaseTestSetup(
/////////////////////////////////////////////////////////////////////////
1: 		}, props), props, true);
1: 	/**
1: 	 */
/////////////////////////////////////////////////////////////////////////
1: 		/* scan the entire table except the last row. */
/////////////////////////////////////////////////////////////////////////
1: 			 */
/////////////////////////////////////////////////////////////////////////
1: 		/* see what we have in the table */
/////////////////////////////////////////////////////////////////////////
commit:9584a61
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
0: 		return TestConfiguration.singleUseDatabaseDecorator(new SystemPropertyTestSetup(new CleanDatabaseTestSetup(
/////////////////////////////////////////////////////////////////////////
0: 		}, props));
0: 	/*
0: 	 * DERBY-2543: Test fails in suite runs in the nightlies,
0: 	 *             probably because the static property 
0: 	 *             maxMemoryPerTable has already been set 
1: 	 *
1: 	 
/////////////////////////////////////////////////////////////////////////
0: 		/* scan the entire table except the last row. 
/////////////////////////////////////////////////////////////////////////
1: 			 
/////////////////////////////////////////////////////////////////////////
0: 		/* see what we have in the table 
/////////////////////////////////////////////////////////////////////////
1: 	*/
commit:61bcf0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest
1:  *  
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: 
1: /**
1:  * This tests updateable cursor using index, Beetle entry 3865.
1:  * 
1:  * Not done in ij since we need to do many "next" and "update" to be able to
1:  * excercise the code of creating temp conglomerate for virtual memory heap. We
1:  * need at minimum 200 rows in table, if "maxMemoryPerTable" property is set to
0:  * 1 (KB). This includes 100 rows to fill the hash table and another 100 rows to
0:  * fill the in-memory heap.
1:  */
1: public class UpdateCursorTest extends BaseJDBCTestCase {
1: 
1: 	private static final int SIZE_OF_T1 = 250;
0: 	private static final int MAX_CAP_OF_HASH_TABLE = 100;
1: 	private static final String EXPECTED_SQL_CODE = "02000";
0: 	private static final String UNEXPECTED_MSG = "No row was found for FETCH, UPDATE or DELETE";
1: 
1: 	/**
1: 	 * Basic constructor.
1: 	 */
1: 	public UpdateCursorTest(String name) {
1: 		super(name);
1: 	}
1: 
1: 	/**
1: 	 * Sets the auto commit to false.
1: 	 */
1: 	protected void initializeConnection(Connection conn) throws SQLException {
1: 		conn.setAutoCommit(false);
1: 	}
1: 
1: 	/**
1: 	 * Returns the implemented tests.
1: 	 * 
1: 	 * @return An instance of <code>Test</code> with the implemented tests to
1: 	 *         run.
1: 	 */
1: 	public static Test suite() {
1: 		Properties props = new Properties();
1: 
1: 		props.setProperty("derby.language.maxMemoryPerTable", "1");
0: 		return new SystemPropertyTestSetup(new CleanDatabaseTestSetup(
0: 				new TestSuite(UpdateCursorTest.class, "UpdateCursorTest")) {
1: 
1: 			/**
1: 			 * @see org.apache.derbyTesting.junit.CleanDatabaseTestSetup#decorateSQL(java.sql.Statement)
1: 			 */
1: 			protected void decorateSQL(Statement s) throws SQLException {
1: 				StringBuffer sb = new StringBuffer(1000);
1: 				String largeString;
1: 				PreparedStatement pstmt;
1: 
1: 				assertUpdateCount(s, 0, "create table T1 ("
1: 						+ "  c1	int," + "  c2	char(50)," + "  c3	int," + "  c4   char(50),"
1: 						+ "  c5   int," + "  c6   varchar(1000))"); 		
1: 				assertUpdateCount(s, 0, "create index I11 on T1(c3, c1, c5)"); 	
1: 				assertUpdateCount(s, 0, "create table T2("
1: 						+ "  c1 	int)"); 		
1: 				assertUpdateCount(s, 0, "create table T3("
1: 						+ "  c1	char(20) not null primary key)"); 		
1: 				assertUpdateCount(s, 0, "create table T4("
1: 						+ "  c1 	char(20) references T3(c1) on delete cascade)"); 		
1: 
1: 				/* fill the newly created tables */
1: 				for (int i = 0; i < 1000; i++) {
1: 					sb.append('a');
1: 				}
1: 
1: 				pstmt = s.getConnection().prepareStatement("insert into T1 values (?, ?, ?, ?, ?, ?), " +
1: 						"(?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), "
1: 						+ "(?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?)");
1: 
1: 				largeString = new String(sb);
1: 				for (int i = 246; i > 0; i = i - 5) {
1: 					int k = 0;
1: 
1: 					for (int j = 0; j < 5; j++) {
1: 						pstmt.setInt(1 + k, i + (4 - j));
0: 						pstmt.setString(2 + k, new Integer(i).toString());
1: 						pstmt.setInt(3 + k, i + j);
0: 						pstmt.setString(4 + k, new Integer(i).toString());
1: 						pstmt.setInt(5 + k, i);
1: 						pstmt.setString(6 + k, largeString);
1: 
1: 						k += 6;
1: 					}
1: 
1: 					assertUpdateCount(pstmt, 5);
1: 				}
1: 				s.executeUpdate("insert into t2 values (1)");
1: 				pstmt.close();
1: 			}
1: 
0: 		}, props);
1: 	}
1: 
1: 	/**
1: 	 * Test the virtual memory heap.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testVirtualMemoryHeap() throws SQLException {
1: 		PreparedStatement select = prepareStatement("select c1, c3 from t1 where c3 > 1 and c1 > 0 for update");
1: 		Statement update = createStatement();
1: 		String cursorName;
1: 		ResultSet cursor;
1: 		int expectedValue = 1;
1: 
1: 		cursor = select.executeQuery(); // cursor is now open
1: 		cursorName = cursor.getCursorName();
1: 
0: 		/* scan the entire table except the last row. */
1: 		for (int i = 0; i < SIZE_OF_T1 - 1; i++) {	
1: 			
0: 			/*	Notice the order in the rows we get: from 2 to 102 asc order on second column (c3)
0: 			 *	then from 202 down to 103 on that column; then from 203 up to 250.  The reason is
0: 			 *	we are using asc index on c3, all the rows updated are in the future direction of the
0: 			 *	index scan, so they all get filled into a hash table.  The MAX_MEMORY_PER_TABLE
0: 			 *	property determines max cap of hash table 100.  So from row 103 it goes into virtual
0: 			 *	memory heap, whose in memory part is also 100 entries.  So row 103 to 202 goes into
0: 			 *	the in-memory part and gets dumped out in reverse order.  Finally Row 203 to 250"
0: 			 *	goes into file system.  Here we mean row ids.
1: 			 */
0: 			if (i < MAX_CAP_OF_HASH_TABLE + 1) {
0: 				expectedValue++;
0: 			} else if (i > MAX_CAP_OF_HASH_TABLE && i <= MAX_CAP_OF_HASH_TABLE * 2) {
0: 				if (i == MAX_CAP_OF_HASH_TABLE + 1) {
0: 					expectedValue = 202;
1: 				} else {
0: 					expectedValue--;
1: 				}
0: 			} else if (i > MAX_CAP_OF_HASH_TABLE * 2) {
0: 				if (i == MAX_CAP_OF_HASH_TABLE * 2 + 1) {
0: 					expectedValue = 203;
1: 				} else {
0: 					expectedValue++;
1: 				}
1: 			}
1: 			
1: 			assertEquals(cursor.next(), true);
1: 			//System.out.println("Row " + i + ": "+cursor.getInt(1)+","+cursor.getInt(2)+": "+expectedValue);
1: 			assertEquals("Virtual memory heap test failed! Got unexpected value.", expectedValue, cursor.getInt(2));
1: 			update.execute("update t1 set c3 = c3 + 250 where current of " + cursorName);
1: 		}
1: 		assertFalse(
1: 				"Update with virtual memory heap failed! Still got rows.",
1: 				cursor.next());
1: 
1: 		cursor.close();
1: 		update.close();
1: 
1: 		/* see what we have in the table */
1: 		select = prepareStatement("select c1, c3 from t1");
1: 		cursor = select.executeQuery(); // cursor is now open
1: 		for (int i = 0; i < SIZE_OF_T1; i++) {
1: 			assertEquals(cursor.next(), true);
1: 		}
1: 		assertFalse(
1: 				"Update with virtual memory heeap failed! Got more rows.",
1: 				cursor.next());
1: 
1: 		select.close();
1: 		cursor.close();
1: 
1: 		rollback();
1: 	}
1: 
1: 	/**
1: 	 * Tests non covering index.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testNonCoveringIndex() throws SQLException {
1: 		PreparedStatement select;
1: 		Statement update;
1: 		ResultSet cursor;
1: 		String cursorName;
1: 
1: 		update = createStatement();
1: 		select = prepareStatement("select c3, c2 from t1 where c3 > 125 and c1 > 0 for update");
1: 		cursor = select.executeQuery(); // cursor is now open
1: 		cursorName = cursor.getCursorName();
1: 
1: 		for (int i = 0; i < (SIZE_OF_T1 / 2); i++) {
1: 			assertEquals(cursor.next(), true);
1: 			update.execute("update t1 set c3 = c3 + 25 where current of " + cursorName);
1: 		}
1: 		assertFalse(
1: 				"Update using noncovering index failed! Still got rows.",
1: 				cursor.next());
1: 
1: 		cursor.close();
1: 		select.close();
1: 
1: 		/* see what we have in the table */
1: 		select = prepareStatement("select c1, c3 from t1");
1: 		cursor = select.executeQuery(); // cursor is now open
1: 		for (int i = 0; i < SIZE_OF_T1; i++) {
1: 			assertEquals(cursor.next(), true);
1: 		}
1: 		assertFalse(
1: 				"Update using noncovering index failed! Got more rows.", cursor
1: 						.next());
1: 
1: 		select.close();
1: 		cursor.close();
1: 
1: 		rollback();
1: 	}
1: 
1: 	/**
1: 	 * Tests descending index.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testDescendingIndex() throws SQLException {
1: 		PreparedStatement select;
1: 		Statement update;
1: 		ResultSet cursor;
1: 
1: 		update = createStatement();
1: 
1: 		/* drop index and recreate it */
1: 		assertUpdateCount(update, 0, "drop index I11");
1: 		assertUpdateCount(update, 0, "create index I11 on T1 (c3 desc, c1, c5 desc)");
1: 		commit();
1: 
1: 		update = createStatement();
1: 		select = prepareStatement("select c3, c1 from t1 where c3 > 125 and c1 > 0 for update");
1: 		cursor = select.executeQuery(); // cursor is now open
1: 
1: 		for (int i = 0; i < (SIZE_OF_T1 / 2); i++) {
1: 			assertEquals(cursor.next(), true);
1: 			if ((i % 2) == 0) {
1: 				update.execute("update t1 set c3 = c3 + 1 where current of " + cursor.getCursorName());
1: 			} else {
1: 				update.execute("update t1 set c3 = c3 - 1 where current of " + cursor.getCursorName());
1: 			}
1: 		}
1: 		assertFalse("Update using desc index failed! Got more rows.",
1: 				cursor.next());
1: 
1: 		cursor.close();
1: 		select.close();
1: 
1: 		/* see what we have in the table */
1: 		select = prepareStatement("select c3, c2 from t1");
1: 		cursor = select.executeQuery(); // cursor is now open
1: 		for (int i = 0; i < SIZE_OF_T1; i++) {
1: 			assertEquals(cursor.next(), true);
1: 		}
1: 		assertFalse("Update using desc index failed! Got more rows.",
1: 				cursor.next());
1: 
1: 		select.close();
1: 		cursor.close();
1: 
1: 		rollback();
1: 	}
1: 
1: 	/**
1: 	 * Test if the correct warnings are raised.
1: 	 * 
1: 	 * @throws SQLException
1: 	 */
1: 	public void testUpdateDeleteWarning() throws SQLException {
1: 		Statement stmt = createStatement();
1: 		SQLWarning sw;
1: 
1: 		stmt.executeUpdate("update t2 set c1 = 2 where c1 = 1");
1: 		sw = stmt.getWarnings();
1: 		assertNull("The update should not return a warning.", sw);
1: 
1: 		stmt.executeUpdate("update t2 set c1 = 2 where c1 = 1");
1: 		sw = stmt.getWarnings();
1: 		assertNotNull("The update should return a warning.", sw);
1: 		assertEquals("Wrong sql state.", EXPECTED_SQL_CODE, sw
1: 				.getSQLState());
1: 
1: 		stmt.executeUpdate("delete from t2 where c1 = 2");
1: 		sw = stmt.getWarnings();
1: 		assertNull("The delete should not return a warning.", sw);
1: 
1: 		stmt.executeUpdate("delete from t2 where c1 = 2");
1: 		sw = stmt.getWarnings();
1: 		assertNotNull("The delete should return a warning.", sw);
1: 		assertEquals("Wrong sql state.", EXPECTED_SQL_CODE, sw
1: 				.getSQLState());
1: 
1: 		stmt.executeUpdate("delete from t3");
1: 		sw = stmt.getWarnings();
1: 		assertNotNull("The delete cascade should return a warning.", sw);
1: 		assertEquals("Wrong sql state.", EXPECTED_SQL_CODE, sw
1: 				.getSQLState());
1: 
1: 		stmt.close();
1: 
1: 		rollback();
1: 	}
1: }
============================================================================