1:10cc70b: /*
2:10cc70b: 
1:10cc70b:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader
1:10cc70b: 
1:10cc70b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:10cc70b:    contributor license agreements.  See the NOTICE file distributed with
1:10cc70b:    this work for additional information regarding copyright ownership.
1:10cc70b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:10cc70b:    (the "License"); you may not use this file except in compliance with
1:10cc70b:    the License.  You may obtain a copy of the License at
1:10cc70b: 
1:10cc70b:       http://www.apache.org/licenses/LICENSE-2.0
1:10cc70b: 
1:10cc70b:    Unless required by applicable law or agreed to in writing, software
1:10cc70b:    distributed under the License is distributed on an "AS IS" BASIS,
1:10cc70b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10cc70b:    See the License for the specific language governing permissions and
1:10cc70b:    limitations under the License.
1:10cc70b: 
2:10cc70b:  */
1:10cc70b: 
1:10cc70b: package org.apache.derbyTesting.functionTests.util.streams;
1:10cc70b: 
1:10cc70b: import java.io.IOException;
1:10cc70b: import java.io.Reader;
1:10cc70b: 
2:10cc70b: /**
1:10cc70b:  * A stream returning characters by looping over an alphabet.
1:10cc70b:  */
1:10cc70b: public class LoopingAlphabetReader
1:10cc70b:     extends Reader {
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Maximum size of buffer.
1:10cc70b:      * Balance between size and memory usage.
1:10cc70b:      */
1:10cc70b:     private static final int MAX_BUF_SIZE = 32*1024;
1:10cc70b:     /** The character used for blanks (SPACE). */
1:10cc70b:     private static final int SPACE = ' ';
1:10cc70b: 
1:10cc70b:     /** Number of characters in the reader. */
1:10cc70b:     private final long length;
1:10cc70b:     /** Number of blanks at the end of stream. */
1:10cc70b:     private final int trailingBlanks;
1:10cc70b:     /** Remaining non-blank characters. */
1:10cc70b:     private long remainingNonBlanks;
1:10cc70b:     /** Remaining blanks. */
1:10cc70b:     private long remainingBlanks;
1:10cc70b:     /** 
1:10cc70b:      * Internal buffer of characters. 
1:10cc70b:      * Used by the read-methods with a char[] argument. 
1:10cc70b:      */
1:10cc70b:     private char[] buffer = new char[0];
1:10cc70b:     /** The alphabet to draw letters from. */
1:10cc70b:     private final CharAlphabet alphabet;
1:10cc70b:     /** Tell if the reader is closed or not. */
1:10cc70b:     private boolean closed = false;
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a looping modern latin alphabet reader of the specified length.
1:10cc70b:      *
1:10cc70b:      * @param length the number of characters
1:10cc70b:      */
1:10cc70b:     public LoopingAlphabetReader(long length) {
1:10cc70b:         this(length, 0);
2:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a looping modern latin alphabet of the specified length, with
1:10cc70b:      * the specified number of trailing blanks.
1:10cc70b:      *
1:10cc70b:      * The number of non-blank characters is
1:10cc70b:      * <code>length - trailingBlanks</code>.
1:10cc70b:      *
1:10cc70b:      * @param length total number of characters
1:10cc70b:      * @param trailingBlanks number of blank characters at the end
1:55bc97f:      */
1:10cc70b:     public LoopingAlphabetReader(long length, int trailingBlanks) {
1:10cc70b:         this.length = length;
1:10cc70b:         this.trailingBlanks = trailingBlanks;
1:10cc70b:         this.remainingNonBlanks = length - trailingBlanks;
1:10cc70b:         this.remainingBlanks = trailingBlanks;
1:10cc70b:         this.alphabet = CharAlphabet.modernLatinLowercase();
1:10cc70b:         fillBuffer(alphabet.charCount());
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a looping alphabet of the specified type and length.
1:10cc70b:      *
1:10cc70b:      * @param length the number of chars in the reader
1:10cc70b:      * @param alphabet the alphabet to loop over
1:10cc70b:      */
1:10cc70b:     public LoopingAlphabetReader(long length, CharAlphabet alphabet) {
1:10cc70b:         this(length, alphabet, 0);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a looping alphabet of the specified type and length, with
1:10cc70b:      * the specified number of trailing blanks.
1:10cc70b:      *
1:10cc70b:      * The number of non-blank characters is
1:10cc70b:      * <code>length - trailingBlanks</code>.
1:10cc70b:      *
1:10cc70b:      * @param length total number of characters
1:10cc70b:      * @param alphabet the alphabet to draw characters from
1:10cc70b:      * @param trailingBlanks number of blank characters at the end
1:10cc70b:      */
1:10cc70b:     public LoopingAlphabetReader(long length,
1:10cc70b:                                  CharAlphabet alphabet,
1:10cc70b:                                  int trailingBlanks) {
1:10cc70b:         this.length = length;
1:10cc70b:         this.trailingBlanks = trailingBlanks;
1:10cc70b:         this.remainingNonBlanks = length - trailingBlanks;
1:10cc70b:         this.remainingBlanks = trailingBlanks;
1:aeb4325:         this.alphabet = alphabet.getClone();
1:10cc70b:         fillBuffer(alphabet.charCount());
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     public int read()
1:55bc97f:             throws IOException {
1:10cc70b:         ensureOpen();
1:10cc70b:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:10cc70b:             return -1;
1:55bc97f:         }
1:10cc70b:         if (remainingNonBlanks <= 0) {
1:10cc70b:             remainingBlanks--;
1:10cc70b:             return SPACE;
1:10cc70b:         }
1:10cc70b:         remainingNonBlanks--;
1:10cc70b:         return alphabet.nextCharAsInt();
1:10cc70b:     }
1:55bc97f: 
1:10cc70b:     public int read(char[] buf, int off, int length)
2:10cc70b:             throws IOException {
1:10cc70b:         ensureOpen();
1:10cc70b:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:10cc70b:             return -1;
1:10cc70b:         }
1:10cc70b:         // We can only read as many chars as there are in the stream.
1:10cc70b:         int nonBlankLength = Math.min((int)remainingNonBlanks, length);
1:10cc70b:         fillBuffer(nonBlankLength);
1:10cc70b:         int read = 0;
1:10cc70b:         // Find position of next char in the buffer.
1:10cc70b:         int cOff = alphabet.nextCharToRead(0);
1:10cc70b:         if (nonBlankLength <= (buffer.length - cOff)) {
1:10cc70b:             System.arraycopy(buffer, cOff, buf, off, nonBlankLength);
1:10cc70b:             remainingNonBlanks -= nonBlankLength;
1:10cc70b:             read = nonBlankLength;
1:10cc70b:             alphabet.nextCharToRead(nonBlankLength);
1:10cc70b:         } else {
1:10cc70b:             // Must read several times from the buffer.
1:10cc70b:             int toRead = 0;
1:10cc70b:             while (remainingNonBlanks > 0 && read < nonBlankLength) {
1:10cc70b:                 cOff = alphabet.nextCharToRead(toRead);
1:10cc70b:                 toRead = Math.min(buffer.length - cOff, nonBlankLength - read);
1:10cc70b:                 System.arraycopy(buffer, cOff, buf, off + read, toRead);
1:10cc70b:                 remainingNonBlanks -= toRead;
1:10cc70b:                 read += toRead;
1:10cc70b:             }
1:10cc70b:             cOff = alphabet.nextCharToRead(toRead);
1:10cc70b:         }
1:10cc70b:         if (read < length && remainingBlanks > 0) {
1:10cc70b:             read += fillBlanks(buf, off + read, length - read);
1:10cc70b:         }
1:10cc70b:         return read;
1:10cc70b:     }
1:10cc70b: 
1:55bc97f:     /**
1:10cc70b:      * Reset the stream.
1:10cc70b:      */
1:10cc70b:     public void reset()
1:10cc70b:             throws IOException {
1:10cc70b:         ensureOpen();
1:10cc70b:         remainingNonBlanks = length - trailingBlanks;
1:10cc70b:         remainingBlanks = trailingBlanks;
1:10cc70b:         alphabet.reset();
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return remaining characters in the stream.
1:10cc70b:      */
1:10cc70b:     public int available() {
1:10cc70b:         return (int)(remainingNonBlanks + remainingBlanks);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Close the reader.
1:10cc70b:      */
1:10cc70b:     public void close() {
1:10cc70b:         this.closed = true;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Fill internal buffer of character sequence.
1:10cc70b:      *
1:10cc70b:      * @param bufSize the wanted size, might be ignored if too big
1:10cc70b:      */
1:10cc70b:     private void fillBuffer(int bufSize) {
1:10cc70b:         if (bufSize > MAX_BUF_SIZE) {
1:10cc70b:             bufSize = MAX_BUF_SIZE;
1:10cc70b:         }
1:10cc70b:         if (bufSize <= buffer.length) {
1:10cc70b:             return;
1:10cc70b:         }
1:10cc70b:         int curOff = alphabet.nextCharToRead(0);
1:10cc70b:         // First letter in buffer is always the first letter in the alphabet.
1:10cc70b:         alphabet.reset();
1:10cc70b:         buffer = new char[bufSize];
1:10cc70b:         for (int i=0; i < bufSize; i++) {
1:10cc70b:             buffer[i] = alphabet.nextChar();
1:10cc70b:         }
1:10cc70b:         // Must reset internal state of the alphabet, as we have not yet
1:10cc70b:         // delivered any bytes.
1:10cc70b:         alphabet.reset();
1:10cc70b:         alphabet.nextCharToRead(curOff);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Fill array with blanks (SPACE).
1:10cc70b:      *
1:10cc70b:      * @param buf array to fill
1:10cc70b:      * @param off starting offset
1:10cc70b:      * @param length maximum number of blanks to fill in
1:10cc70b:      */
1:10cc70b:     private int fillBlanks(char[] buf, int off, int length) {
1:10cc70b:         int i=0;
1:10cc70b:         for (; i < length; i++) {
1:10cc70b:             if (remainingBlanks > 0) {
1:10cc70b:                 buf[off+i] = SPACE;
1:10cc70b:                 remainingBlanks--;
1:10cc70b:             } else {
1:10cc70b:                 break;
1:10cc70b:             }
1:10cc70b:         }
1:10cc70b:         return i;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Ensure reader is open.
1:10cc70b:      *
1:10cc70b:      * @throws IOException if reader is closed
1:10cc70b:      */
1:10cc70b:     private final void ensureOpen()
1:10cc70b:             throws IOException {
1:10cc70b:         if (closed) {
1:10cc70b:             throw new IOException("Reader closed");
1:10cc70b:         }
1:10cc70b:     }
1:10cc70b: } // End class LoopingAlphabetReader
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:51826c3
/////////////////////////////////////////////////////////////////////////
commit:55bc97f
/////////////////////////////////////////////////////////////////////////
0:      * Reopen the stream.
1:      */
0:     public void reopen()
1:             throws IOException {
0:         this.closed = false;
0:         reset();
1:     }
1: 
1:     /**
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:aeb4325
/////////////////////////////////////////////////////////////////////////
1:         this.alphabet = alphabet.getClone();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:10cc70b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.streams;
1: 
1: import java.io.IOException;
1: import java.io.Reader;
1: 
1: /**
1:  * A stream returning characters by looping over an alphabet.
1:  */
1: public class LoopingAlphabetReader
1:     extends Reader {
1: 
1:     /**
1:      * Maximum size of buffer.
1:      * Balance between size and memory usage.
1:      */
1:     private static final int MAX_BUF_SIZE = 32*1024;
1:     /** The character used for blanks (SPACE). */
1:     private static final int SPACE = ' ';
1: 
1:     /** Number of characters in the reader. */
1:     private final long length;
1:     /** Number of blanks at the end of stream. */
1:     private final int trailingBlanks;
1:     /** Remaining non-blank characters. */
1:     private long remainingNonBlanks;
1:     /** Remaining blanks. */
1:     private long remainingBlanks;
1:     /** 
1:      * Internal buffer of characters. 
1:      * Used by the read-methods with a char[] argument. 
1:      */
1:     private char[] buffer = new char[0];
1:     /** The alphabet to draw letters from. */
1:     private final CharAlphabet alphabet;
1:     /** Tell if the reader is closed or not. */
1:     private boolean closed = false;
1: 
1:     /**
1:      * Create a looping modern latin alphabet reader of the specified length.
1:      *
1:      * @param length the number of characters
1:      */
1:     public LoopingAlphabetReader(long length) {
1:         this(length, 0);
1:     }
1: 
1:     /**
1:      * Create a looping modern latin alphabet of the specified length, with
1:      * the specified number of trailing blanks.
1:      *
1:      * The number of non-blank characters is
1:      * <code>length - trailingBlanks</code>.
1:      *
1:      * @param length total number of characters
1:      * @param trailingBlanks number of blank characters at the end
1:      */
1:     public LoopingAlphabetReader(long length, int trailingBlanks) {
1:         this.length = length;
1:         this.trailingBlanks = trailingBlanks;
1:         this.remainingNonBlanks = length - trailingBlanks;
1:         this.remainingBlanks = trailingBlanks;
1:         this.alphabet = CharAlphabet.modernLatinLowercase();
1:         fillBuffer(alphabet.charCount());
1:     }
1: 
1:     /**
1:      * Create a looping alphabet of the specified type and length.
1:      *
1:      * @param length the number of chars in the reader
1:      * @param alphabet the alphabet to loop over
1:      */
1:     public LoopingAlphabetReader(long length, CharAlphabet alphabet) {
1:         this(length, alphabet, 0);
1:     }
1: 
1:     /**
1:      * Create a looping alphabet of the specified type and length, with
1:      * the specified number of trailing blanks.
1:      *
1:      * The number of non-blank characters is
1:      * <code>length - trailingBlanks</code>.
1:      *
1:      * @param length total number of characters
1:      * @param alphabet the alphabet to draw characters from
1:      * @param trailingBlanks number of blank characters at the end
1:      */
1:     public LoopingAlphabetReader(long length,
1:                                  CharAlphabet alphabet,
1:                                  int trailingBlanks) {
1:         this.length = length;
1:         this.trailingBlanks = trailingBlanks;
1:         this.remainingNonBlanks = length - trailingBlanks;
1:         this.remainingBlanks = trailingBlanks;
0:         this.alphabet = alphabet;
1:         fillBuffer(alphabet.charCount());
1:     }
1: 
1:     public int read()
1:             throws IOException {
1:         ensureOpen();
1:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:             return -1;
1:         }
1:         if (remainingNonBlanks <= 0) {
1:             remainingBlanks--;
1:             return SPACE;
1:         }
1:         remainingNonBlanks--;
1:         return alphabet.nextCharAsInt();
1:     }
1: 
1:     public int read(char[] buf, int off, int length)
1:             throws IOException {
1:         ensureOpen();
1:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:             return -1;
1:         }
1:         // We can only read as many chars as there are in the stream.
1:         int nonBlankLength = Math.min((int)remainingNonBlanks, length);
1:         fillBuffer(nonBlankLength);
1:         int read = 0;
1:         // Find position of next char in the buffer.
1:         int cOff = alphabet.nextCharToRead(0);
1:         if (nonBlankLength <= (buffer.length - cOff)) {
1:             System.arraycopy(buffer, cOff, buf, off, nonBlankLength);
1:             remainingNonBlanks -= nonBlankLength;
1:             read = nonBlankLength;
1:             alphabet.nextCharToRead(nonBlankLength);
1:         } else {
1:             // Must read several times from the buffer.
1:             int toRead = 0;
1:             while (remainingNonBlanks > 0 && read < nonBlankLength) {
1:                 cOff = alphabet.nextCharToRead(toRead);
1:                 toRead = Math.min(buffer.length - cOff, nonBlankLength - read);
1:                 System.arraycopy(buffer, cOff, buf, off + read, toRead);
1:                 remainingNonBlanks -= toRead;
1:                 read += toRead;
1:             }
1:             cOff = alphabet.nextCharToRead(toRead);
1:         }
1:         if (read < length && remainingBlanks > 0) {
1:             read += fillBlanks(buf, off + read, length - read);
1:         }
1:         return read;
1:     }
1: 
1:     /**
1:      * Reset the stream.
1:      */
1:     public void reset()
1:             throws IOException {
1:         ensureOpen();
1:         remainingNonBlanks = length - trailingBlanks;
1:         remainingBlanks = trailingBlanks;
1:         alphabet.reset();
1:     }
1: 
1:     /**
1:      * Return remaining characters in the stream.
1:      */
1:     public int available() {
1:         return (int)(remainingNonBlanks + remainingBlanks);
1:     }
1: 
1:     /**
1:      * Close the reader.
1:      */
1:     public void close() {
1:         this.closed = true;
1:     }
1: 
1:     /**
1:      * Fill internal buffer of character sequence.
1:      *
1:      * @param bufSize the wanted size, might be ignored if too big
1:      */
1:     private void fillBuffer(int bufSize) {
1:         if (bufSize > MAX_BUF_SIZE) {
1:             bufSize = MAX_BUF_SIZE;
1:         }
1:         if (bufSize <= buffer.length) {
1:             return;
1:         }
1:         int curOff = alphabet.nextCharToRead(0);
1:         // First letter in buffer is always the first letter in the alphabet.
1:         alphabet.reset();
1:         buffer = new char[bufSize];
1:         for (int i=0; i < bufSize; i++) {
1:             buffer[i] = alphabet.nextChar();
1:         }
1:         // Must reset internal state of the alphabet, as we have not yet
1:         // delivered any bytes.
1:         alphabet.reset();
1:         alphabet.nextCharToRead(curOff);
1:     }
1: 
1:     /**
1:      * Fill array with blanks (SPACE).
1:      *
1:      * @param buf array to fill
1:      * @param off starting offset
1:      * @param length maximum number of blanks to fill in
1:      */
1:     private int fillBlanks(char[] buf, int off, int length) {
1:         int i=0;
1:         for (; i < length; i++) {
1:             if (remainingBlanks > 0) {
1:                 buf[off+i] = SPACE;
1:                 remainingBlanks--;
1:             } else {
1:                 break;
1:             }
1:         }
1:         return i;
1:     }
1: 
1:     /**
1:      * Ensure reader is open.
1:      *
1:      * @throws IOException if reader is closed
1:      */
1:     private final void ensureOpen()
1:             throws IOException {
1:         if (closed) {
1:             throw new IOException("Reader closed");
1:         }
1:     }
1: } // End class LoopingAlphabetReader
============================================================================