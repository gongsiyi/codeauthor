1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.FormatableIntHolder
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A formatable holder for an int.
1:eac0369:  */
1:eac0369: public class FormatableIntHolder implements Formatable
2:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	// the int
1:eac0369: 	private int theInt;
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for formatable
1:eac0369: 	 */
1:eac0369: 	public FormatableIntHolder() 
1:eac0369: 	{
2:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Construct a FormatableIntHolder using the input int.
1:eac0369: 	 *
1:eac0369: 	 * @param theInt the int to hold
1:eac0369: 	 */
1:eac0369: 	public FormatableIntHolder(int theInt)
1:eac0369: 	{
1:eac0369: 		this.theInt = theInt;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the held int to the input int.
1:eac0369: 	 *
1:eac0369: 	 * @param theInt the int to hold
1:eac0369: 	 */
1:eac0369: 	public void setInt(int theInt)
1:eac0369: 	{
1:eac0369: 		this.theInt = theInt;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the held int.
1:eac0369: 	 *
1:eac0369: 	 * @return	The held int.
1:eac0369: 	 */
1:eac0369: 	public int getInt()
1:eac0369: 	{
1:eac0369: 		return theInt;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create and return an array of FormatableIntHolders
1:eac0369: 	 * given an array of ints.
1:eac0369: 	 *
1:eac0369: 	 * @param theInts	The array of ints
1:eac0369: 	 *
1:eac0369: 	 * @return	An array of FormatableIntHolders
1:eac0369: 	 */
1:eac0369: 	public static FormatableIntHolder[] getFormatableIntHolders(int[] theInts)
1:eac0369: 	{
1:eac0369: 		if (theInts == null)
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		FormatableIntHolder[] fihArray = new FormatableIntHolder[theInts.length];
1:eac0369: 
1:eac0369: 		for (int index = 0; index < theInts.length; index++)
1:eac0369: 		{
1:eac0369: 			fihArray[index] = new FormatableIntHolder(theInts[index]);
1:eac0369: 		}
1:eac0369: 		return fihArray;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this formatable out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeInt(theInt);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this formatable from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
2:eac0369: 		throws IOException
1:eac0369: 	{
2:eac0369: 		theInt = in.readInt();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_INT_HOLDER_V01_ID; }
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5baee93
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.FormatableIntHolder
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
1: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:  * A formatable holder for an int.
1:  */
1: public class FormatableIntHolder implements Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	// the int
1: 	private int theInt;
1: 	
1: 	/**
1: 	 * Niladic constructor for formatable
1: 	 */
1: 	public FormatableIntHolder() 
1: 	{
1: 	}
1: 
1: 	/**
1: 	 * Construct a FormatableIntHolder using the input int.
1: 	 *
1: 	 * @param theInt the int to hold
1: 	 */
1: 	public FormatableIntHolder(int theInt)
1: 	{
1: 		this.theInt = theInt;
1: 	}
1: 
1: 	/**
1: 	 * Set the held int to the input int.
1: 	 *
1: 	 * @param theInt the int to hold
1: 	 */
1: 	public void setInt(int theInt)
1: 	{
1: 		this.theInt = theInt;
1: 	}
1: 
1: 	/**
1: 	 * Get the held int.
1: 	 *
1: 	 * @return	The held int.
1: 	 */
1: 	public int getInt()
1: 	{
1: 		return theInt;
1: 	}
1: 
1: 	/**
1: 	 * Create and return an array of FormatableIntHolders
1: 	 * given an array of ints.
1: 	 *
1: 	 * @param theInts	The array of ints
1: 	 *
1: 	 * @return	An array of FormatableIntHolders
1: 	 */
1: 	public static FormatableIntHolder[] getFormatableIntHolders(int[] theInts)
1: 	{
1: 		if (theInts == null)
1: 		{
1: 			return null;
1: 		}
1: 
1: 		FormatableIntHolder[] fihArray = new FormatableIntHolder[theInts.length];
1: 
1: 		for (int index = 0; index < theInts.length; index++)
1: 		{
1: 			fihArray[index] = new FormatableIntHolder(theInts[index]);
1: 		}
1: 		return fihArray;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this formatable out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeInt(theInt);
1: 	}
1: 
1: 	/**
1: 	 * Read this formatable from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException
1: 	{
1: 		theInt = in.readInt();
1: 	}
0: 	public void readExternal(ArrayInputStream in)
1: 		throws IOException
1: 	{
1: 		theInt = in.readInt();
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_INT_HOLDER_V01_ID; }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import org.apache.derby.iapi.services.io.ArrayInputStream;
0: 
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  * A formatable holder for an int.
0:  */
0: public class FormatableIntHolder implements Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	// the int
0: 	private int theInt;
0: 	
0: 	/**
0: 	 * Niladic constructor for formatable
0: 	 */
0: 	public FormatableIntHolder() 
0: 	{
0: 	}
0: 
0: 	/**
0: 	 * Construct a FormatableIntHolder using the input int.
0: 	 *
0: 	 * @param theInt the int to hold
0: 	 */
0: 	public FormatableIntHolder(int theInt)
0: 	{
0: 		this.theInt = theInt;
0: 	}
0: 
0: 	/**
0: 	 * Set the held int to the input int.
0: 	 *
0: 	 * @param theInt the int to hold
0: 	 */
0: 	public void setInt(int theInt)
0: 	{
0: 		this.theInt = theInt;
0: 	}
0: 
0: 	/**
0: 	 * Get the held int.
0: 	 *
0: 	 * @return	The held int.
0: 	 */
0: 	public int getInt()
0: 	{
0: 		return theInt;
0: 	}
0: 
0: 	/**
0: 	 * Create and return an array of FormatableIntHolders
0: 	 * given an array of ints.
0: 	 *
0: 	 * @param theInts	The array of ints
0: 	 *
0: 	 * @return	An array of FormatableIntHolders
0: 	 */
0: 	public static FormatableIntHolder[] getFormatableIntHolders(int[] theInts)
0: 	{
0: 		if (theInts == null)
0: 		{
0: 			return null;
0: 		}
0: 
0: 		FormatableIntHolder[] fihArray = new FormatableIntHolder[theInts.length];
0: 
0: 		for (int index = 0; index < theInts.length; index++)
0: 		{
0: 			fihArray[index] = new FormatableIntHolder(theInts[index]);
0: 		}
0: 		return fihArray;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this formatable out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeInt(theInt);
0: 	}
0: 
0: 	/**
0: 	 * Read this formatable from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException
0: 	{
0: 		theInt = in.readInt();
0: 	}
0: 	public void readExternal(ArrayInputStream in)
0: 		throws IOException
0: 	{
0: 		theInt = in.readInt();
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.FORMATABLE_INT_HOLDER_V01_ID; }
0: }
============================================================================