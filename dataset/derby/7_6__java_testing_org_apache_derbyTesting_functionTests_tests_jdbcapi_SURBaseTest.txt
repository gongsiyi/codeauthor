1:bc50840: /*
2:bc50840:  *
1:bc50840:  * Derby - Class SURBaseTest
1:bc50840:  *
1:dff95a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:  * contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:  * this work for additional information regarding copyright ownership.
1:dff95a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:  * (the "License"); you may not use this file except in compliance with
1:dff95a1:  * the License.  You may obtain a copy of the License at
1:bc50840:  *
1:bc50840:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bc50840:  *
1:bc50840:  * Unless required by applicable law or agreed to in writing, 
1:bc50840:  * software distributed under the License is distributed on an 
1:bc50840:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:bc50840:  * either express or implied. See the License for the specific 
1:bc50840:  * language governing permissions and limitations under the License.
5:bc50840:  */
1:bc50840: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:3bd1dd8: import org.apache.derbyTesting.junit.JDBC;
1:a6464f2: 
1:bc50840: import junit.framework.*;
1:bc50840: import java.sql.*;
7:bc50840: 
5:bc50840: /**
1:bc50840:  * Base class for testing Scrollable Updatable ResultSets. 
1:bc50840:  * The setUp() provides a Connection to the database.
1:bc50840:  * 
1:bc50840:  * Tests of this class needs to be decorated by a DBSetup
1:bc50840:  * and SURDataModelSetup.
1:bc50840:  * 
1:bc50840:  */
1:37952cf: abstract public class SURBaseTest extends BaseJDBCTestCase {
1:bc50840:     
1:bc50840:     /** Creates a new instance of SURBaseTest */
1:bc50840:     public SURBaseTest(String name) {
1:bc50840:         super(name);
1:c049abf:         recordCount = SURDataModelSetup.recordCount;  
1:c049abf:     }
1:c049abf: 
1:c049abf:     /** Creates a new instance of SURBaseTest*/
1:c049abf:     public SURBaseTest(String name, int records) {
1:c049abf:         super(name);
1:c049abf:         recordCount = records;  
8:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:03a99e2:      * Override a connection's  default state to ensure it
1:fb2bfd5:      * is always in autocommit false and repeatable
1:fb2bfd5:      * read as a starting point.
1:fb2bfd5:      */
1:fb2bfd5:     protected void initializeConnection(Connection conn) throws SQLException {
1:fb2bfd5:         conn.setAutoCommit(false);
1:fb2bfd5:         conn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);   
1:fb2bfd5:     }
1:fb2bfd5:     
1:fb2bfd5:     /**
1:bc50840:      * Verify the data of a tuple in the ResultSet, based on the data 
1:bc50840:      * that were inserted.
1:bc50840:      */
1:bc50840:     protected void verifyTuple(ResultSet rs) throws SQLException {
1:bc50840:         int id = rs.getInt(1);
1:bc50840:         int a = rs.getInt(2);
1:bc50840:         int b = rs.getInt(3);
1:bc50840:         int sum = a + id + 17;
1:bc50840:         println("Reading tuple:(" + id + "," + a  + "," + b + ",'" + 
1:4c9b831:                 rs.getString(4) + "', '"+rs.getString(5)+"'");
1:4c9b831:         assertEquals("Expecting b==id+a+17", sum, b);
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Update the current tuple in the ResultSet using updateXXX() and 
1:bc50840:      * updateRow()
1:bc50840:      */
1:bc50840:     protected void updateTuple(ResultSet rs) throws SQLException {
1:bc50840:         int id = rs.getInt(1);
1:bc50840:         int a = rs.getInt(2);
1:bc50840:         int b = rs.getInt(3);        
1:bc50840:         int newA = a*2 +id + 37;
1:bc50840:         int newB = newA + id + 17;
1:bc50840:         println("Updating record (" + id + "," + newA + "," + newB + ")");
1:bc50840:         rs.updateInt(2, newA);
1:bc50840:         rs.updateInt(3, newB); 
1:bc50840:         rs.updateRow();
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Update the current tuple in the ResultSet using positioned update
1:bc50840:      */
1:bc50840:     protected void updateTuplePositioned(ResultSet rs) throws SQLException {
1:bc50840:         int id = rs.getInt(1);
1:bc50840:         int a = rs.getInt(2);
1:bc50840:         int b = rs.getInt(3);        
1:bc50840:         int newA = a*2 +id + 37;
1:bc50840:         int newB = newA + id + 17;
1:fb2bfd5:         PreparedStatement ps = 
1:bc50840:             prepareStatement("update T1 set a=?,b=? where current of " +
1:bc50840:                              rs.getCursorName());
1:bc50840:         ps.setInt(1, newA);
1:bc50840:         ps.setInt(2, newB);
1:bc50840:         assertEquals("Expected one tuple to be updated", 1, ps.executeUpdate());
1:d778f79:         ps.close();
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Scroll forward to the end of the ResultSet, and verify tuples while 
1:bc50840:      * scrolling. 
1:bc50840:      */
1:bc50840:     protected void scrollForward(ResultSet rs) throws SQLException
3:bc50840:     {        
1:bc50840:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:bc50840:             || !rs.isBeforeFirst();
1:bc50840:         int nRecords = 0; 
1:bc50840:         while (rs.next()) {
1:bc50840:             nRecords++;
1:bc50840:             verifyTuple(rs);
1:bc50840:         }
1:bc50840:         if (!ignoreCount) {
1:d778f79:             assertEquals("Record Count", recordCount, nRecords);
1:bc50840:         }
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Scroll backward to the beginning of the ResultSet, and verify tuples 
1:bc50840:      * while scrolling.
1:bc50840:      */
1:bc50840:     protected void scrollBackward(ResultSet rs) throws SQLException
1:bc50840:     {
1:bc50840:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:bc50840:             || !rs.isAfterLast();
1:bc50840:         
1:bc50840:         int nRecords = 0; 
1:bc50840:         while (rs.previous()) {
1:bc50840:             nRecords++;
1:bc50840:             verifyTuple(rs);
1:bc50840:         }
1:bc50840:         if (!ignoreCount) {
1:d778f79:         	assertEquals("Record Count", recordCount, nRecords);
1:bc50840:         }
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Scroll forward and update the tuples using updateXXX() and updateRow()
1:bc50840:      */
1:bc50840:     protected void scrollForwardAndUpdate(ResultSet rs) throws SQLException
1:bc50840:     {
1:bc50840:         int nRecords = 0; 
1:bc50840:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:bc50840:             || !rs.isBeforeFirst();
1:bc50840:         
1:bc50840:         while (rs.next()) {
1:bc50840:             nRecords++;
1:bc50840:             verifyTuple(rs);
1:bc50840:             updateTuple(rs);
1:bc50840:         }
1:bc50840:         if (!ignoreCount) {
1:d778f79:             assertEquals("Record Count", recordCount, nRecords);
1:bc50840:         }
1:bc50840:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Scroll forward and do positioned updates.
1:bc50840:      */
1:bc50840:     protected void scrollForwardAndUpdatePositioned(ResultSet rs) 
3:bc50840:         throws SQLException
1:bc50840:     {
1:bc50840:         int nRecords = 0; 
1:bc50840:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:bc50840:             || !rs.isBeforeFirst();
1:bc50840:         while (rs.next()) {
1:bc50840:             nRecords++;
1:bc50840:             verifyTuple(rs);
1:bc50840:             updateTuplePositioned(rs);
1:bc50840:         }
1:bc50840:         if (!ignoreCount) {
1:d778f79:         	assertEquals("Record Count", recordCount, nRecords);
1:bc50840:         }
1:bc50840:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Scroll backward and update the records using updateXXX() and updateRow()
1:bc50840:      */
1:bc50840:     protected void scrollBackwardAndUpdate(ResultSet rs) throws SQLException
1:bc50840:     {
1:bc50840:         int nRecords = 0; 
1:bc50840:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:bc50840:             || !rs.isAfterLast();
1:bc50840:         while (rs.previous()) {
1:bc50840:             nRecords++;
1:bc50840:             verifyTuple(rs);
1:bc50840:             updateTuple(rs);
1:bc50840:         }
1:bc50840:         if (!ignoreCount) {
1:d778f79:         	assertEquals("Record Count", recordCount, nRecords);
1:bc50840:         }
1:bc50840:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Scroll backward and update the records using positioned updates.
1:bc50840:      */
1:bc50840:     protected void scrollBackwardAndUpdatePositioned(ResultSet rs) 
1:bc50840:         throws SQLException
1:bc50840:     {
1:bc50840:         int nRecords = 0; 
1:bc50840:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:bc50840:             || !rs.isAfterLast();
1:bc50840:         while (rs.previous()) {
1:bc50840:             nRecords++;
1:bc50840:             verifyTuple(rs);
1:bc50840:             updateTuplePositioned(rs);
1:bc50840:         }
1:bc50840:         if (!ignoreCount) {
1:d778f79:         	assertEquals("Record Count", recordCount, nRecords);
1:bc50840:         }
1:bc50840:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:bc50840:     }
1:bc50840:     
1:bc50840:     /**
1:bc50840:      * Assert that update of ResultSet fails with a SQLException
1:bc50840:      * due to read-only ResultSet.
1:bc50840:      */
1:bc50840:     protected void assertFailOnUpdate(ResultSet rs) 
1:bc50840:         throws SQLException
1:bc50840:     {
1:bc50840:         boolean failedCorrect = false;
2:bc50840:         try {
1:bc50840:             updateTuple(rs);
2:bc50840:         } catch (SQLException e) {
1:bc50840:             failedCorrect = true;
1:bc50840:             assertEquals("Unexpected SQL state", 
1:bc50840:                          RESULTSET_NOT_UPDATABLE_SQL_STATE, 
1:bc50840:                          e.getSQLState());
1:bc50840:             
1:bc50840:         }
1:bc50840:         assertTrue("Expected cursor to fail on update, since it is read only", 
1:bc50840:                    failedCorrect);
1:bc50840:     }
1:bc50840:     
1:c247315:     /**
1:c247315:      * Assert that a warning was received
1:c247315:      */
1:c247315:     protected void assertWarning(SQLWarning warn, String sqlState) 
1:c247315:         throws SQLException
1:c247315:     {
1:c247315:         if (warn!=null || usingEmbedded()) {
1:c247315:             assertEquals("Unexpected SQL state", 
1:c247315:                          sqlState,
1:c247315:                          warn.getSQLState());
1:c247315:         } else {
1:c247315:             println("Expected warning with SQLState = '" + sqlState +
1:c247315:                     "', however warning not propagated to client driver");
1:c247315:         }
1:c247315:     }
1:c247315:     
1:c049abf:     final int recordCount;
1:bc50840:     
1:bc50840:        
1:bc50840:     /**
1:bc50840:      * Error codes and SQL state
1:bc50840:      */
1:bc50840:     final static String FOR_UPDATE_NOT_PERMITTED_SQL_STATE = "42Y90";
1:bc50840:     final static String CURSOR_NOT_UPDATABLE_SQL_STATE = "42X23";
1:bc50840:     final static String RESULTSET_NOT_UPDATABLE_SQL_STATE = "XJ083";
1:bc50840:     final static String LOCK_TIMEOUT_SQL_STATE = "40XL1";
1:bc50840:     final static String LOCK_TIMEOUT_EXPRESSION_SQL_STATE = "38000";
1:f342d5b:     final static String INVALID_CURSOR_STATE_NO_CURRENT_ROW = "24000";
1:f342d5b:     final static String CURSOR_OPERATION_CONFLICT = "01001";
1:c247315:     final static String QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET = "01J06";
1:10b9cb1:     final static String CURSOR_NOT_POSITIONED_ON_INSERT_ROW = "XJ086";
1:bc50840: }
============================================================================
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:4c9b831
/////////////////////////////////////////////////////////////////////////
1:                 rs.getString(4) + "', '"+rs.getString(5)+"'");
1:         assertEquals("Expecting b==id+a+17", sum, b);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d778f79
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("Expecting b==id+a+17", b, sum);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ps.close();
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Record Count", recordCount, nRecords);
/////////////////////////////////////////////////////////////////////////
1:         	assertEquals("Record Count", recordCount, nRecords);
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Record Count", recordCount, nRecords);
/////////////////////////////////////////////////////////////////////////
1:         	assertEquals("Record Count", recordCount, nRecords);
/////////////////////////////////////////////////////////////////////////
1:         	assertEquals("Record Count", recordCount, nRecords);
/////////////////////////////////////////////////////////////////////////
1:         	assertEquals("Record Count", recordCount, nRecords);
commit:985662b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:      * Override a connection's  default state to ensure it
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         con = getConnection();
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
commit:fb2bfd5
/////////////////////////////////////////////////////////////////////////
0:      * Override the default connection's to ensure it
1:      * is always in autocommit false and repeatable
1:      * read as a starting point.
1:      */
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:         conn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);   
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
0:         initializeConnection(rcon);
0:        return rcon;
/////////////////////////////////////////////////////////////////////////
0:         // temp save the connection in this class as con
0:         // as well as the default connection in the parent
0:         con = getXConnection();
/////////////////////////////////////////////////////////////////////////
0:         assertFalse("Cannot use updateRow() in autocommit mode", 
0:                    rs.getStatement().getConnection().getAutoCommit());
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement ps = 
commit:09ffc9b
/////////////////////////////////////////////////////////////////////////
0:         final Connection rcon = openDefaultConnection();
commit:a6464f2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.JDBC;
1: 
/////////////////////////////////////////////////////////////////////////
0:        JDBC.cleanup(con);
0:         con = null;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:37952cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1: abstract public class SURBaseTest extends BaseJDBCTestCase {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:10b9cb1
/////////////////////////////////////////////////////////////////////////
1:     final static String CURSOR_NOT_POSITIONED_ON_INSERT_ROW = "XJ086";
commit:c247315
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Assert that a warning was received
1:      */
1:     protected void assertWarning(SQLWarning warn, String sqlState) 
1:         throws SQLException
1:     {
1:         if (warn!=null || usingEmbedded()) {
1:             assertEquals("Unexpected SQL state", 
1:                          sqlState,
1:                          warn.getSQLState());
1:         } else {
1:             println("Expected warning with SQLState = '" + sqlState +
1:                     "', however warning not propagated to client driver");
1:         }
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     final static String QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET = "01J06";
commit:f342d5b
/////////////////////////////////////////////////////////////////////////
1:     final static String INVALID_CURSOR_STATE_NO_CURRENT_ROW = "24000";
1:     final static String CURSOR_OPERATION_CONFLICT = "01001";
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c049abf
/////////////////////////////////////////////////////////////////////////
1:         recordCount = SURDataModelSetup.recordCount;  
1:     }
1: 
1:     /** Creates a new instance of SURBaseTest*/
1:     public SURBaseTest(String name, int records) {
1:         super(name);
1:         recordCount = records;  
/////////////////////////////////////////////////////////////////////////
1:     final int recordCount;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:bc50840
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class SURBaseTest
1:  *
0:  * Copyright 2006 The Apache Software Foundation or its 
0:  * licensors, as applicable.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, 
1:  * software distributed under the License is distributed on an 
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
1:  * either express or implied. See the License for the specific 
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
0: import org.apache.derbyTesting.functionTests.util.DerbyJUnitTest;
0: import org.apache.derbyTesting.functionTests.util.TestUtil;
0: import org.apache.derby.tools.ij;
1: import junit.framework.*;
1: import java.sql.*;
0: import java.util.Properties;
1: 
1: /**
1:  * Base class for testing Scrollable Updatable ResultSets. 
1:  * The setUp() provides a Connection to the database.
1:  * 
1:  * Tests of this class needs to be decorated by a DBSetup
1:  * and SURDataModelSetup.
1:  * 
0:  * @author Andreas Korneliussen 
1:  */
0: abstract public class SURBaseTest extends TestCase {
1:     
1:     /** Creates a new instance of SURBaseTest */
1:     public SURBaseTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
0:      * Get a JDBC Connection to the Derby database.
0:      * The autocommit flag is set to false, and the isolation level
0:      * for the transactions is set to repeatable read.
1:      */
0:     protected Connection getNewConnection() 
1:         throws SQLException
1:     {
0:         final Connection rcon = getConnection();
0:         rcon.setAutoCommit(false);
0:         rcon.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
0:         return rcon;
1:     }
1: 
0:     static Connection getConnection() 
1:         throws SQLException
1:     {
0:         String url = TestUtil.getJdbcUrlPrefix() + "wombat;create=true";
0:         return DriverManager.getConnection(url);        
1:     }
1:     
1:     /**
0:      * Set up the connection to the database.
1:      */
0:     public void setUp() throws  Exception {       
0:         println("SetUp");
0:         TestUtil.loadDriver();
0:         con = getNewConnection();
1:     }
1:     
1:     /**
0:      * Rollback the transaction
1:      */
0:     public void tearDown() throws Exception {
0:         println("TearDown");
1:         try { 
0:             con.rollback();
0:             con.close();
1:         } catch (SQLException e) {
0:             printStackTrace(e);
1:         }      
1:     }
1:     
1:     /**
1:      * Verify the data of a tuple in the ResultSet, based on the data 
1:      * that were inserted.
1:      */
1:     protected void verifyTuple(ResultSet rs) throws SQLException {
1:         int id = rs.getInt(1);
1:         int a = rs.getInt(2);
1:         int b = rs.getInt(3);
1:         int sum = a + id + 17;
1:         println("Reading tuple:(" + id + "," + a  + "," + b + ",'" + 
0:                 rs.getString(4) + "')");
0:         assertEquals("Expecting b==id+a+17, got: id=" + id + 
0:                      ",a=" + a + ",b=" + b + ",c=" +rs.getString(4), b, sum);
1:     }
1:     
1:     /**
1:      * Update the current tuple in the ResultSet using updateXXX() and 
1:      * updateRow()
1:      */
1:     protected void updateTuple(ResultSet rs) throws SQLException {
0:         assertTrue("Cannot use updateRow() in autocommit mode", 
0:                    !con.getAutoCommit());
1:         int id = rs.getInt(1);
1:         int a = rs.getInt(2);
1:         int b = rs.getInt(3);        
1:         int newA = a*2 +id + 37;
1:         int newB = newA + id + 17;
1:         println("Updating record (" + id + "," + newA + "," + newB + ")");
1:         rs.updateInt(2, newA);
1:         rs.updateInt(3, newB); 
1:         rs.updateRow();
1:     }
1:     
1:     /**
1:      * Update the current tuple in the ResultSet using positioned update
1:      */
1:     protected void updateTuplePositioned(ResultSet rs) throws SQLException {
1:         int id = rs.getInt(1);
1:         int a = rs.getInt(2);
1:         int b = rs.getInt(3);        
1:         int newA = a*2 +id + 37;
1:         int newB = newA + id + 17;
0:         PreparedStatement ps = con.
1:             prepareStatement("update T1 set a=?,b=? where current of " +
1:                              rs.getCursorName());
1:         ps.setInt(1, newA);
1:         ps.setInt(2, newB);
1:         assertEquals("Expected one tuple to be updated", 1, ps.executeUpdate());
1:     }
1:     
1:     /**
1:      * Scroll forward to the end of the ResultSet, and verify tuples while 
1:      * scrolling. 
1:      */
1:     protected void scrollForward(ResultSet rs) throws SQLException
1:     {        
1:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:             || !rs.isBeforeFirst();
1:         int nRecords = 0; 
1:         while (rs.next()) {
1:             nRecords++;
1:             verifyTuple(rs);
1:         }
1:         if (!ignoreCount) {
0:             assertEquals("Expected  " + recordCount + " records", nRecords, 
0:                          recordCount);
1:         }
1:     }
1:     
1:     /**
1:      * Scroll backward to the beginning of the ResultSet, and verify tuples 
1:      * while scrolling.
1:      */
1:     protected void scrollBackward(ResultSet rs) throws SQLException
1:     {
1:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:             || !rs.isAfterLast();
1:         
1:         int nRecords = 0; 
1:         while (rs.previous()) {
1:             nRecords++;
1:             verifyTuple(rs);
1:         }
1:         if (!ignoreCount) {
0:             assertEquals("Expected  " + recordCount + " records", nRecords, 
0:                          recordCount);
1:         }
1:     }
1:     
1:     /**
1:      * Scroll forward and update the tuples using updateXXX() and updateRow()
1:      */
1:     protected void scrollForwardAndUpdate(ResultSet rs) throws SQLException
1:     {
1:         int nRecords = 0; 
1:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:             || !rs.isBeforeFirst();
1:         
1:         while (rs.next()) {
1:             nRecords++;
1:             verifyTuple(rs);
1:             updateTuple(rs);
1:         }
1:         if (!ignoreCount) {
0:             assertEquals("Expected  " + recordCount + " records", nRecords, 
0:                          recordCount);
1:         }
1:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:     }
1:     
1:     /**
1:      * Scroll forward and do positioned updates.
1:      */
1:     protected void scrollForwardAndUpdatePositioned(ResultSet rs) 
1:         throws SQLException
1:     {
1:         int nRecords = 0; 
1:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:             || !rs.isBeforeFirst();
1:         while (rs.next()) {
1:             nRecords++;
1:             verifyTuple(rs);
1:             updateTuplePositioned(rs);
1:         }
1:         if (!ignoreCount) {
0:             assertEquals("Expected  " + recordCount + " records", nRecords, 
0:                          recordCount);
1:         }
1:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:     }
1:     
1:     /**
1:      * Scroll backward and update the records using updateXXX() and updateRow()
1:      */
1:     protected void scrollBackwardAndUpdate(ResultSet rs) throws SQLException
1:     {
1:         int nRecords = 0; 
1:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:             || !rs.isAfterLast();
1:         while (rs.previous()) {
1:             nRecords++;
1:             verifyTuple(rs);
1:             updateTuple(rs);
1:         }
1:         if (!ignoreCount) {
0:             assertEquals("Expected  " + recordCount + " records", nRecords, 
0:                          recordCount);
1:         }
1:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:     }
1:     
1:     /**
1:      * Scroll backward and update the records using positioned updates.
1:      */
1:     protected void scrollBackwardAndUpdatePositioned(ResultSet rs) 
1:         throws SQLException
1:     {
1:         int nRecords = 0; 
1:         boolean ignoreCount = rs.getType()==ResultSet.TYPE_FORWARD_ONLY 
1:             || !rs.isAfterLast();
1:         while (rs.previous()) {
1:             nRecords++;
1:             verifyTuple(rs);
1:             updateTuplePositioned(rs);
1:         }
1:         if (!ignoreCount) {
0:             assertEquals("Expected  " + recordCount + " records", nRecords, 
0:                          recordCount);
1:         }
1:         assertNotNull("rs.getCursorName()", rs.getCursorName());
1:     }
1:     
1:     /**
1:      * Assert that update of ResultSet fails with a SQLException
1:      * due to read-only ResultSet.
1:      */
1:     protected void assertFailOnUpdate(ResultSet rs) 
1:         throws SQLException
1:     {
1:         boolean failedCorrect = false;
1:         try {
1:             updateTuple(rs);
1:         } catch (SQLException e) {
1:             failedCorrect = true;
1:             assertEquals("Unexpected SQL state", 
1:                          RESULTSET_NOT_UPDATABLE_SQL_STATE, 
1:                          e.getSQLState());
1:             
1:         }
1:         assertTrue("Expected cursor to fail on update, since it is read only", 
1:                    failedCorrect);
1:     }
1:     
0:     protected Connection con = null; // Connection established in setUp()
0:     final static int recordCount = SURDataModelSetup.recordCount;  
1:     
1:        
1:     /**
1:      * Error codes and SQL state
1:      */
1:     final static String FOR_UPDATE_NOT_PERMITTED_SQL_STATE = "42Y90";
1:     final static String CURSOR_NOT_UPDATABLE_SQL_STATE = "42X23";
1:     final static String RESULTSET_NOT_UPDATABLE_SQL_STATE = "XJ083";
1:     final static String LOCK_TIMEOUT_SQL_STATE = "40XL1";
1:     final static String LOCK_TIMEOUT_EXPRESSION_SQL_STATE = "38000";
1:     
0:     static void println(String text) {
0:         DerbyJUnitTest.println(text);
1:     }
1:     
1:     /**
0:      * Prints the stack trace. If run in the harness, the
0:      * harness will mark the test as failed if this method
0:      * has been called.
1:      */
0:     static void printStackTrace(Throwable t) {
0:         DerbyJUnitTest.printStackTrace(t);
1:     }
1: }
============================================================================