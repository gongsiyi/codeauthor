1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.sort.SortBufferRowSource
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.sort;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.access.SortObserver;
1:eac0369: import org.apache.derby.iapi.types.RowLocation;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.ScanControllerRowSource;
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Wrapping the output of a SortBuffer in a RowSource for the benefit of the
1:eac0369: 	createAndLoadConglomerate and loadConglomerate interface.
1:eac0369: 
1:eac0369: 	Scan implements ScanController, this class just implements the
1:eac0369: 	RowSource interface. 
1:eac0369: 
1:eac0369: */
1:eac0369: public class SortBufferRowSource extends Scan
1:eac0369: 		implements ScanControllerRowSource
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	The Sort buffer where rows come from
1:eac0369: 	**/
1:eac0369: 	SortBuffer sortBuffer = null;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	The TransactionManager that opened this scan.
1:eac0369: 	**/
1:eac0369: 	protected TransactionManager tran = null;
1:eac0369: 
1:eac0369: 	private int			 maxFreeListSize;
1:eac0369: 	private boolean		 writingToDisk;
1:eac0369: 	private SortObserver sortObserver;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Constructors.
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	SortBufferRowSource(
1:eac0369:     SortBuffer          sortBuffer, 
1:eac0369:     TransactionManager  tran, 
1:eac0369:     SortObserver        sortObserver,
1:eac0369:     boolean             writingToDisk, 
1:eac0369:     int                 maxFreeListSize)
1:eac0369: 	{
1:eac0369: 		super();
1:eac0369: 		this.sortBuffer = sortBuffer;
1:eac0369: 		this.tran = tran;
1:eac0369: 		this.sortObserver = sortObserver;
1:eac0369: 		this.writingToDisk = writingToDisk;
1:eac0369: 		this.maxFreeListSize = maxFreeListSize;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Private/Protected methods of This class: */
1:eac0369:     /* Public Methods of This class: */
1:eac0369:     /* Public Methods of RowSource class: */
1:eac0369: 
1:eac0369:     public DataValueDescriptor[] getNextRowFromRowSource()
1:eac0369:     {
1:eac0369: 		if (sortBuffer == null)	// has been closed
1:eac0369: 			return null;
1:eac0369: 
1:eac0369: 		DataValueDescriptor[] retval = sortBuffer.removeFirst();
1:eac0369: 
1:eac0369: 		// Return the removed object to the free DataValueDescriptor[]
1:eac0369: 		if (retval != null && writingToDisk)
1:eac0369: 		{
1:eac0369: 			sortObserver.addToFreeList(retval, maxFreeListSize);
1:eac0369: 		}
1:eac0369: 		return retval;
1:eac0369: 	  }
1:eac0369: 
1:eac0369: 	public boolean needsRowLocation()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:af1c18c:     public boolean needsRowLocationForDeferredCheckConstraints()
1:af1c18c:     {
1:af1c18c:         return false;
1:af1c18c:     }
1:af1c18c: 
1:af1c18c: 
1:eac0369: 	/**
1:fa09146: 	 * @see org.apache.derby.iapi.store.access.RowSource#needsToClone
1:eac0369: 	 */
1:eac0369: 	public boolean needsToClone()
1:eac0369: 	{
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void rowLocation(RowLocation rl)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("unexpected call to RowSource.rowLocation");
1:eac0369: 	}
1:eac0369: 
1:af1c18c:     public void offendingRowLocation(
1:af1c18c:             RowLocation rl, long containdId) throws StandardException {
1:af1c18c:         if (SanityManager.DEBUG) {
1:af1c18c:             SanityManager.NOTREACHED();
1:af1c18c:         }
1:af1c18c:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		All columns are always set from a sorter
1:eac0369: 	*/
1:eac0369: 	public FormatableBitSet getValidColumns()
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Close the scan
1:eac0369: 	 */
1:eac0369: 	public void close()
1:eac0369: 	{
1:eac0369: 		if (sortBuffer != null)
1:eac0369: 		{
1:eac0369: 			sortBuffer.close();
1:eac0369: 			sortBuffer = null;
1:eac0369: 		}
1:eac0369: 		tran.closeMe(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Close the scan
1:eac0369: 	 */
1:eac0369: 	public boolean closeForEndTransaction(boolean closeHeldScan)
1:eac0369: 	{
1:eac0369:         if (SanityManager.DEBUG)
1:eac0369:             SanityManager.ASSERT(
1:eac0369:                 closeHeldScan, 
1:eac0369:                 "Sort scan should not be held open across commit.");
1:eac0369: 
1:eac0369:         close();
1:eac0369:         return(true);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Close the rowSource
1:eac0369: 	 */
1:eac0369: 	public void closeRowSource()
1:eac0369: 	{
1:eac0369: 		close();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Disable illegal and dangerous scan controller interface call
1:eac0369: 	 */
1:eac0369: 	public boolean next() throws StandardException
1:eac0369: 	{
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369: 	}
1:eac0369: 
1:2700e3d:     /**
1:2700e3d:      * Fetch the row at the current position of the Scan and does not apply the
1:2700e3d:      * qualifiers.
1:2700e3d:      *
1:2700e3d:      * This method will always throw an exception. 
1:2700e3d:      * (SQLState.SORT_IMPROPER_SCAN_METHOD)
1:2700e3d:      *
1:fa09146:      * @see org.apache.derby.iapi.store.access.ScanController#fetchWithoutQualify
1:2700e3d:      **/
1:2700e3d:     public void fetchWithoutQualify(DataValueDescriptor[] result) 
1:2700e3d:         throws StandardException
1:2700e3d:     {
1:2700e3d:         throw StandardException.newException(
1:2700e3d:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:2700e3d:     }
1:2700e3d: 
1:2700e3d:     /**
1:2700e3d:      * Fetch the row at the current position of the Scan.
1:2700e3d:      *
1:fa09146:      * @see org.apache.derby.iapi.store.access.ScanController#fetch
1:2700e3d:      **/
1:eac0369:     public void fetch(DataValueDescriptor[] result) throws StandardException
1:eac0369: 	{
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369: 	}
1:eac0369: 
1:eac0369:     public final boolean fetchNext(DataValueDescriptor[] row) 
1:eac0369:         throws StandardException
1:eac0369: 	{
1:eac0369:         throw StandardException.newException(
1:eac0369:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:     public boolean needsRowLocationForDeferredCheckConstraints()
1:     {
1:         return false;
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void offendingRowLocation(
1:             RowLocation rl, long containdId) throws StandardException {
1:         if (SanityManager.DEBUG) {
1:             SanityManager.NOTREACHED();
1:         }
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * @see org.apache.derby.iapi.store.access.RowSource#needsToClone
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.derby.iapi.store.access.ScanController#fetchWithoutQualify
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.derby.iapi.store.access.ScanController#fetch
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2700e3d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.store.access.ScanController;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Fetch the row at the current position of the Scan and does not apply the
1:      * qualifiers.
1:      *
1:      * This method will always throw an exception. 
1:      * (SQLState.SORT_IMPROPER_SCAN_METHOD)
1:      *
0:      * @see ScanController#fetchWithoutQualify
1:      **/
1:     public void fetchWithoutQualify(DataValueDescriptor[] result) 
1:         throws StandardException
1:     {
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1:     }
1: 
1:     /**
1:      * Fetch the row at the current position of the Scan.
1:      *
0:      * @see ScanController#fetch
1:      **/
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.sort.SortBufferRowSource
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.sort;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.RowSource;
1: import org.apache.derby.iapi.store.access.SortObserver;
1: import org.apache.derby.iapi.types.RowLocation;
1: import org.apache.derby.iapi.store.access.conglomerate.ScanControllerRowSource;
1: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: /**
1: 	Wrapping the output of a SortBuffer in a RowSource for the benefit of the
1: 	createAndLoadConglomerate and loadConglomerate interface.
1: 
1: 	Scan implements ScanController, this class just implements the
1: 	RowSource interface. 
1: 
1: */
1: public class SortBufferRowSource extends Scan
1: 		implements ScanControllerRowSource
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	The Sort buffer where rows come from
1: 	**/
1: 	SortBuffer sortBuffer = null;
1: 
1: 	/**
1: 	The TransactionManager that opened this scan.
1: 	**/
1: 	protected TransactionManager tran = null;
1: 
1: 	private int			 maxFreeListSize;
1: 	private boolean		 writingToDisk;
1: 	private SortObserver sortObserver;
1: 
1: 	/*
1: 	 * Constructors.
1: 	 */
1: 
1: 	SortBufferRowSource(
1:     SortBuffer          sortBuffer, 
1:     TransactionManager  tran, 
1:     SortObserver        sortObserver,
1:     boolean             writingToDisk, 
1:     int                 maxFreeListSize)
1: 	{
1: 		super();
1: 		this.sortBuffer = sortBuffer;
1: 		this.tran = tran;
1: 		this.sortObserver = sortObserver;
1: 		this.writingToDisk = writingToDisk;
1: 		this.maxFreeListSize = maxFreeListSize;
1: 	}
1: 
1: 	/* Private/Protected methods of This class: */
1:     /* Public Methods of This class: */
1:     /* Public Methods of RowSource class: */
1: 
1:     public DataValueDescriptor[] getNextRowFromRowSource()
1:     {
1: 		if (sortBuffer == null)	// has been closed
1: 			return null;
1: 
1: 		DataValueDescriptor[] retval = sortBuffer.removeFirst();
1: 
1: 		// Return the removed object to the free DataValueDescriptor[]
1: 		if (retval != null && writingToDisk)
1: 		{
1: 			sortObserver.addToFreeList(retval, maxFreeListSize);
1: 		}
1: 		return retval;
1: 	  }
1: 
1: 	public boolean needsRowLocation()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
0: 	 * @see RowSource#needsToClone
1: 	 */
1: 	public boolean needsToClone()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	public void rowLocation(RowLocation rl)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("unexpected call to RowSource.rowLocation");
1: 	}
1: 
1: 
1: 	/**
1: 		All columns are always set from a sorter
1: 	*/
1: 	public FormatableBitSet getValidColumns()
1: 	{
1: 		return null;
1: 	}
1: 
1: 	/**
1: 		Close the scan
1: 	 */
1: 	public void close()
1: 	{
1: 		if (sortBuffer != null)
1: 		{
1: 			sortBuffer.close();
1: 			sortBuffer = null;
1: 		}
1: 		tran.closeMe(this);
1: 	}
1: 
1: 	/**
1: 		Close the scan
1: 	 */
1: 	public boolean closeForEndTransaction(boolean closeHeldScan)
1: 	{
1:         if (SanityManager.DEBUG)
1:             SanityManager.ASSERT(
1:                 closeHeldScan, 
1:                 "Sort scan should not be held open across commit.");
1: 
1:         close();
1:         return(true);
1:     }
1: 
1: 	/**
1: 		Close the rowSource
1: 	 */
1: 	public void closeRowSource()
1: 	{
1: 		close();
1: 	}
1: 
1: 	/*
1: 	 * Disable illegal and dangerous scan controller interface call
1: 	 */
1: 	public boolean next() throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 	}
1: 
1:     public void fetch(DataValueDescriptor[] result) throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 	}
1: 
1:     public final boolean fetchNext(DataValueDescriptor[] row) 
1:         throws StandardException
1: 	{
1:         throw StandardException.newException(
1:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.sort
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.sort;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.access.RowSource;
0: import org.apache.derby.iapi.store.access.SortObserver;
0: import org.apache.derby.iapi.types.RowLocation;
0: import org.apache.derby.iapi.store.access.conglomerate.ScanControllerRowSource;
0: import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: /**
0: 	Wrapping the output of a SortBuffer in a RowSource for the benefit of the
0: 	createAndLoadConglomerate and loadConglomerate interface.
0: 
0: 	Scan implements ScanController, this class just implements the
0: 	RowSource interface. 
0: 
0: */
0: public class SortBufferRowSource extends Scan
0: 		implements ScanControllerRowSource
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	The Sort buffer where rows come from
0: 	**/
0: 	SortBuffer sortBuffer = null;
0: 
0: 	/**
0: 	The TransactionManager that opened this scan.
0: 	**/
0: 	protected TransactionManager tran = null;
0: 
0: 	private int			 maxFreeListSize;
0: 	private boolean		 writingToDisk;
0: 	private SortObserver sortObserver;
0: 
0: 	/*
0: 	 * Constructors.
0: 	 */
0: 
0: 	SortBufferRowSource(
0:     SortBuffer          sortBuffer, 
0:     TransactionManager  tran, 
0:     SortObserver        sortObserver,
0:     boolean             writingToDisk, 
0:     int                 maxFreeListSize)
0: 	{
0: 		super();
0: 		this.sortBuffer = sortBuffer;
0: 		this.tran = tran;
0: 		this.sortObserver = sortObserver;
0: 		this.writingToDisk = writingToDisk;
0: 		this.maxFreeListSize = maxFreeListSize;
0: 	}
0: 
0: 	/* Private/Protected methods of This class: */
0:     /* Public Methods of This class: */
0:     /* Public Methods of RowSource class: */
0: 
0:     public DataValueDescriptor[] getNextRowFromRowSource()
0:     {
0: 		if (sortBuffer == null)	// has been closed
0: 			return null;
0: 
0: 		DataValueDescriptor[] retval = sortBuffer.removeFirst();
0: 
0: 		// Return the removed object to the free DataValueDescriptor[]
0: 		if (retval != null && writingToDisk)
0: 		{
0: 			sortObserver.addToFreeList(retval, maxFreeListSize);
0: 		}
0: 		return retval;
0: 	  }
0: 
0: 	public boolean needsRowLocation()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * @see RowSource#needsToClone
0: 	 */
0: 	public boolean needsToClone()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	public void rowLocation(RowLocation rl)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("unexpected call to RowSource.rowLocation");
0: 	}
0: 
0: 
0: 	/**
0: 		All columns are always set from a sorter
0: 	*/
0: 	public FormatableBitSet getValidColumns()
0: 	{
0: 		return null;
0: 	}
0: 
0: 	/**
0: 		Close the scan
0: 	 */
0: 	public void close()
0: 	{
0: 		if (sortBuffer != null)
0: 		{
0: 			sortBuffer.close();
0: 			sortBuffer = null;
0: 		}
0: 		tran.closeMe(this);
0: 	}
0: 
0: 	/**
0: 		Close the scan
0: 	 */
0: 	public boolean closeForEndTransaction(boolean closeHeldScan)
0: 	{
0:         if (SanityManager.DEBUG)
0:             SanityManager.ASSERT(
0:                 closeHeldScan, 
0:                 "Sort scan should not be held open across commit.");
0: 
0:         close();
0:         return(true);
0:     }
0: 
0: 	/**
0: 		Close the rowSource
0: 	 */
0: 	public void closeRowSource()
0: 	{
0: 		close();
0: 	}
0: 
0: 	/*
0: 	 * Disable illegal and dangerous scan controller interface call
0: 	 */
0: 	public boolean next() throws StandardException
0: 	{
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0: 	}
0: 
0:     public void fetch(DataValueDescriptor[] result) throws StandardException
0: 	{
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0: 	}
0: 
0:     public final boolean fetchNext(DataValueDescriptor[] row) 
0:         throws StandardException
0: 	{
0:         throw StandardException.newException(
0:                 SQLState.SORT_IMPROPER_SCAN_METHOD);
0: 	}
0: 
0: }
============================================================================