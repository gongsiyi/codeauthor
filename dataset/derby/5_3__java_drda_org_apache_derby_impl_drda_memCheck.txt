1:eac0369: /*
5:eac0369: 
1:d7258ed:    Derby - Class org.apache.derby.impl.drda.memCheck
1:d7258ed: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
1:d7258ed: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.drda;
1:eac0369: 
1:eac0369: import java.util.Date;
1:eac0369: 
1:141cd31: public class memCheck extends Thread {
1:4f996a4:     int delay = 200000;
1:4f996a4:     boolean stopNow = false;
1:eac0369: 
1:eac0369: public memCheck () {}
1:eac0369: 
1:eac0369: public  memCheck (int num) {
1:4f996a4:     delay = num;
6:eac0369: }
1:eac0369: 
1:eac0369: public void run () {
1:4f996a4:     while (stopNow == false) {
1:4f996a4:         try {
1:4f996a4:             showmem();
1:4f996a4:             sleep(delay);
1:4f996a4:         } catch (java.lang.InterruptedException ie) {
1:4f996a4:             System.out.println("memcheck interrupted");
1:4f996a4:             stopNow = true;
1:4f996a4:         }
1:4f996a4:     }
1:eac0369: }
1:eac0369: 
1:4f996a4:     public static String getMemInfo() {
1:4f996a4:     Runtime rt = null;
1:4f996a4:     rt = Runtime.getRuntime();
1:4f996a4:     rt.gc();
1:4f996a4:     return "total memory: " 
1:4f996a4:         + rt.totalMemory()
1:4f996a4:         + " free: "
1:4f996a4:         + rt.freeMemory();
1:4f996a4:     
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     public static long totalMemory() {
1:4f996a4:         Runtime rt = Runtime.getRuntime();
1:4f996a4:         return rt.totalMemory();
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     public static long freeMemory() {
1:4f996a4:         
1:4f996a4:         Runtime rt =  Runtime.getRuntime();
1:4f996a4:         rt.gc();
1:4f996a4:         return rt.freeMemory();
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     public static void showmem() {
1:4f996a4:     Date d = null;
1:4f996a4:     d = new Date();
1:4f996a4:     System.out.println(getMemInfo() + " " + d.toString());
1:eac0369: 
1:eac0369: }
1:eac0369: 
1:eac0369: public static void main (String argv[]) {
1:4f996a4:     System.out.println("memCheck starting");
1:4f996a4:     memCheck mc = new memCheck();
1:4f996a4:     mc.run();
1:eac0369: }
1:eac0369: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     int delay = 200000;
1:     boolean stopNow = false;
1:     delay = num;
1:     while (stopNow == false) {
1:         try {
1:             showmem();
1:             sleep(delay);
1:         } catch (java.lang.InterruptedException ie) {
1:             System.out.println("memcheck interrupted");
1:             stopNow = true;
1:         }
1:     }
1:     public static String getMemInfo() {
1:     Runtime rt = null;
1:     rt = Runtime.getRuntime();
1:     rt.gc();
1:     return "total memory: " 
1:         + rt.totalMemory()
1:         + " free: "
1:         + rt.freeMemory();
1:     
1:     }
1:     public static long totalMemory() {
1:         Runtime rt = Runtime.getRuntime();
1:         return rt.totalMemory();
1:     }
1:     public static long freeMemory() {
1:         
1:         Runtime rt =  Runtime.getRuntime();
1:         rt.gc();
1:         return rt.freeMemory();
1:     }
1:     public static void showmem() {
1:     Date d = null;
1:     d = new Date();
1:     System.out.println(getMemInfo() + " " + d.toString());
1:     System.out.println("memCheck starting");
1:     memCheck mc = new memCheck();
1:     mc.run();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.drda.memCheck
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
1: public class memCheck extends Thread {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
1: import java.util.Date;
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
1: 
0: public class memCheck extends Thread { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 	int delay = 200000;
0: 	boolean stopNow = false;
1: 
1: public memCheck () {}
1: 
1: public  memCheck (int num) {
0: 	delay = num;
1: }
1: 
1: public void run () {
0: 	while (stopNow == false) {
0: 		try {
0: 			showmem();
0: 			sleep(delay);
0: 		} catch (java.lang.InterruptedException ie) {
0: 			System.out.println("memcheck interrupted");
0: 			stopNow = true;
1: 		}
1: 	}
1: }
1: 
0: 	public static String getMemInfo() {
0: 	Runtime rt = null;
0: 	rt = Runtime.getRuntime();
0: 	rt.gc();
0: 	return "total memory: " 
0: 		+ rt.totalMemory()
0: 		+ " free: "
0: 		+ rt.freeMemory();
1: 	
1: 	}
1: 
0: 	public static long totalMemory() {
0: 		Runtime rt = Runtime.getRuntime();
0: 		return rt.totalMemory();
1: 	}
1: 
0: 	public static long freeMemory() {
1: 		
0: 		Runtime rt =  Runtime.getRuntime();
0: 		rt.gc();
0: 		return rt.freeMemory();
1: 	}
1: 
0: 	public static void showmem() {
0: 	Date d = null;
0: 	d = new Date();
0: 	System.out.println(getMemInfo() + " " + d.toString());
1: 
1: }
1: 
1: public static void main (String argv[]) {
0: 	System.out.println("memCheck starting");
0: 	memCheck mc = new memCheck();
0: 	mc.run();
1: }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.drda
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.drda;
0: 
0: import java.util.Date;
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 
0: public class memCheck extends Thread { private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 	int delay = 200000;
0: 	boolean stopNow = false;
0: 
0: public memCheck () {}
0: 
0: public  memCheck (int num) {
0: 	delay = num;
0: }
0: 
0: public void run () {
0: 	while (stopNow == false) {
0: 		try {
0: 			showmem();
0: 			sleep(delay);
0: 		} catch (java.lang.InterruptedException ie) {
0: 			System.out.println("memcheck interrupted");
0: 			stopNow = true;
0: 		}
0: 	}
0: }
0: 
0: 	public static String getMemInfo() {
0: 	Runtime rt = null;
0: 	rt = Runtime.getRuntime();
0: 	rt.gc();
0: 	return "total memory: " 
0: 		+ rt.totalMemory()
0: 		+ " free: "
0: 		+ rt.freeMemory();
0: 	
0: 	}
0: 
0: 	public static long totalMemory() {
0: 		Runtime rt = Runtime.getRuntime();
0: 		return rt.totalMemory();
0: 	}
0: 
0: 	public static long freeMemory() {
0: 		
0: 		Runtime rt =  Runtime.getRuntime();
0: 		rt.gc();
0: 		return rt.freeMemory();
0: 	}
0: 
0: 	public static void showmem() {
0: 	Date d = null;
0: 	d = new Date();
0: 	System.out.println(getMemInfo() + " " + d.toString());
0: 
0: }
0: 
0: public static void main (String argv[]) {
0: 	System.out.println("memCheck starting");
0: 	memCheck mc = new memCheck();
0: 	mc.run();
0: }
0: }
============================================================================