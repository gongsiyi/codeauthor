1:48a9884: /*
1:fa292b9: 
1:48a9884: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6
1:60edeb0: 
1:48a9884: Licensed to the Apache Software Foundation (ASF) under one or more
1:48a9884: contributor license agreements.  See the NOTICE file distributed with
1:48a9884: this work for additional information regarding copyright ownership.
1:48a9884: The ASF licenses this file to You under the Apache License, Version 2.0
1:48a9884: (the "License"); you may not use this file except in compliance with
1:48a9884: the License.  You may obtain a copy of the License at
6:a61fd53: 
1:48a9884:    http://www.apache.org/licenses/LICENSE-2.0
1:a61fd53: 
1:48a9884: Unless required by applicable law or agreed to in writing, software
1:48a9884: distributed under the License is distributed on an "AS IS" BASIS,
1:48a9884: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:48a9884: See the License for the specific language governing permissions and
1:48a9884: limitations under the License.
1:a61fd53: 
1:b05fa6e: */
1:48a9884: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:60edeb0: 
1:a61fd53: import java.lang.reflect.Method;
1:1ae02c9: import java.sql.ResultSet;
1:48a9884: import java.sql.SQLException;
1:48a9884: import java.sql.Statement;
1:48a9884: import junit.framework.Test;
1:a61fd53: import org.apache.derby.catalog.TypeDescriptor;
1:1ae02c9: import org.apache.derby.catalog.types.RoutineAliasInfo;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:60edeb0: 
1:60edeb0: /**
1:48a9884:  * Upgrade test cases for 10.6.
1:48a9884:  * If the old version is 10.6 or later then these tests
1:48a9884:  * will not be run.
1:48a9884:  * <BR>
1:48a9884:     10.6 Upgrade issues
1:60edeb0: 
1:48a9884:     <UL>
1:48a9884:     <LI> testSetXplainSchemaProcedure - DERBY-2487
1:48a9884:     Make sure that SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA can only be run in Derby
1:48a9884:     10.5 and higher.
1:48a9884:     </UL>
1:60edeb0: 
1:60edeb0:  */
1:48a9884: public class Changes10_6 extends UpgradeChange {
1:60edeb0: 
1:48a9884:     private static  final   String  BAD_SYNTAX = "42X01";
1:b05fa6e:     private static  final   String  TABLE_DOES_NOT_EXIST = "42X05";
1:fa292b9:     private static  final   String  UPGRADE_REQUIRED = "XCL47";
1:60edeb0: 
1:b05fa6e:     private static  final   String  QUERY_4215 =
1:b05fa6e:         "select r.grantor\n" +
1:b05fa6e:         "from sys.sysroutineperms r, sys.sysaliases a\n" +
1:b05fa6e:         "where r.aliasid = a.aliasid\n" +
1:b05fa6e:         "and a.alias = 'SYSCS_INPLACE_COMPRESS_TABLE'\n"
1:b05fa6e:         ;
1:60edeb0: 
1:fa292b9:     private static final   String CREATE_TYPE_DDL = "create type fooType external name 'mypackage.foo' language java\n";
1:fa292b9:     private static final   String DROP_TYPE_DDL = "drop type fooType restrict\n";
1:8c305e2: 
1:1ede0a8:     static final String HASH_ALGORITHM_PROPERTY =
1:8c305e2:             "derby.authentication.builtin.algorithm";
1:8c305e2: 
1:48a9884:     public Changes10_6(String name) {
1:48a9884:         super(name);
1:60edeb0:     }
1:60edeb0: 
1:8c305e2:     /**
1:48a9884:      * Return the suite of tests to test the changes made in 10.6.
1:48a9884:      * @param phase an integer that indicates the current phase in
1:48a9884:      *              the upgrade test.
1:48a9884:      * @return the test suite created.
1:8c305e2:      */
1:48a9884:     public static Test suite(int phase) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Upgrade test for 10.6");
1:60edeb0: 
1:48a9884:         suite.addTestSuite(Changes10_6.class);
1:48a9884:         return new SupportFilesSetup((Test) suite);
1:60edeb0:     }
1:60edeb0: 
1:60edeb0: 
1:60edeb0:     /**
1:48a9884:      * Make sure that SYSCS_UTIL.SYSCS_SET_XPLAIN_STYLE can only be run in 
1:48a9884:      * Derby 10.5 and higher. 
1:48a9884:      * DERBY-2487
1:48a9884:      * Test added for 10.5.
1:48a9884:      * @throws SQLException
3:60edeb0:      *
1:60edeb0:      */
1:48a9884:     public void testSetXplainStyleProcedure() throws SQLException
1:48a9884:     {
1:48a9884:         String []xplainProcedures = {
1:48a9884:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA('XPLAIN')",
1:48a9884:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA('')",
1:48a9884:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE(1)",
1:48a9884:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE(0)",
1:48a9884:             "values SYSCS_UTIL.SYSCS_GET_XPLAIN_SCHEMA()",
1:48a9884:             "values SYSCS_UTIL.SYSCS_GET_XPLAIN_MODE()",
1:60edeb0:         };
1:48a9884:     	Statement s;
1:48a9884:         //ERROR 42Y03: 'SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE' is not
1:48a9884:         // recognized as a function or procedure.
1:48a9884:         switch (getPhase())
1:48a9884:         {
1:48a9884:         case PH_SOFT_UPGRADE: // In soft-upgrade cases, XPLAIN should fail:
1:48a9884:         case PH_POST_SOFT_UPGRADE:
1:48a9884:             s = createStatement();
1:48a9884:             for (int i = 0; i < xplainProcedures.length; i++)
1:48a9884:                 assertStatementError("42Y03", s, xplainProcedures[i]);
1:48a9884:             s.close();
1:48a9884:             break;
1:60edeb0: 
1:48a9884:         case PH_HARD_UPGRADE: // After hard upgrade, XPLAIN should work:
1:48a9884:             s = createStatement();
1:48a9884:             for (int i = 0; i < xplainProcedures.length; i++)
1:48a9884:                 s.execute(xplainProcedures[i]);
1:48a9884:             s.close();
1:48a9884:             break;
1:60edeb0:         }
1:60edeb0:     }
1:60edeb0: 
1:60edeb0:     /**
1:a61fd53:      * Make sure that SYSIBM.CLOBGETSUBSTRING has the correct return value.
1:a61fd53:      * See https://issues.apache.org/jira/browse/DERBY-4214
1:60edeb0:      */
1:a61fd53:     public void testCLOBGETSUBSTRING() throws Exception
1:a61fd53:     {
1:a61fd53:         Version initialVersion = new Version( getOldMajor(), getOldMinor(), 0, 0 );
1:a61fd53:         Version firstVersionHavingThisFunction = new Version( 10, 3, 0, 0 );
1:a61fd53:         Version firstVersionHavingCorrectReturnType = new Version( 10, 5, 0, 0 );
1:a61fd53:         int     wrongLength = 32672;
1:a61fd53:         int     correctLength = 10890;
1:a61fd53:         int     actualJdbcType;
1:a61fd53:         int     actualLength;
1:60edeb0:         
1:a61fd53:         Object   returnType;
1:60edeb0: 
1:a61fd53:         boolean hasFunction = initialVersion.compareTo( firstVersionHavingThisFunction ) >= 0;
1:a61fd53:         boolean hasCorrectReturnType = initialVersion.compareTo( firstVersionHavingCorrectReturnType ) >= 0;
1:b05fa6e:         
1:a61fd53:     	Statement s = createStatement();
1:a61fd53:         ResultSet rs = s.executeQuery
1:a61fd53:             (
1:a61fd53:              "select a.aliasinfo\n" +
1:a61fd53:              "from sys.sysschemas s, sys.sysaliases a\n" +
1:a61fd53:              "where s.schemaid = a.schemaid\n" +
1:a61fd53:              "and s.schemaname = 'SYSIBM'\n" +
1:a61fd53:              "and alias = 'CLOBGETSUBSTRING'\n"
1:a61fd53:              );
1:a61fd53:         rs.next();
1:a61fd53:         
1:a61fd53:         switch (getPhase())
1:a61fd53:         {
1:a61fd53:         case PH_CREATE:
1:a61fd53:         case PH_SOFT_UPGRADE:
1:a61fd53:         case PH_POST_SOFT_UPGRADE:
1:a61fd53:             
1:a61fd53:             if ( !hasFunction ) { break; }
1:a61fd53: 
1:a61fd53:             returnType = getTypeDescriptor( rs.getObject( 1 ) );
1:a61fd53:             actualJdbcType = getJDBCTypeId( returnType );
1:a61fd53:             actualLength = getMaximumWidth( returnType );
1:a61fd53:             int              expectedLength = hasCorrectReturnType ? correctLength : wrongLength;
1:a61fd53: 
1:a61fd53:             assertEquals( java.sql.Types.VARCHAR, actualJdbcType );
1:a61fd53:             assertEquals( expectedLength, actualLength );
1:a61fd53:             
1:a61fd53:             break;
1:a61fd53: 
1:a61fd53:         case PH_HARD_UPGRADE:
1:b05fa6e: 
1:a61fd53:             RoutineAliasInfo rai = (RoutineAliasInfo) rs.getObject( 1 );
1:a61fd53:             TypeDescriptor   td = (TypeDescriptor) rai.getReturnType();
1:a61fd53: 
1:a61fd53:             assertEquals( java.sql.Types.VARCHAR, td.getJDBCTypeId() );
1:a61fd53:             assertEquals( correctLength, td.getMaximumWidth() );
1:a61fd53:             
1:a61fd53:             break;
1:60edeb0:         }
1:a61fd53: 
1:a61fd53:         rs.close();
1:a61fd53:         s.close();
1:60edeb0:     }
1:a61fd53: 
1:60edeb0:     /**
1:b05fa6e:      * Make sure that SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE  has the correct
1:b05fa6e:      * permissons granted to it.
1:b05fa6e:      * See https://issues.apache.org/jira/browse/DERBY-4215
1:60edeb0:      */
1:b05fa6e:     public void testSYSCS_INPLACE_COMPRESS_TABLE() throws Exception
1:b05fa6e:     {
1:b05fa6e:         Version initialVersion = new Version( getOldMajor(), getOldMinor(), 0, 0 );
1:b05fa6e:         Version firstVersionHavingPermissions = new Version( 10, 2, 0, 0 );
1:b05fa6e:         boolean beforePermissionsWereAdded = ( initialVersion.compareTo( firstVersionHavingPermissions ) < 0 );
1:b05fa6e:         
1:b05fa6e:     	Statement s = createStatement();
1:b05fa6e:         
1:b05fa6e:         switch (getPhase())
1:b05fa6e:         {
1:b05fa6e:         case PH_CREATE:
1:b05fa6e:         case PH_SOFT_UPGRADE:
1:b05fa6e:         case PH_POST_SOFT_UPGRADE:
1:b05fa6e:             
1:b05fa6e:             if ( beforePermissionsWereAdded )
1:b05fa6e:             {
1:b05fa6e:                 assertStatementError( TABLE_DOES_NOT_EXIST, s, QUERY_4215 );
1:b05fa6e:             }
1:b05fa6e:             else
1:b05fa6e:             {
1:b05fa6e:                 vetDERBY_4215( s );
1:b05fa6e:             }
1:b05fa6e: 
1:b05fa6e:             break;
1:b05fa6e: 
1:b05fa6e:         case PH_HARD_UPGRADE:
1:b05fa6e: 
1:b05fa6e:             vetDERBY_4215( s );
1:b05fa6e:             
1:b05fa6e:             break;
1:b05fa6e:         }
1:b05fa6e: 
1:b05fa6e:         s.close();
1:b05fa6e:     }
1:fa292b9:     /**
1:b05fa6e:      * Vet the permissions on SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE.
1:b05fa6e:      * There should be only one permissions tuple for this system procedure and
1:b05fa6e:      * the grantor should be APP.
1:b05fa6e:      */
1:b05fa6e:     private void vetDERBY_4215( Statement s ) throws Exception
1:b05fa6e:     {
1:b05fa6e:         String    expectedGrantor = "APP";
1:b05fa6e:         ResultSet rs = s.executeQuery( QUERY_4215 );
1:b05fa6e: 
1:b05fa6e:         assertTrue( rs.next() );
1:b05fa6e: 
1:b05fa6e:         String actualGrantor = rs.getString( 1 );
1:b05fa6e:         assertEquals( expectedGrantor, actualGrantor );
1:b05fa6e: 
1:b05fa6e:         assertFalse( rs.next() );
1:b05fa6e: 
1:b05fa6e:         rs.close();
1:b05fa6e:     }
1:b05fa6e: 
1:b05fa6e:     /**
1:fa292b9:      * Make sure that you can only create UDTs in a hard-upgraded database.
1:fa292b9:      * See https://issues.apache.org/jira/browse/DERBY-651
1:fa292b9:      */
1:fa292b9:     public void testUDTs() throws Exception
1:fa292b9:     {        
1:fa292b9:     	Statement s = createStatement();
1:fa292b9: 
1:fa292b9:         int phase = getPhase();
1:fa292b9: 
1:fa292b9:         //println( "Phase = " + phase );
1:fa292b9:         
1:fa292b9:         switch ( phase )
1:fa292b9:         {
1:fa292b9:         case PH_CREATE:
1:fa292b9:         case PH_POST_SOFT_UPGRADE:
1:fa292b9:             
1:fa292b9:             assertStatementError( BAD_SYNTAX, s, CREATE_TYPE_DDL );
1:fa292b9:             assertStatementError( BAD_SYNTAX, s, DROP_TYPE_DDL );
1:fa292b9:             
1:fa292b9:             break;
1:fa292b9: 
1:fa292b9:         case PH_SOFT_UPGRADE:
1:fa292b9: 
1:fa292b9:             assertStatementError( UPGRADE_REQUIRED, s, CREATE_TYPE_DDL );
1:fa292b9:             assertStatementError( UPGRADE_REQUIRED, s, DROP_TYPE_DDL );
1:fa292b9:             
1:fa292b9:             break;
1:fa292b9: 
1:fa292b9:         case PH_HARD_UPGRADE:
1:fa292b9: 
1:fa292b9:             s.execute( CREATE_TYPE_DDL );
1:fa292b9:             s.execute( DROP_TYPE_DDL );
1:fa292b9:             
1:fa292b9:             break;
1:fa292b9:         }
1:fa292b9: 
1:fa292b9:         s.close();
1:fa292b9:     }
1:fa292b9: 
1:b05fa6e:     
1:b05fa6e:     /**
1:a61fd53:      * We would like to just cast the alias descriptor to
1:a61fd53:      * RoutineAliasDescriptor. However, this doesn't work if we are running on
1:a61fd53:      * an old version because the descriptor comes from a different class
1:a61fd53:      * loader. We use reflection to get the information we need.
2:a61fd53:      */
1:a61fd53:     private Object getTypeDescriptor( Object routineAliasDescriptor )
1:a61fd53:         throws Exception
1:a61fd53:     {
1:a61fd53:         Method  meth = routineAliasDescriptor.getClass().getMethod( "getReturnType", null );
1:a61fd53: 
1:a61fd53:         return meth.invoke( routineAliasDescriptor, null );
5:a61fd53:     }
1:a61fd53:     private int getJDBCTypeId( Object typeDescriptor )
1:a61fd53:         throws Exception
1:a61fd53:     {
1:a61fd53:         Method  meth = typeDescriptor.getClass().getMethod( "getJDBCTypeId", null );
1:a61fd53: 
1:a61fd53:         return ((Integer) meth.invoke( typeDescriptor, null )).intValue();
1:60edeb0:     }
1:a61fd53:     private int getMaximumWidth( Object typeDescriptor )
1:a61fd53:         throws Exception
1:a61fd53:     {
1:a61fd53:         Method  meth = typeDescriptor.getClass().getMethod( "getMaximumWidth", null );
1:60edeb0: 
1:a61fd53:         return ((Integer) meth.invoke( typeDescriptor, null )).intValue();
1:60edeb0:     }
1:60edeb0: 
1:60edeb0:     /**
1:8c305e2:      * Verify that we don't enable the configurable hash authentication
1:8c305e2:      * scheme when we upgrade a database. See DERBY-4483.
1:60edeb0:      */
1:8c305e2:     public void testBuiltinAuthenticationHashNotChangedOnUpgrade()
1:8c305e2:             throws SQLException {
1:8c305e2:         // We enable the configurable hash authentication scheme by setting
1:8c305e2:         // a property, so check that it's NULL in all phases to verify that
1:8c305e2:         // it's not enabled on upgrade.
1:8c305e2:         assertNull(getDatabaseProperty(HASH_ALGORITHM_PROPERTY));
1:8c305e2:     }
1:8c305e2: 
1:60edeb0: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import org.apache.derby.catalog.types.RoutineAliasInfo;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Upgrade test for 10.6");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1ede0a8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static final String HASH_ALGORITHM_PROPERTY =
/////////////////////////////////////////////////////////////////////////
commit:1ef6837
/////////////////////////////////////////////////////////////////////////
0:         { "sam", "fireman", "SHA-1",
0:                   "3b6197160362c0122fcd7a63a9da58fd0781140901fb:SHA-1"
commit:8c305e2
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final String HASH_ALGORITHM_PROPERTY =
1:             "derby.authentication.builtin.algorithm";
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Verify that we don't enable the configurable hash authentication
1:      * scheme when we upgrade a database. See DERBY-4483.
1:      */
1:     public void testBuiltinAuthenticationHashNotChangedOnUpgrade()
1:             throws SQLException {
1:         // We enable the configurable hash authentication scheme by setting
1:         // a property, so check that it's NULL in all phases to verify that
1:         // it's not enabled on upgrade.
1:         assertNull(getDatabaseProperty(HASH_ALGORITHM_PROPERTY));
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:             cs.setString(1, HASH_ALGORITHM_PROPERTY);
commit:60edeb0
/////////////////////////////////////////////////////////////////////////
0: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Make sure builtin authentication only uses the new configurable hash
0:      * scheme in hard-upgraded databases. See DERBY-4483.
1:      */
0:     public void testBuiltinAuthenticationWithConfigurableHash()
0:             throws SQLException {
1: 
0:         // This test needs to enable authentication, which is not supported
0:         // in the default database for the upgrade tests, so roll our own.
0:         DataSource ds = JDBCDataSource.getDataSourceLogical("BUILTIN_10_6");
1: 
0:         // Add create=true or upgrade=true, as appropriate, since we don't
0:         // get this for free when we don't use the default database.
0:         if (getPhase() == PH_CREATE) {
0:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
0:         } else if (getPhase() == PH_HARD_UPGRADE) {
0:             JDBCDataSource.setBeanProperty(
0:                     ds, "connectionAttributes", "upgrade=true");
1:         }
1: 
0:         // Connect as database owner, possibly creating or upgrading the
0:         // database.
0:         Connection c = ds.getConnection("dbo", "the boss");
1: 
0:         // Let's first verify that all the users can connect after the changes
0:         // in the previous phase. Would for instance fail in post soft upgrade
0:         // if soft upgrade saved passwords using the new scheme.
0:         verifyCanConnect(ds);
1: 
0:         CallableStatement setProp = c.prepareCall(
0:                 "call syscs_util.syscs_set_database_property(?, ?)");
1: 
0:         if (getPhase() == PH_CREATE) {
0:             // The database is being created. Make sure that builtin
0:             // authentication is enabled.
1: 
0:             setProp.setString(1, "derby.connection.requireAuthentication");
0:             setProp.setString(2, "true");
0:             setProp.execute();
1: 
0:             setProp.setString(1, "derby.authentication.provider");
0:             setProp.setString(2, "BUILTIN");
0:             setProp.execute();
1:         }
1: 
0:         // Set (or reset) passwords for all users.
0:         setPasswords(setProp);
0:         setProp.close();
1: 
0:         // We should still be able to connect.
0:         verifyCanConnect(ds);
1: 
0:         // Check that the passwords are stored using the expected scheme (new
0:         // configurable hash scheme in hard upgrade, old scheme otherwise).
0:         verifyPasswords(c, getPhase() == PH_HARD_UPGRADE);
1: 
0:         c.close();
1: 
0:         // The framework doesn't know how to shutdown a database using
0:         // authentication, so do it manually as database owner here.
0:         JDBCDataSource.setBeanProperty(ds, "user", "dbo");
0:         JDBCDataSource.setBeanProperty(ds, "password", "the boss");
0:         JDBCDataSource.shutdownDatabase(ds);
1:     }
1: 
1:     /**
0:      * Information about users for the test of builtin authentication with
0:      * configurable hash algorithm. Two-dimensional array of strings where
0:      * each row contains (1) a user name, (2) a password, (3) the name of a
0:      * digest algorithm with which the password should be hashed, (4) the
0:      * hashed password when the old scheme is used, and (5) the hashed
0:      * password when the new scheme is used.
1:      */
0:     private static final String[][] USERS = {
0:         { "dbo", "the boss", null,
0:                   "3b6071d99b1d48ab732e75a8de701b6c77632db65898",
0:                   "3b6071d99b1d48ab732e75a8de701b6c77632db65898"
0:         },
0:         { "pat", "postman", "MD5",
0:                   "3b609129e181a7f7527697235c8aead65c461a0257f3",
0:                   "3b61aaca567ed43d1ba2e6402cbf1a723407:MD5"
0:         },
0:         { "sam", "fireman", "SHA-256",
0:                   "3b609e5173cfa03620061518adc92f2a58c7b15cf04f",
0:                   "3b61aff1a3f161b6c0ce856c4ce99ce6d779bad9cc1" +
0:                   "44136099bc4b2b0742ed87899:SHA-256"
0:         },
1:     };
1: 
1:     /**
0:      * Set the passwords for all users specified in {@code USERS}.
1:      *
0:      * @param cs a callable statement that sets database properties
1:      */
0:     private void setPasswords(CallableStatement cs) throws SQLException {
0:         for (int i = 0; i < USERS.length; i++) {
0:             // Use the specified algorithm, if possible. (Will be ignored if
0:             // the data dictionary doesn't support the new scheme.)
0:             cs.setString(1, "derby.authentication.builtin.algorithm");
0:             cs.setString(2, USERS[i][2]);
0:             cs.execute();
0:             // Set the password.
0:             cs.setString(1, "derby.user." + USERS[i][0]);
0:             cs.setString(2, USERS[i][1]);
0:             cs.execute();
1:         }
1:     }
1: 
1:     /**
0:      * Verify that all passwords for the users in {@code USERS} are stored
0:      * as expected. Raise an assert failure on mismatch.
1:      *
0:      * @param c a connection to the database
0:      * @param newScheme if {@code true}, the passwords are expected to have
0:      * been hashed with the new scheme; otherwise, the passwords are expected
0:      * to have been hashed with the old scheme
1:      */
0:     private void verifyPasswords(Connection c, boolean newScheme)
0:             throws SQLException {
0:         PreparedStatement ps = c.prepareStatement(
0:                 "values syscs_util.syscs_get_database_property(?)");
0:         for (int i = 0; i < USERS.length; i++) {
0:             String expectedToken = USERS[i][newScheme ? 4 : 3];
0:             ps.setString(1, "derby.user." + USERS[i][0]);
0:             JDBC.assertSingleValueResultSet(ps.executeQuery(), expectedToken);
1:         }
0:         ps.close();
1:     }
1: 
1:     /**
0:      * Verify that all users specified in {@code USERS} can connect to the
0:      * database.
1:      *
0:      * @param ds a data source for connecting to the database
0:      * @throws SQLException if one of the users cannot connect to the database
1:      */
0:     private void verifyCanConnect(DataSource ds) throws SQLException {
0:         for (int i = 0; i < USERS.length; i++) {
0:             Connection c = ds.getConnection(USERS[i][0], USERS[i][1]);
0:             c.close();
1:         }
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:fa292b9
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  UPGRADE_REQUIRED = "XCL47";
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static final   String CREATE_TYPE_DDL = "create type fooType external name 'mypackage.foo' language java\n";
1:     private static final   String DROP_TYPE_DDL = "drop type fooType restrict\n";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Make sure that you can only create UDTs in a hard-upgraded database.
1:      * See https://issues.apache.org/jira/browse/DERBY-651
1:      */
1:     public void testUDTs() throws Exception
1:     {        
1:     	Statement s = createStatement();
1: 
1:         int phase = getPhase();
1: 
1:         //println( "Phase = " + phase );
1:         
1:         switch ( phase )
1:         {
1:         case PH_CREATE:
1:         case PH_POST_SOFT_UPGRADE:
1:             
1:             assertStatementError( BAD_SYNTAX, s, CREATE_TYPE_DDL );
1:             assertStatementError( BAD_SYNTAX, s, DROP_TYPE_DDL );
1:             
1:             break;
1: 
1:         case PH_SOFT_UPGRADE:
1: 
1:             assertStatementError( UPGRADE_REQUIRED, s, CREATE_TYPE_DDL );
1:             assertStatementError( UPGRADE_REQUIRED, s, DROP_TYPE_DDL );
1:             
1:             break;
1: 
1:         case PH_HARD_UPGRADE:
1: 
1:             s.execute( CREATE_TYPE_DDL );
1:             s.execute( DROP_TYPE_DDL );
1:             
1:             break;
1:         }
1: 
1:         s.close();
1:     }
1: 
commit:b05fa6e
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  TABLE_DOES_NOT_EXIST = "42X05";
1:     private static  final   String  QUERY_4215 =
1:         "select r.grantor\n" +
1:         "from sys.sysroutineperms r, sys.sysaliases a\n" +
1:         "where r.aliasid = a.aliasid\n" +
1:         "and a.alias = 'SYSCS_INPLACE_COMPRESS_TABLE'\n"
1:         ;
1:     
/////////////////////////////////////////////////////////////////////////
1:      * Make sure that SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE  has the correct
1:      * permissons granted to it.
1:      * See https://issues.apache.org/jira/browse/DERBY-4215
1:      */
1:     public void testSYSCS_INPLACE_COMPRESS_TABLE() throws Exception
1:     {
1:         Version initialVersion = new Version( getOldMajor(), getOldMinor(), 0, 0 );
1:         Version firstVersionHavingPermissions = new Version( 10, 2, 0, 0 );
1:         boolean beforePermissionsWereAdded = ( initialVersion.compareTo( firstVersionHavingPermissions ) < 0 );
1:         
1:     	Statement s = createStatement();
1:         
1:         switch (getPhase())
1:         {
1:         case PH_CREATE:
1:         case PH_SOFT_UPGRADE:
1:         case PH_POST_SOFT_UPGRADE:
1:             
1:             if ( beforePermissionsWereAdded )
1:             {
1:                 assertStatementError( TABLE_DOES_NOT_EXIST, s, QUERY_4215 );
1:             }
1:             else
1:             {
1:                 vetDERBY_4215( s );
1:             }
1: 
1:             break;
1: 
1:         case PH_HARD_UPGRADE:
1: 
1:             vetDERBY_4215( s );
1:             
1:             break;
1:         }
1: 
1:         s.close();
1:     }
1: 
1:     /**
1:      * Vet the permissions on SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE.
1:      * There should be only one permissions tuple for this system procedure and
1:      * the grantor should be APP.
1:      */
1:     private void vetDERBY_4215( Statement s ) throws Exception
1:     {
1:         String    expectedGrantor = "APP";
1:         ResultSet rs = s.executeQuery( QUERY_4215 );
1: 
1:         assertTrue( rs.next() );
1: 
1:         String actualGrantor = rs.getString( 1 );
1:         assertEquals( expectedGrantor, actualGrantor );
1: 
1:         assertFalse( rs.next() );
1: 
1:         rs.close();
1:     }
1: 
1:     
1:     /**
commit:a61fd53
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
0: import java.sql.ResultSet;
0: import org.apache.derby.catalog.types.RoutineAliasInfo;
1: import org.apache.derby.catalog.TypeDescriptor;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Make sure that SYSIBM.CLOBGETSUBSTRING has the correct return value.
1:      * See https://issues.apache.org/jira/browse/DERBY-4214
1:      */
1:     public void testCLOBGETSUBSTRING() throws Exception
1:     {
1:         Version initialVersion = new Version( getOldMajor(), getOldMinor(), 0, 0 );
1:         Version firstVersionHavingThisFunction = new Version( 10, 3, 0, 0 );
1:         Version firstVersionHavingCorrectReturnType = new Version( 10, 5, 0, 0 );
1:         int     wrongLength = 32672;
1:         int     correctLength = 10890;
1:         int     actualJdbcType;
1:         int     actualLength;
1:         
1:         Object   returnType;
1: 
1:         boolean hasFunction = initialVersion.compareTo( firstVersionHavingThisFunction ) >= 0;
1:         boolean hasCorrectReturnType = initialVersion.compareTo( firstVersionHavingCorrectReturnType ) >= 0;
1:         
1:     	Statement s = createStatement();
1:         ResultSet rs = s.executeQuery
1:             (
1:              "select a.aliasinfo\n" +
1:              "from sys.sysschemas s, sys.sysaliases a\n" +
1:              "where s.schemaid = a.schemaid\n" +
1:              "and s.schemaname = 'SYSIBM'\n" +
1:              "and alias = 'CLOBGETSUBSTRING'\n"
1:              );
1:         rs.next();
1:         
1:         switch (getPhase())
1:         {
1:         case PH_CREATE:
1:         case PH_SOFT_UPGRADE:
1:         case PH_POST_SOFT_UPGRADE:
1:             
1:             if ( !hasFunction ) { break; }
1: 
1:             returnType = getTypeDescriptor( rs.getObject( 1 ) );
1:             actualJdbcType = getJDBCTypeId( returnType );
1:             actualLength = getMaximumWidth( returnType );
1:             int              expectedLength = hasCorrectReturnType ? correctLength : wrongLength;
1: 
1:             assertEquals( java.sql.Types.VARCHAR, actualJdbcType );
1:             assertEquals( expectedLength, actualLength );
1:             
1:             break;
1: 
1:         case PH_HARD_UPGRADE:
1: 
1:             RoutineAliasInfo rai = (RoutineAliasInfo) rs.getObject( 1 );
1:             TypeDescriptor   td = (TypeDescriptor) rai.getReturnType();
1: 
1:             assertEquals( java.sql.Types.VARCHAR, td.getJDBCTypeId() );
1:             assertEquals( correctLength, td.getMaximumWidth() );
1:             
1:             break;
1:         }
1: 
1:         rs.close();
1:         s.close();
1:     }
1: 
0:     /**
1:      * We would like to just cast the alias descriptor to
1:      * RoutineAliasDescriptor. However, this doesn't work if we are running on
1:      * an old version because the descriptor comes from a different class
1:      * loader. We use reflection to get the information we need.
1:      */
1:     private Object getTypeDescriptor( Object routineAliasDescriptor )
1:         throws Exception
1:     {
1:         Method  meth = routineAliasDescriptor.getClass().getMethod( "getReturnType", null );
1: 
1:         return meth.invoke( routineAliasDescriptor, null );
1:     }
1:     private int getJDBCTypeId( Object typeDescriptor )
1:         throws Exception
1:     {
1:         Method  meth = typeDescriptor.getClass().getMethod( "getJDBCTypeId", null );
1: 
1:         return ((Integer) meth.invoke( typeDescriptor, null )).intValue();
1:     }
1:     private int getMaximumWidth( Object typeDescriptor )
1:         throws Exception
1:     {
1:         Method  meth = typeDescriptor.getClass().getMethod( "getMaximumWidth", null );
1: 
1:         return ((Integer) meth.invoke( typeDescriptor, null )).intValue();
1:     }
1:     
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6
0: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
0: 
1:    http://www.apache.org/licenses/LICENSE-2.0
0: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
0: 
0: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
0: 
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
0: 
0: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import java.sql.SQLException;
1: import java.sql.Statement;
0: import java.sql.Connection;
0: import java.sql.CallableStatement;
0: 
0: import javax.sql.DataSource;
0: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
0: /**
1:  * Upgrade test cases for 10.6.
1:  * If the old version is 10.6 or later then these tests
1:  * will not be run.
1:  * <BR>
1:     10.6 Upgrade issues
0: 
1:     <UL>
1:     <LI> testSetXplainSchemaProcedure - DERBY-2487
1:     Make sure that SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA can only be run in Derby
1:     10.5 and higher.
1:     </UL>
0: 
0:  */
1: public class Changes10_6 extends UpgradeChange {
0: 
1:     private static  final   String  BAD_SYNTAX = "42X01";
0: 
1:     public Changes10_6(String name) {
1:         super(name);
0:     }
0: 
0:     /**
1:      * Return the suite of tests to test the changes made in 10.6.
1:      * @param phase an integer that indicates the current phase in
1:      *              the upgrade test.
1:      * @return the test suite created.
0:      */
1:     public static Test suite(int phase) {
0:         TestSuite suite = new TestSuite("Upgrade test for 10.6");
0: 
1:         suite.addTestSuite(Changes10_6.class);
1:         return new SupportFilesSetup((Test) suite);
0:     }
0: 
0: 
0:     /**
1:      * Make sure that SYSCS_UTIL.SYSCS_SET_XPLAIN_STYLE can only be run in 
1:      * Derby 10.5 and higher. 
1:      * DERBY-2487
1:      * Test added for 10.5.
1:      * @throws SQLException
0:      *
0:      */
1:     public void testSetXplainStyleProcedure() throws SQLException
1:     {
1:         String []xplainProcedures = {
1:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA('XPLAIN')",
1:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA('')",
1:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE(1)",
1:             "call SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE(0)",
1:             "values SYSCS_UTIL.SYSCS_GET_XPLAIN_SCHEMA()",
1:             "values SYSCS_UTIL.SYSCS_GET_XPLAIN_MODE()",
0:         };
1:     	Statement s;
1:         //ERROR 42Y03: 'SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE' is not
1:         // recognized as a function or procedure.
1:         switch (getPhase())
1:         {
1:         case PH_SOFT_UPGRADE: // In soft-upgrade cases, XPLAIN should fail:
1:         case PH_POST_SOFT_UPGRADE:
1:             s = createStatement();
1:             for (int i = 0; i < xplainProcedures.length; i++)
1:                 assertStatementError("42Y03", s, xplainProcedures[i]);
1:             s.close();
1:             break;
0: 
1:         case PH_HARD_UPGRADE: // After hard upgrade, XPLAIN should work:
1:             s = createStatement();
1:             for (int i = 0; i < xplainProcedures.length; i++)
1:                 s.execute(xplainProcedures[i]);
1:             s.close();
1:             break;
0:         }
0:     }
0: 
0: }
============================================================================