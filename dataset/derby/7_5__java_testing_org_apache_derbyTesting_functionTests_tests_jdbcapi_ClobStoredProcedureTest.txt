2:6aa0b12: /*
1:6aa0b12:  *
1:6aa0b12:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ClobStoredProcedureTest
1:6aa0b12:  *
1:6aa0b12:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6aa0b12:  * contributor license agreements.  See the NOTICE file distributed with
1:6aa0b12:  * this work for additional information regarding copyright ownership.
1:6aa0b12:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6aa0b12:  * (the "License"); you may not use this file except in compliance with
1:6aa0b12:  * the License.  You may obtain a copy of the License at
1:6aa0b12:  *
1:6aa0b12:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6aa0b12:  *
1:6aa0b12:  * Unless required by applicable law or agreed to in writing,
1:6aa0b12:  * software distributed under the License is distributed on an
1:6aa0b12:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:6aa0b12:  * either express or implied. See the License for the specific
1:6aa0b12:  * language governing permissions and limitations under the License.
2:6aa0b12:  */
1:6aa0b12: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
8:6aa0b12: 
1:6aa0b12: 
1:6aa0b12: import java.sql.CallableStatement;
1:6aa0b12: import java.sql.SQLException;
1:6aa0b12: import junit.framework.Test;
1:6aa0b12: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:497f79d: import org.apache.derbyTesting.junit.JDBC;
1:6aa0b12: import org.apache.derbyTesting.junit.TestConfiguration;
1:6aa0b12: 
1:6aa0b12: /**
1:6aa0b12:  * Tests the stored procedures introduced as part of DERBY-208.
1:6aa0b12:  * These stored procedures will used by the Clob methods on the client side.
1:6aa0b12:  */
1:6aa0b12: public class ClobStoredProcedureTest extends BaseJDBCTestCase {
1:6aa0b12: 
1:6aa0b12:     final String testStr = "I am a simple derby test case";
1:6aa0b12:     final long testStrLength = testStr.length();
1:6aa0b12:     /**
1:6aa0b12:      * Public constructor required for running test as standalone JUnit.
1:6aa0b12:      * @param name a string containing the name of the test.
1:6aa0b12:      */
1:6aa0b12:     public ClobStoredProcedureTest(String name) {
1:6aa0b12:         super(name);
7:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Create a suite of tests.
1:6aa0b12:      * @return the test suite created.
1:6aa0b12:      */
1:6aa0b12:     public static Test suite() {
1:497f79d:         if (JDBC.vmSupportsJSR169()) {
1:1ae02c9:             return new BaseTestSuite(
1:1ae02c9:                 "empty: client not supported on JSR169; procs use DriverMgr");
1:497f79d:         }
1:497f79d:         else {
1:497f79d:             return TestConfiguration.defaultSuite(
1:497f79d:                     ClobStoredProcedureTest.class);
1:497f79d:         }
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Setup the test.
1:6aa0b12:      * @throws a SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void setUp() throws Exception {
1:6aa0b12:         int locator = 0;
1:6aa0b12:         getConnection().setAutoCommit(false);
2:6aa0b12:         CallableStatement cs  = prepareCall
2:6aa0b12:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
2:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
2:6aa0b12:         cs.executeUpdate();
2:6aa0b12:         locator = cs.getInt(1);
3:6aa0b12:         cs.close();
2:6aa0b12:         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
2:6aa0b12:         cs.setInt(1, locator);
2:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.setLong(3, testStrLength);
1:6aa0b12:         cs.setString(4, testStr);
1:b6d2a1c:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12:     /**
1:6aa0b12:      * Cleanup the test.
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void tearDown() throws Exception {
1:6aa0b12:         commit();
1:6aa0b12:         super.tearDown();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Test the stored procedure SYSIBM.CLOBGETSUBSTRING
1:6aa0b12:      *
1:6aa0b12:      * @throws an SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void testGetSubStringSP() throws SQLException {
1:6aa0b12:         CallableStatement cs  = prepareCall("? = CALL " +
1:6aa0b12:             "SYSIBM.CLOBGETSUBSTRING(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.VARCHAR);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.setLong(3, 1);
1:6aa0b12:         //get sub-string of length 10 from the clob.
1:6aa0b12:         cs.setInt(4, 10);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         String retVal = cs.getString(1);
1:6aa0b12:         //compare the string that is returned to the sub-string obtained directly
1:6aa0b12:         //from the test string. If found to be equal the stored procedure
1:6aa0b12:         //returns valid values.
1:6aa0b12:         if (testStr.substring(0, 10).compareTo(retVal) != 0) {
1:6aa0b12:             fail("Error SYSIBM.CLOBGETSUBSTRING returns the wrong string");
1:6aa0b12:         }
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the locator value returned by the stored procedure
1:6aa0b12:      * CLOBCREATELOCATOR.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      *
1:6aa0b12:      */
1:6aa0b12:     public void testClobCreateLocatorSP() throws SQLException {
2:6aa0b12:         //initialize the locator to a default value.
2:6aa0b12:         int locator = -1;
2:6aa0b12:         //call the stored procedure to return the created locator.
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         locator = cs.getInt(1);
1:6aa0b12:         //verify if the locator rturned and expected are equal.
1:6aa0b12:         //remember in setup a locator is already created
1:6aa0b12:         //hence expected value is 2
1:6aa0b12:         assertEquals("The locator values returned by " +
1:456b8a1:             "SYSIBM.CLOBCREATELOCATOR() are incorrect", 2, locator);
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the SYSIBM.CLOBRELEASELOCATOR stored procedure.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException
1:6aa0b12:      */
1:6aa0b12:     public void testClobReleaseLocatorSP() throws SQLException {
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("CALL SYSIBM.CLOBRELEASELOCATOR(?)");
1:6aa0b12:         cs.setInt(1, 1);
4:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         //once the locator has been released the CLOBGETLENGTH on that
1:6aa0b12:         //locator value will throw an SQLException. This assures that
1:6aa0b12:         //the locator has been properly released.
1:6aa0b12: 
1:6aa0b12:         cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBGETLENGTH(?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
4:6aa0b12:         try {
1:6aa0b12:             cs.executeUpdate();
1:6aa0b12:         } catch(SQLException sqle) {
1:6aa0b12:             //on expected lines. The test was successful.
1:6aa0b12:             return;
1:6aa0b12:         }
1:6aa0b12:         //The exception was not thrown. The test has failed here.
1:6aa0b12:         fail("Error the locator was not released by SYSIBM.CLOBRELEASELOCATOR");
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the stored procedure SYSIBM.CLOBGETLENGTH.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException
1:6aa0b12:      */
1:6aa0b12:     public void testClobGetLengthSP() throws SQLException {
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBGETLENGTH(?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //compare the actual length of the test string and the returned length.
1:6aa0b12:         assertEquals("Error SYSIBM.CLOBGETLENGTH returns " +
1:6aa0b12:             "the wrong value for the length of the Clob", testStrLength, cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the stored procedure SYSIBM.CLOBGETPOSITIONFROMSTRING.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void testClobGetPositionFromStringSP() throws SQLException {
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBGETPOSITIONFROMSTRING(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.setString(3, new String("simple"));
1:6aa0b12:         cs.setLong(4, 1L);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //compare the substring position returned from the stored procedure and that
1:6aa0b12:         //returned from the String class functions. If not found to be equal throw an
1:6aa0b12:         //error.
1:6aa0b12:         assertEquals("Error SYSIBM.CLOBGETPOSITIONFROMSTRING returns " +
1:6aa0b12:             "the wrong value for the position of the SUBSTRING", testStr.indexOf("simple")+1, cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the stored procedure SYSIBM.CLOBSETSTRING
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void testClobSetStringSP() throws SQLException {
2:6aa0b12:         String newString = "123456789012345";
1:6aa0b12:         //initialize the locator to a default value.
1:6aa0b12:         int locator = -1;
1:6aa0b12:         //call the stored procedure to return the created locator.
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         locator = cs.getInt(1);
1:6aa0b12:         cs.close();
1:6aa0b12: 
2:6aa0b12:         //use this new locator to test the SETSUBSTRING function
2:6aa0b12:         //by inserting a new sub string and testing whether it has
2:6aa0b12:         //been inserted properly.
1:6aa0b12: 
2:6aa0b12:         //Insert the new substring.
1:6aa0b12:         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
1:6aa0b12:         cs.setInt(1, locator);
1:6aa0b12:         cs.setInt(2, 1);
2:6aa0b12:         cs.setLong(3, newString.length());
2:6aa0b12:         cs.setString(4, newString);
1:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         //check the new locator to see if the value has been inserted correctly.
1:6aa0b12:         cs  = prepareCall("? = CALL " +
1:6aa0b12:             "SYSIBM.CLOBGETSUBSTRING(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.VARCHAR);
1:6aa0b12:         cs.setInt(2, locator);
1:6aa0b12:         cs.setLong(3, 1);
1:6aa0b12:         //get sub-string of length 10 from the clob.
1:6aa0b12:         cs.setInt(4, newString.length());
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         String retVal = cs.getString(1);
1:6aa0b12:         //compare the new string and the string returned by the stored
1:6aa0b12:         //procedure to see of they are the same.
1:6aa0b12:         if (newString.compareTo(retVal) != 0)
1:6aa0b12:             fail("SYSIBM.CLOBSETSTRING does not insert the right value");
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Test the stored procedure SYSIBM.CLOBGETLENGTH
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException
1:6aa0b12:      */
1:6aa0b12:     public void testClobTruncateSP() throws SQLException {
1:6aa0b12: 
2:6aa0b12:        //----------TO BE ENABLED LATER------------------------------
2:6aa0b12:        //This code needs to be enabled once the set methods on the
2:6aa0b12:        //Clob interface are implemented. Until that time keep checking
2:6aa0b12:        //for a not implemented exception being thrown.
1:6aa0b12:        /*
1:6aa0b12:         CallableStatement cs = prepareCall
1:6aa0b12:             ("CALL SYSIBM.CLOBTRUNCATE(?,?)");
1:6aa0b12:         cs.setInt(1, 1);
1:6aa0b12:         cs.setLong(2, 10L);
1:6aa0b12:         cs.execute();
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBGETLENGTH(?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //compare the actual length of the test string and the returned length.
1:6aa0b12:         assertEquals("Error SYSIBM.CLOBGETLENGTH returns " +
1:6aa0b12:             "the wrong value for the length of the Clob", 10
1:6aa0b12:             , cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:         */
1:6aa0b12:         //----------TO BE ENABLED LATER------------------------------
1:6aa0b12: 
1:6aa0b12:         CallableStatement cs = prepareCall
1:6aa0b12:             ("CALL SYSIBM.CLOBTRUNCATE(?,?)");
1:6aa0b12:         cs.setInt(1, 1);
1:6aa0b12:         cs.setLong(2, 10L);
1:6aa0b12:         try {
1:6aa0b12:             cs.execute();
1:6aa0b12:         }
4:6aa0b12:         catch(SQLException sqle) {
4:6aa0b12:             //expected Unsupported SQLException
1:6aa0b12:             //The CLOBTRUNCATE is not supported but contains
4:6aa0b12:             //temporary code that shall be removed when
4:6aa0b12:             //the method is enabled.
1:6aa0b12:         }
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:      * Tests the SYSIBM.CLOBGETPOSITIONFROMLOCATOR stored procedure.
1:6aa0b12:      *
1:6aa0b12:      * @throws SQLException.
1:6aa0b12:      */
1:6aa0b12:     public void testClobGetPositionFromLocatorSP() throws SQLException {
1:6aa0b12:         int locator = 0;
1:6aa0b12: 
1:6aa0b12:         String newStr = "simple";
1:6aa0b12: 
1:6aa0b12:         CallableStatement cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         locator = cs.getInt(1);
1:6aa0b12:         cs.close();
1:6aa0b12: 
1:6aa0b12:         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
1:6aa0b12:         cs.setInt(1, locator);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         cs.setLong(3, newStr.length());
1:6aa0b12:         cs.setString(4, newStr);
1:b6d2a1c:         cs.execute();
1:6aa0b12: 
1:6aa0b12:         cs.close();
1:6aa0b12:         cs  = prepareCall
1:6aa0b12:             ("? = CALL SYSIBM.CLOBGETPOSITIONFROMLOCATOR(?,?,?)");
1:6aa0b12:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:6aa0b12:         cs.setInt(2, 1);
1:6aa0b12:         //find the position of the bytes corresponding to
1:6aa0b12:         //the String simple in the test string.
1:6aa0b12:         cs.setInt(3, locator);
1:6aa0b12:         cs.setLong(4, 1L);
1:6aa0b12:         cs.executeUpdate();
1:6aa0b12:         //check to see that the returned position and the expected position
1:6aa0b12:         //of the substring simple in the string are matching.
1:6aa0b12:         assertEquals("Error SYSIBM.CLOBGETPOSITIONFROMLOCATOR returns " +
1:6aa0b12:             "the wrong value for the position of the Clob", 8, cs.getLong(1));
1:6aa0b12:         cs.close();
1:6aa0b12:     }
1:6aa0b12: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             return new BaseTestSuite(
1:                 "empty: client not supported on JSR169; procs use DriverMgr");
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:456b8a1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             "SYSIBM.CLOBCREATELOCATOR() are incorrect", 2, locator);
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:7696c74
/////////////////////////////////////////////////////////////////////////
0:             "SYSIBM.CLOBCREATELOCATOR() are incorrect", 4, locator);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:af9a439
/////////////////////////////////////////////////////////////////////////
0:             return new TestSuite("empty: client not supported on JSR169; procs use DriverMgr");
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b6d2a1c
/////////////////////////////////////////////////////////////////////////
1:         cs.execute();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         cs.execute();
author:Army
-------------------------------------------------------------------------------
commit:497f79d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:         if (JDBC.vmSupportsJSR169()) {
0:             return new TestSuite("empty: client not supported on JSR169");
1:         }
1:         else {
1:             return TestConfiguration.defaultSuite(
1:                     ClobStoredProcedureTest.class);
1:         }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6aa0b12
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ClobStoredProcedureTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: 
1: import java.sql.CallableStatement;
0: import java.sql.Clob;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import junit.framework.Assert;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests the stored procedures introduced as part of DERBY-208.
1:  * These stored procedures will used by the Clob methods on the client side.
1:  */
1: public class ClobStoredProcedureTest extends BaseJDBCTestCase {
1: 
1:     final String testStr = "I am a simple derby test case";
1:     final long testStrLength = testStr.length();
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      * @param name a string containing the name of the test.
1:      */
1:     public ClobStoredProcedureTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Create a suite of tests.
1:      * @return the test suite created.
1:      */
1:     public static Test suite() {
0:         return TestConfiguration.defaultSuite(ClobStoredProcedureTest.class);
1:     }
1: 
1:     /**
1:      * Setup the test.
1:      * @throws a SQLException.
1:      */
1:     public void setUp() throws Exception {
1:         int locator = 0;
1:         getConnection().setAutoCommit(false);
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1: 
1:         cs.close();
1:         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
1:         cs.setInt(1, locator);
1:         cs.setInt(2, 1);
1:         cs.setLong(3, testStrLength);
1:         cs.setString(4, testStr);
1:         try {
1:             cs.execute();
1:         }
1:         catch(SQLException sqle) {
1:             //expected Unsupported SQLException
0:             //The CLOBSETSTRING is not supported but contains
1:             //temporary code that shall be removed when
1:             //the method is enabled.
1:         }
1:         cs.close();
1:     }
1:     /**
1:      * Cleanup the test.
1:      * @throws SQLException.
1:      */
1:     public void tearDown() throws Exception {
1:         commit();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Test the stored procedure SYSIBM.CLOBGETSUBSTRING
1:      *
1:      * @throws an SQLException.
1:      */
1:     public void testGetSubStringSP() throws SQLException {
1:         CallableStatement cs  = prepareCall("? = CALL " +
1:             "SYSIBM.CLOBGETSUBSTRING(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.VARCHAR);
1:         cs.setInt(2, 1);
1:         cs.setLong(3, 1);
1:         //get sub-string of length 10 from the clob.
1:         cs.setInt(4, 10);
1:         cs.executeUpdate();
1:         String retVal = cs.getString(1);
1:         //compare the string that is returned to the sub-string obtained directly
1:         //from the test string. If found to be equal the stored procedure
1:         //returns valid values.
1:         if (testStr.substring(0, 10).compareTo(retVal) != 0) {
1:             fail("Error SYSIBM.CLOBGETSUBSTRING returns the wrong string");
1:         }
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the locator value returned by the stored procedure
1:      * CLOBCREATELOCATOR.
1:      *
1:      * @throws SQLException.
1:      *
1:      */
1:     public void testClobCreateLocatorSP() throws SQLException {
1:         //initialize the locator to a default value.
1:         int locator = -1;
1:         //call the stored procedure to return the created locator.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         //verify if the locator rturned and expected are equal.
1:         //remember in setup a locator is already created
1:         //hence expected value is 2
1:         assertEquals("The locator values returned by " +
0:             "SYSIBM.CLOBCREATELOCATOR() are incorrect", 2, locator);
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the SYSIBM.CLOBRELEASELOCATOR stored procedure.
1:      *
1:      * @throws SQLException
1:      */
1:     public void testClobReleaseLocatorSP() throws SQLException {
1:         CallableStatement cs  = prepareCall
1:             ("CALL SYSIBM.CLOBRELEASELOCATOR(?)");
1:         cs.setInt(1, 1);
1:         cs.execute();
1:         cs.close();
1: 
1:         //once the locator has been released the CLOBGETLENGTH on that
1:         //locator value will throw an SQLException. This assures that
1:         //the locator has been properly released.
1: 
1:         cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBGETLENGTH(?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         try {
1:             cs.executeUpdate();
1:         } catch(SQLException sqle) {
1:             //on expected lines. The test was successful.
1:             return;
1:         }
1:         //The exception was not thrown. The test has failed here.
1:         fail("Error the locator was not released by SYSIBM.CLOBRELEASELOCATOR");
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the stored procedure SYSIBM.CLOBGETLENGTH.
1:      *
1:      * @throws SQLException
1:      */
1:     public void testClobGetLengthSP() throws SQLException {
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBGETLENGTH(?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         cs.executeUpdate();
1:         //compare the actual length of the test string and the returned length.
1:         assertEquals("Error SYSIBM.CLOBGETLENGTH returns " +
1:             "the wrong value for the length of the Clob", testStrLength, cs.getLong(1));
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the stored procedure SYSIBM.CLOBGETPOSITIONFROMSTRING.
1:      *
1:      * @throws SQLException.
1:      */
1:     public void testClobGetPositionFromStringSP() throws SQLException {
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBGETPOSITIONFROMSTRING(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         cs.setString(3, new String("simple"));
1:         cs.setLong(4, 1L);
1:         cs.executeUpdate();
1:         //compare the substring position returned from the stored procedure and that
1:         //returned from the String class functions. If not found to be equal throw an
1:         //error.
1:         assertEquals("Error SYSIBM.CLOBGETPOSITIONFROMSTRING returns " +
1:             "the wrong value for the position of the SUBSTRING", testStr.indexOf("simple")+1, cs.getLong(1));
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the stored procedure SYSIBM.CLOBSETSTRING
1:      *
1:      * @throws SQLException.
1:      */
1:     public void testClobSetStringSP() throws SQLException {
1: 
1:         //----------TO BE ENABLED LATER------------------------------
1:         //This code needs to be enabled once the set methods on the
1:         //Clob interface are implemented. Until that time keep checking
1:         //for a not implemented exception being thrown.
1:         /*
1:         String newString = "123456789012345";
1:         //initialize the locator to a default value.
1:         int locator = -1;
1:         //call the stored procedure to return the created locator.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         cs.close();
1: 
1:         //use this new locator to test the SETSUBSTRING function
1:         //by inserting a new sub string and testing whether it has
1:         //been inserted properly.
1: 
1:         //Insert the new substring.
1:         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
1:         cs.setInt(1, locator);
1:         cs.setInt(2, 1);
1:         cs.setLong(3, newString.length());
1:         cs.setString(4, newString);
1:         cs.execute();
1:         cs.close();
1: 
1:         //check the new locator to see if the value has been inserted correctly.
1:         cs  = prepareCall("? = CALL " +
1:             "SYSIBM.CLOBGETSUBSTRING(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.VARCHAR);
1:         cs.setInt(2, locator);
1:         cs.setLong(3, 1);
1:         //get sub-string of length 10 from the clob.
1:         cs.setInt(4, newString.length());
1:         cs.executeUpdate();
1:         String retVal = cs.getString(1);
1:         //compare the new string and the string returned by the stored
1:         //procedure to see of they are the same.
1:         if (newString.compareTo(retVal) != 0)
1:             fail("SYSIBM.CLOBSETSTRING does not insert the right value");
1:         cs.close();
1:         */
0:         //--------------TO BE ENABLED LATER--------------------------
1: 
1: 
1:         String newString = "123456789012345";
1:         //initialize the locator to a default value.
1:         int locator = -1;
1:         //call the stored procedure to return the created locator.
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         cs.close();
1: 
1:         //use this new locator to test the SETSUBSTRING function
1:         //by inserting a new sub string and testing whether it has
1:         //been inserted properly.
1: 
1:         //Insert the new substring.
1:         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
1:         cs.setInt(1, locator);
1:         cs.setInt(2, 1);
1:         cs.setLong(3, newString.length());
1:         cs.setString(4, newString);
1:         try {
1:             cs.execute();
1:         }
1:         catch(SQLException sqle) {
1:             //expected Unsupported SQLException
0:             //The CLOBSETSTRING is not supported but contains
1:             //temporary code that shall be removed when
1:             //the method is enabled.
1:         }
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Test the stored procedure SYSIBM.CLOBGETLENGTH
1:      *
1:      * @throws SQLException
1:      */
1:     public void testClobTruncateSP() throws SQLException {
1: 
1:        //----------TO BE ENABLED LATER------------------------------
1:        //This code needs to be enabled once the set methods on the
1:        //Clob interface are implemented. Until that time keep checking
1:        //for a not implemented exception being thrown.
1:        /*
1:         CallableStatement cs = prepareCall
1:             ("CALL SYSIBM.CLOBTRUNCATE(?,?)");
1:         cs.setInt(1, 1);
1:         cs.setLong(2, 10L);
1:         cs.execute();
1:         cs.close();
1: 
1:         cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBGETLENGTH(?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         cs.executeUpdate();
1:         //compare the actual length of the test string and the returned length.
1:         assertEquals("Error SYSIBM.CLOBGETLENGTH returns " +
1:             "the wrong value for the length of the Clob", 10
1:             , cs.getLong(1));
1:         cs.close();
1:         */
1:         //----------TO BE ENABLED LATER------------------------------
1: 
1:         CallableStatement cs = prepareCall
1:             ("CALL SYSIBM.CLOBTRUNCATE(?,?)");
1:         cs.setInt(1, 1);
1:         cs.setLong(2, 10L);
1:         try {
1:             cs.execute();
1:         }
1:         catch(SQLException sqle) {
1:             //expected Unsupported SQLException
1:             //The CLOBTRUNCATE is not supported but contains
1:             //temporary code that shall be removed when
1:             //the method is enabled.
1:         }
1:         cs.close();
1:     }
1: 
1:     /**
1:      * Tests the SYSIBM.CLOBGETPOSITIONFROMLOCATOR stored procedure.
1:      *
1:      * @throws SQLException.
1:      */
1:     public void testClobGetPositionFromLocatorSP() throws SQLException {
1:         int locator = 0;
1: 
1:         String newStr = "simple";
1: 
1:         CallableStatement cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBCREATELOCATOR()");
1:         cs.registerOutParameter(1, java.sql.Types.INTEGER);
1:         cs.executeUpdate();
1:         locator = cs.getInt(1);
1:         cs.close();
1: 
1:         cs  = prepareCall("CALL SYSIBM.CLOBSETSTRING(?,?,?,?)");
1:         cs.setInt(1, locator);
1:         cs.setInt(2, 1);
1:         cs.setLong(3, newStr.length());
1:         cs.setString(4, newStr);
1:         try {
1:             cs.execute();
1:         }
1:         catch(SQLException sqle) {
1:             //expected Unsupported SQLException
0:             //The CLOBSETSTRING is not supported but contains
1:             //temporary code that shall be removed when
1:             //the method is enabled.
1:         }
1: 
1:         cs.close();
1:         cs  = prepareCall
1:             ("? = CALL SYSIBM.CLOBGETPOSITIONFROMLOCATOR(?,?,?)");
1:         cs.registerOutParameter(1, java.sql.Types.BIGINT);
1:         cs.setInt(2, 1);
1:         //find the position of the bytes corresponding to
1:         //the String simple in the test string.
1:         cs.setInt(3, locator);
1:         cs.setLong(4, 1L);
1:         cs.executeUpdate();
1:         //check to see that the returned position and the expected position
1:         //of the substring simple in the string are matching.
1:         assertEquals("Error SYSIBM.CLOBGETPOSITIONFROMLOCATOR returns " +
1:             "the wrong value for the position of the Clob", 8, cs.getLong(1));
1:         cs.close();
1:     }
1: }
============================================================================