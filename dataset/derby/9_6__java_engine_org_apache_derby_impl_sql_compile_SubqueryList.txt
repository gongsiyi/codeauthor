1:fe77ca5: /*
20:fe77ca5: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.SubqueryList
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
4:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package	org.apache.derby.impl.sql.compile;
1:fe77ca5: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:fe77ca5: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:fe77ca5: 
4:fe77ca5: /**
1:3bb140c:  * A SubqueryList represents a list of subqueries within a specific clause
1:fe77ca5:  * (select, where or having) in a DML statement.  It extends QueryTreeNodeVector.
10:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:e1f49ca: class SubqueryList extends QueryTreeNodeVector<SubqueryNode>
6:fe77ca5: {
1:3bb140c:     SubqueryList(ContextManager cm) {
1:e1f49ca:         super(SubqueryNode.class, cm);
1:3bb140c:     }
1:3bb140c: 
1:de51906: 	/**
1:fe77ca5: 	 * Add a subquery to the list.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param subqueryNode	A SubqueryNode to add to the list
1:fe77ca5: 	 *
1:fe77ca5: 	 */
1:de51906: 
1:3bb140c:     void addSubqueryNode(SubqueryNode subqueryNode) throws StandardException
1:fe77ca5: 	{
1:fe77ca5: 		addElement(subqueryNode);
6:fe77ca5: 	}
1:de51906: 
1:2e556fe: 	/**
1:fe77ca5: 	 * Optimize the subqueries in this list.  
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param dataDictionary	The data dictionary to use for optimization
1:fe77ca5: 	 * @param outerRows			The optimizer's estimate of the number of
1:fe77ca5: 	 *							times this subquery will be executed.
1:fe77ca5: 	 *
3:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:2e556fe: 
1:3bb140c:     void optimize(DataDictionary dataDictionary, double outerRows)
2:fe77ca5: 			throws StandardException
1:fe77ca5: 	{
1:e1f49ca:         for (SubqueryNode sqn : this)
1:fe77ca5: 		{
1:e1f49ca:             sqn.optimize(dataDictionary, outerRows);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:2e556fe: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Modify the access paths for all subqueries in this list.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @see ResultSetNode#modifyAccessPaths
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     void modifyAccessPaths()
1:fe77ca5: 			throws StandardException
1:fe77ca5: 	{
1:e1f49ca:         for (SubqueryNode sqn : this)
1:fe77ca5: 		{
1:e1f49ca:             sqn.modifyAccessPaths();
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Search to see if a query references the specifed table name.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param name		Table name (String) to search for.
1:fe77ca5: 	 * @param baseTable	Whether or not name is for a base table
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	true if found, else false
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     boolean referencesTarget(String name, boolean baseTable)
1:fe77ca5: 		throws StandardException
1:fe77ca5: 	{
1:e1f49ca:         for (SubqueryNode sqn : this)
1:fe77ca5: 		{
1:e1f49ca:             if (sqn.isMaterializable())
1:fe77ca5: 			{
1:fe77ca5: 				continue;
1:fe77ca5: 			}
1:fe77ca5: 
1:e1f49ca:             if (sqn.getResultSet().referencesTarget(name, baseTable))
1:fe77ca5: 			{
1:fe77ca5: 				return true;
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return false;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	true if references SESSION schema tables, else false
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     @Override
1:fe77ca5: 	public boolean referencesSessionSchema()
1:fe77ca5: 		throws StandardException
1:fe77ca5: 	{
1:e1f49ca:         for (SubqueryNode sqn : this)
1:fe77ca5: 		{
1:1a58030:             if (sqn.referencesSessionSchema())
1:fe77ca5: 			{
1:fe77ca5: 				return true;
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return false;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Set the point of attachment in all subqueries in this list.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param pointOfAttachment		The point of attachment
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException			Thrown on error
1:fe77ca5: 	 */
1:3bb140c:     void setPointOfAttachment(int pointOfAttachment)
1:fe77ca5: 		throws StandardException
1:fe77ca5: 	{
1:e1f49ca:         for (SubqueryNode sqn : this)
1:fe77ca5: 		{
1:e1f49ca:             sqn.setPointOfAttachment(pointOfAttachment);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Decrement (query block) level (0-based) for 
1:fe77ca5: 	 * all of the tables in this subquery list.
1:fe77ca5: 	 * This is useful when flattening a subquery.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param decrement	The amount to decrement by.
1:fe77ca5: 	 */
1:fe77ca5: 	void decrementLevel(int decrement)
1:fe77ca5: 	{
1:e1f49ca:         for (SubqueryNode sqn : this)
1:fe77ca5: 		{
1:e1f49ca:             sqn.getResultSet().decrementLevel(decrement);
1:fe77ca5: 		}
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:2e556fe:      * Mark all of the subqueries in this 
1:2e556fe:      * list as being part of a having clause,
1:e1f49ca:      * so we can avoid flattening later.
1:2e556fe: 	 * 
1:2e556fe: 	 */
1:3bb140c:     void markHavingSubqueries() {
1:e1f49ca:         for (SubqueryNode sqn : this)
1:2e556fe: 	    {
1:e1f49ca:             sqn.setHavingSubquery(true);
1:2e556fe: 	    }
1:2e556fe: 	}
1:2e556fe: 
1:fe77ca5: 	/**
1:de51906: 	 * Mark all of the subqueries in this list as being part of a where clause
1:de51906: 	 * so we can avoid flattening later if needed.
1:de51906: 	 */
1:3bb140c:     void markWhereSubqueries() {
1:e1f49ca:         for (SubqueryNode sqn : this)
1:de51906: 		{
1:e1f49ca:             sqn.setWhereSubquery(true);
1:de51906: 		}
1:de51906: 	}
1:fe77ca5: }
1:fe77ca5: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c30dd
/////////////////////////////////////////////////////////////////////////
commit:1a58030
/////////////////////////////////////////////////////////////////////////
1:             if (sqn.referencesSessionSchema())
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1: class SubqueryList extends QueryTreeNodeVector<SubqueryNode>
1:         super(SubqueryNode.class, cm);
/////////////////////////////////////////////////////////////////////////
1:         for (SubqueryNode sqn : this)
0:             sqn.preprocess(numTables, outerFromList,
/////////////////////////////////////////////////////////////////////////
1:         for (SubqueryNode sqn : this)
1:             sqn.optimize(dataDictionary, outerRows);
/////////////////////////////////////////////////////////////////////////
1:         for (SubqueryNode sqn : this)
1:             sqn.modifyAccessPaths();
/////////////////////////////////////////////////////////////////////////
1:         for (SubqueryNode sqn : this)
1:             if (sqn.isMaterializable())
1:             if (sqn.getResultSet().referencesTarget(name, baseTable))
/////////////////////////////////////////////////////////////////////////
1:         for (SubqueryNode sqn : this)
0:             if (sqn.getResultSet().referencesSessionSchema())
/////////////////////////////////////////////////////////////////////////
1:         for (SubqueryNode sqn : this)
1:             sqn.setPointOfAttachment(pointOfAttachment);
/////////////////////////////////////////////////////////////////////////
1:         for (SubqueryNode sqn : this)
1:             sqn.getResultSet().decrementLevel(decrement);
1:      * so we can avoid flattening later.
1:         for (SubqueryNode sqn : this)
1:             sqn.setHavingSubquery(true);
/////////////////////////////////////////////////////////////////////////
0:         for (SubqueryNode sqn : this)
1:             sqn.setWhereSubquery(true);
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1:  * A SubqueryList represents a list of subqueries within a specific clause
0: class SubqueryList extends QueryTreeNodeVector
1:     SubqueryList(ContextManager cm) {
0:         super(cm);
0:         setNodeType(C_NodeTypes.SUBQUERY_LIST);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     void addSubqueryNode(SubqueryNode subqueryNode) throws StandardException
/////////////////////////////////////////////////////////////////////////
0:     void preprocess(int numTables,
/////////////////////////////////////////////////////////////////////////
1:     void optimize(DataDictionary dataDictionary, double outerRows)
/////////////////////////////////////////////////////////////////////////
1:     void modifyAccessPaths()
/////////////////////////////////////////////////////////////////////////
1:     boolean referencesTarget(String name, boolean baseTable)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     void setPointOfAttachment(int pointOfAttachment)
/////////////////////////////////////////////////////////////////////////
1:     void markHavingSubqueries() {
/////////////////////////////////////////////////////////////////////////
1:     void markWhereSubqueries() {
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:de51906
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Mark all of the subqueries in this list as being part of a where clause
1: 	 * so we can avoid flattening later if needed.
1: 	 */
0: 	public void markWhereSubqueries() {
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			SubqueryNode    subqueryNode;
1: 
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.setWhereSubquery(true);
1: 		}
1: 	}
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:2e556fe
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1:      * Mark all of the subqueries in this 
1:      * list as being part of a having clause,
0:      * so we can avoid flattenning later.
1: 	 * 
1: 	 */
0: 	public void markHavingSubqueries() {
0: 	    int size = size();
1: 	    
0: 	    for (int index = 0; index < size; index++)
1: 	    {
0: 	        SubqueryNode    subqueryNode;
1: 
0: 	        subqueryNode = (SubqueryNode) elementAt(index);
0: 	        subqueryNode.setHavingSubquery(true);
1: 	    }
1: 	}
commit:318307e
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.SubqueryList
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
0:  * A SubqueryList represents a list of subquerys within a specific clause 
1:  * (select, where or having) in a DML statement.  It extends QueryTreeNodeVector.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class SubqueryList extends QueryTreeNodeVector
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
0: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
0: 	 * how tree printing is supposed to work.
1: 	 *
0: 	 * @param depth		The depth of this node in the tree
1: 	 *
0: 	 * @return	Nothing
1: 	 */
1: 
0: 	public void printSubNodes(int depth)
1: 	{
0: 		if (SanityManager.DEBUG)
1: 		{
0: 			SubqueryNode	subqueryNode;
1: 
0: 			super.printSubNodes(depth);
1: 
0: 			for (int index = 0; index < size(); index++)
1: 			{
0: 				subqueryNode = (SubqueryNode) elementAt(index);
0: 				subqueryNode.treePrint(depth + 1);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Add a subquery to the list.
1: 	 *
1: 	 * @param subqueryNode	A SubqueryNode to add to the list
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void addSubqueryNode(SubqueryNode subqueryNode) throws StandardException
1: 	{
1: 		addElement(subqueryNode);
1: 	}
1: 
1: 	/**
0: 	 * Preprocess a SubqueryList.  For now, we just preprocess each SubqueryNode
0: 	 * in the list.
1: 	 *
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
1: 	 *
0: 	 * @return None.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void preprocess(int numTables,
0: 							FromList outerFromList,
0: 							SubqueryList outerSubqueryList,
0: 							PredicateList outerPredicateList) 
1: 				throws StandardException
1: 	{
0: 		SubqueryNode	subqueryNode;
1: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.preprocess(numTables, outerFromList,
0: 									outerSubqueryList,
0: 									outerPredicateList);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Optimize the subqueries in this list.  
1: 	 *
1: 	 * @param dataDictionary	The data dictionary to use for optimization
1: 	 * @param outerRows			The optimizer's estimate of the number of
1: 	 *							times this subquery will be executed.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public void optimize(DataDictionary dataDictionary, double outerRows)
1: 			throws StandardException
1: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			SubqueryNode	subqueryNode;
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.optimize(dataDictionary, outerRows);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Modify the access paths for all subqueries in this list.
1: 	 *
1: 	 * @see ResultSetNode#modifyAccessPaths
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void modifyAccessPaths()
1: 			throws StandardException
1: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			SubqueryNode	subqueryNode;
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.modifyAccessPaths();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Search to see if a query references the specifed table name.
1: 	 *
1: 	 * @param name		Table name (String) to search for.
1: 	 * @param baseTable	Whether or not name is for a base table
1: 	 *
1: 	 * @return	true if found, else false
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public boolean referencesTarget(String name, boolean baseTable)
1: 		throws StandardException
1: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			SubqueryNode	subqueryNode;
1: 
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			if (subqueryNode.isMaterializable())
1: 			{
1: 				continue;
1: 			}
1: 
0: 			if (subqueryNode.getResultSet().referencesTarget(name, baseTable))
1: 			{
1: 				return true;
1: 			}
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1: 	 *
1: 	 * @return	true if references SESSION schema tables, else false
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public boolean referencesSessionSchema()
1: 		throws StandardException
1: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			SubqueryNode	subqueryNode;
1: 
0: 			subqueryNode = (SubqueryNode) elementAt(index);
1: 
0: 			if (subqueryNode.getResultSet().referencesSessionSchema())
1: 			{
1: 				return true;
1: 			}
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * Set the point of attachment in all subqueries in this list.
1: 	 *
1: 	 * @param pointOfAttachment		The point of attachment
1: 	 *
0: 	 * @return Nothing.
1: 	 *
1: 	 * @exception StandardException			Thrown on error
1: 	 */
0: 	public void setPointOfAttachment(int pointOfAttachment)
1: 		throws StandardException
1: 	{
0: 		int size = size();
1: 
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			SubqueryNode	subqueryNode;
1: 
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.setPointOfAttachment(pointOfAttachment);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Decrement (query block) level (0-based) for 
1: 	 * all of the tables in this subquery list.
1: 	 * This is useful when flattening a subquery.
1: 	 *
1: 	 * @param decrement	The amount to decrement by.
1: 	 *
0: 	 * @return Nothing;
1: 	 */
1: 	void decrementLevel(int decrement)
1: 	{
0: 		int size = size();
1: 
0: 		for (int index = 0; index < size; index++)
1: 		{
0: 			((SubqueryNode) elementAt(index)).getResultSet().decrementLevel(decrement);
1: 		}
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * A SubqueryList represents a list of subquerys within a specific clause 
0:  * (select, where or having) in a DML statement.  It extends QueryTreeNodeVector.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class SubqueryList extends QueryTreeNodeVector
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
0: 	 * how tree printing is supposed to work.
0: 	 *
0: 	 * @param depth		The depth of this node in the tree
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 
0: 	public void printSubNodes(int depth)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SubqueryNode	subqueryNode;
0: 
0: 			super.printSubNodes(depth);
0: 
0: 			for (int index = 0; index < size(); index++)
0: 			{
0: 				subqueryNode = (SubqueryNode) elementAt(index);
0: 				subqueryNode.treePrint(depth + 1);
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Add a subquery to the list.
0: 	 *
0: 	 * @param subqueryNode	A SubqueryNode to add to the list
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void addSubqueryNode(SubqueryNode subqueryNode) throws StandardException
0: 	{
0: 		addElement(subqueryNode);
0: 	}
0: 
0: 	/**
0: 	 * Preprocess a SubqueryList.  For now, we just preprocess each SubqueryNode
0: 	 * in the list.
0: 	 *
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
0: 	 *
0: 	 * @return None.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void preprocess(int numTables,
0: 							FromList outerFromList,
0: 							SubqueryList outerSubqueryList,
0: 							PredicateList outerPredicateList) 
0: 				throws StandardException
0: 	{
0: 		SubqueryNode	subqueryNode;
0: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.preprocess(numTables, outerFromList,
0: 									outerSubqueryList,
0: 									outerPredicateList);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Optimize the subqueries in this list.  
0: 	 *
0: 	 * @param dataDictionary	The data dictionary to use for optimization
0: 	 * @param outerRows			The optimizer's estimate of the number of
0: 	 *							times this subquery will be executed.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public void optimize(DataDictionary dataDictionary, double outerRows)
0: 			throws StandardException
0: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			SubqueryNode	subqueryNode;
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.optimize(dataDictionary, outerRows);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Modify the access paths for all subqueries in this list.
0: 	 *
0: 	 * @see ResultSetNode#modifyAccessPaths
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void modifyAccessPaths()
0: 			throws StandardException
0: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			SubqueryNode	subqueryNode;
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.modifyAccessPaths();
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Search to see if a query references the specifed table name.
0: 	 *
0: 	 * @param name		Table name (String) to search for.
0: 	 * @param baseTable	Whether or not name is for a base table
0: 	 *
0: 	 * @return	true if found, else false
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public boolean referencesTarget(String name, boolean baseTable)
0: 		throws StandardException
0: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			SubqueryNode	subqueryNode;
0: 
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			if (subqueryNode.isMaterializable())
0: 			{
0: 				continue;
0: 			}
0: 
0: 			if (subqueryNode.getResultSet().referencesTarget(name, baseTable))
0: 			{
0: 				return true;
0: 			}
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
0: 	 *
0: 	 * @return	true if references SESSION schema tables, else false
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public boolean referencesSessionSchema()
0: 		throws StandardException
0: 	{
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			SubqueryNode	subqueryNode;
0: 
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 
0: 			if (subqueryNode.getResultSet().referencesSessionSchema())
0: 			{
0: 				return true;
0: 			}
0: 		}
0: 
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * Set the point of attachment in all subqueries in this list.
0: 	 *
0: 	 * @param pointOfAttachment		The point of attachment
0: 	 *
0: 	 * @return Nothing.
0: 	 *
0: 	 * @exception StandardException			Thrown on error
0: 	 */
0: 	public void setPointOfAttachment(int pointOfAttachment)
0: 		throws StandardException
0: 	{
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			SubqueryNode	subqueryNode;
0: 
0: 			subqueryNode = (SubqueryNode) elementAt(index);
0: 			subqueryNode.setPointOfAttachment(pointOfAttachment);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Decrement (query block) level (0-based) for 
0: 	 * all of the tables in this subquery list.
0: 	 * This is useful when flattening a subquery.
0: 	 *
0: 	 * @param decrement	The amount to decrement by.
0: 	 *
0: 	 * @return Nothing;
0: 	 */
0: 	void decrementLevel(int decrement)
0: 	{
0: 		int size = size();
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			((SubqueryNode) elementAt(index)).getResultSet().decrementLevel(decrement);
0: 		}
0: 	}
0: }
0: 
============================================================================