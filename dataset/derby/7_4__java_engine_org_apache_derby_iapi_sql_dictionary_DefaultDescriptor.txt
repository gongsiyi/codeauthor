1:eac0369: /*
8:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.DefaultDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
5:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.Dependable;
1:201c012: import org.apache.derby.catalog.DependableFinder;
1:201c012: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:201c012: import org.apache.derby.iapi.reference.SQLState;
1:201c012: import org.apache.derby.iapi.services.i18n.MessageService;
1:201c012: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:201c012: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.depend.DependencyManager;
2:eac0369: import org.apache.derby.iapi.sql.depend.Dependent;
2:eac0369: import org.apache.derby.iapi.sql.depend.Provider;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * This interface is used to get information from a DefaultDescriptor.
3:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:feb5bb2: public final class DefaultDescriptor 
1:f2fad75: 	extends UniqueTupleDescriptor
1:f2fad75: 	implements Provider, Dependent
3:eac0369: {
1:4eece41: 	private final int			columnNumber;
1:4eece41: 	private final UUID		defaultUUID;
1:4eece41: 	private final UUID		tableUUID;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for a DefaultDescriptor
1:eac0369: 	 *
1:eac0369: 	 * @param dataDictionary    the DD
1:eac0369: 	 * @param defaultUUID		The UUID of the default
1:eac0369: 	 * @param tableUUID			The UUID of the table
1:eac0369: 	 * @param columnNumber		The column number of the column that the default is for
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public DefaultDescriptor(DataDictionary dataDictionary, UUID defaultUUID, UUID tableUUID, int columnNumber)
1:eac0369: 	{
1:eac0369: 		super( dataDictionary );
1:eac0369: 
2:eac0369: 		this.defaultUUID = defaultUUID;
1:eac0369: 		this.tableUUID = tableUUID;
1:eac0369: 		this.columnNumber = columnNumber;
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the UUID of the default.
1:eac0369: 	 *
1:eac0369: 	 * @return	The UUID of the default.
1:eac0369: 	 */
1:eac0369: 	public UUID	getUUID()
1:eac0369: 	{
1:eac0369: 		return defaultUUID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the UUID of the table.
1:eac0369: 	 *
1:eac0369: 	 * @return	The UUID of the table.
1:eac0369: 	 */
1:eac0369: 	public UUID	getTableUUID()
1:eac0369: 	{
1:eac0369: 		return tableUUID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the column number of the column.
1:eac0369: 	 *
1:eac0369: 	 * @return	The column number of the column.
1:eac0369: 	 */
1:eac0369: 	public int	getColumnNumber()
1:eac0369: 	{
1:eac0369: 		return columnNumber;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert the DefaultDescriptor to a String.
1:eac0369: 	 *
1:eac0369: 	 * @return	A String representation of this DefaultDescriptor
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	public String	toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** NOTE: This does not format table, because table.toString()
1:eac0369: 			** formats columns, leading to infinite recursion.
1:eac0369: 			*/
1:eac0369: 			return "defaultUUID: " + defaultUUID + "\n" +
1:eac0369: 				"tableUUID: " + tableUUID + "\n" +
1:eac0369: 				"columnNumber: " + columnNumber + "\n";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// PROVIDER INTERFACE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**		
1:eac0369: 		@return the stored form of this provider
1:eac0369: 
1:eac0369: 			@see Dependable#getDependableFinder
1:eac0369: 	 */
1:eac0369: 	public DependableFinder getDependableFinder() 
1:eac0369: 	{
1:eac0369: 	    return	getDependableFinder(StoredFormatIds.DEFAULT_DESCRIPTOR_FINDER_V01_ID);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the name of this Provider.  (Useful for errors.)
1:eac0369: 	 *
1:eac0369: 	 * @return String	The name of this provider.
1:eac0369: 	 */
1:eac0369: 	public String getObjectName()
1:eac0369: 	{
1:eac0369: 		return "default";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the provider's UUID
1:eac0369: 	 *
1:eac0369: 	 * @return 	The provider's UUID
1:eac0369: 	 */
1:eac0369: 	public UUID getObjectID()
1:eac0369: 	{
1:eac0369: 		return defaultUUID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the provider's type.
1:eac0369: 	 *
1:eac0369: 	 * @return char		The provider's type.
1:eac0369: 	 */
1:eac0369: 	public String getClassType()
1:eac0369: 	{
1:eac0369: 		return Dependable.DEFAULT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// DEPENDENT INTERFACE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Check that all of the dependent's dependencies are valid.
1:eac0369: 	 *
1:eac0369: 	 * @return true if the dependent is currently valid
1:eac0369: 	 */
1:eac0369: 	public synchronized boolean isValid()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Prepare to mark the dependent as invalid (due to at least one of
1:eac0369: 	 * its dependencies being invalid).
1:eac0369: 	 *
1:eac0369: 	 * @param action	The action causing the invalidation
1:eac0369: 	 * @param p		the provider
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if unable to make it invalid
1:eac0369: 	 */
1:eac0369: 	public void prepareToInvalidate(Provider p, int action,
1:eac0369: 					LanguageConnectionContext lcc) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		DependencyManager dm = getDataDictionary().getDependencyManager();
1:eac0369: 
1:eac0369: 		switch (action)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** Currently, the only thing we are depenedent
1:eac0369: 			** on is an alias.
1:eac0369: 			*/
1:eac0369: 		    default:
1:eac0369: 				DataDictionary dd = getDataDictionary();
1:eac0369: 				ColumnDescriptor cd = dd.getColumnDescriptorByDefaultId(defaultUUID);
1:eac0369: 				TableDescriptor td = dd.getTableDescriptor(cd.getReferencingUUID());
1:eac0369: 
1:eac0369: 				throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT, 
1:eac0369: 									dm.getActionString(action), 
1:7b6cb41: 									p.getObjectName(), "DEFAULT",
1:eac0369: 									td.getQualifiedName() + "." +
1:eac0369: 									cd.getColumnName());
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Mark the dependent as invalid (due to at least one of
1:eac0369: 	 * its dependencies being invalid).  Always an error
1:eac0369: 	 * for a constraint -- should never have gotten here.
1:eac0369: 	 *
1:eac0369: 	 * @param	action	The action causing the invalidation
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if called in sanity mode
1:eac0369: 	 */
1:eac0369: 	public void makeInvalid(int action, LanguageConnectionContext lcc) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		/* 
1:eac0369: 		** We should never get here, we should have barfed on 
1:eac0369: 		** prepareToInvalidate().
1:eac0369: 		*/
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			DependencyManager dm;
1:eac0369: 	
1:eac0369: 			dm = getDataDictionary().getDependencyManager();
1:eac0369: 
1:eac0369: 			SanityManager.THROWASSERT("makeInvalid("+
1:eac0369: 				dm.getActionString(action)+
1:eac0369: 				") not expected to get called");
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:f2fad75
/////////////////////////////////////////////////////////////////////////
1: 	extends UniqueTupleDescriptor
1: 	implements Provider, Dependent
commit:7b6cb41
/////////////////////////////////////////////////////////////////////////
1: 									p.getObjectName(), "DEFAULT",
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:201c012
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
commit:08d2c15
/////////////////////////////////////////////////////////////////////////
commit:feb5bb2
/////////////////////////////////////////////////////////////////////////
1: public final class DefaultDescriptor 
commit:4eece41
/////////////////////////////////////////////////////////////////////////
1: 	private final int			columnNumber;
1: 	private final UUID		defaultUUID;
1: 	private final UUID		tableUUID;
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.DefaultDescriptor
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
1: import org.apache.derby.iapi.sql.depend.Provider;
1: import org.apache.derby.iapi.sql.depend.Dependent;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.catalog.DependableFinder;
1: import org.apache.derby.catalog.Dependable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.Dependency;
1: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  * This interface is used to get information from a DefaultDescriptor.
1:  *
0:  * @author Jerry
1:  */
1: 
0: public class DefaultDescriptor 
0: 	extends TupleDescriptor
0: 	implements UniqueTupleDescriptor, Provider, Dependent
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/** public interface to this class 
0: 		<ol>
0: 		<li>public void setDefaultUUID(UUID defaultUUID);
0: 		<li>public UUID	getTableUUID();
0: 		</ol>
1: 	*/
1:    
0: 	// implementation
1: 
0: 	int			columnNumber;
0: 	UUID		defaultUUID;
0: 	UUID		tableUUID;
1: 
1: 	/**
1: 	 * Constructor for a DefaultDescriptor
1: 	 *
1: 	 * @param dataDictionary    the DD
1: 	 * @param defaultUUID		The UUID of the default
1: 	 * @param tableUUID			The UUID of the table
1: 	 * @param columnNumber		The column number of the column that the default is for
1: 	 */
1: 
1: 	public DefaultDescriptor(DataDictionary dataDictionary, UUID defaultUUID, UUID tableUUID, int columnNumber)
1: 	{
1: 		super( dataDictionary );
1: 
1: 		this.defaultUUID = defaultUUID;
1: 		this.tableUUID = tableUUID;
1: 		this.columnNumber = columnNumber;
1: 	}
1: 
1: 	/**
1: 	 * Get the UUID of the default.
1: 	 *
1: 	 * @return	The UUID of the default.
1: 	 */
1: 	public UUID	getUUID()
1: 	{
1: 		return defaultUUID;
1: 	}
1: 
1: 	/**
0: 	 * Set the UUID of the default.
1: 	 *
0: 	 * @param defaultUUID The new UUID for the default.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	public void setDefaultUUID(UUID defaultUUID)
1: 	{
1: 		this.defaultUUID = defaultUUID;
1: 	}
1: 
1: 	/**
1: 	 * Get the UUID of the table.
1: 	 *
1: 	 * @return	The UUID of the table.
1: 	 */
1: 	public UUID	getTableUUID()
1: 	{
1: 		return tableUUID;
1: 	}
1: 
1: 	/**
1: 	 * Get the column number of the column.
1: 	 *
1: 	 * @return	The column number of the column.
1: 	 */
1: 	public int	getColumnNumber()
1: 	{
1: 		return columnNumber;
1: 	}
1: 
1: 	/**
1: 	 * Convert the DefaultDescriptor to a String.
1: 	 *
1: 	 * @return	A String representation of this DefaultDescriptor
1: 	 */
1: 
1: 	public String	toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			/*
1: 			** NOTE: This does not format table, because table.toString()
1: 			** formats columns, leading to infinite recursion.
1: 			*/
1: 			return "defaultUUID: " + defaultUUID + "\n" +
1: 				"tableUUID: " + tableUUID + "\n" +
1: 				"columnNumber: " + columnNumber + "\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 	////////////////////////////////////////////////////////////////////
1: 	//
1: 	// PROVIDER INTERFACE
1: 	//
1: 	////////////////////////////////////////////////////////////////////
1: 
1: 	/**		
1: 		@return the stored form of this provider
1: 
1: 			@see Dependable#getDependableFinder
1: 	 */
1: 	public DependableFinder getDependableFinder() 
1: 	{
1: 	    return	getDependableFinder(StoredFormatIds.DEFAULT_DESCRIPTOR_FINDER_V01_ID);
1: 	}
1: 
1: 	/**
1: 	 * Return the name of this Provider.  (Useful for errors.)
1: 	 *
1: 	 * @return String	The name of this provider.
1: 	 */
1: 	public String getObjectName()
1: 	{
1: 		return "default";
1: 	}
1: 
1: 	/**
1: 	 * Get the provider's UUID
1: 	 *
1: 	 * @return 	The provider's UUID
1: 	 */
1: 	public UUID getObjectID()
1: 	{
1: 		return defaultUUID;
1: 	}
1: 
1: 	/**
1: 	 * Get the provider's type.
1: 	 *
1: 	 * @return char		The provider's type.
1: 	 */
1: 	public String getClassType()
1: 	{
1: 		return Dependable.DEFAULT;
1: 	}
1: 
1: 	//////////////////////////////////////////////////////
1: 	//
1: 	// DEPENDENT INTERFACE
1: 	//
1: 	//////////////////////////////////////////////////////
1: 	/**
1: 	 * Check that all of the dependent's dependencies are valid.
1: 	 *
1: 	 * @return true if the dependent is currently valid
1: 	 */
1: 	public synchronized boolean isValid()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Prepare to mark the dependent as invalid (due to at least one of
1: 	 * its dependencies being invalid).
1: 	 *
1: 	 * @param action	The action causing the invalidation
1: 	 * @param p		the provider
1: 	 *
1: 	 * @exception StandardException thrown if unable to make it invalid
1: 	 */
1: 	public void prepareToInvalidate(Provider p, int action,
1: 					LanguageConnectionContext lcc) 
1: 		throws StandardException
1: 	{
1: 		DependencyManager dm = getDataDictionary().getDependencyManager();
1: 
1: 		switch (action)
1: 		{
1: 			/*
1: 			** Currently, the only thing we are depenedent
1: 			** on is an alias.
1: 			*/
1: 		    default:
1: 				DataDictionary dd = getDataDictionary();
1: 				ColumnDescriptor cd = dd.getColumnDescriptorByDefaultId(defaultUUID);
1: 				TableDescriptor td = dd.getTableDescriptor(cd.getReferencingUUID());
1: 
1: 				throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT, 
1: 									dm.getActionString(action), 
0: 									p.getObjectName(),
0: 									MessageService.getTextMessage(
0: 										SQLState.LANG_COLUMN_DEFAULT
0: 									),
1: 									td.getQualifiedName() + "." +
1: 									cd.getColumnName());
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Mark the dependent as invalid (due to at least one of
1: 	 * its dependencies being invalid).  Always an error
1: 	 * for a constraint -- should never have gotten here.
1: 	 *
1: 	 * @param	action	The action causing the invalidation
1: 	 *
1: 	 * @exception StandardException thrown if called in sanity mode
1: 	 */
1: 	public void makeInvalid(int action, LanguageConnectionContext lcc) 
1: 		throws StandardException
1: 	{
1: 		/* 
1: 		** We should never get here, we should have barfed on 
1: 		** prepareToInvalidate().
1: 		*/
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			DependencyManager dm;
1: 	
1: 			dm = getDataDictionary().getDependencyManager();
1: 
1: 			SanityManager.THROWASSERT("makeInvalid("+
1: 				dm.getActionString(action)+
1: 				") not expected to get called");
1: 		}
1: 	}
1: 
1: 	/**
0:      * Attempt to revalidate the dependent. Meaningless
0: 	 * for defaults.
1: 	 */
0: 	public void makeValid(LanguageConnectionContext lcc) 
1: 	{
1: 	}
1: 
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.StatementType;
0: import org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.catalog.Dependable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.Dependency;
0: import org.apache.derby.iapi.sql.depend.Provider;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  * This interface is used to get information from a DefaultDescriptor.
0:  *
0:  * @author Jerry
0:  */
0: 
0: public class DefaultDescriptor 
0: 	extends TupleDescriptor
0: 	implements UniqueTupleDescriptor, Provider, Dependent
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/** public interface to this class 
0: 		<ol>
0: 		<li>public void setDefaultUUID(UUID defaultUUID);
0: 		<li>public UUID	getTableUUID();
0: 		</ol>
0: 	*/
0:    
0: 	// implementation
0: 
0: 	int			columnNumber;
0: 	UUID		defaultUUID;
0: 	UUID		tableUUID;
0: 
0: 	/**
0: 	 * Constructor for a DefaultDescriptor
0: 	 *
0: 	 * @param dataDictionary    the DD
0: 	 * @param defaultUUID		The UUID of the default
0: 	 * @param tableUUID			The UUID of the table
0: 	 * @param columnNumber		The column number of the column that the default is for
0: 	 */
0: 
0: 	public DefaultDescriptor(DataDictionary dataDictionary, UUID defaultUUID, UUID tableUUID, int columnNumber)
0: 	{
0: 		super( dataDictionary );
0: 
0: 		this.defaultUUID = defaultUUID;
0: 		this.tableUUID = tableUUID;
0: 		this.columnNumber = columnNumber;
0: 	}
0: 
0: 	/**
0: 	 * Get the UUID of the default.
0: 	 *
0: 	 * @return	The UUID of the default.
0: 	 */
0: 	public UUID	getUUID()
0: 	{
0: 		return defaultUUID;
0: 	}
0: 
0: 	/**
0: 	 * Set the UUID of the default.
0: 	 *
0: 	 * @param defaultUUID The new UUID for the default.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setDefaultUUID(UUID defaultUUID)
0: 	{
0: 		this.defaultUUID = defaultUUID;
0: 	}
0: 
0: 	/**
0: 	 * Get the UUID of the table.
0: 	 *
0: 	 * @return	The UUID of the table.
0: 	 */
0: 	public UUID	getTableUUID()
0: 	{
0: 		return tableUUID;
0: 	}
0: 
0: 	/**
0: 	 * Get the column number of the column.
0: 	 *
0: 	 * @return	The column number of the column.
0: 	 */
0: 	public int	getColumnNumber()
0: 	{
0: 		return columnNumber;
0: 	}
0: 
0: 	/**
0: 	 * Convert the DefaultDescriptor to a String.
0: 	 *
0: 	 * @return	A String representation of this DefaultDescriptor
0: 	 */
0: 
0: 	public String	toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			/*
0: 			** NOTE: This does not format table, because table.toString()
0: 			** formats columns, leading to infinite recursion.
0: 			*/
0: 			return "defaultUUID: " + defaultUUID + "\n" +
0: 				"tableUUID: " + tableUUID + "\n" +
0: 				"columnNumber: " + columnNumber + "\n";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	////////////////////////////////////////////////////////////////////
0: 	//
0: 	// PROVIDER INTERFACE
0: 	//
0: 	////////////////////////////////////////////////////////////////////
0: 
0: 	/**		
0: 		@return the stored form of this provider
0: 
0: 			@see Dependable#getDependableFinder
0: 	 */
0: 	public DependableFinder getDependableFinder() 
0: 	{
0: 	    return	getDependableFinder(StoredFormatIds.DEFAULT_DESCRIPTOR_FINDER_V01_ID);
0: 	}
0: 
0: 	/**
0: 	 * Return the name of this Provider.  (Useful for errors.)
0: 	 *
0: 	 * @return String	The name of this provider.
0: 	 */
0: 	public String getObjectName()
0: 	{
0: 		return "default";
0: 	}
0: 
0: 	/**
0: 	 * Get the provider's UUID
0: 	 *
0: 	 * @return 	The provider's UUID
0: 	 */
0: 	public UUID getObjectID()
0: 	{
0: 		return defaultUUID;
0: 	}
0: 
0: 	/**
0: 	 * Get the provider's type.
0: 	 *
0: 	 * @return char		The provider's type.
0: 	 */
0: 	public String getClassType()
0: 	{
0: 		return Dependable.DEFAULT;
0: 	}
0: 
0: 	//////////////////////////////////////////////////////
0: 	//
0: 	// DEPENDENT INTERFACE
0: 	//
0: 	//////////////////////////////////////////////////////
0: 	/**
0: 	 * Check that all of the dependent's dependencies are valid.
0: 	 *
0: 	 * @return true if the dependent is currently valid
0: 	 */
0: 	public synchronized boolean isValid()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * Prepare to mark the dependent as invalid (due to at least one of
0: 	 * its dependencies being invalid).
0: 	 *
0: 	 * @param action	The action causing the invalidation
0: 	 * @param p		the provider
0: 	 *
0: 	 * @exception StandardException thrown if unable to make it invalid
0: 	 */
0: 	public void prepareToInvalidate(Provider p, int action,
0: 					LanguageConnectionContext lcc) 
0: 		throws StandardException
0: 	{
0: 		DependencyManager dm = getDataDictionary().getDependencyManager();
0: 
0: 		switch (action)
0: 		{
0: 			/*
0: 			** Currently, the only thing we are depenedent
0: 			** on is an alias.
0: 			*/
0: 		    default:
0: 				DataDictionary dd = getDataDictionary();
0: 				ColumnDescriptor cd = dd.getColumnDescriptorByDefaultId(defaultUUID);
0: 				TableDescriptor td = dd.getTableDescriptor(cd.getReferencingUUID());
0: 
0: 				throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT, 
0: 									dm.getActionString(action), 
0: 									p.getObjectName(),
0: 									MessageService.getTextMessage(
0: 										SQLState.LANG_COLUMN_DEFAULT
0: 									),
0: 									td.getQualifiedName() + "." +
0: 									cd.getColumnName());
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Mark the dependent as invalid (due to at least one of
0: 	 * its dependencies being invalid).  Always an error
0: 	 * for a constraint -- should never have gotten here.
0: 	 *
0: 	 * @param	action	The action causing the invalidation
0: 	 *
0: 	 * @exception StandardException thrown if called in sanity mode
0: 	 */
0: 	public void makeInvalid(int action, LanguageConnectionContext lcc) 
0: 		throws StandardException
0: 	{
0: 		/* 
0: 		** We should never get here, we should have barfed on 
0: 		** prepareToInvalidate().
0: 		*/
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			DependencyManager dm;
0: 	
0: 			dm = getDataDictionary().getDependencyManager();
0: 
0: 			SanityManager.THROWASSERT("makeInvalid("+
0: 				dm.getActionString(action)+
0: 				") not expected to get called");
0: 		}
0: 	}
0: 
0: 	/**
0:      * Attempt to revalidate the dependent. Meaningless
0: 	 * for defaults.
0: 	 */
0: 	public void makeValid(LanguageConnectionContext lcc) 
0: 	{
0: 	}
0: 
0: }
============================================================================