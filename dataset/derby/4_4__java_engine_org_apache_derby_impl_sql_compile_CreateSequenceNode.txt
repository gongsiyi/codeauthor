1:80eb35f: /*
5:80eb35f: 
1:80eb35f:    Derby - Class org.apache.derby.impl.sql.compile.CreateSequenceNode
1:80eb35f: 
1:80eb35f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:80eb35f:    contributor license agreements.  See the NOTICE file distributed with
1:80eb35f:    this work for additional information regarding copyright ownership.
1:80eb35f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:80eb35f:    (the "License"); you may not use this file except in compliance with
1:80eb35f:    the License.  You may obtain a copy of the License at
1:80eb35f: 
1:80eb35f:       http://www.apache.org/licenses/LICENSE-2.0
1:80eb35f: 
1:80eb35f:    Unless required by applicable law or agreed to in writing, software
1:80eb35f:    distributed under the License is distributed on an "AS IS" BASIS,
1:80eb35f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80eb35f:    See the License for the specific language governing permissions and
1:80eb35f:    limitations under the License.
1:80eb35f: 
1:80eb35f:  */
1:80eb35f: 
1:80eb35f: package org.apache.derby.impl.sql.compile;
1:80eb35f: 
1:80eb35f: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:80eb35f: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:9ce7492: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:9ce7492: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:9ce7492: import org.apache.derby.iapi.types.TypeId;
1:9ce7492: 
1:80eb35f: 
1:80eb35f: /**
1:80eb35f:  * A CreateSequenceNode is the root of a QueryTree that
1:80eb35f:  * represents a CREATE SEQUENCE statement.
1:80eb35f:  */
1:80eb35f: 
1:3bb140c: class CreateSequenceNode extends DDLStatementNode
1:9ce7492: {
1:9ce7492:     private TableName _sequenceName;
1:9ce7492:     private DataTypeDescriptor _dataType;
1:9ce7492:     private Long _initialValue;
1:9ce7492:     private Long _stepValue;
1:9ce7492:     private Long _maxValue;
1:9ce7492:     private Long _minValue;
1:3bb140c:     private boolean _cycle;
1:80eb35f: 
1:80eb35f:     public static final int SEQUENCE_ELEMENT_COUNT = 1;
1:80eb35f: 
1:80eb35f:     /**
1:3bb140c:      * Constructor for a CreateSequenceNode
2:80eb35f:      *
1:9ce7492:      * @param sequenceName The name of the new sequence
1:9ce7492:      * @param dataType Exact numeric type of the new sequence
1:9ce7492:      * @param initialValue Starting value
1:9ce7492:      * @param stepValue Increment amount
1:9ce7492:      * @param maxValue Largest value returned by the sequence generator
1:9ce7492:      * @param minValue Smallest value returned by the sequence generator
1:9ce7492:      * @param cycle True if the generator should wrap around, false otherwise
1:3bb140c:      * @param cm Context manager
1:9ce7492:      * @throws org.apache.derby.iapi.error.StandardException on error
1:80eb35f:      */
1:3bb140c:     CreateSequenceNode
1:9ce7492:         (
1:3bb140c:          TableName sequenceName,
1:3bb140c:          DataTypeDescriptor dataType,
1:3bb140c:          Long initialValue,
1:3bb140c:          Long stepValue,
1:3bb140c:          Long maxValue,
1:3bb140c:          Long minValue,
1:3bb140c:          boolean cycle,
1:3bb140c:          ContextManager cm
1:9ce7492:          ) throws StandardException {
1:bb21983: 
1:3bb140c:         super(sequenceName, cm);
1:3bb140c:         this._sequenceName = sequenceName;
1:9ce7492: 
1:bb21983:         if (dataType != null) {
1:3bb140c:             _dataType = dataType;
1:bb21983:         } else {
1:bb21983:             _dataType = DataTypeDescriptor.INTEGER;
1:bb21983:         }
1:bb21983: 
1:3bb140c:         _stepValue = (stepValue != null ? stepValue : Long.valueOf(1));
1:80eb35f: 
1:bb4cfe9:         if (_dataType.getTypeId().equals(TypeId.SMALLINT_ID)) {
1:3bb140c:             _minValue =
1:3bb140c:                 (minValue != null ? minValue : Long.valueOf(Short.MIN_VALUE));
1:3bb140c:             _maxValue =
1:3bb140c:                 (maxValue != null ? maxValue : Long.valueOf(Short.MAX_VALUE));
1:bb4cfe9:         } else if (_dataType.getTypeId().equals(TypeId.INTEGER_ID)) {
1:3bb140c:             _minValue =
1:3bb140c:                 (minValue != null ? minValue : Long.valueOf(Integer.MIN_VALUE));
1:3bb140c:             _maxValue =
1:3bb140c:                 (maxValue != null ? maxValue : Long.valueOf(Integer.MAX_VALUE));
1:bb4cfe9:         } else {
1:bb4cfe9:             // Could only be BIGINT
1:3bb140c:             _minValue = (minValue != null ? minValue : Long.MIN_VALUE);
1:3bb140c:             _maxValue = (maxValue != null ? maxValue : Long.MAX_VALUE);
1:bb4cfe9:         }
1:bb21983: 
1:bb21983:         if (initialValue != null) {
1:3bb140c:             _initialValue = initialValue;
1:bb21983:         } else {
1:bb21983:             if (_stepValue.longValue() > 0L) {
1:bb21983:                 _initialValue = _minValue;
1:bb21983:             } else {
1:bb21983:                 _initialValue = _maxValue;
1:bb21983:             }
1:bb21983:         }
1:3bb140c:         _cycle = cycle;
1:bb21983: 
1:bb21983:         // automatically create the schema if it doesn't exist
1:80eb35f:         implicitCreateSchema = true;
1:bb21983:     }
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:80eb35f:      * for how this should be done for tree printing.
1:9ce7492:      *
1:80eb35f:      * @return This object as a String
1:80eb35f:      */
1:3bb140c:     @Override
1:80eb35f:     public String toString() {
1:80eb35f:         if (SanityManager.DEBUG) {
1:80eb35f:             return super.toString() +
1:9ce7492:                     "sequenceName: " + "\n" + _sequenceName + "\n";
1:bb21983:         } else {
1:80eb35f:             return "";
4:80eb35f:         }
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * Bind this CreateSequenceNode.
1:80eb35f:      * The main objectives of this method are to resolve the schema name, determine privilege checks,
1:80eb35f:      * and vet the variables in the CREATE SEQUENCE statement.
1:80eb35f:      */
1:3bb140c:     @Override
1:80eb35f:     public void bindStatement() throws StandardException {
1:80eb35f:         // implicitly create the schema if it does not exist.
1:80eb35f:         // this method also compiles permissions checks
1:80eb35f:         SchemaDescriptor sd = getSchemaDescriptor();
1:80eb35f: 
1:bb21983:         // set the default schema name if the user did not explicitly specify a schema
1:9ce7492:         if (_sequenceName.getSchemaName() == null) {
1:9ce7492:             _sequenceName.setSchemaName(sd.getSchemaName());
1:80eb35f:         }
1:9ce7492: 
1:bb21983:         if (_dataType.getTypeId().equals(TypeId.SMALLINT_ID)) {
1:bb21983:             if (_minValue.longValue() < Short.MIN_VALUE || _minValue.longValue() >= Short.MAX_VALUE) {
2:bb21983:                 throw StandardException.newException(
1:bb21983:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:bb21983:                         "MINVALUE",
1:bb21983:                         "SMALLINT",
1:bb21983:                         Short.MIN_VALUE + "",
1:bb21983:                         Short.MAX_VALUE + "");
1:bb21983:             }
1:bb21983:             if (_maxValue.longValue() <= Short.MIN_VALUE || _maxValue.longValue() > Short.MAX_VALUE) {
1:bb21983:                 throw StandardException.newException(
1:bb21983:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:bb21983:                         "MAXVALUE",
1:bb21983:                         "SMALLINT",
1:bb21983:                         Short.MIN_VALUE + "",
1:bb21983:                         Short.MAX_VALUE + "");
1:bb21983:             }
1:bb21983:         } else if (_dataType.getTypeId().equals(TypeId.INTEGER_ID)) {
1:bb21983:             if (_minValue.longValue() < Integer.MIN_VALUE || _minValue.longValue() >= Integer.MAX_VALUE) {
1:bb21983:                 throw StandardException.newException(
1:bb21983:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:bb21983:                         "MINVALUE",
1:bb21983:                         "INTEGER",
1:bb21983:                         Integer.MIN_VALUE + "",
1:bb21983:                         Integer.MAX_VALUE + "");
1:bb21983:             }
1:bb21983:             if (_maxValue.longValue() <= Integer.MIN_VALUE || _maxValue.longValue() > Integer.MAX_VALUE) {
1:bb21983:                 throw StandardException.newException(
1:bb21983:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:bb21983:                         "MAXVALUE",
1:bb21983:                         "INTEGER",
1:bb21983:                         Integer.MIN_VALUE + "",
1:bb21983:                         Integer.MAX_VALUE + "");
1:bb21983:             }
1:bb21983:         } else {
1:bb21983:             // BIGINT
1:bb21983:             if (_minValue.longValue() < Long.MIN_VALUE || _minValue.longValue() >= Long.MAX_VALUE) {
1:bb21983:                 throw StandardException.newException(
1:bb21983:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:bb21983:                         "MINVALUE",
1:bb21983:                         "BIGINT",
1:bb21983:                         Long.MIN_VALUE + "",
1:bb21983:                         Long.MAX_VALUE + "");
1:bb21983:             }
1:bb21983:             if (_maxValue.longValue() <= Long.MIN_VALUE || _maxValue.longValue() > Long.MAX_VALUE) {
1:bb21983:                 throw StandardException.newException(
1:bb21983:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:bb21983:                         "MAXVALUE",
1:bb21983:                         "BIGINT",
1:bb21983:                         Long.MIN_VALUE + "",
1:bb21983:                         Long.MAX_VALUE + "");
1:bb21983:             }
1:bb21983:         }
1:bb21983: 
1:bb21983:         if (_minValue.longValue() >= _maxValue.longValue()) {
1:bb21983:             throw StandardException.newException(
1:bb21983:                     SQLState.LANG_SEQ_MIN_EXCEEDS_MAX,
2:bb21983:                     _minValue.toString(),
2:bb21983:                     _maxValue.toString());
1:bb21983:         }
1:bb21983: 
1:bb21983:         if (_initialValue.longValue() < _minValue.longValue() || _initialValue.longValue() > _maxValue.longValue()) {
1:bb21983:              throw StandardException.newException(
1:bb21983:                      SQLState.LANG_SEQ_INVALID_START,
1:bb21983:                      _initialValue.toString(),
1:bb21983:                      _minValue.toString(),
1:bb21983:                      _maxValue.toString());
1:bb21983:         }       
1:bb21983: 
1:bb21983:         if (_stepValue.longValue() == 0L) {
1:bb21983:             throw StandardException.newException(
1:bb21983:                     SQLState.LANG_SEQ_INCREMENT_ZERO);
1:bb21983:         }
1:bb21983: 
1:bb21983:     }
1:bb21983: 
1:80eb35f:     public String statementToString() {
1:80eb35f:         return "CREATE SEQUENCE";
1:80eb35f:     }
1:9ce7492: 
1:80eb35f:     // We inherit the generate() method from DDLStatementNode.
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * Create the Constant information that will drive the guts of Execution.
1:80eb35f:      *
2:80eb35f:      * @throws org.apache.derby.iapi.error.StandardException
1:80eb35f:      *          Thrown on failure
1:80eb35f:      */
1:3bb140c:     @Override
1:80eb35f:     public ConstantAction makeConstantAction() {
1:bb21983:              return getGenericConstantActionFactory().
1:bb21983:                 getCreateSequenceConstantAction(
1:bb21983:                         _sequenceName,
1:bb21983:                         _dataType,
1:bb21983:                         _initialValue.longValue(),
1:bb21983:                         _stepValue.longValue(),
1:bb21983:                         _maxValue.longValue(),
1:bb21983:                         _minValue.longValue(),
1:3bb140c:                         _cycle);
1:9ce7492:     }
1:9ce7492: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:9ce7492: 
1:69f8afa:         if (_sequenceName != null) {
1:69f8afa:             _sequenceName = (TableName) _sequenceName.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:80eb35f: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1:         if (_sequenceName != null) {
1:             _sequenceName = (TableName) _sequenceName.accept(v);
1:         }
1:     }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class CreateSequenceNode extends DDLStatementNode
/////////////////////////////////////////////////////////////////////////
1:     private boolean _cycle;
1:      * Constructor for a CreateSequenceNode
/////////////////////////////////////////////////////////////////////////
1:      * @param cm Context manager
1:     CreateSequenceNode
1:          TableName sequenceName,
1:          DataTypeDescriptor dataType,
1:          Long initialValue,
1:          Long stepValue,
1:          Long maxValue,
1:          Long minValue,
1:          boolean cycle,
1:          ContextManager cm
1:         super(sequenceName, cm);
0:         setNodeType(C_NodeTypes.CREATE_SEQUENCE_NODE);
1:         this._sequenceName = sequenceName;
1:             _dataType = dataType;
1:         _stepValue = (stepValue != null ? stepValue : Long.valueOf(1));
1:             _minValue =
1:                 (minValue != null ? minValue : Long.valueOf(Short.MIN_VALUE));
1:             _maxValue =
1:                 (maxValue != null ? maxValue : Long.valueOf(Short.MAX_VALUE));
1:             _minValue =
1:                 (minValue != null ? minValue : Long.valueOf(Integer.MIN_VALUE));
1:             _maxValue =
1:                 (maxValue != null ? maxValue : Long.valueOf(Integer.MAX_VALUE));
1:             _minValue = (minValue != null ? minValue : Long.MIN_VALUE);
1:             _maxValue = (maxValue != null ? maxValue : Long.MAX_VALUE);
1:             _initialValue = initialValue;
/////////////////////////////////////////////////////////////////////////
1:         _cycle = cycle;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                         _cycle);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bb4cfe9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (_dataType.getTypeId().equals(TypeId.SMALLINT_ID)) {
0:             _minValue = (minValue != null ? (Long) minValue : new Long(Short.MIN_VALUE));
0:             _maxValue = (maxValue != null ? (Long) maxValue : new Long(Short.MAX_VALUE));
1:         } else if (_dataType.getTypeId().equals(TypeId.INTEGER_ID)) {
0:             _minValue = (minValue != null ? (Long) minValue : new Long(Integer.MIN_VALUE));
0:             _maxValue = (maxValue != null ? (Long) maxValue : new Long(Integer.MAX_VALUE));
1:         } else {
1:             // Could only be BIGINT
0:             _minValue = (minValue != null ? (Long) minValue : new Long(Long.MIN_VALUE));
0:             _maxValue = (maxValue != null ? (Long) maxValue : new Long(Long.MAX_VALUE));
1:         }
commit:729be57
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
/////////////////////////////////////////////////////////////////////////
0:         Long[]  minMax = SequenceDescriptor.computeMinMax( _dataType, minValue, maxValue );
0:         _minValue = minMax[ SequenceDescriptor.MIN_VALUE ];
0:         _maxValue = minMax[ SequenceDescriptor.MAX_VALUE ];
commit:3b77ab8
/////////////////////////////////////////////////////////////////////////
commit:bb21983
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (dataType != null) {
0:             _dataType = (DataTypeDescriptor) dataType;
1:         } else {
1:             _dataType = DataTypeDescriptor.INTEGER;
1:         }
0:         _stepValue = (stepValue != null ? (Long) stepValue : new Long(1));
1: 
1:         if (_dataType.getTypeId().equals(TypeId.SMALLINT_ID)) {
0:             _minValue = (minValue != null ? (Long) minValue : new Long(Short.MIN_VALUE));
0:             _maxValue = (maxValue != null ? (Long) maxValue : new Long(Short.MAX_VALUE));
1:         } else if (_dataType.getTypeId().equals(TypeId.INTEGER_ID)) {
0:             _minValue = (minValue != null ? (Long) minValue : new Long(Integer.MIN_VALUE));
0:             _maxValue = (maxValue != null ? (Long) maxValue : new Long(Integer.MAX_VALUE));
1:         } else {
0:             // Could only be BIGINT
0:             _minValue = (minValue != null ? (Long) minValue : new Long(Long.MIN_VALUE));
0:             _maxValue = (maxValue != null ? (Long) maxValue : new Long(Long.MAX_VALUE));
1:         }
1: 
1:         if (initialValue != null) {
0:             _initialValue = (Long) initialValue;
1:         } else {
1:             if (_stepValue.longValue() > 0L) {
1:                 _initialValue = _minValue;
1:             } else {
1:                 _initialValue = _maxValue;
1:             }
1:         }
0:         _cycle = (cycle != null ? (Boolean) cycle : Boolean.FALSE);
1: 
1:         // automatically create the schema if it doesn't exist
/////////////////////////////////////////////////////////////////////////
1:         // set the default schema name if the user did not explicitly specify a schema
0:         if (_dataType.getTypeId().equals(TypeId.SMALLINT_ID)) {
1:             if (_minValue.longValue() < Short.MIN_VALUE || _minValue.longValue() >= Short.MAX_VALUE) {
1:                 throw StandardException.newException(
1:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:                         "MINVALUE",
1:                         "SMALLINT",
1:                         Short.MIN_VALUE + "",
1:                         Short.MAX_VALUE + "");
1:             }
1:             if (_maxValue.longValue() <= Short.MIN_VALUE || _maxValue.longValue() > Short.MAX_VALUE) {
1:                 throw StandardException.newException(
1:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:                         "MAXVALUE",
1:                         "SMALLINT",
1:                         Short.MIN_VALUE + "",
1:                         Short.MAX_VALUE + "");
1:             }
0:         } else if (_dataType.getTypeId().equals(TypeId.INTEGER_ID)) {
1:             if (_minValue.longValue() < Integer.MIN_VALUE || _minValue.longValue() >= Integer.MAX_VALUE) {
1:                 throw StandardException.newException(
1:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:                         "MINVALUE",
1:                         "INTEGER",
1:                         Integer.MIN_VALUE + "",
1:                         Integer.MAX_VALUE + "");
1:             }
1:             if (_maxValue.longValue() <= Integer.MIN_VALUE || _maxValue.longValue() > Integer.MAX_VALUE) {
1:                 throw StandardException.newException(
1:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:                         "MAXVALUE",
1:                         "INTEGER",
1:                         Integer.MIN_VALUE + "",
1:                         Integer.MAX_VALUE + "");
1:             }
1:         } else {
1:             // BIGINT
1:             if (_minValue.longValue() < Long.MIN_VALUE || _minValue.longValue() >= Long.MAX_VALUE) {
1:                 throw StandardException.newException(
1:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:                         "MINVALUE",
1:                         "BIGINT",
1:                         Long.MIN_VALUE + "",
1:                         Long.MAX_VALUE + "");
1:             }
1:             if (_maxValue.longValue() <= Long.MIN_VALUE || _maxValue.longValue() > Long.MAX_VALUE) {
1:                 throw StandardException.newException(
1:                         SQLState.LANG_SEQ_ARG_OUT_OF_DATATYPE_RANGE,
1:                         "MAXVALUE",
1:                         "BIGINT",
1:                         Long.MIN_VALUE + "",
1:                         Long.MAX_VALUE + "");
1:             }
1:         }
1: 
1:         if (_minValue.longValue() >= _maxValue.longValue()) {
1:             throw StandardException.newException(
1:                     SQLState.LANG_SEQ_MIN_EXCEEDS_MAX,
1:                     _minValue.toString(),
1:                     _maxValue.toString());
1:         }
1: 
1:         if (_initialValue.longValue() < _minValue.longValue() || _initialValue.longValue() > _maxValue.longValue()) {
1:              throw StandardException.newException(
1:                      SQLState.LANG_SEQ_INVALID_START,
1:                      _initialValue.toString(),
1:                      _minValue.toString(),
1:                      _maxValue.toString());
1:         }       
1: 
1:         if (_stepValue.longValue() == 0L) {
1:             throw StandardException.newException(
1:                     SQLState.LANG_SEQ_INCREMENT_ZERO);
1:         }
1: 
0:         if (_stepValue.longValue() > _maxValue.longValue()
0:                 || _stepValue.longValue() < _minValue.longValue()) {
1:             throw StandardException.newException(
0:                     SQLState.LANG_SEQ_INCREMENT_OUT_OF_RANGE,
0:                     _stepValue.toString(),
1:                     _minValue.toString(),
1:                     _maxValue.toString());
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:              return getGenericConstantActionFactory().
1:                 getCreateSequenceConstantAction(
1:                         _sequenceName,
1:                         _dataType,
1:                         _initialValue.longValue(),
1:                         _stepValue.longValue(),
1:                         _maxValue.longValue(),
1:                         _minValue.longValue(),
0:                         _cycle.booleanValue());
commit:282c2ba
/////////////////////////////////////////////////////////////////////////
commit:9ce7492
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.types.TypeId;
1: 
0: public class CreateSequenceNode extends DDLStatementNode
1: {
1:     private TableName _sequenceName;
1:     private DataTypeDescriptor _dataType;
1:     private Long _initialValue;
1:     private Long _stepValue;
1:     private Long _maxValue;
1:     private Long _minValue;
0:     private Boolean _cycle;
/////////////////////////////////////////////////////////////////////////
1:      * @param dataType Exact numeric type of the new sequence
1:      * @param initialValue Starting value
1:      * @param stepValue Increment amount
1:      * @param maxValue Largest value returned by the sequence generator
1:      * @param minValue Smallest value returned by the sequence generator
1:      * @param cycle True if the generator should wrap around, false otherwise
1:      * @param sequenceName The name of the new sequence
1:      *
1:      * @throws org.apache.derby.iapi.error.StandardException on error
0:     public void init
1:         (
0:          Object sequenceName,
0:          Object dataType,
0:          Object initialValue,
0:          Object stepValue,
0:          Object maxValue,
0:          Object minValue,
0:          Object cycle
1:          ) throws StandardException {
0:         _sequenceName = (TableName) sequenceName;
0:         initAndCheck(_sequenceName);
1: 
0:         _dataType = (DataTypeDescriptor) dataType;
0:         _initialValue = (Long) initialValue;
0:         _stepValue = (Long) stepValue;
0:         _maxValue = (Long) maxValue;
0:         _minValue = (Long) minValue;
0:         _cycle = (Boolean) cycle;
/////////////////////////////////////////////////////////////////////////
1:                     "sequenceName: " + "\n" + _sequenceName + "\n";
/////////////////////////////////////////////////////////////////////////
0:        // set the default schema name if the user did not explicitly specify a schema
1:         if (_sequenceName.getSchemaName() == null) {
1:             _sequenceName.setSchemaName(sd.getSchemaName());
1: 
0:         // Right now we only support vanilla sequences
0:         if ( (_dataType != null) && ( !_dataType.getTypeId().equals( TypeId.INTEGER_ID ) ) ) { throw unimplementedFeature(); }
0:         if ( (_initialValue != null) && ( _initialValue.longValue() != -2147483648L ) ) { throw unimplementedFeature(); }
0:         if ( (_stepValue != null) && ( _stepValue.longValue() != 1L ) ) { throw unimplementedFeature(); }
0:         if ( (_maxValue != null) && ( _maxValue.longValue() != 2147483647L ) ) { throw unimplementedFeature(); }
0:         if ( (_minValue != null) && ( _minValue.longValue() != -2147483648L ) ) { throw unimplementedFeature(); }
0:         if ( (_cycle != null) && ( _cycle != Boolean.FALSE ) ) { throw unimplementedFeature(); }
1:         
/////////////////////////////////////////////////////////////////////////
0:                 getCreateSequenceConstantAction(_sequenceName);
1: 
0:     /** Report an unimplemented feature */
0:     private StandardException unimplementedFeature()
0:     {
0:         return StandardException.newException( SQLState.BTREE_UNIMPLEMENTED_FEATURE );
1:     }
1: 
commit:80eb35f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.CreateSequenceNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
1: /**
1:  * A CreateSequenceNode is the root of a QueryTree that
1:  * represents a CREATE SEQUENCE statement.
1:  */
1: 
0: public class CreateSequenceNode extends DDLStatementNode {
0:     private TableName sequenceName;
1: 
1:     public static final int SEQUENCE_ELEMENT_COUNT = 1;
1: 
1:     /**
0:      * Initializer for a CreateSequenceNode
1:      *
0:      * @param sequenceName The name of the new sequence
1:      * @throws org.apache.derby.iapi.error.StandardException
0:      *          Thrown on error
1:      */
0:     public void init(Object sequenceName) throws StandardException {
0:         this.sequenceName = (TableName) sequenceName;
0:         initAndCheck(sequenceName);
1: 
0:         // automcatically create the schema if it doesn't exist
1:         implicitCreateSchema = true;
1:     }
1: 
1:     /**
1:      * Convert this object to a String.  See comments in QueryTreeNode.java
1:      * for how this should be done for tree printing.
1:      *
1:      * @return This object as a String
1:      */
1: 
1:     public String toString() {
1:         if (SanityManager.DEBUG) {
1:             return super.toString() +
0:                     "sequenceName: " + "\n" + sequenceName + "\n";
0:         } else {
1:             return "";
1:         }
1:     }
1: 
1:     /**
1:      * Bind this CreateSequenceNode.
1:      * The main objectives of this method are to resolve the schema name, determine privilege checks,
1:      * and vet the variables in the CREATE SEQUENCE statement.
1:      */
1:     public void bindStatement() throws StandardException {
0:         CompilerContext cc = getCompilerContext();
1: 
1:         // implicitly create the schema if it does not exist.
1:         // this method also compiles permissions checks
1:         SchemaDescriptor sd = getSchemaDescriptor();
1: 
0: //        sequenceName.bind( getDataDictionary() );
0:         // set the default schema name if the user did not explicitly specify a schema
0:         if (sequenceName.getSchemaName() == null) {
0:             sequenceName.setSchemaName(sd.getSchemaName());
1:         }
1:     }
1: 
1:     public String statementToString() {
1:         return "CREATE SEQUENCE";
1:     }
1: 
1:     // We inherit the generate() method from DDLStatementNode.
1: 
1:     /**
1:      * Create the Constant information that will drive the guts of Execution.
1:      *
1:      * @throws org.apache.derby.iapi.error.StandardException
1:      *          Thrown on failure
1:      */
1:     public ConstantAction makeConstantAction() {
0:         return getGenericConstantActionFactory().
0:                 getCreateSequenceConstantAction(sequenceName);
1:     }
1: }
============================================================================