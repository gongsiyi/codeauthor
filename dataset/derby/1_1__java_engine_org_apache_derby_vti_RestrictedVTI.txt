1:86f2ca1: /*
1:86f2ca1: 
1:86f2ca1:    Derby - Class org.apache.derby.vti.RestrictedVTI
1:86f2ca1: 
1:86f2ca1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:86f2ca1:    contributor license agreements.  See the NOTICE file distributed with
1:86f2ca1:    this work for additional information regarding copyright ownership.
1:86f2ca1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:86f2ca1:    (the "License"); you may not use this file except in compliance with
1:86f2ca1:    the License.  You may obtain a copy of the License at
1:86f2ca1: 
1:86f2ca1:       http://www.apache.org/licenses/LICENSE-2.0
1:86f2ca1: 
1:86f2ca1:    Unless required by applicable law or agreed to in writing, software
1:86f2ca1:    distributed under the License is distributed on an "AS IS" BASIS,
1:86f2ca1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86f2ca1:    See the License for the specific language governing permissions and
1:86f2ca1:    limitations under the License.
1:86f2ca1: 
1:86f2ca1:  */
1:86f2ca1: package org.apache.derby.vti;
1:86f2ca1: 
1:86f2ca1: import java.sql.ResultSet;
1:86f2ca1: import java.sql.SQLException;
1:86f2ca1: 
1:86f2ca1: /**
1:86f2ca1:    <p>
1:86f2ca1:  * Interface for Table Functions which can be told which columns need to be fetched plus simple bounds on those columns.
1:86f2ca1:  * </p>
1:86f2ca1:  *
1:86f2ca1:  * <p>
1:86f2ca1:  * This interface can be implemented by the ResultSet returned by the public
1:86f2ca1:  * static method which is bound to the Table Function. If that ResultSet
1:86f2ca1:  * implements this interface, then the initScan() method of this interface will be
1:86f2ca1:  * called before the scan of the ResultSet starts, that is, before calling any
1:86f2ca1:  * ResultSet method.
1:86f2ca1:  * </p>
1:86f2ca1:  *
1:86f2ca1:  * <p>
1:86f2ca1:  * ResultSets which implement this interface can perform more efficiently
1:86f2ca1:  * because they don't have to fetch all columns and rows. This can mean
1:86f2ca1:  * performance boosts for queries which only need a subset of the Table
1:86f2ca1:  * Function's columns and for queries which compare those columns to constant
1:dbed020:  * expressions using the &lt;, &lt;=, =, &gt;, &gt;=, and != operators. This can also mean
1:86f2ca1:  * performance boosts for LIKE and BETWEEN operations on Table Function
1:86f2ca1:  * columns. For more information, see the commentary on
1:86f2ca1:  * <a href="https://issues.apache.org/jira/browse/DERBY-4357">DERBY-4357</a>.
1:86f2ca1:  * </p>
1:86f2ca1:  */
1:86f2ca1: public interface RestrictedVTI
1:86f2ca1: {
1:86f2ca1:     /**
1:86f2ca1:      * <p>
1:86f2ca1:      * Initialize a scan of a ResultSet. This method is called once before the scan begins. It
1:86f2ca1:      * is called before any
1:86f2ca1:      * ResultSet method is called. This method performs two tasks:
1:86f2ca1:      * </p>
1:86f2ca1:      *
1:86f2ca1:      * <li><b>Column names</b> - Tells the ResultSet which columns need to be fetched.</li>
1:86f2ca1:      * <li><b>Limits</b> - Gives the ResultSet simple bounds to apply in order
1:86f2ca1:      * to limit which rows are returned. Note that the ResultSet does not have
1:86f2ca1:      * to enforce all of these bounds. Derby will redundantly enforce these
1:86f2ca1:      * limits on all rows returned by the ResultSet. That is, filtering not
1:86f2ca1:      * performed inside the ResultSet will still happen outside the ResultSet.</li>
1:86f2ca1:      *
1:86f2ca1:      * <p>
1:86f2ca1:      * The <i>columnNames</i> argument is an array of columns which need to be fetched.  This
1:86f2ca1:      * is an array of the column names declared in the Table Function's
1:86f2ca1:      * CREATE FUNCTION statement. Column names which were double-quoted
1:86f2ca1:      * in the CREATE FUNCTION statement appear case-sensitive in this
1:86f2ca1:      * array. Column names which were not double-quoted appear
1:86f2ca1:      * upper-cased. Derby asks the Table Function to fetch all columns mentioned
1:86f2ca1:      * in the query. This includes columns mentioned in the SELECT list as well
1:86f2ca1:      * as columns mentioned in the WHERE clause. Note that a column could be
1:86f2ca1:      * mentioned in the WHERE clause in a complex expression which could not be
1:86f2ca1:      * passed to the Table Function via the <i>restriction</i> argument.
1:86f2ca1:      * </p>
1:86f2ca1:      *
1:86f2ca1:      * <p>
1:86f2ca1:      * The array has one slot for each column declared in the CREATE FUNCTION
1:86f2ca1:      * statement. Slot 0 corresponds to the first column declared in the CREATE
1:86f2ca1:      * FUNCTION statement and so on. If a column does not need to be
1:86f2ca1:      * fetched, then the corresponding slot is null. If a column needs
1:86f2ca1:      * to be fetched, then the corresponding slot holds the column's
1:86f2ca1:      * name.
1:86f2ca1:      * </p>
1:86f2ca1:      *
1:86f2ca1:      * <p>
1:86f2ca1:      * Note that even though the array may have gaps, it is expected that
1:86f2ca1:      * columns in the ResultSet will occur at the positions declared in the
1:86f2ca1:      * CREATE FUNCTION statement. Consider the following declaration:
1:86f2ca1:      * </p>
1:86f2ca1:      *
1:86f2ca1:      * <blockquote><pre>
1:86f2ca1:      *  create function foreignEmployeeTable()
1:86f2ca1:      *  returns table
1:86f2ca1:      *  (
1:86f2ca1:      *      id        int,
1:86f2ca1:      *      birthDay  date,
1:86f2ca1:      *      firstName varchar( 100 ),
1:86f2ca1:      *      lastName  varchar( 100 )
1:86f2ca1:      *  )
1:86f2ca1:      * ...
1:86f2ca1:      * </pre></blockquote>
1:86f2ca1:      *
1:86f2ca1:      * <p>
1:86f2ca1:      * and the following query:
1:86f2ca1:      * </p>
1:86f2ca1:      *
1:86f2ca1:      * <blockquote><pre>
1:86f2ca1:      * select lastName from table( foreignEmployeeTable() ) s
1:86f2ca1:      * </pre></blockquote>
1:86f2ca1:      *
1:86f2ca1:      * <p>
1:86f2ca1:      * In this example, the array passed to this method will have
1:86f2ca1:      * 4 slots. Slots 0, 1, and 2 will be null and slot 3 will hold
1:86f2ca1:      * the String "LASTNAME". Last names will be retrieved from the
1:86f2ca1:      * ResultSet by calls to getString( 4 )--remember that JDBC column
1:86f2ca1:      * ids are 1-based.
1:86f2ca1:      * </p>
1:86f2ca1:      *
1:86f2ca1:      * <p>
1:86f2ca1:      * The <i>restriction</i> argument is a simple expression which should be evaluated inside the Table
1:86f2ca1:      * Function in order to eliminate rows. The expression is a binary tree built out of ANDs,
1:86f2ca1:      * ORs, and column qualifiers. The column qualifiers are simple comparisons
1:86f2ca1:      * between constant values and columns in the Table Function. The Table
1:86f2ca1:      * Function only returns rows which satisfy the expression. The
1:86f2ca1:      * <i>restriction</i> is redundantly enforced by Derby on the rows returned
1:86f2ca1:      * by the ResultSet--this means that <i>restriction</i> gives the Table
1:86f2ca1:      * Function a hint about how to optimize its performance but the Table
1:86f2ca1:      * Function is not required to enforce the entire <i>restriction</i>.
1:86f2ca1:      * </p>
1:86f2ca1:      */
1:86f2ca1:     public void initScan( String[] columnNames, Restriction restriction ) throws SQLException;
1:86f2ca1: 
1:86f2ca1: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  * expressions using the &lt;, &lt;=, =, &gt;, &gt;=, and != operators. This can also mean
commit:0d2a54f
/////////////////////////////////////////////////////////////////////////
0:  * expressions using the <, <=, =, >, >=, and != operators. This can also mean
commit:86f2ca1
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.vti.RestrictedVTI
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.vti;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: /**
1:    <p>
1:  * Interface for Table Functions which can be told which columns need to be fetched plus simple bounds on those columns.
1:  * </p>
1:  *
1:  * <p>
1:  * This interface can be implemented by the ResultSet returned by the public
1:  * static method which is bound to the Table Function. If that ResultSet
1:  * implements this interface, then the initScan() method of this interface will be
1:  * called before the scan of the ResultSet starts, that is, before calling any
1:  * ResultSet method.
1:  * </p>
1:  *
1:  * <p>
1:  * ResultSets which implement this interface can perform more efficiently
1:  * because they don't have to fetch all columns and rows. This can mean
1:  * performance boosts for queries which only need a subset of the Table
1:  * Function's columns and for queries which compare those columns to constant
0:  * expressions using the <, <=, =, >, and >= operators. This can also mean
1:  * performance boosts for LIKE and BETWEEN operations on Table Function
1:  * columns. For more information, see the commentary on
1:  * <a href="https://issues.apache.org/jira/browse/DERBY-4357">DERBY-4357</a>.
1:  * </p>
1:  */
1: public interface RestrictedVTI
1: {
1:     /**
1:      * <p>
1:      * Initialize a scan of a ResultSet. This method is called once before the scan begins. It
1:      * is called before any
1:      * ResultSet method is called. This method performs two tasks:
1:      * </p>
1:      *
1:      * <li><b>Column names</b> - Tells the ResultSet which columns need to be fetched.</li>
1:      * <li><b>Limits</b> - Gives the ResultSet simple bounds to apply in order
1:      * to limit which rows are returned. Note that the ResultSet does not have
1:      * to enforce all of these bounds. Derby will redundantly enforce these
1:      * limits on all rows returned by the ResultSet. That is, filtering not
1:      * performed inside the ResultSet will still happen outside the ResultSet.</li>
1:      *
1:      * <p>
1:      * The <i>columnNames</i> argument is an array of columns which need to be fetched.  This
1:      * is an array of the column names declared in the Table Function's
1:      * CREATE FUNCTION statement. Column names which were double-quoted
1:      * in the CREATE FUNCTION statement appear case-sensitive in this
1:      * array. Column names which were not double-quoted appear
1:      * upper-cased. Derby asks the Table Function to fetch all columns mentioned
1:      * in the query. This includes columns mentioned in the SELECT list as well
1:      * as columns mentioned in the WHERE clause. Note that a column could be
1:      * mentioned in the WHERE clause in a complex expression which could not be
1:      * passed to the Table Function via the <i>restriction</i> argument.
1:      * </p>
1:      *
1:      * <p>
1:      * The array has one slot for each column declared in the CREATE FUNCTION
1:      * statement. Slot 0 corresponds to the first column declared in the CREATE
1:      * FUNCTION statement and so on. If a column does not need to be
1:      * fetched, then the corresponding slot is null. If a column needs
1:      * to be fetched, then the corresponding slot holds the column's
1:      * name.
1:      * </p>
1:      *
1:      * <p>
1:      * Note that even though the array may have gaps, it is expected that
1:      * columns in the ResultSet will occur at the positions declared in the
1:      * CREATE FUNCTION statement. Consider the following declaration:
1:      * </p>
1:      *
1:      * <blockquote><pre>
1:      *  create function foreignEmployeeTable()
1:      *  returns table
1:      *  (
1:      *      id        int,
1:      *      birthDay  date,
1:      *      firstName varchar( 100 ),
1:      *      lastName  varchar( 100 )
1:      *  )
1:      * ...
1:      * </pre></blockquote>
1:      *
1:      * <p>
1:      * and the following query:
1:      * </p>
1:      *
1:      * <blockquote><pre>
1:      * select lastName from table( foreignEmployeeTable() ) s
1:      * </pre></blockquote>
1:      *
1:      * <p>
1:      * In this example, the array passed to this method will have
1:      * 4 slots. Slots 0, 1, and 2 will be null and slot 3 will hold
1:      * the String "LASTNAME". Last names will be retrieved from the
1:      * ResultSet by calls to getString( 4 )--remember that JDBC column
1:      * ids are 1-based.
1:      * </p>
1:      *
1:      * <p>
1:      * The <i>restriction</i> argument is a simple expression which should be evaluated inside the Table
1:      * Function in order to eliminate rows. The expression is a binary tree built out of ANDs,
1:      * ORs, and column qualifiers. The column qualifiers are simple comparisons
1:      * between constant values and columns in the Table Function. The Table
1:      * Function only returns rows which satisfy the expression. The
1:      * <i>restriction</i> is redundantly enforced by Derby on the rows returned
1:      * by the ResultSet--this means that <i>restriction</i> gives the Table
1:      * Function a hint about how to optimize its performance but the Table
1:      * Function is not required to enforce the entire <i>restriction</i>.
1:      * </p>
1:      */
1:     public void initScan( String[] columnNames, Restriction restriction ) throws SQLException;
1: 
1: }
============================================================================