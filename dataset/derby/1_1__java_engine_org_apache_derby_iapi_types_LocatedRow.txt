1:e81e52c: /*
1:e81e52c: 
1:e81e52c:    Derby - Class org.apache.derby.iapi.types.LocatedRow
1:e81e52c: 
1:e81e52c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e81e52c:    contributor license agreements.  See the NOTICE file distributed with
1:e81e52c:    this work for additional information regarding copyright ownership.
1:e81e52c:    The ASF licenses this file to you under the Apache License, Version 2.0
1:e81e52c:    (the "License"); you may not use this file except in compliance with
1:e81e52c:    the License.  You may obtain a copy of the License at
1:e81e52c: 
1:e81e52c:       http://www.apache.org/licenses/LICENSE-2.0
1:e81e52c: 
1:e81e52c:    Unless required by applicable law or agreed to in writing, software
1:e81e52c:    distributed under the License is distributed on an "AS IS" BASIS,
1:e81e52c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e81e52c:    See the License for the specific language governing permissions and
1:e81e52c:    limitations under the License.
1:e81e52c: 
1:e81e52c:  */
1:e81e52c: 
1:e81e52c: package org.apache.derby.iapi.types;
1:e81e52c: 
1:e81e52c: /**
1:e81e52c:  * <p>
1:e81e52c:  * Mutable holder for the column values and RowLocation of a conglomerate row.
1:e81e52c:  * Use with caution because values and arrays are not copied when they
1:e81e52c:  * are passed in and out.
1:e81e52c:  * </p>
1:e81e52c:  */
1:e81e52c: public class LocatedRow
1:e81e52c: {
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c:     //
1:e81e52c:     // STATE
1:e81e52c:     //
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c: 
1:e81e52c:     private DataValueDescriptor[]   _columnValues;
1:e81e52c:     private RowLocation                 _rowLocation;
1:e81e52c: 
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c:     //
1:e81e52c:     // CONSTRUCTORS
1:e81e52c:     //
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c: 
1:e81e52c:     /**
1:e81e52c:      * <p>
1:e81e52c:      * Construct from column values and row location.
1:e81e52c:      * </p>
1:e81e52c:      */
1:e81e52c:     public  LocatedRow
1:e81e52c:         (
1:e81e52c:          DataValueDescriptor[]  columnValues,
1:e81e52c:          RowLocation                rowLocation
1:e81e52c:          )
1:e81e52c:     {
1:e81e52c:         _columnValues = columnValues;
1:e81e52c:         _rowLocation = rowLocation;
1:e81e52c:     }
1:e81e52c: 
1:e81e52c:     /**
1:e81e52c:      * <p>
1:e81e52c:      * Construct from an array of column values, where the last value
1:e81e52c:      * is the RowLocation.
1:e81e52c:      * </p>
1:e81e52c:      */
1:e81e52c:     public  LocatedRow( DataValueDescriptor[] columnsAndRowLocation )
1:e81e52c:     {
1:e81e52c:         int     columnCount = columnsAndRowLocation.length - 1;
1:e81e52c:         int     idx = 0;
1:e81e52c: 
1:e81e52c:         _columnValues = new DataValueDescriptor[ columnCount ];
1:e81e52c:         for ( ; idx < columnCount; idx++ )
1:e81e52c:         { _columnValues[ idx ] = columnsAndRowLocation[ idx ]; }
1:e81e52c:         _rowLocation = (RowLocation) columnsAndRowLocation[ idx ];
1:e81e52c:     }
1:e81e52c: 
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c:     //
1:e81e52c:     // ACCESSORS
1:e81e52c:     //
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c: 
1:e81e52c:     /** Get the array of column values */
1:e81e52c:     public  DataValueDescriptor[]   columnValues() { return _columnValues; }
1:e81e52c: 
1:e81e52c:     /**
1:e81e52c:      * Flatten this LocatedRow into a DataValueDescriptor[] where the last cell
1:e81e52c:      * contains the RowLocation.
1:e81e52c:      */
1:e81e52c:     public  DataValueDescriptor[]   flatten()
1:e81e52c:     {
1:e81e52c:         return flatten( _columnValues, _rowLocation );
1:e81e52c:     }
1:e81e52c: 
1:e81e52c:     /** Get the RowLocation */
1:e81e52c:     public  RowLocation rowLocation() { return _rowLocation; }
1:e81e52c: 
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c:     //
1:e81e52c:     // STATIC BEHAVIOR
1:e81e52c:     //
1:e81e52c:     ////////////////////////////////////////////////////////////////
1:e81e52c: 
1:e81e52c:     /** Append a RowLocation to the end of a column array */
1:e81e52c:     public  static  DataValueDescriptor[]   flatten
1:e81e52c:         ( DataValueDescriptor[] columnValues, RowLocation rowLocation )
1:e81e52c:     {
1:e81e52c:         DataValueDescriptor[]   result =
1:e81e52c:             new DataValueDescriptor[ columnValues.length + 1 ];
1:e81e52c:         int                             idx = 0;
1:e81e52c: 
1:e81e52c:         for ( ; idx < columnValues.length; idx++ )
1:e81e52c:         { result[ idx ] = columnValues[ idx ]; }
1:e81e52c:         result[ idx ] = rowLocation;
1:e81e52c: 
1:e81e52c:         return result;
1:e81e52c:     }
1:e81e52c: 
1:e81e52c: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e81e52c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.types.LocatedRow
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: /**
1:  * <p>
1:  * Mutable holder for the column values and RowLocation of a conglomerate row.
1:  * Use with caution because values and arrays are not copied when they
1:  * are passed in and out.
1:  * </p>
1:  */
1: public class LocatedRow
1: {
1:     ////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ////////////////////////////////////////////////////////////////
1: 
1:     private DataValueDescriptor[]   _columnValues;
1:     private RowLocation                 _rowLocation;
1: 
1:     ////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Construct from column values and row location.
1:      * </p>
1:      */
1:     public  LocatedRow
1:         (
1:          DataValueDescriptor[]  columnValues,
1:          RowLocation                rowLocation
1:          )
1:     {
1:         _columnValues = columnValues;
1:         _rowLocation = rowLocation;
1:     }
1: 
1:     /**
1:      * <p>
1:      * Construct from an array of column values, where the last value
1:      * is the RowLocation.
1:      * </p>
1:      */
1:     public  LocatedRow( DataValueDescriptor[] columnsAndRowLocation )
1:     {
1:         int     columnCount = columnsAndRowLocation.length - 1;
1:         int     idx = 0;
1: 
1:         _columnValues = new DataValueDescriptor[ columnCount ];
1:         for ( ; idx < columnCount; idx++ )
1:         { _columnValues[ idx ] = columnsAndRowLocation[ idx ]; }
1:         _rowLocation = (RowLocation) columnsAndRowLocation[ idx ];
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////
1:     //
1:     // ACCESSORS
1:     //
1:     ////////////////////////////////////////////////////////////////
1: 
1:     /** Get the array of column values */
1:     public  DataValueDescriptor[]   columnValues() { return _columnValues; }
1: 
1:     /**
1:      * Flatten this LocatedRow into a DataValueDescriptor[] where the last cell
1:      * contains the RowLocation.
1:      */
1:     public  DataValueDescriptor[]   flatten()
1:     {
1:         return flatten( _columnValues, _rowLocation );
1:     }
1: 
1:     /** Get the RowLocation */
1:     public  RowLocation rowLocation() { return _rowLocation; }
1: 
1:     ////////////////////////////////////////////////////////////////
1:     //
1:     // STATIC BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////
1: 
1:     /** Append a RowLocation to the end of a column array */
1:     public  static  DataValueDescriptor[]   flatten
1:         ( DataValueDescriptor[] columnValues, RowLocation rowLocation )
1:     {
1:         DataValueDescriptor[]   result =
1:             new DataValueDescriptor[ columnValues.length + 1 ];
1:         int                             idx = 0;
1: 
1:         for ( ; idx < columnValues.length; idx++ )
1:         { result[ idx ] = columnValues[ idx ]; }
1:         result[ idx ] = rowLocation;
1: 
1:         return result;
1:     }
1: 
1: }
============================================================================