1:0d2840c: /*
1:0d2840c:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.SampMog
1:0d2840c: 
1:0d2840c:    Licensed to the Apache Software Foundation (ASF) under one
1:0d2840c:    or more contributor license agreements.  See the NOTICE file
1:0d2840c:    distributed with this work for additional information
1:0d2840c:    regarding copyright ownership.  The ASF licenses this file
1:0d2840c:    to you under the Apache License, Version 2.0 (the
1:0d2840c:    "License"); you may not use this file except in compliance
1:0d2840c:    with the License.  You may obtain a copy of the License at
1:0d2840c: 
1:0d2840c:      http://www.apache.org/licenses/LICENSE-2.0
1:0d2840c: 
1:0d2840c:    Unless required by applicable law or agreed to in writing,
1:0d2840c:    software distributed under the License is distributed on an
1:0d2840c:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0d2840c:    KIND, either express or implied.  See the License for the
1:0d2840c:    specific language governing permissions and limitations
1:0d2840c:    under the License.
1:0d2840c:  */
1:0d2840c: 
1:0d2840c: package org.apache.derbyTesting.functionTests.tests.memorydb;
1:0d2840c: 
1:0d2840c: import java.util.Arrays;
1:0d2840c: import java.util.Random;
1:0d2840c: 
1:0d2840c: /**
1:0d2840c:  * Simple utility to generate samples from a mixture-of-Gaussian distribution.
1:0d2840c:  */
1:0d2840c: public class SampMog
1:0d2840c: {
1:0d2840c:   /** default constructor */
1:0d2840c:   public SampMog() { rng = new Random(System.currentTimeMillis()); }
1:0d2840c: 
1:0d2840c:   /** constructor with specified RNG */
1:0d2840c:   public SampMog(Random rng) { this.rng = rng; }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Generate samples from the specified mixture-of-Gaussian distribution.
1:0d2840c:    * @param ns number of samples to generate
1:0d2840c:    * @param sample output array of generated samples
1:0d2840c:    */
1:0d2840c:   public void generate(int ns, double sample[])
1:0d2840c:   {
1:0d2840c:     // First, generate standard normal samples, drawn from N(0, 1).
1:0d2840c:     for (int i=0; i<ns; ++i) {
1:0d2840c:       final double r = rng.nextGaussian();
1:0d2840c:       sample[i] = r;
1:0d2840c:     }
1:0d2840c:     // Then, transform the samples to conform to the Gaussian components
1:0d2840c:     // according to their weights.
1:0d2840c:     for (int i=0; i<ns; ++i) {
1:0d2840c:       // Pick a Gaussian component, represented by (idx).
1:0d2840c:       final double w = rng.nextDouble();
1:0d2840c:       int idx = Arrays.binarySearch(cumulative, w);
1:0d2840c:       if (idx < 0) { idx = -(idx + 1); }
1:0d2840c:       if (idx >= n) { idx = n-1; }
1:0d2840c:       final double m = mean[idx];
1:0d2840c:       final double s = stdv[idx];
1:0d2840c:       // Transform the sample to conform to the Gaussian component.
1:0d2840c:       final double r = sample[i];
1:0d2840c:       final double x = m + s * r;
1:0d2840c:       sample[i] = x;
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Get the maximum number of Gaussian components. */
1:0d2840c:   public static int getMaxNumber() { return max_n; }
1:0d2840c: 
1:0d2840c:   /** Get the number of Gaussian components. */
1:0d2840c:   public int getNumber() { return n; }
1:0d2840c: 
1:0d2840c:   /** Specify the mixture-of-Gaussian configuration. */
1:0d2840c:   public void set(int n, double wts[], double mm[], double vv[])
1:0d2840c:   {
1:0d2840c:     setNumber(n);
1:0d2840c:     setWeights(wts);
1:0d2840c:     setMeans(mm);
1:0d2840c:     setVars(vv);
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Set the number of Gaussian components. */
1:0d2840c:   public void setNumber(int n)
1:0d2840c:   {
1:0d2840c:     if (1 <= n && n <= max_n) {
1:0d2840c:       this.n = n;
1:0d2840c:     }
1:0d2840c:     else {
1:0d2840c:       final String msg =
1:0d2840c:         "Number of Gaussian components (" + n + ") not in [1, " + max_n + "].";
1:0d2840c:       throw new IllegalArgumentException(msg);
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Specify the weights for the Gaussian components. */
1:0d2840c:   public void setWeights(double wts[])
1:0d2840c:   {
1:0d2840c:     // Copy weights to internal state array.
1:0d2840c:     System.arraycopy(wts, 0, weight, 0, n);
1:0d2840c: 
1:0d2840c:     // Normalize the weights to sum to 1.
1:0d2840c:     IllegalArgumentException ex = null;
1:0d2840c:     double sum = 0.0;
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final double wt = weight[i];
1:0d2840c:       if (wt > 0.0) {
1:0d2840c:         sum += wt;
1:0d2840c:       }
1:0d2840c:       else {
1:0d2840c:         if (ex == null) {
1:0d2840c:           final String msg = "Invalid weight (" + wt + ").";
1:0d2840c:           ex = new IllegalArgumentException(msg);
1:0d2840c:         }
1:0d2840c:       }
1:0d2840c:     }
1:0d2840c:     if (sum > 0.0) {
1:0d2840c:       for (int i=0; i<n; ++i) { weight[i] /= sum; }
1:0d2840c:     }
1:0d2840c:     else {
1:0d2840c:       if (ex == null) {
1:0d2840c:         final String msg = "Invalid total weight (" + sum + ").";
1:0d2840c:         ex = new IllegalArgumentException(msg);
1:0d2840c:       }
1:0d2840c:     }
1:0d2840c:     if (ex != null) { throw ex; }
1:0d2840c: 
1:0d2840c:     // Compute cumulative weights.
1:0d2840c:     cumulative[0] = weight[0];
1:0d2840c:     for (int i=1; i<n; ++i) { cumulative[i] = Math.min(cumulative[i-1] + weight[i], 1.0); }
1:0d2840c:     for (int i=n; i<max_n; ++i) { cumulative[i] = 1.0; }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Specify the mean parameters for the Gaussian components. */
1:0d2840c:   public void setMeans(double mm[])
1:0d2840c:   {
1:0d2840c:     System.arraycopy(mm, 0, mean, 0, n);
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Specify the variance parameters for the Gaussian components. */
1:0d2840c:   public void setVars(double vv[])
1:0d2840c:   {
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final double v = Math.abs(vv[i]);
1:0d2840c:       var[i] = v;
1:0d2840c:       stdv[i] = Math.sqrt(v);
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** random number generator in use */
1:0d2840c:   public Random rng;
1:0d2840c: 
1:0d2840c:   /** maximum number of Gaussian components */
1:0d2840c:   public final static int max_n = 6;
1:0d2840c: 
1:0d2840c:   /** actual number of Gaussian components */
1:0d2840c:   int n = 3;
1:0d2840c:   /** weights associated with the Gaussian components */
1:0d2840c:   final double weight[] = new double[max_n];
1:0d2840c:   /** mean parameters for the Gaussian components */
1:0d2840c:   final double mean[] = new double[max_n];
1:0d2840c:   /** variance parameters for the Gaussian components */
1:0d2840c:   final double var[] = new double[max_n];
1:0d2840c: 
1:0d2840c:   /** cumulative weights, for sample generation */
1:0d2840c:   final double cumulative[] = new double[max_n];
1:0d2840c:   /** standard deviation parameters for the Gaussian components */
1:0d2840c:   final double stdv[] = new double[max_n];
1:0d2840c: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:0d2840c
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.SampMog
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memorydb;
1: 
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: /**
1:  * Simple utility to generate samples from a mixture-of-Gaussian distribution.
1:  */
1: public class SampMog
1: {
1:   /** default constructor */
1:   public SampMog() { rng = new Random(System.currentTimeMillis()); }
1: 
1:   /** constructor with specified RNG */
1:   public SampMog(Random rng) { this.rng = rng; }
1: 
1:   /**
1:    * Generate samples from the specified mixture-of-Gaussian distribution.
1:    * @param ns number of samples to generate
1:    * @param sample output array of generated samples
1:    */
1:   public void generate(int ns, double sample[])
1:   {
1:     // First, generate standard normal samples, drawn from N(0, 1).
1:     for (int i=0; i<ns; ++i) {
1:       final double r = rng.nextGaussian();
1:       sample[i] = r;
1:     }
1:     // Then, transform the samples to conform to the Gaussian components
1:     // according to their weights.
1:     for (int i=0; i<ns; ++i) {
1:       // Pick a Gaussian component, represented by (idx).
1:       final double w = rng.nextDouble();
1:       int idx = Arrays.binarySearch(cumulative, w);
1:       if (idx < 0) { idx = -(idx + 1); }
1:       if (idx >= n) { idx = n-1; }
1:       final double m = mean[idx];
1:       final double s = stdv[idx];
1:       // Transform the sample to conform to the Gaussian component.
1:       final double r = sample[i];
1:       final double x = m + s * r;
1:       sample[i] = x;
1:     }
1:   }
1: 
1:   /** Get the maximum number of Gaussian components. */
1:   public static int getMaxNumber() { return max_n; }
1: 
1:   /** Get the number of Gaussian components. */
1:   public int getNumber() { return n; }
1: 
1:   /** Specify the mixture-of-Gaussian configuration. */
1:   public void set(int n, double wts[], double mm[], double vv[])
1:   {
1:     setNumber(n);
1:     setWeights(wts);
1:     setMeans(mm);
1:     setVars(vv);
1:   }
1: 
1:   /** Set the number of Gaussian components. */
1:   public void setNumber(int n)
1:   {
1:     if (1 <= n && n <= max_n) {
1:       this.n = n;
1:     }
1:     else {
1:       final String msg =
1:         "Number of Gaussian components (" + n + ") not in [1, " + max_n + "].";
1:       throw new IllegalArgumentException(msg);
1:     }
1:   }
1: 
1:   /** Specify the weights for the Gaussian components. */
1:   public void setWeights(double wts[])
1:   {
1:     // Copy weights to internal state array.
1:     System.arraycopy(wts, 0, weight, 0, n);
1: 
1:     // Normalize the weights to sum to 1.
1:     IllegalArgumentException ex = null;
1:     double sum = 0.0;
1:     for (int i=0; i<n; ++i) {
1:       final double wt = weight[i];
1:       if (wt > 0.0) {
1:         sum += wt;
1:       }
1:       else {
1:         if (ex == null) {
1:           final String msg = "Invalid weight (" + wt + ").";
1:           ex = new IllegalArgumentException(msg);
1:         }
1:       }
1:     }
1:     if (sum > 0.0) {
1:       for (int i=0; i<n; ++i) { weight[i] /= sum; }
1:     }
1:     else {
1:       if (ex == null) {
1:         final String msg = "Invalid total weight (" + sum + ").";
1:         ex = new IllegalArgumentException(msg);
1:       }
1:     }
1:     if (ex != null) { throw ex; }
1: 
1:     // Compute cumulative weights.
1:     cumulative[0] = weight[0];
1:     for (int i=1; i<n; ++i) { cumulative[i] = Math.min(cumulative[i-1] + weight[i], 1.0); }
1:     for (int i=n; i<max_n; ++i) { cumulative[i] = 1.0; }
1:   }
1: 
1:   /** Specify the mean parameters for the Gaussian components. */
1:   public void setMeans(double mm[])
1:   {
1:     System.arraycopy(mm, 0, mean, 0, n);
1:   }
1: 
1:   /** Specify the variance parameters for the Gaussian components. */
1:   public void setVars(double vv[])
1:   {
1:     for (int i=0; i<n; ++i) {
1:       final double v = Math.abs(vv[i]);
1:       var[i] = v;
1:       stdv[i] = Math.sqrt(v);
1:     }
1:   }
1: 
1:   /** random number generator in use */
1:   public Random rng;
1: 
1:   /** maximum number of Gaussian components */
1:   public final static int max_n = 6;
1: 
1:   /** actual number of Gaussian components */
1:   int n = 3;
1:   /** weights associated with the Gaussian components */
1:   final double weight[] = new double[max_n];
1:   /** mean parameters for the Gaussian components */
1:   final double mean[] = new double[max_n];
1:   /** variance parameters for the Gaussian components */
1:   final double var[] = new double[max_n];
1: 
1:   /** cumulative weights, for sample generation */
1:   final double cumulative[] = new double[max_n];
1:   /** standard deviation parameters for the Gaussian components */
1:   final double stdv[] = new double[max_n];
1: }
============================================================================