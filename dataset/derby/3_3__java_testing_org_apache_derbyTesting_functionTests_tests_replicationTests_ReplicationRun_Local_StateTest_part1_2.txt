1:40a554b: /*
2:40a554b:  
1:9c2b1f3: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2
1:40a554b:  
1:40a554b: Licensed to the Apache Software Foundation (ASF) under one or more
1:40a554b: contributor license agreements.  See the NOTICE file distributed with
1:40a554b: this work for additional information regarding copyright ownership.
1:40a554b: The ASF licenses this file to You under the Apache License, Version 2.0
1:40a554b: (the "License"); you may not use this file except in compliance with
1:40a554b: the License.  You may obtain a copy of the License at
1:40a554b:  
1:40a554b:    http://www.apache.org/licenses/LICENSE-2.0
1:40a554b:  
1:40a554b: Unless required by applicable law or agreed to in writing, software
1:40a554b: distributed under the License is distributed on an "AS IS" BASIS,
1:40a554b: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a554b: See the License for the specific language governing permissions and
1:40a554b: limitations under the License.
1:40a554b:  
1:40a554b:  */
1:40a554b: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:40a554b: 
1:40a554b: import java.sql.Connection;
1:40a554b: import java.sql.DriverManager;
1:40a554b: import java.sql.SQLException;
1:40a554b: import junit.framework.Test;
1:8c9d41e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:40a554b: 
1:40a554b: 
1:40a554b: /**
1:40a554b:  * Run a replication test on localhost
1:40a554b:  * by using default values for master and slave hosts,
1:40a554b:  * and master and slave ports.
1:40a554b:  * 
1:40a554b:  */
1:40a554b: 
1:40a554b: public class ReplicationRun_Local_StateTest_part1_2 extends ReplicationRun
3:40a554b: {
1:40a554b:     
1:84fa650:     final static String CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE     = "08004";
1:8c9d41e:     final static String LOGIN_FAILED = "08004";
1:8c9d41e:     final static String REPLICATION_DB_NOT_BOOTED = "XRE11";
1:8c9d41e:     final static String REPLICATION_MASTER_ALREADY_BOOTED = "XRE22";
1:8c9d41e:     final static String REPLICATION_NOT_IN_MASTER_MODE = "XRE07";
1:8c9d41e:     final static String REPLICATION_SLAVE_STARTED_OK = "XRE08";
1:84fa650: 
1:40a554b:     /**
1:40a554b:      * Creates a new instance of ReplicationRun_Local_StateTest_part1
1:40a554b:      * 
1:40a554b:      * @param testcaseName Identifying the test.
1:40a554b:      */
1:40a554b:     public ReplicationRun_Local_StateTest_part1_2(String testcaseName)
1:40a554b:     {
1:40a554b:         super(testcaseName);
1:40a554b:     }
1:40a554b:         
1:40a554b:     public static Test suite()
1:40a554b:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_StateTest_part1_2 Suite");
1:40a554b:         
1:40a554b:         suite.addTestSuite( ReplicationRun_Local_StateTest_part1_2.class );
1:40a554b:         
1:40a554b:         return SecurityManagerSetup.noSecurityManager(suite);
1:40a554b:     }
1:40a554b:     
1:40a554b:     //////////////////////////////////////////////////////////////
1:40a554b:     ////
1:40a554b:     //// The replication test framework (testReplication()):
1:40a554b:     //// a) "clean" replication run starting master and slave servers,
1:40a554b:     ////     preparing master and slave databases,
1:40a554b:     ////     starting and stopping replication and doing
1:40a554b:     ////     failover for a "normal"/"failure free" replication
1:40a554b:     ////     test run.
1:40a554b:     ////
1:40a554b:     //////////////////////////////////////////////////////////////
1:40a554b:     
1:40a554b:     public void testReplication_Local_StateTest_part1_2()
1:40a554b:     throws Exception
1:40a554b:     {
1:40a554b:         cleanAllTestHosts();
1:40a554b:         
1:40a554b:         initEnvironment();
1:40a554b:         
1:40a554b:         initMaster(masterServerHost,
1:40a554b:                 replicatedDb);
1:40a554b:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:40a554b:                 masterServerHost,
1:40a554b:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:40a554b:                 masterServerPort,
1:dbe5dc3:                 masterDbSubPath); // Distinguishing master/slave
1:40a554b:         
1:40a554b:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:40a554b:                 slaveServerHost,
1:40a554b:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:40a554b:                 slaveServerPort,
1:dbe5dc3:                 slaveDbSubPath); // Distinguishing master/slave
1:40a554b:         
1:40a554b:         startServerMonitor(slaveServerHost);
1:40a554b:         
1:40a554b:         bootMasterDatabase(jvmVersion,
1:40a554b:                 masterDatabasePath +FS+ masterDbSubPath,
1:40a554b:                 replicatedDb,
1:40a554b:                 masterServerHost, // Where the startreplication command must be given
1:40a554b:                 masterServerPort, // master server interface accepting client requests
1:40a554b:                 null // bootLoad, // The "test" to start when booting db.
1:40a554b:                 );
1:40a554b:         
1:40a554b:         initSlave(slaveServerHost,
1:40a554b:                 jvmVersion,
1:40a554b:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:40a554b:         
1:40a554b:         startSlave(jvmVersion, replicatedDb,
1:40a554b:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:40a554b:                 slaveServerPort,
1:40a554b:                 slaveServerHost, // for slaveReplInterface
1:40a554b:                 slaveReplPort,
1:40a554b:                 testClientHost);
1:40a554b:         
1:40a554b:         // With master started above, next will fail! 
1:40a554b:         // Also seems failover will fail w/XRE21!
1:40a554b:         // Further testing: skipping next startMaster seems to 
1:40a554b:         // NOT remove failover failure!
1:40a554b:         /* TEMP: should be operational already - try skipping this. */
1:40a554b:         startMaster(jvmVersion, replicatedDb,
1:40a554b:                 masterServerHost, // Where the startMaster command must be given
1:40a554b:                 masterServerPort, // master server interface accepting client requests
1:40a554b:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:40a554b:                 slaveServerPort, // Not used since slave don't allow clients.
1:40a554b:                 slaveServerHost, // for slaveReplInterface
1:40a554b:                 slaveReplPort);
1:40a554b:          /* */
1:40a554b:         
1:40a554b:         _testPostStartedMasterAndSlave_StopMaster(); // Not in a state to continue.
1:40a554b:                 
1:40a554b:         stopServer(jvmVersion, derbyVersion,
1:40a554b:                 slaveServerHost, slaveServerPort);
1:40a554b:         
1:40a554b:         stopServer(jvmVersion, derbyVersion,
1:40a554b:                 masterServerHost, masterServerPort);
1:40a554b:         
1:40a554b:     }
1:40a554b: 
1:40a554b: 
1:40a554b:     private void _testPostStartedMasterAndSlave_StopMaster()
1:84fa650:             throws InterruptedException, SQLException
1:40a554b:     {
1:40a554b:         Connection conn = null;
1:40a554b:         String db = null;
1:40a554b:         String connectionURL = null;
1:40a554b:         
1:40a554b:         // 1. Attempt to perform stopMaster on slave. Should fail.
1:dbe5dc3:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath 
1:dbe5dc3:                 +FS+ replicatedDb;
1:40a554b:         connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:40a554b:                 + db
1:40a554b:                 + ";stopMaster=true";
1:40a554b:         util.DEBUG("1. testPostStartedMasterAndSlave_StopMaster: " 
1:40a554b:                 + connectionURL);
2:40a554b:         try
1:40a554b:         {
2:40a554b:             conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("Unexpectedly connected as: " + connectionURL);
1:40a554b:             assertTrue("Unexpectedly connected as: " + connectionURL,false);
1:40a554b:         }
2:40a554b:         catch (SQLException se)
1:40a554b:         {
2:40a554b:             int ec = se.getErrorCode();
2:40a554b:             String ss = se.getSQLState();
2:40a554b:             String msg = ec + " " + ss + " " + se.getMessage();
1:40a554b:             //  SQLCODE: -1, SQLSTATE: 08004
1:8c9d41e:             BaseJDBCTestCase.assertSQLState(
1:8c9d41e:                 "connectionURL +  failed: " + msg,
1:8c9d41e:                 LOGIN_FAILED,
1:8c9d41e:                 se);
1:40a554b:             util.DEBUG("stopMaster on slave failed as expected: " 
2:40a554b:                     + connectionURL + " " + msg);
1:40a554b:         }
1:40a554b:         // Default replication test sequence still OK.
1:40a554b:         
1:40a554b:         // 2. stopMaster on master: OK
1:dbe5dc3:         db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath 
1:dbe5dc3:                 +FS+ replicatedDb;
1:40a554b:         connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:40a554b:                 + db
1:40a554b:                 + ";stopMaster=true";
1:40a554b:         util.DEBUG("2. testPostStartedMasterAndSlave_StopMaster: " 
1:40a554b:                 + connectionURL);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("Connected as expected: " + connectionURL);
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             int ec = se.getErrorCode();
1:40a554b:             String ss = se.getSQLState();
1:40a554b:             String msg = ec + " " + ss + " " + se.getMessage();
1:40a554b:             util.DEBUG("stopMaster on master failed: " + connectionURL + " " + msg);
1:40a554b:             assertTrue("stopMaster on master failed: " + connectionURL + " " + msg,false);
1:40a554b:         }
1:40a554b:         // Not meaningful to continue default replication test sequence after this point!
1:40a554b:         
1:40a554b:         // 3. Connect to slave which now is not in non-replication mode is OK.
1:dbe5dc3:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
1:40a554b:         connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:40a554b:                 + db;
1:40a554b:         util.DEBUG("3. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
1:84fa650: 
1:84fa650:         // We use a loop below, to allow for intermediate states before success.
1:84fa650:         // If we get here quick enough, we see this error state:
1:84fa650:         //     CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE
1:84fa650:         //
1:84fa650:         SQLException gotEx = null;
1:84fa650:         int tries = 20;
1:84fa650: 
1:84fa650:         while (tries-- > 0) {
1:84fa650:             gotEx = null;
1:84fa650:             try {
1:84fa650:                 conn = DriverManager.getConnection(connectionURL);
1:84fa650:                 util.DEBUG("Successfully connected: " + connectionURL);
1:84fa650:                 break;
1:84fa650:             } catch (SQLException se) {
1:84fa650:                 gotEx = se;
1:84fa650:                 if (se.getSQLState().
1:84fa650:                         equals(CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE)) {
1:84fa650:                     // Try again, shutdown did not complete yet..
1:84fa650:                     util.DEBUG("got CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE, sleep");
1:84fa650:                     Thread.sleep(1000L);
1:84fa650:                     continue;
1:84fa650: 
1:84fa650:                 } else {
1:84fa650:                     // Something else, so report.
1:84fa650:                     break;
1:84fa650:                 }
1:84fa650:             }
1:40a554b:         }
1:84fa650: 
1:84fa650:         if (gotEx != null) {
1:84fa650:             // We did not get what we expected as the final state (connect
1:84fa650:             // success) in reasonable time, or we saw something that is not a
1:84fa650:             // legal intermediate state, so we fail now:
1:84fa650: 
1:84fa650:             util.DEBUG("3. failed to connect to ex-slave");
1:84fa650:             throw gotEx;
1:40a554b:         }
1:84fa650: 
1:84fa650: 
1:40a554b:         // 4. stopMaster on slave which now is not in replication mode should fail.
1:dbe5dc3:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
1:40a554b:         connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:40a554b:                 + db
1:40a554b:                 + ";stopMaster=true";
1:40a554b:         util.DEBUG("4. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("4. Unexpectedly connected: " + connectionURL);
1:40a554b:             assertTrue("4. Unexpectedly connected: " + connectionURL,false);
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             int ec = se.getErrorCode();
1:40a554b:             String ss = se.getSQLState();
1:40a554b:             String msg = ec + " " + ss + " " + se.getMessage();
1:8c9d41e:             BaseJDBCTestCase.assertSQLState(
1:8c9d41e:                 "4. stopMaster on slave failed with: " 
1:8c9d41e:                     + connectionURL + " " + msg,
1:8c9d41e:                 REPLICATION_NOT_IN_MASTER_MODE,
1:8c9d41e:                 se);
1:40a554b:             util.DEBUG("4. stopMaster on slave failed as expected: " 
1:40a554b:                     + connectionURL + " " + msg);
1:40a554b:         }
1:40a554b:         
1:40a554b:         // 5. Connect master which now is now in non-replication mode should succeed.
1:dbe5dc3:         db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath +FS+ replicatedDb;
1:40a554b:         connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:40a554b:                 + db;
1:40a554b:         util.DEBUG("5. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("5. Successfully connected: " + connectionURL);
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             int ec = se.getErrorCode();
1:40a554b:             String ss = se.getSQLState();
1:40a554b:             String msg = ec + " " + ss + " " + se.getMessage();
1:40a554b:             util.DEBUG("5. Connect to db not in master mode unexpectedly failed : " 
1:40a554b:                     + connectionURL + " " + msg);
1:40a554b:             assertTrue("5. Connect to db not in master mode unexpectedly failed : " 
2:40a554b:                     + connectionURL + " " + msg, false);
1:40a554b:         }
1:40a554b: 
1:40a554b:         // 6. Attempt to do stopmaster on master which now is now in non-replication mode should fail.
1:dbe5dc3:         db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath 
1:dbe5dc3:                 +FS+ replicatedDb;
1:40a554b:         connectionURL = "jdbc:derby:"  
1:40a554b:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:40a554b:                 + db
1:40a554b:                 + ";stopMaster=true";
1:40a554b:         util.DEBUG("6. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
1:40a554b:         try
1:40a554b:         {
1:40a554b:             conn = DriverManager.getConnection(connectionURL);
1:40a554b:             util.DEBUG("6. Unexpectedly connected: " + connectionURL);
1:40a554b:             assertTrue("6. Unexpectedly connected: " + connectionURL,false);
1:40a554b:         }
1:40a554b:         catch (SQLException se)
1:40a554b:         {
1:40a554b:             int ec = se.getErrorCode();
1:40a554b:             String ss = se.getSQLState();
1:40a554b:             String msg = ec + " " + ss + " " + se.getMessage();
1:8c9d41e:             BaseJDBCTestCase.assertSQLState(
1:8c9d41e:                 "6. stopMaster on server not in master mode failed with: " 
1:8c9d41e:                     + connectionURL + " " + msg,
1:8c9d41e:                 REPLICATION_NOT_IN_MASTER_MODE,
1:8c9d41e:                 se);
1:40a554b:             util.DEBUG("6. stopMaster on server not in master mode failed as expected: " 
1:40a554b:                     + connectionURL + " " + msg);
1:40a554b:         }
1:40a554b:     }
1:40a554b:     
1:40a554b: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_StateTest_part1_2 Suite");
commit:84fa650
/////////////////////////////////////////////////////////////////////////
1:     final static String CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE     = "08004";
1: 
/////////////////////////////////////////////////////////////////////////
1:             throws InterruptedException, SQLException
/////////////////////////////////////////////////////////////////////////
1: 
1:         // We use a loop below, to allow for intermediate states before success.
1:         // If we get here quick enough, we see this error state:
1:         //     CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE
1:         //
1:         SQLException gotEx = null;
1:         int tries = 20;
1: 
1:         while (tries-- > 0) {
1:             gotEx = null;
1:             try {
1:                 conn = DriverManager.getConnection(connectionURL);
1:                 util.DEBUG("Successfully connected: " + connectionURL);
1:                 break;
1:             } catch (SQLException se) {
1:                 gotEx = se;
1:                 if (se.getSQLState().
1:                         equals(CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE)) {
1:                     // Try again, shutdown did not complete yet..
1:                     util.DEBUG("got CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE, sleep");
1:                     Thread.sleep(1000L);
1:                     continue;
1: 
1:                 } else {
1:                     // Something else, so report.
1:                     break;
1:                 }
1:             }
1: 
1:         if (gotEx != null) {
1:             // We did not get what we expected as the final state (connect
1:             // success) in reasonable time, or we saw something that is not a
1:             // legal intermediate state, so we fail now:
1: 
1:             util.DEBUG("3. failed to connect to ex-slave");
1:             throw gotEx;
1: 
1: 
commit:8c9d41e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1:     final static String LOGIN_FAILED = "08004";
1:     final static String REPLICATION_DB_NOT_BOOTED = "XRE11";
1:     final static String REPLICATION_MASTER_ALREADY_BOOTED = "XRE22";
1:     final static String REPLICATION_NOT_IN_MASTER_MODE = "XRE07";
1:     final static String REPLICATION_SLAVE_STARTED_OK = "XRE08";
/////////////////////////////////////////////////////////////////////////
1:             BaseJDBCTestCase.assertSQLState(
1:                 "connectionURL +  failed: " + msg,
1:                 LOGIN_FAILED,
1:                 se);
/////////////////////////////////////////////////////////////////////////
1:             BaseJDBCTestCase.assertSQLState(
1:                 "4. stopMaster on slave failed with: " 
1:                     + connectionURL + " " + msg,
1:                 REPLICATION_NOT_IN_MASTER_MODE,
1:                 se);
/////////////////////////////////////////////////////////////////////////
1:             BaseJDBCTestCase.assertSQLState(
1:                 "6. stopMaster on server not in master mode failed with: " 
1:                     + connectionURL + " " + msg,
1:                 REPLICATION_NOT_IN_MASTER_MODE,
1:                 se);
commit:9c2b1f3
/////////////////////////////////////////////////////////////////////////
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:dbe5dc3
/////////////////////////////////////////////////////////////////////////
1:                 masterDbSubPath); // Distinguishing master/slave
1:                 slaveDbSubPath); // Distinguishing master/slave
/////////////////////////////////////////////////////////////////////////
1:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath 
1:                 +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath 
1:                 +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath +FS+ replicatedDb;
/////////////////////////////////////////////////////////////////////////
1:         db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath 
1:                 +FS+ replicatedDb;
commit:40a554b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
0: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derby.shared.common.reference.SQLState;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_StateTest_part1_2 extends ReplicationRun
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local_StateTest_part1
1:      * 
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_StateTest_part1_2(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:         
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_StateTest_part1_2 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_StateTest_part1_2.class );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1:     }
1:     
1:     //////////////////////////////////////////////////////////////
1:     ////
1:     //// The replication test framework (testReplication()):
1:     //// a) "clean" replication run starting master and slave servers,
1:     ////     preparing master and slave databases,
1:     ////     starting and stopping replication and doing
1:     ////     failover for a "normal"/"failure free" replication
1:     ////     test run.
1:     ////
1:     //////////////////////////////////////////////////////////////
1:     
1:     public void testReplication_Local_StateTest_part1_2()
1:     throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:                 masterServerPort,
0:                 masterDatabasePath +FS+ masterDbSubPath); // Distinguishing master/slave
1:         
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:                 slaveServerPort,
0:                 slaveDatabasePath +FS+ slaveDbSubPath); // Distinguishing master/slave
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath,
1:                 replicatedDb,
1:                 masterServerHost, // Where the startreplication command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:                 slaveServerPort,
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         // With master started above, next will fail! 
1:         // Also seems failover will fail w/XRE21!
1:         // Further testing: skipping next startMaster seems to 
1:         // NOT remove failover failure!
1:         /* TEMP: should be operational already - try skipping this. */
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, // Where the startMaster command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:                 slaveServerPort, // Not used since slave don't allow clients.
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort);
1:          /* */
1:         
1:         _testPostStartedMasterAndSlave_StopMaster(); // Not in a state to continue.
1:                 
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:     }
1: 
1: 
1:     private void _testPostStartedMasterAndSlave_StopMaster()
0:     throws InterruptedException
1:     {
1:         Connection conn = null;
1:         String db = null;
1:         String connectionURL = null;
1:         
1:         // 1. Attempt to perform stopMaster on slave. Should fail.
0:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath 
0:                 +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         util.DEBUG("1. testPostStartedMasterAndSlave_StopMaster: " 
1:                 + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("Unexpectedly connected as: " + connectionURL);
1:             assertTrue("Unexpectedly connected as: " + connectionURL,false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             //  SQLCODE: -1, SQLSTATE: 08004
0:             assertTrue("connectionURL +  failed: " + msg, 
0:                     SQLState.LOGIN_FAILED.equals(ss));
1:             util.DEBUG("stopMaster on slave failed as expected: " 
1:                     + connectionURL + " " + msg);
1:         }
1:         // Default replication test sequence still OK.
1:         
1:         // 2. stopMaster on master: OK
0:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath 
0:                 +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         util.DEBUG("2. testPostStartedMasterAndSlave_StopMaster: " 
1:                 + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("Connected as expected: " + connectionURL);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             util.DEBUG("stopMaster on master failed: " + connectionURL + " " + msg);
1:             assertTrue("stopMaster on master failed: " + connectionURL + " " + msg,false);
1:         }
1:         // Not meaningful to continue default replication test sequence after this point!
1:         
1:         // 3. Connect to slave which now is not in non-replication mode is OK.
0:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db;
1:         util.DEBUG("3. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
0:         // Try a sleep:
0:         Thread.sleep(15000L);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
0:             util.DEBUG("Successfully connected: " + connectionURL);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
0:             util.DEBUG("3. Connect to slave unexpectedly failed : " 
1:                     + connectionURL + " " + msg);
0:             assertTrue("3. Connect to slave unexpectedly failed : " 
1:                     + connectionURL + " " + msg, false);
1:         }
1:         
1:         // 4. stopMaster on slave which now is not in replication mode should fail.
0:         db = slaveDatabasePath +"/"+ReplicationRun.slaveDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + slaveServerHost + ":" + slaveServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         util.DEBUG("4. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("4. Unexpectedly connected: " + connectionURL);
1:             assertTrue("4. Unexpectedly connected: " + connectionURL,false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
0:             assertTrue("4. stopMaster on slave failed with: " 
0:                     + connectionURL + " " + msg, 
0:                     SQLState.REPLICATION_NOT_IN_MASTER_MODE.equals(ss));
1:             util.DEBUG("4. stopMaster on slave failed as expected: " 
1:                     + connectionURL + " " + msg);
1:         }
1:         
1:         // 5. Connect master which now is now in non-replication mode should succeed.
0:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:                 + db;
1:         util.DEBUG("5. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("5. Successfully connected: " + connectionURL);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
1:             util.DEBUG("5. Connect to db not in master mode unexpectedly failed : " 
1:                     + connectionURL + " " + msg);
1:             assertTrue("5. Connect to db not in master mode unexpectedly failed : " 
1:                     + connectionURL + " " + msg, false);
1:         }
1: 
1:         // 6. Attempt to do stopmaster on master which now is now in non-replication mode should fail.
0:         db = masterDatabasePath +"/"+ReplicationRun.masterDbSubPath 
0:                 +"/"+ replicatedDb;
1:         connectionURL = "jdbc:derby:"  
1:                 + "//" + masterServerHost + ":" + masterServerPort + "/"
1:                 + db
1:                 + ";stopMaster=true";
1:         util.DEBUG("6. testPostStartedMasterAndSlave_StopMaster: " + connectionURL);
1:         try
1:         {
1:             conn = DriverManager.getConnection(connectionURL);
1:             util.DEBUG("6. Unexpectedly connected: " + connectionURL);
1:             assertTrue("6. Unexpectedly connected: " + connectionURL,false);
1:         }
1:         catch (SQLException se)
1:         {
1:             int ec = se.getErrorCode();
1:             String ss = se.getSQLState();
1:             String msg = ec + " " + ss + " " + se.getMessage();
0:             assertTrue("6. stopMaster on server not in master mode failed with: " 
0:                     + connectionURL + " " + msg, 
0:                     SQLState.REPLICATION_NOT_IN_MASTER_MODE.equals(ss));
1:             util.DEBUG("6. stopMaster on server not in master mode failed as expected: " 
1:                     + connectionURL + " " + msg);
1:         }
1:     }
1:     
1: }
============================================================================