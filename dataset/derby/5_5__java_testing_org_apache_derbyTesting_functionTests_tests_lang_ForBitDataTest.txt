1:81f2fcc: /*
7:81f2fcc: 
1:39b3237:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest
1:81f2fcc: 
1:81f2fcc:    Licensed to the Apache Software Foundation (ASF) under one or more
1:81f2fcc:    contributor license agreements.  See the NOTICE file distributed with
1:81f2fcc:    this work for additional information regarding copyright ownership.
1:81f2fcc:    The ASF licenses this file to You under the Apache License, Version 2.0
1:81f2fcc:    (the "License"); you may not use this file except in compliance with
1:81f2fcc:    the License.  You may obtain a copy of the License at
1:81f2fcc: 
1:81f2fcc:       http://www.apache.org/licenses/LICENSE-2.0
1:81f2fcc: 
1:81f2fcc:    Unless required by applicable law or agreed to in writing, software
1:81f2fcc:    distributed under the License is distributed on an "AS IS" BASIS,
1:81f2fcc:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:81f2fcc:    See the License for the specific language governing permissions and
1:81f2fcc:    limitations under the License.
1:81f2fcc: 
1:81f2fcc:  */
1:81f2fcc: 
1:81f2fcc: package org.apache.derbyTesting.functionTests.tests.lang;
1:81f2fcc: 
1:1ae02c9: import java.io.ByteArrayInputStream;
1:1ae02c9: import java.io.IOException;
1:1ae02c9: import java.io.InputStream;
1:81f2fcc: import java.sql.Connection;
1:81f2fcc: import java.sql.DatabaseMetaData;
1:81f2fcc: import java.sql.PreparedStatement;
1:81f2fcc: import java.sql.ResultSet;
1:1ae02c9: import java.sql.ResultSetMetaData;
1:81f2fcc: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:81f2fcc: import java.sql.Types;
1:81f2fcc: import junit.framework.Test;
1:81f2fcc: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:81f2fcc: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:81f2fcc: 
1:81f2fcc: 
1:81f2fcc: public class ForBitDataTest extends BaseJDBCTestCase {
1:81f2fcc: 
1:81f2fcc:         private static String[] TABLES = { 
1:81f2fcc:         	"CREATE TABLE FBDOK.T001 (C001 CHAR FOR BIT DATA)",
1:81f2fcc:         	"CREATE TABLE FBDOK.T002 (C002 CHAR(1) FOR BIT DATA)",
1:81f2fcc: 		"CREATE TABLE FBDOK.T003 (C003 CHAR(10) FOR BIT DATA)",
1:81f2fcc: 		"CREATE TABLE FBDOK.T004 (C004 CHAR(254) FOR BIT DATA)",
1:81f2fcc: 		"CREATE TABLE FBDOK.T005 (C005 VARCHAR(1) FOR BIT DATA)",
1:81f2fcc: 		"CREATE TABLE FBDOK.T006 (C006 VARCHAR(100) FOR BIT DATA)",
1:81f2fcc: 		"CREATE TABLE FBDOK.T007 (C007 VARCHAR(32672) FOR BIT DATA)",
1:81f2fcc: 		"CREATE TABLE FBDOK.T008 (C008 LONG VARCHAR FOR BIT DATA)",
1:81f2fcc: 		"CREATE TABLE FBDVAL.T001(ID INT NOT NULL PRIMARY KEY, C1 CHAR(10) FOR BIT DATA, C2 VARCHAR(10) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(10))",
1:81f2fcc: 		"CREATE TABLE FBDVAL.X001(XID INT NOT NULL PRIMARY KEY, X1 CHAR(12) FOR BIT DATA, C2 VARCHAR(12) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(12))",
1:81f2fcc: 		"CREATE TABLE FBDVAL.T002(ID INT NOT NULL PRIMARY KEY, C1 CHAR(10) FOR BIT DATA, C2 VARCHAR(10) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(10))",
1:81f2fcc: 		"CREATE TABLE FBDVAL.TEL(C2 VARCHAR(32672) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(128k))"
1:81f2fcc:            
1:81f2fcc:         };
1:81f2fcc:            
1:81f2fcc:      
1:81f2fcc: 	/* testTypesExpectedValues is a table of expected values for the testTypes fixture */
1:81f2fcc: 	public static String[] testTypesExpectedValues = {
1:81f2fcc: 		"FBDOK,T001,C001,-2,CHAR () FOR BIT DATA,1,null,null,1,null,null,1,YES",
1:81f2fcc: 		"FBDOK,T002,C002,-2,CHAR () FOR BIT DATA,1,null,null,1,null,null,1,YES",
1:81f2fcc: 		"FBDOK,T003,C003,-2,CHAR () FOR BIT DATA,10,null,null,1,null,null,1,YES",
1:81f2fcc: 		"FBDOK,T004,C004,-2,CHAR () FOR BIT DATA,254,null,null,1,null,null,1,YES",
1:81f2fcc: 		"FBDOK,T005,C005,-3,VARCHAR () FOR BIT DATA,1,null,null,1,null,null,1,YES",
1:81f2fcc: 		"FBDOK,T006,C006,-3,VARCHAR () FOR BIT DATA,100,null,null,1,null,null,1,YES",
1:81f2fcc: 		"FBDOK,T007,C007,-3,VARCHAR () FOR BIT DATA,32672,null,null,1,null,null,1,YES",
1:81f2fcc: 		"FBDOK,T008,C008,-4,LONG VARCHAR FOR BIT DATA,32700,null,null,1,null,null,1,YES"
1:81f2fcc: 	};
1:81f2fcc: 
1:81f2fcc: 	/* testTypesExpectedValues2Embedded is a table of expected values for the testTypes fixture*/  
1:81f2fcc: 	public static String[] testTypesExpectedValuesEmbedded = {
1:81f2fcc: 		"C001 CHAR () FOR BIT DATA precision 1",
1:81f2fcc: 		"C002 CHAR () FOR BIT DATA precision 1",
1:81f2fcc: 		"C003 CHAR () FOR BIT DATA precision 10",
1:81f2fcc: 		"C004 CHAR () FOR BIT DATA precision 254",
1:81f2fcc: 		"C005 VARCHAR () FOR BIT DATA precision 1",
1:81f2fcc: 		"C006 VARCHAR () FOR BIT DATA precision 100",
1:81f2fcc: 		"C007 VARCHAR () FOR BIT DATA precision 32672",
1:81f2fcc: 		"C008 LONG VARCHAR FOR BIT DATA precision 32700",
1:81f2fcc: 	};
1:81f2fcc: 
1:81f2fcc:         /* testTypesExpectedValues2NetworkServer is a table of expected values for the testTypes fixture */  
1:81f2fcc: 	public static String[] testTypesExpectedValuesNetworkServer = {
1:81f2fcc: 		"C001 CHAR FOR BIT DATA precision 1",
1:81f2fcc: 		"C002 CHAR FOR BIT DATA precision 1",
1:81f2fcc: 		"C003 CHAR FOR BIT DATA precision 10",
1:81f2fcc: 		"C004 CHAR FOR BIT DATA precision 254",
1:81f2fcc: 		"C005 VARCHAR FOR BIT DATA precision 1",
1:81f2fcc: 		"C006 VARCHAR FOR BIT DATA precision 100",
1:81f2fcc: 		"C007 VARCHAR FOR BIT DATA precision 32672",
1:81f2fcc: 		"C008 LONG VARCHAR FOR BIT DATA precision 32700",
1:81f2fcc: 	};
1:81f2fcc: 
1:81f2fcc: 	/* testTypesExpectedValues3 is a table of expected values for the testTypes fixture  */
1:81f2fcc: 	public static String[] testTypesExpectedValues3 = {
1:81f2fcc: 		"LONG VARCHAR FOR BIT DATA(-4) precision 32700",
1:81f2fcc: 		"VARCHAR () FOR BIT DATA(-3) precision 32672",
1:81f2fcc: 		"CHAR () FOR BIT DATA(-2) precision 254",
1:81f2fcc: 	};
1:81f2fcc: 
1:81f2fcc: 	/* testCompareExpectedValues is a table of expected values for the testCompare fixture */ 
1:81f2fcc: 	public static String[][] testCompareExpectedValues = {
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   60 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   40 0423a1fd202020202020 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   60 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ", 
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ", 
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ", 
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   60 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) " 
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) " 
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   40 0423a1fd (4) ",			"50 0423a2ff202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "  
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   30 0423a2fd (4) ", 
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd (4) ", 
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"30 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"50 0423a2ff202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"60 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "  
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C3"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C3" 
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C3"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C3"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C3"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C3"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C4"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C4"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C4"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C4"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C4"
1:81f2fcc: 		},
1:81f2fcc: 		{ "42818 types not comparable C1 ... C4"
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd (4)   30 0423a2fd202020202020 (10) ", 
1:81f2fcc: 			"30 0423a2fd (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"30 0423a2fd (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   30 0423a2fd (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"40 0423a1fd (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"40 0423a1fd (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   40 0423a1fd (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"40 0423a1fd (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"40 0423a1fd (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"40 0423a1fd (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"40 0423a1fd (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"40 0423a1fd (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"40 0423a1fd (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"50 0423a2ff (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   30 0423a2fd (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   50 0423a2ff (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) " 
1:81f2fcc: 		},
1:81f2fcc: 		{ "30 0423a2fd (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1:81f2fcc: 		},
1:81f2fcc: 		{"30 0423a2fd (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"30 0423a2fd (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"40 0423a1fd (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   30 0423a2fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   40 0423a1fd (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   50 0423a2ff (4) ",
1:81f2fcc: 			"50 0423a2ff (4)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   30 0423a2fd (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   40 0423a1fd (4) ",
1:81f2fcc: 			"60 0423a2fd20 (5)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) ",
1:81f2fcc: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1:81f2fcc: 		},
1:81f2fcc: 		{"42818 types not comparable C2 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C2 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C3 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C1"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C2"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C3"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C4"},
1:81f2fcc: 		{"42818 types not comparable C4 ... C4"} 
1:81f2fcc: 	};
1:81f2fcc: 
1:81f2fcc: 	/* testEncodedLengthsExpectedValues is a table of expected values for the testEncodedLengths() fixture */
1:81f2fcc: 	public static String[] testEncodedLengthsExpectedValues = {
1:81f2fcc: 		"C1 OK DATA OK C2 OK DATA OK C3 OK DATA OK",
1:81f2fcc: 		"C1 NULL C2 OK DATA OK C3 OK DATA OK",
1:81f2fcc: 		"C1 NULL C2 NULL C3 OK DATA OK"
1:81f2fcc: 	};
1:81f2fcc: 
1:81f2fcc: 	
1:81f2fcc: 	
1:81f2fcc: 	/* Public constructor required for running test as standalone JUnit. */    
1:81f2fcc: 	public ForBitDataTest(String name) {
1:81f2fcc: 		super(name);
3:81f2fcc: 	}
1:81f2fcc: 	
1:81f2fcc: 	/**
1:81f2fcc:         Negative for bit data tests. 
1:81f2fcc:         FBD001,FBD007 negative syntax
1:81f2fcc:         FBD005 maximum char length
1:81f2fcc:         FBD009 maximum varchar length
1:81f2fcc:         */
1:81f2fcc: 	public void testNegative() throws SQLException {		
1:fc7482f: 		assertCompileError("42611", "CREATE TABLE FBDFAIL.T001 (C001 CHAR(255) FOR BIT DATA)");
1:fc7482f:         assertCompileError("42611", "CREATE TABLE FBDFAIL.T001 (C001 CHAR(255) FOR BIT DATA)");
1:fc7482f:         assertCompileError("42611", "CREATE TABLE FBDFAIL.T002 (C002 VARCHAR(32673) FOR BIT DATA)");
1:fc7482f:         assertCompileError("42X01", "CREATE TABLE FBDFAIL.T003 (C003 VARCHAR FOR BIT DATA)");	
1:fc7482f:         assertCompileError("42X01", "CREATE TABLE FBDFAIL.T004 (C004 LONG VARCHAR(100) FOR BIT DATA)");
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: 	/**
1:81f2fcc: 	FBD001,FBD007 - positive syntax 
1:81f2fcc: 	FBD004 - CHAR length defaults to one
1:81f2fcc: 	FBD037 - create table
1:81f2fcc: 	FBD006, FBD011, FBD014 - correct JDBC type
1:81f2fcc: 	 */
1:81f2fcc: 	public void testTypes() throws SQLException {
1:81f2fcc: 		Connection conn = getConnection();
1:81f2fcc: 		ResultSet rs = conn.getMetaData().getColumns(null, "FBDOK", null, null);
1:81f2fcc: 		String actualValue = null;
1:81f2fcc: 
1:81f2fcc: 		int i=0;
1:81f2fcc: 		while (rs.next()) {
1:81f2fcc: 			// skip 1 catalog
1:81f2fcc: 			actualValue  = rs.getString(2) + ",";
1:81f2fcc: 			actualValue += rs.getString(3) + ",";
1:81f2fcc: 			actualValue += rs.getString(4) + ",";
1:81f2fcc: 			actualValue += rs.getString(5) + ",";
1:81f2fcc: 			actualValue += rs.getString(6) + ",";
1:81f2fcc: 			actualValue += rs.getString(7) + ",";
1:81f2fcc: 			actualValue += rs.getString(9) + ",";
1:81f2fcc: 			actualValue += rs.getString(10) + ",";
1:81f2fcc: 			actualValue += rs.getString(11) + ",";
1:81f2fcc: 			actualValue += rs.getString(13) + ",";
1:81f2fcc: 			actualValue += rs.getString(16) + ",";
1:81f2fcc: 			actualValue += rs.getString(17) + ",";
1:81f2fcc: 			actualValue += rs.getString(18);
1:81f2fcc:                         assertEquals(testTypesExpectedValues[i], actualValue); 
1:81f2fcc: 			i++;
1:81f2fcc: 		}
1:81f2fcc: 		rs.close();
1:81f2fcc: 
1:81f2fcc: 		for (i = 1; i <= 8; i++) {
1:81f2fcc: 			PreparedStatement ps = prepareStatement("SELECT * FROM FBDOK.T00" + i);
1:81f2fcc: 			ResultSetMetaData rsmd = ps.getMetaData();
1:81f2fcc: 			actualValue = rsmd.getColumnName(1) + " " + rsmd.getColumnTypeName(1) + " precision " + rsmd.getPrecision(1);
1:81f2fcc:                         
1:81f2fcc: 			if ( usingDerbyNetClient() )  
1:81f2fcc: 			  assertEquals(testTypesExpectedValuesNetworkServer[i-1], actualValue);
1:81f2fcc: 			else 
1:81f2fcc:                           assertEquals(testTypesExpectedValuesEmbedded[i-1], actualValue);
1:81f2fcc: 			ps.close();
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 		DatabaseMetaData dmd = conn.getMetaData();
1:81f2fcc: 		rs = dmd.getTypeInfo();
1:81f2fcc: 
1:81f2fcc: 		int j=0;
1:81f2fcc: 		while (rs.next()) {
1:81f2fcc: 			String name = rs.getString(1);
1:81f2fcc: 			int jdbcType = rs.getInt(2);
1:81f2fcc: 			switch (jdbcType) {
1:81f2fcc: 			case Types.BINARY:
1:81f2fcc: 			case Types.VARBINARY:
1:81f2fcc: 			case Types.LONGVARBINARY:
1:81f2fcc: 				break;
1:81f2fcc: 			default:
1:81f2fcc: 				continue;
1:81f2fcc: 			}
1:81f2fcc: 			actualValue = name + "(" + jdbcType + ") " + "precision " + rs.getInt(3)+ "" ;
1:81f2fcc: 			assertEquals(testTypesExpectedValues3[j], actualValue);
1:81f2fcc: 			j++;
1:81f2fcc: 		}
1:81f2fcc: 		rs.close();
1:81f2fcc: 
1:81f2fcc: 		{
1:81f2fcc: 			String sql = "VALUES X'2345d45a2e44'";
1:81f2fcc: 			PreparedStatement psv = prepareStatement(sql);
1:81f2fcc: 			ResultSetMetaData rsmd = psv.getMetaData();
1:81f2fcc: 			actualValue = rsmd.getColumnName(1) + " " + rsmd.getColumnTypeName(1) + " precision " + rsmd.getPrecision(1);
1:81f2fcc: 			if ( usingDerbyNetClient() ) 
1:81f2fcc: 			    assertEquals("1 CHAR FOR BIT DATA precision 6", actualValue);
1:81f2fcc: 			else 
1:81f2fcc: 			    assertEquals("1 CHAR () FOR BIT DATA precision 6", actualValue);
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 		{
1:81f2fcc: 			String sql = "VALUES X''";
1:81f2fcc: 			PreparedStatement psv = prepareStatement(sql);
1:81f2fcc: 			ResultSetMetaData rsmd = psv.getMetaData();
1:81f2fcc: 			actualValue = rsmd.getColumnName(1) + " " + rsmd.getColumnTypeName(1) + " precision " + rsmd.getPrecision(1);
1:81f2fcc: 			if ( usingDerbyNetClient() ) 
1:81f2fcc: 			    assertEquals("1 CHAR FOR BIT DATA precision 0", actualValue);
1:81f2fcc: 			else
1:81f2fcc: 			    assertEquals("1 CHAR () FOR BIT DATA precision 0", actualValue);
1:81f2fcc: 		}
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc:         /* testValues fixture */
1:81f2fcc: 	public void testValues() throws SQLException {
1:8a319fb:                 // Empty the table before inserting 
1:8a319fb:                 Statement deleteStmt = createStatement();
1:8a319fb:                 deleteStmt.execute("delete from FBDVAL.T001");
1:81f2fcc: 		PreparedStatement psI = prepareStatement("INSERT INTO FBDVAL.T001 VALUES(?, ?, ?, ?, ?)");
1:81f2fcc: 		PreparedStatement psS = prepareStatement("SELECT C1, C2, C3, C4, ID FROM FBDVAL.T001 WHERE ID >= ? AND ID < ? ORDER BY ID");
1:81f2fcc: 
1:81f2fcc: 		insertData(psI, 0, null, 10, true);
1:81f2fcc: 		showData(psS, 0, null, "ORG <NULL> CHR <NULL> VAR <NULL> LVC <NULL> BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		byte[] empty = new byte[7];
1:81f2fcc: 		insertData(psI, 10, empty, 10, true);
1:81f2fcc: 		showData(psS, 10, empty, "ORG 00000000000000 (7) CHR 00000000000000202020 (10) VAR 00000000000000 (7) LVC 00000000000000 (7) BLOB 00000000000000 (7) ");
1:81f2fcc: 
1:81f2fcc: 		byte[] empty2 = new byte[15];
1:81f2fcc: 		insertData(psI, 20, empty2, 10, true);
1:81f2fcc: 		showData(psS, 20, empty2, "ORG 000000000000000000000000000000 (15) CHR <NULL> VAR <NULL> LVC 000000000000000000000000000000 (15) BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		byte[] four = new byte[4];
1:81f2fcc: 		four[0] = (byte) 0x04;
1:81f2fcc: 		four[1] = (byte) 0x23;
1:81f2fcc: 		four[2] = (byte) 0xA2;
1:81f2fcc: 		four[3] = (byte) 0xFD;
1:81f2fcc: 		insertData(psI, 30, four, 10, true);
1:81f2fcc: 		showData(psS, 30, four, "ORG 0423a2fd (4) CHR 0423a2fd202020202020 (10) VAR 0423a2fd (4) LVC 0423a2fd (4) BLOB 0423a2fd (4) ");
1:81f2fcc: 
1:81f2fcc: 		byte[] ten = new byte[10];
1:81f2fcc: 		ten[0] = (byte) 0x0B;
1:81f2fcc: 		ten[1] = (byte) 0x27;
1:81f2fcc: 		ten[2] = (byte) 0xA2;
1:81f2fcc: 		ten[3] = (byte) 0xFD;
1:81f2fcc: 		ten[4] = (byte) 0x01;
1:81f2fcc: 		ten[5] = (byte) 0x6D;
1:81f2fcc: 		ten[6] = (byte) 0xE2;
1:81f2fcc: 		ten[7] = (byte) 0x35;
1:81f2fcc: 		ten[8] = (byte) 0x66;
1:81f2fcc: 		ten[9] = (byte) 0x90;
1:81f2fcc: 		insertData(psI, 40, ten, 10, true);
1:81f2fcc: 		showData(psS, 40, ten, "ORG 0b27a2fd016de2356690 (10) CHR 0b27a2fd016de2356690 (10) VAR 0b27a2fd016de2356690 (10) LVC 0b27a2fd016de2356690 (10) BLOB 0b27a2fd016de2356690 (10) ");
1:81f2fcc: 
1:81f2fcc: 		byte[] l15 = new byte[15];
1:81f2fcc: 		l15[0] = (byte) 0xEB;
1:81f2fcc: 		l15[1] = (byte) 0xCA;
1:81f2fcc: 		l15[2] = (byte) 0xFE;
1:81f2fcc: 		l15[3] = (byte) 0xBA;
1:81f2fcc: 		l15[4] = (byte) 0xBE;
1:81f2fcc: 		l15[5] = (byte) 0xFE;
1:81f2fcc: 		l15[6] = (byte) 0xED;
1:81f2fcc: 		l15[7] = (byte) 0xFA;
1:81f2fcc: 		l15[8] = (byte) 0xCE;
1:81f2fcc: 		l15[9] = (byte) 0x24;
1:81f2fcc: 		l15[10] = (byte) 0x78;
1:81f2fcc: 		l15[11] = (byte) 0x43;
1:81f2fcc: 		l15[12] = (byte) 0x92;
1:81f2fcc: 		l15[13] = (byte) 0x31;
1:81f2fcc: 		l15[14] = (byte) 0x6D;
1:81f2fcc: 		insertData(psI, 50, l15, 10, true);
1:81f2fcc: 		showData(psS, 50, l15, "ORG ebcafebabefeedface24784392316d (15) CHR <NULL> VAR <NULL> LVC ebcafebabefeedface24784392316d (15) BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		byte[] space4 = new byte[4];
1:81f2fcc: 		space4[0] = (byte) 0x20;
1:81f2fcc: 		space4[1] = (byte) 0x20;
1:81f2fcc: 		space4[2] = (byte) 0x20;
1:81f2fcc: 		space4[3] = (byte) 0x20;
1:81f2fcc: 		insertData(psI, 60, space4, 10, true);
1:81f2fcc: 		showData(psS, 60, space4, "ORG 20202020 (4) CHR 20202020202020202020 (10) VAR 20202020 (4) LVC 20202020 (4) BLOB 20202020 (4) ");
1:81f2fcc: 
1:81f2fcc: 		byte[] space6 = new byte[6];
1:81f2fcc: 		space6[0] = (byte) 0xca;
1:81f2fcc: 		space6[1] = (byte) 0xfe;
1:81f2fcc: 		space6[2] = (byte) 0x20;
1:81f2fcc: 		space6[3] = (byte) 0x20;
1:81f2fcc: 		space6[4] = (byte) 0x20;
1:81f2fcc: 		space6[5] = (byte) 0x20;
1:81f2fcc: 		insertData(psI, 70, space6, 10, true);
1:81f2fcc: 		showData(psS, 70, space6, "ORG cafe20202020 (6) CHR cafe2020202020202020 (10) VAR cafe20202020 (6) LVC cafe20202020 (6) BLOB cafe20202020 (6) ");
1:81f2fcc: 
1:81f2fcc: 		byte[] space12 = new byte[12];
1:81f2fcc: 		space12[0] = (byte) 0xca;
1:81f2fcc: 		space12[1] = (byte) 0xfe;
1:81f2fcc: 		space12[2] = (byte) 0x20;
1:81f2fcc: 		space12[3] = (byte) 0x20;
1:81f2fcc: 		space12[4] = (byte) 0x20;
1:81f2fcc: 		space12[5] = (byte) 0x20;
1:81f2fcc: 		space12[6] = (byte) 0xca;
1:81f2fcc: 		space12[7] = (byte) 0xfe;
1:81f2fcc: 		space12[8] = (byte) 0x20;
1:81f2fcc: 		space12[9] = (byte) 0x20;
1:81f2fcc: 		space12[10] = (byte) 0x20;
1:81f2fcc: 		space12[11] = (byte) 0x20;
1:81f2fcc: 		insertData(psI, 210, space12, 10, true);
1:81f2fcc: 		showData(psS, 210, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR <NULL> LVC cafe20202020cafe20202020 (12) BLOB <NULL> ");
1:fc7482f:         
1:fc7482f:         psI.close();
1:81f2fcc: 
1:fc7482f:         Statement stmt = createStatement();
1:81f2fcc: 
1:81f2fcc: 		String sql = "INSERT INTO FBDVAL.T001 VALUES(80, X'2020202020', X'2020202020', X'2020202020', null)";
1:81f2fcc: 		stmt.executeUpdate(sql);
1:81f2fcc: 		showData(psS, 80, space4, "ORG 20202020 (4) CHR 20202020202020202020 (10) VAR 2020202020 (5) LVC 2020202020 (5) BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.T001 VALUES(90, X'CAFE20202020CAFE20202020', null, null, null)";
1:81f2fcc: 		stmt.executeUpdate(sql);
1:81f2fcc: 		showData(psS, 90, space12, "ORG cafe20202020cafe20202020 (12) CHR cafe20202020cafe2020 (10) VAR <NULL> LVC <NULL> BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.T001 VALUES(100, null, X'CAFE20202020CAFE20202020', null, null)";
1:81f2fcc: 		stmt.executeUpdate(sql);
1:81f2fcc: 		showData(psS, 100, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR cafe20202020cafe2020 (10) LVC <NULL> BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.T001 VALUES(110, null, null, X'CAFE20202020CAFE20202020', null)";
1:81f2fcc: 		stmt.executeUpdate(sql);
1:81f2fcc: 		showData(psS, 110, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR <NULL> LVC cafe20202020cafe20202020 (12) BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.T001 VALUES(120, X'CAFE20202020CAFE20202020DD', null, null, null)";
1:81f2fcc: 		try {
1:81f2fcc: 			stmt.executeUpdate(sql);
1:81f2fcc: 		} catch (SQLException sqle) {
1:81f2fcc: 			assertSQLState("22001", sqle);
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.T001 VALUES(130, null, X'CAFE20202020CAFE20202020DD', null, null)";
1:81f2fcc: 		try {
1:81f2fcc: 			stmt.executeUpdate(sql);
1:81f2fcc: 		} catch (SQLException sqle) {
1:81f2fcc: 			assertSQLState("22001", sqle);
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.T001 VALUES(140, null, null, X'CAFE20202020CAFE20202020DD', null)";
1:81f2fcc: 		stmt.executeUpdate(sql);
1:81f2fcc: 		showData(psS, 140, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR <NULL> LVC cafe20202020cafe20202020dd (13) BLOB <NULL> ");
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.X001 VALUES(200, X'CAFE20202020CAFE20202020', null, null, null)";
1:81f2fcc: 		stmt.executeUpdate(sql);
1:81f2fcc: 
1:81f2fcc: 		sql = "INSERT INTO FBDVAL.T001 SELECT * FROM FBDVAL.X001";
1:81f2fcc: 		stmt.executeUpdate(sql);
1:81f2fcc: 		showData(psS, 200, space12, "ORG cafe20202020cafe20202020 (12) CHR cafe20202020cafe2020 (10) VAR <NULL> LVC <NULL> BLOB <NULL> ");
1:fc7482f:         
1:fc7482f:         psS.close();
1:fc7482f:         
1:fc7482f:         stmt.close();
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: 
1:81f2fcc:         /* testCompare fixture */
1:81f2fcc: 	public void testCompare() throws SQLException {
1:fc7482f:         Statement stmt = createStatement();
1:81f2fcc: 		stmt.execute("delete from FBDVAL.T001");
1:81f2fcc: 		PreparedStatement psI = prepareStatement("INSERT INTO FBDVAL.T001 VALUES(?, ?, ?, ?, ?)");
1:81f2fcc: 		PreparedStatement psI2 = prepareStatement("INSERT INTO FBDVAL.T002 VALUES(?, ?, ?, ?, ?)");
1:81f2fcc: 
1:81f2fcc: 		insertData(psI, 0, null, 10, false);
1:81f2fcc: 		insertData(psI2, 0, null, 10, false);
1:81f2fcc: 
1:81f2fcc: 		byte[] four = new byte[4];
1:81f2fcc: 		four[0] = (byte) 0x04;
1:81f2fcc: 		four[1] = (byte) 0x23;
1:81f2fcc: 		four[2] = (byte) 0xA2;
1:81f2fcc: 		four[3] = (byte) 0xFD;
1:81f2fcc: 
1:81f2fcc: 		insertData(psI, 30, four, 10, false);
1:81f2fcc: 		insertData(psI2, 30, four, 10, false);
1:81f2fcc: 		four[2] = (byte) 0xA1;
1:81f2fcc: 		insertData(psI, 40, four, 10, false);
1:81f2fcc: 		insertData(psI2, 40, four, 10, false);
1:81f2fcc: 		four[2] = (byte) 0xA2;
1:81f2fcc: 		four[3] = (byte) 0xFF;
1:81f2fcc: 		insertData(psI, 50, four, 10, false);
1:81f2fcc: 		insertData(psI2, 50, four, 10, false);
1:81f2fcc: 
1:81f2fcc: 		byte[] four_plus_space = new byte[5];
1:81f2fcc: 		four_plus_space[0] = (byte) 0x04;
1:81f2fcc: 		four_plus_space[1] = (byte) 0x23;
1:81f2fcc: 		four_plus_space[2] = (byte) 0xA2;
1:81f2fcc: 		four_plus_space[3] = (byte) 0xFD;
1:81f2fcc: 		four_plus_space[4] = (byte) 0x20;
1:81f2fcc: 		insertData(psI, 60, four_plus_space, 10, false);
1:81f2fcc: 		insertData(psI2, 60, four_plus_space, 10, false);
1:81f2fcc: 
1:81f2fcc: 		byte[] ten = new byte[10];
1:81f2fcc: 		ten[0] = (byte) 0x0B;
1:81f2fcc: 		ten[1] = (byte) 0x27;
1:81f2fcc: 		ten[2] = (byte) 0xA2;
1:81f2fcc: 		ten[3] = (byte) 0xFD;
1:81f2fcc: 		ten[4] = (byte) 0x01;
1:81f2fcc: 		ten[5] = (byte) 0x6D;
1:81f2fcc: 		ten[6] = (byte) 0xE2;
1:81f2fcc: 		ten[7] = (byte) 0x35;
1:81f2fcc: 		ten[8] = (byte) 0x66;
1:81f2fcc: 		ten[9] = (byte) 0x90;
1:81f2fcc: 
1:81f2fcc: 		insertData(psI, 70, ten, 10, false);
1:81f2fcc: 		insertData(psI2, 70, ten, 10, false);
1:81f2fcc: 
1:81f2fcc: 		String[] COLS = {"C1", "C2", "C3", "C4"};
1:81f2fcc: 		String[] OPS = {"=", "<>", "<", "<=", ">", ">="};
1:81f2fcc: 
1:81f2fcc: 		int i=0;
1:81f2fcc: 		for (int t = 0; t < COLS.length; t++) {
1:81f2fcc: 		    for (int o = 0; o < COLS.length; o++) {
1:81f2fcc: 			for (int a = 0; a < OPS.length; a++) {
1:81f2fcc: 			    String sql = "SELECT T.ID, T." + COLS[t] + ", O.ID, O." + COLS[o] + " FROM FBDVAL.T001 O, FBDVAL.T002 T WHERE T." + COLS[t] + " " + OPS[a] + " O." + COLS[o] + " ORDER BY 1,3";
1:81f2fcc: 
1:81f2fcc: 			    try {
1:81f2fcc: 				PreparedStatement psS = prepareStatement(sql);
1:81f2fcc: 				showCompareData(psS, testCompareExpectedValues [i]);
1:81f2fcc: 			    } catch (SQLException sqle) {
1:81f2fcc: 				assertSQLState("42818", sqle);
1:81f2fcc: 			    }
1:81f2fcc: 			    i++;
1:81f2fcc: 			}
1:81f2fcc: 		    }
1:81f2fcc: 		}
1:fc7482f:         stmt.close();
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: 	/**
1:81f2fcc: 	The length of a binary type is encoded when stored, this
1:81f2fcc: 	test makes sure all the code paths are tested.
1:81f2fcc: 	The encoded length is hidden from the JDBC client.
1:81f2fcc: 	 */
1:81f2fcc: 	public void testEncodedLengths() throws SQLException, IOException {	
1:81f2fcc: 		PreparedStatement psi = prepareStatement("INSERT INTO FBDVAL.TEL VALUES(?, ?, ?)");
1:81f2fcc: 		PreparedStatement pss = prepareStatement("SELECT * FROM FBDVAL.TEL");
1:81f2fcc: 		PreparedStatement psd = prepareStatement("DELETE FROM FBDVAL.TEL");
1:81f2fcc: 
1:81f2fcc: 		//insertEL(psi, pss, psd, 0);
1:81f2fcc: 		insertEL(psi, pss, psd,  10, testEncodedLengthsExpectedValues[0]);
1:81f2fcc: 		insertEL(psi, pss, psd,  30, testEncodedLengthsExpectedValues[0]);
1:81f2fcc: 		insertEL(psi, pss, psd,  31, testEncodedLengthsExpectedValues[0]);
1:81f2fcc: 		insertEL(psi, pss, psd,  32, testEncodedLengthsExpectedValues[0]); // switch to 2 byte length
1:81f2fcc: 		insertEL(psi, pss, psd,  1345, testEncodedLengthsExpectedValues[0]);
1:81f2fcc: 		insertEL(psi, pss, psd,  23456, testEncodedLengthsExpectedValues[0]);
1:81f2fcc: 		insertEL(psi, pss, psd,  32672, testEncodedLengthsExpectedValues[0]);
1:81f2fcc: 		insertEL(psi, pss, psd,  32700, testEncodedLengthsExpectedValues[1]);
1:81f2fcc: 		insertEL(psi, pss, psd,  (32*1024) - 1, testEncodedLengthsExpectedValues[2]);
1:81f2fcc: 		insertEL(psi, pss, psd,  (32*1024), testEncodedLengthsExpectedValues[2]);
1:81f2fcc: 		insertEL(psi, pss, psd,  (32*1024) + 1, testEncodedLengthsExpectedValues[2]);
1:81f2fcc: 		insertEL(psi, pss, psd,  (64*1024) - 1, testEncodedLengthsExpectedValues[2]);
1:81f2fcc: 		insertEL(psi, pss, psd,  (64*1024), testEncodedLengthsExpectedValues[2]); // switch to 4 byte length
1:81f2fcc: 		insertEL(psi, pss, psd,  (64*1024) + 1, testEncodedLengthsExpectedValues[2]);
1:81f2fcc: 		insertEL(psi, pss, psd,  (110*1024) + 3242, testEncodedLengthsExpectedValues[2]);
1:81f2fcc: 
1:81f2fcc: 		psi.close();
1:81f2fcc: 		pss.close();
1:81f2fcc: 		psd.close();
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc:         /**
1:81f2fcc:          * Create a suite of tests.
1:81f2fcc:          **/
1:81f2fcc:         public static Test suite() {
1:1ae02c9:             BaseTestSuite suite = new BaseTestSuite("ForBitTestData");
1:81f2fcc:         	suite.addTest(baseSuite("ForBitTestData:embedded"));
1:81f2fcc:         	suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("ForBitTestData:client")));
1:81f2fcc:         	return suite;
1:81f2fcc:     	}
1:81f2fcc: 
1:81f2fcc: 	protected static Test baseSuite(String name) {
1:1ae02c9:             BaseTestSuite suite = new BaseTestSuite(name);
1:81f2fcc:         	suite.addTestSuite(ForBitDataTest.class);
1:81f2fcc:         	
1:81f2fcc: 		return new CleanDatabaseTestSetup(suite) 
1:81f2fcc:         	{
1:81f2fcc:             		protected void decorateSQL(Statement s) throws SQLException
1:81f2fcc:             		{
1:81f2fcc:                 		for (int i = 0; i < TABLES.length; i++) {
1:81f2fcc:                     			s.execute(TABLES[i]);
1:81f2fcc:                 		}
1:81f2fcc:             		}
1:81f2fcc:         	};
1:81f2fcc:     	} 
1:81f2fcc: 
1:81f2fcc:         /***********************************************************************************************
1:81f2fcc:          * All the methods below this line are used by fixtures
1:81f2fcc:          **********************************************************************************************/
1:81f2fcc: 	private void insertEL(PreparedStatement psi, PreparedStatement pss, PreparedStatement psd, int length, String expectedValue) throws SQLException, IOException 
1:81f2fcc: 	{
1:81f2fcc:                 byte[] data = new byte[length];
1:81f2fcc: 
1:81f2fcc: 		// random simple value check
1:81f2fcc: 		int off = (int)  (System.currentTimeMillis() % ((long) length));
1:81f2fcc: 		data[off] = 0x23;
1:81f2fcc: 
1:81f2fcc: 		psi.setBytes(1, (length <= 32672) ? data : null);
1:81f2fcc: 		psi.setBytes(2, (length <= 32700) ? data : null);
1:81f2fcc: 		psi.setBinaryStream(3, new java.io.ByteArrayInputStream(data), length); // BLOB column
1:81f2fcc: 
1:81f2fcc: 		psi.executeUpdate();
1:81f2fcc: 		selectData(pss,data,off,length, expectedValue);
1:81f2fcc: 		psd.executeUpdate();
1:81f2fcc: 
1:81f2fcc: 		// Set values using stream and then verify that select is successful
1:81f2fcc: 		psi.setBinaryStream(1, (length <= 32672) ? new java.io.ByteArrayInputStream(data) : null, length);
1:81f2fcc: 		psi.setBinaryStream(2, (length <= 32700) ? new java.io.ByteArrayInputStream(data) : null, length);
1:81f2fcc: 		psi.setBinaryStream(3, new java.io.ByteArrayInputStream(data), length); // BLOB column
1:81f2fcc: 		psi.executeUpdate();
1:81f2fcc: 
1:81f2fcc: 		selectData(pss,data,off,length, expectedValue);
1:81f2fcc: 		psd.executeUpdate();
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: 	private void selectData(PreparedStatement pss,byte[] data,int off,int length, String expectedValue)
1:81f2fcc: 	throws SQLException,IOException
1:81f2fcc: 	{
1:81f2fcc:                 String actualValue = null;
1:81f2fcc: 		ResultSet rs = pss.executeQuery();
1:81f2fcc: 		while (rs.next())
1:81f2fcc: 		{
1:81f2fcc: 			byte[] v = rs.getBytes(1);
1:81f2fcc: 			
1:81f2fcc: 			if (v != null) {
1:81f2fcc: 				actualValue =  "C1 " + ((v.length == length) ? "OK" : ("FAIL <" + v.length + ">"));
1:81f2fcc: 				actualValue += " DATA " + ((v[off] == 0x23) ? "OK" : ("FAIL " + off));
1:81f2fcc: 
1:81f2fcc: 			}
1:81f2fcc: 			else {
1:81f2fcc: 				actualValue = "C1 NULL";
1:81f2fcc: 			}
1:81f2fcc: 			v = rs.getBytes(2);
1:81f2fcc: 			if (v != null) {
1:81f2fcc: 				actualValue += " C2 " + ((v.length == length) ? "OK" : ("FAIL <" + v.length + ">"));
1:81f2fcc: 				actualValue += " DATA " + ((v[off] == 0x23) ? "OK" : ("FAIL " + off));
1:81f2fcc: 				
1:81f2fcc: 			}
1:81f2fcc: 			else {
1:81f2fcc: 				actualValue += " C2 NULL";
1:81f2fcc: 			}
1:81f2fcc: 			InputStream c3 = rs.getBinaryStream(3);
1:81f2fcc: 			String returnValue = checkEncodedLengthValue(" C3", c3, length, off);
1:81f2fcc: 			actualValue += returnValue;
1:81f2fcc: 			assertEquals(expectedValue, actualValue);
1:81f2fcc: 		}
1:81f2fcc: 		rs.close();
1:81f2fcc: 
1:81f2fcc: 		rs = pss.executeQuery();
1:81f2fcc: 		while (rs.next())
1:81f2fcc: 		{
1:81f2fcc: 			actualValue = checkEncodedLengthValue("C1", rs.getBinaryStream(1), length, off) +
1:81f2fcc: 					     checkEncodedLengthValue(" C2", rs.getBinaryStream(2), length, off) +
1:81f2fcc:                                              checkEncodedLengthValue(" C3", rs.getBinaryStream(3), length, off);									
1:81f2fcc: 			assertEquals(expectedValue, actualValue);
1:81f2fcc: 		}
1:81f2fcc: 		rs.close();
1:81f2fcc: 
1:81f2fcc: 	}
1:81f2fcc: 	private String checkEncodedLengthValue(String col, InputStream is, int length, int off) throws IOException {
1:81f2fcc: 		String returnStr = null;
1:81f2fcc: 		if (is == null) {
1:81f2fcc: 			returnStr = col + " NULL";
1:81f2fcc: 			return returnStr;
1:81f2fcc: 		}
1:81f2fcc: 		byte[] buf = new byte[3213];
1:81f2fcc: 		boolean dataOK = false;
1:81f2fcc: 		int sl = 0;
1:81f2fcc: 		for (;;) {
1:81f2fcc: 			int r = is.read(buf);
1:81f2fcc: 			if (r < 0)
1:81f2fcc: 				break;
1:81f2fcc: 
1:81f2fcc: 			if ((off >= sl) && (off < (sl + r))) {
1:81f2fcc: 				if (buf[off - sl] == 0x23)
1:81f2fcc: 					dataOK = true;
1:81f2fcc: 			}
1:81f2fcc: 			sl += r;
1:81f2fcc: 		}
1:81f2fcc: 		returnStr =  col + " " + ((sl == length) ? "OK" : ("FAIL <" + sl + ">"));
1:81f2fcc: 		returnStr += " DATA " + (dataOK ? "OK" : ("FAIL " + off));
1:81f2fcc: 
1:81f2fcc: 		return returnStr;
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc:         
1:81f2fcc: 	private void showCompareData(PreparedStatement psS, String[] expectedValues) throws SQLException {
1:81f2fcc: 		ResultSet rs = psS.executeQuery();
1:81f2fcc: 		int i=0;
1:81f2fcc: 		while (rs.next()) {
1:81f2fcc:                         String actualValue = rs.getInt(1) + " " + showData(rs.getBytes(2)) + "  " + rs.getInt(3) + " " + showData(rs.getBytes(4));
1:81f2fcc: 			assertEquals(expectedValues[i],actualValue);
1:81f2fcc: 			i++;
1:81f2fcc: 		}
1:81f2fcc: 		rs.close();
1:81f2fcc: 		psS.close();
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: 	private void insertData(PreparedStatement psI, int id, byte[] original, int maxLen, boolean streamAsWell) throws SQLException 
1:81f2fcc: 	{
1:81f2fcc: 
1:81f2fcc: 		int ol = original == null ? 0: original.length;
1:81f2fcc: 
1:81f2fcc: 		if (original == null || original.length <= maxLen) {
1:81f2fcc: 			// simple case.
1:81f2fcc: 			psI.setInt(1, id);
1:81f2fcc: 			psI.setBytes(2, original);
1:81f2fcc: 			psI.setBytes(3, original);
1:81f2fcc: 			psI.setBytes(4, original);
1:81f2fcc: 			psI.setBytes(5, original);
1:81f2fcc: 			psI.executeUpdate();
1:81f2fcc: 
1:81f2fcc: 			if (streamAsWell) {
1:81f2fcc: 				psI.setInt(1, id+1);
1:81f2fcc: 				psI.setBinaryStream(2, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.setBinaryStream(3, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.setBinaryStream(4, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.setBinaryStream(5, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.executeUpdate();
1:81f2fcc: 			}
1:81f2fcc: 			return;
1:81f2fcc: 		}	
1:81f2fcc: 
1:81f2fcc: 		// Insert potentially out of range value one at a time into the table
1:81f2fcc: 		try {
1:81f2fcc: 			psI.setInt(1, id);
1:81f2fcc: 			psI.setBytes(2, original);
1:81f2fcc: 			psI.setBytes(3, null);
1:81f2fcc: 			psI.setBytes(4, null);
1:81f2fcc: 			psI.setBytes(5, null);
1:81f2fcc: 			psI.executeUpdate();
1:81f2fcc: 		} catch (SQLException sqle) {
1:81f2fcc: 			assertSQLState("22001", sqle);
1:81f2fcc: 		}
1:81f2fcc: 		if (streamAsWell) {
1:81f2fcc: 			try {
1:81f2fcc: 				psI.setInt(1, id+1);
1:81f2fcc: 				psI.setBinaryStream(2, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.executeUpdate();
1:81f2fcc: 			} catch (SQLException sqle) {
1:81f2fcc: 				assertSQLState("22001", sqle);
1:81f2fcc: 			}
1:81f2fcc: 
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 		try {
1:81f2fcc: 			psI.setInt(1, id+2);
1:81f2fcc: 			psI.setBytes(2, null);
1:81f2fcc: 			psI.setBytes(3, original);
1:81f2fcc: 			psI.setBytes(4, null);
1:81f2fcc: 			psI.setBytes(5, null);
1:81f2fcc: 			psI.executeUpdate();
1:81f2fcc: 		} catch (SQLException sqle) {
1:81f2fcc: 			assertSQLState("22001", sqle);
1:81f2fcc: 		}
1:81f2fcc: 		if (streamAsWell) {
1:81f2fcc: 			try {
1:81f2fcc: 				psI.setInt(1, id+3);
1:81f2fcc: 				psI.setBinaryStream(3, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.executeUpdate();
1:81f2fcc: 			} catch (SQLException sqle) {
1:81f2fcc: 				assertSQLState("22001", sqle);
1:81f2fcc: 			}
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 
1:81f2fcc: 		try {
1:81f2fcc: 			psI.setInt(1, id+4);
1:81f2fcc: 			psI.setBytes(2, null);
1:81f2fcc: 			psI.setBytes(3, null);
1:81f2fcc: 			psI.setBytes(4, original);
1:81f2fcc: 			psI.setBytes(5, null);
1:81f2fcc: 			psI.executeUpdate();
1:81f2fcc: 		} catch (SQLException sqle) {
1:81f2fcc: 			assertSQLState("22001", sqle);
1:81f2fcc: 		}
1:81f2fcc: 		if (streamAsWell) {
1:81f2fcc: 			try {
1:81f2fcc: 				psI.setInt(1, id+5);
1:81f2fcc: 				psI.setBinaryStream(4, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.executeUpdate();
1:81f2fcc: 			} catch (SQLException sqle) {
1:81f2fcc: 				assertSQLState("22001", sqle);
1:81f2fcc: 			}
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 		try {
1:81f2fcc: 			psI.setInt(1, id+6);
1:81f2fcc: 			psI.setBytes(2, null);
1:81f2fcc: 			psI.setBytes(3, null);
1:81f2fcc: 			psI.setBytes(4, null);
1:81f2fcc: 			psI.setBytes(5, original);
1:81f2fcc: 			psI.executeUpdate();
1:81f2fcc: 		} catch (SQLException sqle) {
1:81f2fcc: 			assertSQLState("22001", sqle);
1:81f2fcc: 		}
1:81f2fcc: 		if (streamAsWell) {
1:81f2fcc: 			try {
1:81f2fcc: 				psI.setInt(1, id+7);
1:81f2fcc: 				psI.setBinaryStream(5, original == null ? null : new ByteArrayInputStream(original), ol);
1:81f2fcc: 				psI.executeUpdate();
1:81f2fcc: 			} catch (SQLException sqle) {
1:81f2fcc: 				assertSQLState("22001", sqle);
1:81f2fcc: 			}
1:81f2fcc: 		}
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: 	private void showData(PreparedStatement psS, int id, byte[] original, String expectedValue) throws SQLException {
1:81f2fcc: 		psS.setInt(1, id);
1:81f2fcc: 		psS.setInt(2, id + 10);
1:81f2fcc: 		ResultSet rs = psS.executeQuery();
1:81f2fcc: 		while (rs.next()) {
1:81f2fcc: 			String actualValue = "ORG " + showData(original) + "";
1:81f2fcc: 			actualValue += "CHR " + showData(rs.getBytes(1)) + "";
1:81f2fcc: 			actualValue += "VAR " + showData(rs.getBytes(2)) + "";
1:81f2fcc: 			actualValue += "LVC " + showData(rs.getBytes(3)) + "";
1:81f2fcc: 			actualValue += "BLOB " + showData(rs.getBytes(4));
1:81f2fcc: 			assertEquals(expectedValue, actualValue);
1:81f2fcc: 		}
1:81f2fcc: 		rs.close();
1:81f2fcc: 
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: 	private String showData(byte[] data) {
1:81f2fcc:        	        if (data == null)
1:81f2fcc: 		   return "<NULL> ";
1:81f2fcc: 
1:81f2fcc: 	        StringBuffer sb = new StringBuffer();
1:81f2fcc: 		for (int i = 0; i < data.length; i++) {
1:81f2fcc: 			String s = Integer.toHexString(data[i] & 0xff);
1:81f2fcc: 			if (s.length() == 1)
1:81f2fcc: 				sb.append('0');
1:81f2fcc: 			sb.append(s);
1:81f2fcc: 		}
1:81f2fcc: 
1:81f2fcc: 		sb.append(' ');
1:81f2fcc: 		sb.append('(');
1:81f2fcc: 		sb.append(data.length);
1:81f2fcc: 		sb.append(')');
1:81f2fcc: 		sb.append(' ');
1:81f2fcc: 
1:81f2fcc: 		return sb.toString();
1:81f2fcc: 	}
1:81f2fcc: 
1:81f2fcc: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.sql.ResultSetMetaData;
1: import java.sql.Statement;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:             BaseTestSuite suite = new BaseTestSuite("ForBitTestData");
1:             BaseTestSuite suite = new BaseTestSuite(name);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:8a319fb
/////////////////////////////////////////////////////////////////////////
1:                 // Empty the table before inserting 
1:                 Statement deleteStmt = createStatement();
1:                 deleteStmt.execute("delete from FBDVAL.T001");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fc7482f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		assertCompileError("42611", "CREATE TABLE FBDFAIL.T001 (C001 CHAR(255) FOR BIT DATA)");
1:         assertCompileError("42611", "CREATE TABLE FBDFAIL.T001 (C001 CHAR(255) FOR BIT DATA)");
1:         assertCompileError("42611", "CREATE TABLE FBDFAIL.T002 (C002 VARCHAR(32673) FOR BIT DATA)");
1:         assertCompileError("42X01", "CREATE TABLE FBDFAIL.T003 (C003 VARCHAR FOR BIT DATA)");	
1:         assertCompileError("42X01", "CREATE TABLE FBDFAIL.T004 (C004 LONG VARCHAR(100) FOR BIT DATA)");
/////////////////////////////////////////////////////////////////////////
1:         
1:         psI.close();
1:         Statement stmt = createStatement();
/////////////////////////////////////////////////////////////////////////
1:         
1:         psS.close();
1:         
1:         stmt.close();
1:         Statement stmt = createStatement();
/////////////////////////////////////////////////////////////////////////
1:         stmt.close();
commit:c7f3642
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:81f2fcc
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.forbitdata
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
0: import java.sql.ResultSetMetaData;
0: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.io.IOException;
1: import java.sql.Types;
0: import java.io.ByteArrayInputStream;
0: import java.io.InputStream;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import junit.extensions.TestSetup;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: 
1: public class ForBitDataTest extends BaseJDBCTestCase {
1: 
0: 	public Statement stmt = null;
1: 
1:         private static String[] TABLES = { 
1:         	"CREATE TABLE FBDOK.T001 (C001 CHAR FOR BIT DATA)",
1:         	"CREATE TABLE FBDOK.T002 (C002 CHAR(1) FOR BIT DATA)",
1: 		"CREATE TABLE FBDOK.T003 (C003 CHAR(10) FOR BIT DATA)",
1: 		"CREATE TABLE FBDOK.T004 (C004 CHAR(254) FOR BIT DATA)",
1: 		"CREATE TABLE FBDOK.T005 (C005 VARCHAR(1) FOR BIT DATA)",
1: 		"CREATE TABLE FBDOK.T006 (C006 VARCHAR(100) FOR BIT DATA)",
1: 		"CREATE TABLE FBDOK.T007 (C007 VARCHAR(32672) FOR BIT DATA)",
1: 		"CREATE TABLE FBDOK.T008 (C008 LONG VARCHAR FOR BIT DATA)",
1: 		"CREATE TABLE FBDVAL.T001(ID INT NOT NULL PRIMARY KEY, C1 CHAR(10) FOR BIT DATA, C2 VARCHAR(10) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(10))",
1: 		"CREATE TABLE FBDVAL.X001(XID INT NOT NULL PRIMARY KEY, X1 CHAR(12) FOR BIT DATA, C2 VARCHAR(12) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(12))",
1: 		"CREATE TABLE FBDVAL.T002(ID INT NOT NULL PRIMARY KEY, C1 CHAR(10) FOR BIT DATA, C2 VARCHAR(10) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(10))",
1: 		"CREATE TABLE FBDVAL.TEL(C2 VARCHAR(32672) FOR BIT DATA, C3 LONG VARCHAR FOR BIT DATA, C4 BLOB(128k))"
1:            
1:         };
1:            
1:      
1: 	/* testTypesExpectedValues is a table of expected values for the testTypes fixture */
1: 	public static String[] testTypesExpectedValues = {
1: 		"FBDOK,T001,C001,-2,CHAR () FOR BIT DATA,1,null,null,1,null,null,1,YES",
1: 		"FBDOK,T002,C002,-2,CHAR () FOR BIT DATA,1,null,null,1,null,null,1,YES",
1: 		"FBDOK,T003,C003,-2,CHAR () FOR BIT DATA,10,null,null,1,null,null,1,YES",
1: 		"FBDOK,T004,C004,-2,CHAR () FOR BIT DATA,254,null,null,1,null,null,1,YES",
1: 		"FBDOK,T005,C005,-3,VARCHAR () FOR BIT DATA,1,null,null,1,null,null,1,YES",
1: 		"FBDOK,T006,C006,-3,VARCHAR () FOR BIT DATA,100,null,null,1,null,null,1,YES",
1: 		"FBDOK,T007,C007,-3,VARCHAR () FOR BIT DATA,32672,null,null,1,null,null,1,YES",
1: 		"FBDOK,T008,C008,-4,LONG VARCHAR FOR BIT DATA,32700,null,null,1,null,null,1,YES"
1: 	};
1: 
1: 	/* testTypesExpectedValues2Embedded is a table of expected values for the testTypes fixture*/  
1: 	public static String[] testTypesExpectedValuesEmbedded = {
1: 		"C001 CHAR () FOR BIT DATA precision 1",
1: 		"C002 CHAR () FOR BIT DATA precision 1",
1: 		"C003 CHAR () FOR BIT DATA precision 10",
1: 		"C004 CHAR () FOR BIT DATA precision 254",
1: 		"C005 VARCHAR () FOR BIT DATA precision 1",
1: 		"C006 VARCHAR () FOR BIT DATA precision 100",
1: 		"C007 VARCHAR () FOR BIT DATA precision 32672",
1: 		"C008 LONG VARCHAR FOR BIT DATA precision 32700",
1: 	};
1: 
1:         /* testTypesExpectedValues2NetworkServer is a table of expected values for the testTypes fixture */  
1: 	public static String[] testTypesExpectedValuesNetworkServer = {
1: 		"C001 CHAR FOR BIT DATA precision 1",
1: 		"C002 CHAR FOR BIT DATA precision 1",
1: 		"C003 CHAR FOR BIT DATA precision 10",
1: 		"C004 CHAR FOR BIT DATA precision 254",
1: 		"C005 VARCHAR FOR BIT DATA precision 1",
1: 		"C006 VARCHAR FOR BIT DATA precision 100",
1: 		"C007 VARCHAR FOR BIT DATA precision 32672",
1: 		"C008 LONG VARCHAR FOR BIT DATA precision 32700",
1: 	};
1: 
1: 	/* testTypesExpectedValues3 is a table of expected values for the testTypes fixture  */
1: 	public static String[] testTypesExpectedValues3 = {
1: 		"LONG VARCHAR FOR BIT DATA(-4) precision 32700",
1: 		"VARCHAR () FOR BIT DATA(-3) precision 32672",
1: 		"CHAR () FOR BIT DATA(-2) precision 254",
1: 	};
1: 
1: 	/* testCompareExpectedValues is a table of expected values for the testCompare fixture */ 
1: 	public static String[][] testCompareExpectedValues = {
1: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1: 			"30 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1: 			"60 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"30 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   60 0423a2fd202020202020 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   40 0423a1fd202020202020 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   60 0423a2fd202020202020 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"60 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ", 
1: 			"60 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ", 
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ", 
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ", 
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   60 0423a2fd202020202020 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"60 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ", 
1: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1: 			"30 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1: 			"30 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"40 0423a1fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1: 			"40 0423a1fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"50 0423a2ff202020202020 (10)   50 0423a2ff202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   50 0423a2ff202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) " 
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   30 0423a2fd202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) " 
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ", 
1: 			"30 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"30 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   30 0423a2fd202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   50 0423a2ff202020202020 (10) ",
1: 			"50 0423a2ff202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   30 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   40 0423a1fd202020202020 (10) ",
1: 			"60 0423a2fd202020202020 (10)   60 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"30 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd202020202020 (10)   40 0423a1fd (4) ",			"50 0423a2ff202020202020 (10)   50 0423a2ff (4) ",
1: 			"60 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"60 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "  
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"30 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"40 0423a1fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"40 0423a1fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   30 0423a2fd (4) ",
1: 			"50 0423a2ff202020202020 (10)   40 0423a1fd (4) ",
1: 			"50 0423a2ff202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"60 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"40 0423a1fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"40 0423a1fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"40 0423a1fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"30 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"30 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"30 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"40 0423a1fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"40 0423a1fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"40 0423a1fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"50 0423a2ff202020202020 (10)   50 0423a2ff (4) ",
1: 			"50 0423a2ff202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"60 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"60 0423a2fd202020202020 (10)   50 0423a2ff (4) ",
1: 			"60 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"60 0423a2fd202020202020 (10)   70 0b27a2fd016de2356690 (10) ", 
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"50 0423a2ff202020202020 (10)   30 0423a2fd (4) ", 
1: 			"50 0423a2ff202020202020 (10)   40 0423a1fd (4) ",
1: 			"50 0423a2ff202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"60 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1: 		},
1: 		{ "30 0423a2fd202020202020 (10)   30 0423a2fd (4) ", 
1: 			"30 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"30 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"50 0423a2ff202020202020 (10)   30 0423a2fd (4) ",
1: 			"50 0423a2ff202020202020 (10)   40 0423a1fd (4) ",
1: 			"50 0423a2ff202020202020 (10)   50 0423a2ff (4) ",
1: 			"50 0423a2ff202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"60 0423a2fd202020202020 (10)   30 0423a2fd (4) ",
1: 			"60 0423a2fd202020202020 (10)   40 0423a1fd (4) ",
1: 			"60 0423a2fd202020202020 (10)   60 0423a2fd20 (5) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "  
1: 		},
1: 		{ "42818 types not comparable C1 ... C3"
1: 		},
1: 		{ "42818 types not comparable C1 ... C3" 
1: 		},
1: 		{ "42818 types not comparable C1 ... C3"
1: 		},
1: 		{ "42818 types not comparable C1 ... C3"
1: 		},
1: 		{ "42818 types not comparable C1 ... C3"
1: 		},
1: 		{ "42818 types not comparable C1 ... C3"
1: 		},
1: 		{ "42818 types not comparable C1 ... C4"
1: 		},
1: 		{ "42818 types not comparable C1 ... C4"
1: 		},
1: 		{ "42818 types not comparable C1 ... C4"
1: 		},
1: 		{ "42818 types not comparable C1 ... C4"
1: 		},
1: 		{ "42818 types not comparable C1 ... C4"
1: 		},
1: 		{ "42818 types not comparable C1 ... C4"
1: 		},
1: 		{ "30 0423a2fd (4)   30 0423a2fd202020202020 (10) ", 
1: 			"30 0423a2fd (4)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   50 0423a2ff202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   30 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   60 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{ "30 0423a2fd (4)   40 0423a1fd202020202020 (10) ",
1: 			"30 0423a2fd (4)   50 0423a2ff202020202020 (10) ",
1: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd (4)   30 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   50 0423a2ff202020202020 (10) ",
1: 			"40 0423a1fd (4)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"50 0423a2ff (4)   30 0423a2fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   60 0423a2fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd20 (5)   40 0423a1fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   50 0423a2ff202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) "
1: 		},
1: 		{"30 0423a2fd (4)   50 0423a2ff202020202020 (10) ",
1: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd (4)   30 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   50 0423a2ff202020202020 (10) ",
1: 			"40 0423a1fd (4)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd20 (5)   50 0423a2ff202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{"30 0423a2fd (4)   30 0423a2fd202020202020 (10) ",
1: 			"30 0423a2fd (4)   50 0423a2ff202020202020 (10) ",
1: 			"30 0423a2fd (4)   60 0423a2fd202020202020 (10) ",
1: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd (4)   30 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   40 0423a1fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   50 0423a2ff202020202020 (10) ",
1: 			"40 0423a1fd (4)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"50 0423a2ff (4)   50 0423a2ff202020202020 (10) ",
1: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd20 (5)   30 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   50 0423a2ff202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   60 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{"30 0423a2fd (4)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   30 0423a2fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   60 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   40 0423a1fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) "
1: 		},
1: 		{"30 0423a2fd (4)   30 0423a2fd202020202020 (10) ",
1: 			"30 0423a2fd (4)   40 0423a1fd202020202020 (10) ",
1: 			"30 0423a2fd (4)   60 0423a2fd202020202020 (10) ",
1: 			"40 0423a1fd (4)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   30 0423a2fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   40 0423a1fd202020202020 (10) ",
1: 			"50 0423a2ff (4)   50 0423a2ff202020202020 (10) ",
1: 			"50 0423a2ff (4)   60 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   30 0423a2fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   40 0423a1fd202020202020 (10) ",
1: 			"60 0423a2fd20 (5)   60 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd202020202020 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{"30 0423a2fd (4)   30 0423a2fd (4) ",
1: 			"30 0423a2fd (4)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd (4)   40 0423a1fd (4) ",
1: 			"50 0423a2ff (4)   50 0423a2ff (4) ",
1: 			"60 0423a2fd20 (5)   30 0423a2fd (4) ",
1: 			"60 0423a2fd20 (5)   60 0423a2fd20 (5) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{"30 0423a2fd (4)   40 0423a1fd (4) ",
1: 			"30 0423a2fd (4)   50 0423a2ff (4) ",
1: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd (4)   30 0423a2fd (4) ",
1: 			"40 0423a1fd (4)   50 0423a2ff (4) ",
1: 			"40 0423a1fd (4)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"50 0423a2ff (4)   30 0423a2fd (4) ",
1: 			"50 0423a2ff (4)   40 0423a1fd (4) ",
1: 			"50 0423a2ff (4)   60 0423a2fd20 (5) ",
1: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd20 (5)   40 0423a1fd (4) ",
1: 			"60 0423a2fd20 (5)   50 0423a2ff (4) ",
1: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1: 		},
1: 		{"30 0423a2fd (4)   50 0423a2ff (4) ",
1: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd (4)   30 0423a2fd (4) ",
1: 			"40 0423a1fd (4)   50 0423a2ff (4) ",
1: 			"40 0423a1fd (4)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd20 (5)   50 0423a2ff (4) ",
1: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{"30 0423a2fd (4)   30 0423a2fd (4) ",
1: 			"30 0423a2fd (4)   50 0423a2ff (4) ",
1: 			"30 0423a2fd (4)   60 0423a2fd20 (5) ",
1: 			"30 0423a2fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"40 0423a1fd (4)   30 0423a2fd (4) ",
1: 			"40 0423a1fd (4)   40 0423a1fd (4) ",
1: 			"40 0423a1fd (4)   50 0423a2ff (4) ",
1: 			"40 0423a1fd (4)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"50 0423a2ff (4)   50 0423a2ff (4) ",
1: 			"50 0423a2ff (4)   70 0b27a2fd016de2356690 (10) ",
1: 			"60 0423a2fd20 (5)   30 0423a2fd (4) ",
1: 			"60 0423a2fd20 (5)   50 0423a2ff (4) ",
1: 			"60 0423a2fd20 (5)   60 0423a2fd20 (5) ",
1: 			"60 0423a2fd20 (5)   70 0b27a2fd016de2356690 (10) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) " 
1: 		},
1: 		{ "30 0423a2fd (4)   40 0423a1fd (4) ",
1: 			"50 0423a2ff (4)   30 0423a2fd (4) ",
1: 			"50 0423a2ff (4)   40 0423a1fd (4) ",
1: 			"50 0423a2ff (4)   60 0423a2fd20 (5) ",
1: 			"60 0423a2fd20 (5)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) "
1: 		},
1: 		{"30 0423a2fd (4)   30 0423a2fd (4) ",
1: 			"30 0423a2fd (4)   40 0423a1fd (4) ",
1: 			"30 0423a2fd (4)   60 0423a2fd20 (5) ",
1: 			"40 0423a1fd (4)   40 0423a1fd (4) ",
1: 			"50 0423a2ff (4)   30 0423a2fd (4) ",
1: 			"50 0423a2ff (4)   40 0423a1fd (4) ",
1: 			"50 0423a2ff (4)   50 0423a2ff (4) ",
1: 			"50 0423a2ff (4)   60 0423a2fd20 (5) ",
1: 			"60 0423a2fd20 (5)   30 0423a2fd (4) ",
1: 			"60 0423a2fd20 (5)   40 0423a1fd (4) ",
1: 			"60 0423a2fd20 (5)   60 0423a2fd20 (5) ",
1: 			"70 0b27a2fd016de2356690 (10)   30 0423a2fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   40 0423a1fd (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   50 0423a2ff (4) ",
1: 			"70 0b27a2fd016de2356690 (10)   60 0423a2fd20 (5) ",
1: 			"70 0b27a2fd016de2356690 (10)   70 0b27a2fd016de2356690 (10) "
1: 		},
1: 		{"42818 types not comparable C2 ... C3"},
1: 		{"42818 types not comparable C2 ... C3"},
1: 		{"42818 types not comparable C2 ... C3"},
1: 		{"42818 types not comparable C2 ... C3"},
1: 		{"42818 types not comparable C2 ... C3"},
1: 		{"42818 types not comparable C2 ... C3"},
1: 		{"42818 types not comparable C2 ... C4"},
1: 		{"42818 types not comparable C2 ... C4"},
1: 		{"42818 types not comparable C2 ... C4"},
1: 		{"42818 types not comparable C2 ... C4"},
1: 		{"42818 types not comparable C2 ... C4"},
1: 		{"42818 types not comparable C2 ... C4"},
1: 		{"42818 types not comparable C3 ... C1"},
1: 		{"42818 types not comparable C3 ... C1"},
1: 		{"42818 types not comparable C3 ... C1"},
1: 		{"42818 types not comparable C3 ... C1"},
1: 		{"42818 types not comparable C3 ... C1"},
1: 		{"42818 types not comparable C3 ... C1"},
1: 		{"42818 types not comparable C3 ... C2"},
1: 		{"42818 types not comparable C3 ... C2"},
1: 		{"42818 types not comparable C3 ... C2"},
1: 		{"42818 types not comparable C3 ... C2"},
1: 		{"42818 types not comparable C3 ... C2"},
1: 		{"42818 types not comparable C3 ... C2"},
1: 		{"42818 types not comparable C3 ... C3"},
1: 		{"42818 types not comparable C3 ... C3"},
1: 		{"42818 types not comparable C3 ... C3"},
1: 		{"42818 types not comparable C3 ... C3"},
1: 		{"42818 types not comparable C3 ... C3"},
1: 		{"42818 types not comparable C3 ... C3"},
1: 		{"42818 types not comparable C3 ... C4"},
1: 		{"42818 types not comparable C3 ... C4"},
1: 		{"42818 types not comparable C3 ... C4"},
1: 		{"42818 types not comparable C3 ... C4"},
1: 		{"42818 types not comparable C3 ... C4"},
1: 		{"42818 types not comparable C3 ... C4"},
1: 		{"42818 types not comparable C4 ... C1"},
1: 		{"42818 types not comparable C4 ... C1"},
1: 		{"42818 types not comparable C4 ... C1"},
1: 		{"42818 types not comparable C4 ... C1"},
1: 		{"42818 types not comparable C4 ... C1"},
1: 		{"42818 types not comparable C4 ... C1"},
1: 		{"42818 types not comparable C4 ... C2"},
1: 		{"42818 types not comparable C4 ... C2"},
1: 		{"42818 types not comparable C4 ... C2"},
1: 		{"42818 types not comparable C4 ... C2"},
1: 		{"42818 types not comparable C4 ... C2"},
1: 		{"42818 types not comparable C4 ... C2"},
1: 		{"42818 types not comparable C4 ... C3"},
1: 		{"42818 types not comparable C4 ... C3"},
1: 		{"42818 types not comparable C4 ... C3"},
1: 		{"42818 types not comparable C4 ... C3"},
1: 		{"42818 types not comparable C4 ... C3"},
1: 		{"42818 types not comparable C4 ... C3"},
1: 		{"42818 types not comparable C4 ... C4"},
1: 		{"42818 types not comparable C4 ... C4"},
1: 		{"42818 types not comparable C4 ... C4"},
1: 		{"42818 types not comparable C4 ... C4"},
1: 		{"42818 types not comparable C4 ... C4"},
1: 		{"42818 types not comparable C4 ... C4"} 
1: 	};
1: 
1: 	/* testEncodedLengthsExpectedValues is a table of expected values for the testEncodedLengths() fixture */
1: 	public static String[] testEncodedLengthsExpectedValues = {
1: 		"C1 OK DATA OK C2 OK DATA OK C3 OK DATA OK",
1: 		"C1 NULL C2 OK DATA OK C3 OK DATA OK",
1: 		"C1 NULL C2 NULL C3 OK DATA OK"
1: 	};
1: 
1: 	
1: 	
1: 	/* Public constructor required for running test as standalone JUnit. */    
1: 	public ForBitDataTest(String name) {
1: 		super(name);
1: 	}
1: 
1: 	
0: 	/* Set up fixture */ 
0: 	protected void setUp() throws SQLException {
0: 	    stmt = createStatement();
1: 	}
1: 
1: 
0: 	/* Tear down the fixture */
0: 	protected void tearDown() throws Exception {
0:                 stmt.close();
0: 		super.tearDown();
1: 	}
1: 	
1: 	/**
1:         Negative for bit data tests. 
1:         FBD001,FBD007 negative syntax
1:         FBD005 maximum char length
1:         FBD009 maximum varchar length
1:         */
1: 	public void testNegative() throws SQLException {		
0: 		assertStatementError("42611", stmt, "CREATE TABLE FBDFAIL.T001 (C001 CHAR(255) FOR BIT DATA)");
0: 		assertStatementError("42611", stmt, "CREATE TABLE FBDFAIL.T001 (C001 CHAR(255) FOR BIT DATA)");
0: 		assertStatementError("42611", stmt, "CREATE TABLE FBDFAIL.T002 (C002 VARCHAR(32673) FOR BIT DATA)");
0: 		assertStatementError("42X01", stmt, "CREATE TABLE FBDFAIL.T003 (C003 VARCHAR FOR BIT DATA)");	
0: 		assertStatementError("42X01", stmt, "CREATE TABLE FBDFAIL.T004 (C004 LONG VARCHAR(100) FOR BIT DATA)");
1: 	}
1: 
1: 	/**
1: 	FBD001,FBD007 - positive syntax 
1: 	FBD004 - CHAR length defaults to one
1: 	FBD037 - create table
1: 	FBD006, FBD011, FBD014 - correct JDBC type
1: 	 */
1: 	public void testTypes() throws SQLException {
1: 		Connection conn = getConnection();
1: 		ResultSet rs = conn.getMetaData().getColumns(null, "FBDOK", null, null);
1: 		String actualValue = null;
1: 
1: 		int i=0;
1: 		while (rs.next()) {
1: 			// skip 1 catalog
1: 			actualValue  = rs.getString(2) + ",";
1: 			actualValue += rs.getString(3) + ",";
1: 			actualValue += rs.getString(4) + ",";
1: 			actualValue += rs.getString(5) + ",";
1: 			actualValue += rs.getString(6) + ",";
1: 			actualValue += rs.getString(7) + ",";
1: 			actualValue += rs.getString(9) + ",";
1: 			actualValue += rs.getString(10) + ",";
1: 			actualValue += rs.getString(11) + ",";
1: 			actualValue += rs.getString(13) + ",";
1: 			actualValue += rs.getString(16) + ",";
1: 			actualValue += rs.getString(17) + ",";
1: 			actualValue += rs.getString(18);
1:                         assertEquals(testTypesExpectedValues[i], actualValue); 
1: 			i++;
1: 		}
1: 		rs.close();
1: 
1: 		for (i = 1; i <= 8; i++) {
1: 			PreparedStatement ps = prepareStatement("SELECT * FROM FBDOK.T00" + i);
1: 			ResultSetMetaData rsmd = ps.getMetaData();
1: 			actualValue = rsmd.getColumnName(1) + " " + rsmd.getColumnTypeName(1) + " precision " + rsmd.getPrecision(1);
1:                         
1: 			if ( usingDerbyNetClient() )  
1: 			  assertEquals(testTypesExpectedValuesNetworkServer[i-1], actualValue);
1: 			else 
1:                           assertEquals(testTypesExpectedValuesEmbedded[i-1], actualValue);
1: 			ps.close();
1: 		}
1: 
1: 		DatabaseMetaData dmd = conn.getMetaData();
1: 		rs = dmd.getTypeInfo();
1: 
1: 		int j=0;
1: 		while (rs.next()) {
1: 			String name = rs.getString(1);
1: 			int jdbcType = rs.getInt(2);
1: 			switch (jdbcType) {
1: 			case Types.BINARY:
1: 			case Types.VARBINARY:
1: 			case Types.LONGVARBINARY:
1: 				break;
1: 			default:
1: 				continue;
1: 			}
1: 			actualValue = name + "(" + jdbcType + ") " + "precision " + rs.getInt(3)+ "" ;
1: 			assertEquals(testTypesExpectedValues3[j], actualValue);
1: 			j++;
1: 		}
1: 		rs.close();
1: 
1: 		{
1: 			String sql = "VALUES X'2345d45a2e44'";
1: 			PreparedStatement psv = prepareStatement(sql);
1: 			ResultSetMetaData rsmd = psv.getMetaData();
1: 			actualValue = rsmd.getColumnName(1) + " " + rsmd.getColumnTypeName(1) + " precision " + rsmd.getPrecision(1);
1: 			if ( usingDerbyNetClient() ) 
1: 			    assertEquals("1 CHAR FOR BIT DATA precision 6", actualValue);
1: 			else 
1: 			    assertEquals("1 CHAR () FOR BIT DATA precision 6", actualValue);
1: 		}
1: 
1: 		{
1: 			String sql = "VALUES X''";
1: 			PreparedStatement psv = prepareStatement(sql);
1: 			ResultSetMetaData rsmd = psv.getMetaData();
1: 			actualValue = rsmd.getColumnName(1) + " " + rsmd.getColumnTypeName(1) + " precision " + rsmd.getPrecision(1);
1: 			if ( usingDerbyNetClient() ) 
1: 			    assertEquals("1 CHAR FOR BIT DATA precision 0", actualValue);
1: 			else
1: 			    assertEquals("1 CHAR () FOR BIT DATA precision 0", actualValue);
1: 		}
1: 	}
1: 
1:         /* testValues fixture */
1: 	public void testValues() throws SQLException {
1: 		PreparedStatement psI = prepareStatement("INSERT INTO FBDVAL.T001 VALUES(?, ?, ?, ?, ?)");
1: 		PreparedStatement psS = prepareStatement("SELECT C1, C2, C3, C4, ID FROM FBDVAL.T001 WHERE ID >= ? AND ID < ? ORDER BY ID");
1: 
1: 		insertData(psI, 0, null, 10, true);
1: 		showData(psS, 0, null, "ORG <NULL> CHR <NULL> VAR <NULL> LVC <NULL> BLOB <NULL> ");
1: 
1: 		byte[] empty = new byte[7];
1: 		insertData(psI, 10, empty, 10, true);
1: 		showData(psS, 10, empty, "ORG 00000000000000 (7) CHR 00000000000000202020 (10) VAR 00000000000000 (7) LVC 00000000000000 (7) BLOB 00000000000000 (7) ");
1: 
1: 		byte[] empty2 = new byte[15];
1: 		insertData(psI, 20, empty2, 10, true);
1: 		showData(psS, 20, empty2, "ORG 000000000000000000000000000000 (15) CHR <NULL> VAR <NULL> LVC 000000000000000000000000000000 (15) BLOB <NULL> ");
1: 
1: 		byte[] four = new byte[4];
1: 		four[0] = (byte) 0x04;
1: 		four[1] = (byte) 0x23;
1: 		four[2] = (byte) 0xA2;
1: 		four[3] = (byte) 0xFD;
1: 		insertData(psI, 30, four, 10, true);
1: 		showData(psS, 30, four, "ORG 0423a2fd (4) CHR 0423a2fd202020202020 (10) VAR 0423a2fd (4) LVC 0423a2fd (4) BLOB 0423a2fd (4) ");
1: 
1: 		byte[] ten = new byte[10];
1: 		ten[0] = (byte) 0x0B;
1: 		ten[1] = (byte) 0x27;
1: 		ten[2] = (byte) 0xA2;
1: 		ten[3] = (byte) 0xFD;
1: 		ten[4] = (byte) 0x01;
1: 		ten[5] = (byte) 0x6D;
1: 		ten[6] = (byte) 0xE2;
1: 		ten[7] = (byte) 0x35;
1: 		ten[8] = (byte) 0x66;
1: 		ten[9] = (byte) 0x90;
1: 		insertData(psI, 40, ten, 10, true);
1: 		showData(psS, 40, ten, "ORG 0b27a2fd016de2356690 (10) CHR 0b27a2fd016de2356690 (10) VAR 0b27a2fd016de2356690 (10) LVC 0b27a2fd016de2356690 (10) BLOB 0b27a2fd016de2356690 (10) ");
1: 
1: 		byte[] l15 = new byte[15];
1: 		l15[0] = (byte) 0xEB;
1: 		l15[1] = (byte) 0xCA;
1: 		l15[2] = (byte) 0xFE;
1: 		l15[3] = (byte) 0xBA;
1: 		l15[4] = (byte) 0xBE;
1: 		l15[5] = (byte) 0xFE;
1: 		l15[6] = (byte) 0xED;
1: 		l15[7] = (byte) 0xFA;
1: 		l15[8] = (byte) 0xCE;
1: 		l15[9] = (byte) 0x24;
1: 		l15[10] = (byte) 0x78;
1: 		l15[11] = (byte) 0x43;
1: 		l15[12] = (byte) 0x92;
1: 		l15[13] = (byte) 0x31;
1: 		l15[14] = (byte) 0x6D;
1: 		insertData(psI, 50, l15, 10, true);
1: 		showData(psS, 50, l15, "ORG ebcafebabefeedface24784392316d (15) CHR <NULL> VAR <NULL> LVC ebcafebabefeedface24784392316d (15) BLOB <NULL> ");
1: 
1: 		byte[] space4 = new byte[4];
1: 		space4[0] = (byte) 0x20;
1: 		space4[1] = (byte) 0x20;
1: 		space4[2] = (byte) 0x20;
1: 		space4[3] = (byte) 0x20;
1: 		insertData(psI, 60, space4, 10, true);
1: 		showData(psS, 60, space4, "ORG 20202020 (4) CHR 20202020202020202020 (10) VAR 20202020 (4) LVC 20202020 (4) BLOB 20202020 (4) ");
1: 
1: 		byte[] space6 = new byte[6];
1: 		space6[0] = (byte) 0xca;
1: 		space6[1] = (byte) 0xfe;
1: 		space6[2] = (byte) 0x20;
1: 		space6[3] = (byte) 0x20;
1: 		space6[4] = (byte) 0x20;
1: 		space6[5] = (byte) 0x20;
1: 		insertData(psI, 70, space6, 10, true);
1: 		showData(psS, 70, space6, "ORG cafe20202020 (6) CHR cafe2020202020202020 (10) VAR cafe20202020 (6) LVC cafe20202020 (6) BLOB cafe20202020 (6) ");
1: 
1: 		byte[] space12 = new byte[12];
1: 		space12[0] = (byte) 0xca;
1: 		space12[1] = (byte) 0xfe;
1: 		space12[2] = (byte) 0x20;
1: 		space12[3] = (byte) 0x20;
1: 		space12[4] = (byte) 0x20;
1: 		space12[5] = (byte) 0x20;
1: 		space12[6] = (byte) 0xca;
1: 		space12[7] = (byte) 0xfe;
1: 		space12[8] = (byte) 0x20;
1: 		space12[9] = (byte) 0x20;
1: 		space12[10] = (byte) 0x20;
1: 		space12[11] = (byte) 0x20;
1: 		insertData(psI, 210, space12, 10, true);
1: 		showData(psS, 210, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR <NULL> LVC cafe20202020cafe20202020 (12) BLOB <NULL> ");
1: 
1: 
1: 		String sql = "INSERT INTO FBDVAL.T001 VALUES(80, X'2020202020', X'2020202020', X'2020202020', null)";
1: 		stmt.executeUpdate(sql);
1: 		showData(psS, 80, space4, "ORG 20202020 (4) CHR 20202020202020202020 (10) VAR 2020202020 (5) LVC 2020202020 (5) BLOB <NULL> ");
1: 
1: 		sql = "INSERT INTO FBDVAL.T001 VALUES(90, X'CAFE20202020CAFE20202020', null, null, null)";
1: 		stmt.executeUpdate(sql);
1: 		showData(psS, 90, space12, "ORG cafe20202020cafe20202020 (12) CHR cafe20202020cafe2020 (10) VAR <NULL> LVC <NULL> BLOB <NULL> ");
1: 
1: 		sql = "INSERT INTO FBDVAL.T001 VALUES(100, null, X'CAFE20202020CAFE20202020', null, null)";
1: 		stmt.executeUpdate(sql);
1: 		showData(psS, 100, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR cafe20202020cafe2020 (10) LVC <NULL> BLOB <NULL> ");
1: 
1: 		sql = "INSERT INTO FBDVAL.T001 VALUES(110, null, null, X'CAFE20202020CAFE20202020', null)";
1: 		stmt.executeUpdate(sql);
1: 		showData(psS, 110, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR <NULL> LVC cafe20202020cafe20202020 (12) BLOB <NULL> ");
1: 
1: 		sql = "INSERT INTO FBDVAL.T001 VALUES(120, X'CAFE20202020CAFE20202020DD', null, null, null)";
1: 		try {
1: 			stmt.executeUpdate(sql);
1: 		} catch (SQLException sqle) {
1: 			assertSQLState("22001", sqle);
1: 		}
1: 
1: 		sql = "INSERT INTO FBDVAL.T001 VALUES(130, null, X'CAFE20202020CAFE20202020DD', null, null)";
1: 		try {
1: 			stmt.executeUpdate(sql);
1: 		} catch (SQLException sqle) {
1: 			assertSQLState("22001", sqle);
1: 		}
1: 
1: 		sql = "INSERT INTO FBDVAL.T001 VALUES(140, null, null, X'CAFE20202020CAFE20202020DD', null)";
1: 		stmt.executeUpdate(sql);
1: 		showData(psS, 140, space12, "ORG cafe20202020cafe20202020 (12) CHR <NULL> VAR <NULL> LVC cafe20202020cafe20202020dd (13) BLOB <NULL> ");
1: 
1: 		sql = "INSERT INTO FBDVAL.X001 VALUES(200, X'CAFE20202020CAFE20202020', null, null, null)";
1: 		stmt.executeUpdate(sql);
1: 
1: 		sql = "INSERT INTO FBDVAL.T001 SELECT * FROM FBDVAL.X001";
1: 		stmt.executeUpdate(sql);
1: 		showData(psS, 200, space12, "ORG cafe20202020cafe20202020 (12) CHR cafe20202020cafe2020 (10) VAR <NULL> LVC <NULL> BLOB <NULL> ");
1: 	}
1: 
1: 
1:         /* testCompare fixture */
1: 	public void testCompare() throws SQLException {
1: 		stmt.execute("delete from FBDVAL.T001");
1: 		PreparedStatement psI = prepareStatement("INSERT INTO FBDVAL.T001 VALUES(?, ?, ?, ?, ?)");
1: 		PreparedStatement psI2 = prepareStatement("INSERT INTO FBDVAL.T002 VALUES(?, ?, ?, ?, ?)");
1: 
1: 		insertData(psI, 0, null, 10, false);
1: 		insertData(psI2, 0, null, 10, false);
1: 
1: 		byte[] four = new byte[4];
1: 		four[0] = (byte) 0x04;
1: 		four[1] = (byte) 0x23;
1: 		four[2] = (byte) 0xA2;
1: 		four[3] = (byte) 0xFD;
1: 
1: 		insertData(psI, 30, four, 10, false);
1: 		insertData(psI2, 30, four, 10, false);
1: 		four[2] = (byte) 0xA1;
1: 		insertData(psI, 40, four, 10, false);
1: 		insertData(psI2, 40, four, 10, false);
1: 		four[2] = (byte) 0xA2;
1: 		four[3] = (byte) 0xFF;
1: 		insertData(psI, 50, four, 10, false);
1: 		insertData(psI2, 50, four, 10, false);
1: 
1: 		byte[] four_plus_space = new byte[5];
1: 		four_plus_space[0] = (byte) 0x04;
1: 		four_plus_space[1] = (byte) 0x23;
1: 		four_plus_space[2] = (byte) 0xA2;
1: 		four_plus_space[3] = (byte) 0xFD;
1: 		four_plus_space[4] = (byte) 0x20;
1: 		insertData(psI, 60, four_plus_space, 10, false);
1: 		insertData(psI2, 60, four_plus_space, 10, false);
1: 
1: 		byte[] ten = new byte[10];
1: 		ten[0] = (byte) 0x0B;
1: 		ten[1] = (byte) 0x27;
1: 		ten[2] = (byte) 0xA2;
1: 		ten[3] = (byte) 0xFD;
1: 		ten[4] = (byte) 0x01;
1: 		ten[5] = (byte) 0x6D;
1: 		ten[6] = (byte) 0xE2;
1: 		ten[7] = (byte) 0x35;
1: 		ten[8] = (byte) 0x66;
1: 		ten[9] = (byte) 0x90;
1: 
1: 		insertData(psI, 70, ten, 10, false);
1: 		insertData(psI2, 70, ten, 10, false);
1: 
1: 		String[] COLS = {"C1", "C2", "C3", "C4"};
1: 		String[] OPS = {"=", "<>", "<", "<=", ">", ">="};
1: 
1: 		int i=0;
1: 		for (int t = 0; t < COLS.length; t++) {
1: 		    for (int o = 0; o < COLS.length; o++) {
1: 			for (int a = 0; a < OPS.length; a++) {
1: 			    String sql = "SELECT T.ID, T." + COLS[t] + ", O.ID, O." + COLS[o] + " FROM FBDVAL.T001 O, FBDVAL.T002 T WHERE T." + COLS[t] + " " + OPS[a] + " O." + COLS[o] + " ORDER BY 1,3";
1: 
1: 			    try {
1: 				PreparedStatement psS = prepareStatement(sql);
1: 				showCompareData(psS, testCompareExpectedValues [i]);
1: 			    } catch (SQLException sqle) {
1: 				assertSQLState("42818", sqle);
1: 			    }
1: 			    i++;
1: 			}
1: 		    }
1: 		}
1: 	}
1: 
1: 	/**
1: 	The length of a binary type is encoded when stored, this
1: 	test makes sure all the code paths are tested.
1: 	The encoded length is hidden from the JDBC client.
1: 	 */
1: 	public void testEncodedLengths() throws SQLException, IOException {	
1: 		PreparedStatement psi = prepareStatement("INSERT INTO FBDVAL.TEL VALUES(?, ?, ?)");
1: 		PreparedStatement pss = prepareStatement("SELECT * FROM FBDVAL.TEL");
1: 		PreparedStatement psd = prepareStatement("DELETE FROM FBDVAL.TEL");
1: 
1: 		//insertEL(psi, pss, psd, 0);
1: 		insertEL(psi, pss, psd,  10, testEncodedLengthsExpectedValues[0]);
1: 		insertEL(psi, pss, psd,  30, testEncodedLengthsExpectedValues[0]);
1: 		insertEL(psi, pss, psd,  31, testEncodedLengthsExpectedValues[0]);
1: 		insertEL(psi, pss, psd,  32, testEncodedLengthsExpectedValues[0]); // switch to 2 byte length
1: 		insertEL(psi, pss, psd,  1345, testEncodedLengthsExpectedValues[0]);
1: 		insertEL(psi, pss, psd,  23456, testEncodedLengthsExpectedValues[0]);
1: 		insertEL(psi, pss, psd,  32672, testEncodedLengthsExpectedValues[0]);
1: 		insertEL(psi, pss, psd,  32700, testEncodedLengthsExpectedValues[1]);
1: 		insertEL(psi, pss, psd,  (32*1024) - 1, testEncodedLengthsExpectedValues[2]);
1: 		insertEL(psi, pss, psd,  (32*1024), testEncodedLengthsExpectedValues[2]);
1: 		insertEL(psi, pss, psd,  (32*1024) + 1, testEncodedLengthsExpectedValues[2]);
1: 		insertEL(psi, pss, psd,  (64*1024) - 1, testEncodedLengthsExpectedValues[2]);
1: 		insertEL(psi, pss, psd,  (64*1024), testEncodedLengthsExpectedValues[2]); // switch to 4 byte length
1: 		insertEL(psi, pss, psd,  (64*1024) + 1, testEncodedLengthsExpectedValues[2]);
1: 		insertEL(psi, pss, psd,  (110*1024) + 3242, testEncodedLengthsExpectedValues[2]);
1: 
1: 		psi.close();
1: 		pss.close();
1: 		psd.close();
1: 	}
1: 
1:         /**
1:          * Create a suite of tests.
1:          **/
1:         public static Test suite() {
0:         	TestSuite suite = new TestSuite("ForBitTestData");
1:         	suite.addTest(baseSuite("ForBitTestData:embedded"));
1:         	suite.addTest(TestConfiguration.clientServerDecorator(baseSuite("ForBitTestData:client")));
1:         	return suite;
1:     	}
1: 
1: 	protected static Test baseSuite(String name) {
0:         	TestSuite suite = new TestSuite(name);
1:         	suite.addTestSuite(ForBitDataTest.class);
1:         	
1: 		return new CleanDatabaseTestSetup(suite) 
1:         	{
1:             		protected void decorateSQL(Statement s) throws SQLException
1:             		{
1:                 		for (int i = 0; i < TABLES.length; i++) {
1:                     			s.execute(TABLES[i]);
1:                 		}
0:                         	s.close();
1:             		}
1:         	};
1:     	} 
1: 
1:         /***********************************************************************************************
1:          * All the methods below this line are used by fixtures
1:          **********************************************************************************************/
1: 	private void insertEL(PreparedStatement psi, PreparedStatement pss, PreparedStatement psd, int length, String expectedValue) throws SQLException, IOException 
1: 	{
1:                 byte[] data = new byte[length];
1: 
1: 		// random simple value check
1: 		int off = (int)  (System.currentTimeMillis() % ((long) length));
1: 		data[off] = 0x23;
1: 
1: 		psi.setBytes(1, (length <= 32672) ? data : null);
1: 		psi.setBytes(2, (length <= 32700) ? data : null);
1: 		psi.setBinaryStream(3, new java.io.ByteArrayInputStream(data), length); // BLOB column
1: 
1: 		psi.executeUpdate();
1: 		selectData(pss,data,off,length, expectedValue);
1: 		psd.executeUpdate();
1: 
1: 		// Set values using stream and then verify that select is successful
1: 		psi.setBinaryStream(1, (length <= 32672) ? new java.io.ByteArrayInputStream(data) : null, length);
1: 		psi.setBinaryStream(2, (length <= 32700) ? new java.io.ByteArrayInputStream(data) : null, length);
1: 		psi.setBinaryStream(3, new java.io.ByteArrayInputStream(data), length); // BLOB column
1: 		psi.executeUpdate();
1: 
1: 		selectData(pss,data,off,length, expectedValue);
1: 		psd.executeUpdate();
1: 	}
1: 
1: 	private void selectData(PreparedStatement pss,byte[] data,int off,int length, String expectedValue)
1: 	throws SQLException,IOException
1: 	{
1:                 String actualValue = null;
1: 		ResultSet rs = pss.executeQuery();
1: 		while (rs.next())
1: 		{
1: 			byte[] v = rs.getBytes(1);
1: 			
1: 			if (v != null) {
1: 				actualValue =  "C1 " + ((v.length == length) ? "OK" : ("FAIL <" + v.length + ">"));
1: 				actualValue += " DATA " + ((v[off] == 0x23) ? "OK" : ("FAIL " + off));
1: 
1: 			}
1: 			else {
1: 				actualValue = "C1 NULL";
1: 			}
1: 			v = rs.getBytes(2);
1: 			if (v != null) {
1: 				actualValue += " C2 " + ((v.length == length) ? "OK" : ("FAIL <" + v.length + ">"));
1: 				actualValue += " DATA " + ((v[off] == 0x23) ? "OK" : ("FAIL " + off));
1: 				
1: 			}
1: 			else {
1: 				actualValue += " C2 NULL";
1: 			}
1: 			InputStream c3 = rs.getBinaryStream(3);
1: 			String returnValue = checkEncodedLengthValue(" C3", c3, length, off);
1: 			actualValue += returnValue;
1: 			assertEquals(expectedValue, actualValue);
1: 		}
1: 		rs.close();
1: 
1: 		rs = pss.executeQuery();
1: 		while (rs.next())
1: 		{
1: 			actualValue = checkEncodedLengthValue("C1", rs.getBinaryStream(1), length, off) +
1: 					     checkEncodedLengthValue(" C2", rs.getBinaryStream(2), length, off) +
1:                                              checkEncodedLengthValue(" C3", rs.getBinaryStream(3), length, off);									
1: 			assertEquals(expectedValue, actualValue);
1: 		}
1: 		rs.close();
1: 
1: 	}
1: 	private String checkEncodedLengthValue(String col, InputStream is, int length, int off) throws IOException {
1: 		String returnStr = null;
1: 		if (is == null) {
1: 			returnStr = col + " NULL";
1: 			return returnStr;
1: 		}
1: 		byte[] buf = new byte[3213];
1: 		boolean dataOK = false;
1: 		int sl = 0;
1: 		for (;;) {
1: 			int r = is.read(buf);
1: 			if (r < 0)
1: 				break;
1: 
1: 			if ((off >= sl) && (off < (sl + r))) {
1: 				if (buf[off - sl] == 0x23)
1: 					dataOK = true;
1: 			}
1: 			sl += r;
1: 		}
1: 		returnStr =  col + " " + ((sl == length) ? "OK" : ("FAIL <" + sl + ">"));
1: 		returnStr += " DATA " + (dataOK ? "OK" : ("FAIL " + off));
1: 
1: 		return returnStr;
1: 	}
1: 
1:         
1: 	private void showCompareData(PreparedStatement psS, String[] expectedValues) throws SQLException {
1: 		ResultSet rs = psS.executeQuery();
1: 		int i=0;
1: 		while (rs.next()) {
1:                         String actualValue = rs.getInt(1) + " " + showData(rs.getBytes(2)) + "  " + rs.getInt(3) + " " + showData(rs.getBytes(4));
1: 			assertEquals(expectedValues[i],actualValue);
1: 			i++;
1: 		}
1: 		rs.close();
1: 		psS.close();
1: 	}
1: 
1: 	private void insertData(PreparedStatement psI, int id, byte[] original, int maxLen, boolean streamAsWell) throws SQLException 
1: 	{
1: 
1: 		int ol = original == null ? 0: original.length;
1: 
1: 		if (original == null || original.length <= maxLen) {
1: 			// simple case.
1: 			psI.setInt(1, id);
1: 			psI.setBytes(2, original);
1: 			psI.setBytes(3, original);
1: 			psI.setBytes(4, original);
1: 			psI.setBytes(5, original);
1: 			psI.executeUpdate();
1: 
1: 			if (streamAsWell) {
1: 				psI.setInt(1, id+1);
1: 				psI.setBinaryStream(2, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.setBinaryStream(3, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.setBinaryStream(4, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.setBinaryStream(5, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.executeUpdate();
1: 			}
1: 			return;
1: 		}	
1: 
1: 		// Insert potentially out of range value one at a time into the table
1: 		try {
1: 			psI.setInt(1, id);
1: 			psI.setBytes(2, original);
1: 			psI.setBytes(3, null);
1: 			psI.setBytes(4, null);
1: 			psI.setBytes(5, null);
1: 			psI.executeUpdate();
1: 		} catch (SQLException sqle) {
1: 			assertSQLState("22001", sqle);
1: 		}
1: 		if (streamAsWell) {
1: 			try {
1: 				psI.setInt(1, id+1);
1: 				psI.setBinaryStream(2, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.executeUpdate();
1: 			} catch (SQLException sqle) {
1: 				assertSQLState("22001", sqle);
1: 			}
1: 
1: 		}
1: 
1: 		try {
1: 			psI.setInt(1, id+2);
1: 			psI.setBytes(2, null);
1: 			psI.setBytes(3, original);
1: 			psI.setBytes(4, null);
1: 			psI.setBytes(5, null);
1: 			psI.executeUpdate();
1: 		} catch (SQLException sqle) {
1: 			assertSQLState("22001", sqle);
1: 		}
1: 		if (streamAsWell) {
1: 			try {
1: 				psI.setInt(1, id+3);
1: 				psI.setBinaryStream(3, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.executeUpdate();
1: 			} catch (SQLException sqle) {
1: 				assertSQLState("22001", sqle);
1: 			}
1: 		}
1: 
1: 
1: 		try {
1: 			psI.setInt(1, id+4);
1: 			psI.setBytes(2, null);
1: 			psI.setBytes(3, null);
1: 			psI.setBytes(4, original);
1: 			psI.setBytes(5, null);
1: 			psI.executeUpdate();
1: 		} catch (SQLException sqle) {
1: 			assertSQLState("22001", sqle);
1: 		}
1: 		if (streamAsWell) {
1: 			try {
1: 				psI.setInt(1, id+5);
1: 				psI.setBinaryStream(4, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.executeUpdate();
1: 			} catch (SQLException sqle) {
1: 				assertSQLState("22001", sqle);
1: 			}
1: 		}
1: 
1: 		try {
1: 			psI.setInt(1, id+6);
1: 			psI.setBytes(2, null);
1: 			psI.setBytes(3, null);
1: 			psI.setBytes(4, null);
1: 			psI.setBytes(5, original);
1: 			psI.executeUpdate();
1: 		} catch (SQLException sqle) {
1: 			assertSQLState("22001", sqle);
1: 		}
1: 		if (streamAsWell) {
1: 			try {
1: 				psI.setInt(1, id+7);
1: 				psI.setBinaryStream(5, original == null ? null : new ByteArrayInputStream(original), ol);
1: 				psI.executeUpdate();
1: 			} catch (SQLException sqle) {
1: 				assertSQLState("22001", sqle);
1: 			}
1: 		}
1: 	}
1: 
1: 	private void showData(PreparedStatement psS, int id, byte[] original, String expectedValue) throws SQLException {
1: 		psS.setInt(1, id);
1: 		psS.setInt(2, id + 10);
1: 		ResultSet rs = psS.executeQuery();
1: 		while (rs.next()) {
1: 			String actualValue = "ORG " + showData(original) + "";
1: 			actualValue += "CHR " + showData(rs.getBytes(1)) + "";
1: 			actualValue += "VAR " + showData(rs.getBytes(2)) + "";
1: 			actualValue += "LVC " + showData(rs.getBytes(3)) + "";
1: 			actualValue += "BLOB " + showData(rs.getBytes(4));
1: 			assertEquals(expectedValue, actualValue);
1: 		}
1: 		rs.close();
1: 
1: 	}
1: 
1: 	private String showData(byte[] data) {
1:        	        if (data == null)
1: 		   return "<NULL> ";
1: 
1: 	        StringBuffer sb = new StringBuffer();
1: 		for (int i = 0; i < data.length; i++) {
1: 			String s = Integer.toHexString(data[i] & 0xff);
1: 			if (s.length() == 1)
1: 				sb.append('0');
1: 			sb.append(s);
1: 		}
1: 
1: 		sb.append(' ');
1: 		sb.append('(');
1: 		sb.append(data.length);
1: 		sb.append(')');
1: 		sb.append(' ');
1: 
1: 		return sb.toString();
1: 	}
1: 
1: }
============================================================================