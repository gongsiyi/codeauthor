1:eac0369: /*
1:345de35: 
1:c56eceb:    Derby - Class org.apache.derby.iapi.types.RawToBinaryFormatStream
1:345de35: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:eac0369: 
3:eac0369:  */
1:96b9662: 
1:c56eceb: package org.apache.derby.iapi.types;
1:96b9662: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:bb1be44: import java.io.EOFException;
1:eac0369: 
1:10cc70b: import org.apache.derby.iapi.services.io.DerbyIOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitInputStream;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
3:eac0369: /**
1:eac0369: 	Stream that takes a raw input stream and converts it
1:c56eceb: 	to the on-disk format of the binary types by prepending the
1:96b9662: 	length of the value.
1:96b9662:     <P>
1:96b9662:     If the length of the stream is known then it is encoded
1:96b9662:     as the first bytes in the stream in the defined format.
1:96b9662:     <BR>
1:96b9662:     If the length is unknown then the first four bytes will
1:96b9662:     be zero, indicating unknown length.
1:96b9662:     <BR>
1:bb1be44:     Note: This stream cannot be re-used. Once end of file is
1:bb1be44:     reached, the next read call will throw an EOFException
1:96b9662:     
1:96b9662:     @see SQLBinary
1:eac0369: */
1:96b9662: public final class RawToBinaryFormatStream extends LimitInputStream {
1:eac0369: 
1:96b9662:     /**
1:96b9662:      * Number of bytes of length encoding.
1:96b9662:      * 
1:96b9662:      */
1:96b9662: 	private int encodedOffset;
1:96b9662:     
1:96b9662:     /**
1:96b9662:      * Encoding of the length in bytes which will be
1:96b9662:      * seen as the first encodedLength.length bytes of
1:96b9662:      * this stream.
1:96b9662:      */
1:96b9662:     private byte[] encodedLength;
1:eac0369:     
1:bb1be44:     // flag to indicate the stream has already been read
1:bb1be44:     // and eof reached
1:bb1be44:     private boolean eof = false;
1:eac0369: 
1:10cc70b:     /**
1:10cc70b:      * The length of the stream.
1:10cc70b:      * Unknown if less than 0.
1:10cc70b:      */
1:10cc70b:     private final int length;
1:10cc70b:     /**
1:10cc70b:      * The maximum allowed length for the stream.
1:10cc70b:      * No limit if less than 0.
1:10cc70b:      */
1:10cc70b:     private final int maximumLength;
1:10cc70b:     /**
1:10cc70b:      * The type of the column the stream is inserted into.
1:10cc70b:      * Used for length less streams, <code>null</code> if not in use.
1:10cc70b:      */
1:10cc70b:     private final String typeName;
1:eac0369: 
1:10cc70b:     /**
1:10cc70b:      * Create a binary on-disk stream from the given <code>InputStream</code>.
1:10cc70b:      *
1:10cc70b:      * The on-disk stream prepends a length encoding, and validates that the
1:10cc70b:      * actual length of the stream matches the specified length (as according
1:10cc70b:      * to JDBC 3.0).
1:10cc70b:      *
1:10cc70b:      * @param in application's raw binary stream passed into JDBC layer
1:10cc70b:      * @param length length of the stream
1:10cc70b:      * @throws IllegalArgumentException if <code>length</code> is negative.
1:10cc70b:      *      This exception should never be exposed to the user, and seeing it
1:10cc70b:      *      means a programming error exists in the code.
1:10cc70b:      */
1:10cc70b:     public RawToBinaryFormatStream(InputStream in, int length) {
1:10cc70b:         super(in);
1:10cc70b:         if (length < 0) {
1:10cc70b:             throw new IllegalArgumentException(
1:10cc70b:                     "Stream length cannot be negative: " + length);
1:10cc70b:         }
1:10cc70b:         this.length = length;
1:10cc70b:         this.maximumLength = -1;
1:10cc70b:         this.typeName = null;
1:10cc70b: 
1:10cc70b:         setLimit(length);
1:10cc70b:         
1:10cc70b:         if (length <= 31)
1:10cc70b:         {
1:10cc70b:             encodedLength = new byte[1];               
1:10cc70b:             encodedLength[0] = (byte) (0x80 | (length & 0xff));
1:10cc70b:         }
1:10cc70b:         else if (length <= 0xFFFF)
1:10cc70b:         {
1:10cc70b:             encodedLength = new byte[3];
1:10cc70b:             encodedLength[0] = (byte) 0xA0;
1:10cc70b:             encodedLength[1] = (byte)(length >> 8);
1:10cc70b:             encodedLength[2] = (byte)(length);    
1:10cc70b:         }
2:96b9662:         else
1:96b9662:         {
1:10cc70b:             encodedLength = new byte[5];
1:10cc70b:             encodedLength[0] = (byte) 0xC0;
1:10cc70b:             encodedLength[1] = (byte)(length >> 24);
1:10cc70b:             encodedLength[2] = (byte)(length >> 16);
1:10cc70b:             encodedLength[3] = (byte)(length >> 8);
1:10cc70b:             encodedLength[4] = (byte)(length);
1:10cc70b:         }
1:96b9662:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a binary on-disk stream from the given <code>InputStream</code>
1:10cc70b:      * of unknown length.
1:10cc70b:      *
1:10cc70b:      * A limit is placed on the maximum length of the stream.
1:10cc70b:      *
1:10cc70b:      * @param in the application stream
1:10cc70b:      * @param maximumLength maximum length of the column data is inserted into
1:10cc70b:      * @param typeName type name for the column data is inserted into
1:10cc70b:      * @throws IllegalArgumentException if maximum length is negative, or type
1:10cc70b:      *      name is <code>null<code>. This exception should never be exposed
1:10cc70b:      *      to the user, and seeing it means a programming error exists in the
1:10cc70b:      *      code. Although a missing type name is not critical, an exception is
1:10cc70b:      *      is thrown to signal the intended use of this constructor.
1:10cc70b:      */
1:10cc70b:     public RawToBinaryFormatStream(InputStream in,
1:10cc70b:                                    int maximumLength,
1:10cc70b:                                    String typeName) {
1:10cc70b:         super(in);
1:10cc70b:         if (maximumLength < 0) {
1:10cc70b:             throw new IllegalArgumentException("Maximum length for a capped " +
1:10cc70b:                     "stream cannot be negative: " + maximumLength);
1:10cc70b:         }
1:10cc70b:         if (typeName == null) {
1:10cc70b:             throw new IllegalArgumentException("Type name cannot be null");
1:10cc70b:         }
1:10cc70b:         this.length = -1;
1:10cc70b:         this.maximumLength = maximumLength;
1:10cc70b:         this.typeName = typeName;
1:10cc70b:         // Unknown length, four zero bytes.
1:10cc70b:         encodedLength = new byte[4];
1:10cc70b:         setLimit(maximumLength);
1:10cc70b:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read from the wrapped stream prepending the intial bytes if needed.
1:bb1be44:         If stream has been read, and eof reached, in that case any subsequent
1:bb1be44:         read will throw an EOFException
1:eac0369: 	*/
1:eac0369: 	public int read() throws IOException {
1:eac0369: 
1:bb1be44:         if ( eof )
1:bb1be44:             throw new EOFException(MessageService.getTextMessage
1:bb1be44:                         (SQLState.STREAM_EOF));
1:eac0369:         
1:96b9662: 		if (encodedOffset < encodedLength.length) {
1:96b9662:             return encodedLength[encodedOffset++] & 0xff;
1:96b9662:  		}
1:eac0369: 
1:eac0369: 		int ret = super.read();
1:eac0369: 
1:96b9662: 		if (ret == -1)
1:eac0369: 			checkSufficientData();
1:eac0369: 
1:eac0369: 		return ret;
1:96b9662: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		JDBC 3.0 (from tutorial book) requires that an
1:eac0369: 		input stream has the correct number of bytes in
1:eac0369: 		the stream.
1:eac0369: 	*/
1:eac0369: 	private void checkSufficientData() throws IOException
1:96b9662: 	{
1:bb1be44:         // if we reached here, then read call returned -1, and we 
1:bb1be44:         // have already reached the end of stream, so set eof=true
1:bb1be44:         // so that subsequent reads on this stream will return an 
1:bb1be44:         // EOFException
1:bb1be44:         eof = true;
1:eac0369: 		if (!limitInPlace)
1:eac0369:         return;
1:eac0369: 
1:eac0369: 		int remainingBytes = clearLimit();
1:eac0369: 
1:10cc70b:         if (length > -1 && remainingBytes > 0) {
1:10cc70b:             throw new DerbyIOException(
1:10cc70b:                         MessageService.getTextMessage(
1:10cc70b:                                     SQLState.SET_STREAM_INEXACT_LENGTH_DATA),
1:10cc70b:                         SQLState.SET_STREAM_INEXACT_LENGTH_DATA);
1:10cc70b:         }
1:eac0369: 
1:eac0369: 		// if we had a limit try reading one more byte.
1:eac0369: 		// JDBC 3.0 states the stream muct have the correct number of characters in it.
1:eac0369: 		if (remainingBytes == 0) {
1:eac0369: 			int c;
1:eac0369: 			try
1:96b9662: 			{
1:eac0369: 				c = super.read();
1:96b9662: 			}
1:eac0369: 			catch (IOException ioe) {
1:eac0369: 				c = -1;
1:96b9662: 			}
1:10cc70b: 			if (c != -1) {
1:10cc70b:                 if (length > -1) {
1:10cc70b:                     // Stream is not capped, and should have matched the
1:10cc70b:                     // specified length.
1:10cc70b:                     throw new DerbyIOException(
1:10cc70b:                                 MessageService.getTextMessage(
1:10cc70b:                                     SQLState.SET_STREAM_INEXACT_LENGTH_DATA),
1:10cc70b:                                 SQLState.SET_STREAM_INEXACT_LENGTH_DATA);
1:10cc70b:                 } else {
1:10cc70b:                     // Stream is capped, and has exceeded the maximum length.
1:10cc70b:                     throw new DerbyIOException(
1:10cc70b:                             MessageService.getTextMessage(
1:10cc70b:                                     SQLState.LANG_STRING_TRUNCATION,
1:10cc70b:                                     typeName,
1:10cc70b:                                     "XXXX",
1:10cc70b:                                     String.valueOf(maximumLength)),
1:10cc70b:                             SQLState.LANG_STRING_TRUNCATION);
1:10cc70b:                 }
1:10cc70b:             }
8:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Read from the wrapped stream prepending the intial bytes if needed.
1:bb1be44:         If stream has been read, and eof reached, in that case any subsequent
1:bb1be44:         read will throw an EOFException
1:eac0369: 	*/
1:eac0369: 	public int read(byte b[], int off, int len) throws IOException {
1:eac0369:   
1:bb1be44:         if ( eof )
1:bb1be44:             throw new EOFException(MessageService.getTextMessage(SQLState.STREAM_EOF));
1:eac0369: 
1:96b9662: 		int elen = encodedLength.length - encodedOffset;
1:eac0369: 
1:96b9662: 		if (elen != 0) {
1:96b9662: 			if (len < elen)
1:96b9662: 				elen = len;
1:96b9662:             System.arraycopy(encodedLength, encodedOffset,
1:96b9662:                     b, off, elen);
1:eac0369: 
1:96b9662:             encodedOffset += elen;
1:96b9662: 
1:96b9662: 			off += elen;
1:96b9662: 			len -= elen;
1:96b9662:             
1:96b9662:             if (len == 0)
1:96b9662:                 return elen;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		int realRead = super.read(b, off, len);
1:eac0369: 
1:eac0369: 		if (realRead < 0)
1:96b9662: 		{
1:96b9662: 			if (elen != 0)
1:96b9662: 				return elen;
1:eac0369: 
1:eac0369: 			checkSufficientData();
1:eac0369: 			return realRead;
1:eac0369: 		}
1:eac0369: 
1:96b9662: 		return elen + realRead;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:10cc70b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.DerbyIOException;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The length of the stream.
1:      * Unknown if less than 0.
1:      */
1:     private final int length;
1:     /**
1:      * The maximum allowed length for the stream.
1:      * No limit if less than 0.
1:      */
1:     private final int maximumLength;
1:     /**
1:      * The type of the column the stream is inserted into.
1:      * Used for length less streams, <code>null</code> if not in use.
1:      */
1:     private final String typeName;
1:     /**
1:      * Create a binary on-disk stream from the given <code>InputStream</code>.
1:      *
1:      * The on-disk stream prepends a length encoding, and validates that the
1:      * actual length of the stream matches the specified length (as according
1:      * to JDBC 3.0).
1:      *
1:      * @param in application's raw binary stream passed into JDBC layer
1:      * @param length length of the stream
1:      * @throws IllegalArgumentException if <code>length</code> is negative.
1:      *      This exception should never be exposed to the user, and seeing it
1:      *      means a programming error exists in the code.
1:      */
1:     public RawToBinaryFormatStream(InputStream in, int length) {
1:         super(in);
1:         if (length < 0) {
1:             throw new IllegalArgumentException(
1:                     "Stream length cannot be negative: " + length);
1:         }
1:         this.length = length;
1:         this.maximumLength = -1;
1:         this.typeName = null;
1: 
1:         setLimit(length);
1:         
1:         if (length <= 31)
1:         {
1:             encodedLength = new byte[1];               
1:             encodedLength[0] = (byte) (0x80 | (length & 0xff));
1:         }
1:         else if (length <= 0xFFFF)
1:         {
1:             encodedLength = new byte[3];
1:             encodedLength[0] = (byte) 0xA0;
1:             encodedLength[1] = (byte)(length >> 8);
1:             encodedLength[2] = (byte)(length);    
1:         }
1:             encodedLength = new byte[5];
1:             encodedLength[0] = (byte) 0xC0;
1:             encodedLength[1] = (byte)(length >> 24);
1:             encodedLength[2] = (byte)(length >> 16);
1:             encodedLength[3] = (byte)(length >> 8);
1:             encodedLength[4] = (byte)(length);
1:     }
1: 
1:     /**
1:      * Create a binary on-disk stream from the given <code>InputStream</code>
1:      * of unknown length.
1:      *
1:      * A limit is placed on the maximum length of the stream.
1:      *
1:      * @param in the application stream
1:      * @param maximumLength maximum length of the column data is inserted into
1:      * @param typeName type name for the column data is inserted into
1:      * @throws IllegalArgumentException if maximum length is negative, or type
1:      *      name is <code>null<code>. This exception should never be exposed
1:      *      to the user, and seeing it means a programming error exists in the
1:      *      code. Although a missing type name is not critical, an exception is
1:      *      is thrown to signal the intended use of this constructor.
1:      */
1:     public RawToBinaryFormatStream(InputStream in,
1:                                    int maximumLength,
1:                                    String typeName) {
1:         super(in);
1:         if (maximumLength < 0) {
1:             throw new IllegalArgumentException("Maximum length for a capped " +
1:                     "stream cannot be negative: " + maximumLength);
1:         }
1:         if (typeName == null) {
1:             throw new IllegalArgumentException("Type name cannot be null");
1:         }
1:         this.length = -1;
1:         this.maximumLength = maximumLength;
1:         this.typeName = typeName;
1:         // Unknown length, four zero bytes.
1:         encodedLength = new byte[4];
1:         setLimit(maximumLength);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         if (length > -1 && remainingBytes > 0) {
1:             throw new DerbyIOException(
1:                         MessageService.getTextMessage(
1:                                     SQLState.SET_STREAM_INEXACT_LENGTH_DATA),
1:                         SQLState.SET_STREAM_INEXACT_LENGTH_DATA);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 			if (c != -1) {
1:                 if (length > -1) {
1:                     // Stream is not capped, and should have matched the
1:                     // specified length.
1:                     throw new DerbyIOException(
1:                                 MessageService.getTextMessage(
1:                                     SQLState.SET_STREAM_INEXACT_LENGTH_DATA),
1:                                 SQLState.SET_STREAM_INEXACT_LENGTH_DATA);
1:                 } else {
1:                     // Stream is capped, and has exceeded the maximum length.
1:                     throw new DerbyIOException(
1:                             MessageService.getTextMessage(
1:                                     SQLState.LANG_STRING_TRUNCATION,
1:                                     typeName,
1:                                     "XXXX",
1:                                     String.valueOf(maximumLength)),
1:                             SQLState.LANG_STRING_TRUNCATION);
1:                 }
1:             }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:96b9662
/////////////////////////////////////////////////////////////////////////
1: 	length of the value.
1:     <P>
1:     If the length of the stream is known then it is encoded
1:     as the first bytes in the stream in the defined format.
1:     <BR>
1:     If the length is unknown then the first four bytes will
1:     be zero, indicating unknown length.
1:     <BR>
1:     
1:     @see SQLBinary
1: public final class RawToBinaryFormatStream extends LimitInputStream {
1:     /**
1:      * Number of bytes of length encoding.
1:      * 
1:      */
1: 	private int encodedOffset;
1:     
1:     /**
1:      * Encoding of the length in bytes which will be
1:      * seen as the first encodedLength.length bytes of
1:      * this stream.
1:      */
1:     private byte[] encodedLength;
/////////////////////////////////////////////////////////////////////////
1: 
1:             
0:             if (length <= 31)
1:             {
0:                 encodedLength = new byte[1];               
0:                 encodedLength[0] = (byte) (0x80 | (length & 0xff));
1:             }
0:             else if (length <= 0xFFFF)
1:             {
0:                 encodedLength = new byte[3];
0:                 encodedLength[0] = (byte) 0xA0;
0:                 encodedLength[1] = (byte)(length >> 8);
0:                 encodedLength[2] = (byte)(length);    
1:             }
1:             else
1:             {
0:                 encodedLength = new byte[5];
0:                 encodedLength[0] = (byte) 0xC0;
0:                 encodedLength[1] = (byte)(length >> 24);
0:                 encodedLength[2] = (byte)(length >> 16);
0:                 encodedLength[3] = (byte)(length >> 8);
0:                 encodedLength[4] = (byte)(length);
1:             }
1:         else
1:         {
0:             // unknown length, four zero bytes
0:             encodedLength = new byte[4];
1:         }
/////////////////////////////////////////////////////////////////////////
1: 		if (encodedOffset < encodedLength.length) {
1:             return encodedLength[encodedOffset++] & 0xff;
1:  		}
1: 		if (ret == -1)
/////////////////////////////////////////////////////////////////////////
0: 			if (c != -1)
/////////////////////////////////////////////////////////////////////////
1: 		int elen = encodedLength.length - encodedOffset;
1: 		if (elen != 0) {
1: 			if (len < elen)
1: 				elen = len;
1:             System.arraycopy(encodedLength, encodedOffset,
1:                     b, off, elen);
1:             encodedOffset += elen;
1: 
1: 			off += elen;
1: 			len -= elen;
1:             
1:             if (len == 0)
1:                 return elen;
1: 			if (elen != 0)
1: 				return elen;
1: 		return elen + realRead;
commit:c56eceb
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.RawToBinaryFormatStream
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.iapi.types;
/////////////////////////////////////////////////////////////////////////
1: 	to the on-disk format of the binary types by prepending the
0: public class RawToBinaryFormatStream extends LimitInputStream {
/////////////////////////////////////////////////////////////////////////
0: 	public RawToBinaryFormatStream(InputStream in, int length) {
commit:345de35
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derby.impl.jdbc.RawToBinaryFormatStream
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.InputStream;
0: import java.io.FilterInputStream;
1: import java.io.IOException;
1: 
1: import org.apache.derby.iapi.services.io.LimitInputStream;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1: 	Stream that takes a raw input stream and converts it
0: 	to the format of the binary types by prepending the
0: 	length of the value. In this case 0 is always written.
1: */
0: class RawToBinaryFormatStream extends LimitInputStream {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
0: 	private int dummyBytes = 4;
1: 
1: 	/**
0: 		@param	in Application's raw binary stream passed into JDBC layer
0: 		@param	length - length of the stream, if known, otherwise -1.
1: 	*/
0: 	RawToBinaryFormatStream(InputStream in, int length) {
0: 		super(in);
0: 		if (length >= 0) {
0: 			setLimit(length);
1: 		}
1: 	}
1: 
1: 	/**
1: 		Read from the wrapped stream prepending the intial bytes if needed.
1: 	*/
1: 	public int read() throws IOException {
1: 
0: 		if (dummyBytes != 0) {
0: 			dummyBytes--;
0: 			return 0;
1: 		}
1: 
1: 		int ret = super.read();
1: 
0: 		if (ret < 0)
1: 			checkSufficientData();
1: 
1: 		return ret;
1: 	}
1: 
1: 	/**
1: 		JDBC 3.0 (from tutorial book) requires that an
1: 		input stream has the correct number of bytes in
1: 		the stream.
1: 	*/
1: 	private void checkSufficientData() throws IOException
0: 	{
1: 		if (!limitInPlace)
1: 			return;
1: 
1: 		int remainingBytes = clearLimit();
1: 
0: 		if (remainingBytes > 0)
0: 			throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
1: 
1: 		// if we had a limit try reading one more byte.
1: 		// JDBC 3.0 states the stream muct have the correct number of characters in it.
1: 		if (remainingBytes == 0) {
1: 			int c;
1: 			try
0: 			{
1: 				c = super.read();
1: 			}
1: 			catch (IOException ioe) {
1: 				c = -1;
1: 			}
0: 			if (c >= 0)
0: 				throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
1: 		}
1: 	}
1: 
1: 	/**
1: 		Read from the wrapped stream prepending the intial bytes if needed.
1: 	*/
1: 	public int read(byte b[], int off, int len) throws IOException {
1: 
0: 		int dlen = dummyBytes;
1: 
0: 		if (dlen != 0) {
0: 			if (len < dlen)
0: 				dlen = len;
0: 			for (int i = 0; i < dlen; i++) {
0: 				b[off+i] = 0;
1: 			}
0: 			dummyBytes -= dlen;
1: 
0: 			off += dlen;
0: 			len -= dlen;
1: 		}
1: 
1: 		int realRead = super.read(b, off, len);
1: 
1: 		if (realRead < 0)
0: 		{
0: 			if (dlen != 0)
0: 				return dlen;
1: 
1: 			checkSufficientData();
1: 
1: 			return realRead;
1: 		}
1: 
0: 		return dlen + realRead;
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bb1be44
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
/////////////////////////////////////////////////////////////////////////
1:     Note: This stream cannot be re-used. Once end of file is
1:     reached, the next read call will throw an EOFException
0:     
1:     // flag to indicate the stream has already been read
1:     // and eof reached
1:     private boolean eof = false;
/////////////////////////////////////////////////////////////////////////
1:         If stream has been read, and eof reached, in that case any subsequent
1:         read will throw an EOFException
1:         if ( eof )
1:             throw new EOFException(MessageService.getTextMessage
1:                         (SQLState.STREAM_EOF));
0:         
/////////////////////////////////////////////////////////////////////////
1:         // if we reached here, then read call returned -1, and we 
1:         // have already reached the end of stream, so set eof=true
1:         // so that subsequent reads on this stream will return an 
1:         // EOFException
1:         eof = true;
0:         return;
/////////////////////////////////////////////////////////////////////////
1:         If stream has been read, and eof reached, in that case any subsequent
1:         read will throw an EOFException
0:   
1:         if ( eof )
1:             throw new EOFException(MessageService.getTextMessage(SQLState.STREAM_EOF));
/////////////////////////////////////////////////////////////////////////
commit:ff049ad
/////////////////////////////////////////////////////////////////////////
0: 			throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INEXACT_LENGTH_DATA));
/////////////////////////////////////////////////////////////////////////
0: 				throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INEXACT_LENGTH_DATA));
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc;
0: 
0: import java.io.InputStream;
0: import java.io.FilterInputStream;
0: import java.io.IOException;
0: 
0: import org.apache.derby.iapi.services.io.LimitInputStream;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0: 	Stream that takes a raw input stream and converts it
0: 	to the format of the binary types by prepending the
0: 	length of the value. In this case 0 is always written.
0: */
0: class RawToBinaryFormatStream extends LimitInputStream {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 	private int dummyBytes = 4;
0: 
0: 	/**
0: 		@param	in Application's raw binary stream passed into JDBC layer
0: 		@param	length - length of the stream, if known, otherwise -1.
0: 	*/
0: 	RawToBinaryFormatStream(InputStream in, int length) {
0: 		super(in);
0: 		if (length >= 0) {
0: 			setLimit(length);
0: 		}
0: 	}
0: 
0: 	/**
0: 		Read from the wrapped stream prepending the intial bytes if needed.
0: 	*/
0: 	public int read() throws IOException {
0: 
0: 		if (dummyBytes != 0) {
0: 			dummyBytes--;
0: 			return 0;
0: 		}
0: 
0: 		int ret = super.read();
0: 
0: 		if (ret < 0)
0: 			checkSufficientData();
0: 
0: 		return ret;
0: 	}
0: 
0: 	/**
0: 		JDBC 3.0 (from tutorial book) requires that an
0: 		input stream has the correct number of bytes in
0: 		the stream.
0: 	*/
0: 	private void checkSufficientData() throws IOException
0: 	{
0: 		if (!limitInPlace)
0: 			return;
0: 
0: 		int remainingBytes = clearLimit();
0: 
0: 		if (remainingBytes > 0)
0: 			throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
0: 
0: 		// if we had a limit try reading one more byte.
0: 		// JDBC 3.0 states the stream muct have the correct number of characters in it.
0: 		if (remainingBytes == 0) {
0: 			int c;
0: 			try
0: 			{
0: 				c = super.read();
0: 			}
0: 			catch (IOException ioe) {
0: 				c = -1;
0: 			}
0: 			if (c >= 0)
0: 				throw new IOException(MessageService.getTextMessage(SQLState.SET_STREAM_INSUFFICIENT_DATA));
0: 		}
0: 	}
0: 
0: 	/**
0: 		Read from the wrapped stream prepending the intial bytes if needed.
0: 	*/
0: 	public int read(byte b[], int off, int len) throws IOException {
0: 
0: 		int dlen = dummyBytes;
0: 
0: 		if (dlen != 0) {
0: 			if (len < dlen)
0: 				dlen = len;
0: 			for (int i = 0; i < dlen; i++) {
0: 				b[off+i] = 0;
0: 			}
0: 			dummyBytes -= dlen;
0: 
0: 			off += dlen;
0: 			len -= dlen;
0: 		}
0: 
0: 		int realRead = super.read(b, off, len);
0: 
0: 		if (realRead < 0)
0: 		{
0: 			if (dlen != 0)
0: 				return dlen;
0: 
0: 			checkSufficientData();
0: 
0: 			return realRead;
0: 		}
0: 
0: 		return dlen + realRead;
0: 	}
0: }
============================================================================