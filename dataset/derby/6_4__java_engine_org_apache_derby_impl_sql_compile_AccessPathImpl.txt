1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.AccessPathImpl
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.AccessPath;
1:eac0369: import org.apache.derby.iapi.sql.compile.CostEstimate;
1:eac0369: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizer;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:3bb140c: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: 
1:eac0369: class AccessPathImpl implements AccessPath
1:eac0369: {
1:eac0369: 	ConglomerateDescriptor	cd = null;
1:eac0369: 	private CostEstimate	costEstimate = null;
1:eac0369: 	boolean					coveringIndexScan = false;
1:eac0369: 	boolean					nonMatchingIndexScan = false;
1:eac0369: 	JoinStrategy			joinStrategy = null;
1:eac0369: 	int						lockMode;
1:eac0369: 	Optimizer				optimizer;
1:3bb140c:     private String          accessPathName =  "";
1:eac0369: 
1:eac0369: 	AccessPathImpl(Optimizer optimizer)
1:eac0369: 	{
1:eac0369: 		this.optimizer = optimizer;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#setConglomerateDescriptor */
1:eac0369: 	public void setConglomerateDescriptor(ConglomerateDescriptor cd)
1:eac0369: 	{
1:eac0369: 		this.cd = cd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#getConglomerateDescriptor */
1:eac0369: 	public ConglomerateDescriptor getConglomerateDescriptor()
1:eac0369: 	{
1:eac0369: 		return cd;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#setCostEstimate */
1:eac0369: 	public void setCostEstimate(CostEstimate costEstimate)
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** CostEstimates are mutable, so keep the best cost estimate in
1:eac0369: 		** a copy.
1:eac0369: 		*/
1:eac0369: 		if (this.costEstimate == null)
1:eac0369: 		{
1:eac0369: 			if (costEstimate != null)
1:eac0369: 			{
1:eac0369: 				this.costEstimate = costEstimate.cloneMe();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			if (costEstimate == null)
1:eac0369: 				this.costEstimate = null;
1:eac0369: 			else
1:eac0369: 				this.costEstimate.setCost(costEstimate);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#getCostEstimate */
1:eac0369: 	public CostEstimate getCostEstimate()
1:eac0369: 	{
1:eac0369: 		return costEstimate;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#setCoveringIndexScan */
1:eac0369: 	public void setCoveringIndexScan(boolean coveringIndexScan)
1:eac0369: 	{
1:eac0369: 		this.coveringIndexScan = coveringIndexScan;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#getCoveringIndexScan */
1:eac0369: 	public boolean getCoveringIndexScan()
1:eac0369: 	{
1:eac0369: 		return coveringIndexScan;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#setNonMatchingIndexScan */
1:eac0369: 	public void setNonMatchingIndexScan(boolean nonMatchingIndexScan)
1:eac0369: 	{
1:eac0369: 		this.nonMatchingIndexScan = nonMatchingIndexScan;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#getNonMatchingIndexScan */
1:eac0369: 	public boolean getNonMatchingIndexScan()
1:eac0369: 	{
1:eac0369: 		return nonMatchingIndexScan;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#setJoinStrategy */
1:eac0369: 	public void setJoinStrategy(JoinStrategy joinStrategy)
1:eac0369: 	{
1:eac0369: 		this.joinStrategy = joinStrategy;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#getJoinStrategy */
1:eac0369: 	public JoinStrategy getJoinStrategy()
1:eac0369: 	{
1:eac0369: 		return joinStrategy;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#setLockMode */
1:eac0369: 	public void setLockMode(int lockMode)
1:eac0369: 	{
1:eac0369: 		this.lockMode = lockMode;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#getLockMode */
1:eac0369: 	public int getLockMode()
1:eac0369: 	{
1:eac0369: 		return lockMode;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#copy */
1:eac0369: 	public void copy(AccessPath copyFrom)
1:eac0369: 	{
1:eac0369: 		setConglomerateDescriptor(copyFrom.getConglomerateDescriptor());
1:eac0369: 		setCostEstimate(copyFrom.getCostEstimate());
1:eac0369: 		setCoveringIndexScan(copyFrom.getCoveringIndexScan());
1:eac0369: 		setNonMatchingIndexScan(copyFrom.getNonMatchingIndexScan());
1:eac0369: 		setJoinStrategy(copyFrom.getJoinStrategy());
1:eac0369: 		setLockMode(copyFrom.getLockMode());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see AccessPath#getOptimizer */
1:eac0369: 	public Optimizer getOptimizer()
1:eac0369: 	{
1:eac0369: 		return optimizer;
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "cd == " + cd +
1:eac0369: 				", costEstimate == " + costEstimate +
1:eac0369: 				", coveringIndexScan == " + coveringIndexScan +
1:eac0369: 				", nonMatchingIndexScan == " + nonMatchingIndexScan +
1:eac0369: 				", joinStrategy == " + joinStrategy +
1:eac0369: 				", lockMode == " + lockMode +
1:eac0369: 				", optimizer level == " + optimizer.getLevel();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/** @see AccessPath#initializeAccessPathName */
1:eac0369: 	public void initializeAccessPathName(DataDictionary dd, TableDescriptor td)
1:eac0369: 	       throws StandardException
1:eac0369: 	{
1:eac0369: 		if (cd == null)
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		if (cd.isConstraint())
1:eac0369: 		{
1:eac0369: 			ConstraintDescriptor constraintDesc = 
1:eac0369: 				dd.getConstraintDescriptor(td, cd.getUUID());
1:eac0369: 			if (constraintDesc == null)
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(
1:eac0369: 										SQLState.LANG_OBJECT_NOT_FOUND,
1:eac0369: 										"CONSTRAINT on TABLE",
1:eac0369: 										td.getName());
1:eac0369: 			}
1:eac0369: 			accessPathName = constraintDesc.getConstraintName();
1:eac0369: 		} 
1:eac0369: 		else if (cd.isIndex())
1:eac0369: 		{
1:eac0369: 			accessPathName = cd.getConglomerateName();
1:eac0369: 		} 
1:eac0369: 		else 
1:eac0369: 		{
1:eac0369: 			accessPathName = "";
1:eac0369: 		} 
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     private String          accessPathName =  "";
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.AccessPathImpl
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.compile.AccessPath;
1: import org.apache.derby.iapi.sql.compile.CostEstimate;
1: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1: import org.apache.derby.iapi.sql.compile.Optimizer;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
1: class AccessPathImpl implements AccessPath
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	ConglomerateDescriptor	cd = null;
1: 	private CostEstimate	costEstimate = null;
1: 	boolean					coveringIndexScan = false;
1: 	boolean					nonMatchingIndexScan = false;
1: 	JoinStrategy			joinStrategy = null;
1: 	int						lockMode;
1: 	Optimizer				optimizer;
0: 	private String			accessPathName = "";
1: 
1: 	AccessPathImpl(Optimizer optimizer)
1: 	{
1: 		this.optimizer = optimizer;
1: 	}
1: 
1: 	/** @see AccessPath#setConglomerateDescriptor */
1: 	public void setConglomerateDescriptor(ConglomerateDescriptor cd)
1: 	{
1: 		this.cd = cd;
1: 	}
1: 
1: 	/** @see AccessPath#getConglomerateDescriptor */
1: 	public ConglomerateDescriptor getConglomerateDescriptor()
1: 	{
1: 		return cd;
1: 	}
1: 
1: 	/** @see AccessPath#setCostEstimate */
1: 	public void setCostEstimate(CostEstimate costEstimate)
1: 	{
1: 		/*
1: 		** CostEstimates are mutable, so keep the best cost estimate in
1: 		** a copy.
1: 		*/
1: 		if (this.costEstimate == null)
1: 		{
1: 			if (costEstimate != null)
1: 			{
1: 				this.costEstimate = costEstimate.cloneMe();
1: 			}
1: 		}
1: 		else
1: 		{
1: 			if (costEstimate == null)
1: 				this.costEstimate = null;
1: 			else
1: 				this.costEstimate.setCost(costEstimate);
1: 		}
1: 	}
1: 
1: 	/** @see AccessPath#getCostEstimate */
1: 	public CostEstimate getCostEstimate()
1: 	{
1: 		return costEstimate;
1: 	}
1: 
1: 	/** @see AccessPath#setCoveringIndexScan */
1: 	public void setCoveringIndexScan(boolean coveringIndexScan)
1: 	{
1: 		this.coveringIndexScan = coveringIndexScan;
1: 	}
1: 
1: 	/** @see AccessPath#getCoveringIndexScan */
1: 	public boolean getCoveringIndexScan()
1: 	{
1: 		return coveringIndexScan;
1: 	}
1: 
1: 	/** @see AccessPath#setNonMatchingIndexScan */
1: 	public void setNonMatchingIndexScan(boolean nonMatchingIndexScan)
1: 	{
1: 		this.nonMatchingIndexScan = nonMatchingIndexScan;
1: 	}
1: 
1: 	/** @see AccessPath#getNonMatchingIndexScan */
1: 	public boolean getNonMatchingIndexScan()
1: 	{
1: 		return nonMatchingIndexScan;
1: 	}
1: 
1: 	/** @see AccessPath#setJoinStrategy */
1: 	public void setJoinStrategy(JoinStrategy joinStrategy)
1: 	{
1: 		this.joinStrategy = joinStrategy;
1: 	}
1: 
1: 	/** @see AccessPath#getJoinStrategy */
1: 	public JoinStrategy getJoinStrategy()
1: 	{
1: 		return joinStrategy;
1: 	}
1: 
1: 	/** @see AccessPath#setLockMode */
1: 	public void setLockMode(int lockMode)
1: 	{
1: 		this.lockMode = lockMode;
1: 	}
1: 
1: 	/** @see AccessPath#getLockMode */
1: 	public int getLockMode()
1: 	{
1: 		return lockMode;
1: 	}
1: 
1: 	/** @see AccessPath#copy */
1: 	public void copy(AccessPath copyFrom)
1: 	{
1: 		setConglomerateDescriptor(copyFrom.getConglomerateDescriptor());
1: 		setCostEstimate(copyFrom.getCostEstimate());
1: 		setCoveringIndexScan(copyFrom.getCoveringIndexScan());
1: 		setNonMatchingIndexScan(copyFrom.getNonMatchingIndexScan());
1: 		setJoinStrategy(copyFrom.getJoinStrategy());
1: 		setLockMode(copyFrom.getLockMode());
1: 	}
1: 
1: 	/** @see AccessPath#getOptimizer */
1: 	public Optimizer getOptimizer()
1: 	{
1: 		return optimizer;
1: 	}
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "cd == " + cd +
1: 				", costEstimate == " + costEstimate +
1: 				", coveringIndexScan == " + coveringIndexScan +
1: 				", nonMatchingIndexScan == " + nonMatchingIndexScan +
1: 				", joinStrategy == " + joinStrategy +
1: 				", lockMode == " + lockMode +
1: 				", optimizer level == " + optimizer.getLevel();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 	
1: 	/** @see AccessPath#initializeAccessPathName */
1: 	public void initializeAccessPathName(DataDictionary dd, TableDescriptor td)
1: 	       throws StandardException
1: 	{
1: 		if (cd == null)
1: 			return;
1: 
1: 		if (cd.isConstraint())
1: 		{
1: 			ConstraintDescriptor constraintDesc = 
1: 				dd.getConstraintDescriptor(td, cd.getUUID());
1: 			if (constraintDesc == null)
1: 			{
1: 				throw StandardException.newException(
1: 										SQLState.LANG_OBJECT_NOT_FOUND,
1: 										"CONSTRAINT on TABLE",
1: 										td.getName());
1: 			}
1: 			accessPathName = constraintDesc.getConstraintName();
1: 		} 
1: 		else if (cd.isIndex())
1: 		{
1: 			accessPathName = cd.getConglomerateName();
1: 		} 
1: 		else 
1: 		{
1: 			accessPathName = "";
1: 		} 
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.compile.AccessPath;
0: import org.apache.derby.iapi.sql.compile.CostEstimate;
0: import org.apache.derby.iapi.sql.compile.JoinStrategy;
0: import org.apache.derby.iapi.sql.compile.Optimizer;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: class AccessPathImpl implements AccessPath
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	ConglomerateDescriptor	cd = null;
0: 	private CostEstimate	costEstimate = null;
0: 	boolean					coveringIndexScan = false;
0: 	boolean					nonMatchingIndexScan = false;
0: 	JoinStrategy			joinStrategy = null;
0: 	int						lockMode;
0: 	Optimizer				optimizer;
0: 	private String			accessPathName = "";
0: 
0: 	AccessPathImpl(Optimizer optimizer)
0: 	{
0: 		this.optimizer = optimizer;
0: 	}
0: 
0: 	/** @see AccessPath#setConglomerateDescriptor */
0: 	public void setConglomerateDescriptor(ConglomerateDescriptor cd)
0: 	{
0: 		this.cd = cd;
0: 	}
0: 
0: 	/** @see AccessPath#getConglomerateDescriptor */
0: 	public ConglomerateDescriptor getConglomerateDescriptor()
0: 	{
0: 		return cd;
0: 	}
0: 
0: 	/** @see AccessPath#setCostEstimate */
0: 	public void setCostEstimate(CostEstimate costEstimate)
0: 	{
0: 		/*
0: 		** CostEstimates are mutable, so keep the best cost estimate in
0: 		** a copy.
0: 		*/
0: 		if (this.costEstimate == null)
0: 		{
0: 			if (costEstimate != null)
0: 			{
0: 				this.costEstimate = costEstimate.cloneMe();
0: 			}
0: 		}
0: 		else
0: 		{
0: 			if (costEstimate == null)
0: 				this.costEstimate = null;
0: 			else
0: 				this.costEstimate.setCost(costEstimate);
0: 		}
0: 	}
0: 
0: 	/** @see AccessPath#getCostEstimate */
0: 	public CostEstimate getCostEstimate()
0: 	{
0: 		return costEstimate;
0: 	}
0: 
0: 	/** @see AccessPath#setCoveringIndexScan */
0: 	public void setCoveringIndexScan(boolean coveringIndexScan)
0: 	{
0: 		this.coveringIndexScan = coveringIndexScan;
0: 	}
0: 
0: 	/** @see AccessPath#getCoveringIndexScan */
0: 	public boolean getCoveringIndexScan()
0: 	{
0: 		return coveringIndexScan;
0: 	}
0: 
0: 	/** @see AccessPath#setNonMatchingIndexScan */
0: 	public void setNonMatchingIndexScan(boolean nonMatchingIndexScan)
0: 	{
0: 		this.nonMatchingIndexScan = nonMatchingIndexScan;
0: 	}
0: 
0: 	/** @see AccessPath#getNonMatchingIndexScan */
0: 	public boolean getNonMatchingIndexScan()
0: 	{
0: 		return nonMatchingIndexScan;
0: 	}
0: 
0: 	/** @see AccessPath#setJoinStrategy */
0: 	public void setJoinStrategy(JoinStrategy joinStrategy)
0: 	{
0: 		this.joinStrategy = joinStrategy;
0: 	}
0: 
0: 	/** @see AccessPath#getJoinStrategy */
0: 	public JoinStrategy getJoinStrategy()
0: 	{
0: 		return joinStrategy;
0: 	}
0: 
0: 	/** @see AccessPath#setLockMode */
0: 	public void setLockMode(int lockMode)
0: 	{
0: 		this.lockMode = lockMode;
0: 	}
0: 
0: 	/** @see AccessPath#getLockMode */
0: 	public int getLockMode()
0: 	{
0: 		return lockMode;
0: 	}
0: 
0: 	/** @see AccessPath#copy */
0: 	public void copy(AccessPath copyFrom)
0: 	{
0: 		setConglomerateDescriptor(copyFrom.getConglomerateDescriptor());
0: 		setCostEstimate(copyFrom.getCostEstimate());
0: 		setCoveringIndexScan(copyFrom.getCoveringIndexScan());
0: 		setNonMatchingIndexScan(copyFrom.getNonMatchingIndexScan());
0: 		setJoinStrategy(copyFrom.getJoinStrategy());
0: 		setLockMode(copyFrom.getLockMode());
0: 	}
0: 
0: 	/** @see AccessPath#getOptimizer */
0: 	public Optimizer getOptimizer()
0: 	{
0: 		return optimizer;
0: 	}
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "cd == " + cd +
0: 				", costEstimate == " + costEstimate +
0: 				", coveringIndexScan == " + coveringIndexScan +
0: 				", nonMatchingIndexScan == " + nonMatchingIndexScan +
0: 				", joinStrategy == " + joinStrategy +
0: 				", lockMode == " + lockMode +
0: 				", optimizer level == " + optimizer.getLevel();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 	
0: 	/** @see AccessPath#initializeAccessPathName */
0: 	public void initializeAccessPathName(DataDictionary dd, TableDescriptor td)
0: 	       throws StandardException
0: 	{
0: 		if (cd == null)
0: 			return;
0: 
0: 		if (cd.isConstraint())
0: 		{
0: 			ConstraintDescriptor constraintDesc = 
0: 				dd.getConstraintDescriptor(td, cd.getUUID());
0: 			if (constraintDesc == null)
0: 			{
0: 				throw StandardException.newException(
0: 										SQLState.LANG_OBJECT_NOT_FOUND,
0: 										"CONSTRAINT on TABLE",
0: 										td.getName());
0: 			}
0: 			accessPathName = constraintDesc.getConstraintName();
0: 		} 
0: 		else if (cd.isIndex())
0: 		{
0: 			accessPathName = cd.getConglomerateName();
0: 		} 
0: 		else 
0: 		{
0: 			accessPathName = "";
0: 		} 
0: 	}
0: }
============================================================================