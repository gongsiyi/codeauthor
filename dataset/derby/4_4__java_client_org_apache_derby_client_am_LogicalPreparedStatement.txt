1:1beab6c: /*
1:1beab6c: 
1:1beab6c:    Derby - Class org.apache.derby.client.am.LogicalPreparedStatement
1:1beab6c: 
1:1beab6c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1beab6c:    contributor license agreements.  See the NOTICE file distributed with
1:1beab6c:    this work for additional information regarding copyright ownership.
1:1beab6c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1beab6c:    (the "License"); you may not use this file except in compliance with
1:1beab6c:    the License.  You may obtain a copy of the License at
1:1beab6c: 
1:1beab6c:       http://www.apache.org/licenses/LICENSE-2.0
1:1beab6c: 
1:1beab6c:    Unless required by applicable law or agreed to in writing, software
1:1beab6c:    distributed under the License is distributed on an "AS IS" BASIS,
1:1beab6c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1beab6c:    See the License for the specific language governing permissions and
1:1beab6c:    limitations under the License.
1:1beab6c: 
1:1beab6c:  */
1:1beab6c: package org.apache.derby.client.am;
1:1beab6c: 
1:1beab6c: import java.io.InputStream;
1:1beab6c: import java.io.Reader;
1:1beab6c: import java.math.BigDecimal;
1:1beab6c: import java.net.URL;
1:1beab6c: import java.util.Calendar;
1:1beab6c: 
1:1beab6c: import java.sql.Array;
1:69e3d06: import java.sql.Blob;
1:69e3d06: import java.sql.Clob;
1:69e3d06: import java.sql.Connection;
1:1beab6c: import java.sql.Date;
1:9a0cdf1: import java.sql.NClob;
1:69e3d06: import java.sql.ParameterMetaData;
1:69e3d06: import java.sql.PreparedStatement;
1:1beab6c: import java.sql.Ref;
1:69e3d06: import java.sql.ResultSet;
1:69e3d06: import java.sql.ResultSetMetaData;
1:9a0cdf1: import java.sql.RowId;
1:1beab6c: import java.sql.SQLException;
1:1beab6c: import java.sql.SQLWarning;
1:9a0cdf1: import java.sql.SQLXML;
1:1beab6c: import java.sql.Time;
1:1beab6c: import java.sql.Timestamp;
1:1beab6c: 
1:1beab6c: import org.apache.derby.client.am.stmtcache.StatementKey;
1:1beab6c: 
1:1beab6c: /**
1:1beab6c:  * A wrapper class for a physical Derby prepared statement.
1:1beab6c:  * <p>
1:1beab6c:  * The idea behind the logical prepared statement is to allow reuse of the
1:1beab6c:  * physical prepared statement. In general the logical entity will forward all
1:1beab6c:  * calls to the physical entity. A few methods have special implementations, the
1:1beab6c:  * most important one being {@link #close}. Each method will check that the
1:1beab6c:  * logical statement is still open before the call is forwarded to the
1:1beab6c:  * underlying physical statement.
1:1beab6c:  *
1:1beab6c:  * @see LogicalStatementEntity
1:1beab6c:  */
1:1beab6c: public class LogicalPreparedStatement
1:1beab6c:     extends LogicalStatementEntity
1:69e3d06:     implements PreparedStatement {
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Creates a new logical prepared statement.
1:1beab6c:      *
1:1beab6c:      * @param physicalPs underlying physical statement
1:1beab6c:      * @param stmtKey key for the physical statement
1:d6cf884:      * @param cacheInteractor creating statement cache interactor
1:1beab6c:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:1beab6c:      */
1:69e3d06:     public LogicalPreparedStatement(PreparedStatement physicalPs,
1:1beab6c:                                     StatementKey stmtKey,
1:d6cf884:                                     StatementCacheInteractor cacheInteractor) {
1:d6cf884:         super(physicalPs, stmtKey, cacheInteractor);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int executeUpdate() throws SQLException {
1:1beab6c:         return getPhysPs().executeUpdate();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void addBatch() throws SQLException {
1:1beab6c:          getPhysPs().addBatch();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void clearParameters() throws SQLException {
1:1beab6c:          getPhysPs().clearParameters();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean execute() throws SQLException {
1:1beab6c:         return getPhysPs().execute();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setByte(int parameterIndex, byte x) throws SQLException {
1:1beab6c:          getPhysPs().setByte(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setDouble(int parameterIndex, double x) throws SQLException {
1:1beab6c:          getPhysPs().setDouble(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setFloat(int parameterIndex, float x) throws SQLException {
1:1beab6c:          getPhysPs().setFloat(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setInt(int parameterIndex, int x) throws SQLException {
1:1beab6c:          getPhysPs().setInt(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setNull(int parameterIndex, int sqlType) throws SQLException {
1:1beab6c:          getPhysPs().setNull(parameterIndex, sqlType);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setLong(int parameterIndex, long x) throws SQLException {
1:1beab6c:          getPhysPs().setLong(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setShort(int parameterIndex, short x) throws SQLException {
1:1beab6c:          getPhysPs().setShort(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBoolean(int parameterIndex, boolean x) throws SQLException {
1:1beab6c:          getPhysPs().setBoolean(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBytes(int parameterIndex, byte[] x) throws SQLException {
1:1beab6c:          getPhysPs().setBytes(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setAsciiStream(int parameterIndex, InputStream x, int length)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setAsciiStream(parameterIndex, x, length);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBinaryStream(int parameterIndex, InputStream x, int length)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setBinaryStream(parameterIndex, x, length);
1:1beab6c:     }
1:1beab6c: 
1:c784df5:     @Deprecated
1:1beab6c:     public void setUnicodeStream(int parameterIndex, InputStream x, int length)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setUnicodeStream(parameterIndex, x, length);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setCharacterStream(int parameterIndex, Reader reader, int length)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setCharacterStream(parameterIndex, reader, length);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setObject(int parameterIndex, Object x) throws SQLException {
1:1beab6c:          getPhysPs().setObject(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setObject(int parameterIndex, Object x, int targetSqlType)
1:1beab6c:                 throws SQLException {
1:1beab6c:          getPhysPs().setObject(parameterIndex, x, targetSqlType);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setObject(int parameterIndex, Object x,
1:1beab6c:                           int targetSqlType, int scale)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setObject(parameterIndex, x, targetSqlType, scale);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setNull(int paramIndex, int sqlType, String typeName)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setNull(paramIndex, sqlType, typeName);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setString(int parameterIndex, String x) throws SQLException {
1:1beab6c:          getPhysPs().setString(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setBigDecimal(int parameterIndex, BigDecimal x)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setBigDecimal(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setURL(int parameterIndex, URL x) throws SQLException {
1:1beab6c:          getPhysPs().setURL(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setArray(int i, Array x) throws SQLException {
1:1beab6c:          getPhysPs().setArray(i, x);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public void setBlob(int i, Blob x) throws SQLException {
1:1beab6c:          getPhysPs().setBlob(i, x);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public void setClob(int i, Clob x) throws SQLException {
1:1beab6c:          getPhysPs().setClob(i, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setDate(int parameterIndex, Date x) throws SQLException {
1:1beab6c:          getPhysPs().setDate(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public ParameterMetaData getParameterMetaData()
1:b13b17c:             throws SQLException {
1:1beab6c:         return getPhysPs().getParameterMetaData();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setRef(int i, Ref x) throws SQLException {
1:1beab6c:          getPhysPs().setRef(i, x);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public ResultSet executeQuery() throws SQLException {
1:1beab6c:         return getPhysPs().executeQuery();
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public ResultSetMetaData getMetaData() throws SQLException {
1:1beab6c:         return getPhysPs().getMetaData();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTime(int parameterIndex, Time x) throws SQLException {
1:1beab6c:          getPhysPs().setTime(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTimestamp(int parameterIndex, Timestamp x)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setTimestamp(parameterIndex, x);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setDate(int parameterIndex, Date x, Calendar cal)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setDate(parameterIndex, x, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTime(int parameterIndex, Time x, Calendar cal)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setTime(parameterIndex, x, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
1:1beab6c:             throws SQLException {
1:1beab6c:          getPhysPs().setTimestamp(parameterIndex, x, cal);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getFetchDirection() throws SQLException {
1:1beab6c:         return getPhysPs().getFetchDirection();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getFetchSize() throws SQLException {
1:1beab6c:         return getPhysPs().getFetchSize();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getMaxFieldSize() throws SQLException {
1:1beab6c:         return getPhysPs().getMaxFieldSize();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getMaxRows() throws SQLException {
1:1beab6c:         return getPhysPs().getMaxRows();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getQueryTimeout() throws SQLException {
1:1beab6c:         return getPhysPs().getQueryTimeout();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getResultSetConcurrency() throws SQLException {
1:1beab6c:         return getPhysPs().getResultSetConcurrency();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getResultSetHoldability() throws SQLException {
1:1beab6c:         return getPhysPs().getResultSetHoldability();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getResultSetType() throws SQLException {
1:1beab6c:         return getPhysPs().getResultSetType();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int getUpdateCount() throws SQLException {
1:1beab6c:         return getPhysPs().getUpdateCount();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void cancel() throws SQLException {
1:1beab6c:          getPhysPs().cancel();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void clearBatch() throws SQLException {
1:1beab6c:          getPhysPs().clearBatch();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void clearWarnings() throws SQLException {
1:1beab6c:          getPhysPs().clearWarnings();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c: 
1:1beab6c:     public boolean getMoreResults() throws SQLException {
1:1beab6c:         return getPhysPs().getMoreResults();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int[] executeBatch() throws SQLException {
1:1beab6c:         return getPhysPs().executeBatch();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setFetchDirection(int direction) throws SQLException {
1:1beab6c:          getPhysPs().setFetchDirection(direction);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setFetchSize(int rows) throws SQLException {
1:1beab6c:          getPhysPs().setFetchSize(rows);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setMaxFieldSize(int max) throws SQLException {
1:1beab6c:          getPhysPs().setMaxFieldSize(max);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setMaxRows(int max) throws SQLException {
1:1beab6c:          getPhysPs().setMaxRows(max);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setQueryTimeout(int seconds) throws SQLException {
1:1beab6c:          getPhysPs().setQueryTimeout(seconds);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean getMoreResults(int current) throws SQLException {
1:1beab6c:         return getPhysPs().getMoreResults(current);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setEscapeProcessing(boolean enable) throws SQLException {
1:1beab6c:          getPhysPs().setEscapeProcessing(enable);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int executeUpdate(String sql) throws SQLException {
1:1beab6c:         return getPhysPs().executeUpdate(sql);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void addBatch(String sql) throws SQLException {
1:1beab6c:          getPhysPs().addBatch(sql);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public void setCursorName(String name) throws SQLException {
1:1beab6c:          getPhysPs().setCursorName(name);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean execute(String sql) throws SQLException {
1:1beab6c:         return getPhysPs().execute(sql);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int executeUpdate(String sql, int autoGeneratedKeys)
1:1beab6c:             throws SQLException {
1:1beab6c:         return getPhysPs().executeUpdate(sql, autoGeneratedKeys);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean execute(String sql, int autoGeneratedKeys)
1:1beab6c:             throws SQLException {
1:1beab6c:         return getPhysPs().execute(sql, autoGeneratedKeys);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int executeUpdate(String sql, int[] columnIndexes)
1:1beab6c:             throws SQLException {
1:1beab6c:         return getPhysPs().executeUpdate(sql, columnIndexes);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean execute(String sql, int[] columnIndexes)
1:1beab6c:             throws SQLException {
1:1beab6c:         return getPhysPs().execute(sql, columnIndexes);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public Connection getConnection() throws SQLException {
1:1beab6c:         return getPhysPs().getConnection();
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public ResultSet getGeneratedKeys() throws SQLException {
1:1beab6c:         return getPhysPs().getGeneratedKeys();
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public ResultSet getResultSet() throws SQLException {
1:1beab6c:         return getPhysPs().getResultSet();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public SQLWarning getWarnings() throws SQLException {
1:1beab6c:         return getPhysPs().getWarnings();
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public int executeUpdate(String sql, String[] columnNames)
1:1beab6c:             throws SQLException {
1:1beab6c:         return getPhysPs().executeUpdate(sql, columnNames);
1:1beab6c:     }
1:1beab6c: 
1:1beab6c:     public boolean execute(String sql, String[] columnNames)
1:1beab6c:             throws SQLException {
1:1beab6c:         return getPhysPs().execute(sql, columnNames);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public ResultSet executeQuery(String sql) throws SQLException {
1:1beab6c:         return getPhysPs().executeQuery(sql);
1:1beab6c:     }
1:20b2fd9: 
1:20b2fd9:     ////////////////////////////////////////////////////////////////
1:20b2fd9:     //
1:9a0cdf1:     //  ADDED BY JDBC 4.0
1:9a0cdf1:     //
1:9a0cdf1:     ////////////////////////////////////////////////////////////////
1:9a0cdf1: 
1:9a0cdf1:     public void setRowId(int arg0, RowId arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setRowId(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNString(int arg0, String arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setNString(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNCharacterStream(int arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setNCharacterStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNClob(int arg0, NClob arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setNClob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setClob(int arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setClob(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBlob(int arg0, InputStream arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setBlob(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNClob(int arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setNClob(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setSQLXML(int arg0, SQLXML arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setSQLXML(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setAsciiStream(int arg0, InputStream arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setAsciiStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBinaryStream(int arg0, InputStream arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setBinaryStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setCharacterStream(int arg0, Reader arg1, long arg2)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setCharacterStream(arg0, arg1, arg2);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setAsciiStream(int arg0, InputStream arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setAsciiStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBinaryStream(int arg0, InputStream arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setBinaryStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setCharacterStream(int arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setCharacterStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNCharacterStream(int arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setNCharacterStream(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setClob(int arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setClob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setBlob(int arg0, InputStream arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setBlob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setNClob(int arg0, Reader arg1)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setNClob(arg0, arg1);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public synchronized boolean isClosed()
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         // Note the extra synchronization.
1:9a0cdf1:         boolean closed = isLogicalEntityClosed();
1:9a0cdf1:         if (!closed) {
1:9a0cdf1:             // Consult the underlying physical statement.
1:9a0cdf1:             closed = getPhysPs().isClosed();
1:9a0cdf1:         }
1:9a0cdf1:         return closed;
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public void setPoolable(boolean arg0)
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:          getPhysPs().setPoolable(arg0);
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     public boolean isPoolable()
1:9a0cdf1:             throws SQLException {
1:9a0cdf1:         return getPhysPs().isPoolable();
1:9a0cdf1:     }
1:9a0cdf1: 
1:9a0cdf1:     ////////////////////////////////////////////////////////////////
1:9a0cdf1:     //
1:20b2fd9:     //  ADDED BY JDBC 4.2
1:20b2fd9:     //
1:20b2fd9:     ////////////////////////////////////////////////////////////////
1:20b2fd9: 
1:20b2fd9:     public  long    executeLargeUpdate() throws SQLException
1:20b2fd9:     {
1:69e3d06:         return ((ClientPreparedStatement) getPhysPs()).executeLargeUpdate();
1:20b2fd9:     }
1:20b2fd9: 
1:1beab6c: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.NClob;
1: import java.sql.RowId;
1: import java.sql.SQLXML;
/////////////////////////////////////////////////////////////////////////
1:     //  ADDED BY JDBC 4.0
1:     //
1:     ////////////////////////////////////////////////////////////////
1: 
1:     public void setRowId(int arg0, RowId arg1)
1:             throws SQLException {
1:          getPhysPs().setRowId(arg0, arg1);
1:     }
1: 
1:     public void setNString(int arg0, String arg1)
1:             throws SQLException {
1:          getPhysPs().setNString(arg0, arg1);
1:     }
1: 
1:     public void setNCharacterStream(int arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysPs().setNCharacterStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setNClob(int arg0, NClob arg1)
1:             throws SQLException {
1:          getPhysPs().setNClob(arg0, arg1);
1:     }
1: 
1:     public void setClob(int arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysPs().setClob(arg0, arg1, arg2);
1:     }
1: 
1:     public void setBlob(int arg0, InputStream arg1, long arg2)
1:             throws SQLException {
1:          getPhysPs().setBlob(arg0, arg1, arg2);
1:     }
1: 
1:     public void setNClob(int arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysPs().setNClob(arg0, arg1, arg2);
1:     }
1: 
1:     public void setSQLXML(int arg0, SQLXML arg1)
1:             throws SQLException {
1:          getPhysPs().setSQLXML(arg0, arg1);
1:     }
1: 
1:     public void setAsciiStream(int arg0, InputStream arg1, long arg2)
1:             throws SQLException {
1:          getPhysPs().setAsciiStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setBinaryStream(int arg0, InputStream arg1, long arg2)
1:             throws SQLException {
1:          getPhysPs().setBinaryStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setCharacterStream(int arg0, Reader arg1, long arg2)
1:             throws SQLException {
1:          getPhysPs().setCharacterStream(arg0, arg1, arg2);
1:     }
1: 
1:     public void setAsciiStream(int arg0, InputStream arg1)
1:             throws SQLException {
1:          getPhysPs().setAsciiStream(arg0, arg1);
1:     }
1: 
1:     public void setBinaryStream(int arg0, InputStream arg1)
1:             throws SQLException {
1:          getPhysPs().setBinaryStream(arg0, arg1);
1:     }
1: 
1:     public void setCharacterStream(int arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysPs().setCharacterStream(arg0, arg1);
1:     }
1: 
1:     public void setNCharacterStream(int arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysPs().setNCharacterStream(arg0, arg1);
1:     }
1: 
1:     public void setClob(int arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysPs().setClob(arg0, arg1);
1:     }
1: 
1:     public void setBlob(int arg0, InputStream arg1)
1:             throws SQLException {
1:          getPhysPs().setBlob(arg0, arg1);
1:     }
1: 
1:     public void setNClob(int arg0, Reader arg1)
1:             throws SQLException {
1:          getPhysPs().setNClob(arg0, arg1);
1:     }
1: 
1:     public synchronized boolean isClosed()
1:             throws SQLException {
1:         // Note the extra synchronization.
1:         boolean closed = isLogicalEntityClosed();
1:         if (!closed) {
1:             // Consult the underlying physical statement.
1:             closed = getPhysPs().isClosed();
1:         }
1:         return closed;
1:     }
1: 
1:     public void setPoolable(boolean arg0)
1:             throws SQLException {
1:          getPhysPs().setPoolable(arg0);
1:     }
1: 
1:     public boolean isPoolable()
1:             throws SQLException {
1:         return getPhysPs().isPoolable();
1:     }
1: 
1:     ////////////////////////////////////////////////////////////////
1:     //
commit:c784df5
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Connection;
1: import java.sql.ParameterMetaData;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
/////////////////////////////////////////////////////////////////////////
1:     implements PreparedStatement {
/////////////////////////////////////////////////////////////////////////
1:     public LogicalPreparedStatement(PreparedStatement physicalPs,
/////////////////////////////////////////////////////////////////////////
1:     public void setBlob(int i, Blob x) throws SQLException {
1:     public void setClob(int i, Clob x) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public ParameterMetaData getParameterMetaData()
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet executeQuery() throws SQLException {
1:     public ResultSetMetaData getMetaData() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public Connection getConnection() throws SQLException {
1:     public ResultSet getGeneratedKeys() throws SQLException {
1:     public ResultSet getResultSet() throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet executeQuery(String sql) throws SQLException {
/////////////////////////////////////////////////////////////////////////
1:         return ((ClientPreparedStatement) getPhysPs()).executeLargeUpdate();
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void setBlob(int i, java.sql.Blob x) throws SQLException {
0:     public void setClob(int i, java.sql.Clob x) throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.ParameterMetaData getParameterMetaData()
1:             throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.ResultSet executeQuery() throws SQLException {
0:     public java.sql.ResultSetMetaData getMetaData() throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.Connection getConnection() throws SQLException {
0:     public java.sql.ResultSet getGeneratedKeys() throws SQLException {
0:     public java.sql.ResultSet getResultSet() throws SQLException {
/////////////////////////////////////////////////////////////////////////
0:     public java.sql.ResultSet executeQuery(String sql) throws SQLException {
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:20b2fd9
/////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////
1:     //
1:     //  ADDED BY JDBC 4.2
1:     //
1:     ////////////////////////////////////////////////////////////////
1: 
1:     public  long    executeLargeUpdate() throws SQLException
1:     {
0:         return ((PreparedStatement) getPhysPs()).executeLargeUpdate();
1:     }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d6cf884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param cacheInteractor creating statement cache interactor
1:                                     StatementCacheInteractor cacheInteractor) {
1:         super(physicalPs, stmtKey, cacheInteractor);
commit:1beab6c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.LogicalPreparedStatement
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.math.BigDecimal;
1: import java.net.URL;
1: import java.util.Calendar;
1: 
1: import java.sql.Array;
0: import java.sql.Blob;
0: import java.sql.Clob;
0: import java.sql.Connection;
1: import java.sql.Date;
0: import java.sql.ParameterMetaData;
1: import java.sql.Ref;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: 
0: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: import org.apache.derby.client.am.stmtcache.StatementKey;
1: 
1: /**
1:  * A wrapper class for a physical Derby prepared statement.
1:  * <p>
1:  * The idea behind the logical prepared statement is to allow reuse of the
1:  * physical prepared statement. In general the logical entity will forward all
1:  * calls to the physical entity. A few methods have special implementations, the
1:  * most important one being {@link #close}. Each method will check that the
1:  * logical statement is still open before the call is forwarded to the
1:  * underlying physical statement.
1:  *
1:  * @see LogicalStatementEntity
1:  */
1: public class LogicalPreparedStatement
1:     extends LogicalStatementEntity
0:     implements java.sql.PreparedStatement {
1: 
1:     /**
1:      * Creates a new logical prepared statement.
1:      *
1:      * @param physicalPs underlying physical statement
1:      * @param stmtKey key for the physical statement
0:      * @param cache associated statement cache
1:      * @throws IllegalArgumentException if {@code cache} is {@code null}
1:      */
0:     public LogicalPreparedStatement(java.sql.PreparedStatement physicalPs,
1:                                     StatementKey stmtKey,
0:                                     JDBCStatementCache cache) {
0:         super(physicalPs, stmtKey, cache);
1:     }
1: 
1:     public int executeUpdate() throws SQLException {
1:         return getPhysPs().executeUpdate();
1:     }
1: 
1:     public void addBatch() throws SQLException {
1:          getPhysPs().addBatch();
1:     }
1: 
1:     public void clearParameters() throws SQLException {
1:          getPhysPs().clearParameters();
1:     }
1: 
1:     public boolean execute() throws SQLException {
1:         return getPhysPs().execute();
1:     }
1: 
1:     public void setByte(int parameterIndex, byte x) throws SQLException {
1:          getPhysPs().setByte(parameterIndex, x);
1:     }
1: 
1:     public void setDouble(int parameterIndex, double x) throws SQLException {
1:          getPhysPs().setDouble(parameterIndex, x);
1:     }
1: 
1:     public void setFloat(int parameterIndex, float x) throws SQLException {
1:          getPhysPs().setFloat(parameterIndex, x);
1:     }
1: 
1:     public void setInt(int parameterIndex, int x) throws SQLException {
1:          getPhysPs().setInt(parameterIndex, x);
1:     }
1: 
1:     public void setNull(int parameterIndex, int sqlType) throws SQLException {
1:          getPhysPs().setNull(parameterIndex, sqlType);
1:     }
1: 
1:     public void setLong(int parameterIndex, long x) throws SQLException {
1:          getPhysPs().setLong(parameterIndex, x);
1:     }
1: 
1:     public void setShort(int parameterIndex, short x) throws SQLException {
1:          getPhysPs().setShort(parameterIndex, x);
1:     }
1: 
1:     public void setBoolean(int parameterIndex, boolean x) throws SQLException {
1:          getPhysPs().setBoolean(parameterIndex, x);
1:     }
1: 
1:     public void setBytes(int parameterIndex, byte[] x) throws SQLException {
1:          getPhysPs().setBytes(parameterIndex, x);
1:     }
1: 
1:     public void setAsciiStream(int parameterIndex, InputStream x, int length)
1:             throws SQLException {
1:          getPhysPs().setAsciiStream(parameterIndex, x, length);
1:     }
1: 
1:     public void setBinaryStream(int parameterIndex, InputStream x, int length)
1:             throws SQLException {
1:          getPhysPs().setBinaryStream(parameterIndex, x, length);
1:     }
1: 
1:     public void setUnicodeStream(int parameterIndex, InputStream x, int length)
1:             throws SQLException {
1:          getPhysPs().setUnicodeStream(parameterIndex, x, length);
1:     }
1: 
1:     public void setCharacterStream(int parameterIndex, Reader reader, int length)
1:             throws SQLException {
1:          getPhysPs().setCharacterStream(parameterIndex, reader, length);
1:     }
1: 
1:     public void setObject(int parameterIndex, Object x) throws SQLException {
1:          getPhysPs().setObject(parameterIndex, x);
1:     }
1: 
1:     public void setObject(int parameterIndex, Object x, int targetSqlType)
1:                 throws SQLException {
1:          getPhysPs().setObject(parameterIndex, x, targetSqlType);
1:     }
1: 
1:     public void setObject(int parameterIndex, Object x,
1:                           int targetSqlType, int scale)
1:             throws SQLException {
1:          getPhysPs().setObject(parameterIndex, x, targetSqlType, scale);
1:     }
1: 
1:     public void setNull(int paramIndex, int sqlType, String typeName)
1:             throws SQLException {
1:          getPhysPs().setNull(paramIndex, sqlType, typeName);
1:     }
1: 
1:     public void setString(int parameterIndex, String x) throws SQLException {
1:          getPhysPs().setString(parameterIndex, x);
1:     }
1: 
1:     public void setBigDecimal(int parameterIndex, BigDecimal x)
1:             throws SQLException {
1:          getPhysPs().setBigDecimal(parameterIndex, x);
1:     }
1: 
1:     public void setURL(int parameterIndex, URL x) throws SQLException {
1:          getPhysPs().setURL(parameterIndex, x);
1:     }
1: 
1:     public void setArray(int i, Array x) throws SQLException {
1:          getPhysPs().setArray(i, x);
1:     }
1: 
0:     public void setBlob(int i, Blob x) throws SQLException {
1:          getPhysPs().setBlob(i, x);
1:     }
1: 
0:     public void setClob(int i, Clob x) throws SQLException {
1:          getPhysPs().setClob(i, x);
1:     }
1: 
1:     public void setDate(int parameterIndex, Date x) throws SQLException {
1:          getPhysPs().setDate(parameterIndex, x);
1:     }
1: 
0:     public ParameterMetaData getParameterMetaData() throws SQLException {
1:         return getPhysPs().getParameterMetaData();
1:     }
1: 
1:     public void setRef(int i, Ref x) throws SQLException {
1:          getPhysPs().setRef(i, x);
1:     }
1: 
0:     public ResultSet executeQuery() throws SQLException {
1:         return getPhysPs().executeQuery();
1:     }
1: 
0:     public ResultSetMetaData getMetaData() throws SQLException {
1:         return getPhysPs().getMetaData();
1:     }
1: 
1:     public void setTime(int parameterIndex, Time x) throws SQLException {
1:          getPhysPs().setTime(parameterIndex, x);
1:     }
1: 
1:     public void setTimestamp(int parameterIndex, Timestamp x)
1:             throws SQLException {
1:          getPhysPs().setTimestamp(parameterIndex, x);
1:     }
1: 
1:     public void setDate(int parameterIndex, Date x, Calendar cal)
1:             throws SQLException {
1:          getPhysPs().setDate(parameterIndex, x, cal);
1:     }
1: 
1:     public void setTime(int parameterIndex, Time x, Calendar cal)
1:             throws SQLException {
1:          getPhysPs().setTime(parameterIndex, x, cal);
1:     }
1: 
1:     public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
1:             throws SQLException {
1:          getPhysPs().setTimestamp(parameterIndex, x, cal);
1:     }
1: 
1:     public int getFetchDirection() throws SQLException {
1:         return getPhysPs().getFetchDirection();
1:     }
1: 
1:     public int getFetchSize() throws SQLException {
1:         return getPhysPs().getFetchSize();
1:     }
1: 
1:     public int getMaxFieldSize() throws SQLException {
1:         return getPhysPs().getMaxFieldSize();
1:     }
1: 
1:     public int getMaxRows() throws SQLException {
1:         return getPhysPs().getMaxRows();
1:     }
1: 
1:     public int getQueryTimeout() throws SQLException {
1:         return getPhysPs().getQueryTimeout();
1:     }
1: 
1:     public int getResultSetConcurrency() throws SQLException {
1:         return getPhysPs().getResultSetConcurrency();
1:     }
1: 
1:     public int getResultSetHoldability() throws SQLException {
1:         return getPhysPs().getResultSetHoldability();
1:     }
1: 
1:     public int getResultSetType() throws SQLException {
1:         return getPhysPs().getResultSetType();
1:     }
1: 
1:     public int getUpdateCount() throws SQLException {
1:         return getPhysPs().getUpdateCount();
1:     }
1: 
1:     public void cancel() throws SQLException {
1:          getPhysPs().cancel();
1:     }
1: 
1:     public void clearBatch() throws SQLException {
1:          getPhysPs().clearBatch();
1:     }
1: 
1:     public void clearWarnings() throws SQLException {
1:          getPhysPs().clearWarnings();
1:     }
1: 
1: 
1:     public boolean getMoreResults() throws SQLException {
1:         return getPhysPs().getMoreResults();
1:     }
1: 
1:     public int[] executeBatch() throws SQLException {
1:         return getPhysPs().executeBatch();
1:     }
1: 
1:     public void setFetchDirection(int direction) throws SQLException {
1:          getPhysPs().setFetchDirection(direction);
1:     }
1: 
1:     public void setFetchSize(int rows) throws SQLException {
1:          getPhysPs().setFetchSize(rows);
1:     }
1: 
1:     public void setMaxFieldSize(int max) throws SQLException {
1:          getPhysPs().setMaxFieldSize(max);
1:     }
1: 
1:     public void setMaxRows(int max) throws SQLException {
1:          getPhysPs().setMaxRows(max);
1:     }
1: 
1:     public void setQueryTimeout(int seconds) throws SQLException {
1:          getPhysPs().setQueryTimeout(seconds);
1:     }
1: 
1:     public boolean getMoreResults(int current) throws SQLException {
1:         return getPhysPs().getMoreResults(current);
1:     }
1: 
1:     public void setEscapeProcessing(boolean enable) throws SQLException {
1:          getPhysPs().setEscapeProcessing(enable);
1:     }
1: 
1:     public int executeUpdate(String sql) throws SQLException {
1:         return getPhysPs().executeUpdate(sql);
1:     }
1: 
1:     public void addBatch(String sql) throws SQLException {
1:          getPhysPs().addBatch(sql);
1:     }
1: 
1:     public void setCursorName(String name) throws SQLException {
1:          getPhysPs().setCursorName(name);
1:     }
1: 
1:     public boolean execute(String sql) throws SQLException {
1:         return getPhysPs().execute(sql);
1:     }
1: 
1:     public int executeUpdate(String sql, int autoGeneratedKeys)
1:             throws SQLException {
1:         return getPhysPs().executeUpdate(sql, autoGeneratedKeys);
1:     }
1: 
1:     public boolean execute(String sql, int autoGeneratedKeys)
1:             throws SQLException {
1:         return getPhysPs().execute(sql, autoGeneratedKeys);
1:     }
1: 
1:     public int executeUpdate(String sql, int[] columnIndexes)
1:             throws SQLException {
1:         return getPhysPs().executeUpdate(sql, columnIndexes);
1:     }
1: 
1:     public boolean execute(String sql, int[] columnIndexes)
1:             throws SQLException {
1:         return getPhysPs().execute(sql, columnIndexes);
1:     }
1: 
0:     public Connection getConnection() throws SQLException {
1:         return getPhysPs().getConnection();
1:     }
1: 
0:     public ResultSet getGeneratedKeys() throws SQLException {
1:         return getPhysPs().getGeneratedKeys();
1:     }
1: 
0:     public ResultSet getResultSet() throws SQLException {
1:         return getPhysPs().getResultSet();
1:     }
1: 
1:     public SQLWarning getWarnings() throws SQLException {
1:         return getPhysPs().getWarnings();
1:     }
1: 
1:     public int executeUpdate(String sql, String[] columnNames)
1:             throws SQLException {
1:         return getPhysPs().executeUpdate(sql, columnNames);
1:     }
1: 
1:     public boolean execute(String sql, String[] columnNames)
1:             throws SQLException {
1:         return getPhysPs().execute(sql, columnNames);
1:     }
1: 
0:     public ResultSet executeQuery(String sql) throws SQLException {
1:         return getPhysPs().executeQuery(sql);
1:     }
1: }
============================================================================