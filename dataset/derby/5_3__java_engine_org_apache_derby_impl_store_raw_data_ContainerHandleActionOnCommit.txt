1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerLock;
1:eac0369: import org.apache.derby.iapi.store.raw.Page;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.RecordHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.locks.Lockable;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	An abstract class that opens the container at commit and delegates
1:eac0369: 	the actual work to a sub-class.
1:eac0369: */
1:eac0369: 
1:eac0369: public abstract class ContainerHandleActionOnCommit extends ContainerActionOnCommit {
1:eac0369: 
1:eac0369: 	public ContainerHandleActionOnCommit(ContainerKey identity) {
1:eac0369: 
1:eac0369: 		super(identity);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	**	Methods of Observer
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Open the container and call the doIt method
1:eac0369: 	*/
1:eac0369: 	public void openContainerAndDoIt(RawTransaction xact) {
1:eac0369: 
1:eac0369: 		BaseContainerHandle handle = null;
1:eac0369: 		try {
1:eac0369: 			handle = (BaseContainerHandle) xact.openContainer(identity, (LockingPolicy) null, 
1:eac0369: 				ContainerHandle.MODE_FORUPDATE | ContainerHandle.MODE_NO_ACTIONS_ON_COMMIT);
1:eac0369: 
1:eac0369: 			// if the handle is null, the container may have been removed by a previous observer.
1:eac0369: 			if (handle != null) {
1:eac0369: 				try {
1:eac0369: 					doIt(handle);
1:eac0369: 				} catch (StandardException se) {
1:eac0369: 					xact.setObserverException(se);
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:eac0369: 		} catch (StandardException se) {
1:eac0369: 
1:eac0369: 			// if we get this exception, then the container is readonly.
1:eac0369: 			// no problem if we can't open an closed temp container.
1:eac0369: 			if (identity.getSegmentId()  != ContainerHandle.TEMPORARY_SEGMENT)
1:eac0369: 				xact.setObserverException(se);
1:eac0369: 		} finally {
1:eac0369: 			if (handle != null)
1:eac0369: 				handle.close();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected abstract void doIt(BaseContainerHandle handle)
1:eac0369: 		throws StandardException;
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.ContainerLock;
1: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.RecordHandle;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: 
1: import org.apache.derby.iapi.services.locks.Lockable;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1: 	An abstract class that opens the container at commit and delegates
1: 	the actual work to a sub-class.
1: */
1: 
1: public abstract class ContainerHandleActionOnCommit extends ContainerActionOnCommit {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	public ContainerHandleActionOnCommit(ContainerKey identity) {
1: 
1: 		super(identity);
1: 	}
1: 
1: 	/*
1: 	**	Methods of Observer
1: 	*/
1: 
1: 	/**
1: 		Open the container and call the doIt method
1: 	*/
1: 	public void openContainerAndDoIt(RawTransaction xact) {
1: 
1: 		BaseContainerHandle handle = null;
1: 		try {
1: 			handle = (BaseContainerHandle) xact.openContainer(identity, (LockingPolicy) null, 
1: 				ContainerHandle.MODE_FORUPDATE | ContainerHandle.MODE_NO_ACTIONS_ON_COMMIT);
1: 
1: 			// if the handle is null, the container may have been removed by a previous observer.
1: 			if (handle != null) {
1: 				try {
1: 					doIt(handle);
1: 				} catch (StandardException se) {
1: 					xact.setObserverException(se);
1: 				}
1: 			}
1: 
1: 		} catch (StandardException se) {
1: 
1: 			// if we get this exception, then the container is readonly.
1: 			// no problem if we can't open an closed temp container.
1: 			if (identity.getSegmentId()  != ContainerHandle.TEMPORARY_SEGMENT)
1: 				xact.setObserverException(se);
1: 		} finally {
1: 			if (handle != null)
1: 				handle.close();
1: 		}
1: 	}
1: 
1: 	protected abstract void doIt(BaseContainerHandle handle)
1: 		throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.ContainerLock;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.RecordHandle;
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: 
0: import org.apache.derby.iapi.services.locks.Lockable;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0: 	An abstract class that opens the container at commit and delegates
0: 	the actual work to a sub-class.
0: */
0: 
0: public abstract class ContainerHandleActionOnCommit extends ContainerActionOnCommit {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	public ContainerHandleActionOnCommit(ContainerKey identity) {
0: 
0: 		super(identity);
0: 	}
0: 
0: 	/*
0: 	**	Methods of Observer
0: 	*/
0: 
0: 	/**
0: 		Open the container and call the doIt method
0: 	*/
0: 	public void openContainerAndDoIt(RawTransaction xact) {
0: 
0: 		BaseContainerHandle handle = null;
0: 		try {
0: 			handle = (BaseContainerHandle) xact.openContainer(identity, (LockingPolicy) null, 
0: 				ContainerHandle.MODE_FORUPDATE | ContainerHandle.MODE_NO_ACTIONS_ON_COMMIT);
0: 
0: 			// if the handle is null, the container may have been removed by a previous observer.
0: 			if (handle != null) {
0: 				try {
0: 					doIt(handle);
0: 				} catch (StandardException se) {
0: 					xact.setObserverException(se);
0: 				}
0: 			}
0: 
0: 		} catch (StandardException se) {
0: 
0: 			// if we get this exception, then the container is readonly.
0: 			// no problem if we can't open an closed temp container.
0: 			if (identity.getSegmentId()  != ContainerHandle.TEMPORARY_SEGMENT)
0: 				xact.setObserverException(se);
0: 		} finally {
0: 			if (handle != null)
0: 				handle.close();
0: 		}
0: 	}
0: 
0: 	protected abstract void doIt(BaseContainerHandle handle)
0: 		throws StandardException;
0: }
============================================================================