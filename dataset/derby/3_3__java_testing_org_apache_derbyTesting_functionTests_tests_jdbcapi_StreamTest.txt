1:9fd7e3e: /*
5:9fd7e3e:  
1:9fd7e3e: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest
1:9fd7e3e:  
1:9fd7e3e: Licensed to the Apache Software Foundation (ASF) under one or more
1:9fd7e3e: contributor license agreements.  See the NOTICE file distributed with
1:9fd7e3e: this work for additional information regarding copyright ownership.
1:9fd7e3e: The ASF licenses this file to You under the Apache License, Version 2.0
1:9fd7e3e: (the "License"); you may not use this file except in compliance with
1:9fd7e3e: the License.  You may obtain a copy of the License at
1:9fd7e3e:  
1:9fd7e3e: http://www.apache.org/licenses/LICENSE-2.0
1:9fd7e3e:  
1:9fd7e3e: Unless required by applicable law or agreed to in writing, software
1:9fd7e3e: distributed under the License is distributed on an "AS IS" BASIS,
1:9fd7e3e: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9fd7e3e: See the License for the specific language governing permissions and
1:9fd7e3e: limitations under the License.
1:9fd7e3e:  
1:9fd7e3e:  */
1:9fd7e3e: 
1:9fd7e3e: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:9fd7e3e: 
1:9fd7e3e: import java.io.IOException;
1:9fd7e3e: import java.io.InputStream;
1:9fd7e3e: import java.io.Reader;
1:9fd7e3e: 
1:9fd7e3e: import java.sql.*;
1:9fd7e3e: import junit.framework.*;
1:9fd7e3e: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:9fd7e3e: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1:9fd7e3e: 
1:9fd7e3e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:9fd7e3e: import org.apache.derbyTesting.junit.TestConfiguration;
1:9fd7e3e: 
1:9fd7e3e: /**
1:9fd7e3e:  * Tests of ResultSet streams
1:9fd7e3e:  */
1:9fd7e3e: public class StreamTest extends BaseJDBCTestCase {
1:9fd7e3e:     
1:9fd7e3e:     /** Creates a new instance of StreamTest */
1:9fd7e3e:     public StreamTest(String name) {
1:9fd7e3e:         super(name);
7:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     protected void setUp() throws Exception {
1:9fd7e3e:         getConnection().setAutoCommit(false);
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     protected void tearDown() throws Exception {
1:9fd7e3e:         rollback();
1:9fd7e3e:         super.tearDown();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     public static Test suite() {
1:9fd7e3e:         return TestConfiguration.defaultSuite(StreamTest.class);
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     /**
1:9fd7e3e:      * Tests calling ResultSet.getBinaryStream() twice in the same column
1:9fd7e3e:      * using a 512 bytes blob
1:9fd7e3e:      */
1:9fd7e3e:     public void testGetStreamTwiceSmallBlob() throws SQLException, IOException {
1:9fd7e3e:         insertBlobData(512);
1:9fd7e3e:         runGetStreamTwiceTest();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     /**
1:9fd7e3e:      * Tests calling ResultSet.getBinaryStream() twice in the same column
1:9fd7e3e:      * using a 512K bytes blob
1:9fd7e3e:      */
1:9fd7e3e:     public void testGetStreamTwiceLargeBlob() throws SQLException, IOException {
1:9fd7e3e:         insertBlobData(512 * 1024);
1:9fd7e3e:         runGetStreamTwiceTest();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     /**
1:9fd7e3e:      * Tests calling ResultSet.getCharacterStream() twice in the same column
1:9fd7e3e:      * using a 512 characters clob
1:9fd7e3e:      */
1:9fd7e3e:     public void testGetReaderTwiceSmallClob() throws SQLException, IOException {
1:9fd7e3e:         insertClobData(512);
1:9fd7e3e:         runGetReaderTwiceTest();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     /**
1:9fd7e3e:      * Tests calling ResultSet.getCharacterStream() twice in the same column
1:9fd7e3e:      * using a 512K characters clob
1:9fd7e3e:      */
1:9fd7e3e:     public void testGetReaderTwiceLargeClob() throws SQLException, IOException {
1:9fd7e3e:         insertClobData(512 * 1024);
1:9fd7e3e:         runGetReaderTwiceTest();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     
1:9fd7e3e:     private void insertBlobData(int blobSize) throws SQLException {
1:9fd7e3e:         Statement stmt = createStatement();
1:9fd7e3e:         stmt.executeUpdate("CREATE TABLE testLob " +
1:9fd7e3e:                 " (b blob(" + blobSize + "))");
1:9fd7e3e:         stmt.close();
1:9fd7e3e:         PreparedStatement ps = 
1:9fd7e3e:                 prepareStatement("insert into testLob values(?)");
1:9fd7e3e:         InputStream stream = new LoopingAlphabetStream(blobSize);
1:9fd7e3e:         ps.setBinaryStream(1, stream, blobSize);
1:9fd7e3e:         ps.executeUpdate();
1:9fd7e3e:         ps.close();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     private void insertClobData(int clobSize) throws SQLException {
1:9fd7e3e:         Statement stmt = createStatement();
1:9fd7e3e:         stmt.executeUpdate("CREATE TABLE testLob " +
1:9fd7e3e:                 " (c clob(" + clobSize + "))");
1:9fd7e3e:         stmt.close();
1:9fd7e3e:         PreparedStatement ps =
1:9fd7e3e:                 prepareStatement("insert into testLob values(?)");
1:9fd7e3e:         Reader reader = new LoopingAlphabetReader(clobSize);
1:9fd7e3e:         ps.setCharacterStream(1, reader, clobSize);
1:9fd7e3e:         ps.executeUpdate();
1:9fd7e3e:         ps.close();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     private void runGetStreamTwiceTest() throws SQLException, IOException {
1:9fd7e3e:         
1:9fd7e3e:         InputStream is = null;
1:9fd7e3e:         
1:9fd7e3e:         Statement st = createStatement();
1:9fd7e3e:         ResultSet rs = st.executeQuery("select * from testLob");
1:9fd7e3e:         assertTrue("FAIL - row not found", rs.next());
1:9fd7e3e:         
1:9fd7e3e:         println("get stream from testLob ...");
1:9fd7e3e:         is = rs.getBinaryStream(1);
2:9fd7e3e:         is.close();
1:9fd7e3e:         
1:9fd7e3e:         try{
1:9fd7e3e:             println("get stream from testLob again ...");
1:9fd7e3e:             is = rs.getBinaryStream(1);
1:9fd7e3e:             fail("FAIL - Expected exception did not happen.");
1:9fd7e3e:             
1:9fd7e3e:         } catch(SQLException se) {
1:9fd7e3e:             assertSQLState(LANG_STREAM_RETRIEVED_ALREADY, se);
1:9fd7e3e:         }
1:38873e4:         rs.close();
1:38873e4:         st.close();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     public void runGetReaderTwiceTest() throws SQLException, IOException {
1:9fd7e3e:         Reader reader = null;
1:9fd7e3e:         
1:9fd7e3e:         Statement st = createStatement();
1:9fd7e3e:         ResultSet rs = st.executeQuery( "select * from testLob");
1:9fd7e3e:         assertTrue("FAIL - row not found", rs.next());
1:9fd7e3e:         
1:9fd7e3e:         println("get reader from testLob ...");
1:9fd7e3e:         reader = rs.getCharacterStream(1);
2:9fd7e3e:         reader.close();
1:9fd7e3e:         try {
1:9fd7e3e:             println("get reader from testLob again ...");
1:9fd7e3e:             reader = rs.getCharacterStream(1);
1:9fd7e3e:             fail("FAIL - Expected exception did not happen.");
1:9fd7e3e:             
1:9fd7e3e:         } catch(SQLException se) {
1:9fd7e3e:             assertSQLState(LANG_STREAM_RETRIEVED_ALREADY, se);
1:9fd7e3e:         }
1:38873e4:         rs.close();
1:38873e4:         st.close();
1:9fd7e3e:     }
1:9fd7e3e:     
1:9fd7e3e:     private static final String LANG_STREAM_RETRIEVED_ALREADY = "XCL18";
1:9fd7e3e: 
1:188fc76:     private boolean didclose = false;
1:188fc76: 
1:188fc76:     /**
1:188fc76:      * DERBY-4531: Test that JDBC driver doesn't close a stream handed in to
1:188fc76:      * PreparedStatement.setCharacterStream when the prepared statement is
1:188fc76:      * garbage collected. Prior to thus fix, the client driver did call close
1:188fc76:      * on the stream in its finalizer. After fix to DERBY-4531, both embedded
1:188fc76:      * and client driver leaves the stream open after having read the number of
1:188fc76:      * characters specified.
1:188fc76:      */
1:188fc76:     public void testDerby4531() throws SQLException {
1:188fc76:         setAutoCommit(false);
1:188fc76: 
1:188fc76:         Statement s = createStatement();
1:188fc76:         s.executeUpdate("create table tDerby4531(c clob(200))");
1:188fc76:         s.close();
1:188fc76: 
1:188fc76:         // Don't use plain prepareStatement, we want ps to be gc'ed below and
1:188fc76:         // BaseJDBCTestCase#prepareStatement saves away a reference to it
1:188fc76:         // thwarting that.
1:188fc76:         PreparedStatement ps = getConnection().
1:188fc76:             prepareStatement("insert into tDerby4531 values (?)");
1:188fc76:         Reader r = new MyLoopingAlphabetReader(200);
1:188fc76:         ps.setCharacterStream(1, r, 200);
1:188fc76:         ps.execute();
1:188fc76:         ps.close();
1:188fc76:         ps = null;
1:188fc76: 
1:188fc76:         // Prior to fix for this issue, with client driver, gc of ps causes
1:188fc76:         // close to be called on reader, cf. code in
1:188fc76:         // org.apache.derby.client.net.EncodedInputStream#finalize.
1:188fc76:         System.gc();
1:188fc76: 
1:188fc76:         // Sleep so gc thread can do its thing
1:188fc76:         try {
1:188fc76:             Thread.sleep(1000);
1:188fc76:         } catch (Exception e) {
1:188fc76:         }
1:188fc76: 
1:188fc76:         synchronized(r) {
1:188fc76:             assertFalse(didclose);
1:188fc76:         }
1:188fc76: 
1:188fc76:         rollback();
1:188fc76:     }
1:188fc76: 
1:188fc76:     private class MyLoopingAlphabetReader extends LoopingAlphabetReader {
1:188fc76:         public MyLoopingAlphabetReader(int i) {
1:188fc76:             super(i);
1:188fc76:         }
1:188fc76: 
1:188fc76:         // Override this so we can detect that it happened.
1:188fc76:         public void close() {
1:188fc76:             synchronized(this) {
1:188fc76:                 didclose = true;
1:188fc76:             }
1:188fc76:         }
1:188fc76:     }
1:9fd7e3e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:188fc76
/////////////////////////////////////////////////////////////////////////
1:     private boolean didclose = false;
1: 
1:     /**
1:      * DERBY-4531: Test that JDBC driver doesn't close a stream handed in to
1:      * PreparedStatement.setCharacterStream when the prepared statement is
1:      * garbage collected. Prior to thus fix, the client driver did call close
1:      * on the stream in its finalizer. After fix to DERBY-4531, both embedded
1:      * and client driver leaves the stream open after having read the number of
1:      * characters specified.
1:      */
1:     public void testDerby4531() throws SQLException {
1:         setAutoCommit(false);
1: 
1:         Statement s = createStatement();
1:         s.executeUpdate("create table tDerby4531(c clob(200))");
1:         s.close();
1: 
1:         // Don't use plain prepareStatement, we want ps to be gc'ed below and
1:         // BaseJDBCTestCase#prepareStatement saves away a reference to it
1:         // thwarting that.
1:         PreparedStatement ps = getConnection().
1:             prepareStatement("insert into tDerby4531 values (?)");
1:         Reader r = new MyLoopingAlphabetReader(200);
1:         ps.setCharacterStream(1, r, 200);
1:         ps.execute();
1:         ps.close();
1:         ps = null;
1: 
1:         // Prior to fix for this issue, with client driver, gc of ps causes
1:         // close to be called on reader, cf. code in
1:         // org.apache.derby.client.net.EncodedInputStream#finalize.
1:         System.gc();
1: 
1:         // Sleep so gc thread can do its thing
1:         try {
1:             Thread.sleep(1000);
1:         } catch (Exception e) {
1:         }
1: 
1:         synchronized(r) {
1:             assertFalse(didclose);
1:         }
1: 
1:         rollback();
1:     }
1: 
1:     private class MyLoopingAlphabetReader extends LoopingAlphabetReader {
1:         public MyLoopingAlphabetReader(int i) {
1:             super(i);
1:         }
1: 
1:         // Override this so we can detect that it happened.
1:         public void close() {
1:             synchronized(this) {
1:                 didclose = true;
1:             }
1:         }
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:38873e4
/////////////////////////////////////////////////////////////////////////
1:         rs.close();
1:         st.close();
/////////////////////////////////////////////////////////////////////////
1:         rs.close();
1:         st.close();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:9fd7e3e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1: http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.Reader;
1: 
1: import java.sql.*;
1: import junit.framework.*;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Tests of ResultSet streams
1:  */
1: public class StreamTest extends BaseJDBCTestCase {
1:     
1:     /** Creates a new instance of StreamTest */
1:     public StreamTest(String name) {
1:         super(name);
1:     }
1:     
1:     protected void setUp() throws Exception {
1:         getConnection().setAutoCommit(false);
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         rollback();
1:         super.tearDown();
1:     }
1:     
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(StreamTest.class);
1:     }
1:     
1:     /**
1:      * Tests calling ResultSet.getBinaryStream() twice in the same column
1:      * using a 512 bytes blob
1:      */
1:     public void testGetStreamTwiceSmallBlob() throws SQLException, IOException {
1:         insertBlobData(512);
1:         runGetStreamTwiceTest();
1:     }
1:     
1:     /**
1:      * Tests calling ResultSet.getBinaryStream() twice in the same column
1:      * using a 512K bytes blob
1:      */
1:     public void testGetStreamTwiceLargeBlob() throws SQLException, IOException {
1:         insertBlobData(512 * 1024);
1:         runGetStreamTwiceTest();
1:     }
1:     
1:     /**
1:      * Tests calling ResultSet.getCharacterStream() twice in the same column
1:      * using a 512 characters clob
1:      */
1:     public void testGetReaderTwiceSmallClob() throws SQLException, IOException {
1:         insertClobData(512);
1:         runGetReaderTwiceTest();
1:     }
1:     
1:     /**
1:      * Tests calling ResultSet.getCharacterStream() twice in the same column
1:      * using a 512K characters clob
1:      */
1:     public void testGetReaderTwiceLargeClob() throws SQLException, IOException {
1:         insertClobData(512 * 1024);
1:         runGetReaderTwiceTest();
1:     }
1:     
1:     
1:     private void insertBlobData(int blobSize) throws SQLException {
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("CREATE TABLE testLob " +
1:                 " (b blob(" + blobSize + "))");
1:         stmt.close();
1:         PreparedStatement ps = 
1:                 prepareStatement("insert into testLob values(?)");
1:         InputStream stream = new LoopingAlphabetStream(blobSize);
1:         ps.setBinaryStream(1, stream, blobSize);
1:         ps.executeUpdate();
1:         ps.close();
1:     }
1:     
1:     private void insertClobData(int clobSize) throws SQLException {
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("CREATE TABLE testLob " +
1:                 " (c clob(" + clobSize + "))");
1:         stmt.close();
1:         PreparedStatement ps =
1:                 prepareStatement("insert into testLob values(?)");
1:         Reader reader = new LoopingAlphabetReader(clobSize);
1:         ps.setCharacterStream(1, reader, clobSize);
1:         ps.executeUpdate();
1:         ps.close();
1:     }
1:     
1:     private void runGetStreamTwiceTest() throws SQLException, IOException {
1:         
1:         InputStream is = null;
1:         
1:         Statement st = createStatement();
1:         ResultSet rs = st.executeQuery("select * from testLob");
1:         assertTrue("FAIL - row not found", rs.next());
1:         
1:         println("get stream from testLob ...");
1:         is = rs.getBinaryStream(1);
1:         is.close();
1:         
1:         try{
1:             println("get stream from testLob again ...");
1:             is = rs.getBinaryStream(1);
1:             fail("FAIL - Expected exception did not happen.");
1:             
1:         } catch(SQLException se) {
1:             assertSQLState(LANG_STREAM_RETRIEVED_ALREADY, se);
0:         } finally {
0:             if (st != null) {
0:                 st.close();
1:             }
1:             
0:             if (rs != null) {
0:                 rs.close();
1:             }
1:             
0:             if (is != null) {
1:                 is.close();
1:             }
1:         }
1:     }
1:     
1:     public void runGetReaderTwiceTest() throws SQLException, IOException {
1:         Reader reader = null;
1:         
1:         Statement st = createStatement();
1:         ResultSet rs = st.executeQuery( "select * from testLob");
1:         assertTrue("FAIL - row not found", rs.next());
1:         
1:         println("get reader from testLob ...");
1:         reader = rs.getCharacterStream(1);
1:         reader.close();
1:         try {
1:             println("get reader from testLob again ...");
1:             reader = rs.getCharacterStream(1);
1:             fail("FAIL - Expected exception did not happen.");
1:             
1:         } catch(SQLException se) {
1:             assertSQLState(LANG_STREAM_RETRIEVED_ALREADY, se);
0:         } finally {
0:             if (st != null) {
0:                 st.close();
1:             }
1:             
0:             if (rs != null) {
0:                 rs.close();
1:             }
1:             
0:             if (reader != null) {
1:                 reader.close();
1:             }
1:         }
1:     }
1:     
1:     private static final String LANG_STREAM_RETRIEVED_ALREADY = "XCL18";
1: 
1: }
============================================================================