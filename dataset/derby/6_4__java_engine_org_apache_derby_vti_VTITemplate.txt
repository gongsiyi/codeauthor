3:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.vti.VTITemplate
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
142:eac0369: 
140:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.vti;
1:ab582b3: 
1:bbc882f: import java.io.InputStream;
1:bbc882f: import java.io.Reader;
1:eac0369: import java.math.BigDecimal;
1:bbc882f: import java.net.URL;
1:bbc882f: import java.sql.Array;
1:bbc882f: import java.sql.Blob;
1:bbc882f: import java.sql.Clob;
1:d847ced: import java.sql.Connection;
1:d847ced: import java.sql.DatabaseMetaData;
1:bbc882f: import java.sql.Date;
1:bbc882f: import java.sql.NClob;
1:bbc882f: import java.sql.Ref;
1:bbc882f: import java.sql.ResultSet;
1:bbc882f: import java.sql.ResultSetMetaData;
1:bbc882f: import java.sql.RowId;
1:bbc882f: import java.sql.SQLData;
1:bbc882f: import java.sql.SQLException;
1:996ca72: import java.sql.SQLFeatureNotSupportedException;
1:bbc882f: import java.sql.SQLInput;
1:bbc882f: import java.sql.SQLOutput;
1:bbc882f: import java.sql.SQLWarning;
1:bbc882f: import java.sql.SQLXML;
1:bbc882f: import java.sql.Statement;
1:bbc882f: import java.sql.Struct;
1:bbc882f: import java.sql.Time;
1:bbc882f: import java.sql.Timestamp;
1:d847ced: import java.util.Arrays;
1:d847ced: import java.util.ArrayList;
1:bbc882f: import java.util.Calendar;
1:bbc882f: import java.util.Map;
1:eac0369: 
138:eac0369: /**
1:ab582b3: 	An abstract implementation of ResultSet that is useful
1:17754f8: 	when writing table functions, read-only VTIs (virtual table interface), and
1:17754f8: 	the ResultSets returned by executeQuery in read-write VTI classes.
1:eac0369: 	
1:bbc882f: 	This class implements most of the methods of the JDBC 4.0 interface java.sql.ResultSet,
1:eac0369: 	each one throwing a  SQLException with the name of the method. 
1:eac0369: 	A concrete subclass can then just implement the methods not implemented here 
1:eac0369: 	and override any methods it needs to implement for correct functionality.
1:eac0369: 	<P>
1:eac0369: 	The methods not implemented here are
1:eac0369: 	<UL>
1:eac0369: 	<LI>next()
1:eac0369: 	<LI>close()
1:eac0369: 	</UL>
1:eac0369: 	<P>
1:eac0369: 
1:17754f8: 	For table functions and virtual tables, the database engine only calls methods defined
1:ab582b3: 	in the JDBC 2.0 definition of java.sql.ResultSet.
1:eac0369:  */
1:29007f0: public abstract class VTITemplate   implements ResultSet, AwareVTI
1:ab582b3: {
1:29007f0:     private VTIContext  _vtiContext;
1:29007f0:     
1:bbc882f:     public  boolean 	isWrapperFor(Class<?> iface) throws SQLException { throw notImplemented( "isWrapperFor" ); }
1:bbc882f:     public  <T> T unwrap(Class<T> iface) throws SQLException { throw notImplemented( "unwrap" ); }
1:eac0369: 
1:bbc882f:     public  ResultSetMetaData   getMetaData() throws SQLException { throw notImplemented( "getMetaData" ); }
1:bbc882f:     
1:ab582b3:     // If you implement findColumn() yourself, then the following overrides
1:ab582b3:     // mean that you only have to implement the getXXX(int) methods. You
1:ab582b3:     // don't have to also implement the getXXX(String) methods.
1:ab582b3:     public String getString(String columnName) throws SQLException { return getString(findColumn(columnName)); }
1:ab582b3:     public boolean getBoolean(String columnName) throws SQLException { return getBoolean(findColumn(columnName)); }
1:ab582b3:     public byte getByte(String columnName) throws SQLException { return getByte(findColumn(columnName)); }
1:ab582b3:     public short getShort(String columnName) throws SQLException { return getShort(findColumn(columnName)); }
1:ab582b3:     public int getInt(String columnName) throws SQLException { return getInt(findColumn(columnName)); }
1:ab582b3:     public long getLong(String columnName) throws SQLException { return getLong(findColumn(columnName)); }
1:ab582b3:     public float getFloat(String columnName) throws SQLException { return getFloat(findColumn(columnName)); }
1:ab582b3:     public double getDouble(String columnName) throws SQLException { return getDouble(findColumn(columnName)); }
1:f9a152b:     @Deprecated
1:ab582b3:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException { return getBigDecimal(findColumn(columnName), scale); }
1:ab582b3:     public byte[] getBytes(String columnName) throws SQLException { return getBytes(findColumn(columnName)); }
1:ab582b3:     public java.sql.Date getDate(String columnName) throws SQLException { return getDate(findColumn(columnName)); }
1:ab582b3:     public java.sql.Time getTime(String columnName) throws SQLException { return getTime(findColumn(columnName)); }
1:ab582b3:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException { return getTimestamp(findColumn(columnName)); }
1:ab582b3:     public Object getObject(String columnName) throws SQLException { return getObject(findColumn(columnName)); }
1:ab098e2:     public <T> T getObject(String columnName, Class<T> type) throws SQLException { return getObject(findColumn(columnName), type); }
1:ab582b3: 	public BigDecimal getBigDecimal(String columnName) throws SQLException { return getBigDecimal(findColumn(columnName)); }
1:eac0369: 
1:bbc882f:     //
1:bbc882f:     // java.sql.ResultSet calls, passed through to our result set.
1:bbc882f:     //
1:bbc882f: 
1:bbc882f:     public boolean wasNull() throws SQLException { throw notImplemented( "wasNull" ); }
1:bbc882f:     public String getString(int columnIndex) throws SQLException { throw notImplemented( "getString" ); }
1:bbc882f:     public boolean getBoolean(int columnIndex) throws SQLException { throw notImplemented( "getBoolean" ); }
1:bbc882f:     public byte getByte(int columnIndex) throws SQLException { throw notImplemented( "getByte" ); }
1:bbc882f:     public short getShort(int columnIndex) throws SQLException { throw notImplemented( "getShort" ); }
1:bbc882f:     public int getInt(int columnIndex) throws SQLException { throw notImplemented( "getInt" ); }
1:bbc882f:     public long getLong(int columnIndex) throws SQLException { throw notImplemented( "getLong" ); }
1:bbc882f:     public float getFloat(int columnIndex) throws SQLException { throw notImplemented( "getFloat" ); }
1:bbc882f:     public double getDouble(int columnIndex) throws SQLException { throw notImplemented( "getDouble" ); }
1:f9a152b:     @Deprecated
1:bbc882f:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException { throw notImplemented( "getBigDecimal" ); }
1:bbc882f:     public byte[] getBytes(int columnIndex) throws SQLException { throw notImplemented( "] getBytes" ); }
1:bbc882f:     public java.sql.Date getDate(int columnIndex) throws SQLException { throw notImplemented( "sql.Date getDate" ); }
1:bbc882f:     public java.sql.Time getTime(int columnIndex) throws SQLException { throw notImplemented( "sql.Time getTime" ); }
1:bbc882f:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException { throw notImplemented( "sql.Timestamp getTimestamp" ); }
1:bbc882f:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException { throw notImplemented( "io.InputStream getAsciiStream" ); }
1:f9a152b:     @Deprecated
1:bbc882f:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException { throw notImplemented( "io.InputStream getUnicodeStream" ); }
1:bbc882f:     public java.io.InputStream getBinaryStream(int columnIndex) throws SQLException { throw notImplemented( "io.InputStream getBinaryStream" ); }
1:bbc882f:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getAsciiStream" ); }
1:f9a152b:     @Deprecated
1:bbc882f:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getUnicodeStream" ); }
1:bbc882f:     public java.io.InputStream getBinaryStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getBinaryStream" ); }
1:bbc882f:     public SQLWarning getWarnings() throws SQLException { return null; }
1:bbc882f:     public void clearWarnings() throws SQLException { throw notImplemented( "clearWarnings" ); }
1:bbc882f:     public String getCursorName() throws SQLException { throw notImplemented( "getCursorName" ); }
1:bbc882f:     public Object getObject(int columnIndex) throws SQLException { throw notImplemented( "getObject" ); }
1:ab098e2:     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException { throw notImplemented( "getObject" ); }
1:bbc882f:     public int findColumn(String columnName) throws SQLException { throw notImplemented( "findColumn" ); }
1:bbc882f:     public java.io.Reader getCharacterStream(int columnIndex) throws SQLException { throw notImplemented( "io.Reader getCharacterStream" ); }
1:bbc882f:     public java.io.Reader getCharacterStream(String columnName) throws SQLException { throw notImplemented( "io.Reader getCharacterStream" ); }
1:bbc882f:     public BigDecimal getBigDecimal(int columnIndex) throws SQLException { throw notImplemented( "getBigDecimal" ); }
1:bbc882f:     public boolean isBeforeFirst() throws SQLException { throw notImplemented( "isBeforeFirst" ); }
1:bbc882f:     public boolean isAfterLast() throws SQLException { throw notImplemented( "isAfterLast" ); }
1:bbc882f:     public boolean isFirst() throws SQLException { throw notImplemented( "isFirst" ); }
1:bbc882f:     public boolean isLast() throws SQLException { throw notImplemented( "isLast" ); }
1:bbc882f:     public void beforeFirst() throws SQLException { throw notImplemented( "beforeFirst" ); }
1:bbc882f:     public void afterLast() throws SQLException { throw notImplemented( "afterLast" ); }
1:bbc882f:     public boolean first() throws SQLException { throw notImplemented( "first" ); }
1:bbc882f:     public boolean last() throws SQLException { throw notImplemented( "last" ); }
1:bbc882f:     public boolean isClosed() throws SQLException { throw notImplemented( "isClosed" ); }
1:bbc882f:     public int getHoldability() throws SQLException { throw notImplemented( "getHoldability" ); }
1:bbc882f:     public int getRow() throws SQLException { throw notImplemented( "getRow" ); }
1:bbc882f:     public boolean absolute(int row) throws SQLException { throw notImplemented( "absolute" ); }
1:bbc882f:     public boolean relative(int rows) throws SQLException { throw notImplemented( "relative" ); }
1:bbc882f:     public boolean previous() throws SQLException { throw notImplemented( "previous" ); }
1:bbc882f:     public void setFetchDirection(int direction) throws SQLException { throw notImplemented( "setFetchDirection" ); }
1:bbc882f:     public int getFetchDirection() throws SQLException { throw notImplemented( "getFetchDirection" ); }
1:bbc882f:     public void setFetchSize(int rows) throws SQLException { throw notImplemented( "setFetchSize" ); }
1:bbc882f:     public int getFetchSize() throws SQLException { throw notImplemented( "getFetchSize" ); }
1:bbc882f:     public int getType() throws SQLException { throw notImplemented( "getType" ); }
1:bbc882f:     public int getConcurrency() throws SQLException { throw notImplemented( "getConcurrency" ); }
1:bbc882f:     public boolean rowUpdated() throws SQLException { throw notImplemented( "rowUpdated" ); }
1:bbc882f:     public boolean rowInserted() throws SQLException { throw notImplemented( "rowInserted" ); }
1:bbc882f:     public boolean rowDeleted() throws SQLException { throw notImplemented( "rowDeleted" ); }
1:bbc882f:     public void updateNull(int columnIndex) throws SQLException { throw notImplemented( "updateNull" ); }
1:bbc882f:     public void updateBoolean(int columnIndex, boolean x) throws SQLException { throw notImplemented( "updateBoolean" ); }
1:bbc882f:     public void updateByte(int columnIndex, byte x) throws SQLException { throw notImplemented( "updateByte" ); }
1:bbc882f:     public void updateBytes(int columnIndex, byte[] x) throws SQLException { throw notImplemented( "updateBytes" ); }
1:bbc882f:     public void updateShort(int columnIndex, short x) throws SQLException { throw notImplemented( "updateShort" ); }
1:bbc882f:     public void updateInt(int columnIndex, int x) throws SQLException { throw notImplemented( "updateInt" ); }
1:bbc882f:     public void updateLong(int columnIndex, long x) throws SQLException { throw notImplemented( "updateLong" ); }
1:bbc882f:     public void updateFloat(int columnIndex, float x) throws SQLException { throw notImplemented( "updateFloat" ); }
1:bbc882f:     public void updateDouble(int columnIndex, double x) throws SQLException { throw notImplemented( "updateDouble" ); }
1:bbc882f:     public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException { throw notImplemented( "updateBigDecimal" ); }
1:bbc882f:     public void updateString(int columnIndex, String x) throws SQLException { throw notImplemented( "updateString" ); }
1:bbc882f:     public void updateDate(int columnIndex, java.sql.Date x) throws SQLException { throw notImplemented( "updateDate" ); }
1:bbc882f:     public void updateTime(int columnIndex, java.sql.Time x) throws SQLException { throw notImplemented( "updateTime" ); }
1:bbc882f:     public void updateTimestamp(int columnIndex, java.sql.Timestamp x) throws SQLException { throw notImplemented( "updateTimestamp" ); }
1:bbc882f:     public void updateAsciiStream(int columnIndex, InputStream x ) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:bbc882f:     public void updateAsciiStream(int columnIndex, InputStream x, int length ) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:bbc882f:     public void updateAsciiStream(int columnIndex, InputStream x, long length ) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:bbc882f: 	public void updateBinaryStream(int columnIndex, InputStream x)  throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1:bbc882f: 	public void updateBinaryStream(int columnIndex, InputStream x, int length)  throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1:bbc882f: 	public void updateBinaryStream(int columnIndex, InputStream x, long length)  throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1:bbc882f: 	public void updateCharacterStream(int columnIndex, java.io.Reader x ) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1:bbc882f: 	public void updateCharacterStream(int columnIndex, java.io.Reader x, long length ) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1:bbc882f: 	public void updateCharacterStream(int columnIndex, java.io.Reader x, int length ) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1:bbc882f: 	public void updateObject(int columnIndex, Object x, int scale) throws SQLException { throw notImplemented( "updateObject" ); }
1:bbc882f: 	public void updateObject(int columnIndex, Object x) throws SQLException { throw notImplemented( "updateObject" ); }
1:bbc882f: 	public void updateNull(String columnName) throws SQLException { throw notImplemented( "updateNull" ); }
1:bbc882f: 	public void updateBoolean(String columnName, boolean x) throws SQLException { throw notImplemented( "updateBoolean" ); }
1:bbc882f: 	public void updateByte(String columnName, byte x) throws SQLException { throw notImplemented( "updateByte" ); }
1:bbc882f: 	public void updateShort(String columnName, short x) throws SQLException { throw notImplemented( "updateShort" ); }
1:bbc882f: 	public void updateInt(String columnName, int x) throws SQLException { throw notImplemented( "updateInt" ); }
1:bbc882f: 	public void updateLong(String columnName, long x) throws SQLException { throw notImplemented( "updateLong" ); }
1:bbc882f: 	public void updateFloat(String columnName, float x) throws SQLException { throw notImplemented( "updateFloat" ); }
1:bbc882f: 	public void updateDouble(String columnName, double x) throws SQLException { throw notImplemented( "updateDouble" ); }
1:bbc882f: 	public void updateBigDecimal(String columnName, BigDecimal x) throws SQLException { throw notImplemented( "updateBigDecimal" ); }
1:bbc882f: 	public void updateString(String columnName, String x) throws SQLException { throw notImplemented( "updateString" ); }
1:bbc882f: 	public void updateBytes(String columnName, byte[] x) throws SQLException { throw notImplemented( "updateBytes" ); }
1:bbc882f: 	public void updateDate(String columnName, java.sql.Date x) throws SQLException { throw notImplemented( "updateDate" ); }
1:bbc882f: 	public void updateTime(String columnName, java.sql.Time x) throws SQLException { throw notImplemented( "updateTime" ); }
1:bbc882f: 	public void updateTimestamp(String columnName, java.sql.Timestamp x) throws SQLException { throw notImplemented( "updateTimestamp" ); }
1:bbc882f: 	public void updateAsciiStream(String columnName, java.io.InputStream x) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:bbc882f: 	public void updateAsciiStream(String columnName, java.io.InputStream x, int length) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:bbc882f: 	public void updateAsciiStream(String columnName, java.io.InputStream x, long length) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:bbc882f: 	public void updateBinaryStream(String columnName, java.io.InputStream x) throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1:bbc882f: 	public void updateBinaryStream(String columnName, java.io.InputStream x, int length) throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1:bbc882f: 	public void updateBinaryStream(String columnName, java.io.InputStream x, long length) throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1:bbc882f: 	public void updateCharacterStream(String columnName, java.io.Reader x) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1:bbc882f: 	public void updateCharacterStream(String columnName, java.io.Reader x, long length) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1:bbc882f: 	public void updateCharacterStream(String columnName, java.io.Reader x, int length) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1:bbc882f: 	public void updateObject(String columnName, Object x, int scale) throws SQLException { throw notImplemented( "updateObject" ); }
1:bbc882f: 	public void updateObject(String columnName, Object x) throws SQLException { throw notImplemented( "updateObject" ); }
1:bbc882f: 	public void insertRow() throws SQLException { throw notImplemented( "insertRow" ); }
1:bbc882f: 	public void updateRow() throws SQLException { throw notImplemented( "updateRow" ); }
1:bbc882f: 	public void deleteRow() throws SQLException { throw notImplemented( "deleteRow" ); }
1:bbc882f: 	public void refreshRow() throws SQLException { throw notImplemented( "refreshRow" ); }
1:bbc882f: 	public void cancelRowUpdates() throws SQLException { throw notImplemented( "cancelRowUpdates" ); }
1:bbc882f: 	public void moveToInsertRow() throws SQLException { throw notImplemented( "moveToInsertRow" ); }
1:bbc882f: 	public void moveToCurrentRow() throws SQLException { throw notImplemented( "moveToCurrentRow" ); }
1:bbc882f: 	public Statement getStatement() throws SQLException { throw notImplemented( "getStatement" ); }
1:bbc882f: 	public java.sql.Date getDate(int columnIndex, Calendar cal) throws SQLException { throw notImplemented( "sql.Date getDate" ); }
1:bbc882f: 	public java.sql.Date getDate(String columnName, Calendar cal) throws SQLException { throw notImplemented( "sql.Date getDate" ); }
1:bbc882f: 	public java.sql.Time getTime(int columnIndex, Calendar cal) throws SQLException { throw notImplemented( "sql.Time getTime" ); }
1:bbc882f: 	public java.sql.Time getTime(String columnName, Calendar cal) throws SQLException { throw notImplemented( "sql.Time getTime" ); }
1:bbc882f: 	public java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException { throw notImplemented( "sql.Timestamp getTimestamp" ); }
1:bbc882f: 	public java.sql.Timestamp getTimestamp(String columnName, Calendar cal) throws SQLException { throw notImplemented( "sql.Timestamp getTimestamp" ); }
1:bbc882f: 	public URL getURL(int columnIndex) throws SQLException { throw notImplemented( "getURL" ); }
1:bbc882f: 	public URL getURL(String columnName) throws SQLException { throw notImplemented( "getURL" ); }
1:bbc882f: 	public Object getObject(int i, java.util.Map map) throws SQLException { throw notImplemented( "getObject" ); }
1:bbc882f: 	public Ref getRef(int i) throws SQLException { throw notImplemented( "getRef" ); }
1:bbc882f: 	public Blob getBlob(int i) throws SQLException { throw notImplemented( "getBlob" ); }
1:bbc882f: 	public Clob getClob(int i) throws SQLException { throw notImplemented( "getClob" ); }
1:bbc882f: 	public Array getArray(int i) throws SQLException { throw notImplemented( "getArray" ); }
1:bbc882f: 	public Object getObject(String colName, java.util.Map map) throws SQLException { throw notImplemented( "getObject" ); }
1:bbc882f: 	public Ref getRef(String colName) throws SQLException { throw notImplemented( "getRef" ); }
1:bbc882f: 	public Blob getBlob(String colName) throws SQLException { throw notImplemented( "getBlob" ); }
1:bbc882f: 	public Clob getClob(String colName) throws SQLException { throw notImplemented( "getClob" ); }
1:bbc882f: 	public Array getArray(String colName) throws SQLException { throw notImplemented( "getArray" ); }
1:bbc882f:     public SQLXML getSQLXML(int columnIndex) throws SQLException { throw notImplemented( "getSQLXML" ); }
1:bbc882f:     public SQLXML getSQLXML(String columnLabel) throws SQLException { throw notImplemented( "getSQLXML" ); }
1:bbc882f: 	public void updateRef(int columnIndex, Ref x) throws SQLException { throw notImplemented( "updateRef" ); }
1:bbc882f: 	public void updateRef(String columnName, Ref x) throws SQLException { throw notImplemented( "updateRef" ); }
1:bbc882f: 	public void updateBlob(int columnIndex, Blob x) throws SQLException { throw notImplemented( "updateBlob" ); }
1:bbc882f: 	public void updateBlob(String columnName, Blob x) throws SQLException { throw notImplemented( "updateBlob" ); }
1:bbc882f: 	public void updateBlob(int columnIndex, InputStream x) throws SQLException { throw notImplemented( "updateBlob" ); }
1:bbc882f: 	public void updateBlob(int columnIndex, InputStream x, long pos) throws SQLException { throw notImplemented( "updateBlob" ); }
1:bbc882f: 	public void updateBlob(String columnName, InputStream x) throws SQLException { throw notImplemented( "updateBlob" ); }
1:bbc882f: 	public void updateBlob(String columnName, InputStream x, long pos) throws SQLException { throw notImplemented( "updateBlob" ); }
1:bbc882f: 	public void updateClob(int columnIndex, Clob x) throws SQLException { throw notImplemented( "updateClob" ); }
1:bbc882f: 	public void updateClob(String columnName, Clob x) throws SQLException { throw notImplemented( "updateClob" ); }
1:bbc882f: 	public void updateClob(int columnIndex, Reader x) throws SQLException { throw notImplemented( "updateClob" ); }
1:bbc882f: 	public void updateClob(int columnIndex, Reader x, long pos) throws SQLException { throw notImplemented( "updateClob" ); }
1:bbc882f: 	public void updateClob(String columnName, Reader x) throws SQLException { throw notImplemented( "updateClob" ); }
1:bbc882f: 	public void updateClob(String columnName, Reader x, long pos) throws SQLException { throw notImplemented( "updateClob" ); }
1:bbc882f: 	public void updateArray(int columnIndex, Array x) throws SQLException { throw notImplemented( "updateArray" ); }
1:bbc882f: 	public void updateArray(String columnName, Array x) throws SQLException { throw notImplemented( "updateArray" ); }
1:bbc882f: 
1:bbc882f:     public  Reader 	getNCharacterStream(int columnIndex) throws SQLException { throw notImplemented( "getNCharacterStream" ); }
1:bbc882f:     public  Reader 	getNCharacterStream(String columnLabel) throws SQLException { throw notImplemented( "getNCharacterStream" ); }
1:bbc882f:     public  NClob 	getNClob(int columnIndex) throws SQLException { throw notImplemented( "getNClob" ); }
1:bbc882f:     public  NClob 	getNClob(String columnLabel) throws SQLException { throw notImplemented( "getNClob" ); }
1:bbc882f:     public  String 	getNString(int columnIndex) throws SQLException { throw notImplemented( "getNString" ); }
1:bbc882f:     public  String 	getNString(String columnLabel) throws SQLException { throw notImplemented( "getNString" ); }
1:bbc882f:     public  RowId 	getRowId(int columnIndex) throws SQLException { throw notImplemented( "getRowId" ); }
1:bbc882f:     public  RowId 	getRowId(String columnLabel) throws SQLException { throw notImplemented( "getRowId" ); }
1:bbc882f:     
1:bbc882f:     public  void 	updateNCharacterStream(int columnIndex, Reader x) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:bbc882f:     public  void 	updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:bbc882f:     public  void 	updateNCharacterStream(String columnLabel, Reader reader) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:bbc882f:     public  void 	updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:bbc882f:     public  void 	updateNClob(int columnIndex, NClob nClob) throws SQLException { throw notImplemented( "updateNClob" ); }
1:bbc882f:     public  void 	updateNClob(int columnIndex, Reader reader) throws SQLException { throw notImplemented( "updateNClob" ); }
1:bbc882f:     public  void 	updateNClob(int columnIndex, Reader reader, long length) throws SQLException { throw notImplemented( "updateNClob" ); }
1:bbc882f:     public  void 	updateNClob(String columnLabel, NClob nClob) throws SQLException { throw notImplemented( "updateNClob" ); }
1:bbc882f:     public  void 	updateNClob(String columnLabel, Reader reader) throws SQLException { throw notImplemented( "updateNClob" ); }
1:bbc882f:     public  void 	updateNClob(String columnLabel, Reader reader, long length) throws SQLException { throw notImplemented( "updateNClob" ); }
1:bbc882f:     public  void 	updateNString(int columnIndex, String nString) throws SQLException { throw notImplemented( "updateNString" ); }
1:bbc882f:     public  void 	updateNString(String columnLabel, String nString) throws SQLException { throw notImplemented( "updateNString" ); }
1:bbc882f:     public  void 	updateRowId(int columnIndex, RowId x) throws SQLException { throw notImplemented( "updateRowId" ); }
1:bbc882f:     public  void 	updateRowId(String columnLabel, RowId x) throws SQLException { throw notImplemented( "updateRowId" ); }
1:bbc882f:     public  void 	updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException { throw notImplemented( "updateSQLXML" ); }
1:bbc882f:     public  void 	updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException { throw notImplemented( "updateSQLXML" ); }
1:bbc882f:     
1:bbc882f:     /////////////////////////////////////////////////////////////////////////
1:bbc882f:     //
1:29007f0:     //  AwareVTI BEHAVIOR
1:29007f0:     //
1:29007f0:     /////////////////////////////////////////////////////////////////////////
1:29007f0: 
1:29007f0:     public  VTIContext  getContext() { return _vtiContext; }
1:29007f0:     public  void    setContext( VTIContext context )    { _vtiContext = context; }
1:29007f0: 
1:29007f0:     /////////////////////////////////////////////////////////////////////////
1:29007f0:     //
1:bbc882f:     //  MINIONS
1:bbc882f:     //
1:bbc882f:     /////////////////////////////////////////////////////////////////////////
1:bbc882f: 
1:bbc882f:     /**
1:bbc882f:      * <p>
1:bbc882f:      * Create a SQLException saying that the calling method is not implemented.
1:bbc882f:      * </p>
1:bbc882f:      */
1:bbc882f:     protected SQLException    notImplemented( String methodName )
1:bbc882f:     {
1:996ca72:         return new SQLFeatureNotSupportedException( "Unimplemented method: " + methodName );
1:bbc882f:     }
1:bbc882f:     
1:d847ced:     /**
1:d847ced:      * <p>
1:d847ced:      * Get an array of descriptors for the return table shape declared for this
1:d847ced:      * AwareVTI by its CREATE FUNCTION statement.
1:d847ced:      * </p>
1:d847ced:      */
1:d847ced:     public  ColumnDescriptor[]  getReturnTableSignature( Connection currentConnection )
1:d847ced:         throws SQLException
1:d847ced:     {
1:d847ced:         ArrayList<ColumnDescriptor> columns = new ArrayList<ColumnDescriptor>();
1:d847ced:         VTIContext  context = getContext();
1:d847ced:         String      schema = context.vtiSchema();
1:d847ced:         String      function = context.vtiTable();
1:d847ced:         ResultSet   rs = currentConnection.getMetaData().getFunctionColumns( null, schema, function, "%" );
1:d847ced: 
1:d847ced:         try {
1:d847ced:             while ( rs.next() )
1:d847ced:             {
1:d847ced:                 if ( rs.getInt( "COLUMN_TYPE" ) == DatabaseMetaData.functionColumnResult )
1:d847ced:                 {
1:d847ced:                     ColumnDescriptor    cd = new ColumnDescriptor
1:d847ced:                         (
1:d847ced:                          rs.getString( "COLUMN_NAME" ),
1:d847ced:                          rs.getInt( "DATA_TYPE" ),
1:d847ced:                          rs.getInt( "PRECISION" ),
1:d847ced:                          rs.getInt( "SCALE" ),
1:d847ced:                          rs.getString( "TYPE_NAME" ),
1:d847ced:                          rs.getInt( "ORDINAL_POSITION" )
1:d847ced:                          );
1:d847ced:                     columns.add( cd );
1:d847ced:                 }
1:d847ced:             }
1:d847ced:         }
1:d847ced:         finally { rs.close(); }
1:d847ced: 
1:d847ced:         ColumnDescriptor[]  result = new ColumnDescriptor[ columns.size() ];
1:d847ced:         columns.toArray( result );
1:d847ced:         Arrays.sort( result );
1:d847ced: 
1:d847ced:         return result;
1:d847ced:     }
1:d847ced: 
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced:     //
1:d847ced:     // NESTED CLASSES
1:d847ced:     //
1:d847ced:     ///////////////////////////////////////////////////////////////////////////////////
1:d847ced: 
1:d847ced:     /**
1:d847ced:      * <p>
1:d847ced:      * A struct class which is useful for describing columns and parameters.
1:d847ced:      * </p>
1:d847ced:      */
1:d847ced:     public  static  final   class   ColumnDescriptor   implements  Comparable<ColumnDescriptor>
1:d847ced:     {
1:d847ced:         public  final   String  columnName;
1:d847ced:         public  final   int jdbcType;
1:d847ced:         public  final   int precision;
1:d847ced:         public  final   int scale;
1:d847ced:         public  final   String  typeName;
1:d847ced:         public  final   int ordinalPosition;
1:d847ced: 
1:d847ced:         public  ColumnDescriptor
1:d847ced:             (
1:d847ced:              String columnName,
1:d847ced:              int    jdbcType,
1:d847ced:              int    precision,
1:d847ced:              int    scale,
1:d847ced:              String typeName,
1:d847ced:              int    ordinalPosition
1:d847ced:              )
1:d847ced:         {
1:d847ced:             this.columnName = columnName;
1:d847ced:             this.jdbcType = jdbcType;
1:d847ced:             this.precision = precision;
1:d847ced:             this.scale = scale;
1:d847ced:             this.typeName =typeName;
1:d847ced:             this.ordinalPosition = ordinalPosition;
1:d847ced:         }
1:d847ced: 
1:fcf3e6d:         /** Sort on ordinalPosition */
1:d847ced:         public  int compareTo( ColumnDescriptor that ) { return this.ordinalPosition - that.ordinalPosition; }
1:d847ced:         public  boolean equals( Object other )
1:d847ced:         {
1:d847ced:             if ( other == null ) { return false; }
1:d847ced:             else if ( !(other instanceof ColumnDescriptor) ) { return false; }
1:d847ced:             else { return (compareTo( (ColumnDescriptor) other ) == 0); }
1:d847ced:         }
1:d847ced:         public  int hashCode()  { return columnName.hashCode(); }
1:fcf3e6d:         public  String  toString() { return columnName; }
1:d847ced:     }
1:d847ced: 
137:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:fcf3e6d
/////////////////////////////////////////////////////////////////////////
1:         /** Sort on ordinalPosition */
/////////////////////////////////////////////////////////////////////////
1:         public  String  toString() { return columnName; }
commit:d847ced
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Get an array of descriptors for the return table shape declared for this
1:      * AwareVTI by its CREATE FUNCTION statement.
1:      * </p>
1:      */
1:     public  ColumnDescriptor[]  getReturnTableSignature( Connection currentConnection )
1:         throws SQLException
1:     {
1:         ArrayList<ColumnDescriptor> columns = new ArrayList<ColumnDescriptor>();
1:         VTIContext  context = getContext();
1:         String      schema = context.vtiSchema();
1:         String      function = context.vtiTable();
1:         ResultSet   rs = currentConnection.getMetaData().getFunctionColumns( null, schema, function, "%" );
1: 
1:         try {
1:             while ( rs.next() )
1:             {
1:                 if ( rs.getInt( "COLUMN_TYPE" ) == DatabaseMetaData.functionColumnResult )
1:                 {
1:                     ColumnDescriptor    cd = new ColumnDescriptor
1:                         (
1:                          rs.getString( "COLUMN_NAME" ),
1:                          rs.getInt( "DATA_TYPE" ),
1:                          rs.getInt( "PRECISION" ),
1:                          rs.getInt( "SCALE" ),
1:                          rs.getString( "TYPE_NAME" ),
1:                          rs.getInt( "ORDINAL_POSITION" )
1:                          );
1:                     columns.add( cd );
1:                 }
1:             }
1:         }
1:         finally { rs.close(); }
1: 
1:         ColumnDescriptor[]  result = new ColumnDescriptor[ columns.size() ];
1:         columns.toArray( result );
1:         Arrays.sort( result );
1: 
1:         return result;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * A struct class which is useful for describing columns and parameters.
1:      * </p>
1:      */
1:     public  static  final   class   ColumnDescriptor   implements  Comparable<ColumnDescriptor>
1:     {
1:         public  final   String  columnName;
1:         public  final   int jdbcType;
1:         public  final   int precision;
1:         public  final   int scale;
1:         public  final   String  typeName;
1:         public  final   int ordinalPosition;
1: 
1:         public  ColumnDescriptor
1:             (
1:              String columnName,
1:              int    jdbcType,
1:              int    precision,
1:              int    scale,
1:              String typeName,
1:              int    ordinalPosition
1:              )
1:         {
1:             this.columnName = columnName;
1:             this.jdbcType = jdbcType;
1:             this.precision = precision;
1:             this.scale = scale;
1:             this.typeName =typeName;
1:             this.ordinalPosition = ordinalPosition;
1:         }
1: 
1:         public  int compareTo( ColumnDescriptor that ) { return this.ordinalPosition - that.ordinalPosition; }
1:         public  boolean equals( Object other )
1:         {
1:             if ( other == null ) { return false; }
1:             else if ( !(other instanceof ColumnDescriptor) ) { return false; }
1:             else { return (compareTo( (ColumnDescriptor) other ) == 0); }
1:         }
1:         public  int hashCode()  { return columnName.hashCode(); }
1:     }
1: 
commit:29007f0
/////////////////////////////////////////////////////////////////////////
1: public abstract class VTITemplate   implements ResultSet, AwareVTI
1:     private VTIContext  _vtiContext;
1:     
/////////////////////////////////////////////////////////////////////////
1:     //  AwareVTI BEHAVIOR
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     public  VTIContext  getContext() { return _vtiContext; }
1:     public  void    setContext( VTIContext context )    { _vtiContext = context; }
1: 
1:     /////////////////////////////////////////////////////////////////////////
1:     //
commit:996ca72
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLFeatureNotSupportedException;
/////////////////////////////////////////////////////////////////////////
1:         return new SQLFeatureNotSupportedException( "Unimplemented method: " + methodName );
commit:ab098e2
/////////////////////////////////////////////////////////////////////////
0: @SuppressWarnings("deprecation")
/////////////////////////////////////////////////////////////////////////
1:     public <T> T getObject(String columnName, Class<T> type) throws SQLException { return getObject(findColumn(columnName), type); }
/////////////////////////////////////////////////////////////////////////
1:     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException { throw notImplemented( "getObject" ); }
commit:bbc882f
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.io.Reader;
1: import java.net.URL;
1: import java.sql.Array;
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.Date;
1: import java.sql.NClob;
1: import java.sql.Ref;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.RowId;
1: import java.sql.SQLData;
1: import java.sql.SQLException;
1: import java.sql.SQLInput;
1: import java.sql.SQLOutput;
1: import java.sql.SQLWarning;
1: import java.sql.SQLXML;
1: import java.sql.Statement;
1: import java.sql.Struct;
1: import java.sql.Time;
1: import java.sql.Timestamp;
1: import java.util.Calendar;
1: import java.util.Map;
1: 	This class implements most of the methods of the JDBC 4.0 interface java.sql.ResultSet,
/////////////////////////////////////////////////////////////////////////
0: public abstract class VTITemplate   implements ResultSet
1:     public  boolean 	isWrapperFor(Class<?> iface) throws SQLException { throw notImplemented( "isWrapperFor" ); }
1:     public  <T> T unwrap(Class<T> iface) throws SQLException { throw notImplemented( "unwrap" ); }
1:     public  ResultSetMetaData   getMetaData() throws SQLException { throw notImplemented( "getMetaData" ); }
1:     
/////////////////////////////////////////////////////////////////////////
1:     //
1:     // java.sql.ResultSet calls, passed through to our result set.
1:     //
1: 
1:     public boolean wasNull() throws SQLException { throw notImplemented( "wasNull" ); }
1:     public String getString(int columnIndex) throws SQLException { throw notImplemented( "getString" ); }
1:     public boolean getBoolean(int columnIndex) throws SQLException { throw notImplemented( "getBoolean" ); }
1:     public byte getByte(int columnIndex) throws SQLException { throw notImplemented( "getByte" ); }
1:     public short getShort(int columnIndex) throws SQLException { throw notImplemented( "getShort" ); }
1:     public int getInt(int columnIndex) throws SQLException { throw notImplemented( "getInt" ); }
1:     public long getLong(int columnIndex) throws SQLException { throw notImplemented( "getLong" ); }
1:     public float getFloat(int columnIndex) throws SQLException { throw notImplemented( "getFloat" ); }
1:     public double getDouble(int columnIndex) throws SQLException { throw notImplemented( "getDouble" ); }
1:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException { throw notImplemented( "getBigDecimal" ); }
1:     public byte[] getBytes(int columnIndex) throws SQLException { throw notImplemented( "] getBytes" ); }
1:     public java.sql.Date getDate(int columnIndex) throws SQLException { throw notImplemented( "sql.Date getDate" ); }
1:     public java.sql.Time getTime(int columnIndex) throws SQLException { throw notImplemented( "sql.Time getTime" ); }
1:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException { throw notImplemented( "sql.Timestamp getTimestamp" ); }
1:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException { throw notImplemented( "io.InputStream getAsciiStream" ); }
1:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException { throw notImplemented( "io.InputStream getUnicodeStream" ); }
1:     public java.io.InputStream getBinaryStream(int columnIndex) throws SQLException { throw notImplemented( "io.InputStream getBinaryStream" ); }
1:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getAsciiStream" ); }
1:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getUnicodeStream" ); }
1:     public java.io.InputStream getBinaryStream(String columnName) throws SQLException { throw notImplemented( "io.InputStream getBinaryStream" ); }
1:     public SQLWarning getWarnings() throws SQLException { return null; }
1:     public void clearWarnings() throws SQLException { throw notImplemented( "clearWarnings" ); }
1:     public String getCursorName() throws SQLException { throw notImplemented( "getCursorName" ); }
1:     public Object getObject(int columnIndex) throws SQLException { throw notImplemented( "getObject" ); }
1:     public int findColumn(String columnName) throws SQLException { throw notImplemented( "findColumn" ); }
1:     public java.io.Reader getCharacterStream(int columnIndex) throws SQLException { throw notImplemented( "io.Reader getCharacterStream" ); }
1:     public java.io.Reader getCharacterStream(String columnName) throws SQLException { throw notImplemented( "io.Reader getCharacterStream" ); }
1:     public BigDecimal getBigDecimal(int columnIndex) throws SQLException { throw notImplemented( "getBigDecimal" ); }
1:     public boolean isBeforeFirst() throws SQLException { throw notImplemented( "isBeforeFirst" ); }
1:     public boolean isAfterLast() throws SQLException { throw notImplemented( "isAfterLast" ); }
1:     public boolean isFirst() throws SQLException { throw notImplemented( "isFirst" ); }
1:     public boolean isLast() throws SQLException { throw notImplemented( "isLast" ); }
1:     public void beforeFirst() throws SQLException { throw notImplemented( "beforeFirst" ); }
1:     public void afterLast() throws SQLException { throw notImplemented( "afterLast" ); }
1:     public boolean first() throws SQLException { throw notImplemented( "first" ); }
1:     public boolean last() throws SQLException { throw notImplemented( "last" ); }
1:     public boolean isClosed() throws SQLException { throw notImplemented( "isClosed" ); }
1:     public int getHoldability() throws SQLException { throw notImplemented( "getHoldability" ); }
1:     public int getRow() throws SQLException { throw notImplemented( "getRow" ); }
1:     public boolean absolute(int row) throws SQLException { throw notImplemented( "absolute" ); }
1:     public boolean relative(int rows) throws SQLException { throw notImplemented( "relative" ); }
1:     public boolean previous() throws SQLException { throw notImplemented( "previous" ); }
1:     public void setFetchDirection(int direction) throws SQLException { throw notImplemented( "setFetchDirection" ); }
1:     public int getFetchDirection() throws SQLException { throw notImplemented( "getFetchDirection" ); }
1:     public void setFetchSize(int rows) throws SQLException { throw notImplemented( "setFetchSize" ); }
1:     public int getFetchSize() throws SQLException { throw notImplemented( "getFetchSize" ); }
1:     public int getType() throws SQLException { throw notImplemented( "getType" ); }
1:     public int getConcurrency() throws SQLException { throw notImplemented( "getConcurrency" ); }
1:     public boolean rowUpdated() throws SQLException { throw notImplemented( "rowUpdated" ); }
1:     public boolean rowInserted() throws SQLException { throw notImplemented( "rowInserted" ); }
1:     public boolean rowDeleted() throws SQLException { throw notImplemented( "rowDeleted" ); }
1:     public void updateNull(int columnIndex) throws SQLException { throw notImplemented( "updateNull" ); }
1:     public void updateBoolean(int columnIndex, boolean x) throws SQLException { throw notImplemented( "updateBoolean" ); }
1:     public void updateByte(int columnIndex, byte x) throws SQLException { throw notImplemented( "updateByte" ); }
1:     public void updateBytes(int columnIndex, byte[] x) throws SQLException { throw notImplemented( "updateBytes" ); }
1:     public void updateShort(int columnIndex, short x) throws SQLException { throw notImplemented( "updateShort" ); }
1:     public void updateInt(int columnIndex, int x) throws SQLException { throw notImplemented( "updateInt" ); }
1:     public void updateLong(int columnIndex, long x) throws SQLException { throw notImplemented( "updateLong" ); }
1:     public void updateFloat(int columnIndex, float x) throws SQLException { throw notImplemented( "updateFloat" ); }
1:     public void updateDouble(int columnIndex, double x) throws SQLException { throw notImplemented( "updateDouble" ); }
1:     public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException { throw notImplemented( "updateBigDecimal" ); }
1:     public void updateString(int columnIndex, String x) throws SQLException { throw notImplemented( "updateString" ); }
1:     public void updateDate(int columnIndex, java.sql.Date x) throws SQLException { throw notImplemented( "updateDate" ); }
1:     public void updateTime(int columnIndex, java.sql.Time x) throws SQLException { throw notImplemented( "updateTime" ); }
1:     public void updateTimestamp(int columnIndex, java.sql.Timestamp x) throws SQLException { throw notImplemented( "updateTimestamp" ); }
1:     public void updateAsciiStream(int columnIndex, InputStream x ) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:     public void updateAsciiStream(int columnIndex, InputStream x, int length ) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1:     public void updateAsciiStream(int columnIndex, InputStream x, long length ) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1: 	public void updateBinaryStream(int columnIndex, InputStream x)  throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1: 	public void updateBinaryStream(int columnIndex, InputStream x, int length)  throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1: 	public void updateBinaryStream(int columnIndex, InputStream x, long length)  throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1: 	public void updateCharacterStream(int columnIndex, java.io.Reader x ) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1: 	public void updateCharacterStream(int columnIndex, java.io.Reader x, long length ) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1: 	public void updateCharacterStream(int columnIndex, java.io.Reader x, int length ) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1: 	public void updateObject(int columnIndex, Object x, int scale) throws SQLException { throw notImplemented( "updateObject" ); }
1: 	public void updateObject(int columnIndex, Object x) throws SQLException { throw notImplemented( "updateObject" ); }
1: 	public void updateNull(String columnName) throws SQLException { throw notImplemented( "updateNull" ); }
1: 	public void updateBoolean(String columnName, boolean x) throws SQLException { throw notImplemented( "updateBoolean" ); }
1: 	public void updateByte(String columnName, byte x) throws SQLException { throw notImplemented( "updateByte" ); }
1: 	public void updateShort(String columnName, short x) throws SQLException { throw notImplemented( "updateShort" ); }
1: 	public void updateInt(String columnName, int x) throws SQLException { throw notImplemented( "updateInt" ); }
1: 	public void updateLong(String columnName, long x) throws SQLException { throw notImplemented( "updateLong" ); }
1: 	public void updateFloat(String columnName, float x) throws SQLException { throw notImplemented( "updateFloat" ); }
1: 	public void updateDouble(String columnName, double x) throws SQLException { throw notImplemented( "updateDouble" ); }
1: 	public void updateBigDecimal(String columnName, BigDecimal x) throws SQLException { throw notImplemented( "updateBigDecimal" ); }
1: 	public void updateString(String columnName, String x) throws SQLException { throw notImplemented( "updateString" ); }
1: 	public void updateBytes(String columnName, byte[] x) throws SQLException { throw notImplemented( "updateBytes" ); }
1: 	public void updateDate(String columnName, java.sql.Date x) throws SQLException { throw notImplemented( "updateDate" ); }
1: 	public void updateTime(String columnName, java.sql.Time x) throws SQLException { throw notImplemented( "updateTime" ); }
1: 	public void updateTimestamp(String columnName, java.sql.Timestamp x) throws SQLException { throw notImplemented( "updateTimestamp" ); }
1: 	public void updateAsciiStream(String columnName, java.io.InputStream x) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1: 	public void updateAsciiStream(String columnName, java.io.InputStream x, int length) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1: 	public void updateAsciiStream(String columnName, java.io.InputStream x, long length) throws SQLException { throw notImplemented( "updateAsciiStream" ); }
1: 	public void updateBinaryStream(String columnName, java.io.InputStream x) throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1: 	public void updateBinaryStream(String columnName, java.io.InputStream x, int length) throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1: 	public void updateBinaryStream(String columnName, java.io.InputStream x, long length) throws SQLException { throw notImplemented( "updateBinaryStream" ); }
1: 	public void updateCharacterStream(String columnName, java.io.Reader x) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1: 	public void updateCharacterStream(String columnName, java.io.Reader x, long length) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1: 	public void updateCharacterStream(String columnName, java.io.Reader x, int length) throws SQLException { throw notImplemented( "updateCharacterStream" ); }
1: 	public void updateObject(String columnName, Object x, int scale) throws SQLException { throw notImplemented( "updateObject" ); }
1: 	public void updateObject(String columnName, Object x) throws SQLException { throw notImplemented( "updateObject" ); }
1: 	public void insertRow() throws SQLException { throw notImplemented( "insertRow" ); }
1: 	public void updateRow() throws SQLException { throw notImplemented( "updateRow" ); }
1: 	public void deleteRow() throws SQLException { throw notImplemented( "deleteRow" ); }
1: 	public void refreshRow() throws SQLException { throw notImplemented( "refreshRow" ); }
1: 	public void cancelRowUpdates() throws SQLException { throw notImplemented( "cancelRowUpdates" ); }
1: 	public void moveToInsertRow() throws SQLException { throw notImplemented( "moveToInsertRow" ); }
1: 	public void moveToCurrentRow() throws SQLException { throw notImplemented( "moveToCurrentRow" ); }
1: 	public Statement getStatement() throws SQLException { throw notImplemented( "getStatement" ); }
1: 	public java.sql.Date getDate(int columnIndex, Calendar cal) throws SQLException { throw notImplemented( "sql.Date getDate" ); }
1: 	public java.sql.Date getDate(String columnName, Calendar cal) throws SQLException { throw notImplemented( "sql.Date getDate" ); }
1: 	public java.sql.Time getTime(int columnIndex, Calendar cal) throws SQLException { throw notImplemented( "sql.Time getTime" ); }
1: 	public java.sql.Time getTime(String columnName, Calendar cal) throws SQLException { throw notImplemented( "sql.Time getTime" ); }
1: 	public java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException { throw notImplemented( "sql.Timestamp getTimestamp" ); }
1: 	public java.sql.Timestamp getTimestamp(String columnName, Calendar cal) throws SQLException { throw notImplemented( "sql.Timestamp getTimestamp" ); }
1: 	public URL getURL(int columnIndex) throws SQLException { throw notImplemented( "getURL" ); }
1: 	public URL getURL(String columnName) throws SQLException { throw notImplemented( "getURL" ); }
1: 	public Object getObject(int i, java.util.Map map) throws SQLException { throw notImplemented( "getObject" ); }
1: 	public Ref getRef(int i) throws SQLException { throw notImplemented( "getRef" ); }
1: 	public Blob getBlob(int i) throws SQLException { throw notImplemented( "getBlob" ); }
1: 	public Clob getClob(int i) throws SQLException { throw notImplemented( "getClob" ); }
1: 	public Array getArray(int i) throws SQLException { throw notImplemented( "getArray" ); }
1: 	public Object getObject(String colName, java.util.Map map) throws SQLException { throw notImplemented( "getObject" ); }
1: 	public Ref getRef(String colName) throws SQLException { throw notImplemented( "getRef" ); }
1: 	public Blob getBlob(String colName) throws SQLException { throw notImplemented( "getBlob" ); }
1: 	public Clob getClob(String colName) throws SQLException { throw notImplemented( "getClob" ); }
1: 	public Array getArray(String colName) throws SQLException { throw notImplemented( "getArray" ); }
1:     public SQLXML getSQLXML(int columnIndex) throws SQLException { throw notImplemented( "getSQLXML" ); }
1:     public SQLXML getSQLXML(String columnLabel) throws SQLException { throw notImplemented( "getSQLXML" ); }
1: 	public void updateRef(int columnIndex, Ref x) throws SQLException { throw notImplemented( "updateRef" ); }
1: 	public void updateRef(String columnName, Ref x) throws SQLException { throw notImplemented( "updateRef" ); }
1: 	public void updateBlob(int columnIndex, Blob x) throws SQLException { throw notImplemented( "updateBlob" ); }
1: 	public void updateBlob(String columnName, Blob x) throws SQLException { throw notImplemented( "updateBlob" ); }
1: 	public void updateBlob(int columnIndex, InputStream x) throws SQLException { throw notImplemented( "updateBlob" ); }
1: 	public void updateBlob(int columnIndex, InputStream x, long pos) throws SQLException { throw notImplemented( "updateBlob" ); }
1: 	public void updateBlob(String columnName, InputStream x) throws SQLException { throw notImplemented( "updateBlob" ); }
1: 	public void updateBlob(String columnName, InputStream x, long pos) throws SQLException { throw notImplemented( "updateBlob" ); }
1: 	public void updateClob(int columnIndex, Clob x) throws SQLException { throw notImplemented( "updateClob" ); }
1: 	public void updateClob(String columnName, Clob x) throws SQLException { throw notImplemented( "updateClob" ); }
1: 	public void updateClob(int columnIndex, Reader x) throws SQLException { throw notImplemented( "updateClob" ); }
1: 	public void updateClob(int columnIndex, Reader x, long pos) throws SQLException { throw notImplemented( "updateClob" ); }
1: 	public void updateClob(String columnName, Reader x) throws SQLException { throw notImplemented( "updateClob" ); }
1: 	public void updateClob(String columnName, Reader x, long pos) throws SQLException { throw notImplemented( "updateClob" ); }
1: 	public void updateArray(int columnIndex, Array x) throws SQLException { throw notImplemented( "updateArray" ); }
1: 	public void updateArray(String columnName, Array x) throws SQLException { throw notImplemented( "updateArray" ); }
1: 
1:     public  Reader 	getNCharacterStream(int columnIndex) throws SQLException { throw notImplemented( "getNCharacterStream" ); }
1:     public  Reader 	getNCharacterStream(String columnLabel) throws SQLException { throw notImplemented( "getNCharacterStream" ); }
1:     public  NClob 	getNClob(int columnIndex) throws SQLException { throw notImplemented( "getNClob" ); }
1:     public  NClob 	getNClob(String columnLabel) throws SQLException { throw notImplemented( "getNClob" ); }
1:     public  String 	getNString(int columnIndex) throws SQLException { throw notImplemented( "getNString" ); }
1:     public  String 	getNString(String columnLabel) throws SQLException { throw notImplemented( "getNString" ); }
1:     public  RowId 	getRowId(int columnIndex) throws SQLException { throw notImplemented( "getRowId" ); }
1:     public  RowId 	getRowId(String columnLabel) throws SQLException { throw notImplemented( "getRowId" ); }
1:     
1:     public  void 	updateNCharacterStream(int columnIndex, Reader x) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:     public  void 	updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:     public  void 	updateNCharacterStream(String columnLabel, Reader reader) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:     public  void 	updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException { throw notImplemented( "updateNCharacterStream" ); }
1:     public  void 	updateNClob(int columnIndex, NClob nClob) throws SQLException { throw notImplemented( "updateNClob" ); }
1:     public  void 	updateNClob(int columnIndex, Reader reader) throws SQLException { throw notImplemented( "updateNClob" ); }
1:     public  void 	updateNClob(int columnIndex, Reader reader, long length) throws SQLException { throw notImplemented( "updateNClob" ); }
1:     public  void 	updateNClob(String columnLabel, NClob nClob) throws SQLException { throw notImplemented( "updateNClob" ); }
1:     public  void 	updateNClob(String columnLabel, Reader reader) throws SQLException { throw notImplemented( "updateNClob" ); }
1:     public  void 	updateNClob(String columnLabel, Reader reader, long length) throws SQLException { throw notImplemented( "updateNClob" ); }
1:     public  void 	updateNString(int columnIndex, String nString) throws SQLException { throw notImplemented( "updateNString" ); }
1:     public  void 	updateNString(String columnLabel, String nString) throws SQLException { throw notImplemented( "updateNString" ); }
1:     public  void 	updateRowId(int columnIndex, RowId x) throws SQLException { throw notImplemented( "updateRowId" ); }
1:     public  void 	updateRowId(String columnLabel, RowId x) throws SQLException { throw notImplemented( "updateRowId" ); }
1:     public  void 	updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException { throw notImplemented( "updateSQLXML" ); }
1:     public  void 	updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException { throw notImplemented( "updateSQLXML" ); }
1:     
1:     /////////////////////////////////////////////////////////////////////////
1:     //
1:     //  MINIONS
1:     //
1:     /////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Create a SQLException saying that the calling method is not implemented.
1:      * </p>
1:      */
1:     protected SQLException    notImplemented( String methodName )
1:     {
0:         return new SQLException( "Unimplemented method: " + methodName );
1:     }
1:     
commit:ab582b3
/////////////////////////////////////////////////////////////////////////
0: import java.io.InputStream;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	An abstract implementation of ResultSet that is useful
0: 	This class implements most of the methods of the JDBC 3.0 interface java.sql.ResultSet,
/////////////////////////////////////////////////////////////////////////
1: 	in the JDBC 2.0 definition of java.sql.ResultSet.
0: public abstract class VTITemplate extends VTITemplateBase
1: {
0:     // Together with our superclass, the following overrides are a trick
0:     // to allow subclasses to compile on both Java 5 and Java 6
0:     public abstract ResultSetMetaData getMetaData() throws SQLException;
0:     public abstract boolean next() throws SQLException;
0:     public abstract void close() throws SQLException;
1:     // If you implement findColumn() yourself, then the following overrides
1:     // mean that you only have to implement the getXXX(int) methods. You
1:     // don't have to also implement the getXXX(String) methods.
1:     public String getString(String columnName) throws SQLException { return getString(findColumn(columnName)); }
1:     public boolean getBoolean(String columnName) throws SQLException { return getBoolean(findColumn(columnName)); }
1:     public byte getByte(String columnName) throws SQLException { return getByte(findColumn(columnName)); }
1:     public short getShort(String columnName) throws SQLException { return getShort(findColumn(columnName)); }
1:     public int getInt(String columnName) throws SQLException { return getInt(findColumn(columnName)); }
1:     public long getLong(String columnName) throws SQLException { return getLong(findColumn(columnName)); }
1:     public float getFloat(String columnName) throws SQLException { return getFloat(findColumn(columnName)); }
1:     public double getDouble(String columnName) throws SQLException { return getDouble(findColumn(columnName)); }
1:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException { return getBigDecimal(findColumn(columnName), scale); }
1:     public byte[] getBytes(String columnName) throws SQLException { return getBytes(findColumn(columnName)); }
1:     public java.sql.Date getDate(String columnName) throws SQLException { return getDate(findColumn(columnName)); }
1:     public java.sql.Time getTime(String columnName) throws SQLException { return getTime(findColumn(columnName)); }
1:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException { return getTimestamp(findColumn(columnName)); }
1:     public Object getObject(String columnName) throws SQLException { return getObject(findColumn(columnName)); }
1: 	public BigDecimal getBigDecimal(String columnName) throws SQLException { return getBigDecimal(findColumn(columnName)); }
commit:17754f8
/////////////////////////////////////////////////////////////////////////
1: 	when writing table functions, read-only VTIs (virtual table interface), and
1: 	the ResultSets returned by executeQuery in read-write VTI classes.
/////////////////////////////////////////////////////////////////////////
1: 	For table functions and virtual tables, the database engine only calls methods defined
0: 	as table functions and virtual tables.
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f9a152b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
1:     @Deprecated
1:     @Deprecated
commit:ca998af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e24d8ef
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.vti.VTITemplate
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
0: public abstract class VTITemplate implements ResultSet {
commit:bff3c2e
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.vti;
1: 
0: import java.sql.DriverManager;
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
1: import java.math.BigDecimal;
1: 
0: import java.net.URL;
0: import java.util.Calendar;
0: import java.sql.Ref;
0: import java.sql.Blob;
0: import java.sql.Clob;
0: import java.sql.Array;
1: 
1: /**
0: 	An abstract implementation of ResultSet (JDK1.1/JDBC 1.2) that is useful
0: 	when writing a read-only VTI (virtual table interface) or for
0: 	the ResultSet returned by executeQuery in read-write VTI classes.
1: 	
0: 	This class implements most of the methods of the JDBC 1.2 interface java.sql.ResultSet,
1: 	each one throwing a  SQLException with the name of the method. 
1: 	A concrete subclass can then just implement the methods not implemented here 
1: 	and override any methods it needs to implement for correct functionality.
1: 	<P>
1: 	The methods not implemented here are
1: 	<UL>
1: 	<LI>next()
1: 	<LI>close()
0: 	<LI>getMetaData()
1: 	</UL>
1: 	<P>
1: 
0: 	For virtual tables the database engine only calls methods defined
0: 	in the JDBC 1.2 definition of java.sql.ResultSet.
0: 	<BR>
0: 	Classes that implement a JDBC 2.0 conformant java.sql.ResultSet can be used
0: 	as virtual tables.
1:  */
0: public abstract class VTITemplate implements ResultSet { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
0:     //
0:     // java.sql.ResultSet calls, passed through to our result set.
0:     //
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public boolean wasNull() throws SQLException {
0:         throw new SQLException("wasNull");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public String getString(int columnIndex) throws SQLException {
0:         throw new SQLException("getString");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public boolean getBoolean(int columnIndex) throws SQLException {
0:         throw new SQLException("getBoolean");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte getByte(int columnIndex) throws SQLException {
0:         throw new SQLException("getByte");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public short getShort(int columnIndex) throws SQLException {
0:         throw new SQLException("getShort");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public int getInt(int columnIndex) throws SQLException {
0:         throw new SQLException("getInt");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public long getLong(int columnIndex) throws SQLException {
0:         throw new SQLException("getLong");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:    public float getFloat(int columnIndex) throws SQLException {
0:         throw new SQLException("getFloat");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public double getDouble(int columnIndex) throws SQLException {
0:         throw new SQLException("getDouble");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
0:         throw new SQLException("getBigDecimal");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte[] getBytes(int columnIndex) throws SQLException {
0:         throw new SQLException("getBytes");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Date getDate(int columnIndex) throws SQLException {
0:         throw new SQLException("getDate");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Time getTime(int columnIndex) throws SQLException {
0:         throw new SQLException("getTime");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException {
0:         throw new SQLException("getTimestamp");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {
0:         throw new SQLException("getAsciiStream");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
0:         throw new SQLException("getUnicodeStream");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getBinaryStream(int columnIndex)
0:         throws SQLException {
0:         throw new SQLException("getBinaryStream");
1:             }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public String getString(String columnName) throws SQLException {
0:         return getString(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public boolean getBoolean(String columnName) throws SQLException {
0:         return getBoolean(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte getByte(String columnName) throws SQLException {
0:         return getByte(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public short getShort(String columnName) throws SQLException {
0:         return getShort(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public int getInt(String columnName) throws SQLException {
0:         return getInt(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public long getLong(String columnName) throws SQLException {
0:         return getLong(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public float getFloat(String columnName) throws SQLException {
0:         return getFloat(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public double getDouble(String columnName) throws SQLException {
0:         return getDouble(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
0:         return getBigDecimal(findColumn(columnName), scale);
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public byte[] getBytes(String columnName) throws SQLException {
0:         return getBytes(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Date getDate(String columnName) throws SQLException {
0:         return getDate(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Time getTime(String columnName) throws SQLException {
0:         return getTime(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException {
0:         return getTimestamp(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException {
0:         throw new SQLException("getAsciiStream");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
0:         throw new SQLException("getUnicodeStream");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public java.io.InputStream getBinaryStream(String columnName)
0:         throws SQLException {
0:         throw new SQLException("getBinaryStream");
1:     }
1: 
1:   /**
0:  	* @exception	SQLException if there is an error
1: 	*/
0:   public SQLWarning getWarnings() throws SQLException {
0:     return null;
1:   }
1: 
1:   /**
0:  	* @exception	SQLException if there is an error
1: 	*/
0:   public void clearWarnings() throws SQLException {
1:   }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public String getCursorName() throws SQLException {
0:         throw new SQLException("getCursorName");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public Object getObject(int columnIndex) throws SQLException {
0:         throw new SQLException("getObject");
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public Object getObject(String columnName) throws SQLException {
0:         return getObject(findColumn(columnName));
1:     }
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0:     public int findColumn(String columnName) throws SQLException {
0:         throw new SQLException("findColumn");
1:     }
1: 
1: 	/*
0: 	** JDBC 2.0 methods
1: 	*/
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.io.Reader getCharacterStream(int columnIndex)
0: 					throws SQLException {
0: 		throw new SQLException("getCharacterStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.io.Reader getCharacterStream(String columnName)
0: 					throws SQLException {
0: 		throw new SQLException("getCharacterStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public BigDecimal getBigDecimal(int columnIndex)
0: 					throws SQLException {
0: 		throw new SQLException("getBigDecimal");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public BigDecimal getBigDecimal(String columnName)
0: 					throws SQLException {
0: 		return getBigDecimal(findColumn(columnName));
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean isBeforeFirst()
0: 					throws SQLException {
0: 		throw new SQLException("isBeforeFirst");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean isAfterLast()
0: 					throws SQLException {
0: 		throw new SQLException("isAfterLast");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean isFirst()
0: 					throws SQLException {
0: 		throw new SQLException("isFirst");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean isLast()
0: 					throws SQLException {
0: 		throw new SQLException("isLast");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void beforeFirst()
0: 					throws SQLException {
0: 		throw new SQLException("beforeFirst");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void afterLast()
0: 					throws SQLException {
0: 		throw new SQLException("afterLast");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean first()
0: 					throws SQLException {
0: 		throw new SQLException("first");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean last()
0: 					throws SQLException {
0: 		throw new SQLException("last");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public int getRow()
0: 					throws SQLException {
0: 		throw new SQLException("getRow");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean absolute(int row)
0: 					throws SQLException {
0: 		throw new SQLException("absolute");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean relative(int rows)
0: 					throws SQLException {
0: 		throw new SQLException("relative");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean previous()
0: 					throws SQLException {
0: 		throw new SQLException("previous");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void setFetchDirection(int direction)
0: 					throws SQLException {
0: 		throw new SQLException("setFetchDirection");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public int getFetchDirection()
0: 					throws SQLException {
0: 		throw new SQLException("getFetchDirection");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void setFetchSize(int rows)
0: 					throws SQLException {
0: 		throw new SQLException("setFetchSize");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public int getFetchSize()
0: 					throws SQLException {
0: 		throw new SQLException("getFetchSize");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public int getType()
0: 					throws SQLException {
0: 		throw new SQLException("getType");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public int getConcurrency()
0: 					throws SQLException {
0: 		throw new SQLException("getConcurrency");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean rowUpdated()
0: 					throws SQLException {
0: 		throw new SQLException("rowUpdated");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean rowInserted()
0: 					throws SQLException {
0: 		throw new SQLException("rowInserted");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public boolean rowDeleted()
0: 					throws SQLException {
0: 		throw new SQLException("rowDeleted");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateNull(int columnIndex)
0: 					throws SQLException {
0: 		throw new SQLException("updateNull");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBoolean(int columnIndex, boolean x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBoolean");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateByte(int columnIndex, byte x)
0: 					throws SQLException {
0: 		throw new SQLException("updateByte");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateShort(int columnIndex, short x)
0: 					throws SQLException {
0: 		throw new SQLException("updateShort");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateInt(int columnIndex, int x)
0: 					throws SQLException {
0: 		throw new SQLException("updateInt");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateLong(int columnIndex, long x)
0: 					throws SQLException {
0: 		throw new SQLException("updateLong");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateFloat(int columnIndex, float x)
0: 					throws SQLException {
0: 		throw new SQLException("updateFloat");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateDouble(int columnIndex, double x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDouble");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBigDecimal(int columnIndex, BigDecimal x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBigDecimal");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateString(int columnIndex, String x)
0: 					throws SQLException {
0: 		throw new SQLException("updateString");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBytes(int columnIndex, byte[] x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBytes");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateDate(int columnIndex, java.sql.Date x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDate");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateTime(int columnIndex, java.sql.Time x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTime");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateTimestamp(int columnIndex, java.sql.Timestamp x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTimestamp");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateAsciiStream(int columnIndex,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateAsciiStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBinaryStream(int columnIndex,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateBinaryStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateCharacterStream(int columnIndex,
0: 							java.io.Reader x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateCharacterStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateObject(int columnIndex,
0: 							Object x,
0: 							int scale)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateObject(int columnIndex, Object x)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateNull(String columnName)
0: 					throws SQLException {
0: 		throw new SQLException("updateNull");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBoolean(String columnName, boolean x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBoolean");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateByte(String columnName, byte x)
0: 					throws SQLException {
0: 		throw new SQLException("updateByte");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateShort(String columnName, short x)
0: 					throws SQLException {
0: 		throw new SQLException("updateShort");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateInt(String columnName, int x)
0: 					throws SQLException {
0: 		throw new SQLException("updateInt");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateLong(String columnName, long x)
0: 					throws SQLException {
0: 		throw new SQLException("updateLong");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateFloat(String columnName, float x)
0: 					throws SQLException {
0: 		throw new SQLException("updateFloat");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateDouble(String columnName, double x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDouble");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBigDecimal(String columnName, BigDecimal x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBigDecimal");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateString(String columnName, String x)
0: 					throws SQLException {
0: 		throw new SQLException("updateString");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBytes(String columnName, byte[] x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBytes");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateDate(String columnName, java.sql.Date x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDate");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateTime(String columnName, java.sql.Time x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTime");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateTimestamp(String columnName, java.sql.Timestamp x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTimestamp");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateAsciiStream(String columnName,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateAsciiStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBinaryStream(String columnName,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateBinaryStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateCharacterStream(String columnName,
0: 							java.io.Reader x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateCharacterStream");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateObject(String columnName,
0: 							Object x,
0: 							int scale)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateObject(String columnName, Object x)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void insertRow()
0: 					throws SQLException {
0: 		throw new SQLException("insertRow");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateRow()
0: 					throws SQLException {
0: 		throw new SQLException("updateRow");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void deleteRow()
0: 					throws SQLException {
0: 		throw new SQLException("deleteRow");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void refreshRow()
0: 					throws SQLException {
0: 		throw new SQLException("refreshRow");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void cancelRowUpdates()
0: 					throws SQLException {
0: 		throw new SQLException("cancelRowUpdates");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void moveToInsertRow()
0: 					throws SQLException {
0: 		throw new SQLException("moveToInsertRow");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void moveToCurrentRow()
0: 					throws SQLException {
0: 		throw new SQLException("moveToCurrentRow");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Statement getStatement()
0: 					throws SQLException {
0: 		throw new SQLException("getStatement");
1: 	}
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.sql.Date getDate(int columnIndex, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getDate");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.sql.Date getDate(String columnName, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getDate");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.sql.Time getTime(int columnIndex, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTime");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.sql.Time getTime(String columnName, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTime");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTimestamp");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public java.sql.Timestamp getTimestamp(String columnName, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTimestamp");
1: 	}
1: 	/*
0: 	** JDBC 3.0 methods
1: 	*/
1: 	
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public URL getURL(int columnIndex)
0:     throws SQLException
0: 	{
0: 		throw new SQLException("getURL");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public URL getURL(String columnName)
0: 					throws SQLException {
0: 		throw new SQLException("getURL");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Object getObject(int i, java.util.Map map)
0: 					throws SQLException {
0: 		throw new SQLException("getObject");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Ref getRef(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getRef");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Blob getBlob(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getBlob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Clob getClob(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getClob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Array getArray(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getArray");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Object getObject(String colName, java.util.Map map)
0: 					throws SQLException {
0: 		throw new SQLException("getObject");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Ref getRef(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getRef");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Blob getBlob(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getBlob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Clob getClob(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getClob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public Array getArray(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getArray");
1: 	}
1: 
1: 
0: 	// JDBC 3.0 methods - not implemented
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateRef(int columnIndex, Ref x)
0: 					throws SQLException {
0: 		throw new SQLException("updateRef");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateRef(String columnName, Ref x)
0: 					throws SQLException {
0: 		throw new SQLException("updateRef");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBlob(int columnIndex, Blob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBlob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateBlob(String columnName, Blob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBlob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateClob(int columnIndex, Clob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateClob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateClob(String columnName, Clob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateClob");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateArray(int columnIndex, Array x)
0: 					throws SQLException {
0: 		throw new SQLException("updateArray");
1: 	}
1: 
1: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
1: 	 */
0: 	public void updateArray(String columnName, Array x)
0: 					throws SQLException {
0: 		throw new SQLException("updateArray");
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.vti
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.vti;
0: 
0: import java.sql.DriverManager;
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.SQLException;
0: import java.sql.SQLWarning;
0: import java.math.BigDecimal;
0: 
0: import java.net.URL;
0: import java.util.Calendar;
0: import java.sql.Ref;
0: import java.sql.Blob;
0: import java.sql.Clob;
0: import java.sql.Array;
0: 
0: /**
0: 	An abstract implementation of ResultSet (JDK1.1/JDBC 1.2) that is useful
0: 	when writing a read-only VTI (virtual table interface) or for
0: 	the ResultSet returned by executeQuery in read-write VTI classes.
0: 	
0: 	This class implements most of the methods of the JDBC 1.2 interface java.sql.ResultSet,
0: 	each one throwing a  SQLException with the name of the method. 
0: 	A concrete subclass can then just implement the methods not implemented here 
0: 	and override any methods it needs to implement for correct functionality.
0: 	<P>
0: 	The methods not implemented here are
0: 	<UL>
0: 	<LI>next()
0: 	<LI>close()
0: 	<LI>getMetaData()
0: 	</UL>
0: 	<P>
0: 
0: 	For virtual tables the database engine only calls methods defined
0: 	in the JDBC 1.2 definition of java.sql.ResultSet.
0: 	<BR>
0: 	Classes that implement a JDBC 2.0 conformant java.sql.ResultSet can be used
0: 	as virtual tables.
0:  */
0: public abstract class VTITemplate implements ResultSet { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     //
0:     // java.sql.ResultSet calls, passed through to our result set.
0:     //
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public boolean wasNull() throws SQLException {
0:         throw new SQLException("wasNull");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public String getString(int columnIndex) throws SQLException {
0:         throw new SQLException("getString");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public boolean getBoolean(int columnIndex) throws SQLException {
0:         throw new SQLException("getBoolean");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte getByte(int columnIndex) throws SQLException {
0:         throw new SQLException("getByte");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public short getShort(int columnIndex) throws SQLException {
0:         throw new SQLException("getShort");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public int getInt(int columnIndex) throws SQLException {
0:         throw new SQLException("getInt");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public long getLong(int columnIndex) throws SQLException {
0:         throw new SQLException("getLong");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:    public float getFloat(int columnIndex) throws SQLException {
0:         throw new SQLException("getFloat");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public double getDouble(int columnIndex) throws SQLException {
0:         throw new SQLException("getDouble");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
0:         throw new SQLException("getBigDecimal");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte[] getBytes(int columnIndex) throws SQLException {
0:         throw new SQLException("getBytes");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Date getDate(int columnIndex) throws SQLException {
0:         throw new SQLException("getDate");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Time getTime(int columnIndex) throws SQLException {
0:         throw new SQLException("getTime");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException {
0:         throw new SQLException("getTimestamp");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {
0:         throw new SQLException("getAsciiStream");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
0:         throw new SQLException("getUnicodeStream");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getBinaryStream(int columnIndex)
0:         throws SQLException {
0:         throw new SQLException("getBinaryStream");
0:             }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public String getString(String columnName) throws SQLException {
0:         return getString(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public boolean getBoolean(String columnName) throws SQLException {
0:         return getBoolean(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte getByte(String columnName) throws SQLException {
0:         return getByte(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public short getShort(String columnName) throws SQLException {
0:         return getShort(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public int getInt(String columnName) throws SQLException {
0:         return getInt(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public long getLong(String columnName) throws SQLException {
0:         return getLong(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public float getFloat(String columnName) throws SQLException {
0:         return getFloat(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public double getDouble(String columnName) throws SQLException {
0:         return getDouble(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
0:         return getBigDecimal(findColumn(columnName), scale);
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public byte[] getBytes(String columnName) throws SQLException {
0:         return getBytes(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Date getDate(String columnName) throws SQLException {
0:         return getDate(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Time getTime(String columnName) throws SQLException {
0:         return getTime(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.sql.Timestamp getTimestamp(String columnName) throws SQLException {
0:         return getTimestamp(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getAsciiStream(String columnName) throws SQLException {
0:         throw new SQLException("getAsciiStream");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
0:         throw new SQLException("getUnicodeStream");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public java.io.InputStream getBinaryStream(String columnName)
0:         throws SQLException {
0:         throw new SQLException("getBinaryStream");
0:     }
0: 
0:   /**
0:  	* @exception	SQLException if there is an error
0: 	*/
0:   public SQLWarning getWarnings() throws SQLException {
0:     return null;
0:   }
0: 
0:   /**
0:  	* @exception	SQLException if there is an error
0: 	*/
0:   public void clearWarnings() throws SQLException {
0:   }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public String getCursorName() throws SQLException {
0:         throw new SQLException("getCursorName");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public Object getObject(int columnIndex) throws SQLException {
0:         throw new SQLException("getObject");
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public Object getObject(String columnName) throws SQLException {
0:         return getObject(findColumn(columnName));
0:     }
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0:     public int findColumn(String columnName) throws SQLException {
0:         throw new SQLException("findColumn");
0:     }
0: 
0: 	/*
0: 	** JDBC 2.0 methods
0: 	*/
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.io.Reader getCharacterStream(int columnIndex)
0: 					throws SQLException {
0: 		throw new SQLException("getCharacterStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.io.Reader getCharacterStream(String columnName)
0: 					throws SQLException {
0: 		throw new SQLException("getCharacterStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public BigDecimal getBigDecimal(int columnIndex)
0: 					throws SQLException {
0: 		throw new SQLException("getBigDecimal");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public BigDecimal getBigDecimal(String columnName)
0: 					throws SQLException {
0: 		return getBigDecimal(findColumn(columnName));
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean isBeforeFirst()
0: 					throws SQLException {
0: 		throw new SQLException("isBeforeFirst");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean isAfterLast()
0: 					throws SQLException {
0: 		throw new SQLException("isAfterLast");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean isFirst()
0: 					throws SQLException {
0: 		throw new SQLException("isFirst");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean isLast()
0: 					throws SQLException {
0: 		throw new SQLException("isLast");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void beforeFirst()
0: 					throws SQLException {
0: 		throw new SQLException("beforeFirst");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void afterLast()
0: 					throws SQLException {
0: 		throw new SQLException("afterLast");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean first()
0: 					throws SQLException {
0: 		throw new SQLException("first");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean last()
0: 					throws SQLException {
0: 		throw new SQLException("last");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getRow()
0: 					throws SQLException {
0: 		throw new SQLException("getRow");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean absolute(int row)
0: 					throws SQLException {
0: 		throw new SQLException("absolute");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean relative(int rows)
0: 					throws SQLException {
0: 		throw new SQLException("relative");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean previous()
0: 					throws SQLException {
0: 		throw new SQLException("previous");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setFetchDirection(int direction)
0: 					throws SQLException {
0: 		throw new SQLException("setFetchDirection");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getFetchDirection()
0: 					throws SQLException {
0: 		throw new SQLException("getFetchDirection");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void setFetchSize(int rows)
0: 					throws SQLException {
0: 		throw new SQLException("setFetchSize");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getFetchSize()
0: 					throws SQLException {
0: 		throw new SQLException("getFetchSize");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getType()
0: 					throws SQLException {
0: 		throw new SQLException("getType");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public int getConcurrency()
0: 					throws SQLException {
0: 		throw new SQLException("getConcurrency");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean rowUpdated()
0: 					throws SQLException {
0: 		throw new SQLException("rowUpdated");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean rowInserted()
0: 					throws SQLException {
0: 		throw new SQLException("rowInserted");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public boolean rowDeleted()
0: 					throws SQLException {
0: 		throw new SQLException("rowDeleted");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateNull(int columnIndex)
0: 					throws SQLException {
0: 		throw new SQLException("updateNull");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBoolean(int columnIndex, boolean x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBoolean");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateByte(int columnIndex, byte x)
0: 					throws SQLException {
0: 		throw new SQLException("updateByte");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateShort(int columnIndex, short x)
0: 					throws SQLException {
0: 		throw new SQLException("updateShort");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateInt(int columnIndex, int x)
0: 					throws SQLException {
0: 		throw new SQLException("updateInt");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateLong(int columnIndex, long x)
0: 					throws SQLException {
0: 		throw new SQLException("updateLong");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateFloat(int columnIndex, float x)
0: 					throws SQLException {
0: 		throw new SQLException("updateFloat");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateDouble(int columnIndex, double x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDouble");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBigDecimal(int columnIndex, BigDecimal x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBigDecimal");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateString(int columnIndex, String x)
0: 					throws SQLException {
0: 		throw new SQLException("updateString");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBytes(int columnIndex, byte[] x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBytes");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateDate(int columnIndex, java.sql.Date x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateTime(int columnIndex, java.sql.Time x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTime");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateTimestamp(int columnIndex, java.sql.Timestamp x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTimestamp");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateAsciiStream(int columnIndex,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateAsciiStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBinaryStream(int columnIndex,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateBinaryStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateCharacterStream(int columnIndex,
0: 							java.io.Reader x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateCharacterStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateObject(int columnIndex,
0: 							Object x,
0: 							int scale)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateObject(int columnIndex, Object x)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateNull(String columnName)
0: 					throws SQLException {
0: 		throw new SQLException("updateNull");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBoolean(String columnName, boolean x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBoolean");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateByte(String columnName, byte x)
0: 					throws SQLException {
0: 		throw new SQLException("updateByte");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateShort(String columnName, short x)
0: 					throws SQLException {
0: 		throw new SQLException("updateShort");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateInt(String columnName, int x)
0: 					throws SQLException {
0: 		throw new SQLException("updateInt");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateLong(String columnName, long x)
0: 					throws SQLException {
0: 		throw new SQLException("updateLong");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateFloat(String columnName, float x)
0: 					throws SQLException {
0: 		throw new SQLException("updateFloat");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateDouble(String columnName, double x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDouble");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBigDecimal(String columnName, BigDecimal x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBigDecimal");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateString(String columnName, String x)
0: 					throws SQLException {
0: 		throw new SQLException("updateString");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBytes(String columnName, byte[] x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBytes");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateDate(String columnName, java.sql.Date x)
0: 					throws SQLException {
0: 		throw new SQLException("updateDate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateTime(String columnName, java.sql.Time x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTime");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateTimestamp(String columnName, java.sql.Timestamp x)
0: 					throws SQLException {
0: 		throw new SQLException("updateTimestamp");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateAsciiStream(String columnName,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateAsciiStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBinaryStream(String columnName,
0: 							java.io.InputStream x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateBinaryStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateCharacterStream(String columnName,
0: 							java.io.Reader x,
0: 							int length)
0: 					throws SQLException {
0: 		throw new SQLException("updateCharacterStream");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateObject(String columnName,
0: 							Object x,
0: 							int scale)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateObject(String columnName, Object x)
0: 					throws SQLException {
0: 		throw new SQLException("updateObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void insertRow()
0: 					throws SQLException {
0: 		throw new SQLException("insertRow");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateRow()
0: 					throws SQLException {
0: 		throw new SQLException("updateRow");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void deleteRow()
0: 					throws SQLException {
0: 		throw new SQLException("deleteRow");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void refreshRow()
0: 					throws SQLException {
0: 		throw new SQLException("refreshRow");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void cancelRowUpdates()
0: 					throws SQLException {
0: 		throw new SQLException("cancelRowUpdates");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void moveToInsertRow()
0: 					throws SQLException {
0: 		throw new SQLException("moveToInsertRow");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void moveToCurrentRow()
0: 					throws SQLException {
0: 		throw new SQLException("moveToCurrentRow");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Statement getStatement()
0: 					throws SQLException {
0: 		throw new SQLException("getStatement");
0: 	}
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.sql.Date getDate(int columnIndex, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getDate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.sql.Date getDate(String columnName, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getDate");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.sql.Time getTime(int columnIndex, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTime");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.sql.Time getTime(String columnName, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTime");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTimestamp");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public java.sql.Timestamp getTimestamp(String columnName, Calendar cal)
0: 					throws SQLException {
0: 		throw new SQLException("getTimestamp");
0: 	}
0: 	/*
0: 	** JDBC 3.0 methods
0: 	*/
0: 	
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public URL getURL(int columnIndex)
0:     throws SQLException
0: 	{
0: 		throw new SQLException("getURL");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public URL getURL(String columnName)
0: 					throws SQLException {
0: 		throw new SQLException("getURL");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Object getObject(int i, java.util.Map map)
0: 					throws SQLException {
0: 		throw new SQLException("getObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Ref getRef(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getRef");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Blob getBlob(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getBlob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Clob getClob(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getClob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Array getArray(int i)
0: 					throws SQLException {
0: 		throw new SQLException("getArray");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Object getObject(String colName, java.util.Map map)
0: 					throws SQLException {
0: 		throw new SQLException("getObject");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Ref getRef(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getRef");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Blob getBlob(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getBlob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Clob getClob(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getClob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public Array getArray(String colName)
0: 					throws SQLException {
0: 		throw new SQLException("getArray");
0: 	}
0: 
0: 
0: 	// JDBC 3.0 methods - not implemented
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateRef(int columnIndex, Ref x)
0: 					throws SQLException {
0: 		throw new SQLException("updateRef");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateRef(String columnName, Ref x)
0: 					throws SQLException {
0: 		throw new SQLException("updateRef");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBlob(int columnIndex, Blob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBlob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateBlob(String columnName, Blob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateBlob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateClob(int columnIndex, Clob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateClob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateClob(String columnName, Clob x)
0: 					throws SQLException {
0: 		throw new SQLException("updateClob");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateArray(int columnIndex, Array x)
0: 					throws SQLException {
0: 		throw new SQLException("updateArray");
0: 	}
0: 
0: 	/**
0: 	 * @see java.sql.ResultSet
0: 	 *
0:  	 * @exception SQLException on unexpected JDBC error
0: 	 */
0: 	public void updateArray(String columnName, Array x)
0: 					throws SQLException {
0: 		throw new SQLException("updateArray");
0: 	}
0: }
============================================================================