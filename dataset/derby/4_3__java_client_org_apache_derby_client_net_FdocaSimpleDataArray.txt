1:33776ff: /*
7:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.FdocaSimpleDataArray
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
1:33776ff: */
1:33776ff: 
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:70f7692: class FdocaSimpleDataArray {
1:70f7692:     //---------------------navigational members-----------------------------------
1:33776ff: 
1:70f7692:     //-----------------------------state------------------------------------------
1:33776ff: 
1:70f7692:     // store the protocol type. this is needed to know
1:70f7692:     // which protocol type the mdd override is for.
1:70f7692:     int protocolType_;
1:33776ff: 
1:70f7692:     // the ccsid identifies the encoding of the character data.  converting the
1:70f7692:     // ccsid into binary form generates the four byte representation.  The
1:70f7692:     // FD:OCA rules state that if the high order 16 bits of the CCSID field
1:70f7692:     // are zero, then the low order 16 bits are to be interpreted as a CCSID
1:70f7692:     int ccsid_;
1:33776ff: 
1:70f7692:     // indicates the number of bytes each character takes in storage.
1:70f7692:     // 1 is used for character, date, time, timestamp, and numeric character fields.
1:70f7692:     // it must be 0 for all other types.
1:70f7692:     int characterSize_;
1:33776ff: 
1:70f7692:     // this is a group of types which indicates how the data length are computed.
1:70f7692:     int typeToUseForComputingDataLength_;
1:33776ff: 
1:70f7692:     //---------------------constructors/finalizer---------------------------------
1:33776ff: 
1:70f7692:     FdocaSimpleDataArray(int protocolType,
1:70f7692:                          int ccsid,
1:70f7692:                          int characterSize,
1:70f7692:                          int typeToUseForComputingDataLength) {
1:70f7692:         protocolType_ = protocolType;
1:70f7692:         ccsid_ = ccsid;
1:70f7692:         characterSize_ = characterSize;
1:70f7692:         typeToUseForComputingDataLength_ = typeToUseForComputingDataLength;
1:70f7692:     }
1:33776ff: 
1:70f7692:     public void update(int protocolType,
1:70f7692:                        int ccsid,
1:70f7692:                        int characterSize,
1:70f7692:                        int typeToUseForComputingDataLength) {
1:70f7692:         protocolType_ = protocolType;
1:70f7692:         ccsid_ = ccsid;
1:70f7692:         characterSize_ = characterSize;
1:70f7692:         typeToUseForComputingDataLength_ = typeToUseForComputingDataLength;
1:70f7692:     }
1:33776ff: 
3:33776ff: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0326967
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: class FdocaSimpleDataArray {
1:     //---------------------navigational members-----------------------------------
1:     //-----------------------------state------------------------------------------
1:     // store the protocol type. this is needed to know
1:     // which protocol type the mdd override is for.
1:     int protocolType_;
0:     // the FD:OCA field type indicator shows exactly how the data is represented
0:     // in the environment.  see the FD:OCA reference for a detailed explanation of
0:     // these types.
0:     int fdocaFieldType_;
0:     // this is the representation used by the DNC converters.  this is like the
0:     // FD:OCA field type but the dnc converters don't use FD:OCA types as input.
0:     int representation_;
1:     // the ccsid identifies the encoding of the character data.  converting the
1:     // ccsid into binary form generates the four byte representation.  The
1:     // FD:OCA rules state that if the high order 16 bits of the CCSID field
1:     // are zero, then the low order 16 bits are to be interpreted as a CCSID
1:     int ccsid_;
1:     // indicates the number of bytes each character takes in storage.
1:     // 1 is used for character, date, time, timestamp, and numeric character fields.
1:     // it must be 0 for all other types.
1:     int characterSize_;
0:     // this is used to specify mode of interpretation of FD:OCA
0:     // architecture for all variable length data types (including null
0:     // terminated), that as the SBCS variable character type.  The
0:     // low order bit of this byte is used to control interpretation
0:     // of Length Fields in SDAs for variable length types.  A '0' in that
0:     // bit indicates that non-zero length field values indicate the space
0:     // reserved for data and that all the space is transmitted
0:     // whether or not it contains valid data.  In the case of variable
0:     // length types, the first two bytes of the data itself determine
0:     // the valid data length.  A '1' in this bit shows that non-zero length
0:     // field values indicate the maximum value of the length fields
0:     // that the data will contain.  Only enough space to contain each
0:     // data value is transmitted for each value.
0:     int mode_;
0:     // this represents the maximum valid value.  when and if a group
0:     // data array (GDA) triplet overrides it, the value can be reduced.
0:     // For character fields with only DBCS characters, this is the length in
0:     // characters (bytes/2).  For all other cases, the length is in bytes.
0:     // It does not include the length of the length field (variable length
0:     // types) or null indicator (nullable types).
0:     //
0:     int fieldLength_;
1:     // this is a group of types which indicates how the data length are computed.
1:     int typeToUseForComputingDataLength_;
1:     //---------------------constructors/finalizer---------------------------------
1:     FdocaSimpleDataArray(int protocolType,
0:                          int fdocaFieldType,
0:                          int representation,
1:                          int ccsid,
1:                          int characterSize,
0:                          int mode,
0:                          int fieldLength,
1:                          int typeToUseForComputingDataLength) {
1:         protocolType_ = protocolType;
0:         fdocaFieldType_ = fdocaFieldType;
0:         representation_ = representation;
1:         ccsid_ = ccsid;
1:         characterSize_ = characterSize;
0:         mode_ = mode;
0:         fieldLength_ = fieldLength;
1:         typeToUseForComputingDataLength_ = typeToUseForComputingDataLength;
1:     }
1:     public void update(int protocolType,
0:                        int fdocaFieldType,
0:                        int representation,
1:                        int ccsid,
1:                        int characterSize,
0:                        int mode,
0:                        int fieldLength,
1:                        int typeToUseForComputingDataLength) {
1:         protocolType_ = protocolType;
0:         fdocaFieldType_ = fdocaFieldType;
0:         representation_ = representation;
1:         ccsid_ = ccsid;
1:         characterSize_ = characterSize;
0:         mode_ = mode;
0:         fieldLength_ = fieldLength;
1:         typeToUseForComputingDataLength_ = typeToUseForComputingDataLength;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.FdocaSimpleDataArray
1: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derby.client.net;
1: 
0: class FdocaSimpleDataArray
0: {
0:   //---------------------navigational members-----------------------------------
1: 
0:   //-----------------------------state------------------------------------------
1: 
0:   // store the protocol type. this is needed to know
0:   // which protocol type the mdd override is for.
0:   int protocolType_;  
1: 
0:   // the FD:OCA field type indicator shows exactly how the data is represented
0:   // in the environment.  see the FD:OCA reference for a detailed explanation of
0:   // these types.
0:   int fdocaFieldType_;
1: 
0:   // this is the representation used by the DNC converters.  this is like the
0:   // FD:OCA field type but the dnc converters don't use FD:OCA types as input.
0:   int representation_;
1: 
0:   // the ccsid identifies the encoding of the character data.  converting the
0:   // ccsid into binary form generates the four byte representation.  The
0:   // FD:OCA rules state that if the high order 16 bits of the CCSID field
0:   // are zero, then the low order 16 bits are to be interpreted as a CCSID
0:   int ccsid_;
1: 
0:   // indicates the number of bytes each character takes in storage.
0:   // 1 is used for character, date, time, timestamp, and numeric character fields.
0:   // it must be 0 for all other types.
0:   int characterSize_;
1: 
0:   // this is used to specify mode of interpretation of FD:OCA
0:   // architecture for all variable length data types (including null
0:   // terminated), that as the SBCS variable character type.  The
0:   // low order bit of this byte is used to control interpretation
0:   // of Length Fields in SDAs for variable length types.  A '0' in that
0:   // bit indicates that non-zero length field values indicate the space
0:   // reserved for data and that all the space is transmitted
0:   // whether or not it contains valid data.  In the case of variable
0:   // length types, the first two bytes of the data itself determine
0:   // the valid data length.  A '1' in this bit shows that non-zero length
0:   // field values indicate the maximum value of the length fields
0:   // that the data will contain.  Only enough space to contain each
0:   // data value is transmitted for each value.
0:   int mode_;
1: 
0:   // this represents the maximum valid value.  when and if a group
0:   // data array (GDA) triplet overrides it, the value can be reduced.
0:   // For character fields with only DBCS characters, this is the length in
0:   // characters (bytes/2).  For all other cases, the length is in bytes.
0:   // It does not include the length of the length field (variable length
0:   // types) or null indicator (nullable types).
0:   //
0:   int fieldLength_;
1: 
0:   // this is a group of types which indicates how the data length are computed.
0:   int typeToUseForComputingDataLength_;
1: 
0:   //---------------------constructors/finalizer---------------------------------
1: 
0:   FdocaSimpleDataArray (int protocolType,   
0:                         int fdocaFieldType,
0:                         int representation,
0:                         int ccsid,
0:                         int characterSize,
0:                         int mode,
0:                         int fieldLength,
0:                         int typeToUseForComputingDataLength)
1: 
0:   {
0:     protocolType_ = protocolType;  
0:     fdocaFieldType_ = fdocaFieldType;
0:     representation_ = representation;
0:     ccsid_ = ccsid;
0:     characterSize_ = characterSize;
0:     mode_ = mode;
0:     fieldLength_ = fieldLength;
0:     typeToUseForComputingDataLength_ = typeToUseForComputingDataLength;
1:   }
1: 
0:   public void update (int protocolType,
0:                       int fdocaFieldType,
0:                       int representation,
0:                       int ccsid,
0:                       int characterSize,
0:                       int mode,
0:                       int fieldLength,
0:                       int typeToUseForComputingDataLength)
0:   {
0:     protocolType_ = protocolType;
0:     fdocaFieldType_ = fdocaFieldType;
0:     representation_ = representation;
0:     ccsid_ = ccsid;
0:     characterSize_ = characterSize;
0:     mode_ = mode;
0:     fieldLength_ = fieldLength;
0:     typeToUseForComputingDataLength_ = typeToUseForComputingDataLength;
1:   }
1: 
1: }
============================================================================