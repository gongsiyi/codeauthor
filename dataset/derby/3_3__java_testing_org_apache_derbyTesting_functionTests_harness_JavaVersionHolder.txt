1:67614ad: /*
1:67614ad: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.harness.JavaVersionHolder
1:67614ad: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
14:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
2:67614ad:  */
1:67614ad: 
1:67614ad: package org.apache.derbyTesting.functionTests.harness;
1:67614ad: 
1:67614ad: import java.util.StringTokenizer;
1:67614ad: 
2:67614ad: /**
1:67614ad:   To break down the java version into major and minor
1:67614ad:   Used by the test harness for special cases
1:67614ad:   */
1:67614ad: public class JavaVersionHolder
1:67614ad: {
1:67614ad:  
1:67614ad:     private String majorVersion;
1:67614ad:     private String minorVersion;
1:67614ad:     private int major;
1:67614ad:     private int minor;
1:67614ad:     
1:67614ad:     public JavaVersionHolder(String javaVersion)
1:67614ad:         throws java.lang.NumberFormatException
1:67614ad:     {
1:a9431f5: 	// handle early access versions of JDK 9
1:a9431f5: 	if (javaVersion.startsWith( "9" ))
1:a9431f5: 	{
1:a9431f5: 	    javaVersion = "1.9.0";
1:a9431f5: 	}
1:a9431f5: 
1:a9431f5: 	// check for jdk12 or higher
1:a9431f5: 	int i = javaVersion.indexOf('.');
1:a9431f5: 	int j = javaVersion.indexOf('.', i+1);
1:a9431f5: 	majorVersion = javaVersion.substring(0, i);
1:a9431f5: 	try
1:67614ad: 	    {
1:39b3237:           Integer imajor = Integer.valueOf(majorVersion);
1:67614ad: 		    major = imajor.intValue();
1:67614ad: 		    if (j != -1)
1:67614ad: 		    {
1:67614ad: 		        minorVersion = javaVersion.substring(i+1, j);
1:39b3237: 		        Integer iminor = Integer.valueOf(minorVersion);
1:67614ad: 		        minor = iminor.intValue();
1:67614ad: 		    }
1:67614ad: 		    else
1:67614ad: 		    {
1:67614ad: 		        minorVersion = javaVersion.substring(i+1);
1:39b3237: 		        Integer iminor = Integer.valueOf(minorVersion);
1:67614ad: 		        minor = iminor.intValue();
1:67614ad: 		    }
1:67614ad: 		}
1:67614ad: 		catch (NumberFormatException nfe)
1:67614ad: 		{
1:67614ad: 		    // Cannot parse the version as an Integer
1:67614ad: 		    // such as on HP: hack for this special case
1:67614ad: 		    if (javaVersion.startsWith("HP"))
1:67614ad: 		    {
1:67614ad: 		        // attempt to get the version
1:67614ad: 		        StringTokenizer st = new StringTokenizer(javaVersion,".");
1:67614ad: 		        String tmp = st.nextToken();
1:67614ad: 		        majorVersion = st.nextToken();
1:67614ad: 		        if (majorVersion.equals("01"))
1:67614ad: 		            majorVersion = "1";
1:67614ad: 		        else if (majorVersion.equals("02"))
1:67614ad: 		            majorVersion = "2";
1:67614ad: 		        minorVersion = st.nextToken();
1:67614ad: 		        if (minorVersion.startsWith("1"))
1:67614ad: 		            minorVersion = "1";
1:67614ad: 		        else if (minorVersion.startsWith("2"))
1:67614ad: 		            minorVersion = "2";
1:67614ad: 		        //System.out.println("majorVersion: " + majorVersion);
1:67614ad: 		        //System.out.println("minorVersion: " + minorVersion);
2:67614ad: 		        try
1:67614ad: 	            {
1:39b3237:                     Integer imajor = Integer.valueOf(majorVersion);
1:67614ad: 		            major = imajor.intValue();
1:39b3237: 		            Integer iminor = Integer.valueOf(minorVersion);
1:67614ad: 		            minor = iminor.intValue();
1:67614ad: 		        }
1:67614ad: 		        catch (NumberFormatException nfe2)
1:67614ad: 		        {
1:67614ad: 		            System.out.println("Could not parse version: " + nfe2);
1:67614ad: 		            // Still couldn't parse the vesion
1:67614ad: 		            // have to give up
1:67614ad: 		        }
1:67614ad:             }
1:67614ad:             else
1:67614ad:             {
1:ad093f2:                 System.out.println("NumberFormatException thrown trying to parse the version. " + javaVersion);
1:67614ad:                 System.out.println("The test harness only handles the HP special case.");
1:67614ad:             }
1:67614ad:                 
1:67614ad:         }
1:67614ad:     }
1:67614ad: 
1:67614ad:     public String getMajorVersion()
1:67614ad:     {
1:67614ad:         return majorVersion;
1:67614ad:     }
1:67614ad:     
1:67614ad:     public String getMinorVersion()
1:67614ad:     {
1:67614ad:         return minorVersion;
1:67614ad:     }
1:67614ad:     
1:67614ad:     public int getMajorNumber()
1:67614ad:     {
1:67614ad:         return major;
1:67614ad:     }
1:67614ad:     
1:67614ad:     public int getMinorNumber()
1:67614ad:     {
1:67614ad:         return minor;
1:67614ad:     }
1:c0b7bf9: 
1:c0b7bf9: 	/**
1:c0b7bf9: 	 * <p>
1:c0b7bf9: 	 * Return true if we are at least at the passed in version.
1:c0b7bf9: 	 * </p>
1:c0b7bf9: 	 */
1:c0b7bf9: 	public	boolean	atLeast( int baseMajor, int baseMinor )
1:c0b7bf9: 	{
1:c0b7bf9: 		if ( major < baseMajor ) { return false; }
1:c0b7bf9: 		if ( major > baseMajor ) { return true; }
1:c0b7bf9: 
1:c0b7bf9: 		// same major number
1:c0b7bf9: 
1:c0b7bf9: 		return ( minor >= baseMinor );
1:c0b7bf9: 	}
1:c0b7bf9: 
1:67614ad: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:39b3237
/////////////////////////////////////////////////////////////////////////
1:           Integer imajor = Integer.valueOf(majorVersion);
1: 		        Integer iminor = Integer.valueOf(minorVersion);
1: 		        Integer iminor = Integer.valueOf(minorVersion);
/////////////////////////////////////////////////////////////////////////
1:                     Integer imajor = Integer.valueOf(majorVersion);
1: 		            Integer iminor = Integer.valueOf(minorVersion);
commit:a9431f5
/////////////////////////////////////////////////////////////////////////
1: 	// handle early access versions of JDK 9
1: 	if (javaVersion.startsWith( "9" ))
1: 	{
1: 	    javaVersion = "1.9.0";
1: 	}
1: 
1: 	// check for jdk12 or higher
1: 	int i = javaVersion.indexOf('.');
1: 	int j = javaVersion.indexOf('.', i+1);
1: 	majorVersion = javaVersion.substring(0, i);
1: 	try
commit:c0b7bf9
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * <p>
1: 	 * Return true if we are at least at the passed in version.
1: 	 * </p>
1: 	 */
1: 	public	boolean	atLeast( int baseMajor, int baseMinor )
1: 	{
1: 		if ( major < baseMajor ) { return false; }
1: 		if ( major > baseMajor ) { return true; }
1: 
1: 		// same major number
1: 
1: 		return ( minor >= baseMinor );
1: 	}
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:67614ad
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.harness
0:    (C) Copyright IBM Corp. 2000, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.harness;
1: 
1: import java.util.StringTokenizer;
1: 
1: /**
1:   To break down the java version into major and minor
1:   Used by the test harness for special cases
1:   */
1: public class JavaVersionHolder
1: { 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2000_2004;
1:  
1:     private String majorVersion;
1:     private String minorVersion;
1:     private int major;
1:     private int minor;
1:     
1:     public JavaVersionHolder(String javaVersion)
1:         throws java.lang.NumberFormatException
1:     {
0: 		// check for jdk12 or higher
0: 		int i = javaVersion.indexOf('.');
0: 		int j = javaVersion.indexOf('.', i+1);
0: 		majorVersion = javaVersion.substring(0, i);
1: 		try
1: 	    {
0: 		    Integer imajor = new Integer(majorVersion);
1: 		    major = imajor.intValue();
1: 		    if (j != -1)
1: 		    {
1: 		        minorVersion = javaVersion.substring(i+1, j);
0: 		        Integer iminor = new Integer(minorVersion);
1: 		        minor = iminor.intValue();
1: 		    }
1: 		    else
1: 		    {
1: 		        minorVersion = javaVersion.substring(i+1);
0: 		        Integer iminor = new Integer(minorVersion);
1: 		        minor = iminor.intValue();
1: 		    }
1: 		}
1: 		catch (NumberFormatException nfe)
1: 		{
1: 		    // Cannot parse the version as an Integer
1: 		    // such as on HP: hack for this special case
1: 		    if (javaVersion.startsWith("HP"))
1: 		    {
1: 		        // attempt to get the version
1: 		        StringTokenizer st = new StringTokenizer(javaVersion,".");
1: 		        String tmp = st.nextToken();
1: 		        majorVersion = st.nextToken();
1: 		        if (majorVersion.equals("01"))
1: 		            majorVersion = "1";
1: 		        else if (majorVersion.equals("02"))
1: 		            majorVersion = "2";
1: 		        minorVersion = st.nextToken();
1: 		        if (minorVersion.startsWith("1"))
1: 		            minorVersion = "1";
1: 		        else if (minorVersion.startsWith("2"))
1: 		            minorVersion = "2";
1: 		        //System.out.println("majorVersion: " + majorVersion);
1: 		        //System.out.println("minorVersion: " + minorVersion);
1: 		        try
1: 	            {
0: 		            Integer imajor = new Integer(majorVersion);
1: 		            major = imajor.intValue();
0: 		            Integer iminor = new Integer(minorVersion);
1: 		            minor = iminor.intValue();
1: 		        }
1: 		        catch (NumberFormatException nfe2)
1: 		        {
1: 		            System.out.println("Could not parse version: " + nfe2);
1: 		            // Still couldn't parse the vesion
1: 		            // have to give up
1: 		        }
1:             }
1:             else
1:             {
0:                 System.out.println("NumberFormatException thrown trying to parse the version.");
1:                 System.out.println("The test harness only handles the HP special case.");
1:             }
1:                 
1:         }
1:     }
1: 
1:     public String getMajorVersion()
1:     {
1:         return majorVersion;
1:     }
1:     
1:     public String getMinorVersion()
1:     {
1:         return minorVersion;
1:     }
1:     
1:     public int getMajorNumber()
1:     {
1:         return major;
1:     }
1:     
1:     public int getMinorNumber()
1:     {
1:         return minor;
1:     }
1: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ad093f2
/////////////////////////////////////////////////////////////////////////
1:                 System.out.println("NumberFormatException thrown trying to parse the version. " + javaVersion);
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
0: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.harness.JavaVersionHolder
1: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
0: package org.apache.derbyTesting.functionTests.harness;
1: 
0: import java.util.StringTokenizer;
1: 
0: /**
0:   To break down the java version into major and minor
0:   Used by the test harness for special cases
0:   */
0: public class JavaVersionHolder
0: {
1:  
0:     private String majorVersion;
0:     private String minorVersion;
0:     private int major;
0:     private int minor;
1:     
0:     public JavaVersionHolder(String javaVersion)
0:         throws java.lang.NumberFormatException
0:     {
0: 		// check for jdk12 or higher
0: 		int i = javaVersion.indexOf('.');
0: 		int j = javaVersion.indexOf('.', i+1);
0: 		majorVersion = javaVersion.substring(0, i);
0: 		try
0: 	    {
0: 		    Integer imajor = new Integer(majorVersion);
0: 		    major = imajor.intValue();
0: 		    if (j != -1)
0: 		    {
0: 		        minorVersion = javaVersion.substring(i+1, j);
0: 		        Integer iminor = new Integer(minorVersion);
0: 		        minor = iminor.intValue();
0: 		    }
0: 		    else
0: 		    {
0: 		        minorVersion = javaVersion.substring(i+1);
0: 		        Integer iminor = new Integer(minorVersion);
0: 		        minor = iminor.intValue();
0: 		    }
0: 		}
0: 		catch (NumberFormatException nfe)
0: 		{
0: 		    // Cannot parse the version as an Integer
0: 		    // such as on HP: hack for this special case
0: 		    if (javaVersion.startsWith("HP"))
0: 		    {
0: 		        // attempt to get the version
0: 		        StringTokenizer st = new StringTokenizer(javaVersion,".");
0: 		        String tmp = st.nextToken();
0: 		        majorVersion = st.nextToken();
0: 		        if (majorVersion.equals("01"))
0: 		            majorVersion = "1";
0: 		        else if (majorVersion.equals("02"))
0: 		            majorVersion = "2";
0: 		        minorVersion = st.nextToken();
0: 		        if (minorVersion.startsWith("1"))
0: 		            minorVersion = "1";
0: 		        else if (minorVersion.startsWith("2"))
0: 		            minorVersion = "2";
0: 		        //System.out.println("majorVersion: " + majorVersion);
0: 		        //System.out.println("minorVersion: " + minorVersion);
0: 		        try
0: 	            {
0: 		            Integer imajor = new Integer(majorVersion);
0: 		            major = imajor.intValue();
0: 		            Integer iminor = new Integer(minorVersion);
0: 		            minor = iminor.intValue();
0: 		        }
0: 		        catch (NumberFormatException nfe2)
0: 		        {
0: 		            System.out.println("Could not parse version: " + nfe2);
0: 		            // Still couldn't parse the vesion
0: 		            // have to give up
0: 		        }
0:             }
0:             else
0:             {
0:                 System.out.println("NumberFormatException thrown trying to parse the version.");
0:                 System.out.println("The test harness only handles the HP special case.");
0:             }
1:                 
0:         }
0:     }
1: 
0:     public String getMajorVersion()
0:     {
0:         return majorVersion;
0:     }
1:     
0:     public String getMinorVersion()
0:     {
0:         return minorVersion;
0:     }
1:     
0:     public int getMajorNumber()
0:     {
0:         return major;
0:     }
1:     
0:     public int getMinorNumber()
0:     {
0:         return minor;
0:     }
0: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.JavaVersionHolder
0: 
0:    Copyright 2000, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
============================================================================