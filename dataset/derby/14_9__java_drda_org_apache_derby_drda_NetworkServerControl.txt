1:eac0369: /*
1:d7258ed: 
1:d7258ed:    Derby - Class org.apache.derby.drda.NetworkServerControl
1:d7258ed: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:d7258ed: 
1:d7258ed:       http://www.apache.org/licenses/LICENSE-2.0
1:d7258ed: 
1:d7258ed:    Unless required by applicable law or agreed to in writing, software
1:d7258ed:    distributed under the License is distributed on an "AS IS" BASIS,
1:d7258ed:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7258ed:    See the License for the specific language governing permissions and
1:d7258ed:    limitations under the License.
32:eac0369: 
2:204c040:  */
1:eac0369: 
1:eac0369: package org.apache.derby.drda;
1:eac0369: 
1:eac0369: import java.io.PrintWriter;
1:9961d75: import java.net.Inet6Address;
1:db4c995: import java.net.InetAddress;
1:0aa7769: import java.net.URL;
1:8bdf7af: import java.security.AccessController;
1:69cf749: import java.security.CodeSource;
1:0feae43: import java.security.PrivilegedAction;
1:69cf749: import java.security.ProtectionDomain;
1:eac0369: import java.util.Properties;
1:eac0369: import org.apache.derby.iapi.reference.Property;
1:c9c3c8e: import org.apache.derby.iapi.services.property.PropertyUtil;
1:9085abb: import org.apache.derby.impl.drda.NetworkServerControlImpl;
1:eac0369: 
1:4f996a4: /** 
1:4f996a4:     NetworkServerControl provides the ability to start a Network Server or 
1:10acff8:     connect to a running Network Server to shutdown, configure or retrieve 
1:4f996a4:     diagnostic information.  With the exception of ping, these commands 
1:4f996a4:     can  only be performed from the  machine on which the server is running.  
1:4f996a4:     Commands can be performed from  the command line with the following 
1:4f996a4:     arguments:
1:eac0369: 
1:4f996a4:     <P>
1:4f996a4:     <UL>
1:dbed020:     <LI>start [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  This starts the Network
1:10acff8:     Server on the port/host specified or on localhost, port 1527 if no
1:4f996a4:     host/port is specified and no properties are set to override the 
1:10acff8:     defaults. By default a security manager with a default security policy will 
1:10acff8:     be installed. The default security policy file is called server.policy. 
1:10acff8:     By default the Network Server will only listen for 
1:4f996a4:     connections from the machine on which it is running. 
1:dbed020:     Use -h 0.0.0.0 to listen on all interfaces or -h &lt;hostname&gt; to listen 
1:4f996a4:     on a specific interface on a  multiple IP machine. 
1:503ce75:     For documentation on &lt;sslmode&gt;, consult the Server and Administration Guide.</LI>
1:eac0369: 
1:10acff8:     <LI>shutdown [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;] [-user &lt;username&gt;] [-password &lt;password&gt;]: This shutdowns the Network Server with given user credentials on the host and port specified or on the local host and port 1527(default) if no host or port is specified.  </LI> 
1:eac0369: 
1:dbed020:     <LI>ping [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]
1:4f996a4:     This will test whether the Network Server is up.
1:4f996a4:     </LI>
1:eac0369: 
1:dbed020:     <LI>sysinfo [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  This prints 
1:4f996a4:     classpath and version information about the Network Server, 
1:4f996a4:     the JVM and the Derby engine. 
1:3f9d812:     </LI>
1:eac0369: 
1:4f996a4:     <LI>runtimeinfo [-h &lt;host] [-p &lt;portnumber] [-ssl &lt;sslmode&gt;]: This prints
1:4f996a4:     extensive debbugging information about sessions, threads, 
1:4f996a4:     prepared statements, and memory usage for the running Network Server.
1:4f996a4:     </LI>
1:eac0369: 
1:dbed020:     <LI>logconnections {on | off} [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  
1:4f996a4:     This turns logging of connections on or off.  
1:4f996a4:     Connections are logged to derby.log. 
1:4f996a4:     Default is off.</LI>
1:eac0369: 
1:dbed020:     <LI>maxthreads &lt;max&gt; [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  
1:4f996a4:     This sets the maximum number of threads that can be used for connections. 
1:4f996a4:     Default 0 (unlimitted).
1:4f996a4:     </LI>
1:eac0369: 
1:dbed020:     <LI>timeslice &lt;milliseconds&gt; [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]: 
1:4f996a4:     This sets the time each session can have using a connection thread 
1:4f996a4:     before yielding to a waiting session. Default is 0 (no yeild).
1:4f996a4:     
1:4f996a4:     </LI>
1:eac0369: 
1:dbed020:     <LI>trace {on | off} [-s &lt;session id&gt;] [-h &lt;host&gt;] [-p &lt;portnumber&gt;]  [-ssl &lt;sslmode&gt;]: 
1:4f996a4:     This turns drda tracing on or off for the specified session or if no 
1:4f996a4:     session is  specified for all sessions. Default is off</LI>
1:eac0369: 
1:eac0369: 
1:dbed020:     <LI>tracedirectory &lt;tracedirectory&gt; [-h &lt;host&gt;] [-p &lt;portnumber&gt;]  [-ssl &lt;sslmode&gt;]: 
1:4f996a4:     This changes where new trace files will be placed. 
1:4f996a4:     For sessions with tracing already turned on,  
1:4f996a4:     trace files remain in the previous location. 
1:4f996a4:     Default is derby.system.home, if it is set. 
1:4f996a4:     Otherwise the default is the current directory.</LI>
1:eac0369: 
1:4f996a4:     </UL>
1:3f9d812:     </P>
1:4f996a4:     <P>Properties can be set in the derby.properties file or on the command line.
1:4f996a4:     Properties on the command line take precedence over properties in the 
1:4f996a4:     derby.properties file.  Arguments on the command line take precedence
1:4f996a4:     over properties. 
1:4f996a4:     The following is a list of properties that can be set for 
1:4f996a4:     NetworkServerControl:
1:eac0369: 
1:dbed020:     <UL><LI>derby.drda.portNumber=&lt;port number&gt;: This property 
1:4f996a4:     indicates which port should be used for the Network Server. </LI>
1:eac0369: 
1:dbed020:     <LI>derby.drda.host=&lt;host name  or ip address &gt;: This property 
1:3f9d812:     indicates the ip address to which NetworkServerControl should connect. </LI>
1:eac0369: 
1:dbed020:     <LI>derby.drda.traceDirectory=&lt;trace directory&gt;: This property 
1:4f996a4:     indicates where to put trace files. </LI>
1:eac0369: 
1:4f996a4:     <LI>derby.drda.traceAll=true:  This property turns on tracing for
1:4f996a4:     all sessions. Default is tracing is off.</LI>
1:eac0369: 
1:4f996a4:     <LI>derby.drda.logConnections=true:  This property turns on logging
1:4f996a4:     of connections. Default is connections are not logged.</LI>
1:eac0369: 
1:dbed020:     <LI>derby.drda.minThreads=&lt;value&gt;: If this property
1:dbed020:     is set, the &lt;value&gt; number of threads will be created when the Network Server is
1:4f996a4:     booted. </LI>
1:eac0369: 
1:dbed020:     <LI>derby.drda.maxThreads=&lt;value&gt;: If this property
1:dbed020:     is set, the &lt;value&gt; is the maximum number of connection threads that will be 
1:4f996a4:     created.  If a session starts when there are no connection threads available
1:4f996a4:     and the maximum number of threads has been reached, it will wait until a 
1:4f996a4:     conection thread becomes available. </LI>
1:eac0369: 
1:dbed020:     <LI>derby.drda.timeSlice=&lt;milliseconds&gt;: If this property
1:4f996a4:     is set, the connection threads will not check for waiting sessions until the
1:dbed020:     current session has been working for &lt;milliseconds&gt;.  
1:4f996a4:     A value of 0 causes the thread to work on the current session until the 
1:4f996a4:     session exits. If this property is not set, the default value is 0. </LI>
1:eac0369: 
1:dbed020:     <LI>derby.drda.sslMode=&lt;sslmode&gt; This property sets the SSL
1:503ce75:     mode of the server.
1:4f996a4:     
1:4f996a4: </LI>
1:3f9d812: </UL>
1:3f9d812: </P>
1:eac0369: 
1:3f9d812: <P><B>Examples.</B></P>
1:eac0369: 
1:4f996a4:     <P>This is an example of shutting down the server on port 1621.
1:4f996a4:     <PRE> 
1:4f996a4:     java org.apache.derby.drda.NetworkServerControl shutdown -p 1621
1:4f996a4:     </PRE>
1:3f9d812:     </P>
1:eac0369: 
1:4f996a4:     <P>This is an example of turning tracing on for session 3
1:4f996a4:     <PRE>
1:4f996a4:     java org.apache.derby.drda.NetworkServerControl  trace on -s 3 
1:4f996a4:     </PRE>
1:3f9d812:     </P>
1:eac0369: 
1:10acff8:     <P>This is an example of starting and then shutting down the Network 
1:10acff8:        Server on port 1621 on machine myhost   
1:4f996a4:     <PRE>
1:4f996a4:     java org.apache.derby.drda.NetworkServerControl  start -h myhost -p 1621
1:4f996a4:     java org.apache.derby.drda.NetworkServerControl  shutdown -h myhost -p 1621
1:4f996a4:     </PRE>
1:3f9d812:     </P>
1:eac0369: 
1:4f996a4:     <P> This is an example of starting and shutting down the Network Server in the example
1:4f996a4:     above with the API.
1:4f996a4:     <PRE>
1:4f996a4:     
1:4f996a4:     NetworkServerControl serverControl = new NetworkServerControl(InetAddress.getByName("myhost"),1621)
1:eac0369: 
1:4f996a4:     serverControl.shutdown();
1:4f996a4:     </PRE>
1:3f9d812:     </P>
1:4f996a4: 
1:eac0369:     
1:4f996a4: */
1:eac0369: 
1:141cd31: public class NetworkServerControl{
1:4f996a4: 
1:eac0369: 
1:eac0369:     
1:4f996a4:     public final static int DEFAULT_PORTNUMBER = 1527;
1:0aa7769: 
1:0aa7769:     private final static String DERBYNET_JAR = "derbynet.jar";
1:0aa7769:     private final static String POLICY_FILENAME = "server.policy";
1:0aa7769:     private final static String POLICY_FILE_PROPERTY = "java.security.policy";
1:f69e1a2:     private final static String DERBY_HOSTNAME_WILDCARD = "0.0.0.0";
1:8726476:     private final static String IPV6_HOSTNAME_WILDCARD = "::";
1:f69e1a2:     private final static String SOCKET_PERMISSION_HOSTNAME_WILDCARD = "*";
1:0aa7769: 
1:0aa7769:     private NetworkServerControlImpl serverImpl;
1:eac0369: 
1:4f996a4:     // constructor
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Creates a NetworkServerControl object that is configured to control
1:4f996a4:      * a Network Server on a specified port and InetAddress with given
1:4f996a4:      * user credentials.
1:4f996a4:      *
1:db9a013:      * @param address     The IP address of the Network Server host.
1:db9a013:      *                     address cannot be null.
1:4f996a4:      *
1:dbed020:      * @param portNumber  port number server is to used. If &lt;= 0,
1:db9a013:      *                    default port number is used
1:db9a013:      *
1:db9a013:      * @param userName    The user name for actions requiring authorization.
1:db9a013:      *
1:db9a013:      * @param password    The password for actions requiring authorization.
1:db9a013:      *
1:db9a013:      * @throws             Exception on error
1:4f996a4:      */
1:4f996a4:     public NetworkServerControl(InetAddress address, int portNumber,
1:4f996a4:                                 String userName, String password)
1:4f996a4:             throws Exception
1:0feae43:     {
1:4f996a4:         serverImpl = new NetworkServerControlImpl(address, portNumber,
1:4f996a4:                                                   userName, password);
1:4f996a4:     }
1:0aa7769: 
1:0aa7769:     /**
1:4f996a4:      * Creates a NetworkServerControl object that is configured to control
1:4f996a4:      * a Network Server on the default host and the default port with given
1:4f996a4:      * user credentials.
1:db9a013:      *
1:db9a013:      * @param userName    The user name for actions requiring authorization.
1:db9a013:      *
1:db9a013:      * @param password    The password for actions requiring authorization.
1:4f996a4:      *
1:db9a013:      * @throws             Exception on error
1:0aa7769:      */
1:4f996a4:     public NetworkServerControl(String userName, String password)
1:4f996a4:             throws Exception
1:0aa7769:     {
1:4f996a4:         serverImpl = new NetworkServerControlImpl(userName, password);
1:0aa7769:     }
1:0aa7769: 
1:4f996a4:     /**
1:4f996a4:      * 
1:4f996a4:      * Creates a NetworkServerControl object that is configured to control
1:4f996a4:      * a Network Server on a  specified port and InetAddress.
1:4f996a4:      *<P>
1:4f996a4:      * <B> Examples: </B>
1:3f9d812:      * </P>
1:4f996a4:      * <P>
1:4f996a4:      * To configure for port 1621 and listen on the loopback address:
1:4f996a4:      *<PRE>
1:4f996a4:      *  NetworkServerControl  util = new
1:4f996a4:      * NetworkServerControl(InetAddress.getByName("localhost"), 1621);
1:4f996a4:      * </PRE>
1:3f9d812:      * </P>
1:4f996a4:      *
1:4f996a4:      * @param address     The IP address of the Network Server host.
1:4f996a4:      *                     address cannot be null.
1:4f996a4: 
1:dbed020:      * @param portNumber  port number server is to used. If &lt;= 0,
1:4f996a4:      *                    default port number is used
1:4f996a4:      *                       
1:4f996a4:      * @throws             Exception on error
1:4f996a4:      */
1:4f996a4:     public NetworkServerControl(InetAddress address,int portNumber) throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl = new NetworkServerControlImpl(address, portNumber);
1:4f996a4:     }
1:204c040: 
1:204c040: 
1:4f996a4:     /**
1:4f996a4:      * 
1:4f996a4:      * Creates a NetworkServerControl object that is configured to control
1:4f996a4:      * a Network Server on the default host(localhost)
1:4f996a4:      * and the default port(1527) unless derby.drda.portNumber and 
1:4f996a4:      * derby.drda.host are set.
1:4f996a4:      * <P><PRE>
1:4f996a4:      * new NetworkServerControl() 
1:4f996a4:      *
1:4f996a4:      * is equivalent to calling
1:4f996a4:      *
1:4f996a4:      * new NetworkServerControl(InetAddress.getByName("localhost"),1527);
1:4f996a4:      * </PRE>
1:3f9d812:      * </P>
1:4f996a4:      *
1:4f996a4:      * @throws             Exception on error
1:4f996a4:      */
1:4f996a4:     public NetworkServerControl() throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl = new NetworkServerControlImpl();
1:4f996a4:     }
1:4f996a4:     
1:204c040:     
1:4f996a4:     /**
1:4f996a4:      * main routine for NetworkServerControl
1:4f996a4:      *
1:db9a013:      * @param args  array of arguments indicating command to be executed.
1:4f996a4:      * See class comments for more information
1:4f996a4:      */
1:eac0369:     public static void main(String args[]) {
1:5252985:         NetworkServerControlImpl server = null;
1:0aa7769: 
1:0aa7769:         //
1:0aa7769:         // The following variable lets us preserve the error printing behavior
1:0aa7769:         // seen before we started installing a security manager. Errors can be
1:0aa7769:         // raised as we figure out whether we need to install a security manager
1:0aa7769:         // and during the actual installation of the security manager. We need
1:0aa7769:         // to print out these errors. The old error printing behavior assumed
1:0aa7769:         // that all errors were generated inside NetworkServerControlImpl and
1:0aa7769:         // were reported there.
1:0aa7769:         //
1:0aa7769:         boolean                                 printErrors = true;
1:c9c3c8e:         
1:5252985:         try
1:0aa7769:         {
1:5252985:             server = new NetworkServerControlImpl();
1:0aa7769:             
1:0aa7769:             int     command = server.parseArgs( args );
1:0aa7769: 
1:a65a598:             // Java 7 and above: file permission restriction
1:0d57d84:             if (command == NetworkServerControlImpl.COMMAND_START) {
1:8bdf7af:                 try {
1:0feae43:                     AccessController.doPrivileged((PrivilegedAction<Void>) () ->
1:0aa7769:                     {
1:0feae43:                         System.setProperty(
1:0feae43:                                 Property.SERVER_STARTED_FROM_CMD_LINE,
1:0feae43:                                 "true");
1:0feae43:                         return null;
1:0feae43:                     });
1:8bdf7af:                 } catch (Exception e) {
1:8bdf7af:                     server.consoleExceptionPrintTrace(e);
1:5252985:                     System.exit(1);
1:69cf749:                 }
1:4f996a4:             }
1:0aa7769: 
1:0aa7769:             //
1:0aa7769:             // In order to run secure-by-default, we install a security manager
1:0aa7769:             // if one isn't already installed. This feature is described by DERBY-2196.
1:0aa7769:             //
1:0aa7769:             if ( needsSecurityManager( server, command ) )
1:0aa7769:             {
1:0aa7769:                 verifySecurityState( server );
1:0aa7769:                 installSecurityManager( server );
1:0aa7769:             }
1:0aa7769: 
1:0aa7769:             //
1:0aa7769:             // From this point on, NetworkServerControlImpl is responsible for
1:0aa7769:             // printing errors.
1:0aa7769:             //
1:0aa7769:             printErrors = false;
1:0aa7769:             server.executeWork( command );
2:5252985:         }
1:5252985:         catch (Exception e)
1:4f996a4:         {
1:4f996a4:             //if there was an error, exit(1)
1:4f996a4:             if ((e.getMessage() == null) ||
1:0aa7769:                 !e.getMessage().equals(NetworkServerControlImpl.UNEXPECTED_ERR) ||
1:0aa7769:                 printErrors
1:0aa7769:             )
1:4f996a4:             {
1:4f996a4:                 if (server != null)
1:4f996a4:                     server.consoleExceptionPrint(e);
1:4f996a4:                 else
1:4f996a4:                     e.printStackTrace();  // default output stream is System.out
1:4f996a4:             }
1:4f996a4:             // else, we've already printed a trace, so just exit.
1:4f996a4:             System.exit(1);
1:4f996a4:         }
1:4f996a4:         System.exit(0);
1:0aa7769:         
1:4f996a4:     }
1:0aa7769: 
1:4f996a4:     /**********************************************************************
1:4f996a4:      * Public NetworkServerControl  commands
1:4f996a4:      * The server commands throw exceptions for errors, so that users can handle
1:4f996a4:      * them themselves.
1:4f996a4:      ************************************************************************
1:4f996a4:      **/
1:0aa7769: 
1:7258ed2:     /** Start a Network Server.
1:10acff8:      *  This method will launch a separate thread and start a Network Server.
1:4f996a4:      *  This method  may return before the server is ready to accept connections.
1:10acff8:      *  This will also install a security manager with a default security policy.
1:4f996a4:      *  Use the ping method to verify that the server has started.
1:4f996a4:      *
1:4f996a4:      * <P>
1:4f996a4:      *  Note: an alternate method to starting the Network Server with the API,
1:4f996a4:      *  is to use the derby.drda.startNetworkServer property in 
1:4f996a4:      *  derby.properties.
1:3f9d812:      * </P>
1:4f996a4:      *  
1:4f996a4:      * 
1:4f996a4:      * @param consoleWriter   PrintWriter to which server console will be 
1:4f996a4:      *                        output. Null will disable console output. 
1:4f996a4:      *
1:4f996a4:      * @exception Exception if there is an error starting the server.
1:4f996a4:      *
1:4f996a4:      * @see #shutdown
1:4f996a4:      */
1:4f996a4:     public void start(PrintWriter consoleWriter) throws Exception
2:4f996a4:     {
1:4f996a4:         serverImpl.start(consoleWriter);
1:4f996a4:     }
1:0aa7769: 
1:ead9873:     
1:4f996a4: 
1:0aa7769:     /**
1:4f996a4:      * Shutdown a Network Server.
1:4f996a4:      * Shuts down the Network Server listening on the port and InetAddress
1:4f996a4:      * specified in the constructor for this NetworkServerControl object.
6:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public void shutdown()
1:0aa7769:         throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl.shutdown();
1:4f996a4:     }
1:dc43cf8: 
1:4f996a4:     /**
1:7258ed2:      * Check if the Network Server is started.
1:4f996a4:      * Excecutes and returns without error if the server has started
1:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public void  ping() throws Exception
1:4f996a4:     {
1:4f996a4:          serverImpl.ping();
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Turn tracing on or off for the specified connection 
1:4f996a4:      * on the Network Server.
1:4f996a4:      *
1:4f996a4:      * @param on true to turn tracing on, false to turn tracing off.
1:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public void trace(boolean on)
2:4f996a4:         throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl.trace(on);
1:4f996a4:     }
1:eac0369: 
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Turn tracing on or off for all connections on the Network Server.
1:4f996a4:      *
1:4f996a4:      * @param connNum connection number. Note: Connection numbers will print
1:4f996a4:      *                in the Derby error log if logConnections is on
1:4f996a4:      * @param on true to turn tracing on, false to turn tracing off.
1:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public void trace(int connNum, boolean on)
1:4f996a4:         throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl.trace(connNum, on);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Turn logging connections on or off. When logging is turned on a message is
1:4f996a4:      * written to the Derby error log each time a connection 
1:4f996a4:      * is made.
1:4f996a4:      *
1:4f996a4:      * @param on            true to turn on, false to turn  off
1:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public void logConnections(boolean on)
1:4f996a4:         throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl.logConnections(on);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Set directory for trace files. The directory must be on the machine
1:4f996a4:      * where the server is running.
1:4f996a4:      *
1:4f996a4:      * @param traceDirectory    directory for trace files on machine 
1:4f996a4:      *                          where server is running
1:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public void setTraceDirectory(String traceDirectory)
1:4f996a4:         throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl.sendSetTraceDirectory(traceDirectory);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Return classpath and version information about the running 
1:4f996a4:      * Network Server. 
1:4f996a4:      *
1:4f996a4:      * @return sysinfo output
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public String getSysinfo()
1:4f996a4:         throws Exception
1:4f996a4:     {
1:4f996a4:         
1:4f996a4:         return serverImpl.sysinfo();
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Return detailed session runtime information about sessions,
1:4f996a4:      * prepared statements, and memory usage for the running Network Server. 
1:4f996a4:      *
1:4f996a4:      * @return run time information
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public String getRuntimeInfo()
1:4f996a4:         throws Exception
1:4f996a4:     {
1:4f996a4:         return serverImpl.runtimeInfo();
1:4f996a4:     }
1:eac0369: 
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Set Network Server maxthread parameter.  This is the maximum number 
1:4f996a4:      * of threads that will be used for JDBC client connections.   setTimeSlice
1:4f996a4:      * should also be set so that clients will yield appropriately.
1:4f996a4:      *
1:db9a013:      * @param max       maximum number of connection threads.
1:dbed020:      *                  If &lt;= 0, connection threads will be created when 
1:4f996a4:      *                  there are no free connection threads.
1:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      * @see #setTimeSlice
1:4f996a4:      */
1:4f996a4:     public void setMaxThreads(int max) throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl.netSetMaxThreads(max);
1:4f996a4:     }
1:eac0369: 
1:eac0369: 
1:4f996a4:     /** Returns the current maxThreads setting for the running Network Server
1:4f996a4:      * 
1:4f996a4:      * @return maxThreads setting 
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      * @see #setMaxThreads
1:4f996a4:      */
1:4f996a4:     public int getMaxThreads() throws Exception
1:4f996a4:     {
1:4f996a4:         String val =serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_MAXTHREADS);
1:4f996a4: 
1:eac0369:         
1:4f996a4:         return Integer.parseInt(val);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Set Network Server connection time slice parameter.  
1:dbed020:      * This should be set and is only relevant if setMaxThreads &gt; 0.
1:4f996a4:      *
1:db9a013:      * @param timeslice number of milliseconds given to each session before yielding to
1:dbed020:      *                      another session, if &lt;=0, never yield.
1:4f996a4:      *
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      * @see #setMaxThreads
1:4f996a4:      */
1:4f996a4:     public void setTimeSlice(int timeslice) throws Exception
1:4f996a4:     {
1:4f996a4:         serverImpl.netSetTimeSlice(timeslice);
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /** Return the current timeSlice setting for the running Network Server
1:4f996a4:      * 
1:4f996a4:      * @return timeSlice  setting
1:4f996a4:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      * @see #setTimeSlice
1:4f996a4:      */
1:4f996a4:     public int getTimeSlice() throws Exception
1:4f996a4:     {
1:4f996a4:         String val  =
1:4f996a4:             serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_TIMESLICE);
1:4f996a4:         return Integer.parseInt(val);
1:4f996a4:     }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:4f996a4:     /**
1:4f996a4:      * Get current Network server properties
1:4f996a4:      *
1:4f996a4:      * @return Properties object containing Network server properties
1:db9a013:      * @exception Exception throws an exception if an error occurs
1:4f996a4:      */
1:4f996a4:     public Properties getCurrentProperties() throws Exception
1:4f996a4:     {
1:4f996a4:         return serverImpl.getCurrentProperties();
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /** Protected methods ***/
1:eac0369: 
1:4f996a4:     /***
1:4f996a4:      * set the client locale. Used by servlet for localization
1:4f996a4:      * @param locale  Locale to use
1:4f996a4:      *
1:4f996a4:      */
1:4f996a4:           
1:4f996a4:     protected void setClientLocale(String locale)
1:4f996a4:     {
1:06797bd:         serverImpl.setClientLocale( locale );
1:4f996a4:     }
1:eac0369: 
1:4f996a4:     /**
1:0aa7769:      * Return true if we need to install a Security Manager. All of the
1:0aa7769:      * following must apply. See DERBY-2196.
1:0aa7769:      *
1:0aa7769:      * <ul>
1:0aa7769:      * <li>The VM was booted with NetworkServerContro.main() as the
1:0aa7769:      * entry point. This is handled by the fact that this method is only called
1:0aa7769:      * by main().</li>
1:0aa7769:      * <li>The VM isn't already running a SecurityManager.</li>
1:0aa7769:      * <li>The command must be "start".</li>
1:61c43d9:      * <li>The customer didn't specify the -noSecurityManager flag on the startup command
1:0aa7769:      * line.</li>
1:0aa7769:      * </ul>
1:0aa7769:      */
1:0aa7769:     private static  boolean needsSecurityManager( NetworkServerControlImpl server, int command )
1:0aa7769:         throws Exception
1:0aa7769:     {
1:0aa7769:         return
2:0aa7769:             (
1:0aa7769:              (System.getSecurityManager() == null) &&
1:0aa7769:              (command == NetworkServerControlImpl.COMMAND_START) &&
1:fb6b9e8:              (!server.runningUnsecure())
2:0aa7769:              );
1:7093bb6:    }
1:7093bb6:     
1:7093bb6:     /**
1:0aa7769:      * Verify that all prerequisites are met before bringing up a security
1:84f4b0a:      * manager. See DERBY-2196. If prerequisites aren't met, raise an
1:84f4b0a:      * exception which explains how to get up and running. At one point, we were going to require
1:84f4b0a:      * that authentication be enabled before bringing up a security manager.
1:84f4b0a:      * This, however, gave rise to incompatibilities. See DERBY-2757.
1:84f4b0a:      *
1:84f4b0a:      * Currently, this method is a nop.
1:7093bb6:      */
1:0aa7769:     private static  void verifySecurityState( NetworkServerControlImpl server )
1:7093bb6:         throws Exception
1:7093bb6:     {
1:0aa7769:     }
1:7093bb6: 
1:7093bb6:     
1:0aa7769:     /**
1:0aa7769:      * Install a SecurityManager governed by the Basic startup policy. See DERBY-2196.
1:0aa7769:      */
1:0aa7769:     private static  void installSecurityManager( NetworkServerControlImpl server )
1:0aa7769:         throws Exception
1:0aa7769:     {
3:0aa7769:         //
1:0aa7769:         // The Basic policy refers to some properties. Make sure they are set.
1:0aa7769:         //
1:c9c3c8e:         if ( PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) == null )
1:c9c3c8e:         { System.setProperty( Property.SYSTEM_HOME_PROPERTY, PropertyUtil.getSystemProperty( "user.dir" ) ); }
1:0aa7769: 
1:f69e1a2:         //
1:63adae8:         // Make sure the following property is set so that it can be substituted into the
1:63adae8:         // policy file. That will let us grant write permission on the server's
1:63adae8:         // trace file.
1:63adae8:         //
1:63adae8:         if ( PropertyUtil.getSystemProperty( Property.DRDA_PROP_TRACEDIRECTORY ) == null )
1:63adae8:         { System.setProperty( Property.DRDA_PROP_TRACEDIRECTORY, PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) ); }
1:63adae8: 
1:63adae8:         //
1:f69e1a2:         // Forcibly set the following property so that it will be correctly
1:8726476:         // substituted into the default policy file. This is the hostname for
1:8726476:         // SocketPermissions. This is an internal property which customers
1:8726476:         // may not override.
1:f69e1a2:         //
1:8726476:         System.setProperty( Property.DERBY_SECURITY_HOST, getHostNameForSocketPermission( server ) );
1:8726476: 
1:0aa7769:         //
1:ead9873:         // Forcibly set the following property so that it will be correctly
1:ead9873:         // substituted into the default policy file. This is the hostname for
1:ead9873:         // SocketPermissions. This is an internal property which customers
1:ead9873:         // may not override.
1:0aa7769:         //
1:ead9873:         System.setProperty(Property.DERBY_SECURITY_PORT,
1:ead9873:                            String.valueOf(server.getPort()));
1:0aa7769: 
1:0aa7769:         //
1:0aa7769:         // Forcibly set the following property. This is the parameter in
1:0aa7769:         // the Basic policy which points at the directory where the embedded and
1:0aa7769:         // network codesources. Do not let the customer
1:0aa7769:         // override this
1:0aa7769:         //
1:0aa7769:         String      derbyInstallURL = getCodeSourcePrefix( server );
1:0aa7769: 
1:0aa7769:         System.setProperty( Property.DERBY_INSTALL_URL, derbyInstallURL );
1:0aa7769:         
1:0aa7769:         //
1:0aa7769:         // Now install a SecurityManager, using the Basic policy file.
1:0aa7769:         //
1:0aa7769:         String      policyFileURL = getPolicyFileURL();
1:0aa7769: 
1:0aa7769:         System.setProperty( POLICY_FILE_PROPERTY, policyFileURL );
1:0aa7769:         
1:0aa7769:         SecurityManager     securityManager = new SecurityManager();
1:0aa7769: 
1:0aa7769:         System.setSecurityManager( securityManager );
1:0aa7769: 
1:0aa7769:         // Report success.
1:69cf749:         if (securityManager.equals(System.getSecurityManager())) {
1:69cf749:             String successMessage = server.localizeMessage(
1:69cf749:                     "DRDA_SecurityInstalled.I", null);
1:69cf749:             server.consoleMessage(successMessage, true);
1:0aa7769:         }
1:0aa7769:     }
1:0aa7769: 
1:0aa7769:     /**
1:f69e1a2:      * Get the hostname as a value suitable for substituting into the
1:f69e1a2:      * default server policy file. The special
1:8726476:      * wildcard valuse "0.0.0.0" and "::" are forced to be "*" since that is the wildcard
1:f69e1a2:      * hostname understood by SocketPermission. SocketPermission does
1:9961d75:      * not understand the "0.0.0.0" and "::" wildcards. IPV6 addresses are
1:9961d75:      * enclosed in square brackets. This logic arose from two JIRAs:
1:9961d75:      * DERBY-2811 and DERBY-2874.
1:f69e1a2:      */
1:f69e1a2:     private static String  getHostNameForSocketPermission( NetworkServerControlImpl server )
1:f69e1a2:         throws Exception
1:f69e1a2:     {
1:f69e1a2:         //
1:f69e1a2:         // By now, server.getPropertyInfo() has been called, followed by
1:f69e1a2:         // server.parseArgs(). So the server knows its hostname.
1:f69e1a2:         //
1:f69e1a2:         String  hostname = server.getHost();
1:f69e1a2:         
1:8726476:         if (
1:05524f7:             hostnamesEqual( DERBY_HOSTNAME_WILDCARD, hostname ) ||
1:8726476:             IPV6_HOSTNAME_WILDCARD.equals( hostname ) 
1:8726476:             )
1:8726476:         { hostname = SOCKET_PERMISSION_HOSTNAME_WILDCARD; }
1:9961d75:         else if ( isIPV6Address( hostname ) )
1:9961d75:         { hostname = '[' + hostname + "]:0-"; }
1:f69e1a2: 
1:f69e1a2:         return hostname;
1:f69e1a2:     }
1:05524f7: 
1:05524f7:     // return true if the two hostnames are equivalent
1:05524f7:     private static  boolean hostnamesEqual( String left, String right )
1:05524f7:     {
1:05524f7:         try {
1:05524f7:             InetAddress leftAddress = InetAddress.getByName( left );
1:05524f7:             InetAddress rightAddress = InetAddress.getByName( right );
1:05524f7: 
1:05524f7:             return leftAddress.equals( rightAddress );
1:05524f7:             
1:05524f7:         } catch (Exception e) { return false; }
1:05524f7:     }
1:f69e1a2:     
1:9961d75:     // return true if the host address is an IPV6 address
1:9961d75:     private static  boolean isIPV6Address( String hostname )
1:9961d75:     {
1:9961d75:         if ( hostname == null ) { return false; }
1:9961d75: 
1:9961d75:         //
1:9961d75:         // First make sure that the address is composed entirely
1:9961d75:         // of hex digits and colons.
1:9961d75:         //
1:9961d75:         int         count = hostname.length();
1:9961d75: 
1:9961d75:         for ( int i = 0; i < count; i++ )
1:9961d75:         {
1:9961d75:             char    currentChar = hostname.charAt( i );
1:9961d75: 
1:9961d75:             if ( currentChar == ':' ) { continue; }
1:9961d75:             if ( Character.digit( currentChar, 16 ) >= 0 ) { continue; }
1:9961d75: 
1:9961d75:             return false;
1:9961d75:         }
1:9961d75: 
1:9961d75:         //
1:9961d75:         // OK, now see whether the address is parsed as an IPV6 address.
1:9961d75:         //
1:9961d75:         
1:9961d75:         try {
1:9961d75:             InetAddress address = InetAddress.getByName( hostname );
1:9961d75: 
1:9961d75:             return (address instanceof Inet6Address);
1:9961d75:             
1:9961d75:         } catch (Exception e) { return false; }
1:9961d75:     }
1:9961d75: 
1:f69e1a2:     /**
1:0aa7769:      *<p>
1:0aa7769:      * Find the url of the library directory which holds derby.jar and
1:0aa7769:      * derbynet.jar. The Basic policy assumes that both jar files live in the
1:0aa7769:      * same directory.
1:0aa7769:      * </p>
1:0aa7769:      */
1:0aa7769:     private static  String  getCodeSourcePrefix( NetworkServerControlImpl server )
1:0aa7769:         throws Exception
1:0aa7769:     {
1:69cf749:         // Note: This method is expected to run only when no security manager
1:69cf749:         //       has been installed, hence no use of privileged blocks.
1:69cf749:         ProtectionDomain pd = NetworkServerControl.class.getProtectionDomain();
1:69cf749:         CodeSource cs = pd.getCodeSource();
1:69cf749:         if (cs == null) {
1:69cf749:             return null;
1:69cf749:         }
1:69cf749:         URL url = cs.getLocation();
1:69cf749:         if (url == null) {
1:69cf749:             return null;
1:69cf749:         }
1:69cf749:         // Replace in "file://some", but not in "file:///some".
1:69cf749:         String extForm = url.toExternalForm().replaceFirst(
1:69cf749:                 "^file://([^/].*)", "file:////$1");
1:69cf749:         int idx = extForm.indexOf(DERBYNET_JAR);
1:0aa7769: 
1:0aa7769:         //
1:0aa7769:         // If the customer isn't running against jar files, our Basic policy
1:0aa7769:         // won't work.
1:0aa7769:         //
1:0aa7769:         if ( idx < 0 )
1:0aa7769:         {
1:0aa7769:             String  errorMessage = server.localizeMessage( "DRDA_MissingNetworkJar.S", null );
1:0aa7769: 
2:0aa7769:             // this throws an exception and exits this method
2:0aa7769:             server.consoleError( errorMessage );
1:0aa7769:         }
1:0aa7769: 
1:0aa7769:         //
1:0aa7769:         // Otherwise, we have the directory prefix for our url.
1:0aa7769:         //
1:69cf749:         String directoryPrefix = extForm.substring(0, idx);
1:0aa7769: 
1:0aa7769:         return directoryPrefix;
1:0aa7769:     }
1:0aa7769: 
1:0aa7769:     /**
1:0aa7769:      *<p>
1:0aa7769:      * Get the URL of the policy file. Typically, this will be some pointer into
1:0aa7769:      * derbynet.jar.
1:0aa7769:      * </p>
1:0aa7769:      */
1:0aa7769:     private static  String getPolicyFileURL()
1:0aa7769:         throws Exception
1:0aa7769:     {
1:0aa7769:         String      resourceName =
1:0aa7769:             NetworkServerControl.class.getPackage().getName().replace( '.', '/' ) +
1:0aa7769:             '/' +
1:0aa7769:             POLICY_FILENAME;
1:0aa7769:         URL         resourceURL = NetworkServerControl.class.getClassLoader().getResource( resourceName );
1:0aa7769:         String      stringForm = resourceURL.toExternalForm();
1:0aa7769: 
1:0aa7769:         return stringForm;
1:0aa7769:     }
1:0aa7769: 
1:5252985: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:     <LI>start [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  This starts the Network
1:     Use -h 0.0.0.0 to listen on all interfaces or -h &lt;hostname&gt; to listen 
1:     <LI>ping [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]
1:     <LI>sysinfo [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  This prints 
/////////////////////////////////////////////////////////////////////////
1:     <LI>logconnections {on | off} [-h &lt;host&gt;] [-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  
1:     <LI>maxthreads &lt;max&gt; [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]:  
1:     <LI>timeslice &lt;milliseconds&gt; [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;]: 
1:     <LI>trace {on | off} [-s &lt;session id&gt;] [-h &lt;host&gt;] [-p &lt;portnumber&gt;]  [-ssl &lt;sslmode&gt;]: 
1:     <LI>tracedirectory &lt;tracedirectory&gt; [-h &lt;host&gt;] [-p &lt;portnumber&gt;]  [-ssl &lt;sslmode&gt;]: 
/////////////////////////////////////////////////////////////////////////
1:     <UL><LI>derby.drda.portNumber=&lt;port number&gt;: This property 
1:     <LI>derby.drda.host=&lt;host name  or ip address &gt;: This property 
1:     <LI>derby.drda.traceDirectory=&lt;trace directory&gt;: This property 
/////////////////////////////////////////////////////////////////////////
1:     <LI>derby.drda.minThreads=&lt;value&gt;: If this property
1:     is set, the &lt;value&gt; number of threads will be created when the Network Server is
1:     <LI>derby.drda.maxThreads=&lt;value&gt;: If this property
1:     is set, the &lt;value&gt; is the maximum number of connection threads that will be 
1:     <LI>derby.drda.timeSlice=&lt;milliseconds&gt;: If this property
1:     current session has been working for &lt;milliseconds&gt;.  
1:     <LI>derby.drda.sslMode=&lt;sslmode&gt; This property sets the SSL
/////////////////////////////////////////////////////////////////////////
1:      * @param portNumber  port number server is to used. If &lt;= 0,
/////////////////////////////////////////////////////////////////////////
1:      * @param portNumber  port number server is to used. If &lt;= 0,
/////////////////////////////////////////////////////////////////////////
1:      *                  If &lt;= 0, connection threads will be created when 
/////////////////////////////////////////////////////////////////////////
1:      * This should be set and is only relevant if setMaxThreads &gt; 0.
1:      *                      another session, if &lt;=0, never yield.
commit:06797bd
/////////////////////////////////////////////////////////////////////////
1:         serverImpl.setClientLocale( locale );
commit:fb6b9e8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:              (!server.runningUnsecure())
commit:7093bb6
/////////////////////////////////////////////////////////////////////////
0:      * <li>Classes live in the jar files which we expect..</li>
/////////////////////////////////////////////////////////////////////////
0:              (!server.runningUnsecure()) &&
0:              (packagingLooksGood())
0:      * Return true if the server lives in the expected jar file. This
0:      * is meant to address DERBY-3083. We expect that the URL of
0:      * the jar which contains NetworkServerControl will end with the
0:      * string "derbynet.jar". If this is true, then getCodeSourcePrefix()
0:      * will return a prefix which can be substituted into the default
0:      * server policy file and so end up granting permissions to the server jar file.
1:      */
0:     private static  boolean packagingLooksGood()
1:         throws Exception
1:     {
0:         String      derbyNetURL = NetworkServerControl.class.getProtectionDomain().getCodeSource().getLocation().toExternalForm();
1: 
0:         return derbyNetURL.endsWith( DERBYNET_JAR );
1:     }
1: 
1: 
1:     /**
commit:63adae8
/////////////////////////////////////////////////////////////////////////
1:         // Make sure the following property is set so that it can be substituted into the
1:         // policy file. That will let us grant write permission on the server's
1:         // trace file.
1:         //
1:         if ( PropertyUtil.getSystemProperty( Property.DRDA_PROP_TRACEDIRECTORY ) == null )
1:         { System.setProperty( Property.DRDA_PROP_TRACEDIRECTORY, PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) ); }
1: 
1:         //
commit:9961d75
/////////////////////////////////////////////////////////////////////////
1: import java.net.Inet6Address;
/////////////////////////////////////////////////////////////////////////
1:      * not understand the "0.0.0.0" and "::" wildcards. IPV6 addresses are
1:      * enclosed in square brackets. This logic arose from two JIRAs:
1:      * DERBY-2811 and DERBY-2874.
/////////////////////////////////////////////////////////////////////////
1:         else if ( isIPV6Address( hostname ) )
1:         { hostname = '[' + hostname + "]:0-"; }
/////////////////////////////////////////////////////////////////////////
1:     // return true if the host address is an IPV6 address
1:     private static  boolean isIPV6Address( String hostname )
1:     {
1:         if ( hostname == null ) { return false; }
1: 
1:         //
1:         // First make sure that the address is composed entirely
1:         // of hex digits and colons.
1:         //
1:         int         count = hostname.length();
1: 
1:         for ( int i = 0; i < count; i++ )
1:         {
1:             char    currentChar = hostname.charAt( i );
1: 
1:             if ( currentChar == ':' ) { continue; }
1:             if ( Character.digit( currentChar, 16 ) >= 0 ) { continue; }
1: 
1:             return false;
1:         }
1: 
1:         //
1:         // OK, now see whether the address is parsed as an IPV6 address.
1:         //
1:         
1:         try {
1:             InetAddress address = InetAddress.getByName( hostname );
1: 
1:             return (address instanceof Inet6Address);
1:             
1:         } catch (Exception e) { return false; }
1:     }
1: 
commit:05524f7
/////////////////////////////////////////////////////////////////////////
1:             hostnamesEqual( DERBY_HOSTNAME_WILDCARD, hostname ) ||
1: 
1:     // return true if the two hostnames are equivalent
1:     private static  boolean hostnamesEqual( String left, String right )
1:     {
1:         try {
1:             InetAddress leftAddress = InetAddress.getByName( left );
1:             InetAddress rightAddress = InetAddress.getByName( right );
1: 
1:             return leftAddress.equals( rightAddress );
1:             
1:         } catch (Exception e) { return false; }
1:     }
commit:c17e995
/////////////////////////////////////////////////////////////////////////
commit:8726476
/////////////////////////////////////////////////////////////////////////
1: 	private final static String IPV6_HOSTNAME_WILDCARD = "::";
/////////////////////////////////////////////////////////////////////////
1:         // substituted into the default policy file. This is the hostname for
1:         // SocketPermissions. This is an internal property which customers
1:         // may not override.
1:         System.setProperty( Property.DERBY_SECURITY_HOST, getHostNameForSocketPermission( server ) );
0:         server.consoleMessage( "XXX " + Property.DERBY_SECURITY_HOST + " = " + PropertyUtil.getSystemProperty( Property.DERBY_SECURITY_HOST )  );
1:         
/////////////////////////////////////////////////////////////////////////
1:      * wildcard valuse "0.0.0.0" and "::" are forced to be "*" since that is the wildcard
0:      * not understand the "0.0.0.0" and "::" wildcards.
/////////////////////////////////////////////////////////////////////////
1:         if (
0:             DERBY_HOSTNAME_WILDCARD.equals( hostname ) ||
1:             IPV6_HOSTNAME_WILDCARD.equals( hostname ) 
1:             )
1:         { hostname = SOCKET_PERMISSION_HOSTNAME_WILDCARD; }
commit:f69e1a2
/////////////////////////////////////////////////////////////////////////
1: 	private final static String DERBY_HOSTNAME_WILDCARD = "0.0.0.0";
1: 	private final static String SOCKET_PERMISSION_HOSTNAME_WILDCARD = "*";
/////////////////////////////////////////////////////////////////////////
1:         //
1:         // Forcibly set the following property so that it will be correctly
0:         // substituted into the default policy file. It is ok to force this
0:         // property at this time because it has already been read
0:         // (and if necessary overridden) by server.getPropertyInfo()
0:         // followed by server.parseArgs().
1:         //
0:         System.setProperty( Property.DRDA_PROP_HOSTNAME, getHostNameForSocketPermission( server ) );
/////////////////////////////////////////////////////////////////////////
1:      * Get the hostname as a value suitable for substituting into the
1:      * default server policy file. The special
0:      * wildcard value "0.0.0.0" is forced to be "*" since that is the wildcard
1:      * hostname understood by SocketPermission. SocketPermission does
0:      * not understand the "0.0.0.0" wildcard.
1:      */
1:     private static String  getHostNameForSocketPermission( NetworkServerControlImpl server )
1:         throws Exception
1:     {
1:         //
1:         // By now, server.getPropertyInfo() has been called, followed by
1:         // server.parseArgs(). So the server knows its hostname.
1:         //
1:         String  hostname = server.getHost();
1:         
0:         if ( DERBY_HOSTNAME_WILDCARD.equals( hostname ) ) { hostname = SOCKET_PERMISSION_HOSTNAME_WILDCARD; }
1: 
1:         return hostname;
1:     }
1:     
1:     /**
commit:84f4b0a
/////////////////////////////////////////////////////////////////////////
1:      * manager. See DERBY-2196. If prerequisites aren't met, raise an
1:      * exception which explains how to get up and running. At one point, we were going to require
1:      * that authentication be enabled before bringing up a security manager.
1:      * This, however, gave rise to incompatibilities. See DERBY-2757.
1:      *
1:      * Currently, this method is a nop.
commit:d9e0247
/////////////////////////////////////////////////////////////////////////
0:             String  errorMessage = server.localizeMessage( "DRDA_NoAuthentication.S", null );
commit:c9c3c8e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.property.PropertyUtil;
/////////////////////////////////////////////////////////////////////////
0:         String      authenticationProperty =
0:             PropertyUtil.getSystemProperty( Property.REQUIRE_AUTHENTICATION_PARAMETER );
0:         boolean     authenticationRequired = Boolean.valueOf( authenticationProperty ).booleanValue();
1:         
0:         if ( !authenticationRequired )
/////////////////////////////////////////////////////////////////////////
1:         if ( PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) == null )
1:         { System.setProperty( Property.SYSTEM_HOME_PROPERTY, PropertyUtil.getSystemProperty( "user.dir" ) ); }
0:         if ( PropertyUtil.getSystemProperty( Property.DRDA_PROP_HOSTNAME ) == null )
commit:61c43d9
/////////////////////////////////////////////////////////////////////////
1:      * <li>The customer didn't specify the -noSecurityManager flag on the startup command
commit:0aa7769
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	private final static String DERBYNET_JAR = "derbynet.jar";
1: 	private final static String POLICY_FILENAME = "server.policy";
1: 	private final static String POLICY_FILE_PROPERTY = "java.security.policy";
1: 
1:     private NetworkServerControlImpl serverImpl;
/////////////////////////////////////////////////////////////////////////
1: 
1:         //
1:         // The following variable lets us preserve the error printing behavior
1:         // seen before we started installing a security manager. Errors can be
1:         // raised as we figure out whether we need to install a security manager
1:         // and during the actual installation of the security manager. We need
1:         // to print out these errors. The old error printing behavior assumed
1:         // that all errors were generated inside NetworkServerControlImpl and
1:         // were reported there.
1:         //
1:         boolean                                 printErrors = true;
1:         
1:             
1:             int     command = server.parseArgs( args );
1: 
1:             //
1:             // In order to run secure-by-default, we install a security manager
1:             // if one isn't already installed. This feature is described by DERBY-2196.
1:             //
1:             if ( needsSecurityManager( server, command ) )
1:             {
1:                 verifySecurityState( server );
1:                 installSecurityManager( server );
1:             }
1: 
1:             //
1:             // From this point on, NetworkServerControlImpl is responsible for
1:             // printing errors.
1:             //
1:             printErrors = false;
1:             server.executeWork( command );
1: 				!e.getMessage().equals(NetworkServerControlImpl.UNEXPECTED_ERR) ||
1: 				printErrors
1: 			)
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return true if we need to install a Security Manager. All of the
1:      * following must apply. See DERBY-2196.
1:      *
1:      * <ul>
1:      * <li>The VM was booted with NetworkServerContro.main() as the
1:      * entry point. This is handled by the fact that this method is only called
1:      * by main().</li>
1:      * <li>The VM isn't already running a SecurityManager.</li>
1:      * <li>The command must be "start".</li>
0:      * <li>The customer didn't specify the -unsecure flag on the startup command
1:      * line.</li>
1:      * </ul>
1:      */
1:     private static  boolean needsSecurityManager( NetworkServerControlImpl server, int command )
1:         throws Exception
1:     {
1:         return
1:             (
1:              (System.getSecurityManager() == null) &&
1:              (command == NetworkServerControlImpl.COMMAND_START) &&
0:              (!server.runningUnsecure())
1:              );
1:    }
1:     
1:     /**
1:      * Verify that all prerequisites are met before bringing up a security
0:      * manager. See DERBY-2196.
1:      */
1:     private static  void verifySecurityState( NetworkServerControlImpl server )
1:         throws Exception
1:     {
1:         //
0:         // Authentication should be turned on. Otherwise, the user will
0:         // be tricked into a false sense of security. Important security checks
0:         // will be identity based.
1:         //
0:         if ( !Boolean.getBoolean( Property.REQUIRE_AUTHENTICATION_PARAMETER ) )
1:         {
0:             String  errorMessage = server.localizeMessage
1:                 (
0:                  "DRDA_NoAuthentication.S",
0:                  new String[]
1:                     {
0:                         Property.REQUIRE_AUTHENTICATION_PARAMETER,
0:                         NetworkServerControlImpl.DASHARGS[  NetworkServerControlImpl.DASHARG_UNSECURE ] }
1:                 );
1: 
1:             // this throws an exception and exits this method
1:             server.consoleError( errorMessage );
1:         }
1:     }
1: 
1:     
1:     /**
1:      * Install a SecurityManager governed by the Basic startup policy. See DERBY-2196.
1:      */
1:     private static  void installSecurityManager( NetworkServerControlImpl server )
1:         throws Exception
1:     {
1:         //
1:         // The Basic policy refers to some properties. Make sure they are set.
1:         //
0:         if ( System.getProperty( Property.SYSTEM_HOME_PROPERTY ) == null )
0:         { System.setProperty( Property.SYSTEM_HOME_PROPERTY, System.getProperty( "user.dir" ) ); }
1: 
0:         if ( System.getProperty( Property.DRDA_PROP_HOSTNAME ) == null )
0:         { System.setProperty( Property.DRDA_PROP_HOSTNAME, server.getHost() ); }
1: 
1:         //
1:         // Forcibly set the following property. This is the parameter in
1:         // the Basic policy which points at the directory where the embedded and
1:         // network codesources. Do not let the customer
1:         // override this
1:         //
1:         String      derbyInstallURL = getCodeSourcePrefix( server );
1: 
1:         System.setProperty( Property.DERBY_INSTALL_URL, derbyInstallURL );
1:         
1:         //
1:         // Now install a SecurityManager, using the Basic policy file.
1:         //
1:         String      policyFileURL = getPolicyFileURL();
1: 
1:         System.setProperty( POLICY_FILE_PROPERTY, policyFileURL );
1:         
1:         SecurityManager     securityManager = new SecurityManager();
1: 
1:         System.setSecurityManager( securityManager );
1: 
1:         //
1:         // Report success.
1:         //
0:         String  successMessage = server.localizeMessage( "DRDA_SecurityInstalled.I", null );
1:         
0:         server.consoleMessage( successMessage );
1:     }
1: 
1:     /**
1:      *<p>
1:      * Find the url of the library directory which holds derby.jar and
1:      * derbynet.jar. The Basic policy assumes that both jar files live in the
1:      * same directory.
1:      * </p>
1:      */
1:     private static  String  getCodeSourcePrefix( NetworkServerControlImpl server )
1:         throws Exception
1:     {
0:         String  derbyNetURL = NetworkServerControl.class.getProtectionDomain().getCodeSource().getLocation().toExternalForm();
0:         int         idx = derbyNetURL.indexOf( DERBYNET_JAR );
1: 
1:         //
1:         // If the customer isn't running against jar files, our Basic policy
1:         // won't work.
1:         //
1:         if ( idx < 0 )
1:         {
1:             String  errorMessage = server.localizeMessage( "DRDA_MissingNetworkJar.S", null );
1: 
1:             // this throws an exception and exits this method
1:             server.consoleError( errorMessage );
1:         }
1: 
1:         //
1:         // Otherwise, we have the directory prefix for our url.
1:         //
0:         String  directoryPrefix = derbyNetURL.substring( 0, idx );
1: 
1:         return directoryPrefix;
1:     }
1: 
1:     /**
1:      *<p>
1:      * Get the URL of the policy file. Typically, this will be some pointer into
1:      * derbynet.jar.
1:      * </p>
1:      */
1:     private static  String getPolicyFileURL()
1:         throws Exception
1:     {
1:         String      resourceName =
1:             NetworkServerControl.class.getPackage().getName().replace( '.', '/' ) +
1:             '/' +
1:             POLICY_FILENAME;
1:         URL         resourceURL = NetworkServerControl.class.getClassLoader().getResource( resourceName );
1:         String      stringForm = resourceURL.toExternalForm();
1: 
1:         return stringForm;
1:     }
1: 
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:0d57d84
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (command == NetworkServerControlImpl.COMMAND_START) {
commit:0feae43
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:                     AccessController.doPrivileged((PrivilegedAction<Void>) () ->
1:                     {
1:                         System.setProperty(
1:                                 Property.SERVER_STARTED_FROM_CMD_LINE,
1:                                 "true");
1:                         return null;
1:                     });
commit:ead9873
/////////////////////////////////////////////////////////////////////////
1:         // Forcibly set the following property so that it will be correctly
1:         // substituted into the default policy file. This is the hostname for
1:         // SocketPermissions. This is an internal property which customers
1:         // may not override.
0:         //
1:         System.setProperty(Property.DERBY_SECURITY_PORT,
1:                            String.valueOf(server.getPort()));
1: 
0:         //
commit:db9a013
/////////////////////////////////////////////////////////////////////////
1:      * @param address     The IP address of the Network Server host.
1:      *                     address cannot be null.
1:      *                    default port number is used
1:      *
1:      * @param userName    The user name for actions requiring authorization.
1:      *
1:      * @param password    The password for actions requiring authorization.
1:      *
1:      * @throws             Exception on error
/////////////////////////////////////////////////////////////////////////
1:      * @param userName    The user name for actions requiring authorization.
1:      *
1:      * @param password    The password for actions requiring authorization.
1:      *
1:      * @throws             Exception on error
/////////////////////////////////////////////////////////////////////////
1:      * @param args  array of arguments indicating command to be executed.
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @param max       maximum number of connection threads.
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @param timeslice number of milliseconds given to each session before yielding to
0:      *                      another session, if <=0, never yield.
1:      * @exception Exception throws an exception if an error occurs
/////////////////////////////////////////////////////////////////////////
1:      * @exception Exception throws an exception if an error occurs
commit:db4c995
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
commit:27fbf33
/////////////////////////////////////////////////////////////////////////
0:                     AccessController.doPrivileged(
0:                         new PrivilegedExceptionAction<Void>() {
0:                             public Void run() throws Exception {
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:7258ed2
/////////////////////////////////////////////////////////////////////////
1:     /** Start a Network Server.
/////////////////////////////////////////////////////////////////////////
1:      * Check if the Network Server is started.
commit:10acff8
/////////////////////////////////////////////////////////////////////////
1:     connect to a running Network Server to shutdown, configure or retrieve 
/////////////////////////////////////////////////////////////////////////
0:     <LI>start [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  This starts the Network
1:     Server on the port/host specified or on localhost, port 1527 if no
1:     defaults. By default a security manager with a default security policy will 
1:     be installed. The default security policy file is called server.policy. 
1:     By default the Network Server will only listen for 
1:     <LI>shutdown [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;] [-user &lt;username&gt;] [-password &lt;password&gt;]: This shutdowns the Network Server with given user credentials on the host and port specified or on the local host and port 1527(default) if no host or port is specified.  </LI> 
/////////////////////////////////////////////////////////////////////////
1:     <P>This is an example of starting and then shutting down the Network 
1:        Server on port 1621 on machine myhost   
/////////////////////////////////////////////////////////////////////////
1:      *  This method will launch a separate thread and start a Network Server.
1:      *  This will also install a security manager with a default security policy.
/////////////////////////////////////////////////////////////////////////
0:      * Check if the Network Server is started
commit:3f9d812
/////////////////////////////////////////////////////////////////////////
1: 	</LI>
/////////////////////////////////////////////////////////////////////////
1: 	</P>
/////////////////////////////////////////////////////////////////////////
1: 	indicates the ip address to which NetworkServerControl should connect. </LI>
/////////////////////////////////////////////////////////////////////////
1: </UL>
1: </P>
1: <P><B>Examples.</B></P>
1: 	</P>
1: 	</P>
/////////////////////////////////////////////////////////////////////////
1: 	</P>
/////////////////////////////////////////////////////////////////////////
1: 	</P>
/////////////////////////////////////////////////////////////////////////
1: 	 * </P>
1: 	 * </P>
/////////////////////////////////////////////////////////////////////////
1: 	 * </P>
/////////////////////////////////////////////////////////////////////////
1: 	 * </P>
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:69cf749
/////////////////////////////////////////////////////////////////////////
1: import java.security.CodeSource;
1: import java.security.ProtectionDomain;
/////////////////////////////////////////////////////////////////////////
1:         if (securityManager.equals(System.getSecurityManager())) {
1:             String successMessage = server.localizeMessage(
1:                     "DRDA_SecurityInstalled.I", null);
1:             server.consoleMessage(successMessage, true);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         // Note: This method is expected to run only when no security manager
1:         //       has been installed, hence no use of privileged blocks.
1:         ProtectionDomain pd = NetworkServerControl.class.getProtectionDomain();
1:         CodeSource cs = pd.getCodeSource();
1:         if (cs == null) {
1:             return null;
1:         }
1:         URL url = cs.getLocation();
1:         if (url == null) {
1:             return null;
1:         }
1:         // Replace in "file://some", but not in "file:///some".
1:         String extForm = url.toExternalForm().replaceFirst(
1:                 "^file://([^/].*)", "file:////$1");
1:         int idx = extForm.indexOf(DERBYNET_JAR);
/////////////////////////////////////////////////////////////////////////
1:         String directoryPrefix = extForm.substring(0, idx);
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     NetworkServerControl provides the ability to start a Network Server or 
0:     connect to a running Network Server to shutdown, configure or retreive 
1:     diagnostic information.  With the exception of ping, these commands 
1:     can  only be performed from the  machine on which the server is running.  
1:     Commands can be performed from  the command line with the following 
1:     arguments:
1:     <P>
1:     <UL>
0:     <LI>start [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  This starts the network
0:     server on the port/host specified or on localhost, port 1527 if no
1:     host/port is specified and no properties are set to override the 
0:     defaults. By default Network Server will only listen for 
1:     connections from the machine on which it is running. 
0:     Use -h 0.0.0.0 to listen on all interfaces or -h &lt;hostname> to listen 
1:     on a specific interface on a  multiple IP machine. 
0:     <LI>shutdown [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;] [-user &lt;username&gt;] [-password &lt;password&gt;]: This shutdowns the network server with given user credentials on the host and port specified or on the local host and port 1527(default) if no host or port is specified.  </LI> 
0:     <LI>ping [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]
1:     This will test whether the Network Server is up.
1:     </LI>
0:     <LI>sysinfo [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  This prints 
1:     classpath and version information about the Network Server, 
1:     the JVM and the Derby engine. 
1:     </LI>
1:     <LI>runtimeinfo [-h &lt;host] [-p &lt;portnumber] [-ssl &lt;sslmode&gt;]: This prints
1:     extensive debbugging information about sessions, threads, 
1:     prepared statements, and memory usage for the running Network Server.
1:     </LI>
0:     <LI>logconnections {on | off} [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  
1:     This turns logging of connections on or off.  
1:     Connections are logged to derby.log. 
1:     Default is off.</LI>
0:     <LI>maxthreads &lt;max> [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  
1:     This sets the maximum number of threads that can be used for connections. 
1:     Default 0 (unlimitted).
1:     </LI>
0:     <LI>timeslice &lt;milliseconds> [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]: 
1:     This sets the time each session can have using a connection thread 
1:     before yielding to a waiting session. Default is 0 (no yeild).
1:     
1:     </LI>
0:     <LI>trace {on | off} [-s &lt;session id>] [-h &lt;host>] [-p &lt;portnumber>]  [-ssl &lt;sslmode&gt;]: 
1:     This turns drda tracing on or off for the specified session or if no 
1:     session is  specified for all sessions. Default is off</LI>
0:     <LI>tracedirectory &lt;tracedirectory> [-h &lt;host>] [-p &lt;portnumber>]  [-ssl &lt;sslmode&gt;]: 
1:     This changes where new trace files will be placed. 
1:     For sessions with tracing already turned on,  
1:     trace files remain in the previous location. 
1:     Default is derby.system.home, if it is set. 
1:     Otherwise the default is the current directory.</LI>
1:     </UL>
0:     </P>
1:     <P>Properties can be set in the derby.properties file or on the command line.
1:     Properties on the command line take precedence over properties in the 
1:     derby.properties file.  Arguments on the command line take precedence
1:     over properties. 
1:     The following is a list of properties that can be set for 
1:     NetworkServerControl:
0:     <UL><LI>derby.drda.portNumber=&lt;port number>: This property 
1:     indicates which port should be used for the Network Server. </LI>
0:     <LI>derby.drda.host=&lt;host name  or ip address >: This property 
0:     indicates the ip address to which NetworkServerControl should connect. </LI>
0:     <LI>derby.drda.traceDirectory=&lt;trace directory>: This property 
1:     indicates where to put trace files. </LI>
1:     <LI>derby.drda.traceAll=true:  This property turns on tracing for
1:     all sessions. Default is tracing is off.</LI>
1:     <LI>derby.drda.logConnections=true:  This property turns on logging
1:     of connections. Default is connections are not logged.</LI>
0:     <LI>derby.drda.minThreads=&lt;value>: If this property
0:     is set, the &lt;value> number of threads will be created when the Network Server is
1:     booted. </LI>
0:     <LI>derby.drda.maxThreads=&lt;value>: If this property
0:     is set, the &lt;value> is the maximum number of connection threads that will be 
1:     created.  If a session starts when there are no connection threads available
1:     and the maximum number of threads has been reached, it will wait until a 
1:     conection thread becomes available. </LI>
0:     <LI>derby.drda.timeSlice=&lt;milliseconds>: If this property
1:     is set, the connection threads will not check for waiting sessions until the
0:     current session has been working for &lt;milliseconds>.  
1:     A value of 0 causes the thread to work on the current session until the 
1:     session exits. If this property is not set, the default value is 0. </LI>
1:     
1:     <P>This is an example of shutting down the server on port 1621.
1:     <PRE> 
1:     java org.apache.derby.drda.NetworkServerControl shutdown -p 1621
1:     </PRE>
0:     </P>
1:     <P>This is an example of turning tracing on for session 3
1:     <PRE>
1:     java org.apache.derby.drda.NetworkServerControl  trace on -s 3 
1:     </PRE>
0:     </P>
0:     <P>This is an example of starting and then shutting down the network 
0:        server on port 1621 on machine myhost   
1:     <PRE>
1:     java org.apache.derby.drda.NetworkServerControl  start -h myhost -p 1621
1:     java org.apache.derby.drda.NetworkServerControl  shutdown -h myhost -p 1621
1:     </PRE>
0:     </P>
1:     <P> This is an example of starting and shutting down the Network Server in the example
1:     above with the API.
1:     <PRE>
1:     
1:     NetworkServerControl serverControl = new NetworkServerControl(InetAddress.getByName("myhost"),1621)
1:     serverControl.shutdown();
1:     </PRE>
0:     </P>
1:     
1:     
1:     public final static int DEFAULT_PORTNUMBER = 1527;
0:     private final static String DERBYNET_JAR = "derbynet.jar";
0:     private final static String POLICY_FILENAME = "server.policy";
0:     private final static String POLICY_FILE_PROPERTY = "java.security.policy";
0:     private final static String DERBY_HOSTNAME_WILDCARD = "0.0.0.0";
0:     private final static String IPV6_HOSTNAME_WILDCARD = "::";
0:     private final static String SOCKET_PERMISSION_HOSTNAME_WILDCARD = "*";
1:     // constructor
1:     /**
1:      * Creates a NetworkServerControl object that is configured to control
1:      * a Network Server on a specified port and InetAddress with given
1:      * user credentials.
1:      *
0:      * @param address      The IP address of the Network Server host.
0:      *                       address cannot be null.
1:      *
0:      * @param portNumber  port number server is to used. If <= 0,
0:      *                      default port number is used
1:      *                         
0:      * @param userName      The user name for actions requiring authorization.
1:      *                         
0:      * @param password      The password for actions requiring authorization.
1:      *                         
0:      * @throws               Exception on error
1:      */
1:     public NetworkServerControl(InetAddress address, int portNumber,
1:                                 String userName, String password)
1:             throws Exception
1:     {
1:         serverImpl = new NetworkServerControlImpl(address, portNumber,
1:                                                   userName, password);
1:     }
1:     /**
1:      * Creates a NetworkServerControl object that is configured to control
1:      * a Network Server on the default host and the default port with given
1:      * user credentials.
1:      *
0:      * @param userName      The user name for actions requiring authorization.
1:      *                         
0:      * @param password      The password for actions requiring authorization.
1:      *                         
0:      * @throws               Exception on error
1:      */
1:     public NetworkServerControl(String userName, String password)
1:             throws Exception
1:     {
1:         serverImpl = new NetworkServerControlImpl(userName, password);
1:     }
1:     /**
1:      * 
1:      * Creates a NetworkServerControl object that is configured to control
1:      * a Network Server on a  specified port and InetAddress.
1:      *<P>
1:      * <B> Examples: </B>
0:      * </P>
1:      * <P>
1:      * To configure for port 1621 and listen on the loopback address:
1:      *<PRE>
1:      *  NetworkServerControl  util = new
1:      * NetworkServerControl(InetAddress.getByName("localhost"), 1621);
1:      * </PRE>
0:      * </P>
1:      *
1:      * @param address     The IP address of the Network Server host.
1:      *                     address cannot be null.
0:      * @param portNumber  port number server is to used. If <= 0,
1:      *                    default port number is used
1:      *                       
1:      * @throws             Exception on error
1:      */
1:     public NetworkServerControl(InetAddress address,int portNumber) throws Exception
1:     {
1:         serverImpl = new NetworkServerControlImpl(address, portNumber);
1:     }
1:     /**
1:      * 
1:      * Creates a NetworkServerControl object that is configured to control
1:      * a Network Server on the default host(localhost)
1:      * and the default port(1527) unless derby.drda.portNumber and 
1:      * derby.drda.host are set.
1:      * <P><PRE>
1:      * new NetworkServerControl() 
1:      *
1:      * is equivalent to calling
1:      *
1:      * new NetworkServerControl(InetAddress.getByName("localhost"),1527);
1:      * </PRE>
0:      * </P>
1:      *
1:      * @throws             Exception on error
1:      */
1:     public NetworkServerControl() throws Exception
1:     {
1:         serverImpl = new NetworkServerControlImpl();
1:     }
1:     
1:     /**
1:      * main routine for NetworkServerControl
1:      *
0:      * @param args    array of arguments indicating command to be executed.
1:      * See class comments for more information
1:      */
/////////////////////////////////////////////////////////////////////////
1:             //if there was an error, exit(1)
1:             if ((e.getMessage() == null) ||
0:                 !e.getMessage().equals(NetworkServerControlImpl.UNEXPECTED_ERR) ||
0:                 printErrors
0:             )
1:             {
1:                 if (server != null)
1:                     server.consoleExceptionPrint(e);
1:                 else
1:                     e.printStackTrace();  // default output stream is System.out
1:             }
1:             // else, we've already printed a trace, so just exit.
1:             System.exit(1);
1:         }
1:         System.exit(0);
1:         
1:     }
1:     /**********************************************************************
1:      * Public NetworkServerControl  commands
1:      * The server commands throw exceptions for errors, so that users can handle
1:      * them themselves.
1:      ************************************************************************
1:      **/
0:     /** Start a Network Server
0:      *  This method will launch a separate thread and start Network Server.
1:      *  This method  may return before the server is ready to accept connections.
1:      *  Use the ping method to verify that the server has started.
1:      *
1:      * <P>
1:      *  Note: an alternate method to starting the Network Server with the API,
1:      *  is to use the derby.drda.startNetworkServer property in 
1:      *  derby.properties.
0:      * </P>
1:      *  
1:      * 
1:      * @param consoleWriter   PrintWriter to which server console will be 
1:      *                        output. Null will disable console output. 
1:      *
1:      * @exception Exception if there is an error starting the server.
1:      *
1:      * @see #shutdown
1:      */
1:     public void start(PrintWriter consoleWriter) throws Exception
1:     {
1:         serverImpl.start(consoleWriter);
1:     }
1:     
1:     /**
1:      * Shutdown a Network Server.
1:      * Shuts down the Network Server listening on the port and InetAddress
1:      * specified in the constructor for this NetworkServerControl object.
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public void shutdown()
1:         throws Exception
1:     {
1:         serverImpl.shutdown();
1:     }
1:     /**
0:      * Check if Network Server is started
1:      * Excecutes and returns without error if the server has started
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public void  ping() throws Exception
1:     {
1:          serverImpl.ping();
1:     }
1:     /**
1:      * Turn tracing on or off for the specified connection 
1:      * on the Network Server.
1:      *
1:      * @param on true to turn tracing on, false to turn tracing off.
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public void trace(boolean on)
1:         throws Exception
1:     {
1:         serverImpl.trace(on);
1:     }
1:     /**
1:      * Turn tracing on or off for all connections on the Network Server.
1:      *
1:      * @param connNum connection number. Note: Connection numbers will print
1:      *                in the Derby error log if logConnections is on
1:      * @param on true to turn tracing on, false to turn tracing off.
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public void trace(int connNum, boolean on)
1:         throws Exception
1:     {
1:         serverImpl.trace(connNum, on);
1:     }
1:     /**
1:      * Turn logging connections on or off. When logging is turned on a message is
1:      * written to the Derby error log each time a connection 
1:      * is made.
1:      *
1:      * @param on            true to turn on, false to turn  off
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public void logConnections(boolean on)
1:         throws Exception
1:     {
1:         serverImpl.logConnections(on);
1:     }
1:     /**
1:      * Set directory for trace files. The directory must be on the machine
1:      * where the server is running.
1:      *
1:      * @param traceDirectory    directory for trace files on machine 
1:      *                          where server is running
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public void setTraceDirectory(String traceDirectory)
1:         throws Exception
1:     {
1:         serverImpl.sendSetTraceDirectory(traceDirectory);
1:     }
1:     /**
1:      * Return classpath and version information about the running 
1:      * Network Server. 
1:      *
1:      * @return sysinfo output
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public String getSysinfo()
1:         throws Exception
1:     {
1:         
1:         return serverImpl.sysinfo();
1:     }
1:     /**
1:      * Return detailed session runtime information about sessions,
1:      * prepared statements, and memory usage for the running Network Server. 
1:      *
1:      * @return run time information
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public String getRuntimeInfo()
1:         throws Exception
1:     {
1:         return serverImpl.runtimeInfo();
1:     }
1:     /**
1:      * Set Network Server maxthread parameter.  This is the maximum number 
1:      * of threads that will be used for JDBC client connections.   setTimeSlice
1:      * should also be set so that clients will yield appropriately.
1:      *
0:      * @param max        maximum number of connection threads.
0:      *                  If <= 0, connection threads will be created when 
1:      *                  there are no free connection threads.
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      * @see #setTimeSlice
1:      */
1:     public void setMaxThreads(int max) throws Exception
1:     {
1:         serverImpl.netSetMaxThreads(max);
1:     }
1:     /** Returns the current maxThreads setting for the running Network Server
1:      * 
1:      * @return maxThreads setting 
0:      * @exception Exception    throws an exception if an error occurs
1:      * @see #setMaxThreads
1:      */
1:     public int getMaxThreads() throws Exception
1:     {
1:         String val =serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_MAXTHREADS);
1:         
1:         return Integer.parseInt(val);
1:     }
1:     /**
1:      * Set Network Server connection time slice parameter.  
0:      * This should be set and is only relevant if setMaxThreads > 0.
1:      *
0:      * @param timeslice    number of milliseconds given to each session before yielding to 
0:      *                        another session, if <=0, never yield. 
1:      *
0:      * @exception Exception    throws an exception if an error occurs
1:      * @see #setMaxThreads
1:      */
1:     public void setTimeSlice(int timeslice) throws Exception
1:     {
1:         serverImpl.netSetTimeSlice(timeslice);
1:     }
1:     /** Return the current timeSlice setting for the running Network Server
1:      * 
1:      * @return timeSlice  setting
1:      * @exception Exception throws an exception if an error occurs
1:      * @see #setTimeSlice
1:      */
1:     public int getTimeSlice() throws Exception
1:     {
1:         String val  =
1:             serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_TIMESLICE);
1:         return Integer.parseInt(val);
1:     }
1:     /**
1:      * Get current Network server properties
1:      *
1:      * @return Properties object containing Network server properties
0:      * @exception Exception    throws an exception if an error occurs
1:      */
1:     public Properties getCurrentProperties() throws Exception
1:     {
1:         return serverImpl.getCurrentProperties();
1:     }
1:     /** Protected methods ***/
1:     /***
1:      * set the client locale. Used by servlet for localization
1:      * @param locale  Locale to use
1:      *
1:      */
1:           
1:     protected void setClientLocale(String locale)
1:     {
0:         serverImpl.clientLocale = locale;
1:     }
commit:00077a4
/////////////////////////////////////////////////////////////////////////
0:         server.consoleMessage( successMessage, true );
commit:0915039
/////////////////////////////////////////////////////////////////////////
0: 	Default is derby.system.home, if it is set. 
0: 	Otherwise the default is the current directory.</LI>
commit:5252985
/////////////////////////////////////////////////////////////////////////
1:         NetworkServerControlImpl server = null;
1:         try
0:         {
1:             server = new NetworkServerControlImpl();
0:     		server.executeWork(args);
1:         }
1:         catch (Exception e)
0:         {
0: 			//if there was an error, exit(1)
0: 			if ((e.getMessage() == null) ||
0: 				!e.getMessage().equals(NetworkServerControlImpl.UNEXPECTED_ERR))
0: 			{
0: 				if (server != null)
0: 					server.consoleExceptionPrint(e);
0: 				else
0: 					e.printStackTrace();  // default output stream is System.out
1: 			}
0: 			// else, we've already printed a trace, so just exit.
1: 			System.exit(1);
1: 		}
0: 		System.exit(0);
commit:9085abb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.drda.NetworkServerControlImpl;
/////////////////////////////////////////////////////////////////////////
0: 	private NetworkServerControlImpl serverImpl;
/////////////////////////////////////////////////////////////////////////
0: 		serverImpl = new NetworkServerControlImpl(address, 
/////////////////////////////////////////////////////////////////////////
0: 		serverImpl = new NetworkServerControlImpl();
/////////////////////////////////////////////////////////////////////////
0: 		NetworkServerControlImpl.execute(args);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:a65a598
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
1:             // Java 7 and above: file permission restriction
0:             if (command == NetworkServerControlImpl.COMMAND_START &&
0:                     JVMInfo.JDK_ID >= JVMInfo.J2SE_17) {
commit:8bdf7af
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
0: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:                 try {
0:                     AccessController.doPrivileged(new PrivilegedExceptionAction() {
0:                             public Object run() throws Exception {
0:                                 System.setProperty(
0:                                     Property.SERVER_STARTED_FROM_CMD_LINE,
0:                                     "true");
0:                                 return null;
0:                             }});
1:                 } catch (Exception e) {
1:                     server.consoleExceptionPrintTrace(e);
0:                     System.exit(1);
0:                 }
commit:e0970c6
/////////////////////////////////////////////////////////////////////////
0: 					server.consoleExceptionPrint(e);
commit:8ee7b83
/////////////////////////////////////////////////////////////////////////
0: 					server.consoleExceptionPrintTrace(e);
commit:dc43cf8
/////////////////////////////////////////////////////////////////////////
0:             if (command == NetworkServerControlImpl.COMMAND_START) {
0:                 System.setProperty(Property.SERVER_STARTED_FROM_CMD_LINE,
0:                                    "true");
0:             }
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:204c040
/////////////////////////////////////////////////////////////////////////
0: 	<LI>shutdown [-h &lt;host&gt;][-p &lt;portnumber&gt;] [-ssl &lt;sslmode&gt;] [-user &lt;username&gt;] [-password &lt;password&gt;]: This shutdowns the network server with given user credentials on the host and port specified or on the local host and port 1527(default) if no host or port is specified.  </LI> 
/////////////////////////////////////////////////////////////////////////
0: 	 * Creates a NetworkServerControl object that is configured to control
0: 	 * a Network Server on a specified port and InetAddress with given
0: 	 * user credentials.
0: 	 *
0: 	 * @param address	  The IP address of the Network Server host.
0: 	 *					   address cannot be null.
0: 	 *
0: 	 * @param portNumber  port number server is to used. If <= 0,
0: 	 *					  default port number is used
0: 	 *						 
0: 	 * @param userName	  The user name for actions requiring authorization.
0: 	 *						 
0: 	 * @param password	  The password for actions requiring authorization.
0: 	 *						 
0: 	 * @throws			   Exception on error
1: 	 */
0: 	public NetworkServerControl(InetAddress address, int portNumber,
0: 								String userName, String password)
0: 			throws Exception
0: 	{
0: 		serverImpl = new NetworkServerControlImpl(address, portNumber,
0: 												  userName, password);
0: 	}
1: 
0: 	/**
0: 	 * Creates a NetworkServerControl object that is configured to control
0: 	 * a Network Server on the default host and the default port with given
0: 	 * user credentials.
0: 	 *
0: 	 * @param userName	  The user name for actions requiring authorization.
0: 	 *						 
0: 	 * @param password	  The password for actions requiring authorization.
0: 	 *						 
0: 	 * @throws			   Exception on error
1: 	 */
0: 	public NetworkServerControl(String userName, String password)
0: 			throws Exception
0: 	{
0: 		serverImpl = new NetworkServerControlImpl(userName, password);
0: 	}
1: 
0: 	/**
/////////////////////////////////////////////////////////////////////////
0: 		serverImpl = new NetworkServerControlImpl(address, portNumber);
1: 
/////////////////////////////////////////////////////////////////////////
commit:d7258ed
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.drda.NetworkServerControl
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:141cd31
/////////////////////////////////////////////////////////////////////////
1: public class NetworkServerControl{
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.drda
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
0:  */
1: 
1: package org.apache.derby.drda;
1: 
0: import java.io.OutputStream;
1: import java.io.PrintWriter;
0: import java.net.InetAddress;
1: import java.util.Properties;
1: import org.apache.derby.iapi.reference.Property;
1: 
0: import org.apache.derby.impl.drda.DB2jServerImpl;
1: 
0: /** 
0: 	NetworkServerControl provides the ability to start a Network Server or 
0: 	connect to a running Network Server to shutdown, configure or retreive 
0: 	diagnostic information.  With the exception of ping, these commands 
0: 	can  only be performed from the  machine on which the server is running.  
0: 	Commands can be performed from  the command line with the following 
0: 	arguments:
1: 
0: 	<P>
0: 	<UL>
0: 	<LI>start [-h &lt;host>] [-p &lt;portnumber>]:  This starts the network
0: 	server on the port/host specified or on localhost, port 1527 if no
0: 	host/port is specified and no properties are set to override the 
0: 	defaults. By default Network Server will only listen for 
0: 	connections from the machine on which it is running. 
0: 	Use -h 0.0.0.0 to listen on all interfaces or -h &lt;hostname> to listen 
0: 	on a specific interface on a  multiple IP machine. </LI>
1: 
0: 	<LI>shutdown [-h &lt;host>][-p &lt;portnumber>]: This shutdowns the network 	server on the host and port specified or on the local host and port 
0: 	1527(default) if no host or port is specified.  </LI> 
1: 
0: 	<LI>ping [-h &lt;host>] [-p &lt;portnumber>] 
0: 	This will test whether the Network Server is up.
0: 	</LI>
1: 
0: 	<LI>sysinfo [-h &lt;host>] [-p &lt;portnumber>]:  This prints 
0: 	classpath and version  information about the Network Server, 
0: 	the JVM and the Cloudscape server. 
1: 
0: 	<LI>runtimeinfo [-h &lt;host] [-p &lt;portnumber]: This prints
0: 	extensive debbugging information about sessions, threads, 
0: 	prepared statements, and memory usage for the running Network Server.
0: 	</LI>
1: 
0: 	<LI>logconnections {on | off} [-h &lt;host>] [-p &lt;portnumber>]:  
0: 	This turns logging of connections and disconnections on and off.  
0: 	Connections and disconnections are logged to derby.log. 
0: 	Default is off.</LI>
1: 
0: 	<LI>maxthreads &lt;max> [-h &lt;host>][-p &lt;portnumber>]:  
0: 	This sets the maximum number of threads that can be used for connections. 
0: 	Default 0 (unlimitted).
0: 	</LI>
1: 
0: 	<LI>timeslice &lt;milliseconds> [-h &lt;host>][-p &lt;portnumber>]: 
0: 	This sets the time each session can have using a connection thread 
0: 	before yielding to a waiting session. Default is 0 (no yeild).
1: 	
0: 	</LI>
1: 
0: 	<LI>trace {on | off} [-s &lt;session id>] [-h &lt;host>] [-p &lt;portnumber>]: 
0: 	This turns drda tracing on or off for the specified session or if no 
0: 	session is  specified for all sessions. Default is off</LI>
1: 
1: 
0: 	<LI>tracedirectory &lt;tracedirectory> [-h &lt;host>] [-p &lt;portnumber>]: 
0: 	This changes where new trace files will be placed. 
0: 	For sessions with tracing already turned on,  
0: 	trace files remain in the previous location. 
0: 	Default is clousdcape.system.home</LI>
1: 
0: 	</UL>
0: 	<P>Properties can be set in the derby.properties file or on the command line.
0: 	Properties on the command line take precedence over properties in the 
0: 	derby.properties file.  Arguments on the command line take precedence
0: 	over properties. 
0: 	The following is a list of properties that can be set for 
0: 	NetworkServerControl:
1: 
0: 	<UL><LI>derby.drda.portNumber=&lt;port number>: This property 
0: 	indicates which port should be used for the Network Server. </LI>
1: 
0: 	<LI>derby.drda.host=&lt;host name  or ip address >: This property 
0: 	indicates the ip address to which NetworkServerControl should connect 
1: 
0: 	<LI>derby.drda.traceDirectory=&lt;trace directory>: This property 
0: 	indicates where to put trace files. </LI>
1: 
0: 	<LI>derby.drda.traceAll=true:  This property turns on tracing for
0: 	all sessions. Default is tracing is off.</LI>
1: 
0: 	<LI>derby.drda.logConnections=true:  This property turns on logging
0: 	of connections and disconnections. Default is connections are not logged.</LI>
1: 
0: 	<LI>derby.drda.minThreads=&lt;value>: If this property
0: 	is set, the &lt;value> number of threads will be created when the Network Server is
0: 	booted. </LI>
1: 
0: 	<LI>derby.drda.maxThreads=&lt;value>: If this property
0: 	is set, the &lt;value> is the maximum number of connection threads that will be 
0: 	created.  If a session starts when there are no connection threads available
0: 	and the maximum number of threads has been reached, it will wait until a 
0: 	conection thread becomes available. </LI>
1: 
0: 	<LI>derby.drda.timeSlice=&lt;milliseconds>: If this property
0: 	is set, the connection threads will not check for waiting sessions until the
0: 	current session has been working for &lt;milliseconds>.  
0: 	A value of 0 causes the thread to work on the current session until the 
0: 	session exits. If this property is not set, the default value is 0. </LI>
1: 	
0: </LI>
1: 
0: <P><B>Examples.</B>
1: 
0: 	<P>This is an example of shutting down the server on port 1621.
0: 	<PRE> 
0: 	java org.apache.derby.drda.NetworkServerControl shutdown -p 1621
0: 	</PRE>
1: 
0: 	<P>This is an example of turning tracing on for session 3
0: 	<PRE>
0: 	java org.apache.derby.drda.NetworkServerControl  trace on -s 3 
0: 	</PRE>
1: 
0: 	<P>This is an example of starting and then shutting down the network 
0: 	   server on port 1621 on machine myhost   
0: 	<PRE>
0: 	java org.apache.derby.drda.NetworkServerControl  start -h myhost -p 1621
0: 	java org.apache.derby.drda.NetworkServerControl  shutdown -h myhost -p 1621
0: 	</PRE>
1: 
0: 	<P> This is an example of starting and shutting down the Network Server in the example
0: 	above with the API.
0: 	<PRE>
1: 	
0: 	NetworkServerControl serverControl = new NetworkServerControl(InetAddress.getByName("myhost"),1621)
1: 
0: 	serverControl.shutdown();
0: 	</PRE>
1: 
1: 	
0: */
1: 
0: public class NetworkServerControl{ 
1: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
1: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 
1: 	
0: 	public final static int DEFAULT_PORTNUMBER = 1527;
0: 	private DB2jServerImpl serverImpl;
1: 
0: 	// constructor
1: 
0: 	/**
0: 	 * 
0: 	 * Creates a NetworkServerControl object that is configured to control
0: 	 * a Network Server on a  specified port and InetAddress.
0: 	 *<P>
0: 	 * <B> Examples: </B>
0: 	 * <P>
0: 	 * To configure for port 1621 and listen on the loopback address:
0: 	 *<PRE>
0: 	 *  NetworkServerControl  util = new
0: 	 * NetworkServerControl(InetAddress.getByName("localhost"), 1621);
0: 	 * </PRE>
0: 	 *
0: 	 * @param address     The IP address of the Network Server host.
0: 	 *                     address cannot be null.
1: 
0: 	 * @param portNumber  port number server is to used. If <= 0,
0: 	 *                    default port number is used
0: 	 *                       
0: 	 * @throws             Exception on error
0: 	 */
0: 	public NetworkServerControl(InetAddress address,int portNumber) throws Exception
0: 	{
1: 		
0: 		serverImpl = new DB2jServerImpl(address, 
0: 										portNumber);
1: 
0: 	}
1: 	
1: 
0: 	/**
0: 	 * 
0: 	 * Creates a NetworkServerControl object that is configured to control
0: 	 * a Network Server on the default host(localhost)
0: 	 * and the default port(1527) unless derby.drda.portNumber and 
0: 	 * derby.drda.host are set.
0: 	 * <P><PRE>
0: 	 * new NetworkServerControl() 
0: 	 *
0: 	 * is equivalent to calling
0: 	 *
0: 	 * new NetworkServerControl(InetAddress.getByName("localhost"),1527);
0: 	 * </PRE>
0: 	 *
0: 	 * @throws             Exception on error
0: 	 */
0: 	public NetworkServerControl() throws Exception
0: 	{
1: 		
0: 		serverImpl = new DB2jServerImpl();
1: 
0: 	}
1: 	
1:     
0: 	/**
0: 	 * main routine for NetworkServerControl
0: 	 *
0: 	 * @param args	array of arguments indicating command to be executed.
0: 	 * See class comments for more information
0: 	 */
1:     public static void main(String args[]) {
0: 		DB2jServerImpl.execute(args);
1: 		
0: 	}
1: 
0: 	/**********************************************************************
0: 	 * Public NetworkServerControl  commands
0: 	 * The server commands throw exceptions for errors, so that users can handle
0: 	 * them themselves.
0: 	 ************************************************************************
0: 	 **/
1: 
0: 	/** Start a Network Server
0: 	 *  This method will launch a separate thread and start Network Server.
0: 	 *  This method  may return before the server is ready to accept connections.
0: 	 *  Use the ping method to verify that the server has started.
0: 	 *
0: 	 * <P>
0: 	 *  Note: an alternate method to starting the Network Server with the API,
0: 	 *  is to use the derby.drda.startNetworkServer property in 
0: 	 *  cloudscape.properties.
0: 	 *  
0: 	 * 
0: 	 * @param consoleWriter   PrintWriter to which server console will be 
0: 	 *                        output. Null will disable console output. 
0: 	 *
0: 	 * @exception Exception if there is an error starting the server.
0: 	 *
0: 	 * @see #shutdown
0: 	 */
0: 	public void start(PrintWriter consoleWriter) throws Exception
0: 	{
0: 		serverImpl.start(consoleWriter);
0: 	}
1: 
1: 	
1: 
0: 	/**
0: 	 * Shutdown a Network Server.
0: 	 * Shuts down the Network Server listening on the port and InetAddress
0: 	 * specified in the constructor for this NetworkServerControl object.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void shutdown()
0: 		throws Exception
0: 	{
0: 		serverImpl.shutdown();
0: 	}
1: 
0: 	/**
0: 	 * Check if Network Server is started
0: 	 * Excecutes and returns without error if the server has started
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void  ping() throws Exception
0: 	{
0: 		 serverImpl.ping();
0: 	}
1: 
0: 	/**
0: 	 * Turn tracing on or off for the specified connection 
0: 	 * on the Network Server.
0: 	 *
0: 	 * @param on true to turn tracing on, false to turn tracing off.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void trace(boolean on)
0: 		throws Exception
0: 	{
0: 		serverImpl.trace(on);
0: 	}
1: 
1: 
0: 	/**
0: 	 * Turn tracing on or off for all connections on the Network Server.
0: 	 *
0: 	 * @param connNum connection number. Note: Connection numbers will print
0: 	 *                in the Cloudscape error log if logConnections is on
0: 	 * @param on true to turn tracing on, false to turn tracing off.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void trace(int connNum, boolean on)
0: 		throws Exception
0: 	{
0: 		serverImpl.trace(connNum, on);
0: 	}
1: 
0: 	/**
0: 	 * Turn logging connections on or off. When logging is turned on a message is
0: 	 * written to the Cloudscape error log each time a connection 
0: 	 * connects or disconnects.
0: 	 *
0: 	 * @param on			true to turn on, false to turn  off
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void logConnections(boolean on)
0: 		throws Exception
0: 	{
0: 		serverImpl.logConnections(on);
0: 	}
1: 
0: 	/**
0: 	 * Set directory for trace files. The directory must be on the machine
0: 	 * where the server is running.
0: 	 *
0: 	 * @param traceDirectory	directory for trace files on machine 
0: 	 *                          where server is running
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void setTraceDirectory(String traceDirectory)
0: 		throws Exception
0: 	{
0: 		serverImpl.sendSetTraceDirectory(traceDirectory);
0: 	}
1: 
0: 	/**
0: 	 * Return classpath and version information about the running 
0: 	 * Network Server. 
0: 	 *
0: 	 * @return sysinfo output
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public String getSysinfo()
0: 		throws Exception
0: 	{
1: 		
0: 		return serverImpl.sysinfo();
0: 	}
1: 
0: 	/**
0: 	 * Return detailed session runtime information about sessions,
0: 	 * prepared statements, and memory usage for the running Network Server. 
0: 	 *
0: 	 * @return run time information
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public String getRuntimeInfo()
0: 		throws Exception
0: 	{
0: 		return serverImpl.runtimeInfo();
0: 	}
1: 
1: 
0: 	/**
0: 	 * Set Network Server maxthread parameter.  This is the maximum number 
0: 	 * of threads that will be used for JDBC client connections.   setTimeSlice
0: 	 * should also be set so that clients will yield appropriately.
0: 	 *
0: 	 * @param max		maximum number of connection threads.
0: 	 *                  If <= 0, connection threads will be created when 
0: 	 *                  there are no free connection threads.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 * @see #setTimeSlice
0: 	 */
0: 	public void setMaxThreads(int max) throws Exception
0: 	{
0: 		serverImpl.netSetMaxThreads(max);
0: 	}
1: 
1: 
0: 	/** Returns the current maxThreads setting for the running Network Server
0: 	 * 
0: 	 * @return maxThreads setting 
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 * @see #setMaxThreads
0: 	 */
0: 	public int getMaxThreads() throws Exception
0: 	{
0: 	    String val =serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_MAXTHREADS);
1: 
1: 		
0: 		return Integer.parseInt(val);
0: 	}
1: 
0: 	/**
0: 	 * Set Network Server connection time slice parameter.  
0: 	 * This should be set and is only relevant if setMaxThreads > 0.
0: 	 *
0: 	 * @param timeslice	number of milliseconds given to each session before yielding to 
0: 	 *						another session, if <=0, never yield. 
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 * @see #setMaxThreads
0: 	 */
0: 	public void setTimeSlice(int timeslice) throws Exception
0: 	{
0: 		serverImpl.netSetTimeSlice(timeslice);
0: 	}
1: 
0: 	/** Return the current timeSlice setting for the running Network Server
0: 	 * 
0: 	 * @return timeSlice  setting
0: 	 * @exception Exception throws an exception if an error occurs
0: 	 * @see #setTimeSlice
0: 	 */
0: 	public int getTimeSlice() throws Exception
0: 	{
0: 		String val  =
0: 			serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_TIMESLICE);
0: 		return Integer.parseInt(val);
0: 	}
1: 
1: 
1: 
0: 	/**
0: 	 * Get current Network server properties
0: 	 *
0: 	 * @return Properties object containing Network server properties
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public Properties getCurrentProperties() throws Exception
0: 	{
0: 		return serverImpl.getCurrentProperties();
0: 	}
1: 
0: 	/** Protected methods ***/
1: 
0: 	/***
0: 	 * set the client locale. Used by servlet for localization
0: 	 * @param locale  Locale to use
0: 	 *
0: 	 */
1: 		  
0: 	protected void setClientLocale(String locale)
0: 	{
0: 		serverImpl.clientLocale = locale;
0: 	}
0: }
1: 
1: 
1: 
1: 
1: 
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:503ce75
/////////////////////////////////////////////////////////////////////////
0: 	<LI>start [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  This starts the network
0: 	on a specific interface on a  multiple IP machine. 
1:     For documentation on &lt;sslmode&gt;, consult the Server and Administration Guide.</LI>
0: 	<LI>shutdown [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]: This shutdowns the network 	server on the host and port specified or on the local host and port 
0: 	<LI>ping [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]
0: 	<LI>sysinfo [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  This prints 
0: 	<LI>runtimeinfo [-h &lt;host] [-p &lt;portnumber] [-ssl &lt;sslmode&gt;]: This prints
0: 	<LI>logconnections {on | off} [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  
0: 	<LI>maxthreads &lt;max> [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  
0: 	<LI>timeslice &lt;milliseconds> [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]: 
0: 	<LI>trace {on | off} [-s &lt;session id>] [-h &lt;host>] [-p &lt;portnumber>]  [-ssl &lt;sslmode&gt;]: 
0: 	<LI>tracedirectory &lt;tracedirectory> [-h &lt;host>] [-p &lt;portnumber>]  [-ssl &lt;sslmode&gt;]: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     <LI>derby.drda.sslMode=&lt;sslmode&gt: This property sets the SSL
1:     mode of the server.
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:27ff169
/////////////////////////////////////////////////////////////////////////
0: 	 *  derby.properties.
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:cd065ba
/////////////////////////////////////////////////////////////////////////
0: 	classpath and version information about the Network Server, 
0: 	the JVM and the Derby engine. 
/////////////////////////////////////////////////////////////////////////
0: 	 *                in the Derby error log if logConnections is on
/////////////////////////////////////////////////////////////////////////
0: 	 * written to the Derby error log each time a connection 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:0c1cb14
/////////////////////////////////////////////////////////////////////////
0: 	This turns logging of connections on or off.  
0: 	Connections are logged to derby.log. 
/////////////////////////////////////////////////////////////////////////
0: 	of connections. Default is connections are not logged.</LI>
/////////////////////////////////////////////////////////////////////////
0: 	 * is made.
author:Tomohito Nakayama
-------------------------------------------------------------------------------
commit:d9ffc2b
/////////////////////////////////////////////////////////////////////////
commit:cdad0a1
/////////////////////////////////////////////////////////////////////////
0:     
0:     
0:     public void setLogWriter(PrintWriter logWriter){
0: 	
0: 	serverImpl.setLogWriter( logWriter );
0: 	
0:     }
0:     
0:     
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:07ae282
/////////////////////////////////////////////////////////////////////////
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.drda
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.drda;
0: 
0: import java.io.OutputStream;
0: import java.io.PrintWriter;
0: import java.net.InetAddress;
0: import java.util.Properties;
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import org.apache.derby.impl.drda.DB2jServerImpl;
0: 
0: /** 
0: 	NetworkServerControl provides the ability to start a Network Server or 
0: 	connect to a running Network Server to shutdown, configure or retreive 
0: 	diagnostic information.  With the exception of ping, these commands 
0: 	can  only be performed from the  machine on which the server is running.  
0: 	Commands can be performed from  the command line with the following 
0: 	arguments:
0: 
0: 	<P>
0: 	<UL>
0: 	<LI>start [-h &lt;host>] [-p &lt;portnumber>]:  This starts the network
0: 	server on the port/host specified or on localhost, port 1527 if no
0: 	host/port is specified and no properties are set to override the 
0: 	defaults. By default Network Server will only listen for 
0: 	connections from the machine on which it is running. 
0: 	Use -h 0.0.0.0 to listen on all interfaces or -h &lt;hostname> to listen 
0: 	on a specific interface on a  multiple IP machine. </LI>
0: 
0: 	<LI>shutdown [-h &lt;host>][-p &lt;portnumber>]: This shutdowns the network 	server on the host and port specified or on the local host and port 
0: 	1527(default) if no host or port is specified.  </LI> 
0: 
0: 	<LI>ping [-h &lt;host>] [-p &lt;portnumber>] 
0: 	This will test whether the Network Server is up.
0: 	</LI>
0: 
0: 	<LI>sysinfo [-h &lt;host>] [-p &lt;portnumber>]:  This prints 
0: 	classpath and version  information about the Network Server, 
0: 	the JVM and the Cloudscape server. 
0: 
0: 	<LI>runtimeinfo [-h &lt;host] [-p &lt;portnumber]: This prints
0: 	extensive debbugging information about sessions, threads, 
0: 	prepared statements, and memory usage for the running Network Server.
0: 	</LI>
0: 
0: 	<LI>logconnections {on | off} [-h &lt;host>] [-p &lt;portnumber>]:  
0: 	This turns logging of connections and disconnections on and off.  
0: 	Connections and disconnections are logged to derby.log. 
0: 	Default is off.</LI>
0: 
0: 	<LI>maxthreads &lt;max> [-h &lt;host>][-p &lt;portnumber>]:  
0: 	This sets the maximum number of threads that can be used for connections. 
0: 	Default 0 (unlimitted).
0: 	</LI>
0: 
0: 	<LI>timeslice &lt;milliseconds> [-h &lt;host>][-p &lt;portnumber>]: 
0: 	This sets the time each session can have using a connection thread 
0: 	before yielding to a waiting session. Default is 0 (no yeild).
0: 	
0: 	</LI>
0: 
0: 	<LI>trace {on | off} [-s &lt;session id>] [-h &lt;host>] [-p &lt;portnumber>]: 
0: 	This turns drda tracing on or off for the specified session or if no 
0: 	session is  specified for all sessions. Default is off</LI>
0: 
0: 
0: 	<LI>tracedirectory &lt;tracedirectory> [-h &lt;host>] [-p &lt;portnumber>]: 
0: 	This changes where new trace files will be placed. 
0: 	For sessions with tracing already turned on,  
0: 	trace files remain in the previous location. 
0: 	Default is clousdcape.system.home</LI>
0: 
0: 	</UL>
0: 	<P>Properties can be set in the derby.properties file or on the command line.
0: 	Properties on the command line take precedence over properties in the 
0: 	derby.properties file.  Arguments on the command line take precedence
0: 	over properties. 
0: 	The following is a list of properties that can be set for 
0: 	NetworkServerControl:
0: 
0: 	<UL><LI>derby.drda.portNumber=&lt;port number>: This property 
0: 	indicates which port should be used for the Network Server. </LI>
0: 
0: 	<LI>derby.drda.host=&lt;host name  or ip address >: This property 
0: 	indicates the ip address to which NetworkServerControl should connect 
0: 
0: 	<LI>derby.drda.traceDirectory=&lt;trace directory>: This property 
0: 	indicates where to put trace files. </LI>
0: 
0: 	<LI>derby.drda.traceAll=true:  This property turns on tracing for
0: 	all sessions. Default is tracing is off.</LI>
0: 
0: 	<LI>derby.drda.logConnections=true:  This property turns on logging
0: 	of connections and disconnections. Default is connections are not logged.</LI>
0: 
0: 	<LI>derby.drda.minThreads=&lt;value>: If this property
0: 	is set, the &lt;value> number of threads will be created when the Network Server is
0: 	booted. </LI>
0: 
0: 	<LI>derby.drda.maxThreads=&lt;value>: If this property
0: 	is set, the &lt;value> is the maximum number of connection threads that will be 
0: 	created.  If a session starts when there are no connection threads available
0: 	and the maximum number of threads has been reached, it will wait until a 
0: 	conection thread becomes available. </LI>
0: 
0: 	<LI>derby.drda.timeSlice=&lt;milliseconds>: If this property
0: 	is set, the connection threads will not check for waiting sessions until the
0: 	current session has been working for &lt;milliseconds>.  
0: 	A value of 0 causes the thread to work on the current session until the 
0: 	session exits. If this property is not set, the default value is 0. </LI>
0: 	
0: </LI>
0: 
0: <P><B>Examples.</B>
0: 
0: 	<P>This is an example of shutting down the server on port 1621.
0: 	<PRE> 
0: 	java org.apache.derby.drda.NetworkServerControl shutdown -p 1621
0: 	</PRE>
0: 
0: 	<P>This is an example of turning tracing on for session 3
0: 	<PRE>
0: 	java org.apache.derby.drda.NetworkServerControl  trace on -s 3 
0: 	</PRE>
0: 
0: 	<P>This is an example of starting and then shutting down the network 
0: 	   server on port 1621 on machine myhost   
0: 	<PRE>
0: 	java org.apache.derby.drda.NetworkServerControl  start -h myhost -p 1621
0: 	java org.apache.derby.drda.NetworkServerControl  shutdown -h myhost -p 1621
0: 	</PRE>
0: 
0: 	<P> This is an example of starting and shutting down the Network Server in the example
0: 	above with the API.
0: 	<PRE>
0: 	
0: 	NetworkServerControl serverControl = new NetworkServerControl(InetAddress.getByName("myhost"),1621)
0: 
0: 	serverControl.shutdown();
0: 	</PRE>
0: 
0: 	
0: */
0: 
0: public class NetworkServerControl{ 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 
0: 	
0: 	public final static int DEFAULT_PORTNUMBER = 1527;
0: 	private DB2jServerImpl serverImpl;
0: 
0: 	// constructor
0: 
0: 	/**
0: 	 * 
0: 	 * Creates a NetworkServerControl object that is configured to control
0: 	 * a Network Server on a  specified port and InetAddress.
0: 	 *<P>
0: 	 * <B> Examples: </B>
0: 	 * <P>
0: 	 * To configure for port 1621 and listen on the loopback address:
0: 	 *<PRE>
0: 	 *  NetworkServerControl  util = new
0: 	 * NetworkServerControl(InetAddress.getByName("localhost"), 1621);
0: 	 * </PRE>
0: 	 *
0: 	 * @param address     The IP address of the Network Server host.
0: 	 *                     address cannot be null.
0: 
0: 	 * @param portNumber  port number server is to used. If <= 0,
0: 	 *                    default port number is used
0: 	 *                       
0: 	 * @throws             Exception on error
0: 	 */
0: 	public NetworkServerControl(InetAddress address,int portNumber) throws Exception
0: 	{
0: 		
0: 		serverImpl = new DB2jServerImpl(address, 
0: 										portNumber);
0: 
0: 	}
0: 	
0: 
0: 	/**
0: 	 * 
0: 	 * Creates a NetworkServerControl object that is configured to control
0: 	 * a Network Server on the default host(localhost)
0: 	 * and the default port(1527) unless derby.drda.portNumber and 
0: 	 * derby.drda.host are set.
0: 	 * <P><PRE>
0: 	 * new NetworkServerControl() 
0: 	 *
0: 	 * is equivalent to calling
0: 	 *
0: 	 * new NetworkServerControl(InetAddress.getByName("localhost"),1527);
0: 	 * </PRE>
0: 	 *
0: 	 * @throws             Exception on error
0: 	 */
0: 	public NetworkServerControl() throws Exception
0: 	{
0: 		
0: 		serverImpl = new DB2jServerImpl();
0: 
0: 	}
0: 	
0:     
0: 	/**
0: 	 * main routine for NetworkServerControl
0: 	 *
0: 	 * @param args	array of arguments indicating command to be executed.
0: 	 * See class comments for more information
0: 	 */
0:     public static void main(String args[]) {
0: 		DB2jServerImpl.execute(args);
0: 		
0: 	}
0: 
0: 	/**********************************************************************
0: 	 * Public NetworkServerControl  commands
0: 	 * The server commands throw exceptions for errors, so that users can handle
0: 	 * them themselves.
0: 	 ************************************************************************
0: 	 **/
0: 
0: 	/** Start a Network Server
0: 	 *  This method will launch a separate thread and start Network Server.
0: 	 *  This method  may return before the server is ready to accept connections.
0: 	 *  Use the ping method to verify that the server has started.
0: 	 *
0: 	 * <P>
0: 	 *  Note: an alternate method to starting the Network Server with the API,
0: 	 *  is to use the derby.drda.startNetworkServer property in 
0: 	 *  cloudscape.properties.
0: 	 *  
0: 	 * 
0: 	 * @param consoleWriter   PrintWriter to which server console will be 
0: 	 *                        output. Null will disable console output. 
0: 	 *
0: 	 * @exception Exception if there is an error starting the server.
0: 	 *
0: 	 * @see #shutdown
0: 	 */
0: 	public void start(PrintWriter consoleWriter) throws Exception
0: 	{
0: 		serverImpl.start(consoleWriter);
0: 	}
0: 
0: 	
0: 
0: 	/**
0: 	 * Shutdown a Network Server.
0: 	 * Shuts down the Network Server listening on the port and InetAddress
0: 	 * specified in the constructor for this NetworkServerControl object.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void shutdown()
0: 		throws Exception
0: 	{
0: 		serverImpl.shutdown();
0: 	}
0: 
0: 	/**
0: 	 * Check if Network Server is started
0: 	 * Excecutes and returns without error if the server has started
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void  ping() throws Exception
0: 	{
0: 		 serverImpl.ping();
0: 	}
0: 
0: 	/**
0: 	 * Turn tracing on or off for the specified connection 
0: 	 * on the Network Server.
0: 	 *
0: 	 * @param on true to turn tracing on, false to turn tracing off.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void trace(boolean on)
0: 		throws Exception
0: 	{
0: 		serverImpl.trace(on);
0: 	}
0: 
0: 
0: 	/**
0: 	 * Turn tracing on or off for all connections on the Network Server.
0: 	 *
0: 	 * @param connNum connection number. Note: Connection numbers will print
0: 	 *                in the Cloudscape error log if logConnections is on
0: 	 * @param on true to turn tracing on, false to turn tracing off.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void trace(int connNum, boolean on)
0: 		throws Exception
0: 	{
0: 		serverImpl.trace(connNum, on);
0: 	}
0: 
0: 	/**
0: 	 * Turn logging connections on or off. When logging is turned on a message is
0: 	 * written to the Cloudscape error log each time a connection 
0: 	 * connects or disconnects.
0: 	 *
0: 	 * @param on			true to turn on, false to turn  off
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void logConnections(boolean on)
0: 		throws Exception
0: 	{
0: 		serverImpl.logConnections(on);
0: 	}
0: 
0: 	/**
0: 	 * Set directory for trace files. The directory must be on the machine
0: 	 * where the server is running.
0: 	 *
0: 	 * @param traceDirectory	directory for trace files on machine 
0: 	 *                          where server is running
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public void setTraceDirectory(String traceDirectory)
0: 		throws Exception
0: 	{
0: 		serverImpl.sendSetTraceDirectory(traceDirectory);
0: 	}
0: 
0: 	/**
0: 	 * Return classpath and version information about the running 
0: 	 * Network Server. 
0: 	 *
0: 	 * @return sysinfo output
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public String getSysinfo()
0: 		throws Exception
0: 	{
0: 		
0: 		return serverImpl.sysinfo();
0: 	}
0: 
0: 	/**
0: 	 * Return detailed session runtime information about sessions,
0: 	 * prepared statements, and memory usage for the running Network Server. 
0: 	 *
0: 	 * @return run time information
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public String getRuntimeInfo()
0: 		throws Exception
0: 	{
0: 		return serverImpl.runtimeInfo();
0: 	}
0: 
0: 
0: 	/**
0: 	 * Set Network Server maxthread parameter.  This is the maximum number 
0: 	 * of threads that will be used for JDBC client connections.   setTimeSlice
0: 	 * should also be set so that clients will yield appropriately.
0: 	 *
0: 	 * @param max		maximum number of connection threads.
0: 	 *                  If <= 0, connection threads will be created when 
0: 	 *                  there are no free connection threads.
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 * @see #setTimeSlice
0: 	 */
0: 	public void setMaxThreads(int max) throws Exception
0: 	{
0: 		serverImpl.netSetMaxThreads(max);
0: 	}
0: 
0: 
0: 	/** Returns the current maxThreads setting for the running Network Server
0: 	 * 
0: 	 * @return maxThreads setting 
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 * @see #setMaxThreads
0: 	 */
0: 	public int getMaxThreads() throws Exception
0: 	{
0: 	    String val =serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_MAXTHREADS);
0: 
0: 		
0: 		return Integer.parseInt(val);
0: 	}
0: 
0: 	/**
0: 	 * Set Network Server connection time slice parameter.  
0: 	 * This should be set and is only relevant if setMaxThreads > 0.
0: 	 *
0: 	 * @param timeslice	number of milliseconds given to each session before yielding to 
0: 	 *						another session, if <=0, never yield. 
0: 	 *
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 * @see #setMaxThreads
0: 	 */
0: 	public void setTimeSlice(int timeslice) throws Exception
0: 	{
0: 		serverImpl.netSetTimeSlice(timeslice);
0: 	}
0: 
0: 	/** Return the current timeSlice setting for the running Network Server
0: 	 * 
0: 	 * @return timeSlice  setting
0: 	 * @exception Exception throws an exception if an error occurs
0: 	 * @see #setTimeSlice
0: 	 */
0: 	public int getTimeSlice() throws Exception
0: 	{
0: 		String val  =
0: 			serverImpl.getCurrentProperties().getProperty(Property.DRDA_PROP_TIMESLICE);
0: 		return Integer.parseInt(val);
0: 	}
0: 
0: 
0: 
0: 	/**
0: 	 * Get current Network server properties
0: 	 *
0: 	 * @return Properties object containing Network server properties
0: 	 * @exception Exception	throws an exception if an error occurs
0: 	 */
0: 	public Properties getCurrentProperties() throws Exception
0: 	{
0: 		return serverImpl.getCurrentProperties();
0: 	}
0: 
0: 	/** Protected methods ***/
0: 
0: 	/***
0: 	 * set the client locale. Used by servlet for localization
0: 	 * @param locale  Locale to use
0: 	 *
0: 	 */
0: 		  
0: 	protected void setClientLocale(String locale)
0: 	{
0: 		serverImpl.clientLocale = locale;
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
============================================================================