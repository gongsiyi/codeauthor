1:232f5ef: /*
1:232f5ef: 
1:232f5ef: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NullsTest
1:232f5ef: 
1:232f5ef: Licensed to the Apache Software Foundation (ASF) under one or more
1:232f5ef: contributor license agreements.  See the NOTICE file distributed with
1:232f5ef: this work for additional information regarding copyright ownership.
1:232f5ef: The ASF licenses this file to You under the Apache License, Version 2.0
1:232f5ef: (the "License"); you may not use this file except in compliance with
1:232f5ef: the License.  You may obtain a copy of the License at
1:232f5ef: 
1:232f5ef: http://www.apache.org/licenses/LICENSE-2.0
1:232f5ef: 
1:232f5ef: Unless required by applicable law or agreed to in writing, software
1:232f5ef: distributed under the License is distributed on an "AS IS" BASIS,
1:232f5ef: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:232f5ef: See the License for the specific language governing permissions and
1:232f5ef: limitations under the License.
1:232f5ef: 
1:232f5ef: */
1:232f5ef: package org.apache.derbyTesting.functionTests.tests.lang;
1:232f5ef: 
1:232f5ef: import java.sql.PreparedStatement;
1:232f5ef: import java.sql.SQLException;
1:232f5ef: import java.sql.Statement;
1:232f5ef: 
1:232f5ef: import junit.framework.Test;
1:232f5ef: 
1:232f5ef: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:232f5ef: import org.apache.derbyTesting.junit.JDBC;
1:232f5ef: import org.apache.derbyTesting.junit.TestConfiguration;
1:232f5ef: 
1:232f5ef: /**
1:232f5ef:  * Test case for DERBY-6131: select from view with "upper" and "in" list 
1:232f5ef:  * throws a ClassCastException null value functionality.
1:232f5ef:  */
1:232f5ef: public class Derby6131 extends BaseJDBCTestCase {
1:232f5ef: 
1:232f5ef:     public Derby6131(String name) {
1:232f5ef:         super(name);
1:232f5ef:     }
1:232f5ef: 
1:232f5ef:     public static Test suite(){
1:232f5ef:         return TestConfiguration.defaultSuite(Derby6131.class);
1:232f5ef:     }
1:232f5ef: 
1:232f5ef:     public void setUp() throws SQLException{
1:232f5ef:         getConnection().setAutoCommit(false);
1:232f5ef:     }
1:232f5ef: 
1:232f5ef:     /**
1:232f5ef:      * Test the original user report of this issue:
1:232f5ef:      * <p>
1:232f5ef:      * the issue can be reproduced
1:232f5ef:      * 1. create table myTbl1 (name varchar(1000));
1:232f5ef:      * 2. create table myTbl2 (name varchar(1000));
1:232f5ef:      * 3. create view myView (name) as 
1:232f5ef:      *        select t1.name from myTbl1 t1 
1:232f5ef:      *        union all select t2.name from myTbl2 t2;
1:232f5ef:      * 4. select name from myView where upper(name) in ('AA', 'BB');
1:232f5ef:      * #4 failed with 
1:232f5ef:      *     "org.apache.derby.impl.sql.compile.SimpleStringOperatorNode 
1:232f5ef:      *     incompatible with org.apache.derby.impl.sql.compile.ColumnReference:
1:232f5ef:      *     java.lang.ClassCastException"
1:232f5ef:      *
1:232f5ef:      * If the view is created as 
1:232f5ef:      *    "create myView (name) as select t1.name from myTbl1 t1", 
1:232f5ef:      *    the query worked fine. 
1:232f5ef:      * <p>
1:232f5ef:      **/
1:232f5ef:     public void testOrigUserRepro()
1:232f5ef:         throws SQLException
1:232f5ef:     {
1:232f5ef:         Statement st = createStatement();
1:232f5ef: 
1:232f5ef:         // 1. create table myTbl1 (name varchar(1000));
1:232f5ef:         st.executeUpdate("create table myTbl1 (name varchar(1000))");
1:232f5ef: 
1:232f5ef:         // 2. create table myTbl2 (name varchar(1000));
1:232f5ef:         st.executeUpdate("create table myTbl2 (name varchar(1000))");
1:232f5ef: 
1:232f5ef:         // * 3. create view myView (name) as 
1:232f5ef:         //          select t1.name from myTbl1 t1 
1:232f5ef:         //              union all select t2.name from myTbl2 t2;
1:232f5ef:         st.executeUpdate(
1:232f5ef:             "create view myView (name) as " + 
1:232f5ef:                 "select t1.name from myTbl1 t1 " + 
1:232f5ef:                     "union all select t2.name from myTbl2 t2");
1:232f5ef: 
1:232f5ef:         // 4. select name from myView where upper(name) in ('AA', 'BB');
1:232f5ef:         // #4 failed with 
1:232f5ef:         //    "org.apache.derby.impl.sql.compile.SimpleStringOperatorNode 
1:232f5ef:         //     incompatible with 
1:232f5ef:         //     org.apache.derby.impl.sql.compile.ColumnReference: 
1:232f5ef:         //     java.lang.ClassCastException"
1:232f5ef: 
1:232f5ef:         String sql = 
1:232f5ef:             "select name from myView where upper(name) in ('AA', 'BB')";
1:232f5ef: 
1:232f5ef:         // no data so just checking if no exception happens.
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ });
1:232f5ef: 
1:232f5ef:         dropView("myView");
1:232f5ef:         dropTable("myTbl1");
1:232f5ef:         dropTable("myTbl2");
1:232f5ef: 
1:232f5ef:         st.close();
1:232f5ef:     }
1:232f5ef: 
1:232f5ef:     /**
1:232f5ef:      * Test the original DERBY-6131 queries with some data to make sure
1:232f5ef:      * results look right in addtion to not getting an exception.
1:232f5ef:      * <p>
1:232f5ef:      **/
1:232f5ef:     public void testOrigUserReproWithData()
1:232f5ef:         throws SQLException
1:232f5ef:     {
1:232f5ef:         Statement st = createStatement();
1:232f5ef: 
1:232f5ef:         // 1. create table myTbl1 (name varchar(1000));
1:232f5ef:         st.executeUpdate("create table myTbl1 (name varchar(1000))");
1:232f5ef: 
1:232f5ef:         // 2. create table myTbl2 (name varchar(1000));
1:232f5ef:         st.executeUpdate("create table myTbl2 (name varchar(1000))");
1:232f5ef: 
1:232f5ef:         st.executeUpdate(
1:232f5ef:             "insert into myTbl1 values ('aA'), ('bB'), ('Cc'), ('Dd')");
1:232f5ef:         st.executeUpdate(
1:232f5ef:             "insert into myTbl2 values ('eE'), ('fF'), ('GG'), ('hh')");
1:232f5ef: 
1:232f5ef:         // * 3. create view myView (name) as 
1:232f5ef:         //          select t1.name from myTbl1 t1 
1:232f5ef:         //              union all select t2.name from myTbl2 t2;
1:232f5ef:         st.executeUpdate(
1:232f5ef:             "create view myView (name) as " + 
1:232f5ef:                 "select t1.name from myTbl1 t1 " + 
1:232f5ef:                     "union all select t2.name from myTbl2 t2");
1:232f5ef: 
1:232f5ef:         // 4. select name from myView where upper(name) in ('AA', 'BB');
1:232f5ef:         // before fix #4 failed with 
1:232f5ef:         //    "org.apache.derby.impl.sql.compile.SimpleStringOperatorNode 
1:232f5ef:         //     incompatible with 
1:232f5ef:         //     org.apache.derby.impl.sql.compile.ColumnReference: 
1:232f5ef:         //     java.lang.ClassCastException"
1:232f5ef: 
1:232f5ef:         String sql = 
1:232f5ef:             "select name from myView where upper(name) in ('AA', 'BB')";
1:232f5ef: 
1:232f5ef:         // should match both values in IN-LIST
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ 
1:232f5ef:                 {"aA"}, 
1:232f5ef:                 {"bB"}
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         // same test using prepared statement with params rather than constants.
1:232f5ef:         String prepared_sql = 
1:232f5ef:             "select name from myView where upper(name) in (?, ?)";
1:232f5ef: 
1:232f5ef:         PreparedStatement pstmt = prepareStatement(prepared_sql);
1:232f5ef: 
1:232f5ef:         pstmt.setString(1, "AA");
1:232f5ef:         pstmt.setString(2, "BB");
1:232f5ef: 
1:232f5ef:         // should match both values in IN-LIST
1:232f5ef:         JDBC.assertFullResultSet(pstmt.executeQuery(),
1:232f5ef:             new String[][]{ 
1:232f5ef:                 {"aA"}, 
1:232f5ef:                 {"bB"}
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         // look for data across both parts of the union
1:232f5ef:         sql = "select name from myView where upper(name) in ('CC', 'HH')";
1:232f5ef: 
1:232f5ef:         // no data so just checking if no exception happens.
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ 
1:232f5ef:                 {"Cc"}, 
1:232f5ef:                 {"hh"}
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         // same test using prepared statement with params rather than constants.
1:232f5ef:         pstmt.setString(1, "CC");
1:232f5ef:         pstmt.setString(2, "HH");
1:232f5ef: 
1:232f5ef:         // no data so just checking if no exception happens.
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ 
1:232f5ef:                 {"Cc"}, 
1:232f5ef:                 {"hh"}
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         // negative test, should not match anything
1:232f5ef:         sql = "select name from myView where upper(name) in ('cc', 'hh')";
1:232f5ef: 
1:232f5ef:         // no data so just checking if no exception happens.
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ 
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         // same test using prepared statement with params rather than constants.
1:232f5ef:         pstmt.setString(1, "cc");
1:232f5ef:         pstmt.setString(2, "hh");
1:232f5ef: 
1:232f5ef:         // no data so just checking if no exception happens.
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ 
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         // test another function - user lower
1:232f5ef:         sql = "select name from myView where lower(name) in ('cc', 'hh')";
1:232f5ef: 
1:232f5ef:         // no data so just checking if no exception happens.
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ 
1:232f5ef:                 {"Cc"}, 
1:232f5ef:                 {"hh"}
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         // same test using prepared statement with params rather than constants.
1:232f5ef:         prepared_sql = 
1:232f5ef:             "select name from myView where upper(name) in (?, ?)";
1:232f5ef: 
1:232f5ef:         pstmt = prepareStatement(prepared_sql);
1:232f5ef: 
1:232f5ef:         pstmt.setString(1, "cc");
1:232f5ef:         pstmt.setString(2, "hh");
1:232f5ef: 
1:232f5ef:         // no data so just checking if no exception happens.
1:232f5ef:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:232f5ef:             new String[][]{ 
1:232f5ef:                 {"Cc"}, 
1:232f5ef:                 {"hh"}
1:232f5ef:             });
1:232f5ef: 
1:232f5ef:         dropView("myView");
1:232f5ef:         dropTable("myTbl1");
1:232f5ef:         dropTable("myTbl2");
1:232f5ef: 
1:232f5ef:         st.close();
1:232f5ef:         pstmt.close();
1:232f5ef:     }
1:232f5ef: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:232f5ef
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NullsTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test case for DERBY-6131: select from view with "upper" and "in" list 
1:  * throws a ClassCastException null value functionality.
1:  */
1: public class Derby6131 extends BaseJDBCTestCase {
1: 
1:     public Derby6131(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite(){
1:         return TestConfiguration.defaultSuite(Derby6131.class);
1:     }
1: 
1:     public void setUp() throws SQLException{
1:         getConnection().setAutoCommit(false);
1:     }
1: 
1:     /**
1:      * Test the original user report of this issue:
1:      * <p>
1:      * the issue can be reproduced
1:      * 1. create table myTbl1 (name varchar(1000));
1:      * 2. create table myTbl2 (name varchar(1000));
1:      * 3. create view myView (name) as 
1:      *        select t1.name from myTbl1 t1 
1:      *        union all select t2.name from myTbl2 t2;
1:      * 4. select name from myView where upper(name) in ('AA', 'BB');
1:      * #4 failed with 
1:      *     "org.apache.derby.impl.sql.compile.SimpleStringOperatorNode 
1:      *     incompatible with org.apache.derby.impl.sql.compile.ColumnReference:
1:      *     java.lang.ClassCastException"
1:      *
1:      * If the view is created as 
1:      *    "create myView (name) as select t1.name from myTbl1 t1", 
1:      *    the query worked fine. 
1:      * <p>
1:      **/
1:     public void testOrigUserRepro()
1:         throws SQLException
1:     {
1:         Statement st = createStatement();
1: 
1:         // 1. create table myTbl1 (name varchar(1000));
1:         st.executeUpdate("create table myTbl1 (name varchar(1000))");
1: 
1:         // 2. create table myTbl2 (name varchar(1000));
1:         st.executeUpdate("create table myTbl2 (name varchar(1000))");
1: 
1:         // * 3. create view myView (name) as 
1:         //          select t1.name from myTbl1 t1 
1:         //              union all select t2.name from myTbl2 t2;
1:         st.executeUpdate(
1:             "create view myView (name) as " + 
1:                 "select t1.name from myTbl1 t1 " + 
1:                     "union all select t2.name from myTbl2 t2");
1: 
1:         // 4. select name from myView where upper(name) in ('AA', 'BB');
1:         // #4 failed with 
1:         //    "org.apache.derby.impl.sql.compile.SimpleStringOperatorNode 
1:         //     incompatible with 
1:         //     org.apache.derby.impl.sql.compile.ColumnReference: 
1:         //     java.lang.ClassCastException"
1: 
1:         String sql = 
1:             "select name from myView where upper(name) in ('AA', 'BB')";
1: 
1:         // no data so just checking if no exception happens.
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ });
1: 
1:         dropView("myView");
1:         dropTable("myTbl1");
1:         dropTable("myTbl2");
1: 
1:         st.close();
1:     }
1: 
1:     /**
1:      * Test the original DERBY-6131 queries with some data to make sure
1:      * results look right in addtion to not getting an exception.
1:      * <p>
1:      **/
1:     public void testOrigUserReproWithData()
1:         throws SQLException
1:     {
1:         Statement st = createStatement();
1: 
1:         // 1. create table myTbl1 (name varchar(1000));
1:         st.executeUpdate("create table myTbl1 (name varchar(1000))");
1: 
1:         // 2. create table myTbl2 (name varchar(1000));
1:         st.executeUpdate("create table myTbl2 (name varchar(1000))");
1: 
1:         st.executeUpdate(
1:             "insert into myTbl1 values ('aA'), ('bB'), ('Cc'), ('Dd')");
1:         st.executeUpdate(
1:             "insert into myTbl2 values ('eE'), ('fF'), ('GG'), ('hh')");
1: 
1:         // * 3. create view myView (name) as 
1:         //          select t1.name from myTbl1 t1 
1:         //              union all select t2.name from myTbl2 t2;
1:         st.executeUpdate(
1:             "create view myView (name) as " + 
1:                 "select t1.name from myTbl1 t1 " + 
1:                     "union all select t2.name from myTbl2 t2");
1: 
1:         // 4. select name from myView where upper(name) in ('AA', 'BB');
1:         // before fix #4 failed with 
1:         //    "org.apache.derby.impl.sql.compile.SimpleStringOperatorNode 
1:         //     incompatible with 
1:         //     org.apache.derby.impl.sql.compile.ColumnReference: 
1:         //     java.lang.ClassCastException"
1: 
1:         String sql = 
1:             "select name from myView where upper(name) in ('AA', 'BB')";
1: 
1:         // should match both values in IN-LIST
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ 
1:                 {"aA"}, 
1:                 {"bB"}
1:             });
1: 
1:         // same test using prepared statement with params rather than constants.
1:         String prepared_sql = 
1:             "select name from myView where upper(name) in (?, ?)";
1: 
1:         PreparedStatement pstmt = prepareStatement(prepared_sql);
1: 
1:         pstmt.setString(1, "AA");
1:         pstmt.setString(2, "BB");
1: 
1:         // should match both values in IN-LIST
1:         JDBC.assertFullResultSet(pstmt.executeQuery(),
1:             new String[][]{ 
1:                 {"aA"}, 
1:                 {"bB"}
1:             });
1: 
1:         // look for data across both parts of the union
1:         sql = "select name from myView where upper(name) in ('CC', 'HH')";
1: 
1:         // no data so just checking if no exception happens.
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ 
1:                 {"Cc"}, 
1:                 {"hh"}
1:             });
1: 
1:         // same test using prepared statement with params rather than constants.
1:         pstmt.setString(1, "CC");
1:         pstmt.setString(2, "HH");
1: 
1:         // no data so just checking if no exception happens.
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ 
1:                 {"Cc"}, 
1:                 {"hh"}
1:             });
1: 
1:         // negative test, should not match anything
1:         sql = "select name from myView where upper(name) in ('cc', 'hh')";
1: 
1:         // no data so just checking if no exception happens.
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ 
1:             });
1: 
1:         // same test using prepared statement with params rather than constants.
1:         pstmt.setString(1, "cc");
1:         pstmt.setString(2, "hh");
1: 
1:         // no data so just checking if no exception happens.
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ 
1:             });
1: 
1:         // test another function - user lower
1:         sql = "select name from myView where lower(name) in ('cc', 'hh')";
1: 
1:         // no data so just checking if no exception happens.
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ 
1:                 {"Cc"}, 
1:                 {"hh"}
1:             });
1: 
1:         // same test using prepared statement with params rather than constants.
1:         prepared_sql = 
1:             "select name from myView where upper(name) in (?, ?)";
1: 
1:         pstmt = prepareStatement(prepared_sql);
1: 
1:         pstmt.setString(1, "cc");
1:         pstmt.setString(2, "hh");
1: 
1:         // no data so just checking if no exception happens.
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{ 
1:                 {"Cc"}, 
1:                 {"hh"}
1:             });
1: 
1:         dropView("myView");
1:         dropTable("myTbl1");
1:         dropTable("myTbl2");
1: 
1:         st.close();
1:         pstmt.close();
1:     }
1: }
============================================================================