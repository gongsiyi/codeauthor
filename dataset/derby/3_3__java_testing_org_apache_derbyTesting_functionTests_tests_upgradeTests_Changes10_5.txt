1:963d9f4: /*
4:963d9f4: 
1:963d9f4: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_5
1:963d9f4: 
1:963d9f4: Licensed to the Apache Software Foundation (ASF) under one or more
1:963d9f4: contributor license agreements.  See the NOTICE file distributed with
1:963d9f4: this work for additional information regarding copyright ownership.
1:963d9f4: The ASF licenses this file to You under the Apache License, Version 2.0
1:963d9f4: (the "License"); you may not use this file except in compliance with
1:963d9f4: the License.  You may obtain a copy of the License at
1:963d9f4: 
1:963d9f4:    http://www.apache.org/licenses/LICENSE-2.0
1:963d9f4: 
1:963d9f4: Unless required by applicable law or agreed to in writing, software
1:963d9f4: distributed under the License is distributed on an "AS IS" BASIS,
1:963d9f4: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:963d9f4: See the License for the specific language governing permissions and
1:963d9f4: limitations under the License.
1:963d9f4: 
1:963d9f4: */
1:963d9f4: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1:963d9f4: 
1:1ae02c9: import java.sql.CallableStatement;
1:1ae02c9: import java.sql.Connection;
1:963d9f4: import java.sql.SQLException;
1:963d9f4: import java.sql.Statement;
1:15b2b98: import javax.sql.DataSource;
1:963d9f4: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBCDataSource;
1:1ae02c9: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:15b2b98: 
1:963d9f4: /**
1:963d9f4:  * Upgrade test cases for 10.5.
1:963d9f4:  * If the old version is 10.5 or later then these tests
1:963d9f4:  * will not be run.
1:963d9f4:  * <BR>
1:963d9f4:     10.5 Upgrade issues
1:963d9f4: 
1:963d9f4:     <UL>
1:963d9f4:     <LI> testUpdateStatisticsProcdure - DERBY-269
1:963d9f4:     Make sure that SYSCS_UTIL.SYSCS_UPDATE_STATISTICS can only be run in Derby
1:963d9f4:     10.5 and higher.
1:963d9f4:     </UL>
1:963d9f4: 
1:963d9f4:  */
1:963d9f4: public class Changes10_5 extends UpgradeChange {
1:963d9f4: 
1:fba255c:     private static  final   String  BAD_SYNTAX = "42X01";
1:fba255c: 
1:963d9f4:     public Changes10_5(String name) {
1:963d9f4:         super(name);
1:963d9f4:     }
1:963d9f4: 
1:15b2b98:     /**
1:963d9f4:      * Return the suite of tests to test the changes made in 10.5.
1:963d9f4:      * @param phase an integer that indicates the current phase in
1:963d9f4:      *              the upgrade test.
1:963d9f4:      * @return the test suite created.
1:963d9f4:      */
1:963d9f4:     public static Test suite(int phase) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Upgrade test for 10.5");
1:963d9f4: 
1:963d9f4:         suite.addTestSuite(Changes10_5.class);
1:963d9f4:         return new SupportFilesSetup((Test) suite);
1:963d9f4:     }
1:963d9f4: 
1:963d9f4:     /**
1:963d9f4:      * Make sure that SYSCS_UTIL.SYSCS_UPDATE_STATISTICS can only be run in 
1:963d9f4:      * Derby 10.5 and higher. 
1:963d9f4:      * DERBY-269
1:963d9f4:      * Test added for 10.5.
1:963d9f4:      * @throws SQLException
1:963d9f4:      *
1:963d9f4:      */
1:963d9f4:     public void testUpdateStatisticsProcdure() throws SQLException
1:963d9f4:     {
1:963d9f4:     	Statement s;
1:963d9f4:         switch (getPhase())
1:963d9f4:         {
1:963d9f4:         case PH_CREATE:
1:963d9f4:             s = createStatement();
1:963d9f4:             s.execute("CREATE TABLE DERBY_269(c11 int, c12 char(20))");
1:963d9f4:             s.execute("INSERT INTO DERBY_269 VALUES(1, 'DERBY-269')");
1:963d9f4:             s.execute("CREATE INDEX I1 ON DERBY_269(c12)");
1:963d9f4:             s.close();
1:963d9f4:             break;
1:fba255c: 
1:963d9f4:         case PH_SOFT_UPGRADE:
1:963d9f4:         case PH_POST_SOFT_UPGRADE:
1:963d9f4:             // new update statistics procedure should not be found
1:963d9f4:             // on soft-upgrade.
1:963d9f4:             s = createStatement();
1:963d9f4:             assertStatementError("42Y03", s,
1:963d9f4:                     "call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:963d9f4:                     "('APP', 'DERBY_269', null)");
1:963d9f4:             assertStatementError("42Y03", s,
1:963d9f4:                     "call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:963d9f4:                     "('APP', 'DERBY_269', 'I1')");
1:963d9f4:             s.close();
1:963d9f4:             break;
1:fba255c: 
1:963d9f4:         case PH_HARD_UPGRADE:
1:963d9f4:         	//We are at Derby 10.5 release and hence should find the
1:963d9f4:         	//update statistics procedure
1:963d9f4:             s = createStatement();
1:963d9f4:             s.execute("call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:963d9f4:             		"('APP', 'DERBY_269', null)");
1:963d9f4:             s.execute("call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:963d9f4:             		"('APP', 'DERBY_269', 'I1')");
1:963d9f4:             s.close();
1:963d9f4:             break;
1:963d9f4:         }
1:963d9f4:     }
1:963d9f4: 
1:fba255c:     /**
1:fba255c:      * Test that the DETERMINISTIC keyword is not allowed until you
1:fba255c:      * hard-upgrade to 10.5.
1:fba255c:      *
1:fba255c:      */
1:fba255c:     public void testDeterminismKeyword() throws SQLException
1:fba255c:     {
1:fba255c:         String  sqlstate = null;
1:95a483d:         
1:fba255c:         switch (getPhase())
1:fba255c:         {
1:fba255c:         case PH_SOFT_UPGRADE:
1:fba255c:             sqlstate = SQLSTATE_NEED_UPGRADE;
1:fba255c:             break;
1:fba255c:             
1:fba255c:         case PH_POST_SOFT_UPGRADE:
1:fba255c:             sqlstate = BAD_SYNTAX;
1:fba255c:             break;
1:fba255c: 
1:fba255c:         case PH_HARD_UPGRADE:
1:fba255c:             sqlstate = null;
1:fba255c:             break;
1:fba255c: 
1:fba255c:         default:
1:fba255c:             return;
1:fba255c:         }
1:fba255c:         
1:fba255c:         possibleError
1:fba255c:             (
1:fba255c:              sqlstate,
1:fba255c:              "create function f_3570_12()\n" +
1:fba255c:              "returns int\n" +
1:fba255c:              "language java\n" +
1:fba255c:              "parameter style java\n" +
1:fba255c:              "deterministic\n" +
1:fba255c:              "no sql\n" +
1:fba255c:              "external name 'foo.bar.wibble'\n"
1:fba255c:              );
1:fba255c:         possibleError
1:fba255c:             (
1:fba255c:              sqlstate,
1:fba255c:              "create procedure p_3570_13()\n" +
1:fba255c:              "language java\n" +
1:fba255c:              "not deterministic\n" +
1:fba255c:              "parameter style java\n" +
1:fba255c:              "modifies sql data\n" +
1:fba255c:              "external name 'foo.bar.wibble'\n"
1:fba255c:              );
1:fba255c:     }
1:fba255c: 
1:fba255c:     /**
1:95a483d:      * Test that generation clauses are not allowed until you
1:95a483d:      * hard-upgrade to 10.5.
1:95a483d:      *
1:95a483d:      */
1:95a483d:     public void testGenerationClauses() throws SQLException
1:95a483d:     {
1:95a483d:         String  sqlstate = null;
1:95a483d:         
1:95a483d:         switch (getPhase())
1:95a483d:         {
1:95a483d:         case PH_SOFT_UPGRADE:
1:95a483d:             sqlstate = SQLSTATE_NEED_UPGRADE;
1:95a483d:             break;
1:95a483d:             
1:95a483d:         case PH_POST_SOFT_UPGRADE:
1:95a483d:             sqlstate = BAD_SYNTAX;
1:95a483d:             break;
1:95a483d: 
1:95a483d:         case PH_HARD_UPGRADE:
1:95a483d:             sqlstate = null;
1:95a483d:             break;
1:95a483d: 
1:95a483d:         default:
1:95a483d:             return;
1:95a483d:         }
1:963d9f4:         
1:95a483d:         possibleError
1:95a483d:             (
1:95a483d:              sqlstate,
1:95a483d:              "create table t_genCol_2( a int, b int generated always as ( -a ), c int )"
1:95a483d:              );
1:95a483d:     }
1:95a483d: 
1:95a483d:     /**
1:fba255c:      * <p>
1:fba255c:      * Run a statement. If the sqlstate is not null, then we expect that error.
1:fba255c:      * </p>
1:fba255c:      */
1:fba255c:     private void    possibleError( String sqlstate, String text )
1:fba255c:         throws SQLException
1:fba255c:     {
1:fba255c:         if ( sqlstate != null )
1:fba255c:         {
1:fba255c:             assertCompileError( sqlstate, text );
1:fba255c:         }
1:fba255c:         else
1:fba255c:         {
1:fba255c:             Statement   s = createStatement();
1:fba255c:             s.execute( text );
1:fba255c:             s.close();
1:fba255c:         }
1:fba255c:     }
1:fba255c: 
1:963d9f4:     /**
1:15b2b98:      * Check that you must be hard-upgraded to 10.5 or later in order to use
1:15b2b98:      * SQL roles
1:15b2b98:      * @throws SQLException
1:15b2b98:      *
1:15b2b98:      */
1:15b2b98:     public void testSQLRolesBasic() throws SQLException
1:15b2b98:     {
1:15b2b98:         // The standard upgrade database doesn't have sqlAuthorization
1:15b2b98:         // set, so we can only check if the system tables for roles is
1:15b2b98:         // present.
1:15b2b98: 
1:15b2b98:         Statement s = createStatement();
1:15b2b98:         String createRoleText = "create role foo";
1:15b2b98: 
1:15b2b98:         if (getOldMajor() == 10 && getOldMinor() == 4) {
1:15b2b98:             // In 10.4 the roles commands were present but just gave "not
1:15b2b98:             // implemented".
1:15b2b98:             switch (getPhase()) {
1:15b2b98:             case PH_CREATE:
1:15b2b98:                 assertStatementError("0A000", s, createRoleText );
1:15b2b98:                 break;
1:15b2b98: 
1:15b2b98:             case PH_SOFT_UPGRADE:
1:15b2b98:                 // needs hard upgrade
1:15b2b98:                 assertStatementError("XCL47", s, createRoleText );
1:15b2b98:                 break;
1:15b2b98: 
1:15b2b98:             case PH_POST_SOFT_UPGRADE:
1:15b2b98:                 assertStatementError("0A000", s, createRoleText );
1:15b2b98:                 break;
1:15b2b98: 
1:15b2b98:             case PH_HARD_UPGRADE:
1:15b2b98:                 // not supported because SQL authorization not set
1:15b2b98:                 assertStatementError("42Z60", s, createRoleText );
1:15b2b98:                 break;
1:15b2b98:             }
1:15b2b98: 
1:15b2b98:         } else {
1:15b2b98:             switch (getPhase()) {
1:15b2b98:                 case PH_CREATE:
1:15b2b98:                     assertStatementError("42X01", s, createRoleText );
1:15b2b98:                     break;
1:15b2b98: 
1:15b2b98:                 case PH_SOFT_UPGRADE:
1:15b2b98:                     // needs hard upgrade
1:15b2b98:                     assertStatementError("XCL47", s, createRoleText );
1:15b2b98:                     break;
1:15b2b98: 
1:15b2b98:                 case PH_POST_SOFT_UPGRADE:
1:15b2b98:                     assertStatementError("42X01", s, createRoleText );
1:15b2b98:                     break;
1:15b2b98: 
1:15b2b98:                 case PH_HARD_UPGRADE:
1:15b2b98:                     // not supported because SQL authorization not set
1:15b2b98:                     assertStatementError("42Z60", s, createRoleText );
1:15b2b98:                     break;
1:15b2b98:             }
1:15b2b98:         }
1:15b2b98: 
1:15b2b98: 
1:15b2b98:         s.close();
1:15b2b98:     }
1:15b2b98: 
1:15b2b98:     /**
1:15b2b98:      * Check that when hard-upgraded to 10.5 or later SQL roles can be
1:15b2b98:      * declared if DB has sqlAuthorization.
1:15b2b98:      * @throws SQLException
1:15b2b98:      *
1:15b2b98:      */
1:15b2b98:     public void testSQLRoles() throws SQLException
1:15b2b98:     {
1:15b2b98:         // Do rudimentary sanity checking: that we can create, meaningfully use
1:15b2b98:         // and drop roles. If so, we can presume SYS.SYSROLES has been upgraded
1:15b2b98:         // correctly. If upgrading from 10.4, SYS.SYSROLES are already present,
1:15b2b98:         // but roles were not activated, cf. test in POST_SOFT_UPGRADE.
1:15b2b98: 
1:15b2b98:         DataSource ds = JDBCDataSource.getDataSourceLogical("ROLES_10_5");
1:15b2b98:         Connection conn = null;
1:15b2b98:         Statement s = null;
1:15b2b98:         boolean supportSqlAuthorization = oldAtLeast(10, 2);
1:15b2b98: 
1:15b2b98:         JDBCDataSource.setBeanProperty(ds, "user", "garfield");
1:15b2b98:         JDBCDataSource.setBeanProperty(ds, "password", "theCat");
1:15b2b98: 
1:15b2b98:         switch (getPhase()) {
1:15b2b98:         case PH_CREATE:
1:15b2b98:             // Create the database if it was not already created.
1:15b2b98:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:15b2b98:             conn = ds.getConnection();
1:15b2b98: 
1:15b2b98:             // Make the database have std security, and define
1:15b2b98:             // a database user for the database owner).
1:15b2b98:             CallableStatement cs = conn.prepareCall(
1:15b2b98:                 "call syscs_util.syscs_set_database_property(?,?)");
1:15b2b98: 
1:15b2b98:             cs.setString(1, "derby.connection.requireAuthentication");
1:15b2b98:             cs.setString(2, "true");
1:15b2b98:             cs.execute();
1:15b2b98: 
1:15b2b98:             cs.setString(1, "derby.authentication.provider");
1:15b2b98:             cs.setString(2, "BUILTIN");
1:15b2b98:             cs.execute();
1:15b2b98: 
1:15b2b98:             cs.setString(1, "derby.database.sqlAuthorization");
1:15b2b98:             cs.setString(2, "true");
1:15b2b98:             cs.execute();
1:15b2b98: 
1:15b2b98:             cs.setString(1, "derby.database.propertiesOnly");
1:15b2b98:             cs.setString(2, "true");
1:15b2b98:             cs.execute();
1:15b2b98: 
1:15b2b98:             cs.setString(1, "derby.user.garfield");
1:15b2b98:             cs.setString(2, "theCat");
1:15b2b98:             cs.execute();
1:15b2b98: 
1:15b2b98:             cs.setString(1, "derby.user.jon");
1:15b2b98:             cs.setString(2, "theOwner");
1:15b2b98:             cs.execute();
1:15b2b98: 
1:15b2b98:             conn.close();
1:15b2b98: 
1:15b2b98:             JDBCDataSource.shutdownDatabase(ds);
1:15b2b98:             break;
1:15b2b98: 
1:15b2b98:         case PH_SOFT_UPGRADE:
1:15b2b98:             /* We can't always do soft upgrade, because when
1:15b2b98:              * sqlAuthorization is set and we are coming from a
1:15b2b98:              * pre-10.2 database, connecting will fail with a message
1:15b2b98:              * to hard upgrade before setting sqlAuthorization, so we
1:15b2b98:              * skip this step.
1:15b2b98:              */
1:15b2b98:             if (oldAtLeast(10,2)) {
1:15b2b98:                 // needs hard upgrade
1:15b2b98:                 conn = ds.getConnection();
1:15b2b98:                 s = conn.createStatement();
1:15b2b98: 
1:15b2b98:                 assertStatementError("XCL47", s, "create role foo" );
1:15b2b98:                 conn.close();
1:15b2b98: 
1:15b2b98:                 JDBCDataSource.shutdownDatabase(ds);
1:15b2b98:             }
1:15b2b98:             break;
1:15b2b98: 
1:15b2b98:         case PH_POST_SOFT_UPGRADE:
1:15b2b98:             conn = ds.getConnection();
1:15b2b98:             s = conn.createStatement();
1:15b2b98: 
1:15b2b98:             if (getOldMajor() == 10 && getOldMinor() == 4) {
1:15b2b98:                 // not implemented
1:15b2b98:                 assertStatementError("0A000", s, "create role foo" );
1:15b2b98:             } else {
1:15b2b98:                 // syntax error
1:15b2b98:                 assertStatementError("42X01", s, "create role foo" );
1:15b2b98:             }
1:15b2b98: 
1:15b2b98:             conn.close();
1:15b2b98: 
1:15b2b98:             JDBCDataSource.shutdownDatabase(ds);
1:15b2b98:             break;
1:15b2b98: 
1:15b2b98:         case PH_HARD_UPGRADE:
1:15b2b98:             JDBCDataSource.setBeanProperty(
1:15b2b98:                 ds, "connectionAttributes", "upgrade=true");
1:15b2b98:             conn = ds.getConnection();
1:15b2b98:             s = conn.createStatement();
1:15b2b98: 
1:15b2b98:             // Roles should work; basic sanity test
1:15b2b98: 
1:15b2b98:             // garfield is dbo
1:15b2b98:             s.execute("create role foo");
1:15b2b98:             s.execute("create table cats(specie varchar(30))");
1:15b2b98:             s.execute("insert into cats " +
1:15b2b98:                       "values 'lynx', 'tiger', 'persian', 'garfield'");
1:15b2b98:             s.execute("grant select on cats to foo");
1:15b2b98:             s.execute("grant foo to jon");
1:15b2b98: 
1:15b2b98:             // Connect as jon (not owner) and employ jon's newfound role
1:15b2b98:             JDBCDataSource.clearStringBeanProperty(ds, "connectionAttributes");
1:15b2b98:             JDBCDataSource.setBeanProperty(ds, "user", "jon");
1:15b2b98:             JDBCDataSource.setBeanProperty(ds, "password", "theOwner");
1:15b2b98:             Connection jon = ds.getConnection();
1:15b2b98: 
1:15b2b98:             Statement jonStm = jon.createStatement();
1:15b2b98:             // Still, no privilege available for poor jon..
1:15b2b98:             assertStatementError
1:15b2b98:                 ("42502", jonStm, "select * from garfield.cats");
1:15b2b98: 
1:15b2b98:             jonStm.execute("set role foo");
1:15b2b98:             // Now, though:
1:15b2b98:             jonStm.execute("select * from garfield.cats");
1:15b2b98:             jonStm.close();
1:15b2b98:             jon.close();
1:15b2b98: 
1:15b2b98:             s.execute("drop table cats");
1:15b2b98:             s.execute("drop role foo");
1:15b2b98:             conn.close();
1:15b2b98: 
1:15b2b98:             println("Roles work after hard upgrade");
1:15b2b98: 
1:15b2b98:             // Owner garfield shuts down
1:15b2b98:             JDBCDataSource.setBeanProperty(ds, "user", "garfield");
1:15b2b98:             JDBCDataSource.setBeanProperty(ds, "password", "theCat");
1:15b2b98:             JDBCDataSource.shutdownDatabase(ds);
1:15b2b98:             break;
1:15b2b98:         }
1:15b2b98:     }
1:963d9f4: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
1: import java.sql.Connection;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Upgrade test for 10.5");
commit:15b2b98
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.JDBCDataSource;
0: import java.sql.Connection;
0: import java.sql.CallableStatement;
1: 
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check that you must be hard-upgraded to 10.5 or later in order to use
1:      * SQL roles
1:      * @throws SQLException
1:      *
1:      */
1:     public void testSQLRolesBasic() throws SQLException
1:     {
1:         // The standard upgrade database doesn't have sqlAuthorization
1:         // set, so we can only check if the system tables for roles is
1:         // present.
1: 
1:         Statement s = createStatement();
1:         String createRoleText = "create role foo";
1: 
1:         if (getOldMajor() == 10 && getOldMinor() == 4) {
1:             // In 10.4 the roles commands were present but just gave "not
1:             // implemented".
1:             switch (getPhase()) {
1:             case PH_CREATE:
1:                 assertStatementError("0A000", s, createRoleText );
1:                 break;
1: 
1:             case PH_SOFT_UPGRADE:
1:                 // needs hard upgrade
1:                 assertStatementError("XCL47", s, createRoleText );
1:                 break;
1: 
1:             case PH_POST_SOFT_UPGRADE:
1:                 assertStatementError("0A000", s, createRoleText );
1:                 break;
1: 
1:             case PH_HARD_UPGRADE:
1:                 // not supported because SQL authorization not set
1:                 assertStatementError("42Z60", s, createRoleText );
1:                 break;
1:             }
1: 
1:         } else {
1:             switch (getPhase()) {
1:                 case PH_CREATE:
1:                     assertStatementError("42X01", s, createRoleText );
1:                     break;
1: 
1:                 case PH_SOFT_UPGRADE:
1:                     // needs hard upgrade
1:                     assertStatementError("XCL47", s, createRoleText );
1:                     break;
1: 
1:                 case PH_POST_SOFT_UPGRADE:
1:                     assertStatementError("42X01", s, createRoleText );
1:                     break;
1: 
1:                 case PH_HARD_UPGRADE:
1:                     // not supported because SQL authorization not set
1:                     assertStatementError("42Z60", s, createRoleText );
1:                     break;
1:             }
1:         }
1: 
1: 
1:         s.close();
1:     }
1: 
1:     /**
1:      * Check that when hard-upgraded to 10.5 or later SQL roles can be
1:      * declared if DB has sqlAuthorization.
1:      * @throws SQLException
1:      *
1:      */
1:     public void testSQLRoles() throws SQLException
1:     {
1:         // Do rudimentary sanity checking: that we can create, meaningfully use
1:         // and drop roles. If so, we can presume SYS.SYSROLES has been upgraded
1:         // correctly. If upgrading from 10.4, SYS.SYSROLES are already present,
1:         // but roles were not activated, cf. test in POST_SOFT_UPGRADE.
1: 
1:         DataSource ds = JDBCDataSource.getDataSourceLogical("ROLES_10_5");
1:         Connection conn = null;
1:         Statement s = null;
1:         boolean supportSqlAuthorization = oldAtLeast(10, 2);
1: 
1:         JDBCDataSource.setBeanProperty(ds, "user", "garfield");
1:         JDBCDataSource.setBeanProperty(ds, "password", "theCat");
1: 
1:         switch (getPhase()) {
1:         case PH_CREATE:
1:             // Create the database if it was not already created.
1:             JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
1:             conn = ds.getConnection();
1: 
1:             // Make the database have std security, and define
1:             // a database user for the database owner).
1:             CallableStatement cs = conn.prepareCall(
1:                 "call syscs_util.syscs_set_database_property(?,?)");
1: 
1:             cs.setString(1, "derby.connection.requireAuthentication");
1:             cs.setString(2, "true");
1:             cs.execute();
1: 
1:             cs.setString(1, "derby.authentication.provider");
1:             cs.setString(2, "BUILTIN");
1:             cs.execute();
1: 
1:             cs.setString(1, "derby.database.sqlAuthorization");
1:             cs.setString(2, "true");
1:             cs.execute();
1: 
1:             cs.setString(1, "derby.database.propertiesOnly");
1:             cs.setString(2, "true");
1:             cs.execute();
1: 
1:             cs.setString(1, "derby.user.garfield");
1:             cs.setString(2, "theCat");
1:             cs.execute();
1: 
1:             cs.setString(1, "derby.user.jon");
1:             cs.setString(2, "theOwner");
1:             cs.execute();
1: 
1:             conn.close();
1: 
1:             JDBCDataSource.shutdownDatabase(ds);
1:             break;
1: 
1:         case PH_SOFT_UPGRADE:
1:             /* We can't always do soft upgrade, because when
1:              * sqlAuthorization is set and we are coming from a
1:              * pre-10.2 database, connecting will fail with a message
1:              * to hard upgrade before setting sqlAuthorization, so we
1:              * skip this step.
1:              */
1:             if (oldAtLeast(10,2)) {
1:                 // needs hard upgrade
1:                 conn = ds.getConnection();
1:                 s = conn.createStatement();
1: 
1:                 assertStatementError("XCL47", s, "create role foo" );
1:                 conn.close();
1: 
1:                 JDBCDataSource.shutdownDatabase(ds);
1:             }
1:             break;
1: 
1:         case PH_POST_SOFT_UPGRADE:
1:             conn = ds.getConnection();
1:             s = conn.createStatement();
1: 
1:             if (getOldMajor() == 10 && getOldMinor() == 4) {
1:                 // not implemented
1:                 assertStatementError("0A000", s, "create role foo" );
1:             } else {
1:                 // syntax error
1:                 assertStatementError("42X01", s, "create role foo" );
1:             }
1: 
1:             conn.close();
1: 
1:             JDBCDataSource.shutdownDatabase(ds);
1:             break;
1: 
1:         case PH_HARD_UPGRADE:
1:             JDBCDataSource.setBeanProperty(
1:                 ds, "connectionAttributes", "upgrade=true");
1:             conn = ds.getConnection();
1:             s = conn.createStatement();
1: 
1:             // Roles should work; basic sanity test
1: 
1:             // garfield is dbo
1:             s.execute("create role foo");
1:             s.execute("create table cats(specie varchar(30))");
1:             s.execute("insert into cats " +
1:                       "values 'lynx', 'tiger', 'persian', 'garfield'");
1:             s.execute("grant select on cats to foo");
1:             s.execute("grant foo to jon");
1: 
1:             // Connect as jon (not owner) and employ jon's newfound role
1:             JDBCDataSource.clearStringBeanProperty(ds, "connectionAttributes");
1:             JDBCDataSource.setBeanProperty(ds, "user", "jon");
1:             JDBCDataSource.setBeanProperty(ds, "password", "theOwner");
1:             Connection jon = ds.getConnection();
1: 
1:             Statement jonStm = jon.createStatement();
1:             // Still, no privilege available for poor jon..
1:             assertStatementError
1:                 ("42502", jonStm, "select * from garfield.cats");
1: 
1:             jonStm.execute("set role foo");
1:             // Now, though:
1:             jonStm.execute("select * from garfield.cats");
1:             jonStm.close();
1:             jon.close();
1: 
1:             s.execute("drop table cats");
1:             s.execute("drop role foo");
1:             conn.close();
1: 
1:             println("Roles work after hard upgrade");
1: 
1:             // Owner garfield shuts down
1:             JDBCDataSource.setBeanProperty(ds, "user", "garfield");
1:             JDBCDataSource.setBeanProperty(ds, "password", "theCat");
1:             JDBCDataSource.shutdownDatabase(ds);
1:             break;
1:         }
1:     }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:95a483d
/////////////////////////////////////////////////////////////////////////
1:      * Test that generation clauses are not allowed until you
1:      * hard-upgrade to 10.5.
1:      *
1:      */
1:     public void testGenerationClauses() throws SQLException
1:     {
1:         String  sqlstate = null;
1:         
1:         switch (getPhase())
1:         {
1:         case PH_SOFT_UPGRADE:
1:             sqlstate = SQLSTATE_NEED_UPGRADE;
1:             break;
1:             
1:         case PH_POST_SOFT_UPGRADE:
1:             sqlstate = BAD_SYNTAX;
1:             break;
1: 
1:         case PH_HARD_UPGRADE:
1:             sqlstate = null;
1:             break;
1: 
1:         default:
1:             return;
1:         }
1:         
1:         possibleError
1:             (
1:              sqlstate,
1:              "create table t_genCol_2( a int, b int generated always as ( -a ), c int )"
1:              );
1:     }
1: 
1:     /**
commit:fba255c
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String  BAD_SYNTAX = "42X01";
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Test that the DETERMINISTIC keyword is not allowed until you
1:      * hard-upgrade to 10.5.
1:      *
1:      */
1:     public void testDeterminismKeyword() throws SQLException
1:     {
1:         String  sqlstate = null;
1:         
1:         switch (getPhase())
1:         {
1:         case PH_SOFT_UPGRADE:
1:             sqlstate = SQLSTATE_NEED_UPGRADE;
1:             break;
1:             
1:         case PH_POST_SOFT_UPGRADE:
1:             sqlstate = BAD_SYNTAX;
1:             break;
1: 
1:         case PH_HARD_UPGRADE:
1:             sqlstate = null;
1:             break;
1: 
1:         default:
1:             return;
1:         }
1:         
1:         possibleError
1:             (
1:              sqlstate,
1:              "create function f_3570_12()\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "deterministic\n" +
1:              "no sql\n" +
1:              "external name 'foo.bar.wibble'\n"
1:              );
1:         possibleError
1:             (
1:              sqlstate,
1:              "create procedure p_3570_13()\n" +
1:              "language java\n" +
1:              "not deterministic\n" +
1:              "parameter style java\n" +
1:              "modifies sql data\n" +
1:              "external name 'foo.bar.wibble'\n"
1:              );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Run a statement. If the sqlstate is not null, then we expect that error.
1:      * </p>
1:      */
1:     private void    possibleError( String sqlstate, String text )
1:         throws SQLException
1:     {
1:         if ( sqlstate != null )
1:         {
1:             assertCompileError( sqlstate, text );
1:         }
1:         else
1:         {
1:             Statement   s = createStatement();
1:             s.execute( text );
1:             s.close();
1:         }
1:     }
1: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:963d9f4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_5
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.upgradeTests;
1: 
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * Upgrade test cases for 10.5.
1:  * If the old version is 10.5 or later then these tests
1:  * will not be run.
1:  * <BR>
1:     10.5 Upgrade issues
1: 
1:     <UL>
1:     <LI> testUpdateStatisticsProcdure - DERBY-269
1:     Make sure that SYSCS_UTIL.SYSCS_UPDATE_STATISTICS can only be run in Derby
1:     10.5 and higher.
1:     </UL>
1: 
1:  */
1: public class Changes10_5 extends UpgradeChange {
1: 
1:     public Changes10_5(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Return the suite of tests to test the changes made in 10.5.
1:      * @param phase an integer that indicates the current phase in
1:      *              the upgrade test.
1:      * @return the test suite created.
1:      */
1:     public static Test suite(int phase) {
0:         TestSuite suite = new TestSuite("Upgrade test for 10.5");
1: 
1:         suite.addTestSuite(Changes10_5.class);
1:         return new SupportFilesSetup((Test) suite);
1:     }
1: 
1:     /**
1:      * Make sure that SYSCS_UTIL.SYSCS_UPDATE_STATISTICS can only be run in 
1:      * Derby 10.5 and higher. 
1:      * DERBY-269
1:      * Test added for 10.5.
1:      * @throws SQLException
1:      *
1:      */
1:     public void testUpdateStatisticsProcdure() throws SQLException
1:     {
1:     	Statement s;
1:         switch (getPhase())
1:         {
1:         case PH_CREATE:
1:             s = createStatement();
1:             s.execute("CREATE TABLE DERBY_269(c11 int, c12 char(20))");
1:             s.execute("INSERT INTO DERBY_269 VALUES(1, 'DERBY-269')");
1:             s.execute("CREATE INDEX I1 ON DERBY_269(c12)");
1:             s.close();
1:             break;
1: 
1:         case PH_SOFT_UPGRADE:
1:         case PH_POST_SOFT_UPGRADE:
1:             // new update statistics procedure should not be found
1:             // on soft-upgrade.
1:             s = createStatement();
1:             assertStatementError("42Y03", s,
1:                     "call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:                     "('APP', 'DERBY_269', null)");
1:             assertStatementError("42Y03", s,
1:                     "call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:                     "('APP', 'DERBY_269', 'I1')");
1:             s.close();
1:             break;
1: 
1:         case PH_HARD_UPGRADE:
1:         	//We are at Derby 10.5 release and hence should find the
1:         	//update statistics procedure
1:             s = createStatement();
1:             s.execute("call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:             		"('APP', 'DERBY_269', null)");
1:             s.execute("call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS" +
1:             		"('APP', 'DERBY_269', 'I1')");
1:             s.close();
1:             break;
1:         }
1:     }
1: }
============================================================================