1:80eb35f: /*
1:80eb35f: 
1:80eb35f:    Derby - Class org.apache.derby.impl.sql.execute.CreateSequenceConstantAction
1:80eb35f: 
1:80eb35f:    Licensed to the Apache Software Foundation (ASF) under one or more
1:80eb35f:    contributor license agreements.  See the NOTICE file distributed with
1:80eb35f:    this work for additional information regarding copyright ownership.
1:80eb35f:    The ASF licenses this file to you under the Apache License, Version 2.0
1:80eb35f:    (the "License"); you may not use this file except in compliance with
1:80eb35f:    the License.  You may obtain a copy of the License at
1:80eb35f: 
1:80eb35f:       http://www.apache.org/licenses/LICENSE-2.0
1:80eb35f: 
1:80eb35f:    Unless required by applicable law or agreed to in writing, software
1:80eb35f:    distributed under the License is distributed on an "AS IS" BASIS,
1:80eb35f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80eb35f:    See the License for the specific language governing permissions and
1:80eb35f:    limitations under the License.
1:80eb35f: 
1:80eb35f:  */
1:80eb35f: 
1:80eb35f: package org.apache.derby.impl.sql.execute;
1:80eb35f: 
1:80eb35f: import org.apache.derby.iapi.error.StandardException;
1:80eb35f: import org.apache.derby.iapi.sql.Activation;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:80eb35f: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1:80eb35f: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:80eb35f: import org.apache.derby.iapi.store.access.TransactionController;
1:80eb35f: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:80eb35f: import org.apache.derby.shared.common.reference.SQLState;
1:80eb35f: 
1:80eb35f: /**
1:80eb35f:  * This class performs actions that are ALWAYS performed for a
1:80eb35f:  * CREATE SEQUENCE statement at execution time.
1:80eb35f:  * These SQL objects are stored in the SYS.SYSSEQUENCES table.
1:80eb35f:  */
1:80eb35f: class CreateSequenceConstantAction extends DDLConstantAction {
1:80eb35f: 
1:bb21983:     private String _sequenceName;
1:bb21983:     private String _schemaName;
1:bb21983:     private DataTypeDescriptor _dataType;
1:bb21983:     private long _initialValue;
1:bb21983:     private long _stepValue;
1:bb21983:     private long _maxValue;
1:bb21983:     private long _minValue;
1:bb21983:     private boolean _cycle;
1:80eb35f: 
1:80eb35f:     // CONSTRUCTORS
1:80eb35f:     /**
1:80eb35f:      * Make the ConstantAction for a CREATE SEQUENCE statement.
1:80eb35f:      * When executed, will create a sequence by the given name.
1:80eb35f:      *
1:80eb35f:      * @param sequenceName The name of the sequence being created
1:bb21983:      * @param dataType Exact numeric type of the new sequence
1:bb21983:      * @param initialValue Starting value
1:bb21983:      * @param stepValue Increment amount
1:bb21983:      * @param maxValue Largest value returned by the sequence generator
1:bb21983:      * @param minValue Smallest value returned by the sequence generator
1:bb21983:      * @param cycle True if the generator should wrap around, false otherwise
1:80eb35f:      */
1:bb21983:     public CreateSequenceConstantAction
1:bb21983:     (
1:bb21983:             String schemaName,
1:bb21983:             String sequenceName,
1:bb21983:             DataTypeDescriptor dataType,
1:bb21983:             long initialValue,
1:bb21983:             long stepValue,
1:bb21983:             long maxValue,
1:bb21983:             long minValue,
1:bb21983:             boolean cycle
1:bb21983:     )
1:bb21983:     {
1:bb21983:         this._schemaName = schemaName;
1:bb21983:         this._sequenceName = sequenceName;
1:bb21983:         this._dataType = dataType;
1:bb21983:         this._initialValue = initialValue;
1:bb21983:         this._stepValue = stepValue;
1:bb21983:         this._maxValue = maxValue;
1:bb21983:         this._minValue = minValue;
1:bb21983:         this._cycle = cycle;
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     // INTERFACE METHODS
1:80eb35f: 
1:80eb35f:     /**
1:80eb35f:      * This is the guts of the Execution-time logic for CREATE SEQUENCE.
1:80eb35f:      *
1:80eb35f:      * @throws org.apache.derby.iapi.error.StandardException
1:80eb35f:      *          Thrown on failure
1:80eb35f:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
1:80eb35f:      */
1:80eb35f:     public void executeConstantAction(Activation activation)
1:80eb35f:             throws StandardException {
1:80eb35f:         SchemaDescriptor schemaDescriptor;
1:80eb35f:         LanguageConnectionContext lcc =
1:80eb35f:                 activation.getLanguageConnectionContext();
1:80eb35f:         DataDictionary dd = lcc.getDataDictionary();
1:80eb35f:         TransactionController tc = lcc.getTransactionExecute();
1:80eb35f:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1:80eb35f: 
1:80eb35f:         dd.startWriting(lcc);
1:80eb35f: 
1:bb21983:         schemaDescriptor = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, _schemaName);
1:80eb35f: 
1:80eb35f:         //
1:80eb35f:         // Check if this sequence already exists. If it does, throw.
1:80eb35f:         //
1:bb21983:         SequenceDescriptor seqDef = dd.getSequenceDescriptor(schemaDescriptor, _sequenceName);
1:80eb35f: 
1:80eb35f:         if (seqDef != null) {
1:80eb35f:             throw StandardException.
1:80eb35f:                     newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
1:bb21983:                             seqDef.getDescriptorType(), _sequenceName);
1:80eb35f:         }
1:80eb35f: 
1:bb21983:         seqDef = ddg.newSequenceDescriptor(
1:bb21983:                 schemaDescriptor,
1:80eb35f:                 dd.getUUIDFactory().createUUID(),
1:bb21983:                 _sequenceName,
1:bb21983:                 _dataType,
1:ce40a31:                 _initialValue,   // current value
1:bb21983:                 _initialValue,
1:bb21983:                 _minValue,
1:bb21983:                 _maxValue,
1:bb21983:                 _stepValue,
1:bb21983:                 _cycle);        // whether the sequence can wrap-around
1:80eb35f: 
1:80eb35f:         dd.addDescriptor(seqDef,
1:80eb35f:                 null,  // parent
1:80eb35f:                 DataDictionary.SYSSEQUENCES_CATALOG_NUM,
1:80eb35f:                 false, // duplicatesAllowed
1:80eb35f:                 tc);
1:80eb35f:     }
1:80eb35f: 
1:80eb35f:     // OBJECT SHADOWS
1:80eb35f: 
1:80eb35f:     public String toString() {
1:80eb35f:         // Do not put this under SanityManager.DEBUG - it is needed for
1:80eb35f:         // error reporting.
1:bb21983:         return "CREATE SEQUENCE " + _sequenceName;
1:80eb35f:     }
1:80eb35f: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                 _initialValue,   // current value
commit:139ca85
/////////////////////////////////////////////////////////////////////////
0:                 new Long( _initialValue ),   // current value
commit:bb21983
/////////////////////////////////////////////////////////////////////////
1:     private String _sequenceName;
1:     private String _schemaName;
1:     private DataTypeDescriptor _dataType;
1:     private long _initialValue;
1:     private long _stepValue;
1:     private long _maxValue;
1:     private long _minValue;
1:     private boolean _cycle;
/////////////////////////////////////////////////////////////////////////
1:      * @param dataType Exact numeric type of the new sequence
1:      * @param initialValue Starting value
1:      * @param stepValue Increment amount
1:      * @param maxValue Largest value returned by the sequence generator
1:      * @param minValue Smallest value returned by the sequence generator
1:      * @param cycle True if the generator should wrap around, false otherwise
1:     public CreateSequenceConstantAction
1:     (
1:             String schemaName,
1:             String sequenceName,
1:             DataTypeDescriptor dataType,
1:             long initialValue,
1:             long stepValue,
1:             long maxValue,
1:             long minValue,
1:             boolean cycle
1:     )
1:     {
1:         this._schemaName = schemaName;
1:         this._sequenceName = sequenceName;
1:         this._dataType = dataType;
1:         this._initialValue = initialValue;
1:         this._stepValue = stepValue;
1:         this._maxValue = maxValue;
1:         this._minValue = minValue;
1:         this._cycle = cycle;
/////////////////////////////////////////////////////////////////////////
1:         schemaDescriptor = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, _schemaName);
1:         SequenceDescriptor seqDef = dd.getSequenceDescriptor(schemaDescriptor, _sequenceName);
1:                             seqDef.getDescriptorType(), _sequenceName);
1:         seqDef = ddg.newSequenceDescriptor(
1:                 schemaDescriptor,
1:                 _sequenceName,
1:                 _dataType,
0:                 _initialValue,   // current value
1:                 _initialValue,
1:                 _minValue,
1:                 _maxValue,
1:                 _stepValue,
1:                 _cycle);        // whether the sequence can wrap-around
/////////////////////////////////////////////////////////////////////////
1:         return "CREATE SEQUENCE " + _sequenceName;
commit:9ce7492
/////////////////////////////////////////////////////////////////////////
0:                 sequenceName, DataTypeDescriptor.INTEGER_NOT_NULL, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false);        // is definition
commit:80eb35f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.CreateSequenceConstantAction
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
1: /**
1:  * This class performs actions that are ALWAYS performed for a
1:  * CREATE SEQUENCE statement at execution time.
1:  * These SQL objects are stored in the SYS.SYSSEQUENCES table.
1:  */
1: class CreateSequenceConstantAction extends DDLConstantAction {
1: 
0:     private String sequenceName;
0:     private String schemaName;
1: 
1:     // CONSTRUCTORS
1:     /**
1:      * Make the ConstantAction for a CREATE SEQUENCE statement.
1:      * When executed, will create a sequence by the given name.
1:      *
1:      * @param sequenceName The name of the sequence being created
1:      */
0:     public CreateSequenceConstantAction(String schemaName, String sequenceName) {
0:         this.schemaName = schemaName;
0:         this.sequenceName = sequenceName;
1:     }
1: 
1:     // INTERFACE METHODS
1: 
1:     /**
1:      * This is the guts of the Execution-time logic for CREATE SEQUENCE.
1:      *
1:      * @throws org.apache.derby.iapi.error.StandardException
1:      *          Thrown on failure
1:      * @see org.apache.derby.iapi.sql.execute.ConstantAction#executeConstantAction
1:      */
1:     public void executeConstantAction(Activation activation)
1:             throws StandardException {
1:         SchemaDescriptor schemaDescriptor;
1:         LanguageConnectionContext lcc =
1:                 activation.getLanguageConnectionContext();
1:         DataDictionary dd = lcc.getDataDictionary();
1:         TransactionController tc = lcc.getTransactionExecute();
1:         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
1: 
1:         dd.startWriting(lcc);
1: 
0:         schemaDescriptor = DDLConstantAction.getSchemaDescriptorForCreate(dd, activation, schemaName);
1: 
1:         //
1:         // Check if this sequence already exists. If it does, throw.
1:         //
0:         SequenceDescriptor seqDef = dd.getSequenceDescriptor(schemaDescriptor, sequenceName);
1: 
1:         if (seqDef != null) {
1:             throw StandardException.
1:                     newException(SQLState.LANG_OBJECT_ALREADY_EXISTS,
0:                             seqDef.getDescriptorType(), sequenceName);
1:         }
1: 
0:         seqDef = ddg.newSequenceDescriptor(schemaDescriptor,
1:                 dd.getUUIDFactory().createUUID(),
0:                 sequenceName, DataTypeDescriptor.INTEGER_NOT_NULL, 0, 0, Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false);        // is definition
1: 
1:         dd.addDescriptor(seqDef,
1:                 null,  // parent
1:                 DataDictionary.SYSSEQUENCES_CATALOG_NUM,
1:                 false, // duplicatesAllowed
1:                 tc);
1:     }
1: 
1:     // OBJECT SHADOWS
1: 
1:     public String toString() {
1:         // Do not put this under SanityManager.DEBUG - it is needed for
1:         // error reporting.
0:         return "CREATE SEQUENCE " + sequenceName;
1:     }
1: }
============================================================================