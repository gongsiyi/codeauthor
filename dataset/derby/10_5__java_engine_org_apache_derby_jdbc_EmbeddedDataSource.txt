3:eac0369: /*
1:7863d83: 
1:345de35:    Derby - Class org.apache.derby.jdbc.EmbeddedDataSource
1:7863d83: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:7863d83: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:7863d83: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:7863d83: 
21:eac0369:  */
1:7863d83: 
1:eac0369: package org.apache.derby.jdbc;
1:7863d83: 
1:58bf06e: import java.lang.reflect.InvocationTargetException;
1:58bf06e: import java.lang.reflect.Method;
1:58bf06e: import java.lang.reflect.Modifier;
1:58bf06e: import javax.naming.NamingException;
1:58bf06e: import javax.naming.Reference;
1:58bf06e: import javax.naming.Referenceable;
1:58bf06e: import javax.naming.StringRefAddr;
1:7863d83: 
1:78bdf36: /**
1:78bdf36:    <P>
1:7863d83:     This data source is suitable for an application using embedded Derby,
1:78bdf36:     running on full Java SE 6 and higher, corresponding to 4.0 and higher.
1:78bdf36:     </P>
1:7863d83: 
1:eac0369: 	<P>A DataSource  is a factory for Connection objects. An object that
1:eac0369: 	implements the DataSource interface will typically be registered with a
1:78bdf36: 	JNDI service provider.</P>
1:7863d83:     
1:eac0369: 	<P>
1:eac0369: 	EmbeddedDataSource automatically supports the correct JDBC specification version
1:78bdf36: 	for the Java Virtual Machine's environment.</P>
1:58bf06e:     
1:eac0369: 	<UL>
1:78bdf36:     <LI>JDBC 4.0 - Java SE 6</LI>
1:78bdf36:     <LI>JDBC 4.1 - Java SE 7</LI>
1:78bdf36:     <LI>JDBC 4.2 - full Java SE 8</LI>
1:eac0369: 	</UL>
1:58bf06e: 
1:78bdf36:     <P>
1:78bdf36:     Use BasicEmbeddedDataSource40 if your application runs on Java 8
1:78bdf36:     Compact Profile 2.
1:78bdf36:     </P>
1:58bf06e: 
1:cd065ba: 	<P>The following is a list of properties that can be set on a Derby
1:eac0369: 	DataSource object:
1:eac0369: 	<P><B>Standard DataSource properties</B> (from JDBC 3.0 specification).
1:58bf06e: 
1:eac0369: 	<UL><LI><B><code>databaseName</code></B> (String): <I>Mandatory</I>
1:eac0369: 	<BR>This property must be set and it
1:eac0369: 	identifies which database to access.  If a database named wombat located at
1:eac0369: 	g:/db/wombat is to be accessed, then one should call
1:eac0369: 	<code>setDatabaseName("g:/db/wombat")</code> on the data source object.</LI>
1:58bf06e: 
1:eac0369: 	<LI><B><code>dataSourceName</code></B> (String): <I>Optional</I>
1:eac0369: 	<BR> Name for DataSource.  Not used by the data source object.  Used for
1:eac0369: 	informational purpose only.</LI>
1:58bf06e: 
1:eac0369: 	<LI><B><code>description</code></B> (String): <I>Optional</I>
1:eac0369: 	<BR>Description of the data source.  Not
1:eac0369: 	used by the data source object.  Used for informational purpose only.</LI> 
1:58bf06e: 
1:eac0369: 	<LI><B><code>password</code></B> (String): <I>Optional</I>
1:eac0369: 	<BR>Database password for the no argument <code>DataSource.getConnection()</code>,
1:eac0369: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
1:eac0369: 	and <code>XADataSource.getXAConnection()</code> methods.
1:78bdf36: 
1:eac0369: 	<LI><B><code>user</code></B> (String): <I>Optional</I>
1:eac0369: 	<BR>Database user for the no argument <code>DataSource.getConnection()</code>,
1:eac0369: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
1:eac0369: 	and <code>XADataSource.getXAConnection()</code> methods.
1:eac0369: 	</UL>
1:78bdf36: 
1:cd065ba: 	<BR><B>Derby specific DataSource properties.</B>
1:78bdf36: 
1:eac0369:   <UL>
1:46e89a9: 
1:eac0369:   <LI><B><code>attributesAsPassword</code></B> (Boolean): <I>Optional</I>
1:eac0369: 	<BR>If true, treat the password value in a
1:eac0369: 	<code>DataSource.getConnection(String user, String password)</code>,
1:eac0369: 	<code>ConnectionPoolDataSource.getPooledConnection(String user, String password)</code>
1:eac0369: 	or <code>XADataSource.getXAConnection(String user, String password)</code> as a set
1:eac0369: 	of connection attributes. The format of the attributes is the same as the format
1:eac0369: 	of the attributes in the property connectionAttributes. If false the password value
1:eac0369: 	is treated normally as the password for the given user.
1:eac0369: 	Setting this property to true allows a connection request from an application to
1:eac0369: 	provide more authentication information that just a password, for example the request
1:eac0369: 	can include the user's password and an encrypted database's boot password.</LI>
1:46e89a9: 
1:eac0369:   <LI><B><code>connectionAttributes</code></B> (String): <I>Optional</I>
1:cd065ba:   <BR>Defines a set of Derby connection attributes for use in all connection requests.
1:cd065ba:   The format of the String matches the format of the connection attributes in a Derby JDBC URL.
1:eac0369:   That is a list of attributes in the form <code><I>attribute</I>=<I>value</I></code>, each separated by semi-colon (';').
1:eac0369:   E.g. <code>setConnectionAttributes("bootPassword=erd3234dggd3kazkj3000");</code>.
1:eac0369:   <BR>The database name must be set by the DataSource property <code>databaseName</code> and not by setting the <code>databaseName</code>
1:eac0369:   connection attribute in the <code>connectionAttributes</code> property.
1:93ab830: 	<BR>
1:93ab830:    Any attributes that can be set using a property of this DataSource implementation
1:93ab830:    (e.g user, password) should not be set in connectionAttributes. Conflicting
1:93ab830:    settings in connectionAttributes and properties of the DataSource will lead to
1:93ab830:    unexpected behaviour. 
1:cd065ba:   <BR>Please see the Derby documentation for a complete list of connection attributes. </LI>
1:46e89a9: 
1:eac0369:   <LI><B><code>createDatabase</code></B> (String): <I>Optional</I>
1:eac0369: 	<BR>If set to the string "create", this will
1:eac0369: 	cause a new database of <code>databaseName</code> if that database does not already
1:eac0369: 	exist.  The database is created when a connection object is obtained from
1:eac0369: 	the data source. </LI> 
1:46e89a9: 
1:eac0369: 	<LI><B><code>shutdownDatabase</code></B> (String): <I>Optional</I>
1:eac0369: 	<BR>If set to the string "shutdown",
1:eac0369: 	this will cause the database to shutdown when a java.sql.Connection object
1:eac0369: 	is obtained from the data source.  E.g., If the data source is an
1:eac0369: 	XADataSource, a getXAConnection().getConnection() is necessary to cause the
1:eac0369: 	database to shutdown.
1:b3e446c: 
1:eac0369: 	</UL>
1:b3e446c: 
1:eac0369: 	<P><B>Examples.</B>
4:345de35: 
1:cd065ba: 	<P>This is an example of setting a property directly using Derby's
1:eac0369: 	EmbeddedDataSource object.  This code is typically written by a system integrator :
2:eac0369: 	<PRE> 
1:46e89a9: 	*
1:eac0369: 	* import org.apache.derby.jdbc.*;
1:46e89a9: 	*
1:eac0369: 	* // dbname is the database name
1:eac0369: 	* // if create is true, create the database if necessary
1:eac0369: 	* javax.sql.DataSource makeDataSource (String dbname, boolean create)
1:eac0369: 	*	throws Throwable 
1:eac0369: 	* { 
1:eac0369: 	*	EmbeddedDataSource ds = new EmbeddedDataSource(); 
1:eac0369: 	*	ds.setDatabaseName(dbname);
5:eac0369: 	*
1:eac0369: 	*	if (create)
1:eac0369: 	*		ds.setCreateDatabase("create");
1:eac0369:     *   
1:eac0369: 	*	return ds;
1:eac0369: 	* }
2:eac0369: 	</PRE>
1:58bf06e: 
1:eac0369: 	<P>Example of setting properties thru reflection.  This code is typically
1:eac0369: 	generated by tools or written by a system integrator: <PRE>
1:eac0369: 	*	
1:eac0369: 	* javax.sql.DataSource makeDataSource(String dbname) 
1:eac0369: 	*	throws Throwable 
1:eac0369: 	* {
1:eac0369: 	*	Class[] parameter = new Class[1];
1:eac0369: 	*	parameter[0] = dbname.getClass();
1:eac0369: 	*	DataSource ds =  new EmbeddedDataSource();
1:eac0369: 	*	Class cl = ds.getClass();
1:eac0369: 	*
1:eac0369: 	*	Method setName = cl.getMethod("setDatabaseName", parameter);
1:eac0369: 	*	Object[] arg = new Object[1];
1:eac0369: 	*	arg[0] = dbname;
1:eac0369: 	*	setName.invoke(ds, arg);
1:eac0369: 	*
1:eac0369: 	*	return ds;
1:eac0369: 	* }
1:eac0369: 	</PRE>
1:58bf06e: 
1:eac0369: 	<P>Example on how to register a data source object with a JNDI naming
1:eac0369: 	service.
1:eac0369: 	<PRE>
1:eac0369: 	* DataSource ds = makeDataSource("mydb");
1:eac0369: 	* Context ctx = new InitialContext();
1:eac0369: 	* ctx.bind("jdbc/MyDB", ds);
1:eac0369: 	</PRE>
1:58bf06e: 
1:eac0369: 	<P>Example on how to retrieve a data source object from a JNDI naming
1:eac0369: 	service. 
1:eac0369: 	<PRE>
1:eac0369: 	* Context ctx = new InitialContext();
1:eac0369: 	* DataSource ds = (DataSource)ctx.lookup("jdbc/MyDB");
1:eac0369: 	</PRE>
1:58bf06e: 
1:eea0d50: */
1:58bf06e: public class EmbeddedDataSource extends ReferenceableDataSource
1:58bf06e:                                 implements Referenceable
9:eac0369: {
1:58bf06e: 
1:eac0369: 	private static final long serialVersionUID = -4945135214995641181L;
1:58bf06e: 
1:46e89a9: 	/**
1:eac0369: 		No-arg constructor.
1:46e89a9: 	 */
1:eac0369: 	public EmbeddedDataSource() {
1:eac0369: 		// needed by Object Factory
1:58bf06e: 
1:eac0369: 		// don't put anything in here or in any of the set method because this
1:eac0369: 		// object may be materialized in a remote machine and then sent thru
1:eac0369: 		// the net to the machine where it will be used.
20:7863d83: 	}
1:7863d83: 
1:7863d83: 
1:7863d83: 
1:7863d83: 
1:7863d83: 
1:46e89a9:     /**
1:58bf06e:      * {@code javax.naming.Referenceable} interface
1:46e89a9:      */
1:7863d83: 
1:58bf06e:     /**
1:58bf06e:      * This method creates a new {@code Reference} object to represent this
1:58bf06e:      * data source.  The class name of the data source object is saved
1:58bf06e:      * in the {@code Reference}, so that an object factory will know that it
1:58bf06e:      * should create an instance of that class when a lookup operation
1:58bf06e:      * is performed. The class is also stored in the reference.  This
1:58bf06e:      * is not required by JNDI, but is recommend in practice.  JNDI
1:58bf06e:      * will always use the object factory class specified in the
1:58bf06e:      * reference when reconstructing an object, if a class name has
1:58bf06e:      * been specified.  See the JNDI SPI documentation for further
1:58bf06e:      * details on this topic, and for a complete description of the
1:58bf06e:      * {@code Reference} and {@code StringRefAddr} classes.
1:58bf06e:      * <p/>
1:58bf06e:      * Derby data source classes class provides several standard JDBC
1:58bf06e:      * properties.  The names and values of the data source properties
1:58bf06e:      * are also stored in the reference using the {@code StringRefAddr} class.
1:58bf06e:      * This is all the information needed to reconstruct an embedded
1:58bf06e:      * data source object.
1:58bf06e:      *
1:58bf06e:      * @return the created reference object for this data source
1:58bf06e:      * @exception NamingException cannot find named object
1:58bf06e:      */
1:a086620:     @Override
1:eea0d50:     public final Reference getReference() throws NamingException
1:58bf06e: 	{
1:eea0d50:         // These fields will be set by the JNDI server when it decides to
1:eea0d50:         // materialize a data source.
1:eea0d50:         Reference ref = new Reference(
1:eea0d50:             this.getClass().getName(),
1:eea0d50:             "org.apache.derby.jdbc.ReferenceableDataSource",
1:eea0d50:             null);
1:7863d83: 
1:58bf06e:         addBeanProperties(this, ref);
1:7863d83: 
1:eea0d50:         return ref;
1:7863d83: 	}
1:7863d83: 
1:b004dff:     /**
1:b004dff:     * Add Java Bean properties to the reference using
1:b004dff:     * StringRefAddr for each property. List of bean properties
1:b004dff:     * is defined from the public getXXX() methods on this object
1:b004dff:     * that take no arguments and return short, int, boolean or String.
1:b004dff:     * The {@link StringRefAddr} has a key of the Java bean property name,
1:b004dff:     * converted from the method name. E.g. traceDirectory for
1:b004dff:     * traceDirectory.
1:b004dff:     *
1:b004dff:      * @param ths {@code this} object
1:b004dff:      * @param ref The reference to add properties to
1:b004dff:     */
1:58bf06e:     private static void addBeanProperties(Object ths, Reference ref)
1:58bf06e:     {
1:58bf06e:         // Look for all the getXXX methods in the class that take no arguments.
1:58bf06e:         Method[] methods = ths.getClass().getMethods();
1:7863d83: 
1:a086620:         for (Method m : methods) {
1:58bf06e:             // only look for simple getter methods.
1:58bf06e:             if (m.getParameterTypes().length != 0)
1:58bf06e:                 continue;
1:7863d83: 
1:58bf06e:             // only non-static methods
1:58bf06e:             if (Modifier.isStatic(m.getModifiers()))
1:58bf06e:                 continue;
1:7863d83: 
1:58bf06e:             // Only getXXX methods
1:58bf06e:             String methodName = m.getName();
1:58bf06e:             if ((methodName.length() < 5) || !methodName.startsWith("get"))
1:58bf06e:                 continue;
1:7863d83: 
1:a086620:             Class<?> returnType = m.getReturnType();
1:7863d83: 
1:58bf06e:             if (Integer.TYPE.equals(returnType)
1:58bf06e:                     || Short.TYPE.equals(returnType)
1:58bf06e:                     || String.class.equals(returnType)
1:58bf06e:                     || Boolean.TYPE.equals(returnType)) {
1:7863d83: 
1:58bf06e:                 // setSomeProperty
1:58bf06e:                 // 01234
1:7863d83: 
1:58bf06e:                 String propertyName = methodName.substring(3, 4).toLowerCase(
1:58bf06e:                         java.util.Locale.ENGLISH).concat(
1:a086620:                                 methodName.substring(4));
1:7863d83: 
1:58bf06e:                 try {
1:a086620:                     Object ov = m.invoke(ths, (Object[])null);
1:58bf06e:                     // Need to check if property value is null, otherwise
1:58bf06e:                     // "null" string gets stored.
1:58bf06e:                     if (ov != null) {
1:58bf06e:                         ref.add(new StringRefAddr(propertyName, ov.toString()));
1:7863d83:                     }
1:58bf06e:                 } catch (IllegalAccessException iae) {
1:58bf06e:                 } catch (InvocationTargetException ite) {
1:7863d83:                 }
1:7863d83: 
1:7863d83:             }
1:7863d83:         }
1:7863d83:     }
1:7863d83: 
28:7863d83:     @Override
1:7863d83:     public Object getObjectInstance(Object refObj,
1:7863d83:                                     javax.naming.Name name,
1:7863d83:                                     javax.naming.Context nameContext,
1:7863d83:                                     java.util.Hashtable<?,?> environment)
1:7863d83:             throws java.lang.Exception {
1:7863d83:         return super.getObjectInstance(refObj, name, nameContext, environment);
1:7863d83:     }
1:7863d83: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b004dff
/////////////////////////////////////////////////////////////////////////
1:     /**
1:     * Add Java Bean properties to the reference using
1:     * StringRefAddr for each property. List of bean properties
1:     * is defined from the public getXXX() methods on this object
1:     * that take no arguments and return short, int, boolean or String.
1:     * The {@link StringRefAddr} has a key of the Java bean property name,
1:     * converted from the method name. E.g. traceDirectory for
1:     * traceDirectory.
1:     *
1:      * @param ths {@code this} object
1:      * @param ref The reference to add properties to
1:     */
commit:a086620
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     //
0:     // Add Java Bean properties to the reference using
0:     // StringRefAddr for each property. List of bean properties
0:     // is defined from the public getXXX() methods on this object
0:     // that take no arguments and return short, int, boolean or String.
0:     // The StringRefAddr has a key of the Java bean property name,
0:     // converted from the method name. E.g. traceDirectory for
0:     // traceDirectory.
1:         for (Method m : methods) {
/////////////////////////////////////////////////////////////////////////
1:             Class<?> returnType = m.getReturnType();
/////////////////////////////////////////////////////////////////////////
1:                                 methodName.substring(4));
1:                     Object ov = m.invoke(ths, (Object[])null);
/////////////////////////////////////////////////////////////////////////
commit:7863d83
/////////////////////////////////////////////////////////////////////////
0: import java.io.PrintWriter;
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import java.sql.SQLFeatureNotSupportedException;
0: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1:     This data source is suitable for an application using embedded Derby,
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public void setLoginTimeout(int seconds) throws SQLException {
0:         super.setLoginTimeout(seconds);
1:     }
1: 
1:     @Override
0:     public int getLoginTimeout() throws SQLException {
0:         return super.getLoginTimeout();
1:     }
1: 
1:     @Override
0:     public void setLogWriter(PrintWriter logWriter)
0:             throws SQLException {
0:         super.setLogWriter(logWriter);
1:     }
1: 
1:     @Override
0:     public PrintWriter getLogWriter() throws SQLException {
0:         return super.getLogWriter();
1:     }
1: 
1:     @Override
0:     public final void setPassword(String password) {
0:         super.setPassword(password);
1:     }
1: 
1:     @Override
0:     public final String getPassword() {
0:         return super.getPassword();
1:     }
1: 
1:     @Override
0:     public void setDatabaseName(String databaseName) {
0:         super.setDatabaseName(databaseName);
1:     }
1: 
1:     @Override
0:     public String getDatabaseName() {
0:         return super.getDatabaseName();
1:     }
1: 
1:     @Override
0:     public void setDataSourceName(String dataSourceName) {
0:         super.setDataSourceName(dataSourceName);
1:     }
1: 
1:     @Override
0:     public String getDataSourceName() {
0:         return super.getDataSourceName();
1:     }
1: 
1:     @Override
0:     public void setDescription(String description) {
0:         super.setDescription(description);
1:     }
1: 
1:     @Override
0:     public String getDescription() {
0:         return super.getDescription();
1:     }
1: 
1:     @Override
0:     public void setUser(String user) {
0:         super.setUser(user);
1:     }
1: 
1:     @Override
0:     public String getUser() {
0:         return super.getUser();
1:     }
1: 
1:     @Override
0:     public final void setCreateDatabase(String create) {
0:         super.setCreateDatabase(create);
1:     }
1: 
1:     @Override
0:     public final String getCreateDatabase() {
0:         return super.getCreateDatabase();
1:     }
1: 
1:     @Override
0:     public final void setShutdownDatabase(String shutdown) {
0:         super.setShutdownDatabase(shutdown);
1:     }
1: 
1:     @Override
0:     public final String getShutdownDatabase() {
0:         return super.getShutdownDatabase();
1:     }
1: 
1:     @Override
0:     public final void setConnectionAttributes(String prop) {
0:         super.setConnectionAttributes(prop);
1:     }
1: 
1:     @Override
0:     public final String getConnectionAttributes() {
0:         return super.getConnectionAttributes();
1:     }
1: 
1: 
1:     @Override
0:     public Connection getConnection() throws SQLException {
0:         return super.getConnection();
1:     }
1: 
1:     @Override
0:     public Connection getConnection(String user, String password)
0:             throws SQLException {
0:         return super.getConnection(user, password);
1:     }
1: 
1:     @Override
0:     public final Logger getParentLogger() throws SQLFeatureNotSupportedException {
0:         return super.getParentLogger();
1:     }
1: 
1:     @Override
0:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
0:         return super.isWrapperFor(iface);
1:     }
1: 
1:     @Override
0:     public <T> T unwrap(Class<T> iface) throws SQLException {
0:         return super.unwrap(iface);
1:     }
1: 
1:     @Override
0:     public final void setAttributesAsPassword(boolean attributesAsPassword) {
0:         super.setAttributesAsPassword(attributesAsPassword);
1:     }
1: 
1:     @Override
0:     public final boolean getAttributesAsPassword() {
0:         return super.getAttributesAsPassword();
1:     }
1: 
1:     @Override
1:     public Object getObjectInstance(Object refObj,
1:                                     javax.naming.Name name,
1:                                     javax.naming.Context nameContext,
1:                                     java.util.Hashtable<?,?> environment)
1:             throws java.lang.Exception {
1:         return super.getObjectInstance(refObj, name, nameContext, environment);
1:     }
commit:cb88209
/////////////////////////////////////////////////////////////////////////
0:     If running on Java SE 7 or higher, consider a more capable data source.
commit:2913612
/////////////////////////////////////////////////////////////////////////
0:     This datasource is suitable for an application using embedded Derby,
0:     running on full Java SE 5 or 6, corresponding to JDBC 3.0 and 4.0.
0:     If running on Java SE 7 og higher, consider a more capable data source.
0:     <p/>
commit:eea0d50
/////////////////////////////////////////////////////////////////////////
1:     public final Reference getReference() throws NamingException
1:         // These fields will be set by the JNDI server when it decides to
1:         // materialize a data source.
1:         Reference ref = new Reference(
1:             this.getClass().getName(),
1:             "org.apache.derby.jdbc.ReferenceableDataSource",
1:             null);
1:         return ref;
/////////////////////////////////////////////////////////////////////////
1:      */
commit:58bf06e
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Modifier;
1: import javax.naming.NamingException;
1: import javax.naming.Reference;
1: import javax.naming.Referenceable;
1: import javax.naming.StringRefAddr;
/////////////////////////////////////////////////////////////////////////
1: public class EmbeddedDataSource extends ReferenceableDataSource
1:                                 implements Referenceable
/////////////////////////////////////////////////////////////////////////
1:      * {@code javax.naming.Referenceable} interface
1:      * This method creates a new {@code Reference} object to represent this
1:      * data source.  The class name of the data source object is saved
1:      * in the {@code Reference}, so that an object factory will know that it
1:      * should create an instance of that class when a lookup operation
1:      * is performed. The class is also stored in the reference.  This
1:      * is not required by JNDI, but is recommend in practice.  JNDI
1:      * will always use the object factory class specified in the
1:      * reference when reconstructing an object, if a class name has
1:      * been specified.  See the JNDI SPI documentation for further
1:      * details on this topic, and for a complete description of the
1:      * {@code Reference} and {@code StringRefAddr} classes.
1:      * <p/>
1:      * Derby data source classes class provides several standard JDBC
1:      * properties.  The names and values of the data source properties
1:      * are also stored in the reference using the {@code StringRefAddr} class.
1:      * This is all the information needed to reconstruct an embedded
1:      * data source object.
1:      * @return the created reference object for this data source
1:      * @exception NamingException cannot find named object
0:    public final Reference getReference() throws NamingException
1: 	{
0:        // These fields will be set by the JNDI server when it decides to
0:        // materialize a data source.
0:        Reference ref = new Reference(
0:                this.getClass().getName(),
0:                "org.apache.derby.jdbc.ReferenceableDataSource",
0:                null);
1: 
1:         addBeanProperties(this, ref);
1: 
0:        return ref;
0: 	}
1: 
1:     /**
0:      * Add Java Bean properties to the reference using
0:      * StringRefAddr for each property. List of bean properties
0:      * is defined from the public getXXX() methods on this object
0:      * that take no arguments and return short, int, boolean or String.
0:      * The StringRefAddr has a key of the Java bean property name,
0:      * converted from the method name. E.g. traceDirectory for
0:      * traceDirectory.
1:      *
1:       */
1:     private static void addBeanProperties(Object ths, Reference ref)
1:     {
1:         // Look for all the getXXX methods in the class that take no arguments.
1:         Method[] methods = ths.getClass().getMethods();
1: 
0:         for (int i = 0; i < methods.length; i++) {
1: 
0:             Method m = methods[i];
1: 
1:             // only look for simple getter methods.
1:             if (m.getParameterTypes().length != 0)
1:                 continue;
1: 
1:             // only non-static methods
1:             if (Modifier.isStatic(m.getModifiers()))
1:                 continue;
1: 
1:             // Only getXXX methods
1:             String methodName = m.getName();
1:             if ((methodName.length() < 5) || !methodName.startsWith("get"))
1:                 continue;
1: 
0:             Class returnType = m.getReturnType();
1: 
1:             if (Integer.TYPE.equals(returnType)
1:                     || Short.TYPE.equals(returnType)
1:                     || String.class.equals(returnType)
1:                     || Boolean.TYPE.equals(returnType)) {
1: 
1:                 // setSomeProperty
1:                 // 01234
1: 
1:                 String propertyName = methodName.substring(3, 4).toLowerCase(
1:                         java.util.Locale.ENGLISH).concat(
0:                         methodName.substring(4));
1: 
1:                 try {
0:                     Object ov = m.invoke(ths, null);
1:                     // Need to check if property value is null, otherwise
1:                     // "null" string gets stored.
1:                     if (ov != null) {
1:                         ref.add(new StringRefAddr(propertyName, ov.toString()));
0:                     }
1:                 } catch (IllegalAccessException iae) {
1:                 } catch (InvocationTargetException ite) {
0:                 }
1: 
0:             }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:78bdf36
/////////////////////////////////////////////////////////////////////////
1: /**
1:    <P>
1:     running on full Java SE 6 and higher, corresponding to 4.0 and higher.
1:     </P>
1: 	JNDI service provider.</P>
1:     
1: 	for the Java Virtual Machine's environment.</P>
1:     
1:     <LI>JDBC 4.0 - Java SE 6</LI>
1:     <LI>JDBC 4.1 - Java SE 7</LI>
1:     <LI>JDBC 4.2 - full Java SE 8</LI>
1:     <P>
1:     Use BasicEmbeddedDataSource40 if your application runs on Java 8
1:     Compact Profile 2.
1:     </P>
1: 
commit:e3e3ca3
/////////////////////////////////////////////////////////////////////////
0: 					AutoloadedDriver	autoloadedDriver =
0: 						(AutoloadedDriver) DriverManager.getDriver(url);
0: 					driver = (InternalDriver) autoloadedDriver.getDriverModule();
commit:b33b410
/////////////////////////////////////////////////////////////////////////
0: 	EmbeddedDataSource is Derby's DataSource implementation for JDBC3.0 and JDBC2.0.
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:46e89a9
/////////////////////////////////////////////////////////////////////////
0: import java.io.PrintWriter;
0:     EmbeddedDataSource is Derby's DataSource implementation for JDBC 3.0
0:     and JDBC 4.0.
/////////////////////////////////////////////////////////////////////////
0:     <LI> JDBC 3.0 - J2SE 5.0 </LI>
0:     <LI> JDBC 4.0 - Java SE 6 </LI>
/////////////////////////////////////////////////////////////////////////
1: 
0:     // JDBC 4.0 java.sql.Wrapper interface methods
1: 
1:     /**
0:      * Returns false unless {@code interfaces} is implemented.
1:      *
0:      * @param iface a class defining an interface
0:      * @return true if this implements the interface or directly or indirectly
0:      * wraps an object that does
0:      * @throws SQLException if an error occurs while determining
0:      * whether this is a wrapper for an object with the given interface
1:      */
0:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
0:         return iface.isInstance(this);
0:     }
1: 
1:     /**
0:      * Returns {@code this} if this class implements the specified interface.
1:      *
0:      * @param iface a class defining an interface
0:      * @return an object that implements the interface
0:      * @throws SQLException if no object is found that implements the
0:      * interface
1:      */
0:     public <T> T unwrap(Class<T> iface) throws SQLException {
0:         // Derby does not implement non-standard methods on JDBC objects,
0:         // hence return this if this class implements the interface, or
0:         // throw an SQLException.
0:         try {
0:             return iface.cast(this);
0:         } catch (ClassCastException cce) {
0:             throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,
0:                     iface);
0:         }
0:     }
1: 
author:Lily Wei
-------------------------------------------------------------------------------
commit:56a7b39
/////////////////////////////////////////////////////////////////////////
0:                     driver = (InternalDriver) AutoloadedDriver.getDriverModule();
commit:45cb2df
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Driver;
/////////////////////////////////////////////////////////////////////////
0:                 // DriverManager will throw an exception if driver is not found
0:                 Driver registerDriver = DriverManager.getDriver(url);
0:                 if (registerDriver instanceof AutoloadedDriver) {
0:                     AutoloadedDriver autoloadedDriver = 
0:                         (AutoloadedDriver) registerDriver;
0:                     driver = (InternalDriver) autoloadedDriver
0:                             .getDriverModule();
0:                 } else {
0:                     driver = (InternalDriver) registerDriver;
0:                 }
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:2ca6c80
/////////////////////////////////////////////////////////////////////////
0: 		synchronized(this)
0: 			// The driver has either never been booted, or it has been
0: 			// shutdown by a 'jdbc:derby:;shutdown=true'
0: 			if (driver == null || !driver.acceptsURL(url))
0: 				new org.apache.derby.jdbc.EmbeddedDriver();
0: 				// If we know the driver, we loaded it.   Otherwise only
0: 				// work if DriverManager has already loaded it.
0: 				AutoloadedDriver	autoloadedDriver =
0: 					(AutoloadedDriver) DriverManager.getDriver(url);
0: 				driver = (InternalDriver) autoloadedDriver.getDriverModule();
0: 				// DriverManager will throw an exception if it cannot find the driver
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:494a76b
/////////////////////////////////////////////////////////////////////////
0: 	 * DataSource methods - keep these non-final so that others can
0: 	 * extend Derby's classes if they choose to.
/////////////////////////////////////////////////////////////////////////
0: 	public Connection getConnection() throws SQLException
/////////////////////////////////////////////////////////////////////////
0: 	public Connection getConnection(String username, String password) 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:fb8cf6e
/////////////////////////////////////////////////////////////////////////
0: 	EmbeddedDataSource is Derby's DataSource implementation for JDBC3.0.
/////////////////////////////////////////////////////////////////////////
commit:93ab830
/////////////////////////////////////////////////////////////////////////
1: 	<BR>
1:    Any attributes that can be set using a property of this DataSource implementation
1:    (e.g user, password) should not be set in connectionAttributes. Conflicting
1:    settings in connectionAttributes and properties of the DataSource will lead to
1:    unexpected behaviour. 
/////////////////////////////////////////////////////////////////////////
0: 	transient InternalDriver driver;
/////////////////////////////////////////////////////////////////////////
0: 		<BR>
0:        Any attributes that can be set using a property of this DataSource implementation
0:        (e.g user, password) should not be set in connectionAttributes. Conflicting
0:        settings in connectionAttributes and properties of the DataSource will lead to
0:        unexpected behaviour. 
commit:374d2f1
/////////////////////////////////////////////////////////////////////////
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
commit:0e38470
/////////////////////////////////////////////////////////////////////////
0: 	transient protected InternalDriver driver;
/////////////////////////////////////////////////////////////////////////
0: 	InternalDriver findDriver() throws SQLException
/////////////////////////////////////////////////////////////////////////
0: 					driver = (InternalDriver) DriverManager.getDriver(url);
/////////////////////////////////////////////////////////////////////////
0: 			// See the getDatabaseName() code in InternalDriver. Since this is a non-null
commit:b3e446c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.ExceptionSeverity;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.impl.jdbc.Util;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: 		Connection conn =  findDriver().connect(url, info);
0: 	// JDBC driver's getConnection method returns null if
0: 	// the driver does not handle the request's URL.
0:         if (conn == null)
0:            throw Util.generateCsSQLException(SQLState.PROPERTY_INVALID_VALUE,Attribute.DBNAME_ATTR,getDatabaseName());
1: 
0:         return conn;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.EmbeddedDataSource
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
1:  */
0: 
1: package org.apache.derby.jdbc;
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
0: 
0: import java.io.PrintWriter;
0: import java.util.Properties;
0: 
0: /* -- New jdbc 20 extension types --- */
0: import javax.sql.DataSource;
0: 
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: 
0: /** 
0: 	
0: 
0: 	EmbeddedDataSource is Cloudscape's DataSource implementation.
0: 	
0: 
1: 	<P>A DataSource  is a factory for Connection objects. An object that
1: 	implements the DataSource interface will typically be registered with a
0: 	JNDI service provider.
1: 	<P>
1: 	EmbeddedDataSource automatically supports the correct JDBC specification version
0: 	for the Java Virtual Machine's environment.
1: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
1: 	</UL>
0: 
0: 	<P>The following is a list of properties that can be set on a Cloudscape
1: 	DataSource object:
1: 	<P><B>Standard DataSource properties</B> (from JDBC 3.0 specification).
0: 
1: 	<UL><LI><B><code>databaseName</code></B> (String): <I>Mandatory</I>
1: 	<BR>This property must be set and it
1: 	identifies which database to access.  If a database named wombat located at
1: 	g:/db/wombat is to be accessed, then one should call
1: 	<code>setDatabaseName("g:/db/wombat")</code> on the data source object.</LI>
0: 
1: 	<LI><B><code>dataSourceName</code></B> (String): <I>Optional</I>
1: 	<BR> Name for DataSource.  Not used by the data source object.  Used for
1: 	informational purpose only.</LI>
0: 
1: 	<LI><B><code>description</code></B> (String): <I>Optional</I>
1: 	<BR>Description of the data source.  Not
1: 	used by the data source object.  Used for informational purpose only.</LI> 
0: 
1: 	<LI><B><code>password</code></B> (String): <I>Optional</I>
1: 	<BR>Database password for the no argument <code>DataSource.getConnection()</code>,
1: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
1: 	and <code>XADataSource.getXAConnection()</code> methods.
0: 
1: 	<LI><B><code>user</code></B> (String): <I>Optional</I>
1: 	<BR>Database user for the no argument <code>DataSource.getConnection()</code>,
1: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
1: 	and <code>XADataSource.getXAConnection()</code> methods.
1: 	</UL>
0: 
0: 	<BR><B>Cloudscape specific DataSource properties.</B>
0: 
1:   <UL>
0: 
1:   <LI><B><code>attributesAsPassword</code></B> (Boolean): <I>Optional</I>
1: 	<BR>If true, treat the password value in a
1: 	<code>DataSource.getConnection(String user, String password)</code>,
1: 	<code>ConnectionPoolDataSource.getPooledConnection(String user, String password)</code>
1: 	or <code>XADataSource.getXAConnection(String user, String password)</code> as a set
1: 	of connection attributes. The format of the attributes is the same as the format
1: 	of the attributes in the property connectionAttributes. If false the password value
1: 	is treated normally as the password for the given user.
1: 	Setting this property to true allows a connection request from an application to
1: 	provide more authentication information that just a password, for example the request
1: 	can include the user's password and an encrypted database's boot password.</LI>
0: 
1:   <LI><B><code>connectionAttributes</code></B> (String): <I>Optional</I>
0:   <BR>Defines a set of Cloudscape connection attributes for use in all connection requests.
0:   The format of the String matches the format of the connection attributes in a Cloudscape JDBC URL.
1:   That is a list of attributes in the form <code><I>attribute</I>=<I>value</I></code>, each separated by semi-colon (';').
1:   E.g. <code>setConnectionAttributes("bootPassword=erd3234dggd3kazkj3000");</code>.
1:   <BR>The database name must be set by the DataSource property <code>databaseName</code> and not by setting the <code>databaseName</code>
1:   connection attribute in the <code>connectionAttributes</code> property.
0:   <BR>Please see Cloudscape's documentation for a complete list of connection attributes. </LI>
0: 
1:   <LI><B><code>createDatabase</code></B> (String): <I>Optional</I>
1: 	<BR>If set to the string "create", this will
1: 	cause a new database of <code>databaseName</code> if that database does not already
1: 	exist.  The database is created when a connection object is obtained from
1: 	the data source. </LI> 
0: 
1: 	<LI><B><code>shutdownDatabase</code></B> (String): <I>Optional</I>
1: 	<BR>If set to the string "shutdown",
1: 	this will cause the database to shutdown when a java.sql.Connection object
1: 	is obtained from the data source.  E.g., If the data source is an
1: 	XADataSource, a getXAConnection().getConnection() is necessary to cause the
1: 	database to shutdown.
0: 
1: 	</UL>
0: 
1: 	<P><B>Examples.</B>
0: 
0: 	<P>This is an example of setting a property directly using Cloudscape's
1: 	EmbeddedDataSource object.  This code is typically written by a system integrator :
1: 	<PRE> 
1: 	*
1: 	* import org.apache.derby.jdbc.*;
1: 	*
1: 	* // dbname is the database name
1: 	* // if create is true, create the database if necessary
1: 	* javax.sql.DataSource makeDataSource (String dbname, boolean create)
1: 	*	throws Throwable 
1: 	* { 
1: 	*	EmbeddedDataSource ds = new EmbeddedDataSource(); 
1: 	*	ds.setDatabaseName(dbname);
1: 	*
1: 	*	if (create)
1: 	*		ds.setCreateDatabase("create");
1:     *   
1: 	*	return ds;
1: 	* }
1: 	</PRE>
0: 
1: 	<P>Example of setting properties thru reflection.  This code is typically
1: 	generated by tools or written by a system integrator: <PRE>
1: 	*	
1: 	* javax.sql.DataSource makeDataSource(String dbname) 
1: 	*	throws Throwable 
1: 	* {
1: 	*	Class[] parameter = new Class[1];
1: 	*	parameter[0] = dbname.getClass();
1: 	*	DataSource ds =  new EmbeddedDataSource();
1: 	*	Class cl = ds.getClass();
1: 	*
1: 	*	Method setName = cl.getMethod("setDatabaseName", parameter);
1: 	*	Object[] arg = new Object[1];
1: 	*	arg[0] = dbname;
1: 	*	setName.invoke(ds, arg);
1: 	*
1: 	*	return ds;
1: 	* }
1: 	</PRE>
0: 
1: 	<P>Example on how to register a data source object with a JNDI naming
1: 	service.
1: 	<PRE>
1: 	* DataSource ds = makeDataSource("mydb");
1: 	* Context ctx = new InitialContext();
1: 	* ctx.bind("jdbc/MyDB", ds);
1: 	</PRE>
0: 
1: 	<P>Example on how to retrieve a data source object from a JNDI naming
1: 	service. 
1: 	<PRE>
1: 	* Context ctx = new InitialContext();
1: 	* DataSource ds = (DataSource)ctx.lookup("jdbc/MyDB");
1: 	</PRE>
0: 
1: */
0: public class EmbeddedDataSource extends ReferenceableDataSource implements
0: 				javax.sql.DataSource
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 
1: 	private static final long serialVersionUID = -4945135214995641181L;
0: 
0: 	/** instance variables that will be serialized */
0: 
0: 	/**
0: 	 * The database name.
0: 	 * @serial
1: 	 */
0: 	private String databaseName;
0: 
0: 	/**
0: 	 * The data source name.
0: 	 * @serial
1: 	 */
0: 	private String dataSourceName;
0: 
0: 	/**
0: 	 * Description of the database.
0: 	 * @serial
1: 	 */
0: 	private String description;
0: 
0: 	/**
0: 	 * Set to "create" if the database should be created.
0: 	 * @serial
1: 	 */
0: 	private String createDatabase;
0: 
0: 	/**
0: 	 * Set to "shutdown" if the database should be shutdown.
0: 	 * @serial
1: 	 */
0: 	private String shutdownDatabase;
0: 
0: 	/**
0: 	 * Cloudscape specific connection attributes.
0: 	 * @serial
1: 	 */
0: 	private String connectionAttributes;
0: 
0: 	/**
0: 		Set password to be a set of connection attributes.
1: 	*/
0: 	private boolean attributesAsPassword;
0: 
0: 	/** instance variables that will not be serialized */
0: 	transient private PrintWriter printer;
0: 	transient private int loginTimeout;
0: 
0: 	// Unlike a DataSource, LocalDriver is shared by all
0: 	// Cloudscape databases in the same jvm.
0: 	transient protected Driver169 driver;
0: 
0: 	transient private String jdbcurl;
0: 
0: 	/**
1: 		No-arg constructor.
1: 	 */
1: 	public EmbeddedDataSource() {
1: 		// needed by Object Factory
0: 
1: 		// don't put anything in here or in any of the set method because this
1: 		// object may be materialized in a remote machine and then sent thru
1: 		// the net to the machine where it will be used.
0: 	}
0: 
0: 
0:   //Most of our customers would be using jndi to get the data
0:   //sources. Since we don't have a jndi to test this, we are
0:   //adding this method to fake it. This is getting used in
0:   //xaJNDI test so we can compare the 2 data sources.
0: 	public boolean equals(Object p0) {
0:     if (p0 instanceof EmbeddedDataSource) {
0:       EmbeddedDataSource ds = (EmbeddedDataSource)p0;
0: 
0:       boolean match = true;
0:       
0: 			if (databaseName != null) {
0:         if  (!(databaseName.equals(ds.databaseName)))
0: 					match = false;
0: 			} else if (ds.databaseName != null)
0:         match = false;
0: 
0: 			if (dataSourceName != null) {
0:         if  (!(dataSourceName.equals(ds.dataSourceName)))
0: 					match = false;
0: 			} else if (ds.dataSourceName != null)
0:         match = false;
0: 
0: 			if (description != null) {
0:         if  (!(description.equals(ds.description)))
0: 					match = false;
0: 			} else if (ds.description != null)
0:         match = false;
0: 
0: 			if (createDatabase != null) {
0:         if  (!(createDatabase.equals(ds.createDatabase)))
0: 					match = false;
0: 			} else if (ds.createDatabase != null)
0:         match = false;
0: 
0: 			if (shutdownDatabase != null) {
0:         if  (!(shutdownDatabase.equals(ds.shutdownDatabase)))
0: 					match = false;
0: 			} else if (ds.shutdownDatabase != null)
0:         match = false;
0: 
0: 			if (connectionAttributes != null) {
0:         if  (!(connectionAttributes.equals(ds.connectionAttributes)))
0: 					match = false;
0: 			} else if (ds.connectionAttributes != null)
0:         match = false;
0: 
0:       if (loginTimeout != ds.loginTimeout)
0:         match = false;
0: 
0:       return match;
0: 
0:     }
0: 
0:     return false;
0: 	}
0: 
1: 	/*
0: 	 * Properties to be seen by Bean - access thru reflection.
1: 	 */
0: 
0: 	/**
0: 		Set this property to create a new database.  If this
0: 		property is not set, the database (identified by databaseName) is
0: 		assumed to be already existing.
0: 
0: 		@param create if set to the string "create", this data source will try
0: 		to create a new database of databaseName, or boot the database if one
0: 		by that name already exists.
1: 	 */
0: 	public final void setCreateDatabase(String create) {
0: 		if (create != null && create.toLowerCase(java.util.Locale.ENGLISH).equals("create"))
0: 			createDatabase = create;
0: 		else
0: 			createDatabase = null;
0: 	}
0: 	/** @return "create" if create is set, or null if not */
0: 	public final String getCreateDatabase() {
0: 		return createDatabase;
0: 	}
0: 
0: 
0: 	/**
0:  		Set this property if one wishes to shutdown the database identified by
0: 		databaseName. 
0: 
0: 		@param shutdown if set to the string "shutdown", this data source will 
0: 		shutdown the database if it is running.
1: 	 */
0: 	public final void setShutdownDatabase(String shutdown) {
0: 		if (shutdown != null && shutdown.equalsIgnoreCase("shutdown"))
0: 			shutdownDatabase = shutdown;
0: 		else
0: 			shutdownDatabase = null;
0: 	}
0: 	/** @return "shutdown" if shutdown is set, or null if not */
0: 	public final String getShutdownDatabase() {
0: 		return shutdownDatabase;
0: 	}
0: 
0: 	/**
0:  		Set this property to pass in more Cloudscape specific
0: 		connection URL attributes.
0: 
0: 		@param prop set to the list of Cloudscape connection
0: 		attributes separated by semi-colons.   E.g., to specify an encryption
0: 		bootPassword of "x8hhk2adf", and set upgrade to true, do the following: 
1: 		<PRE>
0: 			ds.setConnectionAttributes("bootPassword=x8hhk2adf;upgrade=true");
1: 		</PRE>
0: 		See Cloudscape's documentation for complete list.
1: 	 */
0: 	public final void setConnectionAttributes(String prop) {
0: 		 connectionAttributes = prop;
0: 		 update();
0: 	}
0: 	/** @return Cloudscape specific connection URL attributes */
0: 	public final String getConnectionAttributes() {
0: 		return connectionAttributes;
0: 	}
0: 
0: 
0: 	/**
0: 		Set attributeAsPassword property to enable passing connection request attributes in the password argument of getConnection.
0: 		If the property is set to true then the password argument of the DataSource.getConnection(String user, String password)
0: 		method call is taken to be a list of connection attributes with the same format as the connectionAttributes property.
0: 
0: 		@param attributesAsPassword true to encode password argument as a set of connection attributes in a connection request.
1: 	*/
0: 	public final void setAttributesAsPassword(boolean attributesAsPassword) {
0: 		this.attributesAsPassword = attributesAsPassword;
0: 		 update();
0: 	}
0: 
0: 	/**
0: 		Return the value of the attributesAsPassword property.
1: 	*/
0: 	public final boolean getAttributesAsPassword() {
0: 		return attributesAsPassword;
0: 	}
0: 
1: 	/*
0: 	 * DataSource methods 
1: 	 */
0: 
0: 
0: 	/**
0: 	 * Attempt to establish a database connection.
1: 	 *
0: 	 * @return  a Connection to the database
0: 	 * @exception SQLException if a database-access error occurs.
1: 	 */
0: 	public final Connection getConnection() throws SQLException
1: 	{
0: 		return this.getConnection(getUser(), getPassword(), false);
0: 	}
0: 
0: 	/**
0: 	 * Attempt to establish a database connection with the given username and password.
0: 	   If the attributeAsPassword property is set to true then the password argument is taken to be a list of
0: 	   connection attributes with the same format as the connectionAttributes property.
0: 
1: 	 *
0: 	 * @param user the database user on whose behalf the Connection is 
0: 	 *  being made
0: 	 * @param password the user's password
0: 	 * @return  a Connection to the database
0: 	 * @exception SQLException if a database-access error occurs.
1: 	 */
0: 	public final Connection getConnection(String username, String password) 
0: 		 throws SQLException
1: 	{
0: 		return this.getConnection(username, password, true);
0: 	}
0: 
0: 	/**
0: 		@param	requestPassword true if the password came from the getConnection() call.
1: 	*/
0: 	final Connection getConnection(String username, String password, boolean requestPassword)
0: 		throws SQLException {
0: 
0: 		Properties info = new Properties();
0: 		if (username != null)
0: 			info.put(Attribute.USERNAME_ATTR, username);
0: 
0: 		if (!requestPassword || !attributesAsPassword)
1: 		{
0: 			if (password != null)
0: 				info.put(Attribute.PASSWORD_ATTR, password);
0: 		}
0: 
0: 		if (createDatabase != null)
0: 			info.put(Attribute.CREATE_ATTR, "true");
0: 		if (shutdownDatabase != null)
0: 			info.put(Attribute.SHUTDOWN_ATTR, "true");
0: 
0: 		String url = jdbcurl;
0: 
0: 		if (attributesAsPassword && requestPassword && password != null) {
0: 
0: 			StringBuffer sb = new StringBuffer(url.length() + password.length() + 1);
0: 
0: 			sb.append(url);
0: 			sb.append(';');
0: 			sb.append(password); // these are now request attributes on the URL
0: 
0: 			url = sb.toString();
0: 
0: 		}
0: 
0: 		return findDriver().connect(url, info);
0: 	}
0:    
0: 	Driver169 findDriver() throws SQLException
1: 	{
0: 		String url = jdbcurl;
0: 
0: 		if (driver == null || !driver.acceptsURL(url))
1: 		{
0: 			synchronized(this)
1: 			{
0: 				// The driver has either never been booted, or it has been
0: 				// shutdown by a 'jdbc:derby:;shutdown=true'
0: 				if (driver == null || !driver.acceptsURL(url))
1: 				{
0: 
0: 					new org.apache.derby.jdbc.EmbeddedDriver();
0: 
0: 					// If we know the driver, we loaded it.   Otherwise only
0: 					// work if DriverManager has already loaded it.
0: 
0: 					driver = (Driver169) DriverManager.getDriver(url);
0: 					// DriverManager will throw an exception if it cannot find the driver
0: 				}
0: 			}
0: 		}
0: 		return driver;
0: 		// else driver != null and driver can accept url
0: 	}
0: 
0: 	void update()
1: 	{
0: 		StringBuffer sb = new StringBuffer(64);
0: 
0: 		sb.append(Attribute.PROTOCOL);
0: 
0: 
0: 		// Set the database name from the databaseName property
0: 		String dbName = getDatabaseName();
0: 
0: 		if (dbName != null) {
0: 			dbName = dbName.trim();
0: 		}
0: 
0: 		if (dbName == null || dbName.length() == 0) {
0: 			// need to put something in so that we do not allow the
0: 			// database name to be set from the request or from the
0: 			// connection attributes.
0: 
0: 			// this space will selected as the database name (and trimmed to an empty string)
0: 			// See the getDatabaseName() code in Driver169. Since this is a non-null
0: 			// value, it will be selected over any databaseName connection attribute.
0: 			dbName = " ";
0: 		}
0: 
0: 		sb.append(dbName);
0: 
0: 
0: 		String connAttrs = getConnectionAttributes();
0: 		if (connAttrs != null) {
0: 			connAttrs = connAttrs.trim();
0: 			if (connAttrs.length() != 0) {
0: 				sb.append(';');
0: 				sb.append(connectionAttributes);
0: 			}
0: 		}
0: 
0: 		jdbcurl = sb.toString();
0: 	}
0: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:cd065ba
/////////////////////////////////////////////////////////////////////////
0: 	EmbeddedDataSource is Derby's DataSource implementation.
/////////////////////////////////////////////////////////////////////////
1: 	<P>The following is a list of properties that can be set on a Derby
/////////////////////////////////////////////////////////////////////////
1: 	<BR><B>Derby specific DataSource properties.</B>
/////////////////////////////////////////////////////////////////////////
1:   <BR>Defines a set of Derby connection attributes for use in all connection requests.
1:   The format of the String matches the format of the connection attributes in a Derby JDBC URL.
1:   <BR>Please see the Derby documentation for a complete list of connection attributes. </LI>
/////////////////////////////////////////////////////////////////////////
1: 	<P>This is an example of setting a property directly using Derby's
/////////////////////////////////////////////////////////////////////////
0: 	 * Derby specific connection attributes.
/////////////////////////////////////////////////////////////////////////
0: 	// Derby databases in the same jvm.
/////////////////////////////////////////////////////////////////////////
0:  		Set this property to pass in more Derby specific
0: 		@param prop set to the list of Derby connection
0: 		See the Derby documentation for complete list.
0: 	/** @return Derby specific connection URL attributes */
commit:f0b0870
/////////////////////////////////////////////////////////////////////////
0: 	 * @param username the database user on whose behalf the Connection is 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.jdbc;
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.SQLException;
0: 
0: import java.io.PrintWriter;
0: import java.util.Properties;
0: 
0: /* -- New jdbc 20 extension types --- */
0: import javax.sql.DataSource;
0: 
0: 
0: import org.apache.derby.iapi.reference.Attribute;
0: 
0: /** 
0: 	
0: 
0: 	EmbeddedDataSource is Cloudscape's DataSource implementation.
0: 	
0: 
0: 	<P>A DataSource  is a factory for Connection objects. An object that
0: 	implements the DataSource interface will typically be registered with a
0: 	JNDI service provider.
0: 	<P>
0: 	EmbeddedDataSource automatically supports the correct JDBC specification version
0: 	for the Java Virtual Machine's environment.
0: 	<UL>
0: 	<LI> JDBC 3.0 - Java 2 - JDK 1.4
0: 	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
0: 	</UL>
0: 
0: 	<P>The following is a list of properties that can be set on a Cloudscape
0: 	DataSource object:
0: 	<P><B>Standard DataSource properties</B> (from JDBC 3.0 specification).
0: 
0: 	<UL><LI><B><code>databaseName</code></B> (String): <I>Mandatory</I>
0: 	<BR>This property must be set and it
0: 	identifies which database to access.  If a database named wombat located at
0: 	g:/db/wombat is to be accessed, then one should call
0: 	<code>setDatabaseName("g:/db/wombat")</code> on the data source object.</LI>
0: 
0: 	<LI><B><code>dataSourceName</code></B> (String): <I>Optional</I>
0: 	<BR> Name for DataSource.  Not used by the data source object.  Used for
0: 	informational purpose only.</LI>
0: 
0: 	<LI><B><code>description</code></B> (String): <I>Optional</I>
0: 	<BR>Description of the data source.  Not
0: 	used by the data source object.  Used for informational purpose only.</LI> 
0: 
0: 	<LI><B><code>password</code></B> (String): <I>Optional</I>
0: 	<BR>Database password for the no argument <code>DataSource.getConnection()</code>,
0: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
0: 	and <code>XADataSource.getXAConnection()</code> methods.
0: 
0: 	<LI><B><code>user</code></B> (String): <I>Optional</I>
0: 	<BR>Database user for the no argument <code>DataSource.getConnection()</code>,
0: 	<code>ConnectionPoolDataSource.getPooledConnection()</code>
0: 	and <code>XADataSource.getXAConnection()</code> methods.
0: 	</UL>
0: 
0: 	<BR><B>Cloudscape specific DataSource properties.</B>
0: 
0:   <UL>
0: 
0:   <LI><B><code>attributesAsPassword</code></B> (Boolean): <I>Optional</I>
0: 	<BR>If true, treat the password value in a
0: 	<code>DataSource.getConnection(String user, String password)</code>,
0: 	<code>ConnectionPoolDataSource.getPooledConnection(String user, String password)</code>
0: 	or <code>XADataSource.getXAConnection(String user, String password)</code> as a set
0: 	of connection attributes. The format of the attributes is the same as the format
0: 	of the attributes in the property connectionAttributes. If false the password value
0: 	is treated normally as the password for the given user.
0: 	Setting this property to true allows a connection request from an application to
0: 	provide more authentication information that just a password, for example the request
0: 	can include the user's password and an encrypted database's boot password.</LI>
0: 
0:   <LI><B><code>connectionAttributes</code></B> (String): <I>Optional</I>
0:   <BR>Defines a set of Cloudscape connection attributes for use in all connection requests.
0:   The format of the String matches the format of the connection attributes in a Cloudscape JDBC URL.
0:   That is a list of attributes in the form <code><I>attribute</I>=<I>value</I></code>, each separated by semi-colon (';').
0:   E.g. <code>setConnectionAttributes("bootPassword=erd3234dggd3kazkj3000");</code>.
0:   <BR>The database name must be set by the DataSource property <code>databaseName</code> and not by setting the <code>databaseName</code>
0:   connection attribute in the <code>connectionAttributes</code> property.
0:   <BR>Please see Cloudscape's documentation for a complete list of connection attributes. </LI>
0: 
0:   <LI><B><code>createDatabase</code></B> (String): <I>Optional</I>
0: 	<BR>If set to the string "create", this will
0: 	cause a new database of <code>databaseName</code> if that database does not already
0: 	exist.  The database is created when a connection object is obtained from
0: 	the data source. </LI> 
0: 
0: 	<LI><B><code>shutdownDatabase</code></B> (String): <I>Optional</I>
0: 	<BR>If set to the string "shutdown",
0: 	this will cause the database to shutdown when a java.sql.Connection object
0: 	is obtained from the data source.  E.g., If the data source is an
0: 	XADataSource, a getXAConnection().getConnection() is necessary to cause the
0: 	database to shutdown.
0: 
0: 	</UL>
0: 
0: 	<P><B>Examples.</B>
0: 
0: 	<P>This is an example of setting a property directly using Cloudscape's
0: 	EmbeddedDataSource object.  This code is typically written by a system integrator :
0: 	<PRE> 
0: 	*
0: 	* import org.apache.derby.jdbc.*;
0: 	*
0: 	* // dbname is the database name
0: 	* // if create is true, create the database if necessary
0: 	* javax.sql.DataSource makeDataSource (String dbname, boolean create)
0: 	*	throws Throwable 
0: 	* { 
0: 	*	EmbeddedDataSource ds = new EmbeddedDataSource(); 
0: 	*	ds.setDatabaseName(dbname);
0: 	*
0: 	*	if (create)
0: 	*		ds.setCreateDatabase("create");
0:     *   
0: 	*	return ds;
0: 	* }
0: 	</PRE>
0: 
0: 	<P>Example of setting properties thru reflection.  This code is typically
0: 	generated by tools or written by a system integrator: <PRE>
0: 	*	
0: 	* javax.sql.DataSource makeDataSource(String dbname) 
0: 	*	throws Throwable 
0: 	* {
0: 	*	Class[] parameter = new Class[1];
0: 	*	parameter[0] = dbname.getClass();
0: 	*	DataSource ds =  new EmbeddedDataSource();
0: 	*	Class cl = ds.getClass();
0: 	*
0: 	*	Method setName = cl.getMethod("setDatabaseName", parameter);
0: 	*	Object[] arg = new Object[1];
0: 	*	arg[0] = dbname;
0: 	*	setName.invoke(ds, arg);
0: 	*
0: 	*	return ds;
0: 	* }
0: 	</PRE>
0: 
0: 	<P>Example on how to register a data source object with a JNDI naming
0: 	service.
0: 	<PRE>
0: 	* DataSource ds = makeDataSource("mydb");
0: 	* Context ctx = new InitialContext();
0: 	* ctx.bind("jdbc/MyDB", ds);
0: 	</PRE>
0: 
0: 	<P>Example on how to retrieve a data source object from a JNDI naming
0: 	service. 
0: 	<PRE>
0: 	* Context ctx = new InitialContext();
0: 	* DataSource ds = (DataSource)ctx.lookup("jdbc/MyDB");
0: 	</PRE>
0: 
0: */
0: public class EmbeddedDataSource extends ReferenceableDataSource implements
0: 				javax.sql.DataSource
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 
0: 	private static final long serialVersionUID = -4945135214995641181L;
0: 
0: 	/** instance variables that will be serialized */
0: 
0: 	/**
0: 	 * The database name.
0: 	 * @serial
0: 	 */
0: 	private String databaseName;
0: 
0: 	/**
0: 	 * The data source name.
0: 	 * @serial
0: 	 */
0: 	private String dataSourceName;
0: 
0: 	/**
0: 	 * Description of the database.
0: 	 * @serial
0: 	 */
0: 	private String description;
0: 
0: 	/**
0: 	 * Set to "create" if the database should be created.
0: 	 * @serial
0: 	 */
0: 	private String createDatabase;
0: 
0: 	/**
0: 	 * Set to "shutdown" if the database should be shutdown.
0: 	 * @serial
0: 	 */
0: 	private String shutdownDatabase;
0: 
0: 	/**
0: 	 * Cloudscape specific connection attributes.
0: 	 * @serial
0: 	 */
0: 	private String connectionAttributes;
0: 
0: 	/**
0: 		Set password to be a set of connection attributes.
0: 	*/
0: 	private boolean attributesAsPassword;
0: 
0: 	/** instance variables that will not be serialized */
0: 	transient private PrintWriter printer;
0: 	transient private int loginTimeout;
0: 
0: 	// Unlike a DataSource, LocalDriver is shared by all
0: 	// Cloudscape databases in the same jvm.
0: 	transient protected Driver169 driver;
0: 
0: 	transient private String jdbcurl;
0: 
0: 	/**
0: 		No-arg constructor.
0: 	 */
0: 	public EmbeddedDataSource() {
0: 		// needed by Object Factory
0: 
0: 		// don't put anything in here or in any of the set method because this
0: 		// object may be materialized in a remote machine and then sent thru
0: 		// the net to the machine where it will be used.
0: 	}
0: 
0: 
0:   //Most of our customers would be using jndi to get the data
0:   //sources. Since we don't have a jndi to test this, we are
0:   //adding this method to fake it. This is getting used in
0:   //xaJNDI test so we can compare the 2 data sources.
0: 	public boolean equals(Object p0) {
0:     if (p0 instanceof EmbeddedDataSource) {
0:       EmbeddedDataSource ds = (EmbeddedDataSource)p0;
0: 
0:       boolean match = true;
0:       
0: 			if (databaseName != null) {
0:         if  (!(databaseName.equals(ds.databaseName)))
0: 					match = false;
0: 			} else if (ds.databaseName != null)
0:         match = false;
0: 
0: 			if (dataSourceName != null) {
0:         if  (!(dataSourceName.equals(ds.dataSourceName)))
0: 					match = false;
0: 			} else if (ds.dataSourceName != null)
0:         match = false;
0: 
0: 			if (description != null) {
0:         if  (!(description.equals(ds.description)))
0: 					match = false;
0: 			} else if (ds.description != null)
0:         match = false;
0: 
0: 			if (createDatabase != null) {
0:         if  (!(createDatabase.equals(ds.createDatabase)))
0: 					match = false;
0: 			} else if (ds.createDatabase != null)
0:         match = false;
0: 
0: 			if (shutdownDatabase != null) {
0:         if  (!(shutdownDatabase.equals(ds.shutdownDatabase)))
0: 					match = false;
0: 			} else if (ds.shutdownDatabase != null)
0:         match = false;
0: 
0: 			if (connectionAttributes != null) {
0:         if  (!(connectionAttributes.equals(ds.connectionAttributes)))
0: 					match = false;
0: 			} else if (ds.connectionAttributes != null)
0:         match = false;
0: 
0:       if (loginTimeout != ds.loginTimeout)
0:         match = false;
0: 
0:       return match;
0: 
0:     }
0: 
0:     return false;
0: 	}
0: 
0: 	/*
0: 	 * Properties to be seen by Bean - access thru reflection.
0: 	 */
0: 
0: 	/**
0: 		Set this property to create a new database.  If this
0: 		property is not set, the database (identified by databaseName) is
0: 		assumed to be already existing.
0: 
0: 		@param create if set to the string "create", this data source will try
0: 		to create a new database of databaseName, or boot the database if one
0: 		by that name already exists.
0: 	 */
0: 	public final void setCreateDatabase(String create) {
0: 		if (create != null && create.toLowerCase(java.util.Locale.ENGLISH).equals("create"))
0: 			createDatabase = create;
0: 		else
0: 			createDatabase = null;
0: 	}
0: 	/** @return "create" if create is set, or null if not */
0: 	public final String getCreateDatabase() {
0: 		return createDatabase;
0: 	}
0: 
0: 
0: 	/**
0:  		Set this property if one wishes to shutdown the database identified by
0: 		databaseName. 
0: 
0: 		@param shutdown if set to the string "shutdown", this data source will 
0: 		shutdown the database if it is running.
0: 	 */
0: 	public final void setShutdownDatabase(String shutdown) {
0: 		if (shutdown != null && shutdown.equalsIgnoreCase("shutdown"))
0: 			shutdownDatabase = shutdown;
0: 		else
0: 			shutdownDatabase = null;
0: 	}
0: 	/** @return "shutdown" if shutdown is set, or null if not */
0: 	public final String getShutdownDatabase() {
0: 		return shutdownDatabase;
0: 	}
0: 
0: 	/**
0:  		Set this property to pass in more Cloudscape specific
0: 		connection URL attributes.
0: 
0: 		@param prop set to the list of Cloudscape connection
0: 		attributes separated by semi-colons.   E.g., to specify an encryption
0: 		bootPassword of "x8hhk2adf", and set upgrade to true, do the following: 
0: 		<PRE>
0: 			ds.setConnectionAttributes("bootPassword=x8hhk2adf;upgrade=true");
0: 		</PRE>
0: 		See Cloudscape's documentation for complete list.
0: 	 */
0: 	public final void setConnectionAttributes(String prop) {
0: 		 connectionAttributes = prop;
0: 		 update();
0: 	}
0: 	/** @return Cloudscape specific connection URL attributes */
0: 	public final String getConnectionAttributes() {
0: 		return connectionAttributes;
0: 	}
0: 
0: 
0: 	/**
0: 		Set attributeAsPassword property to enable passing connection request attributes in the password argument of getConnection.
0: 		If the property is set to true then the password argument of the DataSource.getConnection(String user, String password)
0: 		method call is taken to be a list of connection attributes with the same format as the connectionAttributes property.
0: 
0: 		@param attributesAsPassword true to encode password argument as a set of connection attributes in a connection request.
0: 	*/
0: 	public final void setAttributesAsPassword(boolean attributesAsPassword) {
0: 		this.attributesAsPassword = attributesAsPassword;
0: 		 update();
0: 	}
0: 
0: 	/**
0: 		Return the value of the attributesAsPassword property.
0: 	*/
0: 	public final boolean getAttributesAsPassword() {
0: 		return attributesAsPassword;
0: 	}
0: 
0: 	/*
0: 	 * DataSource methods 
0: 	 */
0: 
0: 
0: 	/**
0: 	 * Attempt to establish a database connection.
0: 	 *
0: 	 * @return  a Connection to the database
0: 	 * @exception SQLException if a database-access error occurs.
0: 	 */
0: 	public final Connection getConnection() throws SQLException
0: 	{
0: 		return this.getConnection(getUser(), getPassword(), false);
0: 	}
0: 
0: 	/**
0: 	 * Attempt to establish a database connection with the given username and password.
0: 	   If the attributeAsPassword property is set to true then the password argument is taken to be a list of
0: 	   connection attributes with the same format as the connectionAttributes property.
0: 
0: 	 *
0: 	 * @param user the database user on whose behalf the Connection is 
0: 	 *  being made
0: 	 * @param password the user's password
0: 	 * @return  a Connection to the database
0: 	 * @exception SQLException if a database-access error occurs.
0: 	 */
0: 	public final Connection getConnection(String username, String password) 
0: 		 throws SQLException
0: 	{
0: 		return this.getConnection(username, password, true);
0: 	}
0: 
0: 	/**
0: 		@param	requestPassword true if the password came from the getConnection() call.
0: 	*/
0: 	final Connection getConnection(String username, String password, boolean requestPassword)
0: 		throws SQLException {
0: 
0: 		Properties info = new Properties();
0: 		if (username != null)
0: 			info.put(Attribute.USERNAME_ATTR, username);
0: 
0: 		if (!requestPassword || !attributesAsPassword)
0: 		{
0: 			if (password != null)
0: 				info.put(Attribute.PASSWORD_ATTR, password);
0: 		}
0: 
0: 		if (createDatabase != null)
0: 			info.put(Attribute.CREATE_ATTR, "true");
0: 		if (shutdownDatabase != null)
0: 			info.put(Attribute.SHUTDOWN_ATTR, "true");
0: 
0: 		String url = jdbcurl;
0: 
0: 		if (attributesAsPassword && requestPassword && password != null) {
0: 
0: 			StringBuffer sb = new StringBuffer(url.length() + password.length() + 1);
0: 
0: 			sb.append(url);
0: 			sb.append(';');
0: 			sb.append(password); // these are now request attributes on the URL
0: 
0: 			url = sb.toString();
0: 
0: 		}
0: 
0: 		return findDriver().connect(url, info);
0: 	}
0:    
0: 	Driver169 findDriver() throws SQLException
0: 	{
0: 		String url = jdbcurl;
0: 
0: 		if (driver == null || !driver.acceptsURL(url))
0: 		{
0: 			synchronized(this)
0: 			{
0: 				// The driver has either never been booted, or it has been
0: 				// shutdown by a 'jdbc:derby:;shutdown=true'
0: 				if (driver == null || !driver.acceptsURL(url))
0: 				{
0: 
0: 					new org.apache.derby.jdbc.EmbeddedDriver();
0: 
0: 					// If we know the driver, we loaded it.   Otherwise only
0: 					// work if DriverManager has already loaded it.
0: 
0: 					driver = (Driver169) DriverManager.getDriver(url);
0: 					// DriverManager will throw an exception if it cannot find the driver
0: 				}
0: 			}
0: 		}
0: 		return driver;
0: 		// else driver != null and driver can accept url
0: 	}
0: 
0: 	void update()
0: 	{
0: 		StringBuffer sb = new StringBuffer(64);
0: 
0: 		sb.append(Attribute.PROTOCOL);
0: 
0: 
0: 		// Set the database name from the databaseName property
0: 		String dbName = getDatabaseName();
0: 
0: 		if (dbName != null) {
0: 			dbName = dbName.trim();
0: 		}
0: 
0: 		if (dbName == null || dbName.length() == 0) {
0: 			// need to put something in so that we do not allow the
0: 			// database name to be set from the request or from the
0: 			// connection attributes.
0: 
0: 			// this space will selected as the database name (and trimmed to an empty string)
0: 			// See the getDatabaseName() code in Driver169. Since this is a non-null
0: 			// value, it will be selected over any databaseName connection attribute.
0: 			dbName = " ";
0: 		}
0: 
0: 		sb.append(dbName);
0: 
0: 
0: 		String connAttrs = getConnectionAttributes();
0: 		if (connAttrs != null) {
0: 			connAttrs = connAttrs.trim();
0: 			if (connAttrs.length() != 0) {
0: 				sb.append(';');
0: 				sb.append(connectionAttributes);
0: 			}
0: 		}
0: 
0: 		jdbcurl = sb.toString();
0: 	}
0: }
============================================================================