1:a69fa12: /*
1:a69fa12: 
1:a69fa12:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup
1:a69fa12: 
1:a69fa12:    Licensed to the Apache Software Foundation (ASF) under one or more
1:a69fa12:    contributor license agreements.  See the NOTICE file distributed with
1:a69fa12:    this work for additional information regarding copyright ownership.
1:a69fa12:    The ASF licenses this file to you under the Apache License, Version 2.0
1:a69fa12:    (the "License"); you may not use this file except in compliance with
1:a69fa12:    the License.  You may obtain a copy of the License at
1:a69fa12: 
1:a69fa12:       http://www.apache.org/licenses/LICENSE-2.0
1:a69fa12: 
1:a69fa12:    Unless required by applicable law or agreed to in writing, software
1:a69fa12:    distributed under the License is distributed on an "AS IS" BASIS,
1:a69fa12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a69fa12:    See the License for the specific language governing permissions and
1:a69fa12:    limitations under the License.
1:a69fa12: 
1:a69fa12:  */
1:a69fa12: package org.apache.derbyTesting.functionTests.tests.compatibility;
1:a69fa12: 
1:a69fa12: import java.io.File;
1:a69fa12: import java.io.IOException;
1:a69fa12: import java.util.ArrayList;
1:a69fa12: 
1:a69fa12: import junit.framework.Test;
1:a69fa12: 
1:a69fa12: import org.apache.derby.drda.NetworkServerControl;
1:a69fa12: 
1:a69fa12: import org.apache.derbyTesting.junit.BaseTestCase;
1:a69fa12: import org.apache.derbyTesting.junit.BaseTestSetup;
1:a69fa12: import org.apache.derbyTesting.junit.DerbyDistribution;
1:a69fa12: import org.apache.derbyTesting.junit.DerbyVersion;
1:a69fa12: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1:a69fa12: import org.apache.derbyTesting.junit.SpawnedProcess;
1:a69fa12: import org.apache.derbyTesting.junit.TestConfiguration;
1:a69fa12: 
1:a69fa12: /**
1:a69fa12:  * Starts a network server of the specified Derby version.
1:a69fa12:  */
1:a69fa12: public class VersionedNetworkServerTestSetup
1:a69fa12:         extends BaseTestSetup {
1:a69fa12: 
1:a69fa12:     /** The first version to support '-noSecurityManager'. */
1:a69fa12:     private static final DerbyVersion SUPPORTS_NO_SECMAN_ARG =
1:a69fa12:             new DerbyVersion(10, 3, 1, 4);
1:a69fa12:     /**
1:a69fa12:      * The first version that supports the optional arguments on shutdown.
1:a69fa12:      * <p>
1:a69fa12:      * See DERBY-4786 and related issues.
1:a69fa12:      */
1:a69fa12:     private static final DerbyVersion NO_BROKEN_SHUTDOWN =
1:a69fa12:             new DerbyVersion(10, 4, 0, 0);
1:a69fa12:     /** The Derby distribution to use. */
1:a69fa12:     private final DerbyDistribution dist;
1:a69fa12:     /** Paths for code to append to the server classpath. */
1:a69fa12:     private final String appendToClasspath;
1:a69fa12:     private SpawnedProcess spawned;
1:a69fa12:     private NetworkServerControl networkServerControl;
1:a69fa12: 
1:a69fa12:     public VersionedNetworkServerTestSetup(Test test, DerbyDistribution dist,
1:a69fa12:             String appendToClasspath) {
1:a69fa12:         super(test);
1:a69fa12:         this.dist = dist;
1:a69fa12:         this.appendToClasspath = appendToClasspath;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     @Override
1:a69fa12:     public void setUp() {
1:a69fa12:         int port = TestConfiguration.getCurrent().getPort();
1:a69fa12:         try {
1:a69fa12:             networkServerControl =
1:a69fa12:                     NetworkServerTestSetup.getNetworkServerControl(port);
1:a69fa12:         } catch (Exception e) {
1:a69fa12:             fail(e.getMessage());
1:a69fa12:         }
1:a69fa12:         // Make sure there is no server up already (on our port).
1:a69fa12:         println("checking for running server on port " + port);
1:a69fa12:         if (ping(false, null)) {
1:a69fa12:             fail("a server is already running at port " + port);
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         // java -classpath ... org.apache.derby.drda...
1:a69fa12:         // Don't use -jar derbyrun.jar because we may need additional classes
1:a69fa12:         // to be on the classpath.
1:a69fa12:         String classpath = dist.getProductionClasspath() +
1:a69fa12:                 (appendToClasspath == null
1:a69fa12:                             ? ""
1:a69fa12:                             : File.pathSeparator + appendToClasspath);
1:ffa2d1b:         ArrayList<String> cmd = new ArrayList<String>();
1:a69fa12:         cmd.add("org.apache.derby.drda.NetworkServerControl");
1:a69fa12:         cmd.add("start");
1:a69fa12:         cmd.add("-p");
1:a69fa12:         cmd.add(Integer.toString(port));
1:a69fa12:         if (dist.getVersion().compareTo(SUPPORTS_NO_SECMAN_ARG) >= 0) {
1:a69fa12:             cmd.add("-noSecurityManager");
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         Process proc = null;
1:a69fa12:         try {
1:a69fa12:             proc = BaseTestCase.execJavaCmd(null, classpath,
1:654f47f:                 cmd.toArray(new String[cmd.size()]), null);
1:a69fa12:         } catch (IOException ioe) {
1:a69fa12:             fail("failed to start server: " + ioe.getMessage());
1:a69fa12:         }
1:a69fa12:         spawned = new SpawnedProcess(proc, "NetworkServerControl");
1:a69fa12:         boolean pingOk = ping(true, proc);
1:a69fa12:         assertTrue(spawned.getFailMessage("server failed to come up"), pingOk);
1:a69fa12:         println("--- Server " + dist.getVersion() + " up");
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     @Override
1:a69fa12:     public void tearDown() {
1:a69fa12:         String errorMsg = null;
1:a69fa12:         boolean sawError = false;
1:a69fa12:         if (dist.getVersion().compareTo(NO_BROKEN_SHUTDOWN) < 0) {
1:a69fa12:             // We have to fork off a process to shut down the server.
1:a69fa12:             errorMsg = shutDownInSeparateProcess();
1:a69fa12:             sawError = errorMsg != null;
1:a69fa12:         } else {
1:a69fa12:             boolean pingOk = ping(true, spawned.getProcess());
1:a69fa12:             if (pingOk) {
1:a69fa12:                 try {
1:a69fa12:                     networkServerControl.shutdown();
1:a69fa12:                 } catch (Exception e) {
1:a69fa12:                     String msg = spawned.getFailMessage("shutdown failed");
1:a69fa12:                     errorMsg = " (failed to shut down server (" +
1:a69fa12:                             dist.getVersion().toString() + "): " +
1:a69fa12:                             e.getMessage() + " :: " + msg + ")";
1:a69fa12:                     sawError = true;
1:a69fa12:                 }
1:a69fa12:             }
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         try {
1:a69fa12:             spawned.complete(5*1000);
1:a69fa12:         } catch (Exception e) {
1:a69fa12:             errorMsg = "process didn't die: " + e.getMessage() + (sawError ?
1:a69fa12:                     errorMsg : "");
1:a69fa12:             sawError = true;
1:a69fa12:         }
1:a69fa12:         networkServerControl = null;
1:a69fa12:         spawned = null;
1:a69fa12: 
1:a69fa12:         try {
1:a69fa12:             BaseTestCase.assertDirectoryDeleted(new File("wombat"));
1:a69fa12:         } catch (AssertionError ae) {
1:a69fa12:             // Catch this to generate a more complete error message.
1:a69fa12:             if (sawError) {
1:a69fa12:                 errorMsg += " :: " + ae.getMessage();
1:a69fa12:             } else {
1:a69fa12:                 throw ae;
1:a69fa12:             }
1:a69fa12:         }
1:a69fa12:         if (sawError) {
1:a69fa12:             fail(errorMsg);
1:a69fa12:         }
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * Spawns a separate JVM process to shut down the running server using the
1:a69fa12:      * code distributed with the release.
1:a69fa12:      * <p>
1:a69fa12:      * This method was added because some versions of Derby cannot be shut down
1:a69fa12:      * using code from a newer release.
1:a69fa12:      *
1:a69fa12:      * @return An error message, or {@code null} if no errors.
1:a69fa12:      */
1:a69fa12:     private String shutDownInSeparateProcess() {
1:a69fa12:         int port = TestConfiguration.getCurrent().getPort();
1:a69fa12:         // java -classpath ... org.apache.derby.drda...
1:ffa2d1b:         ArrayList<String> cmd = new ArrayList<String>();
1:a69fa12:         cmd.add("org.apache.derby.drda.NetworkServerControl");
1:a69fa12:         cmd.add("shutdown");
1:a69fa12:         cmd.add("-p");
1:a69fa12:         cmd.add(Integer.toString(port));
1:a69fa12:         if (dist.getVersion().compareTo(SUPPORTS_NO_SECMAN_ARG) >= 0) {
1:a69fa12:             cmd.add("-noSecurityManager");
1:a69fa12:         }
1:a69fa12:         Process proc;
1:a69fa12:         try {
1:a69fa12:             proc = BaseTestCase.execJavaCmd(null, dist.getProductionClasspath(),
1:654f47f:                     cmd.toArray(new String[cmd.size()]), null);
1:a69fa12:         } catch (IOException ioe) {
1:a69fa12:             return "shutdown process failed to start: " + ioe.getMessage();
1:a69fa12:         }
1:a69fa12: 
1:a69fa12:         SpawnedProcess spawnedShutdown =
1:a69fa12:                 new SpawnedProcess(proc, "shutdown process");
1:a69fa12:         int exitCode = -1;
1:a69fa12:         try {
1:a69fa12:             exitCode = spawnedShutdown.complete(10*1000L);
1:a69fa12:         }  catch (IOException ioe) {
1:a69fa12:             fail(spawnedShutdown.getFailMessage("shutdown process failed"));
1:a69fa12:         }
1:a69fa12:         if (exitCode == 0) {
1:a69fa12:             return null;
1:a69fa12:         } else {
1:a69fa12:             return spawnedShutdown.getFailMessage("abnormal process exit");
1:a69fa12:         }
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     /**
1:a69fa12:      * Pings the server.
1:a69fa12:      *
1:a69fa12:      * @param exepectServerUp whether the server is expected to be up or down
1:a69fa12:      * @param proc the process in which the server runs (may be {@code null})
1:a69fa12:      * @return Whether the ping is considered ok, which is determined by the
1:a69fa12:      *      response or lack of response from the server and the value of
1:a69fa12:      *      {@code expectedServerUp}.
1:a69fa12:      */
1:a69fa12:     private boolean ping(boolean exepectServerUp, Process proc) {
1:a69fa12:         boolean pingOk = false;
1:a69fa12:         try {
1:a69fa12:             pingOk = NetworkServerTestSetup.pingForServerUp(
1:a69fa12:                 networkServerControl, proc, exepectServerUp);
1:a69fa12:         } catch (InterruptedException ie) {
1:a69fa12:             Thread.currentThread().interrupt();
1:a69fa12:         }
1:a69fa12:         return pingOk;
1:a69fa12:     }
1:a69fa12: 
1:a69fa12:     private static void println(String msg) {
1:a69fa12:         BaseTestCase.println(msg);
1:a69fa12:     }
1:a69fa12: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:654f47f
/////////////////////////////////////////////////////////////////////////
1:                 cmd.toArray(new String[cmd.size()]), null);
/////////////////////////////////////////////////////////////////////////
1:                     cmd.toArray(new String[cmd.size()]), null);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ffa2d1b
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> cmd = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> cmd = new ArrayList<String>();
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:a69fa12
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.compatibility;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derby.drda.NetworkServerControl;
1: 
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSetup;
1: import org.apache.derbyTesting.junit.DerbyDistribution;
1: import org.apache.derbyTesting.junit.DerbyVersion;
1: import org.apache.derbyTesting.junit.NetworkServerTestSetup;
1: import org.apache.derbyTesting.junit.SpawnedProcess;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Starts a network server of the specified Derby version.
1:  */
1: public class VersionedNetworkServerTestSetup
1:         extends BaseTestSetup {
1: 
1:     /** The first version to support '-noSecurityManager'. */
1:     private static final DerbyVersion SUPPORTS_NO_SECMAN_ARG =
1:             new DerbyVersion(10, 3, 1, 4);
1:     /**
1:      * The first version that supports the optional arguments on shutdown.
1:      * <p>
1:      * See DERBY-4786 and related issues.
1:      */
1:     private static final DerbyVersion NO_BROKEN_SHUTDOWN =
1:             new DerbyVersion(10, 4, 0, 0);
1:     /** The Derby distribution to use. */
1:     private final DerbyDistribution dist;
1:     /** Paths for code to append to the server classpath. */
1:     private final String appendToClasspath;
1:     private SpawnedProcess spawned;
1:     private NetworkServerControl networkServerControl;
1: 
1:     public VersionedNetworkServerTestSetup(Test test, DerbyDistribution dist,
1:             String appendToClasspath) {
1:         super(test);
1:         this.dist = dist;
1:         this.appendToClasspath = appendToClasspath;
1:     }
1: 
1:     @Override
1:     public void setUp() {
1:         int port = TestConfiguration.getCurrent().getPort();
1:         try {
1:             networkServerControl =
1:                     NetworkServerTestSetup.getNetworkServerControl(port);
1:         } catch (Exception e) {
1:             fail(e.getMessage());
1:         }
1:         // Make sure there is no server up already (on our port).
1:         println("checking for running server on port " + port);
1:         if (ping(false, null)) {
1:             fail("a server is already running at port " + port);
1:         }
1: 
1:         // java -classpath ... org.apache.derby.drda...
1:         // Don't use -jar derbyrun.jar because we may need additional classes
1:         // to be on the classpath.
1:         String classpath = dist.getProductionClasspath() +
1:                 (appendToClasspath == null
1:                             ? ""
1:                             : File.pathSeparator + appendToClasspath);
0:         ArrayList cmd = new ArrayList();
1:         cmd.add("org.apache.derby.drda.NetworkServerControl");
1:         cmd.add("start");
1:         cmd.add("-p");
1:         cmd.add(Integer.toString(port));
1:         if (dist.getVersion().compareTo(SUPPORTS_NO_SECMAN_ARG) >= 0) {
1:             cmd.add("-noSecurityManager");
1:         }
1: 
1:         Process proc = null;
1:         try {
1:             proc = BaseTestCase.execJavaCmd(null, classpath,
0:                 (String[])cmd.toArray(new String[cmd.size()]), null);
1:         } catch (IOException ioe) {
1:             fail("failed to start server: " + ioe.getMessage());
1:         }
1:         spawned = new SpawnedProcess(proc, "NetworkServerControl");
1:         boolean pingOk = ping(true, proc);
1:         assertTrue(spawned.getFailMessage("server failed to come up"), pingOk);
1:         println("--- Server " + dist.getVersion() + " up");
1:     }
1: 
1:     @Override
1:     public void tearDown() {
1:         String errorMsg = null;
1:         boolean sawError = false;
1:         if (dist.getVersion().compareTo(NO_BROKEN_SHUTDOWN) < 0) {
1:             // We have to fork off a process to shut down the server.
1:             errorMsg = shutDownInSeparateProcess();
1:             sawError = errorMsg != null;
1:         } else {
1:             boolean pingOk = ping(true, spawned.getProcess());
1:             if (pingOk) {
1:                 try {
1:                     networkServerControl.shutdown();
1:                 } catch (Exception e) {
1:                     String msg = spawned.getFailMessage("shutdown failed");
1:                     errorMsg = " (failed to shut down server (" +
1:                             dist.getVersion().toString() + "): " +
1:                             e.getMessage() + " :: " + msg + ")";
1:                     sawError = true;
1:                 }
1:             }
1:         }
1: 
1:         try {
1:             spawned.complete(5*1000);
1:         } catch (Exception e) {
1:             errorMsg = "process didn't die: " + e.getMessage() + (sawError ?
1:                     errorMsg : "");
1:             sawError = true;
1:         }
1:         networkServerControl = null;
1:         spawned = null;
1: 
1:         try {
1:             BaseTestCase.assertDirectoryDeleted(new File("wombat"));
1:         } catch (AssertionError ae) {
1:             // Catch this to generate a more complete error message.
1:             if (sawError) {
1:                 errorMsg += " :: " + ae.getMessage();
1:             } else {
1:                 throw ae;
1:             }
1:         }
1:         if (sawError) {
1:             fail(errorMsg);
1:         }
1:     }
1: 
1:     /**
1:      * Spawns a separate JVM process to shut down the running server using the
1:      * code distributed with the release.
1:      * <p>
1:      * This method was added because some versions of Derby cannot be shut down
1:      * using code from a newer release.
1:      *
1:      * @return An error message, or {@code null} if no errors.
1:      */
1:     private String shutDownInSeparateProcess() {
1:         int port = TestConfiguration.getCurrent().getPort();
1:         // java -classpath ... org.apache.derby.drda...
0:         ArrayList cmd = new ArrayList();
1:         cmd.add("org.apache.derby.drda.NetworkServerControl");
1:         cmd.add("shutdown");
1:         cmd.add("-p");
1:         cmd.add(Integer.toString(port));
1:         if (dist.getVersion().compareTo(SUPPORTS_NO_SECMAN_ARG) >= 0) {
1:             cmd.add("-noSecurityManager");
1:         }
1:         Process proc;
1:         try {
1:             proc = BaseTestCase.execJavaCmd(null, dist.getProductionClasspath(),
0:                     (String[])cmd.toArray(new String[cmd.size()]), null);
1:         } catch (IOException ioe) {
1:             return "shutdown process failed to start: " + ioe.getMessage();
1:         }
1: 
1:         SpawnedProcess spawnedShutdown =
1:                 new SpawnedProcess(proc, "shutdown process");
1:         int exitCode = -1;
1:         try {
1:             exitCode = spawnedShutdown.complete(10*1000L);
1:         }  catch (IOException ioe) {
1:             fail(spawnedShutdown.getFailMessage("shutdown process failed"));
1:         }
1:         if (exitCode == 0) {
1:             return null;
1:         } else {
1:             return spawnedShutdown.getFailMessage("abnormal process exit");
1:         }
1:     }
1: 
1:     /**
1:      * Pings the server.
1:      *
1:      * @param exepectServerUp whether the server is expected to be up or down
1:      * @param proc the process in which the server runs (may be {@code null})
1:      * @return Whether the ping is considered ok, which is determined by the
1:      *      response or lack of response from the server and the value of
1:      *      {@code expectedServerUp}.
1:      */
1:     private boolean ping(boolean exepectServerUp, Process proc) {
1:         boolean pingOk = false;
1:         try {
1:             pingOk = NetworkServerTestSetup.pingForServerUp(
1:                 networkServerControl, proc, exepectServerUp);
1:         } catch (InterruptedException ie) {
1:             Thread.currentThread().interrupt();
1:         }
1:         return pingOk;
1:     }
1: 
1:     private static void println(String msg) {
1:         BaseTestCase.println(msg);
1:     }
1: }
============================================================================