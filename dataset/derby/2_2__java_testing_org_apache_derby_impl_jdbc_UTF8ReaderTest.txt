1:ab2037f: /*
3:ab2037f: 
1:ab2037f:    Derby - Class org.apache.derby.impl.jdbc.UTF8ReaderTest
1:ab2037f: 
1:ab2037f:    Licensed to the Apache Software Foundation (ASF) under one
1:ab2037f:    or more contributor license agreements.  See the NOTICE file
1:ab2037f:    distributed with this work for additional information
1:ab2037f:    regarding copyright ownership.  The ASF licenses this file
1:ab2037f:    to you under the Apache License, Version 2.0 (the
1:ab2037f:    "License"); you may not use this file except in compliance
1:ab2037f:    with the License.  You may obtain a copy of the License at
1:ab2037f: 
1:ab2037f:      http://www.apache.org/licenses/LICENSE-2.0
1:ab2037f: 
1:ab2037f:    Unless required by applicable law or agreed to in writing,
1:ab2037f:    software distributed under the License is distributed on an
1:ab2037f:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ab2037f:    KIND, either express or implied.  See the License for the
1:ab2037f:    specific language governing permissions and limitations
1:ab2037f:    under the License.
1:ab2037f: 
1:ab2037f:  */
1:ab2037f: package org.apache.derby.impl.jdbc;
1:ab2037f: 
1:ab2037f: import java.io.EOFException;
1:ab2037f: import java.io.IOException;
1:ab2037f: import java.io.Reader;
1:ab2037f: import java.sql.PreparedStatement;
1:ab2037f: import java.sql.ResultSet;
1:ab2037f: import java.sql.SQLException;
1:ab2037f: import java.sql.Statement;
1:ab2037f: import junit.framework.Test;
1:ab2037f: import org.apache.derby.iapi.error.StandardException;
1:7672693: import org.apache.derby.iapi.types.StringDataValue;
1:ab2037f: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1:ab2037f: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:ab2037f: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:ab2037f: 
1:ab2037f: /**
1:ab2037f:  * Tests {@code UTF8Reader} using package-private classes/methods.
1:ab2037f:  */
1:ab2037f: public class UTF8ReaderTest
1:ab2037f:     extends BaseJDBCTestCase {
1:ab2037f: 
1:ab2037f:     public UTF8ReaderTest(String name) {
1:ab2037f:         super(name);
1:ab2037f:     }
1:ab2037f: 
1:ab2037f:     /**
1:ab2037f:      * Tests simple repositioning.
1:ab2037f:      */
1:ab2037f:     public void testRepositioningSimple()
1:ab2037f:             throws IOException, SQLException, StandardException {
1:ab2037f:         setAutoCommit(false);
1:ab2037f:         Statement stmt = createStatement();
1:ab2037f:         ResultSet rs = stmt.executeQuery(
1:ab2037f:                 "select * from Utf8ReaderTest where id = 101");
1:ab2037f:         rs.next();
1:ab2037f:         final int size = rs.getInt(2);
1:7672693:         StringDataValue dvd = (StringDataValue)
1:7672693:                                             ((EmbedResultSet)rs).getColumn(3);
1:ab2037f:         StoreStreamClob ssClob = new StoreStreamClob(
1:7672693:                 dvd.getStreamWithDescriptor(), (EmbedResultSet)rs);
1:ab2037f:         Reader reader = ssClob.getInternalReader(1);
1:ab2037f:         assertEquals('a', reader.read());
1:ab2037f:         // Get internal readers and do stuff.
1:ab2037f:         checkInternalStream(1, ssClob); // Get first character.
1:ab2037f:         checkInternalStream(26, ssClob); // Skip forwards inside buffer.
1:ab2037f:         checkInternalStream(17003, ssClob); // Skip forwards, refill buffer.
1:ab2037f:         checkInternalStream(size, ssClob); // Skip until end.
1:ab2037f:         assertEquals(-1, reader.read());
1:ab2037f:         checkInternalStream(10, ssClob); // Rewind and refill buffer.
1:ab2037f:         try {
1:ab2037f:             checkInternalStream(size*2, ssClob); // Should fail, invalid pos.
1:ab2037f:             fail("Should have failed due to invalid position");
1:ab2037f:         } catch (EOFException eofe) {
1:ab2037f:             // As expected, do nothing.
1:ab2037f:         }
1:ab2037f:     }
1:ab2037f: 
1:ab2037f:     /**
1:ab2037f:      * Tests repositioning withing the buffer.
1:ab2037f:      */
1:ab2037f:     public void testRepositioningWithinBuffer()
1:ab2037f:             throws IOException, SQLException, StandardException {
1:ab2037f:         setAutoCommit(false);
1:ab2037f:         Statement stmt = createStatement();
1:ab2037f:         ResultSet rs = stmt.executeQuery(
1:ab2037f:                 "select * from Utf8ReaderTest where id = 100");
1:ab2037f:         rs.next();
1:7672693:         StringDataValue dvd = (StringDataValue)
1:7672693:                                             ((EmbedResultSet)rs).getColumn(3);
1:ab2037f:         StoreStreamClob ssClob = new StoreStreamClob(
1:7672693:                 dvd.getStreamWithDescriptor(), (EmbedResultSet)rs);
1:ab2037f:         Reader reader = ssClob.getInternalReader(1);
1:ab2037f:         assertEquals('a', reader.read());
1:ab2037f:         int bufSize = 26000;
1:ab2037f:         char[] buf = new char[bufSize];
1:ab2037f:         int count = 0;
1:ab2037f:         while (count < bufSize) {
1:ab2037f:             count += reader.read(buf, count, bufSize - count);
1:ab2037f:         }
1:ab2037f:         // We have now read 26001 chars. Next char should be 'b'.
1:ab2037f:         // Internal buffer size after the singel read below should be:
1:ab2037f:         // 26002 % 8192 = 1426
1:ab2037f:         assertEquals('b', reader.read());
1:ab2037f:         reader.close();
1:ab2037f:         // Get internal readers and do stuff.
1:ab2037f:         checkInternalStream(26002, ssClob);
1:ab2037f:         checkInternalStream(26001, ssClob);
1:ab2037f:         checkInternalStream(26002-1426+1, ssClob); // First char in buffer
1:ab2037f:         checkInternalStream(26001+(8192-1426+1), ssClob); // Last char in buffer
1:ab2037f:         checkInternalStream(26002-1426, ssClob); // Requires reset
1:ab2037f:         checkInternalStream(26002-1426+1, ssClob); // Requires refilling buffer
1:ab2037f:         checkInternalStream(26002, ssClob);
1:ab2037f:         checkInternalStream(1, ssClob);
1:ab2037f:     }
1:ab2037f: 
1:ab2037f:     /**
1:ab2037f:      * Tests repositioning withing buffer with a "real text" to make sure the
1:ab2037f:      * correct values are returned.
1:ab2037f:      */
1:ab2037f:     public void testRepositioningWithinBufferRealText()
1:ab2037f:             throws IOException, SQLException, StandardException {
1:ab2037f:         setAutoCommit(false);
1:ab2037f:         Statement stmt = createStatement();
1:ab2037f:         ResultSet rs = stmt.executeQuery(
1:ab2037f:                 // See insertTestData
1:ab2037f:                 "select * from Utf8ReaderTest where id = 1");
1:ab2037f:         rs.next();
1:7672693:         StringDataValue dvd = (StringDataValue)
1:7672693:                                             ((EmbedResultSet)rs).getColumn(3);
1:ab2037f:         StoreStreamClob ssClob = new StoreStreamClob(
1:7672693:                 dvd.getStreamWithDescriptor(), (EmbedResultSet)rs);
1:ab2037f:         Reader reader = ssClob.getInternalReader(1);
1:ab2037f:         assertEquals('B', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(24);
1:ab2037f:         assertEquals('\'', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(42);
1:ab2037f:         assertEquals('H', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(70);
1:ab2037f:         assertEquals('M', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(102);
1:ab2037f:         assertEquals('M', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(128);
1:ab2037f:         assertEquals('B', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(155);
1:ab2037f:         assertEquals('A', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(184);
1:ab2037f:         assertEquals('S', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(207);
1:ab2037f:         assertEquals('H', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(224);
1:ab2037f:         assertEquals('O', reader.read());
1:ab2037f:         reader = ssClob.getInternalReader(128);
1:ab2037f:         char[] buf = new char[4];
1:ab2037f:         assertEquals(4, reader.read(buf));
1:ab2037f:         assertEquals("But ", new String(buf));
1:ab2037f:         reader = ssClob.getInternalReader(70);
1:ab2037f:         buf = new char[32];
1:ab2037f:         assertEquals(32, reader.read(buf));
1:ab2037f:         assertEquals("Men the grocer and butcher sent\n", new String(buf));
1:ab2037f:     }
1:ab2037f: 
1:ab2037f:     /**
1:ab2037f:      * Makes sure the data returned from the internal Clob matches the data
1:ab2037f:      * returned by a fresh looping alphabet stream.
1:ab2037f:      *
1:ab2037f:      * @param pos 1-based Clob position
1:ab2037f:      * @param clob internal store stream Clob representation
1:ab2037f:      */
1:ab2037f:     private static void checkInternalStream(long pos, StoreStreamClob clob)
1:ab2037f:             throws IOException, SQLException {
1:ab2037f:         Reader canonStream = new LoopingAlphabetReader(pos + 100);
1:ab2037f:         long toSkip = pos -1; // Convert to 0-based index.
1:ab2037f:         while (toSkip > 0) {
1:ab2037f:             long skipped = canonStream.skip(toSkip);
1:ab2037f:             if (skipped > 0) {
1:ab2037f:                 toSkip -= skipped;
1:ab2037f:             }
1:ab2037f:         }
1:ab2037f:         Reader clobStream = clob.getInternalReader(pos);
1:ab2037f:         assertEquals("Data mismatch", canonStream.read(), clobStream.read());
1:ab2037f:         clobStream.close();
1:ab2037f:     }
1:ab2037f: 
1:ab2037f:     /**
1:ab2037f:      * Returns a simple test suite, using the embedded driver only.
1:ab2037f:      *
1:ab2037f:      * @return A test suite.
1:ab2037f:      */
1:ab2037f:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(UTF8ReaderTest.class);
1:ab2037f:         return new CleanDatabaseTestSetup(suite) {
1:ab2037f:             public void decorateSQL(Statement stmt)
1:ab2037f:                     throws SQLException {
1:ab2037f:                 insertTestData(stmt);
1:ab2037f:             }
1:ab2037f:         };
1:ab2037f:     }
1:ab2037f: 
1:ab2037f:     /**
1:ab2037f:      * Inserts data used by the tests.
1:ab2037f:      * <p>
1:ab2037f:      * Use the id to select a Clob with specific contents.
1:ab2037f:      */
1:ab2037f:     private static void insertTestData(Statement stmt)
1:ab2037f:             throws SQLException {
1:ab2037f:         int[][] sizes = new int[][] {
1:ab2037f:                             {100, 1*1024*1024},        // 1M chars
1:ab2037f:                             {101, 32*1024},            // 32K chars
1:ab2037f:             };
1:ab2037f:         stmt.executeUpdate(
1:ab2037f:                 "create table Utf8ReaderTest" +
1:ab2037f:                 "(id int primary key, size int, dClob clob)");
1:ab2037f:         PreparedStatement ps = stmt.getConnection().prepareStatement(
1:ab2037f:                 "insert into Utf8ReaderTest values (?,?,?)");
1:ab2037f:         for (int i=0; i < sizes.length; i++) {
1:ab2037f:             ps.setInt(1, sizes[i][0]);
1:ab2037f:             int size = sizes[i][1];
1:ab2037f:             ps.setInt(2, size);
1:ab2037f:             ps.setCharacterStream(3, new LoopingAlphabetReader(size), size);
1:ab2037f:             ps.executeUpdate();
1:ab2037f:         }
1:ab2037f:         
1:ab2037f:         // Insert some special pieces of text, repeat to get it represented as
1:ab2037f:         // a stream.
1:ab2037f:         ps.setInt(1, 1);
1:ab2037f:         int size = aintWeGotFun.length();
1:ab2037f:         ps.setInt(2, size);
1:ab2037f:         StringBuffer str = new StringBuffer(32*1024 + aintWeGotFun.length());
1:ab2037f:         while (str.length() < 32*1024) {
1:ab2037f:             str.append(aintWeGotFun);
1:ab2037f:         }
1:ab2037f:         ps.setString(3, str.toString());
1:ab2037f:         ps.executeUpdate();
1:ab2037f:     }
1:ab2037f: 
1:ab2037f:     /**
1:ab2037f:      * Test data, first part of "Ain't We Got Fun?" (public domain).
1:ab2037f:      * See http://en.wikipedia.org/wiki/Ain%27t_We_Got_Fun%3F
1:ab2037f:      */
1:ab2037f:     public static final String aintWeGotFun =
1:ab2037f:             // 1-based positions for the first and the last character on line.
1:ab2037f:             "Bill collectors gather\n" + // 1
1:ab2037f:             "'Round and rather\n" + // 24
1:ab2037f:             "Haunt the cottage next door\n" + // 42
1:ab2037f:             "Men the grocer and butcher sent\n" + // 70
1:ab2037f:             "Men who call for the rent\n" + // 102
1:ab2037f:             "But with in a happy chappy\n" + // 128
1:ab2037f:             "And his bride of only a year\n" + // 155
1:ab2037f:             "Seem to be so cheerful\n" + // 184
1:ab2037f:             "Here's an earful\n" + // 207
1:ab2037f:             "Of the chatter you hear\n"; // 224
1:ab2037f: 
1:ab2037f:     /*
1:ab2037f:         // Code that can be used to check the positions in the text.
1:ab2037f:         String[] firstWords = new String[] {"Bill", "'Round", "Haunt", "Men th",
1:ab2037f:             "Men wh", "But", "And", "Seem", "Here's", "Of"};
1:ab2037f:         for (int i=0; i < firstWords.length; i++) {
1:ab2037f:             System.out.println("> " + firstWords[i]);
1:ab2037f:             int clobPos = (int)clob.position(firstWords[i], 1);
1:ab2037f:             int strPos = aintWeGotFun.indexOf(firstWords[i]);
1:ab2037f:             System.out.println("\tClob: " + clobPos);
1:ab2037f:             System.out.println("\tString: " + strPos);
1:ab2037f:             assertTrue(clobPos == strPos +1);
1:ab2037f:         }
1:ab2037f:     */
1:ab2037f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(UTF8ReaderTest.class);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:7672693
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.StringDataValue;
/////////////////////////////////////////////////////////////////////////
1:         StringDataValue dvd = (StringDataValue)
1:                                             ((EmbedResultSet)rs).getColumn(3);
1:                 dvd.getStreamWithDescriptor(), (EmbedResultSet)rs);
/////////////////////////////////////////////////////////////////////////
1:         StringDataValue dvd = (StringDataValue)
1:                                             ((EmbedResultSet)rs).getColumn(3);
1:                 dvd.getStreamWithDescriptor(), (EmbedResultSet)rs);
/////////////////////////////////////////////////////////////////////////
1:         StringDataValue dvd = (StringDataValue)
1:                                             ((EmbedResultSet)rs).getColumn(3);
1:                 dvd.getStreamWithDescriptor(), (EmbedResultSet)rs);
commit:ab2037f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.jdbc.UTF8ReaderTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.Reader;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * Tests {@code UTF8Reader} using package-private classes/methods.
1:  */
1: public class UTF8ReaderTest
1:     extends BaseJDBCTestCase {
1: 
1:     public UTF8ReaderTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Tests simple repositioning.
1:      */
1:     public void testRepositioningSimple()
1:             throws IOException, SQLException, StandardException {
1:         setAutoCommit(false);
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select * from Utf8ReaderTest where id = 101");
1:         rs.next();
1:         final int size = rs.getInt(2);
0:         DataValueDescriptor dvd = ((EmbedResultSet)rs).getColumn(3);
1:         StoreStreamClob ssClob = new StoreStreamClob(
0:                 dvd.getStream(), (EmbedResultSet)rs);
1:         Reader reader = ssClob.getInternalReader(1);
1:         assertEquals('a', reader.read());
1:         // Get internal readers and do stuff.
1:         checkInternalStream(1, ssClob); // Get first character.
1:         checkInternalStream(26, ssClob); // Skip forwards inside buffer.
1:         checkInternalStream(17003, ssClob); // Skip forwards, refill buffer.
1:         checkInternalStream(size, ssClob); // Skip until end.
1:         assertEquals(-1, reader.read());
1:         checkInternalStream(10, ssClob); // Rewind and refill buffer.
1:         try {
1:             checkInternalStream(size*2, ssClob); // Should fail, invalid pos.
1:             fail("Should have failed due to invalid position");
1:         } catch (EOFException eofe) {
1:             // As expected, do nothing.
1:         }
1:     }
1: 
1:     /**
1:      * Tests repositioning withing the buffer.
1:      */
1:     public void testRepositioningWithinBuffer()
1:             throws IOException, SQLException, StandardException {
1:         setAutoCommit(false);
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 "select * from Utf8ReaderTest where id = 100");
1:         rs.next();
0:         DataValueDescriptor dvd = ((EmbedResultSet)rs).getColumn(3);
1:         StoreStreamClob ssClob = new StoreStreamClob(
0:                 dvd.getStream(), (EmbedResultSet)rs);
1:         Reader reader = ssClob.getInternalReader(1);
1:         assertEquals('a', reader.read());
1:         int bufSize = 26000;
1:         char[] buf = new char[bufSize];
1:         int count = 0;
1:         while (count < bufSize) {
1:             count += reader.read(buf, count, bufSize - count);
1:         }
1:         // We have now read 26001 chars. Next char should be 'b'.
1:         // Internal buffer size after the singel read below should be:
1:         // 26002 % 8192 = 1426
1:         assertEquals('b', reader.read());
1:         reader.close();
1:         // Get internal readers and do stuff.
1:         checkInternalStream(26002, ssClob);
1:         checkInternalStream(26001, ssClob);
1:         checkInternalStream(26002-1426+1, ssClob); // First char in buffer
1:         checkInternalStream(26001+(8192-1426+1), ssClob); // Last char in buffer
1:         checkInternalStream(26002-1426, ssClob); // Requires reset
1:         checkInternalStream(26002-1426+1, ssClob); // Requires refilling buffer
1:         checkInternalStream(26002, ssClob);
1:         checkInternalStream(1, ssClob);
1:     }
1: 
1:     /**
1:      * Tests repositioning withing buffer with a "real text" to make sure the
1:      * correct values are returned.
1:      */
1:     public void testRepositioningWithinBufferRealText()
1:             throws IOException, SQLException, StandardException {
1:         setAutoCommit(false);
1:         Statement stmt = createStatement();
1:         ResultSet rs = stmt.executeQuery(
1:                 // See insertTestData
1:                 "select * from Utf8ReaderTest where id = 1");
1:         rs.next();
0:         DataValueDescriptor dvd = ((EmbedResultSet)rs).getColumn(3);
1:         StoreStreamClob ssClob = new StoreStreamClob(
0:                 dvd.getStream(), (EmbedResultSet)rs);
1:         Reader reader = ssClob.getInternalReader(1);
1:         assertEquals('B', reader.read());
1:         reader = ssClob.getInternalReader(24);
1:         assertEquals('\'', reader.read());
1:         reader = ssClob.getInternalReader(42);
1:         assertEquals('H', reader.read());
1:         reader = ssClob.getInternalReader(70);
1:         assertEquals('M', reader.read());
1:         reader = ssClob.getInternalReader(102);
1:         assertEquals('M', reader.read());
1:         reader = ssClob.getInternalReader(128);
1:         assertEquals('B', reader.read());
1:         reader = ssClob.getInternalReader(155);
1:         assertEquals('A', reader.read());
1:         reader = ssClob.getInternalReader(184);
1:         assertEquals('S', reader.read());
1:         reader = ssClob.getInternalReader(207);
1:         assertEquals('H', reader.read());
1:         reader = ssClob.getInternalReader(224);
1:         assertEquals('O', reader.read());
1:         reader = ssClob.getInternalReader(128);
1:         char[] buf = new char[4];
1:         assertEquals(4, reader.read(buf));
1:         assertEquals("But ", new String(buf));
1:         reader = ssClob.getInternalReader(70);
1:         buf = new char[32];
1:         assertEquals(32, reader.read(buf));
1:         assertEquals("Men the grocer and butcher sent\n", new String(buf));
1:     }
1: 
1:     /**
1:      * Makes sure the data returned from the internal Clob matches the data
1:      * returned by a fresh looping alphabet stream.
1:      *
1:      * @param pos 1-based Clob position
1:      * @param clob internal store stream Clob representation
1:      */
1:     private static void checkInternalStream(long pos, StoreStreamClob clob)
1:             throws IOException, SQLException {
1:         Reader canonStream = new LoopingAlphabetReader(pos + 100);
1:         long toSkip = pos -1; // Convert to 0-based index.
1:         while (toSkip > 0) {
1:             long skipped = canonStream.skip(toSkip);
1:             if (skipped > 0) {
1:                 toSkip -= skipped;
1:             }
1:         }
1:         Reader clobStream = clob.getInternalReader(pos);
1:         assertEquals("Data mismatch", canonStream.read(), clobStream.read());
1:         clobStream.close();
1:     }
1: 
1:     /**
1:      * Returns a simple test suite, using the embedded driver only.
1:      *
1:      * @return A test suite.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite(UTF8ReaderTest.class);
1:         return new CleanDatabaseTestSetup(suite) {
1:             public void decorateSQL(Statement stmt)
1:                     throws SQLException {
1:                 insertTestData(stmt);
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * Inserts data used by the tests.
1:      * <p>
1:      * Use the id to select a Clob with specific contents.
1:      */
1:     private static void insertTestData(Statement stmt)
1:             throws SQLException {
1:         int[][] sizes = new int[][] {
1:                             {100, 1*1024*1024},        // 1M chars
1:                             {101, 32*1024},            // 32K chars
1:             };
1:         stmt.executeUpdate(
1:                 "create table Utf8ReaderTest" +
1:                 "(id int primary key, size int, dClob clob)");
1:         PreparedStatement ps = stmt.getConnection().prepareStatement(
1:                 "insert into Utf8ReaderTest values (?,?,?)");
1:         for (int i=0; i < sizes.length; i++) {
1:             ps.setInt(1, sizes[i][0]);
1:             int size = sizes[i][1];
1:             ps.setInt(2, size);
1:             ps.setCharacterStream(3, new LoopingAlphabetReader(size), size);
1:             ps.executeUpdate();
1:         }
1:         
1:         // Insert some special pieces of text, repeat to get it represented as
1:         // a stream.
1:         ps.setInt(1, 1);
1:         int size = aintWeGotFun.length();
1:         ps.setInt(2, size);
1:         StringBuffer str = new StringBuffer(32*1024 + aintWeGotFun.length());
1:         while (str.length() < 32*1024) {
1:             str.append(aintWeGotFun);
1:         }
1:         ps.setString(3, str.toString());
1:         ps.executeUpdate();
1:     }
1: 
1:     /**
1:      * Test data, first part of "Ain't We Got Fun?" (public domain).
1:      * See http://en.wikipedia.org/wiki/Ain%27t_We_Got_Fun%3F
1:      */
1:     public static final String aintWeGotFun =
1:             // 1-based positions for the first and the last character on line.
1:             "Bill collectors gather\n" + // 1
1:             "'Round and rather\n" + // 24
1:             "Haunt the cottage next door\n" + // 42
1:             "Men the grocer and butcher sent\n" + // 70
1:             "Men who call for the rent\n" + // 102
1:             "But with in a happy chappy\n" + // 128
1:             "And his bride of only a year\n" + // 155
1:             "Seem to be so cheerful\n" + // 184
1:             "Here's an earful\n" + // 207
1:             "Of the chatter you hear\n"; // 224
1: 
1:     /*
1:         // Code that can be used to check the positions in the text.
1:         String[] firstWords = new String[] {"Bill", "'Round", "Haunt", "Men th",
1:             "Men wh", "But", "And", "Seem", "Here's", "Of"};
1:         for (int i=0; i < firstWords.length; i++) {
1:             System.out.println("> " + firstWords[i]);
1:             int clobPos = (int)clob.position(firstWords[i], 1);
1:             int strPos = aintWeGotFun.indexOf(firstWords[i]);
1:             System.out.println("\tClob: " + clobPos);
1:             System.out.println("\tString: " + strPos);
1:             assertTrue(clobPos == strPos +1);
1:         }
1:     */
1: }
============================================================================