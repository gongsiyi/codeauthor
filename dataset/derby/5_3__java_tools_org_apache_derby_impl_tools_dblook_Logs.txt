2:eac0369: /*
1:985fc85: 
1:3abc7d4:    Derby - Class org.apache.derby.impl.tools.dblook.Logs
1:985fc85: 
1:20cdca3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:20cdca3:    contributor license agreements.  See the NOTICE file distributed with
1:20cdca3:    this work for additional information regarding copyright ownership.
1:20cdca3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:20cdca3:    (the "License"); you may not use this file except in compliance with
1:20cdca3:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
4:eac0369: 
3:eac0369:  */
1:eac0369: 
1:3abc7d4: package org.apache.derby.impl.tools.dblook;
1:eac0369: 
1:eac0369: import java.io.PrintWriter;
1:eac0369: import java.io.FileOutputStream;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.sql.SQLException;
1:eac0369: import org.apache.derby.tools.dblook;
1:eac0369: 
1:eac0369: public class Logs {
1:eac0369: 
1:eac0369: 	// Log file (for errors/warnings).
1:eac0369: 	private static PrintWriter logFile = null;
1:eac0369: 
1:eac0369: 	// User-specified output file.
1:eac0369: 	private static PrintWriter ddlFile = null;
1:eac0369: 
1:eac0369: 	// Statement delimiter.
1:eac0369: 	private static String stmtEnd;
1:eac0369: 
1:eac0369: 	// Verbose mode?
1:eac0369: 	private static boolean verbose;
1:eac0369: 
1:eac0369: 	// Did we write at least one message to the dblook file?
1:eac0369: 	private static boolean atLeastOneDebug;
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * initLogs:
1:eac0369: 	 * Prepare output streams and initialize state for
1:eac0369: 	 * handling dblook output.
1:eac0369: 	 * @param logFileName File for errors/warnings.
1:eac0369: 	 * @param ddlFileName File for generated DDL.
1:eac0369: 	 * @param appendLogs Whether or not to append to existing
1:eac0369: 	 *   log and ddl files.
1:eac0369: 	 * @param doVerbose verbose mode
1:eac0369: 	 * @param endOfStmt Statement delimiter.
1:eac0369: 	 * @return true if all state is initialized successfully;
1:eac0369: 	 *  false otherwise.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static boolean initLogs(String logFileName, String ddlFileName,
1:eac0369: 			boolean appendLogs, boolean doVerbose, String endOfStmt)
1:eac0369: 	{
1:eac0369: 		try {
1:eac0369: 
1:eac0369: 			logFile = new PrintWriter(new FileOutputStream(logFileName, appendLogs));
1:97cb351: 			ddlFile = (ddlFileName == null) ? null
1:97cb351: 					: new PrintWriter(new FileOutputStream(ddlFileName, appendLogs));
1:eac0369: 			verbose = doVerbose;
1:eac0369: 			stmtEnd = endOfStmt;
1:eac0369: 			atLeastOneDebug = false;
1:eac0369: 		}
1:eac0369: 		catch (IOException ioe)
1:eac0369: 		{
1:eac0369: 			System.out.println("Error initializing log file(s): " + ioe);
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Method to report status info to the end-user.
1:eac0369: 	 * This information will be printed as SQL script
1:eac0369: 	 * comments, which means the messages must be
1:eac0369: 	 * preceded by a "--".  If the user specified a
1:eac0369: 	 * DDL file, then the message will be printed to
1:eac0369: 	 * that file; otherwise, it will be printed to
1:eac0369: 	 * the console.
1:eac0369: 	 * @param msg the information to print out.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void report(String msg) {
1:eac0369: 
1:eac0369: 		if (ddlFile == null)
1:eac0369: 			System.out.println("-- " + msg);
1:eac0369: 		else
1:eac0369: 			ddlFile.println("-- " + msg);
1:eac0369: 
1:eac0369: 		return;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Report a specific string to output.
1:eac0369: 	 * @param str The string to report.
1:eac0369: 	 ****/
1:eac0369:  
1:eac0369: 	public static void reportString(String str) {
1:eac0369: 		report(str);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Report a localized message to output.
1:eac0369: 	 * @param key Key for the message to report.
1:eac0369: 	 ****/
1:eac0369:  
1:eac0369: 	public static void reportMessage(String key) {
1:eac0369: 		reportMessage(key, (String[])null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Report a localized message to output,
1:eac0369: 	 * substituting the received value where
1:eac0369: 	 * appropriate.
1:eac0369: 	 * @param key Key for the message to report.
1:eac0369: 	 * @param value Value to be inserted into the
1:eac0369: 	 *   message at the {0} marker.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void reportMessage(String key,
1:eac0369: 		String value) {
1:eac0369: 		reportMessage(key, new String [] {value});
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Report a localized message to output,
1:eac0369: 	 * substituting the received values where
1:eac0369: 	 * appropriate.
1:eac0369: 	 * @param key Key for the message to report.
1:eac0369: 	 * @param values Array of Value to be inserted
1:eac0369: 	 *   into the message at the {0}, {1}, etc markers.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void reportMessage(String key,
1:eac0369: 		String [] values) {
1:eac0369: 
1:eac0369: 		String msg = dblook.lookupMessage(key, values);
1:eac0369: 		report(msg);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Prints the received exception to the log
1:eac0369: 	 * file and, if the use has specified "verbose",
1:eac0369: 	 * the screen as well.
1:eac0369: 	 * @param e The exception to be printed.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void debug(Exception e) {
1:eac0369: 
1:eac0369: 		e.printStackTrace(logFile);
1:eac0369: 		if (verbose)
1:eac0369: 			e.printStackTrace(System.err);
1:eac0369: 		atLeastOneDebug = true;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Prints the message for the received key to the log
1:eac0369: 	 * log file and, if the use has specified "verbose",
1:eac0369: 	 * the screen as well.
1:eac0369: 	 * @param key Key for the message to be printed.
1:eac0369: 	 * @param value Value to be substituted into the
1:eac0369: 	 *   message.
1:eac0369: 	 ****/
1:eac0369: 	
1:eac0369: 	public static void debug(String key,
1:eac0369: 		String value)
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		String msg = key;
1:eac0369: 		if (value != null) {
1:eac0369: 			msg = dblook.lookupMessage(key,
1:eac0369: 				new String [] {value});
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		logFile.println("-- **--> DEBUG: " + msg);
1:eac0369: 		if (verbose)
1:eac0369: 			System.err.println("-- **--> DEBUG: " + msg);
1:eac0369: 		atLeastOneDebug = true;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Prints the message for the received key to the log
1:eac0369: 	 * log file and, if the use has specified "verbose",
1:eac0369: 	 * the screen as well.
1:eac0369: 	 * @param key Key for the message to be printed.
1:eac0369: 	 * @param value Value to be substituted into the
1:eac0369: 	 *   message.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void debug(String key,
1:eac0369: 		String [] values)
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		String msg = key;
1:eac0369: 		if (values != null) {
1:eac0369: 			msg = dblook.lookupMessage(key, values);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		logFile.println("-- **--> DEBUG: " + msg);
1:eac0369: 		if (verbose)
1:eac0369: 			System.err.println("-- **--> DEBUG: " + msg);
1:eac0369: 		atLeastOneDebug = true;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Recursive method to unroll a chains of SQL exceptions.
1:eac0369: 	 * @param sqlE The SQL exception to unroll.
1:eac0369: 	 * @return A string representing the unrolled exception
1:eac0369: 	 *  is returned.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static String unRollExceptions(SQLException sqlE) {
1:eac0369: 
1:eac0369: 		String rv = sqlE.getMessage() + "\n";
1:eac0369: 		if (sqlE.getNextException() != null) 
1:eac0369: 			return rv + unRollExceptions(sqlE.getNextException());
1:eac0369: 		else
1:eac0369: 			return rv;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Write a string (piece of an SQL command) to
1:eac0369: 	 * the output DDL file.
1:eac0369: 	 * @param sql The string to write.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void writeToNewDDL(String sql) {
1:eac0369: 
1:eac0369: 		if (ddlFile == null)
1:eac0369: 			System.out.print(sql);
1:eac0369: 		else
1:eac0369: 			ddlFile.print(sql);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Write the user-given statement delimiter to
1:eac0369: 	 * the output DDL file, followed by a newline.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void writeStmtEndToNewDDL() {
1:eac0369: 
1:eac0369: 		if (ddlFile == null)
1:eac0369: 			System.out.println(stmtEnd);
1:eac0369: 		else
1:eac0369: 			ddlFile.println(stmtEnd);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Write a newline character to the output DDL
1:eac0369: 	 * file, followed by a newline.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static void writeNewlineToNewDDL() {
1:eac0369: 
1:eac0369: 		if (ddlFile == null)
1:eac0369: 			System.out.println();
1:eac0369: 		else
1:eac0369: 			ddlFile.println();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* **********************************************
1:eac0369: 	 * Close output streams and, if at least one
1:eac0369: 	 * message was printed to the log file, let
1:eac0369: 	 * the user know.
1:eac0369: 	 * @return true if all streams were closed
1:eac0369: 	 *  successfully; false otherwise.
1:eac0369: 	 ****/
1:eac0369: 
1:eac0369: 	public static boolean cleanup() {
1:eac0369: 
1:eac0369: 		try {
1:eac0369: 			if (atLeastOneDebug)
1:eac0369: 				dblook.writeVerboseOutput(
1:19c10b5: 					"DBLOOK_AtLeastOneDebug", null);
1:eac0369: 			logFile.close();
1:eac0369: 			if (ddlFile != null)
1:eac0369: 				ddlFile.close();
1:eac0369: 			
1:eac0369: 		}
1:eac0369: 		catch (Exception e) {
1:eac0369: 			System.out.println("Error releasing resources: " + e);
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:David Van Couvering
-------------------------------------------------------------------------------
commit:20cdca3
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:97cb351
/////////////////////////////////////////////////////////////////////////
1: 			ddlFile = (ddlFileName == null) ? null
1: 					: new PrintWriter(new FileOutputStream(ddlFileName, appendLogs));
commit:19c10b5
/////////////////////////////////////////////////////////////////////////
1: 					"DBLOOK_AtLeastOneDebug", null);
commit:3abc7d4
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.dblook.Logs
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.tools.dblook;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derby.impl.tools.cslook.Logs
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.impl.tools.cslook;
1: 
1: import java.io.PrintWriter;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: 
1: import java.sql.SQLException;
1: import org.apache.derby.tools.dblook;
1: 
1: public class Logs {
1: 
1: 	/* 
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 	// Log file (for errors/warnings).
1: 	private static PrintWriter logFile = null;
1: 
1: 	// User-specified output file.
1: 	private static PrintWriter ddlFile = null;
1: 
1: 	// Statement delimiter.
1: 	private static String stmtEnd;
1: 
1: 	// Verbose mode?
1: 	private static boolean verbose;
1: 
1: 	// Did we write at least one message to the dblook file?
1: 	private static boolean atLeastOneDebug;
1: 
1: 	/* **********************************************
1: 	 * initLogs:
1: 	 * Prepare output streams and initialize state for
1: 	 * handling dblook output.
1: 	 * @param logFileName File for errors/warnings.
1: 	 * @param ddlFileName File for generated DDL.
1: 	 * @param appendLogs Whether or not to append to existing
1: 	 *   log and ddl files.
1: 	 * @param doVerbose verbose mode
1: 	 * @param endOfStmt Statement delimiter.
1: 	 * @return true if all state is initialized successfully;
1: 	 *  false otherwise.
1: 	 ****/
1: 
1: 	public static boolean initLogs(String logFileName, String ddlFileName,
1: 			boolean appendLogs, boolean doVerbose, String endOfStmt)
1: 	{
1: 		try {
1: 
1: 			logFile = new PrintWriter(new FileOutputStream(logFileName, appendLogs));
0: 			if (ddlFileName != null)
0: 				ddlFile = new PrintWriter(new FileOutputStream(ddlFileName, appendLogs));
1: 			verbose = doVerbose;
1: 			stmtEnd = endOfStmt;
1: 			atLeastOneDebug = false;
1: 		}
1: 		catch (IOException ioe)
1: 		{
1: 			System.out.println("Error initializing log file(s): " + ioe);
1: 			return false;
1: 		}
1: 
1: 		return true;
1: 
1: 	}
1: 
1: 
1: 	/* **********************************************
1: 	 * Method to report status info to the end-user.
1: 	 * This information will be printed as SQL script
1: 	 * comments, which means the messages must be
1: 	 * preceded by a "--".  If the user specified a
1: 	 * DDL file, then the message will be printed to
1: 	 * that file; otherwise, it will be printed to
1: 	 * the console.
1: 	 * @param msg the information to print out.
1: 	 ****/
1: 
1: 	public static void report(String msg) {
1: 
1: 		if (ddlFile == null)
1: 			System.out.println("-- " + msg);
1: 		else
1: 			ddlFile.println("-- " + msg);
1: 
1: 		return;
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Report a specific string to output.
1: 	 * @param str The string to report.
1: 	 ****/
1:  
1: 	public static void reportString(String str) {
1: 		report(str);
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Report a localized message to output.
1: 	 * @param key Key for the message to report.
1: 	 ****/
1:  
1: 	public static void reportMessage(String key) {
1: 		reportMessage(key, (String[])null);
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Report a localized message to output,
1: 	 * substituting the received value where
1: 	 * appropriate.
1: 	 * @param key Key for the message to report.
1: 	 * @param value Value to be inserted into the
1: 	 *   message at the {0} marker.
1: 	 ****/
1: 
1: 	public static void reportMessage(String key,
1: 		String value) {
1: 		reportMessage(key, new String [] {value});
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Report a localized message to output,
1: 	 * substituting the received values where
1: 	 * appropriate.
1: 	 * @param key Key for the message to report.
1: 	 * @param values Array of Value to be inserted
1: 	 *   into the message at the {0}, {1}, etc markers.
1: 	 ****/
1: 
1: 	public static void reportMessage(String key,
1: 		String [] values) {
1: 
1: 		String msg = dblook.lookupMessage(key, values);
1: 		report(msg);
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Prints the received exception to the log
1: 	 * file and, if the use has specified "verbose",
1: 	 * the screen as well.
1: 	 * @param e The exception to be printed.
1: 	 ****/
1: 
1: 	public static void debug(Exception e) {
1: 
1: 		e.printStackTrace(logFile);
1: 		if (verbose)
1: 			e.printStackTrace(System.err);
1: 		atLeastOneDebug = true;
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Prints the message for the received key to the log
1: 	 * log file and, if the use has specified "verbose",
1: 	 * the screen as well.
1: 	 * @param key Key for the message to be printed.
1: 	 * @param value Value to be substituted into the
1: 	 *   message.
1: 	 ****/
1: 	
1: 	public static void debug(String key,
1: 		String value)
1: 	{
1: 
1: 		String msg = key;
1: 		if (value != null) {
1: 			msg = dblook.lookupMessage(key,
1: 				new String [] {value});
1: 		}
1: 
1: 		logFile.println("-- **--> DEBUG: " + msg);
1: 		if (verbose)
1: 			System.err.println("-- **--> DEBUG: " + msg);
1: 		atLeastOneDebug = true;
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Prints the message for the received key to the log
1: 	 * log file and, if the use has specified "verbose",
1: 	 * the screen as well.
1: 	 * @param key Key for the message to be printed.
1: 	 * @param value Value to be substituted into the
1: 	 *   message.
1: 	 ****/
1: 
1: 	public static void debug(String key,
1: 		String [] values)
1: 	{
1: 
1: 		String msg = key;
1: 		if (values != null) {
1: 			msg = dblook.lookupMessage(key, values);
1: 		}
1: 
1: 		logFile.println("-- **--> DEBUG: " + msg);
1: 		if (verbose)
1: 			System.err.println("-- **--> DEBUG: " + msg);
1: 		atLeastOneDebug = true;
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Recursive method to unroll a chains of SQL exceptions.
1: 	 * @param sqlE The SQL exception to unroll.
1: 	 * @return A string representing the unrolled exception
1: 	 *  is returned.
1: 	 ****/
1: 
1: 	public static String unRollExceptions(SQLException sqlE) {
1: 
1: 		String rv = sqlE.getMessage() + "\n";
1: 		if (sqlE.getNextException() != null) 
1: 			return rv + unRollExceptions(sqlE.getNextException());
1: 		else
1: 			return rv;
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Write a string (piece of an SQL command) to
1: 	 * the output DDL file.
1: 	 * @param sql The string to write.
1: 	 ****/
1: 
1: 	public static void writeToNewDDL(String sql) {
1: 
1: 		if (ddlFile == null)
1: 			System.out.print(sql);
1: 		else
1: 			ddlFile.print(sql);
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Write the user-given statement delimiter to
1: 	 * the output DDL file, followed by a newline.
1: 	 ****/
1: 
1: 	public static void writeStmtEndToNewDDL() {
1: 
1: 		if (ddlFile == null)
1: 			System.out.println(stmtEnd);
1: 		else
1: 			ddlFile.println(stmtEnd);
1: 
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Write a newline character to the output DDL
1: 	 * file, followed by a newline.
1: 	 ****/
1: 
1: 	public static void writeNewlineToNewDDL() {
1: 
1: 		if (ddlFile == null)
1: 			System.out.println();
1: 		else
1: 			ddlFile.println();
1: 	}
1: 
1: 	/* **********************************************
1: 	 * Close output streams and, if at least one
1: 	 * message was printed to the log file, let
1: 	 * the user know.
1: 	 * @return true if all streams were closed
1: 	 *  successfully; false otherwise.
1: 	 ****/
1: 
1: 	public static boolean cleanup() {
1: 
1: 		try {
1: 			if (atLeastOneDebug)
1: 				dblook.writeVerboseOutput(
0: 					"CSLOOK_AtLeastOneDebug", null);
1: 			logFile.close();
1: 			if (ddlFile != null)
1: 				ddlFile.close();
1: 			
1: 		}
1: 		catch (Exception e) {
1: 			System.out.println("Error releasing resources: " + e);
1: 			return false;
1: 		}
1: 
1: 		return true;
1: 
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.cslook;
0: 
0: import java.io.PrintWriter;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: 
0: import java.sql.SQLException;
0: import org.apache.derby.tools.dblook;
0: 
0: public class Logs {
0: 
0: 	/* 
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 	// Log file (for errors/warnings).
0: 	private static PrintWriter logFile = null;
0: 
0: 	// User-specified output file.
0: 	private static PrintWriter ddlFile = null;
0: 
0: 	// Statement delimiter.
0: 	private static String stmtEnd;
0: 
0: 	// Verbose mode?
0: 	private static boolean verbose;
0: 
0: 	// Did we write at least one message to the dblook file?
0: 	private static boolean atLeastOneDebug;
0: 
0: 	/* **********************************************
0: 	 * initLogs:
0: 	 * Prepare output streams and initialize state for
0: 	 * handling dblook output.
0: 	 * @param logFileName File for errors/warnings.
0: 	 * @param ddlFileName File for generated DDL.
0: 	 * @param appendLogs Whether or not to append to existing
0: 	 *   log and ddl files.
0: 	 * @param doVerbose verbose mode
0: 	 * @param endOfStmt Statement delimiter.
0: 	 * @return true if all state is initialized successfully;
0: 	 *  false otherwise.
0: 	 ****/
0: 
0: 	public static boolean initLogs(String logFileName, String ddlFileName,
0: 			boolean appendLogs, boolean doVerbose, String endOfStmt)
0: 	{
0: 		try {
0: 
0: 			logFile = new PrintWriter(new FileOutputStream(logFileName, appendLogs));
0: 			if (ddlFileName != null)
0: 				ddlFile = new PrintWriter(new FileOutputStream(ddlFileName, appendLogs));
0: 			verbose = doVerbose;
0: 			stmtEnd = endOfStmt;
0: 			atLeastOneDebug = false;
0: 		}
0: 		catch (IOException ioe)
0: 		{
0: 			System.out.println("Error initializing log file(s): " + ioe);
0: 			return false;
0: 		}
0: 
0: 		return true;
0: 
0: 	}
0: 
0: 
0: 	/* **********************************************
0: 	 * Method to report status info to the end-user.
0: 	 * This information will be printed as SQL script
0: 	 * comments, which means the messages must be
0: 	 * preceded by a "--".  If the user specified a
0: 	 * DDL file, then the message will be printed to
0: 	 * that file; otherwise, it will be printed to
0: 	 * the console.
0: 	 * @param msg the information to print out.
0: 	 ****/
0: 
0: 	public static void report(String msg) {
0: 
0: 		if (ddlFile == null)
0: 			System.out.println("-- " + msg);
0: 		else
0: 			ddlFile.println("-- " + msg);
0: 
0: 		return;
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Report a specific string to output.
0: 	 * @param str The string to report.
0: 	 ****/
0:  
0: 	public static void reportString(String str) {
0: 		report(str);
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Report a localized message to output.
0: 	 * @param key Key for the message to report.
0: 	 ****/
0:  
0: 	public static void reportMessage(String key) {
0: 		reportMessage(key, (String[])null);
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Report a localized message to output,
0: 	 * substituting the received value where
0: 	 * appropriate.
0: 	 * @param key Key for the message to report.
0: 	 * @param value Value to be inserted into the
0: 	 *   message at the {0} marker.
0: 	 ****/
0: 
0: 	public static void reportMessage(String key,
0: 		String value) {
0: 		reportMessage(key, new String [] {value});
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Report a localized message to output,
0: 	 * substituting the received values where
0: 	 * appropriate.
0: 	 * @param key Key for the message to report.
0: 	 * @param values Array of Value to be inserted
0: 	 *   into the message at the {0}, {1}, etc markers.
0: 	 ****/
0: 
0: 	public static void reportMessage(String key,
0: 		String [] values) {
0: 
0: 		String msg = dblook.lookupMessage(key, values);
0: 		report(msg);
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Prints the received exception to the log
0: 	 * file and, if the use has specified "verbose",
0: 	 * the screen as well.
0: 	 * @param e The exception to be printed.
0: 	 ****/
0: 
0: 	public static void debug(Exception e) {
0: 
0: 		e.printStackTrace(logFile);
0: 		if (verbose)
0: 			e.printStackTrace(System.err);
0: 		atLeastOneDebug = true;
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Prints the message for the received key to the log
0: 	 * log file and, if the use has specified "verbose",
0: 	 * the screen as well.
0: 	 * @param key Key for the message to be printed.
0: 	 * @param value Value to be substituted into the
0: 	 *   message.
0: 	 ****/
0: 	
0: 	public static void debug(String key,
0: 		String value)
0: 	{
0: 
0: 		String msg = key;
0: 		if (value != null) {
0: 			msg = dblook.lookupMessage(key,
0: 				new String [] {value});
0: 		}
0: 
0: 		logFile.println("-- **--> DEBUG: " + msg);
0: 		if (verbose)
0: 			System.err.println("-- **--> DEBUG: " + msg);
0: 		atLeastOneDebug = true;
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Prints the message for the received key to the log
0: 	 * log file and, if the use has specified "verbose",
0: 	 * the screen as well.
0: 	 * @param key Key for the message to be printed.
0: 	 * @param value Value to be substituted into the
0: 	 *   message.
0: 	 ****/
0: 
0: 	public static void debug(String key,
0: 		String [] values)
0: 	{
0: 
0: 		String msg = key;
0: 		if (values != null) {
0: 			msg = dblook.lookupMessage(key, values);
0: 		}
0: 
0: 		logFile.println("-- **--> DEBUG: " + msg);
0: 		if (verbose)
0: 			System.err.println("-- **--> DEBUG: " + msg);
0: 		atLeastOneDebug = true;
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Recursive method to unroll a chains of SQL exceptions.
0: 	 * @param sqlE The SQL exception to unroll.
0: 	 * @return A string representing the unrolled exception
0: 	 *  is returned.
0: 	 ****/
0: 
0: 	public static String unRollExceptions(SQLException sqlE) {
0: 
0: 		String rv = sqlE.getMessage() + "\n";
0: 		if (sqlE.getNextException() != null) 
0: 			return rv + unRollExceptions(sqlE.getNextException());
0: 		else
0: 			return rv;
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Write a string (piece of an SQL command) to
0: 	 * the output DDL file.
0: 	 * @param sql The string to write.
0: 	 ****/
0: 
0: 	public static void writeToNewDDL(String sql) {
0: 
0: 		if (ddlFile == null)
0: 			System.out.print(sql);
0: 		else
0: 			ddlFile.print(sql);
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Write the user-given statement delimiter to
0: 	 * the output DDL file, followed by a newline.
0: 	 ****/
0: 
0: 	public static void writeStmtEndToNewDDL() {
0: 
0: 		if (ddlFile == null)
0: 			System.out.println(stmtEnd);
0: 		else
0: 			ddlFile.println(stmtEnd);
0: 
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Write a newline character to the output DDL
0: 	 * file, followed by a newline.
0: 	 ****/
0: 
0: 	public static void writeNewlineToNewDDL() {
0: 
0: 		if (ddlFile == null)
0: 			System.out.println();
0: 		else
0: 			ddlFile.println();
0: 	}
0: 
0: 	/* **********************************************
0: 	 * Close output streams and, if at least one
0: 	 * message was printed to the log file, let
0: 	 * the user know.
0: 	 * @return true if all streams were closed
0: 	 *  successfully; false otherwise.
0: 	 ****/
0: 
0: 	public static boolean cleanup() {
0: 
0: 		try {
0: 			if (atLeastOneDebug)
0: 				dblook.writeVerboseOutput(
0: 					"CSLOOK_AtLeastOneDebug", null);
0: 			logFile.close();
0: 			if (ddlFile != null)
0: 				ddlFile.close();
0: 			
0: 		}
0: 		catch (Exception e) {
0: 			System.out.println("Error releasing resources: " + e);
0: 			return false;
0: 		}
0: 
0: 		return true;
0: 
0: 	}
0: 
0: }
============================================================================