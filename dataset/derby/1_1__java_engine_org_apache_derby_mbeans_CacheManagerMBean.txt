1:86ee0a0: /*
1:86ee0a0: 
1:86ee0a0:    Derby - Class org.apache.derby.mbeans.CacheManagerMBean
1:86ee0a0: 
1:86ee0a0:    Licensed to the Apache Software Foundation (ASF) under one or more
1:86ee0a0:    contributor license agreements.  See the NOTICE file distributed with
1:86ee0a0:    this work for additional information regarding copyright ownership.
1:86ee0a0:    The ASF licenses this file to you under the Apache License, Version 2.0
1:86ee0a0:    (the "License"); you may not use this file except in compliance with
1:86ee0a0:    the License.  You may obtain a copy of the License at
1:86ee0a0: 
1:86ee0a0:       http://www.apache.org/licenses/LICENSE-2.0
1:86ee0a0: 
1:86ee0a0:    Unless required by applicable law or agreed to in writing, software
1:86ee0a0:    distributed under the License is distributed on an "AS IS" BASIS,
1:86ee0a0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86ee0a0:    See the License for the specific language governing permissions and
1:86ee0a0:    limitations under the License.
1:86ee0a0: 
1:86ee0a0:  */
1:86ee0a0: 
1:86ee0a0: package org.apache.derby.mbeans;
1:86ee0a0: 
1:86ee0a0: /**
1:86ee0a0:  * This is an MBean that provides information about one of Derby's cache
1:86ee0a0:  * managers.
1:86ee0a0:  */
1:86ee0a0: public interface CacheManagerMBean {
1:86ee0a0:     /**
1:86ee0a0:      * Enable or disable collection of cache access counts. That is, whether
1:86ee0a0:      * or not each hit, miss and eviction should be counted. Enabling it might
1:86ee0a0:      * impose a small overhead on cache accesses, and might reduce the system
1:86ee0a0:      * performance. Access counts are disabled by default.
1:86ee0a0:      *
1:86ee0a0:      * @param collect {@code true} if access counts should be collected, or
1:86ee0a0:      *                {@code false} otherwise
1:86ee0a0:      * @see #getCollectAccessCounts()
1:86ee0a0:      * @see #getHitCount()
1:86ee0a0:      * @see #getMissCount()
1:86ee0a0:      * @see #getEvictionCount()
1:86ee0a0:      */
1:86ee0a0:     void setCollectAccessCounts(boolean collect);
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Check if collection of cache access counts is enabled.
1:86ee0a0:      *
1:86ee0a0:      * @return {@code true} if access counts are enabled,
1:86ee0a0:      *         {@code false} otherwise
1:86ee0a0:      * @see #setCollectAccessCounts(boolean)
1:86ee0a0:      */
1:86ee0a0:     boolean getCollectAccessCounts();
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Get the number of cache accesses where the requested object was
1:86ee0a0:      * already in the cache.
1:86ee0a0:      *
1:86ee0a0:      * @return the number of cache hits
1:86ee0a0:      */
1:86ee0a0:     long getHitCount();
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Get the number of cache accesses where the requested object was
1:86ee0a0:      * not already in the cache.
1:86ee0a0:      *
1:86ee0a0:      * @return the number of cache misses
1:86ee0a0:      */
1:86ee0a0:     long getMissCount();
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Get the number of cached objects that have been evicted from the
1:86ee0a0:      * cache in order to make room for other objects.
1:86ee0a0:      *
1:86ee0a0:      * @return the number of evicted objects
1:86ee0a0:      */
1:86ee0a0:     long getEvictionCount();
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Get the maximum number of entries that could be held by this cache.
1:86ee0a0:      *
1:86ee0a0:      * @return the maximum number of entries in the cache
1:86ee0a0:      */
1:86ee0a0:     long getMaxEntries();
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Get the number of entries currently allocated in the cache. This
1:86ee0a0:      * number includes entries for objects that have been removed from the
1:86ee0a0:      * cache, whose entries have not yet been reused for other objects.
1:86ee0a0:      *
1:86ee0a0:      * @return the number of entries in the cache
1:86ee0a0:      */
1:86ee0a0:     long getAllocatedEntries();
1:86ee0a0: 
1:86ee0a0:     /**
1:86ee0a0:      * Get the number of objects that are currently in the cache.
1:86ee0a0:      *
1:86ee0a0:      * @return the number of objects in the cache
1:86ee0a0:      */
1:86ee0a0:     long getUsedEntries();
1:86ee0a0: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:86ee0a0
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.mbeans.CacheManagerMBean
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.mbeans;
1: 
1: /**
1:  * This is an MBean that provides information about one of Derby's cache
1:  * managers.
1:  */
1: public interface CacheManagerMBean {
1:     /**
1:      * Enable or disable collection of cache access counts. That is, whether
1:      * or not each hit, miss and eviction should be counted. Enabling it might
1:      * impose a small overhead on cache accesses, and might reduce the system
1:      * performance. Access counts are disabled by default.
1:      *
1:      * @param collect {@code true} if access counts should be collected, or
1:      *                {@code false} otherwise
1:      * @see #getCollectAccessCounts()
1:      * @see #getHitCount()
1:      * @see #getMissCount()
1:      * @see #getEvictionCount()
1:      */
1:     void setCollectAccessCounts(boolean collect);
1: 
1:     /**
1:      * Check if collection of cache access counts is enabled.
1:      *
1:      * @return {@code true} if access counts are enabled,
1:      *         {@code false} otherwise
1:      * @see #setCollectAccessCounts(boolean)
1:      */
1:     boolean getCollectAccessCounts();
1: 
1:     /**
1:      * Get the number of cache accesses where the requested object was
1:      * already in the cache.
1:      *
1:      * @return the number of cache hits
1:      */
1:     long getHitCount();
1: 
1:     /**
1:      * Get the number of cache accesses where the requested object was
1:      * not already in the cache.
1:      *
1:      * @return the number of cache misses
1:      */
1:     long getMissCount();
1: 
1:     /**
1:      * Get the number of cached objects that have been evicted from the
1:      * cache in order to make room for other objects.
1:      *
1:      * @return the number of evicted objects
1:      */
1:     long getEvictionCount();
1: 
1:     /**
1:      * Get the maximum number of entries that could be held by this cache.
1:      *
1:      * @return the maximum number of entries in the cache
1:      */
1:     long getMaxEntries();
1: 
1:     /**
1:      * Get the number of entries currently allocated in the cache. This
1:      * number includes entries for objects that have been removed from the
1:      * cache, whose entries have not yet been reused for other objects.
1:      *
1:      * @return the number of entries in the cache
1:      */
1:     long getAllocatedEntries();
1: 
1:     /**
1:      * Get the number of objects that are currently in the cache.
1:      *
1:      * @return the number of objects in the cache
1:      */
1:     long getUsedEntries();
1: }
============================================================================