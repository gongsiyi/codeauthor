1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.BackingStoreHashTableFromScan
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException; 
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.store.access.RowSource;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: Extend BackingStoreHashtable with the ability to maintain the underlying 
1:eac0369: openScan() until the hashtable has been closed.  This is necessary for 
1:eac0369: long row access.  Access to long row delays actual objectification until
1:eac0369: the columns are accessed, but depends on the underlying table to be still
1:eac0369: open when the column is accessed.  
1:eac0369: 
1:eac0369: <P>
1:eac0369: Transactions are obtained from an AccessFactory.
1:eac0369: @see BackingStoreHashtable
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:eac0369: class BackingStoreHashTableFromScan extends BackingStoreHashtable
1:eac0369: {
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Fields of the class
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     private ScanManager             open_scan;
1:e81e52c:     private boolean                     includeRowLocations;
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Constructors for This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369:     public BackingStoreHashTableFromScan(
1:eac0369:         TransactionController   tc,
1:eac0369: 		long                    conglomId,
1:eac0369: 		int                     open_mode,
1:eac0369:         int                     lock_level,
1:eac0369:         int                     isolation_level,
1:eac0369: 		FormatableBitSet                 scanColumnList,
1:eac0369: 		DataValueDescriptor[]   startKeyValue,
1:eac0369: 		int                     startSearchOperator,
1:eac0369: 		Qualifier               qualifier[][],
1:eac0369: 		DataValueDescriptor[]   stopKeyValue,
1:eac0369: 		int                     stopSearchOperator,
1:eac0369:         long                    max_rowcnt,
1:eac0369:         int[]                   key_column_numbers,
1:eac0369:         boolean                 remove_duplicates,
1:eac0369:         long                    estimated_rowcnt,
1:eac0369:         long                    max_inmemory_rowcnt,
1:eac0369:         int                     initialCapacity,
1:eac0369:         float                   loadFactor,
1:eac0369:         boolean                 collect_runtimestats,
1:1e762f5: 		boolean					skipNullKeyColumns,
1:e81e52c:         boolean                 keepAfterCommit,
1:e81e52c:         boolean                 includeRowLocations )
1:eac0369:             throws StandardException
1:eac0369:     {
1:eac0369: 
1:eac0369:         super(
1:eac0369:             tc, 
1:eac0369:             (RowSource) null,
1:eac0369:             key_column_numbers,
1:eac0369:             remove_duplicates,
1:eac0369:             estimated_rowcnt,
1:eac0369:             max_inmemory_rowcnt,
1:eac0369:             initialCapacity,
1:eac0369:             loadFactor,
1:b223f72: 			skipNullKeyColumns,
1:1e762f5:             keepAfterCommit);
1:e81e52c:         this.includeRowLocations = includeRowLocations;
1:eac0369: 
1:eac0369:         open_scan =  (ScanManager)
1:eac0369:             tc.openScan(
1:eac0369:                 conglomId,
1:eac0369:                 false,
1:eac0369:                 open_mode,
1:eac0369:                 lock_level,
1:eac0369:                 isolation_level,
1:eac0369:                 scanColumnList,
1:eac0369:                 startKeyValue,
1:eac0369:                 startSearchOperator,
1:eac0369:                 qualifier,
1:eac0369:                 stopKeyValue,
1:eac0369:                 stopSearchOperator);
1:eac0369: 
1:eac0369:         open_scan.fetchSet(
1:eac0369:             max_rowcnt, key_column_numbers, this);
1:eac0369: 
1:eac0369:         if (collect_runtimestats)
1:eac0369:         {
1:eac0369:             Properties prop = new Properties();
1:eac0369:             open_scan.getScanInfo().getAllScanInfo(prop);
1:eac0369:             this.setAuxillaryRuntimeStats(prop);
1:eac0369:             prop = null;
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Private/Protected methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of This class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: 
1:e81e52c:     @Override
1:e81e52c:     public  boolean includeRowLocations() { return includeRowLocations; }
1:e81e52c: 
1:eac0369:     /**
1:eac0369:      * Close the BackingStoreHashtable.
1:eac0369:      * <p>
1:eac0369:      * Perform any necessary cleanup after finishing with the hashtable.  Will
1:eac0369:      * deallocate/dereference objects as necessary.  If the table has gone
1:eac0369:      * to disk this will drop any on disk files used to support the hash table.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void close() 
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         open_scan.close();
1:eac0369: 
1:eac0369:         super.close();
1:eac0369: 
1:eac0369:         return;
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**************************************************************************
1:eac0369:      * Public Methods of XXXX class:
1:eac0369:      **************************************************************************
1:eac0369:      */
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e81e52c
/////////////////////////////////////////////////////////////////////////
1:     private boolean                     includeRowLocations;
/////////////////////////////////////////////////////////////////////////
1:         boolean                 keepAfterCommit,
1:         boolean                 includeRowLocations )
/////////////////////////////////////////////////////////////////////////
1:         this.includeRowLocations = includeRowLocations;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public  boolean includeRowLocations() { return includeRowLocations; }
1: 
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1e762f5
/////////////////////////////////////////////////////////////////////////
1: 		boolean					skipNullKeyColumns,
0:         boolean                 keepAfterCommit)
/////////////////////////////////////////////////////////////////////////
1:             keepAfterCommit);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:fa09146
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:b223f72
/////////////////////////////////////////////////////////////////////////
1: 			skipNullKeyColumns,
0:             false /* Do not keep the hash table after a commit. */);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.BackingStoreHashTableFromScan
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.error.StandardException; 
1: 
1: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
1: 
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.store.access.RowSource;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 
1: Extend BackingStoreHashtable with the ability to maintain the underlying 
1: openScan() until the hashtable has been closed.  This is necessary for 
1: long row access.  Access to long row delays actual objectification until
1: the columns are accessed, but depends on the underlying table to be still
1: open when the column is accessed.  
1: 
1: <P>
1: Transactions are obtained from an AccessFactory.
1: @see BackingStoreHashtable
1: 
1: **/
1: 
1: class BackingStoreHashTableFromScan extends BackingStoreHashtable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1:     /**************************************************************************
1:      * Fields of the class
1:      **************************************************************************
1:      */
1:     private ScanManager             open_scan;
1: 
1:     /**************************************************************************
1:      * Constructors for This class:
1:      **************************************************************************
1:      */
1:     public BackingStoreHashTableFromScan(
1:         TransactionController   tc,
1: 		long                    conglomId,
1: 		int                     open_mode,
1:         int                     lock_level,
1:         int                     isolation_level,
1: 		FormatableBitSet                 scanColumnList,
1: 		DataValueDescriptor[]   startKeyValue,
1: 		int                     startSearchOperator,
1: 		Qualifier               qualifier[][],
1: 		DataValueDescriptor[]   stopKeyValue,
1: 		int                     stopSearchOperator,
1:         long                    max_rowcnt,
1:         int[]                   key_column_numbers,
1:         boolean                 remove_duplicates,
1:         long                    estimated_rowcnt,
1:         long                    max_inmemory_rowcnt,
1:         int                     initialCapacity,
1:         float                   loadFactor,
1:         boolean                 collect_runtimestats,
0: 		boolean					skipNullKeyColumns)
1:             throws StandardException
1:     {
1: 
1:         super(
1:             tc, 
1:             (RowSource) null,
1:             key_column_numbers,
1:             remove_duplicates,
1:             estimated_rowcnt,
1:             max_inmemory_rowcnt,
1:             initialCapacity,
1:             loadFactor,
0: 			skipNullKeyColumns);
1: 
1:         open_scan =  (ScanManager)
1:             tc.openScan(
1:                 conglomId,
1:                 false,
1:                 open_mode,
1:                 lock_level,
1:                 isolation_level,
1:                 scanColumnList,
1:                 startKeyValue,
1:                 startSearchOperator,
1:                 qualifier,
1:                 stopKeyValue,
1:                 stopSearchOperator);
1: 
1:         open_scan.fetchSet(
1:             max_rowcnt, key_column_numbers, this);
1: 
1:         if (collect_runtimestats)
1:         {
1:             Properties prop = new Properties();
1:             open_scan.getScanInfo().getAllScanInfo(prop);
1:             this.setAuxillaryRuntimeStats(prop);
1:             prop = null;
1:         }
1:     }
1: 
1: 
1:     /**************************************************************************
1:      * Private/Protected methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**************************************************************************
1:      * Public Methods of This class:
1:      **************************************************************************
1:      */
1: 
1:     /**
1:      * Close the BackingStoreHashtable.
1:      * <p>
1:      * Perform any necessary cleanup after finishing with the hashtable.  Will
1:      * deallocate/dereference objects as necessary.  If the table has gone
1:      * to disk this will drop any on disk files used to support the hash table.
1:      * <p>
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void close() 
1: 		throws StandardException
1:     {
1:         open_scan.close();
1: 
1:         super.close();
1: 
1:         return;
1:     }
1: 
1:     /**************************************************************************
1:      * Public Methods of XXXX class:
1:      **************************************************************************
1:      */
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException; 
0: 
0: import org.apache.derby.iapi.store.access.conglomerate.ScanManager;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.store.access.RowSource;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 
0: Extend BackingStoreHashtable with the ability to maintain the underlying 
0: openScan() until the hashtable has been closed.  This is necessary for 
0: long row access.  Access to long row delays actual objectification until
0: the columns are accessed, but depends on the underlying table to be still
0: open when the column is accessed.  
0: 
0: <P>
0: Transactions are obtained from an AccessFactory.
0: @see BackingStoreHashtable
0: 
0: **/
0: 
0: class BackingStoreHashTableFromScan extends BackingStoreHashtable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:  
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0:     /**************************************************************************
0:      * Fields of the class
0:      **************************************************************************
0:      */
0:     private ScanManager             open_scan;
0: 
0:     /**************************************************************************
0:      * Constructors for This class:
0:      **************************************************************************
0:      */
0:     public BackingStoreHashTableFromScan(
0:         TransactionController   tc,
0: 		long                    conglomId,
0: 		int                     open_mode,
0:         int                     lock_level,
0:         int                     isolation_level,
0: 		FormatableBitSet                 scanColumnList,
0: 		DataValueDescriptor[]   startKeyValue,
0: 		int                     startSearchOperator,
0: 		Qualifier               qualifier[][],
0: 		DataValueDescriptor[]   stopKeyValue,
0: 		int                     stopSearchOperator,
0:         long                    max_rowcnt,
0:         int[]                   key_column_numbers,
0:         boolean                 remove_duplicates,
0:         long                    estimated_rowcnt,
0:         long                    max_inmemory_rowcnt,
0:         int                     initialCapacity,
0:         float                   loadFactor,
0:         boolean                 collect_runtimestats,
0: 		boolean					skipNullKeyColumns)
0:             throws StandardException
0:     {
0: 
0:         super(
0:             tc, 
0:             (RowSource) null,
0:             key_column_numbers,
0:             remove_duplicates,
0:             estimated_rowcnt,
0:             max_inmemory_rowcnt,
0:             initialCapacity,
0:             loadFactor,
0: 			skipNullKeyColumns);
0: 
0:         open_scan =  (ScanManager)
0:             tc.openScan(
0:                 conglomId,
0:                 false,
0:                 open_mode,
0:                 lock_level,
0:                 isolation_level,
0:                 scanColumnList,
0:                 startKeyValue,
0:                 startSearchOperator,
0:                 qualifier,
0:                 stopKeyValue,
0:                 stopSearchOperator);
0: 
0:         open_scan.fetchSet(
0:             max_rowcnt, key_column_numbers, this);
0: 
0:         if (collect_runtimestats)
0:         {
0:             Properties prop = new Properties();
0:             open_scan.getScanInfo().getAllScanInfo(prop);
0:             this.setAuxillaryRuntimeStats(prop);
0:             prop = null;
0:         }
0:     }
0: 
0: 
0:     /**************************************************************************
0:      * Private/Protected methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**************************************************************************
0:      * Public Methods of This class:
0:      **************************************************************************
0:      */
0: 
0:     /**
0:      * Close the BackingStoreHashtable.
0:      * <p>
0:      * Perform any necessary cleanup after finishing with the hashtable.  Will
0:      * deallocate/dereference objects as necessary.  If the table has gone
0:      * to disk this will drop any on disk files used to support the hash table.
0:      * <p>
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void close() 
0: 		throws StandardException
0:     {
0:         open_scan.close();
0: 
0:         super.close();
0: 
0:         return;
0:     }
0: 
0:     /**************************************************************************
0:      * Public Methods of XXXX class:
0:      **************************************************************************
0:      */
0: }
============================================================================