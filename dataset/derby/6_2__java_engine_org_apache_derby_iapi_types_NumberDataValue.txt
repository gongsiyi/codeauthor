1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.types.NumberDataValue
1:7ecc1f2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
11:eac0369: 
10:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.types;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: public interface NumberDataValue extends DataValueDescriptor
1:eac0369: {
10:eac0369: 	/**
1:eac0369: 	 * The minimum scale when dividing Decimals
1:eac0369: 	 */
1:eac0369: 	public static final int MIN_DECIMAL_DIVIDE_SCALE = 4;
1:eac0369: 	public static final int MAX_DECIMAL_PRECISION_SCALE = 31;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The SQL + operator.
20:eac0369: 	 *
1:eac0369: 	 * @param addend1	One of the addends
1:eac0369: 	 * @param addend2	The other addend
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	The sum of the two addends
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1:509ccb9: 	 */
1:eac0369: 	public NumberDataValue plus(NumberDataValue addend1,
1:eac0369: 								NumberDataValue addend2,
1:eac0369: 								NumberDataValue result)
1:eac0369: 							throws StandardException;
1:509ccb9: 
1:509ccb9: 	/**
1:eac0369: 	 * The SQL - operator.
1:eac0369: 	 *
1:eac0369: 	 * @param left		The left operand
1:eac0369: 	 * @param right		The right operand
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	left - right
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1:509ccb9: 	 */
1:eac0369: 	public NumberDataValue minus(NumberDataValue left,
1:eac0369: 								 NumberDataValue right,
1:eac0369: 								NumberDataValue result)
1:eac0369: 							throws StandardException;
1:509ccb9: 
1:509ccb9: 	/**
1:eac0369: 	 * The SQL * operator.
1:eac0369: 	 *
1:eac0369: 	 * @param left		The left operand
1:eac0369: 	 * @param right		The right operand
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	left * right
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1:eac0369: 	 */
1:eac0369: 	public NumberDataValue times(NumberDataValue left,
1:eac0369: 								NumberDataValue right,
1:eac0369: 								NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The SQL / operator.
1:eac0369: 	 *
1:eac0369: 	 * @param dividend		The numerator
1:eac0369: 	 * @param divisor		The denominator
1:eac0369: 	 * @param result		The result of the previous call to this method, null
1:eac0369: 	 *						if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	dividend / divisor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1:eac0369: 	 */
1:eac0369: 	public NumberDataValue divide(NumberDataValue dividend,
1:eac0369: 								NumberDataValue divisor,
1:eac0369: 								NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The SQL / operator.
1:eac0369: 	 *
1:eac0369: 	 * @param dividend		The numerator
1:eac0369: 	 * @param divisor		The denominator
1:eac0369: 	 * @param result		The result of the previous call to this method, null
1:eac0369: 	 *						if not called yet.
1:eac0369: 	 * @param scale			The scale of the result, for decimal type.  If pass
1:dbed020: 	 *						in value &lt; 0, can calculate it dynamically.
1:eac0369: 	 *
1:eac0369: 	 * @return	dividend / divisor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1:eac0369: 	 */
1:eac0369: 	public NumberDataValue divide(NumberDataValue dividend,
1:eac0369: 								NumberDataValue divisor,
1:eac0369: 								NumberDataValue result,
1:eac0369: 								int scale)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The SQL mod operator.
1:eac0369: 	 *
1:eac0369: 	 * @param dividend		The numerator
1:eac0369: 	 * @param divisor		The denominator
1:eac0369: 	 * @param result		The result of the previous call to this method, null
1:eac0369: 	 *						if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	dividend / divisor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1:eac0369: 	 */
1:eac0369: 	public NumberDataValue mod(NumberDataValue dividend,
1:eac0369: 								NumberDataValue divisor,
1:eac0369: 								NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The SQL unary - operator.  Negates this NumberDataValue.
1:eac0369: 	 *
1:eac0369: 	 * @param result	The result of the previous call to this method, null
1:eac0369: 	 *					if not called yet.
1:eac0369: 	 *
1:eac0369: 	 * @return	- operand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1:eac0369: 	 */
1:eac0369: 	public NumberDataValue minus(NumberDataValue result)
1:eac0369: 							throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The SQL ABSOLUTE operator.  Absolute value of this NumberDataValue.
1:eac0369:      *
1:eac0369:      * @param result    The result of the previous call to this method, null
1:eac0369:      *                  if not called yet.
1:eac0369:      *
1:eac0369:      * @exception StandardException     Thrown on error, if result is non-null then its value will be unchanged.
1:eac0369:      */
1:eac0369:     public NumberDataValue absolute(NumberDataValue result)
1:eac0369:                             throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * The SQL SQRT operator.  Sqrt value of this NumberDataValue.
1:eac0369:      *
1:eac0369:      * @param result    The result of the previous call to this method, null
1:eac0369:      *                  if not call yet.
1:eac0369:      * 
1:eac0369:      * @exception StandardException     Thrown on error (a negative number), if result is non-null then its value will be unchanged.
1:eac0369:      */
1:eac0369:     public NumberDataValue sqrt(NumberDataValue result)
1:eac0369:                             throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:d7f7457: 	 * Set the value of this NumberDataValue to the given value.
1:d7f7457: 	   This is only intended to be called when mapping values from
1:d7f7457: 	   the Java space into the SQL space, e.g. parameters and return
1:d7f7457: 	   types from procedures and functions. Each specific type is only
1:d7f7457: 	   expected to handle the explicit type according the JDBC.
1:d7f7457: 	   <UL>
1:d7f7457: 	   <LI> SMALLINT from java.lang.Integer
1:d7f7457: 	   <LI> INTEGER from java.lang.Integer
1:d7f7457: 	   <LI> LONG from java.lang.Long
1:d7f7457: 	   <LI> FLOAT from java.lang.Float
1:d7f7457: 	   <LI> DOUBLE from java.lang.Double
1:d7f7457: 	   <LI> DECIMAL from java.math.BigDecimal
1:d7f7457: 	   </UL>
1:eac0369: 	 *
1:d7f7457: 	 * @param theValue	An Number containing the value to set this
6:eac0369: 	 *					NumberDataValue to.  Null means set the value
6:eac0369: 	 *					to SQL null.
1:eac0369: 	 *
1:eac0369: 	 */
1:d7f7457: 	public void setValue(Number theValue) throws StandardException;
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 *						in value &lt; 0, can calculate it dynamically.
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5465561
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1ccdf3e
/////////////////////////////////////////////////////////////////////////
0: 		Return the SQL precision of this specific DECIMAL value.
0: 		This does not match the return from BigDecimal.precision()
0: 		added in J2SE 5.0, which represents the precision of the unscaled value.
0: 		Return the SQL scale of this specific DECIMAL value.
0: 		This does not match the return from BigDecimal.scale()
0: 		since in J2SE 5.0 onwards that can return negative scales.
commit:d7f7457
/////////////////////////////////////////////////////////////////////////
1: 	 * Set the value of this NumberDataValue to the given value.
1: 	   This is only intended to be called when mapping values from
1: 	   the Java space into the SQL space, e.g. parameters and return
1: 	   types from procedures and functions. Each specific type is only
1: 	   expected to handle the explicit type according the JDBC.
1: 	   <UL>
1: 	   <LI> SMALLINT from java.lang.Integer
1: 	   <LI> INTEGER from java.lang.Integer
1: 	   <LI> LONG from java.lang.Long
1: 	   <LI> FLOAT from java.lang.Float
1: 	   <LI> DOUBLE from java.lang.Double
1: 	   <LI> DECIMAL from java.math.BigDecimal
1: 	   </UL>
1: 	 * @param theValue	An Number containing the value to set this
1: 	public void setValue(Number theValue) throws StandardException;
commit:509ccb9
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 		Return the precision of this specific DECIMAL value.
0: 		If the value does not represent a SQL DECIMAL then
0: 		the return is undefined.
1: 	*/
0: 	public int getDecimalValuePrecision();
1: 
1: 	/**
0: 		Return the scale of this specific DECIMAL value.
0: 		If the value does not represent a SQL DECIMAL then
0: 		the return is undefined.
1: 	*/
0: 	public int getDecimalValueScale();
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.types.NumberDataValue
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.types;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public interface NumberDataValue extends DataValueDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
1: 	 * The minimum scale when dividing Decimals
1: 	 */
1: 	public static final int MIN_DECIMAL_DIVIDE_SCALE = 4;
1: 	public static final int MAX_DECIMAL_PRECISION_SCALE = 31;
1: 
1: 	/**
1: 	 * The SQL + operator.
1: 	 *
1: 	 * @param addend1	One of the addends
1: 	 * @param addend2	The other addend
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	The sum of the two addends
1: 	 *
1: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1: 	 */
1: 	public NumberDataValue plus(NumberDataValue addend1,
1: 								NumberDataValue addend2,
1: 								NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * The SQL - operator.
1: 	 *
1: 	 * @param left		The left operand
1: 	 * @param right		The right operand
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	left - right
1: 	 *
1: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1: 	 */
1: 	public NumberDataValue minus(NumberDataValue left,
1: 								 NumberDataValue right,
1: 								NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * The SQL * operator.
1: 	 *
1: 	 * @param left		The left operand
1: 	 * @param right		The right operand
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	left * right
1: 	 *
1: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1: 	 */
1: 	public NumberDataValue times(NumberDataValue left,
1: 								NumberDataValue right,
1: 								NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * The SQL / operator.
1: 	 *
1: 	 * @param dividend		The numerator
1: 	 * @param divisor		The denominator
1: 	 * @param result		The result of the previous call to this method, null
1: 	 *						if not called yet.
1: 	 *
1: 	 * @return	dividend / divisor
1: 	 *
1: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1: 	 */
1: 	public NumberDataValue divide(NumberDataValue dividend,
1: 								NumberDataValue divisor,
1: 								NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * The SQL / operator.
1: 	 *
1: 	 * @param dividend		The numerator
1: 	 * @param divisor		The denominator
1: 	 * @param result		The result of the previous call to this method, null
1: 	 *						if not called yet.
1: 	 * @param scale			The scale of the result, for decimal type.  If pass
0: 	 *						in value < 0, can calculate it dynamically.
1: 	 *
1: 	 * @return	dividend / divisor
1: 	 *
1: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1: 	 */
1: 	public NumberDataValue divide(NumberDataValue dividend,
1: 								NumberDataValue divisor,
1: 								NumberDataValue result,
1: 								int scale)
1: 							throws StandardException;
1: 
1: 
1: 	/**
1: 	 * The SQL mod operator.
1: 	 *
1: 	 * @param dividend		The numerator
1: 	 * @param divisor		The denominator
1: 	 * @param result		The result of the previous call to this method, null
1: 	 *						if not called yet.
1: 	 *
1: 	 * @return	dividend / divisor
1: 	 *
1: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1: 	 */
1: 	public NumberDataValue mod(NumberDataValue dividend,
1: 								NumberDataValue divisor,
1: 								NumberDataValue result)
1: 							throws StandardException;
1: 
1: 	/**
1: 	 * The SQL unary - operator.  Negates this NumberDataValue.
1: 	 *
1: 	 * @param result	The result of the previous call to this method, null
1: 	 *					if not called yet.
1: 	 *
1: 	 * @return	- operand
1: 	 *
1: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
1: 	 */
1: 	public NumberDataValue minus(NumberDataValue result)
1: 							throws StandardException;
1: 
1:     /**
1:      * The SQL ABSOLUTE operator.  Absolute value of this NumberDataValue.
1:      *
1:      * @param result    The result of the previous call to this method, null
1:      *                  if not called yet.
1:      *
1:      * @exception StandardException     Thrown on error, if result is non-null then its value will be unchanged.
1:      */
1:     public NumberDataValue absolute(NumberDataValue result)
1:                             throws StandardException;
1: 
1:     /**
1:      * The SQL SQRT operator.  Sqrt value of this NumberDataValue.
1:      *
1:      * @param result    The result of the previous call to this method, null
1:      *                  if not call yet.
1:      * 
1:      * @exception StandardException     Thrown on error (a negative number), if result is non-null then its value will be unchanged.
1:      */
1:     public NumberDataValue sqrt(NumberDataValue result)
1:                             throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this NumberDataValue to the given int value
1: 	 *
0: 	 * @param theValue	An Integer containing the value to set this
1: 	 *					NumberDataValue to.  Null means set the value
1: 	 *					to SQL null.
1: 	 *
0: 	 * @return	This NumberDataValue
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Integer theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this NumberDataValue to the given double value
1: 	 *
0: 	 * @param theValue	A Double containing the value to set this
1: 	 *					NumberDataValue to.  Null means set the value
1: 	 *					to SQL null.
1: 	 *
0: 	 * @return	This NumberDataValue
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Double theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this NumberDataValue to the given float value
1: 	 *
0: 	 * @param theValue	A Float containing the value to set this
1: 	 *					NumberDataValue to.  Null means set the value
1: 	 *					to SQL null.
1: 	 *
0: 	 * @return	This NumberDataValue
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Float theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this NumberDataValue to the given short value
1: 	 *
0: 	 * @param theValue	A Short containing the value to set this
1: 	 *					NumberDataValue to.  Null means set the value
1: 	 *					to SQL null.
1: 	 *
0: 	 * @return	This NumberDataValue
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Short theValue) throws StandardException;
1: 
1: 
1: 	/**
0: 	 * Set the value of this NumberDataValue to the given long value
1: 	 *
0: 	 * @param theValue	A Long containing the value to set this
1: 	 *					NumberDataValue to.  Null means set the value
1: 	 *					to SQL null.
1: 	 *
0: 	 * @return	This NumberDataValue
1: 	 *
0: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void setValue(Long theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value of this NumberDataValue to the given byte value
1: 	 *
0: 	 * @param theValue	A Byte containing the value to set this
1: 	 *					NumberDataValue to.  Null means set the value
1: 	 *					to SQL null.
1: 	 *
0: 	 * @return	This NumberDataValue
1: 	 *
1: 	 */
0: 	public void setValue(Byte theValue) throws StandardException;
1: 
1: 	/**
0: 	 * Set the value.
1: 	 *
0: 	 * @param theValue	Contains the boolean value to set this to
1: 	 *
0: 	 * @return	This value
1: 	 *
1: 	 */
0: 	public void setValue(Boolean theValue) throws StandardException;
1: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.types;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: public interface NumberDataValue extends DataValueDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 	 * The minimum scale when dividing Decimals
0: 	 */
0: 	public static final int MIN_DECIMAL_DIVIDE_SCALE = 4;
0: 	public static final int MAX_DECIMAL_PRECISION_SCALE = 31;
0: 
0: 	/**
0: 	 * The SQL + operator.
0: 	 *
0: 	 * @param addend1	One of the addends
0: 	 * @param addend2	The other addend
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	The sum of the two addends
0: 	 *
0: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
0: 	 */
0: 	public NumberDataValue plus(NumberDataValue addend1,
0: 								NumberDataValue addend2,
0: 								NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * The SQL - operator.
0: 	 *
0: 	 * @param left		The left operand
0: 	 * @param right		The right operand
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	left - right
0: 	 *
0: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
0: 	 */
0: 	public NumberDataValue minus(NumberDataValue left,
0: 								 NumberDataValue right,
0: 								NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * The SQL * operator.
0: 	 *
0: 	 * @param left		The left operand
0: 	 * @param right		The right operand
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	left * right
0: 	 *
0: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
0: 	 */
0: 	public NumberDataValue times(NumberDataValue left,
0: 								NumberDataValue right,
0: 								NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * The SQL / operator.
0: 	 *
0: 	 * @param dividend		The numerator
0: 	 * @param divisor		The denominator
0: 	 * @param result		The result of the previous call to this method, null
0: 	 *						if not called yet.
0: 	 *
0: 	 * @return	dividend / divisor
0: 	 *
0: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
0: 	 */
0: 	public NumberDataValue divide(NumberDataValue dividend,
0: 								NumberDataValue divisor,
0: 								NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * The SQL / operator.
0: 	 *
0: 	 * @param dividend		The numerator
0: 	 * @param divisor		The denominator
0: 	 * @param result		The result of the previous call to this method, null
0: 	 *						if not called yet.
0: 	 * @param scale			The scale of the result, for decimal type.  If pass
0: 	 *						in value < 0, can calculate it dynamically.
0: 	 *
0: 	 * @return	dividend / divisor
0: 	 *
0: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
0: 	 */
0: 	public NumberDataValue divide(NumberDataValue dividend,
0: 								NumberDataValue divisor,
0: 								NumberDataValue result,
0: 								int scale)
0: 							throws StandardException;
0: 
0: 
0: 	/**
0: 	 * The SQL mod operator.
0: 	 *
0: 	 * @param dividend		The numerator
0: 	 * @param divisor		The denominator
0: 	 * @param result		The result of the previous call to this method, null
0: 	 *						if not called yet.
0: 	 *
0: 	 * @return	dividend / divisor
0: 	 *
0: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
0: 	 */
0: 	public NumberDataValue mod(NumberDataValue dividend,
0: 								NumberDataValue divisor,
0: 								NumberDataValue result)
0: 							throws StandardException;
0: 
0: 	/**
0: 	 * The SQL unary - operator.  Negates this NumberDataValue.
0: 	 *
0: 	 * @param result	The result of the previous call to this method, null
0: 	 *					if not called yet.
0: 	 *
0: 	 * @return	- operand
0: 	 *
0: 	 * @exception StandardException		Thrown on error, if result is non-null then its value will be unchanged.
0: 	 */
0: 	public NumberDataValue minus(NumberDataValue result)
0: 							throws StandardException;
0: 
0:     /**
0:      * The SQL ABSOLUTE operator.  Absolute value of this NumberDataValue.
0:      *
0:      * @param result    The result of the previous call to this method, null
0:      *                  if not called yet.
0:      *
0:      * @exception StandardException     Thrown on error, if result is non-null then its value will be unchanged.
0:      */
0:     public NumberDataValue absolute(NumberDataValue result)
0:                             throws StandardException;
0: 
0:     /**
0:      * The SQL SQRT operator.  Sqrt value of this NumberDataValue.
0:      *
0:      * @param result    The result of the previous call to this method, null
0:      *                  if not call yet.
0:      * 
0:      * @exception StandardException     Thrown on error (a negative number), if result is non-null then its value will be unchanged.
0:      */
0:     public NumberDataValue sqrt(NumberDataValue result)
0:                             throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this NumberDataValue to the given int value
0: 	 *
0: 	 * @param theValue	An Integer containing the value to set this
0: 	 *					NumberDataValue to.  Null means set the value
0: 	 *					to SQL null.
0: 	 *
0: 	 * @return	This NumberDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Integer theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this NumberDataValue to the given double value
0: 	 *
0: 	 * @param theValue	A Double containing the value to set this
0: 	 *					NumberDataValue to.  Null means set the value
0: 	 *					to SQL null.
0: 	 *
0: 	 * @return	This NumberDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Double theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this NumberDataValue to the given float value
0: 	 *
0: 	 * @param theValue	A Float containing the value to set this
0: 	 *					NumberDataValue to.  Null means set the value
0: 	 *					to SQL null.
0: 	 *
0: 	 * @return	This NumberDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Float theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this NumberDataValue to the given short value
0: 	 *
0: 	 * @param theValue	A Short containing the value to set this
0: 	 *					NumberDataValue to.  Null means set the value
0: 	 *					to SQL null.
0: 	 *
0: 	 * @return	This NumberDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Short theValue) throws StandardException;
0: 
0: 
0: 	/**
0: 	 * Set the value of this NumberDataValue to the given long value
0: 	 *
0: 	 * @param theValue	A Long containing the value to set this
0: 	 *					NumberDataValue to.  Null means set the value
0: 	 *					to SQL null.
0: 	 *
0: 	 * @return	This NumberDataValue
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void setValue(Long theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value of this NumberDataValue to the given byte value
0: 	 *
0: 	 * @param theValue	A Byte containing the value to set this
0: 	 *					NumberDataValue to.  Null means set the value
0: 	 *					to SQL null.
0: 	 *
0: 	 * @return	This NumberDataValue
0: 	 *
0: 	 */
0: 	public void setValue(Byte theValue) throws StandardException;
0: 
0: 	/**
0: 	 * Set the value.
0: 	 *
0: 	 * @param theValue	Contains the boolean value to set this to
0: 	 *
0: 	 * @return	This value
0: 	 *
0: 	 */
0: 	public void setValue(Boolean theValue) throws StandardException;
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================