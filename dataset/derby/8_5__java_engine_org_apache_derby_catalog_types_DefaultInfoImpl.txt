1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.catalog.types.DefaultInfoImpl
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog.types;
1:eac0369: 
1:57465ef: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.DefaultInfo;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: public class DefaultInfoImpl implements DefaultInfo, Formatable
8:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	private DataValueDescriptor	defaultValue;
1:eac0369: 	private String				defaultText;
1:b0ad765: 	private int                     type;
1:7ae50e9:     private String[]                   referencedColumnNames;
1:01aa176:     private String                  originalCurrentSchema;
1:b0ad765: 
1:b0ad765: 	final private static int BITS_MASK_IS_DEFAULTVALUE_AUTOINC = 0x1 << 0;
1:9188c1c: 	final private static int BITS_MASK_IS_GENERATED_COLUMN = 0x2;
1:eac0369: 
4:eac0369: 	/**
1:eac0369: 	 * Public niladic constructor. Needed for Formatable interface to work.
5:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	DefaultInfoImpl() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor for use with numeric types
1:eac0369: 	 *
1:eac0369: 	 * @param defaultText	The text of the default.
1:eac0369: 	 */
1:b0ad765: 	public DefaultInfoImpl(boolean isDefaultValueAutoinc,
1:eac0369: 		String defaultText,
1:eac0369: 		DataValueDescriptor defaultValue)
1:eac0369: 	{
1:b0ad765: 		this.type = calcType(isDefaultValueAutoinc);
1:eac0369: 		this.defaultText = defaultText;
1:eac0369: 		this.defaultValue = defaultValue;
8:eac0369: 	}
1:b0ad765: 
1:01aa176: 	/**
1:9188c1c: 	 * Constructor for use with generated columns
1:a735ede:      *
1:a735ede:      * @param   defaultText Text of generation clause.
1:4b337d2:      * @param   referencedColumnNames   names of other columns in the base row which are mentioned in the generation clause.
1:a735ede:      * @param   originalCurrentSchema   Schema in effect when the generate column was added to the table.
1:9188c1c: 	 */
1:9188c1c: 	public DefaultInfoImpl
1:9188c1c:         (
1:9188c1c:          String defaultText,
1:01aa176:          String[]    referencedColumnNames,
1:01aa176:          String originalCurrentSchema
1:9188c1c:          )
1:9188c1c: 	{
1:7ae50e9:         if ( referencedColumnNames == null ) { referencedColumnNames = new String[0]; }
1:9188c1c:         
1:9188c1c: 		this.type = BITS_MASK_IS_GENERATED_COLUMN;
1:9188c1c: 		this.defaultText = defaultText;
1:7ae50e9: 		this.referencedColumnNames = referencedColumnNames;
1:01aa176:         this.originalCurrentSchema = originalCurrentSchema;
1:9188c1c: 	}
1:9188c1c: 
1:9188c1c: 	/**
1:eac0369: 	 * @see DefaultInfo#getDefaultText
1:eac0369: 	 */
1:eac0369: 	public String getDefaultText()
1:eac0369: 	{
2:eac0369: 		return defaultText;
1:9188c1c: 	}
1:9188c1c: 
1:9188c1c: 	/**
1:7ae50e9: 	 * @see DefaultInfo#getReferencedColumnNames
1:9188c1c: 	 */
1:7ae50e9: 	public String[] getReferencedColumnNames()
1:9188c1c: 	{
1:57465ef:         return ArrayUtil.copy( referencedColumnNames );
1:eac0369: 	}
1:eac0369: 
1:b0ad765: 	/**
1:01aa176: 	 * @see DefaultInfo#getOriginalCurrentSchema
1:01aa176: 	 */
1:01aa176: 	public String   getOriginalCurrentSchema()
1:01aa176: 	{
1:01aa176: 		return originalCurrentSchema;
1:01aa176: 	}
1:01aa176: 
1:eac0369: 	public String	toString()
1:eac0369: 	{
1:2c1c8c1: 		if(isDefaultValueAutoinc()){
1:2c1c8c1: 			return "GENERATED_BY_DEFAULT";
1:2c1c8c1: 		}
1:95a483d:         else if ( isGeneratedColumn() )
1:95a483d:         {
1:95a483d:             return "GENERATED ALWAYS AS ( " + defaultText + " )";
1:95a483d:         }
1:95a483d:         else { return defaultText; }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// Formatable methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 		 throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		defaultText = (String) in.readObject();
1:eac0369: 		defaultValue = (DataValueDescriptor) in.readObject();
1:b0ad765: 		type = in.readInt();
1:9188c1c: 
1:9188c1c:         if ( isGeneratedColumn() )
1:9188c1c:         {
1:9188c1c:             int count = in.readInt();
1:7ae50e9:             referencedColumnNames = new String[ count ];
1:7ae50e9:             for ( int i = 0; i < count; i++ ) { referencedColumnNames[ i ] = (String) in.readObject(); }
1:01aa176:             originalCurrentSchema = (String) in.readObject();
1:9188c1c:         }
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeObject( defaultText );
1:eac0369: 		out.writeObject( defaultValue );
1:b0ad765: 		out.writeInt(type);
1:9188c1c:         
1:9188c1c:         if ( isGeneratedColumn() )
1:9188c1c:         {
1:7ae50e9:             int count = referencedColumnNames.length;
1:9188c1c:             out.writeInt( count );
1:7ae50e9:             for ( int i = 0; i < count; i++ ) { out.writeObject( referencedColumnNames[ i ] ); }
1:01aa176:             out.writeObject( originalCurrentSchema );
1:9188c1c:         }
1:eac0369: 	}
1:eac0369:  
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.DEFAULT_INFO_IMPL_V01_ID; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the default value.
1:eac0369: 	 * (NOTE: This returns null if 
1:eac0369: 	 * the default is not a constant.)
1:eac0369: 	 *
1:eac0369: 	 * @return The default value.
1:eac0369: 	 */
1:eac0369: 	public DataValueDescriptor getDefaultValue()
1:eac0369: 	{
1:eac0369: 		return defaultValue;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the default value.
1:eac0369: 	 *
1:eac0369: 	 * @param defaultValue The default value.
1:eac0369: 	 */
1:eac0369: 	public void setDefaultValue(DataValueDescriptor defaultValue)
1:eac0369: 	{
1:eac0369: 		this.defaultValue = defaultValue;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:b0ad765: 	 * @see DefaultInfo#isDefaultValueAutoinc
1:b0ad765: 	 */
1:b0ad765: 	public boolean isDefaultValueAutoinc(){
1:b0ad765: 		return (type & BITS_MASK_IS_DEFAULTVALUE_AUTOINC ) != 0;
1:b0ad765: 	}
1:b0ad765: 	
1:b0ad765: 	/**
1:9188c1c: 	 * @see DefaultInfo#isGeneratedColumn
1:9188c1c: 	 */
1:9188c1c: 	public boolean isGeneratedColumn(){
1:9188c1c: 		return (type & BITS_MASK_IS_GENERATED_COLUMN ) != 0;
1:9188c1c: 	}
1:9188c1c: 	
1:9188c1c: 	/**
1:b0ad765: 	 * This function returns stored value for flags and so on.
1:b0ad765: 	 */
1:b0ad765: 	private static int calcType(boolean isDefaultValueAutoinc){
1:b0ad765: 
1:b0ad765: 		int value = 0;
1:b0ad765: 
1:b0ad765: 		if(isDefaultValueAutoinc){
1:b0ad765: 			value |= BITS_MASK_IS_DEFAULTVALUE_AUTOINC;
1:b0ad765: 		}
1:b0ad765: 
1:b0ad765: 		return value;
1:b0ad765: 	}
1:b0ad765: 	
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:57465ef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1:         return ArrayUtil.copy( referencedColumnNames );
commit:a735ede
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param   defaultText Text of generation clause.
0:      * @param   referencedColumnsNames  names of other columns in the base row which are mentioned in the generation clause.
1:      * @param   originalCurrentSchema   Schema in effect when the generate column was added to the table.
commit:01aa176
/////////////////////////////////////////////////////////////////////////
1:     private String                  originalCurrentSchema;
/////////////////////////////////////////////////////////////////////////
1:          String[]    referencedColumnNames,
1:          String originalCurrentSchema
/////////////////////////////////////////////////////////////////////////
1:         this.originalCurrentSchema = originalCurrentSchema;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * @see DefaultInfo#getOriginalCurrentSchema
1: 	 */
1: 	public String   getOriginalCurrentSchema()
1: 	{
1: 		return originalCurrentSchema;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1:             originalCurrentSchema = (String) in.readObject();
/////////////////////////////////////////////////////////////////////////
1:             out.writeObject( originalCurrentSchema );
commit:7ae50e9
/////////////////////////////////////////////////////////////////////////
1:     private String[]                   referencedColumnNames;
/////////////////////////////////////////////////////////////////////////
0:          String[]    referencedColumnNames
1:         if ( referencedColumnNames == null ) { referencedColumnNames = new String[0]; }
1: 		this.referencedColumnNames = referencedColumnNames;
/////////////////////////////////////////////////////////////////////////
1: 	 * @see DefaultInfo#getReferencedColumnNames
1: 	public String[] getReferencedColumnNames()
0: 		return referencedColumnNames;
/////////////////////////////////////////////////////////////////////////
1:             referencedColumnNames = new String[ count ];
1:             for ( int i = 0; i < count; i++ ) { referencedColumnNames[ i ] = (String) in.readObject(); }
/////////////////////////////////////////////////////////////////////////
1:             int count = referencedColumnNames.length;
1:             for ( int i = 0; i < count; i++ ) { out.writeObject( referencedColumnNames[ i ] ); }
commit:95a483d
/////////////////////////////////////////////////////////////////////////
1:         else if ( isGeneratedColumn() )
1:         {
1:             return "GENERATED ALWAYS AS ( " + defaultText + " )";
1:         }
1:         else { return defaultText; }
commit:9188c1c
/////////////////////////////////////////////////////////////////////////
0:     private int[]                   referencedColumnIDs;
1: 	final private static int BITS_MASK_IS_GENERATED_COLUMN = 0x2;
/////////////////////////////////////////////////////////////////////////
1: 	 * Constructor for use with generated columns
1: 	 */
1: 	public DefaultInfoImpl
1:         (
1:          String defaultText,
0:          int[]    referencedColumnIDs
1:          )
1: 	{
0:         if ( referencedColumnIDs == null ) { referencedColumnIDs = new int[0]; }
1:         
1: 		this.type = BITS_MASK_IS_GENERATED_COLUMN;
1: 		this.defaultText = defaultText;
0: 		this.referencedColumnIDs = referencedColumnIDs;
1: 	}
1: 
1: 	/**
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * @see DefaultInfo#getReferencedColumnIDs
1: 	 */
0: 	public int[] getReferencedColumnIDs()
1: 	{
0: 		return referencedColumnIDs;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         if ( isGeneratedColumn() )
1:         {
1:             int count = in.readInt();
0:             referencedColumnIDs = new int[ count ];
0:             for ( int i = 0; i < count; i++ ) { referencedColumnIDs[ i ] = in.readInt(); }
1:         }
/////////////////////////////////////////////////////////////////////////
1:         
1:         if ( isGeneratedColumn() )
1:         {
0:             int count = referencedColumnIDs.length;
1:             out.writeInt( count );
0:             for ( int i = 0; i < count; i++ ) { out.writeInt( referencedColumnIDs[ i ] ); }
1:         }
/////////////////////////////////////////////////////////////////////////
1: 	 * @see DefaultInfo#isGeneratedColumn
1: 	 */
1: 	public boolean isGeneratedColumn(){
1: 		return (type & BITS_MASK_IS_GENERATED_COLUMN ) != 0;
1: 	}
1: 	
1: 	/**
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4b337d2
/////////////////////////////////////////////////////////////////////////
1:      * @param   referencedColumnNames   names of other columns in the base row which are mentioned in the generation clause.
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:2c1c8c1
/////////////////////////////////////////////////////////////////////////
1: 		if(isDefaultValueAutoinc()){
1: 			return "GENERATED_BY_DEFAULT";
1: 		}
commit:b0ad765
/////////////////////////////////////////////////////////////////////////
1: 	private int                     type;
1: 
1: 	final private static int BITS_MASK_IS_DEFAULTVALUE_AUTOINC = 0x1 << 0;
/////////////////////////////////////////////////////////////////////////
1: 	public DefaultInfoImpl(boolean isDefaultValueAutoinc,
1: 		this.type = calcType(isDefaultValueAutoinc);
/////////////////////////////////////////////////////////////////////////
1: 		type = in.readInt();
/////////////////////////////////////////////////////////////////////////
1: 		out.writeInt(type);
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * @see DefaultInfo#isDefaultValueAutoinc
1: 	 */
1: 	public boolean isDefaultValueAutoinc(){
1: 		return (type & BITS_MASK_IS_DEFAULTVALUE_AUTOINC ) != 0;
1: 	}
1: 	
1: 	/**
1: 	 * This function returns stored value for flags and so on.
1: 	 */
1: 	private static int calcType(boolean isDefaultValueAutoinc){
1: 
1: 		int value = 0;
1: 
1: 		if(isDefaultValueAutoinc){
1: 			value |= BITS_MASK_IS_DEFAULTVALUE_AUTOINC;
1: 		}
1: 
1: 		return value;
1: 	}
1: 	
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:867a530
/////////////////////////////////////////////////////////////////////////
0:    Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		in.readInt(); // old provider info count - always 0.
/////////////////////////////////////////////////////////////////////////
0: 		out.writeInt(0); // old provider info count - always 0.
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.types.DefaultInfoImpl
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.Formatable;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: import org.apache.derby.iapi.sql.depend.ProviderInfo;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.catalog.DefaultInfo;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: public class DefaultInfoImpl implements DefaultInfo, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.
1: 	**
1: 	********************************************************/
1: 
1: 	private DataValueDescriptor	defaultValue;
1: 	private String				defaultText;
0: 	private ProviderInfo[]		providerInfo;
1: 
1: 	/**
1: 	 * Public niladic constructor. Needed for Formatable interface to work.
1: 	 *
1: 	 */
1:     public	DefaultInfoImpl() {}
1: 
1: 	/**
1: 	 * Constructor for use with numeric types
1: 	 *
1: 	 * @param defaultText	The text of the default.
1: 	 */
0: 	public DefaultInfoImpl(
1: 		String defaultText,
1: 		DataValueDescriptor defaultValue)
1: 	{
1: 		this.defaultText = defaultText;
1: 		this.defaultValue = defaultValue;
1: 	}
1: 
1: 	/**
1: 	 * @see DefaultInfo#getDefaultText
1: 	 */
1: 	public String getDefaultText()
1: 	{
1: 		return defaultText;
1: 	}
1: 
1: 	public String	toString()
1: 	{
1: 		return defaultText;
1: 	}
1: 
1: 	// Formatable methods
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 		 throws IOException, ClassNotFoundException
1: 	{
1: 		defaultText = (String) in.readObject();
1: 		defaultValue = (DataValueDescriptor) in.readObject();
0: 		int providerInfoLength = in.readInt();
0: 		if (providerInfoLength > 0)
1: 		{
0: 			providerInfo = new ProviderInfo[providerInfoLength];
0: 			for (int index = 0; index < providerInfoLength; index++)
1: 			{
0: 				providerInfo[index] = (ProviderInfo) in.readObject();
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 		 throws IOException
1: 	{
1: 		out.writeObject( defaultText );
1: 		out.writeObject( defaultValue );
0: 		if (providerInfo != null)
1: 		{
0: 			out.writeInt(providerInfo.length);
0: 			for (int index = 0; index < providerInfo.length; index++)
1: 			{
0: 				out.writeObject(providerInfo[index]);
1: 			}
1: 		}
0: 		else
1: 		{
0: 			out.writeInt(0);
1: 		}
1: 	}
1:  
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.DEFAULT_INFO_IMPL_V01_ID; }
1: 
1: 	/**
1: 	 * Get the default value.
1: 	 * (NOTE: This returns null if 
1: 	 * the default is not a constant.)
1: 	 *
1: 	 * @return The default value.
1: 	 */
1: 	public DataValueDescriptor getDefaultValue()
1: 	{
1: 		return defaultValue;
1: 	}
1: 
1: 	/**
1: 	 * Set the default value.
1: 	 *
1: 	 * @param defaultValue The default value.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	public void setDefaultValue(DataValueDescriptor defaultValue)
1: 	{
1: 		this.defaultValue = defaultValue;
1: 	}
1: 
1: 	/**
0: 	 * Set the ProviderInfo. (Providers that default is dependent on.)
1: 	 *
0: 	 * @param providerInfo	Providers that default is dependent on.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	public void setProviderInfo(ProviderInfo[] providerInfo)
1: 	{
0: 		this.providerInfo = providerInfo;
1: 	}
1: 
1: 	/**
0: 	 * Get the ProviderInfo. (Providers that default is dependent on.)
1: 	 *
0: 	 * @return Providers that default is dependent on.
1: 	 */
0: 	public ProviderInfo[] getProviderInfo()
1: 	{
0: 		return providerInfo;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog.types;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.sql.depend.ProviderInfo;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.catalog.DefaultInfo;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: public class DefaultInfoImpl implements DefaultInfo, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.
0: 	**
0: 	********************************************************/
0: 
0: 	private DataValueDescriptor	defaultValue;
0: 	private String				defaultText;
0: 	private ProviderInfo[]		providerInfo;
0: 
0: 	/**
0: 	 * Public niladic constructor. Needed for Formatable interface to work.
0: 	 *
0: 	 */
0:     public	DefaultInfoImpl() {}
0: 
0: 	/**
0: 	 * Constructor for use with numeric types
0: 	 *
0: 	 * @param defaultText	The text of the default.
0: 	 */
0: 	public DefaultInfoImpl(
0: 		String defaultText,
0: 		DataValueDescriptor defaultValue)
0: 	{
0: 		this.defaultText = defaultText;
0: 		this.defaultValue = defaultValue;
0: 	}
0: 
0: 	/**
0: 	 * @see DefaultInfo#getDefaultText
0: 	 */
0: 	public String getDefaultText()
0: 	{
0: 		return defaultText;
0: 	}
0: 
0: 	public String	toString()
0: 	{
0: 		return defaultText;
0: 	}
0: 
0: 	// Formatable methods
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 		 throws IOException, ClassNotFoundException
0: 	{
0: 		defaultText = (String) in.readObject();
0: 		defaultValue = (DataValueDescriptor) in.readObject();
0: 		int providerInfoLength = in.readInt();
0: 		if (providerInfoLength > 0)
0: 		{
0: 			providerInfo = new ProviderInfo[providerInfoLength];
0: 			for (int index = 0; index < providerInfoLength; index++)
0: 			{
0: 				providerInfo[index] = (ProviderInfo) in.readObject();
0: 			}
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 		 throws IOException
0: 	{
0: 		out.writeObject( defaultText );
0: 		out.writeObject( defaultValue );
0: 		if (providerInfo != null)
0: 		{
0: 			out.writeInt(providerInfo.length);
0: 			for (int index = 0; index < providerInfo.length; index++)
0: 			{
0: 				out.writeObject(providerInfo[index]);
0: 			}
0: 		}
0: 		else
0: 		{
0: 			out.writeInt(0);
0: 		}
0: 	}
0:  
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.DEFAULT_INFO_IMPL_V01_ID; }
0: 
0: 	/**
0: 	 * Get the default value.
0: 	 * (NOTE: This returns null if 
0: 	 * the default is not a constant.)
0: 	 *
0: 	 * @return The default value.
0: 	 */
0: 	public DataValueDescriptor getDefaultValue()
0: 	{
0: 		return defaultValue;
0: 	}
0: 
0: 	/**
0: 	 * Set the default value.
0: 	 *
0: 	 * @param defaultValue The default value.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setDefaultValue(DataValueDescriptor defaultValue)
0: 	{
0: 		this.defaultValue = defaultValue;
0: 	}
0: 
0: 	/**
0: 	 * Set the ProviderInfo. (Providers that default is dependent on.)
0: 	 *
0: 	 * @param providerInfo	Providers that default is dependent on.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setProviderInfo(ProviderInfo[] providerInfo)
0: 	{
0: 		this.providerInfo = providerInfo;
0: 	}
0: 
0: 	/**
0: 	 * Get the ProviderInfo. (Providers that default is dependent on.)
0: 	 *
0: 	 * @return Providers that default is dependent on.
0: 	 */
0: 	public ProviderInfo[] getProviderInfo()
0: 	{
0: 		return providerInfo;
0: 	}
0: }
============================================================================