1:eac0369: /*
5:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.io.URLFile
1:345de35: 
1:2724c48:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2724c48:    contributor license agreements.  See the NOTICE file distributed with
1:2724c48:    this work for additional information regarding copyright ownership.
1:2724c48:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2724c48:    (the "License"); you may not use this file except in compliance with
1:2724c48:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.io;
1:eac0369: 
1:eac0369: import org.apache.derby.io.StorageFile;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: import java.io.FileNotFoundException;
1:eac0369: 
1:eac0369: import java.net.URL;
1:eac0369: 
2:eac0369: /**
1:ccbbcd4:  * This class provides a http based implementation of the StorageFile interface. It is used by the
1:ccbbcd4:  * database engine to access persistent data and transaction logs under the http and https subsubprotocols.
1:eac0369:  */
1:ccbbcd4: class URLFile extends InputStreamFile<URLStorageFactory>
1:eac0369: {
1:eac0369: 
1:eac0369:     URLFile( URLStorageFactory storageFactory, String path)
1:eac0369:     {
1:eac0369:         super( storageFactory, path);
1:eac0369:     }
1:eac0369: 
1:eac0369:     URLFile( URLStorageFactory storageFactory, String parent, String name)
1:eac0369:     {
1:eac0369:         super( storageFactory, parent, name);
1:eac0369:     }
1:eac0369: 
1:eac0369:     URLFile( URLFile dir, String name)
1:eac0369:     {
1:eac0369:         super( dir,name);
1:eac0369:     }
1:eac0369: 
1:eac0369:     private URLFile( URLStorageFactory storageFactory, String child, int pathLen)
1:eac0369:     {
1:eac0369:         super( storageFactory, child, pathLen);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Tests whether the named file exists.
1:eac0369:      *
1:eac0369:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
1:eac0369:      */
1:eac0369:     public boolean exists()
1:eac0369:     {
1:eac0369:         try
1:eac0369:         {
1:eac0369:             InputStream is = getInputStream();
1:eac0369:             if( is == null)
1:eac0369:                 return false;
1:eac0369:             is.close();
1:eac0369:             return true;
1:eac0369:         }
1:eac0369:         catch( IOException ioe){ return false;}
1:eac0369:     } // end of exists
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get the parent of this file.
1:eac0369:      *
1:eac0369:      * @param pathLen the length of the parent's path name.
1:eac0369:      */
1:eac0369:     StorageFile getParentDir( int pathLen)
1:eac0369:     {
1:eac0369:         return new URLFile( storageFactory, path, pathLen);
1:eac0369:     }
1:eac0369:     
1:eac0369:     /**
1:eac0369:      * Creates an input stream from a file name.
1:eac0369:      *
1:eac0369:      * @return an input stream suitable for reading from the file.
1:eac0369:      *
1:eac0369:      * @exception FileNotFoundException if the file is not found.
1:eac0369:      */
1:eac0369:     public InputStream getInputStream( ) throws FileNotFoundException
1:eac0369:     {
1:eac0369:         try
1:eac0369:         {
1:eac0369:             URL url = new URL( path);
1:eac0369:             return url.openStream();
1:eac0369:         }
1:eac0369:         catch( IOException ioe){ throw new java.io.FileNotFoundException(path);}
1:eac0369:     } // end of getInputStream
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ccbbcd4
/////////////////////////////////////////////////////////////////////////
1:  * This class provides a http based implementation of the StorageFile interface. It is used by the
1:  * database engine to access persistent data and transaction logs under the http and https subsubprotocols.
1: class URLFile extends InputStreamFile<URLStorageFactory>
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2724c48
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7a92d1f
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.io.URLFile
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.io;
1: 
1: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.io.StorageRandomAccessFile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.InputStream;
0: import java.io.OutputStream;
1: import java.io.IOException;
1: import java.io.FileNotFoundException;
1: 
1: import java.net.URL;
1: 
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
0: import java.security.PrivilegedExceptionAction;
0: import java.security.PrivilegedActionException;
1: 
1: /**
0:  * This class provides a class path based implementation of the StorageFile interface. It is used by the
0:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
1:  */
0: class URLFile extends InputStreamFile
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
0:     private final URLStorageFactory storageFactory;
1: 
1:     URLFile( URLStorageFactory storageFactory, String path)
1:     {
1:         super( storageFactory, path);
0:         this.storageFactory = storageFactory;
1:     }
1: 
1:     URLFile( URLStorageFactory storageFactory, String parent, String name)
1:     {
1:         super( storageFactory, parent, name);
0:         this.storageFactory = storageFactory;
1:     }
1: 
1:     URLFile( URLFile dir, String name)
1:     {
1:         super( dir,name);
0:         this.storageFactory = dir.storageFactory;
1:     }
1: 
1:     private URLFile( URLStorageFactory storageFactory, String child, int pathLen)
1:     {
1:         super( storageFactory, child, pathLen);
0:         this.storageFactory = storageFactory;
1:     }
1: 
1:     /**
1:      * Tests whether the named file exists.
1:      *
1:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
1:      */
1:     public boolean exists()
1:     {
1:         try
1:         {
1:             InputStream is = getInputStream();
1:             if( is == null)
1:                 return false;
1:             is.close();
1:             return true;
1:         }
1:         catch( IOException ioe){ return false;}
1:     } // end of exists
1: 
1:     /**
1:      * Get the parent of this file.
1:      *
1:      * @param pathLen the length of the parent's path name.
1:      */
1:     StorageFile getParentDir( int pathLen)
1:     {
1:         return new URLFile( storageFactory, path, pathLen);
1:     }
1:     
1:     /**
1:      * Creates an input stream from a file name.
1:      *
1:      * @return an input stream suitable for reading from the file.
1:      *
1:      * @exception FileNotFoundException if the file is not found.
1:      */
1:     public InputStream getInputStream( ) throws FileNotFoundException
1:     {
1:         try
1:         {
1:             URL url = new URL( path);
1:             return url.openStream();
1:         }
1:         catch( IOException ioe){ throw new java.io.FileNotFoundException(path);}
1:     } // end of getInputStream
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.io
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.io;
0: 
0: import org.apache.derby.io.StorageFile;
0: import org.apache.derby.io.StorageRandomAccessFile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.io.IOException;
0: import java.io.FileNotFoundException;
0: 
0: import java.net.URL;
0: 
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
0: import java.security.PrivilegedExceptionAction;
0: import java.security.PrivilegedActionException;
0: 
0: /**
0:  * This class provides a class path based implementation of the StorageFile interface. It is used by the
0:  * database engine to access persistent data and transaction logs under the classpath subsubprotocol.
0:  */
0: class URLFile extends InputStreamFile
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0:     private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0:     private final URLStorageFactory storageFactory;
0: 
0:     URLFile( URLStorageFactory storageFactory, String path)
0:     {
0:         super( storageFactory, path);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     URLFile( URLStorageFactory storageFactory, String parent, String name)
0:     {
0:         super( storageFactory, parent, name);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     URLFile( URLFile dir, String name)
0:     {
0:         super( dir,name);
0:         this.storageFactory = dir.storageFactory;
0:     }
0: 
0:     private URLFile( URLStorageFactory storageFactory, String child, int pathLen)
0:     {
0:         super( storageFactory, child, pathLen);
0:         this.storageFactory = storageFactory;
0:     }
0: 
0:     /**
0:      * Tests whether the named file exists.
0:      *
0:      * @return <b>true</b> if the named file exists, <b>false</b> if not.
0:      */
0:     public boolean exists()
0:     {
0:         try
0:         {
0:             InputStream is = getInputStream();
0:             if( is == null)
0:                 return false;
0:             is.close();
0:             return true;
0:         }
0:         catch( IOException ioe){ return false;}
0:     } // end of exists
0: 
0:     /**
0:      * Get the parent of this file.
0:      *
0:      * @param pathLen the length of the parent's path name.
0:      */
0:     StorageFile getParentDir( int pathLen)
0:     {
0:         return new URLFile( storageFactory, path, pathLen);
0:     }
0:     
0:     /**
0:      * Creates an input stream from a file name.
0:      *
0:      * @return an input stream suitable for reading from the file.
0:      *
0:      * @exception FileNotFoundException if the file is not found.
0:      */
0:     public InputStream getInputStream( ) throws FileNotFoundException
0:     {
0:         try
0:         {
0:             URL url = new URL( path);
0:             return url.openStream();
0:         }
0:         catch( IOException ioe){ throw new java.io.FileNotFoundException(path);}
0:     } // end of getInputStream
0: }
============================================================================