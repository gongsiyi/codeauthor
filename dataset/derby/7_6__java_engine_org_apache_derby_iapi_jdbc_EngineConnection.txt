1:da847a2: /*
9:da847a2: 
1:da847a2:    Derby - Class org.apache.derby.iapi.jdbc.EngineConnection
1:da847a2: 
1:2431ece:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2431ece:    contributor license agreements.  See the NOTICE file distributed with
1:2431ece:    this work for additional information regarding copyright ownership.
1:2431ece:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2431ece:    (the "License"); you may not use this file except in compliance with
1:2431ece:    the License.  You may obtain a copy of the License at
1:da847a2: 
1:da847a2:       http://www.apache.org/licenses/LICENSE-2.0
1:da847a2: 
1:da847a2:    Unless required by applicable law or agreed to in writing, software
1:da847a2:    distributed under the License is distributed on an "AS IS" BASIS,
1:da847a2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da847a2:    See the License for the specific language governing permissions and
1:da847a2:    limitations under the License.
1:da847a2: 
6:da847a2:  */
1:da847a2: package org.apache.derby.iapi.jdbc;
1:1837822: 
1:da847a2: import java.sql.Connection;
1:da847a2: import java.sql.SQLException;
1:1128268: import java.sql.SQLWarning;
1:863daa0: import java.util.concurrent.Executor;
1:1837822: 
1:1128268: 
1:ec60014: /**
1:da847a2:  * Additional methods the embedded engine exposes on its Connection object
1:da847a2:  * implementations. An internal api only, mainly for the network
1:da847a2:  * server. Allows consistent interaction between EmbedConnections
1:da847a2:  * and BrokeredConnections.
1:ec60014:  * 
1:6aa0b12:  */
1:da847a2: public interface EngineConnection extends Connection {
1:ec60014: 
1:6aa0b12:     /**
1:da847a2:      * Set the DRDA identifier for this connection.
1:c6c4d4d:      */
1:da847a2:     public void setDrdaID(String drdaID);
1:da847a2: 
1:ad40eda:     /**
1:ad40eda:      * Is this a global transaction
1:ad40eda:      * @return true if this is a global XA transaction
1:ad40eda:      */
1:ad40eda:     public boolean isInGlobalTransaction();
1:ad40eda:     
1:1128268:     /** 
1:da847a2:      * Set the transaction isolation level that will be used for the 
1:da847a2:      * next prepare.  Used by network server to implement DB2 style 
1:da847a2:      * isolation levels.
1:da847a2:      * Note the passed in level using the Derby constants from
1:da847a2:      * ExecutionContext and not the JDBC constants from java.sql.Connection.
1:da847a2:      * @param level Isolation level to change to.  level is the DB2 level
1:da847a2:      *               specified in the package names which happen to correspond
1:da847a2:      *               to our internal levels. If 
1:da847a2:      *               level == ExecutionContext.UNSPECIFIED_ISOLATION,
1:da847a2:      *               the statement won't be prepared with an isolation level.
2:da847a2:      * 
1:da847a2:      * 
1:1128268:      */
1:da847a2:     public void setPrepareIsolation(int level) throws SQLException;
1:da847a2: 
6:da847a2:     /**
1:da847a2:      * Return prepare isolation 
1:da847a2:      */
1:da847a2:     public int getPrepareIsolation()
2:da847a2:         throws SQLException;
1:6aa0b12: 
1:6aa0b12:     /**
1:1128268:      * Add a SQLWarning to this Connection object.
1:1128268:      * @param newWarning Warning to be added, will be chained to any
1:1128268:      * existing warnings.
1:6aa0b12:      */
1:1128268:     public void addWarning(SQLWarning newWarning)
1:1128268:         throws SQLException;
1:6aa0b12: 
1:6aa0b12:     /**
1:6aa0b12:     * Get the LOB reference corresponding to the locator.
1:6aa0b12:     * @param key the integer that represents the LOB locator value.
1:6aa0b12:     * @return the LOB Object corresponding to this locator.
1:6aa0b12:     */
1:d8a1a68:     public Object getLOBMapping(int key) throws SQLException;
1:c6c4d4d: 
1:c6c4d4d:     /**
1:c6c4d4d:      * Obtain the name of the current schema, so that the NetworkServer can
1:c6c4d4d:      * use it for piggy-backing
1:c6c4d4d:      * @return the current schema name
1:c6c4d4d:      * @throws java.sql.SQLException
1:98ead91:      */
1:c6c4d4d:     public String getCurrentSchemaName() throws SQLException;
1:98ead91: 
1:98ead91:     /**
1:98ead91:      * Resets the connection before it is returned from a PooledConnection
1:98ead91:      * to a new application request (wrapped by a BrokeredConnection).
1:98ead91:      * <p>
1:98ead91:      * Note that resetting the transaction isolation level is not performed as
1:98ead91:      * part of this method. Temporary tables, IDENTITY_VAL_LOCAL and current
1:98ead91:      * schema are reset.
1:ec60014:      */
1:98ead91:     public void resetFromPool() throws SQLException;
1:ec60014: 
1:1837822:     ////////////////////////////////////////////////////////////////////
1:1837822:     //
1:1837822:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:1837822:     //
1:1837822:     ////////////////////////////////////////////////////////////////////
1:1837822: 
1:1837822:     /**
1:1837822:      * Get the name of the current schema.
1:1837822:      */
1:1837822:     public String   getSchema() throws SQLException;
1:1837822: 
1:1837822:     /**
1:1837822:      * Set the default schema for the Connection.
1:1837822:      */
1:1837822:     public void   setSchema(  String schemaName ) throws SQLException;
1:863daa0: 
1:863daa0:     void abort(Executor executor) throws SQLException;
1:863daa0: 
1:863daa0:     void setNetworkTimeout(Executor executor, int millis) throws SQLException;
1:863daa0: 
1:863daa0:     int getNetworkTimeout() throws SQLException;
1:da847a2: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:863daa0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Executor;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     void abort(Executor executor) throws SQLException;
1: 
1:     void setNetworkTimeout(Executor executor, int millis) throws SQLException;
1: 
1:     int getNetworkTimeout() throws SQLException;
commit:aa5c5de
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6395944
/////////////////////////////////////////////////////////////////////////
commit:ec60014
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Return an exception factory that could be used to generate
0:      * {@code SQLException}s raised by this connection.
1:      *
0:      * @return an exception factory instance
1:      */
0:     public ExceptionFactory getExceptionFactory();
1: 
commit:6aa0b12
/////////////////////////////////////////////////////////////////////////
1:     /**
0:     * Add the locator and the corresponding LOB object into the
0:     * HashMap
0:     * @param LOBReference The object which contains the LOB object that
0:     *                     that is added to the HashMap.
0:     * @return an integer that represents the locator that has been
0:     *         allocated to this LOB.
1:     */
0:     public int addLOBMapping(Object LOBReference);
1: 
1:     /**
0:     * Clear the HashTable of all entries.
0:     * Called when a commit or rollback of the transaction
0:     * happens.
1:     */
0:     public void clearLOBMapping() throws SQLException;
1: 
1:     /**
1:     * Get the LOB reference corresponding to the locator.
1:     * @param key the integer that represents the LOB locator value.
1:     * @return the LOB Object corresponding to this locator.
1:     */
0:     public Object getLOBMapping(int key);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:1837822
/////////////////////////////////////////////////////////////////////////
1:     
1:     ////////////////////////////////////////////////////////////////////
1:     //
1:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
1:     //
1:     ////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Get the name of the current schema.
1:      */
1:     public String   getSchema() throws SQLException;
1: 
1:     /**
1:      * Set the default schema for the Connection.
1:      */
1:     public void   setSchema(  String schemaName ) throws SQLException;
1:     
commit:d8a1a68
/////////////////////////////////////////////////////////////////////////
0:     public int addLOBMapping(Object LOBReference) throws SQLException;
/////////////////////////////////////////////////////////////////////////
1:     public Object getLOBMapping(int key) throws SQLException;
commit:2431ece
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ad40eda
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Is this a global transaction
1:      * @return true if this is a global XA transaction
1:      */
1:     public boolean isInGlobalTransaction();
1:     
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:98ead91
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Resets the connection before it is returned from a PooledConnection
1:      * to a new application request (wrapped by a BrokeredConnection).
1:      * <p>
1:      * Note that resetting the transaction isolation level is not performed as
1:      * part of this method. Temporary tables, IDENTITY_VAL_LOCAL and current
1:      * schema are reset.
1:      */
1:     public void resetFromPool() throws SQLException;
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:c6c4d4d
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Obtain the name of the current schema, so that the NetworkServer can
1:      * use it for piggy-backing
1:      * @return the current schema name
1:      * @throws java.sql.SQLException
1:      */
1:     public String getCurrentSchemaName() throws SQLException;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:456b8a1
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:efb1bd2
/////////////////////////////////////////////////////////////////////////
commit:6c000e8
/////////////////////////////////////////////////////////////////////////
commit:1128268
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLWarning;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Add a SQLWarning to this Connection object.
1:      * @param newWarning Warning to be added, will be chained to any
1:      * existing warnings.
1:      */
1:     public void addWarning(SQLWarning newWarning)
1:         throws SQLException;
commit:da847a2
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.jdbc.EngineConnection
1: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.iapi.jdbc;
1: 
1: import java.sql.Connection;
0: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.impl.jdbc.Util;
1: 
1: /**
1:  * Additional methods the embedded engine exposes on its Connection object
1:  * implementations. An internal api only, mainly for the network
1:  * server. Allows consistent interaction between EmbedConnections
1:  * and BrokeredConnections.
1:  * 
1:  */
1: public interface EngineConnection extends Connection {
1: 
1:     /**
1:      * Set the DRDA identifier for this connection.
1:      */
1:     public void setDrdaID(String drdaID);
1: 
1:     /** 
1:      * Set the transaction isolation level that will be used for the 
1:      * next prepare.  Used by network server to implement DB2 style 
1:      * isolation levels.
1:      * Note the passed in level using the Derby constants from
1:      * ExecutionContext and not the JDBC constants from java.sql.Connection.
1:      * @param level Isolation level to change to.  level is the DB2 level
1:      *               specified in the package names which happen to correspond
1:      *               to our internal levels. If 
1:      *               level == ExecutionContext.UNSPECIFIED_ISOLATION,
1:      *               the statement won't be prepared with an isolation level.
1:      * 
1:      * 
1:      */
1:     public void setPrepareIsolation(int level) throws SQLException;
1: 
1:     /**
1:      * Return prepare isolation 
1:      */
1:     public int getPrepareIsolation()
1:         throws SQLException;
1: 
1:     /**
0:      * Prepare a statement with holdability.
0:      * Identical to JDBC 3.0 method, to allow holdabilty
0:      * to be supported in JDK 1.3 by the network server,
0:      * e.g. when the client is jdk 1.4 or above.
0:      * Can be removed once JDK 1.3 is no longer supported.
1:      */
0:     public PreparedStatement prepareStatement(String sql, int resultSetType,
0:             int resultSetConcurrency, int resultSetHoldability)
1:             throws SQLException;
1: 
1:     /**
0:      * Get the holdability of the connection. 
0:      * Identical to JDBC 3.0 method, to allow holdabilty
0:      * to be supported in JDK 1.3 by the network server,
0:      * e.g. when the client is jdk 1.4 or above.
0:      * Can be removed once JDK 1.3 is no longer supported.
1:      */
0:     public int getHoldability() throws SQLException;
1: 
1: }
============================================================================