1:ceb72fe: /*
2:ceb72fe: 
1:ceb72fe:  Derby - Class org.apache.derby.shared.common.reference.Attribute
1:ceb72fe: 
1:07ce0b3:  Licensed to the Apache Software Foundation (ASF) under one or more
1:07ce0b3:  contributor license agreements.  See the NOTICE file distributed with
1:07ce0b3:  this work for additional information regarding copyright ownership.
1:07ce0b3:  The ASF licenses this file to you under the Apache License, Version 2.0
1:07ce0b3:  (the "License"); you may not use this file except in compliance with
1:07ce0b3:  the License.  You may obtain a copy of the License at
1:ceb72fe: 
1:ceb72fe:  http://www.apache.org/licenses/LICENSE-2.0
1:ceb72fe: 
1:ceb72fe:  Unless required by applicable law or agreed to in writing, software
1:ceb72fe:  distributed under the License is distributed on an "AS IS" BASIS,
1:ceb72fe:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ceb72fe:  See the License for the specific language governing permissions and
1:ceb72fe:  limitations under the License.
1:ceb72fe: 
1:ceb72fe:  */
1:ceb72fe: 
1:ceb72fe: package org.apache.derby.shared.common.reference;
1:ceb72fe: 
1:ceb72fe: /**
1:ceb72fe:  * List of all connection (JDBC) attributes by the system.
1:ceb72fe:  * 
1:ceb72fe:  * 
1:ceb72fe:  * <P>
1:ceb72fe:  * This class exists for two reasons
1:ceb72fe:  * <Ol>
1:ceb72fe:  * <LI> To act as the internal documentation for the attributes.
1:ceb72fe:  * <LI> To remove the need to declare a java static field for the attributes
1:ceb72fe:  * name in the protocol/implementation class. This reduces the footprint as the
1:ceb72fe:  * string is final and thus can be included simply as a String constant pool
1:ceb72fe:  * entry.
1:ceb72fe:  * </OL>
1:ceb72fe:  * <P>
1:ceb72fe:  * This class should not be shipped with the product.
1:ceb72fe:  * 
1:ceb72fe:  * <P>
1:ceb72fe:  * This class has no methods, all it contains are String's which by are public,
1:ceb72fe:  * static and final since they are declared in an interface.
1:ceb72fe:  */
1:ceb72fe: 
1:ceb72fe: public interface Attribute {
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Not an attribute but the root for the JDBC URL that Derby supports.
1:ceb72fe:      */
1:ceb72fe:     String PROTOCOL = "jdbc:derby:";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The SQLJ protocol for getting the default connection for server side jdbc
1:ceb72fe:      */
1:ceb72fe:     String SQLJ_NESTED = "jdbc:default:connection";
1:ceb72fe: 
1:ceb72fe:     // Network Protocols. These need to be rejected by the embedded driver.
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The protocol for Derby Network Client
1:ceb72fe:      */
1:ceb72fe:     String DNC_PROTOCOL = "jdbc:derby://";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The protocol for the IBM Universal JDBC Driver
1:ceb72fe:      * 
1:ceb72fe:      */
1:ceb72fe:     String JCC_PROTOCOL = "jdbc:derby:net:";
1:ceb72fe: 
1:ceb72fe:     /**
1:1812ea8:      * User should use this prefix for the client attributes traceLevel 
1:1812ea8:      * and traceDirectory when they are sending those attributes as JVM 
1:1812ea8:      * properties. 
1:1812ea8:      * These 2 attributes can be sent through jdbc url directly (supported
1:1812ea8:      * way) or as JVM properties with the following prefix (undocumented 
1:1812ea8:      * way). DERBY-1275
1:1812ea8:      */
1:1812ea8:     String CLIENT_JVM_PROPERTY_PREFIX = "derby.client.";
1:1812ea8: 
1:1812ea8:     /**
1:ceb72fe:      * Attribute name to encrypt the database on disk. If set to true, all user
1:ceb72fe:      * data is stored encrypted on disk.
1:ceb72fe:      */
1:ceb72fe:     String DATA_ENCRYPTION = "dataEncryption";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * If dataEncryption is true, use this attribute to pass in the secret key.
1:ceb72fe:      * The secret key must be at least 8 characters long. This key must not be
1:ceb72fe:      * stored persistently in cleartext anywhere.
1:ceb72fe:      */
1:ceb72fe: 
1:ceb72fe:     String BOOT_PASSWORD = "bootPassword";
1:ceb72fe: 
1:ceb72fe:     /**
1:9e356f1:      * Attribute name to start replication master mode for a database.
1:9e356f1:      * If used, REPLICATION_SLAVE_HOST is a required attribute.
1:9e356f1:      */
1:9e356f1:     String REPLICATION_START_MASTER = "startMaster";
1:9e356f1: 
1:9e356f1:     /**
1:9e356f1:      * Attribute name to stop replication master mode for a database.
1:9e356f1:      */
1:9e356f1:     String REPLICATION_STOP_MASTER = "stopMaster";
1:9e356f1: 
1:9e356f1:     /**
1:813a7fd:      * Attribute name to start replication slave mode for a database.
1:813a7fd:      */
1:813a7fd:     String REPLICATION_START_SLAVE = "startSlave";
1:813a7fd: 
1:813a7fd:     /**
1:813a7fd:      * Attribute name to stop replication slave mode for a database.
1:813a7fd:      */
1:813a7fd:     String REPLICATION_STOP_SLAVE = "stopSlave";
1:813a7fd: 
1:813a7fd:     /**
1:b9c57d5:      * Attribute name to stop replication slave mode for a database.
1:b9c57d5:      * Internal use only
1:b9c57d5:      */
1:b9c57d5:     String REPLICATION_INTERNAL_SHUTDOWN_SLAVE = "internal_stopslave";
1:b9c57d5: 
1:b9c57d5:     /**
1:9e356f1:      * If startMaster is true, this attribute is used to specify the
1:9e356f1:      * host name the master should connect to. This is a required
1:9e356f1:      * attribute.
1:9e356f1:      */
1:9e356f1:     String REPLICATION_SLAVE_HOST = "slaveHost";
1:9e356f1: 
1:9e356f1:     /**
1:fd20d6b:      * Attribute name to start failover for a given database..
1:fd20d6b:      */
1:fd20d6b:     String REPLICATION_FAILOVER = "failover";
1:fd20d6b: 
1:fd20d6b:     /**
1:9e356f1:      * If startMaster is true, this attribute is used to specify the
1:9e356f1:      * port the master should connect to. This is an optional
1:9e356f1:      * attribute.
1:9e356f1:      */
1:9e356f1:     String REPLICATION_SLAVE_PORT = "slavePort";
1:9e356f1: 
1:9e356f1:     /**
1:ceb72fe:      * The attribute that is used for the database name, from the JDBC notion of
1:ceb72fe:      * jdbc:<subprotocol>:<subname>
1:ceb72fe:      */
1:ceb72fe:     String DBNAME_ATTR = "databaseName";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The attribute that is used to request a shutdown.
1:ceb72fe:      */
1:ceb72fe:     String SHUTDOWN_ATTR = "shutdown";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The attribute that is used to request a database create.
1:ceb72fe:      */
1:ceb72fe:     String CREATE_ATTR = "create";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The attribute that is used to set the user name.
1:ceb72fe:      */
1:ceb72fe:     String USERNAME_ATTR = "user";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The attribute that is used to set the user password.
1:ceb72fe:      */
1:ceb72fe:     String PASSWORD_ATTR = "password";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The attribute that is used to set the connection's DRDA ID.
1:ceb72fe:      */
1:ceb72fe:     String DRDAID_ATTR = "drdaID";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The attribute that is used to allow upgrade.
1:ceb72fe:      */
1:ceb72fe:     String UPGRADE_ATTR = "upgrade";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Put the log on a different device.
1:ceb72fe:      */
1:ceb72fe:     String LOG_DEVICE = "logDevice";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Set the territory for the database.
1:ceb72fe:      */
1:ceb72fe:     String TERRITORY = "territory";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Set the collation sequence of the database, currently on IDENTITY will be
1:ceb72fe:      * supported (strings will sort according to binary comparison).
1:ceb72fe:      */
1:ceb72fe:     String COLLATE = "collate";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Attribute for encrypting a database. Specifies the cryptographic services
1:ceb72fe:      * provider.
1:ceb72fe:      */
1:ceb72fe:     String CRYPTO_PROVIDER = "encryptionProvider";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Attribute for encrypting a database. Specifies the cryptographic
1:ceb72fe:      * algorithm.
1:ceb72fe:      */
1:ceb72fe:     String CRYPTO_ALGORITHM = "encryptionAlgorithm";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Attribute for encrypting a database. Specifies the key length in bytes
1:ceb72fe:      * for the specified cryptographic algorithm.
1:ceb72fe:      */
1:ceb72fe:     String CRYPTO_KEY_LENGTH = "encryptionKeyLength";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * Attribute for encrypting a database. Specifies the actual key. When this
1:ceb72fe:      * is specified all the supplied crypto information is stored external to
1:ceb72fe:      * the database, ie by the application.
1:ceb72fe:      */
1:ceb72fe:     String CRYPTO_EXTERNAL_KEY = "encryptionKey";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * This attribute is used to request to create a database from backup. This
1:ceb72fe:      * will throw error if a database with same already exists at the location
1:ceb72fe:      * where we tring to create.
1:ceb72fe:      */
1:ceb72fe:     String CREATE_FROM = "createFrom";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * This attribute is used to request a database restore from backup. It must
1:ceb72fe:      * be used only when the active database is corrupted, because it will
1:ceb72fe:      * cleanup the existing database and replace it from the backup.
1:ceb72fe:      */
1:ceb72fe:     String RESTORE_FROM = "restoreFrom";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * The attribute that is used to request a roll-forward recovery of the
1:ceb72fe:      * database.
1:ceb72fe:      */
1:ceb72fe:     String ROLL_FORWARD_RECOVERY_FROM = "rollForwardRecoveryFrom";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * securityMechanism sets the mechanism for transmitting the user name and
1:ceb72fe:      * password from the client. Client driver attribute.
1:ceb72fe:      */
1:ceb72fe:     String CLIENT_SECURITY_MECHANISM = "securityMechanism";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * traceFile sets the client side trace file. Client driver attribute.
1:ceb72fe:      */
1:ceb72fe:     String CLIENT_TRACE_FILE = "traceFile";
1:ceb72fe: 
1:ceb72fe:     /**
1:ceb72fe:      * traceDirectory sets the client side trace directory.
1:ceb72fe:      * Client driver attribute.
1:ceb72fe:      */
1:ceb72fe:     String CLIENT_TRACE_DIRECTORY = "traceDirectory";
1:ceb72fe:     
1:ceb72fe:     /**
1:ceb72fe:      * traceFileAppend.
1:ceb72fe:      * Client driver attribute.
1:ceb72fe:      */
1:ceb72fe:     String CLIENT_TRACE_APPEND = "traceFileAppend";
1:ceb72fe:     
1:ceb72fe:     /**
1:2fe796b:      * traceLevel.
1:2fe796b:      * Client driver attribute.
1:2fe796b:      */
1:2fe796b:     String CLIENT_TRACE_LEVEL = "traceLevel";
1:2fe796b:     
1:2fe796b:     /**
1:ceb72fe:      * retrieveMessageText.
1:ceb72fe:      * Client driver attribute.
1:ceb72fe:      */    
1:ceb72fe:     String CLIENT_RETIEVE_MESSAGE_TEXT = "retrieveMessageText";
1:6bc2e25: 
1:6bc2e25:     /**
1:6bc2e25:        The attribute that is used to set client SSL mode.
1:6bc2e25:     */
1:6bc2e25:     String SSL_ATTR = "ssl";
1:6bc2e25: 
1:ceb72fe: }
1:ceb72fe: 
1:ceb72fe: 
============================================================================
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:fd20d6b
/////////////////////////////////////////////////////////////////////////
1:      * Attribute name to start failover for a given database..
1:      */
1:     String REPLICATION_FAILOVER = "failover";
1: 
1:     /**
commit:b9c57d5
/////////////////////////////////////////////////////////////////////////
1:      * Attribute name to stop replication slave mode for a database.
1:      * Internal use only
1:      */
1:     String REPLICATION_INTERNAL_SHUTDOWN_SLAVE = "internal_stopslave";
1: 
1:     /**
commit:813a7fd
/////////////////////////////////////////////////////////////////////////
1:      * Attribute name to start replication slave mode for a database.
1:      */
1:     String REPLICATION_START_SLAVE = "startSlave";
1: 
1:     /**
1:      * Attribute name to stop replication slave mode for a database.
1:      */
1:     String REPLICATION_STOP_SLAVE = "stopSlave";
1: 
1:     /**
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9e356f1
/////////////////////////////////////////////////////////////////////////
1:      * Attribute name to start replication master mode for a database.
1:      * If used, REPLICATION_SLAVE_HOST is a required attribute.
1:      */
1:     String REPLICATION_START_MASTER = "startMaster";
1: 
1:     /**
1:      * Attribute name to stop replication master mode for a database.
1:      */
1:     String REPLICATION_STOP_MASTER = "stopMaster";
1: 
1:     /**
1:      * If startMaster is true, this attribute is used to specify the
1:      * host name the master should connect to. This is a required
1:      * attribute.
1:      */
1:     String REPLICATION_SLAVE_HOST = "slaveHost";
1: 
1:     /**
1:      * If startMaster is true, this attribute is used to specify the
1:      * port the master should connect to. This is an optional
1:      * attribute.
1:      */
1:     String REPLICATION_SLAVE_PORT = "slavePort";
1: 
1:     /**
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:6bc2e25
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:        The attribute that is used to set client SSL mode.
1:     */
1:     String SSL_ATTR = "ssl";
1: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:1812ea8
/////////////////////////////////////////////////////////////////////////
1:      * User should use this prefix for the client attributes traceLevel 
1:      * and traceDirectory when they are sending those attributes as JVM 
1:      * properties. 
1:      * These 2 attributes can be sent through jdbc url directly (supported
1:      * way) or as JVM properties with the following prefix (undocumented 
1:      * way). DERBY-1275
1:      */
1:     String CLIENT_JVM_PROPERTY_PREFIX = "derby.client.";
1: 
1:     /**
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:07ce0b3
/////////////////////////////////////////////////////////////////////////
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to you under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2fe796b
/////////////////////////////////////////////////////////////////////////
1:      * traceLevel.
1:      * Client driver attribute.
1:      */
1:     String CLIENT_TRACE_LEVEL = "traceLevel";
1:     
1:     /**
commit:ceb72fe
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:  Derby - Class org.apache.derby.shared.common.reference.Attribute
1: 
0:  Copyright 1999, 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:  Licensed under the Apache License, Version 2.0 (the "License");
0:  you may not use this file except in compliance with the License.
0:  You may obtain a copy of the License at
1: 
1:  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.shared.common.reference;
1: 
1: /**
1:  * List of all connection (JDBC) attributes by the system.
1:  * 
1:  * 
1:  * <P>
1:  * This class exists for two reasons
1:  * <Ol>
1:  * <LI> To act as the internal documentation for the attributes.
1:  * <LI> To remove the need to declare a java static field for the attributes
1:  * name in the protocol/implementation class. This reduces the footprint as the
1:  * string is final and thus can be included simply as a String constant pool
1:  * entry.
1:  * </OL>
1:  * <P>
1:  * This class should not be shipped with the product.
1:  * 
1:  * <P>
1:  * This class has no methods, all it contains are String's which by are public,
1:  * static and final since they are declared in an interface.
1:  */
1: 
1: public interface Attribute {
1: 
1:     /**
1:      * Not an attribute but the root for the JDBC URL that Derby supports.
1:      */
1:     String PROTOCOL = "jdbc:derby:";
1: 
1:     /**
1:      * The SQLJ protocol for getting the default connection for server side jdbc
1:      */
1:     String SQLJ_NESTED = "jdbc:default:connection";
1: 
1:     // Network Protocols. These need to be rejected by the embedded driver.
1: 
1:     /**
1:      * The protocol for Derby Network Client
1:      */
1:     String DNC_PROTOCOL = "jdbc:derby://";
1: 
1:     /**
1:      * The protocol for the IBM Universal JDBC Driver
1:      * 
1:      */
1:     String JCC_PROTOCOL = "jdbc:derby:net:";
1: 
1:     /**
1:      * Attribute name to encrypt the database on disk. If set to true, all user
1:      * data is stored encrypted on disk.
1:      */
1:     String DATA_ENCRYPTION = "dataEncryption";
1: 
1:     /**
1:      * If dataEncryption is true, use this attribute to pass in the secret key.
1:      * The secret key must be at least 8 characters long. This key must not be
1:      * stored persistently in cleartext anywhere.
1:      */
1: 
1:     String BOOT_PASSWORD = "bootPassword";
1: 
1:     /**
1:      * The attribute that is used for the database name, from the JDBC notion of
1:      * jdbc:<subprotocol>:<subname>
1:      */
1:     String DBNAME_ATTR = "databaseName";
1: 
1:     /**
1:      * The attribute that is used to request a shutdown.
1:      */
1:     String SHUTDOWN_ATTR = "shutdown";
1: 
1:     /**
1:      * The attribute that is used to request a database create.
1:      */
1:     String CREATE_ATTR = "create";
1: 
1:     /**
1:      * The attribute that is used to set the user name.
1:      */
1:     String USERNAME_ATTR = "user";
1: 
1:     /**
1:      * The attribute that is used to set the user password.
1:      */
1:     String PASSWORD_ATTR = "password";
1: 
1:     /**
1:      * The attribute that is used to set the connection's DRDA ID.
1:      */
1:     String DRDAID_ATTR = "drdaID";
1: 
1:     /**
1:      * The attribute that is used to allow upgrade.
1:      */
1:     String UPGRADE_ATTR = "upgrade";
1: 
1:     /**
1:      * Put the log on a different device.
1:      */
1:     String LOG_DEVICE = "logDevice";
1: 
1:     /**
1:      * Set the territory for the database.
1:      */
1:     String TERRITORY = "territory";
1: 
1:     /**
1:      * Set the collation sequence of the database, currently on IDENTITY will be
1:      * supported (strings will sort according to binary comparison).
1:      */
1:     String COLLATE = "collate";
1: 
1:     /**
1:      * Attribute for encrypting a database. Specifies the cryptographic services
1:      * provider.
1:      */
1:     String CRYPTO_PROVIDER = "encryptionProvider";
1: 
1:     /**
1:      * Attribute for encrypting a database. Specifies the cryptographic
1:      * algorithm.
1:      */
1:     String CRYPTO_ALGORITHM = "encryptionAlgorithm";
1: 
1:     /**
1:      * Attribute for encrypting a database. Specifies the key length in bytes
1:      * for the specified cryptographic algorithm.
1:      */
1:     String CRYPTO_KEY_LENGTH = "encryptionKeyLength";
1: 
1:     /**
1:      * Attribute for encrypting a database. Specifies the actual key. When this
1:      * is specified all the supplied crypto information is stored external to
1:      * the database, ie by the application.
1:      */
1:     String CRYPTO_EXTERNAL_KEY = "encryptionKey";
1: 
1:     /**
1:      * This attribute is used to request to create a database from backup. This
1:      * will throw error if a database with same already exists at the location
1:      * where we tring to create.
1:      */
1:     String CREATE_FROM = "createFrom";
1: 
1:     /**
1:      * This attribute is used to request a database restore from backup. It must
1:      * be used only when the active database is corrupted, because it will
1:      * cleanup the existing database and replace it from the backup.
1:      */
1:     String RESTORE_FROM = "restoreFrom";
1: 
1:     /**
1:      * The attribute that is used to request a roll-forward recovery of the
1:      * database.
1:      */
1:     String ROLL_FORWARD_RECOVERY_FROM = "rollForwardRecoveryFrom";
1: 
1:     /**
1:      * securityMechanism sets the mechanism for transmitting the user name and
1:      * password from the client. Client driver attribute.
1:      */
1:     String CLIENT_SECURITY_MECHANISM = "securityMechanism";
1: 
1:     /**
1:      * traceFile sets the client side trace file. Client driver attribute.
1:      */
1:     String CLIENT_TRACE_FILE = "traceFile";
1: 
1:     /**
1:      * traceDirectory sets the client side trace directory.
1:      * Client driver attribute.
1:      */
1:     String CLIENT_TRACE_DIRECTORY = "traceDirectory";
1:     
1:     /**
1:      * traceFileAppend.
1:      * Client driver attribute.
1:      */
1:     String CLIENT_TRACE_APPEND = "traceFileAppend";
1:     
1:     /**
1:      * retrieveMessageText.
1:      * Client driver attribute.
1:      */    
1:     String CLIENT_RETIEVE_MESSAGE_TEXT = "retrieveMessageText";
1: }
1: 
1: 
============================================================================