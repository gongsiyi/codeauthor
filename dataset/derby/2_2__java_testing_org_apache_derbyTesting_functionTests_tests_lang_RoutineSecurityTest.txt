1:aa2a5da: /*
1:aa2a5da: 
1:aa2a5da:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest
1:aa2a5da: 
1:aa2a5da:        Licensed to the Apache Software Foundation (ASF) under one
1:aa2a5da:        or more contributor license agreements.  See the NOTICE file
1:aa2a5da:        distributed with this work for additional information
1:aa2a5da:        regarding copyright ownership.  The ASF licenses this file
1:aa2a5da:        to you under the Apache License, Version 2.0 (the
1:aa2a5da:        "License"); you may not use this file except in compliance
1:aa2a5da:        with the License.  You may obtain a copy of the License at
1:aa2a5da: 
1:aa2a5da:          http://www.apache.org/licenses/LICENSE-2.0
1:aa2a5da: 
1:aa2a5da:        Unless required by applicable law or agreed to in writing,
1:aa2a5da:        software distributed under the License is distributed on an
1:aa2a5da:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:aa2a5da:        KIND, either express or implied.  See the License for the
1:aa2a5da:        specific language governing permissions and limitations
1:aa2a5da:        under the License
1:aa2a5da: */
1:aa2a5da: package org.apache.derbyTesting.functionTests.tests.lang;
1:aa2a5da: 
1:aa2a5da: import java.sql.CallableStatement;
1:aa2a5da: import java.sql.PreparedStatement;
1:aa2a5da: import java.sql.ResultSet;
1:aa2a5da: import java.sql.SQLException;
1:aa2a5da: import java.sql.Statement;
1:aa2a5da: 
1:aa2a5da: import junit.framework.Test;
1:aa2a5da: 
1:aa2a5da: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:aa2a5da: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:aa2a5da: import org.apache.derbyTesting.junit.TestConfiguration;
1:aa2a5da: 
1:aa2a5da: /**
1:aa2a5da:  * Set of tests that ensure SQL routines implemented in Java are
1:aa2a5da:  * correctly restricted in their actions when a security manager
1:aa2a5da:  * is in place. Assumption is that the standard running of this
1:aa2a5da:  * test will setup a security manager.
1:aa2a5da:  *
1:aa2a5da:  */
1:aa2a5da: public class RoutineSecurityTest extends BaseJDBCTestCase {
1:aa2a5da:     
1:aa2a5da:     public RoutineSecurityTest(String name)
1:aa2a5da:     {
1:aa2a5da:         super(name);
1:aa2a5da:     }
1:aa2a5da:     
1:aa2a5da:     /**
1:aa2a5da:      * Test only runs in embedded as it is testing server
1:aa2a5da:      * side SQL routines implemented in Java.
1:aa2a5da:      */
1:aa2a5da:     public static Test suite()
1:aa2a5da:     {
1:aa2a5da:         Test suite = TestConfiguration.embeddedSuite(RoutineSecurityTest.class);
1:aa2a5da:         
1:aa2a5da:         // Create all the routines we need up front.
1:aa2a5da:         return new CleanDatabaseTestSetup(suite)
1:aa2a5da:             {
1:aa2a5da:               protected void decorateSQL(Statement s) throws SQLException {
1:aa2a5da:                   s.executeUpdate(
1:aa2a5da:                     "CREATE FUNCTION GET_SYS_PROP(PROPERTY_KEY VARCHAR(60)) " +
1:aa2a5da:                     "RETURNS VARCHAR(255) " +
1:aa2a5da:                     "EXTERNAL NAME 'java.lang.System.getProperty' " +
1:aa2a5da:                     "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:aa2a5da:                   
1:aa2a5da:                   s.executeUpdate(
1:aa2a5da:                     "CREATE PROCEDURE DENIAL_OF_SERVICE(RC INT) " +
1:aa2a5da:                     "EXTERNAL NAME 'java.lang.System.exit' " +
1:aa2a5da:                     "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:aa2a5da:                   
1:aa2a5da:                   s.executeUpdate(
1:aa2a5da:                      "CREATE PROCEDURE FORCEGC() " +
1:aa2a5da:                      "EXTERNAL NAME 'java.lang.System.gc' " +
1:aa2a5da:                      "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:aa2a5da: 
1:aa2a5da:                }
1:aa2a5da:              };
1:aa2a5da:     }
1:aa2a5da:     
1:aa2a5da:     /**
1:aa2a5da:      * Test obtaining a system property using the Java library
1:aa2a5da:      * method System.getProperty() directly. Note that since
1:aa2a5da:      * the system method is called directly there is no
1:aa2a5da:      * privilege block and so to read a property the permission
1:aa2a5da:      * must have been granted all the way up the stack *including*
1:aa2a5da:      * the generated class. This can only occur for a generic
1:aa2a5da:      * grant entry in the policy file (with no code URL). 
1:aa2a5da:      * 
1:aa2a5da:      * @throws SQLException
1:aa2a5da:      */
1:aa2a5da:     public void testGetSystemProperty() throws SQLException
1:aa2a5da:     {
1:aa2a5da:         PreparedStatement ps = prepareStatement("VALUES GET_SYS_PROP(?)");
1:aa2a5da:         
1:aa2a5da:         String[] restricted = {
1:aa2a5da:                 "derby.system.home", // not granted to all code on the stack
1:f16887a:                 // DERBY-5514: Property read permission on user.dir is granted
1:f16887a:                 // to all code bases when running code instrumented with EMMA,
1:f16887a:                 // so reading the property will succeed under EMMA.
1:f16887a:                 // "user.dir",  // restricted by jvm
1:f16887a:                 "user.home",  // restricted by jvm
1:aa2a5da:                 "java.class.path", // restricted by jvm
1:aa2a5da:                 "java.home",  // restricted by jvm
1:aa2a5da:                 "derbyRoutineSecurityTest.no", // not granted at all
1:aa2a5da:                 "derbyTesting.fred" // only granted to derbyTesting.jar
1:aa2a5da:                 };
1:aa2a5da:         
1:aa2a5da:         for (int i = 0; i < restricted.length; i++)
1:aa2a5da:         {
1:aa2a5da:             ps.setString(1, restricted[i]);
1:aa2a5da:             try {
1:aa2a5da:                 ResultSet rs =ps.executeQuery();
1:aa2a5da:                 rs.next(); 
1:aa2a5da:                 fail("Succeeded reading " + restricted[i] + rs.getString(1));
1:aa2a5da:             } catch (SQLException e) {
1:aa2a5da:                 assertSecurityException(e);
1:aa2a5da:             }
1:aa2a5da:         }
1:aa2a5da:         
1:aa2a5da:         // Should be ok to read these unrestricted or
1:aa2a5da:         // granted_to_all_code properties.
1:aa2a5da:         String[] notRestrictedAndGranted = {
1:aa2a5da:            "java.version", // open to all readers
1:aa2a5da:            "java.specification.name", // open to all readers
1:aa2a5da:            "derbyRoutineSecurityTest.yes" // granted to all code in the policy file
1:aa2a5da:         };
1:aa2a5da:         for (int i = 0; i < notRestrictedAndGranted.length; i++)
1:aa2a5da:         {
1:aa2a5da:             ps.setString(1, notRestrictedAndGranted[i]);
1:aa2a5da:             ResultSet rs =ps.executeQuery();
1:aa2a5da:             rs.next(); 
1:aa2a5da:             rs.getString(1);
1:aa2a5da:             rs.close();
1:aa2a5da:         }
1:aa2a5da:         ps.close();
1:aa2a5da:     }
1:aa2a5da:     
1:aa2a5da:     /**
1:aa2a5da:      * Check that System.exit() cannot be called directly from a procedure.
1:aa2a5da:      * @throws SQLException
1:aa2a5da:      */
1:aa2a5da:     public void testSystemExit() throws SQLException
1:aa2a5da:     {
1:aa2a5da:         CallableStatement cs = prepareCall("CALL DENIAL_OF_SERVICE(?)");
1:aa2a5da:         
1:aa2a5da:         cs.setInt(1, -1);
1:aa2a5da:         try {
1:aa2a5da:             cs.executeUpdate();
1:aa2a5da:             fail("Tough to get here since exit would have been called.");
1:aa2a5da:         } catch (SQLException e) {
1:aa2a5da:             assertSecurityException(e);
1:aa2a5da:         }
1:aa2a5da:         cs.setInt(1, 0);
1:aa2a5da:         try {
1:aa2a5da:             cs.executeUpdate();
1:aa2a5da:             fail("Tough to get here since exit would have been called.");
1:aa2a5da:         } catch (SQLException e) {
1:aa2a5da:             assertSecurityException(e);
1:aa2a5da:         }
1:aa2a5da:         cs.close();
1:aa2a5da:     }
1:aa2a5da:     /**
1:aa2a5da:      * Check that System.gc() can be called directly from a procedure.
1:aa2a5da:      * @throws SQLException
1:aa2a5da:      */
1:aa2a5da:     public void testSystemGC() throws SQLException
1:aa2a5da:     {
1:aa2a5da:         CallableStatement cs = prepareCall("CALL FORCEGC()");
1:aa2a5da:         cs.executeUpdate();
1:aa2a5da:         cs.close();
1:aa2a5da:     }
1:aa2a5da:     
1:aa2a5da:     /**
1:e604a71:      * Check that a user routine cannot resolve to a
1:e604a71:      * internal derby class, currently limited to not
1:e604a71:      * resolving to any class in the org.apache.derby namespace.
1:e604a71:      */
1:e604a71:     public void testInternalClass() throws SQLException
1:e604a71:     {
1:e604a71:         Statement s = createStatement();
1:e604a71:         
1:e604a71:         s.executeUpdate(
1:e604a71:                 "CREATE FUNCTION HACK_DERBY(PROPERTY_KEY VARCHAR(60)) " +
1:e604a71:                 "RETURNS VARCHAR(60) " +
1:e604a71:                 "EXTERNAL NAME 'org.apache.derby.catalog.SystemProcedures.SYSCS_GET_DATABASE_PROPERTY' " +
1:e604a71:                 "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:e604a71:         
1:e604a71:         s.executeUpdate(
1:e604a71:                 "CREATE PROCEDURE HACK_DERBY_2() " +
1:e604a71:                 "EXTERNAL NAME 'org.apache.derby.catalog.SystemProcedures.SYSCS_UNFREEZE_DATABASE' " +
1:e604a71:                 "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:e604a71:         
1:e604a71:         // Some random potential Derby class to ensure the checks
1:e604a71:         // are not limited to the catalog class.
1:e604a71:         s.executeUpdate(
1:e604a71:                 "CREATE PROCEDURE HACK_DERBY_3() " +
1:e604a71:                 "EXTERNAL NAME 'org.apache.derby.any.clazz.method' " +
1:e604a71:                 "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:e604a71: 
1:e604a71: 
1:e604a71:         s.close();
1:e604a71:         
1:e604a71:         assertCompileError("42X51", "VALUES HACK_DERBY(?)");
1:e604a71:         assertCompileError("42X51", "CALL HACK_DERBY_2()");
1:e604a71:         assertCompileError("42X51", "CALL HACK_DERBY_3()");       
1:e604a71: 
1:e604a71:     }
1:e604a71:     
1:e604a71:     /**
1:aa2a5da:      * Test for a security exception within a routine.
1:aa2a5da:      * Current test is that the SQLException returned
1:aa2a5da:      * to the client has SQLState 38000 and wraps a
1:aa2a5da:      * SQLException with SQLState XJ001 which corresponds
1:aa2a5da:      * to wrapped Java exception.
1:aa2a5da:      * @param e
1:aa2a5da:      */
1:aa2a5da:     private void assertSecurityException(SQLException e)
1:aa2a5da:     {
1:aa2a5da:         assertSQLState("38000", e);
1:aa2a5da:         e = e.getNextException();
1:aa2a5da:         assertNotNull(e);
1:aa2a5da:         assertSQLState("XJ001", e);
1:aa2a5da: }
1:aa2a5da: 
1:aa2a5da: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f16887a
/////////////////////////////////////////////////////////////////////////
1:                 // DERBY-5514: Property read permission on user.dir is granted
1:                 // to all code bases when running code instrumented with EMMA,
1:                 // so reading the property will succeed under EMMA.
1:                 // "user.dir",  // restricted by jvm
1:                 "user.home",  // restricted by jvm
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:e604a71
/////////////////////////////////////////////////////////////////////////
1:      * Check that a user routine cannot resolve to a
1:      * internal derby class, currently limited to not
1:      * resolving to any class in the org.apache.derby namespace.
1:      */
1:     public void testInternalClass() throws SQLException
1:     {
1:         Statement s = createStatement();
1:         
1:         s.executeUpdate(
1:                 "CREATE FUNCTION HACK_DERBY(PROPERTY_KEY VARCHAR(60)) " +
1:                 "RETURNS VARCHAR(60) " +
1:                 "EXTERNAL NAME 'org.apache.derby.catalog.SystemProcedures.SYSCS_GET_DATABASE_PROPERTY' " +
1:                 "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:         
1:         s.executeUpdate(
1:                 "CREATE PROCEDURE HACK_DERBY_2() " +
1:                 "EXTERNAL NAME 'org.apache.derby.catalog.SystemProcedures.SYSCS_UNFREEZE_DATABASE' " +
1:                 "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:         
1:         // Some random potential Derby class to ensure the checks
1:         // are not limited to the catalog class.
1:         s.executeUpdate(
1:                 "CREATE PROCEDURE HACK_DERBY_3() " +
1:                 "EXTERNAL NAME 'org.apache.derby.any.clazz.method' " +
1:                 "LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 
1: 
1:         s.close();
1:         
1:         assertCompileError("42X51", "VALUES HACK_DERBY(?)");
1:         assertCompileError("42X51", "CALL HACK_DERBY_2()");
1:         assertCompileError("42X51", "CALL HACK_DERBY_3()");       
1: 
1:     }
1:     
1:     /**
commit:aa2a5da
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest
1: 
1:        Licensed to the Apache Software Foundation (ASF) under one
1:        or more contributor license agreements.  See the NOTICE file
1:        distributed with this work for additional information
1:        regarding copyright ownership.  The ASF licenses this file
1:        to you under the Apache License, Version 2.0 (the
1:        "License"); you may not use this file except in compliance
1:        with the License.  You may obtain a copy of the License at
1: 
1:          http://www.apache.org/licenses/LICENSE-2.0
1: 
1:        Unless required by applicable law or agreed to in writing,
1:        software distributed under the License is distributed on an
1:        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:        KIND, either express or implied.  See the License for the
1:        specific language governing permissions and limitations
1:        under the License
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Set of tests that ensure SQL routines implemented in Java are
1:  * correctly restricted in their actions when a security manager
1:  * is in place. Assumption is that the standard running of this
1:  * test will setup a security manager.
1:  *
1:  */
1: public class RoutineSecurityTest extends BaseJDBCTestCase {
1:     
1:     public RoutineSecurityTest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Test only runs in embedded as it is testing server
1:      * side SQL routines implemented in Java.
1:      */
1:     public static Test suite()
1:     {
1:         Test suite = TestConfiguration.embeddedSuite(RoutineSecurityTest.class);
1:         
1:         // Create all the routines we need up front.
1:         return new CleanDatabaseTestSetup(suite)
1:             {
1:               protected void decorateSQL(Statement s) throws SQLException {
1:                   s.executeUpdate(
1:                     "CREATE FUNCTION GET_SYS_PROP(PROPERTY_KEY VARCHAR(60)) " +
1:                     "RETURNS VARCHAR(255) " +
1:                     "EXTERNAL NAME 'java.lang.System.getProperty' " +
1:                     "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:                   
1:                   s.executeUpdate(
1:                     "CREATE PROCEDURE DENIAL_OF_SERVICE(RC INT) " +
1:                     "EXTERNAL NAME 'java.lang.System.exit' " +
1:                     "LANGUAGE JAVA PARAMETER STYLE JAVA");
1:                   
1:                   s.executeUpdate(
1:                      "CREATE PROCEDURE FORCEGC() " +
1:                      "EXTERNAL NAME 'java.lang.System.gc' " +
1:                      "LANGUAGE JAVA PARAMETER STYLE JAVA");
1: 
1:                }
1:              };
1:     }
1:     
1:     /**
1:      * Test obtaining a system property using the Java library
1:      * method System.getProperty() directly. Note that since
1:      * the system method is called directly there is no
1:      * privilege block and so to read a property the permission
1:      * must have been granted all the way up the stack *including*
1:      * the generated class. This can only occur for a generic
1:      * grant entry in the policy file (with no code URL). 
1:      * 
1:      * @throws SQLException
1:      */
1:     public void testGetSystemProperty() throws SQLException
1:     {
1:         PreparedStatement ps = prepareStatement("VALUES GET_SYS_PROP(?)");
1:         
1:         String[] restricted = {
1:                 "derby.system.home", // not granted to all code on the stack
0:                 "user.dir",  // restricted by jvm
0:                 // "user.home",  // restricted by jvm
1:                 "java.class.path", // restricted by jvm
1:                 "java.home",  // restricted by jvm
1:                 "derbyRoutineSecurityTest.no", // not granted at all
1:                 "derbyTesting.fred" // only granted to derbyTesting.jar
1:                 };
1:         
1:         for (int i = 0; i < restricted.length; i++)
1:         {
1:             ps.setString(1, restricted[i]);
1:             try {
1:                 ResultSet rs =ps.executeQuery();
1:                 rs.next(); 
1:                 fail("Succeeded reading " + restricted[i] + rs.getString(1));
1:             } catch (SQLException e) {
1:                 assertSecurityException(e);
1:             }
1:         }
1:         
1:         // Should be ok to read these unrestricted or
1:         // granted_to_all_code properties.
1:         String[] notRestrictedAndGranted = {
1:            "java.version", // open to all readers
1:            "java.specification.name", // open to all readers
1:            "derbyRoutineSecurityTest.yes" // granted to all code in the policy file
1:         };
1:         for (int i = 0; i < notRestrictedAndGranted.length; i++)
1:         {
1:             ps.setString(1, notRestrictedAndGranted[i]);
1:             ResultSet rs =ps.executeQuery();
1:             rs.next(); 
1:             rs.getString(1);
1:             rs.close();
1:         }
1:         ps.close();
1:     }
1:     
1:     /**
1:      * Check that System.exit() cannot be called directly from a procedure.
1:      * @throws SQLException
1:      */
1:     public void testSystemExit() throws SQLException
1:     {
1:         CallableStatement cs = prepareCall("CALL DENIAL_OF_SERVICE(?)");
1:         
1:         cs.setInt(1, -1);
1:         try {
1:             cs.executeUpdate();
1:             fail("Tough to get here since exit would have been called.");
1:         } catch (SQLException e) {
1:             assertSecurityException(e);
1:         }
1:         cs.setInt(1, 0);
1:         try {
1:             cs.executeUpdate();
1:             fail("Tough to get here since exit would have been called.");
1:         } catch (SQLException e) {
1:             assertSecurityException(e);
1:         }
1:         cs.close();
1:     }
1:     /**
1:      * Check that System.gc() can be called directly from a procedure.
1:      * @throws SQLException
1:      */
1:     public void testSystemGC() throws SQLException
1:     {
1:         CallableStatement cs = prepareCall("CALL FORCEGC()");
1:         cs.executeUpdate();
1:         cs.close();
1:     }
1:     
1:     /**
1:      * Test for a security exception within a routine.
1:      * Current test is that the SQLException returned
1:      * to the client has SQLState 38000 and wraps a
1:      * SQLException with SQLState XJ001 which corresponds
1:      * to wrapped Java exception.
1:      * @param e
1:      */
1:     private void assertSecurityException(SQLException e)
1:     {
1:         assertSQLState("38000", e);
1:         e = e.getNextException();
1:         assertNotNull(e);
1:         assertSQLState("XJ001", e);
1: }
1: 
1: }
============================================================================