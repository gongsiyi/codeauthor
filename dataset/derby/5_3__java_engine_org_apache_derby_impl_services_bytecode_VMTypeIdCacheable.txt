1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.bytecode.VMTypeIdCacheable
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.bytecode;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.cache.Cacheable;
1:eac0369: import org.apache.derby.iapi.services.cache.CacheManager;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.classfile.ClassHolder;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This class implements a Cacheable for a Byte code generator cache of
1:eac0369:  * VMTypeIds.  It maps a Java class or type name to a VM type ID.
1:eac0369:  */
1:eac0369: class VMTypeIdCacheable implements Cacheable {
1:eac0369: 	/* The VM name of the Java class name */
1:eac0369: 	// either a Type (java type) or a String (method descriptor)
1:eac0369: 	private Object descriptor;
1:eac0369: 
1:eac0369: 	/* This is the identity */
1:eac0369: 	private Object key;
1:eac0369: 
1:eac0369: 	/* Cacheable interface */
1:eac0369: 
1:eac0369: 	/** @see Cacheable#clearIdentity */
1:eac0369: 	public void clearIdentity() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#getIdentity */
1:eac0369: 	public Object getIdentity() {
1:eac0369: 		return key;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#createIdentity */
1:eac0369: 	public Cacheable createIdentity(Object key, Object createParameter) {
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.THROWASSERT("VMTypeIdCacheable.create() called!");
1:eac0369: 		}
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#setIdentity */
1:eac0369: 	public Cacheable setIdentity(Object key) {
1:eac0369: 
1:eac0369: 		this.key = key;
1:eac0369: 		if (key instanceof String) {
1:eac0369: 			/* The identity is the Java class name */
1:eac0369: 			String javaName = (String) key;
1:eac0369: 
1:eac0369: 			/* Get the VM type name associated with the Java class name */
1:eac0369: 			String vmName = ClassHolder.convertToInternalDescriptor(javaName);
1:eac0369: 			descriptor = new Type(javaName, vmName);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			descriptor = ((BCMethodDescriptor) key).buildMethodDescriptor();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#clean */
1:eac0369: 	public void clean(boolean remove) {
1:eac0369: 		/* No such thing as a dirty cache entry */
1:eac0369: 		return;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see Cacheable#isDirty */
1:eac0369: 	public boolean isDirty() {
1:eac0369: 		/* No such thing as a dirty cache entry */
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Class specific methods.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the VM Type name (java/lang/Object) that is associated with this Cacheable
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	Object descriptor() {
1:eac0369: 		return descriptor;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.bytecode.VMTypeIdCacheable
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.bytecode;
1: 
1: import org.apache.derby.iapi.services.cache.Cacheable;
1: import org.apache.derby.iapi.services.cache.CacheManager;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.classfile.ClassHolder;
1: 
1: /**
1:  * This class implements a Cacheable for a Byte code generator cache of
1:  * VMTypeIds.  It maps a Java class or type name to a VM type ID.
1:  */
1: class VMTypeIdCacheable implements Cacheable {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/* The VM name of the Java class name */
1: 	// either a Type (java type) or a String (method descriptor)
1: 	private Object descriptor;
1: 
1: 	/* This is the identity */
1: 	private Object key;
1: 
1: 	/* Cacheable interface */
1: 
1: 	/** @see Cacheable#clearIdentity */
1: 	public void clearIdentity() {
1: 	}
1: 
1: 	/** @see Cacheable#getIdentity */
1: 	public Object getIdentity() {
1: 		return key;
1: 	}
1: 
1: 	/** @see Cacheable#createIdentity */
1: 	public Cacheable createIdentity(Object key, Object createParameter) {
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.THROWASSERT("VMTypeIdCacheable.create() called!");
1: 		}
1: 		return this;
1: 	}
1: 
1: 	/** @see Cacheable#setIdentity */
1: 	public Cacheable setIdentity(Object key) {
1: 
1: 		this.key = key;
1: 		if (key instanceof String) {
1: 			/* The identity is the Java class name */
1: 			String javaName = (String) key;
1: 
1: 			/* Get the VM type name associated with the Java class name */
1: 			String vmName = ClassHolder.convertToInternalDescriptor(javaName);
1: 			descriptor = new Type(javaName, vmName);
1: 		}
1: 		else
1: 		{
1: 			descriptor = ((BCMethodDescriptor) key).buildMethodDescriptor();
1: 		}
1: 
1: 		return this;
1: 	}
1: 
1: 	/** @see Cacheable#clean */
1: 	public void clean(boolean remove) {
1: 		/* No such thing as a dirty cache entry */
1: 		return;
1: 	}
1: 
1: 	/** @see Cacheable#isDirty */
1: 	public boolean isDirty() {
1: 		/* No such thing as a dirty cache entry */
1: 		return false;
1: 	}
1: 
1: 	/*
1: 	** Class specific methods.
1: 	*/
1: 
1: 	/**
1: 	 * Get the VM Type name (java/lang/Object) that is associated with this Cacheable
1: 	 */
1: 
1: 	Object descriptor() {
1: 		return descriptor;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.bytecode
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.bytecode;
0: 
0: import org.apache.derby.iapi.services.cache.Cacheable;
0: import org.apache.derby.iapi.services.cache.CacheManager;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.classfile.ClassHolder;
0: 
0: /**
0:  * This class implements a Cacheable for a Byte code generator cache of
0:  * VMTypeIds.  It maps a Java class or type name to a VM type ID.
0:  */
0: class VMTypeIdCacheable implements Cacheable {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/* The VM name of the Java class name */
0: 	// either a Type (java type) or a String (method descriptor)
0: 	private Object descriptor;
0: 
0: 	/* This is the identity */
0: 	private Object key;
0: 
0: 	/* Cacheable interface */
0: 
0: 	/** @see Cacheable#clearIdentity */
0: 	public void clearIdentity() {
0: 	}
0: 
0: 	/** @see Cacheable#getIdentity */
0: 	public Object getIdentity() {
0: 		return key;
0: 	}
0: 
0: 	/** @see Cacheable#createIdentity */
0: 	public Cacheable createIdentity(Object key, Object createParameter) {
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.THROWASSERT("VMTypeIdCacheable.create() called!");
0: 		}
0: 		return this;
0: 	}
0: 
0: 	/** @see Cacheable#setIdentity */
0: 	public Cacheable setIdentity(Object key) {
0: 
0: 		this.key = key;
0: 		if (key instanceof String) {
0: 			/* The identity is the Java class name */
0: 			String javaName = (String) key;
0: 
0: 			/* Get the VM type name associated with the Java class name */
0: 			String vmName = ClassHolder.convertToInternalDescriptor(javaName);
0: 			descriptor = new Type(javaName, vmName);
0: 		}
0: 		else
0: 		{
0: 			descriptor = ((BCMethodDescriptor) key).buildMethodDescriptor();
0: 		}
0: 
0: 		return this;
0: 	}
0: 
0: 	/** @see Cacheable#clean */
0: 	public void clean(boolean remove) {
0: 		/* No such thing as a dirty cache entry */
0: 		return;
0: 	}
0: 
0: 	/** @see Cacheable#isDirty */
0: 	public boolean isDirty() {
0: 		/* No such thing as a dirty cache entry */
0: 		return false;
0: 	}
0: 
0: 	/*
0: 	** Class specific methods.
0: 	*/
0: 
0: 	/**
0: 	 * Get the VM Type name (java/lang/Object) that is associated with this Cacheable
0: 	 */
0: 
0: 	Object descriptor() {
0: 		return descriptor;
0: 	}
0: }
============================================================================