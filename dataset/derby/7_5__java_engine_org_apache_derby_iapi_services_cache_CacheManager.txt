1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.cache.CacheManager
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
11:eac0369: 
8:eac0369:  */
1:f07c8c7: 
1:eac0369: package org.apache.derby.iapi.services.cache;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.daemon.DaemonService;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.util.Matchable;
1:eac0369: import org.apache.derby.iapi.util.Operator;
1:eac0369: 
1:f07c8c7: import java.util.Collection;
1:f07c8c7: 
1:5d24b1a: public interface CacheManager {
1:eac0369: 
1:f07c8c7: 	/**
1:d1d5ad1:         Find an object in the cache.
1:d1d5ad1:         <p>
1:eac0369: 		Find an object in the cache that matches the key provided using the equals()
1:eac0369: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
1:eac0369: 		If the object does not exist in the cache it will be added by one of:
1:eac0369: 		<UL>
1:eac0369: 		<LI>creating a new holder object and calling its initParameter() method and then its
1:eac0369: 		setIdentity() method with key as the parameter.
1:eac0369: 		<LI>Calling clearIdentity() on an holder object in the clean state and then calling its
1:eac0369: 		setIdentity() method with key as the parameter.
1:eac0369: 		<LI>Calling clean() on a dirty holder object and then calling clearIdentity() on an
1:eac0369: 		holder object in the clean state and then calling its setIdentity() method with key
1:eac0369: 		as the parameter.
1:eac0369: 		</UL>
1:eac0369: 		In all cases the setIdentity() method is called with forCreate set to false. 
1:eac0369: 		<BR>
1:eac0369: 		The returned object is kept, i.e. its identity will not change, until the release()
1:eac0369: 		method is called. The release() method must be called after the caller is finished
1:eac0369: 		with the object and throw away the reference to it, e.g.
1:eac0369: 		<PRE>
1:eac0369: 			Page p = (Page) pageCache.find(pageKey);
1:eac0369: 
1:eac0369: 			// do stuff with p
1:eac0369: 
1:eac0369: 			// release p
1:eac0369: 			pageCache.release(p);
1:eac0369: 			p = null;
1:eac0369: 			
1:eac0369: 		</PRE>
1:eac0369: 
1:eac0369: 		@return A reference to an object in the cache, or null if the object cannot be found.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 
1:eac0369: 		@see Cacheable#setIdentity
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Cacheable find(Object key) throws StandardException;
1:eac0369: 
10:eac0369: 	/**
1:d1d5ad1:         Find an object in the cache.
1:d1d5ad1:         <p>
1:eac0369: 		Find an object in the cache that matches the key provided using the equals()
1:eac0369: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
1:eac0369: 		If a matching object does not exist in the cache, null is returned.
1:eac0369: 		<BR>
1:eac0369: 		The returned object is kept, i.e. its identity will not change, until the release()
1:eac0369: 		method is called. The release() method must be called after the caller is finished
1:eac0369: 		with the object and throw away the reference to it, e.g.
1:eac0369: 		<PRE>
1:eac0369: 			Page p = (Page) pageCache.findCached(pageKey);
1:eac0369: 			if (p != null) {
1:eac0369: 
1:eac0369: 				// do stuff with p
1:eac0369: 
1:eac0369: 				// release p
1:eac0369: 				pageCache.release(p);
1:eac0369: 				p = null;
1:eac0369: 			}
1:eac0369: 			
1:eac0369: 		</PRE>
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public Cacheable findCached(Object key) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Create an object in the cache. The resulting object will match the key provided using the equals()
1:eac0369: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
1:eac0369: 		If an object that matches the key already exists in the cache then
1:eac0369: 		an exception is thrown. 
1:eac0369: 		<BR>
1:eac0369: 		The object will be added by one of:
1:eac0369: 		<UL>
1:eac0369: 		<LI>creating a new holder object and calling its initParameter() method and then its
1:eac0369: 		createIdentity() method with key as the parameter.
1:eac0369: 		<LI>Calling clearIdentity() on an holder object in the clean state and then calling its
1:eac0369: 		createIdentity() method with key as the parameter.
1:eac0369: 		<LI>Calling clean() on a dirty holder object and then calling clearIdentity() on an
1:eac0369: 		holder object in the clean state and then calling its createIdentity() method with key
1:eac0369: 		as the parameter.
1:eac0369: 		</UL>
1:eac0369: 		In all cases the setIdentity() method is called with the createParameter as the second
1:eac0369: 		argument.
1:eac0369: 		If the object cannot be created then an exception is thrown by createIdentity.
1:eac0369: 		<BR>
1:eac0369: 		The returned object is kept, i.e. its identity will not change, until the release()
1:eac0369: 		method is called. The release() method must be called after the caller is finished
1:eac0369: 		with the object and throw away the reference to it, e.g.
1:eac0369: 		<PRE>
1:eac0369: 			Page p = (Page) pageCache.create(pageKey, createType);
1:eac0369: 
1:eac0369: 			// do stuff with p
1:eac0369: 
1:eac0369: 			// release p
1:eac0369: 			pageCache.release(p);
1:eac0369: 			p = null;
1:eac0369: 			
1:eac0369: 		</PRE>
1:eac0369: 
1:eac0369: 		@return A reference to an object in the cache.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 
1:eac0369: 		@see Cacheable#createIdentity
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public Cacheable create(Object key, Object createParameter) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:b5ca246: 		Release a <code>Cacheable</code> object previously found with
1:b5ca246: 		<code>find()</code> or <code>findCached()</code>, or created with
1:b5ca246: 		<code>create()</code>, and which is still kept by the caller.
1:eac0369: 		After this call the caller must throw away the reference to item.
1:eac0369: 
1:b5ca246: 		@param entry the cached object to release
1:eac0369: 	*/
1:eac0369: 	public void release(Cacheable entry);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Delete and remove an object from the cache. It is up to the user of the cache
1:eac0369: 		to provide synchronization of some form that ensures that only one caller
1:eac0369: 		executes remove() on a cached object.
1:eac0369: 		<BR>
1:b5ca246: 		The object must previously have been found with <code>find()</code> or
1:b5ca246: 		<code>findCached()</code>, or created with <code>create()</code>, and
1:b5ca246: 		it must still be kept by the caller.
1:eac0369: 		The item will be placed into the NoIdentity
1:eac0369: 		state through clean(true) (if required) and clearIdentity(). The removal of the
1:eac0369: 		object will be delayed until it is not kept by anyone. Objects that are in the
1:eac0369: 		to be removed state can still be found through find() and findCached()
1:eac0369: 		until their keep count drops to zero. This call waits until the object
1:eac0369: 		has been removed.
1:eac0369: 		<BR>
1:eac0369: 		After this call the caller must throw away the reference to item.
1:eac0369: 
1:b5ca246: 		@param entry the object to remove from the cache
1:b5ca246: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public void remove(Cacheable entry) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Place all objects in their clean state by calling their clean method
1:eac0369: 		if they are dirty. This method guarantees that all objects that existed
1:0380d9c: 		in the cache at the time of the call are placed in the clean state 
1:0380d9c:         sometime during this call. Objects that are added to the cache during 
1:0380d9c:         this call or objects that are dirtied during this call (by other 
1:0380d9c:         callers) are not guaranteed to be clean once this call returns.
1:eac0369: 
1:eac0369: 		@see Cacheable#clean
1:eac0369: 		@see Cacheable#isDirty
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public void cleanAll() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Clean all objects that match the partialKey (or exact key).
1:eac0369: 		Any cached object that results in the partialKey.equals(Object)
1:eac0369: 		method returning true when passed the cached object will be cleaned. 
1:eac0369: 		<P>
1:0380d9c: 		In order to clean more than one object the Cacheable equals method must
1:0380d9c:         be able to handle a partial key, e.g. a page has PageKey but a clean 
1:0380d9c:         may pass a ContainerKey which will discard all pages in that container.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 	*/
1:eac0369: 	public void clean(Matchable partialKey) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Age as many objects as possible out of the cache.
1:eac0369: 		This call is guaranteed not to block.
1:eac0369: 		It is not guaranteed to leave the cache empty.
1:eac0369: 
1:eac0369: 		<BR>
1:eac0369: 		It is guaranteed that all unkept, clean objects will be
1:eac0369: 		removed from the cache.
1:eac0369: 
1:eac0369: 		@see Cacheable#clean
1:eac0369: 		@see Cacheable#clearIdentity
1:eac0369: 
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void ageOut();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Shutdown the cache. This call stops the cache returning
1:b5ca246: 		any more valid references on a <code>find()</code>,
1:b5ca246: 		<code>findCached()</code> or <code>create()</code> call,
1:eac0369: 		and then cleanAll() and ageOut() are called. The cache remains
1:eac0369: 		in existence until the last kept object has been unkept.
1:eac0369: 
1:3fd26f3: 		@exception StandardException Standard Derby error policy.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void shutdown() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		This cache can use this DaemonService if it needs some work to be done
1:651fa21: 		in the background. The caller must ensure that it has exclusive access
1:651fa21:         to the cache when this method is called. No synchronization is required
1:651fa21:         in the implementations of this method.
1:eac0369: 	*/
1:eac0369: 	public void useDaemonService(DaemonService daemon);
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Discard all objects that match the partialKey (or exact key).
1:eac0369: 		Any cached object that results in the partialKey.equals(Object)
1:eac0369: 		method returning true when passed the cached object will be thrown out of the cache
1:eac0369: 		if and only if it is not in use. The Cacheable
1:eac0369: 		will be discarded without its clean method being called.
1:eac0369: 		<P>
1:eac0369: 		If partialKey is null, it matches all objects.  This is a way to
1:eac0369: 		discard all objects from the cache in case of emergency shutdown.
1:eac0369: 		<P>
1:eac0369: 		In order to discard more than one object the Cacheable equals method must be able to handle
1:eac0369: 		a partial key, e.g. a page has PageKey but a discard may pass a ContainerKey which will discard
2:eac0369: 		all pages in that container.
1:eac0369: 		<P>
1:eac0369: 		@return true if discard has successful gotten rid of all objects that
1:eac0369: 		match the partial or exact key.  False if some objects that matches
1:eac0369: 		were not gotten rid of because it was kept.
1:eac0369: 	*/
1:eac0369: 	public boolean discard(Matchable partialKey);
1:eac0369: 
1:eac0369: 	/**
1:f07c8c7: 	 * Return a Collection of the Cacheables currently in the
1:f07c8c7: 	 * cache. The Collection should be a copy so that external
1:f07c8c7: 	 * synchronization isn't required.
1:f07c8c7: 	 *
1:b5ca246: 	 * <p>
1:b5ca246: 	 * This method should only be used for diagnostic purposes.
1:b5ca246: 	 *
1:f07c8c7: 	 * @return a Collection of all the elements in the cache
1:f07c8c7: 	 */
1:f07c8c7: 	public Collection values();
1:86ee0a0: 
1:86ee0a0:     /**
1:6da88fc:      * <p>
1:86ee0a0:      * Register an MBean that allows user to monitor this cache instance.
1:86ee0a0:      * This is a no-op if the platform does not support Java Management
1:86ee0a0:      * Extensions (JMX).
1:6da88fc:      * </p>
1:6da88fc:      *
1:6da88fc:      * <p>
1:6da88fc:      * The MBean will be automatically deregistered when {@link #shutdown()}
1:6da88fc:      * is called, or it can be manually deregistered by calling
1:6da88fc:      * {@link #deregisterMBean()}.
1:6da88fc:      * </p>
1:86ee0a0:      *
1:86ee0a0:      * @param dbName the unique name of the database to which the cache belongs
1:86ee0a0:      * @throws StandardException if an error occurs when registering the MBean
1:86ee0a0:      */
1:86ee0a0:     void registerMBean(String dbName) throws StandardException;
1:6da88fc: 
1:6da88fc:     /**
1:6da88fc:      * Deregister the MBean that monitors this cache. If there is no MBean
1:6da88fc:      * for this instance, this is a no-op.
1:6da88fc:      */
1:6da88fc:     void deregisterMBean();
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:6da88fc
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * </p>
1:      *
1:      * <p>
1:      * The MBean will be automatically deregistered when {@link #shutdown()}
1:      * is called, or it can be manually deregistered by calling
1:      * {@link #deregisterMBean()}.
1:      * </p>
1: 
1:     /**
1:      * Deregister the MBean that monitors this cache. If there is no MBean
1:      * for this instance, this is a no-op.
1:      */
1:     void deregisterMBean();
commit:86ee0a0
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Register an MBean that allows user to monitor this cache instance.
1:      * This is a no-op if the platform does not support Java Management
1:      * Extensions (JMX).
1:      *
1:      * @param dbName the unique name of the database to which the cache belongs
1:      * @throws StandardException if an error occurs when registering the MBean
1:      */
1:     void registerMBean(String dbName) throws StandardException;
commit:651fa21
/////////////////////////////////////////////////////////////////////////
1: 		in the background. The caller must ensure that it has exclusive access
1:         to the cache when this method is called. No synchronization is required
1:         in the implementations of this method.
commit:b5ca246
/////////////////////////////////////////////////////////////////////////
1: 		Release a <code>Cacheable</code> object previously found with
1: 		<code>find()</code> or <code>findCached()</code>, or created with
1: 		<code>create()</code>, and which is still kept by the caller.
1: 		@param entry the cached object to release
/////////////////////////////////////////////////////////////////////////
1: 		The object must previously have been found with <code>find()</code> or
1: 		<code>findCached()</code>, or created with <code>create()</code>, and
1: 		it must still be kept by the caller.
/////////////////////////////////////////////////////////////////////////
1: 		@param entry the object to remove from the cache
1: 
/////////////////////////////////////////////////////////////////////////
1: 		any more valid references on a <code>find()</code>,
1: 		<code>findCached()</code> or <code>create()</code> call,
/////////////////////////////////////////////////////////////////////////
1: 	 * <p>
1: 	 * This method should only be used for diagnostic purposes.
1: 	 *
commit:721f895
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f07c8c7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Return a Collection of the Cacheables currently in the
1: 	 * cache. The Collection should be a copy so that external
1: 	 * synchronization isn't required.
1: 	 *
1: 	 * @return a Collection of all the elements in the cache
1: 	 */
1: 	public Collection values();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
0:      * @exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:0380d9c
/////////////////////////////////////////////////////////////////////////
1: 		in the cache at the time of the call are placed in the clean state 
1:         sometime during this call. Objects that are added to the cache during 
1:         this call or objects that are dirtied during this call (by other 
1:         callers) are not guaranteed to be clean once this call returns.
/////////////////////////////////////////////////////////////////////////
1: 		In order to clean more than one object the Cacheable equals method must
1:         be able to handle a partial key, e.g. a page has PageKey but a clean 
1:         may pass a ContainerKey which will discard all pages in that container.
commit:d1d5ad1
/////////////////////////////////////////////////////////////////////////
1:         Find an object in the cache.
1:         <p>
/////////////////////////////////////////////////////////////////////////
1:         Find an object in the cache.
1:         <p>
/////////////////////////////////////////////////////////////////////////
0:      * @param keys the key of the used entry.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.cache.CacheManager
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface CacheManager {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.cache
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.cache;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.daemon.DaemonService;
1: 
1: import org.apache.derby.iapi.util.Matchable;
1: import org.apache.derby.iapi.util.Operator;
1: 
0: public interface CacheManager { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1:     /**
0:      * @return the current maximum size of the cache.
1:      */
0: 	public long getMaximumSize();
1: 
1:     /**
0:      * Change the maximum size of the cache. If the size is decreased then cache entries
0:      * will be thrown out.
0:      *
0:      * @param newSize the new maximum cache size
0:      *
0:      * @exception StandardException Cloudscape Standard error policy
1:      */
0: 	public void resize( long newSize) throws StandardException;
1: 
1: 	/**
1: 		Find an object in the cache that matches the key provided using the equals()
1: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
1: 		If the object does not exist in the cache it will be added by one of:
1: 		<UL>
1: 		<LI>creating a new holder object and calling its initParameter() method and then its
1: 		setIdentity() method with key as the parameter.
1: 		<LI>Calling clearIdentity() on an holder object in the clean state and then calling its
1: 		setIdentity() method with key as the parameter.
1: 		<LI>Calling clean() on a dirty holder object and then calling clearIdentity() on an
1: 		holder object in the clean state and then calling its setIdentity() method with key
1: 		as the parameter.
1: 		</UL>
1: 		In all cases the setIdentity() method is called with forCreate set to false. 
1: 		<BR>
1: 		The returned object is kept, i.e. its identity will not change, until the release()
1: 		method is called. The release() method must be called after the caller is finished
1: 		with the object and throw away the reference to it, e.g.
1: 		<PRE>
1: 			Page p = (Page) pageCache.find(pageKey);
1: 
1: 			// do stuff with p
1: 
1: 			// release p
1: 			pageCache.release(p);
1: 			p = null;
1: 			
1: 		</PRE>
1: 
1: 		@return A reference to an object in the cache, or null if the object cannot be found.
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 		@see Cacheable#setIdentity
1: 
1: 	*/
1: 	public Cacheable find(Object key) throws StandardException;
1: 
1: 	/**
1: 		Find an object in the cache that matches the key provided using the equals()
1: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
1: 		If a matching object does not exist in the cache, null is returned.
1: 		<BR>
1: 		The returned object is kept, i.e. its identity will not change, until the release()
1: 		method is called. The release() method must be called after the caller is finished
1: 		with the object and throw away the reference to it, e.g.
1: 		<PRE>
1: 			Page p = (Page) pageCache.findCached(pageKey);
1: 			if (p != null) {
1: 
1: 				// do stuff with p
1: 
1: 				// release p
1: 				pageCache.release(p);
1: 				p = null;
1: 			}
1: 			
1: 		</PRE>
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public Cacheable findCached(Object key) throws StandardException;
1: 
1:     /**
0:      * Determine whether a key is in the cache.
0:      *
0:      * <b>WARNING:</b> This method does not keep a lock on the entry or the cache, so
0:      * the return value could be made incorrect by the time that this method returns.
0:      * Therefore this method should only be used for statistical purposes.
1:      */
0:     public boolean containsKey( Object key);
1:     
1:     /**
0:      * Mark a set of entries as having been used. Normally this is done as a side effect
0:      * of find() or findCached. If the entry has been replaced then this method
0:      * does nothing.
0:      *
0:      * @param key the key of the used entry.
1:      */
0:     public void setUsed( Object[] keys);
1:     
1: 	/**
1: 		Create an object in the cache. The resulting object will match the key provided using the equals()
1: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
1: 		If an object that matches the key already exists in the cache then
1: 		an exception is thrown. 
1: 		<BR>
1: 		The object will be added by one of:
1: 		<UL>
1: 		<LI>creating a new holder object and calling its initParameter() method and then its
1: 		createIdentity() method with key as the parameter.
1: 		<LI>Calling clearIdentity() on an holder object in the clean state and then calling its
1: 		createIdentity() method with key as the parameter.
1: 		<LI>Calling clean() on a dirty holder object and then calling clearIdentity() on an
1: 		holder object in the clean state and then calling its createIdentity() method with key
1: 		as the parameter.
1: 		</UL>
1: 		In all cases the setIdentity() method is called with the createParameter as the second
1: 		argument.
1: 		If the object cannot be created then an exception is thrown by createIdentity.
1: 		<BR>
1: 		The returned object is kept, i.e. its identity will not change, until the release()
1: 		method is called. The release() method must be called after the caller is finished
1: 		with the object and throw away the reference to it, e.g.
1: 		<PRE>
1: 			Page p = (Page) pageCache.create(pageKey, createType);
1: 
1: 			// do stuff with p
1: 
1: 			// release p
1: 			pageCache.release(p);
1: 			p = null;
1: 			
1: 		</PRE>
1: 
1: 		@return A reference to an object in the cache.
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 		@see Cacheable#createIdentity
1: 
1: 	*/
1: 	public Cacheable create(Object key, Object createParameter) throws StandardException;
1: 
1: 	/**
0: 		Release a Cacheable object previously found with find() or findCached().
1: 		After this call the caller must throw away the reference to item.
1: 
1: 	*/
1: 	public void release(Cacheable entry);
1: 
1: 	/**
1: 		Delete and remove an object from the cache. It is up to the user of the cache
1: 		to provide synchronization of some form that ensures that only one caller
1: 		executes remove() on a cached object.
1: 		<BR>
0: 		The object must have previously been found with find() or findCached().
1: 		The item will be placed into the NoIdentity
1: 		state through clean(true) (if required) and clearIdentity(). The removal of the
1: 		object will be delayed until it is not kept by anyone. Objects that are in the
1: 		to be removed state can still be found through find() and findCached()
1: 		until their keep count drops to zero. This call waits until the object
1: 		has been removed.
1: 		<BR>
1: 		After this call the caller must throw away the reference to item.
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public void remove(Cacheable entry) throws StandardException;
1: 
1: 	/**
1: 		Place all objects in their clean state by calling their clean method
1: 		if they are dirty. This method guarantees that all objects that existed
0: 		in the cache at the time of the call are placed in the clean state sometime
0: 		during this call. Objects that are added to the cache during this call or
0: 		objects that are dirtied during this call (by other callers) are not guaranteed
0: 		to be clean once this call returns.
1: 
1: 		@see Cacheable#clean
1: 		@see Cacheable#isDirty
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public void cleanAll() throws StandardException;
1: 
1: 	/**
1: 		Clean all objects that match the partialKey (or exact key).
1: 		Any cached object that results in the partialKey.equals(Object)
1: 		method returning true when passed the cached object will be cleaned. 
1: 		<P>
0: 		In order to clean more than one object the Cacheable equals method must be able to handle
0: 		a partial key, e.g. a page has PageKey but a clean may pass a ContainerKey which will discard
1: 		all pages in that container.
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 	*/
1: 	public void clean(Matchable partialKey) throws StandardException;
1: 
1: 	/**
1: 		Age as many objects as possible out of the cache.
1: 		This call is guaranteed not to block.
1: 		It is not guaranteed to leave the cache empty.
1: 
1: 		<BR>
1: 		It is guaranteed that all unkept, clean objects will be
1: 		removed from the cache.
1: 
1: 		@see Cacheable#clean
1: 		@see Cacheable#clearIdentity
1: 
1: 
1: 	*/
1: 	public void ageOut();
1: 
1: 	/**
1: 		Shutdown the cache. This call stops the cache returning
0: 		any more valid references on a find() or findCached() call,
1: 		and then cleanAll() and ageOut() are called. The cache remains
1: 		in existence until the last kept object has been unkept.
1: 
0: 		@exception StandardException Standard Cloudscape error policy.
1: 
1: 	*/
1: 	public void shutdown() throws StandardException;
1: 
1: 	/**
1: 		This cache can use this DaemonService if it needs some work to be done
0: 		int he background 
1: 	*/
1: 	public void useDaemonService(DaemonService daemon);
1: 
1: 
1: 	/**
1: 		Discard all objects that match the partialKey (or exact key).
1: 		Any cached object that results in the partialKey.equals(Object)
1: 		method returning true when passed the cached object will be thrown out of the cache
1: 		if and only if it is not in use. The Cacheable
1: 		will be discarded without its clean method being called.
1: 		<P>
1: 		If partialKey is null, it matches all objects.  This is a way to
1: 		discard all objects from the cache in case of emergency shutdown.
1: 		<P>
1: 		In order to discard more than one object the Cacheable equals method must be able to handle
1: 		a partial key, e.g. a page has PageKey but a discard may pass a ContainerKey which will discard
1: 		all pages in that container.
1: 		<P>
1: 		@return true if discard has successful gotten rid of all objects that
1: 		match the partial or exact key.  False if some objects that matches
1: 		were not gotten rid of because it was kept.
1: 	*/
1: 	public boolean discard(Matchable partialKey);
1: 
1: 	/**
0: 		Report the number of items in use (with Identity) in this cache.
1: 	 */
0: 	public int getNumberInUse();
1: 
1: 	/**
0: 		Return statistics about cache that may be implemented.
0: 	**/
0: 	public long[] getCacheStats();
1: 
1: 	/**
0: 		reset the cache statistics to 0.
0: 	**/
0: 	public void resetCacheStats();
1: 
1:     /**
0:      * Perform an operation on (approximately) all entries that matches the filter,
0:      * or all entries if the filter is null.  Entries that are added while the
0:      * cache is being scanned might or might not be missed.
0:      *
0:      * @param filter
0:      * @param operator
1:      */
0:     public void scan( Matchable filter, Operator operator);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.cache
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.cache;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.daemon.DaemonService;
0: 
0: import org.apache.derby.iapi.util.Matchable;
0: import org.apache.derby.iapi.util.Operator;
0: 
0: public interface CacheManager { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0:     /**
0:      * @return the current maximum size of the cache.
0:      */
0: 	public long getMaximumSize();
0: 
0:     /**
0:      * Change the maximum size of the cache. If the size is decreased then cache entries
0:      * will be thrown out.
0:      *
0:      * @param newSize the new maximum cache size
0:      *
0:      * @exception StandardException Cloudscape Standard error policy
0:      */
0: 	public void resize( long newSize) throws StandardException;
0: 
0: 	/**
0: 		Find an object in the cache that matches the key provided using the equals()
0: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
0: 		If the object does not exist in the cache it will be added by one of:
0: 		<UL>
0: 		<LI>creating a new holder object and calling its initParameter() method and then its
0: 		setIdentity() method with key as the parameter.
0: 		<LI>Calling clearIdentity() on an holder object in the clean state and then calling its
0: 		setIdentity() method with key as the parameter.
0: 		<LI>Calling clean() on a dirty holder object and then calling clearIdentity() on an
0: 		holder object in the clean state and then calling its setIdentity() method with key
0: 		as the parameter.
0: 		</UL>
0: 		In all cases the setIdentity() method is called with forCreate set to false. 
0: 		<BR>
0: 		The returned object is kept, i.e. its identity will not change, until the release()
0: 		method is called. The release() method must be called after the caller is finished
0: 		with the object and throw away the reference to it, e.g.
0: 		<PRE>
0: 			Page p = (Page) pageCache.find(pageKey);
0: 
0: 			// do stuff with p
0: 
0: 			// release p
0: 			pageCache.release(p);
0: 			p = null;
0: 			
0: 		</PRE>
0: 
0: 		@return A reference to an object in the cache, or null if the object cannot be found.
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 		@see Cacheable#setIdentity
0: 
0: 	*/
0: 	public Cacheable find(Object key) throws StandardException;
0: 
0: 	/**
0: 		Find an object in the cache that matches the key provided using the equals()
0: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
0: 		If a matching object does not exist in the cache, null is returned.
0: 		<BR>
0: 		The returned object is kept, i.e. its identity will not change, until the release()
0: 		method is called. The release() method must be called after the caller is finished
0: 		with the object and throw away the reference to it, e.g.
0: 		<PRE>
0: 			Page p = (Page) pageCache.findCached(pageKey);
0: 			if (p != null) {
0: 
0: 				// do stuff with p
0: 
0: 				// release p
0: 				pageCache.release(p);
0: 				p = null;
0: 			}
0: 			
0: 		</PRE>
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public Cacheable findCached(Object key) throws StandardException;
0: 
0:     /**
0:      * Determine whether a key is in the cache.
0:      *
0:      * <b>WARNING:</b> This method does not keep a lock on the entry or the cache, so
0:      * the return value could be made incorrect by the time that this method returns.
0:      * Therefore this method should only be used for statistical purposes.
0:      */
0:     public boolean containsKey( Object key);
0:     
0:     /**
0:      * Mark a set of entries as having been used. Normally this is done as a side effect
0:      * of find() or findCached. If the entry has been replaced then this method
0:      * does nothing.
0:      *
0:      * @param key the key of the used entry.
0:      */
0:     public void setUsed( Object[] keys);
0:     
0: 	/**
0: 		Create an object in the cache. The resulting object will match the key provided using the equals()
0: 		method, i.e. the return Cacheable will have getIdentifier.equals(key) true.
0: 		If an object that matches the key already exists in the cache then
0: 		an exception is thrown. 
0: 		<BR>
0: 		The object will be added by one of:
0: 		<UL>
0: 		<LI>creating a new holder object and calling its initParameter() method and then its
0: 		createIdentity() method with key as the parameter.
0: 		<LI>Calling clearIdentity() on an holder object in the clean state and then calling its
0: 		createIdentity() method with key as the parameter.
0: 		<LI>Calling clean() on a dirty holder object and then calling clearIdentity() on an
0: 		holder object in the clean state and then calling its createIdentity() method with key
0: 		as the parameter.
0: 		</UL>
0: 		In all cases the setIdentity() method is called with the createParameter as the second
0: 		argument.
0: 		If the object cannot be created then an exception is thrown by createIdentity.
0: 		<BR>
0: 		The returned object is kept, i.e. its identity will not change, until the release()
0: 		method is called. The release() method must be called after the caller is finished
0: 		with the object and throw away the reference to it, e.g.
0: 		<PRE>
0: 			Page p = (Page) pageCache.create(pageKey, createType);
0: 
0: 			// do stuff with p
0: 
0: 			// release p
0: 			pageCache.release(p);
0: 			p = null;
0: 			
0: 		</PRE>
0: 
0: 		@return A reference to an object in the cache.
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 		@see Cacheable#createIdentity
0: 
0: 	*/
0: 	public Cacheable create(Object key, Object createParameter) throws StandardException;
0: 
0: 	/**
0: 		Release a Cacheable object previously found with find() or findCached().
0: 		After this call the caller must throw away the reference to item.
0: 
0: 	*/
0: 	public void release(Cacheable entry);
0: 
0: 	/**
0: 		Delete and remove an object from the cache. It is up to the user of the cache
0: 		to provide synchronization of some form that ensures that only one caller
0: 		executes remove() on a cached object.
0: 		<BR>
0: 		The object must have previously been found with find() or findCached().
0: 		The item will be placed into the NoIdentity
0: 		state through clean(true) (if required) and clearIdentity(). The removal of the
0: 		object will be delayed until it is not kept by anyone. Objects that are in the
0: 		to be removed state can still be found through find() and findCached()
0: 		until their keep count drops to zero. This call waits until the object
0: 		has been removed.
0: 		<BR>
0: 		After this call the caller must throw away the reference to item.
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public void remove(Cacheable entry) throws StandardException;
0: 
0: 	/**
0: 		Place all objects in their clean state by calling their clean method
0: 		if they are dirty. This method guarantees that all objects that existed
0: 		in the cache at the time of the call are placed in the clean state sometime
0: 		during this call. Objects that are added to the cache during this call or
0: 		objects that are dirtied during this call (by other callers) are not guaranteed
0: 		to be clean once this call returns.
0: 
0: 		@see Cacheable#clean
0: 		@see Cacheable#isDirty
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public void cleanAll() throws StandardException;
0: 
0: 	/**
0: 		Clean all objects that match the partialKey (or exact key).
0: 		Any cached object that results in the partialKey.equals(Object)
0: 		method returning true when passed the cached object will be cleaned. 
0: 		<P>
0: 		In order to clean more than one object the Cacheable equals method must be able to handle
0: 		a partial key, e.g. a page has PageKey but a clean may pass a ContainerKey which will discard
0: 		all pages in that container.
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 	*/
0: 	public void clean(Matchable partialKey) throws StandardException;
0: 
0: 	/**
0: 		Age as many objects as possible out of the cache.
0: 		This call is guaranteed not to block.
0: 		It is not guaranteed to leave the cache empty.
0: 
0: 		<BR>
0: 		It is guaranteed that all unkept, clean objects will be
0: 		removed from the cache.
0: 
0: 		@see Cacheable#clean
0: 		@see Cacheable#clearIdentity
0: 
0: 
0: 	*/
0: 	public void ageOut();
0: 
0: 	/**
0: 		Shutdown the cache. This call stops the cache returning
0: 		any more valid references on a find() or findCached() call,
0: 		and then cleanAll() and ageOut() are called. The cache remains
0: 		in existence until the last kept object has been unkept.
0: 
0: 		@exception StandardException Standard Cloudscape error policy.
0: 
0: 	*/
0: 	public void shutdown() throws StandardException;
0: 
0: 	/**
0: 		This cache can use this DaemonService if it needs some work to be done
0: 		int he background 
0: 	*/
0: 	public void useDaemonService(DaemonService daemon);
0: 
0: 
0: 	/**
0: 		Discard all objects that match the partialKey (or exact key).
0: 		Any cached object that results in the partialKey.equals(Object)
0: 		method returning true when passed the cached object will be thrown out of the cache
0: 		if and only if it is not in use. The Cacheable
0: 		will be discarded without its clean method being called.
0: 		<P>
0: 		If partialKey is null, it matches all objects.  This is a way to
0: 		discard all objects from the cache in case of emergency shutdown.
0: 		<P>
0: 		In order to discard more than one object the Cacheable equals method must be able to handle
0: 		a partial key, e.g. a page has PageKey but a discard may pass a ContainerKey which will discard
0: 		all pages in that container.
0: 		<P>
0: 		@return true if discard has successful gotten rid of all objects that
0: 		match the partial or exact key.  False if some objects that matches
0: 		were not gotten rid of because it was kept.
0: 	*/
0: 	public boolean discard(Matchable partialKey);
0: 
0: 	/**
0: 		Report the number of items in use (with Identity) in this cache.
0: 	 */
0: 	public int getNumberInUse();
0: 
0: 	/**
0: 		Return statistics about cache that may be implemented.
0: 	**/
0: 	public long[] getCacheStats();
0: 
0: 	/**
0: 		reset the cache statistics to 0.
0: 	**/
0: 	public void resetCacheStats();
0: 
0:     /**
0:      * Perform an operation on (approximately) all entries that matches the filter,
0:      * or all entries if the filter is null.  Entries that are added while the
0:      * cache is being scanned might or might not be missed.
0:      *
0:      * @param filter
0:      * @param operator
0:      */
0:     public void scan( Matchable filter, Operator operator);
0: }
============================================================================