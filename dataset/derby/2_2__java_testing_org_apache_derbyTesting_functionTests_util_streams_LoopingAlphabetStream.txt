1:10cc70b: /*
1:10cc70b: 
1:10cc70b:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream
1:10cc70b: 
1:10cc70b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:10cc70b:    contributor license agreements.  See the NOTICE file distributed with
1:10cc70b:    this work for additional information regarding copyright ownership.
1:10cc70b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:10cc70b:    (the "License"); you may not use this file except in compliance with
1:10cc70b:    the License.  You may obtain a copy of the License at
1:10cc70b: 
1:10cc70b:       http://www.apache.org/licenses/LICENSE-2.0
1:10cc70b: 
1:10cc70b:    Unless required by applicable law or agreed to in writing, software
1:10cc70b:    distributed under the License is distributed on an "AS IS" BASIS,
1:10cc70b:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10cc70b:    See the License for the specific language governing permissions and
1:10cc70b:    limitations under the License.
1:10cc70b: 
1:10cc70b:  */
1:10cc70b: 
1:10cc70b: package org.apache.derbyTesting.functionTests.util.streams;
1:10cc70b: 
1:10cc70b: import java.io.InputStream;
1:18fca03: 
1:18fca03: import org.apache.derby.iapi.types.Resetable;
1:10cc70b: 
1:10cc70b: /**
1:10cc70b:  * A stream returning a cycle of the 26 lowercase letters of the modern Latin
1:10cc70b:  * alphabet.
1:10cc70b:  */
1:10cc70b: public class LoopingAlphabetStream
1:18fca03:     extends InputStream
1:18fca03:     implements Resetable {
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Maximum size of buffer.
1:10cc70b:      * Balance between size and memory usage.
1:10cc70b:      */
1:10cc70b:     private static final int MAX_BUF_SIZE = 32*1024;
1:10cc70b:     private static final byte SPACE = (byte)' ';
1:10cc70b: 
1:10cc70b:     /** Length of the stream. */
1:10cc70b:     private final long length;
1:8ae64be:     private final int trailingBlanks;
1:10cc70b:     /** Remaining bytes in the stream. */
1:10cc70b:     private long remainingBlanks;
1:10cc70b:     private long remainingNonBlanks;
1:10cc70b:     private byte[] buffer = new byte[0];
1:10cc70b:     private final ByteAlphabet alphabet;
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a looping modern latin alphabet stream of the specified length.
1:10cc70b:      *
1:10cc70b:      * @param length the number of characters (and also the number of bytes)
1:10cc70b:      */
1:10cc70b:     public LoopingAlphabetStream(long length) {
1:10cc70b:         this(length, 0);
1:10cc70b:     }
1:10cc70b: 
1:18fca03:     /**
1:18fca03:      * Creates a looping alphabet stream with the specified length, in which the
1:18fca03:      * last characters are blanks.
1:18fca03:      *
1:18fca03:      * @param length total length of the stream
1:18fca03:      * @param trailingBlanks number of trailing blanks
1:18fca03:      */
1:10cc70b:     public LoopingAlphabetStream(long length, int trailingBlanks) {
1:18fca03:         if (trailingBlanks > length) {
1:18fca03:             throw new IllegalArgumentException("Number of trailing blanks " +
1:18fca03:                     "cannot be greater than the total length.");
1:18fca03:         }
1:10cc70b:         this.length = length;
1:10cc70b:         this.trailingBlanks = trailingBlanks;
1:10cc70b:         this.remainingNonBlanks = length - trailingBlanks;
1:10cc70b:         this.remainingBlanks = trailingBlanks;
1:10cc70b:         this.alphabet = ByteAlphabet.modernLatinLowercase();
1:10cc70b:         fillBuffer(alphabet.byteCount());
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Create a looping alphabet of the specified type and length.
1:10cc70b:      *
1:10cc70b:      * @param length the number of bytes in the stream
1:10cc70b:      * @param alphabet the alphabet to loop over
1:10cc70b:      */
1:10cc70b:     public LoopingAlphabetStream(long length, ByteAlphabet alphabet) {
1:10cc70b:         this(length, alphabet, 0);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     public LoopingAlphabetStream(long length,
1:10cc70b:                                  ByteAlphabet alphabet,
1:10cc70b:                                  int trailingBlanks) {
1:10cc70b:         this.length = length;
1:10cc70b:         this.trailingBlanks = trailingBlanks;
1:10cc70b:         this.remainingNonBlanks = length - trailingBlanks;
1:10cc70b:         this.remainingBlanks = trailingBlanks;
1:10cc70b:         this.alphabet = alphabet;
1:10cc70b:         fillBuffer(alphabet.byteCount());
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     public int read() {
1:10cc70b:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:10cc70b:             return -1;
1:10cc70b:         }
1:10cc70b:         if (remainingNonBlanks <= 0) {
1:10cc70b:             remainingBlanks--;
1:10cc70b:             return SPACE;
1:10cc70b:         }
1:10cc70b:         remainingNonBlanks--;
1:8ee828b:         return (alphabet.nextByte() & 0xff);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     public int read(byte[] buf, int off, int length) {
1:10cc70b:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:10cc70b:             return -1;
1:10cc70b:         }
1:10cc70b:         // We can only read as many bytes as there are in the stream.
1:ff0d59f:         int nonBlankLength = (int)Math.min(remainingNonBlanks, (long)length);
1:10cc70b:         fillBuffer(nonBlankLength);
1:10cc70b:         int read = 0;
1:10cc70b:         // Find position of next letter in the buffer.
1:10cc70b:         int bOff = alphabet.nextByteToRead(0);
1:10cc70b:         if (nonBlankLength <= (buffer.length - bOff)) {
1:10cc70b:             System.arraycopy(buffer, bOff, buf, off, nonBlankLength);
1:10cc70b:             remainingNonBlanks -= nonBlankLength;
1:10cc70b:             read = nonBlankLength;
1:10cc70b:             alphabet.nextByteToRead(nonBlankLength);
1:10cc70b:         } else {
1:10cc70b:             // Must read several times from the buffer.
1:10cc70b:             int toRead = 0;
1:10cc70b:             while (remainingNonBlanks > 0 && read < nonBlankLength) {
1:10cc70b:                 bOff = alphabet.nextByteToRead(toRead);
1:10cc70b:                 toRead = Math.min(buffer.length - bOff, nonBlankLength - read);
1:10cc70b:                 System.arraycopy(buffer, bOff, buf, off + read, toRead);
1:10cc70b:                 remainingNonBlanks -= toRead;
1:10cc70b:                 read += toRead;
1:10cc70b:             }
1:10cc70b:             bOff = alphabet.nextByteToRead(toRead);
1:10cc70b:         }
1:10cc70b:         if (read < length && remainingBlanks > 0) {
1:10cc70b:             read += fillBlanks(buf, off + read, length - read);
1:10cc70b:         }
1:10cc70b:         return read;
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Reset the stream.
1:10cc70b:      */
1:10cc70b:     public void reset() {
1:10cc70b:         remainingNonBlanks = length - trailingBlanks;
1:10cc70b:         remainingBlanks = trailingBlanks;
1:10cc70b:         alphabet.reset();
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Return remaining bytes in the stream.
1:10cc70b:      */
1:10cc70b:     public int available() {
1:10cc70b:         return (int)(remainingNonBlanks + remainingBlanks);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     /**
1:10cc70b:      * Fill internal buffer of bytes (from character sequence).
1:10cc70b:      *
1:10cc70b:      * @param bufSize the wanted size, might be ignored if too big
1:10cc70b:      */
1:10cc70b:     private void fillBuffer(int bufSize) {
1:10cc70b:         if (bufSize > MAX_BUF_SIZE) {
1:10cc70b:             bufSize = MAX_BUF_SIZE;
1:10cc70b:         }
1:10cc70b:         if (bufSize <= buffer.length) {
1:10cc70b:             return;
1:10cc70b:         }
1:10cc70b:         int curOff = alphabet.nextByteToRead(0);
1:10cc70b:         // First letter in buffer is always the first letter in the alphabet.
1:10cc70b:         alphabet.reset();
1:10cc70b:         buffer = new byte[bufSize];
1:10cc70b:         for (int i=0; i < bufSize; i++) {
1:10cc70b:             buffer[i] = alphabet.nextByte();
1:10cc70b:         }
1:10cc70b:         // Must reset internal state of the alphabet, as we have not yet
1:10cc70b:         // delivered any bytes.
1:10cc70b:         alphabet.reset();
1:10cc70b:         alphabet.nextByteToRead(curOff);
1:10cc70b:     }
1:10cc70b: 
1:10cc70b:     private int fillBlanks(byte[] buf, int off, int length) {
1:10cc70b:         int i=0;
1:10cc70b:         for (; i < length; i++) {
1:10cc70b:             if (remainingBlanks > 0) {
1:10cc70b:                 buf[off+i] = SPACE;
1:10cc70b:                 remainingBlanks--;
1:10cc70b:             } else {
1:10cc70b:                 break;
1:10cc70b:             }
1:10cc70b:         }
1:10cc70b:         return i;
1:10cc70b:     }
1:18fca03: 
1:18fca03:     // Resetable interface
1:18fca03: 
1:18fca03:     public void resetStream() {
1:18fca03:         reset();
1:18fca03:     }
1:18fca03: 
1:18fca03:     public void initStream() {
1:18fca03:         reset();
1:18fca03:     }
1:18fca03: 
1:18fca03:     public void closeStream() {
1:18fca03:         // Does nothing for this stream.
1:18fca03:     }
1:10cc70b: } // End class LoopingAlphabetStream
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:18fca03
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.derby.iapi.types.Resetable;
1:     extends InputStream
1:     implements Resetable {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Creates a looping alphabet stream with the specified length, in which the
1:      * last characters are blanks.
1:      *
1:      * @param length total length of the stream
1:      * @param trailingBlanks number of trailing blanks
1:      */
1:         if (trailingBlanks > length) {
1:             throw new IllegalArgumentException("Number of trailing blanks " +
1:                     "cannot be greater than the total length.");
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Resetable interface
1: 
1:     public void resetStream() {
1:         reset();
1:     }
1: 
1:     public void initStream() {
1:         reset();
1:     }
1: 
1:     public void closeStream() {
1:         // Does nothing for this stream.
1:     }
commit:ff0d59f
/////////////////////////////////////////////////////////////////////////
1:         int nonBlankLength = (int)Math.min(remainingNonBlanks, (long)length);
commit:8ae64be
/////////////////////////////////////////////////////////////////////////
1:     private final int trailingBlanks;
commit:8ee828b
/////////////////////////////////////////////////////////////////////////
1:         return (alphabet.nextByte() & 0xff);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:10cc70b
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util.streams;
1: 
1: import java.io.InputStream;
0: import java.io.IOException;
1: 
1: /**
1:  * A stream returning a cycle of the 26 lowercase letters of the modern Latin
1:  * alphabet.
1:  */
1: public class LoopingAlphabetStream
0:     extends InputStream {
1: 
1:     /**
1:      * Maximum size of buffer.
1:      * Balance between size and memory usage.
1:      */
1:     private static final int MAX_BUF_SIZE = 32*1024;
1:     private static final byte SPACE = (byte)' ';
1: 
1:     /** Length of the stream. */
1:     private final long length;
0:     private final int trailingBlanks; 
1:     /** Remaining bytes in the stream. */
1:     private long remainingBlanks;
1:     private long remainingNonBlanks;
1:     private byte[] buffer = new byte[0];
1:     private final ByteAlphabet alphabet;
1: 
1:     /**
1:      * Create a looping modern latin alphabet stream of the specified length.
1:      *
1:      * @param length the number of characters (and also the number of bytes)
1:      */
1:     public LoopingAlphabetStream(long length) {
1:         this(length, 0);
1:     }
1: 
1:     public LoopingAlphabetStream(long length, int trailingBlanks) {
1:         this.length = length;
1:         this.trailingBlanks = trailingBlanks;
1:         this.remainingNonBlanks = length - trailingBlanks;
1:         this.remainingBlanks = trailingBlanks;
1:         this.alphabet = ByteAlphabet.modernLatinLowercase();
1:         fillBuffer(alphabet.byteCount());
1:     }
1: 
1:     /**
1:      * Create a looping alphabet of the specified type and length.
1:      *
1:      * @param length the number of bytes in the stream
1:      * @param alphabet the alphabet to loop over
1:      */
1:     public LoopingAlphabetStream(long length, ByteAlphabet alphabet) {
1:         this(length, alphabet, 0);
1:     }
1: 
1:     public LoopingAlphabetStream(long length,
1:                                  ByteAlphabet alphabet,
1:                                  int trailingBlanks) {
1:         this.length = length;
1:         this.trailingBlanks = trailingBlanks;
1:         this.remainingNonBlanks = length - trailingBlanks;
1:         this.remainingBlanks = trailingBlanks;
1:         this.alphabet = alphabet;
1:         fillBuffer(alphabet.byteCount());
1:     }
1: 
1:     public int read() {
1:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:             return -1;
1:         }
1:         if (remainingNonBlanks <= 0) {
1:             remainingBlanks--;
1:             return SPACE;
1:         }
1:         remainingNonBlanks--;
0:         return alphabet.nextByte();
1:     }
1: 
1:     public int read(byte[] buf, int off, int length) {
1:         if (remainingBlanks <= 0 && remainingNonBlanks <= 0) {
1:             return -1;
1:         }
1:         // We can only read as many bytes as there are in the stream.
0:         int nonBlankLength = Math.min((int)remainingNonBlanks, length);
1:         fillBuffer(nonBlankLength);
1:         int read = 0;
1:         // Find position of next letter in the buffer.
1:         int bOff = alphabet.nextByteToRead(0);
1:         if (nonBlankLength <= (buffer.length - bOff)) {
1:             System.arraycopy(buffer, bOff, buf, off, nonBlankLength);
1:             remainingNonBlanks -= nonBlankLength;
1:             read = nonBlankLength;
1:             alphabet.nextByteToRead(nonBlankLength);
1:         } else {
1:             // Must read several times from the buffer.
1:             int toRead = 0;
1:             while (remainingNonBlanks > 0 && read < nonBlankLength) {
1:                 bOff = alphabet.nextByteToRead(toRead);
1:                 toRead = Math.min(buffer.length - bOff, nonBlankLength - read);
1:                 System.arraycopy(buffer, bOff, buf, off + read, toRead);
1:                 remainingNonBlanks -= toRead;
1:                 read += toRead;
1:             }
1:             bOff = alphabet.nextByteToRead(toRead);
1:         }
1:         if (read < length && remainingBlanks > 0) {
1:             read += fillBlanks(buf, off + read, length - read);
1:         }
1:         return read;
1:     }
1: 
1:     /**
1:      * Reset the stream.
1:      */
1:     public void reset() {
1:         remainingNonBlanks = length - trailingBlanks;
1:         remainingBlanks = trailingBlanks;
1:         alphabet.reset();
1:     }
1: 
1:     /**
1:      * Return remaining bytes in the stream.
1:      */
1:     public int available() {
1:         return (int)(remainingNonBlanks + remainingBlanks);
1:     }
1: 
1:     /**
1:      * Fill internal buffer of bytes (from character sequence).
1:      *
1:      * @param bufSize the wanted size, might be ignored if too big
1:      */
1:     private void fillBuffer(int bufSize) {
1:         if (bufSize > MAX_BUF_SIZE) {
1:             bufSize = MAX_BUF_SIZE;
1:         }
1:         if (bufSize <= buffer.length) {
1:             return;
1:         }
1:         int curOff = alphabet.nextByteToRead(0);
1:         // First letter in buffer is always the first letter in the alphabet.
1:         alphabet.reset();
1:         buffer = new byte[bufSize];
1:         for (int i=0; i < bufSize; i++) {
1:             buffer[i] = alphabet.nextByte();
1:         }
1:         // Must reset internal state of the alphabet, as we have not yet
1:         // delivered any bytes.
1:         alphabet.reset();
1:         alphabet.nextByteToRead(curOff);
1:     }
1: 
1:     private int fillBlanks(byte[] buf, int off, int length) {
1:         int i=0;
1:         for (; i < length; i++) {
1:             if (remainingBlanks > 0) {
1:                 buf[off+i] = SPACE;
1:                 remainingBlanks--;
1:             } else {
1:                 break;
1:             }
1:         }
1:         return i;
1:     }
1: } // End class LoopingAlphabetStream
============================================================================