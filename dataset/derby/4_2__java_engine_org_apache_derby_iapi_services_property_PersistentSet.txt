1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.property.PersistentSet
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.property;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: import java.io.Serializable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: public interface PersistentSet
1:eac0369: {
2:eac0369:     /**
1:eac0369:      * Gets a value for a stored property. The returned value will be:
1:eac0369: 	 *
1:eac0369: 	 * <OL>
1:eac0369: 	 * <LI> the de-serialized object associated with the key
1:eac0369: 	 *      using setProperty if such a value is defined or
1:eac0369: 	 * <LI> the default de-serialized object associated with
1:eac0369: 	 *      the key using setPropertyDefault if such a value
1:eac0369: 	 *      is defined or
1:eac0369: 	 * <LI> null
1:eac0369: 	 * </OL>
1:eac0369: 	 *      
1:eac0369:      * <p>
1:eac0369:      * The Store provides a transaction protected list of database properties.
1:eac0369:      * Higher levels of the system can store and retrieve these properties
1:eac0369:      * once Recovery has finished. Each property is a serializable object
1:eac0369:      * and is stored/retrieved using a String key.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param key     The "key" of the property that is being requested.
1:eac0369:      *
1:eac0369: 	 * @return object The requested object or null.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public Serializable getProperty(
1:eac0369:     String key) 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Gets a default value for a stored property. The returned
1:eac0369: 	 * value will be:
1:eac0369: 	 *
1:eac0369: 	 * <OL>
1:eac0369: 	 * <LI> the default de-serialized object associated with
1:eac0369: 	 *      the key using setPropertyDefault if such a value
1:eac0369: 	 *      is defined or
1:eac0369: 	 * <LI> null
1:eac0369: 	 * </OL>
1:eac0369: 	 *      
1:eac0369:      * <p>
1:eac0369:      * The Store provides a transaction protected list of database properties.
1:eac0369:      * Higher levels of the system can store and retrieve these properties
1:eac0369:      * once Recovery has finished. Each property is a serializable object
1:eac0369:      * and is stored/retrieved using a String key.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369:      * @param key     The "key" of the property that is being requested.
1:eac0369:      *
1:eac0369: 	 * @return object The requested object or null.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public Serializable getPropertyDefault(
1:eac0369:     String key) 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return true if the default property is visible. A default
1:eac0369: 	 * is visible as long as the property is not set.
1:eac0369:      *
1:eac0369:      * @param key     The "key" of the property that is being requested.
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public boolean propertyDefaultIsVisible(String key) throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Sets the Serializable object associated with a property key.
1:eac0369:      * <p>
1:eac0369:      * See the discussion of getProperty().
1:eac0369:      * <p>
1:eac0369:      * The value stored may be a Formatable object or a Serializable object
1:eac0369: 	 * whose class name starts with java.*. This stops arbitary objects being
1:eac0369: 	 * stored in the database by class name, which will cause problems in
1:eac0369: 	 * obfuscated/non-obfuscated systems.
1:eac0369:      *
1:eac0369: 	 * @param	key		The key used to lookup this property.
1:eac0369: 	 * @param	value	The value to be associated with this key. If null, 
1:eac0369:      *                  delete the property from the properties list.
1:eac0369: 	   @param   dbOnlyProperty True if property is only ever searched for int the database properties.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void	setProperty(
1:eac0369:     String          key, 
1:eac0369:     Serializable    value,
1:eac0369: 	boolean dbOnlyProperty) 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Sets the Serializable object default value associated with a property
1:eac0369: 	 * key.
1:eac0369:      * <p>
1:eac0369:      * See the discussion of getProperty().
1:eac0369:      * <p>
1:eac0369:      * The value stored may be a Formatable object or a Serializable object
1:eac0369: 	 * whose class name starts with java.*. This stops arbitary objects being
1:eac0369: 	 * stored in the database by class name, which will cause problems in
1:eac0369: 	 * obfuscated/non-obfuscated systems.
1:eac0369:      *
1:eac0369: 	 * @param	key		The key used to lookup this propertyDefault.
1:eac0369: 	 * @param	value	The default value to be associated with this key. 
1:eac0369:      *                  If null, delete the property default from the
1:eac0369: 	 *                  properties list.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void	setPropertyDefault(
1:eac0369:     String          key, 
1:eac0369:     Serializable    value) 
1:eac0369:         throws StandardException;
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Get properties that can be stored in a java.util.Properties object.
1:eac0369:      * <p>
1:eac0369: 	 * Get the sub-set of stored properties that can be stored in a 
1:eac0369:      * java.util.Properties object. That is all the properties that have a
1:eac0369:      * value of type java.lang.String.  Changes to this properties object are
1:eac0369:      * not reflected in any persisent storage.
1:eac0369:      * <p>
1:eac0369:      * Code must use the setProperty() method call.
1:eac0369:      *
1:eac0369: 	 * @return The sub-set of stored properties that can be stored in a 
1:eac0369:      *         java.util.Propertes object.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369: 	public Properties getProperties() 
1:eac0369:         throws StandardException;
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.property.PersistentSet
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.property;
1: 
1: import java.util.Properties;
1: 
1: import java.io.Serializable;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public interface PersistentSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1:     /**
1:      * Gets a value for a stored property. The returned value will be:
1: 	 *
1: 	 * <OL>
1: 	 * <LI> the de-serialized object associated with the key
1: 	 *      using setProperty if such a value is defined or
1: 	 * <LI> the default de-serialized object associated with
1: 	 *      the key using setPropertyDefault if such a value
1: 	 *      is defined or
1: 	 * <LI> null
1: 	 * </OL>
1: 	 *      
1:      * <p>
1:      * The Store provides a transaction protected list of database properties.
1:      * Higher levels of the system can store and retrieve these properties
1:      * once Recovery has finished. Each property is a serializable object
1:      * and is stored/retrieved using a String key.
1:      * <p>
1:      *
1:      * @param key     The "key" of the property that is being requested.
1:      *
1: 	 * @return object The requested object or null.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public Serializable getProperty(
1:     String key) 
1:         throws StandardException;
1: 
1:     /**
1:      * Gets a default value for a stored property. The returned
1: 	 * value will be:
1: 	 *
1: 	 * <OL>
1: 	 * <LI> the default de-serialized object associated with
1: 	 *      the key using setPropertyDefault if such a value
1: 	 *      is defined or
1: 	 * <LI> null
1: 	 * </OL>
1: 	 *      
1:      * <p>
1:      * The Store provides a transaction protected list of database properties.
1:      * Higher levels of the system can store and retrieve these properties
1:      * once Recovery has finished. Each property is a serializable object
1:      * and is stored/retrieved using a String key.
1:      * <p>
1:      *
1:      * @param key     The "key" of the property that is being requested.
1:      *
1: 	 * @return object The requested object or null.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public Serializable getPropertyDefault(
1:     String key) 
1:         throws StandardException;
1: 
1: 
1:     /**
1:      * Return true if the default property is visible. A default
1: 	 * is visible as long as the property is not set.
1:      *
1:      * @param key     The "key" of the property that is being requested.
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public boolean propertyDefaultIsVisible(String key) throws StandardException;
1: 
1:     /**
1:      * Sets the Serializable object associated with a property key.
1:      * <p>
1:      * See the discussion of getProperty().
1:      * <p>
1:      * The value stored may be a Formatable object or a Serializable object
1: 	 * whose class name starts with java.*. This stops arbitary objects being
1: 	 * stored in the database by class name, which will cause problems in
1: 	 * obfuscated/non-obfuscated systems.
1:      *
1: 	 * @param	key		The key used to lookup this property.
1: 	 * @param	value	The value to be associated with this key. If null, 
1:      *                  delete the property from the properties list.
1: 	   @param   dbOnlyProperty True if property is only ever searched for int the database properties.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void	setProperty(
1:     String          key, 
1:     Serializable    value,
1: 	boolean dbOnlyProperty) 
1:         throws StandardException;
1: 
1:     /**
1:      * Sets the Serializable object default value associated with a property
1: 	 * key.
1:      * <p>
1:      * See the discussion of getProperty().
1:      * <p>
1:      * The value stored may be a Formatable object or a Serializable object
1: 	 * whose class name starts with java.*. This stops arbitary objects being
1: 	 * stored in the database by class name, which will cause problems in
1: 	 * obfuscated/non-obfuscated systems.
1:      *
1: 	 * @param	key		The key used to lookup this propertyDefault.
1: 	 * @param	value	The default value to be associated with this key. 
1:      *                  If null, delete the property default from the
1: 	 *                  properties list.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void	setPropertyDefault(
1:     String          key, 
1:     Serializable    value) 
1:         throws StandardException;
1: 
1:     /**
1:      * Get properties that can be stored in a java.util.Properties object.
1:      * <p>
1: 	 * Get the sub-set of stored properties that can be stored in a 
1:      * java.util.Properties object. That is all the properties that have a
1:      * value of type java.lang.String.  Changes to this properties object are
1:      * not reflected in any persisent storage.
1:      * <p>
1:      * Code must use the setProperty() method call.
1:      *
1: 	 * @return The sub-set of stored properties that can be stored in a 
1:      *         java.util.Propertes object.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1: 	public Properties getProperties() 
1:         throws StandardException;
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.property
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.property;
0: 
0: import java.util.Properties;
0: 
0: import java.io.Serializable;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: public interface PersistentSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0:     /**
0:      * Gets a value for a stored property. The returned value will be:
0: 	 *
0: 	 * <OL>
0: 	 * <LI> the de-serialized object associated with the key
0: 	 *      using setProperty if such a value is defined or
0: 	 * <LI> the default de-serialized object associated with
0: 	 *      the key using setPropertyDefault if such a value
0: 	 *      is defined or
0: 	 * <LI> null
0: 	 * </OL>
0: 	 *      
0:      * <p>
0:      * The Store provides a transaction protected list of database properties.
0:      * Higher levels of the system can store and retrieve these properties
0:      * once Recovery has finished. Each property is a serializable object
0:      * and is stored/retrieved using a String key.
0:      * <p>
0:      *
0:      * @param key     The "key" of the property that is being requested.
0:      *
0: 	 * @return object The requested object or null.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public Serializable getProperty(
0:     String key) 
0:         throws StandardException;
0: 
0:     /**
0:      * Gets a default value for a stored property. The returned
0: 	 * value will be:
0: 	 *
0: 	 * <OL>
0: 	 * <LI> the default de-serialized object associated with
0: 	 *      the key using setPropertyDefault if such a value
0: 	 *      is defined or
0: 	 * <LI> null
0: 	 * </OL>
0: 	 *      
0:      * <p>
0:      * The Store provides a transaction protected list of database properties.
0:      * Higher levels of the system can store and retrieve these properties
0:      * once Recovery has finished. Each property is a serializable object
0:      * and is stored/retrieved using a String key.
0:      * <p>
0:      *
0:      * @param key     The "key" of the property that is being requested.
0:      *
0: 	 * @return object The requested object or null.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public Serializable getPropertyDefault(
0:     String key) 
0:         throws StandardException;
0: 
0: 
0:     /**
0:      * Return true if the default property is visible. A default
0: 	 * is visible as long as the property is not set.
0:      *
0:      * @param key     The "key" of the property that is being requested.
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public boolean propertyDefaultIsVisible(String key) throws StandardException;
0: 
0:     /**
0:      * Sets the Serializable object associated with a property key.
0:      * <p>
0:      * See the discussion of getProperty().
0:      * <p>
0:      * The value stored may be a Formatable object or a Serializable object
0: 	 * whose class name starts with java.*. This stops arbitary objects being
0: 	 * stored in the database by class name, which will cause problems in
0: 	 * obfuscated/non-obfuscated systems.
0:      *
0: 	 * @param	key		The key used to lookup this property.
0: 	 * @param	value	The value to be associated with this key. If null, 
0:      *                  delete the property from the properties list.
0: 	   @param   dbOnlyProperty True if property is only ever searched for int the database properties.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void	setProperty(
0:     String          key, 
0:     Serializable    value,
0: 	boolean dbOnlyProperty) 
0:         throws StandardException;
0: 
0:     /**
0:      * Sets the Serializable object default value associated with a property
0: 	 * key.
0:      * <p>
0:      * See the discussion of getProperty().
0:      * <p>
0:      * The value stored may be a Formatable object or a Serializable object
0: 	 * whose class name starts with java.*. This stops arbitary objects being
0: 	 * stored in the database by class name, which will cause problems in
0: 	 * obfuscated/non-obfuscated systems.
0:      *
0: 	 * @param	key		The key used to lookup this propertyDefault.
0: 	 * @param	value	The default value to be associated with this key. 
0:      *                  If null, delete the property default from the
0: 	 *                  properties list.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void	setPropertyDefault(
0:     String          key, 
0:     Serializable    value) 
0:         throws StandardException;
0: 
0:     /**
0:      * Get properties that can be stored in a java.util.Properties object.
0:      * <p>
0: 	 * Get the sub-set of stored properties that can be stored in a 
0:      * java.util.Properties object. That is all the properties that have a
0:      * value of type java.lang.String.  Changes to this properties object are
0:      * not reflected in any persisent storage.
0:      * <p>
0:      * Code must use the setProperty() method call.
0:      *
0: 	 * @return The sub-set of stored properties that can be stored in a 
0:      *         java.util.Propertes object.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0: 	public Properties getProperties() 
0:         throws StandardException;
0: }
============================================================================