1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.PreparedStatement
1:7ecc1f2: 
1:4590cd8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4590cd8:    contributor license agreements.  See the NOTICE file distributed with
1:4590cd8:    this work for additional information regarding copyright ownership.
1:4590cd8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4590cd8:    (the "License"); you may not use this file except in compliance with
1:4590cd8:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
3:fe77ca5: 
4:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.sql.depend.Dependent;
1:fe77ca5: import org.apache.derby.iapi.sql.depend.Provider;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:fe77ca5: import java.sql.Timestamp;
1:fe77ca5: import java.sql.SQLWarning;
1:fe77ca5: 
3:fe77ca5: /**
1:fe77ca5:  * The PreparedStatement interface provides methods to execute prepared
1:fe77ca5:  * statements, store them, and get metadata about them.
4:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: public interface PreparedStatement
1:4793bcc: 	extends Dependent
1:fe77ca5: {
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Checks whether this PreparedStatement is up to date.
1:fe77ca5: 	 * A PreparedStatement can become out of date if any of several
1:fe77ca5: 	 * things happen:
1:fe77ca5: 	 *
1:fe77ca5: 	 *	A schema used by the statement is dropped
1:fe77ca5: 	 *	A table used by the statement is dropped
1:fe77ca5: 	 *	A table used by the statement, or a column in such a table,
1:fe77ca5: 	 *		is altered in one of several ways: a column is dropped,
1:fe77ca5: 	 *		a privilege is dropped, a constraint is added or
1:fe77ca5: 	 *		dropped, an index is dropped.
1:fe77ca5: 	 *	A view used by the statement is dropped.
1:fe77ca5: 	 *
1:fe77ca5: 	 * In general, anything that happened since the plan was generated
1:fe77ca5: 	 * that might cause the plan to fail, or to generate incorrect results,
1:fe77ca5: 	 * will cause this method to return FALSE.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	TRUE if the PreparedStatement is up to date,
1:fe77ca5: 	 *		FALSE if it is not up to date
1:fe77ca5: 	 */
1:fe77ca5: 	boolean	upToDate() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Re-prepare the statement if it is not up to date or,
1:fe77ca5: 	 * if requested, simply not optimal.
1:fe77ca5: 	 * If there are open cursors using this prepared statement,
1:fe77ca5: 	 * then we will not be able to recompile the statement.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param lcc			The LanguageConnectionContext.
1:85132a2: 	 *
1:fe77ca5: 	 * @exception StandardException thrown if unable to perform
1:fe77ca5: 	 */
1:85132a2: 	void rePrepare(LanguageConnectionContext lcc) 
1:fe77ca5: 		throws StandardException;
1:fe77ca5: 
1:3fcea8a: 	/**
1:fe77ca5: 	 * PreparedStatements are re-entrant - that is, more than one
1:fe77ca5: 	 * execution can be active at a time for a single prepared statement.
1:fe77ca5: 	 * An Activation contains all the local state information to
1:fe77ca5: 	 * execute a prepared statement (as opposed to the constant
1:fe77ca5: 	 * information, such as literal values and code). Each Activation
1:fe77ca5: 	 * class contains the code specific to the prepared statement
1:fe77ca5: 	 * represented by an instance of this class (PreparedStatement).
1:3fcea8a: 	 *
1:fe77ca5: 	 * @param lcc			The LanguageConnectionContext.
1:fe77ca5: 	 * @return	The new activation.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 */
1:fe77ca5: 	Activation	getActivation(LanguageConnectionContext lcc, boolean scrollable) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:e3883f5: 	 * Execute the PreparedStatement and return results, used for top level
1:e3883f5: 	 * statements (not substatements) in a connection.
1:fe77ca5: 	 *<p>
1:fe77ca5: 	 * There is no executeQuery() or
1:fe77ca5: 	 * executeUpdate(); a method is provided in
1:fe77ca5: 	 * ResultSet to tell whether to expect rows to be returned.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param activation The activation containing all the local state
1:fe77ca5: 	 *		to execute the plan.
1:7b6ad6d:      * @param forMetaData true if this is a meta-data query
1:3fcea8a:      * @param timeoutMillis timeout value in milliseconds.
1:3fcea8a: 	 *
1:fe77ca5: 	 * @return	A ResultSet for a statement. A ResultSet represents
1:fe77ca5: 	 *		the results returned from the statement, if any.
1:fe77ca5: 	 *		Will return NULL if the plan for the PreparedStatement
1:fe77ca5: 	 *		has aged out of cache, or the plan is out of date.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:3fcea8a: 	 */
1:1373f5a:     ResultSet execute(Activation activation,
1:7b6ad6d:                       boolean forMetaData,
2:1373f5a:                       long timeoutMillis)
2:1373f5a:         throws StandardException;
1:3fcea8a: 
1:fe77ca5: 	/**
1:e3883f5: 	 * Execute a statement as part of another statement (ithout a nested
1:e3883f5: 	 * connection) and return results.
1:e3883f5: 	 * <p>
1:e3883f5: 	 * There is no executeQuery() or
1:e3883f5: 	 * executeUpdate(); a method is provided in
1:e3883f5: 	 * ResultSet to tell whether to expect rows to be returned.
1:e3883f5: 	 *
1:e3883f5: 	 * @param parent The activation of the superstatement
1:e3883f5: 	 * @param activation The activation containing all the local state
1:e3883f5: 	 *		to execute the plan for substatement
1:e3883f5:  	 * @param rollbackParentContext True if in the event of a statement-level
1:e3883f5: 	 *	 exception, the parent context needs to be rolled back, too.
1:e3883f5:      * @param timeoutMillis timeout value in milliseconds.
1:e3883f5: 	 *
1:e3883f5: 	 * @return	A ResultSet for a statement. A ResultSet represents
1:e3883f5: 	 *		the results returned from the statement, if any.
1:e3883f5: 	 *		Will return NULL if the plan for the PreparedStatement
1:e3883f5: 	 *		has aged out of cache, or the plan is out of date.
1:e3883f5: 	 *
1:e3883f5: 	 * @exception StandardException		Thrown on failure
1:e3883f5: 	 */
1:e3883f5:     ResultSet executeSubStatement(Activation parent,
1:e3883f5: 								  Activation activation,
1:e3883f5: 								  boolean rollbackParentContext,
1:e3883f5: 								  long timeoutMillis)
1:e3883f5:         throws StandardException;
1:e3883f5: 
1:e3883f5: 
1:e3883f5: 	/**
1:e3883f5: 	 * Execute a statement as part of another statement (without a nested
1:e3883f5: 	 * connection) and return results.
1:e3883f5: 	 * <p>
1:e3883f5: 	 * Creates a new single use activation and executes it, but also passes
1:e3883f5: 	 * rollbackParentContext parameter.
1:e3883f5: 	 * @param lcc language connection context
1:e3883f5: 	 * @param rollbackParentContext  True if in the event of a statement-level
1:e3883f5: 	 *	 exception, the parent context needs to be rolled back, too.
1:e3883f5: 	 * @param timeoutMillis timeout value in milliseconds.
1:e3883f5: 	 * @see #executeSubStatement(Activation, Activation, boolean, long)
1:e3883f5: 	 */
1:e3883f5:     ResultSet executeSubStatement(LanguageConnectionContext lcc,
1:e3883f5: 								  boolean rollbackParentContext,
1:e3883f5: 								  long timeoutMillis)
1:fe77ca5:         throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the ResultDescription for the statement.  The ResultDescription
1:fe77ca5: 	 * describes what the results look like: what are the rows and columns?
1:fe77ca5: 	 * <p>
1:fe77ca5: 	 * This is available here and on the ResultSet so that users can
1:fe77ca5: 	 * see the shape of the result before they execute.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	A ResultDescription describing the results.
1:fe77ca5: 	 *
1:fe77ca5: 	 */
1:fe77ca5: 	ResultDescription	getResultDescription();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return true if the query node for this statement references SESSION schema tables.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	true if references SESSION schema tables, else false
1:fe77ca5: 	 */
1:fe77ca5: 	boolean referencesSessionSchema();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get an array of DataTypeDescriptors describing the types of the
1:fe77ca5: 	 * parameters of this PreparedStatement. The Nth element of the array
1:fe77ca5: 	 * describes the Nth parameter.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return		An array of DataTypeDescriptors telling the
1:fe77ca5: 	 *			type, length, precision, scale, etc. of each
1:fe77ca5: 	 *			parameter of this PreparedStatement.
1:fe77ca5: 	 */
1:fe77ca5: 	DataTypeDescriptor[]	getParameterTypes();
1:fe77ca5: 
1:6cc0702:     /**
1:6cc0702:      * Get the type of the parameter at the given (0-based) index.
1:6cc0702:      * Raises an exception if the index is out of range.
1:6cc0702:      */
1:6cc0702:     DataTypeDescriptor  getParameterType( int idx ) throws StandardException;
1:6cc0702: 
1:fe77ca5: 	/**
1:fe77ca5: 	 *	Return the SQL string that this statement is for.
1:fe77ca5: 	 *
1:fe77ca5: 	 *	@return the SQL string this statement is for.
1:fe77ca5: 	 */
1:fe77ca5: 	String getSource();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 *	Return the SPS Name for this statement.
1:fe77ca5: 	 *
1:fe77ca5: 	 *	@return the SPS Name for this statement
1:fe77ca5: 	 */
1:fe77ca5: 	String getSPSName();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the total compile time for the associated query in milliseconds.
1:fe77ca5: 	 * Compile time can be divided into parse, bind, optimize and generate times.
1:fe77ca5: 	 * 
1:fe77ca5: 	 * @return long		The total compile time for the associated query in milliseconds.
1:fe77ca5: 	 */
1:fe77ca5: 	public long getCompileTimeInMillis();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the parse time for the associated query in milliseconds.
1:fe77ca5: 	 * 
1:fe77ca5: 	 * @return long		The parse time for the associated query in milliseconds.
1:fe77ca5: 	 */
1:fe77ca5: 	public long getParseTimeInMillis();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the bind time for the associated query in milliseconds.
1:fe77ca5: 	 * 
1:fe77ca5: 	 * @return long		The bind time for the associated query in milliseconds.
1:fe77ca5: 	 */
1:fe77ca5: 	public long getBindTimeInMillis();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the optimize time for the associated query in milliseconds.
1:fe77ca5: 	 * 
1:fe77ca5: 	 * @return long		The optimize time for the associated query in milliseconds.
1:fe77ca5: 	 */
1:fe77ca5: 	public long getOptimizeTimeInMillis();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the generate time for the associated query in milliseconds.
1:fe77ca5: 	 * 
1:fe77ca5: 	 * @return long		The generate time for the associated query in milliseconds.
1:fe77ca5: 	 */
1:fe77ca5: 	public long getGenerateTimeInMillis();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the timestamp for the beginning of compilation
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return Timestamp	The timestamp for the beginning of compilation.
1:fe77ca5: 	 */
1:fe77ca5: 	public Timestamp getBeginCompileTimestamp();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the timestamp for the end of compilation
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return Timestamp	The timestamp for the end of compilation.
1:fe77ca5: 	 */
1:fe77ca5: 	public Timestamp getEndCompileTimestamp();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns whether or not this Statement requires should
1:fe77ca5: 	 * behave atomically -- i.e. whether a user is permitted
1:fe77ca5: 	 * to do a commit/rollback during the execution of this
1:fe77ca5: 	 * statement.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return boolean	Whether or not this Statement is atomic
1:fe77ca5: 	 */
1:fe77ca5: 	boolean isAtomic();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Return any compile time warnings. Null if no warnings exist.
1:fe77ca5: 	*/
1:fe77ca5: 	public SQLWarning getCompileTimeWarnings();
1:fe77ca5: 
1:f9a0689:     /**
1:f9a0689:      * Get the version counter. A change in the value indicates a recompile
1:f9a0689:      * has happened.
1:f9a0689:      * @return version counter
1:f9a0689:      */
1:f9a0689:     public long getVersionCounter();
1:fe77ca5: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:7b6ad6d
/////////////////////////////////////////////////////////////////////////
1:      * @param forMetaData true if this is a meta-data query
/////////////////////////////////////////////////////////////////////////
1:                       boolean forMetaData,
commit:85132a2
/////////////////////////////////////////////////////////////////////////
1: 	 *
1: 	void rePrepare(LanguageConnectionContext lcc) 
commit:7fc54b9
/////////////////////////////////////////////////////////////////////////
0: 	 * @return the re-prepared statement (may be a new PreparedStatement)
0: 	PreparedStatement rePrepare(LanguageConnectionContext lcc)
commit:fade7e9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6cc0702
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get the type of the parameter at the given (0-based) index.
1:      * Raises an exception if the index is out of range.
1:      */
1:     DataTypeDescriptor  getParameterType( int idx ) throws StandardException;
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f9a0689
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get the version counter. A change in the value indicates a recompile
1:      * has happened.
1:      * @return version counter
1:      */
1:     public long getVersionCounter();
commit:e3883f5
/////////////////////////////////////////////////////////////////////////
1: 	 * Execute the PreparedStatement and return results, used for top level
1: 	 * statements (not substatements) in a connection.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	 * Execute a statement as part of another statement (ithout a nested
1: 	 * connection) and return results.
1: 	 * <p>
1: 	 * There is no executeQuery() or
1: 	 * executeUpdate(); a method is provided in
1: 	 * ResultSet to tell whether to expect rows to be returned.
1: 	 *
1: 	 * @param parent The activation of the superstatement
1: 	 * @param activation The activation containing all the local state
1: 	 *		to execute the plan for substatement
1:  	 * @param rollbackParentContext True if in the event of a statement-level
1: 	 *	 exception, the parent context needs to be rolled back, too.
1:      * @param timeoutMillis timeout value in milliseconds.
1: 	 *
1: 	 * @return	A ResultSet for a statement. A ResultSet represents
1: 	 *		the results returned from the statement, if any.
1: 	 *		Will return NULL if the plan for the PreparedStatement
1: 	 *		has aged out of cache, or the plan is out of date.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1:     ResultSet executeSubStatement(Activation parent,
1: 								  Activation activation,
1: 								  boolean rollbackParentContext,
1: 								  long timeoutMillis)
1:         throws StandardException;
1: 
1: 
1: 	/**
1: 	 * Execute a statement as part of another statement (without a nested
1: 	 * connection) and return results.
1: 	 * <p>
1: 	 * Creates a new single use activation and executes it, but also passes
1: 	 * rollbackParentContext parameter.
1: 	 * @param lcc language connection context
1: 	 * @param rollbackParentContext  True if in the event of a statement-level
1: 	 *	 exception, the parent context needs to be rolled back, too.
1: 	 * @param timeoutMillis timeout value in milliseconds.
1: 	 * @see #executeSubStatement(Activation, Activation, boolean, long)
1: 	 */
1:     ResultSet executeSubStatement(LanguageConnectionContext lcc,
1: 								  boolean rollbackParentContext,
1: 								  long timeoutMillis)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4793bcc
/////////////////////////////////////////////////////////////////////////
1: 	extends Dependent
commit:3fcea8a
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Sets the timeout for execution of this statement.
0:      * The timeout value will be set in the assigned StatementContext object.
1:      *
1:      * @param timeoutMillis timeout value in milliseconds.
1:      *
0:      * @see org.apache.derby.iapi.sql.conn.StatementContext
1:      */
0:     void setQueryTimeout(long timeoutMillis);
1: 
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.PreparedStatement
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.depend.Dependent;
1: import org.apache.derby.iapi.sql.depend.Provider;
1: 
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import java.sql.Timestamp;
1: import java.sql.SQLWarning;
1: 
1: /**
1:  * The PreparedStatement interface provides methods to execute prepared
1:  * statements, store them, and get metadata about them.
1:  *
0:  *	@author Jeff Lichtman
1:  */
1: public interface PreparedStatement
0: 	extends Dependent, Provider
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * Checks whether this PreparedStatement is up to date.
1: 	 * A PreparedStatement can become out of date if any of several
1: 	 * things happen:
1: 	 *
1: 	 *	A schema used by the statement is dropped
1: 	 *	A table used by the statement is dropped
1: 	 *	A table used by the statement, or a column in such a table,
1: 	 *		is altered in one of several ways: a column is dropped,
1: 	 *		a privilege is dropped, a constraint is added or
1: 	 *		dropped, an index is dropped.
1: 	 *	A view used by the statement is dropped.
1: 	 *
1: 	 * In general, anything that happened since the plan was generated
1: 	 * that might cause the plan to fail, or to generate incorrect results,
1: 	 * will cause this method to return FALSE.
1: 	 *
1: 	 * @return	TRUE if the PreparedStatement is up to date,
1: 	 *		FALSE if it is not up to date
1: 	 */
1: 	boolean	upToDate() throws StandardException;
1: 
1: 	/**
1: 	 * Re-prepare the statement if it is not up to date or,
1: 	 * if requested, simply not optimal.
1: 	 * If there are open cursors using this prepared statement,
1: 	 * then we will not be able to recompile the statement.
1: 	 *
1: 	 * @param lcc			The LanguageConnectionContext.
1: 	 *
1: 	 * @exception StandardException thrown if unable to perform
1: 	 */
0: 	void rePrepare(LanguageConnectionContext lcc) 
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * PreparedStatements are re-entrant - that is, more than one
1: 	 * execution can be active at a time for a single prepared statement.
1: 	 * An Activation contains all the local state information to
1: 	 * execute a prepared statement (as opposed to the constant
1: 	 * information, such as literal values and code). Each Activation
1: 	 * class contains the code specific to the prepared statement
1: 	 * represented by an instance of this class (PreparedStatement).
1: 	 *
1: 	 * @param lcc			The LanguageConnectionContext.
1: 	 * @return	The new activation.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	Activation	getActivation(LanguageConnectionContext lcc, boolean scrollable) throws StandardException;
1: 
1: 	/**
0: 	 * Execute the PreparedStatement and return results.
1: 	 *<p>
1: 	 * There is no executeQuery() or
1: 	 * executeUpdate(); a method is provided in
1: 	 * ResultSet to tell whether to expect rows to be returned.
1: 	 *
1: 	 * @param activation The activation containing all the local state
1: 	 *		to execute the plan.
0: 	 * @param executeQuery		Whether or not called from a Statement.executeQuery()
0: 	 * @param executeUpdate	Whether or not called from a Statement.executeUpdate()
0:  	 * @param rollbackParentContext True if 1) the statement context is
0: 	 *  NOT a top-level context, AND 2) in the event of a statement-level
0: 	 *	 exception, the parent context needs to be rolled back, too.
1: 	 *
1: 	 * @return	A ResultSet for a statement. A ResultSet represents
1: 	 *		the results returned from the statement, if any.
1: 	 *		Will return NULL if the plan for the PreparedStatement
1: 	 *		has aged out of cache, or the plan is out of date.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	ResultSet	execute(Activation activation, boolean executeQuery, boolean executeUpdate,
0: 		boolean rollbackParentContext) throws StandardException;
1: 
1: 	/**
0: 		Simple form of execute(). Creates a new single use activation and executes it,
0: 		but also passes rollbackParentContext parameter (see above).
1: 	*/
0: 	ResultSet	execute(LanguageConnectionContext lcc, boolean rollbackParentContext)
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * Get the ResultDescription for the statement.  The ResultDescription
1: 	 * describes what the results look like: what are the rows and columns?
1: 	 * <p>
1: 	 * This is available here and on the ResultSet so that users can
1: 	 * see the shape of the result before they execute.
1: 	 *
1: 	 * @return	A ResultDescription describing the results.
1: 	 *
1: 	 */
1: 	ResultDescription	getResultDescription();
1: 
1: 	/**
1: 	 * Return true if the query node for this statement references SESSION schema tables.
1: 	 *
1: 	 * @return	true if references SESSION schema tables, else false
1: 	 */
1: 	boolean referencesSessionSchema();
1: 
1: 	/**
1: 	 * Get an array of DataTypeDescriptors describing the types of the
1: 	 * parameters of this PreparedStatement. The Nth element of the array
1: 	 * describes the Nth parameter.
1: 	 *
1: 	 * @return		An array of DataTypeDescriptors telling the
1: 	 *			type, length, precision, scale, etc. of each
1: 	 *			parameter of this PreparedStatement.
1: 	 */
1: 	DataTypeDescriptor[]	getParameterTypes();
1: 
1: 	/**
1: 	 *	Return the SQL string that this statement is for.
1: 	 *
1: 	 *	@return the SQL string this statement is for.
1: 	 */
1: 	String getSource();
1: 
1: 	/**
1: 	 *	Return the SPS Name for this statement.
1: 	 *
1: 	 *	@return the SPS Name for this statement
1: 	 */
1: 	String getSPSName();
1: 
1: 	/**
1: 	 * Get the total compile time for the associated query in milliseconds.
1: 	 * Compile time can be divided into parse, bind, optimize and generate times.
1: 	 * 
1: 	 * @return long		The total compile time for the associated query in milliseconds.
1: 	 */
1: 	public long getCompileTimeInMillis();
1: 
1: 	/**
1: 	 * Get the parse time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The parse time for the associated query in milliseconds.
1: 	 */
1: 	public long getParseTimeInMillis();
1: 
1: 	/**
1: 	 * Get the bind time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The bind time for the associated query in milliseconds.
1: 	 */
1: 	public long getBindTimeInMillis();
1: 
1: 	/**
1: 	 * Get the optimize time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The optimize time for the associated query in milliseconds.
1: 	 */
1: 	public long getOptimizeTimeInMillis();
1: 
1: 	/**
1: 	 * Get the generate time for the associated query in milliseconds.
1: 	 * 
1: 	 * @return long		The generate time for the associated query in milliseconds.
1: 	 */
1: 	public long getGenerateTimeInMillis();
1: 
1: 	/**
1: 	 * Get the timestamp for the beginning of compilation
1: 	 *
1: 	 * @return Timestamp	The timestamp for the beginning of compilation.
1: 	 */
1: 	public Timestamp getBeginCompileTimestamp();
1: 
1: 	/**
1: 	 * Get the timestamp for the end of compilation
1: 	 *
1: 	 * @return Timestamp	The timestamp for the end of compilation.
1: 	 */
1: 	public Timestamp getEndCompileTimestamp();
1: 
1: 	/**
1: 	 * Returns whether or not this Statement requires should
1: 	 * behave atomically -- i.e. whether a user is permitted
1: 	 * to do a commit/rollback during the execution of this
1: 	 * statement.
1: 	 *
1: 	 * @return boolean	Whether or not this Statement is atomic
1: 	 */
1: 	boolean isAtomic();
1: 
1: 	/**
1: 		Return any compile time warnings. Null if no warnings exist.
1: 	*/
1: 	public SQLWarning getCompileTimeWarnings();
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:4590cd8
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
commit:1373f5a
/////////////////////////////////////////////////////////////////////////
0:      * @param timeoutMillis timeout value in milliseconds.
/////////////////////////////////////////////////////////////////////////
1:     ResultSet execute(Activation activation,
0:                       boolean executeQuery,
0:                       boolean executeUpdate,
0:                       boolean rollbackParentContext,
1:                       long timeoutMillis)
1:         throws StandardException;
0:     ResultSet execute(LanguageConnectionContext lcc,
0:                       boolean rollbackParentContext,
1:                       long timeoutMillis)
1:         throws StandardException;
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.depend.Dependent;
0: import org.apache.derby.iapi.sql.depend.Provider;
0: 
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import java.sql.Timestamp;
0: import java.sql.SQLWarning;
0: 
0: /**
0:  * The PreparedStatement interface provides methods to execute prepared
0:  * statements, store them, and get metadata about them.
0:  *
0:  *	@author Jeff Lichtman
0:  */
0: public interface PreparedStatement
0: 	extends Dependent, Provider
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * Checks whether this PreparedStatement is up to date.
0: 	 * A PreparedStatement can become out of date if any of several
0: 	 * things happen:
0: 	 *
0: 	 *	A schema used by the statement is dropped
0: 	 *	A table used by the statement is dropped
0: 	 *	A table used by the statement, or a column in such a table,
0: 	 *		is altered in one of several ways: a column is dropped,
0: 	 *		a privilege is dropped, a constraint is added or
0: 	 *		dropped, an index is dropped.
0: 	 *	A view used by the statement is dropped.
0: 	 *
0: 	 * In general, anything that happened since the plan was generated
0: 	 * that might cause the plan to fail, or to generate incorrect results,
0: 	 * will cause this method to return FALSE.
0: 	 *
0: 	 * @return	TRUE if the PreparedStatement is up to date,
0: 	 *		FALSE if it is not up to date
0: 	 */
0: 	boolean	upToDate() throws StandardException;
0: 
0: 	/**
0: 	 * Re-prepare the statement if it is not up to date or,
0: 	 * if requested, simply not optimal.
0: 	 * If there are open cursors using this prepared statement,
0: 	 * then we will not be able to recompile the statement.
0: 	 *
0: 	 * @param lcc			The LanguageConnectionContext.
0: 	 *
0: 	 * @exception StandardException thrown if unable to perform
0: 	 */
0: 	void rePrepare(LanguageConnectionContext lcc) 
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * PreparedStatements are re-entrant - that is, more than one
0: 	 * execution can be active at a time for a single prepared statement.
0: 	 * An Activation contains all the local state information to
0: 	 * execute a prepared statement (as opposed to the constant
0: 	 * information, such as literal values and code). Each Activation
0: 	 * class contains the code specific to the prepared statement
0: 	 * represented by an instance of this class (PreparedStatement).
0: 	 *
0: 	 * @param lcc			The LanguageConnectionContext.
0: 	 * @return	The new activation.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	Activation	getActivation(LanguageConnectionContext lcc, boolean scrollable) throws StandardException;
0: 
0: 	/**
0: 	 * Execute the PreparedStatement and return results.
0: 	 *<p>
0: 	 * There is no executeQuery() or
0: 	 * executeUpdate(); a method is provided in
0: 	 * ResultSet to tell whether to expect rows to be returned.
0: 	 *
0: 	 * @param activation The activation containing all the local state
0: 	 *		to execute the plan.
0: 	 * @param executeQuery		Whether or not called from a Statement.executeQuery()
0: 	 * @param executeUpdate	Whether or not called from a Statement.executeUpdate()
0:  	 * @param rollbackParentContext True if 1) the statement context is
0: 	 *  NOT a top-level context, AND 2) in the event of a statement-level
0: 	 *	 exception, the parent context needs to be rolled back, too.
0: 	 *
0: 	 * @return	A ResultSet for a statement. A ResultSet represents
0: 	 *		the results returned from the statement, if any.
0: 	 *		Will return NULL if the plan for the PreparedStatement
0: 	 *		has aged out of cache, or the plan is out of date.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	ResultSet	execute(Activation activation, boolean executeQuery, boolean executeUpdate,
0: 		boolean rollbackParentContext) throws StandardException;
0: 
0: 	/**
0: 		Simple form of execute(). Creates a new single use activation and executes it,
0: 		but also passes rollbackParentContext parameter (see above).
0: 	*/
0: 	ResultSet	execute(LanguageConnectionContext lcc, boolean rollbackParentContext)
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * Get the ResultDescription for the statement.  The ResultDescription
0: 	 * describes what the results look like: what are the rows and columns?
0: 	 * <p>
0: 	 * This is available here and on the ResultSet so that users can
0: 	 * see the shape of the result before they execute.
0: 	 *
0: 	 * @return	A ResultDescription describing the results.
0: 	 *
0: 	 */
0: 	ResultDescription	getResultDescription();
0: 
0: 	/**
0: 	 * Return true if the query node for this statement references SESSION schema tables.
0: 	 *
0: 	 * @return	true if references SESSION schema tables, else false
0: 	 */
0: 	boolean referencesSessionSchema();
0: 
0: 	/**
0: 	 * Get an array of DataTypeDescriptors describing the types of the
0: 	 * parameters of this PreparedStatement. The Nth element of the array
0: 	 * describes the Nth parameter.
0: 	 *
0: 	 * @return		An array of DataTypeDescriptors telling the
0: 	 *			type, length, precision, scale, etc. of each
0: 	 *			parameter of this PreparedStatement.
0: 	 */
0: 	DataTypeDescriptor[]	getParameterTypes();
0: 
0: 	/**
0: 	 *	Return the SQL string that this statement is for.
0: 	 *
0: 	 *	@return the SQL string this statement is for.
0: 	 */
0: 	String getSource();
0: 
0: 	/**
0: 	 *	Return the SPS Name for this statement.
0: 	 *
0: 	 *	@return the SPS Name for this statement
0: 	 */
0: 	String getSPSName();
0: 
0: 	/**
0: 	 * Get the total compile time for the associated query in milliseconds.
0: 	 * Compile time can be divided into parse, bind, optimize and generate times.
0: 	 * 
0: 	 * @return long		The total compile time for the associated query in milliseconds.
0: 	 */
0: 	public long getCompileTimeInMillis();
0: 
0: 	/**
0: 	 * Get the parse time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The parse time for the associated query in milliseconds.
0: 	 */
0: 	public long getParseTimeInMillis();
0: 
0: 	/**
0: 	 * Get the bind time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The bind time for the associated query in milliseconds.
0: 	 */
0: 	public long getBindTimeInMillis();
0: 
0: 	/**
0: 	 * Get the optimize time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The optimize time for the associated query in milliseconds.
0: 	 */
0: 	public long getOptimizeTimeInMillis();
0: 
0: 	/**
0: 	 * Get the generate time for the associated query in milliseconds.
0: 	 * 
0: 	 * @return long		The generate time for the associated query in milliseconds.
0: 	 */
0: 	public long getGenerateTimeInMillis();
0: 
0: 	/**
0: 	 * Get the timestamp for the beginning of compilation
0: 	 *
0: 	 * @return Timestamp	The timestamp for the beginning of compilation.
0: 	 */
0: 	public Timestamp getBeginCompileTimestamp();
0: 
0: 	/**
0: 	 * Get the timestamp for the end of compilation
0: 	 *
0: 	 * @return Timestamp	The timestamp for the end of compilation.
0: 	 */
0: 	public Timestamp getEndCompileTimestamp();
0: 
0: 	/**
0: 	 * Returns whether or not this Statement requires should
0: 	 * behave atomically -- i.e. whether a user is permitted
0: 	 * to do a commit/rollback during the execution of this
0: 	 * statement.
0: 	 *
0: 	 * @return boolean	Whether or not this Statement is atomic
0: 	 */
0: 	boolean isAtomic();
0: 
0: 	/**
0: 		Return any compile time warnings. Null if no warnings exist.
0: 	*/
0: 	public SQLWarning getCompileTimeWarnings();
0: 
0: }
============================================================================