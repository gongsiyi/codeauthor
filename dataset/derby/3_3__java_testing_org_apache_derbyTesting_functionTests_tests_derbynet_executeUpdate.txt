1:f68f62f: /*
2:f68f62f: 
1:f68f62f:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.executeUpdate
1:f68f62f: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:f68f62f: 
1:f68f62f:       http://www.apache.org/licenses/LICENSE-2.0
1:f68f62f: 
1:f68f62f:    Unless required by applicable law or agreed to in writing, software
1:f68f62f:    distributed under the License is distributed on an "AS IS" BASIS,
1:f68f62f:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f68f62f:    See the License for the specific language governing permissions and
1:f68f62f:    limitations under the License.
1:f68f62f: 
1:f68f62f:  */
1:f68f62f: 
1:f68f62f: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:f68f62f: 
1:f68f62f: import java.sql.Connection;
1:f68f62f: import java.sql.DriverManager;
1:f68f62f: import java.sql.Statement;
1:f68f62f: import java.sql.PreparedStatement;
1:f68f62f: import java.sql.ResultSet;
1:f68f62f: 
1:0bbfdac: import org.apache.derby.tools.ij;
1:f68f62f: /**
1:f68f62f: 	This test tests the JDBC Statement executeUpdate method. Since IJ will eventually
1:f68f62f: 	just use execute rather then executeUpdate, I want to make sure that executeUpdate
1:f68f62f: 	is minimally covered.
1:f68f62f: */
1:f68f62f: 
1:5ff5941: public class executeUpdate
1:f68f62f: {
1:f68f62f: 
1:f68f62f: 	public static void main (String args[])
1:f68f62f: 	{
1:f68f62f: 		try
1:f68f62f: 		{
1:f68f62f: 			System.out.println("executeUpdate Test Starts");
1:f68f62f: 			// Initialize JavaCommonClient Driver.
1:0bbfdac: 			ij.getPropertyArg(args); 
1:0bbfdac: 			Connection conn = ij.startJBMS();
1:f68f62f: 			
1:f68f62f: 			if (conn == null)
1:f68f62f: 			{
1:f68f62f: 				System.out.println("conn didn't work");
1:f68f62f: 				return;
1:f68f62f: 			}
1:f68f62f: 			Statement stmt = conn.createStatement();
1:f68f62f: 			int rowCount = stmt.executeUpdate("create table exup(a int)");
1:f68f62f: 			if (rowCount != 0)
1:f68f62f: 				System.out.println("FAIL - non zero return count on create table");
1:f68f62f: 			else
1:f68f62f: 				System.out.println("PASS - create table");
1:f68f62f: 			rowCount = stmt.executeUpdate("insert into exup values(1)");
1:f68f62f: 			if (rowCount != 1)
1:f68f62f: 				System.out.println("FAIL - expected row count 1, got " + rowCount);
1:f68f62f: 			else
1:f68f62f: 				System.out.println("PASS - insert 1 row");
1:f68f62f: 			rowCount = stmt.executeUpdate("insert into exup values(2),(3),(4)");
1:f68f62f: 			if (rowCount != 3)
1:f68f62f: 				System.out.println("FAIL - expected row count 3, got " + rowCount);
1:f68f62f: 			else
1:f68f62f: 				System.out.println("PASS - insert 3 rows");
1:f68f62f: 			System.out.println("Rows in table should be 1,2,3,4");
1:f68f62f: 			ResultSet rs = stmt.executeQuery("select * from exup");
1:f68f62f: 			int i = 1;
1:f68f62f: 			boolean fail = false;
1:f68f62f: 			int val;
1:f68f62f: 			while (rs.next())
1:f68f62f: 			{
1:f68f62f: 				if (i++ != (val = rs.getInt(1)))
1:f68f62f: 				{
1:f68f62f: 					System.out.println("FAIL - expecting " + i + " got " + val);
1:f68f62f: 					fail = true;
1:f68f62f: 				}
1:f68f62f: 			}
1:f68f62f: 			if (i != 5)
1:f68f62f: 				System.out.println("FAIL - too many rows in table");
1:f68f62f: 			else if (!fail)
1:f68f62f: 				System.out.println("PASS - correct rows in table");
1:f68f62f: 			rs.close();
1:f68f62f: 			rowCount = stmt.executeUpdate("drop table exup");
1:f68f62f: 			if (rowCount != 0)
1:f68f62f: 				System.out.println("FAIL - non zero return count on drop table");
1:f68f62f: 			else
1:f68f62f: 				System.out.println("PASS - drop table");
1:f68f62f: 			stmt.close();
1:f68f62f: 			System.out.println("executeUpdate Test ends");
1:3091cef:             
1:3091cef:             conn.close();
1:f68f62f: 
1:f68f62f:         }
1:f68f62f:         catch (java.sql.SQLException e) {
1:f68f62f: 				e.printStackTrace();
1:f68f62f: 		}
1:f68f62f: 		catch (Exception e)
1:f68f62f: 		{
1:f68f62f: 			e.printStackTrace();
1:f68f62f: 		}
1:f68f62f: 	}
1:f68f62f: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3091cef
/////////////////////////////////////////////////////////////////////////
1:             
1:             conn.close();
commit:f68f62f
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.executeUpdate
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.Statement;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: /**
1: 	This test tests the JDBC Statement executeUpdate method. Since IJ will eventually
1: 	just use execute rather then executeUpdate, I want to make sure that executeUpdate
1: 	is minimally covered.
1: */
1: 
0: class executeUpdate
1: {
1: 
1: 	public static void main (String args[])
1: 	{
1: 		try
1: 		{
1: 			System.out.println("executeUpdate Test Starts");
1: 			// Initialize JavaCommonClient Driver.
0: 			Class.forName("com.ibm.db2.jcc.DB2Driver");
0: 			Connection conn = null;
1: 
0: 			String databaseURL = "jdbc:derby:net://localhost/wombat;create=true";
0: 			java.util.Properties properties = new java.util.Properties();
0: 			properties.put ("user", "judy");
0: 			properties.put ("password", "judy");
0: 			conn = DriverManager.getConnection(databaseURL, properties);
1: 			
1: 			if (conn == null)
1: 			{
1: 				System.out.println("conn didn't work");
1: 				return;
1: 			}
1: 			Statement stmt = conn.createStatement();
1: 			int rowCount = stmt.executeUpdate("create table exup(a int)");
1: 			if (rowCount != 0)
1: 				System.out.println("FAIL - non zero return count on create table");
1: 			else
1: 				System.out.println("PASS - create table");
1: 			rowCount = stmt.executeUpdate("insert into exup values(1)");
1: 			if (rowCount != 1)
1: 				System.out.println("FAIL - expected row count 1, got " + rowCount);
1: 			else
1: 				System.out.println("PASS - insert 1 row");
1: 			rowCount = stmt.executeUpdate("insert into exup values(2),(3),(4)");
1: 			if (rowCount != 3)
1: 				System.out.println("FAIL - expected row count 3, got " + rowCount);
1: 			else
1: 				System.out.println("PASS - insert 3 rows");
1: 			System.out.println("Rows in table should be 1,2,3,4");
1: 			ResultSet rs = stmt.executeQuery("select * from exup");
1: 			int i = 1;
1: 			boolean fail = false;
1: 			int val;
1: 			while (rs.next())
1: 			{
1: 				if (i++ != (val = rs.getInt(1)))
1: 				{
1: 					System.out.println("FAIL - expecting " + i + " got " + val);
1: 					fail = true;
1: 				}
1: 			}
1: 			if (i != 5)
1: 				System.out.println("FAIL - too many rows in table");
1: 			else if (!fail)
1: 				System.out.println("PASS - correct rows in table");
1: 			rs.close();
1: 			rowCount = stmt.executeUpdate("drop table exup");
1: 			if (rowCount != 0)
1: 				System.out.println("FAIL - non zero return count on drop table");
1: 			else
1: 				System.out.println("PASS - drop table");
1: 			stmt.close();
1: 			System.out.println("executeUpdate Test ends");
1: 
1:         }
1:         catch (java.sql.SQLException e) {
1: 				e.printStackTrace();
1: 		}
1: 		catch (Exception e)
1: 		{
1: 			e.printStackTrace();
1: 		}
1: 	}
1: }
commit:c1c71ef
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.executeUpdate
0: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
commit:cb1ca12
/////////////////////////////////////////////////////////////////////////
0: {
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:5ff5941
/////////////////////////////////////////////////////////////////////////
1: public class executeUpdate
commit:67614ad
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derbyTesting.functionTests.tests.derbynet
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.derbynet;
0: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: /**
0: 	This test tests the JDBC Statement executeUpdate method. Since IJ will eventually
0: 	just use execute rather then executeUpdate, I want to make sure that executeUpdate
0: 	is minimally covered.
0: */
0: 
0: class executeUpdate
0: { 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	private static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0: 	public static void main (String args[])
0: 	{
0: 		try
0: 		{
0: 			System.out.println("executeUpdate Test Starts");
0: 			// Initialize JavaCommonClient Driver.
0: 			Class.forName("com.ibm.db2.jcc.DB2Driver");
0: 			Connection conn = null;
0: 
0: 			String databaseURL = "jdbc:derby:net://localhost/wombat;create=true";
0: 			java.util.Properties properties = new java.util.Properties();
0: 			properties.put ("user", "judy");
0: 			properties.put ("password", "judy");
0: 			conn = DriverManager.getConnection(databaseURL, properties);
0: 			
0: 			if (conn == null)
0: 			{
0: 				System.out.println("conn didn't work");
0: 				return;
0: 			}
0: 			Statement stmt = conn.createStatement();
0: 			int rowCount = stmt.executeUpdate("create table exup(a int)");
0: 			if (rowCount != 0)
0: 				System.out.println("FAIL - non zero return count on create table");
0: 			else
0: 				System.out.println("PASS - create table");
0: 			rowCount = stmt.executeUpdate("insert into exup values(1)");
0: 			if (rowCount != 1)
0: 				System.out.println("FAIL - expected row count 1, got " + rowCount);
0: 			else
0: 				System.out.println("PASS - insert 1 row");
0: 			rowCount = stmt.executeUpdate("insert into exup values(2),(3),(4)");
0: 			if (rowCount != 3)
0: 				System.out.println("FAIL - expected row count 3, got " + rowCount);
0: 			else
0: 				System.out.println("PASS - insert 3 rows");
0: 			System.out.println("Rows in table should be 1,2,3,4");
0: 			ResultSet rs = stmt.executeQuery("select * from exup");
0: 			int i = 1;
0: 			boolean fail = false;
0: 			int val;
0: 			while (rs.next())
0: 			{
0: 				if (i++ != (val = rs.getInt(1)))
0: 				{
0: 					System.out.println("FAIL - expecting " + i + " got " + val);
0: 					fail = true;
0: 				}
0: 			}
0: 			if (i != 5)
0: 				System.out.println("FAIL - too many rows in table");
0: 			else if (!fail)
0: 				System.out.println("PASS - correct rows in table");
0: 			rs.close();
0: 			rowCount = stmt.executeUpdate("drop table exup");
0: 			if (rowCount != 0)
0: 				System.out.println("FAIL - non zero return count on drop table");
0: 			else
0: 				System.out.println("PASS - drop table");
0: 			stmt.close();
0: 			System.out.println("executeUpdate Test ends");
0: 
0:         }
0:         catch (java.sql.SQLException e) {
0: 				e.printStackTrace();
0: 		}
0: 		catch (Exception e)
0: 		{
0: 			e.printStackTrace();
0: 		}
0: 	}
0: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0bbfdac
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.derby.tools.ij;
/////////////////////////////////////////////////////////////////////////
1: 			ij.getPropertyArg(args); 
1: 			Connection conn = ij.startJBMS();
============================================================================