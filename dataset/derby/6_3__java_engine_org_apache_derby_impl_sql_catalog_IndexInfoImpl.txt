1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.IndexInfoImpl
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
5:eac0369: /**
1:eac0369: * A poor mans structure used in DataDictionaryImpl.java.
1:eac0369: * Used to save information about system indexes.
7:eac0369: *
1:eac0369: */
1:5e3e7ba: class IndexInfoImpl
3:eac0369: {
1:5e3e7ba: 	private IndexRowGenerator	irg;
1:f7e090f: 
1:5e3e7ba: 	private long				conglomerateNumber;
1:f7e090f:     
1:f7e090f:     private final CatalogRowFactory crf;
1:f7e090f:     private final int indexNumber;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor
1:eac0369: 	 *
1:eac0369: 	 * @param indexNumber			(0-based) number of index within catalog's indexes
1:eac0369: 	 * @param crf					CatalogRowFactory for the catalog
1:eac0369: 	 */
1:f7e090f: 	IndexInfoImpl(int indexNumber, CatalogRowFactory crf)
1:eac0369: 	{
1:f7e090f:         this.crf = crf;
1:f7e090f:         this.indexNumber = indexNumber;
1:f7e090f: 		this.conglomerateNumber = -1;
3:eac0369: 	}
1:eac0369: 
1:f7e090f:     /**
1:eac0369: 	 * Get the conglomerate number for the index.
1:eac0369: 	 *
1:eac0369: 	 * @return long	The conglomerate number for the index.
1:eac0369: 	 */
1:5e3e7ba: 	long getConglomerateNumber()
1:eac0369: 	{
1:eac0369: 		return conglomerateNumber;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the conglomerate number for the index.
1:eac0369: 	 *
1:eac0369: 	 * @param conglomerateNumber	The conglomerateNumber for the index.
1:eac0369: 	 */
1:5e3e7ba: 	void setConglomerateNumber(long conglomerateNumber)
1:eac0369: 	{
2:eac0369: 		this.conglomerateNumber = conglomerateNumber;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the index name for the index.
1:eac0369: 	 *
1:eac0369: 	 * @return String	The index name for the index.
1:eac0369: 	 */
1:5e3e7ba: 	String getIndexName()
1:eac0369: 	{
1:f7e090f: 		return crf.getIndexName(indexNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the column count for the index.
1:eac0369: 	 *
1:eac0369: 	 * @return int	The column count for the index.
1:eac0369: 	 */
1:5e3e7ba: 	int getColumnCount()
1:eac0369: 	{
1:f7e090f: 		return crf.getIndexColumnCount(indexNumber);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the IndexRowGenerator for this index.
1:eac0369: 	 *
1:eac0369: 	 * @return IndexRowGenerator	The IRG for this index.
1:eac0369: 	 */
1:5e3e7ba: 	IndexRowGenerator getIndexRowGenerator()
1:eac0369: 	{
1:eac0369: 		return irg;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the IndexRowGenerator for this index.
1:eac0369: 	 *
1:eac0369: 	 * @param irg			The IndexRowGenerator for this index.
1:eac0369: 	 */
1:5e3e7ba: 	void setIndexRowGenerator(IndexRowGenerator irg)
1:eac0369: 	{
1:eac0369: 		this.irg = irg;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the base column position for a column within a catalog
2:eac0369: 	 * given the (0-based) column number for the column within the index.
1:eac0369: 	 *
2:eac0369: 	 * @param colNumber		The column number within the index
1:eac0369: 	 *
1:eac0369: 	 * @return int		The base column position for the column.
1:eac0369: 	 */
1:5e3e7ba: 	int getBaseColumnPosition(int colNumber)
1:eac0369: 	{
1:f7e090f: 		return crf.getIndexColumnPositions(indexNumber)[colNumber];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this index is declared unique
1:eac0369: 	 *
1:eac0369: 	 * @return boolean		Whether or not this index is declared unique
1:eac0369: 	 */
1:5e3e7ba: 	boolean isIndexUnique()
1:eac0369: 	{
1:f7e090f: 		return crf.isIndexUnique(indexNumber);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:f7e090f
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:     private final CatalogRowFactory crf;
1:     private final int indexNumber;
1: 	IndexInfoImpl(int indexNumber, CatalogRowFactory crf)
1:         this.crf = crf;
1:         this.indexNumber = indexNumber;
1: 		this.conglomerateNumber = -1;
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 		return crf.getIndexName(indexNumber);
/////////////////////////////////////////////////////////////////////////
1: 		return crf.getIndexColumnCount(indexNumber);
/////////////////////////////////////////////////////////////////////////
1: 		return crf.getIndexColumnPositions(indexNumber)[colNumber];
/////////////////////////////////////////////////////////////////////////
1: 		return crf.isIndexUnique(indexNumber);
commit:a7d7f12
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5e3e7ba
/////////////////////////////////////////////////////////////////////////
1: class IndexInfoImpl
0: 	private boolean				isUnique;
0: 	private String[]			columnNames;
0: 	private int[]				columnPositions;
1: 	private IndexRowGenerator	irg;
0: 	private int					columnCount;
1: 	private long				conglomerateNumber;
0: 	private String				name;
/////////////////////////////////////////////////////////////////////////
1: 	long getConglomerateNumber()
/////////////////////////////////////////////////////////////////////////
1: 	void setConglomerateNumber(long conglomerateNumber)
/////////////////////////////////////////////////////////////////////////
1: 	String getIndexName()
/////////////////////////////////////////////////////////////////////////
0: 	void setIndexName(String indexName)
/////////////////////////////////////////////////////////////////////////
1: 	int getColumnCount()
/////////////////////////////////////////////////////////////////////////
1: 	IndexRowGenerator getIndexRowGenerator()
/////////////////////////////////////////////////////////////////////////
1: 	void setIndexRowGenerator(IndexRowGenerator irg)
/////////////////////////////////////////////////////////////////////////
1: 	int getBaseColumnPosition(int colNumber)
/////////////////////////////////////////////////////////////////////////
0: 	void setBaseColumnPosition(int colNumber,
/////////////////////////////////////////////////////////////////////////
1: 	boolean isIndexUnique()
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.IndexInfoImpl
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1: * A poor mans structure used in DataDictionaryImpl.java.
1: * Used to save information about system indexes.
1: *
0: * @author jerry
1: */
0: public class IndexInfoImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	boolean				isUnique;
0: 	String[]			columnNames;
0: 	int[]				columnPositions;
0: 	IndexRowGenerator	irg;
0: 	int					columnCount;
0: 	long				conglomerateNumber;
0: 	String				name;
1: 
1: 	/**
1: 	 * Constructor
1: 	 *
0: 	 * @param conglomerateNumber	The conglomerate number for the index
0: 	 * @param indexName				The name of the index
0: 	 * @param columnCount			The number of columns in the index
0: 	 * @param isUnique				Whether or not the index was declared as unique
1: 	 * @param indexNumber			(0-based) number of index within catalog's indexes
1: 	 * @param crf					CatalogRowFactory for the catalog
1: 	 */
0: 	IndexInfoImpl(long conglomerateNumber, String indexName, int columnCount,
0: 				  boolean isUnique,
0: 				  int indexNumber, CatalogRowFactory crf)
1: 	{
1: 		this.conglomerateNumber = conglomerateNumber;
0: 		name = indexName;
0: 		this.columnCount = columnCount;
0: 		this.isUnique = isUnique;
0: 		columnNames = crf.getIndexColumnNames(indexNumber);
0: 		columnPositions = crf.getIndexColumnPositions(indexNumber);
1: 	}
1: 
1: 	/**
1: 	 * Get the conglomerate number for the index.
1: 	 *
1: 	 * @return long	The conglomerate number for the index.
1: 	 */
0: 	public long getConglomerateNumber()
1: 	{
1: 		return conglomerateNumber;
1: 	}
1: 
1: 	/**
1: 	 * Set the conglomerate number for the index.
1: 	 *
1: 	 * @param conglomerateNumber	The conglomerateNumber for the index.
1: 	 *
0: 	 * @return	Nothing.
1: 	 */
0: 	public void setConglomerateNumber(long conglomerateNumber)
1: 	{
1: 		this.conglomerateNumber = conglomerateNumber;
1: 	}
1: 
1: 	/**
1: 	 * Get the index name for the index.
1: 	 *
1: 	 * @return String	The index name for the index.
1: 	 */
0: 	public String getIndexName()
1: 	{
0: 		return name;
1: 	}
1: 
1: 	/**
0: 	 * Set the name for the index.
1: 	 *
0: 	 * @param indexName		The name for the index.
1: 	 *
0: 	 * @return	Nothing.
1: 	 */
0: 	public void setIndexName(String indexName)
1: 	{
0: 		name = indexName;
1: 	}
1: 
1: 	/**
1: 	 * Get the column count for the index.
1: 	 *
1: 	 * @return int	The column count for the index.
1: 	 */
0: 	public int getColumnCount()
1: 	{
0: 		return columnCount;
1: 	}
1: 
1: 	/**
1: 	 * Get the IndexRowGenerator for this index.
1: 	 *
1: 	 * @return IndexRowGenerator	The IRG for this index.
1: 	 */
0: 	public IndexRowGenerator getIndexRowGenerator()
1: 	{
1: 		return irg;
1: 	}
1: 
1: 	/**
1: 	 * Set the IndexRowGenerator for this index.
1: 	 *
1: 	 * @param irg			The IndexRowGenerator for this index.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	public void setIndexRowGenerator(IndexRowGenerator irg)
1: 	{
1: 		this.irg = irg;
1: 	}
1: 
1: 	/**
1: 	 * Get the base column position for a column within a catalog
1: 	 * given the (0-based) column number for the column within the index.
1: 	 *
1: 	 * @param colNumber		The column number within the index
1: 	 *
1: 	 * @return int		The base column position for the column.
1: 	 */
0: 	public int getBaseColumnPosition(int colNumber)
1: 	{
0: 		return columnPositions[colNumber];
1: 	}
1: 
1: 	/**
0: 	 * Set the base column position for a column within a catalog
1: 	 * given the (0-based) column number for the column within the index.
1: 	 *
1: 	 * @param colNumber		The column number within the index
0: 	 * @param baseColPos	The base column position for the column.
1: 	 *
0: 	 * @return Nothing.
1: 	 */
0: 	public void setBaseColumnPosition(int colNumber,
0: 									 int baseColumnPosition)
1: 	{
0: 		columnPositions[colNumber] = baseColumnPosition;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not this index is declared unique
1: 	 *
1: 	 * @return boolean		Whether or not this index is declared unique
1: 	 */
0: 	public boolean isIndexUnique()
1: 	{
0: 		return isUnique;
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	 * @param baseColumnPosition	The base column position for the column.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0: * A poor mans structure used in DataDictionaryImpl.java.
0: * Used to save information about system indexes.
0: *
0: * @author jerry
0: */
0: public class IndexInfoImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	boolean				isUnique;
0: 	String[]			columnNames;
0: 	int[]				columnPositions;
0: 	IndexRowGenerator	irg;
0: 	int					columnCount;
0: 	long				conglomerateNumber;
0: 	String				name;
0: 
0: 	/**
0: 	 * Constructor
0: 	 *
0: 	 * @param conglomerateNumber	The conglomerate number for the index
0: 	 * @param indexName				The name of the index
0: 	 * @param columnCount			The number of columns in the index
0: 	 * @param isUnique				Whether or not the index was declared as unique
0: 	 * @param indexNumber			(0-based) number of index within catalog's indexes
0: 	 * @param crf					CatalogRowFactory for the catalog
0: 	 */
0: 	IndexInfoImpl(long conglomerateNumber, String indexName, int columnCount,
0: 				  boolean isUnique,
0: 				  int indexNumber, CatalogRowFactory crf)
0: 	{
0: 		this.conglomerateNumber = conglomerateNumber;
0: 		name = indexName;
0: 		this.columnCount = columnCount;
0: 		this.isUnique = isUnique;
0: 		columnNames = crf.getIndexColumnNames(indexNumber);
0: 		columnPositions = crf.getIndexColumnPositions(indexNumber);
0: 	}
0: 
0: 	/**
0: 	 * Get the conglomerate number for the index.
0: 	 *
0: 	 * @return long	The conglomerate number for the index.
0: 	 */
0: 	public long getConglomerateNumber()
0: 	{
0: 		return conglomerateNumber;
0: 	}
0: 
0: 	/**
0: 	 * Set the conglomerate number for the index.
0: 	 *
0: 	 * @param conglomerateNumber	The conglomerateNumber for the index.
0: 	 *
0: 	 * @return	Nothing.
0: 	 */
0: 	public void setConglomerateNumber(long conglomerateNumber)
0: 	{
0: 		this.conglomerateNumber = conglomerateNumber;
0: 	}
0: 
0: 	/**
0: 	 * Get the index name for the index.
0: 	 *
0: 	 * @return String	The index name for the index.
0: 	 */
0: 	public String getIndexName()
0: 	{
0: 		return name;
0: 	}
0: 
0: 	/**
0: 	 * Set the name for the index.
0: 	 *
0: 	 * @param indexName		The name for the index.
0: 	 *
0: 	 * @return	Nothing.
0: 	 */
0: 	public void setIndexName(String indexName)
0: 	{
0: 		name = indexName;
0: 	}
0: 
0: 	/**
0: 	 * Get the column count for the index.
0: 	 *
0: 	 * @return int	The column count for the index.
0: 	 */
0: 	public int getColumnCount()
0: 	{
0: 		return columnCount;
0: 	}
0: 
0: 	/**
0: 	 * Get the IndexRowGenerator for this index.
0: 	 *
0: 	 * @return IndexRowGenerator	The IRG for this index.
0: 	 */
0: 	public IndexRowGenerator getIndexRowGenerator()
0: 	{
0: 		return irg;
0: 	}
0: 
0: 	/**
0: 	 * Set the IndexRowGenerator for this index.
0: 	 *
0: 	 * @param irg			The IndexRowGenerator for this index.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setIndexRowGenerator(IndexRowGenerator irg)
0: 	{
0: 		this.irg = irg;
0: 	}
0: 
0: 	/**
0: 	 * Get the base column position for a column within a catalog
0: 	 * given the (0-based) column number for the column within the index.
0: 	 *
0: 	 * @param colNumber		The column number within the index
0: 	 *
0: 	 * @return int		The base column position for the column.
0: 	 */
0: 	public int getBaseColumnPosition(int colNumber)
0: 	{
0: 		return columnPositions[colNumber];
0: 	}
0: 
0: 	/**
0: 	 * Set the base column position for a column within a catalog
0: 	 * given the (0-based) column number for the column within the index.
0: 	 *
0: 	 * @param colNumber		The column number within the index
0: 	 * @param baseColPos	The base column position for the column.
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	public void setBaseColumnPosition(int colNumber,
0: 									 int baseColumnPosition)
0: 	{
0: 		columnPositions[colNumber] = baseColumnPosition;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not this index is declared unique
0: 	 *
0: 	 * @return boolean		Whether or not this index is declared unique
0: 	 */
0: 	public boolean isIndexUnique()
0: 	{
0: 		return isUnique;
0: 	}
0: }
============================================================================