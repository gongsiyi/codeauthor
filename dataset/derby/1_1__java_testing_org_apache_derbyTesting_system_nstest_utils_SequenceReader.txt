1:b13fb1c: /*
1:b13fb1c:  
1:b13fb1c:  Derby - Class org.apache.derbyTesting.system.nstest.utils.SequenceReader
1:b13fb1c:  
1:b13fb1c:  Licensed to the Apache Software Foundation (ASF) under one or more
1:b13fb1c:  contributor license agreements.  See the NOTICE file distributed with
1:b13fb1c:  this work for additional information regarding copyright ownership.
1:b13fb1c:  The ASF licenses this file to You under the Apache License, Version 2.0
1:b13fb1c:  (the "License"); you may not use this file except in compliance with
1:b13fb1c:  the License.  You may obtain a copy of the License at
1:b13fb1c:  
1:b13fb1c:  http://www.apache.org/licenses/LICENSE-2.0
1:b13fb1c:  
1:b13fb1c:  Unless required by applicable law or agreed to in writing, software
1:b13fb1c:  distributed under the License is distributed on an "AS IS" BASIS,
1:b13fb1c:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b13fb1c:  See the License for the specific language governing permissions and
1:b13fb1c:  limitations under the License.
1:b13fb1c:  
1:b13fb1c:  */
1:b13fb1c: 
1:b13fb1c: package org.apache.derbyTesting.system.nstest.utils;
1:b13fb1c: 
1:b13fb1c: import java.sql.Connection;
1:b13fb1c: import java.sql.PreparedStatement;
1:b13fb1c: import java.sql.ResultSet;
1:b13fb1c: import java.util.Date;
1:b13fb1c: 
1:b13fb1c: import org.apache.derbyTesting.system.nstest.NsTest;
1:b13fb1c: 
1:b13fb1c: /**
1:b13fb1c:  * SequenceReader - a background thread that checks the state of the sequence counter.
1:b13fb1c:  */
1:b13fb1c: public class SequenceReader extends Thread
1:b13fb1c: {
1:b13fb1c:     private Connection  conn;
1:b13fb1c: 	private int delay = 60000;
1:b13fb1c:     
1:b13fb1c: 
1:b13fb1c: 	public boolean stopNow = false;
1:b13fb1c: 
1:b13fb1c: 	public SequenceReader( Connection connection, int num )
1:b13fb1c:     {
1:b13fb1c:         conn = connection;
1:b13fb1c: 		delay = num;
1:b13fb1c: 	}
1:b13fb1c: 
1:b13fb1c: 	/*
1:b13fb1c: 	 * Implementation of run() method to check the sequence counter.
1:b13fb1c: 	 * 
1:b13fb1c: 	 */
1:b13fb1c: 	public void run() {
1:b13fb1c:         NsTest.logger.println( "Starting the sequence reader thread with delay = " + delay );
1:b13fb1c: 		while (stopNow == false)
1:b13fb1c:         {
1:b13fb1c: 			try {
1:b13fb1c: 				readSequenceValue();
1:b13fb1c: 				sleep( delay );
1:b13fb1c:                 
1:b13fb1c: 				// first check if there are still active tester threads.
1:b13fb1c: 				if (NsTest.numActiveTestThreads() != 0 && NsTest.numActiveTestThreads() > 1)
1:b13fb1c: 				{
1:b13fb1c: 					continue;
1:b13fb1c: 				}
1:b13fb1c: 				else
1:b13fb1c: 				{
1:b13fb1c: 					NsTest.logger.println("no more test threads, finishing SequenceReader thread also");
1:b13fb1c:                     readSequenceValue();
1:b13fb1c: 					stopNow=true;
1:b13fb1c: 				}
1:b13fb1c: 			} catch (java.lang.InterruptedException ie) {
1:b13fb1c: 				NsTest.logger.println("SequenceReader: unexpected error in sleep");
1:b13fb1c: 			}
1:b13fb1c: 		}
1:b13fb1c: 	}
1:b13fb1c: 
1:b13fb1c: 	/*
1:b13fb1c: 	 * Print the current memory status
1:b13fb1c: 	 */
1:b13fb1c: 	private void readSequenceValue()
1:b13fb1c:     {
1:b13fb1c:         try {
1:b13fb1c:             PreparedStatement   ps = conn.prepareStatement
1:b13fb1c:                 ( "values syscs_util.syscs_peek_at_sequence( 'NSTEST', 'NSTESTTAB_SEQ' )" );
1:b13fb1c:             ResultSet       rs = ps.executeQuery();
1:b13fb1c:             rs.next();
1:b13fb1c:             long    nextSequenceValue = rs.getLong( 1 );
1:b13fb1c:             NsTest.logger.println( "Next sequence number = " + nextSequenceValue );
1:b13fb1c:             NsTest.updateSequenceTracker( nextSequenceValue );
1:b13fb1c:             rs.close();
1:b13fb1c:             ps.close();
1:b13fb1c:         }
1:b13fb1c:         catch (Exception e)
1:b13fb1c:         {
1:b13fb1c:             NsTest.printException( SequenceReader.class.getName(), e );
1:b13fb1c:         }
1:b13fb1c: 	}
1:b13fb1c: 
1:b13fb1c: }
1:b13fb1c: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b13fb1c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:  Derby - Class org.apache.derbyTesting.system.nstest.utils.SequenceReader
1:  
1:  Licensed to the Apache Software Foundation (ASF) under one or more
1:  contributor license agreements.  See the NOTICE file distributed with
1:  this work for additional information regarding copyright ownership.
1:  The ASF licenses this file to You under the Apache License, Version 2.0
1:  (the "License"); you may not use this file except in compliance with
1:  the License.  You may obtain a copy of the License at
1:  
1:  http://www.apache.org/licenses/LICENSE-2.0
1:  
1:  Unless required by applicable law or agreed to in writing, software
1:  distributed under the License is distributed on an "AS IS" BASIS,
1:  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  See the License for the specific language governing permissions and
1:  limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.system.nstest.utils;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.util.Date;
1: 
1: import org.apache.derbyTesting.system.nstest.NsTest;
1: 
1: /**
1:  * SequenceReader - a background thread that checks the state of the sequence counter.
1:  */
1: public class SequenceReader extends Thread
1: {
1:     private Connection  conn;
1: 	private int delay = 60000;
1:     
1: 
1: 	public boolean stopNow = false;
1: 
1: 	public SequenceReader( Connection connection, int num )
1:     {
1:         conn = connection;
1: 		delay = num;
1: 	}
1: 
1: 	/*
1: 	 * Implementation of run() method to check the sequence counter.
1: 	 * 
1: 	 */
1: 	public void run() {
1:         NsTest.logger.println( "Starting the sequence reader thread with delay = " + delay );
1: 		while (stopNow == false)
1:         {
1: 			try {
1: 				readSequenceValue();
1: 				sleep( delay );
1:                 
1: 				// first check if there are still active tester threads.
1: 				if (NsTest.numActiveTestThreads() != 0 && NsTest.numActiveTestThreads() > 1)
1: 				{
1: 					continue;
1: 				}
1: 				else
1: 				{
1: 					NsTest.logger.println("no more test threads, finishing SequenceReader thread also");
1:                     readSequenceValue();
1: 					stopNow=true;
1: 				}
1: 			} catch (java.lang.InterruptedException ie) {
1: 				NsTest.logger.println("SequenceReader: unexpected error in sleep");
1: 			}
1: 		}
1: 	}
1: 
1: 	/*
1: 	 * Print the current memory status
1: 	 */
1: 	private void readSequenceValue()
1:     {
1:         try {
1:             PreparedStatement   ps = conn.prepareStatement
1:                 ( "values syscs_util.syscs_peek_at_sequence( 'NSTEST', 'NSTESTTAB_SEQ' )" );
1:             ResultSet       rs = ps.executeQuery();
1:             rs.next();
1:             long    nextSequenceValue = rs.getLong( 1 );
1:             NsTest.logger.println( "Next sequence number = " + nextSequenceValue );
1:             NsTest.updateSequenceTracker( nextSequenceValue );
1:             rs.close();
1:             ps.close();
1:         }
1:         catch (Exception e)
1:         {
1:             NsTest.printException( SequenceReader.class.getName(), e );
1:         }
1: 	}
1: 
1: }
1: 
============================================================================