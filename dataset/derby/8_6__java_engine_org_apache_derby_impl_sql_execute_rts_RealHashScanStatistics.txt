1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics
1:345de35: 
1:0cc1b09:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc1b09:    contributor license agreements.  See the NOTICE file distributed with
1:0cc1b09:    this work for additional information regarding copyright ownership.
1:0cc1b09:    The ASF licenses this file to you under the Apache License, Version 2.0
1:0cc1b09:    (the "License"); you may not use this file except in compliance with
1:0cc1b09:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute.rts;
1:eac0369: 
1:36b4892: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.util.PropertyUtil;
1:ae848fd: import org.apache.derby.iapi.util.StringUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableProperties;
1:48a9884: import org.apache.derby.catalog.UUID;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1:48a9884: import org.apache.derby.impl.sql.catalog.XPLAINScanPropsDescriptor;
1:48a9884: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: import java.util.Enumeration;
1:eac0369: import java.util.Hashtable;
1:eac0369: import java.util.Properties;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369:   ResultSetStatistics implemenation for HashScanResultSet.
1:eac0369: 
1:eac0369: 
1:eac0369: */
1:eac0369: public class RealHashScanStatistics
1:eac0369: 	extends RealNoPutResultSetStatistics
1:eac0369: {
1:eac0369: 
1:eac0369: 	/* Leave these fields public for object inspectors */
1:eac0369: 	public boolean isConstraint;
1:eac0369: 	public int hashtableSize;
1:eac0369: 	public int[] hashKeyColumns;
1:eac0369: 	public String isolationLevel;
1:eac0369: 	public String lockString;
1:eac0369: 	public String tableName;
1:eac0369: 	public String indexName;
1:eac0369: 	public String nextQualifiers;
1:eac0369: 	public String scanQualifiers;
1:eac0369: 	public String startPosition = null;
1:eac0369: 	public String stopPosition = null;
1:eac0369: 	public FormatableProperties scanProperties;
1:eac0369: 
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * 
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:     public	RealHashScanStatistics(
1:eac0369: 									int numOpens,
1:eac0369: 									int rowsSeen,
1:eac0369: 									int rowsFiltered,
1:eac0369: 									long constructorTime,
1:eac0369: 									long openTime,
1:eac0369: 									long nextTime,
1:eac0369: 									long closeTime,
1:eac0369: 									int resultSetNumber,
1:eac0369: 									String tableName,
1:eac0369: 									String indexName,
1:eac0369: 									boolean isConstraint,
1:eac0369: 									int hashtableSize,
1:eac0369: 									int[] hashKeyColumns,
1:eac0369: 									String scanQualifiers,
1:eac0369: 									String nextQualifiers,
1:eac0369: 									Properties scanProperties,
1:eac0369: 									String startPosition,
1:eac0369: 									String stopPosition,
1:eac0369: 									String isolationLevel,
1:eac0369: 									String lockString,
1:eac0369: 									double optimizerEstimatedRowCount,
1:eac0369: 									double optimizerEstimatedCost
1:eac0369: 									)
1:eac0369: 	{
1:eac0369: 		super(
1:eac0369: 			numOpens,
1:eac0369: 			rowsSeen,
1:eac0369: 			rowsFiltered,
1:eac0369: 			constructorTime,
1:eac0369: 			openTime,
1:eac0369: 			nextTime,
1:eac0369: 			closeTime,
1:eac0369: 			resultSetNumber,
1:eac0369: 			optimizerEstimatedRowCount,
1:eac0369: 			optimizerEstimatedCost
1:eac0369: 			);
1:eac0369: 		this.tableName = tableName;
1:eac0369: 		this.indexName = indexName;
1:eac0369: 		this.isConstraint = isConstraint;
1:eac0369: 		this.hashtableSize = hashtableSize;
1:36b4892: 		this.hashKeyColumns = ArrayUtil.copy( hashKeyColumns );
1:eac0369: 		this.scanQualifiers = scanQualifiers;
1:eac0369: 		this.nextQualifiers = nextQualifiers;
1:eac0369: 		this.scanProperties = new FormatableProperties();
1:eac0369: 		if (scanProperties != null)
1:eac0369: 		{
1:eac0369: 			for (Enumeration e = scanProperties.keys(); e.hasMoreElements(); )
1:eac0369: 			{
1:eac0369: 				String key = (String)e.nextElement();
1:eac0369: 				this.scanProperties.put(key, scanProperties.get(key));
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 		this.startPosition = startPosition;
1:eac0369: 		this.stopPosition = stopPosition;
1:eac0369: 		this.isolationLevel = isolationLevel;
1:eac0369: 		this.lockString = lockString;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// ResultSetStatistics methods
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the statement execution plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 *
1:eac0369: 	 * @return String	The statement executio plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getStatementExecutionPlanText(int depth)
1:eac0369: 	{
1:eac0369: 		String header;
1:eac0369: 		String isolationString = null;
1:eac0369: 
1:eac0369: 		initFormatInfo(depth);
1:eac0369: 
1:eac0369: 		if (indexName != null)
1:eac0369: 		{
1:7baf562:             // note that the "constraint" and "index" literals are names of SQL
1:7baf562:             // objects and so do not need to be internationalized
1:eac0369: 			header =
1:eac0369: 				indent +
2:eac0369: 					MessageService.getTextMessage(
1:eac0369: 										SQLState.RTS_HASH_SCAN_RS_USING,
1:eac0369: 										tableName,
1:7baf562:                                         isConstraint ? "constraint" : "index",
1:eac0369: 										indexName);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			header =
1:eac0369: 				indent +
1:eac0369: 					MessageService.getTextMessage(SQLState.RTS_HASH_SCAN_RS,
1:eac0369: 														tableName);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		header = header + " " +
1:eac0369: 					MessageService.getTextMessage(
1:eac0369: 										SQLState.RTS_LOCKING,
1:eac0369: 										isolationLevel,
1:eac0369: 										lockString) +
1:eac0369: 					": \n";
1:eac0369: 
1:eac0369: 		String scanInfo =
1:eac0369: 			indent +
1:eac0369: 					MessageService.getTextMessage(SQLState.RTS_SCAN_INFO) +
1:eac0369: 					": \n" +
1:eac0369: 					PropertyUtil.sortProperties(scanProperties, subIndent);
1:eac0369: 		
1:eac0369: 		String hashKeyColumnString;
1:eac0369: 		if (hashKeyColumns.length == 1)
1:eac0369: 		{
1:eac0369: 			hashKeyColumnString = MessageService.getTextMessage(
1:eac0369: 														SQLState.RTS_HASH_KEY) +
1:eac0369: 									" " + hashKeyColumns[0];
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			hashKeyColumnString = MessageService.getTextMessage(
1:eac0369: 													SQLState.RTS_HASH_KEYS) +
1:eac0369: 									" (" + hashKeyColumns[0];
1:eac0369: 			for (int index = 1; index < hashKeyColumns.length; index++)
1:eac0369: 			{
1:eac0369: 				hashKeyColumnString = hashKeyColumnString + "," + hashKeyColumns[index];
1:eac0369: 			}
1:eac0369: 			hashKeyColumnString = hashKeyColumnString + ")";
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return
1:eac0369: 			header +
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
1:eac0369: 						" = " + numOpens + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_HASH_TABLE_SIZE) +
1:eac0369: 						" = " + hashtableSize + "\n" +
1:eac0369: 			indent + hashKeyColumnString + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(SQLState.RTS_ROWS_SEEN) +
1:eac0369: 						" = " + rowsSeen + "\n" +
1:eac0369: 			indent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_ROWS_FILTERED) +
1:eac0369: 						" = " + rowsFiltered + "\n" +
1:eac0369: 			dumpTimeStats(indent, subIndent) + "\n" +
1:eac0369: 			((rowsSeen > 0) 
1:eac0369: 				?
1:eac0369: 					subIndent + MessageService.getTextMessage(
1:eac0369: 													SQLState.RTS_NEXT_TIME) +
1:eac0369: 								" = " + (nextTime / rowsSeen) + "\n"
1:eac0369: 				: 
1:eac0369: 					"") + "\n" +
1:eac0369: 			scanInfo +
1:eac0369: 			subIndent + MessageService.getTextMessage(
1:ae848fd: 				SQLState.RTS_START_POSITION) +
1:ae848fd: 			":\n" + StringUtil.ensureIndent(startPosition, depth + 2) + "\n" +
1:eac0369: 			subIndent + MessageService.getTextMessage(
1:eac0369: 												SQLState.RTS_STOP_POSITION) +
1:ae848fd: 			":\n" + StringUtil.ensureIndent(stopPosition, depth + 2) + "\n" +
1:eac0369: 			subIndent + MessageService.getTextMessage(
1:eac0369: 													SQLState.RTS_SCAN_QUALS) +
1:ae848fd: 			":\n" + StringUtil.ensureIndent(scanQualifiers, depth + 2) + "\n" +
1:eac0369: 			subIndent + MessageService.getTextMessage(
1:eac0369: 													SQLState.RTS_NEXT_QUALS) +
1:ae848fd: 			":\n" + StringUtil.ensureIndent(nextQualifiers, depth + 2) + "\n" +
1:ae848fd: 
1:eac0369: 			// RESOLVE - estimated row count and cost will eventually 
1:eac0369: 			// be displayed for all nodes
1:eac0369: 			dumpEstimatedCosts(subIndent);
1:eac0369: 	}
1:c9a1206: 
1:eac0369: 	/**
1:eac0369: 	 * Return information on the scan nodes from the statement execution 
1:eac0369: 	 * plan as a String.
1:eac0369: 	 *
1:eac0369: 	 * @param depth	Indentation level.
1:eac0369: 	 * @param tableName if not NULL then print information for this table only
1:eac0369: 	 *
1:eac0369: 	 * @return String	The information on the scan nodes from the 
1:eac0369: 	 *					statement execution plan as a String.
1:eac0369: 	 */
1:eac0369: 	public String getScanStatisticsText(String tableName, int depth)
1:eac0369: 	{
1:eac0369: 		if ((tableName == null) || (tableName.equals(this.tableName)))
1:eac0369: 			return getStatementExecutionPlanText(depth);
1:eac0369: 		else
1:eac0369: 			return (String)"";
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 
1:eac0369: 
1:eac0369: 	// Class implementation
1:eac0369: 	
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return getStatementExecutionPlanText(0);
1:eac0369: 	}
1:eac0369: 	/**
1:eac0369: 	 * If this node is on a database item (like a table or an index), then provide a
1:eac0369:    * string that describes the on item.
1:eac0369:    *
1:eac0369: 	 */
1:eac0369:   public String getNodeOn(){
1:eac0369:     return MessageService.getTextMessage(
1:eac0369: 										SQLState.RTS_ON_USING,
1:eac0369: 										tableName,
1:eac0369: 										indexName);
1:eac0369:   }
1:eac0369: 	/**
1:eac0369:    * Format for display, a name for this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369:   public String getNodeName(){
1:eac0369:     return MessageService.getTextMessage(SQLState.RTS_HASH_SCAN);
1:eac0369:   }
1:48a9884:   
1:48a9884:   // -----------------------------------------------------
1:48a9884:   // XPLAINable Implementation
1:48a9884:   // -----------------------------------------------------
1:48a9884:   
1:48a9884:     public void accept(XPLAINVisitor visitor) {
1:48a9884:         //inform the visitor about my children
1:48a9884:         visitor.setNumberOfChildren(0);
1:48a9884:         
1:48a9884:         // pre-order, depth-first traversal
1:48a9884:         // me first
1:48a9884:         visitor.visit(this);
1:d95d0e7:         // I'm a leaf node, I have no children ...
1:48a9884:         
1:48a9884:     }
1:48a9884:     public String getRSXplainType() { return XPLAINUtil.OP_HASHSCAN; }
1:48a9884:     public String getRSXplainDetails()
1:48a9884:     {
1:48a9884:         if (this.indexName!=null)
1:48a9884:             return (this.isConstraint ? "C: " : "I: ") + this.indexName;
1:48a9884:         else
1:48a9884:             return "T: " + this.tableName;
1:48a9884:     }
1:48a9884:     public Object getScanPropsDescriptor(Object scanPropsID)
1:48a9884:     {
1:48a9884:         String scanObjectType, scanObjectName;
1:48a9884: 
1:48a9884:         if(this.indexName!=null){
1:48a9884:             if(this.isConstraint){
1:48a9884:                 scanObjectType = "C";  // constraint
1:48a9884:                 scanObjectName = this.indexName;
1:48a9884:             } else {
1:48a9884:                 scanObjectType = "I";  // index
1:48a9884:                 scanObjectName = this.indexName;
1:48a9884:             }
1:48a9884:         } else {
1:48a9884:             scanObjectType = "T";      // table
1:48a9884:             scanObjectName = this.tableName;
1:48a9884:         }
1:48a9884:         
1:48a9884:         String isoLevel = XPLAINUtil.getIsolationLevelCode(this.isolationLevel);
1:48a9884:         String hashkey_columns =
1:48a9884:             XPLAINUtil.getHashKeyColumnNumberString(this.hashKeyColumns);
1:48a9884:         
1:48a9884:         XPLAINScanPropsDescriptor scanRSDescriptor =            
1:48a9884:               new XPLAINScanPropsDescriptor(
1:48a9884:               (UUID)scanPropsID,      // the scan props UUID
1:48a9884:               scanObjectName,
1:48a9884:               scanObjectType,
1:48a9884:               null,             // the scan type: heap, btree, sort
1:48a9884:               isoLevel,         // the isolation level
1:48a9884:               null,             // the number of visited pages
1:48a9884:               null,             // the number of visited rows
1:48a9884:               null,             // the number of qualified rows
1:48a9884:               null,             // the number of visited deleted rows
1:48a9884:               null,             // the number of fetched columns
1:48a9884:               null,             // the bitset of fetched columns
1:48a9884:               null,             // the btree height
1:48a9884:               null,             // the fetch size
1:48a9884:               this.startPosition,
1:48a9884:               this.stopPosition,
1:48a9884:               this.scanQualifiers,
1:48a9884:               this.nextQualifiers,
1:48a9884:               hashkey_columns,
1:ce40a31:               this.hashtableSize
1:48a9884:             );
1:48a9884:         
1:48a9884:         FormatableProperties props = this.scanProperties;
1:48a9884: 
1:48a9884:         return XPLAINUtil.extractScanProps(scanRSDescriptor,props);
1:48a9884:     }
1:48a9884:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:48a9884:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:48a9884:     {
1:48a9884:         String lockMode = XPLAINUtil.getLockModeCode(this.lockString);
1:48a9884:         String lockGran = XPLAINUtil.getLockGranularityCode(this.lockString);
1:48a9884:         
1:48a9884:         return new XPLAINResultSetDescriptor(
1:48a9884:            (UUID)rsID,
1:48a9884:            getRSXplainType(),
1:48a9884:            getRSXplainDetails(),
1:ce40a31:            this.numOpens,            // the number of opens
1:48a9884:            null,                           // the number of index updates 
1:48a9884:            lockMode,                       // lock mode
1:48a9884:            lockGran,                       // lock granularity
1:48a9884:            (UUID)parentID,
1:ce40a31:            this.optimizerEstimatedRowCount,
1:ce40a31:            this.optimizerEstimatedCost,
1:48a9884:            null,                              // the affected rows
1:48a9884:            null,                              // the deferred rows
1:48a9884:            null,                              // the input rows
1:ce40a31:            this.rowsSeen,            // the seen rows
1:48a9884:            null,                              // the seen rows right
1:ce40a31:            this.rowsFiltered,        // the filtered rows
1:ce40a31:            this.rowsSeen-this.rowsFiltered,// the returned rows
1:48a9884:            null,                              // the empty right rows
1:48a9884:            null,                           // index key optimization
1:48a9884:            (UUID)scanID,
1:48a9884:            (UUID)sortID,
1:48a9884:            (UUID)stmtID,
1:48a9884:            (UUID)timingID);
1:48a9884:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:               this.hashtableSize
/////////////////////////////////////////////////////////////////////////
1:            this.numOpens,            // the number of opens
1:            this.optimizerEstimatedRowCount,
1:            this.optimizerEstimatedCost,
1:            this.rowsSeen,            // the seen rows
1:            this.rowsFiltered,        // the filtered rows
1:            this.rowsSeen-this.rowsFiltered,// the returned rows
commit:36b4892
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.ArrayUtil;
/////////////////////////////////////////////////////////////////////////
1: 		this.hashKeyColumns = ArrayUtil.copy( hashKeyColumns );
commit:7baf562
/////////////////////////////////////////////////////////////////////////
1:             // note that the "constraint" and "index" literals are names of SQL
1:             // objects and so do not need to be internationalized
1:                                         isConstraint ? "constraint" : "index",
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:d95d0e7
/////////////////////////////////////////////////////////////////////////
1:         // I'm a leaf node, I have no children ...
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:ae848fd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.util.StringUtil;
/////////////////////////////////////////////////////////////////////////
1: 				SQLState.RTS_START_POSITION) +
1: 			":\n" + StringUtil.ensureIndent(startPosition, depth + 2) + "\n" +
1: 			":\n" + StringUtil.ensureIndent(stopPosition, depth + 2) + "\n" +
1: 			":\n" + StringUtil.ensureIndent(scanQualifiers, depth + 2) + "\n" +
1: 			":\n" + StringUtil.ensureIndent(nextQualifiers, depth + 2) + "\n" +
1: 
commit:996c894
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 												SQLState.RTS_START_POSITION) +
0: 					": \n" + startPosition + 
0: 					": \n" + stopPosition +
0: 					":\n" + scanQualifiers + "\n" +
0: 					":\n" + nextQualifiers + "\n" +
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.util.StringUtil;
/////////////////////////////////////////////////////////////////////////
0: 				SQLState.RTS_START_POSITION) +
0: 			": \n" + StringUtil.ensureIndent(startPosition, depth + 2) + "\n" +
0: 			": \n" + StringUtil.ensureIndent(stopPosition, depth + 2) + "\n" +
0: 			":\n" + StringUtil.ensureIndent(scanQualifiers, depth + 2) + "\n" +
0: 			":\n" + StringUtil.ensureIndent(nextQualifiers, depth + 2) + "\n" +
1: 
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
1: import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
1: import org.apache.derby.impl.sql.catalog.XPLAINScanPropsDescriptor;
1: import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
/////////////////////////////////////////////////////////////////////////
1:   
1:   // -----------------------------------------------------
1:   // XPLAINable Implementation
1:   // -----------------------------------------------------
1:   
1:     public void accept(XPLAINVisitor visitor) {
1:         //inform the visitor about my children
1:         visitor.setNumberOfChildren(0);
1:         
1:         // pre-order, depth-first traversal
1:         // me first
1:         visitor.visit(this);
0:         // I´m a leaf node, I have no children ...
1:         
1:     }
1:     public String getRSXplainType() { return XPLAINUtil.OP_HASHSCAN; }
1:     public String getRSXplainDetails()
1:     {
1:         if (this.indexName!=null)
1:             return (this.isConstraint ? "C: " : "I: ") + this.indexName;
1:         else
1:             return "T: " + this.tableName;
1:     }
1:     public Object getScanPropsDescriptor(Object scanPropsID)
1:     {
1:         String scanObjectType, scanObjectName;
1: 
1:         if(this.indexName!=null){
1:             if(this.isConstraint){
1:                 scanObjectType = "C";  // constraint
1:                 scanObjectName = this.indexName;
1:             } else {
1:                 scanObjectType = "I";  // index
1:                 scanObjectName = this.indexName;
1:             }
1:         } else {
1:             scanObjectType = "T";      // table
1:             scanObjectName = this.tableName;
1:         }
1:         
1:         String isoLevel = XPLAINUtil.getIsolationLevelCode(this.isolationLevel);
1:         String hashkey_columns =
1:             XPLAINUtil.getHashKeyColumnNumberString(this.hashKeyColumns);
1:         
1:         XPLAINScanPropsDescriptor scanRSDescriptor =            
1:               new XPLAINScanPropsDescriptor(
1:               (UUID)scanPropsID,      // the scan props UUID
1:               scanObjectName,
1:               scanObjectType,
1:               null,             // the scan type: heap, btree, sort
1:               isoLevel,         // the isolation level
1:               null,             // the number of visited pages
1:               null,             // the number of visited rows
1:               null,             // the number of qualified rows
1:               null,             // the number of visited deleted rows
1:               null,             // the number of fetched columns
1:               null,             // the bitset of fetched columns
1:               null,             // the btree height
1:               null,             // the fetch size
1:               this.startPosition,
1:               this.stopPosition,
1:               this.scanQualifiers,
1:               this.nextQualifiers,
1:               hashkey_columns,
0:               new Integer(this.hashtableSize)
1:             );
1:         
1:         FormatableProperties props = this.scanProperties;
1: 
1:         return XPLAINUtil.extractScanProps(scanRSDescriptor,props);
1:     }
1:     public Object getResultSetDescriptor(Object rsID, Object parentID,
1:             Object scanID, Object sortID, Object stmtID, Object timingID)
1:     {
1:         String lockMode = XPLAINUtil.getLockModeCode(this.lockString);
1:         String lockGran = XPLAINUtil.getLockGranularityCode(this.lockString);
1:         
1:         return new XPLAINResultSetDescriptor(
1:            (UUID)rsID,
1:            getRSXplainType(),
1:            getRSXplainDetails(),
0:            new Integer(this.numOpens),            // the number of opens
1:            null,                           // the number of index updates 
1:            lockMode,                       // lock mode
1:            lockGran,                       // lock granularity
1:            (UUID)parentID,
0:            new Double(this.optimizerEstimatedRowCount),
0:            new Double(this.optimizerEstimatedCost),
1:            null,                              // the affected rows
1:            null,                              // the deferred rows
1:            null,                              // the input rows
0:            new Integer(this.rowsSeen),            // the seen rows
1:            null,                              // the seen rows right
0:            new Integer(this.rowsFiltered),        // the filtered rows
0:            new Integer(this.rowsSeen-this.rowsFiltered),// the returned rows
1:            null,                              // the empty right rows
1:            null,                           // index key optimization
1:            (UUID)scanID,
1:            (UUID)sortID,
1:            (UUID)stmtID,
1:            (UUID)timingID);
1:     }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:0cc1b09
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute.rts;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.util.PropertyUtil;
1: 
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: import org.apache.derby.iapi.services.io.FormatableProperties;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: import java.util.Properties;
1: 
1: 
1: /**
1:   ResultSetStatistics implemenation for HashScanResultSet.
1: 
0:   @author jerry
1: 
1: */
1: public class RealHashScanStatistics
1: 	extends RealNoPutResultSetStatistics
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	/* Leave these fields public for object inspectors */
1: 	public boolean isConstraint;
1: 	public int hashtableSize;
1: 	public int[] hashKeyColumns;
1: 	public String isolationLevel;
1: 	public String lockString;
1: 	public String tableName;
1: 	public String indexName;
1: 	public String nextQualifiers;
1: 	public String scanQualifiers;
1: 	public String startPosition = null;
1: 	public String stopPosition = null;
1: 	public FormatableProperties scanProperties;
1: 
1: 	// CONSTRUCTORS
1: 
1: 	/**
1: 	 * 
1: 	 *
1: 	 */
1:     public	RealHashScanStatistics(
1: 									int numOpens,
1: 									int rowsSeen,
1: 									int rowsFiltered,
1: 									long constructorTime,
1: 									long openTime,
1: 									long nextTime,
1: 									long closeTime,
1: 									int resultSetNumber,
1: 									String tableName,
1: 									String indexName,
1: 									boolean isConstraint,
1: 									int hashtableSize,
1: 									int[] hashKeyColumns,
1: 									String scanQualifiers,
1: 									String nextQualifiers,
1: 									Properties scanProperties,
1: 									String startPosition,
1: 									String stopPosition,
1: 									String isolationLevel,
1: 									String lockString,
1: 									double optimizerEstimatedRowCount,
1: 									double optimizerEstimatedCost
1: 									)
1: 	{
1: 		super(
1: 			numOpens,
1: 			rowsSeen,
1: 			rowsFiltered,
1: 			constructorTime,
1: 			openTime,
1: 			nextTime,
1: 			closeTime,
1: 			resultSetNumber,
1: 			optimizerEstimatedRowCount,
1: 			optimizerEstimatedCost
1: 			);
1: 		this.tableName = tableName;
1: 		this.indexName = indexName;
1: 		this.isConstraint = isConstraint;
1: 		this.hashtableSize = hashtableSize;
0: 		this.hashKeyColumns = hashKeyColumns;
1: 		this.scanQualifiers = scanQualifiers;
1: 		this.nextQualifiers = nextQualifiers;
1: 		this.scanProperties = new FormatableProperties();
1: 		if (scanProperties != null)
1: 		{
1: 			for (Enumeration e = scanProperties.keys(); e.hasMoreElements(); )
1: 			{
1: 				String key = (String)e.nextElement();
1: 				this.scanProperties.put(key, scanProperties.get(key));
1: 			}
1: 		}
1: 		this.startPosition = startPosition;
1: 		this.stopPosition = stopPosition;
1: 		this.isolationLevel = isolationLevel;
1: 		this.lockString = lockString;
1: 	}
1: 
1: 	// ResultSetStatistics methods
1: 
1: 	/**
1: 	 * Return the statement execution plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 *
1: 	 * @return String	The statement executio plan as a String.
1: 	 */
1: 	public String getStatementExecutionPlanText(int depth)
1: 	{
1: 		String header;
1: 		String isolationString = null;
1: 
1: 		initFormatInfo(depth);
1: 
1: 		if (indexName != null)
1: 		{
1: 			header =
1: 				indent +
1: 					MessageService.getTextMessage(
1: 										SQLState.RTS_HASH_SCAN_RS_USING,
1: 										tableName,
1: 										MessageService.getTextMessage(
0: 											isConstraint ?
0: 												SQLState.RTS_CONSTRAINT :
0: 												SQLState.RTS_INDEX),
1: 										indexName);
1: 		}
1: 		else
1: 		{
1: 			header =
1: 				indent +
1: 					MessageService.getTextMessage(SQLState.RTS_HASH_SCAN_RS,
1: 														tableName);
1: 		}
1: 
1: 		header = header + " " +
1: 					MessageService.getTextMessage(
1: 										SQLState.RTS_LOCKING,
1: 										isolationLevel,
1: 										lockString) +
1: 					": \n";
1: 
1: 		String scanInfo =
1: 			indent +
1: 					MessageService.getTextMessage(SQLState.RTS_SCAN_INFO) +
1: 					": \n" +
1: 					PropertyUtil.sortProperties(scanProperties, subIndent);
1: 		
1: 		String hashKeyColumnString;
1: 		if (hashKeyColumns.length == 1)
1: 		{
1: 			hashKeyColumnString = MessageService.getTextMessage(
1: 														SQLState.RTS_HASH_KEY) +
1: 									" " + hashKeyColumns[0];
1: 		}
1: 		else
1: 		{
1: 			hashKeyColumnString = MessageService.getTextMessage(
1: 													SQLState.RTS_HASH_KEYS) +
1: 									" (" + hashKeyColumns[0];
1: 			for (int index = 1; index < hashKeyColumns.length; index++)
1: 			{
1: 				hashKeyColumnString = hashKeyColumnString + "," + hashKeyColumns[index];
1: 			}
1: 			hashKeyColumnString = hashKeyColumnString + ")";
1: 		}
1: 
1: 		return
1: 			header +
1: 			indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
1: 						" = " + numOpens + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_HASH_TABLE_SIZE) +
1: 						" = " + hashtableSize + "\n" +
1: 			indent + hashKeyColumnString + "\n" +
1: 			indent + MessageService.getTextMessage(SQLState.RTS_ROWS_SEEN) +
1: 						" = " + rowsSeen + "\n" +
1: 			indent + MessageService.getTextMessage(
1: 												SQLState.RTS_ROWS_FILTERED) +
1: 						" = " + rowsFiltered + "\n" +
1: 			dumpTimeStats(indent, subIndent) + "\n" +
1: 			((rowsSeen > 0) 
1: 				?
1: 					subIndent + MessageService.getTextMessage(
1: 													SQLState.RTS_NEXT_TIME) +
1: 								" = " + (nextTime / rowsSeen) + "\n"
1: 				: 
1: 					"") + "\n" +
1: 			scanInfo +
1: 			subIndent + MessageService.getTextMessage(
0: 												SQLState.RTS_START_POSITION) +
0: 					": \n" + startPosition + 
1: 			subIndent + MessageService.getTextMessage(
1: 												SQLState.RTS_STOP_POSITION) +
0: 					": \n" + stopPosition +
1: 			subIndent + MessageService.getTextMessage(
1: 													SQLState.RTS_SCAN_QUALS) +
0: 					":\n" + scanQualifiers + "\n" +
1: 			subIndent + MessageService.getTextMessage(
1: 													SQLState.RTS_NEXT_QUALS) +
0: 					":\n" + nextQualifiers + "\n" +
1: 			// RESOLVE - estimated row count and cost will eventually 
1: 			// be displayed for all nodes
1: 			dumpEstimatedCosts(subIndent);
1: 	}
1: 
1: 	/**
1: 	 * Return information on the scan nodes from the statement execution 
1: 	 * plan as a String.
1: 	 *
1: 	 * @param depth	Indentation level.
1: 	 * @param tableName if not NULL then print information for this table only
1: 	 *
1: 	 * @return String	The information on the scan nodes from the 
1: 	 *					statement execution plan as a String.
1: 	 */
1: 	public String getScanStatisticsText(String tableName, int depth)
1: 	{
1: 		if ((tableName == null) || (tableName.equals(this.tableName)))
1: 			return getStatementExecutionPlanText(depth);
1: 		else
1: 			return (String)"";
1: 	}
1: 		
1: 
1: 
1: 	// Class implementation
1: 	
1: 	public String toString()
1: 	{
1: 		return getStatementExecutionPlanText(0);
1: 	}
1: 	/**
1: 	 * If this node is on a database item (like a table or an index), then provide a
1:    * string that describes the on item.
1:    *
1: 	 */
1:   public String getNodeOn(){
1:     return MessageService.getTextMessage(
1: 										SQLState.RTS_ON_USING,
1: 										tableName,
1: 										indexName);
1:   }
1: 	/**
1:    * Format for display, a name for this node.
1: 	 *
1: 	 */
1:   public String getNodeName(){
1:     return MessageService.getTextMessage(SQLState.RTS_HASH_SCAN);
1:   }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute.rts
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute.rts;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.util.PropertyUtil;
0: 
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableProperties;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: import java.util.Enumeration;
0: import java.util.Hashtable;
0: import java.util.Properties;
0: 
0: 
0: /**
0:   ResultSetStatistics implemenation for HashScanResultSet.
0: 
0:   @author jerry
0: 
0: */
0: public class RealHashScanStatistics
0: 	extends RealNoPutResultSetStatistics
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	/* Leave these fields public for object inspectors */
0: 	public boolean isConstraint;
0: 	public int hashtableSize;
0: 	public int[] hashKeyColumns;
0: 	public String isolationLevel;
0: 	public String lockString;
0: 	public String tableName;
0: 	public String indexName;
0: 	public String nextQualifiers;
0: 	public String scanQualifiers;
0: 	public String startPosition = null;
0: 	public String stopPosition = null;
0: 	public FormatableProperties scanProperties;
0: 
0: 	// CONSTRUCTORS
0: 
0: 	/**
0: 	 * 
0: 	 *
0: 	 */
0:     public	RealHashScanStatistics(
0: 									int numOpens,
0: 									int rowsSeen,
0: 									int rowsFiltered,
0: 									long constructorTime,
0: 									long openTime,
0: 									long nextTime,
0: 									long closeTime,
0: 									int resultSetNumber,
0: 									String tableName,
0: 									String indexName,
0: 									boolean isConstraint,
0: 									int hashtableSize,
0: 									int[] hashKeyColumns,
0: 									String scanQualifiers,
0: 									String nextQualifiers,
0: 									Properties scanProperties,
0: 									String startPosition,
0: 									String stopPosition,
0: 									String isolationLevel,
0: 									String lockString,
0: 									double optimizerEstimatedRowCount,
0: 									double optimizerEstimatedCost
0: 									)
0: 	{
0: 		super(
0: 			numOpens,
0: 			rowsSeen,
0: 			rowsFiltered,
0: 			constructorTime,
0: 			openTime,
0: 			nextTime,
0: 			closeTime,
0: 			resultSetNumber,
0: 			optimizerEstimatedRowCount,
0: 			optimizerEstimatedCost
0: 			);
0: 		this.tableName = tableName;
0: 		this.indexName = indexName;
0: 		this.isConstraint = isConstraint;
0: 		this.hashtableSize = hashtableSize;
0: 		this.hashKeyColumns = hashKeyColumns;
0: 		this.scanQualifiers = scanQualifiers;
0: 		this.nextQualifiers = nextQualifiers;
0: 		this.scanProperties = new FormatableProperties();
0: 		if (scanProperties != null)
0: 		{
0: 			for (Enumeration e = scanProperties.keys(); e.hasMoreElements(); )
0: 			{
0: 				String key = (String)e.nextElement();
0: 				this.scanProperties.put(key, scanProperties.get(key));
0: 			}
0: 		}
0: 		this.startPosition = startPosition;
0: 		this.stopPosition = stopPosition;
0: 		this.isolationLevel = isolationLevel;
0: 		this.lockString = lockString;
0: 	}
0: 
0: 	// ResultSetStatistics methods
0: 
0: 	/**
0: 	 * Return the statement execution plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 *
0: 	 * @return String	The statement executio plan as a String.
0: 	 */
0: 	public String getStatementExecutionPlanText(int depth)
0: 	{
0: 		String header;
0: 		String isolationString = null;
0: 
0: 		initFormatInfo(depth);
0: 
0: 		if (indexName != null)
0: 		{
0: 			header =
0: 				indent +
0: 					MessageService.getTextMessage(
0: 										SQLState.RTS_HASH_SCAN_RS_USING,
0: 										tableName,
0: 										MessageService.getTextMessage(
0: 											isConstraint ?
0: 												SQLState.RTS_CONSTRAINT :
0: 												SQLState.RTS_INDEX),
0: 										indexName);
0: 		}
0: 		else
0: 		{
0: 			header =
0: 				indent +
0: 					MessageService.getTextMessage(SQLState.RTS_HASH_SCAN_RS,
0: 														tableName);
0: 		}
0: 
0: 		header = header + " " +
0: 					MessageService.getTextMessage(
0: 										SQLState.RTS_LOCKING,
0: 										isolationLevel,
0: 										lockString) +
0: 					": \n";
0: 
0: 		String scanInfo =
0: 			indent +
0: 					MessageService.getTextMessage(SQLState.RTS_SCAN_INFO) +
0: 					": \n" +
0: 					PropertyUtil.sortProperties(scanProperties, subIndent);
0: 		
0: 		String hashKeyColumnString;
0: 		if (hashKeyColumns.length == 1)
0: 		{
0: 			hashKeyColumnString = MessageService.getTextMessage(
0: 														SQLState.RTS_HASH_KEY) +
0: 									" " + hashKeyColumns[0];
0: 		}
0: 		else
0: 		{
0: 			hashKeyColumnString = MessageService.getTextMessage(
0: 													SQLState.RTS_HASH_KEYS) +
0: 									" (" + hashKeyColumns[0];
0: 			for (int index = 1; index < hashKeyColumns.length; index++)
0: 			{
0: 				hashKeyColumnString = hashKeyColumnString + "," + hashKeyColumns[index];
0: 			}
0: 			hashKeyColumnString = hashKeyColumnString + ")";
0: 		}
0: 
0: 		return
0: 			header +
0: 			indent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +
0: 						" = " + numOpens + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_HASH_TABLE_SIZE) +
0: 						" = " + hashtableSize + "\n" +
0: 			indent + hashKeyColumnString + "\n" +
0: 			indent + MessageService.getTextMessage(SQLState.RTS_ROWS_SEEN) +
0: 						" = " + rowsSeen + "\n" +
0: 			indent + MessageService.getTextMessage(
0: 												SQLState.RTS_ROWS_FILTERED) +
0: 						" = " + rowsFiltered + "\n" +
0: 			dumpTimeStats(indent, subIndent) + "\n" +
0: 			((rowsSeen > 0) 
0: 				?
0: 					subIndent + MessageService.getTextMessage(
0: 													SQLState.RTS_NEXT_TIME) +
0: 								" = " + (nextTime / rowsSeen) + "\n"
0: 				: 
0: 					"") + "\n" +
0: 			scanInfo +
0: 			subIndent + MessageService.getTextMessage(
0: 												SQLState.RTS_START_POSITION) +
0: 					": \n" + startPosition + 
0: 			subIndent + MessageService.getTextMessage(
0: 												SQLState.RTS_STOP_POSITION) +
0: 					": \n" + stopPosition +
0: 			subIndent + MessageService.getTextMessage(
0: 													SQLState.RTS_SCAN_QUALS) +
0: 					":\n" + scanQualifiers + "\n" +
0: 			subIndent + MessageService.getTextMessage(
0: 													SQLState.RTS_NEXT_QUALS) +
0: 					":\n" + nextQualifiers + "\n" +
0: 			// RESOLVE - estimated row count and cost will eventually 
0: 			// be displayed for all nodes
0: 			dumpEstimatedCosts(subIndent);
0: 	}
0: 
0: 	/**
0: 	 * Return information on the scan nodes from the statement execution 
0: 	 * plan as a String.
0: 	 *
0: 	 * @param depth	Indentation level.
0: 	 * @param tableName if not NULL then print information for this table only
0: 	 *
0: 	 * @return String	The information on the scan nodes from the 
0: 	 *					statement execution plan as a String.
0: 	 */
0: 	public String getScanStatisticsText(String tableName, int depth)
0: 	{
0: 		if ((tableName == null) || (tableName.equals(this.tableName)))
0: 			return getStatementExecutionPlanText(depth);
0: 		else
0: 			return (String)"";
0: 	}
0: 		
0: 
0: 
0: 	// Class implementation
0: 	
0: 	public String toString()
0: 	{
0: 		return getStatementExecutionPlanText(0);
0: 	}
0: 	/**
0: 	 * If this node is on a database item (like a table or an index), then provide a
0:    * string that describes the on item.
0:    *
0: 	 */
0:   public String getNodeOn(){
0:     return MessageService.getTextMessage(
0: 										SQLState.RTS_ON_USING,
0: 										tableName,
0: 										indexName);
0:   }
0: 	/**
0:    * Format for display, a name for this node.
0: 	 *
0: 	 */
0:   public String getNodeName(){
0:     return MessageService.getTextMessage(SQLState.RTS_HASH_SCAN);
0:   }
0: }
============================================================================