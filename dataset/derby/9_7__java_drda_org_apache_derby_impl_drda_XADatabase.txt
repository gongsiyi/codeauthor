1:bc61783: /*
1:38083d6: 
1:bc61783:    Derby - Class org.apache.derby.impl.drda.XADatabase.java
25:bc61783: 
1:59e5225:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59e5225:    contributor license agreements.  See the NOTICE file distributed with
1:59e5225:    this work for additional information regarding copyright ownership.
1:59e5225:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59e5225:    (the "License"); you may not use this file except in compliance with
1:59e5225:    the License.  You may obtain a copy of the License at
1:bc61783: 
1:bc61783:       http://www.apache.org/licenses/LICENSE-2.0
1:bc61783: 
1:bc61783:    Unless required by applicable law or agreed to in writing, software
1:bc61783:    distributed under the License is distributed on an "AS IS" BASIS,
1:bc61783:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc61783:    See the License for the specific language governing permissions and
1:bc61783:    limitations under the License.
1:bc61783: 
7:bc61783:  */
1:bc61783: 
1:bc61783: package org.apache.derby.impl.drda;
1:bc61783: 
1:bc61783: import java.sql.SQLException;
1:bc61783: import java.util.Properties;
1:db4c995: import javax.sql.XAConnection;
1:db4c995: import javax.transaction.xa.XAResource;
1:58bf06e: import org.apache.derby.iapi.error.ExceptionSeverity;
1:faf2134: import org.apache.derby.iapi.jdbc.EngineConnection;
1:bb9f97a: import org.apache.derby.iapi.jdbc.ResourceAdapter;
1:58bf06e: import org.apache.derby.iapi.reference.MessageId;
1:58bf06e: import org.apache.derby.iapi.services.i18n.MessageService;
1:58bf06e: import org.apache.derby.iapi.services.info.JVMInfo;
1:58bf06e: import org.apache.derby.jdbc.EmbeddedXADataSourceInterface;
1:db4c995: import org.apache.derby.jdbc.EmbeddedXADataSource;
1:bc61783: 
1:b3da2d3: /**
1:b3da2d3:  * This class contains database state specific to XA,
1:b3da2d3:  * specifically the XAResource that will be used for XA commands.
1:b3da2d3:  */
1:b3da2d3: 
1:bc61783: class XADatabase extends Database {
1:bc61783: 
1:bc61783: 
1:4f996a4:     // XA Datasource used by all the XA connection requests
1:58bf06e:     private EmbeddedXADataSourceInterface xaDataSource;
1:bc61783: 
1:4f996a4:     private XAResource xaResource;
1:4f996a4:     private XAConnection xaConnection;
1:4f996a4:     private ResourceAdapter ra;
1:4f996a4: 
1:bc61783:     
1:4f996a4:     XADatabase (String dbName)
2:4f996a4:     {
1:4f996a4:         super(dbName);
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      * Make a new connection using the database name and set 
1:4f996a4:      * the connection in the database
1:b004dff:      * @throws java.sql.SQLException
1:b004dff:      */
1:b004dff:     @Override
1:b004dff:     synchronized void makeConnection(Properties p) throws SQLException
1:4f996a4:     {
1:4e0e1f1:         if (xaDataSource == null) {
1:4469400:             Class<?> clazz;
1:4e0e1f1:             try {
1:4e0e1f1:                 if (JVMInfo.hasJNDI()) {
1:4469400:                     clazz = Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource");
1:4469400:                     xaDataSource = (EmbeddedXADataSourceInterface) clazz.getConstructor().newInstance();
1:4e0e1f1:                 } else {
1:4469400:                     clazz = Class.forName("org.apache.derby.jdbc.BasicEmbeddedXADataSource40");
1:4469400:                     xaDataSource = (EmbeddedXADataSourceInterface) clazz.getConstructor().newInstance();
1:4e0e1f1:                 }
1:4e0e1f1:             } catch (Exception e) {
1:4e0e1f1:                 SQLException ne = new SQLException(
1:4e0e1f1:                         MessageService.getTextMessage(
1:4e0e1f1:                             MessageId.CORE_DATABASE_NOT_AVAILABLE),
1:4e0e1f1:                         "08006",
1:4e0e1f1:                         ExceptionSeverity.DATABASE_SEVERITY);
1:4e0e1f1:                 ne.initCause(e);
1:4e0e1f1:                 throw ne;
1:4e0e1f1:             }
1:4f996a4:         }
1:bc61783: 
1:4f996a4:         xaDataSource.setDatabaseName(getShortDbName());
1:4f996a4:         appendAttrString(p);
1:4f996a4:         if (attrString != null)
1:4f996a4:             xaDataSource.setConnectionAttributes(attrString);
1:4f996a4:         
1:4f996a4:         EngineConnection conn = getConnection();
1:4f996a4:         // If we have no existing connection. this is a brand new XAConnection.
1:4f996a4:         if (conn == null)
1:4f996a4:         {
1:4f996a4:             xaConnection = xaDataSource.getXAConnection(userId,password);
1:4f996a4:             ra = xaDataSource.getResourceAdapter();
1:4f996a4:             setXAResource(xaConnection.getXAResource());
1:4f996a4:         }
1:4f996a4:         else // this is just a connection reset. Close the logical connection.
1:4f996a4:         {
1:4f996a4:             conn.close();
1:4f996a4:         }
1:4f996a4:         
1:4f996a4:         // Get a new logical connection.
1:faf2134:         // Contract between network server and embedded engine
1:faf2134:         // is that any connection returned implements EngineConnection.
1:db9a013:         conn = (EngineConnection) xaConnection.getConnection();
1:4f996a4:         // Client will always drive the commits so connection should
1:4f996a4:         // always be autocommit false on the server. DERBY-898/DERBY-899
1:4f996a4:         conn.setAutoCommit(false);
1:4f996a4:         setConnection(conn);        
1:4f996a4:     }
1:38083d6: 
1:4f996a4:     /** SetXAResource
1:4f996a4:      * @param resource XAResource for this connection
1:4f996a4:      */
1:4f996a4:     protected void setXAResource (XAResource resource)
1:4f996a4:     {
1:4f996a4:         this.xaResource = resource;
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      * get XA Resource for this connection
1:4f996a4:      */
1:4f996a4:     protected XAResource getXAResource ()
1:4f996a4:     {
1:4f996a4:         return this.xaResource;
1:4f996a4:     }
1:bc61783: 
1:4f996a4:     /**
1:4f996a4:      * @return The ResourceAdapter instance for
1:4f996a4:      *         the underlying database.
1:4f996a4:      */
1:4f996a4:     ResourceAdapter getResourceAdapter()
1:4f996a4:     {
1:4f996a4:         return this.ra;
1:4f996a4:     }
2:38083d6: }
1:bc61783: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:             Class<?> clazz;
1:                     clazz = Class.forName("org.apache.derby.jdbc.EmbeddedXADataSource");
1:                     xaDataSource = (EmbeddedXADataSourceInterface) clazz.getConstructor().newInstance();
1:                     clazz = Class.forName("org.apache.derby.jdbc.BasicEmbeddedXADataSource40");
1:                     xaDataSource = (EmbeddedXADataSourceInterface) clazz.getConstructor().newInstance();
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b004dff
/////////////////////////////////////////////////////////////////////////
1:      * @throws java.sql.SQLException
1:      */
1:     @Override
1:     synchronized void makeConnection(Properties p) throws SQLException
commit:38667d9
/////////////////////////////////////////////////////////////////////////
0:                         "org.apache.derby.jdbc.BasicEmbeddedXADataSource40").
commit:4e0e1f1
/////////////////////////////////////////////////////////////////////////
1:         if (xaDataSource == null) {
1:             try {
1:                 if (JVMInfo.hasJNDI()) {
0:                     xaDataSource =
0:                         (EmbeddedXADataSourceInterface)Class.forName(
0:                         "org.apache.derby.jdbc.EmbeddedXADataSource").
0:                         newInstance();
1:                 } else {
0:                     xaDataSource =
0:                         (EmbeddedXADataSourceInterface)Class.forName(
0:                         "org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40").
0:                         newInstance();
1:                 }
1:             } catch (Exception e) {
1:                 SQLException ne = new SQLException(
1:                         MessageService.getTextMessage(
1:                             MessageId.CORE_DATABASE_NOT_AVAILABLE),
1:                         "08006",
1:                         ExceptionSeverity.DATABASE_SEVERITY);
1:                 ne.initCause(e);
1:                 throw ne;
1:             }
commit:58bf06e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.ExceptionSeverity;
1: import org.apache.derby.iapi.reference.MessageId;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import org.apache.derby.iapi.services.info.JVMInfo;
1: import org.apache.derby.jdbc.EmbeddedXADataSourceInterface;
/////////////////////////////////////////////////////////////////////////
1:     private EmbeddedXADataSourceInterface xaDataSource;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db9a013
/////////////////////////////////////////////////////////////////////////
1:         conn = (EngineConnection) xaConnection.getConnection();
commit:db4c995
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.XAConnection;
1: import javax.transaction.xa.XAResource;
1: import org.apache.derby.jdbc.EmbeddedXADataSource;
commit:b3da2d3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * This class contains database state specific to XA,
1:  * specifically the XAResource that will be used for XA commands.
0:  * @author kmarsden@Sourcery.Org
1:  */
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4f996a4
/////////////////////////////////////////////////////////////////////////
1:     // XA Datasource used by all the XA connection requests
0:     private EmbeddedXADataSource xaDataSource;
1:     private XAResource xaResource;
1:     private XAConnection xaConnection;
1:     private ResourceAdapter ra;
1:     
1:     XADatabase (String dbName)
1:     {
1:         super(dbName);
1:     }
1:     /**
1:      * Make a new connection using the database name and set 
1:      * the connection in the database
0:      **/
0:     synchronized void makeConnection(Properties p) throws
1:     {
0:         if (xaDataSource == null)
1:         {
0:             xaDataSource = new EmbeddedXADataSource();
1:         }
1:         xaDataSource.setDatabaseName(getShortDbName());
1:         appendAttrString(p);
1:         if (attrString != null)
1:             xaDataSource.setConnectionAttributes(attrString);
1:         
1:         EngineConnection conn = getConnection();
1:         // If we have no existing connection. this is a brand new XAConnection.
1:         if (conn == null)
1:         {
1:             xaConnection = xaDataSource.getXAConnection(userId,password);
1:             ra = xaDataSource.getResourceAdapter();
1:             setXAResource(xaConnection.getXAResource());
1:         }
1:         else // this is just a connection reset. Close the logical connection.
1:         {
1:             conn.close();
1:         }
1:         
1:         // Get a new logical connection.
0:          conn = (EngineConnection) xaConnection.getConnection();
1:         // Client will always drive the commits so connection should
1:         // always be autocommit false on the server. DERBY-898/DERBY-899
1:         conn.setAutoCommit(false);
1:         setConnection(conn);        
1:     }
1:     /** SetXAResource
1:      * @param resource XAResource for this connection
1:      */
1:     protected void setXAResource (XAResource resource)
1:     {
1:         this.xaResource = resource;
1:     }
1:     /**
1:      * get XA Resource for this connection
1:      */
1:     protected XAResource getXAResource ()
1:     {
1:         return this.xaResource;
1:     }
1:     /**
1:      * @return The ResourceAdapter instance for
1:      *         the underlying database.
1:      */
1:     ResourceAdapter getResourceAdapter()
1:     {
1:         return this.ra;
1:     }
commit:df2ca5a
/////////////////////////////////////////////////////////////////////////
0: 		xaDataSource.setDatabaseName(getShortDbName());
commit:6f5654c
/////////////////////////////////////////////////////////////////////////
0: 		// Client will always drive the commits so connection should
0: 		// always be autocommit false on the server. DERBY-898/DERBY-899
0: 		conn.setAutoCommit(false);
commit:2e4a44e
/////////////////////////////////////////////////////////////////////////
0: 			setXAResource(xaConnection.getXAResource());
commit:38083d6
/////////////////////////////////////////////////////////////////////////
1: 		
0: 		Connection conn = getConnection();
0: 		// If we have no existing connection. this is a brand new XAConnection.
0: 		if (conn == null)
0: 		{
0: 			xaConnection = xaDataSource.getXAConnection(userId,password);
0: 			xaResource = xaConnection.getXAResource();
1: 		}
0: 		else // this is just a connection reset. Close the logical connection.
0: 		{
0: 			conn.close();
1: 		}
1: 		
0: 		// Get a new logical connection.
0: 		conn = xaConnection.getConnection();
commit:bc61783
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.drda.XADatabase.java
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
0: /**
0:  * This class contains database state specific to XA,
0:  * specifically the XAResource that will be used for XA commands.
0:  * @author kmarsden@Sourcery.Org
1:  */
1: 
1: package org.apache.derby.impl.drda;
1: 
0: import java.sql.Connection;
1: import java.sql.SQLException;
1: 
0: import javax.transaction.xa.XAResource;
0: import javax.sql.XADataSource;
0: import javax.sql.XAConnection;
1: 
0: import java.util.Hashtable;
1: import java.util.Properties;
0: import java.util.Enumeration;
1: 
1: 
0: import org.apache.derby.jdbc.EmbeddedXADataSource;
0: import org.apache.derby.impl.drda.DRDAXid;
0: import  org.apache.derby.iapi.jdbc.BrokeredConnection;
1: 
1: class XADatabase extends Database {
1: 
1: 
0: 	// XA Datasource used by all the XA connection requests
0: 	private EmbeddedXADataSource xaDataSource;
1: 
0: 	private XAResource xaResource;
0: 	private XAConnection xaConnection;
1: 
1: 	
0: 	protected XADatabase (String dbName)
0: 	{
0: 		super(dbName);
0: 		forXA = true;
0: 	}
1: 
0: 	/**
0: 	 * Make a new connection using the database name and set 
0: 	 * the connection in the database
0: 	 **/
0: 	protected synchronized Connection makeConnection(Properties p) throws
0:  SQLException
0: 	{
0: 		if (xaDataSource == null)
0: 		{
0: 			xaDataSource = new EmbeddedXADataSource();
0: 		}
1: 
0: 		xaDataSource.setDatabaseName(shortDbName);
0: 		appendAttrString(p);
0: 		if (attrString != null)
0: 			xaDataSource.setConnectionAttributes(attrString);
0: 		xaConnection = xaDataSource.getXAConnection(userId,password);
0: 		xaResource = xaConnection.getXAResource();
1: 
0: 		Connection conn = xaConnection.getConnection();
0: 		setConnection(conn);
0: 		return conn;
1: 		
0: 	}
1: 
0: 	/** SetXAResource
0: 	 * @param resource XAResource for this connection
1: 	 */
0: 	protected void setXAResource (XAResource resource)
0: 	{
0: 		this.xaResource = resource;
0: 	}
1: 
0: 	/** Set DRDA id for this connection
0: 	 * @param drdaId
1: 	 */
0: 	protected void setDrdaID(String drdaID)
0: 	{
0: 		if (getConnection() != null)
0: 			((BrokeredConnection) getConnection()).setDrdaID(drdaID);
0: 	}
1: 
1: 
0: 	/**
0: 	 *  Set the internal isolation level to use for preparing statements.
0: 	 *  Subsequent prepares will use this isoalation level
0: 	 * @param level internal isolation level 
0: 	 *
0: 	 * @throws SQLException
0: 	 * @see BrokeredConnection#setPrepareIsolation
0: 	 * 
1: 	 */
0: 	protected void setPrepareIsolation(int level) throws SQLException
0: 	{
0: 		((BrokeredConnection) getConnection()).setPrepareIsolation(level);
0: 	}
1: 
0: 	/** get prepare isolation level for this connection.
0: 	 * 
1: 	 */
0: 	protected int getPrepareIsolation() throws SQLException
0: 	{
0: 		return ((BrokeredConnection) getConnection()).getPrepareIsolation();
0: 	}
1: 
0: 	/**
0: 	 * get XA Resource for this connection
1: 	 */
0: 	protected XAResource getXAResource ()
0: 	{
0: 		return this.xaResource;
0: 	}
1: 
1: 
0: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
commit:4383496
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derby.impl.drda.XADatabase.java
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: /**
0:  * This class contains database state specific to XA,
0:  * specifically the XAResource that will be used for XA commands.
0:  * @author kmarsden@Sourcery.Org
0:  */
0: 
0: package org.apache.derby.impl.drda;
0: 
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: 
0: import javax.transaction.xa.XAResource;
0: import javax.sql.XADataSource;
0: import javax.sql.XAConnection;
0: 
0: import java.util.Hashtable;
0: import java.util.Properties;
0: import java.util.Enumeration;
0: 
0: 
0: import org.apache.derby.jdbc.EmbeddedXADataSource;
0: import org.apache.derby.impl.drda.DRDAXid;
0: import  org.apache.derby.iapi.jdbc.BrokeredConnection;
0: 
0: class XADatabase extends Database {
0: 
0: 
0: 	// XA Datasource used by all the XA connection requests
0: 	private EmbeddedXADataSource xaDataSource;
0: 
0: 	private XAResource xaResource;
0: 	private XAConnection xaConnection;
0: 
0: 	
0: 	protected XADatabase (String dbName)
0: 	{
0: 		super(dbName);
0: 		forXA = true;
0: 	}
0: 
0: 	/**
0: 	 * Make a new connection using the database name and set 
0: 	 * the connection in the database
0: 	 **/
0: 	protected synchronized Connection makeConnection(Properties p) throws
0:  SQLException
0: 	{
0: 		if (xaDataSource == null)
0: 		{
0: 			xaDataSource = new EmbeddedXADataSource();
0: 		}
0: 
0: 		xaDataSource.setDatabaseName(shortDbName);
0: 		appendAttrString(p);
0: 		if (attrString != null)
0: 			xaDataSource.setConnectionAttributes(attrString);
0: 		xaConnection = xaDataSource.getXAConnection(userId,password);
0: 		xaResource = xaConnection.getXAResource();
0: 
0: 		Connection conn = xaConnection.getConnection();
0: 		setConnection(conn);
0: 		return conn;
0: 		
0: 	}
0: 
0: 	/** SetXAResource
0: 	 * @param resource XAResource for this connection
0: 	 */
0: 	protected void setXAResource (XAResource resource)
0: 	{
0: 		this.xaResource = resource;
0: 	}
0: 
0: 	/** Set DRDA id for this connection
0: 	 * @param drdaId
0: 	 */
0: 	protected void setDrdaID(String drdaID)
0: 	{
0: 		if (getConnection() != null)
0: 			((BrokeredConnection) getConnection()).setDrdaID(drdaID);
0: 	}
0: 
0: 
0: 	/**
0: 	 *  Set the internal isolation level to use for preparing statements.
0: 	 *  Subsequent prepares will use this isoalation level
0: 	 * @param level internal isolation level 
0: 	 *
0: 	 * @throws SQLException
0: 	 * @see BrokeredConnection#setPrepareIsolation
0: 	 * 
0: 	 */
0: 	protected void setPrepareIsolation(int level) throws SQLException
0: 	{
0: 		((BrokeredConnection) getConnection()).setPrepareIsolation(level);
0: 	}
0: 
0: 	/** get prepare isolation level for this connection.
0: 	 * 
0: 	 */
0: 	protected int getPrepareIsolation() throws SQLException
0: 	{
0: 		return ((BrokeredConnection) getConnection()).getPrepareIsolation();
0: 	}
0: 
0: 	/**
0: 	 * get XA Resource for this connection
0: 	 */
0: 	protected XAResource getXAResource ()
0: 	{
0: 		return this.xaResource;
0: 	}
0: 
0: 
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ad40eda
/////////////////////////////////////////////////////////////////////////
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:bb9f97a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.jdbc.BrokeredConnection;
1: import org.apache.derby.iapi.jdbc.ResourceAdapter;
/////////////////////////////////////////////////////////////////////////
0: 	private ResourceAdapter ra;
/////////////////////////////////////////////////////////////////////////
0: 			ra = xaDataSource.getResourceAdapter();
/////////////////////////////////////////////////////////////////////////
0: 	/**
0: 	 * @return The ResourceAdapter instance for
0: 	 *         the underlying database.
0: 	 */
0: 	ResourceAdapter getResourceAdapter()
0: 	{
0: 		return this.ra;
0: 	}
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59e5225
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:f0b0870
/////////////////////////////////////////////////////////////////////////
0: 	 * @param drdaID
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3734dde
/////////////////////////////////////////////////////////////////////////
commit:faf2134
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.jdbc.EngineConnection;
/////////////////////////////////////////////////////////////////////////
0: 		EngineConnection conn = getConnection();
/////////////////////////////////////////////////////////////////////////
1:         // Contract between network server and embedded engine
1:         // is that any connection returned implements EngineConnection.
0:  		conn = (EngineConnection) xaConnection.getConnection();
commit:af35756
/////////////////////////////////////////////////////////////////////////
0: 	synchronized void makeConnection(Properties p) throws
/////////////////////////////////////////////////////////////////////////
0: 		setConnection(conn);		
commit:7df5ffe
/////////////////////////////////////////////////////////////////////////
0: 	XADatabase (String dbName)
============================================================================