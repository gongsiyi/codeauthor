1:b7730e4: /*
2:b7730e4: 
1:b7730e4:    Derby - Class org.apache.derby.impl.sql.execute.PrivilegeInfo
1:b7730e4: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:b7730e4: 
1:b7730e4: 	  http://www.apache.org/licenses/LICENSE-2.0
1:b7730e4: 
1:b7730e4:    Unless required by applicable law or agreed to in writing, software
1:b7730e4:    distributed under the License is distributed on an "AS IS" BASIS,
1:b7730e4:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7730e4:    See the License for the specific language governing permissions and
1:b7730e4:    limitations under the License.
1:b7730e4: 
1:b7730e4:  */
1:b7730e4: 
1:b7730e4: package org.apache.derby.impl.sql.execute;
1:b7730e4: 
1:b7730e4: import org.apache.derby.catalog.UUID;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:b7730e4: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:50ba36b: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:b7730e4: import org.apache.derby.iapi.sql.Activation;
1:b7730e4: import org.apache.derby.iapi.reference.SQLState;
1:b7730e4: 
1:b7730e4: import org.apache.derby.iapi.error.StandardException;
1:b7730e4: 
1:b7730e4: import java.util.List;
1:b7730e4: 
1:b7730e4: public abstract class PrivilegeInfo
1:b7730e4: {
1:b7730e4: 
1:b7730e4: 	/**
1:b7730e4: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE
2:b7730e4: 	 *
1:b7730e4: 	 * @param activation
1:b7730e4: 	 * @param grant true if grant, false if revoke
1:b7730e4: 	 * @param grantees a list of authorization ids (strings)
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException		Thrown on failure
1:b7730e4: 	 */
1:b7730e4: 	abstract public void executeGrantRevoke( Activation activation,
1:b7730e4: 											 boolean grant,
1:b7730e4: 											 List grantees)
1:b7730e4: 		throws StandardException;
1:b7730e4: 
1:b7730e4: 	/**
1:50ba36b: 	 * Determines whether a user is the owner of an object
1:439d1e8: 	 * (table, function, or procedure). Note that Database Owner can access
1:e1987c6: 	 * database objects without needing to be their owner
1:b7730e4: 	 *
1:e1987c6: 	 * @param user					authorizationId of current user
1:e1987c6: 	 * @param objectDescriptor		object being checked against
1:e1987c6: 	 * @param sd					SchemaDescriptor
1:e1987c6: 	 * @param dd					DataDictionary
1:b7730e4: 	 *
1:b7730e4: 	 * @exception StandardException if user does not own the object
1:b7730e4: 	 */
1:b7730e4: 	protected void checkOwnership( String user,
1:b7730e4: 								   TupleDescriptor objectDescriptor,
1:50ba36b: 								   SchemaDescriptor sd,
1:50ba36b: 								   DataDictionary dd)
1:b7730e4: 		throws StandardException
1:b7730e4: 	{
1:50ba36b: 		if (!user.equals(sd.getAuthorizationId()) &&
1:439d1e8: 				!user.equals(dd.getAuthorizationDatabaseOwner()))
1:50ba36b: 			throw StandardException.newException(SQLState.AUTH_NOT_OWNER,
1:50ba36b: 									  user,
1:50ba36b: 									  objectDescriptor.getDescriptorType(),
1:50ba36b: 									  sd.getSchemaName(),
1:50ba36b: 									  objectDescriptor.getDescriptorName());
1:b7730e4: 	}
1:8c26fb6: 	
1:8c26fb6: 	/**
1:8c26fb6: 	 * This method adds a warning if a revoke statement has not revoked 
1:8c26fb6: 	 * any privileges from a grantee.
1:8c26fb6: 	 * 
1:8c26fb6: 	 * @param activation
1:8c26fb6: 	 * @param grant true if grant, false if revoke
1:8c26fb6: 	 * @param privileges_revoked true, if at least one privilege has been 
1:8c26fb6: 	 * 							revoked from a grantee, false otherwise
1:8c26fb6: 	 * @param grantee authorization id of the user
1:8c26fb6: 	 */
1:8c26fb6: 	protected void addWarningIfPrivilegeNotRevoked( Activation activation,
1:8c26fb6: 													boolean grant,
1:8c26fb6: 													boolean privileges_revoked,
1:8c26fb6: 													String grantee) 
1:8c26fb6: 	{
1:8c26fb6: 		if(!grant && !privileges_revoked)
1:8c26fb6: 			activation.addWarning(StandardException.newWarning
1:8c26fb6: 					(SQLState.LANG_PRIVILEGE_NOT_REVOKED, grantee));
1:8c26fb6: 	}
1:b7730e4: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:439d1e8
/////////////////////////////////////////////////////////////////////////
1: 	 * (table, function, or procedure). Note that Database Owner can access
/////////////////////////////////////////////////////////////////////////
1: 				!user.equals(dd.getAuthorizationDatabaseOwner()))
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:8c26fb6
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * This method adds a warning if a revoke statement has not revoked 
1: 	 * any privileges from a grantee.
1: 	 * 
1: 	 * @param activation
1: 	 * @param grant true if grant, false if revoke
1: 	 * @param privileges_revoked true, if at least one privilege has been 
1: 	 * 							revoked from a grantee, false otherwise
1: 	 * @param grantee authorization id of the user
1: 	 */
1: 	protected void addWarningIfPrivilegeNotRevoked( Activation activation,
1: 													boolean grant,
1: 													boolean privileges_revoked,
1: 													String grantee) 
1: 	{
1: 		if(!grant && !privileges_revoked)
1: 			activation.addWarning(StandardException.newWarning
1: 					(SQLState.LANG_PRIVILEGE_NOT_REVOKED, grantee));
1: 	}
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:e1987c6
/////////////////////////////////////////////////////////////////////////
0: 	 * (table, function, or procedure). Note that DBA can access
1: 	 * database objects without needing to be their owner
1: 	 * @param user					authorizationId of current user
1: 	 * @param objectDescriptor		object being checked against
1: 	 * @param sd					SchemaDescriptor
1: 	 * @param dd					DataDictionary
commit:50ba36b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
/////////////////////////////////////////////////////////////////////////
1: 	 * Determines whether a user is the owner of an object
0: 	 * (table, function, or procedure).
0: 	 * @param DataDictionary
1: 								   SchemaDescriptor sd,
1: 								   DataDictionary dd)
1: 		if (!user.equals(sd.getAuthorizationId()) &&
0: 				!user.equals(dd.getAuthorizationDBA()))
1: 			throw StandardException.newException(SQLState.AUTH_NOT_OWNER,
1: 									  user,
1: 									  objectDescriptor.getDescriptorType(),
1: 									  sd.getSchemaName(),
1: 									  objectDescriptor.getDescriptorName());
commit:b7730e4
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.execute.PrivilegeInfo
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1: 	  http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import java.util.List;
1: 
1: public abstract class PrivilegeInfo
1: {
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for GRANT/REVOKE
1: 	 *
1: 	 * @param activation
1: 	 * @param grant true if grant, false if revoke
1: 	 * @param grantees a list of authorization ids (strings)
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	abstract public void executeGrantRevoke( Activation activation,
1: 											 boolean grant,
1: 											 List grantees)
1: 		throws StandardException;
1: 
1: 	/**
0: 	 * Determines whether a user is the owner of an object (table, function, or procedure).
1: 	 *
0: 	 * @param user
0: 	 * @param objectDescriptor
0: 	 * @param sd
1: 	 *
0: 	 * @return true iff the user is the owner of the schema
1: 	 *
1: 	 * @exception StandardException if user does not own the object
1: 	 */
1: 	protected void checkOwnership( String user,
1: 								   TupleDescriptor objectDescriptor,
0: 								   SchemaDescriptor sd)
1: 		throws StandardException
1: 	{
0: 		if( ! user.equals( sd.getAuthorizationId()))
0: 			throw StandardException.newException( SQLState.AUTH_NOT_OWNER,
0: 												  user,
0: 												  objectDescriptor.getDescriptorType(),
0: 												  sd.getSchemaName(),
0: 												  objectDescriptor.getDescriptorName());
1: 	}
1: }
============================================================================