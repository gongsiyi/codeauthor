1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.DropTableNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
13:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:4fb136d: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:4fb136d: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:4fb136d: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:4fb136d: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A DropTableNode is the root of a QueryTree that represents a DROP TABLE
1:eac0369:  * statement.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class DropTableNode extends DDLStatementNode
1:eac0369: {
1:eac0369: 	private long		conglomerateNumber;
1:eac0369: 	private int			dropBehavior;
1:eac0369: 	private	TableDescriptor	td;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a DropTableNode
1:eac0369: 	 *
1:6b50965: 	 * @param dropObjectName	The name of the object being dropped
1:eac0369: 	 * @param dropBehavior		Drop behavior (RESTRICT | CASCADE)
1:3bb140c:      * @param cm                The context manager
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     DropTableNode(TableName dropObjectName, int dropBehavior, ContextManager cm)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:3bb140c:         super(dropObjectName, cm);
1:3bb140c:         this.dropBehavior = dropBehavior;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() +
1:eac0369: 				"conglomerateNumber: " + conglomerateNumber + "\n" +
1:eac0369: 				"td: " + ((td == null) ? "null" : td.toString()) + "\n" +
1:eac0369: 				"dropBehavior: " + "\n" + dropBehavior + "\n";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "DROP TABLE";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this LockTableNode.  This means looking up the table,
1:eac0369: 	 * verifying it exists and getting the heap conglomerate number.
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:eac0369: 		CompilerContext			cc = getCompilerContext();
1:eac0369: 
1:eac0369: 		td = getTableDescriptor();
1:eac0369: 
1:eac0369: 		conglomerateNumber = td.getHeapConglomerateId();
1:eac0369: 
1:eac0369: 		/* Get the base conglomerate descriptor */
1:eac0369: 		ConglomerateDescriptor cd = td.getConglomerateDescriptor(conglomerateNumber);
1:eac0369: 
1:eac0369: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
1:eac0369: 		cc.createDependency(td);
1:eac0369: 		cc.createDependency(cd);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1:eac0369: 	 *
1:eac0369: 	 * @return	true if references SESSION schema tables, else false
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public boolean referencesSessionSchema()
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		//If table being dropped is in SESSION schema, then return true. 
1:eac0369: 		return isSessionSchema(td.getSchemaDescriptor());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// inherit generate() method from DDLStatementNode
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:58d069a: 		return	getGenericConstantActionFactory().getDropTableConstantAction(
1:58d069a: 			getFullName(),
1:58d069a: 			getRelativeName(),
1:58d069a: 			getSchemaDescriptor(td.getTableType() !=
1:58d069a: 								TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE,
1:58d069a: 								true),
1:58d069a: 			conglomerateNumber,
1:58d069a: 			td.getUUID(),
1:58d069a: 			dropBehavior);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class DropTableNode extends DDLStatementNode
1:      * Constructor for a DropTableNode
1:      * @param cm                The context manager
1:     DropTableNode(TableName dropObjectName, int dropBehavior, ContextManager cm)
1:         super(dropObjectName, cm);
1:         this.dropBehavior = dropBehavior;
0:         setNodeType(C_NodeTypes.DROP_TABLE_NODE);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
commit:58d069a
/////////////////////////////////////////////////////////////////////////
1: 		return	getGenericConstantActionFactory().getDropTableConstantAction(
1: 			getFullName(),
1: 			getRelativeName(),
1: 			getSchemaDescriptor(td.getTableType() !=
1: 								TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE,
1: 								true),
1: 			conglomerateNumber,
1: 			td.getUUID(),
1: 			dropBehavior);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4fb136d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:0061383
/////////////////////////////////////////////////////////////////////////
0: public class DropTableNode extends DDLStatementNode
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.DropTableNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.impl.sql.execute.BaseActivation;
0: import org.apache.derby.iapi.sql.ResultSet;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.StatementType;
1: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * A DropTableNode is the root of a QueryTree that represents a DROP TABLE
1:  * statement.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class DropTableNode extends DropStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private long		conglomerateNumber;
1: 	private int			dropBehavior;
1: 	private	TableDescriptor	td;
1: 
1: 	/**
0: 	 * Intializer for a DropTableNode
1: 	 *
0: 	 * @param objectName	The name of the object being dropped
1: 	 * @param dropBehavior		Drop behavior (RESTRICT | CASCADE)
1: 	 *
1: 	 */
1: 
0: 	public void init(Object dropObjectName, Object dropBehavior)
1: 		throws StandardException
1: 	{
0: 		initAndCheck(dropObjectName);
0: 		this.dropBehavior = ((Integer) dropBehavior).intValue();
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() +
1: 				"conglomerateNumber: " + conglomerateNumber + "\n" +
1: 				"td: " + ((td == null) ? "null" : td.toString()) + "\n" +
1: 				"dropBehavior: " + "\n" + dropBehavior + "\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
0: 	public String statementToString()
1: 	{
1: 		return "DROP TABLE";
1: 	}
1: 
1: 	/**
1: 	 * Bind this LockTableNode.  This means looking up the table,
1: 	 * verifying it exists and getting the heap conglomerate number.
1: 	 *
0: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
1: 		CompilerContext			cc = getCompilerContext();
1: 
1: 		td = getTableDescriptor();
1: 
1: 		conglomerateNumber = td.getHeapConglomerateId();
1: 
1: 		/* Get the base conglomerate descriptor */
1: 		ConglomerateDescriptor cd = td.getConglomerateDescriptor(conglomerateNumber);
1: 
1: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
1: 		cc.createDependency(td);
1: 		cc.createDependency(cd);
1: 
0: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1: 	 *
1: 	 * @return	true if references SESSION schema tables, else false
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public boolean referencesSessionSchema()
1: 		throws StandardException
1: 	{
1: 		//If table being dropped is in SESSION schema, then return true. 
1: 		return isSessionSchema(td.getSchemaDescriptor());
1: 	}
1: 
1: 	// inherit generate() method from DDLStatementNode
1: 
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
0: 		return	getGenericConstantActionFactory().getDropTableConstantAction( getFullName(),
0: 											 getRelativeName(),
0: 											 getSchemaDescriptor(),
0: 											 conglomerateNumber,
0: 											 td.getUUID(),
0: 											 dropBehavior);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param dropObjectName	The name of the object being dropped
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.impl.sql.execute.BaseActivation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.StatementType;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * A DropTableNode is the root of a QueryTree that represents a DROP TABLE
0:  * statement.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class DropTableNode extends DropStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private long		conglomerateNumber;
0: 	private int			dropBehavior;
0: 	private	TableDescriptor	td;
0: 
0: 	/**
0: 	 * Intializer for a DropTableNode
0: 	 *
0: 	 * @param objectName	The name of the object being dropped
0: 	 * @param dropBehavior		Drop behavior (RESTRICT | CASCADE)
0: 	 *
0: 	 */
0: 
0: 	public void init(Object dropObjectName, Object dropBehavior)
0: 		throws StandardException
0: 	{
0: 		initAndCheck(dropObjectName);
0: 		this.dropBehavior = ((Integer) dropBehavior).intValue();
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() +
0: 				"conglomerateNumber: " + conglomerateNumber + "\n" +
0: 				"td: " + ((td == null) ? "null" : td.toString()) + "\n" +
0: 				"dropBehavior: " + "\n" + dropBehavior + "\n";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String statementToString()
0: 	{
0: 		return "DROP TABLE";
0: 	}
0: 
0: 	/**
0: 	 * Bind this LockTableNode.  This means looking up the table,
0: 	 * verifying it exists and getting the heap conglomerate number.
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public QueryTreeNode bind() throws StandardException
0: 	{
0: 		CompilerContext			cc = getCompilerContext();
0: 
0: 		td = getTableDescriptor();
0: 
0: 		conglomerateNumber = td.getHeapConglomerateId();
0: 
0: 		/* Get the base conglomerate descriptor */
0: 		ConglomerateDescriptor cd = td.getConglomerateDescriptor(conglomerateNumber);
0: 
0: 		/* Statement is dependent on the TableDescriptor and ConglomerateDescriptor */
0: 		cc.createDependency(td);
0: 		cc.createDependency(cd);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
0: 	 *
0: 	 * @return	true if references SESSION schema tables, else false
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public boolean referencesSessionSchema()
0: 		throws StandardException
0: 	{
0: 		//If table being dropped is in SESSION schema, then return true. 
0: 		return isSessionSchema(td.getSchemaDescriptor());
0: 	}
0: 
0: 	// inherit generate() method from DDLStatementNode
0: 
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0: 		return	getGenericConstantActionFactory().getDropTableConstantAction( getFullName(),
0: 											 getRelativeName(),
0: 											 getSchemaDescriptor(),
0: 											 conglomerateNumber,
0: 											 td.getUUID(),
0: 											 dropBehavior);
0: 	}
0: }
============================================================================