1:50ff043: /*
1:50ff043:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest
5:50ff043:  
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:90e68d8:  
1:50ff043:       http://www.apache.org/licenses/LICENSE-2.0
1:50ff043:  
1:50ff043:    Unless required by applicable law or agreed to in writing, software
1:50ff043:    distributed under the License is distributed on an "AS IS" BASIS,
1:50ff043:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50ff043:    See the License for the specific language governing permissions and
1:50ff043:    limitations under the License.
1:50ff043:  
1:50ff043:  */
1:50ff043: package org.apache.derbyTesting.functionTests.tests.derbynet;
1:90e68d8: 
1:1ae02c9: import java.io.ByteArrayInputStream;
1:1ae02c9: import java.io.ByteArrayOutputStream;
1:1ae02c9: import java.io.IOException;
1:1ae02c9: import java.io.ObjectInputStream;
1:1ae02c9: import java.io.ObjectOutputStream;
1:b2c1772: import java.sql.Connection;
1:b2c1772: import java.sql.ResultSet;
1:d6401b1: import java.sql.SQLDataException;
1:50ff043: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:1ae02c9: import org.apache.derby.client.am.ClientMessageId;
1:1ae02c9: import org.apache.derby.client.am.SqlException;
1:1ae02c9: import org.apache.derby.shared.common.reference.SQLState;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:1ae02c9: import org.apache.derbyTesting.junit.JDBC;
1:1ae02c9: import org.apache.derbyTesting.junit.TestConfiguration;
1:50ff043: 
1:50ff043: /**
1:50ff043:  * This is used for testing the SqlException class.  This test can be added
1:50ff043:  * to.  My itch right now is to verify that exception chaining is working
1:50ff043:  * correctly.
1:b2c1772:  *
1:b2c1772:  * This test also verifies that a SQLException object generated out of the
1:b2c1772:  * derby network client driver can be serialized (DERBY-790).
1:50ff043:  */
1:50ff043: 
1:b2c1772: public class SqlExceptionTest extends BaseJDBCTestCase
1:50ff043: {    
1:50ff043:     public SqlExceptionTest(String name)
1:50ff043:     {
1:50ff043:         super(name);
1:50ff043:     }
1:b75cf01:     
1:b75cf01:     /**
1:50ff043:      * Makes sure exception chaining works correctly (DERBY-1117)
1:50ff043:      */
1:50ff043:     public void testChainedException() {
1:50ff043:         IOException ioe = new IOException("Test exception");
1:50ff043:         SqlException sqle = new SqlException(null,
1:e65b4db:             new ClientMessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
1:50ff043:             ioe);
1:50ff043:         SQLException javae = sqle.getSQLException();
1:50ff043:         
1:50ff043:         // The underlying SqlException is the first cause; the IOException
1:50ff043:         // should be the second cause        
1:50ff043:         assertEquals(sqle, javae.getCause());
1:50ff043:         assertEquals(ioe, javae.getCause().getCause());
1:50ff043:         assertNull(sqle.getNextException());
1:50ff043:     }
1:50ff043:     
1:50ff043:     /**
1:50ff043:      * Make sure a SQLException is chained as a nextSQLException()
1:55d4cdf:      * and as a chained exception.
1:50ff043:      */
1:50ff043:     public void testNextException() {
1:50ff043:         SQLException nexte = new SQLException("test");
1:50ff043:         SqlException sqle = new SqlException(null,
1:e65b4db:             new ClientMessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
1:50ff043:             nexte);
1:50ff043:         SQLException javae = sqle.getSQLException();
1:50ff043:         
1:50ff043:         assertEquals(sqle, javae.getCause());
1:55d4cdf:         assertEquals(nexte, javae.getCause().getCause());
1:50ff043:         assertEquals(nexte, javae.getNextException());
1:50ff043:         
1:50ff043:         // Make sure exception chaining works with Derby's SqlException
1:50ff043:         // just as well as java.sql.SQLException
1:50ff043:         SqlException internalException = 
1:50ff043:             new SqlException(null, 
1:e65b4db:                 new ClientMessageId("08000"));
1:50ff043:         
1:50ff043:         javae = new SqlException(null, 
1:e65b4db:             new ClientMessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
1:50ff043:             internalException).getSQLException();
1:50ff043:         
1:50ff043:         assertNotNull(javae.getNextException());
1:50ff043:         assertEquals(javae.getNextException().getSQLState(), "08000");
1:55d4cdf:         assertEquals(internalException, javae.getCause().getCause());
1:50ff043:     }
1:90e68d8: 
1:d6401b1:     public void testSQLStateInRootException() throws SQLException {
1:d6401b1:         String expectedSQLState = "22018";
1:d6401b1:         Statement s = createStatement();
1:d6401b1:         try {
1:d6401b1:             s.execute("values cast('hello' as int)");
1:d6401b1:             fail();
1:d6401b1:         } catch (SQLDataException sqle) {
1:d6401b1:             assertSQLState(expectedSQLState, sqle);
1:d6401b1: 
1:d6401b1:             // Check message of the root cause (a StandardException on embedded
1:d6401b1:             // and an SqlException on the client). Client didn't include
1:d6401b1:             // the SQLState before DERBY-6484.
1:d6401b1:             Throwable cause = sqle;
1:d6401b1:             while (cause instanceof SQLException) {
1:d6401b1:                 cause = cause.getCause();
1:d6401b1:             }
1:d6401b1:             String toString = cause.toString();
1:d6401b1:             assertTrue("Message should start with the SQLState, found: "
1:d6401b1:                             + toString,
1:d6401b1:                        toString.startsWith("ERROR " + expectedSQLState + ":"));
1:d6401b1:         }
1:d6401b1:     }
1:d6401b1: 
1:b2c1772:     /**
1:b2c1772:      * Verify that a SQLException generated by the derby network client
1:b2c1772:      * driver can be serialized (DERBY-790).
1:b2c1772:      */
1:b2c1772:     public void testSerializedException() throws Exception {
1:78a2b13:         // DERBY-62; verify an exception using table name can be serialized.
1:b2c1772:         try {
1:78a2b13:             createStatement().execute("DROP TABLE APP.DERBY62_DAIN_SUNDSTROM");
1:78a2b13:             fail("should've received an error");
1:78a2b13:         } catch (SQLException sqle) {
1:78a2b13:             SQLException se_ser = recreateSQLException(sqle);
1:78a2b13:             // and that the original and serialized exceptions are equals
1:78a2b13:             assertSQLState("Unexpected SQL State", sqle.getSQLState(), se_ser);
1:78a2b13:             assertSQLExceptionEquals(sqle, se_ser);
1:b75cf01:         }
1:b2c1772:         
1:78a2b13:         try {
1:b2c1772:             Connection conn = getConnection();
1:b2c1772:             Statement stmt = conn.createStatement();
1:b2c1772:             // generate some exception by inserting some duplicate
1:b2c1772:             // primary keys in the same batch
1:b2c1772:             // This will generate some chained / nested transactions
1:b2c1772:             // as well
1:b2c1772:             String insertData = "INSERT INTO tableWithPK values " +
1:b2c1772:                 "(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)";
1:b2c1772:             stmt.addBatch(insertData);
1:b2c1772:             stmt.addBatch(insertData);
1:b2c1772:             stmt.addBatch(insertData);
1:b2c1772:             stmt.executeBatch();
1:b2c1772: 
1:b2c1772:             // In case the statement completes successfully which is not
1:b2c1772:             // expected
1:b2c1772:             fail("Unexpected: SQL statement should have failed");
1:b2c1772:         } catch (SQLException se) {
1:b2c1772:             // Verify the SQLException can be serialized (DERBY-790)
1:b2c1772:             SQLException se_ser = recreateSQLException(se);
1:b2c1772:             // and that the original and serialized exceptions are equals
1:b2c1772:             assertSQLState("Unexpected SQL State", se.getSQLState(), se_ser);
1:b2c1772:             assertSQLExceptionEquals(se, se_ser);
1:b2c1772:         }
1:b2c1772:     }
1:b2c1772:     
1:b2c1772:     /**
1:b75cf01:      * Verify that an SQLException thrown by a function can be returned
1:b75cf01:      * (DERBY-790).
1:b75cf01:      */
1:b75cf01:     public void testDerby3390() throws Exception {
1:b75cf01:         setAutoCommit(false);
1:b75cf01:         Statement stmt = createStatement();
1:b75cf01: 
1:b75cf01:         // with client/server we prefetch, so the error comes earlier
1:b75cf01:         try {
1:b75cf01:             if (usingDerbyNetClient())
1:b75cf01:             {
1:b75cf01:                 stmt.execute("values badFunction1()");
1:b75cf01:                 fail("expected an error");
1:b75cf01:             }
1:b75cf01:             else 
1:b75cf01:             {
1:b75cf01:                 stmt.execute("values badFunction1()");
1:b75cf01:                 ResultSet rs = stmt.getResultSet();
1:b75cf01:                 rs.next();
1:b75cf01:                 fail("expected an error");
1:b75cf01:             }
1:b75cf01:         } catch (SQLException e) {
1:b75cf01:             setAutoCommit(true);
1:b75cf01:             // if DERBY-3390 occurs, at this point, with networkserver/client, 
1:b75cf01:             // we'd get a 08006. In the server's derby.log you'd see a 
1:b75cf01:             // ClassCastException
1:b75cf01:             assertSQLState("38000", e);
1:b75cf01:             assertTrue(e.getMessage().indexOf("I refuse to return an int") > 1);
1:b75cf01:         }
1:b75cf01: 
1:b75cf01:         // as above, but this time the function uses the constructor for
1:b75cf01:         // SQLException with SQLState.
1:b75cf01:         try {
1:b75cf01:             if (usingDerbyNetClient())
1:b75cf01:             {
1:b75cf01:                 stmt.execute("values badFunction2()");
1:b75cf01:                 fail("expected an error");
1:b75cf01:             }
1:b75cf01:             else 
1:b75cf01:             {
1:b75cf01:                 stmt.execute("values badFunction2()");
1:b75cf01:                 ResultSet rs = stmt.getResultSet();
1:b75cf01:                 rs.next();
1:b75cf01:                 fail("expected an error");
1:b75cf01:             }
1:b75cf01:         } catch (SQLException e) {
1:b75cf01:             setAutoCommit(true);
1:b75cf01:             // if DERBY-3390 occurs, at this point, with networkserver/client, 
1:b75cf01:             // we'd get a 08006. In the server's derby.log you'd see a 
1:b75cf01:             // ClassCastException
1:b75cf01:             assertSQLState("38000", e);
1:b75cf01:             assertSQLState("50000", e);
1:b75cf01:             assertTrue(e.getMessage().indexOf("I refuse to return an int") > 1);
1:b75cf01:         }
1:b75cf01: 
1:b75cf01:         // test an Exception gets thrown for good measure
1:b75cf01:         try {
1:b75cf01:             if (usingDerbyNetClient())
1:b75cf01:             {
1:b75cf01:                 stmt.execute("values badFunction3()");
1:b75cf01:                 fail("expected an error");
1:b75cf01:             }
1:b75cf01:             else 
1:b75cf01:             {
1:b75cf01:                 stmt.execute("values badFunction3()");
1:b75cf01:                 ResultSet rs = stmt.getResultSet();
1:b75cf01:                 rs.next();
1:b75cf01:                 fail("expected an error");
1:78a2b13:             }
1:b75cf01:         } catch (SQLException e) {
1:b75cf01:             setAutoCommit(true);
1:b75cf01:             assertSQLState("38000", e);
1:b75cf01:             assertTrue(e.getMessage().indexOf("The exception 'java.lang.Exception: I refuse to return an int!'")==0);
1:b75cf01:         }
1:b75cf01:         
1:b75cf01:         stmt.close();
1:b75cf01:         rollback();
1:b75cf01:         setAutoCommit(true);
1:b75cf01:     }    
1:78a2b13: 
1:50ff043:     /**
1:b2c1772:      * Set up the connection to the database.
1:b2c1772:      */
1:b2c1772:     public void setUp() throws Exception {
1:b2c1772:         Connection conn = getConnection();
1:b2c1772:         String createTableWithPK = "CREATE TABLE tableWithPK (" +
1:b2c1772:                 "c1 int primary key," +
1:b2c1772:                 "c2 int)";
1:b2c1772:         Statement stmt = conn.createStatement();
1:b2c1772:         stmt.execute(createTableWithPK);
1:b75cf01:         stmt.execute("create function badFunction1() returns int language java"
1:b75cf01:                 + " parameter style java no sql external name '" +
1:b75cf01:                 SqlExceptionTest.class.getName() + ".badFunction1'");
1:b75cf01:         stmt.execute("create function badFunction2() returns int language java"
1:b75cf01:                 + " parameter style java no sql external name '" +
1:b75cf01:                 SqlExceptionTest.class.getName() + ".badFunction2'");
1:b75cf01:         stmt.execute("create function badFunction3() returns int language java"
1:b75cf01:                 + " parameter style java no sql external name '" +
1:b75cf01:                 SqlExceptionTest.class.getName() + ".badFunction3'");
1:b2c1772:         stmt.close();
1:b2c1772:         conn.close();
1:b2c1772:     }
1:b2c1772: 
1:b2c1772:     /**
1:b2c1772:      * Drop the table
1:b2c1772:      */
1:b2c1772:     public void tearDown() throws Exception {
1:b2c1772:         Connection conn = getConnection();
1:b2c1772:         Statement stmt = conn.createStatement();
1:b2c1772:         stmt.executeUpdate("DROP TABLE tableWithPK");
1:b75cf01:         stmt.executeUpdate("drop function badfunction1");
1:b75cf01:         stmt.executeUpdate("drop function badfunction2");
1:b75cf01:         stmt.executeUpdate("drop function badfunction3");
1:b2c1772:         stmt.close();
1:b2c1772:         conn.close();
1:b2c1772:         super.tearDown();
1:b2c1772:     }
1:b2c1772: 
1:b2c1772:     /**
1:b2c1772:      * Recreate a SQLException by serializing the passed-in one and
1:b2c1772:      * deserializing it into a new one that we're returning.
1:b2c1772:      */
1:b2c1772:     private SQLException recreateSQLException(SQLException se)
1:b2c1772:     throws Exception
1:b2c1772:     {
1:b2c1772:         SQLException recreatedDS = null;
1:b2c1772: 
1:b2c1772:         // Serialize and recreate (deserialize) the passed-in Exception
1:b2c1772:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:b2c1772:         ObjectOutputStream oos = new ObjectOutputStream(baos);
1:b2c1772:         oos.writeObject(se);
1:b2c1772:         oos.flush();
1:b2c1772:         oos.close();
1:b2c1772:         ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
1:b2c1772:         ObjectInputStream ois = new ObjectInputStream(bais);
1:b2c1772:         recreatedDS = (SQLException) ois.readObject();
1:b2c1772:         ois.close();
1:b2c1772:         assertNotNull(recreatedDS);
1:b2c1772: 
1:b2c1772:         return recreatedDS;
1:b2c1772:     }
1:b2c1772: 
1:90e68d8:     public static Test suite() {
1:49b95bc:     	if ( JDBC.vmSupportsJSR169())
1:49b95bc:     		// see DERBY-2157 for details
1:1ae02c9:                         return new BaseTestSuite(
1:1ae02c9:                 "empty SqlExceptionTest - client not supported on JSR169");
1:78a2b13:     	else
1:78a2b13:         {
1:78a2b13:             Test test = TestConfiguration.defaultSuite(SqlExceptionTest.class);
1:78a2b13:             return test;
1:78a2b13:         }
1:90e68d8:     }
1:b75cf01:     
1:b75cf01:     /* <p> 
1:b75cf01:      * For testing DERBY-3390
1:b75cf01:      * This function just throws a SQLException, without SQLState 
1:b75cf01:      * </p> 
1:b75cf01:      */ 
1:b75cf01:     public static int badFunction1() 
1:b75cf01:         throws SQLException 
1:b75cf01:     { 
1:b75cf01:         throw new SQLException( "I refuse to return an int!" );
1:b75cf01:     }
1:b75cf01: 
1:b75cf01:     /* <p> 
1:b75cf01:      * For testing DERBY-3390
1:b75cf01:      * This function just throws a SQLException, with SQLState 
1:b75cf01:      * </p> 
1:b75cf01:      */ 
1:b75cf01:     public static int badFunction2() 
1:b75cf01:         throws SQLException 
1:b75cf01:     { 
1:b75cf01:         throw new SQLException( "I refuse to return an int!", "50000" );
1:b75cf01:     }
1:b75cf01:     
1:b75cf01:     /* <p> 
1:b75cf01:      * For testing DERBY-3390
1:b75cf01:      * This function just throws an Exception 
1:b75cf01:      * </p> 
1:b75cf01:      */ 
1:b75cf01:     public static int badFunction3() 
1:b75cf01:         throws Exception 
1:b75cf01:     { 
1:b75cf01:         throw new Exception( "I refuse to return an int!" );
1:b75cf01:     }
1:b75cf01: 
1:50ff043: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derby.client.am.ClientMessageId;
1: import org.apache.derby.client.am.SqlException;
1: import org.apache.derby.shared.common.reference.SQLState;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:                         return new BaseTestSuite(
1:                 "empty SqlExceptionTest - client not supported on JSR169");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:d6401b1
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLDataException;
/////////////////////////////////////////////////////////////////////////
1:     public void testSQLStateInRootException() throws SQLException {
1:         String expectedSQLState = "22018";
1:         Statement s = createStatement();
1:         try {
1:             s.execute("values cast('hello' as int)");
1:             fail();
1:         } catch (SQLDataException sqle) {
1:             assertSQLState(expectedSQLState, sqle);
1: 
1:             // Check message of the root cause (a StandardException on embedded
1:             // and an SqlException on the client). Client didn't include
1:             // the SQLState before DERBY-6484.
1:             Throwable cause = sqle;
1:             while (cause instanceof SQLException) {
1:                 cause = cause.getCause();
1:             }
1:             String toString = cause.toString();
1:             assertTrue("Message should start with the SQLState, found: "
1:                             + toString,
1:                        toString.startsWith("ERROR " + expectedSQLState + ":"));
1:         }
1:     }
1: 
commit:55d4cdf
/////////////////////////////////////////////////////////////////////////
1:      * and as a chained exception.
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(nexte, javae.getCause().getCause());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(internalException, javae.getCause().getCause());
commit:b2c1772
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
0: import java.sql.Statement;
1: import java.sql.ResultSet;
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.ObjectInputStream;
0: import java.io.ObjectOutputStream;
1:  *
1:  * This test also verifies that a SQLException object generated out of the
1:  * derby network client driver can be serialized (DERBY-790).
1: public class SqlExceptionTest extends BaseJDBCTestCase
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Verify that a SQLException generated by the derby network client
1:      * driver can be serialized (DERBY-790).
1:      */
1:     public void testSerializedException() throws Exception {
1: 
1:         try {
1:             Connection conn = getConnection();
1:             Statement stmt = conn.createStatement();
1:             // generate some exception by inserting some duplicate
1:             // primary keys in the same batch
1:             // This will generate some chained / nested transactions
1:             // as well
1:             String insertData = "INSERT INTO tableWithPK values " +
1:                 "(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)";
1:             stmt.addBatch(insertData);
1:             stmt.addBatch(insertData);
1:             stmt.addBatch(insertData);
1:             stmt.executeBatch();
1: 
1:             // In case the statement completes successfully which is not
1:             // expected
1:             fail("Unexpected: SQL statement should have failed");
1:         } catch (SQLException se) {
1:             // Verify the SQLException can be serialized (DERBY-790)
1:             SQLException se_ser = recreateSQLException(se);
1:             // and that the original and serialized exceptions are equals
1:             assertSQLState("Unexpected SQL State", se.getSQLState(), se_ser);
1:             assertSQLExceptionEquals(se, se_ser);
1:         }
1:     }
1: 
1:     /**
1:      * Set up the connection to the database.
1:      */
1:     public void setUp() throws Exception {
1:         Connection conn = getConnection();
1:         String createTableWithPK = "CREATE TABLE tableWithPK (" +
1:                 "c1 int primary key," +
1:                 "c2 int)";
1:         Statement stmt = conn.createStatement();
1:         stmt.execute(createTableWithPK);
1:         stmt.close();
1:         conn.close();
1:     }
1: 
1:     /**
1:      * Drop the table
1:      */
1:     public void tearDown() throws Exception {
1:         Connection conn = getConnection();
1:         Statement stmt = conn.createStatement();
1:         stmt.executeUpdate("DROP TABLE tableWithPK");
1:         stmt.close();
1:         conn.close();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Recreate a SQLException by serializing the passed-in one and
1:      * deserializing it into a new one that we're returning.
1:      */
1:     private SQLException recreateSQLException(SQLException se)
1:     throws Exception
1:     {
1:         SQLException recreatedDS = null;
1: 
1:         // Serialize and recreate (deserialize) the passed-in Exception
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ObjectOutputStream oos = new ObjectOutputStream(baos);
1:         oos.writeObject(se);
1:         oos.flush();
1:         oos.close();
1:         ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
1:         ObjectInputStream ois = new ObjectInputStream(bais);
1:         recreatedDS = (SQLException) ois.readObject();
1:         ois.close();
1:         assertNotNull(recreatedDS);
1: 
1:         return recreatedDS;
1:     }
1: 
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:b75cf01
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Verify that an SQLException thrown by a function can be returned
1:      * (DERBY-790).
1:      */
1:     public void testDerby3390() throws Exception {
1:         setAutoCommit(false);
1:         Statement stmt = createStatement();
1: 
1:         // with client/server we prefetch, so the error comes earlier
1:         try {
1:             if (usingDerbyNetClient())
1:             {
1:                 stmt.execute("values badFunction1()");
1:                 fail("expected an error");
1:             }
1:             else 
1:             {
1:                 stmt.execute("values badFunction1()");
1:                 ResultSet rs = stmt.getResultSet();
1:                 rs.next();
1:                 fail("expected an error");
1:             }
1:         } catch (SQLException e) {
1:             setAutoCommit(true);
1:             // if DERBY-3390 occurs, at this point, with networkserver/client, 
1:             // we'd get a 08006. In the server's derby.log you'd see a 
1:             // ClassCastException
1:             assertSQLState("38000", e);
1:             assertTrue(e.getMessage().indexOf("I refuse to return an int") > 1);
1:         }
1: 
1:         // as above, but this time the function uses the constructor for
1:         // SQLException with SQLState.
1:         try {
1:             if (usingDerbyNetClient())
1:             {
1:                 stmt.execute("values badFunction2()");
1:                 fail("expected an error");
1:             }
1:             else 
1:             {
1:                 stmt.execute("values badFunction2()");
1:                 ResultSet rs = stmt.getResultSet();
1:                 rs.next();
1:                 fail("expected an error");
1:             }
1:         } catch (SQLException e) {
1:             setAutoCommit(true);
1:             // if DERBY-3390 occurs, at this point, with networkserver/client, 
1:             // we'd get a 08006. In the server's derby.log you'd see a 
1:             // ClassCastException
1:             assertSQLState("38000", e);
1:             assertSQLState("50000", e);
1:             assertTrue(e.getMessage().indexOf("I refuse to return an int") > 1);
1:         }
1: 
1:         // test an Exception gets thrown for good measure
1:         try {
1:             if (usingDerbyNetClient())
1:             {
1:                 stmt.execute("values badFunction3()");
1:                 fail("expected an error");
1:             }
1:             else 
1:             {
1:                 stmt.execute("values badFunction3()");
1:                 ResultSet rs = stmt.getResultSet();
1:                 rs.next();
1:                 fail("expected an error");
1:             }
1:         } catch (SQLException e) {
1:             setAutoCommit(true);
1:             assertSQLState("38000", e);
1:             assertTrue(e.getMessage().indexOf("The exception 'java.lang.Exception: I refuse to return an int!'")==0);
1:         }
1:         
1:         stmt.close();
1:         rollback();
1:         setAutoCommit(true);
1:     }    
/////////////////////////////////////////////////////////////////////////
1:         stmt.execute("create function badFunction1() returns int language java"
1:                 + " parameter style java no sql external name '" +
1:                 SqlExceptionTest.class.getName() + ".badFunction1'");
1:         stmt.execute("create function badFunction2() returns int language java"
1:                 + " parameter style java no sql external name '" +
1:                 SqlExceptionTest.class.getName() + ".badFunction2'");
1:         stmt.execute("create function badFunction3() returns int language java"
1:                 + " parameter style java no sql external name '" +
1:                 SqlExceptionTest.class.getName() + ".badFunction3'");
/////////////////////////////////////////////////////////////////////////
1:         stmt.executeUpdate("drop function badfunction1");
1:         stmt.executeUpdate("drop function badfunction2");
1:         stmt.executeUpdate("drop function badfunction3");
/////////////////////////////////////////////////////////////////////////
1:     
1:     /* <p> 
1:      * For testing DERBY-3390
1:      * This function just throws a SQLException, without SQLState 
1:      * </p> 
1:      */ 
1:     public static int badFunction1() 
1:         throws SQLException 
1:     { 
1:         throw new SQLException( "I refuse to return an int!" );
1:     }
1: 
1:     /* <p> 
1:      * For testing DERBY-3390
1:      * This function just throws a SQLException, with SQLState 
1:      * </p> 
1:      */ 
1:     public static int badFunction2() 
1:         throws SQLException 
1:     { 
1:         throw new SQLException( "I refuse to return an int!", "50000" );
1:     }
1:     
1:     /* <p> 
1:      * For testing DERBY-3390
1:      * This function just throws an Exception 
1:      * </p> 
1:      */ 
1:     public static int badFunction3() 
1:         throws Exception 
1:     { 
1:         throw new Exception( "I refuse to return an int!" );
1:     }
1: 
commit:78a2b13
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         // DERBY-62; verify an exception using table name can be serialized.
1:         try {
1:             createStatement().execute("DROP TABLE APP.DERBY62_DAIN_SUNDSTROM");
1:             fail("should've received an error");
1:         } catch (SQLException sqle) {
1:             SQLException se_ser = recreateSQLException(sqle);
1:             // and that the original and serialized exceptions are equals
1:             assertSQLState("Unexpected SQL State", sqle.getSQLState(), se_ser);
1:             assertSQLExceptionEquals(sqle, se_ser);
1:         }
1:         
/////////////////////////////////////////////////////////////////////////
1:     	else
1:         {
1:             Test test = TestConfiguration.defaultSuite(SqlExceptionTest.class);
1:             return test;
1:         }
commit:49b95bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.JDBC;
/////////////////////////////////////////////////////////////////////////
1:     	if ( JDBC.vmSupportsJSR169())
1:     		// see DERBY-2157 for details
0:     		return new TestSuite("empty SqlExceptionTest - client not supported on JSR169");
0:     	else 
0:     		return new TestSuite(SqlExceptionTest.class,
0:                 "SqlExceptionTest");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:90e68d8
/////////////////////////////////////////////////////////////////////////
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static Test suite() {
0:         return new TestSuite(SqlExceptionTest.class,
0:                              "SqlExceptionTest");
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.junit.BaseTestCase;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:e65b4db
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.ClientMessageId;
/////////////////////////////////////////////////////////////////////////
1:             new ClientMessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
/////////////////////////////////////////////////////////////////////////
1:             new ClientMessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
/////////////////////////////////////////////////////////////////////////
1:                 new ClientMessageId("08000"));
1:             new ClientMessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
commit:50ff043
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.derbynet;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseTestCase;
0: import org.apache.derby.client.am.SqlException;
0: import org.apache.derby.client.am.MessageId;
0: import org.apache.derby.shared.common.reference.SQLState;
1: import java.sql.SQLException;
0: import java.io.IOException;
1: 
1: /**
1:  * This is used for testing the SqlException class.  This test can be added
1:  * to.  My itch right now is to verify that exception chaining is working
1:  * correctly.
1:  */
1: 
0: public class SqlExceptionTest extends BaseTestCase
1: {    
1:     public SqlExceptionTest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Makes sure exception chaining works correctly (DERBY-1117)
1:      */
1:     public void testChainedException() {
1:         IOException ioe = new IOException("Test exception");
1:         SqlException sqle = new SqlException(null,
0:             new MessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
1:             ioe);
1:         SQLException javae = sqle.getSQLException();
1:         
1:         // The underlying SqlException is the first cause; the IOException
1:         // should be the second cause        
1:         assertEquals(sqle, javae.getCause());
1:         assertEquals(ioe, javae.getCause().getCause());
1:         assertNull(sqle.getNextException());
1:     }
1:     
1:     /**
1:      * Make sure a SQLException is chained as a nextSQLException()
0:      * rather than as a chained exception
1:      */
1:     public void testNextException() {
1:         SQLException nexte = new SQLException("test");
1:         SqlException sqle = new SqlException(null,
0:             new MessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
1:             nexte);
1:         SQLException javae = sqle.getSQLException();
1:         
1:         assertEquals(sqle, javae.getCause());
0:         assertNull(javae.getCause().getCause());
1:         assertEquals(nexte, javae.getNextException());
1:         
1:         // Make sure exception chaining works with Derby's SqlException
1:         // just as well as java.sql.SQLException
1:         SqlException internalException = 
1:             new SqlException(null, 
0:                 new MessageId("08000"));
1:         
1:         javae = new SqlException(null, 
0:             new MessageId(SQLState.NOGETCONN_ON_CLOSED_POOLED_CONNECTION),
1:             internalException).getSQLException();
1:         
1:         assertNotNull(javae.getNextException());
1:         assertEquals(javae.getNextException().getSQLState(), "08000");
1:     }
1: }
============================================================================