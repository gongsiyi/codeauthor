1:5d12015: /*
3:5d12015:  
1:5d12015: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest
1:5d12015:  
1:5d12015: Licensed to the Apache Software Foundation (ASF) under one or more
1:5d12015: contributor license agreements.  See the NOTICE file distributed with
1:5d12015: this work for additional information regarding copyright ownership.
1:5d12015: The ASF licenses this file to You under the Apache License, Version 2.0
1:5d12015: (the "License"); you may not use this file except in compliance with
1:5d12015: the License.  You may obtain a copy of the License at
1:5d12015:  
1:5d12015:    http://www.apache.org/licenses/LICENSE-2.0
1:5d12015:  
1:5d12015: Unless required by applicable law or agreed to in writing, software
1:5d12015: distributed under the License is distributed on an "AS IS" BASIS,
1:5d12015: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5d12015: See the License for the specific language governing permissions and
1:5d12015: limitations under the License.
1:5d12015:  
1:5d12015:  */
1:5d12015: 
1:5d12015: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:5d12015: 
1:5d12015: import java.sql.Connection;
1:5d12015: import java.sql.PreparedStatement;
1:5d12015: import java.sql.ResultSet;
1:5d12015: import java.sql.ResultSetMetaData;
1:5d12015: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:1ae02c9: import junit.framework.Test;
1:5d12015: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:5d12015: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:5d12015: import org.apache.derbyTesting.junit.JDBC;
1:5d12015: import org.apache.derbyTesting.junit.TestConfiguration;
1:5d12015: 
1:5d12015: /**
1:5d12015:  * This test converts the old jdbcapi/nullSQLText.java
1:5d12015:  * test to JUnit.
1:5d12015:  */
1:5d12015: 
1:5d12015: public class NullSQLTextTest extends BaseJDBCTestCase {
1:5d12015:     
1:5d12015:     /**
1:5d12015:      * Create a test with the given name.
1:5d12015:      *
1:5d12015:      * @param name name of the test.
1:5d12015:      */
1:5d12015:     
1:5d12015:     public NullSQLTextTest(String name) {
1:5d12015:         super(name);
1:5d12015:     }
1:5d12015:     
1:5d12015:     /**
1:5d12015:      * Create suite containing client and embedded tests and to run
1:5d12015:      * all tests in this class
1:5d12015:      */
1:5d12015:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("NullSQLTextTest");
1:5d12015:         
1:5d12015:         suite.addTest(baseSuite("NullSQLTextTest:embedded"));
1:5d12015:         
1:5d12015:         suite.addTest(
1:5d12015:                 TestConfiguration.clientServerDecorator(
1:5d12015:                 baseSuite("NullSQLTextTest:client")));
1:5d12015:         
1:5d12015:         return suite;
1:5d12015:     }
1:5d12015:     
1:5d12015:     private static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
1:5d12015:         
1:5d12015:         suite.addTestSuite(NullSQLTextTest.class);
1:5d12015:         
1:5d12015:         return new CleanDatabaseTestSetup(suite) {
1:5d12015:             /**
1:5d12015:              * Creates the tables and the stored procedures used in the test
1:5d12015:              * cases.
1:5d12015:              *
1:5d12015:              * @exception SQLException if a database error occurs
1:5d12015:              */
1:5d12015:             protected void decorateSQL(Statement stmt) throws SQLException {
1:5d12015:                 
1:5d12015:                 Connection conn = getConnection();
1:5d12015:                 
1:5d12015:                 /**
1:5d12015:                  * Creates the table used in the test cases.
1:5d12015:                  *
1:5d12015:                  */
1:5d12015:                 stmt.execute("create table t1 (i int)");
1:5d12015:                 stmt.execute("insert into t1 values 1, 2, 3, 4, 5, 6, 7");
1:5d12015:                 stmt.execute("create procedure za() language java external name " +
1:5d12015:                              "'org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.zeroArg'" +
1:5d12015:                              " parameter style java");
1:5d12015:             }
1:5d12015:         };
1:5d12015:     }
1:5d12015:     
1:5d12015:     /**
1:5d12015:      * Testing null string in prepared statement.
1:5d12015:      *
1:5d12015:      * @exception SQLException if database access errors or other errors occur
1:5d12015:      */
1:5d12015:     public void testNullStringPreparedStatement() throws SQLException {
1:5d12015:         String nullString = null;
1:5d12015:         try {
1:5d12015:             // test null String in prepared statement
1:5d12015:             PreparedStatement ps = prepareStatement(nullString);
1:5d12015:             fail("preparedStatement(nullString) should have failed.");
1:5d12015:         } catch (SQLException e) {
1:5d12015:             assertSQLState("XJ067", e);
1:5d12015:         }
1:5d12015:     }
1:5d12015:     /**
1:5d12015:      * Testing null string in execute statement.
1:5d12015:      *
1:5d12015:      * @exception SQLException if database access errors or other errors occur
1:5d12015:      */
1:5d12015:     public void testNullStringExecuteStatement() throws SQLException {
1:5d12015:         String nullString = null;
1:5d12015:         try {
1:5d12015:             // test null String in execute statement
1:5d12015:             Statement stmt = createStatement();
1:5d12015:             stmt.execute(nullString);
1:5d12015:             fail("execute(nullString) should have failed.");
1:5d12015:         } catch (SQLException e) {
1:5d12015:             assertSQLState("XJ067", e);
1:5d12015:         }
1:5d12015:     }
1:5d12015:     /**
1:5d12015:      * Testing null string in executeQuery statement.
1:5d12015:      *
1:5d12015:      * @exception SQLException if database access errors or other errors occur
1:5d12015:      */
1:5d12015:     public void testNullStringExecuteQueryStatement() throws SQLException {
1:5d12015:         String nullString = null;
1:5d12015:         try {
1:5d12015:             // test null String in execute query statement
1:5d12015:             Statement stmt = createStatement();
1:5d12015:             stmt.executeQuery(nullString);
1:5d12015:             fail("executeQuery(nullString) should have failed.");
1:5d12015:         } catch (SQLException e) {
1:5d12015:             assertSQLState("XJ067", e);
1:5d12015:         }
1:5d12015:     }
1:5d12015:     /**
1:5d12015:      * Testing null string in executeUpdate statement.
1:5d12015:      *
1:5d12015:      * @exception SQLException if database access errors or other errors occur
1:5d12015:      */
1:5d12015:     public void testNullStringExecuteUpdateStatement() throws SQLException {
1:5d12015:         String nullString = null;
1:5d12015:         try {
1:5d12015:             // test null String in execute update statement
1:5d12015:             Statement stmt = createStatement();
1:5d12015:             stmt.executeUpdate(nullString);
1:5d12015:             fail("executeUpdate(nullString) should have failed.");
1:5d12015:         } catch (SQLException e) {
1:5d12015:             assertSQLState("XJ067", e);
1:5d12015:         }
1:5d12015:     }
1:5d12015:     /**
1:5d12015:      * Testing embedded comments in execute statement.
1:5d12015:      *
1:5d12015:      * @exception SQLException if database access errors or other errors occur
1:5d12015:      */
1:5d12015:     public void testDerby522() throws SQLException {
1:5d12015:         Statement stmt = createStatement();
1:5d12015:         
1:5d12015:         // These we expect to fail with syntax errors, as in embedded mode.
1:5d12015:         testCommentStmt(stmt, " --", true);
1:5d12015:         testCommentStmt(stmt, " -- ", true);
1:5d12015:         testCommentStmt(stmt, " -- This is a comment \n --", true);
1:5d12015:         testCommentStmt(stmt,
1:5d12015:                 " -- This is a comment\n --And another\n -- Andonemore", true);
1:5d12015:         
1:5d12015:         /*
1:5d12015:         /* These we expect to return valid results for embedded and
1:5d12015:         /* Derby Client (as of DERBY-522 fix)
1:5d12015:          */
1:5d12015:         testCommentStmt(stmt, " --\nvalues 2, 4, 8", false);
1:5d12015:         ResultSet rs = stmt.getResultSet();
1:5d12015:         String[][] expectedRows = new String[][] { { "2" }, 
1:5d12015:                                                    { "4" }, 
1:5d12015:                                                    { "8" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:         
1:5d12015:         testCommentStmt(
1:5d12015:                 stmt,
1:5d12015:                 " -- This is \n -- \n --3 comments\nvalues 8", 
1:5d12015:   		false);
1:5d12015:                 
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "8" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:         
1:5d12015:         testCommentStmt(stmt,
1:5d12015:                 " -- This is a comment\n --And another\n -- Andonemore\nvalues (2,3)",
1:5d12015:                 false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         ResultSetMetaData rsmd = rs.getMetaData();
1:5d12015:         expectedRows = new String[][] { { "2", "3" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:                 
1:5d12015:         testCommentStmt(stmt,
1:5d12015:                 " -- This is a comment\n select i from t1",
1:5d12015:                 false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "1" }, 
1:5d12015:                                         { "2" }, 
1:5d12015:                                         { "3" }, 
1:5d12015:                                         { "4" }, 
1:5d12015:                                         { "5" }, 
1:5d12015:                                         { "6" }, 
1:5d12015:                                         { "7" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:         
1:5d12015:         testCommentStmt(stmt,
1:5d12015:                 " --singleword\n insert into t1 values (8)",
1:5d12015:                 false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         assertNull("Unexpected Not Null ResultSet", rs);
1:5d12015:         
1:5d12015:         testCommentStmt(stmt,
1:5d12015:                 " --singleword\ncall za()",
1:5d12015:                 false);
1:5d12015:         assertNull("Unexpected Not Null ResultSet", rs);
1:5d12015:         
1:5d12015:         testCommentStmt(stmt,
1:5d12015:                 " -- leading comment\n(\nvalues 4, 8)",
1:5d12015:                 false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "4" }, 
1:5d12015:         { "8" }  };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:         
1:5d12015:         testCommentStmt(stmt,
1:5d12015:                 " -- leading comment\n\n(\n\n\rvalues 4, 8)",
1:5d12015:                 false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "4" }, 
1:5d12015:                                         { "8" }  };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:         
1:5d12015:         /*
1:5d12015:         /* While we're at it, test comments in the middle and end of the
1:5d12015:         /* statement.  Prior to the patch for DERBY-522, statements
1:5d12015:         /* ending with a comment threw syntax errors; that problem
1:5d12015:         /* was fixed with DERBY-522, as well, so all of these should now
1:5d12015:         /* succeed in all modes (embedded and Derby Client).
1:5d12015:          */
1:5d12015:         testCommentStmt(stmt, "select i from t1 -- This is a comment", false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "1" }, 
1:5d12015:                                         { "2" }, 
1:5d12015:                                         { "3" }, 
1:5d12015:                                         { "4" }, 
1:5d12015:                                         { "5" }, 
1:5d12015:                                         { "6" }, 
1:5d12015:                                         { "7" }, 
1:5d12015:                                         { "8" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:         
1:5d12015:         testCommentStmt(stmt, "select i from t1\n -- This is a comment", false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "1" }, 
1:5d12015:                                         { "2" }, 
1:5d12015:                                         { "3" }, 
1:5d12015:                                         { "4" }, 
1:5d12015:                                         { "5" }, 
1:5d12015:                                         { "6" }, 
1:5d12015:                                         { "7" }, 
1:5d12015:                                         { "8" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:       
1:5d12015:         testCommentStmt(stmt, "values 8, 4, 2\n --", false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "8" }, 
1:5d12015:                                         { "4" }, 
1:5d12015:                                         { "2" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:     
1:5d12015:         testCommentStmt(stmt, "values 8, 4,\n -- middle comment\n2\n -- end", false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "8" }, 
1:5d12015:                                         { "4" }, 
1:5d12015:                                         { "2" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:        
1:5d12015:         testCommentStmt(stmt, "values 8, 4,\n -- middle comment\n2\n -- end\n", false);
1:5d12015:         rs = stmt.getResultSet();
1:5d12015:         expectedRows = new String[][] { { "8" }, 
1:5d12015:                                         { "4" }, 
1:5d12015:                                         { "2" } };
1:5d12015:         JDBC.assertFullResultSet(rs, expectedRows);
1:5d12015:     }
1:5d12015:     /**
1:5d12015:      * Helper method for testDerby522().
1:5d12015:      * executes strings containing embedded comments.
1:5d12015:      *
1:5d12015:      * @param sql sql statement
1:5d12015:      * @exception SQLException if database access errors or other errors occur
1:5d12015:      */
1:5d12015:     private static void testCommentStmt(Statement st, String sql,
1:5d12015:             boolean expectFailure) throws SQLException {
1:5d12015:         try {
1:5d12015:             st.execute(sql);
1:5d12015: 	    if (expectFailure)
1:5d12015: 		fail("Unexpected Failure -- execute() should have failed.");	
1:5d12015:         } catch (SQLException se) {
1:5d12015:                 assertSQLState("42X01", se);
1:5d12015:         }
1:5d12015:     }
1:5d12015:     /**
1:5d12015:      * Java method for procedure za()
1:5d12015:      *
1:5d12015:      */
1:5d12015:     public static void zeroArg () {
1:5d12015:     }
1:4bdaec2:     
1:4bdaec2:     private static String SQLSTATE_SYNTAX_ERROR = "42X01";
1:4bdaec2:     public void testExecuteEmptyString() throws SQLException {
1:4bdaec2:         try {
1:4bdaec2:             createStatement().execute("");
1:4bdaec2:             fail("Statement expected to fail");
1:4bdaec2:         } catch (SQLException sqle) {
1:4bdaec2:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:4bdaec2:         }
1:4bdaec2:     }
1:4bdaec2:     
1:4bdaec2:     public void testExecuteUpdateEmptyString() {
1:4bdaec2:         try {
1:4bdaec2:             createStatement().executeUpdate("");
1:4bdaec2:             fail("Statement expected to fail");
1:4bdaec2:         } catch (SQLException sqle) {
1:4bdaec2:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:4bdaec2:         }       
1:4bdaec2:     }
1:4bdaec2:     
1:4bdaec2:     public void testExecuteQueryEmptyString() {
1:4bdaec2:         try {
1:4bdaec2:             createStatement().executeQuery("");
1:4bdaec2:             fail("Statement expected to fail");
1:4bdaec2:         } catch (SQLException sqle) {
1:4bdaec2:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:4bdaec2:         }        
1:4bdaec2:     }
1:4bdaec2:     public void testPrepareEmptyString() {
1:4bdaec2:         try {
1:4bdaec2:             prepareStatement("");
1:4bdaec2:             fail("Statement expected to fail");
1:4bdaec2:         } catch (SQLException sqle) {
1:4bdaec2:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:4bdaec2:         }        
1:4bdaec2:     }
1:5d12015: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Statement;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("NullSQLTextTest");
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
author:Dyre Tjeldvoll
-------------------------------------------------------------------------------
commit:4bdaec2
/////////////////////////////////////////////////////////////////////////
1:     
1:     private static String SQLSTATE_SYNTAX_ERROR = "42X01";
1:     public void testExecuteEmptyString() throws SQLException {
1:         try {
1:             createStatement().execute("");
1:             fail("Statement expected to fail");
1:         } catch (SQLException sqle) {
1:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:         }
1:     }
1:     
1:     public void testExecuteUpdateEmptyString() {
1:         try {
1:             createStatement().executeUpdate("");
1:             fail("Statement expected to fail");
1:         } catch (SQLException sqle) {
1:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:         }       
1:     }
1:     
1:     public void testExecuteQueryEmptyString() {
1:         try {
1:             createStatement().executeQuery("");
1:             fail("Statement expected to fail");
1:         } catch (SQLException sqle) {
1:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:         }        
1:     }
1:     public void testPrepareEmptyString() {
1:         try {
1:             prepareStatement("");
1:             fail("Statement expected to fail");
1:         } catch (SQLException sqle) {
1:             assertSQLState(SQLSTATE_SYNTAX_ERROR, sqle);
1:         }        
1:     }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5d12015
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
0: import java.sql.Statement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: /**
1:  * This test converts the old jdbcapi/nullSQLText.java
1:  * test to JUnit.
1:  */
1: 
1: public class NullSQLTextTest extends BaseJDBCTestCase {
1:     
1:     /**
1:      * Create a test with the given name.
1:      *
1:      * @param name name of the test.
1:      */
1:     
1:     public NullSQLTextTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Create suite containing client and embedded tests and to run
1:      * all tests in this class
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("NullSQLTextTest");
1:         
1:         suite.addTest(baseSuite("NullSQLTextTest:embedded"));
1:         
1:         suite.addTest(
1:                 TestConfiguration.clientServerDecorator(
1:                 baseSuite("NullSQLTextTest:client")));
1:         
1:         return suite;
1:     }
1:     
1:     private static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         
1:         suite.addTestSuite(NullSQLTextTest.class);
1:         
1:         return new CleanDatabaseTestSetup(suite) {
1:             /**
1:              * Creates the tables and the stored procedures used in the test
1:              * cases.
1:              *
1:              * @exception SQLException if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException {
1:                 
1:                 Connection conn = getConnection();
1:                 
1:                 /**
1:                  * Creates the table used in the test cases.
1:                  *
1:                  */
1:                 stmt.execute("create table t1 (i int)");
1:                 stmt.execute("insert into t1 values 1, 2, 3, 4, 5, 6, 7");
1:                 stmt.execute("create procedure za() language java external name " +
1:                              "'org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.zeroArg'" +
1:                              " parameter style java");
1:             }
1:         };
1:     }
1:     
1:     /**
1:      * Testing null string in prepared statement.
1:      *
1:      * @exception SQLException if database access errors or other errors occur
1:      */
1:     public void testNullStringPreparedStatement() throws SQLException {
1:         String nullString = null;
1:         try {
1:             // test null String in prepared statement
1:             PreparedStatement ps = prepareStatement(nullString);
1:             fail("preparedStatement(nullString) should have failed.");
1:         } catch (SQLException e) {
1:             assertSQLState("XJ067", e);
1:         }
1:     }
1:     /**
1:      * Testing null string in execute statement.
1:      *
1:      * @exception SQLException if database access errors or other errors occur
1:      */
1:     public void testNullStringExecuteStatement() throws SQLException {
1:         String nullString = null;
1:         try {
1:             // test null String in execute statement
1:             Statement stmt = createStatement();
1:             stmt.execute(nullString);
1:             fail("execute(nullString) should have failed.");
1:         } catch (SQLException e) {
1:             assertSQLState("XJ067", e);
1:         }
1:     }
1:     /**
1:      * Testing null string in executeQuery statement.
1:      *
1:      * @exception SQLException if database access errors or other errors occur
1:      */
1:     public void testNullStringExecuteQueryStatement() throws SQLException {
1:         String nullString = null;
1:         try {
1:             // test null String in execute query statement
1:             Statement stmt = createStatement();
1:             stmt.executeQuery(nullString);
1:             fail("executeQuery(nullString) should have failed.");
1:         } catch (SQLException e) {
1:             assertSQLState("XJ067", e);
1:         }
1:     }
1:     /**
1:      * Testing null string in executeUpdate statement.
1:      *
1:      * @exception SQLException if database access errors or other errors occur
1:      */
1:     public void testNullStringExecuteUpdateStatement() throws SQLException {
1:         String nullString = null;
1:         try {
1:             // test null String in execute update statement
1:             Statement stmt = createStatement();
1:             stmt.executeUpdate(nullString);
1:             fail("executeUpdate(nullString) should have failed.");
1:         } catch (SQLException e) {
1:             assertSQLState("XJ067", e);
1:         }
1:     }
1:     /**
1:      * Testing embedded comments in execute statement.
1:      *
1:      * @exception SQLException if database access errors or other errors occur
1:      */
1:     public void testDerby522() throws SQLException {
1:         Statement stmt = createStatement();
1:         
1:         // These we expect to fail with syntax errors, as in embedded mode.
1:         testCommentStmt(stmt, " --", true);
1:         testCommentStmt(stmt, " -- ", true);
1:         testCommentStmt(stmt, " -- This is a comment \n --", true);
1:         testCommentStmt(stmt,
1:                 " -- This is a comment\n --And another\n -- Andonemore", true);
1:         
1:         /*
1:         /* These we expect to return valid results for embedded and
1:         /* Derby Client (as of DERBY-522 fix)
1:          */
1:         testCommentStmt(stmt, " --\nvalues 2, 4, 8", false);
1:         ResultSet rs = stmt.getResultSet();
1:         String[][] expectedRows = new String[][] { { "2" }, 
1:                                                    { "4" }, 
1:                                                    { "8" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         
1:         testCommentStmt(
1:                 stmt,
1:                 " -- This is \n -- \n --3 comments\nvalues 8", 
1:   		false);
1:                 
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "8" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         
1:         testCommentStmt(stmt,
1:                 " -- This is a comment\n --And another\n -- Andonemore\nvalues (2,3)",
1:                 false);
1:         rs = stmt.getResultSet();
1:         ResultSetMetaData rsmd = rs.getMetaData();
1:         expectedRows = new String[][] { { "2", "3" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:                 
1:         testCommentStmt(stmt,
1:                 " -- This is a comment\n select i from t1",
1:                 false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "1" }, 
1:                                         { "2" }, 
1:                                         { "3" }, 
1:                                         { "4" }, 
1:                                         { "5" }, 
1:                                         { "6" }, 
1:                                         { "7" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         
1:         testCommentStmt(stmt,
1:                 " --singleword\n insert into t1 values (8)",
1:                 false);
1:         rs = stmt.getResultSet();
1:         assertNull("Unexpected Not Null ResultSet", rs);
1:         
1:         testCommentStmt(stmt,
1:                 " --singleword\ncall za()",
1:                 false);
1:         assertNull("Unexpected Not Null ResultSet", rs);
1:         
1:         testCommentStmt(stmt,
1:                 " -- leading comment\n(\nvalues 4, 8)",
1:                 false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "4" }, 
1:         { "8" }  };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         
1:         testCommentStmt(stmt,
1:                 " -- leading comment\n\n(\n\n\rvalues 4, 8)",
1:                 false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "4" }, 
1:                                         { "8" }  };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         
1:         /*
1:         /* While we're at it, test comments in the middle and end of the
1:         /* statement.  Prior to the patch for DERBY-522, statements
1:         /* ending with a comment threw syntax errors; that problem
1:         /* was fixed with DERBY-522, as well, so all of these should now
1:         /* succeed in all modes (embedded and Derby Client).
1:          */
1:         testCommentStmt(stmt, "select i from t1 -- This is a comment", false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "1" }, 
1:                                         { "2" }, 
1:                                         { "3" }, 
1:                                         { "4" }, 
1:                                         { "5" }, 
1:                                         { "6" }, 
1:                                         { "7" }, 
1:                                         { "8" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:         
1:         testCommentStmt(stmt, "select i from t1\n -- This is a comment", false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "1" }, 
1:                                         { "2" }, 
1:                                         { "3" }, 
1:                                         { "4" }, 
1:                                         { "5" }, 
1:                                         { "6" }, 
1:                                         { "7" }, 
1:                                         { "8" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:       
1:         testCommentStmt(stmt, "values 8, 4, 2\n --", false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "8" }, 
1:                                         { "4" }, 
1:                                         { "2" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:     
1:         testCommentStmt(stmt, "values 8, 4,\n -- middle comment\n2\n -- end", false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "8" }, 
1:                                         { "4" }, 
1:                                         { "2" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:        
1:         testCommentStmt(stmt, "values 8, 4,\n -- middle comment\n2\n -- end\n", false);
1:         rs = stmt.getResultSet();
1:         expectedRows = new String[][] { { "8" }, 
1:                                         { "4" }, 
1:                                         { "2" } };
1:         JDBC.assertFullResultSet(rs, expectedRows);
1:     }
1:     /**
1:      * Helper method for testDerby522().
1:      * executes strings containing embedded comments.
1:      *
1:      * @param sql sql statement
1:      * @exception SQLException if database access errors or other errors occur
1:      */
1:     private static void testCommentStmt(Statement st, String sql,
1:             boolean expectFailure) throws SQLException {
1:         try {
1:             st.execute(sql);
1: 	    if (expectFailure)
1: 		fail("Unexpected Failure -- execute() should have failed.");	
1:         } catch (SQLException se) {
1:                 assertSQLState("42X01", se);
1:         }
1:     }
1:     /**
1:      * Java method for procedure za()
1:      *
1:      */
1:     public static void zeroArg () {
1:     }
1: }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c3697a9
/////////////////////////////////////////////////////////////////////////
0: /*
0:  
0: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest
0:  
0: Licensed to the Apache Software Foundation (ASF) under one or more
0: contributor license agreements.  See the NOTICE file distributed with
0: this work for additional information regarding copyright ownership.
0: The ASF licenses this file to You under the Apache License, Version 2.0
0: (the "License"); you may not use this file except in compliance with
0: the License.  You may obtain a copy of the License at
0:  
0:    http://www.apache.org/licenses/LICENSE-2.0
0:  
0: Unless required by applicable law or agreed to in writing, software
0: distributed under the License is distributed on an "AS IS" BASIS,
0: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: See the License for the specific language governing permissions and
0: limitations under the License.
0:  
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
0: 
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
0: import java.sql.Statement;
0: import java.sql.SQLException;
0: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
0: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
0: /**
0:  * This test converts the old jdbcapi/nullSQLText.java
0:  * test to JUnit.
0:  */
0: 
0: public class NullSQLTextTest extends BaseJDBCTestCase {
0:     
0:     /**
0:      * Create a test with the given name.
0:      *
0:      * @param name name of the test.
0:      */
0:     
0:     public NullSQLTextTest(String name) {
0:         super(name);
0:     }
0:     
0:     /**
0:      * Create suite containing client and embedded tests and to run
0:      * all tests in this class
0:      */
0:     public static Test suite() {
0:         TestSuite suite = new TestSuite("NullSQLTextTest");
0:         
0:         suite.addTest(baseSuite("NullSQLTextTest:embedded"));
0:         
0:         suite.addTest(
0:                 TestConfiguration.clientServerDecorator(
0:                 baseSuite("NullSQLTextTest:client")));
0:         
0:         return suite;
0:     }
0:     
0:     private static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
0:         
0:         suite.addTestSuite(NullSQLTextTest.class);
0:         
0:         return new CleanDatabaseTestSetup(suite) {
0:             /**
0:              * Creates the tables and the stored procedures used in the test
0:              * cases.
0:              *
0:              * @exception SQLException if a database error occurs
0:              */
0:             protected void decorateSQL(Statement stmt) throws SQLException {
0:                 
0:                 Connection conn = getConnection();
0:                 
0:                 /**
0:                  * Creates the table used in the test cases.
0:                  *
0:                  */
0:                 stmt.execute("create table t1 (i int)");
0:                 stmt.execute("insert into t1 values 1, 2, 3, 4, 5, 6, 7");
0:                 stmt.execute("create procedure za() language java external name " +
0:                              "'org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.zeroArg'" +
0:                              " parameter style java");
0:             }
0:         };
0:     }
0:     
0:     /**
0:      * Testing null string in prepared statement.
0:      *
0:      * @exception SQLException if database access errors or other errors occur
0:      */
0:     public void testNullStringPreparedStatement() throws SQLException {
0:         String nullString = null;
0:         try {
0:             // test null String in prepared statement
0:             PreparedStatement ps = prepareStatement(nullString);
0:             fail("preparedStatement(nullString) should have failed.");
0:         } catch (SQLException e) {
0:             assertSQLState("XJ067", e);
0:         }
0:     }
0:     /**
0:      * Testing null string in execute statement.
0:      *
0:      * @exception SQLException if database access errors or other errors occur
0:      */
0:     public void testNullStringExecuteStatement() throws SQLException {
0:         String nullString = null;
0:         try {
0:             // test null String in execute statement
0:             Statement stmt = createStatement();
0:             stmt.execute(nullString);
0:             fail("execute(nullString) should have failed.");
0:         } catch (SQLException e) {
0:             assertSQLState("XJ067", e);
0:         }
0:     }
0:     /**
0:      * Testing null string in executeQuery statement.
0:      *
0:      * @exception SQLException if database access errors or other errors occur
0:      */
0:     public void testNullStringExecuteQueryStatement() throws SQLException {
0:         String nullString = null;
0:         try {
0:             // test null String in execute query statement
0:             Statement stmt = createStatement();
0:             stmt.executeQuery(nullString);
0:             fail("executeQuery(nullString) should have failed.");
0:         } catch (SQLException e) {
0:             assertSQLState("XJ067", e);
0:         }
0:     }
0:     /**
0:      * Testing null string in executeUpdate statement.
0:      *
0:      * @exception SQLException if database access errors or other errors occur
0:      */
0:     public void testNullStringExecuteUpdateStatement() throws SQLException {
0:         String nullString = null;
0:         try {
0:             // test null String in execute update statement
0:             Statement stmt = createStatement();
0:             stmt.executeUpdate(nullString);
0:             fail("executeUpdate(nullString) should have failed.");
0:         } catch (SQLException e) {
0:             assertSQLState("XJ067", e);
0:         }
0:     }
0:     /**
0:      * Testing embedded comments in execute statement.
0:      *
0:      * @exception SQLException if database access errors or other errors occur
0:      */
0:     public void testDerby522() throws SQLException {
0:         Statement stmt = createStatement();
0:         
0:         // These we expect to fail with syntax errors, as in embedded mode.
0:         testCommentStmt(stmt, " --", true);
0:         testCommentStmt(stmt, " -- ", true);
0:         testCommentStmt(stmt, " -- This is a comment \n --", true);
0:         testCommentStmt(stmt,
0:                 " -- This is a comment\n --And another\n -- Andonemore", true);
0:         
0:         /*
0:         /* These we expect to return valid results for embedded and
0:         /* Derby Client (as of DERBY-522 fix)
0:          */
0:         testCommentStmt(stmt, " --\nvalues 2, 4, 8", false);
0:         ResultSet rs = stmt.getResultSet();
0:         String[][] expectedRows = new String[][] { { "2" }, 
0:                                                    { "4" }, 
0:                                                    { "8" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:         
0:         testCommentStmt(
0:                 stmt,
0:                 " -- This is \n -- \n --3 comments\nvalues 8", 
0:   		false);
0:                 
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "8" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:         
0:         testCommentStmt(stmt,
0:                 " -- This is a comment\n --And another\n -- Andonemore\nvalues (2,3)",
0:                 false);
0:         rs = stmt.getResultSet();
0:         ResultSetMetaData rsmd = rs.getMetaData();
0:         expectedRows = new String[][] { { "2", "3" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:                 
0:         testCommentStmt(stmt,
0:                 " -- This is a comment\n select i from t1",
0:                 false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "1" }, 
0:                                         { "2" }, 
0:                                         { "3" }, 
0:                                         { "4" }, 
0:                                         { "5" }, 
0:                                         { "6" }, 
0:                                         { "7" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:         
0:         testCommentStmt(stmt,
0:                 " --singleword\n insert into t1 values (8)",
0:                 false);
0:         rs = stmt.getResultSet();
0:         assertNull("Unexpected Not Null ResultSet", rs);
0:         
0:         testCommentStmt(stmt,
0:                 " --singleword\ncall za()",
0:                 false);
0:         assertNull("Unexpected Not Null ResultSet", rs);
0:         
0:         testCommentStmt(stmt,
0:                 " -- leading comment\n(\nvalues 4, 8)",
0:                 false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "4" }, 
0:         { "8" }  };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:         
0:         testCommentStmt(stmt,
0:                 " -- leading comment\n\n(\n\n\rvalues 4, 8)",
0:                 false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "4" }, 
0:                                         { "8" }  };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:         
0:         /*
0:         /* While we're at it, test comments in the middle and end of the
0:         /* statement.  Prior to the patch for DERBY-522, statements
0:         /* ending with a comment threw syntax errors; that problem
0:         /* was fixed with DERBY-522, as well, so all of these should now
0:         /* succeed in all modes (embedded and Derby Client).
0:          */
0:         testCommentStmt(stmt, "select i from t1 -- This is a comment", false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "1" }, 
0:                                         { "2" }, 
0:                                         { "3" }, 
0:                                         { "4" }, 
0:                                         { "5" }, 
0:                                         { "6" }, 
0:                                         { "7" }, 
0:                                         { "8" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:         
0:         testCommentStmt(stmt, "select i from t1\n -- This is a comment", false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "1" }, 
0:                                         { "2" }, 
0:                                         { "3" }, 
0:                                         { "4" }, 
0:                                         { "5" }, 
0:                                         { "6" }, 
0:                                         { "7" }, 
0:                                         { "8" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:       
0:         testCommentStmt(stmt, "values 8, 4, 2\n --", false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "8" }, 
0:                                         { "4" }, 
0:                                         { "2" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:     
0:         testCommentStmt(stmt, "values 8, 4,\n -- middle comment\n2\n -- end", false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "8" }, 
0:                                         { "4" }, 
0:                                         { "2" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:        
0:         testCommentStmt(stmt, "values 8, 4,\n -- middle comment\n2\n -- end\n", false);
0:         rs = stmt.getResultSet();
0:         expectedRows = new String[][] { { "8" }, 
0:                                         { "4" }, 
0:                                         { "2" } };
0:         JDBC.assertFullResultSet(rs, expectedRows);
0:     }
0:     /**
0:      * Helper method for testDerby522().
0:      * executes strings containing embedded comments.
0:      *
0:      * @param sql sql statement
0:      * @exception SQLException if database access errors or other errors occur
0:      */
0:     private static void testCommentStmt(Statement st, String sql,
0:             boolean expectFailure) throws SQLException {
0:         try {
0:             st.execute(sql);
0: 	    if (expectFailure)
0: 		fail("Unexpected Failure -- execute() should have failed.");	
0:         } catch (SQLException se) {
0:                 assertSQLState("42X01", se);
0:         }
0:     }
0:     /**
0:      * Java method for procedure za()
0:      *
0:      */
0:     public static void zeroArg () {
0:     }
0: }
============================================================================