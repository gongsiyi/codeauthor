1:4293daf: /*
2:4293daf: 
1:4293daf: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NullsTest
1:4293daf: 
1:4293daf: Licensed to the Apache Software Foundation (ASF) under one or more
1:4293daf: contributor license agreements.  See the NOTICE file distributed with
1:4293daf: this work for additional information regarding copyright ownership.
1:4293daf: The ASF licenses this file to You under the Apache License, Version 2.0
1:4293daf: (the "License"); you may not use this file except in compliance with
1:4293daf: the License.  You may obtain a copy of the License at
1:4293daf: 
1:4293daf: http://www.apache.org/licenses/LICENSE-2.0
1:4293daf: 
1:4293daf: Unless required by applicable law or agreed to in writing, software
1:4293daf: distributed under the License is distributed on an "AS IS" BASIS,
1:4293daf: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4293daf: See the License for the specific language governing permissions and
1:4293daf: limitations under the License.
1:4293daf: 
1:4293daf: */
1:4293daf: package org.apache.derbyTesting.functionTests.tests.lang;
1:4293daf: 
1:4293daf: import java.sql.PreparedStatement;
1:4293daf: import java.sql.SQLException;
1:4293daf: import java.sql.Statement;
1:4293daf: 
1:4293daf: import junit.framework.Test;
1:4293daf: 
1:4293daf: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:4293daf: import org.apache.derbyTesting.junit.JDBC;
1:4293daf: import org.apache.derbyTesting.junit.TestConfiguration;
1:4293daf: 
1:4293daf: /**
1:4293daf:  * Test case for nulls.sql. This test shows the current supported 
1:4293daf:  * null value functionality.
1:4293daf:  */
1:4293daf: public class NullsTest extends BaseJDBCTestCase {
1:4293daf: 
1:4293daf:     public NullsTest(String name) {
1:4293daf:         super(name);
2:4293daf:     }
1:4293daf: 
1:4293daf:     public static Test suite(){
1:4293daf:         return TestConfiguration.defaultSuite(NullsTest.class);
1:4293daf:     }
1:4293daf: 
1:4293daf:     public void setUp() throws SQLException{
1:4293daf:         getConnection().setAutoCommit(false);
1:4293daf:     }
1:4293daf: 
1:4293daf:     public void testCreate() throws SQLException{
1:4293daf:         Statement st = createStatement();
1:4293daf: 
1:c8b3cc2:         // A column cannot be declared explicitly nullable.
1:c8b3cc2:         assertCompileError("42X01", "create table a(a1 int null)");
1:c8b3cc2: 
1:4293daf:         //Trying to define null and not null for a column
1:4293daf:         String sql = "create table a(a1 int null not null)";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf: 
1:4293daf:         //Same as above, except that it's in reverse order
1:4293daf:         sql = "create table a(a1 int not null null)";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf: 
1:4293daf:         //Defining primarykey column constraint for explicitly nullable column
1:4293daf:         //gives error
1:4293daf:         sql = "create table a1(ac1 int null primary key)";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf: 
1:4293daf:         //Defining primarykey table constraint on explicitly nullable columns
1:4293daf:         //give error
1:4293daf:         sql = "create table a1(ac1 int null, ac2 int not null, " +
1:4293daf:                 "primary key(ac1,ac2))";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf: 
1:4293daf:         //Say null twice should fail
1:4293daf:         sql = "create table a2(ac1 int null null)";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf: 
1:4293daf:         //Say not null, null and no null for a column. 
1:4293daf:         //This is to make sure the flags stay proper for a column
1:4293daf:         sql = "create table a3(ac1 int not null null not null)";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf: 
1:4293daf:         //First statement says null and second one says not null. 
1:4293daf:         //This is to make sure the flag for the first one doesn't 
1:4293daf:         //affect the second one
1:4293daf:         sql = "create table a3(ac1 int default null)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "create table a4(ac1 int not null)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         dropTable("a3");
1:4293daf:         dropTable("a4");
1:4293daf: 
1:4293daf:         //One column says null and second one says not null
1:4293daf:         sql = "create table a5(ac1 int default null," +
1:4293daf:                 " ac2 int not null)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         dropTable("a5");
1:4293daf: 
1:4293daf:         //Statement1 says null, 2nd says nothing but says primary key
1:4293daf:         sql = "create table a6(ac1 int default null)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "create table a7(ac1 int not null primary key)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         dropTable("a6");
1:4293daf:         dropTable("a7");
1:4293daf: 
1:4293daf:         st.close();
1:4293daf:     }
1:4293daf: 
1:4293daf:     public void testAlter() throws SQLException{
1:4293daf:         Statement st = createStatement();
1:4293daf: 
1:4293daf:         //Alter table adding explicitly nullable column and primary key column
1:4293daf:         //constraint on it fails
1:4293daf:         String sql = "create table a(a1 int not null , a2 int not null)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "alter table a add column a3 int null " +
1:4293daf:                 "constraint ap1 primary key";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf: 
1:c8b3cc2:         // Adding explicitly nullable column should fail.
1:c8b3cc2:         assertCompileError("42X01", "alter table a add column a3 int null");
1:c8b3cc2: 
1:4293daf:         //Alter table table level primary key constraint on nullable column
1:4293daf:         //doesn't give an error
1:4293daf:         sql = "alter table a add constraint ap1 primary key(a1,a2)";
1:4293daf:         st.executeUpdate(sql);    
1:4293daf:         dropTable("a");
1:4293daf: 
1:4293daf:         //Alter nullability on a unique column should fail
1:4293daf:         sql = "create table a ( a int not null unique)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "alter table a modify a null";
1:4293daf:         assertStatementError("42X01", st, sql);
1:4293daf:         dropTable("a");
1:4293daf: 
1:4293daf:         //It's different from sql script.
1:4293daf:         //The content in sql maybe violate its original intent
1:4293daf:         //( may be try with multiple not null columns).
1:4293daf:         //Please check it.
1:4293daf:         sql = "create table a (a1 int not null, a2 int, a3 int)";
1:4293daf:         st.executeUpdate(sql);  
1:4293daf:         sql = "insert into a values(1,1,1)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf:         sql = "alter table a alter column a2 not null";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "alter table a alter column a3 not null";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "alter table a add constraint ap1 primary key(a1, a2, a3)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "insert into a values(1, NULL, 1)";
1:4293daf:         assertStatementError("23502", st, sql);
1:4293daf:         dropTable("a");
1:4293daf: 
1:4293daf:         //Try with multiple null columns
1:4293daf:         sql = "create table a (a1 int not null, a2 int default null, " +
1:4293daf:                 "a3 int default null)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "insert into a values(1,NULL,1)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf:         sql = "alter table a add constraint ap1 primary key(a1, a2, a3)";
1:4293daf:         assertStatementError("42831", st, sql);
1:4293daf:         dropTable("a");
1:4293daf: 
1:4293daf:         //Try adding a primary key where there is null data
1:4293daf:         //this should error
1:4293daf:         sql = "create table a (a1 int not null, a2 int)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "insert into a values(1, NULL)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf:         sql = "alter table a add constraint ap1 primary key(a1, a2)";
1:4293daf:         assertStatementError("42831", st, sql);
1:4293daf:         dropTable("a");
1:4293daf: 
1:4293daf:         //Try with multiple columns one of which is contained in a primary key
1:4293daf:         //where there is null data this should error
1:4293daf:         sql = "create table a (a1 int, a2 int, a3 int)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "alter table a add constraint ap1 primary key(a1, a2, a3)";
1:4293daf:         assertStatementError("42831", st, sql);
1:4293daf:         dropTable("a");
1:4293daf: 
1:4293daf:         st.close();   
1:4293daf:     }
1:4293daf: 
1:4293daf:     public void testInsert() throws SQLException{
1:4293daf:         Statement st = createStatement();
1:4293daf: 
1:4293daf:         //Create table with not null column and unique key should work
1:4293daf:         String sql = "create table a (a int not null constraint auniq unique)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         //inert same value into unique column fails.
1:4293daf:         sql = "insert into a values (1)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "insert into a values (1)";
1:4293daf:         assertStatementError("23505", st, sql);
1:4293daf:         dropTable("a");
1:4293daf: 
1:4293daf:         //Create a table with a non-null column with 
1:4293daf:         //a default value of null and verify that nulls are not allowed
1:4293daf:         sql = "create table s (x int default null not null, y int)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf:         sql = "insert into s (y) values(1)";
1:4293daf:         assertStatementError("23502", st, sql);
1:4293daf:         sql = "select * from s";
1:4293daf:         JDBC.assertEmpty(st.executeQuery(sql));
1:4293daf:         dropTable("s");
1:4293daf: 
1:4293daf:         st.close();
1:4293daf:     }
1:4293daf: 
1:4293daf:     public void testInsertIntoTableWithNullAndNonNullColumns()
1:4293daf:     throws SQLException{
1:4293daf:         Statement st = createStatement();
1:4293daf:         //-- create a table with null and non-null columns
1:4293daf:         String sql = "create table t (i int, i_d int default null, " +
1:4293daf:                 "i_n int not null, s smallint, " +
1:4293daf:                 "s_d smallint default null, s_n smallint not null)";
1:4293daf:         st.executeUpdate(sql);
1:4293daf: 
1:4293daf:         //-- insert non-nulls into null and non-null columns
1:4293daf:         sql = "insert into t (i, i_d, i_n, s, s_d, s_n)" +
1:4293daf:                 " values (1, 1, 1, 1, 1, 1)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf: 
1:4293daf:         //-- insert nulls into those columns that take nulls
1:4293daf:         sql = "insert into t values (null, null, 2, null, null, 2)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf: 
1:4293daf:         //-- insert a null as a default value 
1:4293daf:         //into the first default null column
1:4293daf:         sql = "insert into t (i, i_n, s, s_d, s_n)" +
1:4293daf:                 " values (3, 3, 3, 3, 3)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf: 
1:4293daf:         //-- insert a null as a default value 
1:4293daf:         //into the other default null columns
1:4293daf:         sql = "insert into t (i, i_d, i_n, s, s_n) " +
1:4293daf:                 "values (4, 4, 4, 4, 4)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf: 
1:4293daf:         //-- insert nulls as default values 
1:4293daf:         //into all default null columns
1:4293daf:         sql= "insert into t (i, i_n, s, s_n) " +
1:4293daf:                 "values (5, 5, 5, 5)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf: 
1:4293daf:         //-- attempt to insert default values 
1:4293daf:         //into the columns that don't accept nulls
1:4293daf:         sql = "insert into t (i, i_d, s, s_d) " +
1:4293daf:                 "values (6, 6, 6, 6)";
1:4293daf:         assertStatementError("23502", st, sql);
1:4293daf: 
1:4293daf:         //-- insert default nulls into nullable columns 
1:4293daf:         //that have no explicit defaults
1:4293daf:         sql = "insert into t (i_d, i_n, s_d, s_n) " +
1:4293daf:                 "values (7, 7, 7, 7)";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf: 
1:4293daf:         //-- attempt to insert an explicit null into a column 
1:4293daf:         //that doesn't accept nulls
1:4293daf:         sql = "insert into t values (8, 8, null, 8, 8, 8)";
1:4293daf:         assertStatementError("23502", st, sql);
1:4293daf: 
1:4293daf:         //-- attempt to insert an explicit null
1:4293daf:         //into the other columns that doesn't accept nulls
1:4293daf:         sql = "insert into t values (9, 9, 9, 9, 9, null)";
1:4293daf:         assertStatementError("23502", st, sql);
1:4293daf: 
1:4293daf:         sql = "select * from t";
1:4293daf:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:4293daf:             new String[][]{
1:4293daf:             {"1", "1", "1", "1", "1", "1",},
1:4293daf:             {null, null, "2", null, null, "2"},
1:4293daf:             {"3", null, "3", "3", "3", "3",},
1:4293daf:             {"4", "4", "4", "4", null, "4",},
1:4293daf:             {"5", null, "5", "5", null, "5",},
1:4293daf:             {null, "7", "7", null, "7", "7",},
1:4293daf:         });
1:4293daf: 
1:4293daf:         dropTable("t");
1:4293daf:         st.close();
1:4293daf:     }
1:4293daf: 
1:4293daf:     public void testISNullAndNot() throws SQLException{
1:4293daf:         String sql = "create table u (c1 integer)";
1:4293daf:         Statement st = createStatement();
1:4293daf:         st.addBatch(sql);
1:4293daf:         sql = "insert into u values null";
1:4293daf:         st.addBatch(sql);
1:4293daf:         sql = "insert into u values 1";
1:4293daf:         st.addBatch(sql);
1:4293daf:         sql = "insert into u values null";
1:4293daf:         st.addBatch(sql);
1:4293daf:         sql = "insert into u values 2";
1:4293daf:         st.addBatch(sql);
1:4293daf:         st.executeBatch();
1:4293daf: 
1:4293daf:         sql = "select * from u";
1:4293daf:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:4293daf:             new String[][]{
1:4293daf:             {null}, {"1"}, {null}, {"2"},
1:4293daf:         });
1:4293daf: 
1:4293daf:         sql = "select * from u where c1 is null";
1:4293daf:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:4293daf:             new String[][]{
1:4293daf:             {null}, {null},
1:4293daf:         });
1:4293daf: 
1:4293daf:         sql = "select * from u where c1 is not null";
1:4293daf:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:4293daf:             new String[][]{
1:4293daf:             {"1"}, {"2"},
1:4293daf:         });
1:4293daf:     
1:4293daf:         st.close();
1:4293daf: 
1:4293daf:         sql = "select * from u where cast (? as varchar(1))" +
1:4293daf:                 " is null";
1:4293daf:         PreparedStatement p1 = prepareStatement(sql);
1:4293daf:         p1.setString(1, "a");
1:4293daf:         JDBC.assertEmpty(p1.executeQuery());
1:4293daf:         p1.close();
1:4293daf: 
1:4293daf:         sql = "select * from u where cast (? as varchar(1))" +
1:4293daf:                 " is not null";
1:4293daf:         PreparedStatement p2 = prepareStatement(sql);
1:4293daf:         p2.setString(1, "a");
1:4293daf:         JDBC.assertFullResultSet(p2.executeQuery(), 
1:4293daf:                 new String[][]{
1:4293daf:                 {null}, {"1"}, {null}, {"2"}, 
1:4293daf:             });
1:4293daf:         p2.close();
1:4293daf: 
1:4293daf:         st = createStatement();
1:4293daf: 
1:4293daf:         sql = "select count(*) from u where c1 is null";
1:4293daf:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), "2");
1:4293daf: 
1:4293daf:         sql = "insert into u select * from (values null) as X";
1:4293daf:         assertEquals(1, st.executeUpdate(sql));
1:4293daf:         sql = "select * from u";
1:4293daf:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:4293daf:             new String[][]{
1:4293daf:             {null}, {"1"}, {null}, {"2"}, {null},
1:4293daf:         });
1:4293daf: 
1:4293daf:         sql = "select count(*) from u where c1 is null";
1:4293daf:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), "3");
1:4293daf: 
1:4293daf:         dropTable("u");
1:4293daf:         st.close();
1:4293daf:     }
1:4293daf: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c8b3cc2
/////////////////////////////////////////////////////////////////////////
1:         // A column cannot be declared explicitly nullable.
1:         assertCompileError("42X01", "create table a(a1 int null)");
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Adding explicitly nullable column should fail.
1:         assertCompileError("42X01", "alter table a add column a3 int null");
1: 
commit:9513bab
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:4293daf
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.lang.NullsTest
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test case for nulls.sql. This test shows the current supported 
1:  * null value functionality.
1:  */
1: public class NullsTest extends BaseJDBCTestCase {
1: 
1:     public NullsTest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite(){
1:         return TestConfiguration.defaultSuite(NullsTest.class);
1:     }
1: 
1:     public void setUp() throws SQLException{
1:         getConnection().setAutoCommit(false);
1:     }
1: 
0:     public void tearDown() throws SQLException{
0:         getConnection().setAutoCommit(true);
1:     }
1: 
1:     public void testCreate() throws SQLException{
1:         Statement st = createStatement();
1: 
1:         //Trying to define null and not null for a column
1:         String sql = "create table a(a1 int null not null)";
1:         assertStatementError("42X01", st, sql);
1: 
1:         //Same as above, except that it's in reverse order
1:         sql = "create table a(a1 int not null null)";
1:         assertStatementError("42X01", st, sql);
1: 
1:         //Defining primarykey column constraint for explicitly nullable column
1:         //gives error
1:         sql = "create table a1(ac1 int null primary key)";
1:         assertStatementError("42X01", st, sql);
1: 
1:         //Defining primarykey table constraint on explicitly nullable columns
1:         //give error
1:         sql = "create table a1(ac1 int null, ac2 int not null, " +
1:                 "primary key(ac1,ac2))";
1:         assertStatementError("42X01", st, sql);
1: 
1:         //Say null twice should fail
1:         sql = "create table a2(ac1 int null null)";
1:         assertStatementError("42X01", st, sql);
1: 
1:         //Say not null, null and no null for a column. 
1:         //This is to make sure the flags stay proper for a column
1:         sql = "create table a3(ac1 int not null null not null)";
1:         assertStatementError("42X01", st, sql);
1: 
1:         //First statement says null and second one says not null. 
1:         //This is to make sure the flag for the first one doesn't 
1:         //affect the second one
1:         sql = "create table a3(ac1 int default null)";
1:         st.executeUpdate(sql);
1:         sql = "create table a4(ac1 int not null)";
1:         st.executeUpdate(sql);
1:         dropTable("a3");
1:         dropTable("a4");
1: 
1:         //One column says null and second one says not null
1:         sql = "create table a5(ac1 int default null," +
1:                 " ac2 int not null)";
1:         st.executeUpdate(sql);
1:         dropTable("a5");
1: 
1:         //Statement1 says null, 2nd says nothing but says primary key
1:         sql = "create table a6(ac1 int default null)";
1:         st.executeUpdate(sql);
1:         sql = "create table a7(ac1 int not null primary key)";
1:         st.executeUpdate(sql);
1:         dropTable("a6");
1:         dropTable("a7");
1: 
1:         st.close();
1:     }
1: 
1:     public void testAlter() throws SQLException{
1:         Statement st = createStatement();
1: 
1:         //Alter table adding explicitly nullable column and primary key column
1:         //constraint on it fails
1:         String sql = "create table a(a1 int not null , a2 int not null)";
1:         st.executeUpdate(sql);
1:         sql = "alter table a add column a3 int null " +
1:                 "constraint ap1 primary key";
1:         assertStatementError("42X01", st, sql);
1: 
1:         //Alter table table level primary key constraint on nullable column
1:         //doesn't give an error
1:         sql = "alter table a add constraint ap1 primary key(a1,a2)";
1:         st.executeUpdate(sql);    
1:         dropTable("a");
1: 
1:         //Alter nullability on a unique column should fail
1:         sql = "create table a ( a int not null unique)";
1:         st.executeUpdate(sql);
1:         sql = "alter table a modify a null";
1:         assertStatementError("42X01", st, sql);
1:         dropTable("a");
1: 
1:         //It's different from sql script.
1:         //The content in sql maybe violate its original intent
1:         //( may be try with multiple not null columns).
1:         //Please check it.
1:         sql = "create table a (a1 int not null, a2 int, a3 int)";
1:         st.executeUpdate(sql);  
1:         sql = "insert into a values(1,1,1)";
1:         assertEquals(1, st.executeUpdate(sql));
1:         sql = "alter table a alter column a2 not null";
1:         st.executeUpdate(sql);
1:         sql = "alter table a alter column a3 not null";
1:         st.executeUpdate(sql);
1:         sql = "alter table a add constraint ap1 primary key(a1, a2, a3)";
1:         st.executeUpdate(sql);
1:         sql = "insert into a values(1, NULL, 1)";
1:         assertStatementError("23502", st, sql);
1:         dropTable("a");
1: 
1:         //Try with multiple null columns
1:         sql = "create table a (a1 int not null, a2 int default null, " +
1:                 "a3 int default null)";
1:         st.executeUpdate(sql);
1:         sql = "insert into a values(1,NULL,1)";
1:         assertEquals(1, st.executeUpdate(sql));
1:         sql = "alter table a add constraint ap1 primary key(a1, a2, a3)";
1:         assertStatementError("42831", st, sql);
1:         dropTable("a");
1: 
1:         //Try adding a primary key where there is null data
1:         //this should error
1:         sql = "create table a (a1 int not null, a2 int)";
1:         st.executeUpdate(sql);
1:         sql = "insert into a values(1, NULL)";
1:         assertEquals(1, st.executeUpdate(sql));
1:         sql = "alter table a add constraint ap1 primary key(a1, a2)";
1:         assertStatementError("42831", st, sql);
1:         dropTable("a");
1: 
1:         //Try with multiple columns one of which is contained in a primary key
1:         //where there is null data this should error
1:         sql = "create table a (a1 int, a2 int, a3 int)";
1:         st.executeUpdate(sql);
1:         sql = "alter table a add constraint ap1 primary key(a1, a2, a3)";
1:         assertStatementError("42831", st, sql);
1:         dropTable("a");
1: 
1:         st.close();   
1:     }
1: 
1:     public void testInsert() throws SQLException{
1:         Statement st = createStatement();
1: 
1:         //Create table with not null column and unique key should work
1:         String sql = "create table a (a int not null constraint auniq unique)";
1:         st.executeUpdate(sql);
1:         //inert same value into unique column fails.
1:         sql = "insert into a values (1)";
1:         st.executeUpdate(sql);
1:         sql = "insert into a values (1)";
1:         assertStatementError("23505", st, sql);
1:         dropTable("a");
1: 
1:         //Create a table with a non-null column with 
1:         //a default value of null and verify that nulls are not allowed
1:         sql = "create table s (x int default null not null, y int)";
1:         st.executeUpdate(sql);
1:         sql = "insert into s (y) values(1)";
1:         assertStatementError("23502", st, sql);
1:         sql = "select * from s";
1:         JDBC.assertEmpty(st.executeQuery(sql));
1:         dropTable("s");
1: 
1:         st.close();
1:     }
1: 
1:     public void testInsertIntoTableWithNullAndNonNullColumns()
1:     throws SQLException{
1:         Statement st = createStatement();
1:         //-- create a table with null and non-null columns
1:         String sql = "create table t (i int, i_d int default null, " +
1:                 "i_n int not null, s smallint, " +
1:                 "s_d smallint default null, s_n smallint not null)";
1:         st.executeUpdate(sql);
1: 
1:         //-- insert non-nulls into null and non-null columns
1:         sql = "insert into t (i, i_d, i_n, s, s_d, s_n)" +
1:                 " values (1, 1, 1, 1, 1, 1)";
1:         assertEquals(1, st.executeUpdate(sql));
1: 
1:         //-- insert nulls into those columns that take nulls
1:         sql = "insert into t values (null, null, 2, null, null, 2)";
1:         assertEquals(1, st.executeUpdate(sql));
1: 
1:         //-- insert a null as a default value 
1:         //into the first default null column
1:         sql = "insert into t (i, i_n, s, s_d, s_n)" +
1:                 " values (3, 3, 3, 3, 3)";
1:         assertEquals(1, st.executeUpdate(sql));
1: 
1:         //-- insert a null as a default value 
1:         //into the other default null columns
1:         sql = "insert into t (i, i_d, i_n, s, s_n) " +
1:                 "values (4, 4, 4, 4, 4)";
1:         assertEquals(1, st.executeUpdate(sql));
1: 
1:         //-- insert nulls as default values 
1:         //into all default null columns
1:         sql= "insert into t (i, i_n, s, s_n) " +
1:                 "values (5, 5, 5, 5)";
1:         assertEquals(1, st.executeUpdate(sql));
1: 
1:         //-- attempt to insert default values 
1:         //into the columns that don't accept nulls
1:         sql = "insert into t (i, i_d, s, s_d) " +
1:                 "values (6, 6, 6, 6)";
1:         assertStatementError("23502", st, sql);
1: 
1:         //-- insert default nulls into nullable columns 
1:         //that have no explicit defaults
1:         sql = "insert into t (i_d, i_n, s_d, s_n) " +
1:                 "values (7, 7, 7, 7)";
1:         assertEquals(1, st.executeUpdate(sql));
1: 
1:         //-- attempt to insert an explicit null into a column 
1:         //that doesn't accept nulls
1:         sql = "insert into t values (8, 8, null, 8, 8, 8)";
1:         assertStatementError("23502", st, sql);
1: 
1:         //-- attempt to insert an explicit null
1:         //into the other columns that doesn't accept nulls
1:         sql = "insert into t values (9, 9, 9, 9, 9, null)";
1:         assertStatementError("23502", st, sql);
1: 
1:         sql = "select * from t";
1:         JDBC.assertFullResultSet(st.executeQuery(sql),
1:             new String[][]{
1:             {"1", "1", "1", "1", "1", "1",},
1:             {null, null, "2", null, null, "2"},
1:             {"3", null, "3", "3", "3", "3",},
1:             {"4", "4", "4", "4", null, "4",},
1:             {"5", null, "5", "5", null, "5",},
1:             {null, "7", "7", null, "7", "7",},
1:         });
1: 
1:         dropTable("t");
1:         st.close();
1:     }
1: 
1:     public void testISNullAndNot() throws SQLException{
1:         String sql = "create table u (c1 integer)";
1:         Statement st = createStatement();
1:         st.addBatch(sql);
1:         sql = "insert into u values null";
1:         st.addBatch(sql);
1:         sql = "insert into u values 1";
1:         st.addBatch(sql);
1:         sql = "insert into u values null";
1:         st.addBatch(sql);
1:         sql = "insert into u values 2";
1:         st.addBatch(sql);
1:         st.executeBatch();
1: 
1:         sql = "select * from u";
1:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:             new String[][]{
1:             {null}, {"1"}, {null}, {"2"},
1:         });
1: 
1:         sql = "select * from u where c1 is null";
1:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:             new String[][]{
1:             {null}, {null},
1:         });
1: 
1:         sql = "select * from u where c1 is not null";
1:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:             new String[][]{
1:             {"1"}, {"2"},
1:         });
1:     
1:         st.close();
1: 
1:         sql = "select * from u where cast (? as varchar(1))" +
1:                 " is null";
1:         PreparedStatement p1 = prepareStatement(sql);
1:         p1.setString(1, "a");
1:         JDBC.assertEmpty(p1.executeQuery());
1:         p1.close();
1: 
1:         sql = "select * from u where cast (? as varchar(1))" +
1:                 " is not null";
1:         PreparedStatement p2 = prepareStatement(sql);
1:         p2.setString(1, "a");
1:         JDBC.assertFullResultSet(p2.executeQuery(), 
1:                 new String[][]{
1:                 {null}, {"1"}, {null}, {"2"}, 
1:             });
1:         p2.close();
1: 
1:         st = createStatement();
1: 
1:         sql = "select count(*) from u where c1 is null";
1:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), "2");
1: 
1:         sql = "insert into u select * from (values null) as X";
1:         assertEquals(1, st.executeUpdate(sql));
1:         sql = "select * from u";
1:         JDBC.assertFullResultSet(st.executeQuery(sql), 
1:             new String[][]{
1:             {null}, {"1"}, {null}, {"2"}, {null},
1:         });
1: 
1:         sql = "select count(*) from u where c1 is null";
1:         JDBC.assertSingleValueResultSet(st.executeQuery(sql), "3");
1: 
1:         dropTable("u");
1:         st.close();
1:     }
1: }
============================================================================