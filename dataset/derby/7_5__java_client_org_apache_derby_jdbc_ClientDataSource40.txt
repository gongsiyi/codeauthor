1:660d738: /*
1:09869c6:  
1:660d738:    Derby - Class org.apache.derby.jdbc.ClientDataSource40
1:09869c6:  
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:2e7a2af:  
1:660d738:       http://www.apache.org/licenses/LICENSE-2.0
10:660d738:  
1:660d738:    Unless required by applicable law or agreed to in writing, software
1:660d738:    distributed under the License is distributed on an "AS IS" BASIS,
1:660d738:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:660d738:    See the License for the specific language governing permissions and
1:660d738:    limitations under the License.
1:660d738:  
1:8a44c0f:  */
1:8a44c0f: 
1:660d738: package org.apache.derby.jdbc;
1:2e7a2af: 
1:8a44c0f: import javax.sql.DataSource;
1:527d377: 
1:8a44c0f: /**
1:fd584b0:    <P>
1:fd584b0:    This is a vacuous, deprecated class. At one time, it had real behavior and helped us support
1:fd584b0:    separate datasources for Java 5 and Java 6.
1:fd584b0:    Now that we no longer support Java 5, all functionality has migrated into the superclass, ClientDataSource.
1:fd584b0:    This class is preserved for backward compatibility reasons.
1:fd584b0:    </P>
1:c712a5b:    @deprecated Use {@link ClientDataSource} instead.
1:54792be:  */
1:8269b78: public class ClientDataSource40 extends ClientDataSource
1:69e3d06:     implements DataSource /* compile-time check for 4.1 extension */
1:09869c6: {
1:8269b78:    private static final long serialVersionUID = -3936981157692787843L;
1:660d738:     
1:660d738:     public ClientDataSource40() {
1:660d738:         super();
1:8a44c0f:     }
1:09869c6: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c712a5b
/////////////////////////////////////////////////////////////////////////
1:    @deprecated Use {@link ClientDataSource} instead.
commit:04fc939
/////////////////////////////////////////////////////////////////////////
0:  * <p>
0:  * </p>
0:  *
0:  *   <li>Java SE 6 (JDBC 4.0) and</li>
0:  *   <li>Java SE 7 (JDBC 4.1) and</li>
0:  *   <li>full Java SE 8 (JDBC 4.2).</li>
0:  * </p>
0:  *
0:  * <p>
0:  * Those platforms are also supported by {@code ClientXADataSource}
0:  * now, and applications should use {@code ClientXADataSource}
0:  * instead of this class. This class is provided only for backward
0:  * compatibility and may be removed in later versions of Derby.
0:  * </p>
0:  *
0:  * </p>
0:  *
/////////////////////////////////////////////////////////////////////////
0:  * </p>
/////////////////////////////////////////////////////////////////////////
commit:7f6e8aa
/////////////////////////////////////////////////////////////////////////
0:  *  <UL>
0:  *  <LI> JDBC 4.0 - Java SE 6
0:  *  <LI> JDBC 3.0 - J2SE 5.0
commit:5ef7a0d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  * JDBC level 4.1 (or higher). Use the corresponding ClientDataSource,
0:  * ClientConnectionPoolDataSource, and ClientXADataSource classes if
0:  *	<LI> JDBC 4.0 - Java SE 6
0:  *	<LI> JDBC 3.0 - J2SE 5.0
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:fd584b0
/////////////////////////////////////////////////////////////////////////
1:    <P>
1:    This is a vacuous, deprecated class. At one time, it had real behavior and helped us support
1:    separate datasources for Java 5 and Java 6.
1:    Now that we no longer support Java 5, all functionality has migrated into the superclass, ClientDataSource.
1:    This class is preserved for backward compatibility reasons.
1:    </P>
commit:0ede6f3
/////////////////////////////////////////////////////////////////////////
0:  * environment. Use these DataSources if your application runs at
0:  * JDBC level 4.0 (or higher). Use the corresponding ClientDataSource, ClientConnectionPoolDataSource, and
commit:09869c6
/////////////////////////////////////////////////////////////////////////
0: import java.sql.SQLFeatureNotSupportedException;
0: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1: 
0:     ////////////////////////////////////////////////////////////////////
0:     //
0:     // INTRODUCED BY JDBC 4.1 IN JAVA 7
0:     //
0:     ////////////////////////////////////////////////////////////////////
1: 
0:     public  Logger getParentLogger()
0:         throws SQLFeatureNotSupportedException
1:     {
0:         throw (SQLFeatureNotSupportedException)
0:             (
0:              new SqlException( null, new ClientMessageId(SQLState.NOT_IMPLEMENTED), "getParentLogger" )
0:              ).getSQLException();
1:     }
commit:d6e7d39
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8a44c0f
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
0:      * This method forwards all the calls to default query object provided by 
0:      * the jdk.
0:      * @param ifc interface to generated concreate class
0:      * @param dataSource DataSource to use when invoking methods that access the Data Source
0:      * @return concreat class generated by default qury object generator
1:      */
0:     public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource dataSource ) 
0:                                                     throws SQLException {
0:         return QueryObjectFactory.createDefaultQueryObject (ifc, dataSource);
1:     }   
1:     
1:     /**
commit:54792be
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * ClientDataSource40 is a simple data source implementation
0:  * that can be used for establishing connections in a
0:  * non-pooling, non-distributed environment.
0:  * The class ClientConnectionPoolDataSource40 can be used in a connection pooling environment,
0:  * and the class ClientXADataSource40 can be used in a distributed, and pooling
0:  * environment. Use these DataSources if your application runs under
0:  * JDBC4.0. Use the corresponding ClientDataSource, ClientConnectionPoolDataSource, and
0:  * ClientXADataSource classes if 
0:  * your application runs in the following environments:
0:  * <p/>
0:  *	<UL>
0:  *	<LI> JDBC 3.0 - Java 2 - JDK 1.4, J2SE 5.0
0:  *	<LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
0:  * </UL>
0:  *
0:  * <p>The example below registers a DNC data source object with a JNDI naming service.
0:  * <pre>
0:  * org.apache.derby.client.ClientDataSource40 dataSource = new org.apache.derby.client.ClientDataSource40 ();
0:  * dataSource.setServerName ("my_derby_database_server");
0:  * dataSource.setDatabaseName ("my_derby_database_name");
0:  * javax.naming.Context context = new javax.naming.InitialContext();
0:  * context.bind ("jdbc/my_datasource_name", dataSource);
0:  * </pre>
0:  * The first line of code in the example creates a data source object.
0:  * The next two lines initialize the data source's
0:  * properties. Then a Java object that references the initial JNDI naming
0:  * context is created by calling the
0:  * InitialContext() constructor, which is provided by JNDI.
0:  * System properties (not shown) are used to tell JNDI the
0:  * service provider to use. The JNDI name space is hierarchical,
0:  * similar to the directory structure of many file
0:  * systems. The data source object is bound to a logical JNDI name
0:  * by calling Context.bind(). In this case the JNDI name
0:  * identifies a subcontext, "jdbc", of the root naming context
0:  * and a logical name, "my_datasource_name", within the jdbc
0:  * subcontext. This is all of the code required to deploy
0:  * a data source object within JNDI. This example is provided
0:  * mainly for illustrative purposes. We expect that developers
0:  * or system administrators will normally use a GUI tool to
0:  * deploy a data source object.
0:  * <p/>
0:  * Once a data source has been registered with JNDI,
0:  * it can then be used by a JDBC application, as is shown in the
0:  * following example.
0:  * <pre>
0:  * javax.naming.Context context = new javax.naming.InitialContext ();
0:  * javax.sql.DataSource dataSource = (javax.sql.DataSource) context.lookup ("jdbc/my_datasource_name");
0:  * java.sql.Connection connection = dataSource.getConnection ("user", "password");
0:  * </pre>
0:  * The first line in the example creates a Java object
0:  * that references the initial JNDI naming context. Next, the
0:  * initial naming context is used to do a lookup operation
0:  * using the logical name of the data source. The
0:  * Context.lookup() method returns a reference to a Java Object,
0:  * which is narrowed to a javax.sql.DataSource object. In
0:  * the last line, the DataSource.getConnection() method
0:  * is called to produce a database connection.
0:  * <p/>
0:  * This simple data source subclass of ClientBaseDataSource maintains
0:  * it's own private <code>password</code> property.
0:  * <p/>
0:  * The specified password, along with the user, is validated by DERBY.
0:  * This property can be overwritten by specifing
0:  * the password parameter on the DataSource.getConnection() method call.
0:  * <p/>
0:  * This password property is not declared transient, and therefore
0:  * may be serialized to a file in clear-text, or stored
0:  * to a JNDI server in clear-text when the data source is saved.
0:  * Care must taken by the user to prevent security
0:  * breaches.
0:  * <p/>
1:  */
commit:2e7a2af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.MessageId;
0: import org.apache.derby.client.am.SqlException;
0: import org.apache.derby.shared.common.reference.SQLState;
/////////////////////////////////////////////////////////////////////////
0:     }   
1:     
0:     /**
0:      * Returns false unless <code>interfaces</code> is implemented 
0:      * 
0:      * @param  interfaces             a Class defining an interface.
0:      * @return true                   if this implements the interface or 
0:      *                                directly or indirectly wraps an object 
0:      *                                that does.
0:      * @throws java.sql.SQLException  if an error occurs while determining 
0:      *                                whether this is a wrapper for an object 
0:      *                                with the given interface.
0:      */
0:     public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
0:         return interfaces.isInstance(this);
0:     }
1:     
0:     /**
0:      * Returns <code>this</code> if this class implements the interface
0:      *
0:      * @param  interfaces a Class defining an interface
0:      * @return an object that implements the interface
0:      * @throws java.sql.SQLExption if no object if found that implements the 
0:      * interface
0:      */
0:     public <T> T unwrap(java.lang.Class<T> interfaces)
0:                                    throws SQLException {
0:         try { 
0:             return interfaces.cast(this);
0:         } catch (ClassCastException cce) {
0:             throw new SqlException(null,new MessageId(SQLState.UNABLE_TO_UNWRAP),
0:                     interfaces).getSQLException();
0:         }
0:     }
commit:527d377
/////////////////////////////////////////////////////////////////////////
0: import java.sql.BaseQuery;
0: import java.sql.QueryObjectFactory;
0: import java.sql.QueryObjectGenerator;
0:     }   
1:     
0:     /**
0:      * returns null indicating that no driver specific implementation for 
0:      * QueryObjectGenerator available
0:      * @return null
0:      */
0:     public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
0:         return null;
0:     /**
0:      * This method forwards all the calls to default query object provided by 
0:      * the jdk.
0:      * @param ifc interface to generated concreate class
0:      * @return concreat class generated by default qury object generator
0:      */
0:     public <T extends BaseQuery> T createQueryObject(Class<T> ifc) 
0:                                                     throws SQLException {
0:         return QueryObjectFactory.createDefaultQueryObject (ifc, this);
0:     }        
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
0: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
1:     implements DataSource /* compile-time check for 4.1 extension */
commit:a24588c
/////////////////////////////////////////////////////////////////////////
0:  *   <li>Java SE 7 (JDBC 4.1) and
0:  *   <li>full Java SE 8 (JDBC 4.2).
commit:cb88209
/////////////////////////////////////////////////////////////////////////
0:  * running on the following platforms:
0:  * <p>
0:  * <ul>
0:  *   <li>JDBC 4.1 - Java SE 7
0:  *   <li>JDBC 4.2 - full Java SE 8
0:  * </ul>
0:  * <p>
0:  * Use BasicClientDataSource40 if your application runs on Java 8
0:  * Compact Profile 2.
0:  * <p>
0:  * Use ClientDataSource if your application runs on the following
0:  * platforms:
0:  * <p>
0:  * <p>
commit:2913612
/////////////////////////////////////////////////////////////////////////
0:  * This datasource is suitable for a client/server use of Derby,
0:  * running on full Java SE 7, corresponding to JDBC 4.1.
0:  * <p/>
0:  * Use the corresponding ClientDataSource,
0:  * ClientConnectionPoolDataSource, and ClientXADataSource classes if
0:  * your application runs in the following environments:
0:  * <ul>
0:  *  <li> JDBC 4.0 - Java SE 6
0:  *  <li> JDBC 3.0 - J2SE 5.0
0:  * </ul>
0:  * environment.
commit:8269b78
/////////////////////////////////////////////////////////////////////////
1: public class ClientDataSource40 extends ClientDataSource
0:     implements javax.sql.DataSource /* compile-time check for 4.1 extension */
0: {
1:    private static final long serialVersionUID = -3936981157692787843L;
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:6eb29f6
/////////////////////////////////////////////////////////////////////////
0:  *    <UL>
0:  *    <LI> JDBC 4.0 - Java SE 6
0:  *    <LI> JDBC 3.0 - J2SE 5.0
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:e65b4db
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.client.am.ClientMessageId;
/////////////////////////////////////////////////////////////////////////
0:             throw new SqlException(null,new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:660d738
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.jdbc.ClientDataSource40
1:  
0:    Copyright (c) 2005 The Apache Software Foundation or its licensors, where applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
0:  */
1: 
1: package org.apache.derby.jdbc;
1: 
0: import java.sql.SQLException;
1: 
0: public class ClientDataSource40 extends ClientDataSource {
1:     
1:     public ClientDataSource40() {
1:         super();
0:     }
1:     
0:     public <T> T createQueryObject(Class<T> ifc) throws SQLException {
0:         throw new java.lang.UnsupportedOperationException();
0:     }
1:     
0: }
============================================================================