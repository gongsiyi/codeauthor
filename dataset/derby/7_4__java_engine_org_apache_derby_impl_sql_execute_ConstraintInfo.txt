1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.ConstraintInfo
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConsInfo;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.ArrayUtil;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
2:eac0369: /**
1:eac0369:  * This is a simple class used to store the run time information
1:eac0369:  * about a constraint.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class ConstraintInfo implements ConsInfo
1:eac0369: {
1:eac0369: 	/********************************************************
1:eac0369: 	**
1:eac0369: 	**	This class implements Formatable. That means that it
1:eac0369: 	**	can write itself to and from a formatted stream. If
1:eac0369: 	**	you add more fields to this class, make sure that you
1:eac0369: 	**	also write/read them with the writeExternal()/readExternal()
1:eac0369: 	**	methods.
1:eac0369: 	**
1:eac0369: 	**	If, inbetween releases, you add more fields to this class,
1:eac0369: 	**	then you should bump the version number emitted by the getTypeFormatId()
1:eac0369: 	**	method.  OR, since this is something that is used
1:eac0369: 	**	in stored prepared statements, it is ok to change it
1:eac0369: 	**	if you make sure that stored prepared statements are
1:eac0369: 	**	invalidated across releases.
1:eac0369: 	**
1:eac0369: 	********************************************************/
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** See the constructor for the meaning of these fields
1:eac0369: 	*/
1:eac0369: 	private String			tableName;
1:eac0369: 	private SchemaDescriptor	tableSd;
1:eac0369: 	private UUID				tableSchemaId;
1:eac0369: 	private String[]			columnNames;
1:eac0369: 	private int 				raDeleteRule;
1:eac0369: 	private int					raUpdateRule;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Niladic constructor for Formattable
1:eac0369: 	 */
1:eac0369: 	public ConstraintInfo() {}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Consructor
1:eac0369: 	 *
1:eac0369: 	 */
1:eac0369: 	public ConstraintInfo(
1:eac0369: 							String				tableName,
1:eac0369: 							SchemaDescriptor	tableSd,
1:eac0369: 							String[]			columnNames,
1:eac0369: 							int                 raDeleteRule,
1:eac0369: 							int                 raUpdateRule
1:eac0369: 						)
1:eac0369: 	{
1:eac0369: 		this.tableName = tableName;
1:eac0369: 		this.tableSd = tableSd;
1:42544c4:         this.columnNames = ArrayUtil.copy(columnNames);
1:eac0369: 		this.raDeleteRule  = raDeleteRule;
1:eac0369: 		this.raUpdateRule  = raUpdateRule;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// FORMATABLE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////
1:eac0369: 	/**
1:eac0369: 	 * Write this object out
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here
1:eac0369: 	 *
1:eac0369:  	 * @exception IOException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		out.writeObject(tableName);
1:eac0369: 		if (tableSd == null)
1:eac0369: 		{
1:eac0369: 			out.writeBoolean(false);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			out.writeBoolean(true);
1:eac0369: 			out.writeObject(tableSd.getUUID());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (columnNames == null)
1:eac0369: 		{
1:eac0369: 			out.writeBoolean(false);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			out.writeBoolean(true);
1:eac0369: 			ArrayUtil.writeArrayLength(out, columnNames);
1:eac0369: 			ArrayUtil.writeArrayItems(out, columnNames);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		//write referential actions for delete and update
1:eac0369: 		out.writeInt(raDeleteRule);
1:eac0369: 		out.writeInt(raUpdateRule);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException					thrown on error
1:eac0369: 	 * @exception ClassNotFoundException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in)
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		tableName = (String)in.readObject();
1:eac0369: 		if (in.readBoolean())
1:eac0369: 		{
1:eac0369: 			tableSchemaId = (UUID)in.readObject();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		if (in.readBoolean())
1:eac0369: 		{
1:eac0369: 			columnNames = new String[ArrayUtil.readArrayLength(in)];
1:eac0369: 			ArrayUtil.readArrayItems(in, columnNames);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		//read referential actions for delete and update
1:eac0369: 		raDeleteRule = in.readInt();
1:eac0369: 		raUpdateRule = in.readInt();
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Get the formatID which corresponds to this class.
1:eac0369: 	 *
1:eac0369: 	 *	@return	the formatID of this class
1:eac0369: 	 */
1:eac0369: 	public	int	getTypeFormatId()	{ return StoredFormatIds.CONSTRAINT_INFO_V01_ID; }
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// Misc
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			StringBuffer str = new StringBuffer();
1:eac0369: 			str.append("Referencing ");
1:eac0369: 			str.append(tableName);
1:eac0369: 			if (columnNames != null)
1:eac0369: 			{
1:eac0369: 				str.append("(");
1:eac0369: 				for (int i = 0; i < columnNames.length; i++)
1:eac0369: 				{
1:eac0369: 					if (i > 0)
1:eac0369: 						str.append(",");
1:eac0369: 
1:eac0369: 					str.append(columnNames[i]);
1:eac0369: 				}
1:eac0369: 				str.append(")");
1:eac0369: 			}	
1:eac0369: 		
1:eac0369: 			return str.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public SchemaDescriptor getReferencedTableSchemaDescriptor(DataDictionary dd)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (tableSd != null)
1:eac0369: 		{
1:eac0369: 			return tableSd;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return dd.getSchemaDescriptor(tableSchemaId, null);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 			
1:eac0369: 	public TableDescriptor getReferencedTableDescriptor(DataDictionary dd)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		if (tableName == null)
1:eac0369: 		{
1:eac0369: 			return null;
1:eac0369: 		}
1:eac0369: 	
1:eac0369: 		return dd.getTableDescriptor(tableName, 
1:0978789: 				getReferencedTableSchemaDescriptor(dd), null);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	This ConsInfo describes columns in a referenced table. What are
1:eac0369: 	  *	their names?
1:eac0369: 	  *
1:eac0369: 	  *	@return	array of referenced column names
1:eac0369: 	  */
1:42544c4:     public String[] getReferencedColumnNames() {
1:42544c4:         return ArrayUtil.copy(columnNames);
1:42544c4:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Get the name of the table that these column live in.
1:eac0369: 	  *
1:eac0369: 	  *	@return	referenced table name
1:eac0369: 	  */
1:eac0369: 	public String getReferencedTableName()
1:eac0369: 	{ return tableName; }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Get the referential Action for an Update.
1:eac0369: 	  *
1:eac0369: 	  *	@return	referential Action for update
1:eac0369: 	  */
1:eac0369: 	public int getReferentialActionUpdateRule()
1:eac0369: 	{ return raUpdateRule; }
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	  *	Get the referential Action for a Delete.
1:eac0369: 	  *
1:eac0369: 	  *	@return	referential Action Delete rule
1:eac0369: 	  */
1:eac0369: 	public int getReferentialActionDeleteRule()
1:eac0369: 	{ return raDeleteRule; }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:42544c4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         this.columnNames = ArrayUtil.copy(columnNames);
/////////////////////////////////////////////////////////////////////////
1:     public String[] getReferencedColumnNames() {
1:         return ArrayUtil.copy(columnNames);
1:     }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:0978789
/////////////////////////////////////////////////////////////////////////
1: 				getReferencedTableSchemaDescriptor(dd), null);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.ConstraintInfo
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConsInfo;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.catalog.UUID;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: /**
1:  * This is a simple class used to store the run time information
1:  * about a constraint.
1:  *
0:  * @author jamie
1:  */
1: public class ConstraintInfo implements ConsInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/********************************************************
1: 	**
1: 	**	This class implements Formatable. That means that it
1: 	**	can write itself to and from a formatted stream. If
1: 	**	you add more fields to this class, make sure that you
1: 	**	also write/read them with the writeExternal()/readExternal()
1: 	**	methods.
1: 	**
1: 	**	If, inbetween releases, you add more fields to this class,
1: 	**	then you should bump the version number emitted by the getTypeFormatId()
1: 	**	method.  OR, since this is something that is used
1: 	**	in stored prepared statements, it is ok to change it
1: 	**	if you make sure that stored prepared statements are
1: 	**	invalidated across releases.
1: 	**
1: 	********************************************************/
1: 
1: 	/*
1: 	** See the constructor for the meaning of these fields
1: 	*/
1: 	private String			tableName;
1: 	private SchemaDescriptor	tableSd;
1: 	private UUID				tableSchemaId;
1: 	private String[]			columnNames;
1: 	private int 				raDeleteRule;
1: 	private int					raUpdateRule;
1: 
1: 
1: 	/**
1: 	 * Niladic constructor for Formattable
1: 	 */
1: 	public ConstraintInfo() {}
1: 
1: 	/**
1: 	 * Consructor
1: 	 *
1: 	 */
1: 	public ConstraintInfo(
1: 							String				tableName,
1: 							SchemaDescriptor	tableSd,
1: 							String[]			columnNames,
1: 							int                 raDeleteRule,
1: 							int                 raUpdateRule
1: 						)
1: 	{
1: 		this.tableName = tableName;
1: 		this.tableSd = tableSd;
0: 		this.columnNames = columnNames;
1: 		this.raDeleteRule  = raDeleteRule;
1: 		this.raUpdateRule  = raUpdateRule;
1: 	}
1: 
1: 	//////////////////////////////////////////////
1: 	//
1: 	// FORMATABLE
1: 	//
1: 	//////////////////////////////////////////////
1: 	/**
1: 	 * Write this object out
1: 	 *
1: 	 * @param out write bytes here
1: 	 *
1:  	 * @exception IOException thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		out.writeObject(tableName);
1: 		if (tableSd == null)
1: 		{
1: 			out.writeBoolean(false);
1: 		}
1: 		else
1: 		{
1: 			out.writeBoolean(true);
1: 			out.writeObject(tableSd.getUUID());
1: 		}
1: 
1: 		if (columnNames == null)
1: 		{
1: 			out.writeBoolean(false);
1: 		}
1: 		else
1: 		{
1: 			out.writeBoolean(true);
1: 			ArrayUtil.writeArrayLength(out, columnNames);
1: 			ArrayUtil.writeArrayItems(out, columnNames);
1: 		}
1: 
1: 		//write referential actions for delete and update
1: 		out.writeInt(raDeleteRule);
1: 		out.writeInt(raUpdateRule);
1: 	}
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.
1: 	 *
1: 	 * @param in read this.
1: 	 *
1: 	 * @exception IOException					thrown on error
1: 	 * @exception ClassNotFoundException		thrown on error
1: 	 */
1: 	public void readExternal(ObjectInput in)
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		tableName = (String)in.readObject();
1: 		if (in.readBoolean())
1: 		{
1: 			tableSchemaId = (UUID)in.readObject();
1: 		}
1: 
1: 		if (in.readBoolean())
1: 		{
1: 			columnNames = new String[ArrayUtil.readArrayLength(in)];
1: 			ArrayUtil.readArrayItems(in, columnNames);
1: 		}
1: 
1: 		//read referential actions for delete and update
1: 		raDeleteRule = in.readInt();
1: 		raUpdateRule = in.readInt();
1: 	}
1: 	
1: 	/**
1: 	 * Get the formatID which corresponds to this class.
1: 	 *
1: 	 *	@return	the formatID of this class
1: 	 */
1: 	public	int	getTypeFormatId()	{ return StoredFormatIds.CONSTRAINT_INFO_V01_ID; }
1: 
1: 	//////////////////////////////////////////////////////////////
1: 	//
1: 	// Misc
1: 	//
1: 	//////////////////////////////////////////////////////////////
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			StringBuffer str = new StringBuffer();
1: 			str.append("Referencing ");
1: 			str.append(tableName);
1: 			if (columnNames != null)
1: 			{
1: 				str.append("(");
1: 				for (int i = 0; i < columnNames.length; i++)
1: 				{
1: 					if (i > 0)
1: 						str.append(",");
1: 
1: 					str.append(columnNames[i]);
1: 				}
1: 				str.append(")");
1: 			}	
1: 		
1: 			return str.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 	public SchemaDescriptor getReferencedTableSchemaDescriptor(DataDictionary dd)
1: 		throws StandardException
1: 	{
1: 		if (tableSd != null)
1: 		{
1: 			return tableSd;
1: 		}
1: 		else
1: 		{
1: 			return dd.getSchemaDescriptor(tableSchemaId, null);
1: 		}
1: 	}
1: 			
1: 	public TableDescriptor getReferencedTableDescriptor(DataDictionary dd)
1: 		throws StandardException
1: 	{
1: 		if (tableName == null)
1: 		{
1: 			return null;
1: 		}
1: 	
1: 		return dd.getTableDescriptor(tableName, 
0: 				getReferencedTableSchemaDescriptor(dd));
1: 	}
1: 
1: 	/**
1: 	  *	This ConsInfo describes columns in a referenced table. What are
1: 	  *	their names?
1: 	  *
1: 	  *	@return	array of referenced column names
1: 	  */
0: 	public String[] getReferencedColumnNames()
0: 	{ return columnNames; }
1: 
1: 	/**
1: 	  *	Get the name of the table that these column live in.
1: 	  *
1: 	  *	@return	referenced table name
1: 	  */
1: 	public String getReferencedTableName()
1: 	{ return tableName; }
1: 
1: 	/**
1: 	  *	Get the referential Action for an Update.
1: 	  *
1: 	  *	@return	referential Action for update
1: 	  */
1: 	public int getReferentialActionUpdateRule()
1: 	{ return raUpdateRule; }
1: 
1: 	
1: 	/**
1: 	  *	Get the referential Action for a Delete.
1: 	  *
1: 	  *	@return	referential Action Delete rule
1: 	  */
1: 	public int getReferentialActionDeleteRule()
1: 	{ return raDeleteRule; }
1: 
1: 
1: 
1: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ConsInfo;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.catalog.UUID;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.ArrayUtil;
0: import org.apache.derby.iapi.services.io.Formatable;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: /**
0:  * This is a simple class used to store the run time information
0:  * about a constraint.
0:  *
0:  * @author jamie
0:  */
0: public class ConstraintInfo implements ConsInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/********************************************************
0: 	**
0: 	**	This class implements Formatable. That means that it
0: 	**	can write itself to and from a formatted stream. If
0: 	**	you add more fields to this class, make sure that you
0: 	**	also write/read them with the writeExternal()/readExternal()
0: 	**	methods.
0: 	**
0: 	**	If, inbetween releases, you add more fields to this class,
0: 	**	then you should bump the version number emitted by the getTypeFormatId()
0: 	**	method.  OR, since this is something that is used
0: 	**	in stored prepared statements, it is ok to change it
0: 	**	if you make sure that stored prepared statements are
0: 	**	invalidated across releases.
0: 	**
0: 	********************************************************/
0: 
0: 	/*
0: 	** See the constructor for the meaning of these fields
0: 	*/
0: 	private String			tableName;
0: 	private SchemaDescriptor	tableSd;
0: 	private UUID				tableSchemaId;
0: 	private String[]			columnNames;
0: 	private int 				raDeleteRule;
0: 	private int					raUpdateRule;
0: 
0: 
0: 	/**
0: 	 * Niladic constructor for Formattable
0: 	 */
0: 	public ConstraintInfo() {}
0: 
0: 	/**
0: 	 * Consructor
0: 	 *
0: 	 */
0: 	public ConstraintInfo(
0: 							String				tableName,
0: 							SchemaDescriptor	tableSd,
0: 							String[]			columnNames,
0: 							int                 raDeleteRule,
0: 							int                 raUpdateRule
0: 						)
0: 	{
0: 		this.tableName = tableName;
0: 		this.tableSd = tableSd;
0: 		this.columnNames = columnNames;
0: 		this.raDeleteRule  = raDeleteRule;
0: 		this.raUpdateRule  = raUpdateRule;
0: 	}
0: 
0: 	//////////////////////////////////////////////
0: 	//
0: 	// FORMATABLE
0: 	//
0: 	//////////////////////////////////////////////
0: 	/**
0: 	 * Write this object out
0: 	 *
0: 	 * @param out write bytes here
0: 	 *
0:  	 * @exception IOException thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		out.writeObject(tableName);
0: 		if (tableSd == null)
0: 		{
0: 			out.writeBoolean(false);
0: 		}
0: 		else
0: 		{
0: 			out.writeBoolean(true);
0: 			out.writeObject(tableSd.getUUID());
0: 		}
0: 
0: 		if (columnNames == null)
0: 		{
0: 			out.writeBoolean(false);
0: 		}
0: 		else
0: 		{
0: 			out.writeBoolean(true);
0: 			ArrayUtil.writeArrayLength(out, columnNames);
0: 			ArrayUtil.writeArrayItems(out, columnNames);
0: 		}
0: 
0: 		//write referential actions for delete and update
0: 		out.writeInt(raDeleteRule);
0: 		out.writeInt(raUpdateRule);
0: 	}
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.
0: 	 *
0: 	 * @param in read this.
0: 	 *
0: 	 * @exception IOException					thrown on error
0: 	 * @exception ClassNotFoundException		thrown on error
0: 	 */
0: 	public void readExternal(ObjectInput in)
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		tableName = (String)in.readObject();
0: 		if (in.readBoolean())
0: 		{
0: 			tableSchemaId = (UUID)in.readObject();
0: 		}
0: 
0: 		if (in.readBoolean())
0: 		{
0: 			columnNames = new String[ArrayUtil.readArrayLength(in)];
0: 			ArrayUtil.readArrayItems(in, columnNames);
0: 		}
0: 
0: 		//read referential actions for delete and update
0: 		raDeleteRule = in.readInt();
0: 		raUpdateRule = in.readInt();
0: 	}
0: 	
0: 	/**
0: 	 * Get the formatID which corresponds to this class.
0: 	 *
0: 	 *	@return	the formatID of this class
0: 	 */
0: 	public	int	getTypeFormatId()	{ return StoredFormatIds.CONSTRAINT_INFO_V01_ID; }
0: 
0: 	//////////////////////////////////////////////////////////////
0: 	//
0: 	// Misc
0: 	//
0: 	//////////////////////////////////////////////////////////////
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			StringBuffer str = new StringBuffer();
0: 			str.append("Referencing ");
0: 			str.append(tableName);
0: 			if (columnNames != null)
0: 			{
0: 				str.append("(");
0: 				for (int i = 0; i < columnNames.length; i++)
0: 				{
0: 					if (i > 0)
0: 						str.append(",");
0: 
0: 					str.append(columnNames[i]);
0: 				}
0: 				str.append(")");
0: 			}	
0: 		
0: 			return str.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public SchemaDescriptor getReferencedTableSchemaDescriptor(DataDictionary dd)
0: 		throws StandardException
0: 	{
0: 		if (tableSd != null)
0: 		{
0: 			return tableSd;
0: 		}
0: 		else
0: 		{
0: 			return dd.getSchemaDescriptor(tableSchemaId, null);
0: 		}
0: 	}
0: 			
0: 	public TableDescriptor getReferencedTableDescriptor(DataDictionary dd)
0: 		throws StandardException
0: 	{
0: 		if (tableName == null)
0: 		{
0: 			return null;
0: 		}
0: 	
0: 		return dd.getTableDescriptor(tableName, 
0: 				getReferencedTableSchemaDescriptor(dd));
0: 	}
0: 
0: 	/**
0: 	  *	This ConsInfo describes columns in a referenced table. What are
0: 	  *	their names?
0: 	  *
0: 	  *	@return	array of referenced column names
0: 	  */
0: 	public String[] getReferencedColumnNames()
0: 	{ return columnNames; }
0: 
0: 	/**
0: 	  *	Get the name of the table that these column live in.
0: 	  *
0: 	  *	@return	referenced table name
0: 	  */
0: 	public String getReferencedTableName()
0: 	{ return tableName; }
0: 
0: 	/**
0: 	  *	Get the referential Action for an Update.
0: 	  *
0: 	  *	@return	referential Action for update
0: 	  */
0: 	public int getReferentialActionUpdateRule()
0: 	{ return raUpdateRule; }
0: 
0: 	
0: 	/**
0: 	  *	Get the referential Action for a Delete.
0: 	  *
0: 	  *	@return	referential Action Delete rule
0: 	  */
0: 	public int getReferentialActionDeleteRule()
0: 	{ return raDeleteRule; }
0: 
0: 
0: 
0: }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================