1:e071963: /*
1:e071963:  
1:e071963:    Derby - Class
1:1bac3f3:    org.apache.derby.impl.store.replication.ReplicationLogger
1:e071963:  
1:e071963:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e071963:    contributor license agreements.  See the NOTICE file distributed with
1:e071963:    this work for additional information regarding copyright ownership.
1:e071963:    The ASF licenses this file to you under the Apache License, Version 2.0
1:e071963:    (the "License"); you may not use this file except in compliance with
1:e071963:    the License.  You may obtain a copy of the License at
1:e071963:  
1:e071963:       http://www.apache.org/licenses/LICENSE-2.0
1:e071963:  
1:e071963:    Unless required by applicable law or agreed to in writing, software
1:e071963:    distributed under the License is distributed on an "AS IS" BASIS,
1:e071963:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e071963:    See the License for the specific language governing permissions and
1:e071963:    limitations under the License.
1:e071963:  
1:e071963:  */
1:e071963: 
1:1bac3f3: package org.apache.derby.impl.store.replication;
1:e071963: 
1:1d0892e: import java.util.Date;
1:e071963: import org.apache.derby.iapi.reference.MessageId;
1:1d0892e: import org.apache.derby.iapi.reference.Property;
1:7132626: import org.apache.derby.iapi.error.ErrorStringBuilder;
1:e071963: import org.apache.derby.iapi.services.monitor.Monitor;
1:1d0892e: import org.apache.derby.iapi.services.property.PropertyUtil;
1:e071963: 
1:696377a: public class ReplicationLogger {
1:e071963: 
1:e071963:     /** Whether or not to print log messages to derby.log. Defaults to
1:e071963:      * true, but can be set to false with derby property
1:1d0892e:      * "derby.replication.verbose=false".
1:e071963:      */
1:1d0892e:     private final boolean verbose;
1:e071963: 
1:1d0892e:     /** The name of the replicated database */
1:1d0892e:     private final String dbname;
1:e071963: 
1:1d0892e:     public ReplicationLogger(String dbname) {
1:1d0892e:         verbose = PropertyUtil.getSystemBoolean(Property.REPLICATION_VERBOSE,
1:1d0892e:                                                 true);
1:1d0892e:         this.dbname = dbname;
1:1d0892e:     }
1:1d0892e: 
1:e071963:     /**
1:e071963:      * Print error message and the stack trace of the throwable to the
1:1d0892e:      * log (usually derby.log) provided that verbose
1:1d0892e:      * is true. If verbose is false, nothing is
1:e071963:      * logged.
1:e071963:      *
1:e071963:      * @param msgId The error message id
1:e071963:      * @param t Error trace starts from this error
1:e071963:      */
1:1d0892e:     public void logError(String msgId, Throwable t) {
1:e071963: 
1:1d0892e:         if (verbose) {
1:e071963: 
1:1d0892e:             Monitor.logTextMessage(MessageId.REPLICATION_ERROR_BEGIN,
1:1d0892e:                                    new Date());
1:e071963: 
1:e071963:             if (msgId != null) {
1:e071963:                 Monitor.logTextMessage(msgId, dbname);
1:e071963:             }
1:e071963: 
1:e071963:             if (t != null) {
1:e071963:                 ErrorStringBuilder esb =
1:e071963:                     new ErrorStringBuilder(Monitor.getStream().getHeader());
1:e071963:                 esb.stackTrace(t);
1:e071963:                 Monitor.logMessage(esb.get().toString());
1:e071963:                 esb.reset();
1:e071963:             }
1:e071963:             Monitor.logTextMessage(MessageId.REPLICATION_ERROR_END);
1:e071963:         }
1:e071963:     }
1:e071963: 
1:1d0892e:     /**
1:1d0892e:      * Print a text to the log (usually derby.log), provided that
1:1d0892e:      * verbose is true.
1:1d0892e:      * @param text The text that will be logged
1:1d0892e:      * @param writeHeader if true, encapsulates message in "begin
1:1d0892e:      * error message" and "end error message" lines. If false,
1:1d0892e:      * timestamps the text and writes it to the log without the header
1:1d0892e:      * and footer.
1:1d0892e:      */
1:1d0892e:     public void logText(String text, boolean writeHeader) {
1:1d0892e: 
1:1d0892e:         if (verbose) {
1:1d0892e:             if (writeHeader) {
1:1d0892e:                 Monitor.logTextMessage(MessageId.REPLICATION_ERROR_BEGIN,
1:1d0892e:                                        new Date());
1:1d0892e:                 Monitor.logMessage(text);
1:1d0892e:                 Monitor.logTextMessage(MessageId.REPLICATION_ERROR_END);
1:1d0892e:             } else {
1:1d0892e:                 Monitor.
1:1d0892e:                     logTextMessage(MessageId.REPLICATION_ONELINE_MSG_HEADER,
1:1d0892e:                                    new Date(), text);
1:e071963:             }
1:1d0892e:         }
1:1d0892e:     }
1:1d0892e: 
1:1d0892e: }
============================================================================
author:Oystein Grovlen
-------------------------------------------------------------------------------
commit:1bac3f3
/////////////////////////////////////////////////////////////////////////
1:    org.apache.derby.impl.store.replication.ReplicationLogger
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.store.replication;
commit:696377a
/////////////////////////////////////////////////////////////////////////
1: public class ReplicationLogger {
/////////////////////////////////////////////////////////////////////////
0:     public static void logError(String msgId, Throwable t, String dbname) {
commit:e071963
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class
0:    org.apache.derby.impl.services.replication.ReplicationLogger
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
0: package org.apache.derby.impl.services.replication;
1: 
1: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.services.context.ErrorStringBuilder;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: public abstract class ReplicationLogger {
1: 
1:     /** Whether or not to print log messages to derby.log. Defaults to
1:      * true, but can be set to false with derby property
0:      * "derby.replication.logerrormessages=true"
1:      */
0:     // TODO: make this configurable through the aforementioned
0:     // property
0:     private static final boolean LOG_REPLICATION_MESSAGES = true;
1: 
1: 
1:     /**
1:      * Print error message and the stack trace of the throwable to the
0:      * log (usually derby.log) provided that LOG_REPLICATION_MESSAGES
0:      * is true. If LOG_REPLICATION_MESSAGES is false, nothing is
1:      * logged.
1:      *
1:      * @param msgId The error message id
1:      * @param t Error trace starts from this error
0:      * @param dbname The name of the replicated database
1:      */
0:     protected void logError(String msgId, Throwable t, String dbname) {
1: 
0:         if (LOG_REPLICATION_MESSAGES) {
1: 
0:             Monitor.logTextMessage(MessageId.REPLICATION_ERROR_BEGIN);
1: 
1:             if (msgId != null) {
1:                 Monitor.logTextMessage(msgId, dbname);
1:             }
1: 
1:             if (t != null) {
1:                 ErrorStringBuilder esb =
1:                     new ErrorStringBuilder(Monitor.getStream().getHeader());
1:                 esb.stackTrace(t);
1:                 Monitor.logMessage(esb.get().toString());
1:                 esb.reset();
1:             }
1:             Monitor.logTextMessage(MessageId.REPLICATION_ERROR_END);
1:         }
1:     }
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1d0892e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Date;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1:      * "derby.replication.verbose=false".
1:     private final boolean verbose;
1:     /** The name of the replicated database */
1:     private final String dbname;
1: 
1:     public ReplicationLogger(String dbname) {
1:         verbose = PropertyUtil.getSystemBoolean(Property.REPLICATION_VERBOSE,
1:                                                 true);
1:         this.dbname = dbname;
1:     }
1:      * log (usually derby.log) provided that verbose
1:      * is true. If verbose is false, nothing is
1:     public void logError(String msgId, Throwable t) {
1:         if (verbose) {
1:             Monitor.logTextMessage(MessageId.REPLICATION_ERROR_BEGIN,
1:                                    new Date());
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Print a text to the log (usually derby.log), provided that
1:      * verbose is true.
1:      * @param text The text that will be logged
1:      * @param writeHeader if true, encapsulates message in "begin
1:      * error message" and "end error message" lines. If false,
1:      * timestamps the text and writes it to the log without the header
1:      * and footer.
1:      */
1:     public void logText(String text, boolean writeHeader) {
1: 
1:         if (verbose) {
1:             if (writeHeader) {
1:                 Monitor.logTextMessage(MessageId.REPLICATION_ERROR_BEGIN,
1:                                        new Date());
1:                 Monitor.logMessage(text);
1:                 Monitor.logTextMessage(MessageId.REPLICATION_ERROR_END);
1:             } else {
1:                 Monitor.
1:                     logTextMessage(MessageId.REPLICATION_ONELINE_MSG_HEADER,
1:                                    new Date(), text);
1:             }
1:         }
1:     }
1: 
commit:5d12015
/////////////////////////////////////////////////////////////////////////
0: /*
0:  
0:    Derby - Class
0:    org.apache.derby.impl.services.replication.ReplicationLogger
0:  
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to you under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0:  
0:       http://www.apache.org/licenses/LICENSE-2.0
0:  
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0:  
0:  */
0: 
0: package org.apache.derby.impl.services.replication;
0: 
0: import org.apache.derby.iapi.reference.MessageId;
0: import org.apache.derby.iapi.services.context.ErrorStringBuilder;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: public class ReplicationLogger {
0: 
0:     /** Whether or not to print log messages to derby.log. Defaults to
0:      * true, but can be set to false with derby property
0:      * "derby.replication.logerrormessages=true"
0:      */
0:     // TODO: make this configurable through the aforementioned
0:     // property
0:     private static final boolean LOG_REPLICATION_MESSAGES = true;
0: 
0: 
0:     /**
0:      * Print error message and the stack trace of the throwable to the
0:      * log (usually derby.log) provided that LOG_REPLICATION_MESSAGES
0:      * is true. If LOG_REPLICATION_MESSAGES is false, nothing is
0:      * logged.
0:      *
0:      * @param msgId The error message id
0:      * @param t Error trace starts from this error
0:      * @param dbname The name of the replicated database
0:      */
0:     public static void logError(String msgId, Throwable t, String dbname) {
0: 
0:         if (LOG_REPLICATION_MESSAGES) {
0: 
0:             Monitor.logTextMessage(MessageId.REPLICATION_ERROR_BEGIN);
0: 
0:             if (msgId != null) {
0:                 Monitor.logTextMessage(msgId, dbname);
0:             }
0: 
0:             if (t != null) {
0:                 ErrorStringBuilder esb =
0:                     new ErrorStringBuilder(Monitor.getStream().getHeader());
0:                 esb.stackTrace(t);
0:                 Monitor.logMessage(esb.get().toString());
0:                 esb.reset();
0:             }
0:             Monitor.logTextMessage(MessageId.REPLICATION_ERROR_END);
0:         }
0:     }
0: 
0: }
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7132626
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.ErrorStringBuilder;
============================================================================