1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.DropStatisticsConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.depend.DependencyManager;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: 
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * this class drops all statistics for a particular table or index.
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: class DropStatisticsConstantAction extends DDLConstantAction
1:eac0369: {
1:eac0369: 	private final String objectName;
1:eac0369: 	private final boolean forTable;
1:eac0369: 	private final SchemaDescriptor sd;
1:eac0369: 	private final String fullTableName;
1:eac0369: 
1:eac0369: 	DropStatisticsConstantAction(SchemaDescriptor sd,
1:eac0369: 										String fullTableName,
1:eac0369: 										String objectName,
1:eac0369: 										boolean forTable)
1:eac0369: 	{
1:eac0369: 		this.objectName = objectName;
1:eac0369: 		this.sd = sd;
1:eac0369: 		this.forTable = forTable;
1:eac0369: 		this.fullTableName = fullTableName;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public void executeConstantAction(Activation activation)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		TableDescriptor td;
1:eac0369: 		ConglomerateDescriptor cd = null;
1:eac0369: 
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 		DataDictionary dd = lcc.getDataDictionary();
1:eac0369: 		DependencyManager dm = dd.getDependencyManager();
1:eac0369: 		TransactionController tc = lcc.getTransactionExecute();
1:eac0369: 
1:eac0369: 
1:eac0369: 		dd.startWriting(lcc);
1:eac0369: 
1:eac0369: 		if (forTable)
1:eac0369: 		{
1:0978789: 			td = dd.getTableDescriptor(objectName, sd, tc);
1:eac0369: 		}
1:eac0369: 		
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			cd = dd.getConglomerateDescriptor(objectName,
1:eac0369: 											 sd, false);
1:eac0369: 			td = dd.getTableDescriptor(cd.getTableID());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* invalidate all SPS's on the table-- bad plan on SPS, so user drops
1:eac0369: 		 * statistics and would want SPS's invalidated so that recompile would
1:eac0369: 		 * give good plans; thats the theory anyways....
1:eac0369: 		 */
1:eac0369: 		dm.invalidateFor(td, DependencyManager.DROP_STATISTICS, lcc);
1:eac0369: 
1:eac0369: 		dd.dropStatisticsDescriptors(td.getUUID(), ((cd != null) ? cd.getUUID() :
1:eac0369: 									 null), tc);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return "DROP STATISTICS FOR " + ((forTable) ? "table " : "index ") +
1:eac0369: 			fullTableName;
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:0978789
/////////////////////////////////////////////////////////////////////////
1: 			td = dd.getTableDescriptor(objectName, sd, tc);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.DropStatisticsConstantAction
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.depend.DependencyManager;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: 
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1:  * this class drops all statistics for a particular table or index.
1:  *
0:  * @author manish.
1:  */
1: 
1: class DropStatisticsConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	private final String objectName;
1: 	private final boolean forTable;
1: 	private final SchemaDescriptor sd;
1: 	private final String fullTableName;
1: 
1: 	DropStatisticsConstantAction(SchemaDescriptor sd,
1: 										String fullTableName,
1: 										String objectName,
1: 										boolean forTable)
1: 	{
1: 		this.objectName = objectName;
1: 		this.sd = sd;
1: 		this.forTable = forTable;
1: 		this.fullTableName = fullTableName;
1: 	}
1: 	
1: 	public void executeConstantAction(Activation activation)
1: 		throws StandardException
1: 	{
1: 		TableDescriptor td;
1: 		ConglomerateDescriptor cd = null;
1: 
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 		DataDictionary dd = lcc.getDataDictionary();
1: 		DependencyManager dm = dd.getDependencyManager();
1: 		TransactionController tc = lcc.getTransactionExecute();
1: 
1: 
1: 		dd.startWriting(lcc);
1: 
1: 		if (forTable)
1: 		{
0: 			td = dd.getTableDescriptor(objectName, sd);
1: 		}
1: 		
1: 		else
1: 		{
1: 			cd = dd.getConglomerateDescriptor(objectName,
1: 											 sd, false);
1: 			td = dd.getTableDescriptor(cd.getTableID());
1: 		}
1: 
1: 		/* invalidate all SPS's on the table-- bad plan on SPS, so user drops
1: 		 * statistics and would want SPS's invalidated so that recompile would
1: 		 * give good plans; thats the theory anyways....
1: 		 */
1: 		dm.invalidateFor(td, DependencyManager.DROP_STATISTICS, lcc);
1: 
1: 		dd.dropStatisticsDescriptors(td.getUUID(), ((cd != null) ? cd.getUUID() :
1: 									 null), tc);
1: 	}
1: 	
1: 	public String toString()
1: 	{
1: 		return "DROP STATISTICS FOR " + ((forTable) ? "table " : "index ") +
1: 			fullTableName;
1: 	}
1: }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.depend.DependencyManager;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: 
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0:  * this class drops all statistics for a particular table or index.
0:  *
0:  * @author manish.
0:  */
0: 
0: class DropStatisticsConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	private final String objectName;
0: 	private final boolean forTable;
0: 	private final SchemaDescriptor sd;
0: 	private final String fullTableName;
0: 
0: 	DropStatisticsConstantAction(SchemaDescriptor sd,
0: 										String fullTableName,
0: 										String objectName,
0: 										boolean forTable)
0: 	{
0: 		this.objectName = objectName;
0: 		this.sd = sd;
0: 		this.forTable = forTable;
0: 		this.fullTableName = fullTableName;
0: 	}
0: 	
0: 	public void executeConstantAction(Activation activation)
0: 		throws StandardException
0: 	{
0: 		TableDescriptor td;
0: 		ConglomerateDescriptor cd = null;
0: 
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 		DataDictionary dd = lcc.getDataDictionary();
0: 		DependencyManager dm = dd.getDependencyManager();
0: 		TransactionController tc = lcc.getTransactionExecute();
0: 
0: 
0: 		dd.startWriting(lcc);
0: 
0: 		if (forTable)
0: 		{
0: 			td = dd.getTableDescriptor(objectName, sd);
0: 		}
0: 		
0: 		else
0: 		{
0: 			cd = dd.getConglomerateDescriptor(objectName,
0: 											 sd, false);
0: 			td = dd.getTableDescriptor(cd.getTableID());
0: 		}
0: 
0: 		/* invalidate all SPS's on the table-- bad plan on SPS, so user drops
0: 		 * statistics and would want SPS's invalidated so that recompile would
0: 		 * give good plans; thats the theory anyways....
0: 		 */
0: 		dm.invalidateFor(td, DependencyManager.DROP_STATISTICS, lcc);
0: 
0: 		dd.dropStatisticsDescriptors(td.getUUID(), ((cd != null) ? cd.getUUID() :
0: 									 null), tc);
0: 	}
0: 	
0: 	public String toString()
0: 	{
0: 		return "DROP STATISTICS FOR " + ((forTable) ? "table " : "index ") +
0: 			fullTableName;
0: 	}
0: }
0: 
============================================================================