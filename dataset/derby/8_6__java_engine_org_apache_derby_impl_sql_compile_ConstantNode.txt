1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.ConstantNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
16:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.compiler.LocalField;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:ef158f2: import org.apache.derby.iapi.types.TypeId;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * ConstantNode holds literal constants as well as nulls.
1:eac0369:  * <p>
1:eac0369:  * A NULL from the parser may not yet know its type; that
1:eac0369:  * must be set during binding, as it is for parameters.
1:eac0369:  * <p>
1:eac0369:  * the DataValueDescriptor methods want to throw exceptions
1:eac0369:  * when they are of the wrong type, but to do that they
1:eac0369:  * must check typeId when the value is null, rather than
1:eac0369:  * the instanceof check they do for returning a valid value.
1:eac0369:  * <p>
1:eac0369:  * For code generation, we generate a static field.  Then we set the 
1:eac0369:  * field be the proper constant expression (something like <code>
1:eac0369:  * getDatavalueFactory().getCharDataValue("hello", ...)) </code>)
1:eac0369:  * in the constructor of the generated method.  Ideally
1:eac0369:  * we would have just 
1:eac0369:  */
1:eac0369: abstract class ConstantNode extends ValueNode
3:eac0369: {
1:1a48949: 	DataValueDescriptor	value;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** In case generateExpression() is called twice (something
1:eac0369: 	** that probably wont happen but might), we will cache
1:eac0369: 	** our generated expression and just return a reference
1:eac0369: 	** to the field that holds our value (instead of having
1:eac0369: 	** two fields holding the same constant).
1:eac0369: 	*/
1:eac0369: 
1:3bb140c:     ConstantNode(
1:3bb140c:             TypeId typeId,
1:3bb140c:             boolean nullable,
1:3bb140c:             int maximumWidth,
1:3bb140c:             ContextManager cm) throws StandardException {
1:3bb140c:         super(cm);
1:3bb140c:         setType(typeId, nullable, maximumWidth);
1:3bb140c:     }
1:eac0369: 
1:3bb140c:     ConstantNode(ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the value in this ConstantNode.
1:eac0369: 	 */
1:eac0369: 	void setValue(DataValueDescriptor value)
1:eac0369: 	{
1:eac0369: 		this.value = value;
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  * Get the value in this ConstantNode
1:eac0369: 	  */
1:3bb140c:     DataValueDescriptor getValue()
1:eac0369: 	{
1:eac0369: 		return	value;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
5:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "value: " + value + "\n" +
1:eac0369: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this expression tree is cloneable.
1:eac0369: 	 *
1:eac0369: 	 * @return boolean	Whether or not this expression tree is cloneable.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean isCloneable()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return a clone of this node.
1:eac0369: 	 *
1:eac0369: 	 * @return ValueNode	A clone of this node.
1:eac0369: 	 *
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode getClone()
1:eac0369: 	{
1:eac0369: 		/* All constants can simply be reused */
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this expression.  This means binding the sub-expressions,
1:eac0369: 	 * as well as figuring out what the return type is for this expression.
1:eac0369: 	 * In this case, there are no sub-expressions, and the return type
1:eac0369: 	 * is already known, so this is just a stub.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList		The FROM list for the query this
1:eac0369: 	 *				expression is in, for binding columns.
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:3841b98: 	 * @exception StandardException		Thrown on error. Although this class
1:3841b98: 	 * doesn't throw this exception, it's subclasses do and hence this method
1:3841b98: 	 * signature here needs to have throws StandardException 
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode bindExpression(FromList fromList,
1:3bb140c:                              SubqueryList subqueryList,
1:3bb140c:                              List<AggregateNode> aggregates)
1:3bb140c:             throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** This has to be here for binding to work, but it doesn't
1:eac0369: 		** have to do anything, because the datatypes of constant nodes
1:eac0369: 		** are pre-generated by the parser.
1:eac0369: 		*/
1:eac0369: 		return this;
1:eac0369: 	}
1:ef158f2: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this expression tree represents a constant expression.
1:eac0369: 	 *
1:eac0369: 	 * @return	Whether or not this expression tree represents a constant expression.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean isConstantExpression()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see ValueNode#constantExpression */
1:3bb140c:     @Override
1:3bb140c:     boolean constantExpression(PredicateList whereClause)
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * For a ConstantNode, we generate the equivalent literal value.
1:eac0369: 	 * A null is generated as a Null value cast to the type of
1:eac0369: 	 * the constant node.
1:eac0369: 	 * The subtypes of ConstantNode generate literal expressions
1:eac0369: 	 * for non-null values.
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:8fe3166:     void generateExpression
1:eac0369: 	(
1:8fe3166:         ExpressionClassBuilder acb, MethodBuilder mb) throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Are we generating a SQL null value? */
1:eac0369: 	    if (isNull())
1:eac0369: 	    {
1:ba7683c: 			acb.generateNull(mb, getTypeCompiler(), 
1:ba7683c: 					getTypeServices().getCollationType());
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			generateConstant(acb, mb);	// ask sub type to give a constant,
1:eac0369: 										// usually a literal like 'hello'
1:eac0369: 
1:ba7683c: 			acb.generateDataValue(mb, getTypeCompiler(), 
1:ba7683c: 					getTypeServices().getCollationType(), (LocalField) null);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * This generates the proper constant.  It is implemented
1:eac0369: 	 * by every specific constant node (e.g. IntConstantNode).
1:eac0369: 	 *
1:eac0369: 	 * @param acb	The ExpressionClassBuilder for the class being built
1:eac0369: 	 * @param mb	The method the code to place the code
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	abstract void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return whether or not this node represents a typed null constant.
1:eac0369: 	 *
1:eac0369: 	 */
1:1a48949: 	boolean isNull()
1:eac0369: 	{
1:eac0369: 		return (value == null || value.isNull());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the variant type for the underlying expression.
1:eac0369: 	 * The variant type can be:
1:eac0369: 	 *		VARIANT				- variant within a scan
1:eac0369: 	 *							  (method calls and non-static field access)
1:eac0369: 	 *		SCAN_INVARIANT		- invariant within a scan
1:eac0369: 	 *							  (column references from outer tables)
1:eac0369: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1:eac0369: 	 *		VARIANT				- immutable
1:eac0369: 	 *
1:eac0369: 	 * @return	The variant type for the underlying expression.
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	protected int getOrderableVariantType()
1:eac0369: 	{
1:eac0369: 		// Constants are constant for the life of the query
1:eac0369: 		return Qualifier.CONSTANT;
1:eac0369: 	}
1:01217c2:         
1:2706d1f:     boolean isEquivalent(ValueNode o) throws StandardException
1:01217c2: 	{
1:2706d1f:         if (isSameNodeKind(o)) {
1:01217c2: 			ConstantNode other = (ConstantNode)o;
1:1d4b49f: 			
1:1d4b49f: 			// value can be null which represents a SQL NULL value.
1:1d4b49f: 			return ( (other.getValue() == null && getValue() == null) || 
1:1d4b49f: 					 (other.getValue() != null && 
1:1d4b49f: 							 other.getValue().compare(getValue()) == 0) );
1:01217c2: 		}
1:2706d1f: 
1:01217c2: 		return false;
1:01217c2: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:1d4b49f
/////////////////////////////////////////////////////////////////////////
1: 			
1: 			// value can be null which represents a SQL NULL value.
1: 			return ( (other.getValue() == null && getValue() == null) || 
1: 					 (other.getValue() != null && 
1: 							 other.getValue().compare(getValue()) == 0) );
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
1:     boolean isEquivalent(ValueNode o) throws StandardException
1:         if (isSameNodeKind(o)) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.compiler.LocalField;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.store.access.Qualifier;
/////////////////////////////////////////////////////////////////////////
1:     ConstantNode(
1:             TypeId typeId,
1:             boolean nullable,
1:             int maximumWidth,
1:             ContextManager cm) throws StandardException {
1:         super(cm);
1:         setType(typeId, nullable, maximumWidth);
1:     }
1:     ConstantNode(ContextManager cm) {
1:         super(cm);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     DataValueDescriptor getValue()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean isCloneable()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode getClone()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode bindExpression(FromList fromList,
1:                              SubqueryList subqueryList,
1:                              List<AggregateNode> aggregates)
1:             throws StandardException
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean isConstantExpression()
1:     @Override
1:     boolean constantExpression(PredicateList whereClause)
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8fe3166
/////////////////////////////////////////////////////////////////////////
1:     void generateExpression
1:         ExpressionClassBuilder acb, MethodBuilder mb) throws StandardException
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
/////////////////////////////////////////////////////////////////////////
0:     ValueNode bindExpression(
0:             FromList fromList, SubqueryList subqueryList, List aggregates)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			List aggregateVector)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ef158f2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
0:         setType((TypeId) typeId,
0:                 ((Boolean) nullable).booleanValue(),
0:                 ((Integer) maximumWidth).intValue());
1: 
commit:1a48949
/////////////////////////////////////////////////////////////////////////
1: 	DataValueDescriptor	value;
/////////////////////////////////////////////////////////////////////////
1: 	boolean isNull()
commit:01217c2
/////////////////////////////////////////////////////////////////////////
1:         
0: 	protected boolean isEquivalent(ValueNode o) throws StandardException
1: 	{
0: 		if (isSameNodeType(o)) {
1: 			ConstantNode other = (ConstantNode)o;
0: 			return other.getValue().compare(getValue()) == 0;
1: 		}
1: 		return false;
1: 	}
commit:19138a9
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.ConstantNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:bff3c2e
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
0: import java.lang.reflect.Modifier;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.store.access.Qualifier;
1: 
0: import org.apache.derby.iapi.util.ReuseFactory;
1: 
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: import java.math.BigDecimal;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * ConstantNode holds literal constants as well as nulls.
1:  * <p>
1:  * A NULL from the parser may not yet know its type; that
1:  * must be set during binding, as it is for parameters.
1:  * <p>
1:  * the DataValueDescriptor methods want to throw exceptions
1:  * when they are of the wrong type, but to do that they
1:  * must check typeId when the value is null, rather than
1:  * the instanceof check they do for returning a valid value.
1:  * <p>
1:  * For code generation, we generate a static field.  Then we set the 
1:  * field be the proper constant expression (something like <code>
1:  * getDatavalueFactory().getCharDataValue("hello", ...)) </code>)
1:  * in the constructor of the generated method.  Ideally
1:  * we would have just 
1:  */
1: abstract class ConstantNode extends ValueNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected	DataValueDescriptor	value;
1: 
1: 	/*
1: 	** In case generateExpression() is called twice (something
1: 	** that probably wont happen but might), we will cache
1: 	** our generated expression and just return a reference
1: 	** to the field that holds our value (instead of having
1: 	** two fields holding the same constant).
1: 	*/
1: 
1: 	/**
0: 	 * Initializer for non-numeric types
1: 	 *
0: 	 * @param typeCompilationFactory	The factory to get the
0: 	 *									DataTypeServicesFactory from
0: 	 * @param typeId	The Type ID of the datatype
0: 	 * @param nullable	True means the constant is nullable
0: 	 * @param maximumWidth	The maximum number of bytes in the data value
1: 	 *
0: 	 * @exception StandardException
1: 	 */
0: 	public void init(
0: 			Object typeId,
0: 			Object nullable,
0: 			Object maximumWidth)
0: 		throws StandardException
1: 	{
0: 		/* Fill in the type information in the parent ValueNode */
0: 		init(
0: 							typeId,
0: 							ReuseFactory.getInteger(0),
0: 							ReuseFactory.getInteger(0),
0: 							nullable,
0: 							maximumWidth);
1: 	}
1: 
1: 	/**
0: 	 * Constructor for untyped nodes, which contain little information
1: 	 *
1: 	 */
0: 	ConstantNode()
1: 	{
0: 		super();
1: 	}
1: 
1: 	/**
1: 	 * Set the value in this ConstantNode.
1: 	 */
1: 	void setValue(DataValueDescriptor value)
1: 	{
1: 		this.value = value;
1: 	}
1: 
1: 	/**
1: 	  * Get the value in this ConstantNode
1: 	  */
0: 	public DataValueDescriptor	getValue()
1: 	{
1: 		return	value;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "value: " + value + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not this expression tree is cloneable.
1: 	 *
1: 	 * @return boolean	Whether or not this expression tree is cloneable.
1: 	 */
0: 	public boolean isCloneable()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Return a clone of this node.
1: 	 *
1: 	 * @return ValueNode	A clone of this node.
1: 	 *
1: 	 */
0: 	public ValueNode getClone()
1: 	{
1: 		/* All constants can simply be reused */
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Bind this expression.  This means binding the sub-expressions,
1: 	 * as well as figuring out what the return type is for this expression.
1: 	 * In this case, there are no sub-expressions, and the return type
1: 	 * is already known, so this is just a stub.
1: 	 *
1: 	 * @param fromList		The FROM list for the query this
1: 	 *				expression is in, for binding columns.
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 */
0: 	public ValueNode bindExpression(
0: 			FromList fromList, SubqueryList subqueryList,
0: 			Vector	aggregateVector)
1: 	{
1: 		/*
1: 		** This has to be here for binding to work, but it doesn't
1: 		** have to do anything, because the datatypes of constant nodes
1: 		** are pre-generated by the parser.
1: 		*/
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return whether or not this expression tree represents a constant expression.
1: 	 *
1: 	 * @return	Whether or not this expression tree represents a constant expression.
1: 	 */
0: 	public boolean isConstantExpression()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/** @see ValueNode#constantExpression */
0: 	public boolean constantExpression(PredicateList whereClause)
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * For a ConstantNode, we generate the equivalent literal value.
1: 	 * A null is generated as a Null value cast to the type of
1: 	 * the constant node.
1: 	 * The subtypes of ConstantNode generate literal expressions
1: 	 * for non-null values.
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
0: 	 * @return		The compiled Expression, if the constant is a null value,
0: 	 *				null if the constant is not a null value (confusing, huh?)
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateExpression
1: 	(
0: 		ExpressionClassBuilder	acb, 
0: 		MethodBuilder 		mb
0: 	) throws StandardException
1: 	{
1: 		/* Are we generating a SQL null value? */
1: 	    if (isNull())
1: 	    {
0: 			acb.generateNull(mb, getTypeCompiler());
1: 		}
1: 		else
1: 		{
1: 			generateConstant(acb, mb);	// ask sub type to give a constant,
1: 										// usually a literal like 'hello'
1: 
0: 			acb.generateDataValue(mb, getTypeCompiler(), (LocalField) null);
1: 
0: 			setConstantWidth(acb, mb);
1: 		}
1: 	}
1: 
0: 	// temp
0: 	void setConstantWidth(ExpressionClassBuilder acb, MethodBuilder mb) {
1: 	}
1: 
1: 
1: 	/**
1: 	 * This generates the proper constant.  It is implemented
1: 	 * by every specific constant node (e.g. IntConstantNode).
1: 	 *
1: 	 * @param acb	The ExpressionClassBuilder for the class being built
1: 	 * @param mb	The method the code to place the code
1: 	 *
0: 	 * @return		The compiled Expression, 
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	abstract void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * Return whether or not this node represents a typed null constant.
1: 	 *
1: 	 */
0: 	public boolean isNull()
1: 	{
1: 		return (value == null || value.isNull());
1: 	}
1: 
1: 	/**
1: 	 * Return the variant type for the underlying expression.
1: 	 * The variant type can be:
1: 	 *		VARIANT				- variant within a scan
1: 	 *							  (method calls and non-static field access)
1: 	 *		SCAN_INVARIANT		- invariant within a scan
1: 	 *							  (column references from outer tables)
1: 	 *		QUERY_INVARIANT		- invariant within the life of a query
1: 	 *		VARIANT				- immutable
1: 	 *
1: 	 * @return	The variant type for the underlying expression.
1: 	 */
1: 	protected int getOrderableVariantType()
1: 	{
1: 		// Constants are constant for the life of the query
1: 		return Qualifier.CONSTANT;
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:3841b98
/////////////////////////////////////////////////////////////////////////
0: 	 *
1: 	 * @exception StandardException		Thrown on error. Although this class
1: 	 * doesn't throw this exception, it's subclasses do and hence this method
1: 	 * signature here needs to have throws StandardException 
0: 	throws StandardException
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
/////////////////////////////////////////////////////////////////////////
1: 			acb.generateNull(mb, getTypeCompiler(), 
1: 					getTypeServices().getCollationType());
1: 			acb.generateDataValue(mb, getTypeCompiler(), 
1: 					getTypeServices().getCollationType(), (LocalField) null);
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: import org.apache.derby.iapi.services.compiler.LocalField;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import java.lang.reflect.Modifier;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.access.Qualifier;
0: 
0: import org.apache.derby.iapi.util.ReuseFactory;
0: 
0: import java.sql.Date;
0: import java.sql.Time;
0: import java.sql.Timestamp;
0: import java.math.BigDecimal;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * ConstantNode holds literal constants as well as nulls.
0:  * <p>
0:  * A NULL from the parser may not yet know its type; that
0:  * must be set during binding, as it is for parameters.
0:  * <p>
0:  * the DataValueDescriptor methods want to throw exceptions
0:  * when they are of the wrong type, but to do that they
0:  * must check typeId when the value is null, rather than
0:  * the instanceof check they do for returning a valid value.
0:  * <p>
0:  * For code generation, we generate a static field.  Then we set the 
0:  * field be the proper constant expression (something like <code>
0:  * getDatavalueFactory().getCharDataValue("hello", ...)) </code>)
0:  * in the constructor of the generated method.  Ideally
0:  * we would have just 
0:  */
0: abstract class ConstantNode extends ValueNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	protected	DataValueDescriptor	value;
0: 
0: 	/*
0: 	** In case generateExpression() is called twice (something
0: 	** that probably wont happen but might), we will cache
0: 	** our generated expression and just return a reference
0: 	** to the field that holds our value (instead of having
0: 	** two fields holding the same constant).
0: 	*/
0: 
0: 	/**
0: 	 * Initializer for non-numeric types
0: 	 *
0: 	 * @param typeCompilationFactory	The factory to get the
0: 	 *									DataTypeServicesFactory from
0: 	 * @param typeId	The Type ID of the datatype
0: 	 * @param nullable	True means the constant is nullable
0: 	 * @param maximumWidth	The maximum number of bytes in the data value
0: 	 *
0: 	 * @exception StandardException
0: 	 */
0: 	public void init(
0: 			Object typeId,
0: 			Object nullable,
0: 			Object maximumWidth)
0: 		throws StandardException
0: 	{
0: 		/* Fill in the type information in the parent ValueNode */
0: 		init(
0: 							typeId,
0: 							ReuseFactory.getInteger(0),
0: 							ReuseFactory.getInteger(0),
0: 							nullable,
0: 							maximumWidth);
0: 	}
0: 
0: 	/**
0: 	 * Constructor for untyped nodes, which contain little information
0: 	 *
0: 	 */
0: 	ConstantNode()
0: 	{
0: 		super();
0: 	}
0: 
0: 	/**
0: 	 * Set the value in this ConstantNode.
0: 	 */
0: 	void setValue(DataValueDescriptor value)
0: 	{
0: 		this.value = value;
0: 	}
0: 
0: 	/**
0: 	  * Get the value in this ConstantNode
0: 	  */
0: 	public DataValueDescriptor	getValue()
0: 	{
0: 		return	value;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "value: " + value + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not this expression tree is cloneable.
0: 	 *
0: 	 * @return boolean	Whether or not this expression tree is cloneable.
0: 	 */
0: 	public boolean isCloneable()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * Return a clone of this node.
0: 	 *
0: 	 * @return ValueNode	A clone of this node.
0: 	 *
0: 	 */
0: 	public ValueNode getClone()
0: 	{
0: 		/* All constants can simply be reused */
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Bind this expression.  This means binding the sub-expressions,
0: 	 * as well as figuring out what the return type is for this expression.
0: 	 * In this case, there are no sub-expressions, and the return type
0: 	 * is already known, so this is just a stub.
0: 	 *
0: 	 * @param fromList		The FROM list for the query this
0: 	 *				expression is in, for binding columns.
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 */
0: 	public ValueNode bindExpression(
0: 			FromList fromList, SubqueryList subqueryList,
0: 			Vector	aggregateVector)
0: 	{
0: 		/*
0: 		** This has to be here for binding to work, but it doesn't
0: 		** have to do anything, because the datatypes of constant nodes
0: 		** are pre-generated by the parser.
0: 		*/
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return whether or not this expression tree represents a constant expression.
0: 	 *
0: 	 * @return	Whether or not this expression tree represents a constant expression.
0: 	 */
0: 	public boolean isConstantExpression()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/** @see ValueNode#constantExpression */
0: 	public boolean constantExpression(PredicateList whereClause)
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * For a ConstantNode, we generate the equivalent literal value.
0: 	 * A null is generated as a Null value cast to the type of
0: 	 * the constant node.
0: 	 * The subtypes of ConstantNode generate literal expressions
0: 	 * for non-null values.
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 * @return		The compiled Expression, if the constant is a null value,
0: 	 *				null if the constant is not a null value (confusing, huh?)
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generateExpression
0: 	(
0: 		ExpressionClassBuilder	acb, 
0: 		MethodBuilder 		mb
0: 	) throws StandardException
0: 	{
0: 		/* Are we generating a SQL null value? */
0: 	    if (isNull())
0: 	    {
0: 			acb.generateNull(mb, getTypeCompiler());
0: 		}
0: 		else
0: 		{
0: 			generateConstant(acb, mb);	// ask sub type to give a constant,
0: 										// usually a literal like 'hello'
0: 
0: 			acb.generateDataValue(mb, getTypeCompiler(), (LocalField) null);
0: 
0: 			setConstantWidth(acb, mb);
0: 		}
0: 	}
0: 
0: 	// temp
0: 	void setConstantWidth(ExpressionClassBuilder acb, MethodBuilder mb) {
0: 	}
0: 
0: 
0: 	/**
0: 	 * This generates the proper constant.  It is implemented
0: 	 * by every specific constant node (e.g. IntConstantNode).
0: 	 *
0: 	 * @param acb	The ExpressionClassBuilder for the class being built
0: 	 * @param mb	The method the code to place the code
0: 	 *
0: 	 * @return		The compiled Expression, 
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	abstract void generateConstant(ExpressionClassBuilder acb, MethodBuilder mb)
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * Return whether or not this node represents a typed null constant.
0: 	 *
0: 	 */
0: 	public boolean isNull()
0: 	{
0: 		return (value == null || value.isNull());
0: 	}
0: 
0: 	/**
0: 	 * Return the variant type for the underlying expression.
0: 	 * The variant type can be:
0: 	 *		VARIANT				- variant within a scan
0: 	 *							  (method calls and non-static field access)
0: 	 *		SCAN_INVARIANT		- invariant within a scan
0: 	 *							  (column references from outer tables)
0: 	 *		QUERY_INVARIANT		- invariant within the life of a query
0: 	 *		VARIANT				- immutable
0: 	 *
0: 	 * @return	The variant type for the underlying expression.
0: 	 */
0: 	protected int getOrderableVariantType()
0: 	{
0: 		// Constants are constant for the life of the query
0: 		return Qualifier.CONSTANT;
0: 	}
0: }
============================================================================