1:341554e: /*
1:341554e:  *
1:341554e:  * Derby - Class ResultSetJDBC30Test
1:341554e:  *
1:341554e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:341554e:  * contributor license agreements.  See the NOTICE file distributed with
1:341554e:  * this work for additional information regarding copyright ownership.
1:341554e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:341554e:  * (the "License"); you may not use this file except in compliance with
1:341554e:  * the License.  You may obtain a copy of the License at
1:341554e:  *
1:341554e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:341554e:  *
1:341554e:  * Unless required by applicable law or agreed to in writing,
1:341554e:  * software distributed under the License is distributed on an
1:341554e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:341554e:  * either express or implied. See the License for the specific
1:341554e:  * language governing permissions and limitations under the License.
1:341554e:  */
1:341554e: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
2:341554e: 
1:1ae02c9: import java.sql.Blob;
1:1ae02c9: import java.sql.Clob;
1:1ae02c9: import java.sql.ResultSet;
1:1ae02c9: import java.sql.SQLException;
1:1ae02c9: import java.sql.Statement;
1:341554e: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:341554e: import org.apache.derbyTesting.junit.JDBC;
1:341554e: import org.apache.derbyTesting.junit.TestConfiguration;
1:341554e: 
1:341554e: /**
1:341554e:  * Test of additional methods in JDBC3.0 result set
1:341554e:  */
1:341554e: public class ResultSetJDBC30Test extends BaseJDBCTestCase {
1:341554e: 
1:341554e:     /** Creates a new instance of ResultSetJDBC30Test */
1:341554e:     public ResultSetJDBC30Test(String name) {
1:341554e:         super(name);
5:341554e:     }
1:341554e: 
1:341554e:     /**
1:341554e:      * Set up the connection to the database.
1:341554e:      */
1:341554e:     public void setUp() throws  Exception {
1:341554e:         getConnection().setAutoCommit(false);
1:341554e:         Statement stmt = createStatement();
1:341554e:         stmt.execute("create table t (i int, s smallint, r real, "+
1:341554e:             "d double precision, dt date, t time, ts timestamp, "+
1:341554e:             "c char(10), v varchar(40) not null, dc dec(10,2))");
1:341554e:         stmt.execute("insert into t values(1,2,3.3,4.4,date('1990-05-05'),"+
1:341554e:                      "time('12:06:06'),timestamp('1990-07-07 07:07:07.07'),"+
1:341554e:                      "'eight','nine', 11.1)");
1:341554e:         stmt.close();
1:341554e:         commit();
1:341554e:     }
1:341554e: 
1:341554e:     protected void tearDown() throws Exception {
1:341554e:         Statement stmt = createStatement();
1:341554e:         stmt.executeUpdate("DROP TABLE t");
1:341554e:         commit();
1:341554e:         super.tearDown();
1:341554e:     }
1:341554e: 
1:341554e:     public static Test suite() {
1:341554e:         return TestConfiguration.defaultSuite(ResultSetJDBC30Test.class);
1:341554e:     }
1:341554e: 
1:341554e: 
1:341554e:     public void testNotImplementedMethods() throws Exception {
1:341554e:         Statement stmt = createStatement();
1:341554e: 
1:341554e:         ResultSet rs = stmt.executeQuery("select * from t");
1:341554e:         assertTrue("FAIL - row not found", rs.next());
1:341554e: 
1:341554e:         try {
1:341554e:             rs.getURL(8);
1:341554e:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                     " yet.");
1:341554e:         } catch (SQLException se) {
5:341554e:             assertSQLState(NOT_IMPLEMENTED, se);
1:341554e:         }
1:341554e:         try {
1:341554e:             rs.getURL("c");
1:341554e:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                     " yet.");
1:341554e:         } catch (SQLException se) {
1:341554e:             assertSQLState(NOT_IMPLEMENTED, se);
1:341554e:         }
1:341554e:         try {
1:341554e:             rs.updateRef(8, null);
1:341554e:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                     " yet.");
1:341554e:         } catch (SQLException se) {
1:341554e:             assertSQLState(NOT_IMPLEMENTED, se);
1:341554e:         } catch (NoSuchMethodError nsme) {
1:341554e:             assertTrue("FAIL - ResultSet.updateRef not present - correct for" +
1:341554e:                     " JSR169", JDBC.vmSupportsJSR169());
1:341554e:         }
1:341554e:         try {
1:341554e:             rs.updateRef("c", null);
1:341554e:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                     " yet.");
1:341554e:         } catch (SQLException se) {
1:341554e:             assertSQLState(NOT_IMPLEMENTED, se);
1:341554e:         } catch (NoSuchMethodError nsme) {
1:341554e:             assertTrue("FAIL - ResultSet.updateRef not present - correct for" +
1:341554e:                     " JSR169", JDBC.vmSupportsJSR169());
1:341554e:         }
1:341554e:         try {
1:890e5d2:             rs.updateBlob(8, (Blob) null);
5:341554e:             if (usingEmbedded()) {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:341554e:                         " on a read only resultset.");
5:341554e:             } else {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                         " yet.");
1:341554e:             }
1:341554e:         } catch (SQLException se) {
1:89459c8:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:341554e:         }
1:341554e:         try {
1:890e5d2:             rs.updateBlob("c", (Blob) null);
1:341554e:             if (usingEmbedded()) {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:341554e:                         " on a read only resultset.");
1:341554e:             } else {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                         " yet.");
1:341554e:             }
1:341554e:         } catch (SQLException se) {
1:89459c8:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:341554e:         }
1:341554e:         try {
1:890e5d2:             rs.updateClob(8, (Clob) null);
1:341554e:             if (usingEmbedded()) {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:341554e:                         " on a read only resultset.");
1:341554e:             } else {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                         " yet.");
1:341554e:             }
1:341554e:         } catch (SQLException se) {
1:89459c8:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:341554e:         }
1:341554e:         try {
1:890e5d2:             rs.updateClob("c", (Clob) null);
1:341554e:             if (usingEmbedded()) {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:341554e:                         " on a read only resultset.");
1:341554e:             } else {
1:341554e:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                         " yet.");
1:341554e:             }
1:341554e:         } catch (SQLException se) {
1:89459c8:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:341554e:         }
1:341554e:         try {
1:341554e:             rs.updateArray(8, null);
1:341554e:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                     " yet.");
1:341554e:         } catch (SQLException se) {
1:341554e:             assertSQLState(NOT_IMPLEMENTED, se);
1:341554e:         } catch (NoSuchMethodError nsme) {
1:341554e:             assertTrue("FAIL - ResultSet.updateArray not present - correct" +
1:341554e:                     " for JSR169", JDBC.vmSupportsJSR169());
1:341554e:         }
1:341554e:         try {
1:341554e:             rs.updateArray("c", null);
1:341554e:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:341554e:                     " yet.");
1:341554e:         } catch (SQLException se) {
1:341554e:             assertSQLState(NOT_IMPLEMENTED, se);
1:341554e:         } catch (NoSuchMethodError nsme) {
1:341554e:             assertTrue("FAIL - ResultSet.updateArray not present - correct" +
1:341554e:                     " for JSR169", JDBC.vmSupportsJSR169());
1:341554e:         }
1:341554e: 
1:341554e:         rs.close();
1:341554e:         stmt.close();
1:341554e:         commit();
1:341554e:     }
1:341554e: 
1:341554e:     public void testCloseResultSetAutoCommit() throws Exception {
1:341554e:         //
1:341554e:         // Check our behavior around closing result sets when auto-commit
1:341554e:         // is true.  Test with both holdable and non-holdable result sets
1:341554e:         //
1:341554e:         getConnection().setAutoCommit(true);
1:341554e: 
1:341554e:         // Create a non-updatable holdable result set, and then try to
1:341554e:         // update it
1:341554e:         getConnection().setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:341554e:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:341554e:             ResultSet.CONCUR_READ_ONLY);
1:341554e: 
1:341554e:         ResultSet rs = stmt.executeQuery("select * from t");
1:341554e:         rs.next();
1:341554e: 
1:341554e:         checkForCloseOnException(rs, true);
1:341554e: 
1:341554e:         rs.close();
1:341554e:         stmt.close();
1:341554e: 
1:341554e:         // Create a non-updatable non-holdable result set, and then try to
1:341554e:         // update it
1:341554e:         getConnection().setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:341554e:         stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:341554e:             ResultSet.CONCUR_READ_ONLY);
1:341554e: 
1:341554e:         rs = stmt.executeQuery("select * from t");
1:341554e:         rs.next();
1:341554e: 
1:341554e:         checkForCloseOnException(rs, false);
1:341554e: 
1:341554e:         rs.close();
1:341554e:         stmt.close();
1:341554e:         commit();
1:341554e:     }
1:341554e: 
1:341554e:     private void checkForCloseOnException(ResultSet rs, boolean holdable)
1:341554e:             throws Exception
1:341554e:     {
1:341554e:         try {
1:890e5d2:             rs.updateBlob("c", (Blob) null);
1:341554e:             fail("FAIL - rs.updateBlob() on a read-only result set" +
1:341554e:                 "should not have succeeded");
1:341554e:         } catch (SQLException ex) {}
1:341554e:         // The result set should not be closed on exception, this call should
1:341554e:         // not cause an exception
1:341554e:         rs.beforeFirst();
1:341554e:     }
1:341554e: 
1:341554e:     private static final String NOT_IMPLEMENTED = "0A000";
1:341554e:     private static final String UPDATABLE_RESULTSET_API_DISALLOWED = "XJ083";
1:341554e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Blob;
1: import java.sql.Clob;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:890e5d2
/////////////////////////////////////////////////////////////////////////
1:             rs.updateBlob(8, (Blob) null);
/////////////////////////////////////////////////////////////////////////
1:             rs.updateBlob("c", (Blob) null);
/////////////////////////////////////////////////////////////////////////
1:             rs.updateClob(8, (Clob) null);
/////////////////////////////////////////////////////////////////////////
1:             rs.updateClob("c", (Clob) null);
/////////////////////////////////////////////////////////////////////////
1:             rs.updateBlob("c", (Blob) null);
commit:89459c8
/////////////////////////////////////////////////////////////////////////
1:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
/////////////////////////////////////////////////////////////////////////
1:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
/////////////////////////////////////////////////////////////////////////
1:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
/////////////////////////////////////////////////////////////////////////
1:             assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
commit:341554e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class ResultSetJDBC30Test
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: 
0: import java.sql.*;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test of additional methods in JDBC3.0 result set
1:  */
1: public class ResultSetJDBC30Test extends BaseJDBCTestCase {
1: 
1:     /** Creates a new instance of ResultSetJDBC30Test */
1:     public ResultSetJDBC30Test(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Set up the connection to the database.
1:      */
1:     public void setUp() throws  Exception {
1:         getConnection().setAutoCommit(false);
1:         Statement stmt = createStatement();
1:         stmt.execute("create table t (i int, s smallint, r real, "+
1:             "d double precision, dt date, t time, ts timestamp, "+
1:             "c char(10), v varchar(40) not null, dc dec(10,2))");
1:         stmt.execute("insert into t values(1,2,3.3,4.4,date('1990-05-05'),"+
1:                      "time('12:06:06'),timestamp('1990-07-07 07:07:07.07'),"+
1:                      "'eight','nine', 11.1)");
1:         stmt.close();
1:         commit();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         Statement stmt = createStatement();
1:         stmt.executeUpdate("DROP TABLE t");
1:         commit();
1:         super.tearDown();
1:     }
1: 
1:     public static Test suite() {
1:         return TestConfiguration.defaultSuite(ResultSetJDBC30Test.class);
1:     }
1: 
1: 
1:     public void testNotImplementedMethods() throws Exception {
1:         Statement stmt = createStatement();
1: 
1:         ResultSet rs = stmt.executeQuery("select * from t");
1:         assertTrue("FAIL - row not found", rs.next());
1: 
1:         try {
1:             rs.getURL(8);
1:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                     " yet.");
1:         } catch (SQLException se) {
1:             assertSQLState(NOT_IMPLEMENTED, se);
1:         }
1:         try {
1:             rs.getURL("c");
1:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                     " yet.");
1:         } catch (SQLException se) {
1:             assertSQLState(NOT_IMPLEMENTED, se);
1:         }
1:         try {
1:             rs.updateRef(8, null);
1:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                     " yet.");
1:         } catch (SQLException se) {
1:             assertSQLState(NOT_IMPLEMENTED, se);
1:         } catch (NoSuchMethodError nsme) {
1:             assertTrue("FAIL - ResultSet.updateRef not present - correct for" +
1:                     " JSR169", JDBC.vmSupportsJSR169());
1:         }
1:         try {
1:             rs.updateRef("c", null);
1:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                     " yet.");
1:         } catch (SQLException se) {
1:             assertSQLState(NOT_IMPLEMENTED, se);
1:         } catch (NoSuchMethodError nsme) {
1:             assertTrue("FAIL - ResultSet.updateRef not present - correct for" +
1:                     " JSR169", JDBC.vmSupportsJSR169());
1:         }
1:         try {
0:             rs.updateBlob(8, null);
1:             if (usingEmbedded()) {
1:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:                         " on a read only resultset.");
1:             } else {
1:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                         " yet.");
1:             }
1:         } catch (SQLException se) {
1:             if (usingEmbedded()) {
0:                 assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:             } else {
1:                 assertSQLState(NOT_IMPLEMENTED, se);
1:             }
1:         }
1:         try {
0:             rs.updateBlob("c", null);
1:             if (usingEmbedded()) {
1:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:                         " on a read only resultset.");
1:             } else {
1:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                         " yet.");
1:             }
1:         } catch (SQLException se) {
1:             if (usingEmbedded()) {
0:                 assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:             } else {
1:                 assertSQLState(NOT_IMPLEMENTED, se);
1:             }
1:         }
1:         try {
0:             rs.updateClob(8, null);
1:             if (usingEmbedded()) {
1:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:                         " on a read only resultset.");
1:             } else {
1:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                         " yet.");
1:             }
1:         } catch (SQLException se) {
1:             if (usingEmbedded()) {
0:                 assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:             } else {
1:                 assertSQLState(NOT_IMPLEMENTED, se);
1:             }
1:         }
1:         try {
0:             rs.updateClob("c", null);
1:             if (usingEmbedded()) {
1:                 fail("FAIL - Shouldn't reach here. Method is being invoked" +
1:                         " on a read only resultset.");
1:             } else {
1:                 fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                         " yet.");
1:             }
1:         } catch (SQLException se) {
1:             if (usingEmbedded()) {
0:                 assertSQLState(UPDATABLE_RESULTSET_API_DISALLOWED, se);
1:             } else {
1:                 assertSQLState(NOT_IMPLEMENTED, se);
1:             }
1:         }
1:         try {
1:             rs.updateArray(8, null);
1:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                     " yet.");
1:         } catch (SQLException se) {
1:             assertSQLState(NOT_IMPLEMENTED, se);
1:         } catch (NoSuchMethodError nsme) {
1:             assertTrue("FAIL - ResultSet.updateArray not present - correct" +
1:                     " for JSR169", JDBC.vmSupportsJSR169());
1:         }
1:         try {
1:             rs.updateArray("c", null);
1:             fail("FAIL - Shouldn't reach here. Method not implemented" +
1:                     " yet.");
1:         } catch (SQLException se) {
1:             assertSQLState(NOT_IMPLEMENTED, se);
1:         } catch (NoSuchMethodError nsme) {
1:             assertTrue("FAIL - ResultSet.updateArray not present - correct" +
1:                     " for JSR169", JDBC.vmSupportsJSR169());
1:         }
1: 
1:         rs.close();
1:         stmt.close();
1:         commit();
1:     }
1: 
1:     public void testCloseResultSetAutoCommit() throws Exception {
1:         //
1:         // Check our behavior around closing result sets when auto-commit
1:         // is true.  Test with both holdable and non-holdable result sets
1:         //
1:         getConnection().setAutoCommit(true);
1: 
1:         // Create a non-updatable holdable result set, and then try to
1:         // update it
1:         getConnection().setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:         Statement stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:             ResultSet.CONCUR_READ_ONLY);
1: 
1:         ResultSet rs = stmt.executeQuery("select * from t");
1:         rs.next();
1: 
1:         checkForCloseOnException(rs, true);
1: 
1:         rs.close();
1:         stmt.close();
1: 
1:         // Create a non-updatable non-holdable result set, and then try to
1:         // update it
1:         getConnection().setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:         stmt = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:             ResultSet.CONCUR_READ_ONLY);
1: 
1:         rs = stmt.executeQuery("select * from t");
1:         rs.next();
1: 
1:         checkForCloseOnException(rs, false);
1: 
1:         rs.close();
1:         stmt.close();
1:         commit();
1:     }
1: 
1:     private void checkForCloseOnException(ResultSet rs, boolean holdable)
1:             throws Exception
1:     {
1:         try {
0:             rs.updateBlob("c",null);
1:             fail("FAIL - rs.updateBlob() on a read-only result set" +
1:                 "should not have succeeded");
1:         } catch (SQLException ex) {}
1:         // The result set should not be closed on exception, this call should
1:         // not cause an exception
1:         rs.beforeFirst();
1:     }
1: 
1:     private static final String NOT_IMPLEMENTED = "0A000";
1:     private static final String UPDATABLE_RESULTSET_API_DISALLOWED = "XJ083";
1: }
============================================================================