1:eac0369: /*
10:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.QueryTreeNodeVector
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:1c6c2e8: import java.util.ArrayList;
1:e1f49ca: import java.util.Iterator;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.sql.compile.Visitor;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:e1f49ca: import org.apache.derby.iapi.sql.compile.Visitable;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * QueryTreeNodeVector is the root class for all lists of query tree nodes.
1:1c6c2e8:  * It provides a wrapper for java.util.ArrayList. All
1:eac0369:  * lists of query tree nodes inherit from QueryTreeNodeVector.
3:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:e1f49ca: class QueryTreeNodeVector<E extends QueryTreeNode> extends QueryTreeNode
1:e1f49ca:                                                    implements Iterable<E>
9:eac0369: {
1:e1f49ca:     private final ArrayList<E> v = new ArrayList<E>();
1:e1f49ca:     final Class<E> eltClass; // needed for cast in #acceptChildren
1:eac0369: 
1:e1f49ca:     QueryTreeNodeVector(Class<E> eltClass, ContextManager cm) {
1:3bb140c:         super(cm);
1:e1f49ca:         this.eltClass = eltClass;
1:3bb140c:     }
1:3bb140c: 
1:eac0369: 	public final int size()
1:eac0369: 	{
1:eac0369: 		return v.size();
6:eac0369: 	}
1:c9a1206: 
1:e1f49ca:     final E elementAt(int index)
1:eac0369: 	{
1:3bb140c:         return v.get(index);
1:eac0369: 	}
1:eac0369: 
1:e1f49ca:     void addElement(E qt)
1:eac0369: 	{
1:47d4a4c: 		v.add(qt);
1:eac0369: 	}
1:eac0369: 
1:e1f49ca:     final E removeElementAt(int index)
1:eac0369: 	{
1:3bb140c:         return v.remove(index);
1:eac0369: 	}
1:eac0369: 
1:e1f49ca:     final void removeElement(E qt)
1:e1f49ca: 	{
1:e1f49ca: 		v.remove(qt);
1:e1f49ca: 	}
1:e1f49ca: 
1:e1f49ca:     final int indexOf(E qt)
1:eac0369: 	{
1:eac0369: 		return v.indexOf(qt);
1:eac0369: 	}
1:eac0369: 
1:e1f49ca:     final void setElementAt(E qt, int index)
1:eac0369: 	{
1:47d4a4c: 		v.set(index, qt);
1:eac0369: 	}
1:eac0369: 
1:e1f49ca:     final void destructiveAppend(QueryTreeNodeVector<E> qtnv)
1:eac0369: 	{
1:eac0369: 		nondestructiveAppend(qtnv);
1:eac0369: 		qtnv.removeAllElements();
1:eac0369: 	}
1:eac0369: 
1:e1f49ca:     final void nondestructiveAppend(QueryTreeNodeVector<E> qtnv)
1:eac0369: 	{
1:47d4a4c:         v.addAll(qtnv.v);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	final void removeAllElements()
1:eac0369: 	{
1:47d4a4c: 		v.clear();
1:eac0369: 	}
1:eac0369: 
1:e1f49ca:     final void insertElementAt(E qt, int index)
1:eac0369: 	{
1:47d4a4c: 		v.add(index, qt);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:c9a1206: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1:c9a1206: 	 * how tree printing is supposed to work.
1:c9a1206: 	 * @param depth		The depth to indent the sub-nodes
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     void printSubNodes(int depth) {
1:c9a1206: 		if (SanityManager.DEBUG) {
1:c9a1206: 			for (int index = 0; index < size(); index++) {
1:c9a1206: 				debugPrint(formatNodeString("[" + index + "]:", depth));
1:e1f49ca:                 E elt = elementAt(index);
1:c9a1206: 				elt.treePrint(depth);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:c9a1206: 
1:eac0369: 
1:eac0369: 	/**
1:dd2f5a8: 	 * Accept the visitor for all visitable children of this node.
1:eac0369: 	 * 
1:eac0369: 	 * @param v the visitor
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:dd2f5a8: 	void acceptChildren(Visitor v)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:dd2f5a8: 		super.acceptChildren(v);
1:eac0369: 
1:eac0369: 		int size = size();
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:e1f49ca:             Visitable vbl = elementAt(index).accept(v);
1:e1f49ca:             setElementAt(eltClass.cast(vbl), index);
1:eac0369: 		}
1:eac0369: 	}
1:e1f49ca: 
1:e1f49ca:     /* Iterable interface */
1:e1f49ca:     public final Iterator<E> iterator() {
1:e1f49ca:         return v.iterator();
1:e1f49ca:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import org.apache.derby.iapi.sql.compile.Visitable;
/////////////////////////////////////////////////////////////////////////
1: class QueryTreeNodeVector<E extends QueryTreeNode> extends QueryTreeNode
1:                                                    implements Iterable<E>
1:     private final ArrayList<E> v = new ArrayList<E>();
1:     final Class<E> eltClass; // needed for cast in #acceptChildren
1:     QueryTreeNodeVector(Class<E> eltClass, ContextManager cm) {
1:         this.eltClass = eltClass;
/////////////////////////////////////////////////////////////////////////
1:     final E elementAt(int index)
1:     void addElement(E qt)
1:     final E removeElementAt(int index)
1:     final void removeElement(E qt)
1: 	{
1: 		v.remove(qt);
1: 	}
1: 
1:     final int indexOf(E qt)
1:     final void setElementAt(E qt, int index)
1:     final void destructiveAppend(QueryTreeNodeVector<E> qtnv)
1:     final void nondestructiveAppend(QueryTreeNodeVector<E> qtnv)
/////////////////////////////////////////////////////////////////////////
1:     final void insertElementAt(E qt, int index)
/////////////////////////////////////////////////////////////////////////
1:                 E elt = elementAt(index);
/////////////////////////////////////////////////////////////////////////
1:             Visitable vbl = elementAt(index).accept(v);
1:             setElementAt(eltClass.cast(vbl), index);
1: 
1:     /* Iterable interface */
1:     public final Iterator<E> iterator() {
1:         return v.iterator();
1:     }
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
0:     QueryTreeNodeVector(ContextManager cm) {
1:         super(cm);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return v.get(index);
/////////////////////////////////////////////////////////////////////////
1:         return v.remove(index);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     void printSubNodes(int depth) {
0:                 QueryTreeNode elt = elementAt(index);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:             setElementAt((QueryTreeNode)(elementAt(index)).accept(v), index);
commit:c9a1206
/////////////////////////////////////////////////////////////////////////
1: 
1: 	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
1: 	 * how tree printing is supposed to work.
1: 	 * @param depth		The depth to indent the sub-nodes
0: 	public void printSubNodes(int depth) {
1: 		if (SanityManager.DEBUG) {
1: 			for (int index = 0; index < size(); index++) {
1: 				debugPrint(formatNodeString("[" + index + "]:", depth));
0: 				QueryTreeNode elt = (QueryTreeNode)elementAt(index);
1: 				elt.treePrint(depth);
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
0: 	private final ArrayList<QueryTreeNode> v = new ArrayList<QueryTreeNode>();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:1c6c2e8
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1:  * It provides a wrapper for java.util.ArrayList. All
0: 	private final ArrayList v = new ArrayList();
commit:47d4a4c
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 	private final List v = new Vector();
0: 	final QueryTreeNode elementAt(int index)
0: 		return (QueryTreeNode) v.get(index);
1: 		v.add(qt);
0: 		v.remove(index);
0: 		v.remove(qt);
/////////////////////////////////////////////////////////////////////////
1: 		v.set(index, qt);
/////////////////////////////////////////////////////////////////////////
1:         v.addAll(qtnv.v);
1: 		v.clear();
1: 		v.add(index, qt);
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	 * Accept the visitor for all visitable children of this node.
1: 	void acceptChildren(Visitor v)
1: 		super.acceptChildren(v);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:894b205
/////////////////////////////////////////////////////////////////////////
0: 	QueryTreeNode elementAt(int index)
0: 	final void addElement(QueryTreeNode qt)
/////////////////////////////////////////////////////////////////////////
0: 	void destructiveAppend(QueryTreeNodeVector qtnv)
0: 	void nondestructiveAppend(QueryTreeNodeVector qtnv)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.QueryTreeNodeVector
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.util.Enumeration;
0: import java.util.Vector;
1: 
1: /**
1:  * QueryTreeNodeVector is the root class for all lists of query tree nodes.
0:  * It provides a wrapper for java.util.Vector. All
1:  * lists of query tree nodes inherit from QueryTreeNodeVector.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: abstract class QueryTreeNodeVector extends QueryTreeNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private Vector			v = new Vector();
1: 
1: 	public final int size()
1: 	{
1: 		return v.size();
1: 	}
1: 
0: 	public QueryTreeNode elementAt(int index)
1: 	{
0: 		return (QueryTreeNode) v.elementAt(index);
1: 	}
1: 
0: 	public final void addElement(QueryTreeNode qt)
1: 	{
0: 		v.addElement(qt);
1: 	}
1: 
0: 	final void removeElementAt(int index)
1: 	{
0: 		v.removeElementAt(index);
1: 	}
1: 
0: 	final void removeElement(QueryTreeNode qt)
1: 	{
0: 		v.removeElement(qt);
1: 	}
1: 
0: 	final Object remove(int index)
1: 	{
0: 		return((QueryTreeNode) (v.remove(index)));
1: 	}
1: 
0: 	final int indexOf(QueryTreeNode qt)
1: 	{
1: 		return v.indexOf(qt);
1: 	}
1: 
0: 	final void setElementAt(QueryTreeNode qt, int index)
1: 	{
0: 		v.setElementAt(qt, index);
1: 	}
1: 
0: 	public void destructiveAppend(QueryTreeNodeVector qtnv)
1: 	{
1: 		nondestructiveAppend(qtnv);
1: 		qtnv.removeAllElements();
1: 	}
1: 
0: 	public void nondestructiveAppend(QueryTreeNodeVector qtnv)
1: 	{
0: 		int qtnvSize = qtnv.size();
0: 		for (int index = 0; index < qtnvSize; index++)
1: 		{
0: 			v.addElement(qtnv.elementAt(index));
1: 		}
1: 	}
1: 
1: 	final void removeAllElements()
1: 	{
0: 		v.removeAllElements();
1: 	}
1: 
0: 	final void insertElementAt(QueryTreeNode qt, int index)
1: 	{
0: 		v.insertElementAt(qt, index);
1: 	}
1: 
1: 	/**
0: 	 * Format this list as a string
1: 	 *
0: 	 * We can simply iterate through the list.  Note each list member
0: 	 * is a QueryTreeNode, and so should have its specialization of
0: 	 * toString defined.
1: 	 *
0: 	 * @return	This list formatted as a String
1: 	 */
0: 	public String toString()
1: 	{
0: 		if (SanityManager.DEBUG)
1: 		{
0: 			StringBuffer	buffer = new StringBuffer("");
1: 
0: 			for (int index = 0; index < size(); index++)
1: 			{
0: 				buffer.append(elementAt(index).toString()).append("; ");
1: 			}
1: 
0: 			return buffer.toString();
1: 		}
0: 		else
1: 		{
0: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
1: 	 * 
1: 	 * @param v the visitor
1: 	 *
1: 	 * @exception StandardException on error
1: 	 */
0: 	public Visitable accept(Visitor v) 
1: 		throws StandardException
1: 	{
0: 		Visitable		returnNode = v.visit(this);
1: 	
0: 		if (v.skipChildren(this))
1: 		{
0: 			return returnNode;
1: 		}
1: 
1: 		int size = size();
1: 		for (int index = 0; index < size; index++)
1: 		{
0: 			setElementAt((QueryTreeNode)((QueryTreeNode) elementAt(index)).accept(v), index);
1: 		}
1: 		
0: 		return returnNode;
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.sql.compile.Visitor;
0: import org.apache.derby.iapi.sql.compile.Visitable;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Enumeration;
0: import java.util.Vector;
0: 
0: /**
0:  * QueryTreeNodeVector is the root class for all lists of query tree nodes.
0:  * It provides a wrapper for java.util.Vector. All
0:  * lists of query tree nodes inherit from QueryTreeNodeVector.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: abstract class QueryTreeNodeVector extends QueryTreeNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	private Vector			v = new Vector();
0: 
0: 	public final int size()
0: 	{
0: 		return v.size();
0: 	}
0: 
0: 	public QueryTreeNode elementAt(int index)
0: 	{
0: 		return (QueryTreeNode) v.elementAt(index);
0: 	}
0: 
0: 	public final void addElement(QueryTreeNode qt)
0: 	{
0: 		v.addElement(qt);
0: 	}
0: 
0: 	final void removeElementAt(int index)
0: 	{
0: 		v.removeElementAt(index);
0: 	}
0: 
0: 	final void removeElement(QueryTreeNode qt)
0: 	{
0: 		v.removeElement(qt);
0: 	}
0: 
0: 	final Object remove(int index)
0: 	{
0: 		return((QueryTreeNode) (v.remove(index)));
0: 	}
0: 
0: 	final int indexOf(QueryTreeNode qt)
0: 	{
0: 		return v.indexOf(qt);
0: 	}
0: 
0: 	final void setElementAt(QueryTreeNode qt, int index)
0: 	{
0: 		v.setElementAt(qt, index);
0: 	}
0: 
0: 	public void destructiveAppend(QueryTreeNodeVector qtnv)
0: 	{
0: 		nondestructiveAppend(qtnv);
0: 		qtnv.removeAllElements();
0: 	}
0: 
0: 	public void nondestructiveAppend(QueryTreeNodeVector qtnv)
0: 	{
0: 		int qtnvSize = qtnv.size();
0: 		for (int index = 0; index < qtnvSize; index++)
0: 		{
0: 			v.addElement(qtnv.elementAt(index));
0: 		}
0: 	}
0: 
0: 	final void removeAllElements()
0: 	{
0: 		v.removeAllElements();
0: 	}
0: 
0: 	final void insertElementAt(QueryTreeNode qt, int index)
0: 	{
0: 		v.insertElementAt(qt, index);
0: 	}
0: 
0: 	/**
0: 	 * Format this list as a string
0: 	 *
0: 	 * We can simply iterate through the list.  Note each list member
0: 	 * is a QueryTreeNode, and so should have its specialization of
0: 	 * toString defined.
0: 	 *
0: 	 * @return	This list formatted as a String
0: 	 */
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			StringBuffer	buffer = new StringBuffer("");
0: 
0: 			for (int index = 0; index < size(); index++)
0: 			{
0: 				buffer.append(elementAt(index).toString()).append("; ");
0: 			}
0: 
0: 			return buffer.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Accept a visitor, and call v.visit()
0: 	 * on child nodes as necessary.  
0: 	 * 
0: 	 * @param v the visitor
0: 	 *
0: 	 * @exception StandardException on error
0: 	 */
0: 	public Visitable accept(Visitor v) 
0: 		throws StandardException
0: 	{
0: 		Visitable		returnNode = v.visit(this);
0: 	
0: 		if (v.skipChildren(this))
0: 		{
0: 			return returnNode;
0: 		}
0: 
0: 		int size = size();
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			setElementAt((QueryTreeNode)((QueryTreeNode) elementAt(index)).accept(v), index);
0: 		}
0: 		
0: 		return returnNode;
0: 	}
0: }
============================================================================