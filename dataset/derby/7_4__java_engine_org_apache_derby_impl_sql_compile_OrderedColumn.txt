1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.OrderedColumn
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * An ordered column has position.   It is an
1:eac0369:  * abstract class for group by and order by
1:eac0369:  * columns.
2:eac0369:  *
1:eac0369:  */
1:eac0369: public abstract class OrderedColumn extends QueryTreeNode 
1:eac0369: {
1:eac0369: 	protected static final int UNMATCHEDPOSITION = -1;
1:eac0369: 	protected int	columnPosition = UNMATCHEDPOSITION;
1:eac0369: 
1:3bb140c:     public OrderedColumn(ContextManager cm) {
1:3bb140c:         super(cm);
1:3bb140c:     }
1:3bb140c: 
1:3bb140c: 
1:eac0369: 	/**
1:eac0369: 	 * Indicate whether this column is ascending or not.
1:eac0369: 	 * By default assume that all ordered columns are
1:eac0369: 	 * necessarily ascending.  If this class is inherited
1:eac0369: 	 * by someone that can be desceneded, they are expected
1:eac0369: 	 * to override this method.
1:eac0369: 	 *
1:eac0369: 	 * @return true
1:eac0369: 	 */
1:3bb140c:     boolean isAscending()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:cc30c0c: 	 * Indicate whether this column should be ordered NULLS low.
1:cc30c0c: 	 * By default we assume that all ordered columns are ordered
1:cc30c0c: 	 * with NULLS higher than non-null values. If this class is inherited
1:cc30c0c: 	 * by someone that can be specified to have NULLs ordered lower than
1:cc30c0c:          * non-null values, they are expected to override this method.
1:cc30c0c: 	 *
1:cc30c0c: 	 * @return false
1:cc30c0c: 	 */
1:3bb140c:     boolean isNullsOrderedLow()
1:cc30c0c: 	{
1:cc30c0c: 		return false;
1:cc30c0c: 	}
1:cc30c0c: 
1:cc30c0c: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString() 
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "columnPosition: " + columnPosition + "\n" +
1:eac0369: 				super.toString();
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the position of this column
1:eac0369: 	 *
1:eac0369: 	 * @return	The position of this column
1:eac0369: 	 */
1:3bb140c:     int getColumnPosition()
1:eac0369: 	{
1:eac0369: 		return columnPosition;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the position of this column
1:eac0369: 	 */
1:3bb140c:     void setColumnPosition(int columnPosition)
1:eac0369: 	{
1:eac0369: 		this.columnPosition = columnPosition;
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(columnPosition > 0,
1:eac0369: 				"Column position is " + columnPosition +
1:eac0369: 				". This is a problem since the code to generate " +
1:eac0369: 				" ordering columns assumes it to be one based -- i.e. "+
1:eac0369: 				" it subtracts one");
1:eac0369: 
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:cc30c0c
/////////////////////////////////////////////////////////////////////////
1: 	 * Indicate whether this column should be ordered NULLS low.
1: 	 * By default we assume that all ordered columns are ordered
1: 	 * with NULLS higher than non-null values. If this class is inherited
1: 	 * by someone that can be specified to have NULLs ordered lower than
1:          * non-null values, they are expected to override this method.
1: 	 *
1: 	 * @return false
1: 	 */
0: 	public boolean isNullsOrderedLow()
1: 	{
1: 		return false;
1: 	}
1: 
1: 	/**
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
1:     public OrderedColumn(ContextManager cm) {
1:         super(cm);
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean isAscending()
/////////////////////////////////////////////////////////////////////////
1:     boolean isNullsOrderedLow()
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     int getColumnPosition()
/////////////////////////////////////////////////////////////////////////
1:     void setColumnPosition(int columnPosition)
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.OrderedColumn
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1:  * An ordered column has position.   It is an
1:  * abstract class for group by and order by
1:  * columns.
1:  *
0:  * @author jamie
1:  */
1: public abstract class OrderedColumn extends QueryTreeNode 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	protected static final int UNMATCHEDPOSITION = -1;
1: 	protected int	columnPosition = UNMATCHEDPOSITION;
1: 
1: 	/**
1: 	 * Indicate whether this column is ascending or not.
1: 	 * By default assume that all ordered columns are
1: 	 * necessarily ascending.  If this class is inherited
1: 	 * by someone that can be desceneded, they are expected
1: 	 * to override this method.
1: 	 *
1: 	 * @return true
1: 	 */
0: 	public boolean isAscending()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 	public String toString() 
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "columnPosition: " + columnPosition + "\n" +
1: 				super.toString();
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Get the position of this column
1: 	 *
1: 	 * @return	The position of this column
1: 	 */
0: 	public int getColumnPosition() 
1: 	{
1: 		return columnPosition;
1: 	}
1: 
1: 	/**
1: 	 * Set the position of this column
1: 	 *
0: 	 * @return	Nothing
1: 	 */
0: 	public void setColumnPosition(int columnPosition) 
1: 	{
1: 		this.columnPosition = columnPosition;
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(columnPosition > 0,
1: 				"Column position is " + columnPosition +
1: 				". This is a problem since the code to generate " +
1: 				" ordering columns assumes it to be one based -- i.e. "+
1: 				" it subtracts one");
1: 
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0:  * An ordered column has position.   It is an
0:  * abstract class for group by and order by
0:  * columns.
0:  *
0:  * @author jamie
0:  */
0: public abstract class OrderedColumn extends QueryTreeNode 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	protected static final int UNMATCHEDPOSITION = -1;
0: 	protected int	columnPosition = UNMATCHEDPOSITION;
0: 
0: 	/**
0: 	 * Indicate whether this column is ascending or not.
0: 	 * By default assume that all ordered columns are
0: 	 * necessarily ascending.  If this class is inherited
0: 	 * by someone that can be desceneded, they are expected
0: 	 * to override this method.
0: 	 *
0: 	 * @return true
0: 	 */
0: 	public boolean isAscending()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 	public String toString() 
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "columnPosition: " + columnPosition + "\n" +
0: 				super.toString();
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * Get the position of this column
0: 	 *
0: 	 * @return	The position of this column
0: 	 */
0: 	public int getColumnPosition() 
0: 	{
0: 		return columnPosition;
0: 	}
0: 
0: 	/**
0: 	 * Set the position of this column
0: 	 *
0: 	 * @return	Nothing
0: 	 */
0: 	public void setColumnPosition(int columnPosition) 
0: 	{
0: 		this.columnPosition = columnPosition;
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(columnPosition > 0,
0: 				"Column position is " + columnPosition +
0: 				". This is a problem since the code to generate " +
0: 				" ordering columns assumes it to be one based -- i.e. "+
0: 				" it subtracts one");
0: 
0: 		}
0: 	}
0: }
============================================================================