1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.DecryptInputStream
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.store.raw.data.DataFactory;
1:eac0369: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: 
1:eac0369: import java.io.InputStream;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	A DecryptInputStream is used by stream container to access an encrypted
1:eac0369: 	stream of bytes.
1:eac0369: */
1:eac0369: public class DecryptInputStream extends BufferedByteHolderInputStream {
1:eac0369: 
1:eac0369: 	// if database is encrypted, bytes to reserve at the beginning of the buffer
1:eac0369: 	//protected static final int ENCRYPTION_RESERVE = dataFactory.getEncryptionBlockSize() - 1;
1:eac0369: 
1:eac0369: 	protected DataFactory dataFactory;
1:eac0369: 	protected InputStream in;
1:eac0369: 
1:eac0369: 	public DecryptInputStream(InputStream in, ByteHolder bh, DataFactory dataFactory)
1:eac0369: 		throws IOException {
1:eac0369: 
1:eac0369: 		super(bh);
1:eac0369: 		this.in = in;
1:eac0369: 		this.dataFactory = dataFactory;
1:eac0369: 		fillByteHolder();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void fillByteHolder() throws IOException {
1:eac0369: 
1:eac0369: 		if (this.bh.available() == 0) {
1:eac0369: 
1:eac0369: 			this.bh.clear();
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				// from the stream, read the actual length of the bytes
1:eac0369: 				// before it was padded and encrypted.
1:eac0369: 				int realLen = CompressedNumber.readInt(in);
1:eac0369: 				// if it is -1, we have reached the end of the file.
1:eac0369: 				// then we are done.
1:eac0369: 				if (realLen == -1)
1:eac0369: 					return;
1:eac0369: 
1:eac0369: 				// calculate out what the padding was based on the actual length
1:eac0369: 				int tail = realLen % dataFactory.getEncryptionBlockSize();
1:eac0369: 				int padding = (tail == 0) ? 0 : (dataFactory.getEncryptionBlockSize() - tail);
1:eac0369: 				int encryptedLen = realLen + padding;
1:eac0369: 
1:eac0369: 				// read all encrypted data including the padding.
1:eac0369: 				byte[] ciphertext = new byte[encryptedLen];
1:eac0369: 				in.read(ciphertext, 0, encryptedLen);
1:eac0369: 				byte[] cleartext = new byte[encryptedLen];
1:eac0369: 				// decrypt the data, and stored it in a new byte array.
1:eac0369: 				dataFactory.decrypt(ciphertext, 0, encryptedLen, cleartext, 0);
1:eac0369: 
1:eac0369: 				// only put the actual data without the padding into the byte holder.
1:eac0369: 				bh.write(cleartext, padding, realLen);
1:eac0369: 
1:eac0369: 			} catch (StandardException se) {
1:eac0369: 				throw new IOException();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// allow reading from the byte holder.
1:eac0369: 			this.bh.startReading();
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.DecryptInputStream
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.store.raw.data.DataFactory;
1: import org.apache.derby.iapi.store.raw.RawStoreFactory;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: 
1: import java.io.InputStream;
1: import java.io.IOException;
1: 
1: /**
1: 	A DecryptInputStream is used by stream container to access an encrypted
1: 	stream of bytes.
1: */
1: public class DecryptInputStream extends BufferedByteHolderInputStream {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 
1: 	// if database is encrypted, bytes to reserve at the beginning of the buffer
1: 	//protected static final int ENCRYPTION_RESERVE = dataFactory.getEncryptionBlockSize() - 1;
1: 
1: 	protected DataFactory dataFactory;
1: 	protected InputStream in;
1: 
1: 	public DecryptInputStream(InputStream in, ByteHolder bh, DataFactory dataFactory)
1: 		throws IOException {
1: 
1: 		super(bh);
1: 		this.in = in;
1: 		this.dataFactory = dataFactory;
1: 		fillByteHolder();
1: 	}
1: 
1: 	public void fillByteHolder() throws IOException {
1: 
1: 		if (this.bh.available() == 0) {
1: 
1: 			this.bh.clear();
1: 
1: 			try {
1: 				// from the stream, read the actual length of the bytes
1: 				// before it was padded and encrypted.
1: 				int realLen = CompressedNumber.readInt(in);
1: 				// if it is -1, we have reached the end of the file.
1: 				// then we are done.
1: 				if (realLen == -1)
1: 					return;
1: 
1: 				// calculate out what the padding was based on the actual length
1: 				int tail = realLen % dataFactory.getEncryptionBlockSize();
1: 				int padding = (tail == 0) ? 0 : (dataFactory.getEncryptionBlockSize() - tail);
1: 				int encryptedLen = realLen + padding;
1: 
1: 				// read all encrypted data including the padding.
1: 				byte[] ciphertext = new byte[encryptedLen];
1: 				in.read(ciphertext, 0, encryptedLen);
1: 				byte[] cleartext = new byte[encryptedLen];
1: 				// decrypt the data, and stored it in a new byte array.
1: 				dataFactory.decrypt(ciphertext, 0, encryptedLen, cleartext, 0);
1: 
1: 				// only put the actual data without the padding into the byte holder.
1: 				bh.write(cleartext, padding, realLen);
1: 
1: 			} catch (StandardException se) {
1: 				throw new IOException();
1: 			}
1: 
1: 			// allow reading from the byte holder.
1: 			this.bh.startReading();
1: 		}
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.store.raw.data.DataFactory;
0: import org.apache.derby.iapi.store.raw.RawStoreFactory;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: 
0: import java.io.InputStream;
0: import java.io.IOException;
0: 
0: /**
0: 	A DecryptInputStream is used by stream container to access an encrypted
0: 	stream of bytes.
0: */
0: public class DecryptInputStream extends BufferedByteHolderInputStream {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 
0: 	// if database is encrypted, bytes to reserve at the beginning of the buffer
0: 	//protected static final int ENCRYPTION_RESERVE = dataFactory.getEncryptionBlockSize() - 1;
0: 
0: 	protected DataFactory dataFactory;
0: 	protected InputStream in;
0: 
0: 	public DecryptInputStream(InputStream in, ByteHolder bh, DataFactory dataFactory)
0: 		throws IOException {
0: 
0: 		super(bh);
0: 		this.in = in;
0: 		this.dataFactory = dataFactory;
0: 		fillByteHolder();
0: 	}
0: 
0: 	public void fillByteHolder() throws IOException {
0: 
0: 		if (this.bh.available() == 0) {
0: 
0: 			this.bh.clear();
0: 
0: 			try {
0: 				// from the stream, read the actual length of the bytes
0: 				// before it was padded and encrypted.
0: 				int realLen = CompressedNumber.readInt(in);
0: 				// if it is -1, we have reached the end of the file.
0: 				// then we are done.
0: 				if (realLen == -1)
0: 					return;
0: 
0: 				// calculate out what the padding was based on the actual length
0: 				int tail = realLen % dataFactory.getEncryptionBlockSize();
0: 				int padding = (tail == 0) ? 0 : (dataFactory.getEncryptionBlockSize() - tail);
0: 				int encryptedLen = realLen + padding;
0: 
0: 				// read all encrypted data including the padding.
0: 				byte[] ciphertext = new byte[encryptedLen];
0: 				in.read(ciphertext, 0, encryptedLen);
0: 				byte[] cleartext = new byte[encryptedLen];
0: 				// decrypt the data, and stored it in a new byte array.
0: 				dataFactory.decrypt(ciphertext, 0, encryptedLen, cleartext, 0);
0: 
0: 				// only put the actual data without the padding into the byte holder.
0: 				bh.write(cleartext, padding, realLen);
0: 
0: 			} catch (StandardException se) {
0: 				throw new IOException();
0: 			}
0: 
0: 			// allow reading from the byte holder.
0: 			this.bh.startReading();
0: 		}
0: 	}
0: }
============================================================================