1:ff22a62: /*
1:ff22a62: 
1:ff22a62:    Derby - Class org.apache.derbyDemo.scores.proc.Procedures
1:ff22a62: 
1:ff22a62:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ff22a62:    contributor license agreements.  See the NOTICE file distributed with
1:ff22a62:    this work for additional information regarding copyright ownership.
1:ff22a62:    The ASF licenses this file to You under the Apache License, Version 2.0
1:ff22a62:    (the "License"); you may not use this file except in compliance with
1:ff22a62:    the License.  You may obtain a copy of the License at
1:ff22a62: 
1:ff22a62:       http://www.apache.org/licenses/LICENSE-2.0
1:ff22a62: 
1:ff22a62:    Unless required by applicable law or agreed to in writing, software
1:ff22a62:    distributed under the License is distributed on an "AS IS" BASIS,
1:ff22a62:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff22a62:    See the License for the specific language governing permissions and
1:ff22a62:    limitations under the License.
1:ff22a62: 
1:ff22a62:  */
1:ff22a62: 
1:ff22a62: package org.apache.derbyDemo.scores.proc;
1:ff22a62: 
1:ff22a62: import java.sql.*;
1:ff22a62: 
1:ff22a62: import org.apache.derbyDemo.scores.util.*;
1:ff22a62: 
1:ff22a62: /**
1:ff22a62:  * <p>
1:ff22a62:  * Procedures used by the Scores application.
1:ff22a62:  * </p>
1:ff22a62:  *
1:ff22a62:  */
1:ff22a62: public  class   Procedures
1:ff22a62: {
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTANTS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATE
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     private static  int     _scoringCount = 0;
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATIC BEHAVIOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Score a test run and update TestTaking with the score.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    ScoreTestTaking( int takingID )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Connection          conn = Functions.getDefaultConnection();
1:ff22a62:         Logger              log = Logger.getLogger();
1:ff22a62:         boolean             loggingEnabled = log.isLoggingEnabled();
1:ff22a62: 
1:ff22a62:         try {
1:ff22a62:             //
1:ff22a62:             // Only print out the first test taking.
1:ff22a62:             // They all look alike.
1:ff22a62:             //
1:ff22a62:             if ( _scoringCount > 0 ) { log.enableLogging( false ); }
1:ff22a62: 
1:ff22a62:             log.log
1:ff22a62:                 (
1:ff22a62:                  "Trigger has just fired and started " +
1:ff22a62:                  "the ScoreTestTaking procedure.\n"
1:ff22a62:                  ); 
1:ff22a62: 
1:ff22a62:             PreparedStatement   ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "select \n" +
1:ff22a62:                  " sum( weighQuestion( q.difficulty ) ),\n" +
1:ff22a62:                  " sum( scoreAnswer( q.difficulty, q.numberOfChoices," +
1:ff22a62:                  " q.correctChoice, qt.actualChoice ) )\n" +
1:ff22a62:                  "from Question q, QuestionTaking qt\n" +
1:ff22a62:                  "where q.questionID = qt.questionID\n" +
1:ff22a62:                  "and qt.takingID = ?\n"
1:ff22a62:                  );
1:ff22a62:             ps.setInt( 1, takingID );
1:ff22a62: 
1:ff22a62:             ResultSet           rs = ps.executeQuery();
1:ff22a62: 
1:ff22a62:             rs.next();
1:ff22a62:         
1:ff22a62:             int                 column = 1;
1:ff22a62:             double              allCorrect = rs.getDouble( column++ );
1:ff22a62:             double              actual = rs.getDouble( column++ );
1:ff22a62:             double              score = Utils.finishScore
1:ff22a62:                 ( allCorrect, actual );
1:ff22a62: 
1:ff22a62:             Utils.close( rs );
1:ff22a62:             Utils.close( ps );
1:ff22a62: 
1:ff22a62:             int                 param = 1;
1:ff22a62:             ps = Utils.prepare
1:ff22a62:                 (
1:ff22a62:                  conn,
1:ff22a62:                  "update TestTaking set score = ? where takingID = ?\n"
1:ff22a62:              );
1:ff22a62:             ps.setDouble( param++, score );
1:ff22a62:             ps.setInt( param++, takingID );
1:ff22a62:             ps.executeUpdate();
1:ff22a62: 
1:ff22a62:             Utils.close( ps );
1:ff22a62: 
1:ff22a62:         }
1:ff22a62:         finally
1:ff22a62:         {
1:ff22a62:             log.enableLogging( loggingEnabled );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         _scoringCount++;
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // MINIONS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62: 
1:ff22a62: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ff22a62
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyDemo.scores.proc.Procedures
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyDemo.scores.proc;
1: 
1: import java.sql.*;
1: 
1: import org.apache.derbyDemo.scores.util.*;
1: 
1: /**
1:  * <p>
1:  * Procedures used by the Scores application.
1:  * </p>
1:  *
0:  * @author Rick Hillegas
1:  */
1: public  class   Procedures
1: {
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     private static  int     _scoringCount = 0;
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATIC BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Score a test run and update TestTaking with the score.
1:      * </p>
1:      */
1:     public  static  void    ScoreTestTaking( int takingID )
1:         throws SQLException
1:     {
1:         Connection          conn = Functions.getDefaultConnection();
1:         Logger              log = Logger.getLogger();
1:         boolean             loggingEnabled = log.isLoggingEnabled();
1: 
1:         try {
1:             //
1:             // Only print out the first test taking.
1:             // They all look alike.
1:             //
1:             if ( _scoringCount > 0 ) { log.enableLogging( false ); }
1: 
1:             log.log
1:                 (
1:                  "Trigger has just fired and started " +
1:                  "the ScoreTestTaking procedure.\n"
1:                  ); 
1: 
1:             PreparedStatement   ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "select \n" +
1:                  " sum( weighQuestion( q.difficulty ) ),\n" +
1:                  " sum( scoreAnswer( q.difficulty, q.numberOfChoices," +
1:                  " q.correctChoice, qt.actualChoice ) )\n" +
1:                  "from Question q, QuestionTaking qt\n" +
1:                  "where q.questionID = qt.questionID\n" +
1:                  "and qt.takingID = ?\n"
1:                  );
1:             ps.setInt( 1, takingID );
1: 
1:             ResultSet           rs = ps.executeQuery();
1: 
1:             rs.next();
1:         
1:             int                 column = 1;
1:             double              allCorrect = rs.getDouble( column++ );
1:             double              actual = rs.getDouble( column++ );
1:             double              score = Utils.finishScore
1:                 ( allCorrect, actual );
1: 
1:             Utils.close( rs );
1:             Utils.close( ps );
1: 
1:             int                 param = 1;
1:             ps = Utils.prepare
1:                 (
1:                  conn,
1:                  "update TestTaking set score = ? where takingID = ?\n"
1:              );
1:             ps.setDouble( param++, score );
1:             ps.setInt( param++, takingID );
1:             ps.executeUpdate();
1: 
1:             Utils.close( ps );
1: 
1:         }
1:         finally
1:         {
1:             log.enableLogging( loggingEnabled );
1:         }
1: 
1:         _scoringCount++;
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1: 
1: }
============================================================================