1:eac0369: /*
3:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.StatementTriggerExecutor
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * A statement trigger executor is an object that executes
1:eac0369:  * a statement trigger.  It is instantiated at execution
1:eac0369:  * time.  There is one per statement trigger.
1:eac0369:  */
1:05623b6: class StatementTriggerExecutor extends GenericTriggerExecutor
3:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Constructor
1:eac0369: 	 *
1:eac0369: 	 * @param tec the execution context
1:eac0369: 	 * @param triggerd the trigger descriptor
1:eac0369: 	 * @param activation the activation
1:eac0369: 	 * @param lcc the lcc
1:eac0369: 	 */
1:eac0369: 	StatementTriggerExecutor
1:eac0369: 	(
1:eac0369: 		InternalTriggerExecutionContext tec, 
1:eac0369: 		TriggerDescriptor 				triggerd,
1:eac0369: 		Activation						activation,
1:eac0369: 		LanguageConnectionContext		lcc
1:eac0369: 	)
1:eac0369: 	{
1:eac0369: 		super(tec, triggerd, activation, lcc);
4:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Fire the trigger based on the event.
1:eac0369: 	 *
1:eac0369: 	 * @param event	the trigger event
1:eac0369: 	 * @param brs   the before result set
1:eac0369: 	 * @param ars   the after result set
1:d9d1bc8: 	 * @param colsReadFromTable   columns required from the trigger table
1:d9d1bc8: 	 *   by the triggering sql
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException on error or general trigger
1:eac0369: 	 *	exception
1:eac0369: 	 */
1:eac0369: 	void fireTrigger 
1:eac0369: 	(
1:eac0369: 		TriggerEvent 		event, 
1:eac0369: 		CursorResultSet 	brs, 
1:d9d1bc8: 		CursorResultSet 	ars,
1:d9d1bc8: 		int[] colsReadFromTable
1:eac0369: 	) throws StandardException
1:eac0369: 	{
1:eac0369: 		tec.setTrigger(triggerd);
1:eac0369: 		tec.setBeforeResultSet(brs);
1:eac0369: 		tec.setAfterResultSet(ars);
1:1725dd1: 
1:db60062:         try {
1:db60062:             executeWhenClauseAndAction();
1:db60062:         } finally {
1:db60062:             clearSPS();
1:db60062:             tec.clearTrigger();
1:1725dd1:         }
1:1725dd1: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:db60062
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             executeWhenClauseAndAction();
1:         } finally {
1:             clearSPS();
1:             tec.clearTrigger();
commit:1725dd1
/////////////////////////////////////////////////////////////////////////
1: 
0:         // Execute the trigger action only if the WHEN clause returns
0:         // TRUE or there is no WHEN clause.
0:         if (executeWhenClause()) {
0:             try {
0:                 executeSPS(getAction(), false);
0:             } finally {
0:                 clearSPS();
0:                 tec.clearTrigger();
1:             }
1:         }
commit:05623b6
/////////////////////////////////////////////////////////////////////////
1: class StatementTriggerExecutor extends GenericTriggerExecutor
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
0: public class StatementTriggerExecutor extends GenericTriggerExecutor
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:d9d1bc8
/////////////////////////////////////////////////////////////////////////
1: 	 * @param colsReadFromTable   columns required from the trigger table
1: 	 *   by the triggering sql
/////////////////////////////////////////////////////////////////////////
1: 		CursorResultSet 	ars,
1: 		int[] colsReadFromTable
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:88bb146
/////////////////////////////////////////////////////////////////////////
0: class StatementTriggerExecutor extends GenericTriggerExecutor
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.StatementTriggerExecutor
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.execute.CursorResultSet;
1: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: /**
1:  * A statement trigger executor is an object that executes
1:  * a statement trigger.  It is instantiated at execution
1:  * time.  There is one per statement trigger.
1:  */
0: public class StatementTriggerExecutor extends GenericTriggerExecutor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	/**
1: 	 * Constructor
1: 	 *
1: 	 * @param tec the execution context
1: 	 * @param triggerd the trigger descriptor
1: 	 * @param activation the activation
1: 	 * @param lcc the lcc
1: 	 */
1: 	StatementTriggerExecutor
1: 	(
1: 		InternalTriggerExecutionContext tec, 
1: 		TriggerDescriptor 				triggerd,
1: 		Activation						activation,
1: 		LanguageConnectionContext		lcc
1: 	)
1: 	{
1: 		super(tec, triggerd, activation, lcc);
1: 	}
1: 
1: 	/**
1: 	 * Fire the trigger based on the event.
1: 	 *
1: 	 * @param event	the trigger event
1: 	 * @param brs   the before result set
1: 	 * @param ars   the after result set
1: 	 *
1: 	 * @exception StandardException on error or general trigger
1: 	 *	exception
1: 	 */
1: 	void fireTrigger 
1: 	(
1: 		TriggerEvent 		event, 
1: 		CursorResultSet 	brs, 
0: 		CursorResultSet 	ars
1: 	) throws StandardException
1: 	{
1: 		tec.setTrigger(triggerd);
1: 		tec.setBeforeResultSet(brs);
1: 		tec.setAfterResultSet(ars);
1: 		
0: 		try
1: 		{
0: 			executeSPS(getAction());
1: 		}
0: 		finally
1: 		{
0: 			clearSPS();
0: 			tec.clearTrigger();	
1: 		}
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.CursorResultSet;
0: import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: /**
0:  * A statement trigger executor is an object that executes
0:  * a statement trigger.  It is instantiated at execution
0:  * time.  There is one per statement trigger.
0:  */
0: public class StatementTriggerExecutor extends GenericTriggerExecutor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	/**
0: 	 * Constructor
0: 	 *
0: 	 * @param tec the execution context
0: 	 * @param triggerd the trigger descriptor
0: 	 * @param activation the activation
0: 	 * @param lcc the lcc
0: 	 */
0: 	StatementTriggerExecutor
0: 	(
0: 		InternalTriggerExecutionContext tec, 
0: 		TriggerDescriptor 				triggerd,
0: 		Activation						activation,
0: 		LanguageConnectionContext		lcc
0: 	)
0: 	{
0: 		super(tec, triggerd, activation, lcc);
0: 	}
0: 
0: 	/**
0: 	 * Fire the trigger based on the event.
0: 	 *
0: 	 * @param event	the trigger event
0: 	 * @param brs   the before result set
0: 	 * @param ars   the after result set
0: 	 *
0: 	 * @exception StandardException on error or general trigger
0: 	 *	exception
0: 	 */
0: 	void fireTrigger 
0: 	(
0: 		TriggerEvent 		event, 
0: 		CursorResultSet 	brs, 
0: 		CursorResultSet 	ars
0: 	) throws StandardException
0: 	{
0: 		tec.setTrigger(triggerd);
0: 		tec.setBeforeResultSet(brs);
0: 		tec.setAfterResultSet(ars);
0: 		
0: 		try
0: 		{
0: 			executeSPS(getAction());
0: 		}
0: 		finally
0: 		{
0: 			clearSPS();
0: 			tec.clearTrigger();	
0: 		}
0: 	}
0: }
============================================================================