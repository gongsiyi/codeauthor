1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc.authentication;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.MessageId;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.jdbc.AuthenticationService;
1:eac0369: import org.apache.derby.authentication.UserAuthenticator;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This authentication service does not care much about authentication.
1:eac0369:  * <p>
1:eac0369:  * It is a quiescient authentication service that will basically satisfy
1:eac0369:  * any authentication request, as JBMS system was not instructed to have any
1:eac0369:  * particular authentication scheme to be loaded at boot-up time.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public final class NoneAuthenticationServiceImpl
1:eac0369: 	extends AuthenticationServiceBase implements UserAuthenticator {
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ModuleControl implementation (overriden)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *  Check if we should activate this authentication service.
1:eac0369: 	 */
1:eac0369: 	public boolean canSupport(Properties properties) {
1:eac0369: 
1:eac0369: 		return !requireAuthentication(properties);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1:eac0369: 	 * @exception StandardException upon failure to load/boot the expected
1:eac0369: 	 * authentication service.
1:eac0369: 	 */
1:eac0369: 	public void boot(boolean create, Properties properties) 
1:eac0369: 	  throws StandardException {
1:eac0369: 
1:eac0369: 		// we call the super in case there is anything to get initialized.
1:eac0369:  		super.boot(create, properties);
1:eac0369: 
1:eac0369: 		// nothing special to be done, other than setting other than
1:eac0369: 		// setting ourselves as being ready and loading the proper
1:eac0369: 		// authentication scheme for this service
1:eac0369: 		//.
1:eac0369: 		this.setAuthenticationService(this);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** UserAuthenticator
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Authenticate the passed-in user's credentials.
1:eac0369: 	 *
1:eac0369: 	 * @param userName		The user's name used to connect to JBMS system
1:eac0369: 	 * @param userPassword	The user's password used to connect to JBMS system
1:eac0369: 	 * @param databaseName	The database which the user wants to connect to.
1:eac0369: 	 * @param info			Additional jdbc connection info.
1:eac0369: 	 */
1:eac0369: 	public boolean	authenticateUser(String userName,
1:eac0369: 								 String userPassword,
1:eac0369: 								 String databaseName,
1:eac0369: 								 Properties info
1:eac0369: 									)
1:eac0369: 	{
1:eac0369: 		// Since this authentication service does not really provide
1:eac0369: 		// any particular authentication, therefore we satisfy the request.
1:eac0369: 		// and always authenticate successfully the user.
1:eac0369: 		//
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc.authentication;
1: 
1: import org.apache.derby.iapi.reference.MessageId;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
1: import org.apache.derby.iapi.jdbc.AuthenticationService;
1: import org.apache.derby.authentication.UserAuthenticator;
1: 
1: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
1: import java.util.Properties;
1: 
1: /**
1:  * This authentication service does not care much about authentication.
1:  * <p>
1:  * It is a quiescient authentication service that will basically satisfy
1:  * any authentication request, as JBMS system was not instructed to have any
1:  * particular authentication scheme to be loaded at boot-up time.
1:  *
0:  * @author Francois
1:  */
1: public final class NoneAuthenticationServiceImpl
1: 	extends AuthenticationServiceBase implements UserAuthenticator {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	//
1: 	// ModuleControl implementation (overriden)
1: 	//
1: 
1: 	/**
1: 	 *  Check if we should activate this authentication service.
1: 	 */
1: 	public boolean canSupport(Properties properties) {
1: 
1: 		return !requireAuthentication(properties);
1: 	}
1: 
1: 	/**
1: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
1: 	 * @exception StandardException upon failure to load/boot the expected
1: 	 * authentication service.
1: 	 */
1: 	public void boot(boolean create, Properties properties) 
1: 	  throws StandardException {
1: 
1: 		// we call the super in case there is anything to get initialized.
1:  		super.boot(create, properties);
1: 
1: 		// nothing special to be done, other than setting other than
1: 		// setting ourselves as being ready and loading the proper
1: 		// authentication scheme for this service
1: 		//.
1: 		this.setAuthenticationService(this);
1: 	}
1: 
1: 	/*
1: 	** UserAuthenticator
1: 	*/
1: 
1: 	/**
1: 	 * Authenticate the passed-in user's credentials.
1: 	 *
1: 	 * @param userName		The user's name used to connect to JBMS system
1: 	 * @param userPassword	The user's password used to connect to JBMS system
1: 	 * @param databaseName	The database which the user wants to connect to.
1: 	 * @param info			Additional jdbc connection info.
1: 	 */
1: 	public boolean	authenticateUser(String userName,
1: 								 String userPassword,
1: 								 String databaseName,
1: 								 Properties info
1: 									)
1: 	{
1: 		// Since this authentication service does not really provide
1: 		// any particular authentication, therefore we satisfy the request.
1: 		// and always authenticate successfully the user.
1: 		//
1: 		return true;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc.authentication
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc.authentication;
0: 
0: import org.apache.derby.iapi.reference.MessageId;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: 
0: import org.apache.derby.iapi.jdbc.AuthenticationService;
0: import org.apache.derby.authentication.UserAuthenticator;
0: 
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: 
0: import java.util.Properties;
0: 
0: /**
0:  * This authentication service does not care much about authentication.
0:  * <p>
0:  * It is a quiescient authentication service that will basically satisfy
0:  * any authentication request, as JBMS system was not instructed to have any
0:  * particular authentication scheme to be loaded at boot-up time.
0:  *
0:  * @author Francois
0:  */
0: public final class NoneAuthenticationServiceImpl
0: 	extends AuthenticationServiceBase implements UserAuthenticator {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	//
0: 	// ModuleControl implementation (overriden)
0: 	//
0: 
0: 	/**
0: 	 *  Check if we should activate this authentication service.
0: 	 */
0: 	public boolean canSupport(Properties properties) {
0: 
0: 		return !requireAuthentication(properties);
0: 	}
0: 
0: 	/**
0: 	 * @see org.apache.derby.iapi.services.monitor.ModuleControl#boot
0: 	 * @exception StandardException upon failure to load/boot the expected
0: 	 * authentication service.
0: 	 */
0: 	public void boot(boolean create, Properties properties) 
0: 	  throws StandardException {
0: 
0: 		// we call the super in case there is anything to get initialized.
0:  		super.boot(create, properties);
0: 
0: 		// nothing special to be done, other than setting other than
0: 		// setting ourselves as being ready and loading the proper
0: 		// authentication scheme for this service
0: 		//.
0: 		this.setAuthenticationService(this);
0: 	}
0: 
0: 	/*
0: 	** UserAuthenticator
0: 	*/
0: 
0: 	/**
0: 	 * Authenticate the passed-in user's credentials.
0: 	 *
0: 	 * @param userName		The user's name used to connect to JBMS system
0: 	 * @param userPassword	The user's password used to connect to JBMS system
0: 	 * @param databaseName	The database which the user wants to connect to.
0: 	 * @param info			Additional jdbc connection info.
0: 	 */
0: 	public boolean	authenticateUser(String userName,
0: 								 String userPassword,
0: 								 String databaseName,
0: 								 Properties info
0: 									)
0: 	{
0: 		// Since this authentication service does not really provide
0: 		// any particular authentication, therefore we satisfy the request.
0: 		// and always authenticate successfully the user.
0: 		//
0: 		return true;
0: 	}
0: 
0: }
============================================================================