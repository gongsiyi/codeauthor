1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.jdbc.EmbedParameterSetMetaData
1:345de35: 
1:88a3cb9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:88a3cb9:    contributor license agreements.  See the NOTICE file distributed with
1:88a3cb9:    this work for additional information regarding copyright ownership.
1:88a3cb9:    The ASF licenses this file to you under the Apache License, Version 2.0
1:88a3cb9:    (the "License"); you may not use this file except in compliance with
1:88a3cb9:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.jdbc;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.ParameterValueSet;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:eac0369: import org.apache.derby.iapi.types.DataTypeUtilities;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:e33b8d8: import java.sql.ParameterMetaData;
1:eac0369: import java.sql.SQLException;
1:eac0369: 
2:eac0369: /**
1:8514aa2:  * This class implements the ParameterMetaData interface from JDBC 3.0.
1:eac0369:  */
1:8514aa2: public class EmbedParameterSetMetaData implements ParameterMetaData {
1:eac0369: 
1:eac0369:     private final ParameterValueSet pvs;
1:eac0369:     private final DataTypeDescriptor[] types;
1:eac0369:     private final int paramCount;
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	// CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////
1:eac0369:     protected EmbedParameterSetMetaData(ParameterValueSet pvs, DataTypeDescriptor[] types)  {
1:eac0369: 		int paramCount;
1:1260b94: 		paramCount = pvs.getParameterCount();
1:eac0369: 		this.pvs = pvs;
1:eac0369: 		this.paramCount = paramCount;
1:eac0369: 		this.types = types;
2:eac0369: 	}
1:eac0369: 	/**
3:eac0369:     *
1:eac0369:     * Retrieves the number of parameters in the PreparedStatement object for which
1:eac0369:     * this ParameterMetaData object contains information.
1:eac0369:     *
1:eac0369:     * @return the number of parameters
1:eac0369:     */
1:eac0369:     public int getParameterCount() {
1:eac0369:    		return paramCount;
1:eac0369:     }
1:8514aa2: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves whether null values are allowed in the designated parameter.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return the nullability status of the given parameter; one of
1:eac0369:     * ParameterMetaData.parameterNoNulls, ParameterMetaData.parameterNullable, or
1:eac0369:     * ParameterMetaData.parameterNullableUnknown
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public int isNullable(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369:    		if (types[param - 1].isNullable())
1:e33b8d8:             return (ParameterMetaData.parameterNullable);
1:eac0369:    		else
1:e33b8d8:             return (ParameterMetaData.parameterNoNulls);
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves whether values for the designated parameter can be signed numbers.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return true if it can be signed numbers
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public boolean isSigned(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369:    		return types[param - 1].getTypeId().isNumericTypeId();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the designated parameter's number of decimal digits.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return precision
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public int getPrecision(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369: 		int outparamPrecision = -1;
1:eac0369: 	   
1:eac0369:    		if (((param == 1) && pvs.hasReturnOutputParameter()))
2:eac0369: 		{
1:eac0369: 			outparamPrecision = pvs.getPrecision(param);
1:eac0369: 		}
1:eac0369: 
1:39244bf:         if (outparamPrecision == -1)
1:39244bf:         {
1:39244bf:             return DataTypeUtilities.getPrecision(types[param - 1]);
1:39244bf:         }
1:eac0369: 
1:39244bf: 		return outparamPrecision;
1:eac0369:     }
1:eac0369: 		
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the designated parameter's number of digits to right of the decimal point.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return scale
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public int getScale(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369: 		if (((param == 1) && pvs.hasReturnOutputParameter()))
1:eac0369: 			return pvs.getScale(param);
1:eac0369:    		return types[param - 1].getScale();
1:eac0369: 
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the designated parameter's SQL type.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return SQL type from java.sql.Types
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public int getParameterType(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369:    		return types[param - 1].getTypeId().getJDBCTypeId();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the designated parameter's database-specific type name.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return type the name used by the database. If the parameter
1:eac0369:     * type is a user-defined type, then a fully-qualified type name is returned.
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public String getParameterTypeName(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369:    		return types[param - 1].getTypeId().getSQLTypeName();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the fully-qualified name of the Java class whose instances should be
1:eac0369:     * passed to the method PreparedStatement.setObject.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return the fully-qualified name of the class in the Java
1:eac0369:     * programming language that would be used by the method
1:eac0369:     * PreparedStatement.setObject to set the value in the specified parameter.
1:eac0369:     * This is the class name used for custom mapping.
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public String getParameterClassName(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369:    		return types[param - 1].getTypeId().getResultSetMetaDataTypeName();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	/**
1:eac0369:     *
1:eac0369:     * Retrieves the designated parameter's mode.
1:eac0369:     *
1:eac0369:     * @param param - the first parameter is 1, the second is 2, ...
1:eac0369:     * @return mode of the parameter; one of ParameterMetaData.parameterModeIn,
1:eac0369:     * ParameterMetaData.parameterModeOut, or ParameterMetaData.parameterModeInOut
1:eac0369:     * ParameterMetaData.parameterModeUnknown.
1:eac0369:     * @exception SQLException if a database access error occurs
1:eac0369:     */
1:eac0369:     public int getParameterMode(int param) throws SQLException {
1:eac0369:    		checkPosition(param);
1:eac0369: 
1:eac0369:    		//bug 4857 - only the return parameter is of type OUT. All the other output
1:eac0369:    		//parameter are IN_OUT (it doesn't matter if their value is set or not).
1:eac0369:    		if ((param == 1) && pvs.hasReturnOutputParameter())//only the first parameter can be of return type
1:e33b8d8:                 return (ParameterMetaData.parameterModeOut);
1:eac0369:    		return pvs.getParameterMode(param);
1:eac0369:     }
1:eac0369: 
1:eac0369: 
1:eac0369:     // Check the position number for a parameter and throw an exception if
1:eac0369:     // it is out of range.
1:eac0369:     private void checkPosition(int parameterIndex) throws SQLException {
1:eac0369:    		/* Check that the parameterIndex is in range. */
1:eac0369:    		if (parameterIndex < 1 ||
1:eac0369: 				parameterIndex > paramCount) {
1:eac0369: 
1:eac0369: 			/* This message matches the one used by the DBMS */
1:eac0369: 			throw Util.generateCsSQLException(
1:eac0369:             SQLState.LANG_INVALID_PARAM_POSITION,
1:ce40a31:             parameterIndex, paramCount);
1:eac0369: 		}
1:eac0369:     }
1:eac0369: 
1:8514aa2:     // java.sql.Wrapper interface methods
1:8514aa2: 
1:8514aa2:     /**
1:8514aa2:      * Returns false unless {@code iface} is implemented.
1:8514aa2:      *
1:8514aa2:      * @param iface a class defining an interface
1:8514aa2:      * @return true if this implements the interface or directly or indirectly
1:8514aa2:      * wraps an object that does
1:8514aa2:      * @throws SQLException if an error occurs while determining whether this is
1:8514aa2:      * a wrapper for an object with the given interface.
1:8514aa2:      */
1:8514aa2:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:8514aa2:         return iface.isInstance(this);
1:8514aa2:     }
1:8514aa2: 
1:8514aa2:     /**
1:8514aa2:      * Returns {@code this} if this class implements the specified interface.
1:8514aa2:      *
1:8514aa2:      * @param iface a class defining an interface
1:8514aa2:      * @return an object that implements the interface
1:8514aa2:      * @throws SQLException if no object is found that implements the interface
1:8514aa2:      */
1:8514aa2:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:8514aa2:         // Derby does not implement non-standard methods on JDBC objects,
1:8514aa2:         // hence return this if this class implements the interface, or
1:8514aa2:         // throw an SQLException.
1:8514aa2:         try {
1:8514aa2:             return iface.cast(this);
1:8514aa2:         } catch (ClassCastException cce) {
1:8514aa2:             throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP, iface);
1:8514aa2:         }
1:8514aa2:     }
1:8514aa2: 
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:             parameterIndex, paramCount);
commit:88a3cb9
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:8514aa2
/////////////////////////////////////////////////////////////////////////
1:  * This class implements the ParameterMetaData interface from JDBC 3.0.
1: public class EmbedParameterSetMetaData implements ParameterMetaData {
/////////////////////////////////////////////////////////////////////////
1: 
1:     // java.sql.Wrapper interface methods
1: 
1:     /**
1:      * Returns false unless {@code iface} is implemented.
1:      *
1:      * @param iface a class defining an interface
1:      * @return true if this implements the interface or directly or indirectly
1:      * wraps an object that does
1:      * @throws SQLException if an error occurs while determining whether this is
1:      * a wrapper for an object with the given interface.
1:      */
1:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:         return iface.isInstance(this);
1:     }
1: 
1:     /**
1:      * Returns {@code this} if this class implements the specified interface.
1:      *
1:      * @param iface a class defining an interface
1:      * @return an object that implements the interface
1:      * @throws SQLException if no object is found that implements the interface
1:      */
1:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:         // Derby does not implement non-standard methods on JDBC objects,
1:         // hence return this if this class implements the interface, or
1:         // throw an SQLException.
1:         try {
1:             return iface.cast(this);
1:         } catch (ClassCastException cce) {
1:             throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP, iface);
1:         }
1:     }
1: 
commit:e33b8d8
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ParameterMetaData;
/////////////////////////////////////////////////////////////////////////
1:             return (ParameterMetaData.parameterNullable);
1:             return (ParameterMetaData.parameterNoNulls);
/////////////////////////////////////////////////////////////////////////
1:                 return (ParameterMetaData.parameterModeOut);
author:Lily Wei
-------------------------------------------------------------------------------
commit:39244bf
/////////////////////////////////////////////////////////////////////////
1:         if (outparamPrecision == -1)
1:         {
1:             return DataTypeUtilities.getPrecision(types[param - 1]);
1:         }
1: 		return outparamPrecision;
author:David Van Couvering
-------------------------------------------------------------------------------
commit:aadfd42
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.jdbc.EngineParameterMetaData;
/////////////////////////////////////////////////////////////////////////
0:  * For use of ParameterMetaData functionality in network server, please do not use
0:  * this class directly. Instead use the method available on EnginePreparedStatement
0:  * @see org.apache.derby.iapi.jdbc.EngineParameterMetaData
0:  * @see org.apache.derby.iapi.jdbc.EnginePreparedStatement
0: public class EmbedParameterSetMetaData implements EngineParameterMetaData
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1260b94
/////////////////////////////////////////////////////////////////////////
1: 		paramCount = pvs.getParameterCount();
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.EmbedParameterSetMetaData
1: 
0:    Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
0: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ParameterValueSet;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.DataTypeUtilities;
0: import org.apache.derby.iapi.reference.JDBC30Translation;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import java.sql.SQLException;
0: import java.sql.Types;
1: 
1: /**
0:  * This class immitates to implement the ParameterMetaData interface from JDBC3.0
0:  * We want to provide the functionality to JDKs before JDBC3.0. We put it here
0:  * instead of in Local20 because we want to make it available for CallableStatement.
0:  * It provides the parameter meta data for callable & prepared statements.
0:  * The subclass in Local30 actually implements ParameterMetaData interface.
1:  *
0:  * Our middle-tier servers or tools (eg. drda network server) can use it this way:
0:  * import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
0:  * import org.apache.derby.impl.jdbc.EmbedParameterSetMetaData;
1:  *
0:  *   EmbedParameterSetMetaData pmeta = ((EmbedPreparedStatement) ps).getEmbedParameterSetMetaData();
1:  */
0: public class EmbedParameterSetMetaData
1:     {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
1: 
1:     private final ParameterValueSet pvs;
1:     private final DataTypeDescriptor[] types;
1:     private final int paramCount;
1: 
1: 	//////////////////////////////////////////////////////////////
1: 	//
1: 	// CONSTRUCTORS
1: 	//
1: 	//////////////////////////////////////////////////////////////
1:     protected EmbedParameterSetMetaData(ParameterValueSet pvs, DataTypeDescriptor[] types)  {
1: 		int paramCount;
0: 		if (pvs.isUsingParameterValueSet()) {
0: 			pvs = null;
0: 			types = null;
0: 			paramCount = 0;
0: 		} else {
0: 			paramCount = pvs.getParameterCount();
1: 		}
1: 		this.pvs = pvs;
1: 		this.paramCount = paramCount;
1: 		this.types = types;
1: 	}
1: 	/**
1:     *
1:     * Retrieves the number of parameters in the PreparedStatement object for which
1:     * this ParameterMetaData object contains information.
1:     *
1:     * @return the number of parameters
1:     */
1:     public int getParameterCount() {
1:    		return paramCount;
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves whether null values are allowed in the designated parameter.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return the nullability status of the given parameter; one of
1:     * ParameterMetaData.parameterNoNulls, ParameterMetaData.parameterNullable, or
1:     * ParameterMetaData.parameterNullableUnknown
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public int isNullable(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1:    		if (types[param - 1].isNullable())
0: 			return JDBC30Translation.PARAMETER_NULLABLE;
1:    		else
0: 			return JDBC30Translation.PARAMETER_NO_NULLS;
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves whether values for the designated parameter can be signed numbers.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return true if it can be signed numbers
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public boolean isSigned(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1:    		return types[param - 1].getTypeId().isNumericTypeId();
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves the designated parameter's number of decimal digits.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return precision
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public int getPrecision(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1: 		int outparamPrecision = -1;
0: 		int precision = DataTypeUtilities.getPrecision(types[param - 1]);
1: 	   
1:    		if (((param == 1) && pvs.hasReturnOutputParameter()))
1: 		{
1: 			outparamPrecision = pvs.getPrecision(param);
1: 		}
1: 
0: 		return (outparamPrecision == -1) ? precision : outparamPrecision;
1: 
1:     }
1: 		
1: 	/**
1:     *
1:     * Retrieves the designated parameter's number of digits to right of the decimal point.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return scale
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public int getScale(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1: 		if (((param == 1) && pvs.hasReturnOutputParameter()))
1: 			return pvs.getScale(param);
1:    		return types[param - 1].getScale();
1: 
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves the designated parameter's SQL type.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return SQL type from java.sql.Types
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public int getParameterType(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1:    		return types[param - 1].getTypeId().getJDBCTypeId();
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves the designated parameter's database-specific type name.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return type the name used by the database. If the parameter
1:     * type is a user-defined type, then a fully-qualified type name is returned.
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public String getParameterTypeName(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1:    		return types[param - 1].getTypeId().getSQLTypeName();
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves the fully-qualified name of the Java class whose instances should be
1:     * passed to the method PreparedStatement.setObject.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return the fully-qualified name of the class in the Java
1:     * programming language that would be used by the method
1:     * PreparedStatement.setObject to set the value in the specified parameter.
1:     * This is the class name used for custom mapping.
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public String getParameterClassName(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1:    		return types[param - 1].getTypeId().getResultSetMetaDataTypeName();
1:     }
1: 
1: 	/**
1:     *
1:     * Retrieves the designated parameter's mode.
1:     *
1:     * @param param - the first parameter is 1, the second is 2, ...
1:     * @return mode of the parameter; one of ParameterMetaData.parameterModeIn,
1:     * ParameterMetaData.parameterModeOut, or ParameterMetaData.parameterModeInOut
1:     * ParameterMetaData.parameterModeUnknown.
1:     * @exception SQLException if a database access error occurs
1:     */
1:     public int getParameterMode(int param) throws SQLException {
1:    		checkPosition(param);
1: 
1:    		//bug 4857 - only the return parameter is of type OUT. All the other output
1:    		//parameter are IN_OUT (it doesn't matter if their value is set or not).
1:    		if ((param == 1) && pvs.hasReturnOutputParameter())//only the first parameter can be of return type
0: 				return JDBC30Translation.PARAMETER_MODE_OUT;
1:    		return pvs.getParameterMode(param);
1:     }
1: 
1: 
1:     // Check the position number for a parameter and throw an exception if
1:     // it is out of range.
1:     private void checkPosition(int parameterIndex) throws SQLException {
1:    		/* Check that the parameterIndex is in range. */
1:    		if (parameterIndex < 1 ||
1: 				parameterIndex > paramCount) {
1: 
1: 			/* This message matches the one used by the DBMS */
1: 			throw Util.generateCsSQLException(
1:             SQLState.LANG_INVALID_PARAM_POSITION,
0:             new Integer(parameterIndex), new Integer(paramCount));
1: 		}
1:     }
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.jdbc
0:    (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.jdbc;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ParameterValueSet;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataTypeUtilities;
0: import org.apache.derby.iapi.reference.JDBC30Translation;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import java.sql.SQLException;
0: import java.sql.Types;
0: 
0: /**
0:  * This class immitates to implement the ParameterMetaData interface from JDBC3.0
0:  * We want to provide the functionality to JDKs before JDBC3.0. We put it here
0:  * instead of in Local20 because we want to make it available for CallableStatement.
0:  * It provides the parameter meta data for callable & prepared statements.
0:  * The subclass in Local30 actually implements ParameterMetaData interface.
0:  *
0:  * Our middle-tier servers or tools (eg. drda network server) can use it this way:
0:  * import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
0:  * import org.apache.derby.impl.jdbc.EmbedParameterSetMetaData;
0:  *
0:  *   EmbedParameterSetMetaData pmeta = ((EmbedPreparedStatement) ps).getEmbedParameterSetMetaData();
0:  */
0: public class EmbedParameterSetMetaData
0:     {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2002_2004;
0: 
0:     private final ParameterValueSet pvs;
0:     private final DataTypeDescriptor[] types;
0:     private final int paramCount;
0: 
0: 	//////////////////////////////////////////////////////////////
0: 	//
0: 	// CONSTRUCTORS
0: 	//
0: 	//////////////////////////////////////////////////////////////
0:     protected EmbedParameterSetMetaData(ParameterValueSet pvs, DataTypeDescriptor[] types)  {
0: 		int paramCount;
0: 		if (pvs.isUsingParameterValueSet()) {
0: 			pvs = null;
0: 			types = null;
0: 			paramCount = 0;
0: 		} else {
0: 			paramCount = pvs.getParameterCount();
0: 		}
0: 		this.pvs = pvs;
0: 		this.paramCount = paramCount;
0: 		this.types = types;
0: 	}
0: 	/**
0:     *
0:     * Retrieves the number of parameters in the PreparedStatement object for which
0:     * this ParameterMetaData object contains information.
0:     *
0:     * @return the number of parameters
0:     */
0:     public int getParameterCount() {
0:    		return paramCount;
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves whether null values are allowed in the designated parameter.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return the nullability status of the given parameter; one of
0:     * ParameterMetaData.parameterNoNulls, ParameterMetaData.parameterNullable, or
0:     * ParameterMetaData.parameterNullableUnknown
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public int isNullable(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0:    		if (types[param - 1].isNullable())
0: 			return JDBC30Translation.PARAMETER_NULLABLE;
0:    		else
0: 			return JDBC30Translation.PARAMETER_NO_NULLS;
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves whether values for the designated parameter can be signed numbers.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return true if it can be signed numbers
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public boolean isSigned(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0:    		return types[param - 1].getTypeId().isNumericTypeId();
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves the designated parameter's number of decimal digits.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return precision
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public int getPrecision(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0: 		int outparamPrecision = -1;
0: 		int precision = DataTypeUtilities.getPrecision(types[param - 1]);
0: 	   
0:    		if (((param == 1) && pvs.hasReturnOutputParameter()))
0: 		{
0: 			outparamPrecision = pvs.getPrecision(param);
0: 		}
0: 
0: 		return (outparamPrecision == -1) ? precision : outparamPrecision;
0: 
0:     }
0: 		
0: 	/**
0:     *
0:     * Retrieves the designated parameter's number of digits to right of the decimal point.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return scale
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public int getScale(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0: 		if (((param == 1) && pvs.hasReturnOutputParameter()))
0: 			return pvs.getScale(param);
0:    		return types[param - 1].getScale();
0: 
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves the designated parameter's SQL type.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return SQL type from java.sql.Types
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public int getParameterType(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0:    		return types[param - 1].getTypeId().getJDBCTypeId();
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves the designated parameter's database-specific type name.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return type the name used by the database. If the parameter
0:     * type is a user-defined type, then a fully-qualified type name is returned.
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public String getParameterTypeName(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0:    		return types[param - 1].getTypeId().getSQLTypeName();
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves the fully-qualified name of the Java class whose instances should be
0:     * passed to the method PreparedStatement.setObject.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return the fully-qualified name of the class in the Java
0:     * programming language that would be used by the method
0:     * PreparedStatement.setObject to set the value in the specified parameter.
0:     * This is the class name used for custom mapping.
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public String getParameterClassName(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0:    		return types[param - 1].getTypeId().getResultSetMetaDataTypeName();
0:     }
0: 
0: 	/**
0:     *
0:     * Retrieves the designated parameter's mode.
0:     *
0:     * @param param - the first parameter is 1, the second is 2, ...
0:     * @return mode of the parameter; one of ParameterMetaData.parameterModeIn,
0:     * ParameterMetaData.parameterModeOut, or ParameterMetaData.parameterModeInOut
0:     * ParameterMetaData.parameterModeUnknown.
0:     * @exception SQLException if a database access error occurs
0:     */
0:     public int getParameterMode(int param) throws SQLException {
0:    		checkPosition(param);
0: 
0:    		//bug 4857 - only the return parameter is of type OUT. All the other output
0:    		//parameter are IN_OUT (it doesn't matter if their value is set or not).
0:    		if ((param == 1) && pvs.hasReturnOutputParameter())//only the first parameter can be of return type
0: 				return JDBC30Translation.PARAMETER_MODE_OUT;
0:    		return pvs.getParameterMode(param);
0:     }
0: 
0: 
0:     // Check the position number for a parameter and throw an exception if
0:     // it is out of range.
0:     private void checkPosition(int parameterIndex) throws SQLException {
0:    		/* Check that the parameterIndex is in range. */
0:    		if (parameterIndex < 1 ||
0: 				parameterIndex > paramCount) {
0: 
0: 			/* This message matches the one used by the DBMS */
0: 			throw Util.generateCsSQLException(
0:             SQLState.LANG_INVALID_PARAM_POSITION,
0:             new Integer(parameterIndex), new Integer(paramCount));
0: 		}
0:     }
0: }
0: 
============================================================================