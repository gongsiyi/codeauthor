1:855480f: /*
1:855480f:  *
1:855480f:  * Derby - Class DeadlockModeTest
1:855480f:  *
1:855480f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:855480f:  * contributor license agreements.  See the NOTICE file distributed with
1:855480f:  * this work for additional information regarding copyright ownership.
1:855480f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:855480f:  * (the "License"); you may not use this file except in compliance with
1:855480f:  * the License.  You may obtain a copy of the License at
1:855480f:  *
1:855480f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:855480f:  *
1:855480f:  * Unless required by applicable law or agreed to in writing,
1:855480f:  * software distributed under the License is distributed on an
1:855480f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:855480f:  * either express or implied. See the License for the specific
1:855480f:  * language governing permissions and limitations under the License.
2:855480f:  */
1:855480f: package org.apache.derbyTesting.functionTests.tests.lang;
11:855480f: 
1:855480f: import java.sql.Connection;
1:855480f: import java.sql.SQLException;
1:855480f: import java.sql.Statement;
1:855480f: import java.util.LinkedList;
1:855480f: import junit.framework.Test;
1:855480f: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:855480f: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:855480f: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:855480f: import org.apache.derbyTesting.junit.Decorator;
1:855480f: import org.apache.derbyTesting.junit.JDBC;
1:855480f: 
2:855480f: /**
1:855480f:  * This tests for deadlock which can occur if two threads get a 
1:855480f:  * row lock before getting a table lock on the same table.  This can
1:855480f:  * happen if the lock obtained by the insert, update or delete result set
1:855480f:  * is a smaller range than the table scan result set.  The insert, update or
1:855480f:  * delete result set lock is obtained first.  For example, if the insert, update
1:855480f:  * or delete result set obtain a row lock and then the table scan obtains a
1:855480f:  * table scan lock, deadlock can occur since two threads can obtain the row lock
1:855480f:  * and then both thread will want the same table lock.
1:855480f:  */
1:855480f: public class DeadlockModeTest extends BaseJDBCTestCase {
1:855480f: 
1:855480f:     /* Number of threads to use */
1:855480f:     private static final int THREAD_COUNT = 20;
1:855480f:     
1:855480f:     /* Object used to manage the thread synching */
1:855480f:     private Object syncObject = new Object();
1:855480f:     
1:855480f:     /* Amount of threads started so far */
1:855480f:     private int startedCount = 0;
1:855480f:     
1:855480f:     /* Exceptions thrown by threads (if any) */
1:3f5c48a:     private LinkedList<Exception> listExceptions = new LinkedList<Exception>();
1:855480f:     
1:855480f:     /**
1:855480f:      * Creates a new instance of DeadlockModeTest
1:855480f:      * @param name identifier of the test
1:855480f:      */
1:855480f: 	public DeadlockModeTest(String name) {
1:855480f: 	    super(name);
4:855480f: 	}
1:855480f:     
1:855480f:     /**
1:855480f:      * Tests for a deadlock on concurrent accesses to the database
1:855480f:      */
1:855480f:     public void testThreadsUpdatingTable() throws Exception {
1:855480f:         Thread [] t = new Thread[THREAD_COUNT];
1:855480f:         
1:855480f:         createThreads(t);
1:855480f:         waitForThreads(t);
1:855480f:         
1:855480f:         if ( !listExceptions.isEmpty() ) {
1:855480f:             fail("FAIL - " + listExceptions.size() + " threads threw exceptions");
1:855480f:         }
1:855480f:     }
1:855480f:     
1:855480f:     /**
1:855480f:      * This method creates THREAD_COUNT threads which will all try to
1:855480f:      * update the same table 
1:855480f:      */
1:b5d1d67:     private void createThreads(Thread [] t) throws SQLException {
1:855480f:         for (int i = 0; i < THREAD_COUNT; i++)
1:b5d1d67:         {
1:b5d1d67:             final Connection c = openDefaultConnection();
1:855480f:             t[i] = new Thread(new Runnable() {
1:b5d1d67:                 public void run() {threadWorker(c); }});
1:855480f:             t[i].start();
1:855480f:         }
1:855480f:     }
1:855480f:     
1:855480f:     /**
1:855480f:      * This method waits for the threads to finish their execution.
1:855480f:      * This call will block the execution until signaled otherwise.
1:855480f:      */
1:855480f:     private void waitForThreads(Thread [] t) throws Exception {
1:855480f:         for (int i = 0; i < THREAD_COUNT; i++)
4:855480f:         {   
1:855480f:             try {
1:855480f:                 t[i].join();
1:855480f:             } catch (InterruptedException e){
1:855480f:                 assertNull(
1:855480f:                         "FAIL - Exception thrown waiting for the threads",
1:855480f:                         e);
1:855480f:             }
1:855480f:         }
1:855480f:     }
1:855480f:     
1:855480f:     
1:855480f:     /**
1:855480f:      * This method has the code that each thread will be running.
1:855480f:      * Since this will be running within different threads, we 
1:855480f:      * can not throw exceptions, therefore we make a "bogus"
1:855480f:      * assertNull(string message,Exception e) call.
1:855480f:      */
1:b5d1d67:     private void threadWorker(Connection threadConnection) {
1:855480f:         try {
1:855480f:             synchronized (syncObject) {
1:855480f:                 /* A new thread started, so we increment the counter */
1:855480f:                 startedCount++;
1:855480f:                 
1:855480f:                 /* Wake all the threads to run the check below */
1:855480f:                 syncObject.notifyAll();
1:855480f:                 
1:855480f:                 while (startedCount < THREAD_COUNT) {
1:855480f:                     syncObject.wait();
1:855480f:                 }
1:855480f:             }          
1:855480f:             Statement stmt = threadConnection.createStatement();
1:855480f:             
1:855480f:             /* execute a query to load cache */
1:855480f:             stmt.executeUpdate("update t set i = 456 where i = 456");
1:855480f:             
1:855480f:             threadConnection.setAutoCommit(false);
1:855480f:             
1:855480f:             /* set isolation level to serializable */
1:855480f:             stmt.execute("set isolation serializable");
1:855480f:             
1:855480f:             for (int i = 0; i < 100 ; i++) {
1:855480f:                 stmt.executeUpdate("update t set i = 456 where i = 456");
1:855480f:                 threadConnection.commit();
1:855480f:             }
1:b5d1d67: 
1:b5d1d67:             threadConnection.close();
1:855480f:         } catch (Exception e) {
1:855480f:             synchronized(syncObject){
1:855480f:                 listExceptions.add(e);
1:855480f:             }
1:855480f:         }
1:855480f:     }
1:855480f:     
1:855480f:     protected static Test baseSuite(String name) {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(name);
2:855480f:         suite.addTestSuite(DeadlockModeTest.class);
2:855480f:         return new CleanDatabaseTestSetup(
1:855480f:                 DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
1:855480f:         {
1:855480f:             /**
2:855480f:              * Creates the tables used in the test cases.
2:855480f:              * @exception SQLException if a database error occurs
1:855480f:              */
2:855480f:             protected void decorateSQL(Statement stmt) throws SQLException
1:855480f:             {
2:855480f:                 stmt.execute("create table t (i int)");
1:855480f:                 
2:855480f:                 stmt.executeUpdate("insert into t values (1956)");
1:855480f:         
2:855480f:                 stmt.executeUpdate("insert into t values (180)");
1:855480f:         
2:855480f:                 stmt.executeUpdate("insert into t values (3)");
1:855480f:             }
2:855480f:         };
1:855480f:     } 
1:855480f:     
1:855480f:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("DeadlockModeTest ");
2:855480f:         suite.addTest(
1:855480f:                 baseSuite("DeadlockModeTest:embedded")
2:855480f:                 );
1:855480f:         
1:855480f:         /* JSR169 does not have encryption support */
1:855480f:         if ( JDBC.vmSupportsJDBC3() ) {
1:b5d1d67:             suite.addTest(Decorator.encryptedDatabase(
1:b5d1d67:                     baseSuite("DeadlockModeTest:encrypted")));
1:855480f:         }
1:855480f: 
1:855480f:         return suite;        
1:855480f:     }
1:855480f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(name);
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("DeadlockModeTest ");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1:     private LinkedList<Exception> listExceptions = new LinkedList<Exception>();
commit:b5d1d67
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private void createThreads(Thread [] t) throws SQLException {
1:         {
1:             final Connection c = openDefaultConnection();
1:                 public void run() {threadWorker(c); }});
/////////////////////////////////////////////////////////////////////////
1:     private void threadWorker(Connection threadConnection) {
/////////////////////////////////////////////////////////////////////////
1: 
1:             threadConnection.close();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             suite.addTest(Decorator.encryptedDatabase(
1:                     baseSuite("DeadlockModeTest:encrypted")));
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:855480f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Derby - Class DeadlockModeTest
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.LinkedList;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.Decorator;
1: import org.apache.derbyTesting.junit.JDBC;
0: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * This tests for deadlock which can occur if two threads get a 
1:  * row lock before getting a table lock on the same table.  This can
1:  * happen if the lock obtained by the insert, update or delete result set
1:  * is a smaller range than the table scan result set.  The insert, update or
1:  * delete result set lock is obtained first.  For example, if the insert, update
1:  * or delete result set obtain a row lock and then the table scan obtains a
1:  * table scan lock, deadlock can occur since two threads can obtain the row lock
1:  * and then both thread will want the same table lock.
1:  */
1: public class DeadlockModeTest extends BaseJDBCTestCase {
1: 
1:     /* Number of threads to use */
1:     private static final int THREAD_COUNT = 20;
1:     
1:     /* Object used to manage the thread synching */
1:     private Object syncObject = new Object();
1:     
1:     /* Amount of threads started so far */
1:     private int startedCount = 0;
1:     
1:     /* Exceptions thrown by threads (if any) */
0:     private LinkedList listExceptions = new LinkedList();
1:     
1:     /**
1:      * Creates a new instance of DeadlockModeTest
1:      * @param name identifier of the test
1:      */
1: 	public DeadlockModeTest(String name) {
1: 	    super(name);
1: 	}
1:     
1:     /**
1:      * Tests for a deadlock on concurrent accesses to the database
1:      */
1:     public void testThreadsUpdatingTable() throws Exception {
1:         Thread [] t = new Thread[THREAD_COUNT];
1:         
1:         createThreads(t);
1:         waitForThreads(t);
1:         
1:         if ( !listExceptions.isEmpty() ) {
1:             fail("FAIL - " + listExceptions.size() + " threads threw exceptions");
1:         }
1:     }
1:     
1:     /**
1:      * This method creates THREAD_COUNT threads which will all try to
1:      * update the same table 
1:      */
0:     private void createThreads(Thread [] t) {
1:         for (int i = 0; i < THREAD_COUNT; i++)
1:         {   
1:             t[i] = new Thread(new Runnable() {
0:                 public void run() {threadWorker(); }});
1:             t[i].start();
1:         }
1:     }
1:     
1:     /**
1:      * This method waits for the threads to finish their execution.
1:      * This call will block the execution until signaled otherwise.
1:      */
1:     private void waitForThreads(Thread [] t) throws Exception {
1:         for (int i = 0; i < THREAD_COUNT; i++)
1:         {   
1:             try {
1:                 t[i].join();
1:             } catch (InterruptedException e){
1:                 assertNull(
1:                         "FAIL - Exception thrown waiting for the threads",
1:                         e);
1:             }
1:         }
1:     }
1:     
1:     
1:     /**
1:      * This method has the code that each thread will be running.
1:      * Since this will be running within different threads, we 
1:      * can not throw exceptions, therefore we make a "bogus"
1:      * assertNull(string message,Exception e) call.
1:      */
0:     private void threadWorker() {
0:         Connection threadConnection = null;
1:                 
1:         try {
1:             synchronized (syncObject) {
1:                 
0:                 /* If a connection hasn't been opened for this thread, open one */
0:                 if (threadConnection == null){
0:                     threadConnection = openDefaultConnection();
1:                 }
1:                 
1:                 /* A new thread started, so we increment the counter */
1:                 startedCount++;
1:                 
1:                 /* Wake all the threads to run the check below */
1:                 syncObject.notifyAll();
1:                 
1:                 while (startedCount < THREAD_COUNT) {
1:                     syncObject.wait();
1:                 }
1:             }          
1:             Statement stmt = threadConnection.createStatement();
1:             
1:             /* execute a query to load cache */
1:             stmt.executeUpdate("update t set i = 456 where i = 456");
1:             
1:             threadConnection.setAutoCommit(false);
1:             
1:             /* set isolation level to serializable */
1:             stmt.execute("set isolation serializable");
1:             
1:             for (int i = 0; i < 100 ; i++) {
1:                 stmt.executeUpdate("update t set i = 456 where i = 456");
1:                 threadConnection.commit();
1:             }
1:         } catch (Exception e) {
1:             synchronized(syncObject){
1:                 listExceptions.add(e);
1:             }
1:         }
1:     }
1:     
1:     protected static Test baseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(DeadlockModeTest.class);
1:         return new CleanDatabaseTestSetup(
1:                 DatabasePropertyTestSetup.setLockTimeouts(suite, 2, 4)) 
1:         {
1:             /**
1:              * Creates the tables used in the test cases.
1:              * @exception SQLException if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException
1:             {
1:                 stmt.execute("create table t (i int)");
1:                 
1:                 stmt.executeUpdate("insert into t values (1956)");
1:         
1:                 stmt.executeUpdate("insert into t values (180)");
1:         
1:                 stmt.executeUpdate("insert into t values (3)");
1:             }
1:         };
1:     } 
1:     
0:     protected static Test encryptedBaseSuite(String name) {
0:         TestSuite suite = new TestSuite(name);
1:         suite.addTestSuite(DeadlockModeTest.class);
1:         
1:         return new CleanDatabaseTestSetup(
0:                 DatabasePropertyTestSetup.setLockTimeouts(Decorator.encryptedDatabase(suite), 2, 4)) 
1:         {
1:             /**
1:              * Creates the tables used in the test cases.
1:              * @exception SQLException if a database error occurs
1:              */
1:             protected void decorateSQL(Statement stmt) throws SQLException
1:             {
1:                 stmt.execute("create table t (i int)");
1:                 
1:                 stmt.executeUpdate("insert into t values (1956)");
1:         
1:                 stmt.executeUpdate("insert into t values (180)");
1:         
1:                 stmt.executeUpdate("insert into t values (3)");
1:             }
1:         };
1:     } 
1:     
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite("DeadlockModeTest ");
1:         suite.addTest(
1:                 baseSuite("DeadlockModeTest:embedded")
1:                 );
1:         
1:         /* JSR169 does not have encryption support */
1:         if ( JDBC.vmSupportsJDBC3() ) {
1:             suite.addTest(
0:                     encryptedBaseSuite("DeadlockModeTest:encrypted")
1:                     );
1:         }
1: 
1:         return suite;        
1:     }
1: }
============================================================================