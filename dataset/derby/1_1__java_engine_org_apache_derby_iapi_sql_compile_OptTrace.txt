1:9858a84: /*
1:9858a84: 
1:9858a84:    Derby - Class org.apache.derby.iapi.sql.compile.OptTrace
1:9858a84: 
1:9858a84:    Licensed to the Apache Software Foundation (ASF) under one or more
1:9858a84:    contributor license agreements.  See the NOTICE file distributed with
1:9858a84:    this work for additional information regarding copyright ownership.
1:9858a84:    The ASF licenses this file to you under the Apache License, Version 2.0
1:9858a84:    (the "License"); you may not use this file except in compliance with
1:9858a84:    the License.  You may obtain a copy of the License at
1:9858a84: 
1:9858a84:       http://www.apache.org/licenses/LICENSE-2.0
1:9858a84: 
1:9858a84:    Unless required by applicable law or agreed to in writing, software
1:9858a84:    distributed under the License is distributed on an "AS IS" BASIS,
1:9858a84:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9858a84:    See the License for the specific language governing permissions and
1:9858a84:    limitations under the License.
1:9858a84: 
1:9858a84:  */
1:9858a84: 
1:9858a84: package org.apache.derby.iapi.sql.compile;
1:9858a84: 
1:049f993: import java.io.PrintWriter;
1:049f993: 
1:9858a84: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:9858a84: import org.apache.derby.iapi.util.JBitSet;
1:9858a84: 
1:9858a84: /**
1:9858a84:  * Interface for optimizer tracing.
1:9858a84:  */
1:9858a84: public  interface   OptTrace
1:9858a84: {
1:9858a84:     ////////////////////////////////////////////////////////////////////////
1:9858a84:     //
1:9858a84:     //	CONSTANTS
1:9858a84:     //
1:9858a84:     ////////////////////////////////////////////////////////////////////////
1:9858a84: 
1:9858a84:     ////////////////////////////////////////////////////////////////////////
1:9858a84:     //
1:9858a84:     //	BEHAVIOR
1:9858a84:     //
1:9858a84:     ////////////////////////////////////////////////////////////////////////
1:9858a84: 
1:049f993:     /** Start the start of tracing a statement. */
1:049f993:     public  void    traceStartStatement( String statementText );
1:049f993: 
1:3c3e7db:     /** Start optimizer tracing for a query block. */
1:3c3e7db:     public  void    traceStartQueryBlock( long timeOptimizationStarted, int optimizerID, OptimizableList optimizableList );
1:3c3e7db: 
1:3c3e7db:     /** End tracing the optimization of a query block. */
1:3c3e7db:     public  void    traceEndQueryBlock();
1:9858a84: 
1:9858a84:     /** Say that the optimizer ran out of time. */
1:9858a84:     public  void    traceTimeout( long currentTime, CostEstimate bestCost );
1:9858a84: 
1:9858a84:     /** Say that there's nothing to optimizer. */
1:9858a84:     public  void    traceVacuous();
1:9858a84: 
1:9858a84:     /** Say that we have a complete join order. */
1:9858a84:     public  void    traceCompleteJoinOrder();
1:9858a84: 
1:9858a84:     /** Report the sort cost. */
1:9858a84:     public  void    traceSortCost( CostEstimate sortCost, CostEstimate currentCost );
1:9858a84: 
1:9858a84:     /** Say that we couldn't find a best plan. */
1:9858a84:     public  void    traceNoBestPlan();
1:9858a84: 
1:9858a84:     /** Say that we're modifying access paths. */
1:049f993:     public  void    traceModifyingAccessPaths( int optimizerID );
1:9858a84: 
1:9858a84:     /** Say that we short-circuited a join order. */
1:9858a84:     public  void    traceShortCircuiting( boolean timeExceeded, Optimizable thisOpt, int joinPosition );
1:9858a84: 
1:9858a84:     /** Say that we're skipping the join order starting with the next optimizable. */
1:9858a84:     public  void    traceSkippingJoinOrder( int nextOptimizable, int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap );
1:9858a84: 
1:9858a84:     /** Say that the user specified an impossible join order. */
1:9858a84:     public  void    traceIllegalUserJoinOrder();
1:9858a84: 
1:9858a84:     /** Say that we have optimized the user-specified join order. */
1:9858a84:     public  void    traceUserJoinOrderOptimized();
1:9858a84: 
1:9858a84:     /** Say that we're considering a join order. */
1:9858a84:     public  void    traceJoinOrderConsideration( int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap );
1:9858a84: 
1:9858a84:     /** Report the cost without a sort. */
1:9858a84:     public  void    traceCostWithoutSortAvoidance( CostEstimate currentCost );
1:9858a84: 
1:9858a84:     /** Report the cost with sort avoidance.*/
1:9858a84:     public  void    traceCostWithSortAvoidance( CostEstimate currentSortAvoidanceCost );
1:9858a84: 
1:9858a84:     /** Say that the current plan avoids a sort. */
1:9858a84:     public  void    traceCurrentPlanAvoidsSort( CostEstimate bestCost, CostEstimate currentSortAvoidanceCost );
1:9858a84: 
1:9858a84:     /** Report the cost of the cheapest plan so far. */
1:9858a84:     public  void    traceCheapestPlanSoFar( int planType, CostEstimate currentCost );
1:9858a84: 
1:9858a84:     /** Report that this plan needs a sort */
1:9858a84:     public  void    traceSortNeededForOrdering( int planType, RequiredRowOrdering requiredRowOrdering );
1:9858a84: 
1:9858a84:     /** Say that we are remembering the current plan as the best join order so far. */
1:b6cc9d7:     public  void    traceRememberingBestJoinOrder
1:b6cc9d7:         ( int joinPosition, int[] bestJoinOrder, int planType, CostEstimate planCost, JBitSet assignedTableMap );
1:9858a84: 
1:9858a84:     /** Say that we are skipping a plan because it consumes too much memory. */
1:9858a84:     public  void    traceSkippingBecauseTooMuchMemory( int maxMemoryPerTable );
1:9858a84: 
1:9858a84:     /** Report the cost of scanning a table a certain number of times */
1:9858a84:     public  void    traceCostOfNScans( int tableNumber, double rowCount, CostEstimate cost );
1:9858a84: 
1:9858a84:     /** Say that we won't consider a hash join because the result can't be materialized */
1:9858a84:     public  void    traceSkipUnmaterializableHashJoin();
1:9858a84: 
1:9858a84:     /** Say we won't consider a hash join because there are no hash key columns. */
1:9858a84:     public  void    traceSkipHashJoinNoHashKeys();
1:9858a84: 
1:9858a84:     /** Report the columns being traced */
1:9858a84:     public  void    traceHashKeyColumns( int[] hashKeyColumns );
1:9858a84: 
1:9858a84:     /** Say that we're starting to optimize a join node */
1:9858a84:     public  void    traceOptimizingJoinNode();
1:9858a84: 
1:9858a84:     /** Say that we're considering a particular join strategy on a particular table. */
1:9858a84:     public  void    traceConsideringJoinStrategy( JoinStrategy js, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report that we've found a best access path. */
1:9858a84:     public  void    traceRememberingBestAccessPath( AccessPath accessPath, int tableNumber, int planType );
1:9858a84: 
1:9858a84:     /** Say that we have exhausted the conglomerate possibilities for a table. */
1:9858a84:     public  void    traceNoMoreConglomerates( int tableNumber );
1:9858a84: 
1:9858a84:     /** Report that we are considering a conglomerate for a table. */
1:9858a84:     public  void    traceConsideringConglomerate( ConglomerateDescriptor cd, int tableNumber );
1:9858a84: 
1:9858a84:     /** Say that we're considering scanning a heap even though we have a unique key match. */
1:9858a84:     public  void    traceScanningHeapWithUniqueKey();
1:9858a84: 
1:9858a84:     /** Say that we're adding an unordered optimizable. */
1:9858a84:     public  void    traceAddingUnorderedOptimizable( int predicateCount );
1:9858a84: 
1:9858a84:     /** Say that we're considering a different access path for a table. */
1:9858a84:     public  void    traceChangingAccessPathForTable( int tableNumber );
1:9858a84: 
1:9858a84:     /** Say that we're setting the lock mode to MODE_TABLE because there is no start/stop position. */
1:9858a84:     public  void    traceNoStartStopPosition();
1:9858a84: 
1:9858a84:     /** Say that we're considering a non-covering index. */
1:9858a84:     public  void    traceNonCoveringIndexCost( double cost, int tableNumber );
1:9858a84: 
1:9858a84:     /** Say that we're setting the lock mode to MODE_RECORD because the start and stop positions are all constant. */
1:9858a84:     public  void    traceConstantStartStopPositions();
1:9858a84: 
1:9858a84:     /** Report the cost of using a particular conglomerate to scan a table. */
1:9858a84:     public  void    traceEstimatingCostOfConglomerate( ConglomerateDescriptor cd, int tableNumber );
1:9858a84: 
1:9858a84:     /** Say that we're looking for an index specified by optimizer hints. */
1:9858a84:     public  void    traceLookingForSpecifiedIndex( String indexName, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the cost of a scan which will match exactly one row. */
1:9858a84:     public  void    traceSingleMatchedRowCost( double cost, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the cost of a scan given the selectivity of an extra first column. */
1:9858a84:     public  void    traceCostIncludingExtra1stColumnSelectivity( CostEstimate cost, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report that we are advancing to the next access path for the table. */
1:9858a84:     public  void    traceNextAccessPath( String baseTable, int predicateCount );
1:9858a84: 
1:9858a84:     /** Report the cost if we include an extra start/stop. */
1:9858a84:     public  void    traceCostIncludingExtraStartStop( CostEstimate cost, int tableNumber );
1:9858a84: 
1:9858a84:     /**  Report the cost if we include an extra qualifier. */
1:9858a84:     public  void    traceCostIncludingExtraQualifierSelectivity( CostEstimate cost, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the cost if we include an extra non-qualifier. */
1:9858a84:     public  void    traceCostIncludingExtraNonQualifierSelectivity( CostEstimate cost, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the cost of using a non-covering index. */
1:9858a84:     public  void    traceCostOfNoncoveringIndex( CostEstimate cost, int tableNumber );
1:9858a84: 
1:9858a84:     /** Say that we've found a new best join strategy for the table. */
1:9858a84:     public  void    traceRememberingJoinStrategy( JoinStrategy joinStrategy, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the best access path for the table so far. */
1:9858a84:     public  void    traceRememberingBestAccessPathSubstring( AccessPath ap, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the best sort-avoiding access path for this table so far. */
1:9858a84:     public  void    traceRememberingBestSortAvoidanceAccessPathSubstring( AccessPath ap, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report an optimizer failure, e.g., while optimizing an outer join */
1:9858a84:     public  void    traceRememberingBestUnknownAccessPathSubstring( AccessPath ap, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the cost of a conglomerate scan. */
1:9858a84:     public  void    traceCostOfConglomerateScan
1:9858a84:         (
1:9858a84:          int    tableNumber,
1:9858a84:          ConglomerateDescriptor cd,
1:9858a84:          CostEstimate   costEstimate,
1:9858a84:          int    numExtraFirstColumnPreds,
1:9858a84:          double    extraFirstColumnSelectivity,
1:9858a84:          int    numExtraStartStopPreds,
1:9858a84:          double    extraStartStopSelectivity,
1:9858a84:          int    startStopPredCount,
1:9858a84:          double    statStartStopSelectivity,
1:9858a84:          int    numExtraQualifiers,
1:9858a84:          double    extraQualifierSelectivity,
1:9858a84:          int    numExtraNonQualifiers,
1:9858a84:          double    extraNonQualifierSelectivity
1:9858a84:          );
1:9858a84: 
1:9858a84:     /** Report the cost based on selectivities coming out of SYSSTATISTICS. */
1:9858a84:     public  void    traceCostIncludingCompositeSelectivityFromStats( CostEstimate cost, int tableNumber );
1:9858a84: 
1:9858a84:     /** Report the selectivity calculated from SYSSTATISTICS. */
1:9858a84:     public  void    traceCompositeSelectivityFromStatistics( double statCompositeSelectivity );
1:9858a84: 
1:9858a84:     /** Report the cost based on index statistics. */
1:9858a84:     public  void    traceCostIncludingStatsForIndex( CostEstimate cost, int tableNumber );
1:9858a84:     
1:049f993:     /** Print the trace so far. */
1:049f993:     public  void    printToWriter( PrintWriter out );
1:049f993: 
1:9858a84: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3c3e7db
/////////////////////////////////////////////////////////////////////////
1:     /** Start optimizer tracing for a query block. */
1:     public  void    traceStartQueryBlock( long timeOptimizationStarted, int optimizerID, OptimizableList optimizableList );
1: 
1:     /** End tracing the optimization of a query block. */
1:     public  void    traceEndQueryBlock();
commit:b6cc9d7
/////////////////////////////////////////////////////////////////////////
0:     public  void    traceStart( long timeOptimizationStarted, int optimizerID, OptimizableList optimizableList );
/////////////////////////////////////////////////////////////////////////
1:     public  void    traceRememberingBestJoinOrder
1:         ( int joinPosition, int[] bestJoinOrder, int planType, CostEstimate planCost, JBitSet assignedTableMap );
commit:049f993
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /** Start the start of tracing a statement. */
1:     public  void    traceStartStatement( String statementText );
1: 
0:     public  void    traceStart( long timeOptimizationStarted, int optimizerID );
/////////////////////////////////////////////////////////////////////////
1:     public  void    traceModifyingAccessPaths( int optimizerID );
/////////////////////////////////////////////////////////////////////////
1:     /** Print the trace so far. */
1:     public  void    printToWriter( PrintWriter out );
1: 
commit:9858a84
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.compile.OptTrace
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: import org.apache.derby.iapi.util.JBitSet;
1: 
1: /**
1:  * Interface for optimizer tracing.
1:  */
1: public  interface   OptTrace
1: {
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //	BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
0:     /** Start optimizer tracing. */
0:     public  void    traceStart( long timeOptimizationStarted );
1: 
1:     /** Say that the optimizer ran out of time. */
1:     public  void    traceTimeout( long currentTime, CostEstimate bestCost );
1: 
1:     /** Say that there's nothing to optimizer. */
1:     public  void    traceVacuous();
1: 
1:     /** Say that we have a complete join order. */
1:     public  void    traceCompleteJoinOrder();
1: 
1:     /** Report the sort cost. */
1:     public  void    traceSortCost( CostEstimate sortCost, CostEstimate currentCost );
1: 
1:     /** Say that we couldn't find a best plan. */
1:     public  void    traceNoBestPlan();
1: 
1:     /** Say that we're modifying access paths. */
0:     public  void    traceModifyingAccessPaths();
1: 
1:     /** Say that we short-circuited a join order. */
1:     public  void    traceShortCircuiting( boolean timeExceeded, Optimizable thisOpt, int joinPosition );
1: 
1:     /** Say that we're skipping the join order starting with the next optimizable. */
1:     public  void    traceSkippingJoinOrder( int nextOptimizable, int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap );
1: 
1:     /** Say that the user specified an impossible join order. */
1:     public  void    traceIllegalUserJoinOrder();
1: 
1:     /** Say that we have optimized the user-specified join order. */
1:     public  void    traceUserJoinOrderOptimized();
1: 
1:     /** Say that we're considering a join order. */
1:     public  void    traceJoinOrderConsideration( int joinPosition, int[] proposedJoinOrder, JBitSet assignedTableMap );
1: 
1:     /** Report the cost without a sort. */
1:     public  void    traceCostWithoutSortAvoidance( CostEstimate currentCost );
1: 
1:     /** Report the cost with sort avoidance.*/
1:     public  void    traceCostWithSortAvoidance( CostEstimate currentSortAvoidanceCost );
1: 
1:     /** Say that the current plan avoids a sort. */
1:     public  void    traceCurrentPlanAvoidsSort( CostEstimate bestCost, CostEstimate currentSortAvoidanceCost );
1: 
1:     /** Report the cost of the cheapest plan so far. */
1:     public  void    traceCheapestPlanSoFar( int planType, CostEstimate currentCost );
1: 
1:     /** Report that this plan needs a sort */
1:     public  void    traceSortNeededForOrdering( int planType, RequiredRowOrdering requiredRowOrdering );
1: 
1:     /** Say that we are remembering the current plan as the best join order so far. */
0:     public  void    traceRememberingBestJoinOrder( int joinPosition, int[] bestJoinOrder, JBitSet assignedTableMap );
1: 
1:     /** Say that we are skipping a plan because it consumes too much memory. */
1:     public  void    traceSkippingBecauseTooMuchMemory( int maxMemoryPerTable );
1: 
1:     /** Report the cost of scanning a table a certain number of times */
1:     public  void    traceCostOfNScans( int tableNumber, double rowCount, CostEstimate cost );
1: 
1:     /** Say that we won't consider a hash join because the result can't be materialized */
1:     public  void    traceSkipUnmaterializableHashJoin();
1: 
1:     /** Say we won't consider a hash join because there are no hash key columns. */
1:     public  void    traceSkipHashJoinNoHashKeys();
1: 
1:     /** Report the columns being traced */
1:     public  void    traceHashKeyColumns( int[] hashKeyColumns );
1: 
1:     /** Say that we're starting to optimize a join node */
1:     public  void    traceOptimizingJoinNode();
1: 
1:     /** Say that we're considering a particular join strategy on a particular table. */
1:     public  void    traceConsideringJoinStrategy( JoinStrategy js, int tableNumber );
1: 
1:     /** Report that we've found a best access path. */
1:     public  void    traceRememberingBestAccessPath( AccessPath accessPath, int tableNumber, int planType );
1: 
1:     /** Say that we have exhausted the conglomerate possibilities for a table. */
1:     public  void    traceNoMoreConglomerates( int tableNumber );
1: 
1:     /** Report that we are considering a conglomerate for a table. */
1:     public  void    traceConsideringConglomerate( ConglomerateDescriptor cd, int tableNumber );
1: 
1:     /** Say that we're considering scanning a heap even though we have a unique key match. */
1:     public  void    traceScanningHeapWithUniqueKey();
1: 
1:     /** Say that we're adding an unordered optimizable. */
1:     public  void    traceAddingUnorderedOptimizable( int predicateCount );
1: 
1:     /** Say that we're considering a different access path for a table. */
1:     public  void    traceChangingAccessPathForTable( int tableNumber );
1: 
1:     /** Say that we're setting the lock mode to MODE_TABLE because there is no start/stop position. */
1:     public  void    traceNoStartStopPosition();
1: 
1:     /** Say that we're considering a non-covering index. */
1:     public  void    traceNonCoveringIndexCost( double cost, int tableNumber );
1: 
1:     /** Say that we're setting the lock mode to MODE_RECORD because the start and stop positions are all constant. */
1:     public  void    traceConstantStartStopPositions();
1: 
1:     /** Report the cost of using a particular conglomerate to scan a table. */
1:     public  void    traceEstimatingCostOfConglomerate( ConglomerateDescriptor cd, int tableNumber );
1: 
1:     /** Say that we're looking for an index specified by optimizer hints. */
1:     public  void    traceLookingForSpecifiedIndex( String indexName, int tableNumber );
1: 
1:     /** Report the cost of a scan which will match exactly one row. */
1:     public  void    traceSingleMatchedRowCost( double cost, int tableNumber );
1: 
1:     /** Report the cost of a scan given the selectivity of an extra first column. */
1:     public  void    traceCostIncludingExtra1stColumnSelectivity( CostEstimate cost, int tableNumber );
1: 
1:     /** Report that we are advancing to the next access path for the table. */
1:     public  void    traceNextAccessPath( String baseTable, int predicateCount );
1: 
1:     /** Report the cost if we include an extra start/stop. */
1:     public  void    traceCostIncludingExtraStartStop( CostEstimate cost, int tableNumber );
1: 
1:     /**  Report the cost if we include an extra qualifier. */
1:     public  void    traceCostIncludingExtraQualifierSelectivity( CostEstimate cost, int tableNumber );
1: 
1:     /** Report the cost if we include an extra non-qualifier. */
1:     public  void    traceCostIncludingExtraNonQualifierSelectivity( CostEstimate cost, int tableNumber );
1: 
1:     /** Report the cost of using a non-covering index. */
1:     public  void    traceCostOfNoncoveringIndex( CostEstimate cost, int tableNumber );
1: 
1:     /** Say that we've found a new best join strategy for the table. */
1:     public  void    traceRememberingJoinStrategy( JoinStrategy joinStrategy, int tableNumber );
1: 
1:     /** Report the best access path for the table so far. */
1:     public  void    traceRememberingBestAccessPathSubstring( AccessPath ap, int tableNumber );
1: 
1:     /** Report the best sort-avoiding access path for this table so far. */
1:     public  void    traceRememberingBestSortAvoidanceAccessPathSubstring( AccessPath ap, int tableNumber );
1: 
1:     /** Report an optimizer failure, e.g., while optimizing an outer join */
1:     public  void    traceRememberingBestUnknownAccessPathSubstring( AccessPath ap, int tableNumber );
1: 
1:     /** Report the cost of a conglomerate scan. */
1:     public  void    traceCostOfConglomerateScan
1:         (
1:          int    tableNumber,
1:          ConglomerateDescriptor cd,
1:          CostEstimate   costEstimate,
1:          int    numExtraFirstColumnPreds,
1:          double    extraFirstColumnSelectivity,
1:          int    numExtraStartStopPreds,
1:          double    extraStartStopSelectivity,
1:          int    startStopPredCount,
1:          double    statStartStopSelectivity,
1:          int    numExtraQualifiers,
1:          double    extraQualifierSelectivity,
1:          int    numExtraNonQualifiers,
1:          double    extraNonQualifierSelectivity
1:          );
1: 
1:     /** Report the cost based on selectivities coming out of SYSSTATISTICS. */
1:     public  void    traceCostIncludingCompositeSelectivityFromStats( CostEstimate cost, int tableNumber );
1: 
1:     /** Report the selectivity calculated from SYSSTATISTICS. */
1:     public  void    traceCompositeSelectivityFromStatistics( double statCompositeSelectivity );
1: 
1:     /** Report the cost based on index statistics. */
1:     public  void    traceCostIncludingStatsForIndex( CostEstimate cost, int tableNumber );
1:     
1: }
============================================================================