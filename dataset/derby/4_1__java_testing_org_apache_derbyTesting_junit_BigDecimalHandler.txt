1:5d12015: /*
1:5d12015: 
1:5d12015: Derby - Class org.apache.derbyTesting.junit.BigDecimalHandler
1:5d12015: 
1:5d12015: Licensed to the Apache Software Foundation (ASF) under one or more
1:5d12015: contributor license agreements.  See the NOTICE file distributed with
1:5d12015: this work for additional information regarding copyright ownership.
1:5d12015: The ASF licenses this file to You under the Apache License, Version 2.0
1:5d12015: (the "License"); you may not use this file except in compliance with
1:5d12015: the License.  You may obtain a copy of the License at
1:5d12015: 
1:5d12015:    http://www.apache.org/licenses/LICENSE-2.0
1:5d12015: 
1:5d12015: Unless required by applicable law or agreed to in writing, software
1:5d12015: distributed under the License is distributed on an "AS IS" BASIS,
1:5d12015: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5d12015: See the License for the specific language governing permissions and
1:5d12015: limitations under the License.
1:5d12015: 
1:5d12015: */
1:5d12015: package org.apache.derbyTesting.junit;
1:5d12015: 
1:5d12015: import java.sql.ResultSet;
1:5d12015: import java.sql.SQLException;
1:5d12015: import java.sql.CallableStatement;
1:5d12015: import java.sql.PreparedStatement;
1:5d12015: import java.math.BigDecimal;
1:5d12015: import java.lang.reflect.*;
1:5d12015: 
1:5d12015: /**
1:5d12015:  *  BigDecimalHandler provides wrappers for JDBC API methods which use BigDecimal.
1:5d12015:  *  When writing tests which use BigDecimal, the methods in this class can be called
1:5d12015:  *  instead of directly calling JDBC methods. This way the same test can be used in JVMs 
1:5d12015:  *  like J2ME/CDC/Foundation Profile 1.0, which do not have BigDecimal class, or
1:5d12015:  *  JSR169 Profile, which does not support method calls using BigDecimal (such 
1:5d12015:  *  as ResultSet.getBigDecimal(..).
1:5d12015:  *  
1:5d12015:  * 
1:5d12015:  *
1:5d12015:  */
1:5d12015: public class BigDecimalHandler {
1:5d12015: 	
1:5d12015: 	public static int representation;
1:5d12015: 	public static final int STRING_REPRESENTATION = 1;
1:5d12015: 	public static final int BIGDECIMAL_REPRESENTATION = 2;
1:5d12015: 	
1:5d12015: 	static{
1:5d12015: 		try{
1:5d12015: 			Class.forName("java.math.BigDecimal");
1:5d12015: 			representation = BIGDECIMAL_REPRESENTATION;
1:5d12015: 			// This class will attempt calls to ResultSet.getBigDecimal,
1:5d12015: 			// which may not be available with jvms that support JSR169,
1:5d12015: 			// even if BigDecimal itself has been made available (e.g. 
1:5d12015: 			// supporting J2ME/CDC/Foundation Profile 1.1).
1:5d12015: 			Method getbd = ResultSet.class.getMethod("getBigDecimal", new Class[] {int.class});
1:5d12015: 			representation = BIGDECIMAL_REPRESENTATION;
1:5d12015: 		}
1:5d12015: 		catch(ClassNotFoundException e){
1:5d12015: 			//Used for J2ME/Foundation
1:5d12015: 			representation = STRING_REPRESENTATION;
1:5d12015: 		}
1:5d12015: 		catch(NoSuchMethodException e){
1:5d12015: 			//Used for J2ME/Foundation
1:5d12015: 			representation = STRING_REPRESENTATION;
1:5d12015: 		}
1:5d12015: 
1:5d12015: 	}
1:5d12015: 	
1:5d12015: 	//Type conversions supported by ResultSet getBigDecimal method - JDBC3.0 Table B-6 
1:5d12015: 	private static final int[] bdConvertibleTypes = 
1:5d12015: 	{	java.sql.Types.TINYINT,
1:5d12015: 		java.sql.Types.SMALLINT,
1:5d12015: 		java.sql.Types.INTEGER,
1:5d12015: 		java.sql.Types.BIGINT,
1:5d12015: 		java.sql.Types.REAL,
1:5d12015: 		java.sql.Types.FLOAT,
1:5d12015: 		java.sql.Types.DOUBLE,
1:5d12015: 		java.sql.Types.DECIMAL,
1:5d12015: 		java.sql.Types.NUMERIC,
1:5d12015: 		java.sql.Types.BIT,
1:5d12015: 		//java.sql.Types.BOOLEAN,	//Not supported in jdk13
1:5d12015: 		java.sql.Types.CHAR,
1:5d12015: 		java.sql.Types.VARCHAR,
1:5d12015: 		java.sql.Types.LONGVARCHAR
1:5d12015: 	};
1:5d12015: 	
1:5d12015: 	/** This method is a wrapper for the ResultSet method getBigDecimal(int columnIndex).
1:5d12015: 	 * 
1:5d12015: 	 * @param rs ResultSet 
1:5d12015: 	 * @param columnIndex Column Index 
1:5d12015: 	 * @return String value of getXXX(columnIndex)method on the ResultSet
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static String getBigDecimalString(ResultSet rs, int columnIndex) throws SQLException{
1:5d12015: 		String bigDecimalString=null;
1:5d12015: 		
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				//Call toString() only for non-null values, else return null
1:5d12015: 				if(rs.getBigDecimal(columnIndex) != null)
1:5d12015: 					bigDecimalString = rs.getBigDecimal(columnIndex).toString();
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				bigDecimalString = rs.getString(columnIndex);
1:5d12015: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1:5d12015: 				if((bigDecimalString != null) && !canConvertToDecimal(columnType))
1:5d12015: 					throw new SQLException("Invalid data conversion. Method not called.");
1:5d12015: 				break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 		return bigDecimalString;
1:5d12015: 	}
1:5d12015: 	
1:5d12015: 	/** This method is a wrapper for ResultSet method getBigDecimal(String columnName).
1:5d12015: 	 * 
1:5d12015: 	 * @param rs ResultSet
1:5d12015: 	 * @param columnName Column Name
1:5d12015: 	 * @param columnIndex Coulumn Index
1:5d12015: 	 * @return String value of getXXX(columnName)method on the ResultSet
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static String getBigDecimalString(ResultSet rs, String columnName, int columnIndex) throws SQLException{
1:5d12015: 		String bigDecimalString = null;
1:5d12015: 				
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				//Call toString() only for non-null values, else return null
1:5d12015: 				if(rs.getBigDecimal(columnName) != null){
1:5d12015: 					bigDecimalString = rs.getBigDecimal(columnName).toString();
1:5d12015: 				}
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				bigDecimalString = rs.getString(columnName);
1:5d12015: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1:5d12015: 				if((bigDecimalString != null) && !canConvertToDecimal(columnType))
1:5d12015: 					throw new SQLException("Invalid data conversion. Method not called.");
1:5d12015: 				break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 		return bigDecimalString;
1:5d12015: 	}
1:5d12015: 	
1:5d12015: 	/** This method is a wrapper for ResultSet method getObject(int columnIndex) 
1:5d12015: 	 * 
1:5d12015: 	 * @param rs ResultSet
1:5d12015: 	 * @param columnIndex ColumnIndex
1:5d12015: 	 * @return String value of getXXX(columnIndex) method on the ResultSet
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static String getObjectString(ResultSet rs, int columnIndex) throws SQLException{
1:5d12015: 		String objectString = null;
1:5d12015: 		
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				//Call toString() only for non-null values, else return null
1:5d12015: 				if(rs.getObject(columnIndex) != null)
1:5d12015: 					objectString = rs.getObject(columnIndex).toString();
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1:5d12015: 				if(columnType == java.sql.Types.DECIMAL){
1:5d12015: 					objectString = rs.getString(columnIndex);
1:5d12015: 				}	
1:5d12015: 				else
1:5d12015: 					//Call toString() only for non-null values, else return null
1:5d12015: 					if(rs.getObject(columnIndex) != null)
1:5d12015: 						objectString = rs.getObject(columnIndex).toString();
1:5d12015: 					break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 		return objectString;
1:5d12015: 	}	
1:5d12015: 	
1:5d12015: 	/** This method is a wrapper for ResultSet method getObject(String columnName)
1:5d12015: 	 * @param rs ResultSet
1:5d12015: 	 * @param columnName Column Name
1:5d12015: 	 * @param columnIndex Column Index
1:5d12015: 	 * @return String value of getXXX(columnName) method on the ResultSet
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static String getObjectString(ResultSet rs, String columnName, int columnIndex) throws SQLException{
1:5d12015: 		String objectString = null;
1:5d12015: 				
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				//Call toString() only for non-null values, else return null
1:5d12015: 				if(rs.getObject(columnName) != null)
1:5d12015: 					objectString = rs.getObject(columnName).toString();
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1:5d12015: 				if(columnType == java.sql.Types.DECIMAL){
1:5d12015: 					objectString = rs.getString(columnName);
1:5d12015: 				}	
1:5d12015: 				else
1:5d12015: 					//Call toString() only for non-null values, else return null					
1:5d12015: 					if(rs.getObject(columnName) != null)
1:5d12015: 						objectString = rs.getObject(columnName).toString();
1:5d12015: 					break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 		return objectString;
1:5d12015: 	}
1:5d12015: 	
1:5d12015: 	/** This method is a wrapper for ResultSet method 
1:5d12015: 	 * updateBigDecimal(int columnIndex, BigDecimal x)
1:5d12015: 	 * @param rs ResultSet
1:5d12015: 	 * @param columnIndex Column Index
1:5d12015: 	 * @param bdString String to be used in updateXXX method
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static void updateBigDecimalString(ResultSet rs, int columnIndex, String bdString) throws SQLException{
1:5d12015: 				
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
1:5d12015: 				rs.updateBigDecimal(columnIndex, bd);
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				rs.updateString(columnIndex, bdString);
1:5d12015: 				break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 	}
1:5d12015: 	
1:5d12015: 	/** This method is a wrapper for ResultSet method 
1:5d12015: 	 * updateBigDecimal(String columnName, BigDecimal x)
1:5d12015: 	 * @param rs ResultSet
1:5d12015: 	 * @param columnName Column Name
1:5d12015: 	 * @param bdString String to be used in updateXXX method
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static void updateBigDecimalString(ResultSet rs, String columnName,String bdString) throws SQLException{
1:5d12015: 				
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
1:5d12015: 				rs.updateBigDecimal(columnName, bd);
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				rs.updateString(columnName, bdString);
1:5d12015: 				break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 	}
1:5d12015: 
1:5d12015: 	/** This method is a wrapper for the CallableStatement method getBigDecimal(int parameterIndex).
1:5d12015: 	 * The wrapper method needs the parameterType as an input since ParameterMetaData is not available in JSR169.
1:5d12015: 	 * 
1:5d12015: 	 * @param cs CallableStatement 
1:5d12015: 	 * @param parameterIndex Parameter Index
1:5d12015: 	 * @param parameterType Parameter Type
1:5d12015: 	 * @return String value of getXXX(parameterIndex)method on the CallableStatement
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static String getBigDecimalString(CallableStatement cs, int parameterIndex, int parameterType) throws SQLException{
1:5d12015: 		String bigDecimalString = null;
1:5d12015: 		
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				//Call toString() only for non-null values, else return null
1:5d12015: 				if(cs.getBigDecimal(parameterIndex) != null)
1:5d12015: 					bigDecimalString = cs.getBigDecimal(parameterIndex).toString();
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				bigDecimalString = cs.getString(parameterIndex);
1:5d12015: 				if((bigDecimalString != null) && !canConvertToDecimal(parameterType))
1:5d12015: 					throw new SQLException("Invalid data conversion. Method not called.");
1:5d12015: 				break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 		return bigDecimalString;
1:5d12015: 	}	
1:5d12015: 
1:5d12015: 	/** This method is a wrapper for the PreparedStatement method setBigDecimal(int parameterIndex,BigDecimal x)
1:5d12015: 	 * 
1:5d12015: 	 * @param ps PreparedStatement 
1:5d12015: 	 * @param parameterIndex Parameter Index
1:5d12015: 	 * @param bdString String to be used in setXXX method
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static void setBigDecimalString(PreparedStatement ps, int parameterIndex, String bdString) throws SQLException{
1:5d12015: 		
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
1:5d12015: 				ps.setBigDecimal(parameterIndex, bd);
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				//setString is used since setBigDecimal is not available in JSR169
1:5d12015: 				//If bdString cannot be converted to short,int or long, this will throw
1:5d12015: 				//"Invalid character string format exception" 
1:5d12015: 				ps.setString(parameterIndex,bdString);
1:5d12015: 				break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 	}
1:5d12015: 	
1:5d12015: 	/** This method is a wrapper for the PreparedStatement method setObject(int parameterIndex, Object x) 
1:5d12015: 	 * 
1:5d12015: 	 * @param ps PreparedStatement 
1:5d12015: 	 * @param parameterIndex Parameter Index
1:5d12015: 	 * @param objectString String to be used in setObject method
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	public static void setObjectString(PreparedStatement ps, int parameterIndex, String objectString) throws SQLException{
1:5d12015: 		
1:5d12015: 		switch(representation){
1:5d12015: 			case BIGDECIMAL_REPRESENTATION:
1:5d12015: 				BigDecimal bd = (objectString == null) ? null : new BigDecimal(objectString);
1:5d12015: 				ps.setObject(parameterIndex,bd);
1:5d12015: 				break;
1:5d12015: 			case STRING_REPRESENTATION:
1:5d12015: 				ps.setObject(parameterIndex,objectString);
1:5d12015: 				break;
1:5d12015: 			default:	
1:5d12015: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1:5d12015: 		}
1:5d12015: 	}	
1:5d12015: 	
1:5d12015: 	/** This method checks that the SQL type can be converted to Decimal
1:5d12015: 	 * 
1:5d12015: 	 * @param type the SQL type to check
1:5d12015: 	 * @return true if the SQL type is convertible to DECIMAL, false otherwise.
1:5d12015: 	 * @throws SQLException
1:5d12015: 	 */
1:5d12015: 	protected static boolean canConvertToDecimal(int type) throws SQLException{
1:5d12015: 		boolean  canConvert = false;
1:5d12015: 		
1:5d12015: 		for (int bdType = 0; bdType < bdConvertibleTypes.length; bdType++){
1:5d12015: 			if(type == bdConvertibleTypes[bdType]){
1:5d12015: 				canConvert = true;
1:5d12015: 				break;
1:5d12015: 			}
1:5d12015: 		}
1:5d12015: 		
1:5d12015: 		return canConvert;
1:5d12015: 	}
1:5d12015: 	
1:5d12015: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:5d12015
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyTesting.junit.BigDecimalHandler
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1:    http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: package org.apache.derbyTesting.junit;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
1: import java.math.BigDecimal;
1: import java.lang.reflect.*;
1: 
1: /**
1:  *  BigDecimalHandler provides wrappers for JDBC API methods which use BigDecimal.
1:  *  When writing tests which use BigDecimal, the methods in this class can be called
1:  *  instead of directly calling JDBC methods. This way the same test can be used in JVMs 
1:  *  like J2ME/CDC/Foundation Profile 1.0, which do not have BigDecimal class, or
1:  *  JSR169 Profile, which does not support method calls using BigDecimal (such 
1:  *  as ResultSet.getBigDecimal(..).
1:  *  
1:  * 
1:  *
1:  */
1: public class BigDecimalHandler {
1: 	
1: 	public static int representation;
1: 	public static final int STRING_REPRESENTATION = 1;
1: 	public static final int BIGDECIMAL_REPRESENTATION = 2;
1: 	
1: 	static{
1: 		try{
1: 			Class.forName("java.math.BigDecimal");
1: 			representation = BIGDECIMAL_REPRESENTATION;
1: 			// This class will attempt calls to ResultSet.getBigDecimal,
1: 			// which may not be available with jvms that support JSR169,
1: 			// even if BigDecimal itself has been made available (e.g. 
1: 			// supporting J2ME/CDC/Foundation Profile 1.1).
1: 			Method getbd = ResultSet.class.getMethod("getBigDecimal", new Class[] {int.class});
1: 			representation = BIGDECIMAL_REPRESENTATION;
1: 		}
1: 		catch(ClassNotFoundException e){
1: 			//Used for J2ME/Foundation
1: 			representation = STRING_REPRESENTATION;
1: 		}
1: 		catch(NoSuchMethodException e){
1: 			//Used for J2ME/Foundation
1: 			representation = STRING_REPRESENTATION;
1: 		}
1: 
1: 	}
1: 	
1: 	//Type conversions supported by ResultSet getBigDecimal method - JDBC3.0 Table B-6 
1: 	private static final int[] bdConvertibleTypes = 
1: 	{	java.sql.Types.TINYINT,
1: 		java.sql.Types.SMALLINT,
1: 		java.sql.Types.INTEGER,
1: 		java.sql.Types.BIGINT,
1: 		java.sql.Types.REAL,
1: 		java.sql.Types.FLOAT,
1: 		java.sql.Types.DOUBLE,
1: 		java.sql.Types.DECIMAL,
1: 		java.sql.Types.NUMERIC,
1: 		java.sql.Types.BIT,
1: 		//java.sql.Types.BOOLEAN,	//Not supported in jdk13
1: 		java.sql.Types.CHAR,
1: 		java.sql.Types.VARCHAR,
1: 		java.sql.Types.LONGVARCHAR
1: 	};
1: 	
1: 	/** This method is a wrapper for the ResultSet method getBigDecimal(int columnIndex).
1: 	 * 
1: 	 * @param rs ResultSet 
1: 	 * @param columnIndex Column Index 
1: 	 * @return String value of getXXX(columnIndex)method on the ResultSet
1: 	 * @throws SQLException
1: 	 */
1: 	public static String getBigDecimalString(ResultSet rs, int columnIndex) throws SQLException{
1: 		String bigDecimalString=null;
1: 		
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				//Call toString() only for non-null values, else return null
1: 				if(rs.getBigDecimal(columnIndex) != null)
1: 					bigDecimalString = rs.getBigDecimal(columnIndex).toString();
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				bigDecimalString = rs.getString(columnIndex);
1: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1: 				if((bigDecimalString != null) && !canConvertToDecimal(columnType))
1: 					throw new SQLException("Invalid data conversion. Method not called.");
1: 				break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 		return bigDecimalString;
1: 	}
1: 	
1: 	/** This method is a wrapper for ResultSet method getBigDecimal(String columnName).
1: 	 * 
1: 	 * @param rs ResultSet
1: 	 * @param columnName Column Name
1: 	 * @param columnIndex Coulumn Index
1: 	 * @return String value of getXXX(columnName)method on the ResultSet
1: 	 * @throws SQLException
1: 	 */
1: 	public static String getBigDecimalString(ResultSet rs, String columnName, int columnIndex) throws SQLException{
1: 		String bigDecimalString = null;
1: 				
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				//Call toString() only for non-null values, else return null
1: 				if(rs.getBigDecimal(columnName) != null){
1: 					bigDecimalString = rs.getBigDecimal(columnName).toString();
1: 				}
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				bigDecimalString = rs.getString(columnName);
1: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1: 				if((bigDecimalString != null) && !canConvertToDecimal(columnType))
1: 					throw new SQLException("Invalid data conversion. Method not called.");
1: 				break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 		return bigDecimalString;
1: 	}
1: 	
1: 	/** This method is a wrapper for ResultSet method getObject(int columnIndex) 
1: 	 * 
1: 	 * @param rs ResultSet
1: 	 * @param columnIndex ColumnIndex
1: 	 * @return String value of getXXX(columnIndex) method on the ResultSet
1: 	 * @throws SQLException
1: 	 */
1: 	public static String getObjectString(ResultSet rs, int columnIndex) throws SQLException{
1: 		String objectString = null;
1: 		
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				//Call toString() only for non-null values, else return null
1: 				if(rs.getObject(columnIndex) != null)
1: 					objectString = rs.getObject(columnIndex).toString();
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1: 				if(columnType == java.sql.Types.DECIMAL){
1: 					objectString = rs.getString(columnIndex);
1: 				}	
1: 				else
1: 					//Call toString() only for non-null values, else return null
1: 					if(rs.getObject(columnIndex) != null)
1: 						objectString = rs.getObject(columnIndex).toString();
1: 					break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 		return objectString;
1: 	}	
1: 	
1: 	/** This method is a wrapper for ResultSet method getObject(String columnName)
1: 	 * @param rs ResultSet
1: 	 * @param columnName Column Name
1: 	 * @param columnIndex Column Index
1: 	 * @return String value of getXXX(columnName) method on the ResultSet
1: 	 * @throws SQLException
1: 	 */
1: 	public static String getObjectString(ResultSet rs, String columnName, int columnIndex) throws SQLException{
1: 		String objectString = null;
1: 				
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				//Call toString() only for non-null values, else return null
1: 				if(rs.getObject(columnName) != null)
1: 					objectString = rs.getObject(columnName).toString();
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
1: 				if(columnType == java.sql.Types.DECIMAL){
1: 					objectString = rs.getString(columnName);
1: 				}	
1: 				else
1: 					//Call toString() only for non-null values, else return null					
1: 					if(rs.getObject(columnName) != null)
1: 						objectString = rs.getObject(columnName).toString();
1: 					break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 		return objectString;
1: 	}
1: 	
1: 	/** This method is a wrapper for ResultSet method 
1: 	 * updateBigDecimal(int columnIndex, BigDecimal x)
1: 	 * @param rs ResultSet
1: 	 * @param columnIndex Column Index
1: 	 * @param bdString String to be used in updateXXX method
1: 	 * @throws SQLException
1: 	 */
1: 	public static void updateBigDecimalString(ResultSet rs, int columnIndex, String bdString) throws SQLException{
1: 				
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
1: 				rs.updateBigDecimal(columnIndex, bd);
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				rs.updateString(columnIndex, bdString);
1: 				break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 	}
1: 	
1: 	/** This method is a wrapper for ResultSet method 
1: 	 * updateBigDecimal(String columnName, BigDecimal x)
1: 	 * @param rs ResultSet
1: 	 * @param columnName Column Name
1: 	 * @param bdString String to be used in updateXXX method
1: 	 * @throws SQLException
1: 	 */
1: 	public static void updateBigDecimalString(ResultSet rs, String columnName,String bdString) throws SQLException{
1: 				
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
1: 				rs.updateBigDecimal(columnName, bd);
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				rs.updateString(columnName, bdString);
1: 				break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 	}
1: 
1: 	/** This method is a wrapper for the CallableStatement method getBigDecimal(int parameterIndex).
1: 	 * The wrapper method needs the parameterType as an input since ParameterMetaData is not available in JSR169.
1: 	 * 
1: 	 * @param cs CallableStatement 
1: 	 * @param parameterIndex Parameter Index
1: 	 * @param parameterType Parameter Type
1: 	 * @return String value of getXXX(parameterIndex)method on the CallableStatement
1: 	 * @throws SQLException
1: 	 */
1: 	public static String getBigDecimalString(CallableStatement cs, int parameterIndex, int parameterType) throws SQLException{
1: 		String bigDecimalString = null;
1: 		
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				//Call toString() only for non-null values, else return null
1: 				if(cs.getBigDecimal(parameterIndex) != null)
1: 					bigDecimalString = cs.getBigDecimal(parameterIndex).toString();
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				bigDecimalString = cs.getString(parameterIndex);
1: 				if((bigDecimalString != null) && !canConvertToDecimal(parameterType))
1: 					throw new SQLException("Invalid data conversion. Method not called.");
1: 				break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 		return bigDecimalString;
1: 	}	
1: 
1: 	/** This method is a wrapper for the PreparedStatement method setBigDecimal(int parameterIndex,BigDecimal x)
1: 	 * 
1: 	 * @param ps PreparedStatement 
1: 	 * @param parameterIndex Parameter Index
1: 	 * @param bdString String to be used in setXXX method
1: 	 * @throws SQLException
1: 	 */
1: 	public static void setBigDecimalString(PreparedStatement ps, int parameterIndex, String bdString) throws SQLException{
1: 		
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
1: 				ps.setBigDecimal(parameterIndex, bd);
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				//setString is used since setBigDecimal is not available in JSR169
1: 				//If bdString cannot be converted to short,int or long, this will throw
1: 				//"Invalid character string format exception" 
1: 				ps.setString(parameterIndex,bdString);
1: 				break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 	}
1: 	
1: 	/** This method is a wrapper for the PreparedStatement method setObject(int parameterIndex, Object x) 
1: 	 * 
1: 	 * @param ps PreparedStatement 
1: 	 * @param parameterIndex Parameter Index
1: 	 * @param objectString String to be used in setObject method
1: 	 * @throws SQLException
1: 	 */
1: 	public static void setObjectString(PreparedStatement ps, int parameterIndex, String objectString) throws SQLException{
1: 		
1: 		switch(representation){
1: 			case BIGDECIMAL_REPRESENTATION:
1: 				BigDecimal bd = (objectString == null) ? null : new BigDecimal(objectString);
1: 				ps.setObject(parameterIndex,bd);
1: 				break;
1: 			case STRING_REPRESENTATION:
1: 				ps.setObject(parameterIndex,objectString);
1: 				break;
1: 			default:	
1: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
1: 		}
1: 	}	
1: 	
1: 	/** This method checks that the SQL type can be converted to Decimal
1: 	 * 
1: 	 * @param type the SQL type to check
1: 	 * @return true if the SQL type is convertible to DECIMAL, false otherwise.
1: 	 * @throws SQLException
1: 	 */
1: 	protected static boolean canConvertToDecimal(int type) throws SQLException{
1: 		boolean  canConvert = false;
1: 		
1: 		for (int bdType = 0; bdType < bdConvertibleTypes.length; bdType++){
1: 			if(type == bdConvertibleTypes[bdType]){
1: 				canConvert = true;
1: 				break;
1: 			}
1: 		}
1: 		
1: 		return canConvert;
1: 	}
1: 	
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:39a36d8
/////////////////////////////////////////////////////////////////////////
0: 	 * @param objectString String to be used in setObject method
/////////////////////////////////////////////////////////////////////////
0: 	 * @param type the SQL type to check
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:535667b
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0: Derby - Class org.apache.derbyTesting.junit.BigDecimalHandler
0: 
0: Licensed to the Apache Software Foundation (ASF) under one or more
0: contributor license agreements.  See the NOTICE file distributed with
0: this work for additional information regarding copyright ownership.
0: The ASF licenses this file to You under the Apache License, Version 2.0
0: (the "License"); you may not use this file except in compliance with
0: the License.  You may obtain a copy of the License at
0: 
0:    http://www.apache.org/licenses/LICENSE-2.0
0: 
0: Unless required by applicable law or agreed to in writing, software
0: distributed under the License is distributed on an "AS IS" BASIS,
0: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: See the License for the specific language governing permissions and
0: limitations under the License.
0: 
0: */
0: package org.apache.derbyTesting.junit;
0: 
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.CallableStatement;
0: import java.sql.PreparedStatement;
0: import java.math.BigDecimal;
0: import java.lang.reflect.*;
0: 
0: /**
0:  *  BigDecimalHandler provides wrappers for JDBC API methods which use BigDecimal.
0:  *  When writing tests which use BigDecimal, the methods in this class can be called
0:  *  instead of directly calling JDBC methods. This way the same test can be used in JVMs 
0:  *  like J2ME/CDC/Foundation Profile 1.0, which do not have BigDecimal class, or
0:  *  JSR169 Profile, which does not support method calls using BigDecimal (such 
0:  *  as ResultSet.getBigDecimal(..).
0:  *  
0:  * 
0:  *  * @author deepa
0:  *
0:  */
0: public class BigDecimalHandler {
0: 	
0: 	public static int representation;
0: 	public static final int STRING_REPRESENTATION = 1;
0: 	public static final int BIGDECIMAL_REPRESENTATION = 2;
0: 	
0: 	static{
0: 		try{
0: 			Class.forName("java.math.BigDecimal");
0: 			representation = BIGDECIMAL_REPRESENTATION;
0: 			// This class will attempt calls to ResultSet.getBigDecimal,
0: 			// which may not be available with jvms that support JSR169,
0: 			// even if BigDecimal itself has been made available (e.g. 
0: 			// supporting J2ME/CDC/Foundation Profile 1.1).
0: 			Method getbd = ResultSet.class.getMethod("getBigDecimal", new Class[] {int.class});
0: 			representation = BIGDECIMAL_REPRESENTATION;
0: 		}
0: 		catch(ClassNotFoundException e){
0: 			//Used for J2ME/Foundation
0: 			representation = STRING_REPRESENTATION;
0: 		}
0: 		catch(NoSuchMethodException e){
0: 			//Used for J2ME/Foundation
0: 			representation = STRING_REPRESENTATION;
0: 		}
0: 
0: 	}
0: 	
0: 	//Type conversions supported by ResultSet getBigDecimal method - JDBC3.0 Table B-6 
0: 	private static final int[] bdConvertibleTypes = 
0: 	{	java.sql.Types.TINYINT,
0: 		java.sql.Types.SMALLINT,
0: 		java.sql.Types.INTEGER,
0: 		java.sql.Types.BIGINT,
0: 		java.sql.Types.REAL,
0: 		java.sql.Types.FLOAT,
0: 		java.sql.Types.DOUBLE,
0: 		java.sql.Types.DECIMAL,
0: 		java.sql.Types.NUMERIC,
0: 		java.sql.Types.BIT,
0: 		//java.sql.Types.BOOLEAN,	//Not supported in jdk13
0: 		java.sql.Types.CHAR,
0: 		java.sql.Types.VARCHAR,
0: 		java.sql.Types.LONGVARCHAR
0: 	};
0: 	
0: 	/** This method is a wrapper for the ResultSet method getBigDecimal(int columnIndex).
0: 	 * 
0: 	 * @param rs ResultSet 
0: 	 * @param columnIndex Column Index 
0: 	 * @return String value of getXXX(columnIndex)method on the ResultSet
0: 	 * @throws SQLException
0: 	 */
0: 	public static String getBigDecimalString(ResultSet rs, int columnIndex) throws SQLException{
0: 		String bigDecimalString=null;
0: 		
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				//Call toString() only for non-null values, else return null
0: 				if(rs.getBigDecimal(columnIndex) != null)
0: 					bigDecimalString = rs.getBigDecimal(columnIndex).toString();
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				bigDecimalString = rs.getString(columnIndex);
0: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
0: 				if((bigDecimalString != null) && !canConvertToDecimal(columnType))
0: 					throw new SQLException("Invalid data conversion. Method not called.");
0: 				break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 		return bigDecimalString;
0: 	}
0: 	
0: 	/** This method is a wrapper for ResultSet method getBigDecimal(String columnName).
0: 	 * 
0: 	 * @param rs ResultSet
0: 	 * @param columnName Column Name
0: 	 * @param columnIndex Coulumn Index
0: 	 * @return String value of getXXX(columnName)method on the ResultSet
0: 	 * @throws SQLException
0: 	 */
0: 	public static String getBigDecimalString(ResultSet rs, String columnName, int columnIndex) throws SQLException{
0: 		String bigDecimalString = null;
0: 				
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				//Call toString() only for non-null values, else return null
0: 				if(rs.getBigDecimal(columnName) != null){
0: 					bigDecimalString = rs.getBigDecimal(columnName).toString();
0: 				}
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				bigDecimalString = rs.getString(columnName);
0: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
0: 				if((bigDecimalString != null) && !canConvertToDecimal(columnType))
0: 					throw new SQLException("Invalid data conversion. Method not called.");
0: 				break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 		return bigDecimalString;
0: 	}
0: 	
0: 	/** This method is a wrapper for ResultSet method getObject(int columnIndex) 
0: 	 * 
0: 	 * @param rs ResultSet
0: 	 * @param columnIndex ColumnIndex
0: 	 * @return String value of getXXX(columnIndex) method on the ResultSet
0: 	 * @throws SQLException
0: 	 */
0: 	public static String getObjectString(ResultSet rs, int columnIndex) throws SQLException{
0: 		String objectString = null;
0: 		
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				//Call toString() only for non-null values, else return null
0: 				if(rs.getObject(columnIndex) != null)
0: 					objectString = rs.getObject(columnIndex).toString();
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
0: 				if(columnType == java.sql.Types.DECIMAL){
0: 					objectString = rs.getString(columnIndex);
0: 				}	
0: 				else
0: 					//Call toString() only for non-null values, else return null
0: 					if(rs.getObject(columnIndex) != null)
0: 						objectString = rs.getObject(columnIndex).toString();
0: 					break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 		return objectString;
0: 	}	
0: 	
0: 	/** This method is a wrapper for ResultSet method getObject(String columnName)
0: 	 * @param rs ResultSet
0: 	 * @param columnName Column Name
0: 	 * @param columnIndex Column Index
0: 	 * @return String value of getXXX(columnName) method on the ResultSet
0: 	 * @throws SQLException
0: 	 */
0: 	public static String getObjectString(ResultSet rs, String columnName, int columnIndex) throws SQLException{
0: 		String objectString = null;
0: 				
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				//Call toString() only for non-null values, else return null
0: 				if(rs.getObject(columnName) != null)
0: 					objectString = rs.getObject(columnName).toString();
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				int columnType= rs.getMetaData().getColumnType(columnIndex);
0: 				if(columnType == java.sql.Types.DECIMAL){
0: 					objectString = rs.getString(columnName);
0: 				}	
0: 				else
0: 					//Call toString() only for non-null values, else return null					
0: 					if(rs.getObject(columnName) != null)
0: 						objectString = rs.getObject(columnName).toString();
0: 					break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 		return objectString;
0: 	}
0: 	
0: 	/** This method is a wrapper for ResultSet method 
0: 	 * updateBigDecimal(int columnIndex, BigDecimal x)
0: 	 * @param rs ResultSet
0: 	 * @param columnIndex Column Index
0: 	 * @param bdString String to be used in updateXXX method
0: 	 * @throws SQLException
0: 	 */
0: 	public static void updateBigDecimalString(ResultSet rs, int columnIndex, String bdString) throws SQLException{
0: 				
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
0: 				rs.updateBigDecimal(columnIndex, bd);
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				rs.updateString(columnIndex, bdString);
0: 				break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 	}
0: 	
0: 	/** This method is a wrapper for ResultSet method 
0: 	 * updateBigDecimal(String columnName, BigDecimal x)
0: 	 * @param rs ResultSet
0: 	 * @param columnName Column Name
0: 	 * @param bdString String to be used in updateXXX method
0: 	 * @throws SQLException
0: 	 */
0: 	public static void updateBigDecimalString(ResultSet rs, String columnName,String bdString) throws SQLException{
0: 				
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
0: 				rs.updateBigDecimal(columnName, bd);
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				rs.updateString(columnName, bdString);
0: 				break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 	}
0: 
0: 	/** This method is a wrapper for the CallableStatement method getBigDecimal(int parameterIndex).
0: 	 * The wrapper method needs the parameterType as an input since ParameterMetaData is not available in JSR169.
0: 	 * 
0: 	 * @param cs CallableStatement 
0: 	 * @param parameterIndex Parameter Index
0: 	 * @param parameterType Parameter Type
0: 	 * @return String value of getXXX(parameterIndex)method on the CallableStatement
0: 	 * @throws SQLException
0: 	 */
0: 	public static String getBigDecimalString(CallableStatement cs, int parameterIndex, int parameterType) throws SQLException{
0: 		String bigDecimalString = null;
0: 		
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				//Call toString() only for non-null values, else return null
0: 				if(cs.getBigDecimal(parameterIndex) != null)
0: 					bigDecimalString = cs.getBigDecimal(parameterIndex).toString();
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				bigDecimalString = cs.getString(parameterIndex);
0: 				if((bigDecimalString != null) && !canConvertToDecimal(parameterType))
0: 					throw new SQLException("Invalid data conversion. Method not called.");
0: 				break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 		return bigDecimalString;
0: 	}	
0: 
0: 	/** This method is a wrapper for the PreparedStatement method setBigDecimal(int parameterIndex,BigDecimal x)
0: 	 * 
0: 	 * @param ps PreparedStatement 
0: 	 * @param parameterIndex Parameter Index
0: 	 * @param bdString String to be used in setXXX method
0: 	 * @throws SQLException
0: 	 */
0: 	public static void setBigDecimalString(PreparedStatement ps, int parameterIndex, String bdString) throws SQLException{
0: 		
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				BigDecimal bd = (bdString == null) ? null : new BigDecimal(bdString);
0: 				ps.setBigDecimal(parameterIndex, bd);
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				//setString is used since setBigDecimal is not available in JSR169
0: 				//If bdString cannot be converted to short,int or long, this will throw
0: 				//"Invalid character string format exception" 
0: 				ps.setString(parameterIndex,bdString);
0: 				break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 	}
0: 	
0: 	/** This method is a wrapper for the PreparedStatement method setObject(int parameterIndex, Object x) 
0: 	 * 
0: 	 * @param ps PreparedStatement 
0: 	 * @param parameterIndex Parameter Index
0: 	 * @param bdString String to be used in setObject method
0: 	 * @throws SQLException
0: 	 */
0: 	public static void setObjectString(PreparedStatement ps, int parameterIndex, String objectString) throws SQLException{
0: 		
0: 		switch(representation){
0: 			case BIGDECIMAL_REPRESENTATION:
0: 				BigDecimal bd = (objectString == null) ? null : new BigDecimal(objectString);
0: 				ps.setObject(parameterIndex,bd);
0: 				break;
0: 			case STRING_REPRESENTATION:
0: 				ps.setObject(parameterIndex,objectString);
0: 				break;
0: 			default:	
0: 				new Exception("Failed: Invalid Big Decimal representation").printStackTrace();
0: 		}
0: 	}	
0: 	
0: 	/** This method checks that the SQL type can be converted to Decimal
0: 	 * 
0: 	 * @param rs ResultSet
0: 	 * @param columnIndex Column Index
0: 	 * @return true if the SQL type is convertible to DECIMAL, false otherwise.
0: 	 * @throws SQLException
0: 	 */
0: 	protected static boolean canConvertToDecimal(int type) throws SQLException{
0: 		boolean  canConvert = false;
0: 		
0: 		for (int bdType = 0; bdType < bdConvertibleTypes.length; bdType++){
0: 			if(type == bdConvertibleTypes[bdType]){
0: 				canConvert = true;
0: 				break;
0: 			}
0: 		}
0: 		
0: 		return canConvert;
0: 	}
0: 	
0: }
============================================================================