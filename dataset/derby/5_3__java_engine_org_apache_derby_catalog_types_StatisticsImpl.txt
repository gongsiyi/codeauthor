1:eac0369: /*
2:eac0369: 
1:345de35:    Derby - Class org.apache.derby.catalog.types.StatisticsImpl
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog.types;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.Statistics;
1:eac0369: import org.apache.derby.iapi.services.io.Formatable;
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
1:eac0369: public class StatisticsImpl	implements Statistics, Formatable
1:eac0369: {
1:eac0369: 	/* total count of rows for which this statistic was created-- this
1:eac0369: 	   is not the same as the total number of rows in the conglomerate
1:eac0369: 	   currently, but a snapshot; i.e the  number of rows when this
1:eac0369: 	   statistic was created/updated.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	private long numRows;
1:eac0369: 	
1:eac0369: 	/* total count of unique values for the keys 
1:eac0369: 	 */
1:eac0369: 	private long numUnique;
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 	 * Constructor for StatisticsImpl.
1:eac0369: 	 * 
1:eac0369: 	 * @param numRows	number of rows in the conglomerate for which
1:eac0369: 	 * this statistic is being created.
1:eac0369: 	 * @param numUnique number of unique values in the key for which
1:eac0369: 	 * this statistic is being created.
1:eac0369: 	 */
1:eac0369: 	public StatisticsImpl(long numRows, long numUnique)
1:eac0369: 	{
1:eac0369: 		this.numRows = numRows;
1:eac0369: 		this.numUnique = numUnique;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Zero argument constructor for Formatable Interface */
1:eac0369: 	public StatisticsImpl()
1:eac0369: 	{}
1:eac0369: 
1:47eac7d:     /** {@inheritDoc} */
1:47eac7d:     public long getRowEstimate() {
1:47eac7d:         return numRows;
1:47eac7d:     }
1:47eac7d: 
1:eac0369: 	/** @see Statistics#selectivity */
1:eac0369: 	public double selectivity(Object[] predicates)
1:eac0369: 	{
1:eac0369: 		if (numRows == 0.0)
1:eac0369: 			return 0.1;
1:eac0369: 
1:eac0369: 		/* xxxSTATresolve: for small values of numRows, should we do something
1:eac0369: 		 * special? 
1:eac0369: 		 */
1:eac0369: 		return (double)(1/(double)numUnique);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*------------------ Externalizable Interface ------------------*/
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * @see java.io.Externalizable#readExternal
1:eac0369: 	 */
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1:eac0369: 		numRows = fh.getLong("numRows");
1:eac0369: 		numUnique = fh.getLong("numUnique");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 *
1:eac0369: 	 * @exception IOException		thrown on error
1:eac0369: 	 */
1:eac0369: 	public void writeExternal(ObjectOutput out)
1:eac0369: 		 throws IOException
1:eac0369: 	{
1:eac0369: 		FormatableHashtable fh = new FormatableHashtable();
1:eac0369: 		fh.putLong("numRows", numRows);
1:eac0369: 		fh.putLong("numUnique", numUnique);
1:eac0369: 		out.writeObject(fh);
1:eac0369: 	}
1:eac0369: 		
1:eac0369: 	/*------------------- Formatable Interface ------------------*/
1:eac0369: 	/**
1:eac0369: 	 * @return the format id which corresponds to this class.
1:eac0369: 	 */
1:eac0369: 	public int getTypeFormatId()
1:eac0369: 	{
1:eac0369: 		return StoredFormatIds.STATISTICS_IMPL_V01_ID;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	
1:eac0369: 	/** @see java.lang.Object#toString */
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		return "numunique= " + numUnique + " numrows= " + numRows;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:47eac7d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /** {@inheritDoc} */
1:     public long getRowEstimate() {
1:         return numRows;
1:     }
1: 
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.types.StatisticsImpl
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog.types;
1: 
1: import org.apache.derby.catalog.Statistics;
1: import org.apache.derby.iapi.services.io.Formatable;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableLongHolder;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: public class StatisticsImpl	implements Statistics, Formatable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	/* total count of rows for which this statistic was created-- this
1: 	   is not the same as the total number of rows in the conglomerate
1: 	   currently, but a snapshot; i.e the  number of rows when this
1: 	   statistic was created/updated.
1: 	*/
1: 
1: 	private long numRows;
1: 	
1: 	/* total count of unique values for the keys 
1: 	 */
1: 	private long numUnique;
1: 
1: 	/**
1: 	 * Constructor for StatisticsImpl.
1: 	 * 
1: 	 * @param numRows	number of rows in the conglomerate for which
1: 	 * this statistic is being created.
1: 	 * @param numUnique number of unique values in the key for which
1: 	 * this statistic is being created.
1: 	 */
1: 	public StatisticsImpl(long numRows, long numUnique)
1: 	{
1: 		this.numRows = numRows;
1: 		this.numUnique = numUnique;
1: 	}
1: 
1: 	/** Zero argument constructor for Formatable Interface */
1: 	public StatisticsImpl()
1: 	{}
1: 
1: 	/** @see Statistics#selectivity */
1: 	public double selectivity(Object[] predicates)
1: 	{
1: 		if (numRows == 0.0)
1: 			return 0.1;
1: 
1: 		/* xxxSTATresolve: for small values of numRows, should we do something
1: 		 * special? 
1: 		 */
1: 		return (double)(1/(double)numUnique);
1: 	}
1: 
1: 	/*------------------ Externalizable Interface ------------------*/
1: 	
1: 	/**
1: 	 * @see java.io.Externalizable#readExternal
1: 	 */
1: 	public void readExternal(ObjectInput in) 
1: 		throws IOException, ClassNotFoundException
1: 	{
1: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1: 		numRows = fh.getLong("numRows");
1: 		numUnique = fh.getLong("numUnique");
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 *
1: 	 * @exception IOException		thrown on error
1: 	 */
1: 	public void writeExternal(ObjectOutput out)
1: 		 throws IOException
1: 	{
1: 		FormatableHashtable fh = new FormatableHashtable();
1: 		fh.putLong("numRows", numRows);
1: 		fh.putLong("numUnique", numUnique);
1: 		out.writeObject(fh);
1: 	}
1: 		
1: 	/*------------------- Formatable Interface ------------------*/
1: 	/**
1: 	 * @return the format id which corresponds to this class.
1: 	 */
1: 	public int getTypeFormatId()
1: 	{
1: 		return StoredFormatIds.STATISTICS_IMPL_V01_ID;
1: 	}
1: 
1: 	
1: 	/** @see java.lang.Object#toString */
1: 	public String toString()
1: 	{
1: 		return "numunique= " + numUnique + " numrows= " + numRows;
1: 	}
1: 	
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog.types
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog.types;
0: 
0: import org.apache.derby.catalog.Statistics;
0: import org.apache.derby.iapi.services.io.Formatable;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableLongHolder;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: public class StatisticsImpl	implements Statistics, Formatable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	/* total count of rows for which this statistic was created-- this
0: 	   is not the same as the total number of rows in the conglomerate
0: 	   currently, but a snapshot; i.e the  number of rows when this
0: 	   statistic was created/updated.
0: 	*/
0: 
0: 	private long numRows;
0: 	
0: 	/* total count of unique values for the keys 
0: 	 */
0: 	private long numUnique;
0: 
0: 	/**
0: 	 * Constructor for StatisticsImpl.
0: 	 * 
0: 	 * @param numRows	number of rows in the conglomerate for which
0: 	 * this statistic is being created.
0: 	 * @param numUnique number of unique values in the key for which
0: 	 * this statistic is being created.
0: 	 */
0: 	public StatisticsImpl(long numRows, long numUnique)
0: 	{
0: 		this.numRows = numRows;
0: 		this.numUnique = numUnique;
0: 	}
0: 
0: 	/** Zero argument constructor for Formatable Interface */
0: 	public StatisticsImpl()
0: 	{}
0: 
0: 	/** @see Statistics#selectivity */
0: 	public double selectivity(Object[] predicates)
0: 	{
0: 		if (numRows == 0.0)
0: 			return 0.1;
0: 
0: 		/* xxxSTATresolve: for small values of numRows, should we do something
0: 		 * special? 
0: 		 */
0: 		return (double)(1/(double)numUnique);
0: 	}
0: 
0: 	/*------------------ Externalizable Interface ------------------*/
0: 	
0: 	/**
0: 	 * @see java.io.Externalizable#readExternal
0: 	 */
0: 	public void readExternal(ObjectInput in) 
0: 		throws IOException, ClassNotFoundException
0: 	{
0: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
0: 		numRows = fh.getLong("numRows");
0: 		numUnique = fh.getLong("numUnique");
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 *
0: 	 * @exception IOException		thrown on error
0: 	 */
0: 	public void writeExternal(ObjectOutput out)
0: 		 throws IOException
0: 	{
0: 		FormatableHashtable fh = new FormatableHashtable();
0: 		fh.putLong("numRows", numRows);
0: 		fh.putLong("numUnique", numUnique);
0: 		out.writeObject(fh);
0: 	}
0: 		
0: 	/*------------------- Formatable Interface ------------------*/
0: 	/**
0: 	 * @return the format id which corresponds to this class.
0: 	 */
0: 	public int getTypeFormatId()
0: 	{
0: 		return StoredFormatIds.STATISTICS_IMPL_V01_ID;
0: 	}
0: 
0: 	
0: 	/** @see java.lang.Object#toString */
0: 	public String toString()
0: 	{
0: 		return "numunique= " + numUnique + " numrows= " + numRows;
0: 	}
0: 	
0: }
============================================================================