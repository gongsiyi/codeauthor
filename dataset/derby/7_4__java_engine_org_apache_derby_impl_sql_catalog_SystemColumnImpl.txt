1:eac0369: /*
1:c4c6000: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.SystemColumnImpl
1:c4c6000: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:c4c6000: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
12:eac0369:  */
1:345de35: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:345de35: 
1:9d3ba33: import java.sql.Types;
1:9d3ba33: 
1:96ae6f3: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:eac0369: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:c4c6000: import org.apache.derby.iapi.types.TypeId;
1:2a5922a: import org.apache.derby.iapi.error.StandardException;
17:eac0369: 
11:eac0369: /**
1:eac0369:  * Implements the description of a column in a system table.
11:eac0369:  *
1:eac0369:  *
1:eac0369:  * @version 0.1
1:eac0369:  */
1:9d3ba33: 
1:9d3ba33: class SystemColumnImpl implements SystemColumn
2:c4c6000: {
1:c4c6000: 	private	final String	name;
1:9d3ba33:    
1:c4c6000:     /**
1:c4c6000:      * Fully described type of the column.
1:c4c6000:      */
1:c4c6000:     private final DataTypeDescriptor type;
1:9d3ba33:     
1:9d3ba33:     /**
1:9d3ba33:      * Create a system column for a builtin type.
1:9d3ba33:      * 
2:9d3ba33:      * @param name
1:9d3ba33:      *            name of column
1:9d3ba33:      * @param jdbcTypeId
1:9d3ba33:      *            JDBC type id from java.sql.Types
2:9d3ba33:      * @param nullability
2:9d3ba33:      *            Whether or not column accepts nulls.
1:9d3ba33:      */
1:9d3ba33:     static SystemColumn getColumn(String name, int jdbcTypeId,
2:9d3ba33:             boolean nullability) {
1:9d3ba33:         return new SystemColumnImpl(name, DataTypeDescriptor
1:9d3ba33:                 .getBuiltInDataTypeDescriptor(jdbcTypeId, nullability));
1:9d3ba33:     }
1:4b3350c:     
1:4b3350c:     /**
1:4b3350c:      * Create a system column for a builtin type.
1:4b3350c:      * 
1:4b3350c:      * @param name
1:4b3350c:      *            name of column
1:4b3350c:      * @param jdbcTypeId
1:4b3350c:      *            JDBC type id from java.sql.Types
1:4b3350c:      * @param nullability
1:4b3350c:      *            Whether or not column accepts nulls.
1:4b3350c:      */
1:4b3350c:     static SystemColumn getColumn(String name, int jdbcTypeId,
1:4b3350c:             boolean nullability,int maxLength) {
1:4b3350c:         return new SystemColumnImpl(name, DataTypeDescriptor
1:4b3350c:                 .getBuiltInDataTypeDescriptor(jdbcTypeId, nullability, maxLength));
1:4b3350c:     }
1:4b3350c:     
1:9d3ba33:     /**
1:9d3ba33:      * Create a system column for an identifer with consistent type of
1:9d3ba33:      * VARCHAR(128)
1:9d3ba33:      * 
1:9d3ba33:      * @param name
1:9d3ba33:      *            Name of the column.
1:9d3ba33:      * @param nullability
1:9d3ba33:      *            Nullability of the column.
1:9d3ba33:      * @return Object representing the column.
1:9d3ba33:      */
1:9d3ba33:     static SystemColumn getIdentifierColumn(String name, boolean nullability) {
1:9d3ba33:         return new SystemColumnImpl(name, DataTypeDescriptor
1:9d3ba33:                 .getBuiltInDataTypeDescriptor(Types.VARCHAR, nullability, 128));
1:9d3ba33:     }
1:9d3ba33: 
1:9d3ba33:     /**
1:9d3ba33:      * Create a system column for a character representation of a UUID with
1:9d3ba33:      * consistent type of CHAR(36)
1:9d3ba33:      * 
1:9d3ba33:      * @param name
1:9d3ba33:      *            Name of the column.
1:9d3ba33:      * @param nullability
1:9d3ba33:      *            Nullability of the column.
1:9d3ba33:      * @return Object representing the column.
1:9d3ba33:      */
1:9d3ba33:     static SystemColumn getUUIDColumn(String name, boolean nullability) {
1:9d3ba33:         return new SystemColumnImpl(name, DataTypeDescriptor
1:9d3ba33:                 .getBuiltInDataTypeDescriptor(Types.CHAR, nullability, 36));
1:9d3ba33:     }
1:9d3ba33: 
1:9d3ba33:     /**
1:9d3ba33:      * Create a system column for a character representation of an indicator
1:9d3ba33:      * column with consistent type of CHAR(1) NOT NULL
1:9d3ba33:      * 
1:9d3ba33:      * @param name
1:9d3ba33:      *            Name of the column.
1:9d3ba33:      * @return Object representing the column.
1:9d3ba33:      */
1:9d3ba33:     static SystemColumn getIndicatorColumn(String name) {
1:9d3ba33:         return new SystemColumnImpl(name, DataTypeDescriptor
1:9d3ba33:                 .getBuiltInDataTypeDescriptor(Types.CHAR, false, 1));
1:9d3ba33:     }
1:9d3ba33: 
1:9d3ba33:     /**
1:9d3ba33:      * Create a system column for a java column.
1:9d3ba33:      * 
1:9d3ba33:      * @param name
1:9d3ba33:      *            Name of the column.
1:9d3ba33:      * @param javaClassName
1:9d3ba33:      * @param nullability
1:9d3ba33:      *            Nullability of the column.
1:9d3ba33:      * @return Object representing the column.
1:9d3ba33:      */
1:9d3ba33:     static SystemColumn getJavaColumn(String name, String javaClassName,
1:2a5922a:             boolean nullability)
1:2a5922a:         throws StandardException
1:2a5922a:     {
1:9d3ba33: 
1:bbd82de:         TypeId typeId = TypeId.getUserDefinedTypeId(javaClassName);
1:9d3ba33: 
1:9d3ba33:         DataTypeDescriptor dtd = new DataTypeDescriptor(typeId, nullability);
1:9d3ba33:         return new SystemColumnImpl(name, dtd);
1:9d3ba33:     }
1:9d3ba33: 
1:9d3ba33:     /**
1:9d3ba33:      * Create a SystemColumnImpl representing the given name and type.
1:9d3ba33:      */
1:9d3ba33:     private SystemColumnImpl(String name, DataTypeDescriptor type) {
1:9d3ba33:         this.name = name;
1:9d3ba33:         this.type = type;
1:9d3ba33:     }
1:c4c6000: 
1:c4c6000: 	/**
1:eac0369: 	 * Gets the name of this column.
1:9d3ba33: 	 *
1:eac0369: 	 * @return	The column name.
1:9d3ba33: 	 */
1:eac0369: 	public String	getName()
1:9d3ba33: 	{
1:eac0369: 		return	name;
1:9d3ba33: 	}
1:c4c6000: 
1:eac0369:     /**
1:c4c6000:      * Return the type of this column.
1:c4c6000:      */
1:c4c6000:     public DataTypeDescriptor getType() {
1:c4c6000:         return type;
1:c4c6000:     }
1:c4c6000: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:bbd82de
/////////////////////////////////////////////////////////////////////////
1:         TypeId typeId = TypeId.getUserDefinedTypeId(javaClassName);
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
1:             boolean nullability)
1:         throws StandardException
1:     {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:96ae6f3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
/////////////////////////////////////////////////////////////////////////
commit:4b3350c
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Create a system column for a builtin type.
1:      * 
1:      * @param name
1:      *            name of column
1:      * @param jdbcTypeId
1:      *            JDBC type id from java.sql.Types
1:      * @param nullability
1:      *            Whether or not column accepts nulls.
1:      */
1:     static SystemColumn getColumn(String name, int jdbcTypeId,
1:             boolean nullability,int maxLength) {
1:         return new SystemColumnImpl(name, DataTypeDescriptor
1:                 .getBuiltInDataTypeDescriptor(jdbcTypeId, nullability, maxLength));
1:     }
1:     
commit:9d3ba33
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: 
/////////////////////////////////////////////////////////////////////////
1: class SystemColumnImpl implements SystemColumn
1:    
1:     
1:     /**
1:      * Create a system column for a builtin type.
1:      * 
1:      * @param name
1:      *            name of column
1:      * @param jdbcTypeId
1:      *            JDBC type id from java.sql.Types
1:      * @param nullability
1:      *            Whether or not column accepts nulls.
1:      */
1:     static SystemColumn getColumn(String name, int jdbcTypeId,
1:             boolean nullability) {
1:         return new SystemColumnImpl(name, DataTypeDescriptor
1:                 .getBuiltInDataTypeDescriptor(jdbcTypeId, nullability));
1:     }
1: 
1:     /**
1:      * Create a system column for an identifer with consistent type of
1:      * VARCHAR(128)
1:      * 
1:      * @param name
1:      *            Name of the column.
1:      * @param nullability
1:      *            Nullability of the column.
1:      * @return Object representing the column.
1:      */
1:     static SystemColumn getIdentifierColumn(String name, boolean nullability) {
1:         return new SystemColumnImpl(name, DataTypeDescriptor
1:                 .getBuiltInDataTypeDescriptor(Types.VARCHAR, nullability, 128));
1:     }
1: 
1:     /**
1:      * Create a system column for a character representation of a UUID with
1:      * consistent type of CHAR(36)
1:      * 
1:      * @param name
1:      *            Name of the column.
1:      * @param nullability
1:      *            Nullability of the column.
1:      * @return Object representing the column.
1:      */
1:     static SystemColumn getUUIDColumn(String name, boolean nullability) {
1:         return new SystemColumnImpl(name, DataTypeDescriptor
1:                 .getBuiltInDataTypeDescriptor(Types.CHAR, nullability, 36));
1:     }
1: 
1:     /**
1:      * Create a system column for a character representation of an indicator
1:      * column with consistent type of CHAR(1) NOT NULL
1:      * 
1:      * @param name
1:      *            Name of the column.
1:      * @return Object representing the column.
1:      */
1:     static SystemColumn getIndicatorColumn(String name) {
1:         return new SystemColumnImpl(name, DataTypeDescriptor
1:                 .getBuiltInDataTypeDescriptor(Types.CHAR, false, 1));
1:     }
1: 
1:     /**
1:      * Create a system column for a java column.
1:      * 
1:      * @param name
1:      *            Name of the column.
1:      * @param javaClassName
1:      * @param nullability
1:      *            Nullability of the column.
1:      * @return Object representing the column.
1:      */
1:     static SystemColumn getJavaColumn(String name, String javaClassName,
1:             boolean nullability) {
1: 
0:         TypeId typeId = TypeId.getUserDefinedTypeId(javaClassName, false);
1: 
1:         DataTypeDescriptor dtd = new DataTypeDescriptor(typeId, nullability);
1:         return new SystemColumnImpl(name, dtd);
1:     }
1: 
1:     /**
1:      * Create a SystemColumnImpl representing the given name and type.
1:      */
1:     private SystemColumnImpl(String name, DataTypeDescriptor type) {
1:         this.name = name;
1:         this.type = type;
1:     }
0:      * Constructor to create a description of a column in a system table.
1:      * 
1:      * @param name
0:      *            of column.
0:      * @param id
0:      *            of column.
1:      * @param nullability
1:      *            Whether or not column accepts nulls.
0:      * @param dataType
0:      *            Datatype of column.
0:      * @param maxLength
0:      *            Maximum length of data in column.
1:      */
0: 	SystemColumnImpl(	String	name,
/////////////////////////////////////////////////////////////////////////
0:                                0,
0:                                0,
0:     SystemColumnImpl(   String  name,
0:             int     id,
0:             int ignoreP,
0:             int ignoreS,
0:             boolean nullability,
0:             String  dataType,
0:             boolean builtInType,
0:             int     maxLength )
1: {
0:         this(name, id, nullability, dataType, builtInType, maxLength);
1: }
/////////////////////////////////////////////////////////////////////////
0: 	SystemColumnImpl(	String	name,
0:         this(name, id, nullability, "VARCHAR", true, 128);
/////////////////////////////////////////////////////////////////////////
commit:c4c6000
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1: 	private	final String	name;
0: 	private	final int		id;
1:     
1:     /**
1:      * Fully described type of the column.
1:      */
1:     private final DataTypeDescriptor type;
/////////////////////////////////////////////////////////////////////////
1:         
0:         TypeId  typeId;
1: 
0:         if (builtInType)
1:         {
0:             typeId = TypeId.getBuiltInTypeId(dataType);
1:         }
0:         else
1:         {
1: 
0:             typeId = TypeId.getUserDefinedTypeId(dataType, false);
1:         }
1: 
0:         this.type = new DataTypeDescriptor(
0:                                typeId,
0:                                precision,
0:                                scale,
0:                                nullability,
0:                                maxLength
0:                                );
/////////////////////////////////////////////////////////////////////////
0:         this(name, id, 0, 0, nullability, "VARCHAR", true, 128);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Return the type of this column.
1:      */
1:     public DataTypeDescriptor getType() {
1:         return type;
0:     }
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.SystemColumnImpl
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import	org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
1: 
1: /**
1:  * Implements the description of a column in a system table.
1:  *
1:  *
1:  * @version 0.1
0:  * @author Rick Hillegas
1:  */
1: 
0: public class SystemColumnImpl implements SystemColumn
0: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private	String	name;
0: 	private	int		id;
0: 	private	int		precision;
0: 	private int		scale;
0: 	private	boolean	nullability;
0: 	private String	dataType;
0: 	private boolean	builtInType;
0: 	private	int		maxLength;
1: 
1: 	/**
0: 	 * Constructor to create a description of a column in a system table.
1: 	 *
0: 	 *	@param	Name of column.
0: 	 *	@param	Id of column.
0: 	 *	@param	Precision of data in column.
0: 	 *	@param	Scale of data in column.
0: 	 *	@param	Whether or not column accepts nulls.
0: 	 *	@param	Datatype of column.
0: 	 *	@param	Maximum length of data in column.
1: 	 */
0: 	public	SystemColumnImpl(	String	name,
0: 								int		id,
0: 								int		precision,
0: 								int		scale,
0: 								boolean	nullability,
0: 								String	dataType,
0: 								boolean	builtInType,
0: 								int		maxLength )
0: 	{
0: 		this.name			= name;
0: 		this.id				= id;
0: 		this.precision		= precision;
0: 		this.scale			= scale;
0: 		this.nullability	= nullability;
0: 		this.dataType		= dataType;
0: 		this.builtInType	= builtInType;
0: 		this.maxLength		= maxLength;
0: 	}
1: 
1: 	/**
0: 	 * Constructor to create a description of a column in a system table.
0: 	 * This constructor is used for SQL Identifiers (varchar 128).
1: 	 *
0: 	 *	@param	Name of column.
0: 	 *	@param	Id of column.
0: 	 *	@param	Whether or not column accepts nulls.
1: 	 */
0: 	public	SystemColumnImpl(	String	name,
0: 								int		id,
0: 								boolean	nullability)
0: 	{
0: 		this.name			= name;
0: 		this.id				= id;
0: 		this.nullability	= nullability;
0: 		this.dataType		= "VARCHAR";
0: 		this.builtInType	= true;
0: 		this.maxLength		= 128;
0: 	}
1: 
1: 	/**
1: 	 * Gets the name of this column.
1: 	 *
1: 	 * @return	The column name.
1: 	 */
1: 	public String	getName()
0: 	{
1: 		return	name;
0: 	}
1: 
1: 	/**
0: 	 * Gets the id of this column.
1: 	 *
0: 	 * @return	The column id.
1: 	 */
0: 	public int	getID()
0: 	{
0: 		return	id;
0: 	}
1: 
1: 	/**
0: 	 * Gets the precision of this column.
1: 	 *
0: 	 * @return	The precision of data stored in this column.
1: 	 */
0: 	public int	getPrecision()
0: 	{
0: 		return	precision;
0: 	}
1: 
1: 	/**
0: 	 * Gets the scale of this column.
1: 	 *
0: 	 * @return	The scale of data stored in this column.
1: 	 */
0: 	public int	getScale()
0: 	{
0: 		return	scale;
0: 	}
1: 
1: 	/**
0: 	 * Gets the nullability of this column.
1: 	 *
0: 	 * @return	True if this column is nullable. False otherwise.
1: 	 */
0: 	public boolean	getNullability()
0: 	{
0: 		return	nullability;
0: 	}
1: 
1: 	/**
0: 	 * Gets the datatype of this column.
1: 	 *
0: 	 * @return	The datatype of this column.
1: 	 */
0: 	public String	getDataType()
0: 	{
0: 		return	dataType;
0: 	}
1: 
1: 	/**
0: 	 * Is it a built-in type?
1: 	 *
0: 	 * @return	True if it's a built-in type.
1: 	 */
0: 	public boolean	builtInType()
0: 	{
0: 		return builtInType;
0: 	}
1: 
1: 	/**
0: 	 * Gets the maximum length of this column.
1: 	 *
0: 	 * @return	The maximum length of data stored in this column.
1: 	 */
0: 	public int	getMaxLength()
0: 	{
0: 		return	maxLength;
0: 	}
1: 
0: }
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
0: 	 *	@param	name of column.
0: 	 *	@param	id of column.
0: 	 *	@param	precision of data in column.
0: 	 *	@param	scale of data in column.
0: 	 *	@param	nullability Whether or not column accepts nulls.
0: 	 *	@param	dataType Datatype of column.
0: 	 *	@param	maxLength Maximum length of data in column.
/////////////////////////////////////////////////////////////////////////
0: 	 *	@param	name of column.
0: 	 *	@param	id of column.
0: 	 *	@param	nullability Whether or not column accepts nulls.
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import	org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.types.DataValueFactory;
0: 
0: /**
0:  * Implements the description of a column in a system table.
0:  *
0:  *
0:  * @version 0.1
0:  * @author Rick Hillegas
0:  */
0: 
0: public class SystemColumnImpl implements SystemColumn
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private	String	name;
0: 	private	int		id;
0: 	private	int		precision;
0: 	private int		scale;
0: 	private	boolean	nullability;
0: 	private String	dataType;
0: 	private boolean	builtInType;
0: 	private	int		maxLength;
0: 
0: 	/**
0: 	 * Constructor to create a description of a column in a system table.
0: 	 *
0: 	 *	@param	Name of column.
0: 	 *	@param	Id of column.
0: 	 *	@param	Precision of data in column.
0: 	 *	@param	Scale of data in column.
0: 	 *	@param	Whether or not column accepts nulls.
0: 	 *	@param	Datatype of column.
0: 	 *	@param	Maximum length of data in column.
0: 	 */
0: 	public	SystemColumnImpl(	String	name,
0: 								int		id,
0: 								int		precision,
0: 								int		scale,
0: 								boolean	nullability,
0: 								String	dataType,
0: 								boolean	builtInType,
0: 								int		maxLength )
0: 	{
0: 		this.name			= name;
0: 		this.id				= id;
0: 		this.precision		= precision;
0: 		this.scale			= scale;
0: 		this.nullability	= nullability;
0: 		this.dataType		= dataType;
0: 		this.builtInType	= builtInType;
0: 		this.maxLength		= maxLength;
0: 	}
0: 
0: 	/**
0: 	 * Constructor to create a description of a column in a system table.
0: 	 * This constructor is used for SQL Identifiers (varchar 128).
0: 	 *
0: 	 *	@param	Name of column.
0: 	 *	@param	Id of column.
0: 	 *	@param	Whether or not column accepts nulls.
0: 	 */
0: 	public	SystemColumnImpl(	String	name,
0: 								int		id,
0: 								boolean	nullability)
0: 	{
0: 		this.name			= name;
0: 		this.id				= id;
0: 		this.nullability	= nullability;
0: 		this.dataType		= "VARCHAR";
0: 		this.builtInType	= true;
0: 		this.maxLength		= 128;
0: 	}
0: 
0: 	/**
0: 	 * Gets the name of this column.
0: 	 *
0: 	 * @return	The column name.
0: 	 */
0: 	public String	getName()
0: 	{
0: 		return	name;
0: 	}
0: 
0: 	/**
0: 	 * Gets the id of this column.
0: 	 *
0: 	 * @return	The column id.
0: 	 */
0: 	public int	getID()
0: 	{
0: 		return	id;
0: 	}
0: 
0: 	/**
0: 	 * Gets the precision of this column.
0: 	 *
0: 	 * @return	The precision of data stored in this column.
0: 	 */
0: 	public int	getPrecision()
0: 	{
0: 		return	precision;
0: 	}
0: 
0: 	/**
0: 	 * Gets the scale of this column.
0: 	 *
0: 	 * @return	The scale of data stored in this column.
0: 	 */
0: 	public int	getScale()
0: 	{
0: 		return	scale;
0: 	}
0: 
0: 	/**
0: 	 * Gets the nullability of this column.
0: 	 *
0: 	 * @return	True if this column is nullable. False otherwise.
0: 	 */
0: 	public boolean	getNullability()
0: 	{
0: 		return	nullability;
0: 	}
0: 
0: 	/**
0: 	 * Gets the datatype of this column.
0: 	 *
0: 	 * @return	The datatype of this column.
0: 	 */
0: 	public String	getDataType()
0: 	{
0: 		return	dataType;
0: 	}
0: 
0: 	/**
0: 	 * Is it a built-in type?
0: 	 *
0: 	 * @return	True if it's a built-in type.
0: 	 */
0: 	public boolean	builtInType()
0: 	{
0: 		return builtInType;
0: 	}
0: 
0: 	/**
0: 	 * Gets the maximum length of this column.
0: 	 *
0: 	 * @return	The maximum length of data stored in this column.
0: 	 */
0: 	public int	getMaxLength()
0: 	{
0: 		return	maxLength;
0: 	}
0: 
0: }
0: 
============================================================================