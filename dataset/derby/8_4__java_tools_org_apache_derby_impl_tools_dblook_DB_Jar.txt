2:eac0369: /*
1:985fc85: 
1:3abc7d4:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Jar
1:985fc85: 
1:20cdca3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:20cdca3:    contributor license agreements.  See the NOTICE file distributed with
1:20cdca3:    this work for additional information regarding copyright ownership.
1:20cdca3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:20cdca3:    (the "License"); you may not use this file except in compliance with
1:20cdca3:    the License.  You may obtain a copy of the License at
1:985fc85: 
1:985fc85:       http://www.apache.org/licenses/LICENSE-2.0
1:985fc85: 
1:985fc85:    Unless required by applicable law or agreed to in writing, software
1:985fc85:    distributed under the License is distributed on an "AS IS" BASIS,
1:985fc85:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:985fc85:    See the License for the specific language governing permissions and
1:985fc85:    limitations under the License.
7:eac0369: 
3:eac0369:  */
1:eac0369: 
1:3abc7d4: package org.apache.derby.impl.tools.dblook;
1:eac0369: 
1:78c2db1: import java.io.File;
1:78c2db1: import java.io.FileInputStream;
1:78c2db1: import java.io.FileOutputStream;
1:78c2db1: import java.io.IOException;
1:eac0369: import java.sql.Connection;
1:eac0369: import java.sql.ResultSet;
1:eac0369: import java.sql.SQLException;
1:78c2db1: import java.sql.Statement;
1:eac0369: import org.apache.derby.tools.dblook;
1:eac0369: 
1:eac0369: public class DB_Jar {
1:eac0369: 
1:eac0369: 	/* ************************************************
1:eac0369: 	 * Generate the DDL for all jars in a given
1:eac0369: 	 * database.
1:eac0369: 	 * @param dbName Name of the database (for locating the jar).
1:eac0369: 	 * @param conn Connection to the source database.
1:78c2db1:      * @param at10_9 Dictionary is at 10.9 or higher
1:eac0369: 	 * @return The DDL for the jars has been written
1:eac0369: 	 *  to output via Logs.java.
1:eac0369: 	 ****/
1:eac0369: 
1:78c2db1: 	public static void doJars(
1:78c2db1:         String dbName, Connection conn, boolean at10_9)
1:eac0369: 		throws SQLException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		String separator = System.getProperty("file.separator");
1:eac0369: 		Statement stmt = conn.createStatement();
1:78c2db1:         ResultSet rs = stmt.executeQuery(
1:78c2db1:             "SELECT FILENAME, SCHEMAID, " +
1:78c2db1:             "GENERATIONID, FILEID FROM SYS.SYSFILES");
1:eac0369: 
1:eac0369: 		boolean firstTime = true;
1:eac0369: 		while (rs.next()) {
1:eac0369: 
1:78c2db1:             StringBuffer loadJarString = new StringBuffer();
1:eac0369: 
1:78c2db1:             String jarName    = rs.getString(1);
1:78c2db1:             String schemaId   = rs.getString(2);
1:78c2db1:             String genID      = rs.getString(3);
1:78c2db1:             String UUIDstring = rs.getString(4);
1:eac0369: 
1:78c2db1:             String schemaNameSQL = dblook.lookupSchemaId(schemaId);
1:eac0369: 
1:78c2db1:             if (dblook.isIgnorableSchema(schemaNameSQL))
1:78c2db1:                 continue;
1:eac0369: 
1:78c2db1:             doHeader(firstTime);
1:eac0369: 
1:78c2db1:             if (at10_9) {
1:78c2db1:                 String schemaNameCNF =
1:78c2db1:                     dblook.unExpandDoubleQuotes(
1:78c2db1:                         dblook.stripQuotes(dblook.lookupSchemaId(schemaId)));;
1:eac0369: 
1:78c2db1:                 StringBuffer jarFullName = new StringBuffer();
1:78c2db1:                 jarFullName.append(UUIDstring);
1:78c2db1:                 jarFullName.append(".jar.G");
1:78c2db1:                 jarFullName.append(genID);
1:eac0369: 
1:78c2db1:                 StringBuffer oldJarPath = new StringBuffer();
1:78c2db1:                 oldJarPath.append(dbName);
1:78c2db1:                 oldJarPath.append(separator);
1:78c2db1:                 oldJarPath.append("jar");
1:78c2db1:                 oldJarPath.append(separator);
1:78c2db1:                 oldJarPath.append(jarFullName.toString());
1:eac0369: 
1:78c2db1:                 // Copy jar file to DBJARS directory.
1:78c2db1:                 String absJarDir = null;
1:78c2db1:                 try {
1:eac0369: 
1:78c2db1:                     // Create the DBJARS directory.
1:78c2db1:                     File jarDir = new File(System.getProperty("user.dir") +
1:78c2db1:                                            separator + "DBJARS");
1:78c2db1:                     absJarDir = jarDir.getAbsolutePath();
1:78c2db1:                     jarDir.mkdirs();
1:eac0369: 
1:78c2db1:                     doCopy(oldJarPath.toString(), absJarDir + separator + jarFullName);
1:78c2db1:                 } catch (Exception e) {
1:78c2db1:                     Logs.debug("DBLOOK_FailedToLoadJar",
1:78c2db1:                                absJarDir + separator + jarFullName.toString());
1:78c2db1:                     Logs.debug(e);
1:78c2db1:                     firstTime = false;
1:78c2db1:                     continue;
1:78c2db1:                 }
1:eac0369: 
1:78c2db1:                 // Now, add the DDL to read the jar from DBJARS.
1:78c2db1:                 loadJarString.append("CALL SQLJ.INSTALL_JAR('file:");
1:78c2db1:                 loadJarString.append(absJarDir);
1:78c2db1:                 loadJarString.append(separator);
1:78c2db1:                 loadJarString.append(jarFullName);
1:78c2db1:                 loadJarString.append("', '");
1:78c2db1:                 loadJarString.append(
1:78c2db1:                     dblook.addQuotes(
1:78c2db1:                         dblook.expandDoubleQuotes(schemaNameCNF)));
1:eac0369: 
1:78c2db1:                 loadJarString.append(".");
1:eac0369: 
1:78c2db1:                 loadJarString.append(
1:78c2db1:                     dblook.addQuotes(
1:78c2db1:                         dblook.expandDoubleQuotes(jarName)));
1:78c2db1: 
1:78c2db1:             } else {
1:78c2db1:                 jarName = dblook.addQuotes(
1:78c2db1:                     dblook.expandDoubleQuotes(jarName));
1:78c2db1: 
1:78c2db1:                 String schemaWithoutQuotes = dblook.stripQuotes(schemaNameSQL);
1:78c2db1:                 StringBuffer jarFullName = new StringBuffer(separator);
1:78c2db1:                 jarFullName.append(dblook.stripQuotes(jarName));
1:78c2db1:                 jarFullName.append(".jar.G");
1:78c2db1:                 jarFullName.append(genID);
1:78c2db1: 
1:78c2db1:                 StringBuffer oldJarPath = new StringBuffer();
1:78c2db1:                 oldJarPath.append(dbName);
1:78c2db1:                 oldJarPath.append(separator);
1:78c2db1:                 oldJarPath.append("jar");
1:78c2db1:                 oldJarPath.append(separator);
1:78c2db1:                 oldJarPath.append(schemaWithoutQuotes);
1:78c2db1:                 oldJarPath.append(jarFullName);
1:78c2db1: 
1:78c2db1:                 // Copy jar file to DBJARS directory.
1:78c2db1:                 String absJarDir = null;
1:78c2db1:                 try {
1:78c2db1: 
1:78c2db1:                     // Create the DBJARS directory.
1:78c2db1:                     File jarDir = new File(
1:78c2db1:                         System.getProperty("user.dir") +
1:78c2db1:                         separator + "DBJARS" + separator + schemaWithoutQuotes);
1:78c2db1:                     absJarDir = jarDir.getAbsolutePath();
1:78c2db1:                     jarDir.mkdirs();
1:78c2db1: 
1:78c2db1:                     doCopy(oldJarPath.toString(), absJarDir + jarFullName);
1:78c2db1:                 } catch (Exception e) {
1:78c2db1:                     Logs.debug("DBLOOK_FailedToLoadJar",
1:78c2db1:                                absJarDir + jarFullName.toString());
1:78c2db1:                     Logs.debug(e);
1:78c2db1:                     firstTime = false;
1:78c2db1:                     continue;
1:78c2db1:                 }
1:78c2db1: 
1:78c2db1:                 // Now, add the DDL to read the jar from DBJARS.
1:78c2db1:                 loadJarString.append("CALL SQLJ.INSTALL_JAR('file:");
1:78c2db1:                 loadJarString.append(absJarDir);
1:78c2db1:                 loadJarString.append(jarFullName);
1:78c2db1:                 loadJarString.append("', '");
1:78c2db1:                 loadJarString.append(schemaNameSQL);
1:78c2db1:                 loadJarString.append(".");
1:78c2db1:                 loadJarString.append(jarName);
1:78c2db1:             }
1:78c2db1:             
1:78c2db1:             loadJarString.append("', 0)");
1:78c2db1: 
1:78c2db1:             Logs.writeToNewDDL(loadJarString.toString());
1:78c2db1:             Logs.writeStmtEndToNewDDL();
1:78c2db1:             Logs.writeNewlineToNewDDL();
1:78c2db1:             firstTime = false;
4:eac0369: 		}
1:eac0369: 
1:eac0369: 		stmt.close();
1:eac0369: 		rs.close();
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:78c2db1:     private static void  doHeader(boolean firstTime) {
1:78c2db1:         if (firstTime) {
1:78c2db1:             Logs.reportString(
1:78c2db1:                 "----------------------------------------------");
1:78c2db1:             Logs.reportMessage("DBLOOK_JarsHeader");
1:78c2db1:             Logs.reportMessage("DBLOOK_Jar_Note");
1:78c2db1:             Logs.reportString(
1:78c2db1:                 "----------------------------------------------\n");
1:78c2db1:         }
1:78c2db1:     }
1:78c2db1: 
1:78c2db1:     private static void doCopy(
1:78c2db1:         String oldJarFileName,
1:78c2db1:         String newJarFileName) throws IOException {
1:78c2db1: 
1:78c2db1:         FileInputStream oldJarFile = new FileInputStream(oldJarFileName);
1:78c2db1:         FileOutputStream newJarFile = new FileOutputStream(newJarFileName);
1:78c2db1:         while (true) {
1:78c2db1:             if (oldJarFile.available() == 0)
1:78c2db1:                 break;
1:78c2db1:             byte[] bAr = new byte[oldJarFile.available()];
1:78c2db1:             oldJarFile.read(bAr);
1:78c2db1:             newJarFile.write(bAr);
1:78c2db1:         }
1:78c2db1: 
1:78c2db1:         oldJarFile.close();
1:78c2db1:         newJarFile.close();
1:78c2db1:     }
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:83446d0
/////////////////////////////////////////////////////////////////////////
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:78c2db1
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.sql.Statement;
/////////////////////////////////////////////////////////////////////////
1:      * @param at10_9 Dictionary is at 10.9 or higher
1: 	public static void doJars(
1:         String dbName, Connection conn, boolean at10_9)
1:         ResultSet rs = stmt.executeQuery(
1:             "SELECT FILENAME, SCHEMAID, " +
1:             "GENERATIONID, FILEID FROM SYS.SYSFILES");
1:             StringBuffer loadJarString = new StringBuffer();
1:             String jarName    = rs.getString(1);
1:             String schemaId   = rs.getString(2);
1:             String genID      = rs.getString(3);
1:             String UUIDstring = rs.getString(4);
1:             String schemaNameSQL = dblook.lookupSchemaId(schemaId);
1:             if (dblook.isIgnorableSchema(schemaNameSQL))
1:                 continue;
1:             doHeader(firstTime);
1:             if (at10_9) {
1:                 String schemaNameCNF =
1:                     dblook.unExpandDoubleQuotes(
1:                         dblook.stripQuotes(dblook.lookupSchemaId(schemaId)));;
1:                 StringBuffer jarFullName = new StringBuffer();
1:                 jarFullName.append(UUIDstring);
1:                 jarFullName.append(".jar.G");
1:                 jarFullName.append(genID);
1:                 StringBuffer oldJarPath = new StringBuffer();
1:                 oldJarPath.append(dbName);
1:                 oldJarPath.append(separator);
1:                 oldJarPath.append("jar");
1:                 oldJarPath.append(separator);
1:                 oldJarPath.append(jarFullName.toString());
1:                 // Copy jar file to DBJARS directory.
1:                 String absJarDir = null;
1:                 try {
1:                     // Create the DBJARS directory.
1:                     File jarDir = new File(System.getProperty("user.dir") +
1:                                            separator + "DBJARS");
1:                     absJarDir = jarDir.getAbsolutePath();
1:                     jarDir.mkdirs();
1:                     doCopy(oldJarPath.toString(), absJarDir + separator + jarFullName);
1:                 } catch (Exception e) {
1:                     Logs.debug("DBLOOK_FailedToLoadJar",
1:                                absJarDir + separator + jarFullName.toString());
1:                     Logs.debug(e);
1:                     firstTime = false;
1:                     continue;
1:                 }
1:                 // Now, add the DDL to read the jar from DBJARS.
1:                 loadJarString.append("CALL SQLJ.INSTALL_JAR('file:");
1:                 loadJarString.append(absJarDir);
1:                 loadJarString.append(separator);
1:                 loadJarString.append(jarFullName);
1:                 loadJarString.append("', '");
1:                 loadJarString.append(
1:                     dblook.addQuotes(
1:                         dblook.expandDoubleQuotes(schemaNameCNF)));
1:                 loadJarString.append(".");
1:                 loadJarString.append(
1:                     dblook.addQuotes(
1:                         dblook.expandDoubleQuotes(jarName)));
1: 
1:             } else {
1:                 jarName = dblook.addQuotes(
1:                     dblook.expandDoubleQuotes(jarName));
1: 
1:                 String schemaWithoutQuotes = dblook.stripQuotes(schemaNameSQL);
1:                 StringBuffer jarFullName = new StringBuffer(separator);
1:                 jarFullName.append(dblook.stripQuotes(jarName));
1:                 jarFullName.append(".jar.G");
1:                 jarFullName.append(genID);
1: 
1:                 StringBuffer oldJarPath = new StringBuffer();
1:                 oldJarPath.append(dbName);
1:                 oldJarPath.append(separator);
1:                 oldJarPath.append("jar");
1:                 oldJarPath.append(separator);
1:                 oldJarPath.append(schemaWithoutQuotes);
1:                 oldJarPath.append(jarFullName);
1: 
1:                 // Copy jar file to DBJARS directory.
1:                 String absJarDir = null;
1:                 try {
1: 
1:                     // Create the DBJARS directory.
1:                     File jarDir = new File(
1:                         System.getProperty("user.dir") +
1:                         separator + "DBJARS" + separator + schemaWithoutQuotes);
1:                     absJarDir = jarDir.getAbsolutePath();
1:                     jarDir.mkdirs();
1: 
1:                     doCopy(oldJarPath.toString(), absJarDir + jarFullName);
1:                 } catch (Exception e) {
1:                     Logs.debug("DBLOOK_FailedToLoadJar",
1:                                absJarDir + jarFullName.toString());
1:                     Logs.debug(e);
1:                     firstTime = false;
1:                     continue;
1:                 }
1: 
1:                 // Now, add the DDL to read the jar from DBJARS.
1:                 loadJarString.append("CALL SQLJ.INSTALL_JAR('file:");
1:                 loadJarString.append(absJarDir);
1:                 loadJarString.append(jarFullName);
1:                 loadJarString.append("', '");
1:                 loadJarString.append(schemaNameSQL);
1:                 loadJarString.append(".");
1:                 loadJarString.append(jarName);
1:             }
1:             
1:             loadJarString.append("', 0)");
1: 
1:             Logs.writeToNewDDL(loadJarString.toString());
1:             Logs.writeStmtEndToNewDDL();
1:             Logs.writeNewlineToNewDDL();
1:             firstTime = false;
/////////////////////////////////////////////////////////////////////////
1:     private static void  doHeader(boolean firstTime) {
1:         if (firstTime) {
1:             Logs.reportString(
1:                 "----------------------------------------------");
1:             Logs.reportMessage("DBLOOK_JarsHeader");
1:             Logs.reportMessage("DBLOOK_Jar_Note");
1:             Logs.reportString(
1:                 "----------------------------------------------\n");
1:         }
1:     }
1: 
1:     private static void doCopy(
1:         String oldJarFileName,
1:         String newJarFileName) throws IOException {
1: 
1:         FileInputStream oldJarFile = new FileInputStream(oldJarFileName);
1:         FileOutputStream newJarFile = new FileOutputStream(newJarFileName);
0:         int st = 0;
1:         while (true) {
1:             if (oldJarFile.available() == 0)
1:                 break;
1:             byte[] bAr = new byte[oldJarFile.available()];
1:             oldJarFile.read(bAr);
1:             newJarFile.write(bAr);
1:         }
1: 
1:         oldJarFile.close();
1:         newJarFile.close();
1:     }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:20cdca3
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:97cb351
/////////////////////////////////////////////////////////////////////////
0: 			// Copy jar file to DBJARS directory.
0: 				// Create the DBJARS directory.
0: 					separator + "DBJARS" + separator + schemaWithoutQuotes);
/////////////////////////////////////////////////////////////////////////
0: 			// Now, add the DDL to read the jar from DBJARS.
commit:19c10b5
/////////////////////////////////////////////////////////////////////////
0: 				Logs.reportMessage("DBLOOK_JarsHeader");
0: 				Logs.reportMessage("DBLOOK_Jar_Note");
/////////////////////////////////////////////////////////////////////////
0: 				Logs.debug("DBLOOK_FailedToLoadJar",
commit:3abc7d4
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.tools.dblook.DB_Jar
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.impl.tools.dblook;
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:985fc85
/////////////////////////////////////////////////////////////////////////
0:    Derby - Class org.apache.derby.impl.tools.cslook.DB_Jar
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:a8ff4fd
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
0: package org.apache.derby.impl.tools.cslook;
1: 
1: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
0: import java.util.HashMap;
1: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.FileInputStream;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
1: 
1: import org.apache.derby.tools.dblook;
1: 
1: public class DB_Jar {
1: 
1: 	/* 
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
1: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
1: 
1: 	/* ************************************************
1: 	 * Generate the DDL for all jars in a given
1: 	 * database.
1: 	 * @param dbName Name of the database (for locating the jar).
1: 	 * @param conn Connection to the source database.
1: 	 * @return The DDL for the jars has been written
1: 	 *  to output via Logs.java.
1: 	 ****/
1: 
0: 	public static void doJars(String dbName, Connection conn)
1: 		throws SQLException
1: 	{
1: 
1: 		String separator = System.getProperty("file.separator");
1: 		Statement stmt = conn.createStatement();
0: 		ResultSet rs = stmt.executeQuery("SELECT FILENAME, SCHEMAID, " +
0: 			"GENERATIONID FROM SYS.SYSFILES");
1: 
1: 		boolean firstTime = true;
1: 		while (rs.next()) {
1: 
0: 			String jarName = dblook.addQuotes(
0: 				dblook.expandDoubleQuotes(rs.getString(1)));
0: 			String schemaId = rs.getString(2);
0: 			String schemaName = dblook.lookupSchemaId(schemaId);
0: 			if (dblook.isIgnorableSchema(schemaName))
0: 				continue;
1: 
0: 			if (firstTime) {
0: 				Logs.reportString("----------------------------------------------");
0: 				Logs.reportMessage("CSLOOK_Header", "jars");
0: 				Logs.reportMessage("CSLOOK_Jar_Note");
0: 				Logs.reportString("----------------------------------------------\n");
1: 			}
1: 
0: 			String genID = rs.getString(3);
1: 
0: 			String schemaWithoutQuotes = dblook.stripQuotes(schemaName);
0: 			StringBuffer jarFullName = new StringBuffer(separator);
0: 			jarFullName.append(dblook.stripQuotes(jarName));
0: 			jarFullName.append(".jar.G");
0: 			jarFullName.append(genID);
1: 
0: 			StringBuffer oldJarPath = new StringBuffer();
0: 			oldJarPath.append(dbName);
0: 			oldJarPath.append(separator);
0: 			oldJarPath.append("jar");
0: 			oldJarPath.append(separator);
0: 			oldJarPath.append(schemaWithoutQuotes);
0: 			oldJarPath.append(jarFullName);
1: 
0: 			// Copy jar file to CSJARS directory.
0: 			String absJarDir = null;
0: 			try {
1: 
0: 				// Create the CSJARS directory.
0: 				File jarDir = new File(System.getProperty("user.dir") +
0: 					separator + "CSJARS" + separator + schemaWithoutQuotes);
0: 				absJarDir = jarDir.getAbsolutePath();
0: 				jarDir.mkdirs();
1: 
0: 				// Create streams.
0: 				FileInputStream oldJarFile =
0: 					new FileInputStream(oldJarPath.toString());
0: 				FileOutputStream newJarFile =
0: 					new FileOutputStream(absJarDir + jarFullName);
1: 
0: 				// Copy.
0: 				int st = 0;
0: 				while (true) {
0: 					if (oldJarFile.available() == 0)
0: 						break;
0: 					byte[] bAr = new byte[oldJarFile.available()];
0: 					oldJarFile.read(bAr);
0: 					newJarFile.write(bAr);
1: 				}
1: 
0: 				newJarFile.close();
0: 				oldJarFile.close();
1: 
0: 			} catch (Exception e) {
0: 				Logs.debug("CSLOOK_FailedToLoadJar",
0: 					absJarDir + jarFullName.toString());
0: 				Logs.debug(e);
0: 				firstTime = false;
0: 				continue;
1: 			}
1: 
0: 			// Now, add the DDL to read the jar from CSJARS.
0: 			StringBuffer loadJarString = new StringBuffer();
0: 			loadJarString.append("CALL SQLJ.INSTALL_JAR('file:");
0: 			loadJarString.append(absJarDir);
0: 			loadJarString.append(jarFullName);
0: 			loadJarString.append("', '");
0: 			loadJarString.append(schemaName);
0: 			loadJarString.append(".");
0: 			loadJarString.append(jarName);
0: 			loadJarString.append("', 0)");
1: 
0: 			Logs.writeToNewDDL(loadJarString.toString());
0: 			Logs.writeStmtEndToNewDDL();
0: 			Logs.writeNewlineToNewDDL();
0: 			firstTime = false;
1: 
1: 		}
1: 
1: 		stmt.close();
1: 		rs.close();
1: 
1: 	}
1: 
1: }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:89cd70b
/////////////////////////////////////////////////////////////////////////
0: 				Logs.reportMessage("CSLOOK_JarsHeader");
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.tools.cslook
0:    (C) Copyright IBM Corp. 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.tools.cslook;
0: 
0: import java.sql.Connection;
0: import java.sql.Statement;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: 
0: import java.util.HashMap;
0: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.FileInputStream;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: 
0: import org.apache.derby.tools.dblook;
0: 
0: public class DB_Jar {
0: 
0: 	/* 
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2004;
0: 
0: 	/* ************************************************
0: 	 * Generate the DDL for all jars in a given
0: 	 * database.
0: 	 * @param dbName Name of the database (for locating the jar).
0: 	 * @param conn Connection to the source database.
0: 	 * @return The DDL for the jars has been written
0: 	 *  to output via Logs.java.
0: 	 ****/
0: 
0: 	public static void doJars(String dbName, Connection conn)
0: 		throws SQLException
0: 	{
0: 
0: 		String separator = System.getProperty("file.separator");
0: 		Statement stmt = conn.createStatement();
0: 		ResultSet rs = stmt.executeQuery("SELECT FILENAME, SCHEMAID, " +
0: 			"GENERATIONID FROM SYS.SYSFILES");
0: 
0: 		boolean firstTime = true;
0: 		while (rs.next()) {
0: 
0: 			String jarName = dblook.addQuotes(
0: 				dblook.expandDoubleQuotes(rs.getString(1)));
0: 			String schemaId = rs.getString(2);
0: 			String schemaName = dblook.lookupSchemaId(schemaId);
0: 			if (dblook.isIgnorableSchema(schemaName))
0: 				continue;
0: 
0: 			if (firstTime) {
0: 				Logs.reportString("----------------------------------------------");
0: 				Logs.reportMessage("CSLOOK_Header", "jars");
0: 				Logs.reportMessage("CSLOOK_Jar_Note");
0: 				Logs.reportString("----------------------------------------------\n");
0: 			}
0: 
0: 			String genID = rs.getString(3);
0: 
0: 			String schemaWithoutQuotes = dblook.stripQuotes(schemaName);
0: 			StringBuffer jarFullName = new StringBuffer(separator);
0: 			jarFullName.append(dblook.stripQuotes(jarName));
0: 			jarFullName.append(".jar.G");
0: 			jarFullName.append(genID);
0: 
0: 			StringBuffer oldJarPath = new StringBuffer();
0: 			oldJarPath.append(dbName);
0: 			oldJarPath.append(separator);
0: 			oldJarPath.append("jar");
0: 			oldJarPath.append(separator);
0: 			oldJarPath.append(schemaWithoutQuotes);
0: 			oldJarPath.append(jarFullName);
0: 
0: 			// Copy jar file to CSJARS directory.
0: 			String absJarDir = null;
0: 			try {
0: 
0: 				// Create the CSJARS directory.
0: 				File jarDir = new File(System.getProperty("user.dir") +
0: 					separator + "CSJARS" + separator + schemaWithoutQuotes);
0: 				absJarDir = jarDir.getAbsolutePath();
0: 				jarDir.mkdirs();
0: 
0: 				// Create streams.
0: 				FileInputStream oldJarFile =
0: 					new FileInputStream(oldJarPath.toString());
0: 				FileOutputStream newJarFile =
0: 					new FileOutputStream(absJarDir + jarFullName);
0: 
0: 				// Copy.
0: 				int st = 0;
0: 				while (true) {
0: 					if (oldJarFile.available() == 0)
0: 						break;
0: 					byte[] bAr = new byte[oldJarFile.available()];
0: 					oldJarFile.read(bAr);
0: 					newJarFile.write(bAr);
0: 				}
0: 
0: 				newJarFile.close();
0: 				oldJarFile.close();
0: 
0: 			} catch (Exception e) {
0: 				Logs.debug("CSLOOK_FailedToLoadJar",
0: 					absJarDir + jarFullName.toString());
0: 				Logs.debug(e);
0: 				firstTime = false;
0: 				continue;
0: 			}
0: 
0: 			// Now, add the DDL to read the jar from CSJARS.
0: 			StringBuffer loadJarString = new StringBuffer();
0: 			loadJarString.append("CALL SQLJ.INSTALL_JAR('file:");
0: 			loadJarString.append(absJarDir);
0: 			loadJarString.append(jarFullName);
0: 			loadJarString.append("', '");
0: 			loadJarString.append(schemaName);
0: 			loadJarString.append(".");
0: 			loadJarString.append(jarName);
0: 			loadJarString.append("', 0)");
0: 
0: 			Logs.writeToNewDDL(loadJarString.toString());
0: 			Logs.writeStmtEndToNewDDL();
0: 			Logs.writeNewlineToNewDDL();
0: 			firstTime = false;
0: 
0: 		}
0: 
0: 		stmt.close();
0: 		rs.close();
0: 
0: 	}
0: 
0: }
============================================================================