1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.PhysicalUndoOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.StoredFormatIds;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Compensation;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: import org.apache.derby.iapi.store.raw.Undoable;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import java.io.IOException;
1:eac0369: import org.apache.derby.iapi.services.io.LimitObjectInput;
1:eac0369: 
1:eac0369: 
2:eac0369: /**
1:eac0369: 	PhysicalUndoOperation is a compensation operation that rolls back the change of
1:eac0369: 	an Undo-able operation.  A PhysicalUndoOperation itself is not undo-able, i.e,
1:eac0369: 	it is loggable but not undoable.
1:eac0369: 
1:eac0369: 	<PRE>
1:787ceb4: 	@derby.formatId	LOGOP_PAGE_PHYSICAL_UNDO
1:eac0369: 		the formatId is written by FormatIdOutputStream when this object is
1:eac0369: 		written out by writeObject
1:3546404:     @derby.purpose  update a physical log operation
1:787ceb4: 	@derby.upgrade
1:787ceb4: 	@derby.diskLayout
1:eac0369: 		PageBasicOperation	the super class
1:eac0369: 		OptionalData	none (compensation operation never have optional data)
1:787ceb4: 	@derby.endFormat
1:eac0369: 	</PRE>
1:eac0369: 
1:eac0369: */
1:3546404: public final class PhysicalUndoOperation extends PageBasicOperation
1:3546404:         implements Compensation {
1:eac0369: 
1:eac0369: 	/** The operation to be rolled back */
1:eac0369: 	transient private	PhysicalPageOperation undoOp; 
1:eac0369: 
1:3546404:     PhysicalUndoOperation(BasePage page)
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** Set up a compensation operation during run time rollback */
1:3546404:     PhysicalUndoOperation(BasePage page, PhysicalPageOperation op)
1:eac0369: 	{
1:eac0369: 		super(page);
1:eac0369: 		undoOp = op;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return my format identifier.
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable 
1:eac0369: 	public PhysicalUndoOperation() { super(); }
1:eac0369: 
1:eac0369: 	public int getTypeFormatId() {
1:eac0369: 		return StoredFormatIds.LOGOP_PAGE_PHYSICAL_UNDO;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// no fields, therefore no writeExternal or readExternal
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 		Compensation methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** Set up a PageUndoOperation during recovery redo. */
1:eac0369: 	public void setUndoOp(Undoable op)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 			SanityManager.ASSERT(op instanceof PhysicalPageOperation);
1:eac0369: 		}
1:eac0369: 		undoOp = (PhysicalPageOperation)op;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Loggable methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/** Apply the undo operation, in this implementation of the
1:eac0369: 		RawStore, it can only call the undoMe method of undoOp
1:eac0369: 
1:eac0369: 		@param xact			the Transaction that is doing the rollback
1:eac0369: 		@param instant		the log instant of this undo operation
1:eac0369: 		@param in			optional data
1:eac0369: 
1:eac0369: 		@exception IOException Can be thrown by any of the methods of InputStream.
1:94f158a: 		@exception StandardException Standard Derby policy.
1:eac0369: 
1:eac0369: 	 */
1:eac0369: 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
1:eac0369: 		 throws StandardException, IOException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		long oldversion = 0;		// sanity check
1:eac0369: 		LogInstant oldLogInstant = null; // sanity check
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			oldLogInstant = this.page.getLastLogInstant();
1:eac0369: 			oldversion = this.page.getPageVersion();
1:eac0369: 
1:eac0369: 			SanityManager.ASSERT(oldversion == this.getPageVersion());
1:eac0369: 			SanityManager.ASSERT(oldLogInstant == null || instant == null 
1:eac0369: 							 || oldLogInstant.lessThan(instant));
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// if this is called during runtime rollback, PageOp.generateUndo found
1:eac0369: 		// the page and have it latched there.
1:eac0369: 		// if this is called during recovery redo, this.needsRedo found the page and
1:eac0369: 		// have it latched here
1:eac0369: 		//
1:eac0369: 		// in either case, this.page is the correct page and is latched.
1:eac0369: 		//
1:eac0369: 		undoOp.undoMe(xact, this.page, instant, in);
1:bd54198: 
1:eac0369: 		if (SanityManager.DEBUG) {
1:eac0369: 
1:bd54198:             if (oldversion >= this.page.getPageVersion())
1:bd54198:             {
1:bd54198:                 SanityManager.THROWASSERT(
1:bd54198:                     "oldversion = " + oldversion +
1:bd54198:                     ";page version = "  + this.page.getPageVersion() +
1:bd54198:                     "page = " + page + 
1:bd54198:                     "; my class name is " + getClass().getName() +
1:bd54198:                     " undoOp is " + undoOp.getClass().getName() );
1:bd54198:             }
1:bd54198: 			SanityManager.ASSERT(
1:bd54198:                 oldversion < this.page.getPageVersion());
1:bd54198: 
1:eac0369: 			if (instant != null &&
1:eac0369: 				! instant.equals(this.page.getLastLogInstant()))
1:eac0369: 				SanityManager.THROWASSERT(
1:eac0369: 								 "my class name is " + getClass().getName() +
1:eac0369: 								 " undoOp is " + undoOp.getClass().getName() );
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		releaseResource(xact);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* make sure resource found in undoOp is released */
1:eac0369: 	public void releaseResource(Transaction xact)
1:eac0369: 	{
1:eac0369: 		if (undoOp != null)
1:eac0369: 			undoOp.releaseResource(xact);
1:eac0369: 		super.releaseResource(xact);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/* Undo operation is a COMPENSATION log operation */
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		return super.group() | Loggable.COMPENSATION | Loggable.RAWSTORE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public final ByteArray getPreparedLog() {
1:eac0369: 		// should never ever write optional data because this implementation of
1:eac0369: 		// the recovery system  will never read this and pass this on to dome.
1:eac0369: 		// Instead, the optional data of the undoOp will be used - since
1:eac0369: 		// this.doMe can only call undoOP.undoMe, this has no use for any
1:eac0369: 		// optional data.
1:eac0369: 		return (ByteArray) null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void restoreMe(Transaction xact, BasePage undoPage,
1:eac0369: 						  LogInstant CLRinstant, LimitObjectInput in)
1:eac0369: 	{
1:eac0369: 		// Not undoable
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 			SanityManager.THROWASSERT("cannot call restore me on PhysicalUndoOperation");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  DEBUG: Print self.
1:eac0369: 	*/
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			String str = "CLR (Physical Undo): " + super.toString();
1:eac0369: 			if (undoOp != null)
1:eac0369: 				str += "\n" + undoOp.toString();
1:eac0369: 			else
1:eac0369: 				str += "undo Operation not set";
1:eac0369: 
1:eac0369: 			return str;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3546404
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @derby.purpose  update a physical log operation
/////////////////////////////////////////////////////////////////////////
1: public final class PhysicalUndoOperation extends PageBasicOperation
1:         implements Compensation {
1:     PhysicalUndoOperation(BasePage page)
1:     PhysicalUndoOperation(BasePage page, PhysicalPageOperation op)
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:787ceb4
/////////////////////////////////////////////////////////////////////////
1: 	@derby.formatId	LOGOP_PAGE_PHYSICAL_UNDO
0: 	@derby.purpose	update a physiacl log operation
1: 	@derby.upgrade
1: 	@derby.diskLayout
1: 	@derby.endFormat
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby policy.
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:bd54198
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (oldversion >= this.page.getPageVersion())
1:             {
1:                 SanityManager.THROWASSERT(
1:                     "oldversion = " + oldversion +
1:                     ";page version = "  + this.page.getPageVersion() +
1:                     "page = " + page + 
1:                     "; my class name is " + getClass().getName() +
1:                     " undoOp is " + undoOp.getClass().getName() );
1:             }
1: 			SanityManager.ASSERT(
1:                 oldversion < this.page.getPageVersion());
1: 
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.PhysicalUndoOperation
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.store.raw.Compensation;
1: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.Page;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: import org.apache.derby.iapi.store.raw.Undoable;
1: 
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
0: import java.io.OutputStream;
0: import java.io.ObjectInput;
1: import java.io.IOException;
1: import org.apache.derby.iapi.services.io.LimitObjectInput;
1: 
1: 
1: /**
1: 	PhysicalUndoOperation is a compensation operation that rolls back the change of
1: 	an Undo-able operation.  A PhysicalUndoOperation itself is not undo-able, i.e,
1: 	it is loggable but not undoable.
1: 
1: 	<PRE>
0: 	@format_id	LOGOP_PAGE_PHYSICAL_UNDO
1: 		the formatId is written by FormatIdOutputStream when this object is
1: 		written out by writeObject
0: 	@purpose	update a physiacl log operation
0: 	@upgrade
0: 	@disk_layout
1: 		PageBasicOperation	the super class
1: 		OptionalData	none (compensation operation never have optional data)
0: 	@end_format
1: 	</PRE>
1: 
1: */
0: public class PhysicalUndoOperation extends PageBasicOperation implements Compensation {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/** The operation to be rolled back */
1: 	transient private	PhysicalPageOperation undoOp; 
1: 
0: 	protected PhysicalUndoOperation(BasePage page)
1: 	{
1: 		super(page);
1: 	}
1: 
1: 	/** Set up a compensation operation during run time rollback */
0: 	public PhysicalUndoOperation(BasePage page, PhysicalPageOperation op)
1: 	{
1: 		super(page);
1: 		undoOp = op;
1: 	}
1: 
1: 	/**
1: 		Return my format identifier.
1: 	*/
1: 
1: 	// no-arg constructor, required by Formatable 
1: 	public PhysicalUndoOperation() { super(); }
1: 
1: 	public int getTypeFormatId() {
1: 		return StoredFormatIds.LOGOP_PAGE_PHYSICAL_UNDO;
1: 	}
1: 
1: 	// no fields, therefore no writeExternal or readExternal
1: 
1: 	/** 
1: 		Compensation methods
1: 	*/
1: 
1: 	/** Set up a PageUndoOperation during recovery redo. */
1: 	public void setUndoOp(Undoable op)
1: 	{
1: 		if (SanityManager.DEBUG) {
1: 			SanityManager.ASSERT(op instanceof PhysicalPageOperation);
1: 		}
1: 		undoOp = (PhysicalPageOperation)op;
1: 	}
1: 
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1: 	/** Apply the undo operation, in this implementation of the
1: 		RawStore, it can only call the undoMe method of undoOp
1: 
1: 		@param xact			the Transaction that is doing the rollback
1: 		@param instant		the log instant of this undo operation
1: 		@param in			optional data
0: 		@param dataLengt	optional data length
1: 
1: 		@exception IOException Can be thrown by any of the methods of InputStream.
0: 		@exception StandardException Standard Cloudscape policy.
1: 
1: 	 */
1: 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
1: 		 throws StandardException, IOException
1: 	{
1: 
1: 		long oldversion = 0;		// sanity check
1: 		LogInstant oldLogInstant = null; // sanity check
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			oldLogInstant = this.page.getLastLogInstant();
1: 			oldversion = this.page.getPageVersion();
1: 
1: 			SanityManager.ASSERT(oldversion == this.getPageVersion());
1: 			SanityManager.ASSERT(oldLogInstant == null || instant == null 
1: 							 || oldLogInstant.lessThan(instant));
1: 		}
1: 
1: 		// if this is called during runtime rollback, PageOp.generateUndo found
1: 		// the page and have it latched there.
1: 		// if this is called during recovery redo, this.needsRedo found the page and
1: 		// have it latched here
1: 		//
1: 		// in either case, this.page is the correct page and is latched.
1: 		//
1: 		undoOp.undoMe(xact, this.page, instant, in);
1: 
1: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(oldversion < this.page.getPageVersion());
1: 			if (instant != null &&
1: 				! instant.equals(this.page.getLastLogInstant()))
1: 				SanityManager.THROWASSERT(
1: 								 "my class name is " + getClass().getName() +
1: 								 " undoOp is " + undoOp.getClass().getName() );
1: 		}
1: 
1: 		releaseResource(xact);
1: 	}
1: 
1: 	/* make sure resource found in undoOp is released */
1: 	public void releaseResource(Transaction xact)
1: 	{
1: 		if (undoOp != null)
1: 			undoOp.releaseResource(xact);
1: 		super.releaseResource(xact);
1: 	}
1: 
1: 	/* Undo operation is a COMPENSATION log operation */
1: 	public int group()
1: 	{
1: 		return super.group() | Loggable.COMPENSATION | Loggable.RAWSTORE;
1: 	}
1: 
1: 	public final ByteArray getPreparedLog() {
1: 		// should never ever write optional data because this implementation of
1: 		// the recovery system  will never read this and pass this on to dome.
1: 		// Instead, the optional data of the undoOp will be used - since
1: 		// this.doMe can only call undoOP.undoMe, this has no use for any
1: 		// optional data.
1: 		return (ByteArray) null;
1: 	}
1: 
1: 	public void restoreMe(Transaction xact, BasePage undoPage,
1: 						  LogInstant CLRinstant, LimitObjectInput in)
1: 	{
1: 		// Not undoable
1: 		if (SanityManager.DEBUG)
1: 			SanityManager.THROWASSERT("cannot call restore me on PhysicalUndoOperation");
1: 	}
1: 
1: 	/**
1: 	  DEBUG: Print self.
1: 	*/
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			String str = "CLR (Physical Undo): " + super.toString();
1: 			if (undoOp != null)
1: 				str += "\n" + undoOp.toString();
1: 			else
1: 				str += "undo Operation not set";
1: 
1: 			return str;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: import org.apache.derby.iapi.services.io.StoredFormatIds;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.store.raw.Compensation;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.Page;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: import org.apache.derby.iapi.store.raw.Undoable;
0: 
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: import org.apache.derby.iapi.services.io.LimitObjectInput;
0: 
0: 
0: /**
0: 	PhysicalUndoOperation is a compensation operation that rolls back the change of
0: 	an Undo-able operation.  A PhysicalUndoOperation itself is not undo-able, i.e,
0: 	it is loggable but not undoable.
0: 
0: 	<PRE>
0: 	@format_id	LOGOP_PAGE_PHYSICAL_UNDO
0: 		the formatId is written by FormatIdOutputStream when this object is
0: 		written out by writeObject
0: 	@purpose	update a physiacl log operation
0: 	@upgrade
0: 	@disk_layout
0: 		PageBasicOperation	the super class
0: 		OptionalData	none (compensation operation never have optional data)
0: 	@end_format
0: 	</PRE>
0: 
0: */
0: public class PhysicalUndoOperation extends PageBasicOperation implements Compensation {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/** The operation to be rolled back */
0: 	transient private	PhysicalPageOperation undoOp; 
0: 
0: 	protected PhysicalUndoOperation(BasePage page)
0: 	{
0: 		super(page);
0: 	}
0: 
0: 	/** Set up a compensation operation during run time rollback */
0: 	public PhysicalUndoOperation(BasePage page, PhysicalPageOperation op)
0: 	{
0: 		super(page);
0: 		undoOp = op;
0: 	}
0: 
0: 	/**
0: 		Return my format identifier.
0: 	*/
0: 
0: 	// no-arg constructor, required by Formatable 
0: 	public PhysicalUndoOperation() { super(); }
0: 
0: 	public int getTypeFormatId() {
0: 		return StoredFormatIds.LOGOP_PAGE_PHYSICAL_UNDO;
0: 	}
0: 
0: 	// no fields, therefore no writeExternal or readExternal
0: 
0: 	/** 
0: 		Compensation methods
0: 	*/
0: 
0: 	/** Set up a PageUndoOperation during recovery redo. */
0: 	public void setUndoOp(Undoable op)
0: 	{
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(op instanceof PhysicalPageOperation);
0: 		}
0: 		undoOp = (PhysicalPageOperation)op;
0: 	}
0: 
0: 
0: 	/**
0: 		Loggable methods
0: 	*/
0: 
0: 	/** Apply the undo operation, in this implementation of the
0: 		RawStore, it can only call the undoMe method of undoOp
0: 
0: 		@param xact			the Transaction that is doing the rollback
0: 		@param instant		the log instant of this undo operation
0: 		@param in			optional data
0: 		@param dataLengt	optional data length
0: 
0: 		@exception IOException Can be thrown by any of the methods of InputStream.
0: 		@exception StandardException Standard Cloudscape policy.
0: 
0: 	 */
0: 	public final void doMe(Transaction xact, LogInstant instant, LimitObjectInput in) 
0: 		 throws StandardException, IOException
0: 	{
0: 
0: 		long oldversion = 0;		// sanity check
0: 		LogInstant oldLogInstant = null; // sanity check
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			oldLogInstant = this.page.getLastLogInstant();
0: 			oldversion = this.page.getPageVersion();
0: 
0: 			SanityManager.ASSERT(oldversion == this.getPageVersion());
0: 			SanityManager.ASSERT(oldLogInstant == null || instant == null 
0: 							 || oldLogInstant.lessThan(instant));
0: 		}
0: 
0: 		// if this is called during runtime rollback, PageOp.generateUndo found
0: 		// the page and have it latched there.
0: 		// if this is called during recovery redo, this.needsRedo found the page and
0: 		// have it latched here
0: 		//
0: 		// in either case, this.page is the correct page and is latched.
0: 		//
0: 		undoOp.undoMe(xact, this.page, instant, in);
0: 
0: 		if (SanityManager.DEBUG) {
0: 			SanityManager.ASSERT(oldversion < this.page.getPageVersion());
0: 			if (instant != null &&
0: 				! instant.equals(this.page.getLastLogInstant()))
0: 				SanityManager.THROWASSERT(
0: 								 "my class name is " + getClass().getName() +
0: 								 " undoOp is " + undoOp.getClass().getName() );
0: 		}
0: 
0: 		releaseResource(xact);
0: 	}
0: 
0: 	/* make sure resource found in undoOp is released */
0: 	public void releaseResource(Transaction xact)
0: 	{
0: 		if (undoOp != null)
0: 			undoOp.releaseResource(xact);
0: 		super.releaseResource(xact);
0: 	}
0: 
0: 	/* Undo operation is a COMPENSATION log operation */
0: 	public int group()
0: 	{
0: 		return super.group() | Loggable.COMPENSATION | Loggable.RAWSTORE;
0: 	}
0: 
0: 	public final ByteArray getPreparedLog() {
0: 		// should never ever write optional data because this implementation of
0: 		// the recovery system  will never read this and pass this on to dome.
0: 		// Instead, the optional data of the undoOp will be used - since
0: 		// this.doMe can only call undoOP.undoMe, this has no use for any
0: 		// optional data.
0: 		return (ByteArray) null;
0: 	}
0: 
0: 	public void restoreMe(Transaction xact, BasePage undoPage,
0: 						  LogInstant CLRinstant, LimitObjectInput in)
0: 	{
0: 		// Not undoable
0: 		if (SanityManager.DEBUG)
0: 			SanityManager.THROWASSERT("cannot call restore me on PhysicalUndoOperation");
0: 	}
0: 
0: 	/**
0: 	  DEBUG: Print self.
0: 	*/
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			String str = "CLR (Physical Undo): " + super.toString();
0: 			if (undoOp != null)
0: 				str += "\n" + undoOp.toString();
0: 			else
0: 				str += "undo Operation not set";
0: 
0: 			return str;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: }
============================================================================