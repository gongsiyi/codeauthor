1:33776ff: /*
1:70f7692: 
1:33776ff:    Derby - Class org.apache.derby.client.am.Configuration
1:70f7692: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:70f7692: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:70f7692: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:70f7692: 
1:70f7692: */
1:70f7692: 
1:33776ff: package org.apache.derby.client.am;
1:70f7692: 
1:33776ff: import java.io.IOException;
1:33776ff: import java.io.InputStream;
1:70f7692: import java.security.AccessController;
1:69e3d06: import java.security.PrivilegedActionException;
1:70f7692: import java.security.PrivilegedExceptionAction;
1:69e3d06: import java.sql.Connection;
1:70f7692: 
1:70f7692: import org.apache.derby.iapi.services.info.ProductGenusNames;
1:70f7692: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1:3d650b1: import org.apache.derby.shared.common.reference.SQLState;
1:3d650b1: 
1:70f7692: public class Configuration {
1:70f7692: 
1:70f7692:     private Configuration() {
7:70f7692:     }
1:cbd0ff1: 
1:70f7692:     // -------------------------- versioning -------------------------------------
1:70f7692: 
1:23ecfcf:     private static ProductVersionHolder dncProductVersionHolder__;
1:70f7692: 
1:0326967:     static ProductVersionHolder getProductVersionHolder() {
1:70f7692:         return dncProductVersionHolder__;
1:70f7692:     }
1:70f7692: 
1:70f7692: 
1:70f7692:     // for DatabaseMetaData.getDriverName()
1:0326967:     final static String
1:0326967:         dncDriverName = "Apache Derby Network Client JDBC Driver";
1:70f7692: 
1:70f7692: 
1:70f7692:     // Hard-wired for JDBC
1:70f7692:     //
1:70f7692:     // Currently ASCII hex value of "SYSLVL01".
1:49be70b:     private final static byte[] dncPackageConsistencyToken =
1:70f7692:             {0x53, 0x59, 0x53, 0x4c, 0x56, 0x4c, 0x30, 0x31};
1:70f7692: 
1:49be70b:     public static byte[] getDncPackageConsistencyToken() {
1:68968aa:         return dncPackageConsistencyToken.clone();
1:49be70b:     }
1:49be70b: 
1:43fb59e:     // for ClientDriver.jdbcCompliant()
1:70f7692:     public final static boolean jdbcCompliant = true;
1:70f7692: 
1:43fb59e:     private final static String[] dncCompatibleJREVersions =
1:43fb59e:             {"1.5", "1.6", "1.7", "1.8"};
1:43fb59e: 
1:b565f41:     static String[] getDncCompatibleJREVersions() {
1:68968aa:         return dncCompatibleJREVersions.clone();
1:43fb59e:     }
1:70f7692: 
1:70f7692:     //---------------------- database URL protocols ------------------------------
1:70f7692: 
1:70f7692:     // For DatabaseMetaData.getURL()
1:70f7692:     public final static String jdbcDerbyNETProtocol = "jdbc:derby://";
1:70f7692: 
1:70f7692:     // -------------------------- metrics ----------------------
1:70f7692:     // Not currently used by production builds.
1:70f7692:     // We can't really use this stuff with tracing enabled, the results are not accurate.
1:70f7692: 
1:70f7692:     // -------------------------- compiled in properties -------------------------
1:70f7692: 
1:70f7692:     final static boolean rangeCheckCrossConverters = true;
1:70f7692: 
1:70f7692:     // Define different levels of bug checking, for now turn all bits on.
1:70f7692:     final static int bugCheckLevel = 0xff;
1:70f7692: 
1:70f7692:     // --------------------------- connection defaults ---------------------------
1:70f7692: 
1:70f7692:     // This is the DERBY default and maps to DERBY's "Cursor Stability".
1:0326967:     final static int defaultIsolation = Connection.TRANSACTION_READ_COMMITTED;
1:70f7692: 
1:70f7692:     // ---------------------------- statement defaults----------------------------
1:70f7692: 
1:70f7692:     public static final int defaultFetchSize = 64;
1:70f7692: 
1:70f7692:     // Prepare attribute constants
1:0326967:     static final String
1:0326967:             cursorAttribute_SensitiveStatic = "SENSITIVE STATIC SCROLL ";
1:0326967:     static final String
1:0326967:             cursorAttribute_Insensitive = "INSENSITIVE SCROLL ";
1:0326967:     static final String
1:0326967:             cursorAttribute_ForUpdate = "FOR UPDATE ";
1:0326967:     static final String
1:0326967:             cursorAttribute_WithHold = "WITH HOLD ";
1:70f7692: 
1:70f7692:     // -----------------------Load resource bundles for the driver asap-----------
1:70f7692: 
1:508f8f6:     /**
1:508f8f6:      * Used by ClientDriver to accumulate load exceptions
1:508f8f6:      */
1:508f8f6:     private static SqlException exceptionsOnLoadResources = null;
1:cbd0ff1: 
1:70f7692:     static {
1:e509801:         try {
1:70f7692:             loadProductVersionHolder();
1:70f7692:         } catch (SqlException e) {
1:70f7692:             exceptionsOnLoadResources = e;
1:cbd0ff1:         }
1:cbd0ff1:     }
1:70f7692: 
1:508f8f6:     public static SqlException getExceptionOnLoadResources() {
1:508f8f6:         return exceptionsOnLoadResources;
1:508f8f6:     }
1:508f8f6:     
1:b54918e:     /**
1:70f7692:      * load product version information and accumulate exceptions
1:cbd0ff1:      */
1:70f7692:     private static void loadProductVersionHolder() throws SqlException {
5:70f7692:         try {
1:70f7692:             dncProductVersionHolder__ = buildProductVersionHolder();
1:69e3d06:         } catch (PrivilegedActionException e) {
2:3d650b1:             throw new SqlException(null, 
1:e65b4db:                     new ClientMessageId (SQLState.ERROR_PRIVILEGED_ACTION),
1:3d650b1:                     e.getException());                    
1:69e3d06:         } catch (IOException ioe) {
1:b2a1747:             throw SqlException.javaException(null, ioe);
1:70f7692:         }
1:70f7692:     }
1:70f7692: 
1:70f7692: 
1:70f7692:     // Create ProductVersionHolder in security block for Java 2 security.
1:70f7692:     private static ProductVersionHolder buildProductVersionHolder() throws
1:69e3d06:             PrivilegedActionException, IOException {
1:49be70b:         return AccessController.doPrivileged(
1:4772c7e:                 new PrivilegedExceptionAction<ProductVersionHolder>() {
1:70f7692: 
1:4772c7e:                     public ProductVersionHolder run() throws IOException {
1:70f7692:                         InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DNC_INFO);
1:70f7692: 
1:70f7692:                         return ProductVersionHolder.getProductVersionHolderFromMyEnv(versionStream);
1:70f7692:                     }
1:70f7692:                 });
1:70f7692:     }
1:70f7692:     
1:cbd0ff1:     /**
1:b54918e:      * Check to see if the jvm version is such that JDBC 4.2 is supported
1:b54918e:      */
1:b54918e:     
1:b54918e:     public static boolean supportsJDBC42() {
1:b54918e:         // use reflection to identify whether we support JDBC42
1:b54918e:         try {
1:b54918e:             Class.forName("java.sql.SQLType");
1:b54918e:             return true;
1:b54918e:         } catch (Exception e) {
1:b54918e:             return false;
1:b54918e:         }
1:b54918e:     }
1:b54918e: 
1:cbd0ff1: 
1:cbd0ff1: 
1:70f7692: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:9a0cdf1
/////////////////////////////////////////////////////////////////////////
commit:4772c7e
/////////////////////////////////////////////////////////////////////////
0:         myPVH = AccessController.doPrivileged(
1:                 new PrivilegedExceptionAction<ProductVersionHolder>() {
1:                     public ProductVersionHolder run() throws IOException {
commit:3b65355
/////////////////////////////////////////////////////////////////////////
0:     public final static String[] dncCompatibleJREVersions =
0:             {"1.4", "1.5", "1.6"};
commit:23ecfcf
/////////////////////////////////////////////////////////////////////////
0:     public static final String jreLevel;// = "1.3.0"; // default level if unable to read
0:     public static final int jreLevelMajor;// = 1;
0:     public static final int jreLevelMinor;// = 3;
/////////////////////////////////////////////////////////////////////////
1:     private static ProductVersionHolder dncProductVersionHolder__;
/////////////////////////////////////////////////////////////////////////
0:     // We will not set package VERSION in the initial release.
0:     public static final String dncPackageVersion = null;
/////////////////////////////////////////////////////////////////////////
0:     private static final String packageNameForDNC = "org.apache.derby.client"; // NOTUSED
/////////////////////////////////////////////////////////////////////////
0:         String _jreLevel;
0:             _jreLevel = System.getProperty("java.version");
0:             _jreLevel = "1.3.0";
0:         jreLevel = _jreLevel;
0:         int _jreLevelMajor = 1;
0:         int _jreLevelMinor = 3;
/////////////////////////////////////////////////////////////////////////
0:                 _jreLevelMajor = i; // state 0, this is the major version
0:                 _jreLevelMinor = i; // state 1, this is the minor version
0:         jreLevelMajor = _jreLevelMajor;
0:         jreLevelMinor = _jreLevelMinor;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static String[] getDncCompatibleJREVersions() {
commit:0326967
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static ProductVersionHolder getProductVersionHolder() {
1:     final static String
1:         dncDriverName = "Apache Derby Network Client JDBC Driver";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     final static int defaultIsolation = Connection.TRANSACTION_READ_COMMITTED;
1:     static final String
1:             cursorAttribute_SensitiveStatic = "SENSITIVE STATIC SCROLL ";
1:     static final String
1:             cursorAttribute_Insensitive = "INSENSITIVE SCROLL ";
1:     static final String
1:             cursorAttribute_ForUpdate = "FOR UPDATE ";
1:     static final String
1:             cursorAttribute_WithHold = "WITH HOLD ";
/////////////////////////////////////////////////////////////////////////
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.security.PrivilegedActionException;
1: import java.sql.Connection;
0: import java.util.StringTokenizer;
/////////////////////////////////////////////////////////////////////////
0:     public final static int defaultIsolation =
0:             Connection.TRANSACTION_READ_COMMITTED;
/////////////////////////////////////////////////////////////////////////
0:         StringTokenizer st = new StringTokenizer(jreLevel, ".");
0:                 i = Integer.parseInt(st.nextToken()); // get int value
/////////////////////////////////////////////////////////////////////////
1:         } catch (PrivilegedActionException e) {
1:         } catch (IOException ioe) {
/////////////////////////////////////////////////////////////////////////
1:             PrivilegedActionException, IOException {
commit:68968aa
/////////////////////////////////////////////////////////////////////////
1:         return dncPackageConsistencyToken.clone();
/////////////////////////////////////////////////////////////////////////
1:         return dncCompatibleJREVersions.clone();
commit:43fb59e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     // for ClientDriver.jdbcCompliant()
1:     private final static String[] dncCompatibleJREVersions =
1:             {"1.5", "1.6", "1.7", "1.8"};
1: 
0:     public static String[] getDncCompatibleJREVersions() {
0:         String[] cpy = new String[dncCompatibleJREVersions.length];
0:         System.arraycopy(dncCompatibleJREVersions, 0, cpy, 0, cpy.length);
0:         return cpy;
1:     }
commit:49be70b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final static byte[] dncPackageConsistencyToken =
1:     public static byte[] getDncPackageConsistencyToken() {
0:         byte [] cpy = new byte[dncPackageConsistencyToken.length];
0:         System.arraycopy(dncPackageConsistencyToken, 0, cpy, 0, cpy.length);
0:         return cpy;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(
/////////////////////////////////////////////////////////////////////////
commit:9fd9272
/////////////////////////////////////////////////////////////////////////
commit:508f8f6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Used by ClientDriver to accumulate load exceptions
1:      */
1:     private static SqlException exceptionsOnLoadResources = null;
/////////////////////////////////////////////////////////////////////////
1:     public static SqlException getExceptionOnLoadResources() {
1:         return exceptionsOnLoadResources;
1:     }
1:     
commit:8269b78
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.jdbc.ClientDataSourceInterface;
/////////////////////////////////////////////////////////////////////////
0:     public static int traceLevel__ = ClientDataSourceInterface.TRACE_ALL;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:b54918e
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check to see if the jvm version is such that JDBC 4.2 is supported
1:      */
1:     
1:     public static boolean supportsJDBC42() {
1:         // use reflection to identify whether we support JDBC42
1:         try {
1:             Class.forName("java.sql.SQLType");
1:             return true;
1:         } catch (Exception e) {
1:             return false;
1:         }
1:     }
1: 
commit:cbd0ff1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.info.JVMInfo;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Check to see if the jvm version is such that JDBC 4.0 is supported
1:      */
1:     
0:     public static boolean supportsJDBC40() {
0:         if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
0:             return true;
1:         }
0:         return false;
1:     }
1: 
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:4f3aa60
/////////////////////////////////////////////////////////////////////////
0:             {"1.5", "1.6", "1.7"};
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:e509801
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         // use reflection to identify whether we support JDBC40
1:         try {
0:             Class.forName("java.sql.SQLXML");
0:         } catch (Exception e) {
0:             return false;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:30c01ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:b2a1747
/////////////////////////////////////////////////////////////////////////
1:             throw SqlException.javaException(null, ioe);
commit:e65b4db
/////////////////////////////////////////////////////////////////////////
1:                     new ClientMessageId (SQLState.ERROR_PRIVILEGED_ACTION),
0:                     new ClientMessageId (SQLState.MISSING_RESOURCE_BUNDLE),
/////////////////////////////////////////////////////////////////////////
0:                     new ClientMessageId (SQLState.MISSING_RESOURCE_BUNDLE),
/////////////////////////////////////////////////////////////////////////
0:                     new ClientMessageId (SQLState.ERROR_PRIVILEGED_ACTION),
commit:3d650b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.reference.SQLState;
1: 
/////////////////////////////////////////////////////////////////////////
1:             throw new SqlException(null, 
0:                     new MessageId (SQLState.ERROR_PRIVILEGED_ACTION),
1:                     e.getException());                    
0:                     new MessageId (SQLState.MISSING_RESOURCE_BUNDLE),
0:                     packageNameForDNC, Configuration.dncDriverName);
1:              throw new SqlException(null,
0:                     new MessageId (SQLState.MISSING_RESOURCE_BUNDLE),
0:                     Configuration.packageNameForDNC, 
0:                      Configuration.dncDriverName);            
/////////////////////////////////////////////////////////////////////////
0:             throw new SqlException(null, 
0:                     new MessageId (SQLState.ERROR_PRIVILEGED_ACTION),
0:                     e.getException());                    
0:             throw new SqlException(null, ioe, null);
commit:fc25cc0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.services.info.JVMInfo;
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:f787cd0
/////////////////////////////////////////////////////////////////////////
0:     public static int traceLevel__ = org.apache.derby.jdbc.ClientBaseDataSource.TRACE_ALL;
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.security.AccessController;
1: import java.security.PrivilegedExceptionAction;
1: import org.apache.derby.iapi.services.info.ProductGenusNames;
1: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1: 
1: public class Configuration {
0:     public static int traceFileSuffixIndex__ = 0;
0:     public static int traceLevel__ = org.apache.derby.client.ClientBaseDataSource.TRACE_ALL;
0:     public static String traceFile__ = null;
0:     public static String traceDirectory__ = null;
0:     public static boolean traceFileAppend__ = false;
0:     public static String jreLevel = "1.3.0"; // default level if unable to read
0:     public static int jreLevelMajor = 1;
0:     public static int jreLevelMinor = 3;
1:     private Configuration() {
0:     public static boolean traceSuspended__;
0:     public static boolean[] enableConnectivityToTargetServer__;
0:     public static boolean jvmSupportsMicrosClock__ = false;
1:     // -------------------------- versioning -------------------------------------
1: 
0:     public static ProductVersionHolder dncProductVersionHolder__;
1: 
0:     public static ProductVersionHolder getProductVersionHolder() {
1:         return dncProductVersionHolder__;
1:     // for DatabaseMetaData.getDriverName()
0:     public final static String dncDriverName = "Apache Derby Network Client JDBC Driver";
1: 
1: 
1:     // Hard-wired for JDBC
1:     //
1:     // Currently ASCII hex value of "SYSLVL01".
0:     public final static byte[] dncPackageConsistencyToken =
1:             {0x53, 0x59, 0x53, 0x4c, 0x56, 0x4c, 0x30, 0x31};
1: 
0:     // We will not set packagge VERSION in the initial release.
0:     // If we have to change the package version in the future then we can.
0:     public static String dncPackageVersion = null;
1: 
0:     // for Driver.jdbcCompliant()
1:     public final static boolean jdbcCompliant = true;
1: 
0:     // for Driver.getCompatibileJREVersions()
0:     public final static String[] dncCompatibleJREVersions = new String[]{"1.3", "1.4"};
1: 
1:     //---------------------- database URL protocols ------------------------------
1: 
1:     // For DatabaseMetaData.getURL()
1:     public final static String jdbcDerbyNETProtocol = "jdbc:derby://";
1: 
1:     // -------------------------- metrics ----------------------
1:     // Not currently used by production builds.
1:     // We can't really use this stuff with tracing enabled, the results are not accurate.
1: 
1:     // -------------------------- compiled in properties -------------------------
1: 
0:     public final static boolean enableNetConnectionPooling = true;
1: 
1:     final static boolean rangeCheckCrossConverters = true;
1: 
1:     // Define different levels of bug checking, for now turn all bits on.
1:     final static int bugCheckLevel = 0xff;
1: 
1:     // --------------------------- connection defaults ---------------------------
1: 
1:     // This is the DERBY default and maps to DERBY's "Cursor Stability".
0:     public final static int defaultIsolation = java.sql.Connection.TRANSACTION_READ_COMMITTED;
1: 
1:     // ---------------------------- statement defaults----------------------------
1: 
1:     public static final int defaultFetchSize = 64;
1: 
1:     // Prepare attribute constants
0:     public static final String cursorAttribute_SensitiveStatic = "SENSITIVE STATIC SCROLL ";
0:     public static final String cursorAttribute_SensitiveStaticRowset = cursorAttribute_SensitiveStatic;
0:     public static final String cursorAttribute_SensitiveDynamic = "SENSITIVE DYNAMIC SCROLL ";
0:     public static final String cursorAttribute_SensitiveDynamicRowset = "SENSITIVE DYNAMIC SCROLL WITH ROWSET POSITIONING ";
0:     public static final String cursorAttribute_Insensitive = "INSENSITIVE SCROLL ";
0:     public static final String cursorAttribute_InsensitiveRowset = cursorAttribute_Insensitive;
1: 
0:     // uncomment the following when we want to use multi-row fetch to support sensitive static and
0:     // insensitve cursors whenever the server has support for it.
0:     //public static final String cursorAttribute_SensitiveStaticRowset = "SENSITIVE STATIC SCROLL WITH ROWSET POSITIONING ";
0:     //public static final String cursorAttribute_InsensitiveRowset = "INSENSITIVE SCROLL WITH ROWSET POSITIONING ";
1: 
0:     public static final String cursorAttribute_ForUpdate = "FOR UPDATE ";
0:     public static final String cursorAttribute_ForReadOnly = "FOR READ ONLY ";
1: 
0:     public static final String cursorAttribute_WithHold = "WITH HOLD ";
1: 
1:     // -----------------------Load resource bundles for the driver asap-----------
1: 
0:     private static final String packageNameForDNC = "org.apache.derby.client";
0:     private static final String classNameForResources = "org.apache.derby.client.resources.Resources";
1: 
0:     public static SqlException exceptionsOnLoadResources = null; // used by ClientDriver to accumulate load exceptions
0:     public static java.util.ResourceBundle dncResources__;
1: 
1:     static {
1:         try {
1:             loadProductVersionHolder();
0:             loadResources();
1:         } catch (SqlException e) {
1:             exceptionsOnLoadResources = e;
1:         }
1:         try {
0:             jreLevel = System.getProperty("java.version");
0:         } catch (SecurityException e) {
0:         } // ignore it, assume 1.3.0
0:         java.util.StringTokenizer st = new java.util.StringTokenizer(jreLevel, ".");
0:         int jreState = 0;
0:         while (st.hasMoreTokens()) {
0:             int i;
1:             try {
0:                 i = java.lang.Integer.parseInt(st.nextToken()); // get int value
0:             } catch (NumberFormatException e) {
0:                 i = 0;
1:             }
0:             switch (jreState++) {
0:             case 0:
0:                 jreLevelMajor = i; // state 0, this is the major version
0:                 break;
0:             case 1:
0:                 jreLevelMinor = i; // state 1, this is the minor version
0:                 break;
0:             default:
0:                 break; // state >1, ignore
1:             }
1:         }
1:     }
1: 
0:     private static void loadResources() throws SqlException {
1:         try {
0:             dncResources__ = (java.util.ResourceBundle) java.security.AccessController.doPrivileged(new org.apache.derby.client.am.GetResourceBundleAction(classNameForResources));
0:         } catch (java.security.PrivilegedActionException e) {
0:             throw new SqlException(null,
0:                     "[derby] " +
0:                     "PrivilegedActionException:" +
0:                     e.getException());
0:         } catch (java.util.MissingResourceException e) {
0:             // A null log writer is passed, because jdbc 1 sql exceptions are automatically traced
0:             throw new SqlException(null,
0:                     "[derby] " +
0:                     "Missing resource bundle:" +
0:                     " a resource bundle could not be found" +
0:                     " in the " + packageNameForDNC + " package for " + Configuration.dncDriverName);
1:         }
1:     }
1: 
0:     public static void checkForExceptionsFromLoadConfiguration(LogWriter dncLogWriter) throws SqlException {
0:         if (dncResources__ == null) {
0:             throw new SqlException(dncLogWriter,
0:                     "Missing resource bundle: a resource bundle could not be found" +
0:                     " in the " + Configuration.packageNameForDNC + " package for " + Configuration.dncDriverName);
1:         }
1:     }
1: 
0:     /**
1:      * load product version information and accumulate exceptions
1:      */
1:     private static void loadProductVersionHolder() throws SqlException {
1:         try {
1:             dncProductVersionHolder__ = buildProductVersionHolder();
0:         } catch (java.security.PrivilegedActionException e) {
0:             throw new SqlException(null,
0:                     "[derby] " +
0:                     "PrivilegedActionException:" +
0:                     e.getException());
0:         } catch (java.io.IOException ioe) {
0:             throw new SqlException(null,
0:                     "[derby] " +
0:                     "IOException:" +
0:                     ioe);
1:         }
1:     }
1: 
1: 
1:     // Create ProductVersionHolder in security block for Java 2 security.
1:     private static ProductVersionHolder buildProductVersionHolder() throws
0:             java.security.PrivilegedActionException, IOException {
0:         ProductVersionHolder myPVH = null;
0:         myPVH = (ProductVersionHolder)
0:                 AccessController.doPrivileged(new PrivilegedExceptionAction() {
1: 
0:                     public Object run() throws IOException {
1:                         InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DNC_INFO);
1: 
1:                         return ProductVersionHolder.getProductVersionHolderFromMyEnv(versionStream);
1:                     }
1:                 });
1: 
0:         return myPVH;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1:    Derby - Class org.apache.derby.client.am.Configuration
0: 
0:    Copyright (c) 2001, 2005 The Apache Software Foundation or its licensors, where applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
1:       http://www.apache.org/licenses/LICENSE-2.0
0: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
0: 
0: */
0: 
1: package org.apache.derby.client.am;
0: import org.apache.derby.iapi.services.info.ProductVersionHolder;
0: import org.apache.derby.iapi.services.info.ProductGenusNames;
0: import java.security.AccessController;
0: import java.security.PrivilegedExceptionAction;
1: import java.io.IOException;
1: import java.io.InputStream;
0: 
0: public class Configuration
0: {
0: 
0: 
0:   public static int traceFileSuffixIndex__ = 0;
0: 
0:   public static int traceLevel__ = org.apache.derby.client.ClientBaseDataSource.TRACE_ALL;
0: 
0:   public static String traceFile__ = null;
0: 
0:   public static String traceDirectory__ = null;
0: 
0:   public static boolean traceFileAppend__ = false;
0:   public static String jreLevel = "1.3.0"; // default level if unable to read
0:   public static int jreLevelMajor = 1;
0:   public static int jreLevelMinor = 3;
0: 
0:   private Configuration () {}
0: 
0:   public static boolean traceSuspended__;
0: 
0:   public static boolean[] enableConnectivityToTargetServer__;
0:   public static boolean jvmSupportsMicrosClock__ = false;
0: 
0:   // -------------------------- versioning -------------------------------------
0: 
0:   public static ProductVersionHolder dncProductVersionHolder__;
0: 
0:   public static ProductVersionHolder getProductVersionHolder()
0:   {
0: 	return dncProductVersionHolder__;
0:   }
0: 
0: 
0:   // for DatabaseMetaData.getDriverName()
0:   public final static String dncDriverName = "Apache Derby Network Client JDBC Driver" ;
0: 
0: 
0:   // Hard-wired for JDBC
0:   //
0:   // Currently ASCII hex value of "SYSLVL01".
0:   public final static byte[] dncPackageConsistencyToken =
0:     {0x53, 0x59, 0x53, 0x4c, 0x56, 0x4c, 0x30, 0x31};
0: 
0:   // We will not set packagge VERSION in the initial release.
0:   // If we have to change the package version in the future then we can.
0:   public static String dncPackageVersion = null;
0: 
0:   // for Driver.jdbcCompliant()
0:   public final static boolean jdbcCompliant = true;
0: 
0:   // for Driver.getCompatibileJREVersions()
0:   public final static String[] dncCompatibleJREVersions = new String[] {"1.3", "1.4"};
0: 
0:   //---------------------- database URL protocols ------------------------------
0: 
0:   // For DatabaseMetaData.getURL()
0:   public final static String jdbcDerbyNETProtocol = "jdbc:derby://";
0: 
0:   // -------------------------- metrics ----------------------
0:   // Not currently used by production builds.
0:   // We can't really use this stuff with tracing enabled, the results are not accurate.
0: 
0:   // -------------------------- compiled in properties -------------------------
0: 
0:   public final static boolean enableNetConnectionPooling = true;
0: 
0:   final static boolean rangeCheckCrossConverters = true;
0: 
0:   // Define different levels of bug checking, for now turn all bits on.
0:   final static int bugCheckLevel = 0xff;
0: 
0:   // --------------------------- connection defaults ---------------------------
0: 
0:   // This is the DERBY default and maps to DERBY's "Cursor Stability".
0:   public final static int defaultIsolation = java.sql.Connection.TRANSACTION_READ_COMMITTED;
0: 
0:   // ---------------------------- statement defaults----------------------------
0: 
0:   public static final int defaultFetchSize = 64;
0: 
0:   // Prepare attribute constants
0:   public static final String cursorAttribute_SensitiveStatic = "SENSITIVE STATIC SCROLL ";
0:   public static final String cursorAttribute_SensitiveStaticRowset = cursorAttribute_SensitiveStatic;
0:   public static final String cursorAttribute_SensitiveDynamic = "SENSITIVE DYNAMIC SCROLL ";
0:   public static final String cursorAttribute_SensitiveDynamicRowset = "SENSITIVE DYNAMIC SCROLL WITH ROWSET POSITIONING ";
0:   public static final String cursorAttribute_Insensitive = "INSENSITIVE SCROLL ";
0:   public static final String cursorAttribute_InsensitiveRowset = cursorAttribute_Insensitive;
0: 
0:   // uncomment the following when we want to use multi-row fetch to support sensitive static and
0:   // insensitve cursors whenever the server has support for it.
0:   //public static final String cursorAttribute_SensitiveStaticRowset = "SENSITIVE STATIC SCROLL WITH ROWSET POSITIONING ";
0:   //public static final String cursorAttribute_InsensitiveRowset = "INSENSITIVE SCROLL WITH ROWSET POSITIONING ";
0: 
0:   public static final String cursorAttribute_ForUpdate = "FOR UPDATE ";
0:   public static final String cursorAttribute_ForReadOnly = "FOR READ ONLY ";
0: 
0:   public static final String cursorAttribute_WithHold = "WITH HOLD ";
0: 
0:   // -----------------------Load resource bundles for the driver asap-----------
0: 
0:   private static final String packageNameForDNC = "org.apache.derby.client";
0:   private static final String classNameForResources = "org.apache.derby.client.resources.Resources";
0: 
0:   public static SqlException exceptionsOnLoadResources = null; // used by ClientDriver to accumulate load exceptions
0:   public static java.util.ResourceBundle dncResources__;
0: 
0:   static {
0: 	try {
0: 	  loadProductVersionHolder();
0:       loadResources ();
0:     }
0:     catch (SqlException e) {
0:       exceptionsOnLoadResources = e;
0:     }
0:     try {
0:       jreLevel = System.getProperty( "java.version" );
0:     }
0:     catch (SecurityException e) {} // ignore it, assume 1.3.0
0:     java.util.StringTokenizer st = new java.util.StringTokenizer( jreLevel, "." );
0:     int jreState = 0;
0:     while( st.hasMoreTokens() )
0:     {
0:       int i;
0:       try
0:       {
0:         i = java.lang.Integer.parseInt(st.nextToken()); // get int value
0:       }
0:       catch( NumberFormatException e ) { i=0;}
0:       switch( jreState++ )
0:       {
0:         case 0:
0:           jreLevelMajor = i; // state 0, this is the major version
0:           break;
0:         case 1:
0:           jreLevelMinor = i; // state 1, this is the minor version
0:           break;
0:         default:
0:           break; // state >1, ignore
0:       }
0:     }
0:   }
0: 
0:   private static void loadResources () throws SqlException
0:   {
0:     try {
0:       dncResources__ = (java.util.ResourceBundle) java.security.AccessController.doPrivileged (
0:         new org.apache.derby.client.am.GetResourceBundleAction (classNameForResources));
0:     }
0:     catch (java.security.PrivilegedActionException e) {
0:       throw new SqlException (null,
0:                               "[derby] " +
0:                               "PrivilegedActionException:" +
0:                               e.getException());
0:     }
0:     catch (java.util.MissingResourceException e) {
0:       // A null log writer is passed, because jdbc 1 sql exceptions are automatically traced
0:       throw new SqlException (null,
0:                               "[derby] " +
0:                               "Missing resource bundle:" +
0:                               " a resource bundle could not be found" +
0:                               " in the " + packageNameForDNC + " package for " + Configuration.dncDriverName);
0:     }
0:   }
0: 
0:   public static void checkForExceptionsFromLoadConfiguration (LogWriter dncLogWriter) throws SqlException
0:   {
0:     if (dncResources__ == null) {
0:       throw new SqlException (dncLogWriter,
0:                               "Missing resource bundle: a resource bundle could not be found" +
0:                               " in the " + Configuration.packageNameForDNC + " package for " + Configuration.dncDriverName);
0:     }
0:   }
0: 
0:   /**
0:    * load product version information and accumulate exceptions
0:    */
0:   private static void loadProductVersionHolder() throws SqlException
0:   {
0: 	try {
0: 	  dncProductVersionHolder__ = buildProductVersionHolder();
0:     }
0:     catch (java.security.PrivilegedActionException e) {
0:       throw new SqlException (null,
0:                               "[derby] " +
0:                               "PrivilegedActionException:" +
0:                               e.getException());
0:     }
0: 	catch (java.io.IOException ioe) {
0: 	  throw new SqlException (null,
0:                               "[derby] " +
0:                               "IOException:" +
0:                               ioe);
0: 	}
0:   }
0: 
0: 
0:   // Create ProductVersionHolder in security block for Java 2 security.
0:   private  static ProductVersionHolder buildProductVersionHolder() throws
0:   java.security.PrivilegedActionException, IOException
0: 	{
0: 	  ProductVersionHolder myPVH= null;
0: 	  myPVH = (ProductVersionHolder) 
0: 	    AccessController.doPrivileged(
0: 					  new PrivilegedExceptionAction() {
0: 					      
0: 					      public Object run() throws IOException
0: 					      {
0: 						InputStream versionStream = getClass().getResourceAsStream(ProductGenusNames.DNC_INFO);
0: 						
0: 						return ProductVersionHolder.getProductVersionHolderFromMyEnv(versionStream);
0: 					      }
0: 					    });
0: 	  
0: 	  return myPVH;
0: 	}
0: 
0: }
============================================================================