2:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.OptimizerFactoryImpl
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
11:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.compile;
1:eac0369: 
1:3bb140c: import java.util.Properties;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:3bb140c: import org.apache.derby.iapi.services.property.PropertyUtil;
1:eac0369: import org.apache.derby.iapi.sql.compile.CostEstimate;
1:eac0369: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1:eac0369: import org.apache.derby.iapi.sql.compile.OptimizableList;
1:eac0369: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizer;
1:eac0369: import org.apache.derby.iapi.sql.compile.OptimizerFactory;
1:a56ecfa: import org.apache.derby.iapi.sql.compile.OptimizerPlan;
1:eac0369: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	This is simply the factory for creating an optimizer.
1:eac0369:  */
1:eac0369: 
1:eac0369: public class OptimizerFactoryImpl
1:61070a6: 	implements ModuleControl, OptimizerFactory {
1:eac0369: 
1:eac0369: 	protected String optimizerId = null;
1:eac0369: 	protected boolean ruleBasedOptimization = false;
1:eac0369: 	protected boolean noTimeout = false;
1:eac0369: 	protected boolean useStatistics = true;
1:eac0369: 	protected int maxMemoryPerTable = 1048576;
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** The fact that we have one set of join strategies for use by all
1:eac0369: 	** optimizers means that the JoinStrategy[] must be immutable, and
1:eac0369: 	** also each JoinStrategy must be immutable.
1:eac0369: 	*/
1:eac0369: 	protected JoinStrategy[] joinStrategySet;
1:eac0369: 
1:3bb140c:     /* Do join order optimization by default */
1:3bb140c:     private boolean joinOrderOptimization = true;
1:3bb140c: 
1:3bb140c: 
1:eac0369: 	//
1:eac0369: 	// ModuleControl interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	public void boot(boolean create, Properties startParams)
1:eac0369: 			throws StandardException {
1:eac0369: 
1:3bb140c:         /*
1:3bb140c:         ** This system property determines whether to optimize join order
1:3bb140c:         ** by default.  It is used mainly for testing - there are many tests
1:3bb140c:         ** that assume the join order is fixed.
1:3bb140c:         */
1:3bb140c:         String opt =
1:3bb140c:             PropertyUtil.getSystemProperty(Optimizer.JOIN_ORDER_OPTIMIZATION);
1:3bb140c:         if (opt != null)
1:3bb140c:         {
1:3bb140c:             joinOrderOptimization = Boolean.parseBoolean(opt);
1:3bb140c:         }
1:3bb140c: 
1:3bb140c:         /*
1:eac0369: 		** This property determines whether to use rule-based or cost-based
1:eac0369: 		** optimization.  It is used mainly for testing - there are many tests
1:eac0369: 		** that assume rule-based optimization.  The default is cost-based
1:eac0369: 		** optimization.
1:eac0369: 		*/
1:eac0369: 		ruleBasedOptimization =
1:eac0369: 				Boolean.valueOf(
1:eac0369: 					PropertyUtil.getSystemProperty(Optimizer.RULE_BASED_OPTIMIZATION)
1:eac0369: 								).booleanValue();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** This property determines whether the optimizer should ever stop
1:eac0369: 		** optimizing a query because it has spent too long in optimization.
1:eac0369: 		** The default is that it will.
1:eac0369: 		*/
1:eac0369: 		noTimeout =
1:eac0369: 				Boolean.valueOf(
1:eac0369: 					PropertyUtil.getSystemProperty(Optimizer.NO_TIMEOUT)
1:eac0369: 								).booleanValue();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** This property determines the maximum size of memory (in KB)
1:eac0369: 		** the optimizer can use for each table.  If an access path takes
1:eac0369: 		** memory larger than that size for a table, the access path is skipped.
1:eac0369: 		** Default is 1024 (KB).
1:eac0369: 		*/
1:eac0369: 		String maxMemValue = PropertyUtil.getSystemProperty(Optimizer.MAX_MEMORY_PER_TABLE);
1:eac0369: 		if (maxMemValue != null)
1:eac0369: 		{
1:eac0369: 			int intValue = Integer.parseInt(maxMemValue);
1:eac0369: 			if (intValue >= 0)
1:eac0369: 				maxMemoryPerTable = intValue * 1024;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		String us =	PropertyUtil.getSystemProperty(Optimizer.USE_STATISTICS); 
1:eac0369: 		if (us != null)
1:eac0369: 			useStatistics = (Boolean.valueOf(us)).booleanValue();
1:eac0369: 
1:eac0369: 		/* Allocation of joinStrategySet deferred til
1:eac0369: 		 * getOptimizer(), even though we only need 1
1:eac0369: 		 * array for this factory.  We defer allocation
1:eac0369: 		 * to improve boot time on small devices.
1:eac0369: 		 */
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void stop() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// OptimizerFactory interface
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see OptimizerFactory#getOptimizer
2:eac0369: 	 *
2:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	public Optimizer getOptimizer(OptimizableList optimizableList,
1:eac0369: 								  OptimizablePredicateList predList,
1:eac0369: 								  DataDictionary dDictionary,
1:eac0369: 								  RequiredRowOrdering requiredRowOrdering,
1:eac0369: 								  int numTablesInQuery,
1:a56ecfa: 								  OptimizerPlan overridingPlan,
1:eac0369: 								  LanguageConnectionContext lcc)
2:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		/* Get/set up the array of join strategies.
1:eac0369: 		 * See comment in boot().  If joinStrategySet
1:eac0369: 		 * is null, then we may do needless allocations
1:eac0369: 		 * in a multi-user environment if multiple
1:eac0369: 		 * users find it null on entry.  However, 
1:eac0369: 		 * assignment of array is atomic, so system
1:eac0369: 		 * will be consistent even in rare case
1:eac0369: 		 * where users get different arrays.
1:eac0369: 		 */
1:eac0369: 		if (joinStrategySet == null)
1:eac0369: 		{
1:eac0369: 			JoinStrategy[] jss = new JoinStrategy[2];
1:eac0369: 			jss[0] = new NestedLoopJoinStrategy();
1:eac0369: 			jss[1] = new HashJoinStrategy();
1:eac0369: 			joinStrategySet = jss;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return getOptimizerImpl(optimizableList,
1:eac0369: 							predList,
1:eac0369: 							dDictionary,
1:eac0369: 							requiredRowOrdering,
1:eac0369: 							numTablesInQuery,
1:a56ecfa: 							overridingPlan,
1:eac0369: 							lcc);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see OptimizerFactory#getCostEstimate
1:eac0369: 	 */
1:eac0369: 	public CostEstimate getCostEstimate()
1:eac0369: 	{
1:eac0369: 		return new CostEstimateImpl();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see OptimizerFactory#supportsOptimizerTrace
1:eac0369: 	 */
1:eac0369: 	public boolean supportsOptimizerTrace()
1:eac0369: 	{
1:2ae1afe: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// class interface
1:eac0369: 	//
1:eac0369: 	public OptimizerFactoryImpl() {
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	protected Optimizer getOptimizerImpl(OptimizableList optimizableList,
1:eac0369: 								  OptimizablePredicateList predList,
1:eac0369: 								  DataDictionary dDictionary,
1:eac0369: 								  RequiredRowOrdering requiredRowOrdering,
1:eac0369: 								  int numTablesInQuery,
1:a56ecfa: 								  OptimizerPlan overridingPlan,
1:eac0369: 								  LanguageConnectionContext lcc)
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 
1:eac0369: 		return new OptimizerImpl(
1:eac0369: 							optimizableList,
1:eac0369: 							predList,
1:eac0369: 							dDictionary,
1:eac0369: 							ruleBasedOptimization,
1:eac0369: 							noTimeout,
1:eac0369: 							useStatistics,
1:eac0369: 							maxMemoryPerTable,
1:eac0369: 							joinStrategySet,
1:eac0369: 							lcc.getLockEscalationThreshold(),
1:eac0369: 							requiredRowOrdering,
1:2ae1afe: 							numTablesInQuery,
1:a56ecfa: 							overridingPlan,
1:2ae1afe:                             lcc);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see OptimizerFactory#getMaxMemoryPerTable
1:eac0369: 	 */
1:eac0369: 	public int getMaxMemoryPerTable()
1:eac0369: 	{
1:eac0369: 		return maxMemoryPerTable;
1:eac0369: 	}
1:3bb140c: 
1:3bb140c:     @Override
1:3bb140c:     public boolean doJoinOrderOptimization()
1:3bb140c:     {
1:3bb140c:         return joinOrderOptimization;
1:3bb140c:     }
1:eac0369: }
1:eac0369: 
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6a270cb
/////////////////////////////////////////////////////////////////////////
commit:a56ecfa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.OptimizerPlan;
/////////////////////////////////////////////////////////////////////////
1: 								  OptimizerPlan overridingPlan,
/////////////////////////////////////////////////////////////////////////
1: 							overridingPlan,
/////////////////////////////////////////////////////////////////////////
1: 								  OptimizerPlan overridingPlan,
/////////////////////////////////////////////////////////////////////////
1: 							overridingPlan,
commit:2ae1afe
/////////////////////////////////////////////////////////////////////////
1: 		return true;
/////////////////////////////////////////////////////////////////////////
1: 							numTablesInQuery,
1:                             lcc);
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /* Do join order optimization by default */
1:     private boolean joinOrderOptimization = true;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         /*
1:         ** This system property determines whether to optimize join order
1:         ** by default.  It is used mainly for testing - there are many tests
1:         ** that assume the join order is fixed.
1:         */
1:         String opt =
1:             PropertyUtil.getSystemProperty(Optimizer.JOIN_ORDER_OPTIMIZATION);
1:         if (opt != null)
1:         {
1:             joinOrderOptimization = Boolean.parseBoolean(opt);
1:         }
1: 
1:         /*
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean doJoinOrderOptimization()
1:     {
1:         return joinOrderOptimization;
1:     }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.OptimizerFactoryImpl
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
1: 	implements ModuleControl, OptimizerFactory {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.CostEstimate;
1: import org.apache.derby.iapi.sql.compile.JoinStrategy;
1: import org.apache.derby.iapi.sql.compile.OptimizableList;
1: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
1: import org.apache.derby.iapi.sql.compile.Optimizer;
1: import org.apache.derby.iapi.sql.compile.OptimizerFactory;
1: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
0: import org.apache.derby.iapi.store.access.TransactionController;
1: 
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: 
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.reference.Property;
1: 
0: import java.util.Properties;
1: 
1: /**
1: 	This is simply the factory for creating an optimizer.
1:  */
1: 
1: public class OptimizerFactoryImpl
0: 	implements ModuleControl, OptimizerFactory { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	protected String optimizerId = null;
1: 	protected boolean ruleBasedOptimization = false;
1: 	protected boolean noTimeout = false;
1: 	protected boolean useStatistics = true;
1: 	protected int maxMemoryPerTable = 1048576;
1: 
1: 	/*
1: 	** The fact that we have one set of join strategies for use by all
1: 	** optimizers means that the JoinStrategy[] must be immutable, and
1: 	** also each JoinStrategy must be immutable.
1: 	*/
1: 	protected JoinStrategy[] joinStrategySet;
1: 
1: 	//
1: 	// ModuleControl interface
1: 	//
1: 
1: 	public void boot(boolean create, Properties startParams)
1: 			throws StandardException {
1: 
1: 		/*
1: 		** This property determines whether to use rule-based or cost-based
1: 		** optimization.  It is used mainly for testing - there are many tests
1: 		** that assume rule-based optimization.  The default is cost-based
1: 		** optimization.
1: 		*/
1: 		ruleBasedOptimization =
1: 				Boolean.valueOf(
1: 					PropertyUtil.getSystemProperty(Optimizer.RULE_BASED_OPTIMIZATION)
1: 								).booleanValue();
1: 
1: 		/*
1: 		** This property determines whether the optimizer should ever stop
1: 		** optimizing a query because it has spent too long in optimization.
1: 		** The default is that it will.
1: 		*/
1: 		noTimeout =
1: 				Boolean.valueOf(
1: 					PropertyUtil.getSystemProperty(Optimizer.NO_TIMEOUT)
1: 								).booleanValue();
1: 
1: 		/*
1: 		** This property determines the maximum size of memory (in KB)
1: 		** the optimizer can use for each table.  If an access path takes
1: 		** memory larger than that size for a table, the access path is skipped.
1: 		** Default is 1024 (KB).
1: 		*/
1: 		String maxMemValue = PropertyUtil.getSystemProperty(Optimizer.MAX_MEMORY_PER_TABLE);
1: 		if (maxMemValue != null)
1: 		{
1: 			int intValue = Integer.parseInt(maxMemValue);
1: 			if (intValue >= 0)
1: 				maxMemoryPerTable = intValue * 1024;
1: 		}
1: 
1: 		String us =	PropertyUtil.getSystemProperty(Optimizer.USE_STATISTICS); 
1: 		if (us != null)
1: 			useStatistics = (Boolean.valueOf(us)).booleanValue();
1: 
1: 		/* Allocation of joinStrategySet deferred til
1: 		 * getOptimizer(), even though we only need 1
1: 		 * array for this factory.  We defer allocation
1: 		 * to improve boot time on small devices.
1: 		 */
1: 	}
1: 
1: 	public void stop() {
1: 	}
1: 
1: 	//
1: 	// OptimizerFactory interface
1: 	//
1: 
1: 	/**
1: 	 * @see OptimizerFactory#getOptimizer
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public Optimizer getOptimizer(OptimizableList optimizableList,
1: 								  OptimizablePredicateList predList,
1: 								  DataDictionary dDictionary,
1: 								  RequiredRowOrdering requiredRowOrdering,
1: 								  int numTablesInQuery,
1: 								  LanguageConnectionContext lcc)
1: 				throws StandardException
1: 	{
1: 		/* Get/set up the array of join strategies.
1: 		 * See comment in boot().  If joinStrategySet
1: 		 * is null, then we may do needless allocations
1: 		 * in a multi-user environment if multiple
1: 		 * users find it null on entry.  However, 
1: 		 * assignment of array is atomic, so system
1: 		 * will be consistent even in rare case
1: 		 * where users get different arrays.
1: 		 */
1: 		if (joinStrategySet == null)
1: 		{
1: 			JoinStrategy[] jss = new JoinStrategy[2];
1: 			jss[0] = new NestedLoopJoinStrategy();
1: 			jss[1] = new HashJoinStrategy();
1: 			joinStrategySet = jss;
1: 		}
1: 
1: 		return getOptimizerImpl(optimizableList,
1: 							predList,
1: 							dDictionary,
1: 							requiredRowOrdering,
1: 							numTablesInQuery,
1: 							lcc);
1: 	}
1: 
1: 	/**
1: 	 * @see OptimizerFactory#getCostEstimate
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public CostEstimate getCostEstimate()
1: 		throws StandardException
1: 	{
1: 		return new CostEstimateImpl();
1: 	}
1: 
1: 	/**
1: 	 * @see OptimizerFactory#supportsOptimizerTrace
1: 	 */
1: 	public boolean supportsOptimizerTrace()
1: 	{
0: 		return false;
1: 	}
1: 
1: 	//
1: 	// class interface
1: 	//
1: 	public OptimizerFactoryImpl() {
1: 	}
1: 
1: 	protected Optimizer getOptimizerImpl(OptimizableList optimizableList,
1: 								  OptimizablePredicateList predList,
1: 								  DataDictionary dDictionary,
1: 								  RequiredRowOrdering requiredRowOrdering,
1: 								  int numTablesInQuery,
1: 								  LanguageConnectionContext lcc)
1: 				throws StandardException
1: 	{
1: 
1: 		return new OptimizerImpl(
1: 							optimizableList,
1: 							predList,
1: 							dDictionary,
1: 							ruleBasedOptimization,
1: 							noTimeout,
1: 							useStatistics,
1: 							maxMemoryPerTable,
1: 							joinStrategySet,
1: 							lcc.getLockEscalationThreshold(),
1: 							requiredRowOrdering,
0: 							numTablesInQuery);
1: 	}
1: 
1: 	/**
1: 	 * @see OptimizerFactory#getMaxMemoryPerTable
1: 	 */
1: 	public int getMaxMemoryPerTable()
1: 	{
1: 		return maxMemoryPerTable;
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.CostEstimate;
0: import org.apache.derby.iapi.sql.compile.JoinStrategy;
0: import org.apache.derby.iapi.sql.compile.OptimizableList;
0: import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
0: import org.apache.derby.iapi.sql.compile.Optimizer;
0: import org.apache.derby.iapi.sql.compile.OptimizerFactory;
0: import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.store.access.TransactionController;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: 
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 	This is simply the factory for creating an optimizer.
0:  */
0: 
0: public class OptimizerFactoryImpl
0: 	implements ModuleControl, OptimizerFactory { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	protected String optimizerId = null;
0: 	protected boolean ruleBasedOptimization = false;
0: 	protected boolean noTimeout = false;
0: 	protected boolean useStatistics = true;
0: 	protected int maxMemoryPerTable = 1048576;
0: 
0: 	/*
0: 	** The fact that we have one set of join strategies for use by all
0: 	** optimizers means that the JoinStrategy[] must be immutable, and
0: 	** also each JoinStrategy must be immutable.
0: 	*/
0: 	protected JoinStrategy[] joinStrategySet;
0: 
0: 	//
0: 	// ModuleControl interface
0: 	//
0: 
0: 	public void boot(boolean create, Properties startParams)
0: 			throws StandardException {
0: 
0: 		/*
0: 		** This property determines whether to use rule-based or cost-based
0: 		** optimization.  It is used mainly for testing - there are many tests
0: 		** that assume rule-based optimization.  The default is cost-based
0: 		** optimization.
0: 		*/
0: 		ruleBasedOptimization =
0: 				Boolean.valueOf(
0: 					PropertyUtil.getSystemProperty(Optimizer.RULE_BASED_OPTIMIZATION)
0: 								).booleanValue();
0: 
0: 		/*
0: 		** This property determines whether the optimizer should ever stop
0: 		** optimizing a query because it has spent too long in optimization.
0: 		** The default is that it will.
0: 		*/
0: 		noTimeout =
0: 				Boolean.valueOf(
0: 					PropertyUtil.getSystemProperty(Optimizer.NO_TIMEOUT)
0: 								).booleanValue();
0: 
0: 		/*
0: 		** This property determines the maximum size of memory (in KB)
0: 		** the optimizer can use for each table.  If an access path takes
0: 		** memory larger than that size for a table, the access path is skipped.
0: 		** Default is 1024 (KB).
0: 		*/
0: 		String maxMemValue = PropertyUtil.getSystemProperty(Optimizer.MAX_MEMORY_PER_TABLE);
0: 		if (maxMemValue != null)
0: 		{
0: 			int intValue = Integer.parseInt(maxMemValue);
0: 			if (intValue >= 0)
0: 				maxMemoryPerTable = intValue * 1024;
0: 		}
0: 
0: 		String us =	PropertyUtil.getSystemProperty(Optimizer.USE_STATISTICS); 
0: 		if (us != null)
0: 			useStatistics = (Boolean.valueOf(us)).booleanValue();
0: 
0: 		/* Allocation of joinStrategySet deferred til
0: 		 * getOptimizer(), even though we only need 1
0: 		 * array for this factory.  We defer allocation
0: 		 * to improve boot time on small devices.
0: 		 */
0: 	}
0: 
0: 	public void stop() {
0: 	}
0: 
0: 	//
0: 	// OptimizerFactory interface
0: 	//
0: 
0: 	/**
0: 	 * @see OptimizerFactory#getOptimizer
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public Optimizer getOptimizer(OptimizableList optimizableList,
0: 								  OptimizablePredicateList predList,
0: 								  DataDictionary dDictionary,
0: 								  RequiredRowOrdering requiredRowOrdering,
0: 								  int numTablesInQuery,
0: 								  LanguageConnectionContext lcc)
0: 				throws StandardException
0: 	{
0: 		/* Get/set up the array of join strategies.
0: 		 * See comment in boot().  If joinStrategySet
0: 		 * is null, then we may do needless allocations
0: 		 * in a multi-user environment if multiple
0: 		 * users find it null on entry.  However, 
0: 		 * assignment of array is atomic, so system
0: 		 * will be consistent even in rare case
0: 		 * where users get different arrays.
0: 		 */
0: 		if (joinStrategySet == null)
0: 		{
0: 			JoinStrategy[] jss = new JoinStrategy[2];
0: 			jss[0] = new NestedLoopJoinStrategy();
0: 			jss[1] = new HashJoinStrategy();
0: 			joinStrategySet = jss;
0: 		}
0: 
0: 		return getOptimizerImpl(optimizableList,
0: 							predList,
0: 							dDictionary,
0: 							requiredRowOrdering,
0: 							numTablesInQuery,
0: 							lcc);
0: 	}
0: 
0: 	/**
0: 	 * @see OptimizerFactory#getCostEstimate
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public CostEstimate getCostEstimate()
0: 		throws StandardException
0: 	{
0: 		return new CostEstimateImpl();
0: 	}
0: 
0: 	/**
0: 	 * @see OptimizerFactory#supportsOptimizerTrace
0: 	 */
0: 	public boolean supportsOptimizerTrace()
0: 	{
0: 		return false;
0: 	}
0: 
0: 	//
0: 	// class interface
0: 	//
0: 	public OptimizerFactoryImpl() {
0: 	}
0: 
0: 	protected Optimizer getOptimizerImpl(OptimizableList optimizableList,
0: 								  OptimizablePredicateList predList,
0: 								  DataDictionary dDictionary,
0: 								  RequiredRowOrdering requiredRowOrdering,
0: 								  int numTablesInQuery,
0: 								  LanguageConnectionContext lcc)
0: 				throws StandardException
0: 	{
0: 
0: 		return new OptimizerImpl(
0: 							optimizableList,
0: 							predList,
0: 							dDictionary,
0: 							ruleBasedOptimization,
0: 							noTimeout,
0: 							useStatistics,
0: 							maxMemoryPerTable,
0: 							joinStrategySet,
0: 							lcc.getLockEscalationThreshold(),
0: 							requiredRowOrdering,
0: 							numTablesInQuery);
0: 	}
0: 
0: 	/**
0: 	 * @see OptimizerFactory#getMaxMemoryPerTable
0: 	 */
0: 	public int getMaxMemoryPerTable()
0: 	{
0: 		return maxMemoryPerTable;
0: 	}
0: }
0: 
============================================================================