1:858d841: /*
4:858d841: 
1:858d841:    Derby - Class org.apache.derbyTesting.functionTests.util.SecurityCheck
1:858d841: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:858d841: 
1:858d841:       http://www.apache.org/licenses/LICENSE-2.0
1:858d841: 
1:858d841:    Unless required by applicable law or agreed to in writing, software
1:858d841:    distributed under the License is distributed on an "AS IS" BASIS,
1:858d841:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:858d841:    See the License for the specific language governing permissions and
1:858d841:    limitations under the License.
1:858d841: 
1:858d841:  */
1:858d841: 
1:858d841: package org.apache.derbyTesting.functionTests.util;
1:858d841: 
1:858d841: import java.lang.reflect.Constructor;
1:858d841: import java.lang.reflect.Field;
1:858d841: import java.lang.reflect.Method;
1:858d841: import java.lang.reflect.Modifier;
1:3f5c48a: import java.util.Map;
1:858d841: import java.util.SortedMap;
1:858d841: import java.util.TreeMap;
1:858d841: 
1:b343735: import junit.framework.Assert;
1:b343735: 
1:858d841: 
1:858d841: /**
1:858d841:  * Code to aid in checking the Security of Derby.
1:858d841:  * This initial implementation only handles the emebdded code.
1:858d841:  * Future work could expand to the client driver and network server.
1:858d841:  */
1:858d841: public class SecurityCheck {
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * List of classes in the public api for the embedded engine.
1:858d841: 	 */
1:858d841: 	private static final String[] EMBEDDED_PUBLIC_API =
2:858d841: 	{
1:858d841: 		"org.apache.derby.jdbc.EmbeddedDriver",
1:858d841: 		"org.apache.derby.jdbc.EmbeddedDataSource",
1:858d841: 		"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource",
1:858d841: 		"org.apache.derby.jdbc.EmbeddedXADataSource",
1:858d841: 		"org.apache.derby.authentication.UserAuthenticator",
1:858d841: 	};
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * Is the passed in class part of the declared public api.
1:858d841: 	 * Currently only the emebdded public api
1:858d841: 	 * @param c class to be checked
1:858d841: 	 * @return true if the class is part of the public api, false otherwise.
1:858d841: 	 */
1:858d841: 	private static boolean isPublicApi(Class c)
1:858d841: 	{
1:858d841: 		for (int i = 0; i < EMBEDDED_PUBLIC_API.length; i++)
1:858d841: 		{
1:858d841: 			if (EMBEDDED_PUBLIC_API[i].equals(c.getName()))
1:858d841: 				return true;
3:858d841: 		}
1:858d841: 		return false;
1:df4020d: 	}
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * Map of all classes that have been inspected.
1:858d841: 	 * The key is the class name, if the value is null then
1:858d841: 	 * the class is being inspected. Otherwise the value is
1:858d841: 	 * a String description of the risks.
1:858d841: 	 */
1:3f5c48a: 	private static final SortedMap<String, String> allInspectedClasses =
1:3f5c48a:             new TreeMap<String, String>();
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * Perform security analysis of the public api for the embedded engine.
1:858d841: 	 * Prints a report to System.out on completion.
1:858d841: 	 * @throws ClassNotFoundException
1:858d841: 	 */
1:858d841: 	public static void checkEmbeddedPublicApi() throws ClassNotFoundException
1:858d841: 	{
1:858d841: 		System.out.println("SecurityCheck: embedded public api classes");
1:858d841: 		allInspectedClasses.clear();
1:858d841: 		for (int i = 0; i < EMBEDDED_PUBLIC_API.length; i++)
1:858d841: 			SecurityCheck.inspectClass(EMBEDDED_PUBLIC_API[i]);
1:858d841: 
1:858d841: 		SecurityCheck.report(true);
1:858d841: 	}
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * Produce a report on System.out of all inspected classes
1:858d841: 	 * that have risks associated with them.
1:858d841: 	 *
1:858d841: 	 */
1:858d841: 	public static void report()
1:858d841: 	{
1:858d841:         SecurityCheck.report(false);
1:858d841: 	}
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * Produce a report on System.out of all inspected classes
1:858d841: 	 * that have risks associated with them. If reportClear is
1:858d841: 	 * true then additionally all classes that have been inspected
1:858d841: 	 * will be returned.
1:858d841: 	 *
1:858d841: 	 */
1:858d841: 	private static void report(boolean reportClear)
1:858d841: 	{
1:858d841: 		synchronized (allInspectedClasses)
1:858d841: 		{
1:3f5c48a: 		for (Map.Entry<String, String> entry : allInspectedClasses.entrySet())
1:858d841: 		{
1:3f5c48a: 			String key = entry.getKey();
1:3f5c48a: 			String value = entry.getValue();
1:858d841: 			if (value == null)
1:858d841: 			{
1:858d841: 				if (reportClear)
1:858d841: 				    System.out.println("CLEAR: " + key);
1:858d841: 			}
1:858d841: 			else
1:858d841: 			{
1:858d841: 				System.out.print(value);
1:858d841: 			}
1:858d841: 		}
1:858d841: 		}
1:858d841: 	}
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * Inspect a class for security risks. No output is generated
1:858d841: 	 * by this call, the caller must call report() to obtain the risks.
2:858d841: 	 * @param className
1:858d841: 	 * @throws ClassNotFoundException
1:858d841: 	 */
1:858d841: 	public static void inspectClass(String className) throws ClassNotFoundException
1:858d841: 	{			
1:858d841: 		SecurityCheck.inspectClass(Class.forName(className), null);
1:858d841: 	}	
1:858d841: 	
1:858d841: 	/**
1:858d841: 	 * Inspect the class of the passed in Object for security risks.
1:858d841: 	 * This inspects, at this level only, the actual type of
1:858d841: 	 * the object, not the declared type. E.g. for DriverManager.getConnection
1:858d841: 	 * the declared type is java.sql.Connection which has no security risks,
1:858d841: 	 * but the implementation type returned may have many.
1:858d841: 	 * 
1:858d841: 	 * <code>
1:858d841: 	 * Connection conn = DriverManager.getConnection(url);
1:858d841: 	 * // will inspect the implementation call, eg. EmbedConnection30
1:858d841: 	 * SecurityManager.inspect(conn);
1:858d841: 	 * </code>
1:858d841: 	 * No output is generated by this call,
1:858d841: 	 * the caller must call report() to obtain the risks.
1:858d841: 	 * @param o Obejct to be inspected
1:858d841: 	 * @param declared the declared type of the object. 
1:858d841: 	 */
1:b343735:     public static void assertSourceSecurity(Object o, String declared)
1:b343735:     {
1:b343735:         Assert.assertNotNull(o);
1:b343735:         Assert.assertTrue(SecurityCheck.inspectClass(o.getClass(), declared));
1:b343735:     }
1:b343735:     
1:858d841: 	/**
1:858d841: 	 * Inspect a Derby class for security risks. This includes following potential
1:858d841: 	 * references exposed through the class.
1:858d841: 	 * <P>
1:858d841: 	 * Risks looked at:
1:858d841: 	 * <UL>
1:858d841: 	 * <LI> public constructors in non-public class - 
1:858d841: 	 * No justification for the constructor to be public.
1:858d841: 	 * <LI> public constructors in non-final class and non-sealed package -
1:858d841: 	 * Allows the class to be sub-classes through a injected class in
1:858d841: 	 * the same package.
1:858d841: 	 * <LI> public non-final field - Allows any one with a handle to
1:858d841: 	 * the object to change the field.
1:858d841:      * </UL>
1:858d841: 	 * <P>
1:858d841: 	 * The type of any public field or return type of any public method
1:858d841: 	 * is also inspected. The assumption is that if such a field or method
1:858d841: 	 * exists they have the potential to be called and return a valid object.
1:858d841: 	 * <P>
1:858d841: 	 * Note that this inspection is through the declared type of exposed
1:858d841: 	 * references, not the actual runtime type. The actual runtime type
1:858d841: 	 * might expose other classes that should be inspected.
1:df4020d: 	 * @param c the class to inspect
1:858d841: 	 * @throws ClassNotFoundException
1:858d841: 	 */
1:858d841: 	private static boolean inspectClass(Class c, String declared)
1:858d841: 	{		
1:858d841: 		if (!c.getName().startsWith("org.apache.derby."))
1:858d841: 			return false;
1:858d841: 		
1:858d841: 		// Initial focus on embedded engine
1:858d841: 		if (c.getName().startsWith("org.apache.derby.client."))
1:858d841: 			return false;
1:858d841: 		
1:858d841: 		synchronized (allInspectedClasses)
1:858d841: 		{
1:858d841: 		if (allInspectedClasses.containsKey(c.getName()))
1:858d841: 			return true;
1:858d841: 		
1:858d841: 		allInspectedClasses.put(c.getName(), null);
1:858d841: 				
1:858d841: 		StringBuffer sb = new StringBuffer();
1:858d841: 		
1:858d841: 		sb.append("Class ");
1:858d841: 		sb.append(c.getName());
1:858d841: 		sb.append('\n');
1:858d841: 		
1:858d841: 		if (declared != null)
1:858d841: 		{
1:858d841: 			allInspectedClasses.put(declared, "Checked class declared as: " + declared + "\n");
1:858d841: 			
1:858d841: 		}
1:858d841: 
1:858d841: 		boolean isPublicApi = SecurityCheck.isPublicApi(c);
1:858d841: 	
1:858d841: 		boolean hasIssues = false;
1:858d841: 		
1:858d841: 		boolean isSealed = c.getPackage().isSealed();
1:858d841: 		boolean isFinal = Modifier.isFinal(c.getModifiers());
1:858d841: 		boolean isPublic = Modifier.isPublic(c.getModifiers());
1:858d841: 		boolean isAbstract = Modifier.isAbstract(c.getModifiers());
1:858d841: 		
1:858d841: 		Constructor[] constructors = c.getConstructors();
1:858d841: 		
1:858d841: 		boolean hasPublicConstructor = constructors.length != 0;
1:858d841: 		
1:858d841: 		if (hasPublicConstructor && !isPublic)
1:858d841: 		{
1:858d841: 			hasIssues = true;
1:858d841: 			
1:858d841: 			// No reason for a public constructor in a non-public class
1:858d841: 			sb.append("..public constructors in non-public class\n");
1:858d841: 			
1:858d841: 			// class can be sub-classed even though it is not public
1:858d841: 			if (!isFinal && !isSealed)
1:858d841: 				sb.append("..public constructors in non-final class and non-sealed package\n");
1:858d841: 		}
1:858d841: 		
1:858d841: 		if (hasPublicConstructor && isPublic)
1:858d841: 		{
1:858d841: 			// TODO: Need to work on these checks.
1:858d841: 			if (!isPublicApi)
1:858d841: 			{
1:858d841: 			    //hasIssues = true;
1:858d841: 			
1:858d841: 			    // anyone can create instances of this class
1:858d841: 			    //sb.append("..public constructors in public class\n");
1:858d841: 			}
1:858d841: 
1:858d841: 			// and anyone can sub-class this class
1:858d841: 			if (!isFinal)
1:858d841: 			{
1:858d841: 				//hasIssues = true;
1:858d841: 				//sb.append("..public constructors in public non-final class\n");
1:858d841: 			}
1:858d841: 		}
1:858d841: 		
1:858d841: 		for (int i = 0; i < constructors.length; i++)
1:858d841: 		{
1:858d841: 			if (hasIssues)
1:858d841: 			{
1:858d841: 				sb.append("..public constructor: ");
1:858d841: 				sb.append(constructors[i].toString());
1:858d841: 				sb.append('\n');
1:858d841: 			}
1:858d841: 		}
1:858d841: 		
1:858d841: 		Field[] fields = c.getFields();
1:858d841: 		for (int i = 0; i < fields.length; i++)
1:858d841: 		{
1:858d841: 			Field f = fields[i];
1:858d841: 			boolean isStatic = Modifier.isStatic(f.getModifiers());
1:858d841: 						
1:858d841: 			Class fieldType = f.getType();
1:858d841: 			SecurityCheck.inspectClass(fieldType, null);
1:858d841: 			
1:858d841: 			if (Modifier.isFinal(f.getModifiers()))
1:858d841: 			{
1:858d841: 				// TODO: Should this be a concern if non-static?
1:858d841: 				continue;
1:858d841: 			}
1:858d841: 			
1:858d841: 			hasIssues = true;
1:858d841: 			sb.append("..public non-final field: ");
1:858d841: 			sb.append(f.toString());
1:858d841: 			sb.append('\n');
1:858d841: 		}
1:858d841: 
1:858d841: 		Method[] methods = c.getMethods();
1:858d841: 		for (int i = 0; i < methods.length; i++)
1:858d841: 		{
1:858d841: 			Method m = methods[i];
1:858d841: 						
1:858d841: 			Class methodType = m.getReturnType();
1:858d841: 			if (SecurityCheck.inspectClass(methodType, null))
1:858d841: 			{
1:858d841: 				// method returns a class of interest to us.
1:858d841: 				
1:858d841: 				// just a method returning a public api
1:858d841: 				if (SecurityCheck.isPublicApi(methodType))
1:858d841: 					continue;
1:858d841: 				
1:858d841: 				/*
1:858d841: 				 * Not sure this is a vaild risk.
1:858d841: 				hasIssues = true;
1:858d841: 				sb.append("..public method returning non-public api class: ");
1:858d841: 				sb.append(m.toString());
1:858d841: 				sb.append("\n");
1:858d841: 				*/
1:858d841: 			}
1:858d841: 			
1:858d841: 		}		
1:858d841: 		if (hasIssues)
1:858d841: 			allInspectedClasses.put(c.getName(), sb.toString());
1:858d841: 		}
1:858d841: 		
1:858d841: 		return true;
1:858d841: 		
1:858d841: 	}
1:858d841: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2e4b1b1
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3f5c48a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 	private static final SortedMap<String, String> allInspectedClasses =
1:             new TreeMap<String, String>();
/////////////////////////////////////////////////////////////////////////
1: 		for (Map.Entry<String, String> entry : allInspectedClasses.entrySet())
1: 			String key = entry.getKey();
1: 			String value = entry.getValue();
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:1b4dc97
/////////////////////////////////////////////////////////////////////////
commit:b343735
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Assert;
1: 
/////////////////////////////////////////////////////////////////////////
0:     // temporary add a method - this will eventually replace inspect
0:     // method above
1:     public static void assertSourceSecurity(Object o, String declared)
1:     {
1:         Assert.assertNotNull(o);
1:         Assert.assertTrue(SecurityCheck.inspectClass(o.getClass(), declared));
1:     }
1:     
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
1: 	 * @param c the class to inspect
/////////////////////////////////////////////////////////////////////////
1: }
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:858d841
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.util.SecurityCheck
1: 
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Modifier;
0: import java.util.Iterator;
1: import java.util.SortedMap;
1: import java.util.TreeMap;
1: 
1: 
1: /**
1:  * Code to aid in checking the Security of Derby.
1:  * This initial implementation only handles the emebdded code.
1:  * Future work could expand to the client driver and network server.
1:  */
1: public class SecurityCheck {
1: 	
1: 	/**
1: 	 * List of classes in the public api for the embedded engine.
1: 	 */
1: 	private static final String[] EMBEDDED_PUBLIC_API =
1: 	{
1: 		"org.apache.derby.jdbc.EmbeddedDriver",
1: 		"org.apache.derby.jdbc.EmbeddedDataSource",
0: 		"org.apache.derby.jdbc.EmbeddedSimpleDataSource",
1: 		"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource",
1: 		"org.apache.derby.jdbc.EmbeddedXADataSource",
1: 		"org.apache.derby.authentication.UserAuthenticator",
1: 	};
1: 	
1: 	/**
1: 	 * Is the passed in class part of the declared public api.
1: 	 * Currently only the emebdded public api
1: 	 * @param c class to be checked
1: 	 * @return true if the class is part of the public api, false otherwise.
1: 	 */
1: 	private static boolean isPublicApi(Class c)
1: 	{
1: 		for (int i = 0; i < EMBEDDED_PUBLIC_API.length; i++)
1: 		{
1: 			if (EMBEDDED_PUBLIC_API[i].equals(c.getName()))
1: 				return true;
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	/**
1: 	 * Map of all classes that have been inspected.
1: 	 * The key is the class name, if the value is null then
1: 	 * the class is being inspected. Otherwise the value is
1: 	 * a String description of the risks.
1: 	 */
0: 	private static final SortedMap allInspectedClasses = new TreeMap();
1: 	
1: 	/**
1: 	 * Perform security analysis of the public api for the embedded engine.
1: 	 * Prints a report to System.out on completion.
1: 	 * @throws ClassNotFoundException
1: 	 */
1: 	public static void checkEmbeddedPublicApi() throws ClassNotFoundException
1: 	{
1: 		System.out.println("SecurityCheck: embedded public api classes");
1: 		allInspectedClasses.clear();
1: 		for (int i = 0; i < EMBEDDED_PUBLIC_API.length; i++)
1: 			SecurityCheck.inspectClass(EMBEDDED_PUBLIC_API[i]);
1: 
1: 		SecurityCheck.report(true);
1: 	}
1: 	
1: 	/**
1: 	 * Produce a report on System.out of all inspected classes
1: 	 * that have risks associated with them.
1: 	 *
1: 	 */
1: 	public static void report()
1: 	{
1:         SecurityCheck.report(false);
1: 	}
1: 	
1: 	/**
1: 	 * Produce a report on System.out of all inspected classes
1: 	 * that have risks associated with them. If reportClear is
1: 	 * true then additionally all classes that have been inspected
1: 	 * will be returned.
1: 	 *
1: 	 */
1: 	private static void report(boolean reportClear)
1: 	{
1: 		synchronized (allInspectedClasses)
1: 		{
0: 		for (Iterator it = allInspectedClasses.keySet().iterator(); it.hasNext(); )
1: 		{
0: 			Object key = it.next();
0: 			Object value = allInspectedClasses.get(key);
1: 			if (value == null)
1: 			{
1: 				if (reportClear)
1: 				    System.out.println("CLEAR: " + key);
1: 			}
1: 			else
1: 			{
1: 				System.out.print(value);
1: 			}
1: 		}
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Inspect a class for security risks. No output is generated
1: 	 * by this call, the caller must call report() to obtain the risks.
1: 	 * @param className
1: 	 * @throws ClassNotFoundException
1: 	 */
1: 	public static void inspectClass(String className) throws ClassNotFoundException
1: 	{			
1: 		SecurityCheck.inspectClass(Class.forName(className), null);
1: 	}	
1: 	
1: 	/**
1: 	 * Inspect the class of the passed in Object for security risks.
1: 	 * This inspects, at this level only, the actual type of
1: 	 * the object, not the declared type. E.g. for DriverManager.getConnection
1: 	 * the declared type is java.sql.Connection which has no security risks,
1: 	 * but the implementation type returned may have many.
1: 	 * 
1: 	 * <code>
1: 	 * Connection conn = DriverManager.getConnection(url);
1: 	 * // will inspect the implementation call, eg. EmbedConnection30
1: 	 * SecurityManager.inspect(conn);
1: 	 * </code>
1: 	 * No output is generated by this call,
1: 	 * the caller must call report() to obtain the risks.
1: 	 * @param o Obejct to be inspected
1: 	 * @param declared the declared type of the object. 
1: 	 */
0: 	public static void inspect(Object o, String declared)
1: 	{
0: 		if (o == null)
0: 			return;
1: 				
0: 		SecurityCheck.inspectClass(o.getClass(), declared);
1: 	}
1: 	
1: 	/**
1: 	 * Inspect a Derby class for security risks. This includes following potential
1: 	 * references exposed through the class.
1: 	 * <P>
1: 	 * Risks looked at:
1: 	 * <UL>
1: 	 * <LI> public constructors in non-public class - 
1: 	 * No justification for the constructor to be public.
1: 	 * <LI> public constructors in non-final class and non-sealed package -
1: 	 * Allows the class to be sub-classes through a injected class in
1: 	 * the same package.
1: 	 * <LI> public non-final field - Allows any one with a handle to
1: 	 * the object to change the field.
1:      * </UL>
1: 	 * <P>
1: 	 * The type of any public field or return type of any public method
1: 	 * is also inspected. The assumption is that if such a field or method
1: 	 * exists they have the potential to be called and return a valid object.
1: 	 * <P>
1: 	 * Note that this inspection is through the declared type of exposed
1: 	 * references, not the actual runtime type. The actual runtime type
1: 	 * might expose other classes that should be inspected.
1: 	 * @param className
1: 	 * @throws ClassNotFoundException
1: 	 */
1: 	private static boolean inspectClass(Class c, String declared)
1: 	{		
1: 		if (!c.getName().startsWith("org.apache.derby."))
1: 			return false;
1: 		
1: 		// Initial focus on embedded engine
1: 		if (c.getName().startsWith("org.apache.derby.client."))
1: 			return false;
1: 		
1: 		synchronized (allInspectedClasses)
1: 		{
1: 		if (allInspectedClasses.containsKey(c.getName()))
1: 			return true;
1: 		
1: 		allInspectedClasses.put(c.getName(), null);
1: 				
1: 		StringBuffer sb = new StringBuffer();
1: 		
1: 		sb.append("Class ");
1: 		sb.append(c.getName());
1: 		sb.append('\n');
1: 		
1: 		if (declared != null)
1: 		{
1: 			allInspectedClasses.put(declared, "Checked class declared as: " + declared + "\n");
1: 			
1: 		}
1: 
1: 		boolean isPublicApi = SecurityCheck.isPublicApi(c);
1: 	
1: 		boolean hasIssues = false;
1: 		
1: 		boolean isSealed = c.getPackage().isSealed();
1: 		boolean isFinal = Modifier.isFinal(c.getModifiers());
1: 		boolean isPublic = Modifier.isPublic(c.getModifiers());
1: 		boolean isAbstract = Modifier.isAbstract(c.getModifiers());
1: 		
1: 		Constructor[] constructors = c.getConstructors();
1: 		
1: 		boolean hasPublicConstructor = constructors.length != 0;
1: 		
1: 		if (hasPublicConstructor && !isPublic)
1: 		{
1: 			hasIssues = true;
1: 			
1: 			// No reason for a public constructor in a non-public class
1: 			sb.append("..public constructors in non-public class\n");
1: 			
1: 			// class can be sub-classed even though it is not public
1: 			if (!isFinal && !isSealed)
1: 				sb.append("..public constructors in non-final class and non-sealed package\n");
1: 		}
1: 		
1: 		if (hasPublicConstructor && isPublic)
1: 		{
1: 			// TODO: Need to work on these checks.
1: 			if (!isPublicApi)
1: 			{
1: 			    //hasIssues = true;
1: 			
1: 			    // anyone can create instances of this class
1: 			    //sb.append("..public constructors in public class\n");
1: 			}
1: 
1: 			// and anyone can sub-class this class
1: 			if (!isFinal)
1: 			{
1: 				//hasIssues = true;
1: 				//sb.append("..public constructors in public non-final class\n");
1: 			}
1: 		}
1: 		
1: 		for (int i = 0; i < constructors.length; i++)
1: 		{
1: 			if (hasIssues)
1: 			{
1: 				sb.append("..public constructor: ");
1: 				sb.append(constructors[i].toString());
1: 				sb.append('\n');
1: 			}
1: 		}
1: 		
1: 		Field[] fields = c.getFields();
1: 		for (int i = 0; i < fields.length; i++)
1: 		{
1: 			Field f = fields[i];
1: 			boolean isStatic = Modifier.isStatic(f.getModifiers());
1: 						
1: 			Class fieldType = f.getType();
1: 			SecurityCheck.inspectClass(fieldType, null);
1: 			
1: 			if (Modifier.isFinal(f.getModifiers()))
1: 			{
1: 				// TODO: Should this be a concern if non-static?
1: 				continue;
1: 			}
1: 			
1: 			hasIssues = true;
1: 			sb.append("..public non-final field: ");
1: 			sb.append(f.toString());
1: 			sb.append('\n');
1: 		}
1: 
1: 		Method[] methods = c.getMethods();
1: 		for (int i = 0; i < methods.length; i++)
1: 		{
1: 			Method m = methods[i];
1: 						
1: 			Class methodType = m.getReturnType();
1: 			if (SecurityCheck.inspectClass(methodType, null))
1: 			{
1: 				// method returns a class of interest to us.
1: 				
1: 				// just a method returning a public api
1: 				if (SecurityCheck.isPublicApi(methodType))
1: 					continue;
1: 				
1: 				/*
1: 				 * Not sure this is a vaild risk.
1: 				hasIssues = true;
1: 				sb.append("..public method returning non-public api class: ");
1: 				sb.append(m.toString());
1: 				sb.append("\n");
1: 				*/
1: 			}
1: 			
1: 		}		
1: 		if (hasIssues)
1: 			allInspectedClasses.put(c.getName(), sb.toString());
1: 		}
1: 		
1: 		return true;
1: 		
1: 	}
1: }
============================================================================