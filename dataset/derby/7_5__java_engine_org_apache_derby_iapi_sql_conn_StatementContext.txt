1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.conn.StatementContext
1:7ecc1f2: 
1:75588ca:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75588ca:    contributor license agreements.  See the NOTICE file distributed with
1:75588ca:    this work for additional information regarding copyright ownership.
1:75588ca:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75588ca:    (the "License"); you may not use this file except in compliance with
1:75588ca:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
4:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.conn;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.context.Context;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: import org.apache.derby.iapi.sql.ParameterValueSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.depend.Dependency;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * StatementContext keeps the context for a statement.
1:eac0369:  */
1:eac0369: public interface StatementContext extends Context {
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Mark this context as being in use.
1:eac0369: 	 *
1:3fcea8a: 	 *	@param inTrigger true if the parent started in the context of a trigger
1:eac0369: 	 *	@param	isAtomic true if the statement must be executed
1:eac0369: 	 *		atomically
1:5087be8: 	 *      @param isForReadOnly true if the statement is for producing non-updatable
1:5087be8: 	 *                           resultset
1:eac0369: 	 *  @param stmtText the text of the statement.  Needed for any language
1:eac0369: 	 * 	statement (currently, for any statement that can cause a trigger
1:eac0369: 	 * 	to fire).  Please set this unless you are some funky jdbc setXXX
1:eac0369: 	 *	method or something.
1:eac0369: 	 *	@param	pvs	parameter value set, if it has one
1:3fcea8a:      *  @param timeoutMillis timeout value for the statement, in milliseconds.
1:3fcea8a:      *   Zero means no timeout.
1:eac0369: 	 */
1:5087be8:     public void setInUse(boolean inTrigger, boolean isAtomic, boolean isForReadOnly,
1:5087be8: 			 String stmtText, ParameterValueSet pvs, long timeoutMillis);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Mark this context as not in use.  This is important because we
1:eac0369: 	 * always leave the top statement context on the stack, and we don't
1:eac0369: 	 * want to clean it up if a statement level exception happens while the
1:eac0369: 	 * context is not in use.
1:eac0369: 	 */
1:eac0369: 	public void clearInUse();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set a save point for the current statement.
1:eac0369: 	 * NOTE: This needs to be off of the StatementContext so that it gets
1:eac0369: 	 * cleared on a statement error.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setSavePoint() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If this statement context has a savepoint, then
1:eac0369: 	 * it is reset to the current point.  Otherwise, it
1:eac0369: 	 * is a noop.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void resetSavePoint() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Clear the save point for the current statement.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void clearSavePoint() throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the top ResultSet in the ResultSet tree for close down on
1:eac0369: 	 * an error.
1:eac0369: 	 *
1:eac0369: 	 * @param topResultSet			The top ResultSet in the ResultSet tree
1:eac0369: 	 * @param subqueryTrackingArray	(Sparse) of tops of subquery ResultSet trees
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setTopResultSet(ResultSet topResultSet,
1:eac0369: 								NoPutResultSet[] subqueryTrackingArray)
1:eac0369: 		 throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the appropriate entry in the subquery tracking array for
1:eac0369: 	 * the specified subquery.
1:eac0369: 	 * Useful for closing down open subqueries on an exception.
1:eac0369: 	 *
1:eac0369: 	 * @param subqueryNumber	The subquery # for this subquery
1:eac0369: 	 * @param subqueryResultSet	The NoPutResultSet at the top of the subquery
1:eac0369: 	 * @param numSubqueries		The total # of subqueries in the entire query
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void setSubqueryResultSet(int subqueryNumber,
1:eac0369: 									 NoPutResultSet subqueryResultSet,
1:eac0369: 									 int numSubqueries)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the subquery tracking array for this query.
1:eac0369: 	 * (Useful for runtime statistics.)
1:eac0369: 	 *
1:eac0369: 	 * @return NoPutResultSet[]	The	(sparse) array of tops of subquery ResultSet trees
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public NoPutResultSet[] getSubqueryTrackingArray()
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Track a Dependency within this StatementContext.
1:eac0369: 	 * (We need to clear any dependencies added within this
1:eac0369: 	 * context on an error.
1:eac0369: 	 *
1:eac0369: 	 * @param dy	The dependency to track.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException Thrown on error
1:eac0369: 	 */
1:eac0369: 	public void addDependency(Dependency dy)
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  *	Reports whether this StatementContext is on the context stack.
1:eac0369: 	  *
1:eac0369: 	  *	@return	true if this StatementContext is on the context stack. false otherwise.
1:eac0369: 	  */
1:eac0369: 	public	boolean	onStack();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns whether we started from within the context of a trigger
1:eac0369: 	 * or not.
1:eac0369: 	 *
1:eac0369: 	 * @return	true if we are in a trigger context
1:eac0369: 	 */
1:eac0369: 	public	boolean	inTrigger();
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Indicates whether the statement needs to be executed atomically
1:eac0369: 	 * or not, i.e., whether a commit/rollback is permitted by a
1:eac0369:  	 * connection nested in this statement.
1:eac0369: 	 *
1:eac0369: 	 * @return true if needs to be atomic
1:eac0369: 	 */
1:eac0369: 	public boolean isAtomic();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Is this statement context in use or not.
1:eac0369: 	 *
1:eac0369: 	 * @return true if in use
1:eac0369: 	 */
1:eac0369: 	public boolean inUse();
1:5087be8: 
1:5087be8:     /**
1:5087be8:      * Is this statement for a read only, non-updatable ResultSet
1:5087be8:      * @return true if the statement is for creating a 
1:5087be8:      *         read only, non-updatable ResultSet
1:5087be8:      */
1:5087be8:     public boolean isForReadOnly();
1:5087be8:     
1:eac0369: 	
1:3fcea8a:     /**
1:3fcea8a:      * Checks if the statement which has allocated this statement context
1:3fcea8a:      * should cancel its execution.
1:3fcea8a:      *
1:3fcea8a:      * @return true if the statement execution should be cancelled.
1:3fcea8a:      **/
1:3fcea8a:     public boolean isCancelled();
1:3fcea8a: 
1:3fcea8a:     /**
1:3fcea8a:      * Indicate that the statement which has allocated this statement
1:3fcea8a:      * context should cancel its execution.
1:3fcea8a:      * Usually called as a consequence of Statement.cancel() or a query timeout
1:3fcea8a:      * set with Statement.setQueryTimeout().
1:3fcea8a:      */
1:3fcea8a:     public void cancel();
1:3fcea8a: 
1:eac0369: 	/**
1:eac0369: 	 * Return the text of the current statement.
1:eac0369: 	 * Note that this may be null.  It is currently
1:eac0369: 	 * not set up correctly for ResultSets that aren't
1:eac0369: 	 * single row result sets (e.g SELECT)
1:eac0369: 	 * and setXXXX/getXXXX jdbc methods.
1:eac0369: 	 *
1:eac0369: 	 * @return the statement text
1:eac0369: 	 */
1:eac0369: 	public String getStatementText();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set the level of SQL allowed in this and subsequent
1:eac0369: 		nested statements due to a routine call. Value must be one of
1:eac0369: 		RoutineAliasInfo.{MODIFIES_SQL_DATA, READS_SQL_DATA, CONTAINS_SQL, NO_SQL}
1:eac0369: 
1:eac0369: 		@param force set to true to override more restrictive setting. Used to
1:eac0369: 		reset the permissions after a function call.
1:eac0369: 
1:eac0369: 	*/
1:eac0369: 	public void setSQLAllowed(short allow, boolean force);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the setting of the SQL allowed state.
1:eac0369: 	*/
1:eac0369: 	public short getSQLAllowed();
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Set to indicate statement is system code.
1:eac0369: 		For example a system procedure, view, function etc.
1:eac0369: 	*/
1:eac0369: 	public void setSystemCode();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Return true if this statement is system code.
1:eac0369: 	*/
1:eac0369: 	public boolean getSystemCode();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Indicate that, in the event of a statement-level exception,
1:eac0369: 		this context is NOT the last one that needs to be rolled
1:eac0369: 		back--rather, it is nested within some other statement
1:eac0369: 		context, and that other context needs to be rolled back,
1:eac0369: 		too.
1:eac0369: 	*/
1:eac0369: 	public void setParentRollback();
1:eac0369: 
1:6950a39: 	/**
1:6950a39:      * Mark this statement context as associated with this activation.
1:6950a39: 	 *
1:6950a39: 	 * @param a activation
1:6950a39:      */
1:6950a39: 	public void setActivation(Activation a);
1:6950a39: 
1:6950a39: 	/**
1:6950a39:      * Get activation associated with this statement context, if any.
1:6950a39: 	 * Used to link up stack of activations of calls in nested
1:6950a39: 	 * connections, see GenericPreparedStatement#getActivation.
1:6950a39:      */
1:6950a39: 	public Activation getActivation();
1:6950a39: 
1:6950a39: 
1:6950a39: 	/**
1:0c5bc3a:      * Get the current SQL session context.
1:0c5bc3a:      * @return the current SQL session context
1:6950a39: 	 */
1:6950a39: 	public SQLSessionContext getSQLSessionContext();
1:6950a39: 
1:6950a39: 	/**
1:6950a39: 	 * Set the current SQL session context
1:6950a39: 	 *
1:6950a39: 	 * @param ctx the SQL session context
1:6950a39: 	 */
1:6950a39: 	public void setSQLSessionContext(SQLSessionContext ctx);
1:6950a39: 
1:b4885a6:     /**
1:b4885a6:      * Tells if this statement has been invalidated.
1:b4885a6:      *
1:b4885a6:      * @return {@code true} if the statement was invalidated.
1:b4885a6:      */
1:b4885a6:     public boolean getStatementWasInvalidated();
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1:      * Get the current SQL session context.
1:      * @return the current SQL session context
commit:6950a39
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.sql.conn.SQLSessionContext;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1:      * Mark this statement context as associated with this activation.
1: 	 *
1: 	 * @param a activation
1:      */
1: 	public void setActivation(Activation a);
1: 
1: 	/**
1:      * Get activation associated with this statement context, if any.
1: 	 * Used to link up stack of activations of calls in nested
1: 	 * connections, see GenericPreparedStatement#getActivation.
1:      */
1: 	public Activation getActivation();
1: 
1: 
1: 	/**
0: 	 * Get the current SQL session context
1: 	 */
1: 	public SQLSessionContext getSQLSessionContext();
1: 
1: 	/**
1: 	 * Set the current SQL session context
1: 	 *
1: 	 * @param ctx the SQL session context
1: 	 */
1: 	public void setSQLSessionContext(SQLSessionContext ctx);
1: 
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b4885a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tells if this statement has been invalidated.
1:      *
1:      * @return {@code true} if the statement was invalidated.
1:      */
1:     public boolean getStatementWasInvalidated();
author:David Van Couvering
-------------------------------------------------------------------------------
commit:75588ca
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:5087be8
/////////////////////////////////////////////////////////////////////////
1: 	 *      @param isForReadOnly true if the statement is for producing non-updatable
1: 	 *                           resultset
/////////////////////////////////////////////////////////////////////////
1:     public void setInUse(boolean inTrigger, boolean isAtomic, boolean isForReadOnly,
1: 			 String stmtText, ParameterValueSet pvs, long timeoutMillis);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Is this statement for a read only, non-updatable ResultSet
1:      * @return true if the statement is for creating a 
1:      *         read only, non-updatable ResultSet
1:      */
1:     public boolean isForReadOnly();
1:     
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3fcea8a
/////////////////////////////////////////////////////////////////////////
1: 	 *	@param inTrigger true if the parent started in the context of a trigger
/////////////////////////////////////////////////////////////////////////
1:      *  @param timeoutMillis timeout value for the statement, in milliseconds.
1:      *   Zero means no timeout.
0:     public void setInUse(boolean inTrigger, boolean isAtomic, String stmtText,
0:                          ParameterValueSet pvs, long timeoutMillis);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Checks if the statement which has allocated this statement context
1:      * should cancel its execution.
1:      *
1:      * @return true if the statement execution should be cancelled.
1:      **/
1:     public boolean isCancelled();
1: 
1:     /**
1:      * Indicate that the statement which has allocated this statement
1:      * context should cancel its execution.
1:      * Usually called as a consequence of Statement.cancel() or a query timeout
1:      * set with Statement.setQueryTimeout().
1:      */
1:     public void cancel();
1: 
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.conn.StatementContext
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.conn
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.conn;
1: 
1: import org.apache.derby.iapi.services.context.Context;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.PreparedStatement;
1: import org.apache.derby.iapi.sql.ResultSet;
1: import org.apache.derby.iapi.sql.ParameterValueSet;
1: 
1: import org.apache.derby.iapi.sql.depend.Dependency;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.sql.LanguageFactory;
1: 
1: /**
1:  * StatementContext keeps the context for a statement.
1:  */
1: public interface StatementContext extends Context {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	/**
1: 	 * Mark this context as being in use.
1: 	 *
0: 	 *	@param	parentInTrigger	true if the parent started in the context of a trigger
1: 	 *	@param	isAtomic true if the statement must be executed
1: 	 *		atomically
1: 	 *  @param stmtText the text of the statement.  Needed for any language
1: 	 * 	statement (currently, for any statement that can cause a trigger
1: 	 * 	to fire).  Please set this unless you are some funky jdbc setXXX
1: 	 *	method or something.
1: 	 *	@param	pvs	parameter value set, if it has one
1: 	 */
0: 	public void setInUse(boolean inTrigger, boolean isAtomic, String stmtText, ParameterValueSet pvs);
1: 
1: 	/**
1: 	 * Mark this context as not in use.  This is important because we
1: 	 * always leave the top statement context on the stack, and we don't
1: 	 * want to clean it up if a statement level exception happens while the
1: 	 * context is not in use.
1: 	 */
1: 	public void clearInUse();
1: 
1: 	/**
1: 	 * Set a save point for the current statement.
1: 	 * NOTE: This needs to be off of the StatementContext so that it gets
1: 	 * cleared on a statement error.
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public void setSavePoint() throws StandardException;
1: 
1: 	/**
1: 	 * If this statement context has a savepoint, then
1: 	 * it is reset to the current point.  Otherwise, it
1: 	 * is a noop.
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public void resetSavePoint() throws StandardException;
1: 
1: 	/**
1: 	 * Clear the save point for the current statement.
1: 	 *
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public void clearSavePoint() throws StandardException;
1: 
1: 	/**
1: 	 * Set the top ResultSet in the ResultSet tree for close down on
1: 	 * an error.
1: 	 *
1: 	 * @param topResultSet			The top ResultSet in the ResultSet tree
1: 	 * @param subqueryTrackingArray	(Sparse) of tops of subquery ResultSet trees
1: 	 *
1: 	 * @exception StandardException Thrown on error
0: 	 * @return Nothing.
1: 	 */
1: 	public void setTopResultSet(ResultSet topResultSet,
1: 								NoPutResultSet[] subqueryTrackingArray)
1: 		 throws StandardException;
1: 
1: 	/**
1: 	 * Set the appropriate entry in the subquery tracking array for
1: 	 * the specified subquery.
1: 	 * Useful for closing down open subqueries on an exception.
1: 	 *
1: 	 * @param subqueryNumber	The subquery # for this subquery
1: 	 * @param subqueryResultSet	The NoPutResultSet at the top of the subquery
1: 	 * @param numSubqueries		The total # of subqueries in the entire query
1: 	 *
0: 	 * @return Nothing.
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public void setSubqueryResultSet(int subqueryNumber,
1: 									 NoPutResultSet subqueryResultSet,
1: 									 int numSubqueries)
1: 		throws StandardException;
1: 
1: 	/**
1: 	 * Get the subquery tracking array for this query.
1: 	 * (Useful for runtime statistics.)
1: 	 *
1: 	 * @return NoPutResultSet[]	The	(sparse) array of tops of subquery ResultSet trees
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public NoPutResultSet[] getSubqueryTrackingArray()
1: 		throws StandardException;
1: 
1: 
1: 	/**
1: 	 * Track a Dependency within this StatementContext.
1: 	 * (We need to clear any dependencies added within this
1: 	 * context on an error.
1: 	 *
1: 	 * @param dy	The dependency to track.
1: 	 *
0: 	 * @return Nothing.
1: 	 * @exception StandardException Thrown on error
1: 	 */
1: 	public void addDependency(Dependency dy)
1: 		throws StandardException;
1: 
1: 	/**
1: 	  *	Reports whether this StatementContext is on the context stack.
1: 	  *
1: 	  *	@return	true if this StatementContext is on the context stack. false otherwise.
1: 	  */
1: 	public	boolean	onStack();
1: 
1: 	/**
1: 	 * Returns whether we started from within the context of a trigger
1: 	 * or not.
1: 	 *
1: 	 * @return	true if we are in a trigger context
1: 	 */
1: 	public	boolean	inTrigger();
1: 	
1: 	/**
1: 	 * Indicates whether the statement needs to be executed atomically
1: 	 * or not, i.e., whether a commit/rollback is permitted by a
1:  	 * connection nested in this statement.
1: 	 *
1: 	 * @return true if needs to be atomic
1: 	 */
1: 	public boolean isAtomic();
1: 
1: 	/**
1: 	 * Is this statement context in use or not.
1: 	 *
1: 	 * @return true if in use
1: 	 */
1: 	public boolean inUse();
1: 	
1: 	/**
1: 	 * Return the text of the current statement.
1: 	 * Note that this may be null.  It is currently
1: 	 * not set up correctly for ResultSets that aren't
1: 	 * single row result sets (e.g SELECT)
1: 	 * and setXXXX/getXXXX jdbc methods.
1: 	 *
1: 	 * @return the statement text
1: 	 */
1: 	public String getStatementText();
1: 
1: 	/**
1: 		Set the level of SQL allowed in this and subsequent
1: 		nested statements due to a routine call. Value must be one of
1: 		RoutineAliasInfo.{MODIFIES_SQL_DATA, READS_SQL_DATA, CONTAINS_SQL, NO_SQL}
1: 
1: 		@param force set to true to override more restrictive setting. Used to
1: 		reset the permissions after a function call.
1: 
1: 	*/
1: 	public void setSQLAllowed(short allow, boolean force);
1: 
1: 	/**
1: 		Get the setting of the SQL allowed state.
1: 	*/
1: 	public short getSQLAllowed();
1: 
1: 
1: 	/**
1: 		Set to indicate statement is system code.
1: 		For example a system procedure, view, function etc.
1: 	*/
1: 	public void setSystemCode();
1: 
1: 	/**
1: 		Return true if this statement is system code.
1: 	*/
1: 	public boolean getSystemCode();
1: 
1: 	/**
1: 		Indicate that, in the event of a statement-level exception,
1: 		this context is NOT the last one that needs to be rolled
1: 		back--rather, it is nested within some other statement
1: 		context, and that other context needs to be rolled back,
1: 		too.
1: 	*/
1: 	public void setParentRollback();
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.conn
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.conn;
0: 
0: import org.apache.derby.iapi.services.context.Context;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.PreparedStatement;
0: import org.apache.derby.iapi.sql.ResultSet;
0: import org.apache.derby.iapi.sql.ParameterValueSet;
0: 
0: import org.apache.derby.iapi.sql.depend.Dependency;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.sql.LanguageFactory;
0: 
0: /**
0:  * StatementContext keeps the context for a statement.
0:  */
0: public interface StatementContext extends Context {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	/**
0: 	 * Mark this context as being in use.
0: 	 *
0: 	 *	@param	parentInTrigger	true if the parent started in the context of a trigger
0: 	 *	@param	isAtomic true if the statement must be executed
0: 	 *		atomically
0: 	 *  @param stmtText the text of the statement.  Needed for any language
0: 	 * 	statement (currently, for any statement that can cause a trigger
0: 	 * 	to fire).  Please set this unless you are some funky jdbc setXXX
0: 	 *	method or something.
0: 	 *	@param	pvs	parameter value set, if it has one
0: 	 */
0: 	public void setInUse(boolean inTrigger, boolean isAtomic, String stmtText, ParameterValueSet pvs);
0: 
0: 	/**
0: 	 * Mark this context as not in use.  This is important because we
0: 	 * always leave the top statement context on the stack, and we don't
0: 	 * want to clean it up if a statement level exception happens while the
0: 	 * context is not in use.
0: 	 */
0: 	public void clearInUse();
0: 
0: 	/**
0: 	 * Set a save point for the current statement.
0: 	 * NOTE: This needs to be off of the StatementContext so that it gets
0: 	 * cleared on a statement error.
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void setSavePoint() throws StandardException;
0: 
0: 	/**
0: 	 * If this statement context has a savepoint, then
0: 	 * it is reset to the current point.  Otherwise, it
0: 	 * is a noop.
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void resetSavePoint() throws StandardException;
0: 
0: 	/**
0: 	 * Clear the save point for the current statement.
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void clearSavePoint() throws StandardException;
0: 
0: 	/**
0: 	 * Set the top ResultSet in the ResultSet tree for close down on
0: 	 * an error.
0: 	 *
0: 	 * @param topResultSet			The top ResultSet in the ResultSet tree
0: 	 * @param subqueryTrackingArray	(Sparse) of tops of subquery ResultSet trees
0: 	 *
0: 	 * @exception StandardException Thrown on error
0: 	 * @return Nothing.
0: 	 */
0: 	public void setTopResultSet(ResultSet topResultSet,
0: 								NoPutResultSet[] subqueryTrackingArray)
0: 		 throws StandardException;
0: 
0: 	/**
0: 	 * Set the appropriate entry in the subquery tracking array for
0: 	 * the specified subquery.
0: 	 * Useful for closing down open subqueries on an exception.
0: 	 *
0: 	 * @param subqueryNumber	The subquery # for this subquery
0: 	 * @param subqueryResultSet	The NoPutResultSet at the top of the subquery
0: 	 * @param numSubqueries		The total # of subqueries in the entire query
0: 	 *
0: 	 * @return Nothing.
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void setSubqueryResultSet(int subqueryNumber,
0: 									 NoPutResultSet subqueryResultSet,
0: 									 int numSubqueries)
0: 		throws StandardException;
0: 
0: 	/**
0: 	 * Get the subquery tracking array for this query.
0: 	 * (Useful for runtime statistics.)
0: 	 *
0: 	 * @return NoPutResultSet[]	The	(sparse) array of tops of subquery ResultSet trees
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public NoPutResultSet[] getSubqueryTrackingArray()
0: 		throws StandardException;
0: 
0: 
0: 	/**
0: 	 * Track a Dependency within this StatementContext.
0: 	 * (We need to clear any dependencies added within this
0: 	 * context on an error.
0: 	 *
0: 	 * @param dy	The dependency to track.
0: 	 *
0: 	 * @return Nothing.
0: 	 * @exception StandardException Thrown on error
0: 	 */
0: 	public void addDependency(Dependency dy)
0: 		throws StandardException;
0: 
0: 	/**
0: 	  *	Reports whether this StatementContext is on the context stack.
0: 	  *
0: 	  *	@return	true if this StatementContext is on the context stack. false otherwise.
0: 	  */
0: 	public	boolean	onStack();
0: 
0: 	/**
0: 	 * Returns whether we started from within the context of a trigger
0: 	 * or not.
0: 	 *
0: 	 * @return	true if we are in a trigger context
0: 	 */
0: 	public	boolean	inTrigger();
0: 	
0: 	/**
0: 	 * Indicates whether the statement needs to be executed atomically
0: 	 * or not, i.e., whether a commit/rollback is permitted by a
0:  	 * connection nested in this statement.
0: 	 *
0: 	 * @return true if needs to be atomic
0: 	 */
0: 	public boolean isAtomic();
0: 
0: 	/**
0: 	 * Is this statement context in use or not.
0: 	 *
0: 	 * @return true if in use
0: 	 */
0: 	public boolean inUse();
0: 	
0: 	/**
0: 	 * Return the text of the current statement.
0: 	 * Note that this may be null.  It is currently
0: 	 * not set up correctly for ResultSets that aren't
0: 	 * single row result sets (e.g SELECT)
0: 	 * and setXXXX/getXXXX jdbc methods.
0: 	 *
0: 	 * @return the statement text
0: 	 */
0: 	public String getStatementText();
0: 
0: 	/**
0: 		Set the level of SQL allowed in this and subsequent
0: 		nested statements due to a routine call. Value must be one of
0: 		RoutineAliasInfo.{MODIFIES_SQL_DATA, READS_SQL_DATA, CONTAINS_SQL, NO_SQL}
0: 
0: 		@param force set to true to override more restrictive setting. Used to
0: 		reset the permissions after a function call.
0: 
0: 	*/
0: 	public void setSQLAllowed(short allow, boolean force);
0: 
0: 	/**
0: 		Get the setting of the SQL allowed state.
0: 	*/
0: 	public short getSQLAllowed();
0: 
0: 
0: 	/**
0: 		Set to indicate statement is system code.
0: 		For example a system procedure, view, function etc.
0: 	*/
0: 	public void setSystemCode();
0: 
0: 	/**
0: 		Return true if this statement is system code.
0: 	*/
0: 	public boolean getSystemCode();
0: 
0: 	/**
0: 		Indicate that, in the event of a statement-level exception,
0: 		this context is NOT the last one that needs to be rolled
0: 		back--rather, it is nested within some other statement
0: 		context, and that other context needs to be rolled back,
0: 		too.
0: 	*/
0: 	public void setParentRollback();
0: 
0: }
============================================================================