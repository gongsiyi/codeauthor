1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.load.Export
1:345de35: 
1:6d913c6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6d913c6:    contributor license agreements.  See the NOTICE file distributed with
1:6d913c6:    this work for additional information regarding copyright ownership.
1:6d913c6:    The ASF licenses this file to You under the Apache License, Version 2.0
1:6d913c6:    (the "License"); you may not use this file except in compliance with
1:6d913c6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
7:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.load;
1:eac0369: 
1:eac0369: import java.sql.Connection;
1:eac0369: import java.io.IOException;
1:eac0369: import java.sql.SQLException;
1:927ad05: import java.io.File;
1:6588222: import java.security.AccessController;
1:6588222: import java.security.PrivilegedAction;
1:e17a43d: import org.apache.derby.iapi.error.PublicAPI;
1:e17a43d: import org.apache.derby.iapi.reference.SQLState;
1:e17a43d: import org.apache.derby.iapi.error.StandardException;
1:e23ae38: import org.apache.derby.iapi.services.io.FileUtil;
1:bf32514: import org.apache.derby.iapi.security.Securable;
1:bf32514: import org.apache.derby.iapi.security.SecurityUtil;
1:e17a43d: 
2:eac0369: /**
1:eac0369:  * This class provides ways to export data from
1:eac0369:  * a table or a view into a file. Export functions provided 
1:eac0369:  * in this  class are called through Systement Procedures.  
1:eac0369:  */
1:eac0369: public class Export extends ExportAbstract{
1:eac0369: 
1:eac0369: 	private String outputFileName;
1:84e347a: 	/* Name of the file to  which large object data has to be exported */
1:84e347a: 	private String lobsFileName;
1:927ad05:           
1:eac0369: 	private void doExport() throws SQLException
1:eac0369: 	{
1:eac0369: 		try {
1:eac0369: 			if (entityName == null && selectStatement == null)
1:eac0369: 				throw LoadError.entityNameMissing();
1:eac0369: 			
1:eac0369: 			if (outputFileName == null)
1:84e347a: 				throw LoadError.dataFileNull();
1:927ad05:                         else
1:927ad05:                         {
1:927ad05:                             if (dataFileExists(outputFileName))
1:927ad05:                                 throw LoadError.dataFileExists(outputFileName);
1:927ad05:                         }
1:927ad05: 
1:927ad05: 			if (lobsFileName != null && lobsFileExists(lobsFileName))
1:927ad05:                                 throw LoadError.lobsFileExists(lobsFileName);
1:927ad05:                         
1:eac0369: 			try {
1:eac0369: 				doAllTheWork();
1:eac0369: 			} catch (IOException iex) {
1:eac0369: 				//in case of ioexception, catch it and throw it as our own exception
1:7695060: 				throw LoadError.errorWritingData(iex);
3:eac0369: 			}
1:eac0369: 		} catch (Exception ex) {
1:eac0369: 			throw LoadError.unexpectedError(ex);
1:eac0369: 		}
1:eac0369: 	}
1:84e347a: 	
1:eac0369: 	private Export(Connection con, String schemaName , 
1:84e347a: 				   String tableName, String selectStatement ,
1:84e347a: 				   String outputFileName, String characterDelimeter, 
1:84e347a: 				   String columnDelimeter, String codeset)
1:eac0369: 		throws SQLException{
1:eac0369: 		this.con = con;
1:eac0369: 		this.schemaName = schemaName;
1:eac0369: 		this.entityName = tableName;
1:eac0369: 		this.selectStatement = selectStatement;
1:eac0369: 		this.outputFileName = outputFileName;
1:eac0369: 		try{
1:eac0369: 			controlFileReader = new ControlInfo();
1:eac0369: 			controlFileReader.setControlProperties(characterDelimeter,
1:eac0369: 												   columnDelimeter, codeset);
1:eac0369: 		}catch(Exception ex)
1:eac0369: 		{
1:eac0369: 			throw LoadError.unexpectedError(ex);
1:eac0369: 		}
1:eac0369: 	}
1:84e347a: 
1:eac0369: 
1:84e347a:     /**
1:84e347a:      * Set the file name to which larg object data has to be exported, and 
1:84e347a:      * also set flag to indicate that large objects are exported to a 
1:84e347a:      * different file. 
1:84e347a:      * @param lobsFileName  the file to to which lob data has to be exported.
1:84e347a:      * @exception SQLException  if file name is null. 
1:84e347a:      */
1:84e347a: 	private void setLobsExtFileName(String lobsFileName) throws SQLException
1:84e347a: 	{
1:e17a43d: 		if (lobsFileName == null) {
1:e17a43d:             throw PublicAPI.wrapStandardException(
1:e17a43d:                       StandardException.newException(
1:e17a43d:                       SQLState.LOB_DATA_FILE_NULL));
1:e23ae38:         }
1:e17a43d: 
1:84e347a: 		this.lobsFileName = lobsFileName;
1:84e347a: 		lobsInExtFile = true;
1:e17a43d: 	}
1:84e347a: 
1:927ad05:     /**
1:927ad05:      * Checks whether the lobs file exists .
1:927ad05:      * @param fileName  the file to to which lob data has to be exported.
1:927ad05:      * @exception SQLException  if file name is null.	
1:927ad05:      */
1:927ad05: 	private boolean lobsFileExists(String fileName) throws SQLException {
1:84e347a: 
1:927ad05:             if (fileName == null) {
1:927ad05:             throw PublicAPI.wrapStandardException(
1:927ad05:                       StandardException.newException(
1:927ad05: 		      SQLState.LOB_DATA_FILE_NULL));
1:927ad05:             }
1:e23ae38:             fileName = FileUtil.stripProtocolFromFileName( fileName );
1:927ad05:             File file = new File(fileName);
1:927ad05: 
1:6588222:             return fileExists(file);
1:927ad05: 
1:927ad05:         }
1:927ad05:     /**
1:927ad05:      * Checks whether the data file exists .
1:927ad05:      * @param fileName  the file to to which lob data has to be exported.
1:927ad05:      * @exception SQLException  if file name is null.
1:927ad05:      */ 
1:927ad05: 	private boolean dataFileExists(String fileName) throws SQLException {
1:927ad05:             
1:927ad05:             if (fileName == null) {
1:927ad05:             throw PublicAPI.wrapStandardException(
1:927ad05:                       StandardException.newException(
1:927ad05:                       SQLState.DATA_FILE_NULL));
1:e23ae38:             }
1:e23ae38:             fileName = FileUtil.stripProtocolFromFileName( fileName );
1:927ad05:             File file = new File(fileName);
1:6588222: 
1:6588222:             return fileExists(file);
1:927ad05:         }
1:927ad05: 
1:6588222:     /**
1:6588222:      * Checks if the specified file exists.
1:6588222:      *
1:6588222:      * @param file the file to check
1:6588222:      * @return {@code true} if the file exists, {@code false} if not.
1:6588222:      * @throws SecurityException if the required privileges are missing
1:6588222:      */
1:6588222:     private final boolean fileExists(final File file) {
1:400f6eb:         return (AccessController.doPrivileged(
1:400f6eb:                 new PrivilegedAction<Boolean>() {
1:400f6eb:                     public Boolean run() {
1:ce40a31:                         return file.exists();
1:6588222:                     }
1:6588222:             })).booleanValue();
1:6588222:     }
1:6588222: 
1:84e347a: 	/**
1:eac0369: 	 * SYSCS_EXPORT_TABLE  system Procedure from ij or from a Java application
1:eac0369: 	 * invokes  this method to perform export of  a table data to a file.
1:94f158a: 	 * @param con	 The Derby database connection URL for the database containing the table
1:eac0369: 	 * @param schemaName	schema name of the table data is being exported from
1:eac0369: 	 * @param tableName     Name of the Table from which  data has to be exported.
1:eac0369: 	 * @param outputFileName Name of the file to  which data has to be exported.
1:6b50965: 	 * @param columnDelimeter  Delimiter that seperates columns in the output file
1:6b50965: 	 * @param characterDelimeter  Delimiter that is used to quoate non-numeric types
1:eac0369: 	 * @param codeset           Codeset that should be used to write  the data to  the file
1:f668d94:      * @exception SQLException on errors
1:eac0369: 	 */
1:84e347a: 
1:eac0369: 	public static void exportTable(Connection con, String schemaName, 
1:eac0369:                               String tableName, String outputFileName,  
1:eac0369: 							  String columnDelimeter, String characterDelimeter,
1:eac0369: 							  String codeset)
1:eac0369: 		throws SQLException {
1:bf32514: 
1:bf32514:         /** Make sure that the current user has permission to perform this operation */
1:bf32514:         try {
1:bf32514:             SecurityUtil.authorize( Securable.EXPORT_TABLE );
1:bf32514:         }
1:bf32514:         catch (StandardException se) { throw PublicAPI.wrapStandardException( se ); }
1:eac0369: 		
1:eac0369: 		Export fex = new Export(con, schemaName, tableName, null,
1:eac0369: 										outputFileName,	characterDelimeter,   
1:eac0369: 										columnDelimeter, codeset);
1:eac0369: 
1:eac0369: 		fex.doExport();
1:927ad05: 	}
1:84e347a: 
1:84e347a: 
1:eac0369: 	
1:84e347a:     /**
1:c8f894e:      * SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE system procedure from ij 
1:84e347a:      * or from a Java application invokes  this method to perform 
1:84e347a:      * export of a table data to a file. Large object data is exported 
1:84e347a:      * to a different file and the reference to it is stored in the
1:84e347a:      *  main output file. 
1:94f158a:      * @param con	 The Derby database connection URL for the 
1:84e347a:      *               database containing the table
1:84e347a:      * @param schemaName  schema name of the table data is being exported from
1:84e347a:      * @param tableName   Name of the Table from which data has to be exported.
1:84e347a:      * @param outputFileName  Name of the file to which data has to be exported.
1:84e347a:      * @param columnDelimeter  Delimiter that seperates columns 
1:84e347a:      *                         in the output file.
1:84e347a:      * @param characterDelimeter Delimiter that is used to quote 
1:84e347a:      *                           non-numeric types.
1:84e347a:      * @param codeset            Codeset that should be used to 
1:84e347a:      *                           write the data to the file/
1:84e347a:      * @param lobsFileName       Name of the file to which large object 
1:84e347a:      *                           data has to be exported.
1:f668d94:      * @exception SQLException on errors
1:84e347a:      */
1:84e347a: 
1:84e347a:     public static void exportTable(Connection con, String schemaName, 
1:84e347a:                                    String tableName, String outputFileName,  
1:84e347a:                                    String columnDelimeter, String characterDelimeter,
1:84e347a:                                    String codeset, String lobsFileName)
1:84e347a:         throws SQLException {
1:84e347a: 
1:84e347a:         Export fex = new Export(con, schemaName, tableName, null,
1:84e347a:                                 outputFileName,	characterDelimeter,   
1:84e347a:                                 columnDelimeter, codeset);
1:84e347a:         fex.setLobsExtFileName(lobsFileName);
1:84e347a:         fex.doExport();
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * SYSCS_EXPORT_QUERY  system Procedure from ij or from a Java application
1:eac0369: 	 * invokes  this method to perform export of the data retrieved by select statement to a file.
1:94f158a: 	 * @param con	 The Derby database connection URL for the database containing the table
1:eac0369: 	 * @param selectStatement    select query that is used to export the data
1:eac0369: 	 * @param outputFileName Name of the file to  which data has to be exported.
1:6b50965: 	 * @param columnDelimeter  Delimiter that seperates columns in the output file
1:6b50965: 	 * @param characterDelimeter  Delimiter that is used to quiote non-numeric types
1:eac0369: 	 * @param codeset           Codeset that should be used to write  the data to  the file
1:f668d94:      * @exception SQLException on errors
1:eac0369: 	 */
1:eac0369: 	public static void exportQuery(Connection con, String selectStatement,
1:eac0369: 							  String outputFileName, String columnDelimeter, 
1:eac0369: 							  String characterDelimeter, String codeset)
1:eac0369: 		throws SQLException {
1:eac0369: 		
1:eac0369: 		Export fex = new Export(con, null, null, selectStatement,
1:eac0369: 										outputFileName,characterDelimeter,
1:eac0369: 										columnDelimeter, codeset);
1:eac0369: 		fex.doExport();
1:84e347a: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369:     /**
1:c8f894e:      * SYSCS_EXPORT_QUERY_LOBS_TO_EXTFILE system Procedure from ij 
1:84e347a:      * or from a Java application invokes this method to perform 
1:84e347a:      * export of the data retrieved by select  statement to a file.
1:84e347a:      * Large object data is exported to a different file  and the reference 
1:84e347a:      * to it is stored in the main output file. 
1:94f158a:      * @param con	 The Derby database connection URL for 
1:84e347a:      *               the database containing the table
1:84e347a:      * @param selectStatement    select query that is used to export the data
1:84e347a:      * @param outputFileName Name of the file to  which data has to be exported.
1:84e347a:      * @param columnDelimeter  Delimiter that seperates columns in 
1:84e347a:      *                         the output file
1:84e347a:      * @param characterDelimeter  Delimiter that is used to quote 
1:84e347a:      *                            non-numeric types
1:84e347a:      * @param codeset Codeset that should be used to write the data to the file
1:84e347a:      * @param lobsFileName Name of the file to which 
1:84e347a:      *                     large object data has to be exported.
1:f668d94:      * @exception SQLException on errors
1:84e347a:      */
1:84e347a:     public static void exportQuery(Connection con, String selectStatement,
1:84e347a:                                    String outputFileName, String columnDelimeter, 
1:84e347a:                                    String characterDelimeter, String codeset, 
1:84e347a:                                    String lobsFileName)
1:84e347a:         throws SQLException {
1:84e347a: 		
1:84e347a:         Export fex = new Export(con, null, null, selectStatement,
1:84e347a:                                 outputFileName,characterDelimeter,
1:84e347a:                                 columnDelimeter, codeset);
1:84e347a:         fex.setLobsExtFileName(lobsFileName);
1:84e347a:         fex.doExport();
1:84e347a:     }
1:84e347a: 
1:84e347a: 
1:eac0369: 	/**
1:eac0369: 	 * For internal use only
1:eac0369: 	 * @exception	Exception if there is an error
1:eac0369: 	 */
1:eac0369: 	//returns the control file reader corresponding to the control file passed
1:eac0369: 	protected ExportWriteDataAbstract getExportWriteData() throws Exception {
1:84e347a: 		if (lobsInExtFile) 
1:84e347a: 			return new ExportWriteData(outputFileName, 
1:84e347a: 									   lobsFileName,
1:84e347a: 									   controlFileReader);
1:84e347a: 		else 
1:84e347a: 			return new ExportWriteData(outputFileName,
1:84e347a: 									   controlFileReader);
1:eac0369: 	}
1:eac0369: }
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ce40a31
/////////////////////////////////////////////////////////////////////////
1:                         return file.exists();
commit:bf32514
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.security.Securable;
1: import org.apache.derby.iapi.security.SecurityUtil;
/////////////////////////////////////////////////////////////////////////
1: 
1:         /** Make sure that the current user has permission to perform this operation */
1:         try {
1:             SecurityUtil.authorize( Securable.EXPORT_TABLE );
1:         }
1:         catch (StandardException se) { throw PublicAPI.wrapStandardException( se ); }
commit:400f6eb
/////////////////////////////////////////////////////////////////////////
1:         return (AccessController.doPrivileged(
1:                 new PrivilegedAction<Boolean>() {
1:                     public Boolean run() {
commit:e23ae38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.io.FileUtil;
/////////////////////////////////////////////////////////////////////////
1:             }
1:             fileName = FileUtil.stripProtocolFromFileName( fileName );
/////////////////////////////////////////////////////////////////////////
1:             }
1:             fileName = FileUtil.stripProtocolFromFileName( fileName );
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:f668d94
/////////////////////////////////////////////////////////////////////////
1:      * @exception SQLException on errors
/////////////////////////////////////////////////////////////////////////
1:      * @exception SQLException on errors
/////////////////////////////////////////////////////////////////////////
1:      * @exception SQLException on errors
/////////////////////////////////////////////////////////////////////////
1:      * @exception SQLException on errors
commit:7695060
/////////////////////////////////////////////////////////////////////////
1: 				throw LoadError.errorWritingData(iex);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6588222
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:             return fileExists(file);
/////////////////////////////////////////////////////////////////////////
1: 
1:             return fileExists(file);
1:     /**
1:      * Checks if the specified file exists.
1:      *
1:      * @param file the file to check
1:      * @return {@code true} if the file exists, {@code false} if not.
1:      * @throws SecurityException if the required privileges are missing
1:      */
1:     private final boolean fileExists(final File file) {
0:         return ((Boolean)AccessController.doPrivileged(
0:                 new PrivilegedAction() {
0:                     public Object run() {
0:                         return new Boolean(file.exists());
1:                     }
1:             })).booleanValue();
1:     }
1: 
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:927ad05
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.util.PrivilegedFileOps;
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:           
/////////////////////////////////////////////////////////////////////////
1:                         else
1:                         {
1:                             if (dataFileExists(outputFileName))
1:                                 throw LoadError.dataFileExists(outputFileName);
1:                         }
1: 
1: 			if (lobsFileName != null && lobsFileExists(lobsFileName))
1:                                 throw LoadError.lobsFileExists(lobsFileName);
1:                         
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Checks whether the lobs file exists .
1:      * @param fileName  the file to to which lob data has to be exported.
1:      * @exception SQLException  if file name is null.	
1:      */
1: 	private boolean lobsFileExists(String fileName) throws SQLException {
1:             if (fileName == null) {
1:             throw PublicAPI.wrapStandardException(
1:                       StandardException.newException(
1: 		      SQLState.LOB_DATA_FILE_NULL));
1:         }
1:             File file = new File(fileName);
1: 
0:             return PrivilegedFileOps.exists(file);
1: 
1:         }
1:     /**
1:      * Checks whether the data file exists .
1:      * @param fileName  the file to to which lob data has to be exported.
1:      * @exception SQLException  if file name is null.
1:      */ 
1: 	private boolean dataFileExists(String fileName) throws SQLException {
1:             
1:             if (fileName == null) {
1:             throw PublicAPI.wrapStandardException(
1:                       StandardException.newException(
1:                       SQLState.DATA_FILE_NULL));
1:         }
1:             File file = new File(fileName);
1:             
0:            return PrivilegedFileOps.exists(file); 
1:         }
author:Suresh Thalamati
-------------------------------------------------------------------------------
commit:e17a43d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.PublicAPI;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		if (lobsFileName == null) {
1:             throw PublicAPI.wrapStandardException(
1:                       StandardException.newException(
1:                       SQLState.LOB_DATA_FILE_NULL));
1:         }
1: 
commit:c8f894e
/////////////////////////////////////////////////////////////////////////
1:      * SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE system procedure from ij 
/////////////////////////////////////////////////////////////////////////
1:      * SYSCS_EXPORT_QUERY_LOBS_TO_EXTFILE system Procedure from ij 
commit:84e347a
/////////////////////////////////////////////////////////////////////////
1: 	/* Name of the file to  which large object data has to be exported */
1: 	private String lobsFileName;
/////////////////////////////////////////////////////////////////////////
1: 				   String tableName, String selectStatement ,
1: 				   String outputFileName, String characterDelimeter, 
1: 				   String columnDelimeter, String codeset)
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set the file name to which larg object data has to be exported, and 
1:      * also set flag to indicate that large objects are exported to a 
1:      * different file. 
1:      * @param lobsFileName  the file to to which lob data has to be exported.
1:      * @exception SQLException  if file name is null. 
1:      */
1: 	private void setLobsExtFileName(String lobsFileName) throws SQLException
1: 	{
0: 		if (lobsFileName == null)
1: 			throw LoadError.dataFileNull();
1: 		this.lobsFileName = lobsFileName;
1: 		lobsInExtFile = true;
1: 	}
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 	
1:     /**
0:      * SYSCS_EXPORT_TABLE_LOBS_IN_EXTFILE system procedure from ij 
1:      * or from a Java application invokes  this method to perform 
1:      * export of a table data to a file. Large object data is exported 
1:      * to a different file and the reference to it is stored in the
1:      *  main output file. 
0:      * @param con	 The Cloudscape database connection URL for the 
1:      *               database containing the table
1:      * @param schemaName  schema name of the table data is being exported from
1:      * @param tableName   Name of the Table from which data has to be exported.
1:      * @param outputFileName  Name of the file to which data has to be exported.
1:      * @param columnDelimeter  Delimiter that seperates columns 
1:      *                         in the output file.
1:      * @param characterDelimeter Delimiter that is used to quote 
1:      *                           non-numeric types.
1:      * @param codeset            Codeset that should be used to 
1:      *                           write the data to the file/
1:      * @param lobsFileName       Name of the file to which large object 
1:      *                           data has to be exported.
0:      * @exception SQL Exception on errors
1:      */
1: 
1:     public static void exportTable(Connection con, String schemaName, 
1:                                    String tableName, String outputFileName,  
1:                                    String columnDelimeter, String characterDelimeter,
1:                                    String codeset, String lobsFileName)
1:         throws SQLException {
1: 
1:         Export fex = new Export(con, schemaName, tableName, null,
1:                                 outputFileName,	characterDelimeter,   
1:                                 columnDelimeter, codeset);
1:         fex.setLobsExtFileName(lobsFileName);
1:         fex.doExport();
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * SYSCS_EXPORT_QUERY_LOBS_IN_EXTFILE system Procedure from ij 
1:      * or from a Java application invokes this method to perform 
1:      * export of the data retrieved by select  statement to a file.
1:      * Large object data is exported to a different file  and the reference 
1:      * to it is stored in the main output file. 
0:      * @param con	 The Cloudscape database connection URL for 
1:      *               the database containing the table
1:      * @param selectStatement    select query that is used to export the data
1:      * @param outputFileName Name of the file to  which data has to be exported.
1:      * @param columnDelimeter  Delimiter that seperates columns in 
1:      *                         the output file
1:      * @param characterDelimeter  Delimiter that is used to quote 
1:      *                            non-numeric types
1:      * @param codeset Codeset that should be used to write the data to the file
1:      * @param lobsFileName Name of the file to which 
1:      *                     large object data has to be exported.
0:      * @exception SQL Exception on errors
1:      */
1:     public static void exportQuery(Connection con, String selectStatement,
1:                                    String outputFileName, String columnDelimeter, 
1:                                    String characterDelimeter, String codeset, 
1:                                    String lobsFileName)
1:         throws SQLException {
1: 		
1:         Export fex = new Export(con, null, null, selectStatement,
1:                                 outputFileName,characterDelimeter,
1:                                 columnDelimeter, codeset);
1:         fex.setLobsExtFileName(lobsFileName);
1:         fex.doExport();
1:     }
1: 
1: 
1: 		if (lobsInExtFile) 
1: 			return new ExportWriteData(outputFileName, 
1: 									   lobsFileName,
1: 									   controlFileReader);
1: 		else 
1: 			return new ExportWriteData(outputFileName,
1: 									   controlFileReader);
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 	 * @param con	 The Derby database connection URL for the database containing the table
/////////////////////////////////////////////////////////////////////////
1:      * @param con	 The Derby database connection URL for the 
/////////////////////////////////////////////////////////////////////////
1: 	 * @param con	 The Derby database connection URL for the database containing the table
/////////////////////////////////////////////////////////////////////////
1:      * @param con	 The Derby database connection URL for 
commit:6d913c6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param columnDelimeter  Delimiter that seperates columns in the output file
1: 	 * @param characterDelimeter  Delimiter that is used to quoate non-numeric types
/////////////////////////////////////////////////////////////////////////
1: 	 * @param columnDelimeter  Delimiter that seperates columns in the output file
1: 	 * @param characterDelimeter  Delimiter that is used to quiote non-numeric types
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.load.Export
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:bff3c2e
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.load;
1: 
1: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.ResultSet;
1: import java.io.IOException;
1: import java.sql.SQLException;
0: import java.util.*;    
1: 
1: /**
1:  * This class provides ways to export data from
1:  * a table or a view into a file. Export functions provided 
1:  * in this  class are called through Systement Procedures.  
1:  */
1: public class Export extends ExportAbstract{
1: 	/**
0: 	   IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	private String outputFileName;
1: 
1: 
1: 	private void doExport() throws SQLException
1: 	{
1: 		try {
1: 			if (entityName == null && selectStatement == null)
1: 				throw LoadError.entityNameMissing();
1: 			
1: 			if (outputFileName == null)
0: 				throw LoadError.dataFileNull();
1: 			try {
1: 				doAllTheWork();
1: 			} catch (IOException iex) {
1: 				//in case of ioexception, catch it and throw it as our own exception
0: 				throw LoadError.errorWritingData();
1: 			}
1: 		} catch (Exception ex) {
1: 			throw LoadError.unexpectedError(ex);
1: 		}
1: 
1: 	}
1: 	
1: 	private Export(Connection con, String schemaName , 
0: 					   String tableName, String selectStatement ,
0: 					   String outputFileName, String characterDelimeter,
0: 					   String columnDelimeter, String codeset)
1: 		throws SQLException{
1: 		this.con = con;
1: 		this.schemaName = schemaName;
1: 		this.entityName = tableName;
1: 		this.selectStatement = selectStatement;
1: 		this.outputFileName = outputFileName;
1: 		try{
1: 			controlFileReader = new ControlInfo();
1: 			controlFileReader.setControlProperties(characterDelimeter,
1: 												   columnDelimeter, codeset);
1: 		}catch(Exception ex)
1: 		{
1: 			throw LoadError.unexpectedError(ex);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * SYSCS_EXPORT_TABLE  system Procedure from ij or from a Java application
1: 	 * invokes  this method to perform export of  a table data to a file.
0: 	 * @param con	 The Cloudscape database connection URL for the database containing the table
1: 	 * @param schemaName	schema name of the table data is being exported from
1: 	 * @param tableName     Name of the Table from which  data has to be exported.
1: 	 * @param outputFileName Name of the file to  which data has to be exported.
0: 	 * @param colDelimiter  Delimiter that seperates columns in the output file
0: 	 * @param characterDelimiter  Delimiter that is used to quoate non-numeric types
1: 	 * @param codeset           Codeset that should be used to write  the data to  the file
0:  	 * @exception SQL Exception on errors
1: 	 */
1: 
1: 	public static void exportTable(Connection con, String schemaName, 
1:                               String tableName, String outputFileName,  
1: 							  String columnDelimeter, String characterDelimeter,
1: 							  String codeset)
1: 		throws SQLException {
1: 		
1: 		Export fex = new Export(con, schemaName, tableName, null,
1: 										outputFileName,	characterDelimeter,   
1: 										columnDelimeter, codeset);
1: 
1: 		fex.doExport();
1: 	}
1: 
1: 	
1: 	/**
1: 	 * SYSCS_EXPORT_QUERY  system Procedure from ij or from a Java application
1: 	 * invokes  this method to perform export of the data retrieved by select statement to a file.
0: 	 * @param con	 The Cloudscape database connection URL for the database containing the table
1: 	 * @param selectStatement    select query that is used to export the data
1: 	 * @param outputFileName Name of the file to  which data has to be exported.
0: 	 * @param colDelimiter  Delimiter that seperates columns in the output file
0: 	 * @param characterDelimiter  Delimiter that is used to quiote non-numeric types
1: 	 * @param codeset           Codeset that should be used to write  the data to  the file
0:  	 * @exception SQL Exception on errors
1: 	 */
1: 	public static void exportQuery(Connection con, String selectStatement,
1: 							  String outputFileName, String columnDelimeter, 
1: 							  String characterDelimeter, String codeset)
1: 		throws SQLException {
1: 		
1: 		Export fex = new Export(con, null, null, selectStatement,
1: 										outputFileName,characterDelimeter,
1: 										columnDelimeter, codeset);
1: 		fex.doExport();
1: 	}
1: 
1: 
1: 	/**
1: 	 * For internal use only
1: 	 * @exception	Exception if there is an error
1: 	 */
1: 	//returns the control file reader corresponding to the control file passed
1: 	protected ExportWriteDataAbstract getExportWriteData() throws Exception {
0: 		return new ExportWriteData(outputFileName, controlFileReader);
1: 	}
1: }
1: 
1: 
1: 
1: 
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.load
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.load;
0: 
0: import java.sql.Connection;
0: import java.sql.DriverManager;
0: import java.sql.ResultSet;
0: import java.io.IOException;
0: import java.sql.SQLException;
0: import java.util.*;    
0: 
0: /**
0:  * This class provides ways to export data from
0:  * a table or a view into a file. Export functions provided 
0:  * in this  class are called through Systement Procedures.  
0:  */
0: public class Export extends ExportAbstract{
0: 	/**
0: 	   IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	private String outputFileName;
0: 
0: 
0: 	private void doExport() throws SQLException
0: 	{
0: 		try {
0: 			if (entityName == null && selectStatement == null)
0: 				throw LoadError.entityNameMissing();
0: 			
0: 			if (outputFileName == null)
0: 				throw LoadError.dataFileNull();
0: 			try {
0: 				doAllTheWork();
0: 			} catch (IOException iex) {
0: 				//in case of ioexception, catch it and throw it as our own exception
0: 				throw LoadError.errorWritingData();
0: 			}
0: 		} catch (Exception ex) {
0: 			throw LoadError.unexpectedError(ex);
0: 		}
0: 
0: 	}
0: 	
0: 	private Export(Connection con, String schemaName , 
0: 					   String tableName, String selectStatement ,
0: 					   String outputFileName, String characterDelimeter,
0: 					   String columnDelimeter, String codeset)
0: 		throws SQLException{
0: 		this.con = con;
0: 		this.schemaName = schemaName;
0: 		this.entityName = tableName;
0: 		this.selectStatement = selectStatement;
0: 		this.outputFileName = outputFileName;
0: 		try{
0: 			controlFileReader = new ControlInfo();
0: 			controlFileReader.setControlProperties(characterDelimeter,
0: 												   columnDelimeter, codeset);
0: 		}catch(Exception ex)
0: 		{
0: 			throw LoadError.unexpectedError(ex);
0: 		}
0: 	}
0: 
0: 	/**
0: 	 * SYSCS_EXPORT_TABLE  system Procedure from ij or from a Java application
0: 	 * invokes  this method to perform export of  a table data to a file.
0: 	 * @param con	 The Cloudscape database connection URL for the database containing the table
0: 	 * @param schemaName	schema name of the table data is being exported from
0: 	 * @param tableName     Name of the Table from which  data has to be exported.
0: 	 * @param outputFileName Name of the file to  which data has to be exported.
0: 	 * @param colDelimiter  Delimiter that seperates columns in the output file
0: 	 * @param characterDelimiter  Delimiter that is used to quoate non-numeric types
0: 	 * @param codeset           Codeset that should be used to write  the data to  the file
0:  	 * @exception SQL Exception on errors
0: 	 */
0: 
0: 	public static void exportTable(Connection con, String schemaName, 
0:                               String tableName, String outputFileName,  
0: 							  String columnDelimeter, String characterDelimeter,
0: 							  String codeset)
0: 		throws SQLException {
0: 		
0: 		Export fex = new Export(con, schemaName, tableName, null,
0: 										outputFileName,	characterDelimeter,   
0: 										columnDelimeter, codeset);
0: 
0: 		fex.doExport();
0: 	}
0: 
0: 	
0: 	/**
0: 	 * SYSCS_EXPORT_QUERY  system Procedure from ij or from a Java application
0: 	 * invokes  this method to perform export of the data retrieved by select statement to a file.
0: 	 * @param con	 The Cloudscape database connection URL for the database containing the table
0: 	 * @param selectStatement    select query that is used to export the data
0: 	 * @param outputFileName Name of the file to  which data has to be exported.
0: 	 * @param colDelimiter  Delimiter that seperates columns in the output file
0: 	 * @param characterDelimiter  Delimiter that is used to quiote non-numeric types
0: 	 * @param codeset           Codeset that should be used to write  the data to  the file
0:  	 * @exception SQL Exception on errors
0: 	 */
0: 	public static void exportQuery(Connection con, String selectStatement,
0: 							  String outputFileName, String columnDelimeter, 
0: 							  String characterDelimeter, String codeset)
0: 		throws SQLException {
0: 		
0: 		Export fex = new Export(con, null, null, selectStatement,
0: 										outputFileName,characterDelimeter,
0: 										columnDelimeter, codeset);
0: 		fex.doExport();
0: 	}
0: 
0: 
0: 	/**
0: 	 * For internal use only
0: 	 * @exception	Exception if there is an error
0: 	 */
0: 	//returns the control file reader corresponding to the control file passed
0: 	protected ExportWriteDataAbstract getExportWriteData() throws Exception {
0: 		return new ExportWriteData(outputFileName, controlFileReader);
0: 	}
0: }
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================