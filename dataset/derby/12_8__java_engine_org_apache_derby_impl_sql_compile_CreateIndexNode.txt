1:eac0369: /*
19:eac0369: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.CreateIndexNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:234a2b6: import java.util.HashSet;
1:47d4a4c: import java.util.List;
1:eac0369: import java.util.Properties;
1:4fb136d: import org.apache.derby.iapi.error.StandardException;
1:4fb136d: import org.apache.derby.iapi.reference.Limits;
1:4fb136d: import org.apache.derby.iapi.reference.Property;
1:4fb136d: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:4fb136d: import org.apache.derby.iapi.services.property.PropertyUtil;
1:69f8afa: import org.apache.derby.iapi.sql.compile.Visitor;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:4fb136d: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1:4fb136d: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:4fb136d: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:4fb136d: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:4fb136d: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:4fb136d: 
2:eac0369: /**
1:eac0369:  * A CreateIndexNode is the root of a QueryTree that represents a CREATE INDEX
1:eac0369:  * statement.
3:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:3bb140c: class CreateIndexNode extends DDLStatementNode
1:eac0369: {
1:28f9484:     private boolean             unique;
1:28f9484:     private Properties          properties;
1:28f9484:     private String              indexType;
1:28f9484:     private TableName           indexName;
1:28f9484:     private TableName           tableName;
1:3bb140c:     private List<String>        columnNameList;
1:28f9484:     private String[]            columnNames;
1:28f9484:     private boolean[]           isAscending;
1:28f9484:     private int[]               boundColumnIDs;
1:28f9484:     private TableDescriptor     td;
1:eac0369: 
1:eac0369: 	/**
1:3bb140c:      * Constructor for a CreateIndexNode
1:eac0369: 	 *
1:eac0369: 	 * @param unique	True means it's a unique index
1:eac0369: 	 * @param indexType	The type of index
1:eac0369: 	 * @param indexName	The name of the index
1:eac0369: 	 * @param tableName	The name of the table the index will be on
1:eac0369: 	 * @param columnNameList	A list of column names, in the order they
1:eac0369: 	 *							appear in the index.
1:eac0369: 	 * @param properties	The optional properties list associated with the index.
1:3bb140c:      * @param cm Context manager
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     CreateIndexNode(boolean unique,
1:3bb140c:                     String indexType,
1:3bb140c:                     TableName indexName,
1:3bb140c:                     TableName tableName,
1:3bb140c:                     List<String> columnNameList,
1:3bb140c:                     Properties properties,
1:3bb140c:                     ContextManager cm) throws StandardException
1:eac0369: 	{
1:3bb140c:         super(indexName, cm);
1:3bb140c:         this.unique = unique;
1:3bb140c:         this.indexType = indexType;
1:3bb140c:         this.indexName = indexName;
1:3bb140c:         this.tableName = tableName;
1:3bb140c:         this.columnNameList = columnNameList;
1:3bb140c:         this.properties = properties;
1:eac0369: 	}
1:69f8afa: 
1:eac0369: 	/**
1:eac0369: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1:eac0369: 	 * for how this should be done for tree printing.
1:eac0369: 	 *
1:eac0369: 	 * @return	This object as a String
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return super.toString() +
1:eac0369: 				"unique: " + unique + "\n" +
1:eac0369: 				"indexType: " + indexType + "\n" +
1:eac0369: 				"indexName: " + indexName + "\n" +
1:eac0369: 				"tableName: " + tableName + "\n" +
1:eac0369: 				"properties: " + properties + "\n";
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return "";
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:3bb140c:     String statementToString()
1:eac0369: 	{
1:eac0369: 		return "CREATE INDEX";
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// We inherit the generate() method from DDLStatementNode.
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this CreateIndexNode.  This means doing any static error
1:eac0369: 	 * checking that can be done before actually creating the table.
1:eac0369: 	 * For example, verifying that the column name list does not
1:eac0369: 	 * contain any duplicate column names.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:cc770d8: 	public void bindStatement() throws StandardException
1:eac0369: 	{
1:eac0369: 		int						columnCount;
1:eac0369: 
1:3bb140c:         getSchemaDescriptor(); // want checking side-effects only
1:eac0369: 
1:eac0369: 		td = getTableDescriptor(tableName);
1:eac0369: 
1:eac0369: 		//throw an exception if user is attempting to create an index on a temporary table
1:eac0369: 		if (td.getTableType() == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE)
1:eac0369: 		{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_NOT_ALLOWED_FOR_DECLARED_GLOBAL_TEMP_TABLE);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		//If total number of indexes on the table so far is more than 32767, then we need to throw an exception
1:b1f84c1: 		if (td.getTotalNumberOfIndexes() > Limits.DB2_MAX_INDEXES_ON_TABLE)
1:eac0369: 		{
1:eac0369: 			throw StandardException.newException(SQLState.LANG_TOO_MANY_INDEXES_ON_TABLE,
1:eac0369: 				String.valueOf(td.getTotalNumberOfIndexes()),
1:eac0369: 				tableName,
1:b1f84c1: 				String.valueOf(Limits.DB2_MAX_INDEXES_ON_TABLE));
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Validate the column name list */
1:eac0369: 		verifyAndGetUniqueNames();
1:eac0369: 
1:eac0369: 		columnCount = columnNames.length;
1:eac0369: 		boundColumnIDs = new int[ columnCount ];
1:eac0369: 
1:eac0369: 		// Verify that the columns exist
1:eac0369: 		for (int i = 0; i < columnCount; i++)
1:eac0369: 		{
1:eac0369: 			ColumnDescriptor			columnDescriptor;
1:eac0369: 
1:eac0369: 			columnDescriptor = td.getColumnDescriptor(columnNames[i]);
1:eac0369: 			if (columnDescriptor == null)
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,
1:eac0369: 															columnNames[i],
1:eac0369: 															tableName);
1:eac0369: 			}
1:eac0369: 			boundColumnIDs[ i ] = columnDescriptor.getPosition();
1:eac0369: 
1:eac0369: 			// Don't allow a column to be created on a non-orderable type
1:eac0369: 			if ( ! columnDescriptor.getType().getTypeId().
1:eac0369: 												orderable(getClassFactory()))
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_COLUMN_NOT_ORDERABLE_DURING_EXECUTION,
1:eac0369: 					columnDescriptor.getType().getTypeId().getSQLTypeName());
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Check for number of key columns to be less than 16 to match DB2 */
1:eac0369: 		if (columnCount > 16)
1:eac0369: 			throw StandardException.newException(SQLState.LANG_TOO_MANY_INDEX_KEY_COLS);
1:eac0369: 
1:eac0369: 		/* See if the index already exists in this schema.
1:eac0369: 		 * NOTE: We still need to check at execution time
1:eac0369: 		 * since the index name is only unique to the schema,
1:eac0369: 		 * not the table.
1:eac0369: 		 */
1:eac0369: //  		if (dd.getConglomerateDescriptor(indexName.getTableName(), sd, false) != null)
1:eac0369: //  		{
1:eac0369: //  			throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS_IN_OBJECT,
1:eac0369: //  												 "Index",
1:eac0369: //  												 indexName.getTableName(),
1:eac0369: //  												 "schema",
1:eac0369: //  												 sd.getSchemaName());
1:eac0369: //  		}
1:eac0369: 
1:eac0369: 		/* Statement is dependent on the TableDescriptor */
1:eac0369: 		getCompilerContext().createDependency(td);
1:eac0369: 
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1:eac0369: 	 *
1:eac0369: 	 * @return	true if references SESSION schema tables, else false
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	public boolean referencesSessionSchema()
2:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		//If create index is on a SESSION schema table, then return true.
1:eac0369: 		return isSessionSchema(td.getSchemaName());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create the Constant information that will drive the guts of Execution.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     public ConstantAction makeConstantAction() throws StandardException
1:eac0369: 	{
1:eac0369: 		SchemaDescriptor		sd = getSchemaDescriptor();
1:eac0369: 
1:eac0369: 		int columnCount = columnNames.length;
1:eac0369: 		int approxLength = 0;
1:eac0369: 
1:eac0369: 		// bump the page size for the index,
1:eac0369: 		// if the approximate sizes of the columns in the key are
1:eac0369: 		// greater than the bump threshold.
1:eac0369: 		// Ideally, we would want to have atleast 2 or 3 keys fit in one page
1:eac0369: 		// With fix for beetle 5728, indexes on long types is not allowed
1:eac0369: 		// so we do not have to consider key columns of long types
1:eac0369: 		for (int i = 0; i < columnCount; i++)
1:eac0369: 		{
1:eac0369: 			ColumnDescriptor columnDescriptor = td.getColumnDescriptor(columnNames[i]);
1:eac0369: 			DataTypeDescriptor dts = columnDescriptor.getType();
1:eac0369: 			approxLength += dts.getTypeId().getApproximateLengthInBytes(dts);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369:         if (approxLength > Property.IDX_PAGE_SIZE_BUMP_THRESHOLD)
1:eac0369:         {
1:eac0369: 
1:eac0369:             if (((properties == null) ||
1:eac0369:                  (properties.get(Property.PAGE_SIZE_PARAMETER) == null)) &&
1:eac0369:                 (PropertyUtil.getServiceProperty(
1:eac0369:                      getLanguageConnectionContext().getTransactionCompile(),
1:eac0369:                      Property.PAGE_SIZE_PARAMETER) == null))
1:eac0369:             {
1:eac0369:                 // do not override the user's choice of page size, whether it
1:eac0369:                 // is set for the whole database or just set on this statement.
1:eac0369: 
1:eac0369:                 if (properties == null)
1:eac0369:                     properties = new Properties();
1:eac0369: 
1:eac0369:                 properties.put(
1:eac0369:                     Property.PAGE_SIZE_PARAMETER,
1:eac0369:                     Property.PAGE_SIZE_DEFAULT_LONG);
1:eac0369: 
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369: 
1:28e234d: 		return getGenericConstantActionFactory().getCreateIndexConstantAction(
1:28e234d:                     false, // not for CREATE TABLE
1:28e234d:                     unique,
1:0c5bc3a:                     false, // it's not a UniqueWithDuplicateNulls Index
1:0c5bc3a:                     false, // it's not a constraint, so its checking
1:0c5bc3a:                            // is not deferrable
1:2db96c5:                     false, // initiallyDeferred: N/A
1:2db96c5:                     -1,    // constraintType: N/A
1:28e234d:                     indexType,
1:28e234d:                     sd.getSchemaName(),
1:28e234d:                     indexName.getTableName(),
1:28e234d:                     tableName.getTableName(),
1:28e234d:                     td.getUUID(),
1:28e234d:                     columnNames,
1:28e234d:                     isAscending,
1:28e234d:                     false,
1:28e234d:                     null,
1:28e234d:                     properties);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Check the uniqueness of the column names within the derived column list.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException	Thrown if column list contains a
1:eac0369: 	 *											duplicate name.
1:eac0369: 	 */
1:eac0369: 	private void verifyAndGetUniqueNames()
1:eac0369: 				throws StandardException
1:eac0369: 	{
1:eac0369: 		int size = columnNameList.size();
1:9d5bd0e:         HashSet<String> seenNames = new HashSet<String>(size + 2, 0.999f);
1:eac0369: 		columnNames = new String[size];
1:eac0369: 		isAscending = new boolean[size];
1:eac0369: 
1:eac0369: 		for (int index = 0; index < size; index++)
1:eac0369: 		{
1:eac0369: 			/* Verify that this column's name is unique within the list
1:eac0369: 			 * Having a space at the end meaning descending on the column
1:eac0369: 			 */
1:3bb140c:             columnNames[index] = columnNameList.get(index);
1:eac0369: 			if (columnNames[index].endsWith(" "))
1:eac0369: 			{
1:eac0369: 				columnNames[index] = columnNames[index].substring(0, columnNames[index].length() - 1);
1:eac0369: 				isAscending[index] = false;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 				isAscending[index] = true;
1:eac0369: 
1:234a2b6:             boolean alreadySeen = !seenNames.add(columnNames[index]);
1:eac0369: 
1:234a2b6: 			if (alreadySeen)
1:eac0369: 			{
1:eac0369: 				throw StandardException.newException(SQLState.LANG_DUPLICATE_COLUMN_NAME_CREATE_INDEX, columnNames[index]);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:69f8afa:     @Override
1:69f8afa:     void acceptChildren(Visitor v) throws StandardException {
1:69f8afa:         super.acceptChildren(v);
1:69f8afa: 
1:69f8afa:         if (indexName != null) {
1:69f8afa:             indexName = (TableName) indexName.accept(v);
1:69f8afa:         }
1:69f8afa: 
1:69f8afa:         if (tableName != null) {
1:69f8afa:             tableName = (TableName) tableName.accept(v);
1:69f8afa:         }
1:69f8afa:     }
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2db96c5
/////////////////////////////////////////////////////////////////////////
1:                     false, // initiallyDeferred: N/A
1:                     -1,    // constraintType: N/A
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1:                     false, // it's not a UniqueWithDuplicateNulls Index
1:                     false, // it's not a constraint, so its checking
1:                            // is not deferrable
0:                     false, // initialltDeferred: N/A
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1: class CreateIndexNode extends DDLStatementNode
1:     private List<String>        columnNameList;
1:      * Constructor for a CreateIndexNode
/////////////////////////////////////////////////////////////////////////
1:      * @param cm Context manager
1:     CreateIndexNode(boolean unique,
1:                     String indexType,
1:                     TableName indexName,
1:                     TableName tableName,
1:                     List<String> columnNameList,
1:                     Properties properties,
1:                     ContextManager cm) throws StandardException
1:         super(indexName, cm);
1:         this.unique = unique;
1:         this.indexType = indexType;
1:         this.indexName = indexName;
1:         this.tableName = tableName;
1:         this.columnNameList = columnNameList;
1:         this.properties = properties;
0:         setNodeType(C_NodeTypes.CREATE_INDEX_NODE);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     String statementToString()
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         getSchemaDescriptor(); // want checking side-effects only
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ConstantAction makeConstantAction() throws StandardException
/////////////////////////////////////////////////////////////////////////
1:             columnNames[index] = columnNameList.get(index);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:69f8afa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.Visitor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     void acceptChildren(Visitor v) throws StandardException {
1:         super.acceptChildren(v);
1: 
1:         if (indexName != null) {
1:             indexName = (TableName) indexName.accept(v);
1:         }
1: 
1:         if (tableName != null) {
1:             tableName = (TableName) tableName.accept(v);
1:         }
1:     }
commit:28f9484
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private boolean             unique;
1:     private Properties          properties;
1:     private String              indexType;
1:     private TableName           indexName;
1:     private TableName           tableName;
0:     private List                columnNameList;
1:     private String[]            columnNames;
1:     private boolean[]           isAscending;
1:     private int[]               boundColumnIDs;
1:     private TableDescriptor     td;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:234a2b6
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
0:         HashSet seenNames = new HashSet(size + 2, 0.999f);
/////////////////////////////////////////////////////////////////////////
1:             boolean alreadySeen = !seenNames.add(columnNames[index]);
1: 			if (alreadySeen)
commit:47d4a4c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 	List				columnNameList;
/////////////////////////////////////////////////////////////////////////
0: 		this.columnNameList = (List) columnNameList;
commit:a32eb9f
/////////////////////////////////////////////////////////////////////////
0: 			columnNames[index] = (String) columnNameList.get(index);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:9d5bd0e
/////////////////////////////////////////////////////////////////////////
1:         HashSet<String> seenNames = new HashSet<String>(size + 2, 0.999f);
author:Lily Wei
-------------------------------------------------------------------------------
commit:9b3775b
/////////////////////////////////////////////////////////////////////////
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:28e234d
/////////////////////////////////////////////////////////////////////////
1: 		return getGenericConstantActionFactory().getCreateIndexConstantAction(
1:                     false, // not for CREATE TABLE
1:                     unique,
0:                     false, //its not a UniqueWithDuplicateNulls Index
1:                     indexType,
1:                     sd.getSchemaName(),
1:                     indexName.getTableName(),
1:                     tableName.getTableName(),
1:                     td.getUUID(),
1:                     columnNames,
1:                     isAscending,
1:                     false,
1:                     null,
1:                     properties);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1b41764
/////////////////////////////////////////////////////////////////////////
0: 		return	getGenericConstantActionFactory().getCreateIndexConstantAction(               
0:                 false, // not for CREATE TABLE
0:                 unique,
commit:1429957
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4fb136d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.Limits;
1: import org.apache.derby.iapi.reference.Property;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
commit:cc770d8
/////////////////////////////////////////////////////////////////////////
1: 	public void bindStatement() throws StandardException
/////////////////////////////////////////////////////////////////////////
commit:0061383
/////////////////////////////////////////////////////////////////////////
0: public class CreateIndexNode extends DDLStatementNode
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.CreateIndexNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.services.context.ContextManager;
1: 
0: import org.apache.derby.iapi.sql.ResultSet;
1: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.DB2Limit;
0: import org.apache.derby.iapi.reference.Property;
1: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.impl.sql.execute.BaseActivation;
0: import org.apache.derby.impl.sql.execute.ColumnInfo;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.catalog.UUID;
1: 
0: import java.util.Hashtable;
1: import java.util.Properties;
0: import java.util.Vector;
1: 
1: /**
1:  * A CreateIndexNode is the root of a QueryTree that represents a CREATE INDEX
1:  * statement.
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
0: public class CreateIndexNode extends CreateStatementNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	boolean				unique;
0: 	DataDictionary		dd = null;
0: 	Properties			properties;
0: 	String				indexType;
0: 	TableName			indexName;
0: 	TableName			tableName;
0: 	Vector				columnNameList;
0: 	String[]			columnNames = null;
0: 	boolean[]			isAscending;
0: 	int[]				boundColumnIDs;
1: 
0: 	TableDescriptor		td;
1: 
1: 	/**
0: 	 * Initializer for a CreateIndexNode
1: 	 *
1: 	 * @param unique	True means it's a unique index
1: 	 * @param indexType	The type of index
1: 	 * @param indexName	The name of the index
1: 	 * @param tableName	The name of the table the index will be on
1: 	 * @param columnNameList	A list of column names, in the order they
1: 	 *							appear in the index.
1: 	 * @param properties	The optional properties list associated with the index.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void init(
0: 					Object unique,
0: 					Object indexType,
0: 					Object indexName,
0: 					Object tableName,
0: 					Object columnNameList,
0: 					Object properties)
1: 		throws StandardException
1: 	{
0: 		initAndCheck(indexName);
0: 		this.unique = ((Boolean) unique).booleanValue();
0: 		this.indexType = (String) indexType;
0: 		this.indexName = (TableName) indexName;
0: 		this.tableName = (TableName) tableName;
0: 		this.columnNameList = (Vector) columnNameList;
0: 		this.properties = (Properties) properties;
1: 	}
1: 
1: 	/**
1: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
1: 	 * for how this should be done for tree printing.
1: 	 *
1: 	 * @return	This object as a String
1: 	 */
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return super.toString() +
1: 				"unique: " + unique + "\n" +
1: 				"indexType: " + indexType + "\n" +
1: 				"indexName: " + indexName + "\n" +
1: 				"tableName: " + tableName + "\n" +
1: 				"properties: " + properties + "\n";
1: 		}
1: 		else
1: 		{
1: 			return "";
1: 		}
1: 	}
1: 
0: 	public String statementToString()
1: 	{
1: 		return "CREATE INDEX";
1: 	}
1: 
1: 
0: 	public	boolean				getUniqueness() { return unique; }
0: 	public	String				getIndexType() { return indexType; }
0: 	public	TableName			getIndexName() { return indexName; }
0: 	public	UUID				getBoundTableID() { return td.getUUID(); }
0:     public	Properties			getProperties() { return properties; }
0: 	public  TableName			getIndexTableName() {return tableName; }
0: 	public  String[]			getColumnNames() { return columnNames; }
1: 
0: 	// get 1-based column ids
0: 	public	int[]				getKeyColumnIDs() { return boundColumnIDs; }
0: 	public	boolean[]			getIsAscending() { return isAscending; }
1: 
1: 	// We inherit the generate() method from DDLStatementNode.
1: 
1: 	/**
1: 	 * Bind this CreateIndexNode.  This means doing any static error
1: 	 * checking that can be done before actually creating the table.
1: 	 * For example, verifying that the column name list does not
1: 	 * contain any duplicate column names.
1: 	 *
0: 	 * @return	The bound query tree
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public QueryTreeNode bind() throws StandardException
1: 	{
0: 		CompilerContext			cc = getCompilerContext();
0: 		DataDictionary			dd = getDataDictionary();
0: 		SchemaDescriptor		sd;
1: 		int						columnCount;
1: 
0: 		sd = getSchemaDescriptor();
1: 
1: 		td = getTableDescriptor(tableName);
1: 
1: 		//throw an exception if user is attempting to create an index on a temporary table
1: 		if (td.getTableType() == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE)
1: 		{
1: 				throw StandardException.newException(SQLState.LANG_NOT_ALLOWED_FOR_DECLARED_GLOBAL_TEMP_TABLE);
1: 		}
1: 
1: 		//If total number of indexes on the table so far is more than 32767, then we need to throw an exception
0: 		if (td.getTotalNumberOfIndexes() > DB2Limit.DB2_MAX_INDEXES_ON_TABLE)
1: 		{
1: 			throw StandardException.newException(SQLState.LANG_TOO_MANY_INDEXES_ON_TABLE,
1: 				String.valueOf(td.getTotalNumberOfIndexes()),
1: 				tableName,
0: 				String.valueOf(DB2Limit.DB2_MAX_INDEXES_ON_TABLE));
1: 		}
1: 
1: 		/* Validate the column name list */
1: 		verifyAndGetUniqueNames();
1: 
1: 		columnCount = columnNames.length;
1: 		boundColumnIDs = new int[ columnCount ];
1: 
1: 		// Verify that the columns exist
1: 		for (int i = 0; i < columnCount; i++)
1: 		{
1: 			ColumnDescriptor			columnDescriptor;
1: 
1: 			columnDescriptor = td.getColumnDescriptor(columnNames[i]);
1: 			if (columnDescriptor == null)
1: 			{
1: 				throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,
1: 															columnNames[i],
1: 															tableName);
1: 			}
1: 			boundColumnIDs[ i ] = columnDescriptor.getPosition();
1: 
1: 			// Don't allow a column to be created on a non-orderable type
1: 			if ( ! columnDescriptor.getType().getTypeId().
1: 												orderable(getClassFactory()))
1: 			{
1: 				throw StandardException.newException(SQLState.LANG_COLUMN_NOT_ORDERABLE_DURING_EXECUTION,
1: 					columnDescriptor.getType().getTypeId().getSQLTypeName());
1: 			}
1: 		}
1: 
1: 		/* Check for number of key columns to be less than 16 to match DB2 */
1: 		if (columnCount > 16)
1: 			throw StandardException.newException(SQLState.LANG_TOO_MANY_INDEX_KEY_COLS);
1: 
1: 		/* See if the index already exists in this schema.
1: 		 * NOTE: We still need to check at execution time
1: 		 * since the index name is only unique to the schema,
1: 		 * not the table.
1: 		 */
1: //  		if (dd.getConglomerateDescriptor(indexName.getTableName(), sd, false) != null)
1: //  		{
1: //  			throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS_IN_OBJECT,
1: //  												 "Index",
1: //  												 indexName.getTableName(),
1: //  												 "schema",
1: //  												 sd.getSchemaName());
1: //  		}
1: 
1: 		/* Statement is dependent on the TableDescriptor */
1: 		getCompilerContext().createDependency(td);
1: 
0: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
1: 	 *
1: 	 * @return	true if references SESSION schema tables, else false
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	public boolean referencesSessionSchema()
1: 		throws StandardException
1: 	{
1: 		//If create index is on a SESSION schema table, then return true.
1: 		return isSessionSchema(td.getSchemaName());
1: 	}
1: 
1: 	/**
1: 	 * Create the Constant information that will drive the guts of Execution.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
1: 	{
0:         long 					conglomId = 0;
1: 		SchemaDescriptor		sd = getSchemaDescriptor();
1: 
1: 		int columnCount = columnNames.length;
1: 		int approxLength = 0;
0: 		boolean index_has_long_column = false;
1: 
1: 
1: 		// bump the page size for the index,
1: 		// if the approximate sizes of the columns in the key are
1: 		// greater than the bump threshold.
1: 		// Ideally, we would want to have atleast 2 or 3 keys fit in one page
1: 		// With fix for beetle 5728, indexes on long types is not allowed
1: 		// so we do not have to consider key columns of long types
1: 		for (int i = 0; i < columnCount; i++)
1: 		{
1: 			ColumnDescriptor columnDescriptor = td.getColumnDescriptor(columnNames[i]);
1: 			DataTypeDescriptor dts = columnDescriptor.getType();
1: 			approxLength += dts.getTypeId().getApproximateLengthInBytes(dts);
1: 		}
1: 
1: 
1:         if (approxLength > Property.IDX_PAGE_SIZE_BUMP_THRESHOLD)
1:         {
1: 
1:             if (((properties == null) ||
1:                  (properties.get(Property.PAGE_SIZE_PARAMETER) == null)) &&
1:                 (PropertyUtil.getServiceProperty(
1:                      getLanguageConnectionContext().getTransactionCompile(),
1:                      Property.PAGE_SIZE_PARAMETER) == null))
1:             {
1:                 // do not override the user's choice of page size, whether it
1:                 // is set for the whole database or just set on this statement.
1: 
1:                 if (properties == null)
1:                     properties = new Properties();
1: 
1:                 properties.put(
1:                     Property.PAGE_SIZE_PARAMETER,
1:                     Property.PAGE_SIZE_DEFAULT_LONG);
1: 
1:             }
1:         }
1: 
1: 
0: 		return	getGenericConstantActionFactory().getCreateIndexConstantAction(unique,
0: 											  indexType,
0: 											  sd.getSchemaName(),
0: 											  indexName.getTableName(),
0: 											  tableName.getTableName(),
0: 											  td.getUUID(),
0: 											  conglomId,
0: 											  columnNames,
0: 											  isAscending,
0: 											  false,
0: 											  null,
0: 											  properties);
1: 	}
1: 
1: 	/**
1: 	 * Check the uniqueness of the column names within the derived column list.
1: 	 *
0: 	 * @return None.
1: 	 *
1: 	 * @exception StandardException	Thrown if column list contains a
1: 	 *											duplicate name.
1: 	 */
1: 	private void verifyAndGetUniqueNames()
1: 				throws StandardException
1: 	{
1: 		int size = columnNameList.size();
0: 		Hashtable	ht = new Hashtable(size + 2, (float) .999);
1: 		columnNames = new String[size];
1: 		isAscending = new boolean[size];
1: 
1: 		for (int index = 0; index < size; index++)
1: 		{
1: 			/* Verify that this column's name is unique within the list
1: 			 * Having a space at the end meaning descending on the column
1: 			 */
0: 			columnNames[index] = (String) columnNameList.elementAt(index);
1: 			if (columnNames[index].endsWith(" "))
1: 			{
1: 				columnNames[index] = columnNames[index].substring(0, columnNames[index].length() - 1);
1: 				isAscending[index] = false;
1: 			}
1: 			else
1: 				isAscending[index] = true;
1: 
0: 			Object object = ht.put(columnNames[index], columnNames[index]);
1: 
0: 			if (object != null &&
0: 				((String) object).equals(columnNames[index]))
1: 			{
1: 				throw StandardException.newException(SQLState.LANG_DUPLICATE_COLUMN_NAME_CREATE_INDEX, columnNames[index]);
1: 			}
1: 		}
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:b1f84c1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.Limits;
/////////////////////////////////////////////////////////////////////////
1: 		if (td.getTotalNumberOfIndexes() > Limits.DB2_MAX_INDEXES_ON_TABLE)
1: 				String.valueOf(Limits.DB2_MAX_INDEXES_ON_TABLE));
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.reference.DB2Limit;
0: import org.apache.derby.iapi.reference.Property;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: import org.apache.derby.iapi.services.property.PropertyUtil;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
0: import org.apache.derby.impl.sql.execute.BaseActivation;
0: import org.apache.derby.impl.sql.execute.ColumnInfo;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: import org.apache.derby.catalog.UUID;
0: 
0: import java.util.Hashtable;
0: import java.util.Properties;
0: import java.util.Vector;
0: 
0: /**
0:  * A CreateIndexNode is the root of a QueryTree that represents a CREATE INDEX
0:  * statement.
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public class CreateIndexNode extends CreateStatementNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	boolean				unique;
0: 	DataDictionary		dd = null;
0: 	Properties			properties;
0: 	String				indexType;
0: 	TableName			indexName;
0: 	TableName			tableName;
0: 	Vector				columnNameList;
0: 	String[]			columnNames = null;
0: 	boolean[]			isAscending;
0: 	int[]				boundColumnIDs;
0: 
0: 	TableDescriptor		td;
0: 
0: 	/**
0: 	 * Initializer for a CreateIndexNode
0: 	 *
0: 	 * @param unique	True means it's a unique index
0: 	 * @param indexType	The type of index
0: 	 * @param indexName	The name of the index
0: 	 * @param tableName	The name of the table the index will be on
0: 	 * @param columnNameList	A list of column names, in the order they
0: 	 *							appear in the index.
0: 	 * @param properties	The optional properties list associated with the index.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void init(
0: 					Object unique,
0: 					Object indexType,
0: 					Object indexName,
0: 					Object tableName,
0: 					Object columnNameList,
0: 					Object properties)
0: 		throws StandardException
0: 	{
0: 		initAndCheck(indexName);
0: 		this.unique = ((Boolean) unique).booleanValue();
0: 		this.indexType = (String) indexType;
0: 		this.indexName = (TableName) indexName;
0: 		this.tableName = (TableName) tableName;
0: 		this.columnNameList = (Vector) columnNameList;
0: 		this.properties = (Properties) properties;
0: 	}
0: 
0: 	/**
0: 	 * Convert this object to a String.  See comments in QueryTreeNode.java
0: 	 * for how this should be done for tree printing.
0: 	 *
0: 	 * @return	This object as a String
0: 	 */
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return super.toString() +
0: 				"unique: " + unique + "\n" +
0: 				"indexType: " + indexType + "\n" +
0: 				"indexName: " + indexName + "\n" +
0: 				"tableName: " + tableName + "\n" +
0: 				"properties: " + properties + "\n";
0: 		}
0: 		else
0: 		{
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String statementToString()
0: 	{
0: 		return "CREATE INDEX";
0: 	}
0: 
0: 
0: 	public	boolean				getUniqueness() { return unique; }
0: 	public	String				getIndexType() { return indexType; }
0: 	public	TableName			getIndexName() { return indexName; }
0: 	public	UUID				getBoundTableID() { return td.getUUID(); }
0:     public	Properties			getProperties() { return properties; }
0: 	public  TableName			getIndexTableName() {return tableName; }
0: 	public  String[]			getColumnNames() { return columnNames; }
0: 
0: 	// get 1-based column ids
0: 	public	int[]				getKeyColumnIDs() { return boundColumnIDs; }
0: 	public	boolean[]			getIsAscending() { return isAscending; }
0: 
0: 	// We inherit the generate() method from DDLStatementNode.
0: 
0: 	/**
0: 	 * Bind this CreateIndexNode.  This means doing any static error
0: 	 * checking that can be done before actually creating the table.
0: 	 * For example, verifying that the column name list does not
0: 	 * contain any duplicate column names.
0: 	 *
0: 	 * @return	The bound query tree
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public QueryTreeNode bind() throws StandardException
0: 	{
0: 		CompilerContext			cc = getCompilerContext();
0: 		DataDictionary			dd = getDataDictionary();
0: 		SchemaDescriptor		sd;
0: 		int						columnCount;
0: 
0: 		sd = getSchemaDescriptor();
0: 
0: 		td = getTableDescriptor(tableName);
0: 
0: 		//throw an exception if user is attempting to create an index on a temporary table
0: 		if (td.getTableType() == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE)
0: 		{
0: 				throw StandardException.newException(SQLState.LANG_NOT_ALLOWED_FOR_DECLARED_GLOBAL_TEMP_TABLE);
0: 		}
0: 
0: 		//If total number of indexes on the table so far is more than 32767, then we need to throw an exception
0: 		if (td.getTotalNumberOfIndexes() > DB2Limit.DB2_MAX_INDEXES_ON_TABLE)
0: 		{
0: 			throw StandardException.newException(SQLState.LANG_TOO_MANY_INDEXES_ON_TABLE,
0: 				String.valueOf(td.getTotalNumberOfIndexes()),
0: 				tableName,
0: 				String.valueOf(DB2Limit.DB2_MAX_INDEXES_ON_TABLE));
0: 		}
0: 
0: 		/* Validate the column name list */
0: 		verifyAndGetUniqueNames();
0: 
0: 		columnCount = columnNames.length;
0: 		boundColumnIDs = new int[ columnCount ];
0: 
0: 		// Verify that the columns exist
0: 		for (int i = 0; i < columnCount; i++)
0: 		{
0: 			ColumnDescriptor			columnDescriptor;
0: 
0: 			columnDescriptor = td.getColumnDescriptor(columnNames[i]);
0: 			if (columnDescriptor == null)
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,
0: 															columnNames[i],
0: 															tableName);
0: 			}
0: 			boundColumnIDs[ i ] = columnDescriptor.getPosition();
0: 
0: 			// Don't allow a column to be created on a non-orderable type
0: 			if ( ! columnDescriptor.getType().getTypeId().
0: 												orderable(getClassFactory()))
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_COLUMN_NOT_ORDERABLE_DURING_EXECUTION,
0: 					columnDescriptor.getType().getTypeId().getSQLTypeName());
0: 			}
0: 		}
0: 
0: 		/* Check for number of key columns to be less than 16 to match DB2 */
0: 		if (columnCount > 16)
0: 			throw StandardException.newException(SQLState.LANG_TOO_MANY_INDEX_KEY_COLS);
0: 
0: 		/* See if the index already exists in this schema.
0: 		 * NOTE: We still need to check at execution time
0: 		 * since the index name is only unique to the schema,
0: 		 * not the table.
0: 		 */
0: //  		if (dd.getConglomerateDescriptor(indexName.getTableName(), sd, false) != null)
0: //  		{
0: //  			throw StandardException.newException(SQLState.LANG_OBJECT_ALREADY_EXISTS_IN_OBJECT,
0: //  												 "Index",
0: //  												 indexName.getTableName(),
0: //  												 "schema",
0: //  												 sd.getSchemaName());
0: //  		}
0: 
0: 		/* Statement is dependent on the TableDescriptor */
0: 		getCompilerContext().createDependency(td);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Return true if the node references SESSION schema tables (temporary or permanent)
0: 	 *
0: 	 * @return	true if references SESSION schema tables, else false
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public boolean referencesSessionSchema()
0: 		throws StandardException
0: 	{
0: 		//If create index is on a SESSION schema table, then return true.
0: 		return isSessionSchema(td.getSchemaName());
0: 	}
0: 
0: 	/**
0: 	 * Create the Constant information that will drive the guts of Execution.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public ConstantAction	makeConstantAction() throws StandardException
0: 	{
0:         long 					conglomId = 0;
0: 		SchemaDescriptor		sd = getSchemaDescriptor();
0: 
0: 		int columnCount = columnNames.length;
0: 		int approxLength = 0;
0: 		boolean index_has_long_column = false;
0: 
0: 
0: 		// bump the page size for the index,
0: 		// if the approximate sizes of the columns in the key are
0: 		// greater than the bump threshold.
0: 		// Ideally, we would want to have atleast 2 or 3 keys fit in one page
0: 		// With fix for beetle 5728, indexes on long types is not allowed
0: 		// so we do not have to consider key columns of long types
0: 		for (int i = 0; i < columnCount; i++)
0: 		{
0: 			ColumnDescriptor columnDescriptor = td.getColumnDescriptor(columnNames[i]);
0: 			DataTypeDescriptor dts = columnDescriptor.getType();
0: 			approxLength += dts.getTypeId().getApproximateLengthInBytes(dts);
0: 		}
0: 
0: 
0:         if (approxLength > Property.IDX_PAGE_SIZE_BUMP_THRESHOLD)
0:         {
0: 
0:             if (((properties == null) ||
0:                  (properties.get(Property.PAGE_SIZE_PARAMETER) == null)) &&
0:                 (PropertyUtil.getServiceProperty(
0:                      getLanguageConnectionContext().getTransactionCompile(),
0:                      Property.PAGE_SIZE_PARAMETER) == null))
0:             {
0:                 // do not override the user's choice of page size, whether it
0:                 // is set for the whole database or just set on this statement.
0: 
0:                 if (properties == null)
0:                     properties = new Properties();
0: 
0:                 properties.put(
0:                     Property.PAGE_SIZE_PARAMETER,
0:                     Property.PAGE_SIZE_DEFAULT_LONG);
0: 
0:             }
0:         }
0: 
0: 
0: 		return	getGenericConstantActionFactory().getCreateIndexConstantAction(unique,
0: 											  indexType,
0: 											  sd.getSchemaName(),
0: 											  indexName.getTableName(),
0: 											  tableName.getTableName(),
0: 											  td.getUUID(),
0: 											  conglomId,
0: 											  columnNames,
0: 											  isAscending,
0: 											  false,
0: 											  null,
0: 											  properties);
0: 	}
0: 
0: 	/**
0: 	 * Check the uniqueness of the column names within the derived column list.
0: 	 *
0: 	 * @return None.
0: 	 *
0: 	 * @exception StandardException	Thrown if column list contains a
0: 	 *											duplicate name.
0: 	 */
0: 	private void verifyAndGetUniqueNames()
0: 				throws StandardException
0: 	{
0: 		int size = columnNameList.size();
0: 		Hashtable	ht = new Hashtable(size + 2, (float) .999);
0: 		columnNames = new String[size];
0: 		isAscending = new boolean[size];
0: 
0: 		for (int index = 0; index < size; index++)
0: 		{
0: 			/* Verify that this column's name is unique within the list
0: 			 * Having a space at the end meaning descending on the column
0: 			 */
0: 			columnNames[index] = (String) columnNameList.elementAt(index);
0: 			if (columnNames[index].endsWith(" "))
0: 			{
0: 				columnNames[index] = columnNames[index].substring(0, columnNames[index].length() - 1);
0: 				isAscending[index] = false;
0: 			}
0: 			else
0: 				isAscending[index] = true;
0: 
0: 			Object object = ht.put(columnNames[index], columnNames[index]);
0: 
0: 			if (object != null &&
0: 				((String) object).equals(columnNames[index]))
0: 			{
0: 				throw StandardException.newException(SQLState.LANG_DUPLICATE_COLUMN_NAME_CREATE_INDEX, columnNames[index]);
0: 			}
0: 		}
0: 	}
0: }
============================================================================