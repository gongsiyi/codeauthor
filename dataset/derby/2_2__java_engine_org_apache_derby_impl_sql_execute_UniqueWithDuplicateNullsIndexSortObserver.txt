1:28e234d: /*
2:28e234d:  
1:28e234d:    Derby - Class org.apache.derby.impl.sql.execute.UniqueWithDuplicateNullsIndexSortObserver
1:28e234d:  
1:28e234d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:28e234d:    contributor license agreements.  See the NOTICE file distributed with
1:28e234d:    this work for additional information regarding copyright ownership.
1:28e234d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:28e234d:    (the "License"); you may not use this file except in compliance with
1:28e234d:    the License.  You may obtain a copy of the License at
1:28e234d:  
1:28e234d:       http://www.apache.org/licenses/LICENSE-2.0
1:28e234d:  
1:28e234d:    Unless required by applicable law or agreed to in writing, software
1:28e234d:    distributed under the License is distributed on an "AS IS" BASIS,
1:28e234d:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:28e234d:    See the License for the specific language governing permissions and
1:28e234d:    limitations under the License.
1:28e234d:  */
1:28e234d: 
1:28e234d: package org.apache.derby.impl.sql.execute;
1:28e234d: 
1:f6d02c9: import org.apache.derby.catalog.UUID;
1:28e234d: import org.apache.derby.iapi.error.StandardException;
1:28e234d: import org.apache.derby.iapi.reference.SQLState;
1:0c5bc3a: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:28e234d: import org.apache.derby.iapi.sql.execute.ExecRow;
1:0c5bc3a: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1:0c5bc3a: import org.apache.derby.iapi.store.access.TransactionController;
1:28e234d: import org.apache.derby.iapi.types.DataValueDescriptor;
1:28e234d: 
1:28e234d: /**
1:28e234d:  * UniqueWithDuplicateNullsIndexSortObserver is implementation of BasicSortObserver for
1:28e234d:  * eliminating non null duplicates from the backing index of unique constraint.
1:28e234d:  * This class is implemented to check for special case of distinct sorting where
1:28e234d:  * duplicate keys are allowed only if there is a null in the key part.
1:28e234d:  */
1:28e234d: public class UniqueWithDuplicateNullsIndexSortObserver extends BasicSortObserver {
1:28e234d:     
1:0c5bc3a:     private final String                    indexOrConstraintName;
1:0c5bc3a:     private final String                    tableName;
1:0c5bc3a:     private final boolean                   deferrable;
1:0c5bc3a:     private final boolean                   deferred;
1:0c5bc3a:     private final LanguageConnectionContext lcc;
1:f6d02c9:     private final UUID                      constraintId;
1:af1c18c:     private BackingStoreHashtable           deferredDuplicates;
1:28e234d:     /**
1:28e234d:      * Constructs an object of UniqueWithDuplicateNullsIndexSortObserver
3:28e234d:      * 
1:0c5bc3a:      * @param lcc     Language Connection context
1:f6d02c9:      * @param constraintId Id of the constraint (only used for
1:f6d02c9:                       deferrable constraints)
1:28e234d:      * @param doClone If true, then rows that are retained
1:28e234d:      * 		by the sorter will be cloned.  This is needed
1:28e234d:      * 		if language is reusing row wrappers.
1:0c5bc3a:      * @param deferrable deferrable constraint
1:0c5bc3a:      * @param deferred constraint mode is deferred
1:28e234d:      * @param indexOrConstraintName name of index of constraint
1:28e234d:      * @param execRow	ExecRow to use as source of clone for store.
1:28e234d:      * @param reuseWrappers	Whether or not we can reuse the wrappers
1:28e234d:      * @param tableName name of the table
1:28e234d:      */
1:435735b:     public UniqueWithDuplicateNullsIndexSortObserver(
1:0c5bc3a:             LanguageConnectionContext lcc,
1:f6d02c9:             UUID constraintId,
1:0c5bc3a:             boolean doClone,
1:0c5bc3a:             boolean deferrable,
1:0c5bc3a:             boolean deferred,
1:0c5bc3a:             String  indexOrConstraintName,
1:0c5bc3a:             ExecRow execRow,
1:0c5bc3a:             boolean reuseWrappers,
1:0c5bc3a:             String  tableName) {
1:28e234d:         super(doClone, false, execRow, reuseWrappers);
1:0c5bc3a:         this.lcc = lcc;
1:f6d02c9:         this.constraintId = constraintId;
1:0c5bc3a:         this.deferrable = deferrable;
1:0c5bc3a:         this.deferred = deferred;
1:28e234d:         this.indexOrConstraintName = indexOrConstraintName;
1:28e234d:         this.tableName = tableName;
1:28e234d:     }
1:28e234d:     
1:28e234d:     /**
1:28e234d:      * Methods to check if the duplicate key can be inserted or not. It throws 
1:28e234d:      * exception if the duplicates has no null part in the key. 
1:28e234d:      * @param in new key
1:28e234d:      * @param dup the new key is duplicate of this key
1:435735b:      * @return DVD [] if there is at least one null in
1:0c5bc3a:      * the key else throws StandardException
1:28e234d:      * @throws StandardException is the duplicate key has all non null parts
1:28e234d:      */
1:0c5bc3a:     @Override
1:28e234d:     public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] in,
1:28e234d:             DataValueDescriptor[] dup) throws StandardException {
1:28e234d:         for (int i = 0; i < in.length; i++) {
1:28e234d:             if (in [i].isNull()) {
1:28e234d:                 return super.insertDuplicateKey(in, dup);
1:28e234d:             }
1:28e234d:         }
1:28e234d:         StandardException se = null;
1:28e234d:         se = StandardException.newException(
1:28e234d:                 SQLState.LANG_DUPLICATE_KEY_CONSTRAINT,
1:28e234d:                 indexOrConstraintName, tableName);
1:28e234d:         throw se;
1:28e234d:     }
1:0c5bc3a: 
1:0c5bc3a:     @Override
1:0c5bc3a:     public boolean deferred() {
1:0c5bc3a:         return deferred;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     @Override
1:0c5bc3a:     public boolean deferrable() {
1:0c5bc3a:         return deferrable;
1:0c5bc3a:     }
1:0c5bc3a: 
1:0c5bc3a:     @Override
1:0c5bc3a:     public void rememberDuplicate(DataValueDescriptor[] row)
1:0c5bc3a:             throws StandardException {
1:af1c18c:         deferredDuplicates = DeferredConstraintsMemory.rememberDuplicate(
1:af1c18c:                 lcc,
1:af1c18c:                 deferredDuplicates,
1:f6d02c9:                 constraintId,
1:af1c18c:                 row);
1:0c5bc3a:     }
1:0c5bc3a: 
1:28e234d: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:f6d02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.catalog.UUID;
/////////////////////////////////////////////////////////////////////////
1:     private final UUID                      constraintId;
1:      * @param constraintId Id of the constraint (only used for
1:                       deferrable constraints)
/////////////////////////////////////////////////////////////////////////
1:             UUID constraintId,
/////////////////////////////////////////////////////////////////////////
1:         this.constraintId = constraintId;
/////////////////////////////////////////////////////////////////////////
1:                 constraintId,
commit:af1c18c
/////////////////////////////////////////////////////////////////////////
1:     private BackingStoreHashtable           deferredDuplicates;
/////////////////////////////////////////////////////////////////////////
1:         deferredDuplicates = DeferredConstraintsMemory.rememberDuplicate(
1:                 lcc,
1:                 deferredDuplicates,
0:                 indexCID,
1:                 row);
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.store.access.BackingStoreHashtable;
1: import org.apache.derby.iapi.store.access.TransactionController;
/////////////////////////////////////////////////////////////////////////
1:     private final String                    indexOrConstraintName;
1:     private final String                    tableName;
1:     private final boolean                   deferrable;
1:     private final boolean                   deferred;
0:     private final TransactionController     tc;
1:     private final LanguageConnectionContext lcc;
0:     private final long                      indexCID;
0:     private BackingStoreHashtable           deferredRowsHashTable;
0:      * @param tc      Transaction controller
1:      * @param lcc     Language Connection context
0:      * @param indexCID Conglomerate id if the index
1:      * @param deferrable deferrable constraint
1:      * @param deferred constraint mode is deferred
0:             TransactionController tc,
1:             LanguageConnectionContext lcc,
0:             long indexCID,
1:             boolean doClone,
1:             boolean deferrable,
1:             boolean deferred,
1:             String  indexOrConstraintName,
1:             ExecRow execRow,
1:             boolean reuseWrappers,
1:             String  tableName) {
0:         this.tc = tc;
1:         this.lcc = lcc;
0:         this.indexCID = indexCID;
1:         this.deferrable = deferrable;
1:         this.deferred = deferred;
/////////////////////////////////////////////////////////////////////////
1:      * the key else throws StandardException
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean deferred() {
1:         return deferred;
1:     }
1: 
1:     @Override
1:     public boolean deferrable() {
1:         return deferrable;
1:     }
1: 
1:     @Override
1:     public void rememberDuplicate(DataValueDescriptor[] row)
1:             throws StandardException {
0:         deferredRowsHashTable = DeferredDuplicates.rememberDuplicate(
0:                     tc,
0:                     indexCID,
0:                     deferredRowsHashTable,
0:                     lcc,
0:                     row);
1:     }
1: 
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:435735b
/////////////////////////////////////////////////////////////////////////
1:     public UniqueWithDuplicateNullsIndexSortObserver(
0:     boolean doClone, 
0:     boolean isConstraint,
0:     String  indexOrConstraintName, 
0:     ExecRow execRow,
0:     boolean reuseWrappers, 
0:     String  tableName) {
/////////////////////////////////////////////////////////////////////////
1:      * @return DVD [] if there is at least one null in
commit:28e234d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.derby.impl.sql.execute.UniqueWithDuplicateNullsIndexSortObserver
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
1: /**
1:  * UniqueWithDuplicateNullsIndexSortObserver is implementation of BasicSortObserver for
1:  * eliminating non null duplicates from the backing index of unique constraint.
1:  * This class is implemented to check for special case of distinct sorting where
1:  * duplicate keys are allowed only if there is a null in the key part.
1:  */
1: public class UniqueWithDuplicateNullsIndexSortObserver extends BasicSortObserver {
1:     
0:     private boolean		isConstraint;
0:     private String		indexOrConstraintName;
0:     private String 		tableName;
1:     
1:     /**
1:      * Constructs an object of UniqueWithDuplicateNullsIndexSortObserver
1:      * 
1:      * 
1:      * 
1:      * @param doClone If true, then rows that are retained
1:      * 		by the sorter will be cloned.  This is needed
1:      * 		if language is reusing row wrappers.
0:      * @param isConstraint is this part of a constraint
1:      * @param indexOrConstraintName name of index of constraint
0:      * @param distinct	If true, toss out duplicates.
0:      * 		Otherwise, retain them.
1:      * @param execRow	ExecRow to use as source of clone for store.
1:      * @param reuseWrappers	Whether or not we can reuse the wrappers
1:      * @param tableName name of the table
1:      */
0:     public UniqueWithDuplicateNullsIndexSortObserver(boolean doClone, boolean isConstraint,
0:             String indexOrConstraintName, ExecRow execRow,
0:             boolean reuseWrappers, String tableName) {
1:         super(doClone, false, execRow, reuseWrappers);
0:         this.isConstraint = isConstraint;
1:         this.indexOrConstraintName = indexOrConstraintName;
1:         this.tableName = tableName;
1:     }
1:     
1:     /**
1:      * Methods to check if the duplicate key can be inserted or not. It throws 
1:      * exception if the duplicates has no null part in the key. 
1:      * @param in new key
1:      * @param dup the new key is duplicate of this key
0:      * @returns DVD [] if there is at least one null in
0:      * the key else thorws StandardException
1:      * @throws StandardException is the duplicate key has all non null parts
1:      */
1:     public DataValueDescriptor[] insertDuplicateKey(DataValueDescriptor[] in,
1:             DataValueDescriptor[] dup) throws StandardException {
1:         for (int i = 0; i < in.length; i++) {
1:             if (in [i].isNull()) {
1:                 return super.insertDuplicateKey(in, dup);
1:             }
1:         }
1:         StandardException se = null;
1:         se = StandardException.newException(
1:                 SQLState.LANG_DUPLICATE_KEY_CONSTRAINT,
1:                 indexOrConstraintName, tableName);
1:         throw se;
1:     }
1: }
============================================================================