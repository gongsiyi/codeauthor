1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerBasicOperation
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerHandle;
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.LockingPolicy;
1:eac0369: import org.apache.derby.iapi.store.raw.Transaction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.CompressedNumber;
1:eac0369: import org.apache.derby.iapi.util.ByteArray;
1:eac0369: 
1:eac0369: import java.io.OutputStream;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.IOException;
1:eac0369: 
2:eac0369: /** 
1:eac0369: A Container Operation change the state of the container.
1:eac0369: A ContainerBasicOperation is the base class for all container operations.
1:eac0369: */
1:eac0369: 
1:eac0369: public abstract class ContainerBasicOperation implements Loggable
1:eac0369: {
1:eac0369: 	/* page info this operation changed */
1:eac0369: 	private long containerVersion;
1:eac0369: 	protected ContainerKey containerId;
1:eac0369: 
1:eac0369: 	transient protected RawContainerHandle containerHdl = null;
1:eac0369: 	transient private boolean foundHere = false;
1:eac0369: 
1:eac0369: 	protected ContainerBasicOperation(RawContainerHandle hdl) throws StandardException
1:eac0369: 	{
1:eac0369: 		containerHdl = hdl;
1:eac0369: 		containerId = hdl.getId();
1:eac0369: 		containerVersion = hdl.getContainerVersion();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Formatable methods
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	// no-arg constructor, required by Formatable
1:eac0369: 	public ContainerBasicOperation() { super(); }
1:eac0369: 
1:eac0369: 	public void writeExternal(ObjectOutput out) throws IOException
1:eac0369: 	{
1:eac0369: 		containerId.writeExternal(out);
1:eac0369: 		CompressedNumber.writeLong(out, containerVersion);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void readExternal(ObjectInput in) 
1:eac0369: 		 throws IOException, ClassNotFoundException 
1:eac0369: 	{
1:eac0369: 		containerId = ContainerKey.read(in);
1:eac0369: 		containerVersion = CompressedNumber.readLong(in);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Loggable methods
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		the default for prepared log is always null for all the operations
1:eac0369: 		that don't have optionalData.  If an operation has optional data,
1:eac0369: 		the operation need to prepare the optional data for this method.
1:eac0369: 
1:eac0369: 		Space Operation has no optional data to write out
1:eac0369: 	*/
1:eac0369: 	public ByteArray getPreparedLog()
1:eac0369: 	{
1:eac0369: 		return (ByteArray) null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public void releaseResource(Transaction tran)
1:eac0369: 	{
1:eac0369: 		if (!foundHere)
1:eac0369: 			return;
1:eac0369: 
1:eac0369: 		if (containerHdl != null)
1:eac0369: 		{
1:eac0369: 			containerHdl.close();
1:eac0369: 			containerHdl = null;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		foundHere = false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		A space operation is a RAWSTORE log record
1:eac0369: 	*/
1:eac0369: 	public int group()
1:eac0369: 	{
1:eac0369: 		return Loggable.RAWSTORE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Methods specific to this class
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Open the container with this segmentId and containerId.
1:eac0369: 	  This method should only be called if the container has already been
1:eac0369: 	  created.
1:eac0369: 
1:eac0369: 	  @exception StandardException the container cannot be found or cannot be
1:eac0369: 	  opened.
1:eac0369: 	 */
1:eac0369: 	protected RawContainerHandle findContainer(Transaction tran)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		releaseResource(tran);
1:eac0369: 
1:eac0369: 		RawTransaction rtran = (RawTransaction)tran;
1:eac0369: 		containerHdl = rtran.openDroppedContainer(
1:eac0369: 			containerId, (LockingPolicy) null);
1:eac0369: 
1:eac0369: 		//If we are in roll forward recovery, missing container will be
1:eac0369: 		//recreated becuase we might have hit a log record which has a 
1:eac0369: 		//reused the container id that was dropped earlier.
1:eac0369: 		if (rtran.inRollForwardRecovery())
1:eac0369: 		{
1:eac0369: 			if (containerHdl == null)
1:eac0369: 			{
1:eac0369: 				if (SanityManager.DEBUG) 
1:f57b07d:                 {
1:eac0369: 					if(SanityManager.DEBUG_ON("LoadTran"))
1:f57b07d:                     {
1:f57b07d: 						SanityManager.DEBUG_PRINT(
1:f57b07d:                             "Trace", 
1:f57b07d:                             "cannot find container " + containerId + 
1:f57b07d:                                   ", now attempt last ditch effort");
1:f57b07d:                     }
1:f57b07d:                 }
1:eac0369: 				
1:eac0369: 
1:f57b07d: 				containerHdl = findContainerForRedoRecovery(rtran);
1:eac0369: 
1:eac0369: 				if (SanityManager.DEBUG) 
1:f57b07d:                 {
1:eac0369: 					if(SanityManager.DEBUG_ON("LoadTran"))
1:f57b07d:                     {
1:eac0369: 						SanityManager.DEBUG_PRINT("Trace",
1:f57b07d:                             " findContainerForRedoRecovery, got container=" + 
1:f57b07d:                             (containerHdl != null));
1:f57b07d:                     }
1:f57b07d:                 }
1:eac0369: 
1:eac0369: 			}
1:eac0369: 		}	
1:eac0369:         
1:eac0369: 		if (containerHdl == null)
1:eac0369:         {
1:eac0369: 			throw StandardException.newException(
1:eac0369:                     SQLState.DATA_CONTAINER_VANISHED, containerId);
1:eac0369:         }
1:eac0369: 
1:eac0369: 		foundHere = true;
1:eac0369: 		return containerHdl;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Subclass (e.g., ContainerOperation) that wishes to do something abou
1:eac0369: 		missing container in load tran should override this method to return
1:eac0369: 		the recreated container
1:eac0369: 
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	 */
1:f57b07d: 	protected RawContainerHandle findContainerForRedoRecovery(
1:f57b07d:     RawTransaction tran) 
1:eac0369: 		 throws StandardException 
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 
1:eac0369: 	/**
1:94f158a: 		@exception StandardException Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public boolean needsRedo(Transaction xact)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		findContainer(xact);
1:eac0369: 
1:eac0369: 		long cVersion = containerHdl.getContainerVersion();
1:eac0369: 
1:eac0369: 		if (cVersion == containerVersion)
1:eac0369: 			return true;
1:eac0369: 
1:eac0369: 		releaseResource(xact);
1:eac0369: 
1:eac0369: 		if (cVersion > containerVersion)
1:eac0369: 			return false;
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			// RESOLVE - correct error handling
1:eac0369:             if (SanityManager.DEBUG)
1:eac0369:             {
1:eac0369:     			SanityManager.THROWASSERT("log corrupted, missing log record: "+
1:eac0369: 										  "log container version = " +
1:eac0369: 										  containerVersion + 
1:eac0369: 										  " container header version " + cVersion);
1:eac0369:     		}
1:eac0369: 			return false;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: 
1:eac0369: 	public String toString()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			return "Space Operation: " + containerId ;
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 			return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
1:eac0369: 
1:eac0369: 
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:f57b07d
/////////////////////////////////////////////////////////////////////////
1:                 {
1:                     {
1: 						SanityManager.DEBUG_PRINT(
1:                             "Trace", 
1:                             "cannot find container " + containerId + 
1:                                   ", now attempt last ditch effort");
1:                     }
1:                 }
1: 				containerHdl = findContainerForRedoRecovery(rtran);
1:                 {
1:                     {
1:                             " findContainerForRedoRecovery, got container=" + 
1:                             (containerHdl != null));
1:                     }
1:                 }
/////////////////////////////////////////////////////////////////////////
1: 	protected RawContainerHandle findContainerForRedoRecovery(
1:     RawTransaction tran) 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.ContainerBasicOperation
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
1: import org.apache.derby.iapi.store.raw.ContainerHandle;
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.LockingPolicy;
1: import org.apache.derby.iapi.store.raw.Transaction;
1: 
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.io.CompressedNumber;
1: import org.apache.derby.iapi.util.ByteArray;
1: 
1: import java.io.OutputStream;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
1: import java.io.IOException;
1: 
1: /** 
1: A Container Operation change the state of the container.
1: A ContainerBasicOperation is the base class for all container operations.
1: */
1: 
1: public abstract class ContainerBasicOperation implements Loggable
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/* page info this operation changed */
1: 	private long containerVersion;
1: 	protected ContainerKey containerId;
1: 
1: 	transient protected RawContainerHandle containerHdl = null;
1: 	transient private boolean foundHere = false;
1: 
1: 	protected ContainerBasicOperation(RawContainerHandle hdl) throws StandardException
1: 	{
1: 		containerHdl = hdl;
1: 		containerId = hdl.getId();
1: 		containerVersion = hdl.getContainerVersion();
1: 	}
1: 
1: 	/*
1: 	 * Formatable methods
1: 	 */
1: 
1: 	// no-arg constructor, required by Formatable
1: 	public ContainerBasicOperation() { super(); }
1: 
1: 	public void writeExternal(ObjectOutput out) throws IOException
1: 	{
1: 		containerId.writeExternal(out);
1: 		CompressedNumber.writeLong(out, containerVersion);
1: 	}
1: 
1: 	public void readExternal(ObjectInput in) 
1: 		 throws IOException, ClassNotFoundException 
1: 	{
1: 		containerId = ContainerKey.read(in);
1: 		containerVersion = CompressedNumber.readLong(in);
1: 	}
1: 
1: 
1: 	/**
1: 		Loggable methods
1: 	*/
1: 
1: 	/**
1: 		the default for prepared log is always null for all the operations
1: 		that don't have optionalData.  If an operation has optional data,
1: 		the operation need to prepare the optional data for this method.
1: 
1: 		Space Operation has no optional data to write out
1: 	*/
1: 	public ByteArray getPreparedLog()
1: 	{
1: 		return (ByteArray) null;
1: 	}
1: 
1: 	public void releaseResource(Transaction tran)
1: 	{
1: 		if (!foundHere)
1: 			return;
1: 
1: 		if (containerHdl != null)
1: 		{
1: 			containerHdl.close();
1: 			containerHdl = null;
1: 		}
1: 
1: 		foundHere = false;
1: 	}
1: 
1: 	/**
1: 		A space operation is a RAWSTORE log record
1: 	*/
1: 	public int group()
1: 	{
1: 		return Loggable.RAWSTORE;
1: 	}
1: 
1: 	/**
1: 		Methods specific to this class
1: 	*/
1: 
1: 	/**
1: 	  Open the container with this segmentId and containerId.
1: 	  This method should only be called if the container has already been
1: 	  created.
1: 
1: 	  @exception StandardException the container cannot be found or cannot be
1: 	  opened.
1: 	 */
1: 	protected RawContainerHandle findContainer(Transaction tran)
1: 		 throws StandardException
1: 	{
1: 		releaseResource(tran);
1: 
1: 		RawTransaction rtran = (RawTransaction)tran;
1: 		containerHdl = rtran.openDroppedContainer(
1: 			containerId, (LockingPolicy) null);
1: 
1: 		//If we are in roll forward recovery, missing container will be
1: 		//recreated becuase we might have hit a log record which has a 
1: 		//reused the container id that was dropped earlier.
1: 		if (rtran.inRollForwardRecovery())
1: 		{
1: 			if (containerHdl == null)
1: 			{
1: 				if (SanityManager.DEBUG) 
1: 					if(SanityManager.DEBUG_ON("LoadTran"))
0: 						SanityManager.DEBUG_PRINT("Trace", "cannot find container " + containerId + 
0: 												  ", now attempt last ditch effort");
1: 				
1: 
0: 				containerHdl = findContainerForLoadTran(rtran);
1: 
1: 				if (SanityManager.DEBUG) 
1: 					if(SanityManager.DEBUG_ON("LoadTran"))
1: 						SanityManager.DEBUG_PRINT("Trace",
0: 												  " findContainerForLoadTran, got container=" +
0: 												  (containerHdl != null));
1: 
1: 			}
1: 		}	
1:         
1: 		if (containerHdl == null)
1:         {
1: 			throw StandardException.newException(
1:                     SQLState.DATA_CONTAINER_VANISHED, containerId);
1:         }
1: 
1: 		foundHere = true;
1: 		return containerHdl;
1: 	}
1: 
1: 	/**
1: 		Subclass (e.g., ContainerOperation) that wishes to do something abou
1: 		missing container in load tran should override this method to return
1: 		the recreated container
1: 
0: 		@exception StandardException Cloudscape Standard error policy
1: 	 */
0: 	protected RawContainerHandle findContainerForLoadTran(RawTransaction tran) 
1: 		 throws StandardException 
1: 	{
1: 		return null;
1: 	}
1: 	
1: 
1: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
1: 	*/
1: 	public boolean needsRedo(Transaction xact)
1: 		 throws StandardException
1: 	{
1: 		findContainer(xact);
1: 
1: 		long cVersion = containerHdl.getContainerVersion();
1: 
1: 		if (cVersion == containerVersion)
1: 			return true;
1: 
1: 		releaseResource(xact);
1: 
1: 		if (cVersion > containerVersion)
1: 			return false;
1: 		else
1: 		{
1: 			// RESOLVE - correct error handling
1:             if (SanityManager.DEBUG)
1:             {
1:     			SanityManager.THROWASSERT("log corrupted, missing log record: "+
1: 										  "log container version = " +
1: 										  containerVersion + 
1: 										  " container header version " + cVersion);
1:     		}
1: 			return false;
1: 		}
1: 	}
1: 
1: 
1: 	public String toString()
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			return "Space Operation: " + containerId ;
1: 		}
1: 		else
1: 			return null;
1: 	}
1: 
1: }
1: 
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import org.apache.derby.iapi.store.raw.ContainerHandle;
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.LockingPolicy;
0: import org.apache.derby.iapi.store.raw.Transaction;
0: 
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.io.CompressedNumber;
0: import org.apache.derby.iapi.util.ByteArray;
0: 
0: import java.io.OutputStream;
0: import java.io.ObjectInput;
0: import java.io.ObjectOutput;
0: import java.io.IOException;
0: 
0: /** 
0: A Container Operation change the state of the container.
0: A ContainerBasicOperation is the base class for all container operations.
0: */
0: 
0: public abstract class ContainerBasicOperation implements Loggable
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/* page info this operation changed */
0: 	private long containerVersion;
0: 	protected ContainerKey containerId;
0: 
0: 	transient protected RawContainerHandle containerHdl = null;
0: 	transient private boolean foundHere = false;
0: 
0: 	protected ContainerBasicOperation(RawContainerHandle hdl) throws StandardException
0: 	{
0: 		containerHdl = hdl;
0: 		containerId = hdl.getId();
0: 		containerVersion = hdl.getContainerVersion();
0: 	}
0: 
0: 	/*
0: 	 * Formatable methods
0: 	 */
0: 
0: 	// no-arg constructor, required by Formatable
0: 	public ContainerBasicOperation() { super(); }
0: 
0: 	public void writeExternal(ObjectOutput out) throws IOException
0: 	{
0: 		containerId.writeExternal(out);
0: 		CompressedNumber.writeLong(out, containerVersion);
0: 	}
0: 
0: 	public void readExternal(ObjectInput in) 
0: 		 throws IOException, ClassNotFoundException 
0: 	{
0: 		containerId = ContainerKey.read(in);
0: 		containerVersion = CompressedNumber.readLong(in);
0: 	}
0: 
0: 
0: 	/**
0: 		Loggable methods
0: 	*/
0: 
0: 	/**
0: 		the default for prepared log is always null for all the operations
0: 		that don't have optionalData.  If an operation has optional data,
0: 		the operation need to prepare the optional data for this method.
0: 
0: 		Space Operation has no optional data to write out
0: 	*/
0: 	public ByteArray getPreparedLog()
0: 	{
0: 		return (ByteArray) null;
0: 	}
0: 
0: 	public void releaseResource(Transaction tran)
0: 	{
0: 		if (!foundHere)
0: 			return;
0: 
0: 		if (containerHdl != null)
0: 		{
0: 			containerHdl.close();
0: 			containerHdl = null;
0: 		}
0: 
0: 		foundHere = false;
0: 	}
0: 
0: 	/**
0: 		A space operation is a RAWSTORE log record
0: 	*/
0: 	public int group()
0: 	{
0: 		return Loggable.RAWSTORE;
0: 	}
0: 
0: 	/**
0: 		Methods specific to this class
0: 	*/
0: 
0: 	/**
0: 	  Open the container with this segmentId and containerId.
0: 	  This method should only be called if the container has already been
0: 	  created.
0: 
0: 	  @exception StandardException the container cannot be found or cannot be
0: 	  opened.
0: 	 */
0: 	protected RawContainerHandle findContainer(Transaction tran)
0: 		 throws StandardException
0: 	{
0: 		releaseResource(tran);
0: 
0: 		RawTransaction rtran = (RawTransaction)tran;
0: 		containerHdl = rtran.openDroppedContainer(
0: 			containerId, (LockingPolicy) null);
0: 
0: 		//If we are in roll forward recovery, missing container will be
0: 		//recreated becuase we might have hit a log record which has a 
0: 		//reused the container id that was dropped earlier.
0: 		if (rtran.inRollForwardRecovery())
0: 		{
0: 			if (containerHdl == null)
0: 			{
0: 				if (SanityManager.DEBUG) 
0: 					if(SanityManager.DEBUG_ON("LoadTran"))
0: 						SanityManager.DEBUG_PRINT("Trace", "cannot find container " + containerId + 
0: 												  ", now attempt last ditch effort");
0: 				
0: 
0: 				containerHdl = findContainerForLoadTran(rtran);
0: 
0: 				if (SanityManager.DEBUG) 
0: 					if(SanityManager.DEBUG_ON("LoadTran"))
0: 						SanityManager.DEBUG_PRINT("Trace",
0: 												  " findContainerForLoadTran, got container=" +
0: 												  (containerHdl != null));
0: 
0: 			}
0: 		}	
0:         
0: 		if (containerHdl == null)
0:         {
0: 			throw StandardException.newException(
0:                     SQLState.DATA_CONTAINER_VANISHED, containerId);
0:         }
0: 
0: 		foundHere = true;
0: 		return containerHdl;
0: 	}
0: 
0: 	/**
0: 		Subclass (e.g., ContainerOperation) that wishes to do something abou
0: 		missing container in load tran should override this method to return
0: 		the recreated container
0: 
0: 		@exception StandardException Cloudscape Standard error policy
0: 	 */
0: 	protected RawContainerHandle findContainerForLoadTran(RawTransaction tran) 
0: 		 throws StandardException 
0: 	{
0: 		return null;
0: 	}
0: 	
0: 
0: 	/**
0: 		@exception StandardException Standard Cloudscape error policy
0: 	*/
0: 	public boolean needsRedo(Transaction xact)
0: 		 throws StandardException
0: 	{
0: 		findContainer(xact);
0: 
0: 		long cVersion = containerHdl.getContainerVersion();
0: 
0: 		if (cVersion == containerVersion)
0: 			return true;
0: 
0: 		releaseResource(xact);
0: 
0: 		if (cVersion > containerVersion)
0: 			return false;
0: 		else
0: 		{
0: 			// RESOLVE - correct error handling
0:             if (SanityManager.DEBUG)
0:             {
0:     			SanityManager.THROWASSERT("log corrupted, missing log record: "+
0: 										  "log container version = " +
0: 										  containerVersion + 
0: 										  " container header version " + cVersion);
0:     		}
0: 			return false;
0: 		}
0: 	}
0: 
0: 
0: 	public String toString()
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			return "Space Operation: " + containerId ;
0: 		}
0: 		else
0: 			return null;
0: 	}
0: 
0: }
0: 
0: 
============================================================================