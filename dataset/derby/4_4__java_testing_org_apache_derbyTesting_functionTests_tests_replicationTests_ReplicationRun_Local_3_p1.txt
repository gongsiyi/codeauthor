1:f41a8a7: /*
3:f41a8a7:  
1:f41a8a7: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p1
1:f41a8a7:  
1:f41a8a7: Licensed to the Apache Software Foundation (ASF) under one or more
1:f41a8a7: contributor license agreements.  See the NOTICE file distributed with
1:f41a8a7: this work for additional information regarding copyright ownership.
1:f41a8a7: The ASF licenses this file to You under the Apache License, Version 2.0
1:f41a8a7: (the "License"); you may not use this file except in compliance with
1:f41a8a7: the License.  You may obtain a copy of the License at
1:f41a8a7:  
1:f41a8a7:    http://www.apache.org/licenses/LICENSE-2.0
1:f41a8a7:  
1:f41a8a7: Unless required by applicable law or agreed to in writing, software
1:f41a8a7: distributed under the License is distributed on an "AS IS" BASIS,
1:f41a8a7: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f41a8a7: See the License for the specific language governing permissions and
1:f41a8a7: limitations under the License.
1:f41a8a7:  
1:f41a8a7:  */
1:f41a8a7: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1:f41a8a7: 
1:f41a8a7: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:f41a8a7: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1:f41a8a7: 
1:f41a8a7: 
1:f41a8a7: /**
1:f41a8a7:  * Run a replication test on localhost
1:f41a8a7:  * by using default values for master and slave hosts,
1:f41a8a7:  * and master and slave ports.
1:c5935ad:  * Test that
1:c5935ad:  * - stopSlave is not accepted on replicating slave,
1:c5935ad:  * - stopSlave is not accepted on replicating master,
1:c5935ad:  * - stopMaster is accepted on replicating master,
1:c5935ad:  * - stopSlave is not accepted on non-replicating slave host,
1:c5935ad:  * - failOver is not accepted on non-replicating master host.
1:f41a8a7:  * 
1:f41a8a7:  */
1:f41a8a7: 
1:f41a8a7: public class ReplicationRun_Local_3_p1 extends ReplicationRun_Local_3
3:f41a8a7: {
1:f41a8a7:     
1:f41a8a7:     /**
1:f41a8a7:      * Creates a new instance of ReplicationRun_Local
1:f41a8a7:      * @param testcaseName Identifying the test.
1:f41a8a7:      */
1:f41a8a7:     public ReplicationRun_Local_3_p1(String testcaseName)
1:f41a8a7:     {
1:f41a8a7:         super(testcaseName);
3:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7:     public static Test suite()
1:f41a8a7:     {
1:1ae02c9:         BaseTestSuite suite =
1:1ae02c9:             new BaseTestSuite("ReplicationRun_Local_3_p1 Suite");
1:f41a8a7:         
1:f41a8a7:         suite.addTestSuite( ReplicationRun_Local_3_p1.class        );
1:f41a8a7:         
1:f41a8a7:         return SecurityManagerSetup.noSecurityManager(suite);
1:f41a8a7: 
1:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7:     //////////////////////////////////////////////////////////////
1:f41a8a7:     ////
1:f41a8a7:     //// The replication test framework (testReplication()):
1:f41a8a7:     //// a) "clean" replication run starting master and slave servers,
1:f41a8a7:     ////     preparing master and slave databases,
1:f41a8a7:     ////     starting and stopping replication and doing
1:f41a8a7:     ////     failover for a "normal"/"failure free" replication
1:f41a8a7:     ////     test run.
1:f41a8a7:     ////
1:f41a8a7:     //////////////////////////////////////////////////////////////
1:f41a8a7:     
1:f41a8a7:     public void testReplication_Local_3_p1_StateNegativeTests()
1:f41a8a7:     throws Exception
1:f41a8a7:     {
1:f41a8a7:         cleanAllTestHosts();
1:f41a8a7:         
1:f41a8a7:         initEnvironment();
1:f41a8a7:         
1:f41a8a7:         initMaster(masterServerHost,
1:f41a8a7:                 replicatedDb);
1:f41a8a7:         
1:136610d:         startServer(masterJvmVersion, derbyMasterVersion,
1:f41a8a7:                 masterServerHost,
1:f41a8a7:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:f41a8a7:                 masterServerPort,
1:f41a8a7:                 masterDbSubPath); // Distinguishing master/slave
1:f41a8a7:         
1:136610d:         startServer(slaveJvmVersion, derbySlaveVersion,
1:f41a8a7:                 slaveServerHost,
1:f41a8a7:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:f41a8a7:                 slaveServerPort,
1:f41a8a7:                 slaveDbSubPath); // Distinguishing master/slave
1:f41a8a7:         
1:f41a8a7:         startServerMonitor(slaveServerHost);
1:f41a8a7:         
1:f41a8a7:         bootMasterDatabase(jvmVersion,
1:f41a8a7:                 masterDatabasePath +FS+ masterDbSubPath,
1:f41a8a7:                 replicatedDb,
1:f41a8a7:                 masterServerHost, // Where the startreplication command must be given
1:f41a8a7:                 masterServerPort, // master server interface accepting client requests
1:f41a8a7:                 null // bootLoad, // The "test" to start when booting db.
1:f41a8a7:                 );
1:f41a8a7:         
1:f41a8a7:         // 4. separate test
1:f41a8a7:         // master db created...
1:f41a8a7:         // slave: connect 'startSlave=true;create=true'
1:f41a8a7:         assertException(
1:f41a8a7:         _startSlaveTrueAndCreateTrue(slaveServerHost, slaveServerPort,
1:f41a8a7:             masterDatabasePath +FS+ masterDbSubPath +FS+ replicatedDb),
1:f41a8a7:             "XRE10"); // REPLICATION_CONFLICTING_ATTRIBUTES // OK to continue.
1:f41a8a7:         
1:f41a8a7:         initSlave(slaveServerHost,
1:f41a8a7:                 jvmVersion,
1:f41a8a7:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:f41a8a7:         
1:f41a8a7:         startSlave(jvmVersion, replicatedDb,
1:f41a8a7:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:f41a8a7:                 slaveServerPort,
1:f41a8a7:                 slaveServerHost, // for slaveReplInterface
1:f41a8a7:                 slaveReplPort,
1:f41a8a7:                 testClientHost);
1:f41a8a7:         
1:f41a8a7:         startMaster(jvmVersion, replicatedDb,
1:f41a8a7:                 masterServerHost, // Where the startMaster command must be given
1:f41a8a7:                 masterServerPort, // master server interface accepting client requests
1:f41a8a7:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:f41a8a7:                 slaveServerPort, // Not used since slave don't allow clients.
1:f41a8a7:                 slaveServerHost, // for slaveReplInterface
1:f41a8a7:                 slaveReplPort);
1:f41a8a7:         
1:c5935ad:         replicationTest = null; // Used as a flag to verifyMaster and verifySlave!
1:c5935ad:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
1:f41a8a7:                 jvmVersion,
1:f41a8a7:                 testClientHost,
1:f41a8a7:                 masterServerHost, masterServerPort,
1:f41a8a7:                 replicatedDb);
1:f41a8a7:         
1:f41a8a7:         // 1. separate test
1:f41a8a7:         // slave: stopSlave
1:f41a8a7:         assertException(
1:dfbf41e:             stopSlave(slaveServerHost,
1:dfbf41e:                       slaveServerPort,
1:dfbf41e:                       slaveDatabasePath,
1:dfbf41e:                       replicatedDb,
1:dfbf41e:                       true),
1:f41a8a7:             "XRE41"); // SLAVE_OPERATION_DENIED_WHILE_CONNECTED // OK to continue
1:f41a8a7:        
1:f41a8a7:         // 2. separate test
1:f41a8a7:         // master: stopSlave
1:f41a8a7:         // master: stopMaster
1:f41a8a7:         // slave: stopSlave
1:f41a8a7:         assertException(
1:dfbf41e:             stopSlave(masterServerHost,
1:dfbf41e:                       masterServerPort,
1:dfbf41e:                       masterDatabasePath,
1:dfbf41e:                       masterDbSubPath,
1:dfbf41e:                       replicatedDb,
1:dfbf41e:                       true),
1:f41a8a7:             "XRE40"); //  REPLICATION_NOT_IN_SLAVE_MODE // OK to continue
1:f41a8a7:         assertException(
1:f41a8a7:             _stopMaster(masterServerHost, masterServerPort,
2:f41a8a7:                 masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb),
1:f41a8a7:             null); // Implies failover. // OK to continue. We have failover.
1:f41a8a7:         /* showCurrentState("Post stopMaster", 0L,
1:f41a8a7:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:f41a8a7:             slaveServerHost, slaveServerPort);
1:f41a8a7:         showCurrentState("Post stopMaster +1s", 1000L,
1:f41a8a7:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:f41a8a7:             slaveServerHost, slaveServerPort); */
1:f41a8a7:         waitForConnect(100L, 10, 
1:f41a8a7:                 slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:f41a8a7:                 slaveServerHost, slaveServerPort);
1:f41a8a7:         assertException(
1:dfbf41e:             stopSlave(slaveServerHost,
1:dfbf41e:                       slaveServerPort,
1:dfbf41e:                       slaveDatabasePath,
1:dfbf41e:                       replicatedDb,
1:dfbf41e:                       true),
1:f41a8a7:             "XRE40"); // REPLICATION_NOT_IN_SLAVE_MODE // OK to continue
1:f41a8a7:         /* showCurrentState("Post stopMaster, stopSlave", 0L,
1:f41a8a7:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:f41a8a7:             slaveServerHost, slaveServerPort);
1:f41a8a7:         showCurrentState("Post stopMaster, stopSlave +1s", 1000L,
1:f41a8a7:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:f41a8a7:             slaveServerHost, slaveServerPort); */
1:f41a8a7:         /* showCurrentState("Post stopMaster, stopSlave +1s", 0L,
1:f41a8a7:             masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb, 
1:f41a8a7:             masterServerHost, masterServerPort); */
1:f41a8a7:         waitForConnect(100L, 10, 
1:f41a8a7:                 masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb, 
1:f41a8a7:                 masterServerHost, masterServerPort);
1:f41a8a7:         
1:f41a8a7:         
1:f41a8a7:         /* BEGIN In ReplicationRun_Local_3_p2.java:
1:f41a8a7:         // 3. separate test
1:f41a8a7:         // stopMaster
1:f41a8a7:         // failover on slave
1:f41a8a7:         
1:f41a8a7:         // 5. separate test
1:f41a8a7:         // slave: "normal" connect to slave db
1:f41a8a7:         
1:f41a8a7:         // 6. separate test
1:f41a8a7:         // slave: 'internal-stopslave=true'
1:f41a8a7:         END */
1:f41a8a7:         
1:f41a8a7:         /* failOver(jvmVersion,
1:f41a8a7:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:f41a8a7:                 masterServerHost,  // Where the master db is run.
1:f41a8a7:                 masterServerPort,
1:f41a8a7:                 testClientHost);
1:f41a8a7:         */
1:f41a8a7:         assertException(
1:f41a8a7:             _failOver(masterServerHost, masterServerPort, 
1:f41a8a7:                 masterDatabasePath+FS+masterDbSubPath+FS+replicatedDb),
1:f41a8a7:             "XRE07"); // REPLICATION_NOT_IN_MASTER_MODE
1:f41a8a7:         
1:f41a8a7:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:f41a8a7:                 slaveServerHost,slaveServerPort,
1:f41a8a7:                 testClientHost);
1:f41a8a7:         
1:f41a8a7:         verifySlave();
1:f41a8a7:         
1:f41a8a7:         // We should verify the master as well, at least to see that we still can connect.
1:f41a8a7:         verifyMaster();
1:f41a8a7:         
1:f41a8a7:         stopServer(jvmVersion, derbyVersion,
1:f41a8a7:                 slaveServerHost, slaveServerPort);
1:f41a8a7:         
1:f41a8a7:         stopServer(jvmVersion, derbyVersion,
1:f41a8a7:                 masterServerHost, masterServerPort);
1:f41a8a7:         
1:f41a8a7:     }
1:f41a8a7:     
1:f41a8a7: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite =
1:             new BaseTestSuite("ReplicationRun_Local_3_p1 Suite");
commit:dfbf41e
/////////////////////////////////////////////////////////////////////////
1:             stopSlave(slaveServerHost,
1:                       slaveServerPort,
1:                       slaveDatabasePath,
1:                       replicatedDb,
1:                       true),
/////////////////////////////////////////////////////////////////////////
1:             stopSlave(masterServerHost,
1:                       masterServerPort,
1:                       masterDatabasePath,
1:                       masterDbSubPath,
1:                       replicatedDb,
1:                       true),
/////////////////////////////////////////////////////////////////////////
1:             stopSlave(slaveServerHost,
1:                       slaveServerPort,
1:                       slaveDatabasePath,
1:                       replicatedDb,
1:                       true),
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:136610d
/////////////////////////////////////////////////////////////////////////
1:         startServer(masterJvmVersion, derbyMasterVersion,
1:         startServer(slaveJvmVersion, derbySlaveVersion,
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:c5935ad
/////////////////////////////////////////////////////////////////////////
1:  * Test that
1:  * - stopSlave is not accepted on replicating slave,
1:  * - stopSlave is not accepted on replicating master,
1:  * - stopMaster is accepted on replicating master,
1:  * - stopSlave is not accepted on non-replicating slave host,
1:  * - failOver is not accepted on non-replicating master host.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         replicationTest = null; // Used as a flag to verifyMaster and verifySlave!
1:         runTest(replicationTest, // Returns immediatly if replicationTest is null.
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f41a8a7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1: Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p1
1:  
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1:  
1:    http://www.apache.org/licenses/LICENSE-2.0
1:  
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1:  
1:  */
1: package org.apache.derbyTesting.functionTests.tests.replicationTests;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.junit.SecurityManagerSetup;
1: 
1: 
1: /**
1:  * Run a replication test on localhost
1:  * by using default values for master and slave hosts,
1:  * and master and slave ports.
1:  * 
1:  */
1: 
1: public class ReplicationRun_Local_3_p1 extends ReplicationRun_Local_3
1: {
1:     
1:     /**
1:      * Creates a new instance of ReplicationRun_Local
1:      * @param testcaseName Identifying the test.
1:      */
1:     public ReplicationRun_Local_3_p1(String testcaseName)
1:     {
1:         super(testcaseName);
1:     }
1:     
0:     protected void setUp() throws Exception
1:     {
0:         super.setUp();
1:     }
1:     
0:     protected void tearDown() throws Exception
1:     {
0:         super.tearDown();
1:     }
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("ReplicationRun_Local_3_p1 Suite");
1:         
1:         suite.addTestSuite( ReplicationRun_Local_3_p1.class        );
1:         
1:         return SecurityManagerSetup.noSecurityManager(suite);
1: 
1:     }
1:     
1:     //////////////////////////////////////////////////////////////
1:     ////
1:     //// The replication test framework (testReplication()):
1:     //// a) "clean" replication run starting master and slave servers,
1:     ////     preparing master and slave databases,
1:     ////     starting and stopping replication and doing
1:     ////     failover for a "normal"/"failure free" replication
1:     ////     test run.
1:     ////
1:     //////////////////////////////////////////////////////////////
1:     
1:     public void testReplication_Local_3_p1_StateNegativeTests()
1:     throws Exception
1:     {
1:         cleanAllTestHosts();
1:         
1:         initEnvironment();
1:         
1:         initMaster(masterServerHost,
1:                 replicatedDb);
1:         
0:         masterServer = startServer(masterJvmVersion, derbyMasterVersion,
1:                 masterServerHost,
1:                 ALL_INTERFACES, // masterServerHost, // "0.0.0.0", // All. or use masterServerHost for interfacesToListenOn,
1:                 masterServerPort,
1:                 masterDbSubPath); // Distinguishing master/slave
1:         
0:         slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,
1:                 slaveServerHost,
1:                 ALL_INTERFACES, // slaveServerHost, // "0.0.0.0", // All. or use slaveServerHost for interfacesToListenOn,
1:                 slaveServerPort,
1:                 slaveDbSubPath); // Distinguishing master/slave
1:         
1:         startServerMonitor(slaveServerHost);
1:         
1:         bootMasterDatabase(jvmVersion,
1:                 masterDatabasePath +FS+ masterDbSubPath,
1:                 replicatedDb,
1:                 masterServerHost, // Where the startreplication command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 null // bootLoad, // The "test" to start when booting db.
1:                 );
1:         
1:         // 4. separate test
1:         // master db created...
1:         // slave: connect 'startSlave=true;create=true'
1:         assertException(
1:         _startSlaveTrueAndCreateTrue(slaveServerHost, slaveServerPort,
1:             masterDatabasePath +FS+ masterDbSubPath +FS+ replicatedDb),
1:             "XRE10"); // REPLICATION_CONFLICTING_ATTRIBUTES // OK to continue.
1:         
1:         initSlave(slaveServerHost,
1:                 jvmVersion,
1:                 replicatedDb); // Trunk and Prototype V2: copy master db to db_slave.
1:         
1:         startSlave(jvmVersion, replicatedDb,
1:                 slaveServerHost, // slaveClientInterface // where the slave db runs
1:                 slaveServerPort,
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort,
1:                 testClientHost);
1:         
1:         startMaster(jvmVersion, replicatedDb,
1:                 masterServerHost, // Where the startMaster command must be given
1:                 masterServerPort, // master server interface accepting client requests
1:                 masterServerHost, // An interface on the master: masterClientInterface (==masterServerHost),
1:                 slaveServerPort, // Not used since slave don't allow clients.
1:                 slaveServerHost, // for slaveReplInterface
1:                 slaveReplPort);
1:         
0:         runTest(null, // Returns immediatly if replicationTest is null.
1:                 jvmVersion,
1:                 testClientHost,
1:                 masterServerHost, masterServerPort,
1:                 replicatedDb);
1:         
1:         // 1. separate test
1:         // slave: stopSlave
1:         assertException(
0:             _stopSlave(slaveServerHost, slaveServerPort,
0:                 slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb),
1:             "XRE41"); // SLAVE_OPERATION_DENIED_WHILE_CONNECTED // OK to continue
1:        
1:         // 2. separate test
1:         // master: stopSlave
1:         // master: stopMaster
1:         // slave: stopSlave
1:         assertException(
0:             _stopSlave(masterServerHost, masterServerPort,
1:                 masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb),
1:             "XRE40"); //  REPLICATION_NOT_IN_SLAVE_MODE // OK to continue
1:         assertException(
1:             _stopMaster(masterServerHost, masterServerPort,
1:                 masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb),
1:             null); // Implies failover. // OK to continue. We have failover.
1:         /* showCurrentState("Post stopMaster", 0L,
1:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:             slaveServerHost, slaveServerPort);
1:         showCurrentState("Post stopMaster +1s", 1000L,
1:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:             slaveServerHost, slaveServerPort); */
1:         waitForConnect(100L, 10, 
1:                 slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:                 slaveServerHost, slaveServerPort);
1:         assertException(
0:             _stopSlave(slaveServerHost, slaveServerPort,
0:                 slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb),
1:             "XRE40"); // REPLICATION_NOT_IN_SLAVE_MODE // OK to continue
1:         /* showCurrentState("Post stopMaster, stopSlave", 0L,
1:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:             slaveServerHost, slaveServerPort);
1:         showCurrentState("Post stopMaster, stopSlave +1s", 1000L,
1:             slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb, 
1:             slaveServerHost, slaveServerPort); */
1:         /* showCurrentState("Post stopMaster, stopSlave +1s", 0L,
1:             masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb, 
1:             masterServerHost, masterServerPort); */
1:         waitForConnect(100L, 10, 
1:                 masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb, 
1:                 masterServerHost, masterServerPort);
1:         
1:         
1:         /* BEGIN In ReplicationRun_Local_3_p2.java:
1:         // 3. separate test
1:         // stopMaster
1:         // failover on slave
1:         
1:         // 5. separate test
1:         // slave: "normal" connect to slave db
1:         
1:         // 6. separate test
1:         // slave: 'internal-stopslave=true'
1:         END */
1:         
1:         /* failOver(jvmVersion,
1:                 masterDatabasePath, masterDbSubPath, replicatedDb,
1:                 masterServerHost,  // Where the master db is run.
1:                 masterServerPort,
1:                 testClientHost);
1:         */
1:         assertException(
1:             _failOver(masterServerHost, masterServerPort, 
1:                 masterDatabasePath+FS+masterDbSubPath+FS+replicatedDb),
1:             "XRE07"); // REPLICATION_NOT_IN_MASTER_MODE
1:         
1:         connectPing(slaveDatabasePath+FS+slaveDbSubPath+FS+replicatedDb,
1:                 slaveServerHost,slaveServerPort,
1:                 testClientHost);
1:         
1:         verifySlave();
1:         
1:         // We should verify the master as well, at least to see that we still can connect.
1:         verifyMaster();
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 slaveServerHost, slaveServerPort);
1:         
1:         stopServer(jvmVersion, derbyVersion,
1:                 masterServerHost, masterServerPort);
1:         
1:     }
1:     
1: }
============================================================================