1:1beab6c: /*
1:1beab6c: 
1:1beab6c:    Derby - Class org.apache.derby.client.am.CachingLogicalConnection
1:1beab6c: 
1:1beab6c:    Licensed to the Apache Software Foundation (ASF) under one or more
1:1beab6c:    contributor license agreements.  See the NOTICE file distributed with
1:1beab6c:    this work for additional information regarding copyright ownership.
1:1beab6c:    The ASF licenses this file to You under the Apache License, Version 2.0
1:1beab6c:    (the "License"); you may not use this file except in compliance with
1:1beab6c:    the License.  You may obtain a copy of the License at
1:1beab6c: 
1:1beab6c:       http://www.apache.org/licenses/LICENSE-2.0
1:1beab6c: 
1:1beab6c:    Unless required by applicable law or agreed to in writing, software
1:1beab6c:    distributed under the License is distributed on an "AS IS" BASIS,
1:1beab6c:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1beab6c:    See the License for the specific language governing permissions and
1:1beab6c:    limitations under the License.
1:1beab6c: 
1:1beab6c:  */
1:1beab6c: package org.apache.derby.client.am;
1:1beab6c: 
1:69e3d06: import java.sql.CallableStatement;
1:69e3d06: import java.sql.PreparedStatement;
1:1beab6c: import java.sql.SQLException;
1:1beab6c: 
1:1beab6c: import org.apache.derby.client.ClientPooledConnection;
1:1beab6c: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1:1beab6c: 
1:1beab6c: import org.apache.derby.shared.common.sanity.SanityManager;
1:1beab6c: 
1:1beab6c: /**
1:1beab6c:  * A logical connection used in a connection pool with capabilities for
1:1beab6c:  * caching prepared statements.
1:1beab6c:  * <p>
1:1beab6c:  * An instance of this class is what is passed out the the client. It uses a
1:1beab6c:  * JDBC statement object cache to avoid re-preparing commonly used queries.
1:1beab6c:  * The cache has scope of a physical connection, and is lost when the pooled
1:1beab6c:  * connection is closed (which includes closing the physical connection).
1:1beab6c:  *
1:1beab6c:  * @see StatementCacheInteractor
1:1beab6c:  */
1:1beab6c: public class CachingLogicalConnection
1:1beab6c:     extends LogicalConnection {
1:1beab6c: 
1:1beab6c:     /** JDBC statement cache interactor used to prepare statements and calls. */
1:1beab6c:     private StatementCacheInteractor cacheInteractor;
1:1beab6c: 
1:1beab6c:     /**
1:1beab6c:      * Creates a new logical connection which caches prepared statements.
1:1beab6c:      *
1:1beab6c:      * @param physicalConnection underlying physical database connection
1:1beab6c:      * @param pooledConnection associated pooled connection
1:1beab6c:      * @param stmtCache associated statement cache
1:1beab6c:      *
1:1beab6c:      * @throws SqlException if creating the logical connection fails
1:1beab6c:      */
1:69e3d06:     public CachingLogicalConnection(ClientConnection physicalConnection,
1:1beab6c:                                     ClientPooledConnection pooledConnection,
1:1beab6c:                                     JDBCStatementCache stmtCache)
1:1beab6c:             throws SqlException {
1:1beab6c:         super(physicalConnection, pooledConnection);
1:1beab6c:         this.cacheInteractor =
1:1beab6c:                 new StatementCacheInteractor(stmtCache, physicalConnection);
1:1beab6c:     }
1:1beab6c: 
1:2159c6a:     public synchronized void close()
1:1beab6c:             throws SQLException {
1:2159c6a:         if (this.cacheInteractor != null) {
1:77a3bd1:             this.cacheInteractor.closeOpenLogicalStatements();
1:2159c6a:             // Nullify reference to cache interactor to allow it to be GC'ed.
1:2159c6a:             // It should not be used again when, logical connection is closed.
1:2159c6a:             this.cacheInteractor = null;
1:2159c6a:             super.close();
1:2159c6a:         }
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized PreparedStatement prepareStatement(String sql)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:1beab6c:         return cacheInteractor.prepareStatement(sql);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized PreparedStatement prepareStatement(
1:1beab6c:                                                 String sql,
1:1beab6c:                                                 int resultSetType,
1:1beab6c:                                                 int resultSetConcurrency)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:1beab6c:         return cacheInteractor.prepareStatement(
1:1beab6c:                     sql, resultSetType, resultSetConcurrency);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized PreparedStatement prepareStatement(
1:1beab6c:                                                 String sql,
1:1beab6c:                                                 int resultSetType,
1:1beab6c:                                                 int resultSetConcurrency,
1:1beab6c:                                                 int resultSetHoldability)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:1beab6c:         return cacheInteractor.prepareStatement(
1:1beab6c:                 sql, resultSetType,resultSetConcurrency, resultSetHoldability);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized PreparedStatement prepareStatement(
1:1beab6c:                                                 String sql,
1:1beab6c:                                                 int autoGeneratedKeys)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:1beab6c:         return cacheInteractor.prepareStatement(sql, autoGeneratedKeys);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized PreparedStatement prepareStatement(
1:1beab6c:                                                 String sql,
1:1beab6c:                                                 int[] columnIndexes)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:69e3d06:         PreparedStatement ps = null;
1:1beab6c:         if (columnIndexes != null && columnIndexes.length > 1) {
1:1beab6c:             // This should probably be extended to use a separate type of
1:1beab6c:             // statement key (instead of just saying its a statement which
1:1beab6c:             // returns auto-generated keys), to force it throught the driver
1:1beab6c:             // validation code.
1:1beab6c:             // For now, disable statement pooling and fail in sane builds only,
1:1beab6c:             // or in the relevant parts of the driver if still not supported.
1:1beab6c:             ps = super.prepareStatement(sql, columnIndexes);
1:9fbd20b:             // If we get this far, the rest of the driver has extended
1:1beab6c:             // its capabilities and this class is lagging behind...
1:1beab6c:             if (SanityManager.DEBUG) {
1:1beab6c:                 SanityManager.THROWASSERT("CachingLogicalConnection is " +
1:1beab6c:                         "missing the capability to handle prepareStatement " +
1:1beab6c:                         "with an int array with more than one elemenet.");
1:1beab6c:             }
1:1beab6c:             // No caching being done, but we are able to continue.
1:1beab6c:         } else {
1:69e3d06:             int generatedKeys = ClientStatement.RETURN_GENERATED_KEYS;
1:d835d9a:             // If indexes is null or empty, don't return autogenerated keys.
1:d835d9a:             if (columnIndexes == null || columnIndexes.length == 0) {
1:69e3d06:                 generatedKeys = ClientStatement.NO_GENERATED_KEYS;
1:d835d9a:             }
1:d835d9a:             ps = cacheInteractor.prepareStatement(sql, generatedKeys);
1:1beab6c:         }
1:1beab6c:         return ps;
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized PreparedStatement prepareStatement(
1:1beab6c:                                                 String sql,
1:1beab6c:                                                 String[] columnNames)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:69e3d06:         PreparedStatement ps = null;
1:1beab6c:         if (columnNames != null && columnNames.length > 1) {
1:1beab6c:             // This should probably be extended to use a separate type of
1:1beab6c:             // statement key (instead of just saying its a statement which
1:1beab6c:             // returns auto-generated keys), to force it throught the driver
1:1beab6c:             // validation code.
1:1beab6c:             // For now, disable statement pooling and fail in sane builds only,
1:1beab6c:             // or in the relevant parts of the driver if still not supported.
1:1beab6c:             ps = super.prepareStatement(sql, columnNames);
1:9fbd20b:             // If we get this far, the rest of the driver has extended
1:1beab6c:             // its capabilities and this class is lagging behind...
1:1beab6c:             if (SanityManager.DEBUG) {
1:1beab6c:                 SanityManager.THROWASSERT("CachingLogicalConnection is " +
1:1beab6c:                         "missing the capability to handle prepareStatement " +
1:1beab6c:                         "with a string array with more than one elemenet.");
1:1beab6c:             }
1:1beab6c:             // No caching being done, but we are able to continue.
1:1beab6c:         } else {
1:69e3d06:             int generatedKeys = ClientStatement.RETURN_GENERATED_KEYS;
1:d835d9a:             // If names is null or empty, don't return autogenerated keys.
1:d835d9a:             if (columnNames == null || columnNames.length == 0) {
1:69e3d06:                 generatedKeys = ClientStatement.NO_GENERATED_KEYS;
1:d835d9a:             }
1:d835d9a:             ps = cacheInteractor.prepareStatement(sql, generatedKeys);
1:1beab6c:         }
1:1beab6c:         return ps;
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized CallableStatement prepareCall(String sql)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:1beab6c:         return cacheInteractor.prepareCall(sql);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized CallableStatement prepareCall(String sql,
1:1beab6c:                                                       int resultSetType,
1:1beab6c:                                                       int resultSetConcurrency)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:1beab6c:         return cacheInteractor.prepareCall(
1:1beab6c:                 sql, resultSetType, resultSetConcurrency);
1:1beab6c:     }
1:1beab6c: 
1:69e3d06:     public synchronized CallableStatement prepareCall(String sql,
1:1beab6c:                                                       int resultSetType,
1:1beab6c:                                                       int resultSetConcurrency,
1:1beab6c:                                                       int resultSetHoldability)
1:1beab6c:             throws SQLException {
1:1beab6c:         checkForNullPhysicalConnection();
1:1beab6c:         return cacheInteractor.prepareCall(
1:1beab6c:                 sql, resultSetType, resultSetConcurrency, resultSetHoldability);
1:1beab6c:     }
1:1beab6c: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.sql.CallableStatement;
1: import java.sql.PreparedStatement;
/////////////////////////////////////////////////////////////////////////
1:     public CachingLogicalConnection(ClientConnection physicalConnection,
/////////////////////////////////////////////////////////////////////////
1:     public synchronized PreparedStatement prepareStatement(String sql)
1:     public synchronized PreparedStatement prepareStatement(
/////////////////////////////////////////////////////////////////////////
1:     public synchronized PreparedStatement prepareStatement(
/////////////////////////////////////////////////////////////////////////
1:     public synchronized PreparedStatement prepareStatement(
/////////////////////////////////////////////////////////////////////////
1:     public synchronized PreparedStatement prepareStatement(
1:         PreparedStatement ps = null;
/////////////////////////////////////////////////////////////////////////
1:             int generatedKeys = ClientStatement.RETURN_GENERATED_KEYS;
1:                 generatedKeys = ClientStatement.NO_GENERATED_KEYS;
1:     public synchronized PreparedStatement prepareStatement(
1:         PreparedStatement ps = null;
/////////////////////////////////////////////////////////////////////////
1:             int generatedKeys = ClientStatement.RETURN_GENERATED_KEYS;
1:                 generatedKeys = ClientStatement.NO_GENERATED_KEYS;
1:     public synchronized CallableStatement prepareCall(String sql)
1:     public synchronized CallableStatement prepareCall(String sql,
/////////////////////////////////////////////////////////////////////////
1:     public synchronized CallableStatement prepareCall(String sql,
commit:b13b17c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.PreparedStatement prepareStatement(String sql)
0:     public synchronized java.sql.PreparedStatement prepareStatement(
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.PreparedStatement prepareStatement(
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.PreparedStatement prepareStatement(
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.PreparedStatement prepareStatement(
0:         java.sql.PreparedStatement ps = null;
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.PreparedStatement prepareStatement(
0:         java.sql.PreparedStatement ps = null;
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.CallableStatement prepareCall(String sql)
0:     public synchronized java.sql.CallableStatement prepareCall(String sql,
/////////////////////////////////////////////////////////////////////////
0:     public synchronized java.sql.CallableStatement prepareCall(String sql,
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:77a3bd1
/////////////////////////////////////////////////////////////////////////
1:             this.cacheInteractor.closeOpenLogicalStatements();
commit:d835d9a
/////////////////////////////////////////////////////////////////////////
0:             int generatedKeys = Statement.RETURN_GENERATED_KEYS;
1:             // If indexes is null or empty, don't return autogenerated keys.
1:             if (columnIndexes == null || columnIndexes.length == 0) {
0:                 generatedKeys = Statement.NO_GENERATED_KEYS;
1:             }
1:             ps = cacheInteractor.prepareStatement(sql, generatedKeys);
/////////////////////////////////////////////////////////////////////////
0:             int generatedKeys = Statement.RETURN_GENERATED_KEYS;
1:             // If names is null or empty, don't return autogenerated keys.
1:             if (columnNames == null || columnNames.length == 0) {
0:                 generatedKeys = Statement.NO_GENERATED_KEYS;
1:             }
1:             ps = cacheInteractor.prepareStatement(sql, generatedKeys);
commit:2159c6a
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void close()
1:         if (this.cacheInteractor != null) {
1:             // Nullify reference to cache interactor to allow it to be GC'ed.
1:             // It should not be used again when, logical connection is closed.
1:             this.cacheInteractor = null;
1:             super.close();
1:         }
commit:9fbd20b
/////////////////////////////////////////////////////////////////////////
1:             // If we get this far, the rest of the driver has extended
/////////////////////////////////////////////////////////////////////////
1:             // If we get this far, the rest of the driver has extended
commit:1beab6c
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.am.CachingLogicalConnection
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derby.client.am;
1: 
0: import java.sql.CallableStatement;
0: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
1: 
1: import org.apache.derby.client.ClientPooledConnection;
1: import org.apache.derby.client.am.stmtcache.JDBCStatementCache;
1: 
1: import org.apache.derby.shared.common.sanity.SanityManager;
1: 
1: /**
1:  * A logical connection used in a connection pool with capabilities for
1:  * caching prepared statements.
1:  * <p>
1:  * An instance of this class is what is passed out the the client. It uses a
1:  * JDBC statement object cache to avoid re-preparing commonly used queries.
1:  * The cache has scope of a physical connection, and is lost when the pooled
1:  * connection is closed (which includes closing the physical connection).
1:  *
1:  * @see StatementCacheInteractor
1:  */
1: public class CachingLogicalConnection
1:     extends LogicalConnection {
1: 
1:     /** JDBC statement cache interactor used to prepare statements and calls. */
1:     private StatementCacheInteractor cacheInteractor;
1: 
1:     /**
1:      * Creates a new logical connection which caches prepared statements.
1:      *
1:      * @param physicalConnection underlying physical database connection
1:      * @param pooledConnection associated pooled connection
1:      * @param stmtCache associated statement cache
1:      *
1:      * @throws SqlException if creating the logical connection fails
1:      */
0:     public CachingLogicalConnection(Connection physicalConnection,
1:                                     ClientPooledConnection pooledConnection,
1:                                     JDBCStatementCache stmtCache)
1:             throws SqlException {
1:         super(physicalConnection, pooledConnection);
1:         this.cacheInteractor =
1:                 new StatementCacheInteractor(stmtCache, physicalConnection);
1:     }
1: 
0:     public void close()
1:             throws SQLException {
0:         // Nullify reference to cache interactor to allow it to be GC'ed.
0:         // It should not be used again when the logical connection is closed.
0:         this.cacheInteractor = null;
0:         super.close();
1:     }
1: 
0:     public synchronized PreparedStatement prepareStatement(String sql)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
1:         return cacheInteractor.prepareStatement(sql);
1:     }
1: 
0:     public synchronized PreparedStatement prepareStatement(
1:                                                 String sql,
1:                                                 int resultSetType,
1:                                                 int resultSetConcurrency)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
1:         return cacheInteractor.prepareStatement(
1:                     sql, resultSetType, resultSetConcurrency);
1:     }
1: 
0:     public synchronized PreparedStatement prepareStatement(
1:                                                 String sql,
1:                                                 int resultSetType,
1:                                                 int resultSetConcurrency,
1:                                                 int resultSetHoldability)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
1:         return cacheInteractor.prepareStatement(
1:                 sql, resultSetType,resultSetConcurrency, resultSetHoldability);
1:     }
1: 
0:     public synchronized PreparedStatement prepareStatement(
1:                                                 String sql,
1:                                                 int autoGeneratedKeys)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
1:         return cacheInteractor.prepareStatement(sql, autoGeneratedKeys);
1:     }
1: 
0:     public synchronized PreparedStatement prepareStatement(
1:                                                 String sql,
1:                                                 int[] columnIndexes)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
0:         PreparedStatement ps = null;
1:         if (columnIndexes != null && columnIndexes.length > 1) {
1:             // This should probably be extended to use a separate type of
1:             // statement key (instead of just saying its a statement which
1:             // returns auto-generated keys), to force it throught the driver
1:             // validation code.
1:             // For now, disable statement pooling and fail in sane builds only,
1:             // or in the relevant parts of the driver if still not supported.
1:             ps = super.prepareStatement(sql, columnIndexes);
0:             // If we get this far, the driver rest of the driver has extended
1:             // its capabilities and this class is lagging behind...
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT("CachingLogicalConnection is " +
1:                         "missing the capability to handle prepareStatement " +
1:                         "with an int array with more than one elemenet.");
1:             }
1:             // No caching being done, but we are able to continue.
1:         } else {
0:             ps = cacheInteractor.prepareStatement(
0:                     sql, Statement.RETURN_GENERATED_KEYS);
1:         }
1:         return ps;
1:     }
1: 
0:     public synchronized PreparedStatement prepareStatement(
1:                                                 String sql,
1:                                                 String[] columnNames)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
0:         PreparedStatement ps = null;
1:         if (columnNames != null && columnNames.length > 1) {
1:             // This should probably be extended to use a separate type of
1:             // statement key (instead of just saying its a statement which
1:             // returns auto-generated keys), to force it throught the driver
1:             // validation code.
1:             // For now, disable statement pooling and fail in sane builds only,
1:             // or in the relevant parts of the driver if still not supported.
1:             ps = super.prepareStatement(sql, columnNames);
0:             // If we get this far, the driver rest of the driver has extended
1:             // its capabilities and this class is lagging behind...
1:             if (SanityManager.DEBUG) {
1:                 SanityManager.THROWASSERT("CachingLogicalConnection is " +
1:                         "missing the capability to handle prepareStatement " +
1:                         "with a string array with more than one elemenet.");
1:             }
1:             // No caching being done, but we are able to continue.
1:         } else {
0:             ps = cacheInteractor.prepareStatement(
0:                     sql, Statement.RETURN_GENERATED_KEYS);
1:         }
1:         return ps;
1:     }
1: 
0:     public synchronized CallableStatement prepareCall(String sql)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
1:         return cacheInteractor.prepareCall(sql);
1:     }
1: 
0:     public synchronized CallableStatement prepareCall(String sql,
1:                                                       int resultSetType,
1:                                                       int resultSetConcurrency)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
1:         return cacheInteractor.prepareCall(
1:                 sql, resultSetType, resultSetConcurrency);
1:     }
1: 
0:     public synchronized CallableStatement prepareCall(String sql,
1:                                                       int resultSetType,
1:                                                       int resultSetConcurrency,
1:                                                       int resultSetHoldability)
1:             throws SQLException {
1:         checkForNullPhysicalConnection();
1:         return cacheInteractor.prepareCall(
1:                 sql, resultSetType, resultSetConcurrency, resultSetHoldability);
1:     }
1: }
============================================================================