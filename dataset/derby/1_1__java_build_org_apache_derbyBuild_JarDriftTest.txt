1:e10f0e9: /*
1:e10f0e9:  
1:e10f0e9:    Derby - Class org.apache.JarDriftTest
1:e10f0e9:  
1:e10f0e9:    Licensed to the Apache Software Foundation (ASF) under one or more
1:e10f0e9:    contributor license agreements.  See the NOTICE file distributed with
1:e10f0e9:    this work for additional information regarding copyright ownership.
1:e10f0e9:    The ASF licenses this file to You under the Apache License, Version 2.0
1:e10f0e9:    (the "License"); you may not use this file except in compliance with
1:e10f0e9:    the License.  You may obtain a copy of the License at
1:e10f0e9:  
1:e10f0e9:       http://www.apache.org/licenses/LICENSE-2.0
1:e10f0e9:  
1:e10f0e9:    Unless required by applicable law or agreed to in writing, software
1:e10f0e9:    distributed under the License is distributed on an "AS IS" BASIS,
1:e10f0e9:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e10f0e9:    See the License for the specific language governing permissions and
1:e10f0e9:    limitations under the License.
1:e10f0e9:  
1:e10f0e9:  */
1:e10f0e9: 
1:e10f0e9: package org.apache.derbyBuild;
1:e10f0e9: 
1:e10f0e9: import java.io.BufferedReader;
1:e10f0e9: import java.io.File;
1:e10f0e9: import java.io.FileInputStream;
1:e10f0e9: import java.io.FileReader;
1:e10f0e9: import java.io.IOException;
1:e10f0e9: import java.io.PrintWriter;
1:e10f0e9: import java.io.StringReader;
1:e10f0e9: import java.util.ArrayList;
1:e10f0e9: import java.util.HashSet;
1:e10f0e9: import java.util.Hashtable;
1:e10f0e9: import java.util.Iterator;
1:e10f0e9: import java.util.List;
1:e10f0e9: import java.util.zip.ZipEntry;
1:e10f0e9: import java.util.zip.ZipInputStream;
1:e10f0e9: 
1:e10f0e9: /* Notes:
1:e10f0e9:  * -- this is run as the last depends in the ant buildjars target.
1:e10f0e9:  * -- the jar file location is taken relative to that position and not
1:e10f0e9:  *    related to the classpath setting.
1:e10f0e9:  * -- we check on sane or insane by looking in the file 
1:e10f0e9:  *    generated/java/org/apache/derby/shared/common/sanity/state.properties
1:e10f0e9:  * -- source file and '*lastcontents files will be in the source distro,
1:e10f0e9:  *    but they do not need to go in any jar files.
1:e10f0e9:  * -- presence of derbyTesting.jar is optional. 
1:e10f0e9:  * -- to update the lastcontents list when a new class is being added,
1:e10f0e9:  *    run this class with the 'refresh' option, or ant refreshjardriftcheck
1:e10f0e9:  * -- this implementation should work with just 1.6, although then 
1:e10f0e9:  *    a number of classes (Java 8 support) will not get built. So only
1:e10f0e9:  *    run the refresh with the highest level jvm.
1:e10f0e9:  * -- we are only worrying about class files, even ignoring inner classes
1:e10f0e9:  * -- we're not unravelling any jars from inside the jars
1:e10f0e9:  */
1:e10f0e9: 
1:e10f0e9: public class JarDriftTest {
1:e10f0e9:     static boolean failbuild = false;
1:e10f0e9:     
1:e10f0e9:     /**
1:e10f0e9:      * <p>
1:e10f0e9:      * Like the MessageBundleTest, let Ant conjure us up.
1:e10f0e9:      * </p>
1:e10f0e9:      */
1:e10f0e9:     public JarDriftTest()
1:e10f0e9:     {}
1:e10f0e9: 
1:e10f0e9:     protected PrintWriter pwOut;
1:e10f0e9:     protected Hashtable<String, Object> classpathHash;
1:e10f0e9:     // if run with -Dverbose=true
1:e10f0e9:     protected static boolean verbose = Boolean.getBoolean("verbose");
1:e10f0e9:     protected String classpath[] = null;
1:e10f0e9:     
1:e10f0e9:     static boolean updateFiles=false;
1:e10f0e9:     static String sanityState;
1:e10f0e9:     static String topOfTree;
1:e10f0e9:     static String[] baseJars  = {"derby.jar", "derbyclient.jar", "derbynet.jar",
1:e10f0e9:                                "derbytools.jar", "derbyoptionaltools.jar",
1:e10f0e9:                                "derbyrun.jar", "derbyTesting.jar"};
1:e10f0e9:     static HashSet<String> pastJarContents  = new HashSet<String>();
1:e10f0e9:     static HashSet<String> builtJarContents = new HashSet<String>();
1:e10f0e9:     
1:e10f0e9:     public static void main(String [] args) throws Exception
1:e10f0e9:     {
1:e10f0e9:         if (args.length > 0 
1:e10f0e9:                 && args[0].equalsIgnoreCase("refresh"))
1:e10f0e9:             updateFiles=true;
1:e10f0e9:         JarDriftTest t = new JarDriftTest();
1:e10f0e9:         // find local path
1:e10f0e9:         topOfTree = System.getProperty("user.dir");
1:e10f0e9:         if (verbose)
1:e10f0e9:             System.out.println("top of build: " + topOfTree);
1:e10f0e9:         sanityState = sanityState();
1:e10f0e9:         try {
1:e10f0e9:             for (int i = 0 ; i< baseJars.length ; i++) {
1:e10f0e9:                 t.jarCheck(baseJars[i]);
1:e10f0e9:             }
1:e10f0e9:         } catch (Exception e) {
1:e10f0e9:             System.out.println("jar drift check failed: ");
1:e10f0e9:             e.printStackTrace();
1:e10f0e9:         }
1:e10f0e9:         if (failbuild) 
1:f9c173b:             throw new Exception(
1:f9c173b:                 "\njar drift check failed; see DERBY-6471 for info. \n" +
1:e10f0e9:                 "See error in build output or call ant jardriftcheck. \n" +
1:f9c173b:                 "If the new class is expected run ant refreshjardriftcheck.\n"+
1:f9c173b:                 "NB: Run the refresh for both sane and insane builds. \n" +
1:f9c173b:                 "    Use the highest supported JVM (currently Java 8) \n " +
1:f9c173b:                 "    to ensure all classes are built.\n");
1:e10f0e9:     }    
1:e10f0e9: 
1:e10f0e9:     protected void loadJarContents(String jarName)
1:e10f0e9:             throws Exception {
1:e10f0e9:         if (verbose)
1:e10f0e9:             System.out.println("jar: " + jarName);
1:e10f0e9:         String jarFileLocation = topOfTree + File.separator + "jars";
1:e10f0e9:         if (sanityState != null)
1:e10f0e9:         {
1:e10f0e9:             jarFileLocation=jarFileLocation + File.separator + sanityState;
1:e10f0e9:             if (verbose)
1:e10f0e9:                 System.out.println(
1:e10f0e9:                     "get the jar files from the dir: " + jarFileLocation);
1:e10f0e9:         }
1:e10f0e9:         else 
1:e10f0e9:             System.out.println("oops sanity state is null, not sure why");
1:e10f0e9:         // use 1.6 style code
1:e10f0e9:         List<String> classNames=new ArrayList<String>();
1:e10f0e9:         try { 
1:e10f0e9:             ZipInputStream zip=new ZipInputStream(
1:e10f0e9:                     new FileInputStream(jarFileLocation + File.separator + jarName));
1:e10f0e9:             for (ZipEntry entry=zip.getNextEntry() ; entry!=null ; entry=zip.getNextEntry())
1:e10f0e9:             {
1:e10f0e9:                 String className = entry.getName();
1:e10f0e9:                 if (className.endsWith(".class") && !entry.isDirectory()) {
1:e10f0e9:                     // ignore classes with a '$' in the name - these are inner
1:e10f0e9:                     // classes and it is possible that more get created if the 
1:e10f0e9:                     // base class grows, or different compilers may add more
1:e10f0e9:                     // and it seems unlikely one of the inner classes would 
1:e10f0e9:                     // drift into another jar without its parent drifting.
1:e10f0e9:                     if (className.contains("$"))
1:e10f0e9:                         continue;
1:e10f0e9:                     className = entry.getName().replace(File.separator, ".");
1:e10f0e9:                     // replace some other possible separator chars in case the 
1:e10f0e9:                     // character is OS, vendor, or zip implementation dependent.
1:e10f0e9:                     className = className.replace("/", ".");
1:e10f0e9:                     className = className.replace("//", ".");
1:e10f0e9:                     className = className.replace("\\", ".");
1:e10f0e9:                     classNames.add(className.toString());
1:e10f0e9:                 }
1:e10f0e9:             }
1:e10f0e9:         } catch (IOException ioe ) {
1:e10f0e9:             // in all other cases, the process should/will fail but there is
1:e10f0e9:             // a target to build without derbyTesting.jar, so it may be ok
1:e10f0e9:             if (!jarName.equalsIgnoreCase("derbyTesting.jar"))
1:e10f0e9:                 throw ioe;
1:e10f0e9:         }
1:e10f0e9:         
1:e10f0e9:         // load the contents into builtJarContents
1:e10f0e9:         builtJarContents.addAll(classNames);
1:e10f0e9:         
1:e10f0e9:         // write out the contents ?
1:e10f0e9:         if (updateFiles) {
1:e10f0e9:             String fs = File.separator;
1:e10f0e9:             String outputFile = topOfTree + fs + "java" + fs + "build" + fs +
1:e10f0e9:                     "org" + fs + "apache" + fs + "derbyBuild" + fs + 
1:e10f0e9:                     "lastgoodjarcontents" + fs +
1:e10f0e9:                     sanityState + "." + jarName + ".lastcontents";
1:e10f0e9:             PrintWriter pwf = new PrintWriter(outputFile);
1:e10f0e9:             for (String className : classNames)
1:e10f0e9:                 pwf.println(className);
1:e10f0e9:             pwf.close();
1:e10f0e9:         }
1:e10f0e9:     }
1:e10f0e9:     
1:e10f0e9:     protected static String sanityState() throws Exception {
1:e10f0e9:         // need to check on sane vs. insane - access file
1:e10f0e9:         // generated/java/org/apache/derby/shared/common/sanity/state.properties
1:e10f0e9:         // and look for 'false' or 'true' (the file should only have 
1:e10f0e9:         // sanity=[false|true] except for some header/timestamp info).
1:e10f0e9:         String fs = File.separator;
1:e10f0e9:         String sanityFileName = 
1:e10f0e9:                 topOfTree + fs + "generated" + fs + "java" + fs + "org" + fs +
1:e10f0e9:                 "apache" + fs + "derby" + fs + "shared" + fs + "common" + fs +
1:e10f0e9:                 "sanity" + fs + "state.properties";
1:e10f0e9:         File sanityFile = new File(sanityFileName);
1:e10f0e9:         String sanityContents = readFile(sanityFile);
1:e10f0e9:         if (sanityContents != null && sanityContents.length()> 0)
1:e10f0e9:         {
1:e10f0e9:             if (sanityContents.contains("false"))
1:e10f0e9:                 sanityState = "insane";
1:e10f0e9:             else if (sanityContents.contains("true"))
1:e10f0e9:                 sanityState = "sane";
1:e10f0e9:         }
1:e10f0e9:         else
1:e10f0e9:         {
1:e10f0e9:             throw new Exception ("oops, something wrong getting the sanity state");
1:e10f0e9:         }
1:e10f0e9:         return sanityState;
1:e10f0e9:     }
1:e10f0e9:     
1:e10f0e9:     private static String readFile(File file) throws IOException{
1:e10f0e9:         StringBuffer strbuf = new StringBuffer();
1:e10f0e9:         
1:e10f0e9:         try {
1:e10f0e9:             FileReader fr = new FileReader(file);
1:e10f0e9:             BufferedReader br = new BufferedReader(fr);
1:e10f0e9:             String line;
1:e10f0e9:             while ((line = br.readLine()) != null) {
1:e10f0e9:                 strbuf.append(line);
1:e10f0e9:                 strbuf.append("\n");
1:e10f0e9:             }
1:e10f0e9:             fr.close();
1:e10f0e9:             /* if (verbose) {
1:e10f0e9:                 System.out.println("Contents of file:");
1:e10f0e9:                 System.out.println(strbuf.toString()); */
1:e10f0e9:         } catch (IOException e) {
1:e10f0e9:             e.printStackTrace();
1:e10f0e9:         }
1:e10f0e9:         return strbuf.toString();
1:e10f0e9:     }
1:e10f0e9:     
1:e10f0e9:     protected void loadPastContents(String jarName) throws Exception {
1:e10f0e9:         String fs = File.separator;
1:e10f0e9:         String inputFile = topOfTree + fs + "java" + fs + "build" + fs +
1:e10f0e9:                 "org" + fs + "apache" + fs + "derbyBuild" + fs + 
1:e10f0e9:                 "lastgoodjarcontents"+ fs + 
1:e10f0e9:                 sanityState + "." + jarName + ".lastcontents";
1:e10f0e9:         if (verbose)
1:e10f0e9:             System.out.println("looking through " + inputFile);
1:e10f0e9:         String pastJarContentsString = readFile(new File(inputFile));
1:e10f0e9:         // split up the string at each \n
1:e10f0e9:         BufferedReader br = 
1:e10f0e9:                 new BufferedReader(new StringReader(pastJarContentsString));
1:e10f0e9:         String className = null;
1:e10f0e9:         while ((className = br.readLine()) != null){
1:e10f0e9:             if (verbose)
1:e10f0e9:                 System.out.println("found/added: " + className);
1:e10f0e9:             pastJarContents.add(className);
1:e10f0e9:         }
1:e10f0e9:     }
1:e10f0e9:     
1:e10f0e9:     protected void jarCheck(String jarName) throws Exception {
1:e10f0e9:         builtJarContents.clear();
1:e10f0e9:         pastJarContents.clear();
1:e10f0e9:         loadJarContents(jarName);
1:e10f0e9:         loadPastContents(jarName);
1:e10f0e9:         if (verbose)
1:e10f0e9:             System.out.println("\nnow comparing for jar: " + jarName);
1:e10f0e9:         Iterator it = builtJarContents.iterator();
1:e10f0e9:         
1:e10f0e9:         while ( it.hasNext() ) {
1:e10f0e9:             String objectName = (String)it.next();
1:e10f0e9:             if (objectName.contains("class"))
1:e10f0e9:             {
1:e10f0e9:                 if (verbose)
1:e10f0e9:                     System.out.println("objectname: " + objectName);
1:e10f0e9:                 if ( ! pastJarContents.contains(objectName) ) {
1:e10f0e9:                     // Don't fail out on the first one, we want to catch
1:e10f0e9:                     // all of them.  Just note there was a failure and continue
1:e10f0e9:                     failbuild=true;
1:e10f0e9:                     System.err.println("ERROR: class " + objectName + " in\n" +
1:e10f0e9:                         "       " + jarName + " was not previously there.\n");
1:e10f0e9:                  }
1:e10f0e9:             }
1:e10f0e9:         }
1:e10f0e9:     }
1:e10f0e9: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:f9c173b
/////////////////////////////////////////////////////////////////////////
1:             throw new Exception(
1:                 "\njar drift check failed; see DERBY-6471 for info. \n" +
1:                 "If the new class is expected run ant refreshjardriftcheck.\n"+
1:                 "NB: Run the refresh for both sane and insane builds. \n" +
1:                 "    Use the highest supported JVM (currently Java 8) \n " +
1:                 "    to ensure all classes are built.\n");
commit:e10f0e9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class org.apache.JarDriftTest
1:  
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyBuild;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileReader;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.io.StringReader;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipInputStream;
1: 
1: /* Notes:
1:  * -- this is run as the last depends in the ant buildjars target.
1:  * -- the jar file location is taken relative to that position and not
1:  *    related to the classpath setting.
1:  * -- we check on sane or insane by looking in the file 
1:  *    generated/java/org/apache/derby/shared/common/sanity/state.properties
1:  * -- source file and '*lastcontents files will be in the source distro,
1:  *    but they do not need to go in any jar files.
1:  * -- presence of derbyTesting.jar is optional. 
1:  * -- to update the lastcontents list when a new class is being added,
1:  *    run this class with the 'refresh' option, or ant refreshjardriftcheck
1:  * -- this implementation should work with just 1.6, although then 
1:  *    a number of classes (Java 8 support) will not get built. So only
1:  *    run the refresh with the highest level jvm.
1:  * -- we are only worrying about class files, even ignoring inner classes
1:  * -- we're not unravelling any jars from inside the jars
1:  */
1: 
1: public class JarDriftTest {
1:     static boolean failbuild = false;
1:     
1:     /**
1:      * <p>
1:      * Like the MessageBundleTest, let Ant conjure us up.
1:      * </p>
1:      */
1:     public JarDriftTest()
1:     {}
1: 
1:     protected PrintWriter pwOut;
1:     protected Hashtable<String, Object> classpathHash;
1:     // if run with -Dverbose=true
1:     protected static boolean verbose = Boolean.getBoolean("verbose");
1:     protected String classpath[] = null;
1:     
1:     static boolean updateFiles=false;
1:     static String sanityState;
1:     static String topOfTree;
1:     static String[] baseJars  = {"derby.jar", "derbyclient.jar", "derbynet.jar",
1:                                "derbytools.jar", "derbyoptionaltools.jar",
1:                                "derbyrun.jar", "derbyTesting.jar"};
1:     static HashSet<String> pastJarContents  = new HashSet<String>();
1:     static HashSet<String> builtJarContents = new HashSet<String>();
1:     
1:     public static void main(String [] args) throws Exception
1:     {
1:         if (args.length > 0 
1:                 && args[0].equalsIgnoreCase("refresh"))
1:             updateFiles=true;
1:         JarDriftTest t = new JarDriftTest();
1:         // find local path
1:         topOfTree = System.getProperty("user.dir");
1:         if (verbose)
1:             System.out.println("top of build: " + topOfTree);
1:         sanityState = sanityState();
1:         try {
1:             for (int i = 0 ; i< baseJars.length ; i++) {
1:                 t.jarCheck(baseJars[i]);
1:             }
1:         } catch (Exception e) {
1:             System.out.println("jar drift check failed: ");
1:             e.printStackTrace();
1:         }
1:         if (failbuild) 
0:             throw new Exception("jar drift check failed. \n" +
1:                 "See error in build output or call ant jardriftcheck. \n" +
0:                 "If the new class is expected run ant refreshjardriftcheck.\n");
1:     }    
1: 
1:     protected void loadJarContents(String jarName)
1:             throws Exception {
1:         if (verbose)
1:             System.out.println("jar: " + jarName);
1:         String jarFileLocation = topOfTree + File.separator + "jars";
1:         if (sanityState != null)
1:         {
1:             jarFileLocation=jarFileLocation + File.separator + sanityState;
1:             if (verbose)
1:                 System.out.println(
1:                     "get the jar files from the dir: " + jarFileLocation);
1:         }
1:         else 
1:             System.out.println("oops sanity state is null, not sure why");
1:         // use 1.6 style code
1:         List<String> classNames=new ArrayList<String>();
1:         try { 
1:             ZipInputStream zip=new ZipInputStream(
1:                     new FileInputStream(jarFileLocation + File.separator + jarName));
1:             for (ZipEntry entry=zip.getNextEntry() ; entry!=null ; entry=zip.getNextEntry())
1:             {
1:                 String className = entry.getName();
1:                 if (className.endsWith(".class") && !entry.isDirectory()) {
1:                     // ignore classes with a '$' in the name - these are inner
1:                     // classes and it is possible that more get created if the 
1:                     // base class grows, or different compilers may add more
1:                     // and it seems unlikely one of the inner classes would 
1:                     // drift into another jar without its parent drifting.
1:                     if (className.contains("$"))
1:                         continue;
1:                     className = entry.getName().replace(File.separator, ".");
1:                     // replace some other possible separator chars in case the 
1:                     // character is OS, vendor, or zip implementation dependent.
1:                     className = className.replace("/", ".");
1:                     className = className.replace("//", ".");
1:                     className = className.replace("\\", ".");
1:                     classNames.add(className.toString());
1:                 }
1:             }
1:         } catch (IOException ioe ) {
1:             // in all other cases, the process should/will fail but there is
1:             // a target to build without derbyTesting.jar, so it may be ok
1:             if (!jarName.equalsIgnoreCase("derbyTesting.jar"))
1:                 throw ioe;
1:         }
1:         
1:         // load the contents into builtJarContents
1:         builtJarContents.addAll(classNames);
1:         
1:         // write out the contents ?
1:         if (updateFiles) {
1:             String fs = File.separator;
1:             String outputFile = topOfTree + fs + "java" + fs + "build" + fs +
1:                     "org" + fs + "apache" + fs + "derbyBuild" + fs + 
1:                     "lastgoodjarcontents" + fs +
1:                     sanityState + "." + jarName + ".lastcontents";
1:             PrintWriter pwf = new PrintWriter(outputFile);
1:             for (String className : classNames)
1:                 pwf.println(className);
1:             pwf.close();
1:         }
1:     }
1:     
1:     protected static String sanityState() throws Exception {
1:         // need to check on sane vs. insane - access file
1:         // generated/java/org/apache/derby/shared/common/sanity/state.properties
1:         // and look for 'false' or 'true' (the file should only have 
1:         // sanity=[false|true] except for some header/timestamp info).
1:         String fs = File.separator;
1:         String sanityFileName = 
1:                 topOfTree + fs + "generated" + fs + "java" + fs + "org" + fs +
1:                 "apache" + fs + "derby" + fs + "shared" + fs + "common" + fs +
1:                 "sanity" + fs + "state.properties";
1:         File sanityFile = new File(sanityFileName);
1:         String sanityContents = readFile(sanityFile);
1:         if (sanityContents != null && sanityContents.length()> 0)
1:         {
1:             if (sanityContents.contains("false"))
1:                 sanityState = "insane";
1:             else if (sanityContents.contains("true"))
1:                 sanityState = "sane";
1:         }
1:         else
1:         {
1:             throw new Exception ("oops, something wrong getting the sanity state");
1:         }
1:         return sanityState;
1:     }
1:     
1:     private static String readFile(File file) throws IOException{
1:         StringBuffer strbuf = new StringBuffer();
1:         
1:         try {
1:             FileReader fr = new FileReader(file);
1:             BufferedReader br = new BufferedReader(fr);
1:             String line;
1:             while ((line = br.readLine()) != null) {
1:                 strbuf.append(line);
1:                 strbuf.append("\n");
1:             }
1:             fr.close();
1:             /* if (verbose) {
1:                 System.out.println("Contents of file:");
1:                 System.out.println(strbuf.toString()); */
1:         } catch (IOException e) {
1:             e.printStackTrace();
1:         }
1:         return strbuf.toString();
1:     }
1:     
1:     protected void loadPastContents(String jarName) throws Exception {
1:         String fs = File.separator;
1:         String inputFile = topOfTree + fs + "java" + fs + "build" + fs +
1:                 "org" + fs + "apache" + fs + "derbyBuild" + fs + 
1:                 "lastgoodjarcontents"+ fs + 
1:                 sanityState + "." + jarName + ".lastcontents";
1:         if (verbose)
1:             System.out.println("looking through " + inputFile);
1:         String pastJarContentsString = readFile(new File(inputFile));
1:         // split up the string at each \n
1:         BufferedReader br = 
1:                 new BufferedReader(new StringReader(pastJarContentsString));
1:         String className = null;
1:         while ((className = br.readLine()) != null){
1:             if (verbose)
1:                 System.out.println("found/added: " + className);
1:             pastJarContents.add(className);
1:         }
1:     }
1:     
1:     protected void jarCheck(String jarName) throws Exception {
1:         builtJarContents.clear();
1:         pastJarContents.clear();
1:         loadJarContents(jarName);
1:         loadPastContents(jarName);
1:         if (verbose)
1:             System.out.println("\nnow comparing for jar: " + jarName);
1:         Iterator it = builtJarContents.iterator();
1:         
1:         while ( it.hasNext() ) {
1:             String objectName = (String)it.next();
1:             if (objectName.contains("class"))
1:             {
1:                 if (verbose)
1:                     System.out.println("objectname: " + objectName);
1:                 if ( ! pastJarContents.contains(objectName) ) {
1:                     // Don't fail out on the first one, we want to catch
1:                     // all of them.  Just note there was a failure and continue
1:                     failbuild=true;
1:                     System.err.println("ERROR: class " + objectName + " in\n" +
1:                         "       " + jarName + " was not previously there.\n");
1:                  }
1:             }
1:         }
1:     }
1: }
============================================================================