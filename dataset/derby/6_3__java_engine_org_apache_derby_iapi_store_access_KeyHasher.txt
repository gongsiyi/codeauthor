1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.store.access.KeyHasher
1:7ecc1f2: 
1:75c7276:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75c7276:    contributor license agreements.  See the NOTICE file distributed with
1:75c7276:    this work for additional information regarding copyright ownership.
1:75c7276:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75c7276:    (the "License"); you may not use this file except in compliance with
1:75c7276:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.store.access;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
2:eac0369: /**
1:eac0369: 	Provides the ability to hash on multiple objects.
1:eac0369: */
1:eac0369: public class KeyHasher 
1:eac0369: {
1:eac0369: 	
1:eac0369: 	private final Object[] objects;
1:eac0369: 
1:eac0369: 	public KeyHasher(int size)
1:eac0369: 	{
1:eac0369: 		objects = new Object[size];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set array element at the specified index to the specified object.
2:eac0369: 	 *
1:eac0369: 	 * @param index		The specified index
1:eac0369: 	 * @param object	The specified object.
1:eac0369: 	 */
1:eac0369: 	public void setObject(int index, Object object)
1:eac0369: 	{
1:eac0369: 		objects[index] = object;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the object stored at the specified index.
1:eac0369: 	 *
1:eac0369: 	 * @param index	The specified index.
1:eac0369: 	 *
1:eac0369: 	 * @return The object stored in the array element.
1:eac0369: 	 */
1:eac0369: 	public Object getObject(int index)
1:eac0369: 	{
1:eac0369: 		return objects[index];
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Static method to return the object to hash on.
1:eac0369: 	 * (Object stored in specifed array, if only a single
1:eac0369: 	 * object, otherwise a KeyHasher wrapping the
1:eac0369: 	 * objects to hash on.
1:eac0369: 	 * (NOTE: We optimize for in-memory hash tables, hence
1:eac0369: 	 * we only create a wrapper when needed.)
1:eac0369: 	 *
1:eac0369: 	 * @param objects	The array of objects to consider
1:eac0369: 	 * @param indexes	The indexes of the objects in the hash key.
1:eac0369: 	 *
1:eac0369: 	 * @return	The object to hash on.
1:eac0369: 	 */
1:eac0369: 	public static Object buildHashKey(Object[] objects,
1:eac0369: 									  int[] indexes)
1:eac0369: 	{
1:eac0369: 		// Hash on single object
1:eac0369: 		if (indexes.length == 1)
1:eac0369: 		{
1:eac0369: 			return objects[indexes[0]];
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// Hash on multiple objects
1:eac0369: 		KeyHasher mh = new KeyHasher(indexes.length);
1:eac0369: 		for (int index = 0; index < indexes.length; index++)
1:eac0369: 		{
1:eac0369: 			mh.setObject(index, objects[indexes[index]]);
1:eac0369: 		}
1:eac0369: 		return mh;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	** Methods from java.lang.Object
1:eac0369: 	*/
1:eac0369: 
1:eac0369: 	public int hashCode()
1:eac0369: 	{
1:eac0369: 		int retval = 0;
1:eac0369: 		for (int index = 0; index < objects.length; index++)
1:eac0369: 		{
1:eac0369: 			retval += objects[index].hashCode();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return retval;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public boolean equals(Object obj)
1:eac0369: 	{
1:eac0369: 		if (!(obj instanceof KeyHasher))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		KeyHasher mh = (KeyHasher) obj;
1:eac0369: 
1:eac0369: 		if (mh.objects.length != objects.length)
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		for (int index = 0; index < objects.length; index++)
1:eac0369: 		{
1:eac0369: 			if (! (mh.objects[index].equals(objects[index])))
1:eac0369: 			{
1:eac0369: 				return false;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:75c7276
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:David Van Couvering
-------------------------------------------------------------------------------
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.store.access.KeyHasher
1: 
0:    Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.store.access;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /**
1: 	Provides the ability to hash on multiple objects.
1: */
1: public class KeyHasher 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
1: 	
1: 	private final Object[] objects;
1: 
1: 	public KeyHasher(int size)
1: 	{
1: 		objects = new Object[size];
1: 	}
1: 
1: 	/**
1: 	 * Set array element at the specified index to the specified object.
1: 	 *
1: 	 * @param index		The specified index
1: 	 * @param object	The specified object.
1: 	 *
0: 	 * @return	Nothing.
1: 	 */
1: 	public void setObject(int index, Object object)
1: 	{
1: 		objects[index] = object;
1: 	}
1: 
1: 	/**
1: 	 * Get the object stored at the specified index.
1: 	 *
1: 	 * @param index	The specified index.
1: 	 *
1: 	 * @return The object stored in the array element.
1: 	 */
1: 	public Object getObject(int index)
1: 	{
1: 		return objects[index];
1: 	}
1: 
1: 	/**
1: 	 * Static method to return the object to hash on.
1: 	 * (Object stored in specifed array, if only a single
1: 	 * object, otherwise a KeyHasher wrapping the
1: 	 * objects to hash on.
1: 	 * (NOTE: We optimize for in-memory hash tables, hence
1: 	 * we only create a wrapper when needed.)
1: 	 *
1: 	 * @param objects	The array of objects to consider
1: 	 * @param indexes	The indexes of the objects in the hash key.
1: 	 *
1: 	 * @return	The object to hash on.
1: 	 */
1: 	public static Object buildHashKey(Object[] objects,
1: 									  int[] indexes)
1: 	{
1: 		// Hash on single object
1: 		if (indexes.length == 1)
1: 		{
1: 			return objects[indexes[0]];
1: 		}
1: 
1: 		// Hash on multiple objects
1: 		KeyHasher mh = new KeyHasher(indexes.length);
1: 		for (int index = 0; index < indexes.length; index++)
1: 		{
1: 			mh.setObject(index, objects[indexes[index]]);
1: 		}
1: 		return mh;
1: 	}
1: 
1: 	/*
1: 	** Methods from java.lang.Object
1: 	*/
1: 
1: 	public int hashCode()
1: 	{
1: 		int retval = 0;
1: 		for (int index = 0; index < objects.length; index++)
1: 		{
1: 			retval += objects[index].hashCode();
1: 		}
1: 
1: 		return retval;
1: 	}
1: 
1: 	public boolean equals(Object obj)
1: 	{
1: 		if (!(obj instanceof KeyHasher))
1: 			return false;
1: 
1: 		KeyHasher mh = (KeyHasher) obj;
1: 
1: 		if (mh.objects.length != objects.length)
1: 			return false;
1: 
1: 		for (int index = 0; index < objects.length; index++)
1: 		{
1: 			if (! (mh.objects[index].equals(objects[index])))
1: 			{
1: 				return false;
1: 			}
1: 		}
1: 
1: 		return true;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.store.access
0:    (C) Copyright IBM Corp. 1999, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.store.access;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /**
0: 	Provides the ability to hash on multiple objects.
0: */
0: public class KeyHasher 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1999_2004;
0: 	
0: 	private final Object[] objects;
0: 
0: 	public KeyHasher(int size)
0: 	{
0: 		objects = new Object[size];
0: 	}
0: 
0: 	/**
0: 	 * Set array element at the specified index to the specified object.
0: 	 *
0: 	 * @param index		The specified index
0: 	 * @param object	The specified object.
0: 	 *
0: 	 * @return	Nothing.
0: 	 */
0: 	public void setObject(int index, Object object)
0: 	{
0: 		objects[index] = object;
0: 	}
0: 
0: 	/**
0: 	 * Get the object stored at the specified index.
0: 	 *
0: 	 * @param index	The specified index.
0: 	 *
0: 	 * @return The object stored in the array element.
0: 	 */
0: 	public Object getObject(int index)
0: 	{
0: 		return objects[index];
0: 	}
0: 
0: 	/**
0: 	 * Static method to return the object to hash on.
0: 	 * (Object stored in specifed array, if only a single
0: 	 * object, otherwise a KeyHasher wrapping the
0: 	 * objects to hash on.
0: 	 * (NOTE: We optimize for in-memory hash tables, hence
0: 	 * we only create a wrapper when needed.)
0: 	 *
0: 	 * @param objects	The array of objects to consider
0: 	 * @param indexes	The indexes of the objects in the hash key.
0: 	 *
0: 	 * @return	The object to hash on.
0: 	 */
0: 	public static Object buildHashKey(Object[] objects,
0: 									  int[] indexes)
0: 	{
0: 		// Hash on single object
0: 		if (indexes.length == 1)
0: 		{
0: 			return objects[indexes[0]];
0: 		}
0: 
0: 		// Hash on multiple objects
0: 		KeyHasher mh = new KeyHasher(indexes.length);
0: 		for (int index = 0; index < indexes.length; index++)
0: 		{
0: 			mh.setObject(index, objects[indexes[index]]);
0: 		}
0: 		return mh;
0: 	}
0: 
0: 	/*
0: 	** Methods from java.lang.Object
0: 	*/
0: 
0: 	public int hashCode()
0: 	{
0: 		int retval = 0;
0: 		for (int index = 0; index < objects.length; index++)
0: 		{
0: 			retval += objects[index].hashCode();
0: 		}
0: 
0: 		return retval;
0: 	}
0: 
0: 	public boolean equals(Object obj)
0: 	{
0: 		if (!(obj instanceof KeyHasher))
0: 			return false;
0: 
0: 		KeyHasher mh = (KeyHasher) obj;
0: 
0: 		if (mh.objects.length != objects.length)
0: 			return false;
0: 
0: 		for (int index = 0; index < objects.length; index++)
0: 		{
0: 			if (! (mh.objects[index].equals(objects[index])))
0: 			{
0: 				return false;
0: 			}
0: 		}
0: 
0: 		return true;
0: 	}
0: }
============================================================================