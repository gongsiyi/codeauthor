1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.D_BaseContainerHandle
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.diag.Diagnosticable;
1:eac0369: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
1:eac0369: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1:eac0369: import org.apache.derby.iapi.services.monitor.ModuleControl;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.RowLock;
1:eac0369: import org.apache.derby.iapi.store.raw.ContainerKey;
1:eac0369: 
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: The D_BaseContainerHandle class provides diagnostic information about the
1:eac0369: BaseContainerHandle class.  Currently this info is a single string of the form
1:eac0369:     TABLE(conglomerate_id, container_id)
1:eac0369: **/
1:eac0369: 
1:eac0369: public class D_BaseContainerHandle extends DiagnosticableGeneric
1:eac0369: {
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return string identifying the underlying container.
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return A string of the form TABLE(conglomerate_id, container_id).
1:94f158a:      * @exception StandardException Standard Derby Error
1:eac0369: 	 **/
1:eac0369:     public String diag()
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         BaseContainerHandle ch  = (BaseContainerHandle) diag_object;
1:eac0369:         String              str = null;
1:eac0369: 
1:eac0369:         /*
1:eac0369:         String str = 
1:eac0369:             "BaseContainerHandle:(" + 
1:eac0369:             DiagnosticUtil.toDiagString(ch.identity) + 
1:eac0369:             ")";
1:eac0369:         */
1:eac0369: 
1:3fb9515:         long container_id = ch.getId().getContainerId();
1:eac0369: 
1:eac0369:         long conglom_id   = 
1:eac0369:             D_DiagnosticUtil.diag_containerid_to_conglomid(
1:3fb9515:                     ch.getTransaction().getDataFactory(),
1:eac0369:                     container_id);
1:eac0369: 
1:eac0369:         if (conglom_id !=  Long.MIN_VALUE)
1:eac0369:         {
1:eac0369:             str = "TABLE(" + conglom_id + "," + container_id + ")";
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             str = "TABLE(Booting..., " + container_id + ")";
1:eac0369:         }
1:eac0369: 
1:eac0369:         // RESOLVE (mikem) - during boot we can't ask acces to give us the
1:eac0369:         // containerid info, since access hasn't booted yet.  For now just
1:eac0369:         // assume that is why we got a bad containerid number and don't print
1:eac0369:         // the containerid so that we can diff the output.
1:eac0369:         /*
1:eac0369:         else
1:eac0369:         {
1:eac0369:             str = "TABLE(?, " +  container_id + ")";
1:eac0369: 
1:eac0369:             Thread.dumpStack();
1:eac0369:         }
1:eac0369:         */
1:eac0369: 
1:eac0369:         return(str);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return a set of properties describing the the key used to lock container.
1:eac0369:      * <p>
1:eac0369:      * Used by debugging code to print the lock table on demand.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public void diag_detail(Properties prop)
1:eac0369:         throws StandardException
1:eac0369:     {
1:eac0369:         BaseContainerHandle ch          = (BaseContainerHandle) diag_object;
1:eac0369:         ContainerKey        key         = ch.getId();
1:eac0369: 
1:eac0369:         prop.put(RowLock.DIAG_CONTAINERID, Long.toString(key.getContainerId()));
1:eac0369: 
1:eac0369:         prop.put(RowLock.DIAG_SEGMENTID, Long.toString(key.getSegmentId()));
1:eac0369: 
1:eac0369:         // The following 2 don't make sense for container locks, just set
1:eac0369:         // them to 0 to make it easier for now to tree container locks and
1:eac0369:         // row locks similarly.  
1:eac0369:         prop.put(RowLock.DIAG_PAGENUM, Integer.toString(0));
1:eac0369:         prop.put(RowLock.DIAG_RECID,   Integer.toString(0));
1:eac0369: 
1:eac0369:         return;
1:eac0369:     }
1:eac0369: }
============================================================================
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3fb9515
/////////////////////////////////////////////////////////////////////////
1:         long container_id = ch.getId().getContainerId();
1:                     ch.getTransaction().getDataFactory(),
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1:      * @exception StandardException Standard Derby Error
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.D_BaseContainerHandle
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.iapi.services.diag.Diagnosticable;
1: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
1: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
1: import org.apache.derby.iapi.services.monitor.ModuleControl;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.store.raw.RowLock;
1: import org.apache.derby.iapi.store.raw.ContainerKey;
1: 
1: import java.util.Properties;
1: 
1: /**
1: 
1: The D_BaseContainerHandle class provides diagnostic information about the
1: BaseContainerHandle class.  Currently this info is a single string of the form
1:     TABLE(conglomerate_id, container_id)
1: **/
1: 
1: public class D_BaseContainerHandle extends DiagnosticableGeneric
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1:     /**
1:      * Return string identifying the underlying container.
1:      * <p>
1:      *
1: 	 * @return A string of the form TABLE(conglomerate_id, container_id).
0:      * @exception StandardException Standard Cloudscape Error
1: 	 **/
1:     public String diag()
1:         throws StandardException
1:     {
1:         BaseContainerHandle ch  = (BaseContainerHandle) diag_object;
1:         String              str = null;
1: 
1:         /*
1:         String str = 
1:             "BaseContainerHandle:(" + 
1:             DiagnosticUtil.toDiagString(ch.identity) + 
1:             ")";
1:         */
1: 
0:         long container_id = ch.identity.getContainerId();
1: 
1:         long conglom_id   = 
1:             D_DiagnosticUtil.diag_containerid_to_conglomid(
0:                     ch.xact.getDataFactory(),
1:                     container_id);
1: 
1:         if (conglom_id !=  Long.MIN_VALUE)
1:         {
1:             str = "TABLE(" + conglom_id + "," + container_id + ")";
1:         }
1:         else
1:         {
1:             str = "TABLE(Booting..., " + container_id + ")";
1:         }
1: 
1:         // RESOLVE (mikem) - during boot we can't ask acces to give us the
1:         // containerid info, since access hasn't booted yet.  For now just
1:         // assume that is why we got a bad containerid number and don't print
1:         // the containerid so that we can diff the output.
1:         /*
1:         else
1:         {
1:             str = "TABLE(?, " +  container_id + ")";
1: 
1:             Thread.dumpStack();
1:         }
1:         */
1: 
1:         return(str);
1:     }
1: 
1:     /**
1:      * Return a set of properties describing the the key used to lock container.
1:      * <p>
1:      * Used by debugging code to print the lock table on demand.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void diag_detail(Properties prop)
1:         throws StandardException
1:     {
1:         BaseContainerHandle ch          = (BaseContainerHandle) diag_object;
1:         ContainerKey        key         = ch.getId();
1: 
1:         prop.put(RowLock.DIAG_CONTAINERID, Long.toString(key.getContainerId()));
1: 
1:         prop.put(RowLock.DIAG_SEGMENTID, Long.toString(key.getSegmentId()));
1: 
1:         // The following 2 don't make sense for container locks, just set
1:         // them to 0 to make it easier for now to tree container locks and
1:         // row locks similarly.  
1:         prop.put(RowLock.DIAG_PAGENUM, Integer.toString(0));
1:         prop.put(RowLock.DIAG_RECID,   Integer.toString(0));
1: 
1:         return;
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.iapi.services.diag.Diagnosticable;
0: import org.apache.derby.iapi.services.diag.DiagnosticableGeneric;
0: import org.apache.derby.iapi.services.diag.DiagnosticUtil;
0: import org.apache.derby.iapi.services.monitor.ModuleControl;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.store.raw.RowLock;
0: import org.apache.derby.iapi.store.raw.ContainerKey;
0: 
0: import java.util.Properties;
0: 
0: /**
0: 
0: The D_BaseContainerHandle class provides diagnostic information about the
0: BaseContainerHandle class.  Currently this info is a single string of the form
0:     TABLE(conglomerate_id, container_id)
0: **/
0: 
0: public class D_BaseContainerHandle extends DiagnosticableGeneric
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0:     /**
0:      * Return string identifying the underlying container.
0:      * <p>
0:      *
0: 	 * @return A string of the form TABLE(conglomerate_id, container_id).
0:      * @exception StandardException Standard Cloudscape Error
0: 	 **/
0:     public String diag()
0:         throws StandardException
0:     {
0:         BaseContainerHandle ch  = (BaseContainerHandle) diag_object;
0:         String              str = null;
0: 
0:         /*
0:         String str = 
0:             "BaseContainerHandle:(" + 
0:             DiagnosticUtil.toDiagString(ch.identity) + 
0:             ")";
0:         */
0: 
0:         long container_id = ch.identity.getContainerId();
0: 
0:         long conglom_id   = 
0:             D_DiagnosticUtil.diag_containerid_to_conglomid(
0:                     ch.xact.getDataFactory(),
0:                     container_id);
0: 
0:         if (conglom_id !=  Long.MIN_VALUE)
0:         {
0:             str = "TABLE(" + conglom_id + "," + container_id + ")";
0:         }
0:         else
0:         {
0:             str = "TABLE(Booting..., " + container_id + ")";
0:         }
0: 
0:         // RESOLVE (mikem) - during boot we can't ask acces to give us the
0:         // containerid info, since access hasn't booted yet.  For now just
0:         // assume that is why we got a bad containerid number and don't print
0:         // the containerid so that we can diff the output.
0:         /*
0:         else
0:         {
0:             str = "TABLE(?, " +  container_id + ")";
0: 
0:             Thread.dumpStack();
0:         }
0:         */
0: 
0:         return(str);
0:     }
0: 
0:     /**
0:      * Return a set of properties describing the the key used to lock container.
0:      * <p>
0:      * Used by debugging code to print the lock table on demand.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public void diag_detail(Properties prop)
0:         throws StandardException
0:     {
0:         BaseContainerHandle ch          = (BaseContainerHandle) diag_object;
0:         ContainerKey        key         = ch.getId();
0: 
0:         prop.put(RowLock.DIAG_CONTAINERID, Long.toString(key.getContainerId()));
0: 
0:         prop.put(RowLock.DIAG_SEGMENTID, Long.toString(key.getSegmentId()));
0: 
0:         // The following 2 don't make sense for container locks, just set
0:         // them to 0 to make it easier for now to tree container locks and
0:         // row locks similarly.  
0:         prop.put(RowLock.DIAG_PAGENUM, Integer.toString(0));
0:         prop.put(RowLock.DIAG_RECID,   Integer.toString(0));
0: 
0:         return;
0:     }
0: }
============================================================================