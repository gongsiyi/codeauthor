1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/PackagePermission.java,v 1.14 2006/06/16 16:31:18 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2006). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: import java.io.IOException;
1:a8b6921: import java.security.*;
1:a8b6921: import java.util.Enumeration;
1:a8b6921: import java.util.Hashtable;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * A bundle's authority to import or export a package.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * A package is a dot-separated string that defines a fully qualified Java
1:a8b6921:  * package.
1:a8b6921:  * <p>
1:a8b6921:  * For example:
1:a8b6921:  * 
1:a8b6921:  * <pre>
1:a8b6921:  * <code>
1:a8b6921:  * org.osgi.service.http
1:a8b6921:  * </code>
1:a8b6921:  * </pre>
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>PackagePermission</code> has two actions: <code>EXPORT</code> and
1:a8b6921:  * <code>IMPORT</code>. The <code>EXPORT</code> action implies the
1:a8b6921:  * <code>IMPORT</code> action.
1:a8b6921:  * 
1:a8b6921:  * @version $Revision: 1.14 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public final class PackagePermission extends BasicPermission {
1:a8b6921: 	static final long			serialVersionUID	= -5107705877071099135L;
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>export</code>.
1:a8b6921: 	 */
1:a8b6921: 	public final static String	EXPORT				= "export";
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The action string <code>import</code>.
1:a8b6921: 	 */
1:a8b6921: 	public final static String	IMPORT				= "import";
1:a8b6921: 
1:a8b6921: 	private final static int	ACTION_EXPORT		= 0x00000001;
1:a8b6921: 	private final static int	ACTION_IMPORT		= 0x00000002;
1:a8b6921: 	private final static int	ACTION_ALL			= ACTION_EXPORT
1:a8b6921: 															| ACTION_IMPORT;
1:a8b6921: 	private final static int	ACTION_NONE			= 0;
1:a8b6921: 	/**
1:a8b6921: 	 * The actions mask.
1:a8b6921: 	 */
1:a8b6921: 	private transient int		action_mask			= ACTION_NONE;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * The actions in canonical form.
1:a8b6921: 	 * 
1:a8b6921: 	 * @serial
1:a8b6921: 	 */
1:a8b6921: 	private String				actions				= null;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Defines the authority to import and/or export a package within the OSGi
1:a8b6921: 	 * environment.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The name is specified as a normal Java package name: a dot-separated
1:a8b6921: 	 * string. Wildcards may be used. For example:
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 * org.osgi.service.http
1:a8b6921: 	 * javax.servlet.*
1:a8b6921: 	 * *
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Package Permissions are granted over all possible versions of a package.
1:a8b6921: 	 * 
1:a8b6921: 	 * A bundle that needs to export a package must have the appropriate
1:a8b6921: 	 * <code>PackagePermission</code> for that package; similarly, a bundle
1:a8b6921: 	 * that needs to import a package must have the appropriate
1:a8b6921: 	 * <code>PackagePermssion</code> for that package.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Permission is granted for both classes and resources.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param name Package name.
1:a8b6921: 	 * @param actions <code>EXPORT</code>,<code>IMPORT</code> (canonical
1:a8b6921: 	 *        order).
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public PackagePermission(String name, String actions) {
1:a8b6921: 		this(name, getMask(actions));
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Package private constructor used by PackagePermissionCollection.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param name class name
1:a8b6921: 	 * @param mask action mask
1:a8b6921: 	 */
1:a8b6921: 	PackagePermission(String name, int mask) {
1:a8b6921: 		super(name);
1:a8b6921: 		init(mask);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Called by constructors and when deserialized.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param mask action mask
1:a8b6921: 	 */
1:a8b6921: 	private void init(int mask) {
1:a8b6921: 		if ((mask == ACTION_NONE) || ((mask & ACTION_ALL) != mask)) {
1:a8b6921: 			throw new IllegalArgumentException("invalid action string");
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		action_mask = mask;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Parse action string into action mask.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param actions Action string.
1:a8b6921: 	 * @return action mask.
1:a8b6921: 	 */
1:a8b6921: 	private static int getMask(String actions) {
1:a8b6921: 		boolean seencomma = false;
1:a8b6921: 
1:a8b6921: 		int mask = ACTION_NONE;
1:a8b6921: 
1:a8b6921: 		if (actions == null) {
1:a8b6921: 			return (mask);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		char[] a = actions.toCharArray();
1:a8b6921: 
1:a8b6921: 		int i = a.length - 1;
1:a8b6921: 		if (i < 0)
1:a8b6921: 			return (mask);
1:a8b6921: 
1:a8b6921: 		while (i != -1) {
1:a8b6921: 			char c;
1:a8b6921: 
1:a8b6921: 			// skip whitespace
1:a8b6921: 			while ((i != -1)
1:a8b6921: 					&& ((c = a[i]) == ' ' || c == '\r' || c == '\n'
1:a8b6921: 							|| c == '\f' || c == '\t'))
1:a8b6921: 				i--;
1:a8b6921: 
1:a8b6921: 			// check for the known strings
1:a8b6921: 			int matchlen;
1:a8b6921: 
1:a8b6921: 			if (i >= 5 && (a[i - 5] == 'i' || a[i - 5] == 'I')
1:a8b6921: 					&& (a[i - 4] == 'm' || a[i - 4] == 'M')
1:a8b6921: 					&& (a[i - 3] == 'p' || a[i - 3] == 'P')
1:a8b6921: 					&& (a[i - 2] == 'o' || a[i - 2] == 'O')
1:a8b6921: 					&& (a[i - 1] == 'r' || a[i - 1] == 'R')
1:a8b6921: 					&& (a[i] == 't' || a[i] == 'T')) {
1:a8b6921: 				matchlen = 6;
1:a8b6921: 				mask |= ACTION_IMPORT;
1:a8b6921: 
1:a8b6921: 			}
1:a8b6921: 			else
1:a8b6921: 				if (i >= 5 && (a[i - 5] == 'e' || a[i - 5] == 'E')
1:a8b6921: 						&& (a[i - 4] == 'x' || a[i - 4] == 'X')
1:a8b6921: 						&& (a[i - 3] == 'p' || a[i - 3] == 'P')
1:a8b6921: 						&& (a[i - 2] == 'o' || a[i - 2] == 'O')
1:a8b6921: 						&& (a[i - 1] == 'r' || a[i - 1] == 'R')
1:a8b6921: 						&& (a[i] == 't' || a[i] == 'T')) {
1:a8b6921: 					matchlen = 6;
1:a8b6921: 					mask |= ACTION_EXPORT | ACTION_IMPORT;
1:a8b6921: 
1:a8b6921: 				}
1:a8b6921: 				else {
1:a8b6921: 					// parse error
1:a8b6921: 					throw new IllegalArgumentException("invalid permission: "
1:a8b6921: 							+ actions);
1:a8b6921: 				}
1:a8b6921: 
1:a8b6921: 			// make sure we didn't just match the tail of a word
1:a8b6921: 			// like "ackbarfimport". Also, skip to the comma.
1:a8b6921: 			seencomma = false;
1:a8b6921: 			while (i >= matchlen && !seencomma) {
1:a8b6921: 				switch (a[i - matchlen]) {
1:a8b6921: 					case ',' :
1:a8b6921: 						seencomma = true;
1:a8b6921: 					/* FALLTHROUGH */
1:a8b6921: 					case ' ' :
1:a8b6921: 					case '\r' :
1:a8b6921: 					case '\n' :
1:a8b6921: 					case '\f' :
1:a8b6921: 					case '\t' :
1:a8b6921: 						break;
1:a8b6921: 					default :
1:a8b6921: 						throw new IllegalArgumentException(
1:a8b6921: 								"invalid permission: " + actions);
1:a8b6921: 				}
1:a8b6921: 				i--;
1:a8b6921: 			}
1:a8b6921: 
1:a8b6921: 			// point i at the location of the comma minus one (or -1).
1:a8b6921: 			i -= matchlen;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (seencomma) {
1:a8b6921: 			throw new IllegalArgumentException("invalid permission: " + actions);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return (mask);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines if the specified permission is implied by this object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * This method checks that the package name of the target is implied by the
1:a8b6921: 	 * package name of this object. The list of <code>PackagePermission</code>
1:a8b6921: 	 * actions must either match or allow for the list of the target object to
1:a8b6921: 	 * imply the target <code>PackagePermission</code> action.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The permission to export a package implies the permission to import the
1:a8b6921: 	 * named package.
1:a8b6921: 	 * 
1:a8b6921: 	 * <pre>
1:a8b6921: 	 * x.y.*,&quot;export&quot; -&gt; x.y.z,&quot;export&quot; is true
1:a8b6921: 	 * *,&quot;import&quot; -&gt; x.y, &quot;import&quot;      is true
1:a8b6921: 	 * *,&quot;export&quot; -&gt; x.y, &quot;import&quot;      is true
1:a8b6921: 	 * x.y,&quot;export&quot; -&gt; x.y.z, &quot;export&quot;  is false
1:a8b6921: 	 * </pre>
1:a8b6921: 	 * 
1:a8b6921: 	 * @param p The target permission to interrogate.
1:a8b6921: 	 * @return <code>true</code> if the specified
1:a8b6921: 	 *         <code>PackagePermission</code> action is implied by this
1:a8b6921: 	 *         object; <code>false</code> otherwise.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public boolean implies(Permission p) {
1:a8b6921: 		if (p instanceof PackagePermission) {
1:a8b6921: 			PackagePermission target = (PackagePermission) p;
1:a8b6921: 
1:a8b6921: 			return (((action_mask & target.action_mask) == target.action_mask) && super
1:a8b6921: 					.implies(p));
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return (false);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the canonical string representation of the
1:a8b6921: 	 * <code>PackagePermission</code> actions.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Always returns present <code>PackagePermission</code> actions in the
1:a8b6921: 	 * following order: <code>EXPORT</code>,<code>IMPORT</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Canonical string representation of the
1:a8b6921: 	 *         <code>PackagePermission</code> actions.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public String getActions() {
1:a8b6921: 		if (actions == null) {
1:a8b6921: 			StringBuffer sb = new StringBuffer();
1:a8b6921: 			boolean comma = false;
1:a8b6921: 
1:a8b6921: 			if ((action_mask & ACTION_EXPORT) == ACTION_EXPORT) {
1:a8b6921: 				sb.append(EXPORT);
1:a8b6921: 				comma = true;
1:a8b6921: 			}
1:a8b6921: 
1:a8b6921: 			if ((action_mask & ACTION_IMPORT) == ACTION_IMPORT) {
1:a8b6921: 				if (comma)
1:a8b6921: 					sb.append(',');
1:a8b6921: 				sb.append(IMPORT);
1:a8b6921: 			}
1:a8b6921: 
1:a8b6921: 			actions = sb.toString();
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		return (actions);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns a new <code>PermissionCollection</code> object suitable for
1:a8b6921: 	 * storing <code>PackagePermission</code> objects.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return A new <code>PermissionCollection</code> object.
1:a8b6921: 	 */
1:a8b6921: 	public PermissionCollection newPermissionCollection() {
1:a8b6921: 		return (new PackagePermissionCollection());
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines the equality of two <code>PackagePermission</code> objects.
1:a8b6921: 	 * 
1:a8b6921: 	 * This method checks that specified package has the same package name and
1:a8b6921: 	 * <code>PackagePermission</code> actions as this
1:a8b6921: 	 * <code>PackagePermission</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param obj The object to test for equality with this
1:a8b6921: 	 *        <code>PackagePermission</code> object.
1:a8b6921: 	 * @return <code>true</code> if <code>obj</code> is a
1:a8b6921: 	 *         <code>PackagePermission</code>, and has the same package name
1:a8b6921: 	 *         and actions as this <code>PackagePermission</code> object;
1:a8b6921: 	 *         <code>false</code> otherwise.
1:a8b6921: 	 */
1:a8b6921: 	public boolean equals(Object obj) {
1:a8b6921: 		if (obj == this) {
1:a8b6921: 			return (true);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (!(obj instanceof PackagePermission)) {
1:a8b6921: 			return (false);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		PackagePermission p = (PackagePermission) obj;
1:a8b6921: 
1:a8b6921: 		return ((action_mask == p.action_mask) && getName().equals(p.getName()));
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the hash code value for this object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return A hash code value for this object.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public int hashCode() {
1:a8b6921: 		return (getName().hashCode() ^ getActions().hashCode());
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns the current action mask.
1:a8b6921: 	 * <p>
1:a8b6921: 	 * Used by the PackagePermissionCollection class.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Current action mask.
1:a8b6921: 	 */
1:a8b6921: 	int getMask() {
1:a8b6921: 		return (action_mask);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * WriteObject is called to save the state of this permission object to a
1:a8b6921: 	 * stream. The actions are serialized, and the superclass takes care of the
1:a8b6921: 	 * name.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	private synchronized void writeObject(java.io.ObjectOutputStream s)
1:a8b6921: 			throws IOException {
1:a8b6921: 		// Write out the actions. The superclass takes care of the name
1:a8b6921: 		// call getActions to make sure actions field is initialized
1:a8b6921: 		if (actions == null)
1:a8b6921: 			getActions();
1:a8b6921: 		s.defaultWriteObject();
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * readObject is called to restore the state of this permission from a
1:a8b6921: 	 * stream.
1:a8b6921: 	 */
1:a8b6921: 	private synchronized void readObject(java.io.ObjectInputStream s)
1:a8b6921: 			throws IOException, ClassNotFoundException {
1:a8b6921: 		// Read in the action, then initialize the rest
1:a8b6921: 		s.defaultReadObject();
1:a8b6921: 		init(getMask(actions));
1:a8b6921: 	}
1:a8b6921: }
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * Stores a set of <code>PackagePermission</code> permissions.
1:a8b6921:  * 
1:a8b6921:  * @see java.security.Permission
1:a8b6921:  * @see java.security.Permissions
1:a8b6921:  * @see java.security.PermissionCollection
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: final class PackagePermissionCollection extends PermissionCollection {
1:a8b6921: 	static final long	serialVersionUID	= -3350758995234427603L;
1:a8b6921: 	/**
1:a8b6921: 	 * Table of permissions.
1:a8b6921: 	 * 
1:a8b6921: 	 * @serial
1:a8b6921: 	 */
1:7051698: 	private Hashtable<String,Permission>	permissions;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Boolean saying if "*" is in the collection.
1:a8b6921: 	 * 
1:a8b6921: 	 * @serial
1:a8b6921: 	 */
1:a8b6921: 	private boolean		all_allowed;
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Create an empty PackagePermissions object.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public PackagePermissionCollection() {
1:7051698: 		permissions = new Hashtable<String,Permission>();
1:a8b6921: 		all_allowed = false;
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Adds a permission to the <code>PackagePermission</code> objects. The
1:a8b6921: 	 * key for the hash is the name.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param permission The <code>PackagePermission</code> object to add.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws IllegalArgumentException If the permission is not a
1:a8b6921: 	 *         <code>PackagePermission</code> instance.
1:a8b6921: 	 * 
1:a8b6921: 	 * @throws SecurityException If this
1:a8b6921: 	 *         <code>PackagePermissionCollection</code> object has been marked
1:a8b6921: 	 *         read-only.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public void add(Permission permission) {
1:a8b6921: 		if (!(permission instanceof PackagePermission))
1:a8b6921: 			throw new IllegalArgumentException("invalid permission: "
1:a8b6921: 					+ permission);
1:a8b6921: 		if (isReadOnly())
1:a8b6921: 			throw new SecurityException("attempt to add a Permission to a "
1:a8b6921: 					+ "readonly PermissionCollection");
1:a8b6921: 
1:a8b6921: 		PackagePermission pp = (PackagePermission) permission;
1:a8b6921: 		String name = pp.getName();
1:a8b6921: 
1:a8b6921: 		PackagePermission existing = (PackagePermission) permissions.get(name);
1:a8b6921: 
1:a8b6921: 		if (existing != null) {
1:a8b6921: 			int oldMask = existing.getMask();
1:a8b6921: 			int newMask = pp.getMask();
1:a8b6921: 			if (oldMask != newMask) {
1:a8b6921: 				permissions.put(name, new PackagePermission(name, oldMask
1:a8b6921: 						| newMask));
1:a8b6921: 
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 		else {
1:a8b6921: 			permissions.put(name, permission);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		if (!all_allowed) {
1:a8b6921: 			if (name.equals("*"))
1:a8b6921: 				all_allowed = true;
1:a8b6921: 		}
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Determines if the specified permissions implies the permissions expressed
1:a8b6921: 	 * in <code>permission</code>.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param permission The Permission object to compare with this
1:a8b6921: 	 *        <code>PackagePermission</code> object.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return <code>true</code> if <code>permission</code> is a proper
1:a8b6921: 	 *         subset of a permission in the set; <code>false</code>
1:a8b6921: 	 *         otherwise.
1:a8b6921: 	 */
1:a8b6921: 
1:a8b6921: 	public boolean implies(Permission permission) {
1:a8b6921: 		if (!(permission instanceof PackagePermission))
1:a8b6921: 			return (false);
1:a8b6921: 
1:a8b6921: 		PackagePermission pp = (PackagePermission) permission;
1:a8b6921: 		PackagePermission x;
1:a8b6921: 
1:a8b6921: 		int desired = pp.getMask();
1:a8b6921: 		int effective = 0;
1:a8b6921: 
1:a8b6921: 		// short circuit if the "*" Permission was added
1:a8b6921: 		if (all_allowed) {
1:a8b6921: 			x = (PackagePermission) permissions.get("*");
1:a8b6921: 			if (x != null) {
1:a8b6921: 				effective |= x.getMask();
1:a8b6921: 				if ((effective & desired) == desired)
1:a8b6921: 					return (true);
1:a8b6921: 			}
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		// strategy:
1:a8b6921: 		// Check for full match first. Then work our way up the
1:a8b6921: 		// name looking for matches on a.b.*
1:a8b6921: 
1:a8b6921: 		String name = pp.getName();
1:a8b6921: 
1:a8b6921: 		x = (PackagePermission) permissions.get(name);
1:a8b6921: 
1:a8b6921: 		if (x != null) {
1:a8b6921: 			// we have a direct hit!
1:a8b6921: 			effective |= x.getMask();
1:a8b6921: 			if ((effective & desired) == desired)
1:a8b6921: 				return (true);
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		// work our way up the tree...
1:a8b6921: 		int last, offset;
1:a8b6921: 
1:a8b6921: 		offset = name.length() - 1;
1:a8b6921: 
1:a8b6921: 		while ((last = name.lastIndexOf(".", offset)) != -1) {
1:a8b6921: 
1:a8b6921: 			name = name.substring(0, last + 1) + "*";
1:a8b6921: 			x = (PackagePermission) permissions.get(name);
1:a8b6921: 
1:a8b6921: 			if (x != null) {
1:a8b6921: 				effective |= x.getMask();
1:a8b6921: 				if ((effective & desired) == desired)
1:a8b6921: 					return (true);
1:a8b6921: 			}
1:a8b6921: 			offset = last - 1;
1:a8b6921: 		}
1:a8b6921: 
1:a8b6921: 		// we don't have to check for "*" as it was already checked
1:a8b6921: 		// at the top (all_allowed), so we just return false
1:a8b6921: 		return (false);
1:a8b6921: 	}
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Returns an enumeration of all <code>PackagePermission</code> objects in
1:a8b6921: 	 * the container.
1:a8b6921: 	 * 
1:a8b6921: 	 * @return Enumeration of all <code>PackagePermission</code> objects.
1:a8b6921: 	 */
1:a8b6921: 
1:7051698: 	public Enumeration<Permission> elements() {
1:a8b6921: 		return (permissions.elements());
1:a8b6921: 	}
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:7051698
/////////////////////////////////////////////////////////////////////////
1: 	private Hashtable<String,Permission>	permissions;
/////////////////////////////////////////////////////////////////////////
1: 		permissions = new Hashtable<String,Permission>();
/////////////////////////////////////////////////////////////////////////
1: 	public Enumeration<Permission> elements() {
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/PackagePermission.java,v 1.14 2006/06/16 16:31:18 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2006). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: import java.io.IOException;
1: import java.security.*;
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: 
1: /**
1:  * A bundle's authority to import or export a package.
1:  * 
1:  * <p>
1:  * A package is a dot-separated string that defines a fully qualified Java
1:  * package.
1:  * <p>
1:  * For example:
1:  * 
1:  * <pre>
1:  * <code>
1:  * org.osgi.service.http
1:  * </code>
1:  * </pre>
1:  * 
1:  * <p>
1:  * <code>PackagePermission</code> has two actions: <code>EXPORT</code> and
1:  * <code>IMPORT</code>. The <code>EXPORT</code> action implies the
1:  * <code>IMPORT</code> action.
1:  * 
1:  * @version $Revision: 1.14 $
1:  */
1: 
1: public final class PackagePermission extends BasicPermission {
1: 	static final long			serialVersionUID	= -5107705877071099135L;
1: 	/**
1: 	 * The action string <code>export</code>.
1: 	 */
1: 	public final static String	EXPORT				= "export";
1: 
1: 	/**
1: 	 * The action string <code>import</code>.
1: 	 */
1: 	public final static String	IMPORT				= "import";
1: 
1: 	private final static int	ACTION_EXPORT		= 0x00000001;
1: 	private final static int	ACTION_IMPORT		= 0x00000002;
1: 	private final static int	ACTION_ALL			= ACTION_EXPORT
1: 															| ACTION_IMPORT;
1: 	private final static int	ACTION_NONE			= 0;
1: 	/**
1: 	 * The actions mask.
1: 	 */
1: 	private transient int		action_mask			= ACTION_NONE;
1: 
1: 	/**
1: 	 * The actions in canonical form.
1: 	 * 
1: 	 * @serial
1: 	 */
1: 	private String				actions				= null;
1: 
1: 	/**
1: 	 * Defines the authority to import and/or export a package within the OSGi
1: 	 * environment.
1: 	 * <p>
1: 	 * The name is specified as a normal Java package name: a dot-separated
1: 	 * string. Wildcards may be used. For example:
1: 	 * 
1: 	 * <pre>
1: 	 * org.osgi.service.http
1: 	 * javax.servlet.*
1: 	 * *
1: 	 * </pre>
1: 	 * 
1: 	 * <p>
1: 	 * Package Permissions are granted over all possible versions of a package.
1: 	 * 
1: 	 * A bundle that needs to export a package must have the appropriate
1: 	 * <code>PackagePermission</code> for that package; similarly, a bundle
1: 	 * that needs to import a package must have the appropriate
1: 	 * <code>PackagePermssion</code> for that package.
1: 	 * <p>
1: 	 * Permission is granted for both classes and resources.
1: 	 * 
1: 	 * @param name Package name.
1: 	 * @param actions <code>EXPORT</code>,<code>IMPORT</code> (canonical
1: 	 *        order).
1: 	 */
1: 
1: 	public PackagePermission(String name, String actions) {
1: 		this(name, getMask(actions));
1: 	}
1: 
1: 	/**
1: 	 * Package private constructor used by PackagePermissionCollection.
1: 	 * 
1: 	 * @param name class name
1: 	 * @param mask action mask
1: 	 */
1: 	PackagePermission(String name, int mask) {
1: 		super(name);
1: 		init(mask);
1: 	}
1: 
1: 	/**
1: 	 * Called by constructors and when deserialized.
1: 	 * 
1: 	 * @param mask action mask
1: 	 */
1: 	private void init(int mask) {
1: 		if ((mask == ACTION_NONE) || ((mask & ACTION_ALL) != mask)) {
1: 			throw new IllegalArgumentException("invalid action string");
1: 		}
1: 
1: 		action_mask = mask;
1: 	}
1: 
1: 	/**
1: 	 * Parse action string into action mask.
1: 	 * 
1: 	 * @param actions Action string.
1: 	 * @return action mask.
1: 	 */
1: 	private static int getMask(String actions) {
1: 		boolean seencomma = false;
1: 
1: 		int mask = ACTION_NONE;
1: 
1: 		if (actions == null) {
1: 			return (mask);
1: 		}
1: 
1: 		char[] a = actions.toCharArray();
1: 
1: 		int i = a.length - 1;
1: 		if (i < 0)
1: 			return (mask);
1: 
1: 		while (i != -1) {
1: 			char c;
1: 
1: 			// skip whitespace
1: 			while ((i != -1)
1: 					&& ((c = a[i]) == ' ' || c == '\r' || c == '\n'
1: 							|| c == '\f' || c == '\t'))
1: 				i--;
1: 
1: 			// check for the known strings
1: 			int matchlen;
1: 
1: 			if (i >= 5 && (a[i - 5] == 'i' || a[i - 5] == 'I')
1: 					&& (a[i - 4] == 'm' || a[i - 4] == 'M')
1: 					&& (a[i - 3] == 'p' || a[i - 3] == 'P')
1: 					&& (a[i - 2] == 'o' || a[i - 2] == 'O')
1: 					&& (a[i - 1] == 'r' || a[i - 1] == 'R')
1: 					&& (a[i] == 't' || a[i] == 'T')) {
1: 				matchlen = 6;
1: 				mask |= ACTION_IMPORT;
1: 
1: 			}
1: 			else
1: 				if (i >= 5 && (a[i - 5] == 'e' || a[i - 5] == 'E')
1: 						&& (a[i - 4] == 'x' || a[i - 4] == 'X')
1: 						&& (a[i - 3] == 'p' || a[i - 3] == 'P')
1: 						&& (a[i - 2] == 'o' || a[i - 2] == 'O')
1: 						&& (a[i - 1] == 'r' || a[i - 1] == 'R')
1: 						&& (a[i] == 't' || a[i] == 'T')) {
1: 					matchlen = 6;
1: 					mask |= ACTION_EXPORT | ACTION_IMPORT;
1: 
1: 				}
1: 				else {
1: 					// parse error
1: 					throw new IllegalArgumentException("invalid permission: "
1: 							+ actions);
1: 				}
1: 
1: 			// make sure we didn't just match the tail of a word
1: 			// like "ackbarfimport". Also, skip to the comma.
1: 			seencomma = false;
1: 			while (i >= matchlen && !seencomma) {
1: 				switch (a[i - matchlen]) {
1: 					case ',' :
1: 						seencomma = true;
1: 					/* FALLTHROUGH */
1: 					case ' ' :
1: 					case '\r' :
1: 					case '\n' :
1: 					case '\f' :
1: 					case '\t' :
1: 						break;
1: 					default :
1: 						throw new IllegalArgumentException(
1: 								"invalid permission: " + actions);
1: 				}
1: 				i--;
1: 			}
1: 
1: 			// point i at the location of the comma minus one (or -1).
1: 			i -= matchlen;
1: 		}
1: 
1: 		if (seencomma) {
1: 			throw new IllegalArgumentException("invalid permission: " + actions);
1: 		}
1: 
1: 		return (mask);
1: 	}
1: 
1: 	/**
1: 	 * Determines if the specified permission is implied by this object.
1: 	 * 
1: 	 * <p>
1: 	 * This method checks that the package name of the target is implied by the
1: 	 * package name of this object. The list of <code>PackagePermission</code>
1: 	 * actions must either match or allow for the list of the target object to
1: 	 * imply the target <code>PackagePermission</code> action.
1: 	 * <p>
1: 	 * The permission to export a package implies the permission to import the
1: 	 * named package.
1: 	 * 
1: 	 * <pre>
1: 	 * x.y.*,&quot;export&quot; -&gt; x.y.z,&quot;export&quot; is true
1: 	 * *,&quot;import&quot; -&gt; x.y, &quot;import&quot;      is true
1: 	 * *,&quot;export&quot; -&gt; x.y, &quot;import&quot;      is true
1: 	 * x.y,&quot;export&quot; -&gt; x.y.z, &quot;export&quot;  is false
1: 	 * </pre>
1: 	 * 
1: 	 * @param p The target permission to interrogate.
1: 	 * @return <code>true</code> if the specified
1: 	 *         <code>PackagePermission</code> action is implied by this
1: 	 *         object; <code>false</code> otherwise.
1: 	 */
1: 
1: 	public boolean implies(Permission p) {
1: 		if (p instanceof PackagePermission) {
1: 			PackagePermission target = (PackagePermission) p;
1: 
1: 			return (((action_mask & target.action_mask) == target.action_mask) && super
1: 					.implies(p));
1: 		}
1: 
1: 		return (false);
1: 	}
1: 
1: 	/**
1: 	 * Returns the canonical string representation of the
1: 	 * <code>PackagePermission</code> actions.
1: 	 * 
1: 	 * <p>
1: 	 * Always returns present <code>PackagePermission</code> actions in the
1: 	 * following order: <code>EXPORT</code>,<code>IMPORT</code>.
1: 	 * 
1: 	 * @return Canonical string representation of the
1: 	 *         <code>PackagePermission</code> actions.
1: 	 */
1: 
1: 	public String getActions() {
1: 		if (actions == null) {
1: 			StringBuffer sb = new StringBuffer();
1: 			boolean comma = false;
1: 
1: 			if ((action_mask & ACTION_EXPORT) == ACTION_EXPORT) {
1: 				sb.append(EXPORT);
1: 				comma = true;
1: 			}
1: 
1: 			if ((action_mask & ACTION_IMPORT) == ACTION_IMPORT) {
1: 				if (comma)
1: 					sb.append(',');
1: 				sb.append(IMPORT);
1: 			}
1: 
1: 			actions = sb.toString();
1: 		}
1: 
1: 		return (actions);
1: 	}
1: 
1: 	/**
1: 	 * Returns a new <code>PermissionCollection</code> object suitable for
1: 	 * storing <code>PackagePermission</code> objects.
1: 	 * 
1: 	 * @return A new <code>PermissionCollection</code> object.
1: 	 */
1: 	public PermissionCollection newPermissionCollection() {
1: 		return (new PackagePermissionCollection());
1: 	}
1: 
1: 	/**
1: 	 * Determines the equality of two <code>PackagePermission</code> objects.
1: 	 * 
1: 	 * This method checks that specified package has the same package name and
1: 	 * <code>PackagePermission</code> actions as this
1: 	 * <code>PackagePermission</code> object.
1: 	 * 
1: 	 * @param obj The object to test for equality with this
1: 	 *        <code>PackagePermission</code> object.
1: 	 * @return <code>true</code> if <code>obj</code> is a
1: 	 *         <code>PackagePermission</code>, and has the same package name
1: 	 *         and actions as this <code>PackagePermission</code> object;
1: 	 *         <code>false</code> otherwise.
1: 	 */
1: 	public boolean equals(Object obj) {
1: 		if (obj == this) {
1: 			return (true);
1: 		}
1: 
1: 		if (!(obj instanceof PackagePermission)) {
1: 			return (false);
1: 		}
1: 
1: 		PackagePermission p = (PackagePermission) obj;
1: 
1: 		return ((action_mask == p.action_mask) && getName().equals(p.getName()));
1: 	}
1: 
1: 	/**
1: 	 * Returns the hash code value for this object.
1: 	 * 
1: 	 * @return A hash code value for this object.
1: 	 */
1: 
1: 	public int hashCode() {
1: 		return (getName().hashCode() ^ getActions().hashCode());
1: 	}
1: 
1: 	/**
1: 	 * Returns the current action mask.
1: 	 * <p>
1: 	 * Used by the PackagePermissionCollection class.
1: 	 * 
1: 	 * @return Current action mask.
1: 	 */
1: 	int getMask() {
1: 		return (action_mask);
1: 	}
1: 
1: 	/**
1: 	 * WriteObject is called to save the state of this permission object to a
1: 	 * stream. The actions are serialized, and the superclass takes care of the
1: 	 * name.
1: 	 */
1: 
1: 	private synchronized void writeObject(java.io.ObjectOutputStream s)
1: 			throws IOException {
1: 		// Write out the actions. The superclass takes care of the name
1: 		// call getActions to make sure actions field is initialized
1: 		if (actions == null)
1: 			getActions();
1: 		s.defaultWriteObject();
1: 	}
1: 
1: 	/**
1: 	 * readObject is called to restore the state of this permission from a
1: 	 * stream.
1: 	 */
1: 	private synchronized void readObject(java.io.ObjectInputStream s)
1: 			throws IOException, ClassNotFoundException {
1: 		// Read in the action, then initialize the rest
1: 		s.defaultReadObject();
1: 		init(getMask(actions));
1: 	}
1: }
1: 
1: /**
1:  * Stores a set of <code>PackagePermission</code> permissions.
1:  * 
1:  * @see java.security.Permission
1:  * @see java.security.Permissions
1:  * @see java.security.PermissionCollection
1:  */
1: 
1: final class PackagePermissionCollection extends PermissionCollection {
1: 	static final long	serialVersionUID	= -3350758995234427603L;
1: 	/**
1: 	 * Table of permissions.
1: 	 * 
1: 	 * @serial
1: 	 */
0: 	private Hashtable	permissions;
1: 
1: 	/**
1: 	 * Boolean saying if "*" is in the collection.
1: 	 * 
1: 	 * @serial
1: 	 */
1: 	private boolean		all_allowed;
1: 
1: 	/**
1: 	 * Create an empty PackagePermissions object.
1: 	 */
1: 
1: 	public PackagePermissionCollection() {
0: 		permissions = new Hashtable();
1: 		all_allowed = false;
1: 	}
1: 
1: 	/**
1: 	 * Adds a permission to the <code>PackagePermission</code> objects. The
1: 	 * key for the hash is the name.
1: 	 * 
1: 	 * @param permission The <code>PackagePermission</code> object to add.
1: 	 * 
1: 	 * @throws IllegalArgumentException If the permission is not a
1: 	 *         <code>PackagePermission</code> instance.
1: 	 * 
1: 	 * @throws SecurityException If this
1: 	 *         <code>PackagePermissionCollection</code> object has been marked
1: 	 *         read-only.
1: 	 */
1: 
1: 	public void add(Permission permission) {
1: 		if (!(permission instanceof PackagePermission))
1: 			throw new IllegalArgumentException("invalid permission: "
1: 					+ permission);
1: 		if (isReadOnly())
1: 			throw new SecurityException("attempt to add a Permission to a "
1: 					+ "readonly PermissionCollection");
1: 
1: 		PackagePermission pp = (PackagePermission) permission;
1: 		String name = pp.getName();
1: 
1: 		PackagePermission existing = (PackagePermission) permissions.get(name);
1: 
1: 		if (existing != null) {
1: 			int oldMask = existing.getMask();
1: 			int newMask = pp.getMask();
1: 			if (oldMask != newMask) {
1: 				permissions.put(name, new PackagePermission(name, oldMask
1: 						| newMask));
1: 
1: 			}
1: 		}
1: 		else {
1: 			permissions.put(name, permission);
1: 		}
1: 
1: 		if (!all_allowed) {
1: 			if (name.equals("*"))
1: 				all_allowed = true;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Determines if the specified permissions implies the permissions expressed
1: 	 * in <code>permission</code>.
1: 	 * 
1: 	 * @param permission The Permission object to compare with this
1: 	 *        <code>PackagePermission</code> object.
1: 	 * 
1: 	 * @return <code>true</code> if <code>permission</code> is a proper
1: 	 *         subset of a permission in the set; <code>false</code>
1: 	 *         otherwise.
1: 	 */
1: 
1: 	public boolean implies(Permission permission) {
1: 		if (!(permission instanceof PackagePermission))
1: 			return (false);
1: 
1: 		PackagePermission pp = (PackagePermission) permission;
1: 		PackagePermission x;
1: 
1: 		int desired = pp.getMask();
1: 		int effective = 0;
1: 
1: 		// short circuit if the "*" Permission was added
1: 		if (all_allowed) {
1: 			x = (PackagePermission) permissions.get("*");
1: 			if (x != null) {
1: 				effective |= x.getMask();
1: 				if ((effective & desired) == desired)
1: 					return (true);
1: 			}
1: 		}
1: 
1: 		// strategy:
1: 		// Check for full match first. Then work our way up the
1: 		// name looking for matches on a.b.*
1: 
1: 		String name = pp.getName();
1: 
1: 		x = (PackagePermission) permissions.get(name);
1: 
1: 		if (x != null) {
1: 			// we have a direct hit!
1: 			effective |= x.getMask();
1: 			if ((effective & desired) == desired)
1: 				return (true);
1: 		}
1: 
1: 		// work our way up the tree...
1: 		int last, offset;
1: 
1: 		offset = name.length() - 1;
1: 
1: 		while ((last = name.lastIndexOf(".", offset)) != -1) {
1: 
1: 			name = name.substring(0, last + 1) + "*";
1: 			x = (PackagePermission) permissions.get(name);
1: 
1: 			if (x != null) {
1: 				effective |= x.getMask();
1: 				if ((effective & desired) == desired)
1: 					return (true);
1: 			}
1: 			offset = last - 1;
1: 		}
1: 
1: 		// we don't have to check for "*" as it was already checked
1: 		// at the top (all_allowed), so we just return false
1: 		return (false);
1: 	}
1: 
1: 	/**
1: 	 * Returns an enumeration of all <code>PackagePermission</code> objects in
1: 	 * the container.
1: 	 * 
1: 	 * @return Enumeration of all <code>PackagePermission</code> objects.
1: 	 */
1: 
0: 	public Enumeration elements() {
1: 		return (permissions.elements());
1: 	}
1: }
============================================================================