1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.raw.data.DirectAllocActions
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.raw.data;
1:eac0369: 
1:eac0369: import org.apache.derby.impl.store.raw.data.AllocationActions;
1:eac0369: import org.apache.derby.impl.store.raw.data.BasePage;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: import org.apache.derby.iapi.services.io.FormatIdUtil;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.raw.Loggable;
1:eac0369: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1:eac0369: import org.apache.derby.iapi.store.raw.log.LogInstant;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: public class DirectAllocActions implements AllocationActions {
1:eac0369: 
1:eac0369: 	public DirectAllocActions() {
1:eac0369: 	}
1:eac0369: 
2:eac0369: 	/**
1:eac0369: 		Set the allocation status of pageNumber to doStatus.  To undo this
1:eac0369: 		operation, set the allocation status of pageNumber to undoStatus
1:eac0369: 		
1:eac0369: 		@param t				The transaction
1:20bc69f: 		@param allocPage		the allocation page
1:eac0369: 		@param pageNumber		the page to allocation or deallocation
1:eac0369: 		@param doStatus			set the allocation status of the page this value
1:eac0369: 		@param undoStatus		on undo, set the allocation status of the page
1:eac0369: 								this value 
1:eac0369: 
1:94f158a: 		@exception StandardException	Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void actionAllocatePage(RawTransaction t, BasePage allocPage, 
1:eac0369: 								   long pageNumber, int doStatus, int undoStatus)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		((AllocPage)allocPage).setPageStatus((LogInstant)null, pageNumber, doStatus);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Chain one allocation page to the next.
1:eac0369: 
1:eac0369: 		@param t				The transaction
1:20bc69f: 		@param allocPage		the allocation page whose next page chain needs
1:eac0369: 								to be changed
1:eac0369: 		@param pageNumber		the next allocation page's number 
1:eac0369: 		@param pageOffset		the next allocation page's page offset
1:eac0369: 
1:94f158a: 		@exception StandardException	Standard Derby error policy
1:eac0369: 	*/
1:eac0369: 	public void actionChainAllocPage(RawTransaction t, BasePage allocPage, 
1:eac0369: 								long pageNumber, long pageOffset)
1:eac0369: 		 throws StandardException
1:eac0369: 	{
1:eac0369: 		((AllocPage)allocPage).chainNextAllocPage((LogInstant)null, pageNumber,
1:eac0369: 												  pageOffset);
1:eac0369: 	}
1:eac0369: 
1:04a2f12:     /**
1:04a2f12:      * Compress free pages.
1:04a2f12:      * <p>
1:04a2f12:      * Compress the free pages at the end of the range maintained by
1:04a2f12:      * this allocation page.  All pages being compressed should be FREE.
1:04a2f12:      * Only pages in the last allocation page can be compressed.
1:04a2f12:      * <p>
1:04a2f12:      *
1:04a2f12:      * @param t				        The transaction
1:04a2f12:      * @param allocPage		        the allocation page to do compress on.
1:04a2f12:      * @param new_highest_page      The new highest page on this allocation 
1:04a2f12:      *                              page.  The number is the offset of the page
1:04a2f12:      *                              in the array of pages maintained by this 
1:04a2f12:      *                              allocation page, for instance a value of 0 
1:04a2f12:      *                              indicates all page except the first one are
1:04a2f12:      *                              to be truncated.  If all pages are 
1:04a2f12:      *                              truncated then the offset is set to -1.
1:04a2f12:      * @param num_pages_truncated   The number of allocated pages in this 
1:04a2f12:      *                              allocation page prior to the truncate.  
1:04a2f12:      *                              Note that all pages from NewHighestPage+1 
1:04a2f12:      *                              through newHighestPage+num_pages_truncated 
1:04a2f12:      *                              should be FREE.
1:04a2f12:      *
1:04a2f12: 	 * @exception  StandardException  Standard exception policy.
1:04a2f12:      **/
1:04a2f12:     public void actionCompressSpaceOperation(
1:04a2f12: 	RawTransaction  t,
1:04a2f12:     BasePage        allocPage, 
1:04a2f12:     int             new_highest_page, 
1:04a2f12:     int             num_pages_truncated)
1:04a2f12:         throws StandardException
1:04a2f12:     {
1:04a2f12: 		((AllocPage)allocPage).compressSpace(
1:04a2f12:              (LogInstant)null, new_highest_page, num_pages_truncated);
1:04a2f12:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:94f158a
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
/////////////////////////////////////////////////////////////////////////
1: 		@exception StandardException	Standard Derby error policy
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:04a2f12
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Compress free pages.
1:      * <p>
1:      * Compress the free pages at the end of the range maintained by
1:      * this allocation page.  All pages being compressed should be FREE.
1:      * Only pages in the last allocation page can be compressed.
1:      * <p>
1:      *
1:      * @param t				        The transaction
1:      * @param allocPage		        the allocation page to do compress on.
1:      * @param new_highest_page      The new highest page on this allocation 
1:      *                              page.  The number is the offset of the page
1:      *                              in the array of pages maintained by this 
1:      *                              allocation page, for instance a value of 0 
1:      *                              indicates all page except the first one are
1:      *                              to be truncated.  If all pages are 
1:      *                              truncated then the offset is set to -1.
1:      * @param num_pages_truncated   The number of allocated pages in this 
1:      *                              allocation page prior to the truncate.  
1:      *                              Note that all pages from NewHighestPage+1 
1:      *                              through newHighestPage+num_pages_truncated 
1:      *                              should be FREE.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public void actionCompressSpaceOperation(
1: 	RawTransaction  t,
1:     BasePage        allocPage, 
1:     int             new_highest_page, 
1:     int             num_pages_truncated)
1:         throws StandardException
1:     {
1: 		((AllocPage)allocPage).compressSpace(
1:              (LogInstant)null, new_highest_page, num_pages_truncated);
1:     }
commit:20bc69f
/////////////////////////////////////////////////////////////////////////
1: 		@param allocPage		the allocation page
/////////////////////////////////////////////////////////////////////////
1: 		@param allocPage		the allocation page whose next page chain needs
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.raw.data.DirectAllocActions
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:c6ad534
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.raw.data;
1: 
1: import org.apache.derby.impl.store.raw.data.AllocationActions;
1: import org.apache.derby.impl.store.raw.data.BasePage;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.io.FormatIdUtil;
1: 
1: import org.apache.derby.iapi.store.raw.Loggable;
1: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
1: import org.apache.derby.iapi.store.raw.log.LogInstant;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: public class DirectAllocActions implements AllocationActions {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	public DirectAllocActions() {
1: 	}
1: 
1: 	/**
1: 		Set the allocation status of pageNumber to doStatus.  To undo this
1: 		operation, set the allocation status of pageNumber to undoStatus
1: 		
1: 		@param t				The transaction
0: 		@param allocpage		the allocation page
1: 		@param pageNumber		the page to allocation or deallocation
1: 		@param doStatus			set the allocation status of the page this value
1: 		@param undoStatus		on undo, set the allocation status of the page
1: 								this value 
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 	*/
1: 	public void actionAllocatePage(RawTransaction t, BasePage allocPage, 
1: 								   long pageNumber, int doStatus, int undoStatus)
1: 		 throws StandardException
1: 	{
1: 		((AllocPage)allocPage).setPageStatus((LogInstant)null, pageNumber, doStatus);
1: 	}
1: 
1: 	/**
1: 		Chain one allocation page to the next.
1: 
1: 		@param t				The transaction
0: 		@param allocpage		the allocation page whose next page chain needs
1: 								to be changed
1: 		@param pageNumber		the next allocation page's number 
1: 		@param pageOffset		the next allocation page's page offset
1: 
0: 		@exception StandardException	Standard Cloudscape error policy
1: 	*/
1: 	public void actionChainAllocPage(RawTransaction t, BasePage allocPage, 
1: 								long pageNumber, long pageOffset)
1: 		 throws StandardException
1: 	{
1: 		((AllocPage)allocPage).chainNextAllocPage((LogInstant)null, pageNumber,
1: 												  pageOffset);
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.raw.data
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.raw.data;
0: 
0: import org.apache.derby.impl.store.raw.data.AllocationActions;
0: import org.apache.derby.impl.store.raw.data.BasePage;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.services.io.FormatIdUtil;
0: 
0: import org.apache.derby.iapi.store.raw.Loggable;
0: import org.apache.derby.iapi.store.raw.xact.RawTransaction;
0: import org.apache.derby.iapi.store.raw.log.LogInstant;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: public class DirectAllocActions implements AllocationActions {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	public DirectAllocActions() {
0: 	}
0: 
0: 	/**
0: 		Set the allocation status of pageNumber to doStatus.  To undo this
0: 		operation, set the allocation status of pageNumber to undoStatus
0: 		
0: 		@param t				The transaction
0: 		@param allocpage		the allocation page
0: 		@param pageNumber		the page to allocation or deallocation
0: 		@param doStatus			set the allocation status of the page this value
0: 		@param undoStatus		on undo, set the allocation status of the page
0: 								this value 
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 	*/
0: 	public void actionAllocatePage(RawTransaction t, BasePage allocPage, 
0: 								   long pageNumber, int doStatus, int undoStatus)
0: 		 throws StandardException
0: 	{
0: 		((AllocPage)allocPage).setPageStatus((LogInstant)null, pageNumber, doStatus);
0: 	}
0: 
0: 	/**
0: 		Chain one allocation page to the next.
0: 
0: 		@param t				The transaction
0: 		@param allocpage		the allocation page whose next page chain needs
0: 								to be changed
0: 		@param pageNumber		the next allocation page's number 
0: 		@param pageOffset		the next allocation page's page offset
0: 
0: 		@exception StandardException	Standard Cloudscape error policy
0: 	*/
0: 	public void actionChainAllocPage(RawTransaction t, BasePage allocPage, 
0: 								long pageNumber, long pageOffset)
0: 		 throws StandardException
0: 	{
0: 		((AllocPage)allocPage).chainNextAllocPage((LogInstant)null, pageNumber,
0: 												  pageOffset);
0: 	}
0: 
0: }
============================================================================