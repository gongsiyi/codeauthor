1:c33b0cf: /*
1:c33b0cf: 
1:c33b0cf:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BackupRestoreTest
1:c33b0cf: 
1:c33b0cf:    Licensed to the Apache Software Foundation (ASF) under one or more
1:c33b0cf:    contributor license agreements.  See the NOTICE file distributed with
1:c33b0cf:    this work for additional information regarding copyright ownership.
1:c33b0cf:    The ASF licenses this file to You under the Apache License, Version 2.0
1:c33b0cf:    (the "License"); you may not use this file except in compliance with
1:c33b0cf:    the License.  You may obtain a copy of the License at
1:c33b0cf: 
1:c33b0cf:       http://www.apache.org/licenses/LICENSE-2.0
1:c33b0cf: 
1:c33b0cf:    Unless required by applicable law or agreed to in writing, software
1:c33b0cf:    distributed under the License is distributed on an "AS IS" BASIS,
1:c33b0cf:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c33b0cf:    See the License for the specific language governing permissions and
1:c33b0cf:    limitations under the License.
1:c33b0cf: 
1:c33b0cf:  */
1:c33b0cf: package org.apache.derbyTesting.functionTests.tests.store;
1:c33b0cf: 
1:c33b0cf: import java.io.File;
1:c33b0cf: import java.io.FileOutputStream;
1:c33b0cf: import java.io.IOException;
1:c33b0cf: import java.sql.CallableStatement;
1:c33b0cf: import java.sql.SQLException;
1:c33b0cf: import javax.sql.DataSource;
1:c33b0cf: import junit.framework.Test;
1:c33b0cf: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1:c33b0cf: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:c33b0cf: import org.apache.derbyTesting.junit.JDBCDataSource;
1:c33b0cf: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:c33b0cf: import org.apache.derbyTesting.junit.TestConfiguration;
1:c33b0cf: import org.apache.derbyTesting.junit.Utilities;
1:c33b0cf: 
1:c33b0cf: public class BackupRestoreTest
1:c33b0cf:     extends BaseJDBCTestCase {
1:c33b0cf: 
1:c33b0cf:     public BackupRestoreTest(String name) {
1:c33b0cf:         super(name);
1:c33b0cf:     }
1:c33b0cf: 
1:c33b0cf:     /**
1:c33b0cf:      * See DERBY-3875.
1:c33b0cf:      * <p>
1:c33b0cf:      * Steps in the test:
1:c33b0cf:      *  1) Create a database and perform a backup.
1:c33b0cf:      *  2) Shutdown the Derby engine.
1:c33b0cf:      *  3) Corrupt one of the database files.
1:c33b0cf:      *  4) Boot corrupted database.
1:c33b0cf:      *  5) Restore backup.
1:c33b0cf:      * <p>
1:c33b0cf:      * With the bug present, the test failed in step 5.
1:c33b0cf:      * Note that the test did fail only on Windows platforms, which is probably
1:c33b0cf:      * because of differences in the file system code.
1:c33b0cf:      */
1:c33b0cf:     public void testDerby3875()
1:c33b0cf:             throws SQLException, IOException {
1:c33b0cf:         // Create the database.
1:c33b0cf:         println("Creating database");
1:c33b0cf:         getConnection();
1:c33b0cf:         // Backup the database.
1:c33b0cf:         println("Backing up database");
1:c33b0cf:         String dbBackup = SupportFilesSetup.getReadWrite("dbbackup").getPath();
1:c33b0cf:         CallableStatement cs = prepareCall(
1:c33b0cf:                 "CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:c33b0cf:         cs.setString(1, dbBackup);
1:c33b0cf:         cs.execute();
1:c33b0cf:         cs.close();
1:c33b0cf:         // Shutdown the database.
1:c33b0cf:         getTestConfiguration().shutdownEngine();
1:c33b0cf: 
1:c33b0cf:         // Corrupt one of the database files.
1:c33b0cf:         File dataDir = new File("system/" +
1:c33b0cf:                 getTestConfiguration().getDefaultDatabaseName(), "seg0");
1:c33b0cf:         File df = new File(dataDir, "c10.dat");
1:c33b0cf:         assertTrue("File to corrupt doesn't exist: " + df.getPath(),
1:c33b0cf:                 PrivilegedFileOpsForTests.exists(df));
1:c33b0cf:         println("Corrupting data file");
1:c33b0cf:         byte[] zeros = new byte[(int)PrivilegedFileOpsForTests.length(df)];
1:c33b0cf:         FileOutputStream fout =
1:c33b0cf:                 PrivilegedFileOpsForTests.getFileOutputStream(df);
1:c33b0cf:         fout.write(zeros);
1:c33b0cf:         fout.flush();
1:c33b0cf:         fout.close();
1:c33b0cf: 
1:c33b0cf:         // Reboot the database, which should fail.
1:c33b0cf:         try {
1:c33b0cf:             println("Rebooting corrupted database");
1:c33b0cf:             getConnection();
1:c33b0cf:             fail("Reboot of currupted database should have failed");
1:c33b0cf:         } catch (SQLException sqle) {
1:c33b0cf:             assertSQLState("XJ040", sqle);
1:c33b0cf:         }
1:c33b0cf: 
1:c33b0cf:         // Now try to restore database.
1:c33b0cf:         println("Restoring database");
1:c33b0cf:         String tmp[] = Utilities.split(
1:c33b0cf:                 getTestConfiguration().getDefaultDatabaseName(), '/');
1:c33b0cf:         final String dbName = tmp[tmp.length -1];
1:c33b0cf:         DataSource ds = JDBCDataSource.getDataSource();
1:c33b0cf:         JDBCDataSource.setBeanProperty(ds, "connectionAttributes", 
1:c33b0cf:                 ("restoreFrom=" + dbBackup + "/" + dbName ));
1:c33b0cf:         assertNotNull(ds.getConnection());
1:c33b0cf:     }
1:c33b0cf: 
1:c33b0cf:     /**
1:c33b0cf:      * Returns a suite running with a single use database with the embedded
1:c33b0cf:      * driver only.
1:c33b0cf:      *
1:c33b0cf:      * @return A test suite.
1:c33b0cf:      */
1:c33b0cf:     public static Test suite() {
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite(BackupRestoreTest.class);
1:c33b0cf:         return new SupportFilesSetup(
1:c33b0cf:                 TestConfiguration.singleUseDatabaseDecorator(suite));
1:c33b0cf:     }
1:c33b0cf: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite(BackupRestoreTest.class);
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:c33b0cf
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.store.BackupRestoreTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.sql.CallableStatement;
1: import java.sql.SQLException;
1: import javax.sql.DataSource;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.Utilities;
1: 
1: public class BackupRestoreTest
1:     extends BaseJDBCTestCase {
1: 
1:     public BackupRestoreTest(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * See DERBY-3875.
1:      * <p>
1:      * Steps in the test:
1:      *  1) Create a database and perform a backup.
1:      *  2) Shutdown the Derby engine.
1:      *  3) Corrupt one of the database files.
1:      *  4) Boot corrupted database.
1:      *  5) Restore backup.
1:      * <p>
1:      * With the bug present, the test failed in step 5.
1:      * Note that the test did fail only on Windows platforms, which is probably
1:      * because of differences in the file system code.
1:      */
1:     public void testDerby3875()
1:             throws SQLException, IOException {
1:         // Create the database.
1:         println("Creating database");
1:         getConnection();
1:         // Backup the database.
1:         println("Backing up database");
1:         String dbBackup = SupportFilesSetup.getReadWrite("dbbackup").getPath();
1:         CallableStatement cs = prepareCall(
1:                 "CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
1:         cs.setString(1, dbBackup);
1:         cs.execute();
1:         cs.close();
1:         // Shutdown the database.
1:         getTestConfiguration().shutdownEngine();
1: 
1:         // Corrupt one of the database files.
1:         File dataDir = new File("system/" +
1:                 getTestConfiguration().getDefaultDatabaseName(), "seg0");
1:         File df = new File(dataDir, "c10.dat");
1:         assertTrue("File to corrupt doesn't exist: " + df.getPath(),
1:                 PrivilegedFileOpsForTests.exists(df));
1:         println("Corrupting data file");
1:         byte[] zeros = new byte[(int)PrivilegedFileOpsForTests.length(df)];
1:         FileOutputStream fout =
1:                 PrivilegedFileOpsForTests.getFileOutputStream(df);
1:         fout.write(zeros);
1:         fout.flush();
1:         fout.close();
1: 
1:         // Reboot the database, which should fail.
1:         try {
1:             println("Rebooting corrupted database");
1:             getConnection();
1:             fail("Reboot of currupted database should have failed");
1:         } catch (SQLException sqle) {
1:             assertSQLState("XJ040", sqle);
1:         }
1: 
1:         // Now try to restore database.
1:         println("Restoring database");
1:         String tmp[] = Utilities.split(
1:                 getTestConfiguration().getDefaultDatabaseName(), '/');
1:         final String dbName = tmp[tmp.length -1];
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         JDBCDataSource.setBeanProperty(ds, "connectionAttributes", 
1:                 ("restoreFrom=" + dbBackup + "/" + dbName ));
1:         assertNotNull(ds.getConnection());
1:     }
1: 
1:     /**
1:      * Returns a suite running with a single use database with the embedded
1:      * driver only.
1:      *
1:      * @return A test suite.
1:      */
1:     public static Test suite() {
0:         TestSuite suite = new TestSuite(BackupRestoreTest.class);
1:         return new SupportFilesSetup(
1:                 TestConfiguration.singleUseDatabaseDecorator(suite));
1:     }
1: }
============================================================================