1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.store.access.btree.BTreeScanInfo
1:345de35: 
1:270a34d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:270a34d:    contributor license agreements.  See the NOTICE file distributed with
1:270a34d:    this work for additional information regarding copyright ownership.
1:270a34d:    The ASF licenses this file to you under the Apache License, Version 2.0
1:270a34d:    (the "License"); you may not use this file except in compliance with
1:270a34d:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.store.access.btree;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.ScanInfo;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: import org.apache.derby.iapi.services.i18n.MessageService;
1:eac0369: import java.util.Properties;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369:   This object provides performance information related to an open scan.
1:eac0369:   The information is accumulated during operations on a ScanController() and
1:eac0369:   then copied into this object and returned by a call to 
1:eac0369:   ScanController.getStatistic().
1:eac0369: 
1:eac0369: 
1:eac0369: **/
1:eac0369: class BTreeScanInfo implements ScanInfo
1:eac0369: {
1:eac0369:     /**
1:eac0369:      * Performance counters ...
1:eac0369:      */
1:eac0369:     private int     stat_numpages_visited           = 0;
1:eac0369:     private int     stat_numrows_visited            = 0;
1:eac0369:     private int     stat_numrows_qualified          = 0;
1:eac0369:     private int     stat_numdeleted_rows_visited    = 0;
1:eac0369:     private int     stat_numColumnsFetched          = 0;
1:eac0369:     private int     stat_treeHeight                 = 0;
1:eac0369:     private FormatableBitSet  stat_validColumns               = null;
1:eac0369: 
1:eac0369:     /* Constructors for This class: */
1:eac0369:     BTreeScanInfo(BTreeScan scan)
1:eac0369:     {
1:eac0369:         // copy perfomance state out of scan, to get a fixed set of stats
1:eac0369:         stat_numpages_visited           = scan.stat_numpages_visited;
1:eac0369:         stat_numrows_visited            = scan.stat_numrows_visited;
1:eac0369:         stat_numrows_qualified          = scan.stat_numrows_qualified;
1:eac0369:         stat_numdeleted_rows_visited    = scan.stat_numdeleted_rows_visited;
1:eac0369: 
1:eac0369:         stat_validColumns = 
1:eac0369:             (scan.init_scanColumnList == null ? 
1:eac0369:                 null : ((FormatableBitSet) scan.init_scanColumnList.clone()));
1:eac0369: 
1:eac0369:         if (stat_validColumns == null)
1:eac0369:         {
1:eac0369:             stat_numColumnsFetched = scan.init_template.length;
1:eac0369:         }
1:eac0369:         else
1:eac0369:         {
1:eac0369:             for (int i = 0; i < stat_validColumns.size(); i++)
1:eac0369:             {
1:eac0369:                 if (stat_validColumns.get(i))
1:eac0369:                     stat_numColumnsFetched++;
1:eac0369:             }
1:eac0369:         }
1:eac0369: 
1:eac0369:         try
1:eac0369:         {
1:eac0369:             stat_treeHeight = scan.getHeight();
1:eac0369:         }
1:eac0369:         catch (Throwable t)
1:eac0369:         {
1:eac0369:             stat_treeHeight = -1;
1:eac0369:         }
1:eac0369:     }
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return all information gathered about the scan.
1:eac0369:      * <p>
1:eac0369:      * This routine returns a list of properties which contains all information
1:eac0369:      * gathered about the scan.  If a Property is passed in, then that property
1:eac0369:      * list is appeneded to, otherwise a new property object is created and
1:eac0369:      * returned.
1:eac0369:      * <p>
1:eac0369:      * Not all scans may support all properties, if the property is not 
1:eac0369:      * supported then it will not be returned.  The following is a list of
1:eac0369:      * properties that may be returned:
1:eac0369:      *
1:eac0369:      *     numPagesVisited
1:eac0369:      *         - the number of pages visited during the scan.  For btree scans
1:eac0369:      *           this number only includes the leaf pages visited.  
1:eac0369:      *     numRowsVisited
1:eac0369:      *         - the number of rows visited during the scan.  This number 
1:eac0369:      *           includes all rows, including: those marked deleted, those
1:eac0369:      *           that don't meet qualification, ...
1:eac0369:      *     numRowsQualified
1:eac0369:      *         - the number of undeleted rows, which met the qualification.
1:eac0369:      *     treeHeight (btree's only)
1:eac0369:      *         - for btree's the height of the tree.  A tree with one page
1:eac0369:      *           has a height of 1.  Total number of pages visited in a btree
1:eac0369:      *           scan is (treeHeight - 1 + numPagesVisited).
1:eac0369:      *     numColumnsFetched
1:eac0369:      *         - the number of columns Fetched - partial scans will result
1:eac0369:      *           in fetching less columns than the total number in the scan.
1:eac0369:      *     columnsFetched
1:eac0369:      *         - The FormatableBitSet.toString() method called on the validColumns arg.
1:eac0369:      *           to the scan, unless validColumns was set to null, and in that
1:eac0369:      *           case we will return "all".
1:eac0369:      *     NOTE - this list will be expanded as more information about the scan
1:eac0369:      *            is gathered and returned.
1:eac0369:      *
1:eac0369:      * @param prop   Property list to fill in.
1:eac0369:      *
1:eac0369: 	 * @exception  StandardException  Standard exception policy.
1:eac0369:      **/
1:eac0369:     public Properties getAllScanInfo(Properties prop)
1:eac0369: 		throws StandardException
1:eac0369:     {
1:eac0369:         if (prop == null)
1:eac0369:             prop = new Properties();
1:eac0369: 
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_SCAN_TYPE),
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_BTREE));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_PAGES_VISITED),
1:eac0369:             Integer.toString(stat_numpages_visited));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_VISITED),
1:eac0369:             Integer.toString(stat_numrows_visited));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(
1:eac0369: 								SQLState.STORE_RTS_NUM_DELETED_ROWS_VISITED),
1:eac0369:             Integer.toString(stat_numdeleted_rows_visited));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(
1:eac0369: 								SQLState.STORE_RTS_NUM_ROWS_QUALIFIED),
1:eac0369:             Integer.toString(stat_numrows_qualified));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(
1:eac0369: 								SQLState.STORE_RTS_TREE_HEIGHT),
1:eac0369:             Integer.toString(stat_treeHeight));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(
1:eac0369: 								SQLState.STORE_RTS_NUM_COLUMNS_FETCHED),
1:eac0369:             Integer.toString(stat_numColumnsFetched));
1:eac0369:         prop.put(
1:eac0369: 			MessageService.getTextMessage(
1:eac0369: 								SQLState.STORE_RTS_COLUMNS_FETCHED_BIT_SET),
1:eac0369: 			(stat_validColumns == null ?
1:eac0369: 				MessageService.getTextMessage(
1:eac0369: 								SQLState.STORE_RTS_ALL) :
1:eac0369:                 stat_validColumns.toString()));
1:eac0369: 
1:eac0369:         return(prop);
1:eac0369:     }
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:270a34d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.store.access.btree.BTreeScanInfo
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.store.access.btree;
1: 
1: import org.apache.derby.iapi.store.access.ScanInfo;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: import java.util.Properties;
1: 
1: /**
1: 
1:   This object provides performance information related to an open scan.
1:   The information is accumulated during operations on a ScanController() and
1:   then copied into this object and returned by a call to 
1:   ScanController.getStatistic().
1: 
1: 
1: **/
1: class BTreeScanInfo implements ScanInfo
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /**
1:      * Performance counters ...
1:      */
1:     private int     stat_numpages_visited           = 0;
1:     private int     stat_numrows_visited            = 0;
1:     private int     stat_numrows_qualified          = 0;
1:     private int     stat_numdeleted_rows_visited    = 0;
1:     private int     stat_numColumnsFetched          = 0;
1:     private int     stat_treeHeight                 = 0;
1:     private FormatableBitSet  stat_validColumns               = null;
1: 
1:     /* Constructors for This class: */
1:     BTreeScanInfo(BTreeScan scan)
1:     {
1:         // copy perfomance state out of scan, to get a fixed set of stats
1:         stat_numpages_visited           = scan.stat_numpages_visited;
1:         stat_numrows_visited            = scan.stat_numrows_visited;
1:         stat_numrows_qualified          = scan.stat_numrows_qualified;
1:         stat_numdeleted_rows_visited    = scan.stat_numdeleted_rows_visited;
1: 
1:         stat_validColumns = 
1:             (scan.init_scanColumnList == null ? 
1:                 null : ((FormatableBitSet) scan.init_scanColumnList.clone()));
1: 
1:         if (stat_validColumns == null)
1:         {
1:             stat_numColumnsFetched = scan.init_template.length;
1:         }
1:         else
1:         {
1:             for (int i = 0; i < stat_validColumns.size(); i++)
1:             {
1:                 if (stat_validColumns.get(i))
1:                     stat_numColumnsFetched++;
1:             }
1:         }
1: 
1:         try
1:         {
1:             stat_treeHeight = scan.getHeight();
1:         }
1:         catch (Throwable t)
1:         {
1:             stat_treeHeight = -1;
1:         }
1:     }
1: 
1:     /**
1:      * Return all information gathered about the scan.
1:      * <p>
1:      * This routine returns a list of properties which contains all information
1:      * gathered about the scan.  If a Property is passed in, then that property
1:      * list is appeneded to, otherwise a new property object is created and
1:      * returned.
1:      * <p>
1:      * Not all scans may support all properties, if the property is not 
1:      * supported then it will not be returned.  The following is a list of
1:      * properties that may be returned:
1:      *
1:      *     numPagesVisited
1:      *         - the number of pages visited during the scan.  For btree scans
1:      *           this number only includes the leaf pages visited.  
1:      *     numRowsVisited
1:      *         - the number of rows visited during the scan.  This number 
1:      *           includes all rows, including: those marked deleted, those
1:      *           that don't meet qualification, ...
1:      *     numRowsQualified
1:      *         - the number of undeleted rows, which met the qualification.
1:      *     treeHeight (btree's only)
1:      *         - for btree's the height of the tree.  A tree with one page
1:      *           has a height of 1.  Total number of pages visited in a btree
1:      *           scan is (treeHeight - 1 + numPagesVisited).
1:      *     numColumnsFetched
1:      *         - the number of columns Fetched - partial scans will result
1:      *           in fetching less columns than the total number in the scan.
1:      *     columnsFetched
1:      *         - The FormatableBitSet.toString() method called on the validColumns arg.
1:      *           to the scan, unless validColumns was set to null, and in that
1:      *           case we will return "all".
1:      *     NOTE - this list will be expanded as more information about the scan
1:      *            is gathered and returned.
1:      *
1:      * @param prop   Property list to fill in.
1:      *
1: 	 * @exception  StandardException  Standard exception policy.
1:      **/
1:     public Properties getAllScanInfo(Properties prop)
1: 		throws StandardException
1:     {
1:         if (prop == null)
1:             prop = new Properties();
1: 
1:         prop.put(
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_SCAN_TYPE),
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_BTREE));
1:         prop.put(
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_PAGES_VISITED),
1:             Integer.toString(stat_numpages_visited));
1:         prop.put(
1: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_VISITED),
1:             Integer.toString(stat_numrows_visited));
1:         prop.put(
1: 			MessageService.getTextMessage(
1: 								SQLState.STORE_RTS_NUM_DELETED_ROWS_VISITED),
1:             Integer.toString(stat_numdeleted_rows_visited));
1:         prop.put(
1: 			MessageService.getTextMessage(
1: 								SQLState.STORE_RTS_NUM_ROWS_QUALIFIED),
1:             Integer.toString(stat_numrows_qualified));
1:         prop.put(
1: 			MessageService.getTextMessage(
1: 								SQLState.STORE_RTS_TREE_HEIGHT),
1:             Integer.toString(stat_treeHeight));
1:         prop.put(
1: 			MessageService.getTextMessage(
1: 								SQLState.STORE_RTS_NUM_COLUMNS_FETCHED),
1:             Integer.toString(stat_numColumnsFetched));
1:         prop.put(
1: 			MessageService.getTextMessage(
1: 								SQLState.STORE_RTS_COLUMNS_FETCHED_BIT_SET),
1: 			(stat_validColumns == null ?
1: 				MessageService.getTextMessage(
1: 								SQLState.STORE_RTS_ALL) :
1:                 stat_validColumns.toString()));
1: 
1:         return(prop);
1:     }
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.store.access.btree
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.store.access.btree;
0: 
0: import org.apache.derby.iapi.store.access.ScanInfo;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: import org.apache.derby.iapi.services.i18n.MessageService;
0: import java.util.Properties;
0: 
0: /**
0: 
0:   This object provides performance information related to an open scan.
0:   The information is accumulated during operations on a ScanController() and
0:   then copied into this object and returned by a call to 
0:   ScanController.getStatistic().
0: 
0: 
0: **/
0: class BTreeScanInfo implements ScanInfo
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /**
0:      * Performance counters ...
0:      */
0:     private int     stat_numpages_visited           = 0;
0:     private int     stat_numrows_visited            = 0;
0:     private int     stat_numrows_qualified          = 0;
0:     private int     stat_numdeleted_rows_visited    = 0;
0:     private int     stat_numColumnsFetched          = 0;
0:     private int     stat_treeHeight                 = 0;
0:     private FormatableBitSet  stat_validColumns               = null;
0: 
0:     /* Constructors for This class: */
0:     BTreeScanInfo(BTreeScan scan)
0:     {
0:         // copy perfomance state out of scan, to get a fixed set of stats
0:         stat_numpages_visited           = scan.stat_numpages_visited;
0:         stat_numrows_visited            = scan.stat_numrows_visited;
0:         stat_numrows_qualified          = scan.stat_numrows_qualified;
0:         stat_numdeleted_rows_visited    = scan.stat_numdeleted_rows_visited;
0: 
0:         stat_validColumns = 
0:             (scan.init_scanColumnList == null ? 
0:                 null : ((FormatableBitSet) scan.init_scanColumnList.clone()));
0: 
0:         if (stat_validColumns == null)
0:         {
0:             stat_numColumnsFetched = scan.init_template.length;
0:         }
0:         else
0:         {
0:             for (int i = 0; i < stat_validColumns.size(); i++)
0:             {
0:                 if (stat_validColumns.get(i))
0:                     stat_numColumnsFetched++;
0:             }
0:         }
0: 
0:         try
0:         {
0:             stat_treeHeight = scan.getHeight();
0:         }
0:         catch (Throwable t)
0:         {
0:             stat_treeHeight = -1;
0:         }
0:     }
0: 
0:     /**
0:      * Return all information gathered about the scan.
0:      * <p>
0:      * This routine returns a list of properties which contains all information
0:      * gathered about the scan.  If a Property is passed in, then that property
0:      * list is appeneded to, otherwise a new property object is created and
0:      * returned.
0:      * <p>
0:      * Not all scans may support all properties, if the property is not 
0:      * supported then it will not be returned.  The following is a list of
0:      * properties that may be returned:
0:      *
0:      *     numPagesVisited
0:      *         - the number of pages visited during the scan.  For btree scans
0:      *           this number only includes the leaf pages visited.  
0:      *     numRowsVisited
0:      *         - the number of rows visited during the scan.  This number 
0:      *           includes all rows, including: those marked deleted, those
0:      *           that don't meet qualification, ...
0:      *     numRowsQualified
0:      *         - the number of undeleted rows, which met the qualification.
0:      *     treeHeight (btree's only)
0:      *         - for btree's the height of the tree.  A tree with one page
0:      *           has a height of 1.  Total number of pages visited in a btree
0:      *           scan is (treeHeight - 1 + numPagesVisited).
0:      *     numColumnsFetched
0:      *         - the number of columns Fetched - partial scans will result
0:      *           in fetching less columns than the total number in the scan.
0:      *     columnsFetched
0:      *         - The FormatableBitSet.toString() method called on the validColumns arg.
0:      *           to the scan, unless validColumns was set to null, and in that
0:      *           case we will return "all".
0:      *     NOTE - this list will be expanded as more information about the scan
0:      *            is gathered and returned.
0:      *
0:      * @param prop   Property list to fill in.
0:      *
0: 	 * @exception  StandardException  Standard exception policy.
0:      **/
0:     public Properties getAllScanInfo(Properties prop)
0: 		throws StandardException
0:     {
0:         if (prop == null)
0:             prop = new Properties();
0: 
0:         prop.put(
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_SCAN_TYPE),
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_BTREE));
0:         prop.put(
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_PAGES_VISITED),
0:             Integer.toString(stat_numpages_visited));
0:         prop.put(
0: 			MessageService.getTextMessage(SQLState.STORE_RTS_NUM_ROWS_VISITED),
0:             Integer.toString(stat_numrows_visited));
0:         prop.put(
0: 			MessageService.getTextMessage(
0: 								SQLState.STORE_RTS_NUM_DELETED_ROWS_VISITED),
0:             Integer.toString(stat_numdeleted_rows_visited));
0:         prop.put(
0: 			MessageService.getTextMessage(
0: 								SQLState.STORE_RTS_NUM_ROWS_QUALIFIED),
0:             Integer.toString(stat_numrows_qualified));
0:         prop.put(
0: 			MessageService.getTextMessage(
0: 								SQLState.STORE_RTS_TREE_HEIGHT),
0:             Integer.toString(stat_treeHeight));
0:         prop.put(
0: 			MessageService.getTextMessage(
0: 								SQLState.STORE_RTS_NUM_COLUMNS_FETCHED),
0:             Integer.toString(stat_numColumnsFetched));
0:         prop.put(
0: 			MessageService.getTextMessage(
0: 								SQLState.STORE_RTS_COLUMNS_FETCHED_BIT_SET),
0: 			(stat_validColumns == null ?
0: 				MessageService.getTextMessage(
0: 								SQLState.STORE_RTS_ALL) :
0:                 stat_validColumns.toString()));
0: 
0:         return(prop);
0:     }
0: }
============================================================================