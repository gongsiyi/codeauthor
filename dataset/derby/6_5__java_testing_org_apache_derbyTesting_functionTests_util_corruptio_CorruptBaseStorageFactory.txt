1:aaea357: /*
2:aaea357: 
1:aaea357:    Derby - Class org.apache.derby.impl.io.BaseStorageFactory
1:aaea357: 
1:15651f5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:15651f5:    contributor license agreements.  See the NOTICE file distributed with
1:15651f5:    this work for additional information regarding copyright ownership.
1:15651f5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:15651f5:    (the "License"); you may not use this file except in compliance with
1:15651f5:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: package org.apache.derbyTesting.functionTests.util.corruptio;
1:aaea357: import org.apache.derby.io.WritableStorageFactory;
1:aaea357: import org.apache.derby.io.StorageFile;
1:aaea357: 
1:aaea357: import java.io.File;
1:aaea357: import java.io.IOException;
1:aaea357: import java.io.OutputStream;
1:aaea357: import java.io.IOException;
1:aaea357: import java.io.SyncFailedException;
1:aaea357: 
1:aaea357: /**
1:aaea357:  * This class provides a proxy base implementation of the 
1:aaea357:  * WritableStorageFactory interface to instrument I/O operations for testing 
1:aaea357:  * purposes. 
1:aaea357:  * Some methods in this class adds support for corrupting the I/O operation 
1:aaea357:  * sent by the engine before invoking the real storage factory underneath. 
1:aaea357:  * By deault all the calls will go to the real storage factory defined by the 
1:aaea357:  * concrete class, unless corruption is enabled through CorruptibleIo instance. 
1:aaea357:  * 
1:aaea357:  * @see CorruptibleIo
1:aaea357:  * @see WritableStorageFactory
1:aaea357:  * 
1:aaea357:  */
1:aaea357: 
1:aaea357: abstract class CorruptBaseStorageFactory implements WritableStorageFactory
1:aaea357: {
1:aaea357: 
1:aaea357: 	protected WritableStorageFactory realStorageFactory;
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Most of the initialization is done in the init method.
1:aaea357:      */
1:aaea357:     CorruptBaseStorageFactory()
1:aaea357:     {}
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Classes implementing the StorageFactory interface must have a null
1:aaea357:      * constructor.  This method is called when the database is booted up to
1:aaea357:      * initialize the class. It should perform all actions necessary to start 
1:aaea357:      * the basic storage, such as creating a temporary file directory.
1:aaea357:      *
1:aaea357:      * The init method will be called once, before any other method is called, 
1:aaea357:      * and will not be called again.
1:aaea357:      *
1:aaea357:      * @param home          The name of the directory containing the database. 
1:aaea357:      *                      It comes from the system.home system property.
1:aaea357:      *                      It may be null. A storage factory may decide to 
1:aaea357:      *                      ignore this parameter. (For instance the classpath
1:aaea357:      *                      storage factory ignores it.)
1:aaea357:      *
1:aaea357:      * @param databaseName  The name of the database (directory). 
1:aaea357:      *                      All relative pathnames are relative to this 
1:aaea357:      *                      directory.
1:aaea357:      *                      If null then the storage factory will only be used 
1:aaea357:      *                      to deal with the directory containing the databases.
1:aaea357:      * @param tempDirName   The name of the temporary file directory set in 
1:aaea357:      *                      properties. If null then a default directory should
1:aaea357:      *                      be used. Each database should get a separate 
1:aaea357:      *                      temporary file directory within this one to avoid 
1:aaea357:      *                      collisions.
1:aaea357:      *
1:aaea357:      * @param uniqueName    A unique name that can be used to create the 
1:aaea357:      *                      temporary file directory for this database.
1:aaea357:      *
1:aaea357:      * @exception IOException on an error (unexpected).
1:aaea357:      */
1:aaea357:     public void init( String home, String databaseName, String tempDirName, String uniqueName)
1:aaea357:         throws IOException
1:aaea357:     {
1:aaea357: 		realStorageFactory = getRealStorageFactory();
1:aaea357: 		realStorageFactory.init(home, databaseName, tempDirName,  uniqueName);
1:aaea357:     } // end of init
1:aaea357: 
1:aaea357:     
1:aaea357:     public void shutdown()
1:aaea357:     {
1:aaea357: 		realStorageFactory.shutdown();
1:aaea357:     }
1:aaea357:     
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Get the canonical name of the database. 
1:aaea357:      *
1:aaea357:      * This is a name that uniquely identifies it. It is system dependent.
1:aaea357:      *
1:aaea357:      * The normal, disk based implementation uses method 
1:aaea357:      * java.io.File.getCanonicalPath on the directory holding the
1:aaea357:      * database to construct the canonical name.
1:aaea357:      *
1:aaea357:      * @return the canonical name
1:aaea357:      *
1:aaea357:      * @exception IOException if an IO error occurred during the construction 
1:aaea357:      *                        of the name.
1:aaea357:      */
1:aaea357:     public String getCanonicalName() throws IOException
1:aaea357:     {
1:aaea357: 		return realStorageFactory.getCanonicalName();
1:aaea357:     }
1:aaea357:     
1:aaea357:     /**
1:0e00e5e:      * Set the canonicalName. May need adjustment due to DERBY-5096
1:0e00e5e:      * 
1:0e00e5e:      * @param name uniquely identifiable name for this database
1:0e00e5e:      */
1:0e00e5e:     public void setCanonicalName(String name) {
1:0e00e5e:        realStorageFactory.setCanonicalName(name);
1:0e00e5e:     }
1:0e00e5e:     
1:0e00e5e:     /**
1:aaea357:      * Construct a StorageFile from a path name.
1:aaea357:      *
1:aaea357:      * @param path The path name of the file
1:aaea357:      *
1:aaea357:      * @return A corresponding StorageFile object
1:aaea357:      */
1:aaea357:     public StorageFile newStorageFile( String path)
1:aaea357:     {
1:aaea357:         return new CorruptFile(realStorageFactory.newStorageFile(path));
1:aaea357:     }
1:aaea357:     
1:aaea357:     /**
1:aaea357:      * Construct a StorageFile from a directory and file name.
1:aaea357:      *
1:aaea357:      * @param directoryName The directory part of the path name.
1:aaea357:      * @param fileName The name of the file within the directory.
1:aaea357:      *
1:aaea357:      * @return A corresponding StorageFile object
1:aaea357:      */
1:aaea357:     public StorageFile newStorageFile( String directoryName, String fileName)
1:aaea357:     {
1:aaea357: 		return new CorruptFile(realStorageFactory.newStorageFile(directoryName, fileName));
1:aaea357:     }
1:aaea357:     
1:aaea357:     /**
1:aaea357:      * Construct a StorageFile from a directory and file name.
1:aaea357:      *
1:aaea357:      * @param directoryName The directory part of the path name.
1:aaea357:      * @param fileName The name of the file within the directory.
1:aaea357:      *
1:aaea357:      * @return A corresponding StorageFile object
1:aaea357:      */
1:aaea357:     public StorageFile newStorageFile( StorageFile directoryName, String fileName)
1:aaea357:     {
1:aaea357: 		StorageFile realDirFile = ((CorruptFile) directoryName).getRealFileInstance();
1:aaea357: 		return new CorruptFile(realStorageFactory.newStorageFile(realDirFile, fileName));
1:aaea357:     }
1:aaea357:     
1:aaea357:     /**
1:aaea357:      * Get the pathname separator character used by the StorageFile 
1:aaea357:      * implementation.
1:aaea357:      *
1:aaea357:      * @return the pathname separator character. (Normally '/' or '\').
1:aaea357:      */
1:aaea357:     public char getSeparator()
1:aaea357:     {
1:aaea357: 		return realStorageFactory.getSeparator();
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Get the abstract name of the directory that holds temporary files.
1:aaea357:      *
1:aaea357:      * @return a directory name
1:aaea357:      */
1:aaea357:     public StorageFile getTempDir()
1:aaea357:     {
1:aaea357: 		return new CorruptFile(realStorageFactory.getTempDir());
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * This method is used to determine whether the storage is fast 
1:aaea357:      * (RAM based) or slow (disk based).
1:aaea357:      *
1:aaea357:      * It may be used by the database engine to determine the default size of 
1:aaea357:      * the page cache.
1:aaea357:      *
1:aaea357:      * @return <b>true</b> if the storage is fast, <b>false</b> if it is slow.
1:aaea357:      */
1:aaea357:     public boolean isFast()
1:aaea357:     {
1:aaea357: 		return realStorageFactory.isFast();
1:aaea357:     }
1:aaea357: 
1:aaea357:     public boolean isReadOnlyDatabase()
1:aaea357:     {
1:aaea357: 		return realStorageFactory.isReadOnlyDatabase();
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * Determine whether the storage supports random access. 
1:aaea357:      * If random access is not supported then it will only be accessed using 
1:aaea357:      * InputStreams and OutputStreams (if the database is writable).
1:aaea357:      *
1:aaea357:      * @return <b>true</b> if the storage supports random access, <b>false</b> if it is writable.
1:aaea357:      */
1:aaea357:     public boolean supportsRandomAccess()
1:aaea357:     {
1:aaea357: 		return realStorageFactory.supportsRandomAccess();
1:aaea357:     }
1:aaea357: 
1:aaea357:     public int getStorageFactoryVersion()
1:aaea357:     {
1:aaea357: 		return realStorageFactory.getStorageFactoryVersion();
1:aaea357:     }
1:aaea357: 
1:aaea357: 
1:aaea357: 	
1:aaea357:     /**
1:aaea357:      * Force the data of an output stream out to the underlying storage. 
1:aaea357:      *
1:aaea357:      * That is, ensure that it has been made persistent. If the database is to 
1:aaea357:      * be transient, that is, if the database does not survive a restart, then 
1:aaea357:      * the sync method implementation need not do anything.
1:aaea357:      *
1:aaea357:      * @param stream    The stream to be synchronized.
1:aaea357:      * @param metaData  If true then this method must force both changes to the
1:aaea357:      *                  file's contents and metadata to be written to storage; 
1:aaea357:      *                  if false, it need only force file content changes to be
1:aaea357:      *                  written. The implementation is allowed to ignore this 
1:aaea357:      *                  parameter and always force out metadata changes.
1:aaea357:      *
1:aaea357:      * @exception IOException if an I/O error occurs.
1:aaea357:      * @exception SyncFailedException Thrown when the buffers cannot be flushed,
1:aaea357:      *            or because the system cannot guarantee that all the buffers 
1:aaea357:      *            have been synchronized with physical media.
1:aaea357:      */
1:aaea357:     public void sync( OutputStream stream, boolean metaData) throws IOException, SyncFailedException
1:aaea357:     {
1:aaea357: 		realStorageFactory.sync(stream, metaData);
1:aaea357:     }
1:aaea357: 
1:aaea357:     /**
1:aaea357:      * This method tests whether the "rws" and "rwd" modes are implemented. 
1:aaea357:      *
1:a1c5a36:      * If the "rws" and "rwd" modes are supported then the database engine will
1:a1c5a36:      * conclude that the write methods of "rws" mode StorageRandomAccessFiles
1:a1c5a36:      * are slow but the sync method is fast and optimize accordingly.
1:aaea357:      *
1:aaea357:      * @return <b>true</b> if an StIRandomAccess file opened with "rws" or "rwd" modes immediately writes data to the
1:aaea357:      *         underlying storage, <b>false</b> if not.
1:aaea357:      */
1:a1c5a36:     public boolean supportsWriteSync()
1:aaea357:     {
1:a1c5a36: 		return realStorageFactory.supportsWriteSync();
1:aaea357:     }
1:aaea357: 
1:aaea357: 	
1:aaea357: 	/**
1:aaea357:      * get the  real storage factory
1:aaea357:      *
1:aaea357:      */
1:aaea357: 	abstract WritableStorageFactory getRealStorageFactory();
1:aaea357: 
1:b2b30ec:     /**
1:b2b30ec:      * Create and returns a temporary file in temporary file system of database.
1:b2b30ec:      *
1:b2b30ec:      * @param prefix String to prefix the random name generator. It can be null
1:b2b30ec:      * @param suffix String to suffix the random name generator. ".tmp" will be
1:b2b30ec:      *               used if null.
1:b2b30ec:      * @return StorageFile
1:b2b30ec:      */
1:b2b30ec:     public StorageFile createTemporaryFile(String prefix, String suffix)
1:b2b30ec:                                                             throws IOException {
1:b2b30ec:         return new CorruptFile(realStorageFactory.createTemporaryFile(
1:b2b30ec:                 prefix, suffix));
1:b2b30ec:     }
1:b2b30ec: 
1:aaea357: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:0e00e5e
/////////////////////////////////////////////////////////////////////////
1:      * Set the canonicalName. May need adjustment due to DERBY-5096
1:      * 
1:      * @param name uniquely identifiable name for this database
1:      */
1:     public void setCanonicalName(String name) {
1:        realStorageFactory.setCanonicalName(name);
1:     }
1:     
1:     /**
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:a1c5a36
/////////////////////////////////////////////////////////////////////////
1:      * If the "rws" and "rwd" modes are supported then the database engine will
1:      * conclude that the write methods of "rws" mode StorageRandomAccessFiles
1:      * are slow but the sync method is fast and optimize accordingly.
1:     public boolean supportsWriteSync()
1: 		return realStorageFactory.supportsWriteSync();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:15651f5
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b2b30ec
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Create and returns a temporary file in temporary file system of database.
1:      *
1:      * @param prefix String to prefix the random name generator. It can be null
1:      * @param suffix String to suffix the random name generator. ".tmp" will be
1:      *               used if null.
1:      * @return StorageFile
1:      */
1:     public StorageFile createTemporaryFile(String prefix, String suffix)
1:                                                             throws IOException {
1:         return new CorruptFile(realStorageFactory.createTemporaryFile(
1:                 prefix, suffix));
1:     }
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.io.BaseStorageFactory
1: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: package org.apache.derbyTesting.functionTests.util.corruptio;
1: import org.apache.derby.io.WritableStorageFactory;
1: import org.apache.derby.io.StorageFile;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.IOException;
1: import java.io.SyncFailedException;
1: 
1: /**
1:  * This class provides a proxy base implementation of the 
1:  * WritableStorageFactory interface to instrument I/O operations for testing 
1:  * purposes. 
1:  * Some methods in this class adds support for corrupting the I/O operation 
1:  * sent by the engine before invoking the real storage factory underneath. 
1:  * By deault all the calls will go to the real storage factory defined by the 
1:  * concrete class, unless corruption is enabled through CorruptibleIo instance. 
1:  * 
1:  * @see CorruptibleIo
1:  * @see WritableStorageFactory
0:  * @see StorageFactory
1:  * 
1:  */
1: 
1: abstract class CorruptBaseStorageFactory implements WritableStorageFactory
1: {
1: 
1: 	protected WritableStorageFactory realStorageFactory;
1: 
1:     /**
1:      * Most of the initialization is done in the init method.
1:      */
1:     CorruptBaseStorageFactory()
1:     {}
1: 
1:     /**
1:      * Classes implementing the StorageFactory interface must have a null
1:      * constructor.  This method is called when the database is booted up to
1:      * initialize the class. It should perform all actions necessary to start 
1:      * the basic storage, such as creating a temporary file directory.
1:      *
1:      * The init method will be called once, before any other method is called, 
1:      * and will not be called again.
1:      *
1:      * @param home          The name of the directory containing the database. 
1:      *                      It comes from the system.home system property.
1:      *                      It may be null. A storage factory may decide to 
1:      *                      ignore this parameter. (For instance the classpath
1:      *                      storage factory ignores it.)
1:      *
1:      * @param databaseName  The name of the database (directory). 
1:      *                      All relative pathnames are relative to this 
1:      *                      directory.
1:      *                      If null then the storage factory will only be used 
1:      *                      to deal with the directory containing the databases.
0:      * @param create        If true then the database is being created.
1:      * @param tempDirName   The name of the temporary file directory set in 
1:      *                      properties. If null then a default directory should
1:      *                      be used. Each database should get a separate 
1:      *                      temporary file directory within this one to avoid 
1:      *                      collisions.
1:      *
1:      * @param uniqueName    A unique name that can be used to create the 
1:      *                      temporary file directory for this database.
1:      *
1:      * @exception IOException on an error (unexpected).
1:      */
1:     public void init( String home, String databaseName, String tempDirName, String uniqueName)
1:         throws IOException
1:     {
1: 		realStorageFactory = getRealStorageFactory();
1: 		realStorageFactory.init(home, databaseName, tempDirName,  uniqueName);
1:     } // end of init
1: 
1:     
1:     public void shutdown()
1:     {
1: 		realStorageFactory.shutdown();
1:     }
1:     
1: 
1:     /**
1:      * Get the canonical name of the database. 
1:      *
1:      * This is a name that uniquely identifies it. It is system dependent.
1:      *
1:      * The normal, disk based implementation uses method 
1:      * java.io.File.getCanonicalPath on the directory holding the
1:      * database to construct the canonical name.
1:      *
1:      * @return the canonical name
1:      *
1:      * @exception IOException if an IO error occurred during the construction 
1:      *                        of the name.
1:      */
1:     public String getCanonicalName() throws IOException
1:     {
1: 		return realStorageFactory.getCanonicalName();
1:     }
1:     
1:     /**
1:      * Construct a StorageFile from a path name.
1:      *
1:      * @param path The path name of the file
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     public StorageFile newStorageFile( String path)
1:     {
1:         return new CorruptFile(realStorageFactory.newStorageFile(path));
1:     }
1:     
1:     /**
1:      * Construct a StorageFile from a directory and file name.
1:      *
1:      * @param directoryName The directory part of the path name.
1:      * @param fileName The name of the file within the directory.
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     public StorageFile newStorageFile( String directoryName, String fileName)
1:     {
1: 		return new CorruptFile(realStorageFactory.newStorageFile(directoryName, fileName));
1:     }
1:     
1:     /**
1:      * Construct a StorageFile from a directory and file name.
1:      *
1:      * @param directoryName The directory part of the path name.
1:      * @param fileName The name of the file within the directory.
1:      *
1:      * @return A corresponding StorageFile object
1:      */
1:     public StorageFile newStorageFile( StorageFile directoryName, String fileName)
1:     {
1: 		StorageFile realDirFile = ((CorruptFile) directoryName).getRealFileInstance();
1: 		return new CorruptFile(realStorageFactory.newStorageFile(realDirFile, fileName));
1:     }
1:     
1:     /**
1:      * Get the pathname separator character used by the StorageFile 
1:      * implementation.
1:      *
1:      * @return the pathname separator character. (Normally '/' or '\').
1:      */
1:     public char getSeparator()
1:     {
1: 		return realStorageFactory.getSeparator();
1:     }
1: 
1:     /**
1:      * Get the abstract name of the directory that holds temporary files.
1:      *
1:      * @return a directory name
1:      */
1:     public StorageFile getTempDir()
1:     {
1: 		return new CorruptFile(realStorageFactory.getTempDir());
1:     }
1: 
1:     /**
1:      * This method is used to determine whether the storage is fast 
1:      * (RAM based) or slow (disk based).
1:      *
1:      * It may be used by the database engine to determine the default size of 
1:      * the page cache.
1:      *
1:      * @return <b>true</b> if the storage is fast, <b>false</b> if it is slow.
1:      */
1:     public boolean isFast()
1:     {
1: 		return realStorageFactory.isFast();
1:     }
1: 
1:     public boolean isReadOnlyDatabase()
1:     {
1: 		return realStorageFactory.isReadOnlyDatabase();
1:     }
1: 
1:     /**
1:      * Determine whether the storage supports random access. 
1:      * If random access is not supported then it will only be accessed using 
1:      * InputStreams and OutputStreams (if the database is writable).
1:      *
1:      * @return <b>true</b> if the storage supports random access, <b>false</b> if it is writable.
1:      */
1:     public boolean supportsRandomAccess()
1:     {
1: 		return realStorageFactory.supportsRandomAccess();
1:     }
1: 
1:     public int getStorageFactoryVersion()
1:     {
1: 		return realStorageFactory.getStorageFactoryVersion();
1:     }
1: 
1: 
1: 	
1:     /**
1:      * Force the data of an output stream out to the underlying storage. 
1:      *
1:      * That is, ensure that it has been made persistent. If the database is to 
1:      * be transient, that is, if the database does not survive a restart, then 
1:      * the sync method implementation need not do anything.
1:      *
1:      * @param stream    The stream to be synchronized.
1:      * @param metaData  If true then this method must force both changes to the
1:      *                  file's contents and metadata to be written to storage; 
1:      *                  if false, it need only force file content changes to be
1:      *                  written. The implementation is allowed to ignore this 
1:      *                  parameter and always force out metadata changes.
1:      *
1:      * @exception IOException if an I/O error occurs.
1:      * @exception SyncFailedException Thrown when the buffers cannot be flushed,
1:      *            or because the system cannot guarantee that all the buffers 
1:      *            have been synchronized with physical media.
1:      */
1:     public void sync( OutputStream stream, boolean metaData) throws IOException, SyncFailedException
1:     {
1: 		realStorageFactory.sync(stream, metaData);
1:     }
1: 
1:     /**
1:      * This method tests whether the "rws" and "rwd" modes are implemented. 
1:      *
0:      * If the "rws" method is supported then the database engine will conclude 
0:      * that the write methods of "rws" mode StorageRandomAccessFiles are
0:      * slow but the sync method is fast and optimize accordingly.
1:      *
1:      * @return <b>true</b> if an StIRandomAccess file opened with "rws" or "rwd" modes immediately writes data to the
1:      *         underlying storage, <b>false</b> if not.
1:      */
0:     public boolean supportsRws()
1:     {
0: 		return realStorageFactory.supportsRws();
1:     }
1: 
1: 	
1: 	/**
1:      * get the  real storage factory
1:      *
1:      */
1: 	abstract WritableStorageFactory getRealStorageFactory();
1: 
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:3755119
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derby.impl.io.BaseStorageFactory
0: 
0:    Copyright 2004 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: package org.apache.derbyTesting.functionTests.util.corruptio;
0: import org.apache.derby.io.WritableStorageFactory;
0: import org.apache.derby.io.StorageFile;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.OutputStream;
0: import java.io.IOException;
0: import java.io.SyncFailedException;
0: 
0: /**
0:  * This class provides a proxy base implementation of the 
0:  * WritableStorageFactory interface to instrument I/O operations for testing 
0:  * purposes. 
0:  * Some methods in this class adds support for corrupting the I/O operation 
0:  * sent by the engine before invoking the real storage factory underneath. 
0:  * By deault all the calls will go to the real storage factory defined by the 
0:  * concrete class, unless corruption is enabled through CorruptibleIo instance. 
0:  * 
0:  * @see CorruptibleIo
0:  * @see WritableStorageFactory
0:  * @see StorageFactory
0:  * 
0:  */
0: 
0: abstract class CorruptBaseStorageFactory implements WritableStorageFactory
0: {
0: 
0: 	protected WritableStorageFactory realStorageFactory;
0: 
0:     /**
0:      * Most of the initialization is done in the init method.
0:      */
0:     CorruptBaseStorageFactory()
0:     {}
0: 
0:     /**
0:      * Classes implementing the StorageFactory interface must have a null
0:      * constructor.  This method is called when the database is booted up to
0:      * initialize the class. It should perform all actions necessary to start 
0:      * the basic storage, such as creating a temporary file directory.
0:      *
0:      * The init method will be called once, before any other method is called, 
0:      * and will not be called again.
0:      *
0:      * @param home          The name of the directory containing the database. 
0:      *                      It comes from the system.home system property.
0:      *                      It may be null. A storage factory may decide to 
0:      *                      ignore this parameter. (For instance the classpath
0:      *                      storage factory ignores it.)
0:      *
0:      * @param databaseName  The name of the database (directory). 
0:      *                      All relative pathnames are relative to this 
0:      *                      directory.
0:      *                      If null then the storage factory will only be used 
0:      *                      to deal with the directory containing the databases.
0:      * @param create        If true then the database is being created.
0:      * @param tempDirName   The name of the temporary file directory set in 
0:      *                      properties. If null then a default directory should
0:      *                      be used. Each database should get a separate 
0:      *                      temporary file directory within this one to avoid 
0:      *                      collisions.
0:      *
0:      * @param uniqueName    A unique name that can be used to create the 
0:      *                      temporary file directory for this database.
0:      *
0:      * @exception IOException on an error (unexpected).
0:      */
0:     public void init( String home, String databaseName, String tempDirName, String uniqueName)
0:         throws IOException
0:     {
0: 		realStorageFactory = getRealStorageFactory();
0: 		realStorageFactory.init(home, databaseName, tempDirName,  uniqueName);
0:     } // end of init
0: 
0:     
0:     public void shutdown()
0:     {
0: 		realStorageFactory.shutdown();
0:     }
0:     
0: 
0:     /**
0:      * Get the canonical name of the database. 
0:      *
0:      * This is a name that uniquely identifies it. It is system dependent.
0:      *
0:      * The normal, disk based implementation uses method 
0:      * java.io.File.getCanonicalPath on the directory holding the
0:      * database to construct the canonical name.
0:      *
0:      * @return the canonical name
0:      *
0:      * @exception IOException if an IO error occurred during the construction 
0:      *                        of the name.
0:      */
0:     public String getCanonicalName() throws IOException
0:     {
0: 		return realStorageFactory.getCanonicalName();
0:     }
0:     
0:     /**
0:      * Construct a StorageFile from a path name.
0:      *
0:      * @param path The path name of the file
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     public StorageFile newStorageFile( String path)
0:     {
0:         return new CorruptFile(realStorageFactory.newStorageFile(path));
0:     }
0:     
0:     /**
0:      * Construct a StorageFile from a directory and file name.
0:      *
0:      * @param directoryName The directory part of the path name.
0:      * @param fileName The name of the file within the directory.
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     public StorageFile newStorageFile( String directoryName, String fileName)
0:     {
0: 		return new CorruptFile(realStorageFactory.newStorageFile(directoryName, fileName));
0:     }
0:     
0:     /**
0:      * Construct a StorageFile from a directory and file name.
0:      *
0:      * @param directoryName The directory part of the path name.
0:      * @param fileName The name of the file within the directory.
0:      *
0:      * @return A corresponding StorageFile object
0:      */
0:     public StorageFile newStorageFile( StorageFile directoryName, String fileName)
0:     {
0: 		StorageFile realDirFile = ((CorruptFile) directoryName).getRealFileInstance();
0: 		return new CorruptFile(realStorageFactory.newStorageFile(realDirFile, fileName));
0:     }
0:     
0:     /**
0:      * Get the pathname separator character used by the StorageFile 
0:      * implementation.
0:      *
0:      * @return the pathname separator character. (Normally '/' or '\').
0:      */
0:     public char getSeparator()
0:     {
0: 		return realStorageFactory.getSeparator();
0:     }
0: 
0:     /**
0:      * Get the abstract name of the directory that holds temporary files.
0:      *
0:      * @return a directory name
0:      */
0:     public StorageFile getTempDir()
0:     {
0: 		return new CorruptFile(realStorageFactory.getTempDir());
0:     }
0: 
0:     /**
0:      * This method is used to determine whether the storage is fast 
0:      * (RAM based) or slow (disk based).
0:      *
0:      * It may be used by the database engine to determine the default size of 
0:      * the page cache.
0:      *
0:      * @return <b>true</b> if the storage is fast, <b>false</b> if it is slow.
0:      */
0:     public boolean isFast()
0:     {
0: 		return realStorageFactory.isFast();
0:     }
0: 
0:     public boolean isReadOnlyDatabase()
0:     {
0: 		return realStorageFactory.isReadOnlyDatabase();
0:     }
0: 
0:     /**
0:      * Determine whether the storage supports random access. 
0:      * If random access is not supported then it will only be accessed using 
0:      * InputStreams and OutputStreams (if the database is writable).
0:      *
0:      * @return <b>true</b> if the storage supports random access, <b>false</b> if it is writable.
0:      */
0:     public boolean supportsRandomAccess()
0:     {
0: 		return realStorageFactory.supportsRandomAccess();
0:     }
0: 
0:     public int getStorageFactoryVersion()
0:     {
0: 		return realStorageFactory.getStorageFactoryVersion();
0:     }
0: 
0: 
0: 	
0:     /**
0:      * Force the data of an output stream out to the underlying storage. 
0:      *
0:      * That is, ensure that it has been made persistent. If the database is to 
0:      * be transient, that is, if the database does not survive a restart, then 
0:      * the sync method implementation need not do anything.
0:      *
0:      * @param stream    The stream to be synchronized.
0:      * @param metaData  If true then this method must force both changes to the
0:      *                  file's contents and metadata to be written to storage; 
0:      *                  if false, it need only force file content changes to be
0:      *                  written. The implementation is allowed to ignore this 
0:      *                  parameter and always force out metadata changes.
0:      *
0:      * @exception IOException if an I/O error occurs.
0:      * @exception SyncFailedException Thrown when the buffers cannot be flushed,
0:      *            or because the system cannot guarantee that all the buffers 
0:      *            have been synchronized with physical media.
0:      */
0:     public void sync( OutputStream stream, boolean metaData) throws IOException, SyncFailedException
0:     {
0: 		realStorageFactory.sync(stream, metaData);
0:     }
0: 
0:     /**
0:      * This method tests whether the "rws" and "rwd" modes are implemented. 
0:      *
0:      * If the "rws" method is supported then the database engine will conclude 
0:      * that the write methods of "rws" mode StorageRandomAccessFiles are
0:      * slow but the sync method is fast and optimize accordingly.
0:      *
0:      * @return <b>true</b> if an StIRandomAccess file opened with "rws" or "rwd" modes immediately writes data to the
0:      *         underlying storage, <b>false</b> if not.
0:      */
0:     public boolean supportsRws()
0:     {
0: 		return realStorageFactory.supportsRws();
0:     }
0: 
0: 	
0: 	/**
0:      * get the  real storage factory
0:      *
0:      */
0: 	abstract WritableStorageFactory getRealStorageFactory();
0: 
0: }
============================================================================