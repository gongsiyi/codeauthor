1:7a9ce7e: /*
5:7a9ce7e: 
1:7a9ce7e:    Derby - Class org.apache.derby.impl.sql.compile.WindowDefinitionNode
1:7a9ce7e: 
1:7a9ce7e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9ce7e:    contributor license agreements.  See the NOTICE file distributed with
1:7a9ce7e:    this work for additional information regarding copyright ownership.
1:7a9ce7e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a9ce7e:    (the "License"); you may not use this file except in compliance with
1:7a9ce7e:    the License.  You may obtain a copy of the License at
1:7a9ce7e: 
1:7a9ce7e:       http://www.apache.org/licenses/LICENSE-2.0
1:7a9ce7e: 
1:7a9ce7e:    Unless required by applicable law or agreed to in writing, software
1:7a9ce7e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a9ce7e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9ce7e:    See the License for the specific language governing permissions and
1:7a9ce7e:    limitations under the License.
1:7a9ce7e: 
1:7a9ce7e:  */
1:7a9ce7e: 
1:7a9ce7e: package org.apache.derby.impl.sql.compile;
1:7a9ce7e: 
1:7a9ce7e: import org.apache.derby.iapi.error.StandardException;
1:7a9ce7e: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:7a9ce7e: 
1:7a9ce7e: /**
1:7a9ce7e:  * This class represents an OLAP window definition.
1:7a9ce7e:  */
1:7a9ce7e: public final class WindowDefinitionNode extends WindowNode
2:7a9ce7e: {
1:7a9ce7e:     /**
1:7a9ce7e:      * True of the window definition was inlined.
1:7a9ce7e:      */
1:7a9ce7e:     private boolean inlined;
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * The order by list if the window definition contains a <window order
1:7a9ce7e:      * clause>, else null.
1:7a9ce7e:      */
1:7a9ce7e:     private OrderByList orderByList;
1:7a9ce7e: 
1:7a9ce7e:     /**
1:3bb140c:      * Constructor.
1:7a9ce7e:      *
1:3bb140c:      * @param windowName  The window name, null if in-lined definition
1:3bb140c:      * @param orderByList ORDER BY list
1:3bb140c:      * @param cm          The context manager
1:7a9ce7e:      * @exception StandardException
1:7a9ce7e:      */
1:3bb140c:     WindowDefinitionNode(String         windowName,
1:3bb140c:                          OrderByList    orderByList,
1:3bb140c:                          ContextManager cm) throws StandardException {
1:3bb140c:         super(windowName != null ? windowName : "IN-LINE", cm);
1:3bb140c:         this.orderByList = orderByList;
1:7a9ce7e: 
1:3bb140c:         if (windowName != null) {
1:7a9ce7e:             inlined = false;
1:7a9ce7e:         } else {
1:7a9ce7e:             inlined = true;
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         if (orderByList != null) {
1:7a9ce7e:             throw StandardException.newException(SQLState.NOT_IMPLEMENTED,
1:7a9ce7e:                                                  "WINDOW/ORDER BY");
1:7a9ce7e:         }
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * java.lang.Object override.
1:7a9ce7e:      * @see QueryTreeNode#toString
1:7a9ce7e:      */
1:3bb140c:     @Override
1:7a9ce7e:     public String toString() {
1:7a9ce7e:         return ("name: " + getName() + "\n" +
1:7a9ce7e:                 "inlined: " + inlined + "\n" +
1:7a9ce7e:                 "()\n");
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * QueryTreeNode override. Prints the sub-nodes of this object.
1:7a9ce7e:      * @see QueryTreeNode#printSubNodes
1:7a9ce7e:      *
1:7a9ce7e:      * @param depth     The depth of this node in the tree
1:7a9ce7e:      */
1:3bb140c:     @Override
1:7a9ce7e:     public void printSubNodes(int depth)
1:7a9ce7e:     {
1:7a9ce7e:         if (SanityManager.DEBUG)
1:7a9ce7e:         {
1:7a9ce7e:             super.printSubNodes(depth);
1:7a9ce7e: 
1:7a9ce7e:             if (orderByList != null) {
1:7a9ce7e:                 printLabel(depth, "orderByList: "  + depth);
1:7a9ce7e:                 orderByList.treePrint(depth + 1);
1:7a9ce7e:             }
1:7a9ce7e:         }
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Used to merge equivalent window definitions.
1:7a9ce7e:      *
1:7a9ce7e:      * @param wl list of window definitions
1:7a9ce7e:      * @return an existing window definition from wl, if 'this' is equivalent
1:7a9ce7e:      * to a window in wl.
1:7a9ce7e:      */
1:e1f49ca:     WindowDefinitionNode findEquivalentWindow(WindowList wl) {
1:e1f49ca:         for (WindowDefinitionNode old : wl) {
1:7a9ce7e:             if (isEquivalent(old)) {
1:7a9ce7e:                 return old;
1:7a9ce7e:             }
1:7a9ce7e:         }
1:7a9ce7e:         return null;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * @return true if the window specifications are equal; no need to create
1:7a9ce7e:      * more than one window then.
1:7a9ce7e:      */
1:7a9ce7e:     private boolean isEquivalent(WindowDefinitionNode other) {
1:7a9ce7e:         if (orderByList == null && other.getOrderByList() == null) {
1:7a9ce7e:             return true;
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         if (SanityManager.DEBUG) {
1:7a9ce7e:             SanityManager.ASSERT(
1:7a9ce7e:                 false,
1:7a9ce7e:                 "FIXME: ordering in windows not implemented yet");
1:7a9ce7e:         }
1:7a9ce7e:         return false;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * @return the order by list of this window definition if any, else null.
1:7a9ce7e:      */
1:e1f49ca:     OrderByList getOrderByList() {
1:7a9ce7e:         return orderByList;
1:7a9ce7e:     }
1:7a9ce7e: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:     WindowDefinitionNode findEquivalentWindow(WindowList wl) {
1:         for (WindowDefinitionNode old : wl) {
/////////////////////////////////////////////////////////////////////////
1:     OrderByList getOrderByList() {
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
/////////////////////////////////////////////////////////////////////////
1:      * Constructor.
1:      * @param windowName  The window name, null if in-lined definition
1:      * @param orderByList ORDER BY list
1:      * @param cm          The context manager
1:     WindowDefinitionNode(String         windowName,
1:                          OrderByList    orderByList,
1:                          ContextManager cm) throws StandardException {
1:         super(windowName != null ? windowName : "IN-LINE", cm);
0:         setNodeType(C_NodeTypes.WINDOW_DEFINITION_NODE);
1:         this.orderByList = orderByList;
1:         if (windowName != null) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.impl.sql.compile.WindowDefinitionNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import java.sql.Types;
1: 
1: /**
1:  * This class represents an OLAP window definition.
1:  */
1: public final class WindowDefinitionNode extends WindowNode
1: {
1:     /**
1:      * True of the window definition was inlined.
1:      */
1:     private boolean inlined;
1: 
1:     /**
1:      * The order by list if the window definition contains a <window order
1:      * clause>, else null.
1:      */
1:     private OrderByList orderByList;
1: 
1:     /**
0:      * Initializer.
1:      *
0:      * @param arg1 The window name, null if in-lined definition
0:      * @param arg2 ORDER BY list
1:      * @exception StandardException
1:      */
0:     public void init(Object arg1,
0:                      Object arg2)
0:         throws StandardException
1:     {
0:         String name = (String)arg1;
1: 
0:         orderByList = (OrderByList)arg2;
1: 
0:         if (name != null) {
0:             super.init(arg1);
1:             inlined = false;
1:         } else {
0:             super.init("IN-LINE");
1:             inlined = true;
1:         }
1: 
1:         if (orderByList != null) {
1:             throw StandardException.newException(SQLState.NOT_IMPLEMENTED,
1:                                                  "WINDOW/ORDER BY");
1:         }
1:     }
1: 
1: 
1:     /**
1:      * java.lang.Object override.
1:      * @see QueryTreeNode#toString
1:      */
1:     public String toString() {
1:         return ("name: " + getName() + "\n" +
1:                 "inlined: " + inlined + "\n" +
1:                 "()\n");
1:     }
1: 
1: 
1: 
1:     /**
1:      * QueryTreeNode override. Prints the sub-nodes of this object.
1:      * @see QueryTreeNode#printSubNodes
1:      *
1:      * @param depth     The depth of this node in the tree
1:      */
1: 
1:     public void printSubNodes(int depth)
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             super.printSubNodes(depth);
1: 
1:             if (orderByList != null) {
1:                 printLabel(depth, "orderByList: "  + depth);
1:                 orderByList.treePrint(depth + 1);
1:             }
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Used to merge equivalent window definitions.
1:      *
1:      * @param wl list of window definitions
1:      * @return an existing window definition from wl, if 'this' is equivalent
1:      * to a window in wl.
1:      */
0:     public WindowDefinitionNode findEquivalentWindow(WindowList wl) {
0:         for (int i = 0; i < wl.size(); i++) {
0:             WindowDefinitionNode old = (WindowDefinitionNode)wl.elementAt(i);
1: 
1:             if (isEquivalent(old)) {
1:                 return old;
1:             }
1:         }
1:         return null;
1:     }
1: 
1: 
1: 
1:     /**
1:      * @return true if the window specifications are equal; no need to create
1:      * more than one window then.
1:      */
1:     private boolean isEquivalent(WindowDefinitionNode other) {
1:         if (orderByList == null && other.getOrderByList() == null) {
1:             return true;
1:         }
1: 
1:         if (SanityManager.DEBUG) {
1:             SanityManager.ASSERT(
1:                 false,
1:                 "FIXME: ordering in windows not implemented yet");
1:         }
1:         return false;
1:     }
1: 
1: 
1: 
1:     /**
1:      * @return the order by list of this window definition if any, else null.
1:      */
0:     public OrderByList getOrderByList() {
1:         return orderByList;
1:     }
1: }
============================================================================