1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.OrderedColumnList
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
5:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:234a2b6: import java.util.HashSet;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: import org.apache.derby.impl.sql.execute.IndexColumnOrder;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * List of OrderedColumns
1:eac0369:  *
1:eac0369:  */
1:e1f49ca: public abstract class OrderedColumnList<E extends OrderedColumn>
1:e1f49ca:     extends QueryTreeNodeVector<E>
1:eac0369: {
1:e1f49ca:     public OrderedColumnList(Class<E> eltClass,
1:e1f49ca:             ContextManager cm) {
1:e1f49ca:         super(eltClass, cm);
1:3bb140c:     }
1:3bb140c: 
1:eac0369: 	/**
1:eac0369: 	 * Get an array of ColumnOrderings to pass to the store
1:eac0369: 	 */
1:3bb140c:     IndexColumnOrder[] getColumnOrdering()
1:eac0369: 	{
1:eac0369: 		IndexColumnOrder[] ordering;
1:eac0369: 		int numCols = size();
1:eac0369: 		int actualCols;
1:eac0369: 
1:eac0369: 		ordering = new IndexColumnOrder[numCols];
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			order by is fun, in that we need to ensure
1:eac0369: 			there are no duplicates in the list.  later copies
1:eac0369: 			of an earlier entry are considered purely redundant,
1:eac0369: 			they won't affect the result, so we can drop them.
1:eac0369: 			We don't know how many columns are in the source,
1:eac0369: 			so we use a hashtable for lookup of the positions
1:eac0369: 		*/
1:71c8e86:         HashSet<Integer> hashColumns = new HashSet<Integer>();
1:eac0369: 
1:eac0369: 		actualCols = 0;
1:eac0369: 
1:eac0369: 		for (int i = 0; i < numCols; i++)
1:eac0369: 		{
1:e1f49ca:             OrderedColumn oc = elementAt(i);
1:eac0369: 
1:eac0369: 			// order by (lang) positions are 1-based,
1:eac0369: 			// order items (store) are 0-based.
1:eac0369: 			int position = oc.getColumnPosition() - 1;
1:eac0369: 
1:bb5be6f: 			if (hashColumns.add(position))
1:eac0369: 			{
1:eac0369: 				ordering[i] = new IndexColumnOrder(position,
1:cc30c0c: 												oc.isAscending(),
1:cc30c0c: 												oc.isNullsOrderedLow());
1:eac0369: 				actualCols++;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 			If there were duplicates removed, we need
1:eac0369: 			to shrink the array down to what we used.
1:eac0369: 		*/
1:eac0369: 		if (actualCols < numCols)
1:eac0369: 		{
1:eac0369: 			IndexColumnOrder[] newOrdering = new IndexColumnOrder[actualCols];
1:eac0369: 			System.arraycopy(ordering, 0, newOrdering, 0, actualCols);
1:eac0369: 			ordering = newOrdering;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return ordering;
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:bb5be6f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			if (hashColumns.add(position))
commit:234a2b6
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
0: import org.apache.derby.iapi.util.ReuseFactory;
/////////////////////////////////////////////////////////////////////////
0:         HashSet hashColumns = new HashSet();
/////////////////////////////////////////////////////////////////////////
0: 			if (hashColumns.add(ReuseFactory.getInteger(position)))
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1: public abstract class OrderedColumnList<E extends OrderedColumn>
1:     extends QueryTreeNodeVector<E>
1:     public OrderedColumnList(Class<E> eltClass,
1:             ContextManager cm) {
1:         super(eltClass, cm);
/////////////////////////////////////////////////////////////////////////
1:             OrderedColumn oc = elementAt(i);
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextManager;
0:     public OrderedColumnList(ContextManager cm) {
0:         super(cm);
1:     }
1: 
1:     IndexColumnOrder[] getColumnOrdering()
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         HashSet<Integer> hashColumns = new HashSet<Integer>();
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:cc30c0c
/////////////////////////////////////////////////////////////////////////
1: 												oc.isAscending(),
1: 												oc.isNullsOrderedLow());
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.OrderedColumnList
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
1: 
1: import org.apache.derby.impl.sql.execute.IndexColumnOrder;
1: 
0: import java.util.Hashtable;
1: 
1: /**
1:  * List of OrderedColumns
1:  *
0:  * @author Jamie
1:  */
0: public abstract class OrderedColumnList extends QueryTreeNodeVector
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 	/**
1: 	 * Get an array of ColumnOrderings to pass to the store
1: 	 */
0: 	public IndexColumnOrder[] getColumnOrdering()
1: 	{
1: 		IndexColumnOrder[] ordering;
1: 		int numCols = size();
1: 		int actualCols;
1: 
1: 		ordering = new IndexColumnOrder[numCols];
1: 
1: 		/*
1: 			order by is fun, in that we need to ensure
1: 			there are no duplicates in the list.  later copies
1: 			of an earlier entry are considered purely redundant,
1: 			they won't affect the result, so we can drop them.
1: 			We don't know how many columns are in the source,
1: 			so we use a hashtable for lookup of the positions
1: 		*/
0: 		Hashtable hashColumns = new Hashtable();
1: 
1: 		actualCols = 0;
1: 
1: 		for (int i = 0; i < numCols; i++)
1: 		{
0: 			OrderedColumn oc = (OrderedColumn) elementAt(i);
1: 
1: 			// order by (lang) positions are 1-based,
1: 			// order items (store) are 0-based.
1: 			int position = oc.getColumnPosition() - 1;
1: 
0: 			Integer posInt = new Integer(position);
1: 
0: 			if (! hashColumns.containsKey(posInt))
1: 			{
1: 				ordering[i] = new IndexColumnOrder(position,
0: 												oc.isAscending());
1: 				actualCols++;
0: 				hashColumns.put(posInt, posInt);
1: 			}
1: 		}
1: 
1: 		/*
1: 			If there were duplicates removed, we need
1: 			to shrink the array down to what we used.
1: 		*/
1: 		if (actualCols < numCols)
1: 		{
1: 			IndexColumnOrder[] newOrdering = new IndexColumnOrder[actualCols];
1: 			System.arraycopy(ordering, 0, newOrdering, 0, actualCols);
1: 			ordering = newOrdering;
1: 		}
1: 
1: 		return ordering;
1: 	}
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.store.access.ColumnOrdering;
0: 
0: import org.apache.derby.impl.sql.execute.IndexColumnOrder;
0: 
0: import java.util.Hashtable;
0: 
0: /**
0:  * List of OrderedColumns
0:  *
0:  * @author Jamie
0:  */
0: public abstract class OrderedColumnList extends QueryTreeNodeVector
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 	/**
0: 	 * Get an array of ColumnOrderings to pass to the store
0: 	 */
0: 	public IndexColumnOrder[] getColumnOrdering()
0: 	{
0: 		IndexColumnOrder[] ordering;
0: 		int numCols = size();
0: 		int actualCols;
0: 
0: 		ordering = new IndexColumnOrder[numCols];
0: 
0: 		/*
0: 			order by is fun, in that we need to ensure
0: 			there are no duplicates in the list.  later copies
0: 			of an earlier entry are considered purely redundant,
0: 			they won't affect the result, so we can drop them.
0: 			We don't know how many columns are in the source,
0: 			so we use a hashtable for lookup of the positions
0: 		*/
0: 		Hashtable hashColumns = new Hashtable();
0: 
0: 		actualCols = 0;
0: 
0: 		for (int i = 0; i < numCols; i++)
0: 		{
0: 			OrderedColumn oc = (OrderedColumn) elementAt(i);
0: 
0: 			// order by (lang) positions are 1-based,
0: 			// order items (store) are 0-based.
0: 			int position = oc.getColumnPosition() - 1;
0: 
0: 			Integer posInt = new Integer(position);
0: 
0: 			if (! hashColumns.containsKey(posInt))
0: 			{
0: 				ordering[i] = new IndexColumnOrder(position,
0: 												oc.isAscending());
0: 				actualCols++;
0: 				hashColumns.put(posInt, posInt);
0: 			}
0: 		}
0: 
0: 		/*
0: 			If there were duplicates removed, we need
0: 			to shrink the array down to what we used.
0: 		*/
0: 		if (actualCols < numCols)
0: 		{
0: 			IndexColumnOrder[] newOrdering = new IndexColumnOrder[actualCols];
0: 			System.arraycopy(ordering, 0, newOrdering, 0, actualCols);
0: 			ordering = newOrdering;
0: 		}
0: 
0: 		return ordering;
0: 	}
0: }
============================================================================