1:fe77ca5: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.ResultSet
1:7ecc1f2: 
1:4590cd8:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4590cd8:    contributor license agreements.  See the NOTICE file distributed with
1:4590cd8:    this work for additional information regarding copyright ownership.
1:4590cd8:    The ASF licenses this file to you under the Apache License, Version 2.0
1:4590cd8:    (the "License"); you may not use this file except in compliance with
1:4590cd8:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.iapi.sql;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.sql.execute.ExecRow;
1:fe77ca5: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:fe77ca5: import org.apache.derby.iapi.sql.Row;
1:fe77ca5: 
1:fe77ca5: import java.sql.Timestamp;
1:fe77ca5: import java.sql.SQLWarning;
1:b197ffa: import org.w3c.dom.Element;
1:fe77ca5: 
2:fe77ca5: /**
1:fe77ca5:  * The ResultSet interface provides a method to tell whether a statement
1:fe77ca5:  * returns rows, and if so, a method to get the rows. It also provides a
1:fe77ca5:  * method to get metadata about the contents of the rows. It also provide
1:fe77ca5:  * a method to accept rows as input.
1:fe77ca5:  * <p>
1:fe77ca5:  * There is no single implementation of the ResultSet interface. Instead,
1:fe77ca5:  * the various support operations involved in executing statements
1:fe77ca5:  * implement this interface.
1:fe77ca5:  * <p>
1:fe77ca5:  * Although ExecRow is used on the interface, it is not available to
1:fe77ca5:  * users of the API. They should use Row, the exposed super-interface
1:dbed020:  * of ExecRow.  [I couldn't find another way to perform this mapping...]
1:fe77ca5:  * <p>
1:fe77ca5:  * Valid transitions: <ul>
1:dbed020:  * <li> open-&gt;close</li>
1:dbed020:  * <li> close-&gt;open</li>
1:dbed020:  * <li> close-&gt;finished</li>
1:dbed020:  * <li> finished-&gt;open</li>
1:fe77ca5:  * </ul>
5:fe77ca5:  *
1:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: public interface ResultSet
1:fe77ca5: {
1:fe77ca5: 	/* Get time only spent in this ResultSet */
1:fe77ca5: 	public static final int CURRENT_RESULTSET_ONLY = 0;
1:fe77ca5: 	/* Get time spent in this ResultSet and below */
1:fe77ca5: 	public static final int ENTIRE_RESULTSET_TREE = 1;
1:fe77ca5: 
1:fe77ca5: 	// cursor check positioning
1:fe77ca5: 	public static final int ISBEFOREFIRST = 101;
1:fe77ca5: 	public static final int ISFIRST = 102;
1:fe77ca5: 	public static final int ISLAST = 103;
1:fe77ca5: 	public static final int ISAFTERLAST = 104;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns TRUE if the statement returns rows (i.e. is a SELECT
1:fe77ca5: 	 * or FETCH statement), FALSE if it returns no rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	TRUE if the statement returns rows, FALSE if not.
1:fe77ca5: 	 */
1:fe77ca5: 	 boolean	returnsRows();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the number of rows affected by the statement.
1:fe77ca5: 	   Only valid of returnsRows() returns false.
1:fe77ca5: 	 * For other DML statements, it returns the number of rows
1:fe77ca5: 	 * modified by the statement. For statements that do not affect rows
1:fe77ca5: 	 * (like DDL statements), it returns zero.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The number of rows affect by the statement, so far.
1:fe77ca5: 	 */
1:7fb9956: 	long	modifiedRowCount();
1:c69c8b0: 
1:c69c8b0: 	/**
1:c69c8b0: 	 * Returns a ResultDescription object, which describes the results
1:c69c8b0: 	 * of the statement this ResultSet is in. This will *not* be a
1:c69c8b0: 	 * description of this particular ResultSet, if this is not the
1:c69c8b0: 	 * outermost ResultSet.
1:c69c8b0: 	 *
1:c69c8b0: 	 * @return	A ResultDescription describing the results of the
1:c69c8b0: 	 *		statement.
1:c69c8b0: 	 */
1:c69c8b0: 	ResultDescription	getResultDescription();
1:6b26ee1: 	
1:6b26ee1: 	Activation getActivation();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Needs to be called before the result set will do anything.
1:fe77ca5: 	 * Need to call before getNextRow(), or for a result set
1:fe77ca5: 	 * that doesn't return rows, this is the call that will
1:fe77ca5: 	 * cause all the work to be done.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 */
1:fe77ca5: 	void	open() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the row at the absolute position from the query, 
1:fe77ca5: 	 * and returns NULL when there is no such position.
1:fe77ca5: 	 * (Negative position means from the end of the result set.)
1:fe77ca5: 	 * Moving the cursor to an invalid position leaves the cursor
1:fe77ca5: 	 * positioned either before the first row (negative position)
1:fe77ca5: 	 * or after the last row (positive position).
1:fe77ca5: 	 * NOTE: An exception will be thrown on 0.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param row	The position.
1:fe77ca5: 	 * @return	The row at the absolute position, or NULL if no such position.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	getAbsoluteRow(int row) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the row at the relative position from the current
1:fe77ca5: 	 * cursor position, and returns NULL when there is no such position.
1:fe77ca5: 	 * (Negative position means toward the beginning of the result set.)
1:fe77ca5: 	 * Moving the cursor to an invalid position leaves the cursor
1:fe77ca5: 	 * positioned either before the first row (negative position)
1:fe77ca5: 	 * or after the last row (positive position).
1:fe77ca5: 	 * NOTE: 0 is valid.
1:fe77ca5: 	 * NOTE: An exception is thrown if the cursor is not currently
1:fe77ca5: 	 * positioned on a row.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param row	The position.
1:fe77ca5: 	 * @return	The row at the relative position, or NULL if no such position.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	getRelativeRow(int row) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Sets the current position to before the first row and returns NULL
1:fe77ca5: 	 * because there is no current row.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	NULL.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	setBeforeFirstRow() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the first row from the query, and returns NULL when there
1:fe77ca5: 	 * are no rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The first row, or NULL if no rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	getFirstRow() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the next row from the query, and returns NULL when there
1:fe77ca5: 	 * are no more rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The next row, or NULL if no more rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	getNextRow() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the previous row from the query, and returns NULL when there
1:fe77ca5: 	 * are no more previous rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The previous row, or NULL if no more previous rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	getPreviousRow() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the last row from the query, and returns NULL when there
1:fe77ca5: 	 * are no rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	The last row, or NULL if no rows.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	getLastRow() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Sets the current position to after the last row and returns NULL
1:fe77ca5: 	 * because there is no current row.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	NULL.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on failure
1:fe77ca5: 	 * @see Row
1:fe77ca5: 	 */
1:fe77ca5: 	ExecRow	setAfterLastRow() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:9634cd2: 	 * Clear the current row. The cursor keeps it current position,
1:9634cd2: 	 * however it cannot be used for positioned updates or deletes
1:9634cd2: 	 * until a fetch is done.
1:9634cd2: 	 * This is done after a commit on holdable
1:9634cd2: 	 * result sets.
1:9634cd2: 	 * A fetch is achieved by calling one of the positioning 
1:9634cd2: 	 * methods: getLastRow(), getNextRow(), getPreviousRow(), 
1:9634cd2: 	 * getFirstRow(), getRelativeRow(..) or getAbsoluteRow(..).
1:fe77ca5: 	 */
1:9634cd2: 	void clearCurrentRow();
1:fe77ca5: 	 
1:fe77ca5:     /**
1:fe77ca5: 		Determine if the result set is at one of the positions
1:fe77ca5: 		according to the constants above (ISBEFOREFIRST etc).
1:fe77ca5: 		Only valid and called for scrollable cursors.
1:fe77ca5:      * @return true if at the requested position.
1:fe77ca5: 	 * @exception StandardException Thrown on error.
1:fe77ca5:      */
1:fe77ca5:     public boolean checkRowPosition(int isType) throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the row number of the current row.  Row
1:fe77ca5: 	 * numbers start from 1 and go to 'n'.  Corresponds
1:fe77ca5: 	 * to row numbering used to position current row
1:fe77ca5: 	 * in the result set (as per JDBC).
1:fe77ca5: 
1:fe77ca5: 		Only valid and called for scrollable cursors.
1:fe77ca5: 	 * @return	the row number, or 0 if not on a row
1:fe77ca5: 	 *
1:fe77ca5: 	 */
1:fe77ca5: 	int	getRowNumber();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Tells the system that there will be no more calls to getNextRow()
1:fe77ca5: 	 * (until the next open() call), so it can free up the resources
1:fe77ca5: 	 * associated with the ResultSet.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error.
1:fe77ca5: 	 */
1:fe77ca5: 	void	close() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Tells the system to clean up on an error.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException		Thrown on error.
1:fe77ca5: 	 */
1:fe77ca5: 	void	cleanUp() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 		Find out if the ResultSet is closed or not.
1:fe77ca5: 		Will report true for result sets that do not return rows.
1:fe77ca5: 
1:fe77ca5: 		@return true if the ResultSet has been closed.
1:fe77ca5: 	 */
1:fe77ca5: 	boolean isClosed();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Tells the system that there will be no more access
1:fe77ca5: 	 * to any database information via this result set;
1:fe77ca5: 	 * in particular, no more calls to open().
1:fe77ca5: 	 * Will close the result set if it is not already closed.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @exception StandardException	on error
1:fe77ca5: 	 */
1:fe77ca5: 	void	finish() throws StandardException;
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the execution time in milliseconds.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return long		The execution time in milliseconds.
1:fe77ca5: 	 */
1:fe77ca5: 	public long getExecuteTime();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the Timestamp for the beginning of execution.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return Timestamp		The Timestamp for the beginning of execution.
1:fe77ca5: 	 */
1:fe77ca5: 	public Timestamp getBeginExecutionTimestamp();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the Timestamp for the end of execution.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return Timestamp		The Timestamp for the end of execution.
1:fe77ca5: 	 */
1:fe77ca5: 	public Timestamp getEndExecutionTimestamp();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return the total amount of time spent in this ResultSet
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:fe77ca5: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return long		The total amount of time spent (in milliseconds).
1:fe77ca5: 	 */
1:fe77ca5: 	public long getTimeSpent(int type);	
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Get the subquery ResultSet tracking array from the top ResultSet.
1:fe77ca5: 	 * (Used for tracking open subqueries when closing down on an error.)
1:fe77ca5: 	 *
1:fe77ca5: 	 * @param numSubqueries		The size of the array (For allocation on demand.)
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return NoPutResultSet[]	Array of NoPutResultSets for subqueries.
1:fe77ca5: 	 */
1:fe77ca5: 	public NoPutResultSet[] getSubqueryTrackingArray(int numSubqueries);
1:fe77ca5: 
1:fe77ca5: 	/**
1:dfe1451: 	 * ResultSet for rows inserted into the table (contains auto-generated keys columns only)
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return NoPutResultSet	NoPutResultSets for rows inserted into the table.
1:fe77ca5: 	 */
1:fe77ca5: 	public ResultSet getAutoGeneratedKeysResultset();
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Returns the name of the cursor, if this is cursor statement of some
1:fe77ca5: 	 * type (declare, open, fetch, positioned update, positioned delete,
1:fe77ca5: 	 * close).
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return	A String with the name of the cursor, if any. Returns
1:fe77ca5: 	 *		NULL if this is not a cursor statement.
1:fe77ca5: 	 */
1:fe77ca5: 	public String	getCursorName();
1:fe77ca5: 
1:75ec275:     /**
1:75ec275:      * Add a warning to this result set.
1:75ec275:      *
1:75ec275:      * @param w the warning to add
1:75ec275:      */
1:75ec275:     void addWarning(SQLWarning w);
1:75ec275: 
1:fe77ca5: 	/**
1:fe77ca5: 		Return the set of warnings generated during the execution of
1:fe77ca5: 		this result set. The warnings are cleared once this call returns.
1:fe77ca5: 	*/
1:fe77ca5: 	public SQLWarning getWarnings();
1:b197ffa:     
1:b197ffa: 	/**
1:b197ffa: 	 * <p>
1:b197ffa:      * Produce an xml image of this ResultSet and its descendant ResultSets.
1:b197ffa:      * Appends an element to the parentNode and returns the appended element.
1:b197ffa:      * </p>
1:b197ffa:      *
1:b197ffa:      * @param   parentNode  Node to put content into.
1:b197ffa:      * @param   tag             Element tag for content
1:b197ffa:      *
1:b197ffa:      * @return  the content as an element with the given tag name
1:b197ffa: 	 */
1:b197ffa: 	public Element toXML( Element parentNode, String tag ) throws Exception;
1:b197ffa: 
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1:  * of ExecRow.  [I couldn't find another way to perform this mapping...]
1:  * <li> open-&gt;close</li>
1:  * <li> close-&gt;open</li>
1:  * <li> close-&gt;finished</li>
1:  * <li> finished-&gt;open</li>
commit:b197ffa
/////////////////////////////////////////////////////////////////////////
1: import org.w3c.dom.Element;
/////////////////////////////////////////////////////////////////////////
1:     
1: 	/**
1: 	 * <p>
1:      * Produce an xml image of this ResultSet and its descendant ResultSets.
1:      * Appends an element to the parentNode and returns the appended element.
1:      * </p>
1:      *
1:      * @param   parentNode  Node to put content into.
1:      * @param   tag             Element tag for content
1:      *
1:      * @return  the content as an element with the given tag name
1: 	 */
1: 	public Element toXML( Element parentNode, String tag ) throws Exception;
1: 
commit:7fb9956
/////////////////////////////////////////////////////////////////////////
1: 	long	modifiedRowCount();
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:75ec275
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Add a warning to this result set.
1:      *
1:      * @param w the warning to add
1:      */
1:     void addWarning(SQLWarning w);
1: 
commit:c69c8b0
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Returns a ResultDescription object, which describes the results
1: 	 * of the statement this ResultSet is in. This will *not* be a
1: 	 * description of this particular ResultSet, if this is not the
1: 	 * outermost ResultSet.
1: 	 *
1: 	 * @return	A ResultDescription describing the results of the
1: 	 *		statement.
1: 	 */
1: 	ResultDescription	getResultDescription();
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:24e3f7e
/////////////////////////////////////////////////////////////////////////
commit:6b26ee1
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	Activation getActivation();
commit:dfe1451
/////////////////////////////////////////////////////////////////////////
1: 	 * ResultSet for rows inserted into the table (contains auto-generated keys columns only)
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.ResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: import org.apache.derby.iapi.sql.Row;
1: 
1: import java.sql.Timestamp;
1: import java.sql.SQLWarning;
1: 
1: /**
1:  * The ResultSet interface provides a method to tell whether a statement
1:  * returns rows, and if so, a method to get the rows. It also provides a
1:  * method to get metadata about the contents of the rows. It also provide
1:  * a method to accept rows as input.
1:  * <p>
1:  * There is no single implementation of the ResultSet interface. Instead,
1:  * the various support operations involved in executing statements
1:  * implement this interface.
1:  * <p>
1:  * Although ExecRow is used on the interface, it is not available to
1:  * users of the API. They should use Row, the exposed super-interface
0:  * of ExecRow.  <<I couldn't find another way to perform this mapping...>>
1:  * <p>
1:  * Valid transitions: <ul>
0:  * <li> open->close</li>
0:  * <li> close->open</li>
0:  * <li> close->finished</li>
0:  * <li> finished->open</li>
1:  * </ul>
1:  *
0:  * @author Jeff Lichtman
1:  */
1: 
1: public interface ResultSet
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/* Get time only spent in this ResultSet */
1: 	public static final int CURRENT_RESULTSET_ONLY = 0;
1: 	/* Get time spent in this ResultSet and below */
1: 	public static final int ENTIRE_RESULTSET_TREE = 1;
1: 
1: 	// cursor check positioning
1: 	public static final int ISBEFOREFIRST = 101;
1: 	public static final int ISFIRST = 102;
1: 	public static final int ISLAST = 103;
1: 	public static final int ISAFTERLAST = 104;
1: 
1: 	/**
1: 	 * Returns TRUE if the statement returns rows (i.e. is a SELECT
1: 	 * or FETCH statement), FALSE if it returns no rows.
1: 	 *
1: 	 * @return	TRUE if the statement returns rows, FALSE if not.
1: 	 */
1: 	 boolean	returnsRows();
1: 
1: 	/**
1: 	 * Returns the number of rows affected by the statement.
1: 	   Only valid of returnsRows() returns false.
1: 	 * For other DML statements, it returns the number of rows
1: 	 * modified by the statement. For statements that do not affect rows
1: 	 * (like DDL statements), it returns zero.
1: 	 *
1: 	 * @return	The number of rows affect by the statement, so far.
1: 	 */
0: 	int	modifiedRowCount();
1: 
1: 	/**
0: 	 * Returns a ResultDescription object, which describes the results
0: 	 * of the statement this ResultSet is in. This will *not* be a
0: 	 * description of this particular ResultSet, if this is not the
0: 	 * outermost ResultSet.
1: 	 *
0: 	 * @return	A ResultDescription describing the results of the
0: 	 *		statement.
1: 	 */
0: 	ResultDescription	getResultDescription();
1: 
1: 	/**
1: 	 * Needs to be called before the result set will do anything.
1: 	 * Need to call before getNextRow(), or for a result set
1: 	 * that doesn't return rows, this is the call that will
1: 	 * cause all the work to be done.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	void	open() throws StandardException;
1: 
1: 	/**
1: 	 * Returns the row at the absolute position from the query, 
1: 	 * and returns NULL when there is no such position.
1: 	 * (Negative position means from the end of the result set.)
1: 	 * Moving the cursor to an invalid position leaves the cursor
1: 	 * positioned either before the first row (negative position)
1: 	 * or after the last row (positive position).
1: 	 * NOTE: An exception will be thrown on 0.
1: 	 *
1: 	 * @param row	The position.
1: 	 * @return	The row at the absolute position, or NULL if no such position.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	getAbsoluteRow(int row) throws StandardException;
1: 
1: 	/**
1: 	 * Returns the row at the relative position from the current
1: 	 * cursor position, and returns NULL when there is no such position.
1: 	 * (Negative position means toward the beginning of the result set.)
1: 	 * Moving the cursor to an invalid position leaves the cursor
1: 	 * positioned either before the first row (negative position)
1: 	 * or after the last row (positive position).
1: 	 * NOTE: 0 is valid.
1: 	 * NOTE: An exception is thrown if the cursor is not currently
1: 	 * positioned on a row.
1: 	 *
1: 	 * @param row	The position.
1: 	 * @return	The row at the relative position, or NULL if no such position.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	getRelativeRow(int row) throws StandardException;
1: 
1: 	/**
1: 	 * Sets the current position to before the first row and returns NULL
1: 	 * because there is no current row.
1: 	 *
1: 	 * @return	NULL.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	setBeforeFirstRow() throws StandardException;
1: 
1: 	/**
1: 	 * Returns the first row from the query, and returns NULL when there
1: 	 * are no rows.
1: 	 *
1: 	 * @return	The first row, or NULL if no rows.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	getFirstRow() throws StandardException;
1: 
1: 	/**
1: 	 * Returns the next row from the query, and returns NULL when there
1: 	 * are no more rows.
1: 	 *
1: 	 * @return	The next row, or NULL if no more rows.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	getNextRow() throws StandardException;
1: 
1: 	/**
1: 	 * Returns the previous row from the query, and returns NULL when there
1: 	 * are no more previous rows.
1: 	 *
1: 	 * @return	The previous row, or NULL if no more previous rows.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	getPreviousRow() throws StandardException;
1: 
1: 	/**
1: 	 * Returns the last row from the query, and returns NULL when there
1: 	 * are no rows.
1: 	 *
1: 	 * @return	The last row, or NULL if no rows.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	getLastRow() throws StandardException;
1: 
1: 	/**
1: 	 * Sets the current position to after the last row and returns NULL
1: 	 * because there is no current row.
1: 	 *
1: 	 * @return	NULL.
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 * @see Row
1: 	 */
1: 	ExecRow	setAfterLastRow() throws StandardException;
1: 
1:     /**
1: 		Determine if the result set is at one of the positions
1: 		according to the constants above (ISBEFOREFIRST etc).
1: 		Only valid and called for scrollable cursors.
1:      * @return true if at the requested position.
1: 	 * @exception StandardException Thrown on error.
1:      */
1:     public boolean checkRowPosition(int isType) throws StandardException;
1: 
1: 	/**
1: 	 * Returns the row number of the current row.  Row
1: 	 * numbers start from 1 and go to 'n'.  Corresponds
1: 	 * to row numbering used to position current row
1: 	 * in the result set (as per JDBC).
1: 
1: 		Only valid and called for scrollable cursors.
1: 	 * @return	the row number, or 0 if not on a row
1: 	 *
1: 	 */
1: 	int	getRowNumber();
1: 
1: 	/**
1: 	 * Tells the system that there will be no more calls to getNextRow()
1: 	 * (until the next open() call), so it can free up the resources
1: 	 * associated with the ResultSet.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error.
1: 	 */
1: 	void	close() throws StandardException;
1: 
1: 	/**
1: 	 * Tells the system to clean up on an error.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error.
1: 	 */
1: 	void	cleanUp() throws StandardException;
1: 
1: 	/**
1: 		Find out if the ResultSet is closed or not.
1: 		Will report true for result sets that do not return rows.
1: 
1: 		@return true if the ResultSet has been closed.
1: 	 */
1: 	boolean isClosed();
1: 
1: 	/**
1: 	 * Tells the system that there will be no more access
1: 	 * to any database information via this result set;
1: 	 * in particular, no more calls to open().
1: 	 * Will close the result set if it is not already closed.
1: 	 *
0: 	 * @return	Nothing
1: 	 * @exception StandardException	on error
1: 	 */
1: 	void	finish() throws StandardException;
1: 
1: 	/**
1: 	 * Get the execution time in milliseconds.
1: 	 *
1: 	 * @return long		The execution time in milliseconds.
1: 	 */
1: 	public long getExecuteTime();
1: 
1: 	/**
1: 	 * Get the Timestamp for the beginning of execution.
1: 	 *
1: 	 * @return Timestamp		The Timestamp for the beginning of execution.
1: 	 */
1: 	public Timestamp getBeginExecutionTimestamp();
1: 
1: 	/**
1: 	 * Get the Timestamp for the end of execution.
1: 	 *
1: 	 * @return Timestamp		The Timestamp for the end of execution.
1: 	 */
1: 	public Timestamp getEndExecutionTimestamp();
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type);	
1: 
1: 	/**
1: 	 * Get the subquery ResultSet tracking array from the top ResultSet.
1: 	 * (Used for tracking open subqueries when closing down on an error.)
1: 	 *
1: 	 * @param numSubqueries		The size of the array (For allocation on demand.)
1: 	 *
1: 	 * @return NoPutResultSet[]	Array of NoPutResultSets for subqueries.
1: 	 */
1: 	public NoPutResultSet[] getSubqueryTrackingArray(int numSubqueries);
1: 
1: 	/**
0: 	 * ResultSet for rowss inserted into the table (contains auto-generated keys columns only)
1: 	 *
1: 	 * @return NoPutResultSet	NoPutResultSets for rows inserted into the table.
1: 	 */
1: 	public ResultSet getAutoGeneratedKeysResultset();
1: 
1: 	/**
1: 	 * Returns the name of the cursor, if this is cursor statement of some
1: 	 * type (declare, open, fetch, positioned update, positioned delete,
1: 	 * close).
1: 	 *
1: 	 * @return	A String with the name of the cursor, if any. Returns
1: 	 *		NULL if this is not a cursor statement.
1: 	 */
1: 	public String	getCursorName();
1: 
1: 	/**
1: 		Return the set of warnings generated during the execution of
1: 		this result set. The warnings are cleared once this call returns.
1: 	*/
1: 	public SQLWarning getWarnings();
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:4590cd8
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Andreas Korneliussen
-------------------------------------------------------------------------------
commit:9634cd2
/////////////////////////////////////////////////////////////////////////
0: 	/**
1: 	 * Clear the current row. The cursor keeps it current position,
1: 	 * however it cannot be used for positioned updates or deletes
1: 	 * until a fetch is done.
1: 	 * This is done after a commit on holdable
1: 	 * result sets.
1: 	 * A fetch is achieved by calling one of the positioning 
1: 	 * methods: getLastRow(), getNextRow(), getPreviousRow(), 
1: 	 * getFirstRow(), getRelativeRow(..) or getAbsoluteRow(..).
0: 	 */
1: 	void clearCurrentRow();
0: 	 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: import org.apache.derby.iapi.sql.Row;
0: 
0: import java.sql.Timestamp;
0: import java.sql.SQLWarning;
0: 
0: /**
0:  * The ResultSet interface provides a method to tell whether a statement
0:  * returns rows, and if so, a method to get the rows. It also provides a
0:  * method to get metadata about the contents of the rows. It also provide
0:  * a method to accept rows as input.
0:  * <p>
0:  * There is no single implementation of the ResultSet interface. Instead,
0:  * the various support operations involved in executing statements
0:  * implement this interface.
0:  * <p>
0:  * Although ExecRow is used on the interface, it is not available to
0:  * users of the API. They should use Row, the exposed super-interface
0:  * of ExecRow.  <<I couldn't find another way to perform this mapping...>>
0:  * <p>
0:  * Valid transitions: <ul>
0:  * <li> open->close</li>
0:  * <li> close->open</li>
0:  * <li> close->finished</li>
0:  * <li> finished->open</li>
0:  * </ul>
0:  *
0:  * @author Jeff Lichtman
0:  */
0: 
0: public interface ResultSet
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/* Get time only spent in this ResultSet */
0: 	public static final int CURRENT_RESULTSET_ONLY = 0;
0: 	/* Get time spent in this ResultSet and below */
0: 	public static final int ENTIRE_RESULTSET_TREE = 1;
0: 
0: 	// cursor check positioning
0: 	public static final int ISBEFOREFIRST = 101;
0: 	public static final int ISFIRST = 102;
0: 	public static final int ISLAST = 103;
0: 	public static final int ISAFTERLAST = 104;
0: 
0: 	/**
0: 	 * Returns TRUE if the statement returns rows (i.e. is a SELECT
0: 	 * or FETCH statement), FALSE if it returns no rows.
0: 	 *
0: 	 * @return	TRUE if the statement returns rows, FALSE if not.
0: 	 */
0: 	 boolean	returnsRows();
0: 
0: 	/**
0: 	 * Returns the number of rows affected by the statement.
0: 	   Only valid of returnsRows() returns false.
0: 	 * For other DML statements, it returns the number of rows
0: 	 * modified by the statement. For statements that do not affect rows
0: 	 * (like DDL statements), it returns zero.
0: 	 *
0: 	 * @return	The number of rows affect by the statement, so far.
0: 	 */
0: 	int	modifiedRowCount();
0: 
0: 	/**
0: 	 * Returns a ResultDescription object, which describes the results
0: 	 * of the statement this ResultSet is in. This will *not* be a
0: 	 * description of this particular ResultSet, if this is not the
0: 	 * outermost ResultSet.
0: 	 *
0: 	 * @return	A ResultDescription describing the results of the
0: 	 *		statement.
0: 	 */
0: 	ResultDescription	getResultDescription();
0: 
0: 	/**
0: 	 * Needs to be called before the result set will do anything.
0: 	 * Need to call before getNextRow(), or for a result set
0: 	 * that doesn't return rows, this is the call that will
0: 	 * cause all the work to be done.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	void	open() throws StandardException;
0: 
0: 	/**
0: 	 * Returns the row at the absolute position from the query, 
0: 	 * and returns NULL when there is no such position.
0: 	 * (Negative position means from the end of the result set.)
0: 	 * Moving the cursor to an invalid position leaves the cursor
0: 	 * positioned either before the first row (negative position)
0: 	 * or after the last row (positive position).
0: 	 * NOTE: An exception will be thrown on 0.
0: 	 *
0: 	 * @param row	The position.
0: 	 * @return	The row at the absolute position, or NULL if no such position.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	getAbsoluteRow(int row) throws StandardException;
0: 
0: 	/**
0: 	 * Returns the row at the relative position from the current
0: 	 * cursor position, and returns NULL when there is no such position.
0: 	 * (Negative position means toward the beginning of the result set.)
0: 	 * Moving the cursor to an invalid position leaves the cursor
0: 	 * positioned either before the first row (negative position)
0: 	 * or after the last row (positive position).
0: 	 * NOTE: 0 is valid.
0: 	 * NOTE: An exception is thrown if the cursor is not currently
0: 	 * positioned on a row.
0: 	 *
0: 	 * @param row	The position.
0: 	 * @return	The row at the relative position, or NULL if no such position.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	getRelativeRow(int row) throws StandardException;
0: 
0: 	/**
0: 	 * Sets the current position to before the first row and returns NULL
0: 	 * because there is no current row.
0: 	 *
0: 	 * @return	NULL.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	setBeforeFirstRow() throws StandardException;
0: 
0: 	/**
0: 	 * Returns the first row from the query, and returns NULL when there
0: 	 * are no rows.
0: 	 *
0: 	 * @return	The first row, or NULL if no rows.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	getFirstRow() throws StandardException;
0: 
0: 	/**
0: 	 * Returns the next row from the query, and returns NULL when there
0: 	 * are no more rows.
0: 	 *
0: 	 * @return	The next row, or NULL if no more rows.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	getNextRow() throws StandardException;
0: 
0: 	/**
0: 	 * Returns the previous row from the query, and returns NULL when there
0: 	 * are no more previous rows.
0: 	 *
0: 	 * @return	The previous row, or NULL if no more previous rows.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	getPreviousRow() throws StandardException;
0: 
0: 	/**
0: 	 * Returns the last row from the query, and returns NULL when there
0: 	 * are no rows.
0: 	 *
0: 	 * @return	The last row, or NULL if no rows.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	getLastRow() throws StandardException;
0: 
0: 	/**
0: 	 * Sets the current position to after the last row and returns NULL
0: 	 * because there is no current row.
0: 	 *
0: 	 * @return	NULL.
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 * @see Row
0: 	 */
0: 	ExecRow	setAfterLastRow() throws StandardException;
0: 
0:     /**
0: 		Determine if the result set is at one of the positions
0: 		according to the constants above (ISBEFOREFIRST etc).
0: 		Only valid and called for scrollable cursors.
0:      * @return true if at the requested position.
0: 	 * @exception StandardException Thrown on error.
0:      */
0:     public boolean checkRowPosition(int isType) throws StandardException;
0: 
0: 	/**
0: 	 * Returns the row number of the current row.  Row
0: 	 * numbers start from 1 and go to 'n'.  Corresponds
0: 	 * to row numbering used to position current row
0: 	 * in the result set (as per JDBC).
0: 
0: 		Only valid and called for scrollable cursors.
0: 	 * @return	the row number, or 0 if not on a row
0: 	 *
0: 	 */
0: 	int	getRowNumber();
0: 
0: 	/**
0: 	 * Tells the system that there will be no more calls to getNextRow()
0: 	 * (until the next open() call), so it can free up the resources
0: 	 * associated with the ResultSet.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error.
0: 	 */
0: 	void	close() throws StandardException;
0: 
0: 	/**
0: 	 * Tells the system to clean up on an error.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error.
0: 	 */
0: 	void	cleanUp() throws StandardException;
0: 
0: 	/**
0: 		Find out if the ResultSet is closed or not.
0: 		Will report true for result sets that do not return rows.
0: 
0: 		@return true if the ResultSet has been closed.
0: 	 */
0: 	boolean isClosed();
0: 
0: 	/**
0: 	 * Tells the system that there will be no more access
0: 	 * to any database information via this result set;
0: 	 * in particular, no more calls to open().
0: 	 * Will close the result set if it is not already closed.
0: 	 *
0: 	 * @return	Nothing
0: 	 * @exception StandardException	on error
0: 	 */
0: 	void	finish() throws StandardException;
0: 
0: 	/**
0: 	 * Get the execution time in milliseconds.
0: 	 *
0: 	 * @return long		The execution time in milliseconds.
0: 	 */
0: 	public long getExecuteTime();
0: 
0: 	/**
0: 	 * Get the Timestamp for the beginning of execution.
0: 	 *
0: 	 * @return Timestamp		The Timestamp for the beginning of execution.
0: 	 */
0: 	public Timestamp getBeginExecutionTimestamp();
0: 
0: 	/**
0: 	 * Get the Timestamp for the end of execution.
0: 	 *
0: 	 * @return Timestamp		The Timestamp for the end of execution.
0: 	 */
0: 	public Timestamp getEndExecutionTimestamp();
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type);	
0: 
0: 	/**
0: 	 * Get the subquery ResultSet tracking array from the top ResultSet.
0: 	 * (Used for tracking open subqueries when closing down on an error.)
0: 	 *
0: 	 * @param numSubqueries		The size of the array (For allocation on demand.)
0: 	 *
0: 	 * @return NoPutResultSet[]	Array of NoPutResultSets for subqueries.
0: 	 */
0: 	public NoPutResultSet[] getSubqueryTrackingArray(int numSubqueries);
0: 
0: 	/**
0: 	 * ResultSet for rowss inserted into the table (contains auto-generated keys columns only)
0: 	 *
0: 	 * @return NoPutResultSet	NoPutResultSets for rows inserted into the table.
0: 	 */
0: 	public ResultSet getAutoGeneratedKeysResultset();
0: 
0: 	/**
0: 	 * Returns the name of the cursor, if this is cursor statement of some
0: 	 * type (declare, open, fetch, positioned update, positioned delete,
0: 	 * close).
0: 	 *
0: 	 * @return	A String with the name of the cursor, if any. Returns
0: 	 *		NULL if this is not a cursor statement.
0: 	 */
0: 	public String	getCursorName();
0: 
0: 	/**
0: 		Return the set of warnings generated during the execution of
0: 		this result set. The warnings are cleared once this call returns.
0: 	*/
0: 	public SQLWarning getWarnings();
0: }
============================================================================