1:ad94e28: /*
11:ad94e28:  
1:ad94e28:    Derby - Class ResultSetCloseTest
1:ad94e28:  
1:4ecc65a:    Licensed to the Apache Software Foundation (ASF) under one or more
1:4ecc65a:    contributor license agreements.  See the NOTICE file distributed with
1:4ecc65a:    this work for additional information regarding copyright ownership.
1:4ecc65a:    The ASF licenses this file to You under the Apache License, Version 2.0
1:4ecc65a:    (the "License"); you may not use this file except in compliance with
1:4ecc65a:    the License.  You may obtain a copy of the License at 
1:4ecc65a: 
1:ad94e28:       http://www.apache.org/licenses/LICENSE-2.0
1:ad94e28:  
1:ad94e28:    Unless required by applicable law or agreed to in writing, software
1:ad94e28:    distributed under the License is distributed on an "AS IS" BASIS,
1:ad94e28:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad94e28:    See the License for the specific language governing permissions and
1:ad94e28:    limitations under the License.
1:ad94e28:  
2:ad94e28:  */
1:ad31854: 
1:ad94e28: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:ad31854: 
1:ad94e28: import junit.framework.*;
1:ad94e28: 
1:3bd1dd8: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:bbdb3fd: import org.apache.derbyTesting.junit.TestConfiguration;
1:ad94e28: 
1:ad94e28: import java.sql.*;
1:ad94e28: 
2:ad94e28: /**
1:ad94e28:  * This class is used to test the fix for DERBY-694.
1:ad94e28:  *
1:ad94e28:  * A brief description of DERBY-694 (Got from the description in JIRA)
1:ad94e28:  *
1:ad94e28:  * 1) Autocommit off.
1:ad94e28:  * 2) Have two prepared statements, calling executeQuery() on both
1:ad94e28:  * 3) Gives two result sets. Can fetch data from both with next().
1:ad94e28:  * 4) If one statement gets an exception (say, caused by a division by zero)
1:ad94e28:  * 5) not only this statement's result set is closed, but also the other open
1:ad94e28:  *    resultset. This happens with the client driver, whereas in embedded mode,
1:ad94e28:  *    the other result set is unaffected by the exception in the first result set
1:ad94e28:  *    (as it should be).
1:ad94e28:  *
1:ad94e28:  */
1:ad94e28: public class ResultSetCloseTest extends BaseJDBCTestCase {
1:ffe3f66:   
1:ffe3f66:    
1:ad94e28:     /**
1:ad94e28:      * Create the tables and the Connection and PreparedStatements that will
1:ad94e28:      * be used in this test.
1:ad94e28:      */
1:ad94e28:     public void setUp()
2:ad94e28:     throws SQLException {
1:03a99e2:         Connection con = getConnection();
1:ad94e28:         con.setAutoCommit(false);
1:ad94e28:         
1:ffe3f66:         Statement s = con.createStatement();
1:ad94e28:         
1:ad94e28:         s.execute("create table t1 (a int)");
1:ad94e28:         
1:ad94e28:         s.execute("insert into t1 values(1)");
1:ad94e28:         s.execute("insert into t1 values(0)");
1:ad94e28:         s.execute("insert into t1 values(2)");
1:ad94e28:         s.execute("insert into t1 values(3)");
1:ad94e28:         
1:ffe3f66:         s.close();
1:ffe3f66:         
2:ad94e28:         con.commit();
3:ad94e28:     }
1:ad94e28:     
1:ad94e28:     /**
1:ad94e28:      * Test that the occurence of the exception in one of the PreparedStatements
1:ad94e28:      * does not result in the closure of the ResultSet associated with the other
1:ad94e28:      * Prepared Statements.
1:ad94e28:      *
1:ad94e28:      * STEPS :
1:ad94e28:      * 1) Execute the first PreparedStatement. This should not cause any
1:ad94e28:      *    SQLException.
1:ad94e28:      * 2) Now execute the second PreparedStatement. This causes
1:ad94e28:      *    the expected Divide by zero exception.
1:ad94e28:      * 3) Now access the first resultset again to ensure this is still open.
1:ad94e28:      *
1:ad94e28:      */
1:ad94e28:     public void testResultSetDoesNotClose() throws SQLException {
1:ffe3f66:         
1:07fb05a:         PreparedStatement ps1 = prepareStatement("select * from t1");
1:07fb05a:         PreparedStatement ps2 = prepareStatement("select 10/a from t1");
1:ffe3f66:         
1:ffe3f66:         ResultSet rs1 = ps1.executeQuery();
1:ad94e28:         
1:ad94e28:         try {
1:ffe3f66:             ResultSet rs2 = ps2.executeQuery();
1:ad94e28:             while(rs2.next());
1:ad94e28:         } catch(SQLException sqle) {
1:ad94e28:             //Do Nothing expected exception
1:ad94e28:         }
1:ad94e28:         
1:ad94e28:         while(rs1.next());
1:ad94e28:         
1:07fb05a:         commit();
1:ad94e28:         
1:ffe3f66:         rs1.close();
1:ffe3f66:         ps1.close();
1:ffe3f66:         ps2.close();
1:ad94e28:     }
1:ad94e28:     
1:ad94e28:     /**
1:ad94e28:      * Create the test with the given name.
1:ad94e28:      *
1:ad94e28:      * @param name name of the test.
1:ad94e28:      */
1:ad94e28:     public ResultSetCloseTest(String name) {
1:ad94e28:         super(name);
1:ad94e28:     }
1:ad94e28:     
1:ad94e28:     /**
1:ad94e28:      * Create test suite for this test.
1:bbdb3fd:      * Run in both embedded and client.
1:ad94e28:      */
1:ad94e28:     public static Test suite() {
1:bbdb3fd:                 
1:bbdb3fd:         return TestConfiguration.defaultSuite(ResultSetCloseTest.class);
1:ad94e28:     }
1:ad31854:     
1:ad94e28: }
============================================================================
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:7dc89cf
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:cd1bd2a
/////////////////////////////////////////////////////////////////////////
0:         if (usingDB2Client())
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:bbdb3fd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:      * Run in both embedded and client.
1:                 
0:             return new TestSuite("empty");
1:         return TestConfiguration.defaultSuite(ResultSetCloseTest.class);
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
1:         Connection con = getConnection();
commit:ad31854
/////////////////////////////////////////////////////////////////////////
1:         
0:         TestSuite suite = new TestSuite("ResultSetCloseTest");
1:         
0:         // DB2 client doesn't implement result set closing
0:         // correctly wrt ensuring all its methods subsequently
0:         // throw an exception.
0:         if (usingDerbyNet())
0:             return suite;
1:         
0:         suite.addTestSuite(ResultSetCloseTest.class);
0:         return suite;
commit:3bd1dd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
commit:07fb05a
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement ps1 = prepareStatement("select * from t1");
1:         PreparedStatement ps2 = prepareStatement("select 10/a from t1");
/////////////////////////////////////////////////////////////////////////
1:         commit();
commit:ffe3f66
/////////////////////////////////////////////////////////////////////////
1:   
1:    
0:         Connection con = getXConnection();
1:         Statement s = con.createStatement();
/////////////////////////////////////////////////////////////////////////
1:         s.close();
1:         
/////////////////////////////////////////////////////////////////////////
0:         Connection con = getXConnection();
1:         
0:         PreparedStatement ps1 = con.prepareStatement("select * from t1");
0:         PreparedStatement ps2 = con.prepareStatement("select 10/a from t1");
1:         
1:         ResultSet rs1 = ps1.executeQuery();
1:             ResultSet rs2 = ps2.executeQuery();
/////////////////////////////////////////////////////////////////////////
0:         ps1.getConnection().commit();
1:         rs1.close();
1:         ps1.close();
1:         ps2.close();
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:4ecc65a
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at 
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ad94e28
/////////////////////////////////////////////////////////////////////////
1: /*
1:  
1:    Derby - Class ResultSetCloseTest
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
1:       http://www.apache.org/licenses/LICENSE-2.0
1:  
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
1: import junit.framework.*;
1: 
0: import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
1: 
1: import java.sql.*;
1: 
1: /**
1:  * This class is used to test the fix for DERBY-694.
1:  *
1:  * A brief description of DERBY-694 (Got from the description in JIRA)
1:  *
1:  * 1) Autocommit off.
1:  * 2) Have two prepared statements, calling executeQuery() on both
1:  * 3) Gives two result sets. Can fetch data from both with next().
1:  * 4) If one statement gets an exception (say, caused by a division by zero)
1:  * 5) not only this statement's result set is closed, but also the other open
1:  *    resultset. This happens with the client driver, whereas in embedded mode,
1:  *    the other result set is unaffected by the exception in the first result set
1:  *    (as it should be).
1:  *
1:  */
1: public class ResultSetCloseTest extends BaseJDBCTestCase {
1:     
0:     Connection con        = null;
0:     Statement  s          = null;
0:     PreparedStatement ps1 = null;
0:     PreparedStatement ps2 = null;
0:     ResultSet         rs1 = null;
0:     ResultSet         rs2 = null;
1:     
1:     /**
1:      * Create the tables and the Connection and PreparedStatements that will
1:      * be used in this test.
1:      */
1:     public void setUp()
1:     throws SQLException {
0:         con = getConnection();
1:         con.setAutoCommit(false);
1:         
0:         s = con.createStatement();
1:         
1:         s.execute("create table t1 (a int)");
1:         
1:         s.execute("insert into t1 values(1)");
1:         s.execute("insert into t1 values(0)");
1:         s.execute("insert into t1 values(2)");
1:         s.execute("insert into t1 values(3)");
1:         
1:         con.commit();
1:         
0:         ps1 = con.prepareStatement("select * from t1");
1:         
0:         ps2 = con.prepareStatement("select 10/a from t1");
1:     }
1:     
1:     /**
1:      * Test that the occurence of the exception in one of the PreparedStatements
1:      * does not result in the closure of the ResultSet associated with the other
1:      * Prepared Statements.
1:      *
1:      * STEPS :
1:      * 1) Execute the first PreparedStatement. This should not cause any
1:      *    SQLException.
1:      * 2) Now execute the second PreparedStatement. This causes
1:      *    the expected Divide by zero exception.
1:      * 3) Now access the first resultset again to ensure this is still open.
1:      *
1:      */
1:     public void testResultSetDoesNotClose() throws SQLException {
0:         rs1 = ps1.executeQuery();
1:         
1:         try {
0:             rs2 = ps2.executeQuery();
1:             while(rs2.next());
1:         } catch(SQLException sqle) {
1:             //Do Nothing expected exception
1:         }
1:         
1:         while(rs1.next());
1:         
1:         con.commit();
1:     }
1:     
1:     /**
0:      * Destroy the objects used in this test.
1:      */
0:     public void tearDown()
1:     throws SQLException {
0:         if (con != null && !con.isClosed()) {
0:             con.rollback();
0:             con.close();
1:         }
1:         
0:         con = null;
1:     }
1:     
1:     /**
1:      * Create the test with the given name.
1:      *
1:      * @param name name of the test.
1:      */
1:     public ResultSetCloseTest(String name) {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Create test suite for this test.
1:      */
1:     public static Test suite() {
0:         return new TestSuite(ResultSetCloseTest.class,"ResultSetCloseTest suite");
1:     }
1:     
1: }
============================================================================