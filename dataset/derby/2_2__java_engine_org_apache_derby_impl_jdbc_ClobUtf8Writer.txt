1:e1fc783: /* 
6:e1fc783: 
1:bb0c274:    Derby - Class org.apache.derby.impl.jdbc.ClobUtf8Writer
1:bb0c274: 
1:bb0c274:    Licensed to the Apache Software Foundation (ASF) under one
1:bb0c274:    or more contributor license agreements.  See the NOTICE file
1:bb0c274:    distributed with this work for additional information
1:bb0c274:    regarding copyright ownership.  The ASF licenses this file
1:bb0c274:    to you under the Apache License, Version 2.0 (the
1:bb0c274:    "License"); you may not use this file except in compliance
1:bb0c274:    with the License.  You may obtain a copy of the License at
1:bb0c274: 
1:bb0c274:      http://www.apache.org/licenses/LICENSE-2.0
1:bb0c274: 
1:bb0c274:    Unless required by applicable law or agreed to in writing,
1:bb0c274:    software distributed under the License is distributed on an
1:bb0c274:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb0c274:    KIND, either express or implied.  See the License for the
1:bb0c274:    specific language governing permissions and limitations
1:bb0c274:    under the License.
1:bb0c274: 
1:bb0c274:  */
1:e1fc783: package org.apache.derby.impl.jdbc;
1:e1fc783: 
1:e1fc783: import java.io.IOException;
1:e1fc783: import java.io.Writer;
1:e1fc783: import java.sql.SQLException;
1:2d1bc8f: import org.apache.derby.iapi.reference.MessageId;
1:e1fc783: import org.apache.derby.iapi.services.i18n.MessageService;
1:e1fc783: 
1:e1fc783: /**
1:e5b15ce:  * Writer implementation for <code>Clob</code>.
2:e1fc783:  */
1:e1fc783: final class ClobUtf8Writer extends Writer {
1:b0c495f:     private TemporaryClob control;    
1:a78e683:     private long pos; // Position in characters.
1:e1fc783:     private boolean closed;
1:e1fc783:     
1:e1fc783:     /**
1:e1fc783:      * Constructor.
1:e5b15ce:      *
1:e5b15ce:      * @param control worker object for the CLOB value
1:e5b15ce:      * @param pos initial <b>byte</b> position in the CLOB value
1:e1fc783:      */
1:b0c495f:     ClobUtf8Writer(TemporaryClob control, long pos) {
1:e1fc783:         this.control = control;
1:e1fc783:         this.pos = pos;
1:e1fc783:         closed = false;
1:e1fc783:     }    
1:e1fc783: 
1:e1fc783:     /**
1:e5b15ce:      * Flushes the stream.
1:e5b15ce:      * <p>
1:e5b15ce:      * Flushing the stream after {@link #close} has been called will cause an
1:e5b15ce:      * exception to be thrown.
1:e5b15ce:      * <p>
1:e5b15ce:      * <i>Implementation note:</i> In the current implementation, this is a
1:e5b15ce:      * no-op. Flushing is left to the underlying stream(s). Note that when
1:e5b15ce:      * programming against/with this class, always follow good practice and call
1:e5b15ce:      * <code>flush</code>.
1:e5b15ce:      *
1:e5b15ce:      * @throws IOException if the stream has been closed
1:e1fc783:      */
1:e1fc783:     public void flush() throws IOException {
1:e1fc783:         if (closed)
1:e1fc783:             throw new IOException (
1:2d1bc8f:                 MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
1:e5b15ce:         // A no-op.
1:e5b15ce:         // Flushing is currently the responsibility of the underlying stream(s).
1:e1fc783:     }
1:e1fc783: 
1:e1fc783:     /**
1:e5b15ce:      * Closes the stream.
1:e5b15ce:      * <p>
1:e5b15ce:      * Once the stream has been closed, further <code>write</code> or 
1:e5b15ce:      * {@link #flush} invocations will cause an <code>IOException</code> to be
1:e1fc783:      * thrown. Closing a previously closed stream has no effect.
1:e1fc783:      */
1:e1fc783:     public void close() {
1:e1fc783:         closed = true;
1:e1fc783:     }
1:e1fc783: 
1:e1fc783:     /**
1:e5b15ce:      * Writes a portion of an array of characters to the CLOB value.
3:e1fc783:      * 
1:e5b15ce:      * @param cbuf array of characters
1:e5b15ce:      * @param off offset into <code>cbuf</code> from which to start writing
1:e5b15ce:      *      characters
1:e5b15ce:      * @param len number of characters to write
1:e5b15ce:      * @throws IOException if an I/O error occurs
1:e1fc783:      */
1:e1fc783:     public void write(char[] cbuf, int off, int len) throws IOException {
1:e1fc783:         if (closed)
1:e1fc783:             throw new IOException (
1:2d1bc8f:                 MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
1:e1fc783:         try {
1:e1fc783:             long ret = control.insertString (String.copyValueOf (
1:e1fc783:                                                     cbuf, off, len), 
1:e1fc783:                                               pos);
1:e1fc783:             if (ret > 0)
1:e1fc783:                 pos += ret;
1:e1fc783:         }
1:e1fc783:         catch (SQLException e) {
1:ed0be21:             throw Util.newIOException(e);
1:e1fc783:         }
1:e1fc783:     }
1:e1fc783: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:2d1bc8f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.MessageId;
/////////////////////////////////////////////////////////////////////////
1:                 MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
/////////////////////////////////////////////////////////////////////////
1:                 MessageService.getTextMessage(MessageId.OBJECT_CLOSED));
commit:b0c495f
/////////////////////////////////////////////////////////////////////////
1:     private TemporaryClob control;    
/////////////////////////////////////////////////////////////////////////
1:     ClobUtf8Writer(TemporaryClob control, long pos) {
commit:a78e683
/////////////////////////////////////////////////////////////////////////
1:     private long pos; // Position in characters.
/////////////////////////////////////////////////////////////////////////
commit:e5b15ce
/////////////////////////////////////////////////////////////////////////
1:  * Writer implementation for <code>Clob</code>.
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param control worker object for the CLOB value
1:      * @param pos initial <b>byte</b> position in the CLOB value
/////////////////////////////////////////////////////////////////////////
1:      * Flushes the stream.
1:      * <p>
1:      * Flushing the stream after {@link #close} has been called will cause an
1:      * exception to be thrown.
1:      * <p>
1:      * <i>Implementation note:</i> In the current implementation, this is a
1:      * no-op. Flushing is left to the underlying stream(s). Note that when
1:      * programming against/with this class, always follow good practice and call
1:      * <code>flush</code>.
1:      *
1:      * @throws IOException if the stream has been closed
1:         // A no-op.
1:         // Flushing is currently the responsibility of the underlying stream(s).
1:      * Closes the stream.
1:      * <p>
1:      * Once the stream has been closed, further <code>write</code> or 
1:      * {@link #flush} invocations will cause an <code>IOException</code> to be
/////////////////////////////////////////////////////////////////////////
1:      * Writes a portion of an array of characters to the CLOB value.
1:      * @param cbuf array of characters
1:      * @param off offset into <code>cbuf</code> from which to start writing
1:      *      characters
1:      * @param len number of characters to write
1:      * @throws IOException if an I/O error occurs
commit:bb0c274
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.jdbc.ClobUtf8Writer
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1: 
1:  */
commit:ffb9317
/////////////////////////////////////////////////////////////////////////
commit:e4983ff
/////////////////////////////////////////////////////////////////////////
0:     private long pos; // Position in bytes.
commit:e1fc783
/////////////////////////////////////////////////////////////////////////
1: /* 
0:    Derby - Class org.apache.derby.impl.jdbc.ClobUtf8Writer
1:  
0:    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
1:  
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1:  
0:       http://www.apache.org/licenses/LICENSE-2.0
1:  
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
1:  
1:  */
1: 
1: package org.apache.derby.impl.jdbc;
1: 
1: import java.io.IOException;
0: import java.io.InputStreamReader;
0: import java.io.OutputStream;
1: import java.io.Writer;
1: import java.sql.SQLException;
0: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.i18n.MessageService;
1: 
1: /**
0:  * Writer implementation for Clob.
1:  */
1: final class ClobUtf8Writer extends Writer {
0:     private ClobStreamControl control;    
0:     private long pos; //postion in bytes
1:     private boolean closed;
1:     
1:     /**
1:      * Constructor.
0:      * @param control 
0:      * @param pos 
0:      * @return 
1:      */
0:     ClobUtf8Writer(ClobStreamControl control, long pos) {
1:         this.control = control;
1:         this.pos = pos;
1:         closed = false;
1:     }    
1: 
1:     /**
0:      * Flushes the stream.  If the stream has saved any characters from the
0:      * various write() methods in a buffer, write them immediately to their
0:      * intended destination.  Then, if that destination is another character or
0:      * byte stream, flush it.  Thus one flush() invocation will flush all the
0:      * buffers in a chain of Writers and OutputStreams.
1:      * 
0:      * <p> If the intended destination of this stream is an abstraction provided
0:      * by the underlying operating system, for example a file, then flushing the
0:      * stream guarantees only that bytes previously written to the stream are
0:      * passed to the operating system for writing; it does not guarantee that
0:      * they are actually written to a physical device such as a disk drive.
1:      * 
0:      * @throws IOException
0:      *          If an I/O error occurs
1:      */
1:     public void flush() throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                 MessageService.getTextMessage (SQLState.LANG_STREAM_CLOSED));
0:         //no op
1:     }
1: 
1:     /**
0:      * Closes the stream, flushing it first. Once the stream has been closed,
0:      * further write() or flush() invocations will cause an IOException to be
1:      * thrown. Closing a previously closed stream has no effect.
1:      */
1:     public void close() {
1:         closed = true;
1:     }
1: 
1:     /**
0:      * Writes a portion of an array of characters.
1:      * 
0:      * @param cbuf
0:      *         Array of characters
0:      * @param off
0:      *         Offset from which to start writing characters
0:      * @param len
0:      *         Number of characters to write
0:      * @throws IOException
0:      *          If an I/O error occurs
1:      */
1:     public void write(char[] cbuf, int off, int len) throws IOException {
1:         if (closed)
1:             throw new IOException (
0:                 MessageService.getTextMessage (SQLState.LANG_STREAM_CLOSED));
1:         try {
1:             long ret = control.insertString (String.copyValueOf (
1:                                                     cbuf, off, len), 
1:                                               pos);
1:             if (ret > 0)
1:                 pos += ret;
1:         }
1:         catch (SQLException e) {
0:             IOException ioe = new IOException (e.getMessage());
0:             ioe.initCause (e);
0:             throw ioe;
1:         }
1:     }
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ed0be21
/////////////////////////////////////////////////////////////////////////
1:             throw Util.newIOException(e);
commit:2333262
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.error.StandardException;
/////////////////////////////////////////////////////////////////////////
0:         catch (StandardException se) {
0:             throw new IOException (se.getMessage());
0:         }
============================================================================