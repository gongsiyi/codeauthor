2:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.dictionary.TupleDescriptor
1:7ecc1f2: 
1:2e658c2:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2e658c2:    contributor license agreements.  See the NOTICE file distributed with
1:2e658c2:    this work for additional information regarding copyright ownership.
1:2e658c2:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2e658c2:    (the "License"); you may not use this file except in compliance with
1:2e658c2:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
11:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.dictionary;
1:eac0369: 
1:eac0369: import	org.apache.derby.catalog.DependableFinder;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
3:eac0369: /**
1:eac0369:  * This is the superclass of all Descriptors. Users of DataDictionary should use
1:eac0369:  * the specific descriptor.
2:2209325:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class TupleDescriptor
2:eac0369: {
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTANTS
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	STATE
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	private     DataDictionary      dataDictionary;
1:eac0369: 
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTOR
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	public	TupleDescriptor() {}
1:eac0369: 
1:eac0369: 	public TupleDescriptor(DataDictionary dataDictionary) 
1:eac0369: 	{
1:eac0369: 		this.dataDictionary = dataDictionary;
3:eac0369: 	}
1:2209325: 
1:e645861: 	protected DataDictionary getDataDictionary()
1:2209325: 	{
1:eac0369: 		return dataDictionary;
1:2209325: 	}
1:2209325: 
1:eac0369: 	protected void setDataDictionary(DataDictionary dd) 
1:eac0369: 	{
1:eac0369: 		dataDictionary = dd;
1:2209325: 	}
1:2209325: 
1:2209325: 	/**
1:eac0369: 	 * Is this provider persistent?  A stored dependency will be required
1:eac0369: 	 * if both the dependent and provider are persistent.
1:2209325: 	 *
1:eac0369: 	 * @return boolean              Whether or not this provider is persistent.
1:2209325: 	 */
1:eac0369: 	public boolean isPersistent()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:2209325: 
1:2209325: 
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	BEHAVIOR. These are only used by Replication!!
1:eac0369: 	//
1:eac0369: 	//////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 
1:999e32a: 	DependableFinder getDependableFinder(int formatId)
1:eac0369: 	{
1:999e32a: 		return dataDictionary.getDependableFinder(formatId);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	DependableFinder getColumnDependableFinder(int formatId, byte[]
1:eac0369: 													  columnBitMap)
1:eac0369: 	{
1:999e32a: 		return dataDictionary.getColumnDependableFinder(formatId, columnBitMap);
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/** Each descriptor must identify itself with its type; i.e index, check
1:eac0369: 	 * constraint whatever.
1:eac0369: 	 */
1:eac0369: 	public String getDescriptorType()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {SanityManager.NOTREACHED(); }
1:eac0369: 		return null; 
1:eac0369: 	}
1:eac0369: 	/* each descriptor has a name
1:eac0369: 	 */
1:eac0369: 	public String getDescriptorName()
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG) {SanityManager.NOTREACHED(); }
1:eac0369: 		return null; 
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:999e32a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	DependableFinder getDependableFinder(int formatId)
1: 		return dataDictionary.getDependableFinder(formatId);
1: 		return dataDictionary.getColumnDependableFinder(formatId, columnBitMap);
commit:e96b5a2
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:2209325
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * If the name has double quotes in it, put two double quotes for every single
0: 	 * double quote.
0: 	 * Finally put double quotes around string to protect against
0: 	 * names with blanks, reserved words being used as identifiers etc.
0: 	 * For eg, if table name is m"n, return it as "m""n". For now, this is used
0: 	 * by DMLModStatementNode.parseCheckConstraint().
1: 	 *
0: 	 * Possible improvement: We could possibly analyze string to
0: 	 * avoid double quotes in normal cases.
1: 	 *
0: 	 * @param name	The String with or without double quotes
1: 	 *
0: 	 * @return	The quoted String
1: 	 */
1: 
0: 	public String quoteProtectName(String name)
1: 	{
0: 		String quotedString = name;
0: 		int quotePos = name.indexOf("\"");
1: 
0: 		if (quotePos == -1)
0: 			return "\"" + name + "\"";
1: 
0: 		//string does have quotes in it.
0: 		while(quotePos != -1) {
0: 			quotedString = quotedString.substring(0,quotePos) + "\"" +
0: 				quotedString.substring(quotePos);
0: 			quotePos = quotedString.indexOf("\"",quotePos+2);
1: 		}
0: 		return "\"" + quotedString + "\"";
1: 
1: 	}
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:10062e2
/////////////////////////////////////////////////////////////////////////
commit:e645861
/////////////////////////////////////////////////////////////////////////
1: 	protected DataDictionary getDataDictionary()
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.dictionary.TupleDescriptor
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.dictionary;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: import	org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: // is it OK to do this?
0: import org.apache.derby.impl.sql.catalog.DDdependableFinder;
0: import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
1: 
1: /**
1:  * This is the superclass of all Descriptors. Users of DataDictionary should use
1:  * the specific descriptor.
0:  *
0:  * @author Rick
0:  * @author Manish
1:  */
1: 
1: public class TupleDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTANTS
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 
0: 	// list types
1: 
0: 	public	static	final	int	COLUMN_LIST				= 1;
0: 	public	static	final	int	CONGLOMERATE_LIST		= 2;
0: 	public	static	final	int	TRIGGER_LIST			= 3;
0: 	public	static	final	int	CONSTRAINT_LIST			= 4;
1: 
0: 	// generic items
1: /*
0: 	public	static	final	int	INDEX_PROPERTIES		= 1;
0: 	public	static	final	int	TRIGGER_WHEN_TEXT		= 2;
0: 	public	static	final	int	TRIGGER_ACTION_TEXT		= 3;
0: 	public	static	final	int	TRIGGER_COMP_SCHEMA_ID	= 4;
0: 	public	static	final	int	VIEW_DEPENDENCIES		= 5;
0: 	public	static	final	int	SOURCE_COLUMN_IDS		= 6;
0: 	public	static	final	int	UUID_ID					= 7;
0: 	public	static	final	int	UUID_FLATNAME			= 8;
0: 	public	static	final	int	UUID_TYPE				= 9;
0: 	public	static	final	int	UUID_OTHER_ID			= 10;
0: 	public	static	final	int	EXTERNAL_TYPE			= 11;
0: 	public	static	final	int	PLUGIN_PRIMARY_KEY		= 12;
0: 	public	static	final	int	SOURCE_JAR_FILE			= 13;
1: */
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	//	STATE
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 
1: 	private     DataDictionary      dataDictionary;
1: 
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTOR
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 
1: 	public	TupleDescriptor() {}
1: 
1: 	public TupleDescriptor(DataDictionary dataDictionary) 
1: 	{
1: 		this.dataDictionary = dataDictionary;
1: 	}
1: 
0: 	protected DataDictionary getDataDictionary() throws StandardException
1: 	{
1: 		return dataDictionary;
1: 	}
1: 
1: 	protected void setDataDictionary(DataDictionary dd) 
1: 	{
1: 		dataDictionary = dd;
1: 	}
1: 
1: 	/**
1: 	 * Is this provider persistent?  A stored dependency will be required
1: 	 * if both the dependent and provider are persistent.
0: 	 *
1: 	 * @return boolean              Whether or not this provider is persistent.
1: 	 */
1: 	public boolean isPersistent()
1: 	{
1: 		return true;
1: 	}
1: 
1: 
1: 	//////////////////////////////////////////////////////////////////
1: 	//
1: 	//	BEHAVIOR. These are only used by Replication!!
1: 	//
1: 	//////////////////////////////////////////////////////////////////
1: 
1: 
0: 	public DependableFinder getDependableFinder(int formatId)
1: 	{
0: 		return	new DDdependableFinder(formatId);
1: 	}
1: 
1: 	DependableFinder getColumnDependableFinder(int formatId, byte[]
1: 													  columnBitMap)
1: 	{
0: 		return new DDColumnDependableFinder(formatId, columnBitMap);
1: 	}
1: 	
1: 	/** Each descriptor must identify itself with its type; i.e index, check
1: 	 * constraint whatever.
1: 	 */
1: 	public String getDescriptorType()
1: 	{
1: 		if (SanityManager.DEBUG) {SanityManager.NOTREACHED(); }
1: 		return null; 
1: 	}
1: 	/* each descriptor has a name
1: 	 */
1: 	public String getDescriptorName()
1: 	{
1: 		if (SanityManager.DEBUG) {SanityManager.NOTREACHED(); }
1: 		return null; 
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2e658c2
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.dictionary
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.dictionary;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import	org.apache.derby.catalog.DependableFinder;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: // is it OK to do this?
0: import org.apache.derby.impl.sql.catalog.DDdependableFinder;
0: import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
0: 
0: /**
0:  * This is the superclass of all Descriptors. Users of DataDictionary should use
0:  * the specific descriptor.
0:  *
0:  * @author Rick
0:  * @author Manish
0:  */
0: 
0: public class TupleDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTANTS
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 
0: 	// list types
0: 
0: 	public	static	final	int	COLUMN_LIST				= 1;
0: 	public	static	final	int	CONGLOMERATE_LIST		= 2;
0: 	public	static	final	int	TRIGGER_LIST			= 3;
0: 	public	static	final	int	CONSTRAINT_LIST			= 4;
0: 
0: 	// generic items
0: /*
0: 	public	static	final	int	INDEX_PROPERTIES		= 1;
0: 	public	static	final	int	TRIGGER_WHEN_TEXT		= 2;
0: 	public	static	final	int	TRIGGER_ACTION_TEXT		= 3;
0: 	public	static	final	int	TRIGGER_COMP_SCHEMA_ID	= 4;
0: 	public	static	final	int	VIEW_DEPENDENCIES		= 5;
0: 	public	static	final	int	SOURCE_COLUMN_IDS		= 6;
0: 	public	static	final	int	UUID_ID					= 7;
0: 	public	static	final	int	UUID_FLATNAME			= 8;
0: 	public	static	final	int	UUID_TYPE				= 9;
0: 	public	static	final	int	UUID_OTHER_ID			= 10;
0: 	public	static	final	int	EXTERNAL_TYPE			= 11;
0: 	public	static	final	int	PLUGIN_PRIMARY_KEY		= 12;
0: 	public	static	final	int	SOURCE_JAR_FILE			= 13;
0: */
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	//	STATE
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 
0: 	private     DataDictionary      dataDictionary;
0: 
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTOR
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 
0: 	public	TupleDescriptor() {}
0: 
0: 	public TupleDescriptor(DataDictionary dataDictionary) 
0: 	{
0: 		this.dataDictionary = dataDictionary;
0: 	}
0: 
0: 	protected DataDictionary getDataDictionary() throws StandardException
0: 	{
0: 		return dataDictionary;
0: 	}
0: 
0: 	protected void setDataDictionary(DataDictionary dd) 
0: 	{
0: 		dataDictionary = dd;
0: 	}
0: 
0: 	/**
0: 	 * Is this provider persistent?  A stored dependency will be required
0: 	 * if both the dependent and provider are persistent.
0: 	 *
0: 	 * @return boolean              Whether or not this provider is persistent.
0: 	 */
0: 	public boolean isPersistent()
0: 	{
0: 		return true;
0: 	}
0: 
0: 
0: 	//////////////////////////////////////////////////////////////////
0: 	//
0: 	//	BEHAVIOR. These are only used by Replication!!
0: 	//
0: 	//////////////////////////////////////////////////////////////////
0: 
0: 
0: 	public DependableFinder getDependableFinder(int formatId)
0: 	{
0: 		return	new DDdependableFinder(formatId);
0: 	}
0: 
0: 	DependableFinder getColumnDependableFinder(int formatId, byte[]
0: 													  columnBitMap)
0: 	{
0: 		return new DDColumnDependableFinder(formatId, columnBitMap);
0: 	}
0: 	
0: 	/** Each descriptor must identify itself with its type; i.e index, check
0: 	 * constraint whatever.
0: 	 */
0: 	public String getDescriptorType()
0: 	{
0: 		if (SanityManager.DEBUG) {SanityManager.NOTREACHED(); }
0: 		return null; 
0: 	}
0: 	/* each descriptor has a name
0: 	 */
0: 	public String getDescriptorName()
0: 	{
0: 		if (SanityManager.DEBUG) {SanityManager.NOTREACHED(); }
0: 		return null; 
0: 	}
0: }
============================================================================