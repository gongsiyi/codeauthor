1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.SavepointConstantAction
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ConstantAction;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.StatementContext;
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: 
2:eac0369: /**
1:eac0369:  *	This class  describes actions that are ALWAYS performed for a
1:eac0369:  *	Savepoint (rollback, release and set savepoint) Statement at Execution time.
1:eac0369:  */
1:eac0369: 
1:eac0369: class SavepointConstantAction extends DDLConstantAction
1:eac0369: {
1:eac0369: 
1:eac0369: 	private final String savepointName; //name of the savepoint
1:eac0369: 	private final int	savepointStatementType; //Type of savepoint statement ie rollback, release or set savepoint
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	Make the ConstantAction for a set savepoint, rollback or release statement.
1:eac0369: 	 *
1:eac0369: 	 *  @param savepointName	Name of the savepoint.
1:6b50965: 	 *  @param savepointStatementType	set savepoint, rollback savepoint or release savepoint
1:eac0369: 	 */
1:eac0369: 	SavepointConstantAction(
1:eac0369: 								String			savepointName,
1:eac0369: 								int				savepointStatementType)
1:eac0369: 	{
1:eac0369: 		this.savepointName = savepointName;
1:eac0369: 		this.savepointStatementType = savepointStatementType;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// OBJECT METHODS
1:eac0369: 	public	String	toString()
1:eac0369: 	{
1:eac0369: 		if (savepointStatementType == 1)
1:eac0369: 			return constructToString("SAVEPOINT ", savepointName + " ON ROLLBACK RETAIN CURSORS ON ROLLBACK RETAIN LOCKS");
1:eac0369: 		else if (savepointStatementType == 2)
1:eac0369: 			return constructToString("ROLLBACK WORK TO SAVEPOINT ", savepointName);
1:eac0369: 		else
1:eac0369: 			return constructToString("RELEASE TO SAVEPOINT ", savepointName);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	// INTERFACE METHODS
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 *	This is the guts of the Execution-time logic for CREATE TABLE.
1:eac0369: 	 *
1:eac0369: 	 *	@see ConstantAction#executeConstantAction
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on failure
1:eac0369: 	 */
1:eac0369: 	public void	executeConstantAction( Activation activation )
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1:eac0369: 
1:eac0369: 			//Bug 4507 - savepoint not allowed inside trigger
1:eac0369: 			StatementContext stmtCtxt = lcc.getStatementContext();
1:eac0369: 			if (stmtCtxt!= null && stmtCtxt.inTrigger())
1:eac0369: 				throw StandardException.newException(SQLState.NO_SAVEPOINT_IN_TRIGGER);
1:eac0369: 
1:eac0369: 		if (savepointStatementType == 1) { //this is set savepoint
1:eac0369: 			if (savepointName.startsWith("SYS")) //to enforce DB2 restriction which is savepoint name can't start with SYS
1:eac0369: 				throw StandardException.newException(SQLState.INVALID_SCHEMA_SYS, "SYS");
1:eac0369: 			lcc.languageSetSavePoint(savepointName, savepointName);
1:eac0369: 		} else if (savepointStatementType == 2) { //this is rollback savepoint
1:eac0369: 			lcc.internalRollbackToSavepoint(savepointName,true, savepointName);
1:eac0369: 		} else { //this is release savepoint
1:eac0369: 			lcc.releaseSavePoint(savepointName, savepointName);
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369: }
============================================================================
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 *  @param savepointStatementType	set savepoint, rollback savepoint or release savepoint
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.SavepointConstantAction
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.execute.ConstantAction;
1: 
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.sql.conn.StatementContext;
1: import org.apache.derby.iapi.reference.SQLState;
1: 
1: /**
1:  *	This class  describes actions that are ALWAYS performed for a
1:  *	Savepoint (rollback, release and set savepoint) Statement at Execution time.
1:  */
1: 
1: class SavepointConstantAction extends DDLConstantAction
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1: 	private final String savepointName; //name of the savepoint
1: 	private final int	savepointStatementType; //Type of savepoint statement ie rollback, release or set savepoint
1: 
1: 	/**
1: 	 *	Make the ConstantAction for a set savepoint, rollback or release statement.
1: 	 *
1: 	 *  @param savepointName	Name of the savepoint.
0: 	 *  @param statementType	set savepoint, rollback savepoint or release savepoint
1: 	 */
1: 	SavepointConstantAction(
1: 								String			savepointName,
1: 								int				savepointStatementType)
1: 	{
1: 		this.savepointName = savepointName;
1: 		this.savepointStatementType = savepointStatementType;
1: 	}
1: 
1: 	// OBJECT METHODS
1: 	public	String	toString()
1: 	{
1: 		if (savepointStatementType == 1)
1: 			return constructToString("SAVEPOINT ", savepointName + " ON ROLLBACK RETAIN CURSORS ON ROLLBACK RETAIN LOCKS");
1: 		else if (savepointStatementType == 2)
1: 			return constructToString("ROLLBACK WORK TO SAVEPOINT ", savepointName);
1: 		else
1: 			return constructToString("RELEASE TO SAVEPOINT ", savepointName);
1: 	}
1: 
1: 	// INTERFACE METHODS
1: 
1: 
1: 	/**
1: 	 *	This is the guts of the Execution-time logic for CREATE TABLE.
1: 	 *
1: 	 *	@see ConstantAction#executeConstantAction
1: 	 *
1: 	 * @exception StandardException		Thrown on failure
1: 	 */
1: 	public void	executeConstantAction( Activation activation )
1: 		throws StandardException
1: 	{
1: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
1: 
1: 			//Bug 4507 - savepoint not allowed inside trigger
1: 			StatementContext stmtCtxt = lcc.getStatementContext();
1: 			if (stmtCtxt!= null && stmtCtxt.inTrigger())
1: 				throw StandardException.newException(SQLState.NO_SAVEPOINT_IN_TRIGGER);
1: 
1: 		if (savepointStatementType == 1) { //this is set savepoint
1: 			if (savepointName.startsWith("SYS")) //to enforce DB2 restriction which is savepoint name can't start with SYS
1: 				throw StandardException.newException(SQLState.INVALID_SCHEMA_SYS, "SYS");
1: 			lcc.languageSetSavePoint(savepointName, savepointName);
1: 		} else if (savepointStatementType == 2) { //this is rollback savepoint
1: 			lcc.internalRollbackToSavepoint(savepointName,true, savepointName);
1: 		} else { //this is release savepoint
1: 			lcc.releaseSavePoint(savepointName, savepointName);
1: 		}
1: 	}
1: 
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.execute.ConstantAction;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.sql.conn.StatementContext;
0: import org.apache.derby.iapi.reference.SQLState;
0: 
0: /**
0:  *	This class  describes actions that are ALWAYS performed for a
0:  *	Savepoint (rollback, release and set savepoint) Statement at Execution time.
0:  */
0: 
0: class SavepointConstantAction extends DDLConstantAction
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	private final String savepointName; //name of the savepoint
0: 	private final int	savepointStatementType; //Type of savepoint statement ie rollback, release or set savepoint
0: 
0: 	/**
0: 	 *	Make the ConstantAction for a set savepoint, rollback or release statement.
0: 	 *
0: 	 *  @param savepointName	Name of the savepoint.
0: 	 *  @param statementType	set savepoint, rollback savepoint or release savepoint
0: 	 */
0: 	SavepointConstantAction(
0: 								String			savepointName,
0: 								int				savepointStatementType)
0: 	{
0: 		this.savepointName = savepointName;
0: 		this.savepointStatementType = savepointStatementType;
0: 	}
0: 
0: 	// OBJECT METHODS
0: 	public	String	toString()
0: 	{
0: 		if (savepointStatementType == 1)
0: 			return constructToString("SAVEPOINT ", savepointName + " ON ROLLBACK RETAIN CURSORS ON ROLLBACK RETAIN LOCKS");
0: 		else if (savepointStatementType == 2)
0: 			return constructToString("ROLLBACK WORK TO SAVEPOINT ", savepointName);
0: 		else
0: 			return constructToString("RELEASE TO SAVEPOINT ", savepointName);
0: 	}
0: 
0: 	// INTERFACE METHODS
0: 
0: 
0: 	/**
0: 	 *	This is the guts of the Execution-time logic for CREATE TABLE.
0: 	 *
0: 	 *	@see ConstantAction#executeConstantAction
0: 	 *
0: 	 * @exception StandardException		Thrown on failure
0: 	 */
0: 	public void	executeConstantAction( Activation activation )
0: 		throws StandardException
0: 	{
0: 		LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
0: 
0: 			//Bug 4507 - savepoint not allowed inside trigger
0: 			StatementContext stmtCtxt = lcc.getStatementContext();
0: 			if (stmtCtxt!= null && stmtCtxt.inTrigger())
0: 				throw StandardException.newException(SQLState.NO_SAVEPOINT_IN_TRIGGER);
0: 
0: 		if (savepointStatementType == 1) { //this is set savepoint
0: 			if (savepointName.startsWith("SYS")) //to enforce DB2 restriction which is savepoint name can't start with SYS
0: 				throw StandardException.newException(SQLState.INVALID_SCHEMA_SYS, "SYS");
0: 			lcc.languageSetSavePoint(savepointName, savepointName);
0: 		} else if (savepointStatementType == 2) { //this is rollback savepoint
0: 			lcc.internalRollbackToSavepoint(savepointName,true, savepointName);
0: 		} else { //this is release savepoint
0: 			lcc.releaseSavePoint(savepointName, savepointName);
0: 		}
0: 	}
0: 
0: }
============================================================================