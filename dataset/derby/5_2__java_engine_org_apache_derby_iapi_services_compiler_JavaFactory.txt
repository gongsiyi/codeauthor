1:eac0369: /*
3:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.compiler.JavaFactory
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.compiler;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.ClassFactory;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * JavaFactory provides generators for Java constructs.
1:eac0369:  * Once Java constructs have been connected into
1:eac0369:  * a complete class definition, the class can be generated
1:eac0369:  * from them.
1:eac0369:  * The generated class is created as a byte-code array that
1:eac0369:  * can then be loaded by a class loader or, in our case,
1:eac0369:  * the class utilities wrapper around our special class loader.
1:eac0369:  * <p>
1:eac0369:  * Each method shows the equivalent Java in the line starting
1:eac0369:  * "Java:" in the header comment.  Items in the java code that
1:eac0369:  * begin with # refer to parameters used in constructing the
1:eac0369:  * object.  So, for example, newReturnStatement takes a parameter
1:eac0369:  * named value; its Java code is:
1:eac0369:  * <verbatim>
1:eac0369:    Java: return #value;
1:eac0369:    </verbatim>
1:eac0369:  * <p>
1:eac0369:  * This represents the fact that newReturnStatement returns a
1:eac0369:  * object that represents a return statement that returns the
1:eac0369:  * value represented by the parameter named value.
1:eac0369:  * <p>
1:eac0369:  * REVISIT: when StandardException is moved to BasicServices,
1:eac0369:  * all of these want to support it so they can throw
1:eac0369:  * real NotImplementedYet exceptions. It is expected that alot
1:eac0369:  * of this interface can be not-implemented for engines that
1:eac0369:  * do not need this complete treatment of the language.
1:eac0369:  * <p>
1:eac0369:  * Known Java constructs missing from this interface include:
1:eac0369:  * <ul>
1:eac0369:  * <li> array initializers
1:eac0369:  * <li> ,-lists of statements in for segments
1:eac0369:  * <li> accessing a field of the current object or class without
1:eac0369:  *	including this or the class name
1:eac0369:  * <li> declaring a list of variables against one type
1:eac0369:  * <li> conversions/coercions/promotions of types
1:eac0369:  * <li> empty statement
1:eac0369:  * <li> labeled statement
1:eac0369:  * <li> switch statement
1:eac0369:  * <li> break, continue statements
1:eac0369:  * <li> "super" expression (akin to the "this" expression).
1:eac0369:  * <li> operations on multi-dimensional arrays
1:eac0369:  * </ul>
1:eac0369:  * <p>
1:eac0369:  * This interface also does not do real compilation -- there are no
1:eac0369:  * checks for things like initialization before use of variables,
1:eac0369:  * inclusion of catchs on throws, dead code, etc. Its purpose is to
1:eac0369:  * let other parts of the system piece together what they know is valid
1:eac0369:  * code and get bytecode out of doing that.
1:eac0369:  * <p>
1:eac0369:  * Also, implementations will require that the constructs be built
1:eac0369:  * appropriately or they may fail to produce a valid class.  For example,
1:eac0369:  * newStaticMethodCall must be used to call static methods only,
1:eac0369:  * not non-static local instance methods.
1:eac0369:  * <p>
1:eac0369:  * Implementations may be more, or less strict.  You are best off assuming
1:eac0369:  * you have to piece together each java construct and be as explicit as
1:eac0369:  * possible.  So, constructors must be created with newConstructor, not
1:eac0369:  * newMethodBuilder; constructors must include the explicit call to
1:eac0369:  * super(...) or this(...), as their first statement; all methods and
1:eac0369:  * constructors must contain a final return statement at the end of
1:eac0369:  * their code path(s). Method calls will derive the method to call
1:eac0369:  * based on the type of the argument, so you must cast arguments as
1:eac0369:  * the system will not search for a close method and coerce arguments
1:eac0369:  * appropriately.  This includes coercing them to be some superclass or
1:eac0369:  * interface that they already are.
1:eac0369:  *
1:eac0369:  */
1:5d24b1a: public interface JavaFactory {
1:eac0369: 
1:eac0369: 	public	final	static	String	JAVA_FACTORY_PROPERTY = "derby.module.JavaCompiler";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * a class.  Once it is created, fields, methods,
1:eac0369: 	 * interfaces, static initialization code, 
1:eac0369: 	 * and constructors can be added to it.
1:eac0369: 	 * <verbatim>
1:eac0369: 	   Java: package #packageName;
1:eac0369: 	  	 #modifiers #className extends #superClass { }
1:eac0369: 	  		// modifiers is the | of the JVM constants for
1:eac0369: 	  		// the modifiers such as static, public, etc.
1:eac0369:        </verbatim>
1:eac0369: 	 *
1:eac0369: 	   @param cf ClassFactory to be used for class resolution (debug only)
1:eac0369: 	   and loading of the generated class.
1:eac0369: 	 * @param packageName the name of the package the class is in
1:eac0369: 	    including the trailing 'dot' if it is not the empty package.
1:eac0369: 		Pass the empty package as "".
1:eac0369: 	 * @param modifiers the | of the Modifier
1:eac0369: 	 *	constants representing the visibility and control of this
1:eac0369: 	 *	method.
1:eac0369: 	 * @param className the name of the class or interface
1:eac0369: 	 * @param superClass the name of the superclass or superinterface
1:eac0369: 	 *
1:eac0369: 	 * @return the class builder.
1:eac0369: 	 * @see java.lang.reflect.Modifier
1:eac0369: 	 */
1:eac0369: 	ClassBuilder newClassBuilder(ClassFactory cf, String packageName,
1:eac0369: 		int modifiers, String className, String superClass);
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.compiler.JavaFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
1: public interface JavaFactory {
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.compiler
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.compiler;
1: 
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: 
1: /**
1:  * JavaFactory provides generators for Java constructs.
1:  * Once Java constructs have been connected into
1:  * a complete class definition, the class can be generated
1:  * from them.
1:  * The generated class is created as a byte-code array that
1:  * can then be loaded by a class loader or, in our case,
1:  * the class utilities wrapper around our special class loader.
1:  * <p>
1:  * Each method shows the equivalent Java in the line starting
1:  * "Java:" in the header comment.  Items in the java code that
1:  * begin with # refer to parameters used in constructing the
1:  * object.  So, for example, newReturnStatement takes a parameter
1:  * named value; its Java code is:
1:  * <verbatim>
1:    Java: return #value;
1:    </verbatim>
1:  * <p>
1:  * This represents the fact that newReturnStatement returns a
1:  * object that represents a return statement that returns the
1:  * value represented by the parameter named value.
1:  * <p>
1:  * REVISIT: when StandardException is moved to BasicServices,
1:  * all of these want to support it so they can throw
1:  * real NotImplementedYet exceptions. It is expected that alot
1:  * of this interface can be not-implemented for engines that
1:  * do not need this complete treatment of the language.
1:  * <p>
1:  * Known Java constructs missing from this interface include:
1:  * <ul>
1:  * <li> array initializers
1:  * <li> ,-lists of statements in for segments
1:  * <li> accessing a field of the current object or class without
1:  *	including this or the class name
1:  * <li> declaring a list of variables against one type
1:  * <li> conversions/coercions/promotions of types
1:  * <li> empty statement
1:  * <li> labeled statement
1:  * <li> switch statement
1:  * <li> break, continue statements
1:  * <li> "super" expression (akin to the "this" expression).
1:  * <li> operations on multi-dimensional arrays
1:  * </ul>
1:  * <p>
1:  * This interface also does not do real compilation -- there are no
1:  * checks for things like initialization before use of variables,
1:  * inclusion of catchs on throws, dead code, etc. Its purpose is to
1:  * let other parts of the system piece together what they know is valid
1:  * code and get bytecode out of doing that.
1:  * <p>
1:  * Also, implementations will require that the constructs be built
1:  * appropriately or they may fail to produce a valid class.  For example,
1:  * newStaticMethodCall must be used to call static methods only,
1:  * not non-static local instance methods.
1:  * <p>
1:  * Implementations may be more, or less strict.  You are best off assuming
1:  * you have to piece together each java construct and be as explicit as
1:  * possible.  So, constructors must be created with newConstructor, not
1:  * newMethodBuilder; constructors must include the explicit call to
1:  * super(...) or this(...), as their first statement; all methods and
1:  * constructors must contain a final return statement at the end of
1:  * their code path(s). Method calls will derive the method to call
1:  * based on the type of the argument, so you must cast arguments as
1:  * the system will not search for a close method and coerce arguments
1:  * appropriately.  This includes coercing them to be some superclass or
1:  * interface that they already are.
1:  *
0:  * @author ames
1:  */
0: public interface JavaFactory { 
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 	public	final	static	String	JAVA_FACTORY_PROPERTY = "derby.module.JavaCompiler";
1: 
1: 	/**
1: 	 * a class.  Once it is created, fields, methods,
1: 	 * interfaces, static initialization code, 
1: 	 * and constructors can be added to it.
1: 	 * <verbatim>
1: 	   Java: package #packageName;
1: 	  	 #modifiers #className extends #superClass { }
1: 	  		// modifiers is the | of the JVM constants for
1: 	  		// the modifiers such as static, public, etc.
1:        </verbatim>
1: 	 *
1: 	   @param cf ClassFactory to be used for class resolution (debug only)
1: 	   and loading of the generated class.
1: 	 * @param packageName the name of the package the class is in
1: 	    including the trailing 'dot' if it is not the empty package.
1: 		Pass the empty package as "".
1: 	 * @param modifiers the | of the Modifier
1: 	 *	constants representing the visibility and control of this
1: 	 *	method.
1: 	 * @param className the name of the class or interface
1: 	 * @param superClass the name of the superclass or superinterface
1: 	 *
1: 	 * @return the class builder.
1: 	 * @see java.lang.reflect.Modifier
1: 	 */
1: 	ClassBuilder newClassBuilder(ClassFactory cf, String packageName,
1: 		int modifiers, String className, String superClass);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.compiler
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.compiler;
0: 
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: 
0: /**
0:  * JavaFactory provides generators for Java constructs.
0:  * Once Java constructs have been connected into
0:  * a complete class definition, the class can be generated
0:  * from them.
0:  * The generated class is created as a byte-code array that
0:  * can then be loaded by a class loader or, in our case,
0:  * the class utilities wrapper around our special class loader.
0:  * <p>
0:  * Each method shows the equivalent Java in the line starting
0:  * "Java:" in the header comment.  Items in the java code that
0:  * begin with # refer to parameters used in constructing the
0:  * object.  So, for example, newReturnStatement takes a parameter
0:  * named value; its Java code is:
0:  * <verbatim>
0:    Java: return #value;
0:    </verbatim>
0:  * <p>
0:  * This represents the fact that newReturnStatement returns a
0:  * object that represents a return statement that returns the
0:  * value represented by the parameter named value.
0:  * <p>
0:  * REVISIT: when StandardException is moved to BasicServices,
0:  * all of these want to support it so they can throw
0:  * real NotImplementedYet exceptions. It is expected that alot
0:  * of this interface can be not-implemented for engines that
0:  * do not need this complete treatment of the language.
0:  * <p>
0:  * Known Java constructs missing from this interface include:
0:  * <ul>
0:  * <li> array initializers
0:  * <li> ,-lists of statements in for segments
0:  * <li> accessing a field of the current object or class without
0:  *	including this or the class name
0:  * <li> declaring a list of variables against one type
0:  * <li> conversions/coercions/promotions of types
0:  * <li> empty statement
0:  * <li> labeled statement
0:  * <li> switch statement
0:  * <li> break, continue statements
0:  * <li> "super" expression (akin to the "this" expression).
0:  * <li> operations on multi-dimensional arrays
0:  * </ul>
0:  * <p>
0:  * This interface also does not do real compilation -- there are no
0:  * checks for things like initialization before use of variables,
0:  * inclusion of catchs on throws, dead code, etc. Its purpose is to
0:  * let other parts of the system piece together what they know is valid
0:  * code and get bytecode out of doing that.
0:  * <p>
0:  * Also, implementations will require that the constructs be built
0:  * appropriately or they may fail to produce a valid class.  For example,
0:  * newStaticMethodCall must be used to call static methods only,
0:  * not non-static local instance methods.
0:  * <p>
0:  * Implementations may be more, or less strict.  You are best off assuming
0:  * you have to piece together each java construct and be as explicit as
0:  * possible.  So, constructors must be created with newConstructor, not
0:  * newMethodBuilder; constructors must include the explicit call to
0:  * super(...) or this(...), as their first statement; all methods and
0:  * constructors must contain a final return statement at the end of
0:  * their code path(s). Method calls will derive the method to call
0:  * based on the type of the argument, so you must cast arguments as
0:  * the system will not search for a close method and coerce arguments
0:  * appropriately.  This includes coercing them to be some superclass or
0:  * interface that they already are.
0:  *
0:  * @author ames
0:  */
0: public interface JavaFactory { 
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 	public	final	static	String	JAVA_FACTORY_PROPERTY = "derby.module.JavaCompiler";
0: 
0: 	/**
0: 	 * a class.  Once it is created, fields, methods,
0: 	 * interfaces, static initialization code, 
0: 	 * and constructors can be added to it.
0: 	 * <verbatim>
0: 	   Java: package #packageName;
0: 	  	 #modifiers #className extends #superClass { }
0: 	  		// modifiers is the | of the JVM constants for
0: 	  		// the modifiers such as static, public, etc.
0:        </verbatim>
0: 	 *
0: 	   @param cf ClassFactory to be used for class resolution (debug only)
0: 	   and loading of the generated class.
0: 	 * @param packageName the name of the package the class is in
0: 	    including the trailing 'dot' if it is not the empty package.
0: 		Pass the empty package as "".
0: 	 * @param modifiers the | of the Modifier
0: 	 *	constants representing the visibility and control of this
0: 	 *	method.
0: 	 * @param className the name of the class or interface
0: 	 * @param superClass the name of the superclass or superinterface
0: 	 *
0: 	 * @return the class builder.
0: 	 * @see java.lang.reflect.Modifier
0: 	 */
0: 	ClassBuilder newClassBuilder(ClassFactory cf, String packageName,
0: 		int modifiers, String className, String superClass);
0: }
============================================================================