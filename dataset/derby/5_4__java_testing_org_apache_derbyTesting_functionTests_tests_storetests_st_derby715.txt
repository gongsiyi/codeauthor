2:7ddacaa: /*
38:7ddacaa: 
1:43bb9d4:    Derby - Class org.apache.derbyTesting.functionTests.tests.storetests.st_derby715
1:4f29da3: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:7ddacaa: 
1:7ddacaa:       http://www.apache.org/licenses/LICENSE-2.0
1:7ddacaa: 
1:7ddacaa:    Unless required by applicable law or agreed to in writing, software
1:7ddacaa:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ddacaa:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ddacaa:    See the License for the specific language governing permissions and
1:7ddacaa:    limitations under the License.
1:7ddacaa: 
2:d76dd28:  */
1:7ddacaa: 
1:7ddacaa: package org.apache.derbyTesting.functionTests.tests.storetests;
1:7ddacaa: 
1:7ddacaa: import java.sql.Connection;
1:7ddacaa: import java.sql.SQLException;
1:7ddacaa: import java.sql.Statement;
1:43bb9d4: import java.util.ArrayList;
1:43bb9d4: import java.util.Collections;
1:43bb9d4: import java.util.List;
1:43bb9d4: import junit.framework.Test;
1:43bb9d4: import org.apache.derbyTesting.functionTests.util.Barrier;
1:43bb9d4: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:43bb9d4: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:43bb9d4: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:43bb9d4: import org.apache.derbyTesting.junit.JDBC;
1:43bb9d4: import org.apache.derbyTesting.junit.TestConfiguration;
1:7ddacaa: 
1:d76dd28: /**
1:7ddacaa: 
1:7ddacaa: The purpose of this test is to reproduce JIRA DERBY-715:
1:7ddacaa: 
1:d76dd28: Sometimes a deadlock would be incorrectly reported as a timeout.  The
1:7ddacaa: bug seemed to always reproduce at least once if the following test
1:7ddacaa: was run (at least one of the iterations in the loop would get an
1:7ddacaa: incorrect timeout vs. a deadlock).
1:7ddacaa: 
2:7ddacaa: **/
1:7ddacaa: 
1:43bb9d4: public class st_derby715 extends BaseJDBCTestCase {
1:43bb9d4:     private Barrier barrier;
1:43bb9d4:     private List<Throwable> errors;
1:7ddacaa: 
1:43bb9d4:     public st_derby715(String name) {
1:43bb9d4:         super(name);
1:d76dd28:     }
1:d76dd28: 
1:43bb9d4:     public static Test suite() {
1:43bb9d4:         Test test = TestConfiguration.embeddedSuite(st_derby715.class);
1:43bb9d4:         test = DatabasePropertyTestSetup.setLockTimeouts(test, 1, 60);
1:43bb9d4:         test = new CleanDatabaseTestSetup(test);
1:43bb9d4:         return test;
1:43bb9d4:     }
1:43bb9d4: 
1:43bb9d4:     @Override
1:43bb9d4:     protected void initializeConnection(Connection conn) throws SQLException {
1:43bb9d4:         conn.setAutoCommit(false);
1:43bb9d4:         conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:43bb9d4:     }
1:d76dd28: 
1:d76dd28:     /**
1:43bb9d4:      * Run two threads, where thread 1 first reads from table A and then
1:43bb9d4:      * inserts a row into table B, and thread 2 first reads from table B
1:43bb9d4:      * and then inserts a row into table A. This should cause a deadlock
1:43bb9d4:      * in one of the threads. Before DERBY-715, sometimes a timeout would
1:43bb9d4:      * be raised instead of a deadlock.
1:43bb9d4:      */
1:43bb9d4:     public void test_st_derby715() throws Exception {
1:43bb9d4:         Statement stmt = createStatement();
1:7ddacaa:         stmt.executeUpdate("create table a (a integer)");
1:7ddacaa:         stmt.executeUpdate("create table b (b integer)");
1:7ddacaa:         stmt.close();
1:43bb9d4:         commit();
1:43bb9d4: 
1:43bb9d4:         Connection c1 = openDefaultConnection();
1:43bb9d4:         Connection c2 = openDefaultConnection();
1:43bb9d4:         Statement stmt1 = c1.createStatement();
1:43bb9d4:         Statement stmt2 = c2.createStatement();
1:43bb9d4: 
1:43bb9d4:         // Run the test five times.
1:43bb9d4:         for (int i = 0; i < 5; i++) {
1:43bb9d4:             barrier = new Barrier(2);
1:43bb9d4:             errors = Collections.synchronizedList(new ArrayList<Throwable>());
1:43bb9d4:             Thread test1 = new WorkerThread(stmt1, "Thread 1", "a", "b");
1:43bb9d4:             Thread test2 = new WorkerThread(stmt2, "Thread 2", "b", "a");
1:43bb9d4:             test1.start();
1:43bb9d4:             test2.start();
1:43bb9d4:             test1.join();
1:43bb9d4:             test2.join();
1:43bb9d4: 
1:43bb9d4:             // We expect exactly one of the threads to fail, and that it
1:43bb9d4:             // failed with a deadlock.
1:43bb9d4: 
1:43bb9d4:             assertFalse("Both threads succeeded", errors.isEmpty());
1:43bb9d4: 
1:43bb9d4:             if (errors.size() > 1) {
1:43bb9d4:                 for (Throwable t: errors) {
1:43bb9d4:                     printStackTrace(t);
1:43bb9d4:                 }
1:43bb9d4:                 fail("Both threads failed");
1:43bb9d4:             }
1:43bb9d4: 
1:43bb9d4:             Throwable t = errors.get(0);
1:43bb9d4:             if (t instanceof SQLException) {
1:43bb9d4:                 assertSQLState("40001", (SQLException) t);
1:43bb9d4:                 println("Got expected deadlock: " + t);
1:43bb9d4:             } else {
1:43bb9d4:                 fail("Unexpected exception", t);
1:43bb9d4:             }
1:43bb9d4:         }
1:43bb9d4: 
1:43bb9d4:         stmt1.close();
1:43bb9d4:         stmt2.close();
1:d76dd28:     }
1:7ddacaa: 
1:43bb9d4:     @Override
1:43bb9d4:     protected void tearDown() throws Exception {
1:43bb9d4:         barrier = null;
1:43bb9d4:         errors = null;
1:43bb9d4:         super.tearDown();
24:7ddacaa:     }
1:7ddacaa: 
1:43bb9d4:     private class WorkerThread extends Thread {
1:43bb9d4:         private final Statement stmt;
1:43bb9d4:         private final String id;
1:43bb9d4:         private final String readTable;
1:43bb9d4:         private final String writeTable;
1:43bb9d4: 
1:43bb9d4:         WorkerThread(Statement stmt, String id,
1:43bb9d4:                      String readTable, String writeTable) {
1:43bb9d4:             this.stmt = stmt;
1:43bb9d4:             this.id = id;
1:43bb9d4:             this.readTable = readTable;
1:43bb9d4:             this.writeTable = writeTable;
1:7ddacaa:         }
1:7ddacaa: 
1:43bb9d4:         @Override
1:43bb9d4:         public void run() {
1:43bb9d4:             try {
1:43bb9d4:                 _run();
1:43bb9d4:             } catch (Throwable t) {
1:43bb9d4:                 errors.add(t);
1:7ddacaa:             }
1:7ddacaa:         }
1:7ddacaa: 
1:43bb9d4:         private void _run() throws SQLException, InterruptedException {
1:43bb9d4:             println(id + " before selecting from " + readTable);
1:43bb9d4:             JDBC.assertEmpty(stmt.executeQuery("select * from " + readTable));
1:43bb9d4:             println(id + " after reading all rows");
1:7ddacaa: 
1:43bb9d4:             // Wait till the other thread has completed reading and is ready
1:43bb9d4:             // to insert a row.
1:43bb9d4:             barrier.await();
1:7ddacaa: 
1:43bb9d4:             println(id + " before inserting into " + writeTable);
1:43bb9d4:             stmt.execute("insert into " + writeTable + " values (1)");
1:43bb9d4:             println(id + " after inserting");
1:43bb9d4: 
1:43bb9d4:             stmt.getConnection().rollback();
1:7ddacaa:         }
1:7ddacaa:     }
1:7ddacaa: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:43bb9d4
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.storetests.st_derby715
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import junit.framework.Test;
1: import org.apache.derbyTesting.functionTests.util.Barrier;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1: public class st_derby715 extends BaseJDBCTestCase {
1:     private Barrier barrier;
1:     private List<Throwable> errors;
1:     public st_derby715(String name) {
1:         super(name);
1:     public static Test suite() {
1:         Test test = TestConfiguration.embeddedSuite(st_derby715.class);
1:         test = DatabasePropertyTestSetup.setLockTimeouts(test, 1, 60);
1:         test = new CleanDatabaseTestSetup(test);
1:         return test;
1:     }
1: 
1:     @Override
1:     protected void initializeConnection(Connection conn) throws SQLException {
1:         conn.setAutoCommit(false);
1:         conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
1:     }
1:      * Run two threads, where thread 1 first reads from table A and then
1:      * inserts a row into table B, and thread 2 first reads from table B
1:      * and then inserts a row into table A. This should cause a deadlock
1:      * in one of the threads. Before DERBY-715, sometimes a timeout would
1:      * be raised instead of a deadlock.
1:      */
1:     public void test_st_derby715() throws Exception {
1:         Statement stmt = createStatement();
1:         commit();
1: 
1:         Connection c1 = openDefaultConnection();
1:         Connection c2 = openDefaultConnection();
1:         Statement stmt1 = c1.createStatement();
1:         Statement stmt2 = c2.createStatement();
1: 
1:         // Run the test five times.
1:         for (int i = 0; i < 5; i++) {
1:             barrier = new Barrier(2);
1:             errors = Collections.synchronizedList(new ArrayList<Throwable>());
1:             Thread test1 = new WorkerThread(stmt1, "Thread 1", "a", "b");
1:             Thread test2 = new WorkerThread(stmt2, "Thread 2", "b", "a");
1:             test1.start();
1:             test2.start();
1:             test1.join();
1:             test2.join();
1: 
1:             // We expect exactly one of the threads to fail, and that it
1:             // failed with a deadlock.
1: 
1:             assertFalse("Both threads succeeded", errors.isEmpty());
1: 
1:             if (errors.size() > 1) {
1:                 for (Throwable t: errors) {
1:                     printStackTrace(t);
1:                 }
1:                 fail("Both threads failed");
1:             }
1: 
1:             Throwable t = errors.get(0);
1:             if (t instanceof SQLException) {
1:                 assertSQLState("40001", (SQLException) t);
1:                 println("Got expected deadlock: " + t);
1:             } else {
1:                 fail("Unexpected exception", t);
1:             }
1:         }
1: 
1:         stmt1.close();
1:         stmt2.close();
1:     @Override
1:     protected void tearDown() throws Exception {
1:         barrier = null;
1:         errors = null;
1:         super.tearDown();
1:     private class WorkerThread extends Thread {
1:         private final Statement stmt;
1:         private final String id;
1:         private final String readTable;
1:         private final String writeTable;
1: 
1:         WorkerThread(Statement stmt, String id,
1:                      String readTable, String writeTable) {
1:             this.stmt = stmt;
1:             this.id = id;
1:             this.readTable = readTable;
1:             this.writeTable = writeTable;
1:         @Override
1:         public void run() {
1:             try {
1:                 _run();
1:             } catch (Throwable t) {
1:                 errors.add(t);
1:         private void _run() throws SQLException, InterruptedException {
1:             println(id + " before selecting from " + readTable);
1:             JDBC.assertEmpty(stmt.executeQuery("select * from " + readTable));
1:             println(id + " after reading all rows");
1:             // Wait till the other thread has completed reading and is ready
1:             // to insert a row.
1:             barrier.await();
1:             println(id + " before inserting into " + writeTable);
1:             stmt.execute("insert into " + writeTable + " values (1)");
1:             println(id + " after inserting");
1: 
1:             stmt.getConnection().rollback();
commit:4f29da3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.functionTests.util.Barrier;
/////////////////////////////////////////////////////////////////////////
0:         private final Barrier barrier;
0:         public t1(Barrier barrier, String[] argv)
0:             this.barrier = barrier;
/////////////////////////////////////////////////////////////////////////
0:                 barrier.await();
/////////////////////////////////////////////////////////////////////////
0:         private final Barrier barrier;
0:         public t2 (Barrier barrier, String[] argv)
0:             this.barrier = barrier;
/////////////////////////////////////////////////////////////////////////
1: 
0:                 // Wait till thread 1 has executed the query and obtained
0:                 // locks on the rows in table B.
0:                 barrier.await();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 Barrier barrier = new Barrier(2);
0:                 Thread test1 = new Thread(new t1(barrier, argv));
0:                 Thread test2 = new Thread(new t2(barrier, argv));
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:d76dd28
/////////////////////////////////////////////////////////////////////////
1: Sometimes a deadlock would be incorrectly reported as a timeout.  The
/////////////////////////////////////////////////////////////////////////
0:                 waitForLocks(conn, 2);
/////////////////////////////////////////////////////////////////////////
0:                 waitForLocks(conn,2);
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Wait for a specified number of locks before continuing
0:      *
0:      * @param conn Connection to use for lock query
0:      * @param num  Number of locks to check for
1:      */
0:     private static void waitForLocks(Connection conn, int num) throws InterruptedException, SQLException {
0:         int totalWait = 0;
0:         do {
0:             totalWait += 500;
0:             Thread.sleep(500);
0:         } while (numlocks(conn) < num && totalWait < 60000);
1:        
1:     }
1:     /**
0:      * Get the number of locks in the lock table 
0:      * @return number of locks
0:      * @throws SQLException
1:      */
0:     private static int numlocks(Connection conn) throws SQLException {
0:         Statement s = conn.createStatement();
0:         ResultSet rs = s.executeQuery("SELECT count(*) from syscs_diag.lock_table");
0:         rs.next();
0:         int num = rs.getInt(1);
0:         rs.close();
0:         return num;
1:     }
1:     
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.shared.common.sanity.SanityManager;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:7ddacaa
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
0:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.storetests;
1: 
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derbyTesting.functionTests.tests.store.BaseTest;
1: 
0: import java.sql.CallableStatement;
1: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
0: import org.apache.derby.tools.ij;
1: 
1: 
0: /**
1: 
1: The purpose of this test is to reproduce JIRA DERBY-715:
1: 
0: Sometimes a deadlock would be incorrectly reported as a deadlock.  The
1: bug seemed to always reproduce at least once if the following test
1: was run (at least one of the iterations in the loop would get an
1: incorrect timeout vs. a deadlock).
1: 
1: **/
1: 
0: public class st_derby715 extends BaseTest
0: {
0:     static boolean verbose = false;
1: 
0:     public st_derby715()
0:     {
1:     }
1: 
1: 
0:     /**
0:      * Create the base table that the 2 threads will use.
1:      **/
0:     private static void setup()
0:         throws Exception
0:     {
0:         Connection conn = ij.startJBMS();
0:         Statement  stmt = conn.createStatement();
1: 
0:         // drop table, ignore table does not exist error.
1: 
0:         try
0:         {
0:             stmt.executeUpdate("drop table a");
1:         }
0:         catch (Exception e)
0:         {
0:             // ignore drop table errors.
1:         }
1: 
0:         try
0:         {
0:             stmt.executeUpdate("drop table b");
1:         }
0:         catch (Exception e)
0:         {
0:             // ignore drop table errors.
1:         }
1: 
1:         stmt.executeUpdate("create table a (a integer)");
1:         stmt.executeUpdate("create table b (b integer)");
1:         stmt.close();
0:         conn.commit();
0:         conn.close();
1:     }
1: 
0:     public static class t1 implements Runnable
0:     {
0:         String[] argv;
1: 
0:         public t1(String[] argv)
0:         {
0:             argv = argv;
1:         }
0:         public void run()
0:         {
0:             try
0:             {
0:                 ij.getPropertyArg(argv); 
0:                 Connection conn = ij.startJBMS();
0:                 conn.setAutoCommit(false);
0:                 conn.setTransactionIsolation(
0:                         Connection.TRANSACTION_SERIALIZABLE);
1: 
0:                 Statement stmt = conn.createStatement();
0:                 if (verbose)
0:                     System.out.println("Thread 1 before selecting from b");
1: 
0:                 // get row locks on all rows in b
0:                 ResultSet rs = stmt.executeQuery("select * from b");
1: 
0:                 if (verbose)
0:                     System.out.println("Thread 1 before selecting next from b");
1: 
0:                 while (rs.next())
0:                 {
0:                     if (verbose)
0:                         System.out.println("Thread t1 got " + rs.getString(1));
1:                 }
0:                 if (verbose)
0:                     System.out.println("Thread 1 after all next.");
1: 
0:                 // give thread 2 a chance to catch up.
0:                 Thread.sleep(500);
1: 
0:                 if (verbose)
0:                     System.out.println("Thread 1 before inserting into a...");
1: 
0:                 // now wait on lock inserting row into table a - either 
0:                 // thread 1 or thread 2 should get a deadlock, NOT a timeout.
0:                 stmt.executeUpdate("insert into a values(1)");
1: 
0:                 if (verbose)
0:                     System.out.println("Thread 1 after inserting into a...");
1: 
0:                 conn.rollback();
1:             }
0:             catch (SQLException sqle)
0:             {
0:                 if (sqle.getSQLState().equals("40001"))
0:                 {
0:                     // only expected exception is a deadlock, we should
0:                     // get at least one deadlock, so print it to output.
0:                     // Don't know which thread will get the deadlock, so
0:                     // don't label it.
0:                     System.out.println("Got a Deadlock.");
1:                 }
0:                 else
0:                 {
0:                     org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                         System.out, sqle);
0:                     sqle.printStackTrace(System.out);
1:                 }
0:                 if (verbose)
0:                     System.out.println("Thread 1 got exception:\n");
1:             }
0:             catch (Exception ex)
0:             {
0:                 System.out.println("got unexpected exception: " + ex);
1:             }
1:         }
1:     }
1: 
0:     public static class t2 implements Runnable
0:     {
0:         String[] argv;
0:         public t2 (String[] argv)
0:         {
0:             argv = argv;
1:         }
0:         public void run()
0:         {
0:             try
0:             {
0:                 ij.getPropertyArg(argv); 
0:                 Connection conn = ij.startJBMS();
0:                 conn.setAutoCommit(false);
0:                 conn.setTransactionIsolation(
0:                         Connection.TRANSACTION_SERIALIZABLE);
1: 
0:                 Statement stmt = conn.createStatement();
1: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 before selecting from a");
1: 
0:                 ResultSet rs = stmt.executeQuery("select * from a");
1: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 before selecting next from a");
1: 
0:                 while (rs.next())
0:                 {
0:                     if (verbose)
0:                         System.out.println("Thread t2 got " + rs.getString(1));
1:                 }
1: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 after all next.");
1: 
1: 
0:                 Thread.sleep(500);
1:                 
0:                 if (verbose)
0:                     System.out.println("Thread 2 before inserting into b");
1: 
0:                 stmt.executeUpdate("insert into b values(2)");
1: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 after inserting into b");
1: 
0:                 conn.rollback();
1:             }
0:             catch (SQLException sqle)
0:             {
0:                 if (verbose)
0:                     System.out.println("Thread 1 got exception:\n");
1: 
0:                 if (sqle.getSQLState().equals("40001"))
0:                 {
0:                     // only expected exception is a deadlock, we should
0:                     // get at least one deadlock, so print it to output.
0:                     // Don't know which thread will get the deadlock, so
0:                     // don't label it.
0:                     System.out.println("Got a Deadlock.");
1:                 }
0:                 else
0:                 {
0:                     org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                         System.out, sqle);
0:                     sqle.printStackTrace(System.out);
1:                 }
1:             }
0:             catch (Exception ex)
0:             {
0:                 System.out.println("got unexpected exception: " + ex);
1:             }
1:         }
1:     }
1:     
1: 
0:     public void testList(Connection conn)
0:         throws SQLException
0:     {
1:     }
1: 
0:     public static void main(String[] argv) 
0:         throws Throwable
0:     {
0:         ij.getPropertyArg(argv); 
1: 
0:         st_derby715 setup_ddl = new st_derby715();
0:         setup_ddl.setup();
0:         setup_ddl = null;
1: 
0:         {
0:             for (int i = 0; i < 5; i++)
0:             {
0:                 Thread test1 = new Thread(new t1(argv));
0:                 Thread test2 = new Thread(new t2(argv));
0:                 test1.start();
0:                 test2.start();
0:                 test1.join();
0:                 test2.join();
1:             }
1:         }
1:         /*
0:         catch (SQLException sqle)
0:         {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                 System.out, sqle);
0: 			sqle.printStackTrace(System.out);
1: 		}
0:         */
1:     }
1: }
commit:ac64517
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.harness.procedure
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.storetests;
0: 
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derbyTesting.functionTests.tests.store.BaseTest;
0: 
0: import java.sql.CallableStatement;
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: 
0: import org.apache.derby.tools.ij;
0: 
0: 
0: /**
0: 
0: The purpose of this test is to reproduce JIRA DERBY-715:
0: 
0: Sometimes a deadlock would be incorrectly reported as a deadlock.  The
0: bug seemed to always reproduce at least once if the following test
0: was run (at least one of the iterations in the loop would get an
0: incorrect timeout vs. a deadlock).
0: 
0: **/
0: 
0: public class st_derby715 extends BaseTest
0: {
0:     static boolean verbose = false;
0: 
0:     public st_derby715()
0:     {
0:     }
0: 
0: 
0:     /**
0:      * Create the base table that the 2 threads will use.
0:      **/
0:     private static void setup()
0:         throws Exception
0:     {
0:         Connection conn = ij.startJBMS();
0:         Statement  stmt = conn.createStatement();
0: 
0:         // drop table, ignore table does not exist error.
0: 
0:         try
0:         {
0:             stmt.executeUpdate("drop table a");
0:         }
0:         catch (Exception e)
0:         {
0:             // ignore drop table errors.
0:         }
0: 
0:         try
0:         {
0:             stmt.executeUpdate("drop table b");
0:         }
0:         catch (Exception e)
0:         {
0:             // ignore drop table errors.
0:         }
0: 
0:         stmt.executeUpdate("create table a (a integer)");
0:         stmt.executeUpdate("create table b (b integer)");
0:         stmt.close();
0:         conn.commit();
0:         conn.close();
0:     }
0: 
0:     public static class t1 implements Runnable
0:     {
0:         String[] argv;
0: 
0:         public t1(String[] argv)
0:         {
0:             argv = argv;
0:         }
0:         public void run()
0:         {
0:             try
0:             {
0:                 ij.getPropertyArg(argv); 
0:                 Connection conn = ij.startJBMS();
0:                 conn.setAutoCommit(false);
0:                 conn.setTransactionIsolation(
0:                         Connection.TRANSACTION_SERIALIZABLE);
0: 
0:                 Statement stmt = conn.createStatement();
0:                 if (verbose)
0:                     System.out.println("Thread 1 before selecting from b");
0: 
0:                 // get row locks on all rows in b
0:                 ResultSet rs = stmt.executeQuery("select * from b");
0: 
0:                 if (verbose)
0:                     System.out.println("Thread 1 before selecting next from b");
0: 
0:                 while (rs.next())
0:                 {
0:                     if (verbose)
0:                         System.out.println("Thread t1 got " + rs.getString(1));
0:                 }
0:                 if (verbose)
0:                     System.out.println("Thread 1 after all next.");
0: 
0:                 // give thread 2 a chance to catch up.
0:                 Thread.sleep(500);
0: 
0:                 if (verbose)
0:                     System.out.println("Thread 1 before inserting into a...");
0: 
0:                 // now wait on lock inserting row into table a - either 
0:                 // thread 1 or thread 2 should get a deadlock, NOT a timeout.
0:                 stmt.executeUpdate("insert into a values(1)");
0: 
0:                 if (verbose)
0:                     System.out.println("Thread 1 after inserting into a...");
0: 
0:                 conn.rollback();
0:             }
0:             catch (SQLException sqle)
0:             {
0:                 if (sqle.getSQLState().equals("40001"))
0:                 {
0:                     // only expected exception is a deadlock, we should
0:                     // get at least one deadlock, so print it to output.
0:                     // Don't know which thread will get the deadlock, so
0:                     // don't label it.
0:                     System.out.println("Got a Deadlock.");
0:                 }
0:                 else
0:                 {
0:                     org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                         System.out, sqle);
0:                     sqle.printStackTrace(System.out);
0:                 }
0:                 if (verbose)
0:                     System.out.println("Thread 1 got exception:\n");
0:             }
0:             catch (Exception ex)
0:             {
0:                 System.out.println("got unexpected exception: " + ex);
0:             }
0:         }
0:     }
0: 
0:     public static class t2 implements Runnable
0:     {
0:         String[] argv;
0:         public t2 (String[] argv)
0:         {
0:             argv = argv;
0:         }
0:         public void run()
0:         {
0:             try
0:             {
0:                 ij.getPropertyArg(argv); 
0:                 Connection conn = ij.startJBMS();
0:                 conn.setAutoCommit(false);
0:                 conn.setTransactionIsolation(
0:                         Connection.TRANSACTION_SERIALIZABLE);
0: 
0:                 Statement stmt = conn.createStatement();
0: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 before selecting from a");
0: 
0:                 ResultSet rs = stmt.executeQuery("select * from a");
0: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 before selecting next from a");
0: 
0:                 while (rs.next())
0:                 {
0:                     if (verbose)
0:                         System.out.println("Thread t2 got " + rs.getString(1));
0:                 }
0: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 after all next.");
0: 
0: 
0:                 Thread.sleep(500);
0:                 
0:                 if (verbose)
0:                     System.out.println("Thread 2 before inserting into b");
0: 
0:                 stmt.executeUpdate("insert into b values(2)");
0: 
0:                 if (verbose)
0:                     System.out.println("Thread 2 after inserting into b");
0: 
0:                 conn.rollback();
0:             }
0:             catch (SQLException sqle)
0:             {
0:                 if (verbose)
0:                     System.out.println("Thread 1 got exception:\n");
0: 
0:                 if (sqle.getSQLState().equals("40001"))
0:                 {
0:                     // only expected exception is a deadlock, we should
0:                     // get at least one deadlock, so print it to output.
0:                     // Don't know which thread will get the deadlock, so
0:                     // don't label it.
0:                     System.out.println("Got a Deadlock.");
0:                 }
0:                 else
0:                 {
0:                     org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                         System.out, sqle);
0:                     sqle.printStackTrace(System.out);
0:                 }
0:             }
0:             catch (Exception ex)
0:             {
0:                 System.out.println("got unexpected exception: " + ex);
0:             }
0:         }
0:     }
0:     
0: 
0:     public void testList(Connection conn)
0:         throws SQLException
0:     {
0:     }
0: 
0:     public static void main(String[] argv) 
0:         throws Throwable
0:     {
0:         ij.getPropertyArg(argv); 
0: 
0:         st_derby715 setup_ddl = new st_derby715();
0:         setup_ddl.setup();
0:         setup_ddl = null;
0: 
0:         {
0:             for (int i = 0; i < 5; i++)
0:             {
0:                 Thread test1 = new Thread(new t1(argv));
0:                 Thread test2 = new Thread(new t2(argv));
0:                 test1.start();
0:                 test2.start();
0:                 test1.join();
0:                 test2.join();
0:             }
0:         }
0:         /*
0:         catch (SQLException sqle)
0:         {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                 System.out, sqle);
0: 			sqle.printStackTrace(System.out);
0: 		}
0:         */
0:     }
0: }
============================================================================