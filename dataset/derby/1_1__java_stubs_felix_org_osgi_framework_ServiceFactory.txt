1:a8b6921: /*
1:a8b6921:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceFactory.java,v 1.10 2007/02/20 00:16:30 hargrave Exp $
1:a8b6921:  * 
1:a8b6921:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:a8b6921:  * 
1:a8b6921:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a8b6921:  * you may not use this file except in compliance with the License.
1:a8b6921:  * You may obtain a copy of the License at
1:a8b6921:  *
1:a8b6921:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a8b6921:  *
1:a8b6921:  * Unless required by applicable law or agreed to in writing, software
1:a8b6921:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a8b6921:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a8b6921:  * See the License for the specific language governing permissions and
1:a8b6921:  * limitations under the License.
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: package org.osgi.framework;
1:a8b6921: 
1:a8b6921: /**
1:a8b6921:  * Allows services to provide customized service objects in the OSGi
1:a8b6921:  * environment.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * When registering a service, a <code>ServiceFactory</code> object can be
1:a8b6921:  * used instead of a service object, so that the bundle developer can gain
1:a8b6921:  * control of the specific service object granted to a bundle that is using the
1:a8b6921:  * service.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * When this happens, the
1:a8b6921:  * <code>BundleContext.getService(ServiceReference)</code> method calls the
1:a8b6921:  * <code>ServiceFactory.getService</code> method to create a service object
1:a8b6921:  * specifically for the requesting bundle. The service object returned by the
1:a8b6921:  * <code>ServiceFactory</code> is cached by the Framework until the bundle
1:a8b6921:  * releases its use of the service.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * When the bundle's use count for the service equals zero (including the bundle
1:a8b6921:  * stopping or the service being unregistered), the
1:a8b6921:  * <code>ServiceFactory.ungetService</code> method is called.
1:a8b6921:  * 
1:a8b6921:  * <p>
1:a8b6921:  * <code>ServiceFactory</code> objects are only used by the Framework and are
1:a8b6921:  * not made available to other bundles in the OSGi environment. The Framework
1:a8b6921:  * may concurrently call a <code>ServiceFactory</code>.
1:a8b6921:  * 
1:a8b6921:  * @see BundleContext#getService
1:a8b6921:  * @ThreadSafe
1:a8b6921:  * @version $Revision: 1.10 $
1:a8b6921:  */
1:a8b6921: 
1:a8b6921: public interface ServiceFactory {
1:a8b6921: 	/**
1:a8b6921: 	 * Creates a new service object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The Framework invokes this method the first time the specified
1:a8b6921: 	 * <code>bundle</code> requests a service object using the
1:a8b6921: 	 * <code>BundleContext.getService(ServiceReference)</code> method. The
1:a8b6921: 	 * service factory can then return a specific service object for each
1:a8b6921: 	 * bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The Framework caches the value returned (unless it is <code>null</code>),
1:a8b6921: 	 * and will return the same service object on any future call to
1:a8b6921: 	 * <code>BundleContext.getService</code> from the same bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The Framework will check if the returned service object is an instance of
1:a8b6921: 	 * all the classes named when the service was registered. If not, then
1:a8b6921: 	 * <code>null</code> is returned to the bundle.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param bundle The bundle using the service.
1:a8b6921: 	 * @param registration The <code>ServiceRegistration</code> object for the
1:a8b6921: 	 *        service.
1:a8b6921: 	 * @return A service object that <strong>must </strong> be an instance of
1:a8b6921: 	 *         all the classes named when the service was registered.
1:a8b6921: 	 * @see BundleContext#getService
1:a8b6921: 	 */
1:a8b6921: 	public Object getService(Bundle bundle, ServiceRegistration registration);
1:a8b6921: 
1:a8b6921: 	/**
1:a8b6921: 	 * Releases a service object.
1:a8b6921: 	 * 
1:a8b6921: 	 * <p>
1:a8b6921: 	 * The Framework invokes this method when a service has been released by a
1:a8b6921: 	 * bundle. The service object may then be destroyed.
1:a8b6921: 	 * 
1:a8b6921: 	 * @param bundle The bundle releasing the service.
1:a8b6921: 	 * @param registration The <code>ServiceRegistration</code> object for the
1:a8b6921: 	 *        service.
1:a8b6921: 	 * @param service The service object returned by a previous call to the
1:a8b6921: 	 *        <code>ServiceFactory.getService</code> method.
1:a8b6921: 	 * @see BundleContext#ungetService
1:a8b6921: 	 */
1:a8b6921: 	public void ungetService(Bundle bundle, ServiceRegistration registration,
1:a8b6921: 			Object service);
1:a8b6921: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:a8b6921
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * $Header: /cvshome/build/org.osgi.framework/src/org/osgi/framework/ServiceFactory.java,v 1.10 2007/02/20 00:16:30 hargrave Exp $
1:  * 
1:  * Copyright (c) OSGi Alliance (2000, 2007). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.framework;
1: 
1: /**
1:  * Allows services to provide customized service objects in the OSGi
1:  * environment.
1:  * 
1:  * <p>
1:  * When registering a service, a <code>ServiceFactory</code> object can be
1:  * used instead of a service object, so that the bundle developer can gain
1:  * control of the specific service object granted to a bundle that is using the
1:  * service.
1:  * 
1:  * <p>
1:  * When this happens, the
1:  * <code>BundleContext.getService(ServiceReference)</code> method calls the
1:  * <code>ServiceFactory.getService</code> method to create a service object
1:  * specifically for the requesting bundle. The service object returned by the
1:  * <code>ServiceFactory</code> is cached by the Framework until the bundle
1:  * releases its use of the service.
1:  * 
1:  * <p>
1:  * When the bundle's use count for the service equals zero (including the bundle
1:  * stopping or the service being unregistered), the
1:  * <code>ServiceFactory.ungetService</code> method is called.
1:  * 
1:  * <p>
1:  * <code>ServiceFactory</code> objects are only used by the Framework and are
1:  * not made available to other bundles in the OSGi environment. The Framework
1:  * may concurrently call a <code>ServiceFactory</code>.
1:  * 
1:  * @see BundleContext#getService
1:  * @ThreadSafe
1:  * @version $Revision: 1.10 $
1:  */
1: 
1: public interface ServiceFactory {
1: 	/**
1: 	 * Creates a new service object.
1: 	 * 
1: 	 * <p>
1: 	 * The Framework invokes this method the first time the specified
1: 	 * <code>bundle</code> requests a service object using the
1: 	 * <code>BundleContext.getService(ServiceReference)</code> method. The
1: 	 * service factory can then return a specific service object for each
1: 	 * bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The Framework caches the value returned (unless it is <code>null</code>),
1: 	 * and will return the same service object on any future call to
1: 	 * <code>BundleContext.getService</code> from the same bundle.
1: 	 * 
1: 	 * <p>
1: 	 * The Framework will check if the returned service object is an instance of
1: 	 * all the classes named when the service was registered. If not, then
1: 	 * <code>null</code> is returned to the bundle.
1: 	 * 
1: 	 * @param bundle The bundle using the service.
1: 	 * @param registration The <code>ServiceRegistration</code> object for the
1: 	 *        service.
1: 	 * @return A service object that <strong>must </strong> be an instance of
1: 	 *         all the classes named when the service was registered.
1: 	 * @see BundleContext#getService
1: 	 */
1: 	public Object getService(Bundle bundle, ServiceRegistration registration);
1: 
1: 	/**
1: 	 * Releases a service object.
1: 	 * 
1: 	 * <p>
1: 	 * The Framework invokes this method when a service has been released by a
1: 	 * bundle. The service object may then be destroyed.
1: 	 * 
1: 	 * @param bundle The bundle releasing the service.
1: 	 * @param registration The <code>ServiceRegistration</code> object for the
1: 	 *        service.
1: 	 * @param service The service object returned by a previous call to the
1: 	 *        <code>ServiceFactory.getService</code> method.
1: 	 * @see BundleContext#ungetService
1: 	 */
1: 	public void ungetService(Bundle bundle, ServiceRegistration registration,
1: 			Object service);
1: }
============================================================================