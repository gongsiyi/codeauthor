1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.catalog.DDColumnDependableFinder
1:345de35: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
4:eac0369: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: import org.apache.derby.catalog.Dependable;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.io.FormatableHashtable;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
1:eac0369: import java.io.ObjectOutput;
1:eac0369: import java.io.ObjectInput;
1:eac0369: import java.io.IOException;
1:eac0369: 
4:eac0369: /**
1:eac0369:  *	Class for implementation of DependableFinder in the core DataDictionary 
1:eac0369:  *	for referenced columns in a table.
3:eac0369:  *
1:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:eac0369: public class DDColumnDependableFinder extends DDdependableFinder
3:eac0369: {
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//  STATE
1:eac0369: 	//
1:eac0369: 	////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	// write least amount of data to disk, just the byte array, not even
1:eac0369: 	// a FormatableBitSet
1:eac0369: 	private byte[] columnBitMap;
1:eac0369: 
1:eac0369:     ////////////////////////////////////////////////////////////////////////
1:eac0369:     //
1:eac0369:     //  CONSTRUCTORS
1:eac0369:     //
1:eac0369:     ////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor same as in parent.
1:eac0369: 	 */
1:eac0369: 	public  DDColumnDependableFinder(int formatId)
1:eac0369: 	{
1:eac0369: 		super(formatId);
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Constructor given referenced column bit map byte array as in FormatableBitSet
1:eac0369: 	 */
1:e22e8dc:     DDColumnDependableFinder(int formatId, byte[] columnBitMap)
1:eac0369: 	{
1:eac0369: 		super(formatId);
2:eac0369: 		this.columnBitMap = columnBitMap;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     ////////////////////////////////////////////////////////////////////////
1:eac0369:     //
1:eac0369:     //  DDColumnDependable METHODS
1:eac0369:     //
1:eac0369:     ////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:2bb479f: 	 * Find a dependable object, which is essentially a table descriptor with
1:eac0369: 	 * referencedColumnMap field set.
1:eac0369: 	 *
1:6b50965: 	 * @param	dd data dictionary
1:6b50965: 	 * @param	dependableObjectID dependable object ID (table UUID)
1:eac0369: 	 * @return	a dependable, a table descriptor with referencedColumnMap
1:eac0369: 	 *			field set
1:eac0369: 	 */
1:2bb479f: 	Dependable findDependable(DataDictionary dd, UUID dependableObjectID)
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		TableDescriptor td = dd.getTableDescriptor(dependableObjectID);
1:eac0369: 		if (td != null)  // see beetle 4444
1:eac0369: 			td.setReferencedColumnMap(new FormatableBitSet(columnBitMap));
1:eac0369: 		return td;
1:eac0369: 	}
1:eac0369: 
1:eac0369:     //////////////////////////////////////////////////////////////////
1:eac0369:     //
1:eac0369:     //  FORMATABLE METHODS
1:eac0369:     //
1:eac0369:     //////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Read this object from a stream of stored objects.  Just read the
1:eac0369: 	 * byte array, besides what the parent does.
1:eac0369: 	 *
1:eac0369: 	 * @param in read this.
1:eac0369: 	 */
1:eac0369: 	public void readExternal( ObjectInput in )
1:eac0369: 			throws IOException, ClassNotFoundException
1:eac0369: 	{
1:eac0369: 		super.readExternal(in);
1:eac0369: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1:eac0369: 		columnBitMap = (byte[])fh.get("columnBitMap");
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Write this object to a stream of stored objects.  Just write the
1:eac0369: 	 * byte array, besides what the parent does.
1:eac0369: 	 *
1:eac0369: 	 * @param out write bytes here.
1:eac0369: 	 */
1:eac0369: 	public void writeExternal( ObjectOutput out )
1:eac0369: 			throws IOException
1:eac0369: 	{
1:eac0369: 		super.writeExternal(out);
1:eac0369: 		FormatableHashtable fh = new FormatableHashtable();
1:eac0369: 		fh.put("columnBitMap", columnBitMap);
1:eac0369: 		out.writeObject(fh);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e22e8dc
/////////////////////////////////////////////////////////////////////////
1:     DDColumnDependableFinder(int formatId, byte[] columnBitMap)
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:2bb479f
/////////////////////////////////////////////////////////////////////////
1: 	 * Find a dependable object, which is essentially a table descriptor with
/////////////////////////////////////////////////////////////////////////
1: 	Dependable findDependable(DataDictionary dd, UUID dependableObjectID)
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.catalog.DDColumnDependableFinder
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
1: import org.apache.derby.catalog.UUID;
1: import org.apache.derby.catalog.Dependable;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: import org.apache.derby.iapi.services.io.FormatableHashtable;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import java.io.ObjectOutput;
1: import java.io.ObjectInput;
1: import java.io.IOException;
1: 
1: /**
1:  *	Class for implementation of DependableFinder in the core DataDictionary 
1:  *	for referenced columns in a table.
1:  *
1:  *
0:  * @author Tingjian Ge
1:  */
1: 
1: public class DDColumnDependableFinder extends DDdependableFinder
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//  STATE
1: 	//
1: 	////////////////////////////////////////////////////////////////////////
1: 
1: 	// write least amount of data to disk, just the byte array, not even
1: 	// a FormatableBitSet
1: 	private byte[] columnBitMap;
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //  CONSTRUCTORS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Constructor same as in parent.
1: 	 */
1: 	public  DDColumnDependableFinder(int formatId)
1: 	{
1: 		super(formatId);
1: 	}
1: 
1: 	/**
1: 	 * Constructor given referenced column bit map byte array as in FormatableBitSet
1: 	 */
0: 	public  DDColumnDependableFinder(int formatId, byte[] columnBitMap)
1: 	{
1: 		super(formatId);
1: 		this.columnBitMap = columnBitMap;
1: 	}
1: 
1:     ////////////////////////////////////////////////////////////////////////
1:     //
1:     //  DDColumnDependable METHODS
1:     //
1:     ////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
0: 	 * Get the byte array encoding the bitmap of referenced columns in
0: 	 * a table.
1: 	 *
0: 	 * @param		none
0: 	 * @return		byte array as in a FormatableBitSet encoding column bit map
1: 	 */
0: 	public 	byte[]	getColumnBitMap()
1: 	{
0: 		return columnBitMap;
1: 	}
1: 
1: 	/**
0: 	 * Set the byte array encoding the bitmap of referenced columns in
0: 	 * a table.
1: 	 *
0: 	 * @param		byte array as in a FormatableBitSet encoding column bit map
0: 	 * @return		none
1: 	 */
0: 	public	void	setColumnBitMap(byte[] columnBitMap)
1: 	{
1: 		this.columnBitMap = columnBitMap;
1: 	}
1: 
1: 	/**
0: 	 * Get a dependable object, which is essentially a table descriptor with
1: 	 * referencedColumnMap field set.
1: 	 *
0: 	 * @param	data dictionary
0: 	 * @param	dependable object ID (table UUID)
1: 	 * @return	a dependable, a table descriptor with referencedColumnMap
1: 	 *			field set
1: 	 */
0: 	protected Dependable getDependable(DataDictionary dd, UUID dependableObjectID)
1: 		throws StandardException
1: 	{
1: 		TableDescriptor td = dd.getTableDescriptor(dependableObjectID);
1: 		if (td != null)  // see beetle 4444
1: 			td.setReferencedColumnMap(new FormatableBitSet(columnBitMap));
1: 		return td;
1: 	}
1: 
1:     //////////////////////////////////////////////////////////////////
1:     //
1:     //  FORMATABLE METHODS
1:     //
1:     //////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Read this object from a stream of stored objects.  Just read the
1: 	 * byte array, besides what the parent does.
1: 	 *
1: 	 * @param in read this.
1: 	 */
1: 	public void readExternal( ObjectInput in )
1: 			throws IOException, ClassNotFoundException
1: 	{
1: 		super.readExternal(in);
1: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
1: 		columnBitMap = (byte[])fh.get("columnBitMap");
1: 	}
1: 
1: 	/**
1: 	 * Write this object to a stream of stored objects.  Just write the
1: 	 * byte array, besides what the parent does.
1: 	 *
1: 	 * @param out write bytes here.
1: 	 */
1: 	public void writeExternal( ObjectOutput out )
1: 			throws IOException
1: 	{
1: 		super.writeExternal(out);
1: 		FormatableHashtable fh = new FormatableHashtable();
1: 		fh.put("columnBitMap", columnBitMap);
1: 		out.writeObject(fh);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	 * @param	columnBitMap	byte array as in a FormatableBitSet encoding column bit map
/////////////////////////////////////////////////////////////////////////
1: 	 * @param	dd data dictionary
1: 	 * @param	dependableObjectID dependable object ID (table UUID)
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.catalog
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.catalog.UUID;
0: import org.apache.derby.catalog.Dependable;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.io.FormatableHashtable;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import java.io.ObjectOutput;
0: import java.io.ObjectInput;
0: import java.io.IOException;
0: 
0: /**
0:  *	Class for implementation of DependableFinder in the core DataDictionary 
0:  *	for referenced columns in a table.
0:  *
0:  *
0:  * @author Tingjian Ge
0:  */
0: 
0: public class DDColumnDependableFinder extends DDdependableFinder
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//  STATE
0: 	//
0: 	////////////////////////////////////////////////////////////////////////
0: 
0: 	// write least amount of data to disk, just the byte array, not even
0: 	// a FormatableBitSet
0: 	private byte[] columnBitMap;
0: 
0:     ////////////////////////////////////////////////////////////////////////
0:     //
0:     //  CONSTRUCTORS
0:     //
0:     ////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Constructor same as in parent.
0: 	 */
0: 	public  DDColumnDependableFinder(int formatId)
0: 	{
0: 		super(formatId);
0: 	}
0: 
0: 	/**
0: 	 * Constructor given referenced column bit map byte array as in FormatableBitSet
0: 	 */
0: 	public  DDColumnDependableFinder(int formatId, byte[] columnBitMap)
0: 	{
0: 		super(formatId);
0: 		this.columnBitMap = columnBitMap;
0: 	}
0: 
0:     ////////////////////////////////////////////////////////////////////////
0:     //
0:     //  DDColumnDependable METHODS
0:     //
0:     ////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Get the byte array encoding the bitmap of referenced columns in
0: 	 * a table.
0: 	 *
0: 	 * @param		none
0: 	 * @return		byte array as in a FormatableBitSet encoding column bit map
0: 	 */
0: 	public 	byte[]	getColumnBitMap()
0: 	{
0: 		return columnBitMap;
0: 	}
0: 
0: 	/**
0: 	 * Set the byte array encoding the bitmap of referenced columns in
0: 	 * a table.
0: 	 *
0: 	 * @param		byte array as in a FormatableBitSet encoding column bit map
0: 	 * @return		none
0: 	 */
0: 	public	void	setColumnBitMap(byte[] columnBitMap)
0: 	{
0: 		this.columnBitMap = columnBitMap;
0: 	}
0: 
0: 	/**
0: 	 * Get a dependable object, which is essentially a table descriptor with
0: 	 * referencedColumnMap field set.
0: 	 *
0: 	 * @param	data dictionary
0: 	 * @param	dependable object ID (table UUID)
0: 	 * @return	a dependable, a table descriptor with referencedColumnMap
0: 	 *			field set
0: 	 */
0: 	protected Dependable getDependable(DataDictionary dd, UUID dependableObjectID)
0: 		throws StandardException
0: 	{
0: 		TableDescriptor td = dd.getTableDescriptor(dependableObjectID);
0: 		if (td != null)  // see beetle 4444
0: 			td.setReferencedColumnMap(new FormatableBitSet(columnBitMap));
0: 		return td;
0: 	}
0: 
0:     //////////////////////////////////////////////////////////////////
0:     //
0:     //  FORMATABLE METHODS
0:     //
0:     //////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Read this object from a stream of stored objects.  Just read the
0: 	 * byte array, besides what the parent does.
0: 	 *
0: 	 * @param in read this.
0: 	 */
0: 	public void readExternal( ObjectInput in )
0: 			throws IOException, ClassNotFoundException
0: 	{
0: 		super.readExternal(in);
0: 		FormatableHashtable fh = (FormatableHashtable)in.readObject();
0: 		columnBitMap = (byte[])fh.get("columnBitMap");
0: 	}
0: 
0: 	/**
0: 	 * Write this object to a stream of stored objects.  Just write the
0: 	 * byte array, besides what the parent does.
0: 	 *
0: 	 * @param out write bytes here.
0: 	 */
0: 	public void writeExternal( ObjectOutput out )
0: 			throws IOException
0: 	{
0: 		super.writeExternal(out);
0: 		FormatableHashtable fh = new FormatableHashtable();
0: 		fh.put("columnBitMap", columnBitMap);
0: 		out.writeObject(fh);
0: 	}
0: }
============================================================================