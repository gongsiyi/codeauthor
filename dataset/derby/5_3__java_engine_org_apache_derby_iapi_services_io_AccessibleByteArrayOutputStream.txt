1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.io;
1:eac0369: 
1:b996023: import java.io.ByteArrayInputStream;
1:eac0369: import java.io.ByteArrayOutputStream;
1:5a15941: import java.io.IOException;
1:5a15941: import java.io.InputStream;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This allows us to get to the byte array to go back and
1:eac0369:  * edit contents or get the array without having a copy made.
1:eac0369:  <P>
1:eac0369:    Since a copy is not made, users must be careful that no more
1:eac0369:    writes are made to the stream if the array reference is handed off.
1:eac0369:  * <p>
1:eac0369:  * Users of this must make the modifications *before* the
1:eac0369:  * next write is done, and then release their hold on the
1:eac0369:  * array.
1:eac0369:    
1:eac0369:  */
1:eac0369: public class AccessibleByteArrayOutputStream extends ByteArrayOutputStream {
1:eac0369: 
1:eac0369: 	public AccessibleByteArrayOutputStream() {
1:eac0369: 		super();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public AccessibleByteArrayOutputStream(int size) {
1:eac0369: 		super(size);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * The caller promises to set their variable to null
1:eac0369: 	 * before any other calls to write to this stream are made.
1:eac0369: 	   Or promises to throw away references to the stream before
1:eac0369: 	   passing the array reference out of its control.
1:eac0369: 	 */
1:eac0369: 	public byte[] getInternalByteArray() {
1:eac0369: 		return buf;
1:eac0369: 	}
1:5a15941:     
1:5a15941:     /**
1:5a15941:      * Read the complete contents of the passed input stream
1:5a15941:      * into this byte array.
1:5a15941:      * @throws IOException 
1:5a15941:      */
1:5a15941:     public void readFrom(InputStream in) throws IOException
1:5a15941:     {
1:5a15941:        byte[] buffer = new byte[8192];
1:5a15941:         
1:5a15941:         for(;;)
1:5a15941:         {
1:5a15941:             int read = in.read(buffer, 0, buf.length);
1:5a15941:             if (read == -1)
1:5a15941:                 break;
1:5a15941:             write(buffer, 0, read);
1:5a15941:         }
1:5a15941:     }
1:5a15941:     
1:5a15941:     /**
1:5a15941:      * Return an InputStream that wraps the valid byte array.
1:5a15941:      * Note that no copy is made of the byte array from the
1:5a15941:      * input stream, it is up to the caller to ensure the correct
1:5a15941:      * co-ordination.
1:5a15941:      */
1:5a15941:     public InputStream getInputStream()
1:5a15941:     {
1:b996023:         return new ByteArrayInputStream(buf, 0, count);
1:5a15941:     }
1:5a15941:     
1:5a15941:     /**
1:5a15941:      * Copy an InputStream into an array of bytes and return
1:5a15941:      * an InputStream against those bytes. The input stream
1:5a15941:      * is copied until EOF is returned. This is useful to provide
1:5a15941:      * streams to applications in order to isolate them from
1:5a15941:      * Derby's internals.
1:5a15941:      * 
1:5a15941:      * @param in InputStream to be copied
1:5a15941:      * @param bufferSize Initial size of the byte array
1:5a15941:      * 
1:5a15941:      * @return InputStream against the raw data.
1:5a15941:      * 
1:5a15941:      * @throws IOException Error reading the stream
1:5a15941:      */
1:5a15941:     public static InputStream copyStream(InputStream in, int bufferSize)
1:5a15941:          throws IOException
1:5a15941:     {
1:5a15941:         AccessibleByteArrayOutputStream raw =
1:5a15941:             new AccessibleByteArrayOutputStream(bufferSize);
1:5a15941:         raw.readFrom(in);
1:5a15941:         return raw.getInputStream();
1:5a15941:     }
1:eac0369: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:b996023
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
1:         return new ByteArrayInputStream(buf, 0, count);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:5a15941
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Read the complete contents of the passed input stream
1:      * into this byte array.
1:      * @throws IOException 
1:      */
1:     public void readFrom(InputStream in) throws IOException
1:     {
1:        byte[] buffer = new byte[8192];
1:         
1:         for(;;)
1:         {
1:             int read = in.read(buffer, 0, buf.length);
1:             if (read == -1)
1:                 break;
1:             write(buffer, 0, read);
1:         }
1:     }
1:     
1:     /**
1:      * Return an InputStream that wraps the valid byte array.
1:      * Note that no copy is made of the byte array from the
1:      * input stream, it is up to the caller to ensure the correct
1:      * co-ordination.
1:      */
1:     public InputStream getInputStream()
1:     {
0:         return new NewByteArrayInputStream(buf, 0, count);
1:     }
1:     
1:     /**
1:      * Copy an InputStream into an array of bytes and return
1:      * an InputStream against those bytes. The input stream
1:      * is copied until EOF is returned. This is useful to provide
1:      * streams to applications in order to isolate them from
1:      * Derby's internals.
1:      * 
1:      * @param in InputStream to be copied
1:      * @param bufferSize Initial size of the byte array
1:      * 
1:      * @return InputStream against the raw data.
1:      * 
1:      * @throws IOException Error reading the stream
1:      */
1:     public static InputStream copyStream(InputStream in, int bufferSize)
1:          throws IOException
1:     {
1:         AccessibleByteArrayOutputStream raw =
1:             new AccessibleByteArrayOutputStream(bufferSize);
1:         raw.readFrom(in);
1:         return raw.getInputStream();
1:     }
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.io;
1: 
1: import java.io.ByteArrayOutputStream;
1: 
1: /**
1:  * This allows us to get to the byte array to go back and
1:  * edit contents or get the array without having a copy made.
1:  <P>
1:    Since a copy is not made, users must be careful that no more
1:    writes are made to the stream if the array reference is handed off.
1:  * <p>
1:  * Users of this must make the modifications *before* the
1:  * next write is done, and then release their hold on the
1:  * array.
1:    
1:  */
1: public class AccessibleByteArrayOutputStream extends ByteArrayOutputStream {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1: 
1: 	public AccessibleByteArrayOutputStream() {
1: 		super();
1: 	}
1: 
1: 	public AccessibleByteArrayOutputStream(int size) {
1: 		super(size);
1: 	}
1: 
1: 	/**
1: 	 * The caller promises to set their variable to null
1: 	 * before any other calls to write to this stream are made.
1: 	   Or promises to throw away references to the stream before
1: 	   passing the array reference out of its control.
1: 	 */
1: 	public byte[] getInternalByteArray() {
1: 		return buf;
1: 	}
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.io
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.io;
0: 
0: import java.io.ByteArrayOutputStream;
0: 
0: /**
0:  * This allows us to get to the byte array to go back and
0:  * edit contents or get the array without having a copy made.
0:  <P>
0:    Since a copy is not made, users must be careful that no more
0:    writes are made to the stream if the array reference is handed off.
0:  * <p>
0:  * Users of this must make the modifications *before* the
0:  * next write is done, and then release their hold on the
0:  * array.
0:    
0:  */
0: public class AccessibleByteArrayOutputStream extends ByteArrayOutputStream {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0: 
0: 	public AccessibleByteArrayOutputStream() {
0: 		super();
0: 	}
0: 
0: 	public AccessibleByteArrayOutputStream(int size) {
0: 		super(size);
0: 	}
0: 
0: 	/**
0: 	 * The caller promises to set their variable to null
0: 	 * before any other calls to write to this stream are made.
0: 	   Or promises to throw away references to the stream before
0: 	   passing the array reference out of its control.
0: 	 */
0: 	public byte[] getInternalByteArray() {
0: 		return buf;
0: 	}
0: }
============================================================================