1:b8d76fa: /*
2:b8d76fa: 
1:c970168:    Derby - Class org.apache.derby.iapi.services.info.Version
1:b8d76fa: 
1:b8d76fa:    Licensed to the Apache Software Foundation (ASF) under one or more
1:b8d76fa:    contributor license agreements.  See the NOTICE file distributed with
1:b8d76fa:    this work for additional information regarding copyright ownership.
1:b8d76fa:    The ASF licenses this file to you under the Apache License, Version 2.0
1:b8d76fa:    (the "License"); you may not use this file except in compliance with
1:b8d76fa:    the License.  You may obtain a copy of the License at
1:b8d76fa: 
1:b8d76fa:       http://www.apache.org/licenses/LICENSE-2.0
1:b8d76fa: 
1:b8d76fa:    Unless required by applicable law or agreed to in writing, software
1:b8d76fa:    distributed under the License is distributed on an "AS IS" BASIS,
1:b8d76fa:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b8d76fa:    See the License for the specific language governing permissions and
1:b8d76fa:    limitations under the License.
1:b8d76fa: 
1:b8d76fa: */
1:b8d76fa: 
1:c970168: package org.apache.derby.iapi.services.info;
1:b8d76fa: 
1:a39951c: import java.security.AccessControlException;
1:a39951c: import java.security.AccessController;
1:a39951c: 
1:c970168: import org.apache.derby.mbeans.VersionMBean;
1:a39951c: import org.apache.derby.security.SystemPermission;
1:b8d76fa: 
1:b8d76fa: /**
1:b8d76fa:  * This implementation of VersionMBean instruments a
1:b8d76fa:  * ProductVersionHolder object. The MBean interface is implemented with 
1:b8d76fa:  * callbacks to the wrapped object which gives detailed version information.
1:b8d76fa:  *
1:b8d76fa:  * @see org.apache.derby.iapi.services.info.ProductVersionHolder
1:b8d76fa:  */
1:b8d76fa: public class Version implements VersionMBean {
1:b8d76fa:     
1:c970168:     private final ProductVersionHolder versionInfo;
1:b8d76fa:     
1:2b80f9b:     /**
1:a39951c:      * Permission target name for the object the version
1:2b80f9b:      * information applies to.
1:2b80f9b:      */
1:2b80f9b:     private final String permissionName;
1:2b80f9b:     
1:2b80f9b:     public Version(ProductVersionHolder pvh, String permissionName) {
1:c970168:         versionInfo = pvh;
1:2b80f9b:         this.permissionName = permissionName;
1:2b80f9b:     }
1:2b80f9b:     
1:2b80f9b:     /*
1:2b80f9b:     ** Security checks(non-Javadoc)
1:2b80f9b:     */
1:2b80f9b:     
1:a39951c:     /**
1:a39951c:      * Ensure caller has permission to monitor Derby.
1:a39951c:      */
1:2b80f9b:     private void checkMonitor() {
1:a39951c: 
1:a39951c:         try {
1:a39951c:             if (System.getSecurityManager() != null)
1:a39951c:                 AccessController.checkPermission(
1:a39951c:                         new SystemPermission(permissionName,
1:a39951c:                                 SystemPermission.MONITOR));
1:a39951c:         } catch (AccessControlException e) {
1:a39951c:             // Need to throw a simplified version as AccessControlException
1:a39951c:             // will have a reference to Derby's SystemPermission which most likely
1:a39951c:             // will not be available on the client.
1:a39951c:             throw new SecurityException(e.getMessage());
1:a39951c:         }
2:b8d76fa:     }
1:b8d76fa:     
1:b8d76fa:     // ------------------------- MBEAN ATTRIBUTES  ----------------------------
1:b8d76fa:     
1:b8d76fa:     public String getProductName(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.getProductName();
1:b8d76fa:     }
1:b8d76fa:     
1:b8d76fa:      public String getProductTechnologyName(){
1:2b80f9b:          checkMonitor();
1:c970168:         return versionInfo.getProductTechnologyName();
1:b8d76fa:     }
1:b8d76fa:     
1:b8d76fa:     public String getProductVendorName(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.getProductVendorName();
1:b8d76fa:     }
1:b8d76fa:     
1:c970168:     public String getVersionString() {
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.getVersionBuildString(true);
1:c970168:     }
1:b8d76fa:     public int getMajorVersion(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.getMajorVersion();
1:b8d76fa:     }
1:b8d76fa:     
1:b8d76fa:     public int getMinorVersion(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.getMinorVersion();
1:b8d76fa:     }
1:b8d76fa:     
1:a3ffa1e:     public int getMaintenanceVersion(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.getMaintVersion();
1:b8d76fa:     }
1:b8d76fa:     
1:b8d76fa:     public String getBuildNumber(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.getBuildNumber();
1:b8d76fa:     }
1:b8d76fa:     
1:c970168:     public boolean isBeta(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.isBeta();
1:b8d76fa:     }
1:b8d76fa:     
1:b8d76fa:     public boolean isAlpha(){
1:2b80f9b:         checkMonitor();
1:c970168:         return versionInfo.isAlpha();
1:b8d76fa:     }
1:b8d76fa:   
1:b8d76fa: }
============================================================================
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:a39951c
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessControlException;
1: import java.security.AccessController;
1: 
1: import org.apache.derby.security.SystemPermission;
/////////////////////////////////////////////////////////////////////////
1:      * Permission target name for the object the version
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Ensure caller has permission to monitor Derby.
1:      */
1: 
1:         try {
1:             if (System.getSecurityManager() != null)
1:                 AccessController.checkPermission(
1:                         new SystemPermission(permissionName,
1:                                 SystemPermission.MONITOR));
1:         } catch (AccessControlException e) {
1:             // Need to throw a simplified version as AccessControlException
1:             // will have a reference to Derby's SystemPermission which most likely
1:             // will not be available on the client.
1:             throw new SecurityException(e.getMessage());
1:         }
commit:2b80f9b
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Permission name for the object the version
1:      * information applies to.
1:      */
1:     private final String permissionName;
1:     
1:     public Version(ProductVersionHolder pvh, String permissionName) {
1:         this.permissionName = permissionName;
1:     }
1:     
1:     /*
1:     ** Security checks(non-Javadoc)
1:     */
1:     
1:     private void checkMonitor() {
0:         // TODO: Add actual check
0:         //new SystemPermission(permissionName, SystemPermission.MONITOR);
1:         checkMonitor();
1:          checkMonitor();
1:         checkMonitor();
1:         checkMonitor();
1:         checkMonitor();
1:         checkMonitor();
1:         checkMonitor();
1:         checkMonitor();
1:         checkMonitor();
1:         checkMonitor();
commit:a3ffa1e
/////////////////////////////////////////////////////////////////////////
1:     public int getMaintenanceVersion(){
/////////////////////////////////////////////////////////////////////////
commit:c970168
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.info.Version
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derby.iapi.services.info;
1: import org.apache.derby.mbeans.VersionMBean;
/////////////////////////////////////////////////////////////////////////
1:     private final ProductVersionHolder versionInfo;
1:         versionInfo = pvh;
1:         return versionInfo.getProductName();
1:         return versionInfo.getProductTechnologyName();
1:         return versionInfo.getProductVendorName();
1:     public String getVersionString() {
1:         return versionInfo.getVersionBuildString(true);
1:     }
1:         return versionInfo.getMajorVersion();
1:         return versionInfo.getMinorVersion();
1:         return versionInfo.getMaintVersion();
1:         return versionInfo.getBuildNumber();
0:         return versionInfo.getBuildNumberAsInt();
1:     public boolean isBeta(){
1:         return versionInfo.isBeta();
1:         return versionInfo.isAlpha();
commit:b8d76fa
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Derby - Class org.apache.derby.mbeans.Version
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
0: package org.apache.derby.mbeans;
1: 
0: import org.apache.derby.iapi.services.info.ProductVersionHolder;
1: 
1: /**
1:  * This implementation of VersionMBean instruments a
1:  * ProductVersionHolder object. The MBean interface is implemented with 
1:  * callbacks to the wrapped object which gives detailed version information.
1:  *
1:  * @see org.apache.derby.iapi.services.info.ProductVersionHolder
1:  */
1: public class Version implements VersionMBean {
1:     
0:     private final ProductVersionHolder engineVersionRef;
1:     
0:     public Version(ProductVersionHolder pvh) {
0:         engineVersionRef = pvh;
1:     }
1:     
1:     // ------------------------- MBEAN ATTRIBUTES  ----------------------------
1:     
1:     public String getProductName(){
0:         return engineVersionRef.getProductName();
1:     }
1:     
1:      public String getProductTechnologyName(){
0:         return engineVersionRef.getProductTechnologyName();
1:     }
1:     
1:     public String getProductVendorName(){
0:         return engineVersionRef.getProductVendorName();
1:     }
1:     
1:     public int getMajorVersion(){
0:         return engineVersionRef.getMajorVersion();
1:     }
1:     
1:     public int getMinorVersion(){
0:         return engineVersionRef.getMinorVersion();
1:     }
1:     
0:     public int getMaintVersion(){
0:         return engineVersionRef.getMaintVersion();
1:     }
1:     
1:     public String getBuildNumber(){
0:         return engineVersionRef.getBuildNumber();
1:     }
1:     
0:     public int getBuildNumberAsInt(){
0:         return engineVersionRef.getBuildNumberAsInt();
1:     }
1:     
0:     public boolean getIsBeta(){
0:         return engineVersionRef.isBeta();
1:     }
1:     
1:     public boolean isAlpha(){
0:         return engineVersionRef.isAlpha();
1:     }
1:   
1: }
============================================================================