1:fd46794: /*
34:eac0369: 
1:fd46794:    Derby - Class org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory
1:fd46794: 
1:f739ad1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f739ad1:    contributor license agreements.  See the NOTICE file distributed with
1:f739ad1:    this work for additional information regarding copyright ownership.
1:f739ad1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f739ad1:    (the "License"); you may not use this file except in compliance with
1:f739ad1:    the License.  You may obtain a copy of the License at
1:fd46794: 
1:fd46794:       http://www.apache.org/licenses/LICENSE-2.0
1:fd46794: 
1:fd46794:    Unless required by applicable law or agreed to in writing, software
1:fd46794:    distributed under the License is distributed on an "AS IS" BASIS,
1:fd46794:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd46794:    See the License for the specific language governing permissions and
1:fd46794:    limitations under the License.
1:fd46794: 
1:fd46794: */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.catalog;
1:eac0369: 
1:1a4ea31: import java.sql.Types;
1:1a4ea31: 
1:eac0369: import org.apache.derby.catalog.AliasInfo;
1:eac0369: import org.apache.derby.catalog.UUID;
1:6fbf669: import org.apache.derby.iapi.error.StandardException;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:6fbf669: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1:6fbf669: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1:6fbf669: import org.apache.derby.iapi.sql.execute.ExecRow;
1:6fbf669: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:6fbf669: import org.apache.derby.iapi.types.DataValueDescriptor;
1:6fbf669: import org.apache.derby.iapi.types.DataValueFactory;
1:4309044: import org.apache.derby.iapi.types.SQLBoolean;
1:eb47bdb: import org.apache.derby.iapi.types.SQLChar;
1:eb47bdb: import org.apache.derby.iapi.types.SQLVarchar;
1:4309044: import org.apache.derby.iapi.types.UserType;
1:eac0369: 
1:eac0369: 
4:eac0369: /**
1:eac0369:  * Factory for creating a SYSALIASES row.
8:eac0369:  *
1:eac0369:  * Here are the directions for adding a new system supplied alias.
1:eac0369:  * Misc:
1:eac0369:  *  All system supplied aliases are class aliases at this point.
1:eac0369:  *	Additional arrays will need to be added if we supply system
1:eac0369:  *	aliases of other types.
1:eac0369:  *	The preloadAliasIDs array is an array of hard coded UUIDs
1:eac0369:  *	for the system supplied aliases.
1:eac0369:  *	The preloadAliases array is the array of aliases
1:eac0369:  *	for the system supplied aliases.  This array is in alphabetical
1:eac0369:  *	order by package and class in Xena.  Each alias is the uppercase
1:eac0369:  *	class name of the alias.
1:eac0369:  *  The preloadJavaClassNames array is the array of full package.class
1:eac0369:  *  names for the system supplied aliases.  This array is in alphabetical
1:eac0369:  *	order by package and class in Xena.  
1:eac0369:  *	SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases
1:eac0369:  *  in a new database.
1:eac0369:  *
1:eac0369:  *
5:eac0369:  */
1:345de35: 
1:eac0369: class SYSALIASESRowFactory extends CatalogRowFactory
5:eac0369: {
1:345de35: 
1:eac0369: 	private static final int		SYSALIASES_COLUMN_COUNT = 9;
1:eac0369: 	private static final int		SYSALIASES_ALIASID = 1;
1:eac0369: 	private static final int		SYSALIASES_ALIAS = 2;
1:eac0369: 	private static final int		SYSALIASES_SCHEMAID = 3;
1:eac0369: 	private static final int		SYSALIASES_JAVACLASSNAME = 4;
1:eac0369: 	private static final int		SYSALIASES_ALIASTYPE = 5;
1:eac0369: 	private static final int		SYSALIASES_NAMESPACE = 6;
1:eac0369: 	private static final int		SYSALIASES_SYSTEMALIAS = 7;
1:eac0369: 	public  static final int		SYSALIASES_ALIASINFO = 8;
1:eac0369: 	private static final int		SYSALIASES_SPECIFIC_NAME = 9;
1:eac0369: 
1:eac0369:  
1:eac0369: 	protected static final int		SYSALIASES_INDEX1_ID = 0;
1:eac0369: 
1:eac0369: 	protected static final int		SYSALIASES_INDEX2_ID = 1;
1:eac0369: 
1:eac0369: 	protected static final int		SYSALIASES_INDEX3_ID = 2;
1:eac0369: 
1:eac0369: 	// null means all unique.
1:eac0369:     private	static	final	boolean[]	uniqueness = null;
1:eac0369: 
1:eac0369: 	private static int[][] indexColumnPositions =
1:eac0369: 	{
1:eac0369: 		{SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},
1:eac0369: 		{SYSALIASES_ALIASID},
1:eac0369: 		{SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},
2:eac0369: 	};
1:eac0369: 
1:eac0369: 	private	static	final	String[]	uuids =
1:eac0369: 	{
1:eac0369: 		 "c013800d-00d7-ddbd-08ce-000a0a411400"	// catalog UUID
1:eac0369: 		,"c013800d-00d7-ddbd-75d4-000a0a411400"	// heap UUID
1:eac0369: 		,"c013800d-00d7-ddbe-b99d-000a0a411400"	// SYSALIASES_INDEX1
1:eac0369: 		,"c013800d-00d7-ddbe-c4e1-000a0a411400"	// SYSALIASES_INDEX2
1:eac0369: 		,"c013800d-00d7-ddbe-34ae-000a0a411400"	// SYSALIASES_INDEX3
1:eac0369: 	};
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	CONSTRUCTORS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:6870e87:     SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1:eac0369: 	{
1:6870e87: 		super(uuidf,ef,dvf);
1:c2ff613: 		initInfo(SYSALIASES_COLUMN_COUNT, "SYSALIASES", indexColumnPositions, uniqueness, uuids);
3:eac0369: 	}
1:eac0369: 
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	METHODS
1:eac0369: 	//
1:eac0369: 	/////////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369:   /**
1:eac0369: 	 * Make a SYSALIASES row
1:eac0369: 	 *
1:eac0369: 	 *
1:eac0369: 	 * @return	Row suitable for inserting into SYSALIASES.
1:eac0369: 	 *
2:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public ExecRow makeRow(TupleDescriptor	td, TupleDescriptor parent)
2:eac0369: 					throws StandardException 
1:eac0369: 	{
1:eac0369: 		DataValueDescriptor		col;
1:eac0369: 		String					schemaID = null;
1:eac0369: 		String					javaClassName = null;
1:eac0369: 		String					sAliasType = null;
1:eac0369: 		String					aliasID = null;
1:eac0369: 		String					aliasName = null;
1:eac0369: 		String					specificName = null;
1:eac0369: 		char					cAliasType = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR;
1:eac0369: 		char					cNameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
1:eac0369: 		boolean					systemAlias = false;
1:eac0369: 		AliasInfo				aliasInfo = null;
1:eac0369: 
1:eac0369: 		if (td != null) {
1:eac0369: 
1:eac0369: 			AliasDescriptor 		ad = (AliasDescriptor)td;
1:eac0369: 			aliasID	= ad.getUUID().toString();
1:eac0369: 			aliasName = ad.getDescriptorName();
1:eac0369: 			schemaID	= ad.getSchemaUUID().toString();
1:eac0369: 			javaClassName	= ad.getJavaClassName();
1:eac0369: 			cAliasType = ad.getAliasType();
1:eac0369: 			cNameSpace = ad.getNameSpace();
1:eac0369: 			systemAlias = ad.getSystemAlias();
1:eac0369: 			aliasInfo = ad.getAliasInfo();
1:eac0369: 			specificName = ad.getSpecificName();
1:eac0369: 
1:eac0369: 			char[] charArray = new char[1];
1:eac0369: 			charArray[0] = cAliasType;
1:eac0369: 			sAliasType = new String(charArray);
1:eac0369: 
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				switch (cAliasType)
1:eac0369: 				{
1:eac0369: 					case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1:eac0369: 					case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1:582425f: 					case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
1:fa292b9: 					case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
1:22d64f5: 					case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
4:eac0369: 						break;
1:eac0369: 
1:eac0369: 					default:
1:eac0369: 						SanityManager.THROWASSERT(
1:eac0369: 							"Unexpected value (" + cAliasType +
1:eac0369: 							") for aliasType");
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* Insert info into sysaliases */
1:eac0369: 
1:eac0369: 		/* RESOLVE - It would be nice to require less knowledge about sysaliases
1:eac0369: 		 * and have this be more table driven.
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		/* Build the row to insert */
1:eac0369: 		ExecRow row = getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT);
1:eac0369: 
2:eac0369: 		/* 1st column is ALIASID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSALIASES_ALIASID, new SQLChar(aliasID));
1:eac0369: 
1:eac0369: 		/* 2nd column is ALIAS (varchar(128))) */
1:eb47bdb: 		row.setColumn(SYSALIASES_ALIAS, new SQLVarchar(aliasName));
1:eac0369: 		//		System.out.println(" added row-- " + aliasName);
1:eac0369: 
1:eac0369: 		/* 3rd column is SCHEMAID (UUID - char(36)) */
1:eb47bdb: 		row.setColumn(SYSALIASES_SCHEMAID, new SQLChar(schemaID));
1:eac0369: 
1:eac0369: 		/* 4th column is JAVACLASSNAME (longvarchar) */
1:eac0369: 		row.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName));
1:eac0369: 
1:eac0369: 		/* 5th column is ALIASTYPE (char(1)) */
1:eb47bdb: 		row.setColumn(SYSALIASES_ALIASTYPE, new SQLChar(sAliasType));
1:eac0369: 
1:eac0369: 		/* 6th column is NAMESPACE (char(1)) */
1:eac0369: 		String sNameSpace = new String(new char[] { cNameSpace });
1:eac0369: 
1:eac0369: 		row.setColumn
1:eb47bdb: 			(SYSALIASES_NAMESPACE, new SQLChar(sNameSpace));
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* 7th column is SYSTEMALIAS (boolean) */
1:eac0369: 		row.setColumn
1:4309044: 			(SYSALIASES_SYSTEMALIAS, new SQLBoolean(systemAlias));
1:eac0369: 
1:eac0369: 		/* 8th column is ALIASINFO (org.apache.derby.catalog.AliasInfo) */
1:eac0369: 		row.setColumn(SYSALIASES_ALIASINFO, 
1:4309044: 			new UserType(aliasInfo));
1:eac0369: 
1:eac0369: 		/* 9th column is specific name */
1:eac0369: 		row.setColumn
1:eb47bdb: 			(SYSALIASES_SPECIFIC_NAME, new SQLVarchar(specificName));
1:eac0369: 
1:eac0369: 
1:eac0369: 		return row;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 	//
1:eac0369: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1:eac0369: 	//
1:eac0369: 	///////////////////////////////////////////////////////////////////////////
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Make a AliasDescriptor out of a SYSALIASES row
1:eac0369: 	 *
1:eac0369: 	 * @param row a SYSALIASES row
1:eac0369: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1:eac0369: 	 * @param dd dataDictionary
1:eac0369: 	 *
1:eac0369: 	 * @exception   StandardException thrown on failure
1:eac0369: 	 */
1:eac0369: 	public TupleDescriptor buildDescriptor(
1:eac0369: 		ExecRow					row,
1:eac0369: 		TupleDescriptor			parentTupleDescriptor,
1:eac0369: 		DataDictionary 			dd )
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(
1:eac0369: 				row.nColumns() == SYSALIASES_COLUMN_COUNT, 
1:eac0369: 				"Wrong number of columns for a SYSALIASES row");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		char				cAliasType;
1:eac0369: 		char				cNameSpace;
1:eac0369: 		DataValueDescriptor	col;
1:eac0369: 		String				aliasID;
1:eac0369: 		UUID				aliasUUID;
1:eac0369: 		String				aliasName;
1:eac0369: 		String				javaClassName;
1:eac0369: 		String				sAliasType;
1:eac0369: 		String				sNameSpace;
1:eac0369: 		String				typeStr;
1:eac0369: 		boolean				systemAlias = false;
1:eac0369: 		AliasInfo			aliasInfo = null;
1:eac0369: 
1:eac0369: 		/* 1st column is ALIASID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSALIASES_ALIASID);
1:eac0369: 		aliasID = col.getString();
1:eac0369: 		aliasUUID = getUUIDFactory().recreateUUID(aliasID);
1:eac0369: 
2:eac0369: 		/* 2nd column is ALIAS (varchar(128)) */
1:eac0369: 		col = row.getColumn(SYSALIASES_ALIAS);
1:eac0369: 		aliasName = col.getString();
1:eac0369: 
1:eac0369: 		/* 3rd column is SCHEMAID (UUID - char(36)) */
1:eac0369: 		col = row.getColumn(SYSALIASES_SCHEMAID);
1:eac0369: 		UUID schemaUUID = col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString());
1:eac0369: 
1:eac0369: 		/* 4th column is JAVACLASSNAME (longvarchar) */
1:eac0369: 		col = row.getColumn(SYSALIASES_JAVACLASSNAME);
1:eac0369: 		javaClassName = col.getString();
1:eac0369: 
1:eac0369: 		/* 5th column is ALIASTYPE (char(1)) */
1:eac0369: 		col = row.getColumn(SYSALIASES_ALIASTYPE);
1:eac0369: 		sAliasType = col.getString();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(sAliasType.length() == 1, 
1:eac0369: 				"Fifth column (aliastype) type incorrect");
1:eac0369: 			switch (sAliasType.charAt(0))
1:eac0369: 			{
1:eac0369: 				case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR: 
1:eac0369: 				case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR: 
1:582425f: 				case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: 
1:fa292b9: 				case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: 
1:22d64f5: 				case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR: 
1:eac0369: 					break;
1:eac0369: 
1:eac0369: 				default: 
1:eac0369: 					SanityManager.THROWASSERT("Invalid type value '"
1:eac0369: 							+sAliasType+ "' for  alias");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		cAliasType = sAliasType.charAt(0);
1:eac0369: 
1:eac0369: 		/* 6th column is NAMESPACE (char(1)) */
1:eac0369: 		col = row.getColumn(SYSALIASES_NAMESPACE);
1:eac0369: 		sNameSpace = col.getString();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(sNameSpace.length() == 1, 
1:eac0369: 				"Sixth column (namespace) type incorrect");
1:eac0369: 			switch (sNameSpace.charAt(0))
1:eac0369: 			{
1:eac0369: 				case AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR: 
1:eac0369: 				case AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR: 
1:582425f: 				case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: 
1:fa292b9: 				case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: 
1:22d64f5: 				case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR: 
1:eac0369: 					break;
1:eac0369: 
1:eac0369: 				default: 
1:eac0369: 					SanityManager.THROWASSERT("Invalid type value '"
1:eac0369: 							+sNameSpace+ "' for  alias");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		cNameSpace = sNameSpace.charAt(0);
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* 7th column is SYSTEMALIAS (boolean) */
1:eac0369: 		col = row.getColumn(SYSALIASES_SYSTEMALIAS);
1:eac0369: 		systemAlias = col.getBoolean();
1:eac0369: 
1:eac0369: 		/* 8th column is ALIASINFO (org.apache.derby.catalog.AliasInfo) */
1:eac0369: 		col = row.getColumn(SYSALIASES_ALIASINFO);
1:eac0369: 		aliasInfo = (AliasInfo) col.getObject();
1:eac0369: 
1:eac0369: 		/* 9th column is specific name */
1:eac0369: 		col = row.getColumn(SYSALIASES_SPECIFIC_NAME);
1:eac0369: 		String specificName = col.getString();
1:eac0369: 
1:eac0369: 
1:eac0369: 		/* now build and return the descriptor */
1:eac0369: 		return new AliasDescriptor(dd, aliasUUID, aliasName,
1:eac0369: 										schemaUUID, javaClassName, cAliasType,
1:eac0369: 										cNameSpace, systemAlias,
1:eac0369: 										aliasInfo, specificName);
1:eac0369: 	}
1:eac0369: 
1:4b3350c:     /**
1:4b3350c:      * Builds a list of columns suitable for creating this Catalog.
1:4b3350c:      * DERBY-1734 fixed an issue where older code created the
1:4b3350c:      * BOOLEAN column SYSTEMALIAS with maximum length 0 instead of 1.
1:4b3350c:      * DERBY-1742 was opened to track if upgrade changes are needed.
1:4b3350c:      *
1:4b3350c:      *
1:4b3350c:      * @return array of SystemColumn suitable for making this catalog.
1:4b3350c:      */
1:4b3350c:     public SystemColumn[]   buildColumnList()
1:2a5922a:         throws StandardException
1:4b3350c:     {
1:4b3350c:       return new SystemColumn[] {
1:4b3350c:         
1:4b3350c:         SystemColumnImpl.getUUIDColumn("ALIASID", false),
1:4b3350c:         SystemColumnImpl.getIdentifierColumn("ALIAS", false),
1:4b3350c:         SystemColumnImpl.getUUIDColumn("SCHEMAID", true),
1:4b3350c:         SystemColumnImpl.getColumn("JAVACLASSNAME",
1:4b3350c:                 java.sql.Types.LONGVARCHAR, false, Integer.MAX_VALUE),
1:4b3350c:         SystemColumnImpl.getIndicatorColumn("ALIASTYPE"),
1:4b3350c:         SystemColumnImpl.getIndicatorColumn("NAMESPACE"),
1:4b3350c:         SystemColumnImpl.getColumn("SYSTEMALIAS",
1:1a4ea31:                 Types.BOOLEAN, false),
1:4b3350c:         SystemColumnImpl.getJavaColumn("ALIASINFO",
1:4b3350c:                 "org.apache.derby.catalog.AliasInfo", true),
1:4b3350c:         SystemColumnImpl.getIdentifierColumn("SPECIFICNAME", false)
1:4b3350c:         };
1:4b3350c:     }
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:4309044
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLBoolean;
1: import org.apache.derby.iapi.types.UserType;
/////////////////////////////////////////////////////////////////////////
1: 			(SYSALIASES_SYSTEMALIAS, new SQLBoolean(systemAlias));
1: 			new UserType(aliasInfo));
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:22d64f5
/////////////////////////////////////////////////////////////////////////
1: 					case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR:
/////////////////////////////////////////////////////////////////////////
1: 				case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR: 
/////////////////////////////////////////////////////////////////////////
1: 				case AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR: 
commit:2a5922a
/////////////////////////////////////////////////////////////////////////
1:         throws StandardException
commit:fa292b9
/////////////////////////////////////////////////////////////////////////
1: 					case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR:
/////////////////////////////////////////////////////////////////////////
1: 				case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: 
/////////////////////////////////////////////////////////////////////////
1: 				case AliasInfo.ALIAS_TYPE_UDT_AS_CHAR: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1a4ea31
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Types;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 Types.BOOLEAN, false),
commit:6870e87
/////////////////////////////////////////////////////////////////////////
1:     SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf)
1: 		super(uuidf,ef,dvf);
commit:eb47bdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.types.SQLChar;
1: import org.apache.derby.iapi.types.SQLVarchar;
/////////////////////////////////////////////////////////////////////////
1: 		row.setColumn(SYSALIASES_ALIASID, new SQLChar(aliasID));
1: 		row.setColumn(SYSALIASES_ALIAS, new SQLVarchar(aliasName));
1: 		row.setColumn(SYSALIASES_SCHEMAID, new SQLChar(schemaID));
1: 		row.setColumn(SYSALIASES_ALIASTYPE, new SQLChar(sAliasType));
1: 			(SYSALIASES_NAMESPACE, new SQLChar(sNameSpace));
/////////////////////////////////////////////////////////////////////////
1: 			(SYSALIASES_SPECIFIC_NAME, new SQLVarchar(specificName));
commit:6fbf669
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.JDBC30Translation;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
1: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
1: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
1: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.types.DataValueFactory;
commit:7aa6fa8
/////////////////////////////////////////////////////////////////////////
commit:c2ff613
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		initInfo(SYSALIASES_COLUMN_COUNT, "SYSALIASES", indexColumnPositions, uniqueness, uuids);
commit:4b3350c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.reference.JDBC30Translation;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Builds a list of columns suitable for creating this Catalog.
1:      * DERBY-1734 fixed an issue where older code created the
1:      * BOOLEAN column SYSTEMALIAS with maximum length 0 instead of 1.
1:      * DERBY-1742 was opened to track if upgrade changes are needed.
1:      *
1:      *
1:      * @return array of SystemColumn suitable for making this catalog.
1:      */
1:     public SystemColumn[]   buildColumnList()
1:     {
1:       return new SystemColumn[] {
1:         
1:         SystemColumnImpl.getUUIDColumn("ALIASID", false),
1:         SystemColumnImpl.getIdentifierColumn("ALIAS", false),
1:         SystemColumnImpl.getUUIDColumn("SCHEMAID", true),
1:         SystemColumnImpl.getColumn("JAVACLASSNAME",
1:                 java.sql.Types.LONGVARCHAR, false, Integer.MAX_VALUE),
1:         SystemColumnImpl.getIndicatorColumn("ALIASTYPE"),
1:         SystemColumnImpl.getIndicatorColumn("NAMESPACE"),
1:         SystemColumnImpl.getColumn("SYSTEMALIAS",
0:                 JDBC30Translation.SQL_TYPES_BOOLEAN, false),
1:         SystemColumnImpl.getJavaColumn("ALIASINFO",
1:                 "org.apache.derby.catalog.AliasInfo", true),
1:         SystemColumnImpl.getIdentifierColumn("SPECIFICNAME", false)
1:         };
1:     }
commit:fd46794
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
commit:345de35
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Copyright 2000, 2001WESTHAM
1: 
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
1:  *
0:  * Product ID: 5697-F53
1:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
1:  */
1: 
1: package org.apache.derby.impl.sql.catalog;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
1: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
1: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: 
1: import org.apache.derby.catalog.AliasInfo;
1: import org.apache.derby.catalog.UUID;
1: 
1: 
1: /**
1:  * Factory for creating a SYSALIASES row.
1:  *
1:  * Here are the directions for adding a new system supplied alias.
1:  * Misc:
1:  *  All system supplied aliases are class aliases at this point.
1:  *	Additional arrays will need to be added if we supply system
1:  *	aliases of other types.
1:  *	The preloadAliasIDs array is an array of hard coded UUIDs
1:  *	for the system supplied aliases.
1:  *	The preloadAliases array is the array of aliases
1:  *	for the system supplied aliases.  This array is in alphabetical
1:  *	order by package and class in Xena.  Each alias is the uppercase
1:  *	class name of the alias.
1:  *  The preloadJavaClassNames array is the array of full package.class
1:  *  names for the system supplied aliases.  This array is in alphabetical
1:  *	order by package and class in Xena.  
1:  *	SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases
1:  *  in a new database.
1:  *
1:  *
0:  * @author jerry
1:  */
1: 
1: class SYSALIASESRowFactory extends CatalogRowFactory
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 
1: 	private static final int		SYSALIASES_COLUMN_COUNT = 9;
1: 	private static final int		SYSALIASES_ALIASID = 1;
1: 	private static final int		SYSALIASES_ALIAS = 2;
1: 	private static final int		SYSALIASES_SCHEMAID = 3;
1: 	private static final int		SYSALIASES_JAVACLASSNAME = 4;
1: 	private static final int		SYSALIASES_ALIASTYPE = 5;
1: 	private static final int		SYSALIASES_NAMESPACE = 6;
1: 	private static final int		SYSALIASES_SYSTEMALIAS = 7;
1: 	public  static final int		SYSALIASES_ALIASINFO = 8;
1: 	private static final int		SYSALIASES_SPECIFIC_NAME = 9;
1: 
1:  
1: 	protected static final int		SYSALIASES_INDEX1_ID = 0;
1: 
1: 	protected static final int		SYSALIASES_INDEX2_ID = 1;
1: 
1: 	protected static final int		SYSALIASES_INDEX3_ID = 2;
1: 
1: 	// null means all unique.
1:     private	static	final	boolean[]	uniqueness = null;
1: 
1: 	private static int[][] indexColumnPositions =
1: 	{
1: 		{SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},
1: 		{SYSALIASES_ALIASID},
1: 		{SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},
1: 	};
1: 
0: 	private static String[][] indexColumnNames =
1: 	{
0: 		{"SCHEMAID", "ALIAS", "NAMESPACE"},
0: 		{"ALIASID"},
0: 		{"SCHEMAID", "SPECIFICNAME"},
1: 	};
1: 
1: 	private	static	final	String[]	uuids =
1: 	{
1: 		 "c013800d-00d7-ddbd-08ce-000a0a411400"	// catalog UUID
1: 		,"c013800d-00d7-ddbd-75d4-000a0a411400"	// heap UUID
1: 		,"c013800d-00d7-ddbe-b99d-000a0a411400"	// SYSALIASES_INDEX1
1: 		,"c013800d-00d7-ddbe-c4e1-000a0a411400"	// SYSALIASES_INDEX2
1: 		,"c013800d-00d7-ddbe-34ae-000a0a411400"	// SYSALIASES_INDEX3
1: 	};
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	CONSTRUCTORS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
0:     public	SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
1: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSALIASES_COLUMN_COUNT, "SYSALIASES", indexColumnPositions, indexColumnNames, uniqueness, uuids);
1: 	}
1: 
1: 	/////////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	METHODS
1: 	//
1: 	/////////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1: 	 * Make a SYSALIASES row
1: 	 *
0: 	 * @param emptyRow		Make an empty row if this parameter is true
0: 	 * @param ad			Alias descriptor
0: 	 * @param dvf			A DataValueFactory
1: 	 *
1: 	 * @return	Row suitable for inserting into SYSALIASES.
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public ExecRow makeRow(TupleDescriptor	td, TupleDescriptor parent)
1: 					throws StandardException 
1: 	{
1: 		DataValueDescriptor		col;
1: 		String					schemaID = null;
1: 		String					javaClassName = null;
1: 		String					sAliasType = null;
1: 		String					aliasID = null;
1: 		String					aliasName = null;
1: 		String					specificName = null;
1: 		char					cAliasType = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR;
1: 		char					cNameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
1: 		boolean					systemAlias = false;
1: 		AliasInfo				aliasInfo = null;
1: 
1: 		if (td != null) {
1: 
1: 			AliasDescriptor 		ad = (AliasDescriptor)td;
1: 			aliasID	= ad.getUUID().toString();
1: 			aliasName = ad.getDescriptorName();
1: 			schemaID	= ad.getSchemaUUID().toString();
1: 			javaClassName	= ad.getJavaClassName();
1: 			cAliasType = ad.getAliasType();
1: 			cNameSpace = ad.getNameSpace();
1: 			systemAlias = ad.getSystemAlias();
1: 			aliasInfo = ad.getAliasInfo();
1: 			specificName = ad.getSpecificName();
1: 
1: 			char[] charArray = new char[1];
1: 			charArray[0] = cAliasType;
1: 			sAliasType = new String(charArray);
1: 
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				switch (cAliasType)
1: 				{
1: 					case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
1: 					case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
1: 						break;
1: 
1: 					default:
1: 						SanityManager.THROWASSERT(
1: 							"Unexpected value (" + cAliasType +
1: 							") for aliasType");
1: 				}
1: 			}
1: 		}
1: 
1: 
1: 		/* Insert info into sysaliases */
1: 
1: 		/* RESOLVE - It would be nice to require less knowledge about sysaliases
1: 		 * and have this be more table driven.
1: 		 */
1: 
1: 		/* Build the row to insert */
1: 		ExecRow row = getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT);
1: 
1: 		/* 1st column is ALIASID (UUID - char(36)) */
0: 		row.setColumn(SYSALIASES_ALIASID, dvf.getCharDataValue(aliasID));
1: 
1: 		/* 2nd column is ALIAS (varchar(128))) */
0: 		row.setColumn(SYSALIASES_ALIAS, dvf.getVarcharDataValue(aliasName));
1: 		//		System.out.println(" added row-- " + aliasName);
1: 
1: 		/* 3rd column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSALIASES_SCHEMAID, dvf.getCharDataValue(schemaID));
1: 
1: 		/* 4th column is JAVACLASSNAME (longvarchar) */
1: 		row.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName));
1: 
1: 		/* 5th column is ALIASTYPE (char(1)) */
0: 		row.setColumn(SYSALIASES_ALIASTYPE, dvf.getCharDataValue(sAliasType));
1: 
1: 		/* 6th column is NAMESPACE (char(1)) */
1: 		String sNameSpace = new String(new char[] { cNameSpace });
1: 
1: 		row.setColumn
0: 			(SYSALIASES_NAMESPACE, dvf.getCharDataValue(sNameSpace));
1: 
1: 
1: 		/* 7th column is SYSTEMALIAS (boolean) */
1: 		row.setColumn
0: 			(SYSALIASES_SYSTEMALIAS, dvf.getDataValue(systemAlias));
1: 
1: 		/* 8th column is ALIASINFO (org.apache.derby.catalog.AliasInfo) */
1: 		row.setColumn(SYSALIASES_ALIASINFO, 
0: 			dvf.getDataValue(aliasInfo));
1: 
1: 		/* 9th column is specific name */
1: 		row.setColumn
0: 			(SYSALIASES_SPECIFIC_NAME, dvf.getVarcharDataValue(specificName));
1: 
1: 
1: 		return row;
1: 	}
1: 
1: 	/**
0: 	 * Builds an empty index row.
1: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
1: 	 *
0: 	 * @return corresponding empty index row
1: 	 * @exception   StandardException thrown on failure
1: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
1: 			throws StandardException
1: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
1: 
0: 		row.setColumn(ncols + 1, rowLocation);		
1: 
0: 		switch( indexNumber )
1: 		{
0: 		    case SYSALIASES_INDEX1_ID:
0: 				/* 1st column is SCHEMAID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 
1: 				/* 2nd column is ALIAS (varchar(128)) */
0: 				row.setColumn(2, getDataValueFactory().getVarcharDataValue((String) null));
1: 
0: 				/* 3rd column is NAMESPACE (char(1)) */
0: 				row.setColumn(3, getDataValueFactory().getCharDataValue((String) null));
1: 
1: 				break;
1: 
0: 		    case SYSALIASES_INDEX2_ID:
1: 				/* 1st column is ALIASID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 
1: 				break;
1: 
0: 		    case SYSALIASES_INDEX3_ID:
0: 				/* 1st column is SCHEMAID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
1: 
0: 				/* 2nd column is SPECIFICNAME (varchar(128)) */
0: 				row.setColumn(2, getDataValueFactory().getVarcharDataValue((String) null));
1: 
1: 				break;
0: 		}	// end switch
1: 
0: 		return	row;
1: 	}
1: 
1: 	///////////////////////////////////////////////////////////////////////////
1: 	//
1: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
1: 	//
1: 	///////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Make a AliasDescriptor out of a SYSALIASES row
1: 	 *
1: 	 * @param row a SYSALIASES row
1: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
1: 	 * @param dd dataDictionary
1: 	 *
1: 	 * @exception   StandardException thrown on failure
1: 	 */
1: 	public TupleDescriptor buildDescriptor(
1: 		ExecRow					row,
1: 		TupleDescriptor			parentTupleDescriptor,
1: 		DataDictionary 			dd )
1: 					throws StandardException
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(
1: 				row.nColumns() == SYSALIASES_COLUMN_COUNT, 
1: 				"Wrong number of columns for a SYSALIASES row");
1: 		}
1: 
1: 		char				cAliasType;
1: 		char				cNameSpace;
1: 		DataValueDescriptor	col;
1: 		String				aliasID;
1: 		UUID				aliasUUID;
1: 		String				aliasName;
1: 		String				javaClassName;
1: 		String				sAliasType;
1: 		String				sNameSpace;
1: 		String				typeStr;
1: 		boolean				systemAlias = false;
1: 		AliasInfo			aliasInfo = null;
1: 
1: 		/* 1st column is ALIASID (UUID - char(36)) */
1: 		col = row.getColumn(SYSALIASES_ALIASID);
1: 		aliasID = col.getString();
1: 		aliasUUID = getUUIDFactory().recreateUUID(aliasID);
1: 
1: 		/* 2nd column is ALIAS (varchar(128)) */
1: 		col = row.getColumn(SYSALIASES_ALIAS);
1: 		aliasName = col.getString();
1: 
1: 		/* 3rd column is SCHEMAID (UUID - char(36)) */
1: 		col = row.getColumn(SYSALIASES_SCHEMAID);
1: 		UUID schemaUUID = col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString());
1: 
1: 		/* 4th column is JAVACLASSNAME (longvarchar) */
1: 		col = row.getColumn(SYSALIASES_JAVACLASSNAME);
1: 		javaClassName = col.getString();
1: 
1: 		/* 5th column is ALIASTYPE (char(1)) */
1: 		col = row.getColumn(SYSALIASES_ALIASTYPE);
1: 		sAliasType = col.getString();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(sAliasType.length() == 1, 
1: 				"Fifth column (aliastype) type incorrect");
1: 			switch (sAliasType.charAt(0))
1: 			{
1: 				case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR: 
1: 				case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR: 
1: 					break;
1: 
1: 				default: 
1: 					SanityManager.THROWASSERT("Invalid type value '"
1: 							+sAliasType+ "' for  alias");
1: 			}
1: 		}
1: 
1: 		cAliasType = sAliasType.charAt(0);
1: 
1: 		/* 6th column is NAMESPACE (char(1)) */
1: 		col = row.getColumn(SYSALIASES_NAMESPACE);
1: 		sNameSpace = col.getString();
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(sNameSpace.length() == 1, 
1: 				"Sixth column (namespace) type incorrect");
1: 			switch (sNameSpace.charAt(0))
1: 			{
1: 				case AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR: 
1: 				case AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR: 
1: 					break;
1: 
1: 				default: 
1: 					SanityManager.THROWASSERT("Invalid type value '"
1: 							+sNameSpace+ "' for  alias");
1: 			}
1: 		}
1: 
1: 		cNameSpace = sNameSpace.charAt(0);
1: 
1: 
1: 		/* 7th column is SYSTEMALIAS (boolean) */
1: 		col = row.getColumn(SYSALIASES_SYSTEMALIAS);
1: 		systemAlias = col.getBoolean();
1: 
1: 		/* 8th column is ALIASINFO (org.apache.derby.catalog.AliasInfo) */
1: 		col = row.getColumn(SYSALIASES_ALIASINFO);
1: 		aliasInfo = (AliasInfo) col.getObject();
1: 
1: 		/* 9th column is specific name */
1: 		col = row.getColumn(SYSALIASES_SPECIFIC_NAME);
1: 		String specificName = col.getString();
1: 
1: 
1: 		/* now build and return the descriptor */
1: 		return new AliasDescriptor(dd, aliasUUID, aliasName,
1: 										schemaUUID, javaClassName, cAliasType,
1: 										cNameSpace, systemAlias,
1: 										aliasInfo, specificName);
1: 	}
1: 
1: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
1: 	 *
1: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
1: 	 */
0: 	public SystemColumn[]	buildColumnList()
1: 	{
0: 		SystemColumn[]			columnList = new SystemColumn[SYSALIASES_COLUMN_COUNT];
1: 
0: 		// describe columns
1: 
0: 		columnList[0] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ALIASID"),			// column name
0: 							1,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
1: 
0: 		columnList[1] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ALIAS"),			// column name
0: 							2,	// column number
0: 							false				// nullability
0: 			               );
1: 
0: 		columnList[2] = new SystemColumnImpl(	
0: 								convertIdCase( "SCHEMAID"),			// column name
0: 								3,	// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								true,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
1: 
0: 		columnList[3] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "JAVACLASSNAME"),		// column name
0: 							4,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"LONG VARCHAR",			// dataType
0: 							true,				// built-in type
0: 							Integer.MAX_VALUE	// maxLength
0: 							);
1: 
0: 		columnList[4] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ALIASTYPE"),		// column name
0: 							5,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 							);
1: 
0: 		columnList[5] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "NAMESPACE"),		// column name
0: 							6,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 							);
1: 
0: 		columnList[6] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "SYSTEMALIAS"),		// column name
0: 							7,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							0					// maxLength
0: 							);
1: 
0: 		columnList[7] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "ALIASINFO"),			// column name
0: 							8,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"org.apache.derby.catalog.AliasInfo",	    // dataType
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
0: 			               );
1: 
0: 		columnList[8] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "SPECIFICNAME"),
0: 							9,	// column number
0: 							false				// nullability
0: 			               );
1: 
0: 		return	columnList;
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f739ad1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:582425f
/////////////////////////////////////////////////////////////////////////
1: 					case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR:
/////////////////////////////////////////////////////////////////////////
1: 				case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: 
/////////////////////////////////////////////////////////////////////////
1: 				case AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /* IBM Confidential
0:  *
0:  * Product ID: 5697-F53
0:  *
0:  * (C) Copyright IBM Corp. 2000, 2001
0:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  */
0: 
0: package org.apache.derby.impl.sql.catalog;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.sql.dictionary.SystemColumn;
0: import org.apache.derby.catalog.TypeDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.types.RowLocation;
0: 
0: import org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
0: import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.DataDictionaryContext;
0: import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecutionContext;
0: import org.apache.derby.iapi.sql.execute.ExecIndexRow;
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: 
0: import org.apache.derby.catalog.AliasInfo;
0: import org.apache.derby.catalog.UUID;
0: 
0: 
0: /**
0:  * Factory for creating a SYSALIASES row.
0:  *
0:  * Here are the directions for adding a new system supplied alias.
0:  * Misc:
0:  *  All system supplied aliases are class aliases at this point.
0:  *	Additional arrays will need to be added if we supply system
0:  *	aliases of other types.
0:  *	The preloadAliasIDs array is an array of hard coded UUIDs
0:  *	for the system supplied aliases.
0:  *	The preloadAliases array is the array of aliases
0:  *	for the system supplied aliases.  This array is in alphabetical
0:  *	order by package and class in Xena.  Each alias is the uppercase
0:  *	class name of the alias.
0:  *  The preloadJavaClassNames array is the array of full package.class
0:  *  names for the system supplied aliases.  This array is in alphabetical
0:  *	order by package and class in Xena.  
0:  *	SYSALIASES_NUM_BOOT_ROWS is the number of boot rows in sys.sysaliases
0:  *  in a new database.
0:  *
0:  *
0:  * @author jerry
0:  */
0: 
0: class SYSALIASESRowFactory extends CatalogRowFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 
0: 	private static final int		SYSALIASES_COLUMN_COUNT = 9;
0: 	private static final int		SYSALIASES_ALIASID = 1;
0: 	private static final int		SYSALIASES_ALIAS = 2;
0: 	private static final int		SYSALIASES_SCHEMAID = 3;
0: 	private static final int		SYSALIASES_JAVACLASSNAME = 4;
0: 	private static final int		SYSALIASES_ALIASTYPE = 5;
0: 	private static final int		SYSALIASES_NAMESPACE = 6;
0: 	private static final int		SYSALIASES_SYSTEMALIAS = 7;
0: 	public  static final int		SYSALIASES_ALIASINFO = 8;
0: 	private static final int		SYSALIASES_SPECIFIC_NAME = 9;
0: 
0:  
0: 	protected static final int		SYSALIASES_INDEX1_ID = 0;
0: 
0: 	protected static final int		SYSALIASES_INDEX2_ID = 1;
0: 
0: 	protected static final int		SYSALIASES_INDEX3_ID = 2;
0: 
0: 	// null means all unique.
0:     private	static	final	boolean[]	uniqueness = null;
0: 
0: 	private static int[][] indexColumnPositions =
0: 	{
0: 		{SYSALIASES_SCHEMAID, SYSALIASES_ALIAS, SYSALIASES_NAMESPACE},
0: 		{SYSALIASES_ALIASID},
0: 		{SYSALIASES_SCHEMAID, SYSALIASES_SPECIFIC_NAME},
0: 	};
0: 
0: 	private static String[][] indexColumnNames =
0: 	{
0: 		{"SCHEMAID", "ALIAS", "NAMESPACE"},
0: 		{"ALIASID"},
0: 		{"SCHEMAID", "SPECIFICNAME"},
0: 	};
0: 
0: 	private	static	final	String[]	uuids =
0: 	{
0: 		 "c013800d-00d7-ddbd-08ce-000a0a411400"	// catalog UUID
0: 		,"c013800d-00d7-ddbd-75d4-000a0a411400"	// heap UUID
0: 		,"c013800d-00d7-ddbe-b99d-000a0a411400"	// SYSALIASES_INDEX1
0: 		,"c013800d-00d7-ddbe-c4e1-000a0a411400"	// SYSALIASES_INDEX2
0: 		,"c013800d-00d7-ddbe-34ae-000a0a411400"	// SYSALIASES_INDEX3
0: 	};
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	CONSTRUCTORS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:     public	SYSALIASESRowFactory(UUIDFactory uuidf, ExecutionFactory ef, DataValueFactory dvf,
0:                                  boolean convertIdToLower)
0: 	{
0: 		super(uuidf,ef,dvf,convertIdToLower);
0: 		initInfo(SYSALIASES_COLUMN_COUNT, "SYSALIASES", indexColumnPositions, indexColumnNames, uniqueness, uuids);
0: 	}
0: 
0: 	/////////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	METHODS
0: 	//
0: 	/////////////////////////////////////////////////////////////////////////////
0: 
0:   /**
0: 	 * Make a SYSALIASES row
0: 	 *
0: 	 * @param emptyRow		Make an empty row if this parameter is true
0: 	 * @param ad			Alias descriptor
0: 	 * @param dvf			A DataValueFactory
0: 	 *
0: 	 * @return	Row suitable for inserting into SYSALIASES.
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecRow makeRow(TupleDescriptor	td, TupleDescriptor parent)
0: 					throws StandardException 
0: 	{
0: 		DataValueDescriptor		col;
0: 		String					schemaID = null;
0: 		String					javaClassName = null;
0: 		String					sAliasType = null;
0: 		String					aliasID = null;
0: 		String					aliasName = null;
0: 		String					specificName = null;
0: 		char					cAliasType = AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR;
0: 		char					cNameSpace = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR;
0: 		boolean					systemAlias = false;
0: 		AliasInfo				aliasInfo = null;
0: 
0: 		if (td != null) {
0: 
0: 			AliasDescriptor 		ad = (AliasDescriptor)td;
0: 			aliasID	= ad.getUUID().toString();
0: 			aliasName = ad.getDescriptorName();
0: 			schemaID	= ad.getSchemaUUID().toString();
0: 			javaClassName	= ad.getJavaClassName();
0: 			cAliasType = ad.getAliasType();
0: 			cNameSpace = ad.getNameSpace();
0: 			systemAlias = ad.getSystemAlias();
0: 			aliasInfo = ad.getAliasInfo();
0: 			specificName = ad.getSpecificName();
0: 
0: 			char[] charArray = new char[1];
0: 			charArray[0] = cAliasType;
0: 			sAliasType = new String(charArray);
0: 
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				switch (cAliasType)
0: 				{
0: 					case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR:
0: 					case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR:
0: 						break;
0: 
0: 					default:
0: 						SanityManager.THROWASSERT(
0: 							"Unexpected value (" + cAliasType +
0: 							") for aliasType");
0: 				}
0: 			}
0: 		}
0: 
0: 
0: 		/* Insert info into sysaliases */
0: 
0: 		/* RESOLVE - It would be nice to require less knowledge about sysaliases
0: 		 * and have this be more table driven.
0: 		 */
0: 
0: 		/* Build the row to insert */
0: 		ExecRow row = getExecutionFactory().getValueRow(SYSALIASES_COLUMN_COUNT);
0: 
0: 		/* 1st column is ALIASID (UUID - char(36)) */
0: 		row.setColumn(SYSALIASES_ALIASID, dvf.getCharDataValue(aliasID));
0: 
0: 		/* 2nd column is ALIAS (varchar(128))) */
0: 		row.setColumn(SYSALIASES_ALIAS, dvf.getVarcharDataValue(aliasName));
0: 		//		System.out.println(" added row-- " + aliasName);
0: 
0: 		/* 3rd column is SCHEMAID (UUID - char(36)) */
0: 		row.setColumn(SYSALIASES_SCHEMAID, dvf.getCharDataValue(schemaID));
0: 
0: 		/* 4th column is JAVACLASSNAME (longvarchar) */
0: 		row.setColumn(SYSALIASES_JAVACLASSNAME, dvf.getLongvarcharDataValue(javaClassName));
0: 
0: 		/* 5th column is ALIASTYPE (char(1)) */
0: 		row.setColumn(SYSALIASES_ALIASTYPE, dvf.getCharDataValue(sAliasType));
0: 
0: 		/* 6th column is NAMESPACE (char(1)) */
0: 		String sNameSpace = new String(new char[] { cNameSpace });
0: 
0: 		row.setColumn
0: 			(SYSALIASES_NAMESPACE, dvf.getCharDataValue(sNameSpace));
0: 
0: 
0: 		/* 7th column is SYSTEMALIAS (boolean) */
0: 		row.setColumn
0: 			(SYSALIASES_SYSTEMALIAS, dvf.getDataValue(systemAlias));
0: 
0: 		/* 8th column is ALIASINFO (org.apache.derby.catalog.AliasInfo) */
0: 		row.setColumn(SYSALIASES_ALIASINFO, 
0: 			dvf.getDataValue(aliasInfo));
0: 
0: 		/* 9th column is specific name */
0: 		row.setColumn
0: 			(SYSALIASES_SPECIFIC_NAME, dvf.getVarcharDataValue(specificName));
0: 
0: 
0: 		return row;
0: 	}
0: 
0: 	/**
0: 	 * Builds an empty index row.
0: 	 *
0: 	 *	@param	indexNumber	Index to build empty row for.
0: 	 *  @param  rowLocation	Row location for last column of index row
0: 	 *
0: 	 * @return corresponding empty index row
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public ExecIndexRow	buildEmptyIndexRow( int indexNumber,
0: 											RowLocation rowLocation) 
0: 			throws StandardException
0: 	{
0: 		int ncols = getIndexColumnCount(indexNumber);
0: 		ExecIndexRow row = getExecutionFactory().getIndexableRow(ncols + 1);
0: 
0: 		row.setColumn(ncols + 1, rowLocation);		
0: 
0: 		switch( indexNumber )
0: 		{
0: 		    case SYSALIASES_INDEX1_ID:
0: 				/* 1st column is SCHEMAID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				/* 2nd column is ALIAS (varchar(128)) */
0: 				row.setColumn(2, getDataValueFactory().getVarcharDataValue((String) null));
0: 
0: 				/* 3rd column is NAMESPACE (char(1)) */
0: 				row.setColumn(3, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		    case SYSALIASES_INDEX2_ID:
0: 				/* 1st column is ALIASID (UUID - char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				break;
0: 
0: 		    case SYSALIASES_INDEX3_ID:
0: 				/* 1st column is SCHEMAID (char(36)) */
0: 				row.setColumn(1, getDataValueFactory().getCharDataValue((String) null));
0: 
0: 				/* 2nd column is SPECIFICNAME (varchar(128)) */
0: 				row.setColumn(2, getDataValueFactory().getVarcharDataValue((String) null));
0: 
0: 				break;
0: 		}	// end switch
0: 
0: 		return	row;
0: 	}
0: 
0: 	///////////////////////////////////////////////////////////////////////////
0: 	//
0: 	//	ABSTRACT METHODS TO BE IMPLEMENTED BY CHILDREN OF CatalogRowFactory
0: 	//
0: 	///////////////////////////////////////////////////////////////////////////
0: 
0: 	/**
0: 	 * Make a AliasDescriptor out of a SYSALIASES row
0: 	 *
0: 	 * @param row a SYSALIASES row
0: 	 * @param parentTupleDescriptor	Null for this kind of descriptor.
0: 	 * @param dd dataDictionary
0: 	 *
0: 	 * @exception   StandardException thrown on failure
0: 	 */
0: 	public TupleDescriptor buildDescriptor(
0: 		ExecRow					row,
0: 		TupleDescriptor			parentTupleDescriptor,
0: 		DataDictionary 			dd )
0: 					throws StandardException
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(
0: 				row.nColumns() == SYSALIASES_COLUMN_COUNT, 
0: 				"Wrong number of columns for a SYSALIASES row");
0: 		}
0: 
0: 		char				cAliasType;
0: 		char				cNameSpace;
0: 		DataValueDescriptor	col;
0: 		String				aliasID;
0: 		UUID				aliasUUID;
0: 		String				aliasName;
0: 		String				javaClassName;
0: 		String				sAliasType;
0: 		String				sNameSpace;
0: 		String				typeStr;
0: 		boolean				systemAlias = false;
0: 		AliasInfo			aliasInfo = null;
0: 
0: 		/* 1st column is ALIASID (UUID - char(36)) */
0: 		col = row.getColumn(SYSALIASES_ALIASID);
0: 		aliasID = col.getString();
0: 		aliasUUID = getUUIDFactory().recreateUUID(aliasID);
0: 
0: 		/* 2nd column is ALIAS (varchar(128)) */
0: 		col = row.getColumn(SYSALIASES_ALIAS);
0: 		aliasName = col.getString();
0: 
0: 		/* 3rd column is SCHEMAID (UUID - char(36)) */
0: 		col = row.getColumn(SYSALIASES_SCHEMAID);
0: 		UUID schemaUUID = col.isNull() ? null : getUUIDFactory().recreateUUID(col.getString());
0: 
0: 		/* 4th column is JAVACLASSNAME (longvarchar) */
0: 		col = row.getColumn(SYSALIASES_JAVACLASSNAME);
0: 		javaClassName = col.getString();
0: 
0: 		/* 5th column is ALIASTYPE (char(1)) */
0: 		col = row.getColumn(SYSALIASES_ALIASTYPE);
0: 		sAliasType = col.getString();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(sAliasType.length() == 1, 
0: 				"Fifth column (aliastype) type incorrect");
0: 			switch (sAliasType.charAt(0))
0: 			{
0: 				case AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR: 
0: 				case AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR: 
0: 					break;
0: 
0: 				default: 
0: 					SanityManager.THROWASSERT("Invalid type value '"
0: 							+sAliasType+ "' for  alias");
0: 			}
0: 		}
0: 
0: 		cAliasType = sAliasType.charAt(0);
0: 
0: 		/* 6th column is NAMESPACE (char(1)) */
0: 		col = row.getColumn(SYSALIASES_NAMESPACE);
0: 		sNameSpace = col.getString();
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(sNameSpace.length() == 1, 
0: 				"Sixth column (namespace) type incorrect");
0: 			switch (sNameSpace.charAt(0))
0: 			{
0: 				case AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_CHAR: 
0: 				case AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_CHAR: 
0: 					break;
0: 
0: 				default: 
0: 					SanityManager.THROWASSERT("Invalid type value '"
0: 							+sNameSpace+ "' for  alias");
0: 			}
0: 		}
0: 
0: 		cNameSpace = sNameSpace.charAt(0);
0: 
0: 
0: 		/* 7th column is SYSTEMALIAS (boolean) */
0: 		col = row.getColumn(SYSALIASES_SYSTEMALIAS);
0: 		systemAlias = col.getBoolean();
0: 
0: 		/* 8th column is ALIASINFO (org.apache.derby.catalog.AliasInfo) */
0: 		col = row.getColumn(SYSALIASES_ALIASINFO);
0: 		aliasInfo = (AliasInfo) col.getObject();
0: 
0: 		/* 9th column is specific name */
0: 		col = row.getColumn(SYSALIASES_SPECIFIC_NAME);
0: 		String specificName = col.getString();
0: 
0: 
0: 		/* now build and return the descriptor */
0: 		return new AliasDescriptor(dd, aliasUUID, aliasName,
0: 										schemaUUID, javaClassName, cAliasType,
0: 										cNameSpace, systemAlias,
0: 										aliasInfo, specificName);
0: 	}
0: 
0: 	/**
0: 	 * Builds a list of columns suitable for creating this Catalog.
0: 	 *
0: 	 *
0: 	 * @return array of SystemColumn suitable for making this catalog.
0: 	 */
0: 	public SystemColumn[]	buildColumnList()
0: 	{
0: 		SystemColumn[]			columnList = new SystemColumn[SYSALIASES_COLUMN_COUNT];
0: 
0: 		// describe columns
0: 
0: 		columnList[0] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ALIASID"),			// column name
0: 							1,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",				// dataType
0: 							true,				// built-in type
0: 							36					// maxLength
0: 			               );
0: 
0: 		columnList[1] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ALIAS"),			// column name
0: 							2,	// column number
0: 							false				// nullability
0: 			               );
0: 
0: 		columnList[2] = new SystemColumnImpl(	
0: 								convertIdCase( "SCHEMAID"),			// column name
0: 								3,	// column number
0: 								0,					// precision
0: 								0,					// scale
0: 								true,				// nullability
0: 								"CHAR",				// dataType
0: 								true,				// built-in type
0: 								36					// maxLength
0: 			                   );
0: 
0: 		columnList[3] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "JAVACLASSNAME"),		// column name
0: 							4,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"LONG VARCHAR",			// dataType
0: 							true,				// built-in type
0: 							Integer.MAX_VALUE	// maxLength
0: 							);
0: 
0: 		columnList[4] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "ALIASTYPE"),		// column name
0: 							5,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 							);
0: 
0: 		columnList[5] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "NAMESPACE"),		// column name
0: 							6,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"CHAR",			// dataType
0: 							true,				// built-in type
0: 							1					// maxLength
0: 							);
0: 
0: 		columnList[6] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "SYSTEMALIAS"),		// column name
0: 							7,
0: 							0,					// precision
0: 							0,					// scale
0: 							false,				// nullability
0: 							"BOOLEAN",			// dataType
0: 							true,				// built-in type
0: 							0					// maxLength
0: 							);
0: 
0: 		columnList[7] = 
0: 					new SystemColumnImpl(	
0: 							convertIdCase( "ALIASINFO"),			// column name
0: 							8,	// column number
0: 							0,					// precision
0: 							0,					// scale
0: 							true,				// nullability
0: 							"org.apache.derby.catalog.AliasInfo",	    // dataType
0: 							false,				// built-in type
0: 							TypeDescriptor.MAXIMUM_WIDTH_UNKNOWN // maxLength
0: 			               );
0: 
0: 		columnList[8] =
0: 					new SystemColumnImpl(
0: 							convertIdCase( "SPECIFICNAME"),
0: 							9,	// column number
0: 							false				// nullability
0: 			               );
0: 
0: 		return	columnList;
0: 	}
0: }
============================================================================