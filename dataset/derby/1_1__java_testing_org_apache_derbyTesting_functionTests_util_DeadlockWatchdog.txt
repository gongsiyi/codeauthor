1:677a71c: /*
1:677a71c:  * Derby - Class org.apache.derbyTesting.functionTests.util.Barrier
1:677a71c:  *
1:677a71c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:677a71c:  * contributor license agreements.  See the NOTICE file distributed with
1:677a71c:  * this work for additional information regarding copyright ownership.
1:677a71c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:677a71c:  * (the "License"); you may not use this file except in compliance with
1:677a71c:  * the License.  You may obtain a copy of the License at
1:677a71c:  *
1:677a71c:  *    http://www.apache.org/licenses/LICENSE-2.0
1:677a71c:  *
1:677a71c:  * Unless required by applicable law or agreed to in writing,
1:677a71c:  * software distributed under the License is distributed on an
1:677a71c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:677a71c:  * either express or implied. See the License for the specific
1:677a71c:  * language governing permissions and limitations under the License.
1:677a71c:  */
1:677a71c: package org.apache.derbyTesting.functionTests.util;
1:677a71c: 
1:677a71c: import java.io.IOException;
1:677a71c: import java.lang.management.ManagementFactory;
1:677a71c: import java.lang.management.ThreadMXBean;
1:677a71c: import java.security.AccessController;
1:677a71c: import java.security.PrivilegedExceptionAction;
1:677a71c: import javax.management.InstanceNotFoundException;
1:677a71c: import javax.management.MBeanException;
1:677a71c: import javax.management.MalformedObjectNameException;
1:677a71c: import javax.management.ReflectionException;
1:677a71c: 
1:677a71c: /**
1:677a71c:  * A deadlock watch utlity.  An instance of this class can be created and started
1:677a71c:  * and it will look for a Java level deadlock at the time given  if not stopped.
1:677a71c:  * A deadlock is detected using JMX and the ThreadMXBean
1:677a71c:  */
1:677a71c: public class DeadlockWatchdog implements Runnable {
1:677a71c:     
1:677a71c:     private boolean stopped = false;
1:677a71c:     private long timeout;
1:677a71c:     
1:677a71c:     public DeadlockWatchdog(long timeout) {
1:677a71c:         this.timeout = timeout;
1:677a71c:     }
1:677a71c:     
1:677a71c:     public synchronized void start() {
1:677a71c:         stopped = false;
1:677a71c:         Thread t = new Thread(this, "WATCHDOG");
1:677a71c:         t.setDaemon(true);
1:677a71c:         t.start();        
1:677a71c:     }
1:677a71c:     
1:677a71c:     public synchronized void stop() {
1:677a71c:        stopped = true;
1:677a71c:         notifyAll();
1:677a71c:     }
1:677a71c:     
1:677a71c:     public synchronized void run() {
1:677a71c:         final long until = System.currentTimeMillis() + timeout;
1:677a71c:         long now;
1:677a71c:         while (!stopped && until > (now = System.currentTimeMillis())) {
1:677a71c:             try {
1:677a71c:                 wait(until - now);
1:677a71c:             } catch (InterruptedException e) {
1:677a71c:             }
1:677a71c:         }
1:677a71c:         if (!stopped) {
1:677a71c:             try {
1:677a71c:                 boolean res = AccessController.doPrivileged(
1:677a71c:                         new PrivilegedExceptionAction<Boolean>() {
1:677a71c:                     public Boolean run() throws IOException, MalformedObjectNameException, InstanceNotFoundException, MBeanException, ReflectionException {
1:677a71c:                         return checkForDeadlock();
1:677a71c:                     }
1:677a71c:                 });
1:677a71c: 
1:677a71c:                 if (res) {
1:677a71c:                     System.err.println("Deadlock detected");
1:677a71c:                     System.exit(1);
1:677a71c:                 }
1:677a71c:             } catch (Exception x) {
1:677a71c:                 System.err.println("Watchdog failed: " + x.toString());
1:677a71c:                 System.exit(1);
1:677a71c:             }
1:677a71c:         }
1:677a71c:     }    
1:677a71c:     
1:677a71c:     boolean checkForDeadlock() throws MalformedObjectNameException, InstanceNotFoundException, MBeanException, ReflectionException, IOException {
1:677a71c:         ThreadMXBean bean = ManagementFactory.getThreadMXBean();
1:677a71c:         long[] findDeadlockedThreads = bean.findDeadlockedThreads();
1:677a71c:         if (null != findDeadlockedThreads && 0 != findDeadlockedThreads.length) {
1:677a71c:             return true;
1:677a71c:         }
1:677a71c: 
1:677a71c:         return false;
1:677a71c:     }  
1:677a71c: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:677a71c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Derby - Class org.apache.derbyTesting.functionTests.util.Barrier
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
1:  * either express or implied. See the License for the specific
1:  * language governing permissions and limitations under the License.
1:  */
1: package org.apache.derbyTesting.functionTests.util;
1: 
1: import java.io.IOException;
1: import java.lang.management.ManagementFactory;
1: import java.lang.management.ThreadMXBean;
1: import java.security.AccessController;
1: import java.security.PrivilegedExceptionAction;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanException;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ReflectionException;
1: 
1: /**
1:  * A deadlock watch utlity.  An instance of this class can be created and started
1:  * and it will look for a Java level deadlock at the time given  if not stopped.
1:  * A deadlock is detected using JMX and the ThreadMXBean
1:  */
1: public class DeadlockWatchdog implements Runnable {
1:     
1:     private boolean stopped = false;
1:     private long timeout;
1:     
1:     public DeadlockWatchdog(long timeout) {
1:         this.timeout = timeout;
1:     }
1:     
1:     public synchronized void start() {
1:         stopped = false;
1:         Thread t = new Thread(this, "WATCHDOG");
1:         t.setDaemon(true);
1:         t.start();        
1:     }
1:     
1:     public synchronized void stop() {
1:        stopped = true;
1:         notifyAll();
1:     }
1:     
1:     public synchronized void run() {
1:         final long until = System.currentTimeMillis() + timeout;
1:         long now;
1:         while (!stopped && until > (now = System.currentTimeMillis())) {
1:             try {
1:                 wait(until - now);
1:             } catch (InterruptedException e) {
1:             }
1:         }
1:         if (!stopped) {
1:             try {
1:                 boolean res = AccessController.doPrivileged(
1:                         new PrivilegedExceptionAction<Boolean>() {
1:                     public Boolean run() throws IOException, MalformedObjectNameException, InstanceNotFoundException, MBeanException, ReflectionException {
1:                         return checkForDeadlock();
1:                     }
1:                 });
1: 
1:                 if (res) {
1:                     System.err.println("Deadlock detected");
1:                     System.exit(1);
1:                 }
1:             } catch (Exception x) {
1:                 System.err.println("Watchdog failed: " + x.toString());
1:                 System.exit(1);
1:             }
1:         }
1:     }    
1:     
1:     boolean checkForDeadlock() throws MalformedObjectNameException, InstanceNotFoundException, MBeanException, ReflectionException, IOException {
1:         ThreadMXBean bean = ManagementFactory.getThreadMXBean();
1:         long[] findDeadlockedThreads = bean.findDeadlockedThreads();
1:         if (null != findDeadlockedThreads && 0 != findDeadlockedThreads.length) {
1:             return true;
1:         }
1: 
1:         return false;
1:     }  
1: }
============================================================================