1:da360eb: /*
1:da360eb:  * 
1:da360eb:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.HoldCursorExternalSortJDBC30Test
1:da360eb:  * 
1:da360eb:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:da360eb:  * agreements. See the NOTICE file distributed with this work for additional information
1:da360eb:  * regarding copyright ownership. The ASF licenses this file to You under the Apache
1:da360eb:  * License, Version 2.0 (the "License"); you may not use this file except in compliance
1:da360eb:  * with the License. You may obtain a copy of the License at
1:da360eb:  * 
1:da360eb:  * http://www.apache.org/licenses/LICENSE-2.0
1:da360eb:  * 
1:da360eb:  * Unless required by applicable law or agreed to in writing, software distributed under
1:da360eb:  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:da360eb:  * KIND, either express or implied. See the License for the specific language governing
1:da360eb:  * permissions and limitations under the License.
1:da360eb:  * 
1:da360eb:  */
1:da360eb: package org.apache.derbyTesting.functionTests.tests.store;
1:da360eb: 
1:da360eb: import java.sql.Connection;
1:da360eb: import java.sql.PreparedStatement;
1:da360eb: import java.sql.ResultSet;
1:da360eb: import java.sql.SQLException;
1:da360eb: import java.sql.Statement;
1:da360eb: 
1:da360eb: import java.util.Properties;
1:da360eb: import junit.framework.Test;
1:da360eb: 
1:da360eb: import org.apache.derbyTesting.functionTests.util.Formatters;
1:da360eb: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:da360eb: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:da360eb: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:da360eb: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1:da360eb: import org.apache.derbyTesting.junit.SQLUtilities;
1:da360eb: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1:da360eb: import org.apache.derbyTesting.junit.TestConfiguration;
1:da360eb: 
1:da360eb: /**
1:da360eb:  * TEST CASES SPECIFIC TO STORE IMPLEMENTATION OF HOLD CURSOR (external sort).
1:da360eb:  */
1:da360eb: public class HoldCursorExternalSortJDBC30Test extends BaseJDBCTestCase {
1:da360eb: 
1:da360eb:     /**
1:da360eb:      * Public constructor required for running test as standalone JUnit.
1:da360eb:      */
1:da360eb:     public HoldCursorExternalSortJDBC30Test(String name) {
1:da360eb:         super(name);
1:da360eb:     }
1:da360eb:     
1:da360eb:     public static Test suite() {
1:da360eb:         Properties sysProps = new Properties();
1:da360eb:         sysProps.put("derby.storage.sortBufferMax", "5");
1:da360eb:         sysProps.put("derby.debug.true", "testSort");
1:da360eb: 
1:da360eb:         Test suite = TestConfiguration.embeddedSuite(HoldCursorExternalSortJDBC30Test.class);
1:da360eb:         return new CleanDatabaseTestSetup(new SystemPropertyTestSetup(suite, sysProps, true)) {
1:da360eb:             /**
1:da360eb:              * Creates the table used in the test cases.
1:da360eb:              *
1:da360eb:              */
1:da360eb:             protected void decorateSQL(Statement s) throws SQLException {
1:da360eb:                 Connection conn = s.getConnection();
1:da360eb:                 conn.setAutoCommit(false);
1:da360eb: 
1:da360eb:                 /* This table is used by testOrder_Hold and testOrder_NoHold */
1:da360eb:                 s.executeUpdate("create table foo (a int, data varchar(2000))");
1:da360eb: 
1:da360eb:                 /* This one is specific for testOrderWithMultipleLevel since
1:da360eb:                  * it requires some more records to be inserted */
1:da360eb:                 s.executeUpdate("create table bar (a int, data varchar(2000))");
1:da360eb: 
1:da360eb:                 PreparedStatement ps = conn.prepareStatement(
1:da360eb:                                     "insert into foo values(?,?), (?,?), (?,?), (?,?), (?,?), " +
1:da360eb:                                     "(?,?), (?,?), (?,?), (?,?), (?,?)"
1:da360eb:                                     );
1:da360eb: 
1:da360eb:                 for(int i = 0; i <= 9; i++){
1:da360eb:                     ps.setInt(i*2+1, i+1);
1:da360eb:                     ps.setString(i*2+2, Formatters.padString("" + (i+1), 2000));
1:da360eb:                 }
1:da360eb:                 ps.executeUpdate();
1:da360eb:                 ps.close();
1:da360eb:                 
1:da360eb:                 s.execute("INSERT INTO bar SELECT * FROM foo");
1:da360eb:             }
1:da360eb: 
1:da360eb:         };
1:da360eb:     }
1:da360eb:     
1:da360eb:     /**
1:da360eb:      * test hold cursor with external sort (order by).
1:da360eb:      * Cutover to external sort has been set to 4 rows by the test property 
1:da360eb:      * file so with 10 rows we get a 1 level external sort.  This tests that
1:da360eb:      * temp files will be held open across the commit if the cursor is held
1:da360eb:      * open.
1:da360eb:      */
1:da360eb:     public void testOrder_Hold() throws SQLException{
1:da360eb:          setAutoCommit(false);
1:da360eb: 
1:da360eb:         Statement stUtil = createStatement();
1:da360eb:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:da360eb:                         "'derby.language.bulkFetchDefault', '1')");
1:da360eb:         
1:da360eb:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:da360eb:                                        ResultSet.CONCUR_READ_ONLY,
1:da360eb:                                        ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:da360eb: 
1:da360eb:         /* Enable statistics */
1:da360eb:         st.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:da360eb: 
1:da360eb:         ResultSet test1 = st.executeQuery("select * from foo order by a");
1:da360eb:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:da360eb:                 "'derby.language.bulkFetchDefault', '16')");
1:da360eb: 
1:da360eb:         /* Commit pattern for the cursor navigation */
1:da360eb:         boolean[] doCommitAfter = {true, false, false, false, true, false, false, false, true, false};
1:da360eb: 
1:da360eb:         for(int i=0; i<10; i++) {
1:da360eb:             assertTrue(test1.next());
1:da360eb: 
1:da360eb:             /* Match both key and the padded value */
1:da360eb:             assertEquals(i+1, test1.getInt("a"));
1:da360eb:             assertEquals(Formatters.padString(""+(i+1), 2000),
1:da360eb:                         test1.getString("data"));
1:da360eb: 
1:da360eb:             if (doCommitAfter[i]) {
1:da360eb:                 commit();
1:da360eb:             }
1:da360eb:         }
1:da360eb: 
1:da360eb:         /* No more records */
1:da360eb:         assertFalse(test1.next());
1:da360eb: 
1:da360eb:         test1.close();
1:da360eb:         commit();
1:da360eb: 
1:da360eb:         /* Confirm that an external sort occured */
1:da360eb:         RuntimeStatisticsParser parser = SQLUtilities.getRuntimeStatisticsParser(st);
1:da360eb:         assertTrue(parser.usedExternalSort());
1:da360eb: 
1:da360eb:         st.close();
1:da360eb:         stUtil.close();
1:da360eb:     }
1:da360eb:     
1:da360eb:     /**
1:da360eb:      * test hold cursor with external sort (order by).
1:da360eb:      * Cutover to external sort has been set to 4 rows by the test property 
1:da360eb:      * file so with 10 rows we get a 1 level external sort.  This tests that
1:da360eb:      * temp files will be held open across the commit if the cursor is held
1:da360eb:      * open.
1:da360eb:      */
1:da360eb:     public void testOrder_NoHold() throws SQLException{        
1:da360eb:         setAutoCommit(false);
1:da360eb: 
1:da360eb:         Statement stUtil = createStatement();
1:da360eb: 
1:da360eb:         stUtil.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:da360eb: 
1:da360eb:         //exercise the non-held cursor path also.
1:da360eb:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:da360eb:                 "'derby.language.bulkFetchDefault', '1')");
1:da360eb: 
1:da360eb:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:da360eb:                                        ResultSet.CONCUR_READ_ONLY,
1:da360eb:                                        ResultSet.CLOSE_CURSORS_AT_COMMIT);
1:da360eb: 
1:da360eb:         /* Enable statistics */
1:da360eb:         st.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:da360eb: 
1:da360eb:         ResultSet test1 = st.executeQuery("select * from foo order by a");
1:da360eb: 
1:da360eb:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:da360eb:                 "'derby.language.bulkFetchDefault', '16')");        
1:da360eb:         
1:da360eb:         for(int i=0; i<10; i++) {
1:da360eb:             assertTrue(test1.next());
1:da360eb: 
1:da360eb:             /* Match both key and the padded value */
1:da360eb:             assertEquals(i+1, test1.getInt("a"));
1:da360eb:             assertEquals(Formatters.padString(""+(i+1), 2000),
1:da360eb:                         test1.getString("data"));
1:da360eb:         }
1:da360eb:         
1:da360eb:         /* No more records */
1:da360eb:         assertFalse(test1.next());
1:da360eb: 
1:da360eb:         test1.close();
1:da360eb:         commit();
1:da360eb: 
1:da360eb:         /* Confirm that an external sort occured */
1:da360eb:         RuntimeStatisticsParser parser = SQLUtilities.getRuntimeStatisticsParser(st);
1:da360eb:         assertTrue(parser.usedExternalSort());
1:da360eb: 
1:da360eb:         st.close();
1:da360eb:         stUtil.close();
1:da360eb:     }
1:da360eb:     
1:da360eb:     /**
1:da360eb:      * test hold cursor with multi-level external sort (order by).
1:da360eb:      * Cutover to external sort has been set to 4 rows by the test property 
1:da360eb:      * file so with 10 rows we get a 1 level external sort.  This tests that
1:da360eb:      * temp files will be held open across the commit if the cursor is held
1:da360eb:      * open.
1:da360eb:      */
1:da360eb:     public void testOrderWthMultipleLevel() throws SQLException{
1:da360eb:         setAutoCommit(false);
1:da360eb:         
1:da360eb:         Statement stUtil = createStatement();
1:da360eb:         
1:da360eb:         stUtil.addBatch("insert into bar select a + 100, data from bar");
1:da360eb:         stUtil.addBatch("insert into bar select a + 10,  data from bar");
1:da360eb:         stUtil.addBatch("insert into bar select a + 200, data from bar");
1:da360eb:         stUtil.addBatch("insert into bar select a + 200, data from bar");
1:da360eb:         stUtil.executeBatch();
1:da360eb: 
1:da360eb:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:da360eb:         "'derby.language.bulkFetchDefault', '1')");
1:da360eb: 
1:da360eb:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:da360eb:                                        ResultSet.CONCUR_READ_ONLY,
1:da360eb:                                        ResultSet.HOLD_CURSORS_OVER_COMMIT);
1:da360eb: 
1:da360eb:         /* Enable statistics */
1:da360eb:         st.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:da360eb:         
1:da360eb:         ResultSet test1 = st.executeQuery("select * from bar order by a");
1:da360eb:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:da360eb:                 "'derby.language.bulkFetchDefault', '16')");
1:da360eb: 
1:da360eb:         /* This pattern is repeated twice below */
1:da360eb:         boolean[] doCommitAfter = {true, false, false, false, true, false, false, false, true, false,
1:da360eb:                                    true, false, false, false, true, false, false, false, true, false};
1:da360eb: 
1:da360eb:         /* Do asserts where a=[1,20] */
1:da360eb:         for(int i=0; i<20; i++) {
1:da360eb:             assertTrue(test1.next());
1:da360eb: 
1:da360eb:             /* The actual data ranges from 1 to 10. This enforces it based on "i" */
1:da360eb:             String data = ((i+1) % 10 == 0 ? 10 : (i+1) % 10)+"";
1:da360eb: 
1:da360eb:             /* Match both key and the padded value */
1:da360eb:             assertEquals(i+1, test1.getInt("a"));
1:da360eb:             assertEquals(Formatters.padString(data, 2000),
1:da360eb:                         test1.getString("data"));
1:da360eb: 
1:da360eb:             /* Check whether we want a commit */
1:da360eb:             if (doCommitAfter[i%20]) {
1:da360eb:                 commit();
1:da360eb:             }
1:da360eb:         }
1:da360eb: 
1:da360eb:         /* Do asserts where a=[101,120] */
1:da360eb:         for(int i=100; i<120; i++) {
1:da360eb:             assertTrue(test1.next());
1:da360eb: 
1:da360eb:             /* The actual data ranges from 1 to 10. This enforces it based on "i" */
1:da360eb:             String data = ((i+1) % 10 == 0 ? 10 : (i+1) % 10)+"";
1:da360eb: 
1:da360eb:             /* Match both key and the padded value */
1:da360eb:             assertEquals(i+1, test1.getInt("a"));
1:da360eb:             assertEquals(Formatters.padString(data, 2000),
1:da360eb:                         test1.getString("data"));
1:da360eb: 
1:da360eb:             /* Check whether we want a commit */
1:da360eb:             if (doCommitAfter[i%20]) {
1:da360eb:                 commit();
1:da360eb:             }
1:da360eb:         }
1:da360eb: 
1:da360eb:         /* Do the last assert and commit */
1:da360eb:         assertTrue(test1.next());
1:da360eb:             
1:da360eb:         assertEquals(201, test1.getInt("a"));
1:da360eb:         assertEquals(Formatters.padString("1", 2000),
1:da360eb:                     test1.getString("data"));
1:da360eb: 
1:da360eb:         commit();
1:da360eb:         test1.close();
1:da360eb:         
1:da360eb:         /* Confirm that an external sort occured */
1:da360eb:         RuntimeStatisticsParser parser = SQLUtilities.getRuntimeStatisticsParser(st);
1:da360eb:         assertTrue(parser.usedExternalSort());
1:da360eb: 
1:da360eb:         stUtil.close();
1:da360eb:         st.close();
1:da360eb:     }
1:da360eb: }
============================================================================
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:da360eb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Derby - Class org.apache.derbyTesting.functionTests.tests.store.HoldCursorExternalSortJDBC30Test
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
1:  * agreements. See the NOTICE file distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file to You under the Apache
1:  * License, Version 2.0 (the "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software distributed under
1:  * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the specific language governing
1:  * permissions and limitations under the License.
1:  * 
1:  */
1: package org.apache.derbyTesting.functionTests.tests.store;
1: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import java.util.Properties;
1: import junit.framework.Test;
1: 
1: import org.apache.derbyTesting.functionTests.util.Formatters;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
1: import org.apache.derbyTesting.junit.SQLUtilities;
1: import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * TEST CASES SPECIFIC TO STORE IMPLEMENTATION OF HOLD CURSOR (external sort).
1:  */
1: public class HoldCursorExternalSortJDBC30Test extends BaseJDBCTestCase {
1: 
1:     /**
1:      * Public constructor required for running test as standalone JUnit.
1:      */
1:     public HoldCursorExternalSortJDBC30Test(String name) {
1:         super(name);
1:     }
1:     
1:     public static Test suite() {
1:         Properties sysProps = new Properties();
1:         sysProps.put("derby.storage.sortBufferMax", "5");
1:         sysProps.put("derby.debug.true", "testSort");
1: 
1:         Test suite = TestConfiguration.embeddedSuite(HoldCursorExternalSortJDBC30Test.class);
1:         return new CleanDatabaseTestSetup(new SystemPropertyTestSetup(suite, sysProps, true)) {
1:             /**
1:              * Creates the table used in the test cases.
1:              *
1:              */
1:             protected void decorateSQL(Statement s) throws SQLException {
1:                 Connection conn = s.getConnection();
1:                 conn.setAutoCommit(false);
1: 
1:                 /* This table is used by testOrder_Hold and testOrder_NoHold */
1:                 s.executeUpdate("create table foo (a int, data varchar(2000))");
1: 
1:                 /* This one is specific for testOrderWithMultipleLevel since
1:                  * it requires some more records to be inserted */
1:                 s.executeUpdate("create table bar (a int, data varchar(2000))");
1: 
1:                 PreparedStatement ps = conn.prepareStatement(
1:                                     "insert into foo values(?,?), (?,?), (?,?), (?,?), (?,?), " +
1:                                     "(?,?), (?,?), (?,?), (?,?), (?,?)"
1:                                     );
1: 
1:                 for(int i = 0; i <= 9; i++){
1:                     ps.setInt(i*2+1, i+1);
1:                     ps.setString(i*2+2, Formatters.padString("" + (i+1), 2000));
1:                 }
1:                 ps.executeUpdate();
1:                 ps.close();
1:                 
1:                 s.execute("INSERT INTO bar SELECT * FROM foo");
1:             }
1: 
1:         };
1:     }
1:     
1:     /**
1:      * test hold cursor with external sort (order by).
1:      * Cutover to external sort has been set to 4 rows by the test property 
1:      * file so with 10 rows we get a 1 level external sort.  This tests that
1:      * temp files will be held open across the commit if the cursor is held
1:      * open.
1:      */
1:     public void testOrder_Hold() throws SQLException{
1:          setAutoCommit(false);
1: 
1:         Statement stUtil = createStatement();
1:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                         "'derby.language.bulkFetchDefault', '1')");
1:         
1:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                        ResultSet.CONCUR_READ_ONLY,
1:                                        ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 
1:         /* Enable statistics */
1:         st.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1: 
1:         ResultSet test1 = st.executeQuery("select * from foo order by a");
1:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                 "'derby.language.bulkFetchDefault', '16')");
1: 
1:         /* Commit pattern for the cursor navigation */
1:         boolean[] doCommitAfter = {true, false, false, false, true, false, false, false, true, false};
1: 
1:         for(int i=0; i<10; i++) {
1:             assertTrue(test1.next());
1: 
1:             /* Match both key and the padded value */
1:             assertEquals(i+1, test1.getInt("a"));
1:             assertEquals(Formatters.padString(""+(i+1), 2000),
1:                         test1.getString("data"));
1: 
1:             if (doCommitAfter[i]) {
1:                 commit();
1:             }
1:         }
1: 
1:         /* No more records */
1:         assertFalse(test1.next());
1: 
1:         test1.close();
1:         commit();
1: 
1:         /* Confirm that an external sort occured */
1:         RuntimeStatisticsParser parser = SQLUtilities.getRuntimeStatisticsParser(st);
1:         assertTrue(parser.usedExternalSort());
1: 
1:         st.close();
1:         stUtil.close();
1:     }
1:     
1:     /**
1:      * test hold cursor with external sort (order by).
1:      * Cutover to external sort has been set to 4 rows by the test property 
1:      * file so with 10 rows we get a 1 level external sort.  This tests that
1:      * temp files will be held open across the commit if the cursor is held
1:      * open.
1:      */
1:     public void testOrder_NoHold() throws SQLException{        
1:         setAutoCommit(false);
1: 
1:         Statement stUtil = createStatement();
1: 
1:         stUtil.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1: 
1:         //exercise the non-held cursor path also.
1:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                 "'derby.language.bulkFetchDefault', '1')");
1: 
1:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                        ResultSet.CONCUR_READ_ONLY,
1:                                        ResultSet.CLOSE_CURSORS_AT_COMMIT);
1: 
1:         /* Enable statistics */
1:         st.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1: 
1:         ResultSet test1 = st.executeQuery("select * from foo order by a");
1: 
1:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                 "'derby.language.bulkFetchDefault', '16')");        
1:         
1:         for(int i=0; i<10; i++) {
1:             assertTrue(test1.next());
1: 
1:             /* Match both key and the padded value */
1:             assertEquals(i+1, test1.getInt("a"));
1:             assertEquals(Formatters.padString(""+(i+1), 2000),
1:                         test1.getString("data"));
1:         }
1:         
1:         /* No more records */
1:         assertFalse(test1.next());
1: 
1:         test1.close();
1:         commit();
1: 
1:         /* Confirm that an external sort occured */
1:         RuntimeStatisticsParser parser = SQLUtilities.getRuntimeStatisticsParser(st);
1:         assertTrue(parser.usedExternalSort());
1: 
1:         st.close();
1:         stUtil.close();
1:     }
1:     
1:     /**
1:      * test hold cursor with multi-level external sort (order by).
1:      * Cutover to external sort has been set to 4 rows by the test property 
1:      * file so with 10 rows we get a 1 level external sort.  This tests that
1:      * temp files will be held open across the commit if the cursor is held
1:      * open.
1:      */
1:     public void testOrderWthMultipleLevel() throws SQLException{
1:         setAutoCommit(false);
1:         
1:         Statement stUtil = createStatement();
1:         
1:         stUtil.addBatch("insert into bar select a + 100, data from bar");
1:         stUtil.addBatch("insert into bar select a + 10,  data from bar");
1:         stUtil.addBatch("insert into bar select a + 200, data from bar");
1:         stUtil.addBatch("insert into bar select a + 200, data from bar");
1:         stUtil.executeBatch();
1: 
1:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:         "'derby.language.bulkFetchDefault', '1')");
1: 
1:         Statement st = createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
1:                                        ResultSet.CONCUR_READ_ONLY,
1:                                        ResultSet.HOLD_CURSORS_OVER_COMMIT);
1: 
1:         /* Enable statistics */
1:         st.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
1:         
1:         ResultSet test1 = st.executeQuery("select * from bar order by a");
1:         stUtil.executeUpdate("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(" +
1:                 "'derby.language.bulkFetchDefault', '16')");
1: 
1:         /* This pattern is repeated twice below */
1:         boolean[] doCommitAfter = {true, false, false, false, true, false, false, false, true, false,
1:                                    true, false, false, false, true, false, false, false, true, false};
1: 
1:         /* Do asserts where a=[1,20] */
1:         for(int i=0; i<20; i++) {
1:             assertTrue(test1.next());
1: 
1:             /* The actual data ranges from 1 to 10. This enforces it based on "i" */
1:             String data = ((i+1) % 10 == 0 ? 10 : (i+1) % 10)+"";
1: 
1:             /* Match both key and the padded value */
1:             assertEquals(i+1, test1.getInt("a"));
1:             assertEquals(Formatters.padString(data, 2000),
1:                         test1.getString("data"));
1: 
1:             /* Check whether we want a commit */
1:             if (doCommitAfter[i%20]) {
1:                 commit();
1:             }
1:         }
1: 
1:         /* Do asserts where a=[101,120] */
1:         for(int i=100; i<120; i++) {
1:             assertTrue(test1.next());
1: 
1:             /* The actual data ranges from 1 to 10. This enforces it based on "i" */
1:             String data = ((i+1) % 10 == 0 ? 10 : (i+1) % 10)+"";
1: 
1:             /* Match both key and the padded value */
1:             assertEquals(i+1, test1.getInt("a"));
1:             assertEquals(Formatters.padString(data, 2000),
1:                         test1.getString("data"));
1: 
1:             /* Check whether we want a commit */
1:             if (doCommitAfter[i%20]) {
1:                 commit();
1:             }
1:         }
1: 
1:         /* Do the last assert and commit */
1:         assertTrue(test1.next());
1:             
1:         assertEquals(201, test1.getInt("a"));
1:         assertEquals(Formatters.padString("1", 2000),
1:                     test1.getString("data"));
1: 
1:         commit();
1:         test1.close();
1:         
1:         /* Confirm that an external sort occured */
1:         RuntimeStatisticsParser parser = SQLUtilities.getRuntimeStatisticsParser(st);
1:         assertTrue(parser.usedExternalSort());
1: 
1:         stUtil.close();
1:         st.close();
1:     }
1: }
============================================================================