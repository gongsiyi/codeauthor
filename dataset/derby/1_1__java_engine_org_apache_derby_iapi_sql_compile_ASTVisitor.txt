1:3ff5ce3: /*
1:3ff5ce3: 
1:3ff5ce3:    Derby - Class org.apache.derby.iapi.sql.compile.ASTVisitor
1:3ff5ce3: 
1:3ff5ce3:    Licensed to the Apache Software Foundation (ASF) under one or more
1:3ff5ce3:    contributor license agreements.  See the NOTICE file distributed with
1:3ff5ce3:    this work for additional information regarding copyright ownership.
1:3ff5ce3:    The ASF licenses this file to you under the Apache License, Version 2.0
1:3ff5ce3:    (the "License"); you may not use this file except in compliance with
1:3ff5ce3:    the License.  You may obtain a copy of the License at
1:3ff5ce3: 
1:3ff5ce3:       http://www.apache.org/licenses/LICENSE-2.0
1:3ff5ce3: 
1:3ff5ce3:    Unless required by applicable law or agreed to in writing, software
1:3ff5ce3:    distributed under the License is distributed on an "AS IS" BASIS,
1:3ff5ce3:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3ff5ce3:    See the License for the specific language governing permissions and
1:3ff5ce3:    limitations under the License.
1:3ff5ce3: 
1:3ff5ce3:  */
1:3ff5ce3: 
1:3ff5ce3: package	org.apache.derby.iapi.sql.compile;
1:3ff5ce3: 
1:3ff5ce3: import org.apache.derby.iapi.error.StandardException;
1:3ff5ce3: 
1:3ff5ce3: /**
1:3ff5ce3:  * <p>
1:3ff5ce3:  * A Visitor which handles nodes in Derby's abstract syntax trees. In addition
1:3ff5ce3:  * to this contract, it is expected that an ASTVisitor will have a 0-arg
1:3ff5ce3:  * constructor. You use an ASTVisitor like this:
1:3ff5ce3:  * </p>
1:3ff5ce3:  *
1:3ff5ce3:  * <blockquote><pre>
1:3ff5ce3:  * // initialize your visitor
1:3ff5ce3:  * MyASTVisitor myVisitor = new MyASTVisitor();
1:3ff5ce3:  * myVisitor.initializeVisitor();
1:3ff5ce3:  * languageConnectionContext.setASTVisitor( myVisitor );
1:3ff5ce3:  *
1:3ff5ce3:  * // then run your queries.
1:3ff5ce3:  * ...
1:3ff5ce3:  *
1:3ff5ce3:  * // when you're done inspecting query trees, release resources and
1:3ff5ce3:  * // remove your visitor
1:3ff5ce3:  * languageConnectionContext.setASTVisitor( null );
1:3ff5ce3:  * myVisitor.teardownVisitor();
1:3ff5ce3:  * </pre></blockquote>
1:3ff5ce3:  *
1:3ff5ce3:  */
1:3ff5ce3: public interface ASTVisitor extends Visitor
1:3ff5ce3: {
1:3ff5ce3:     // Compilation phases for tree handling
1:3ff5ce3: 
1:3ff5ce3:     public static final int AFTER_PARSE = 0;
1:3ff5ce3:     public static final int AFTER_BIND = 1;
1:3ff5ce3:     public static final int AFTER_OPTIMIZE = 2;
1:3ff5ce3: 
1:3ff5ce3:     /**
1:3ff5ce3:      * Initialize the Visitor before processing any trees. User-written code
1:3ff5ce3:      * calls this method before poking the Visitor into the
1:3ff5ce3:      * LanguageConnectionContext. For example, an
1:3ff5ce3:      * implementation of this method might open a trace file.
1:3ff5ce3:      */
1:3ff5ce3:     public void initializeVisitor() throws StandardException;
1:3ff5ce3: 
1:3ff5ce3:     /**
1:3ff5ce3:      * Final call to the Visitor. User-written code calls this method when it is
1:3ff5ce3:      * done inspecting query trees. For instance, an implementation of this method
1:3ff5ce3:      * might release resources, closing files it has opened.
1:3ff5ce3:      */
1:3ff5ce3:     public void teardownVisitor() throws StandardException;
1:3ff5ce3: 
1:3ff5ce3:     /**
1:3ff5ce3:      * The compiler calls this method just before walking a query tree.
1:3ff5ce3:      *
1:3ff5ce3:      * @param statementText Text used to create the tree.
1:3ff5ce3:      * @param phase of compilation (AFTER_PARSE, AFTER_BIND, or AFTER_OPTIMIZE).
1:3ff5ce3:      */
1:3ff5ce3:     public void begin( String statementText, int phase ) throws StandardException;
1:3ff5ce3:     
1:3ff5ce3:     /**
1:3ff5ce3:      * The compiler calls this method when it's done walking a tree.
1:3ff5ce3:      *
1:3ff5ce3:      * @param phase of compilation (AFTER_PARSE, AFTER_BIND, or AFTER_OPTIMIZE).
1:3ff5ce3:      */
1:3ff5ce3:     public void end( int phase ) throws StandardException;
1:3ff5ce3:     
1:3ff5ce3: }	
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:3ff5ce3
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.iapi.sql.compile.ASTVisitor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package	org.apache.derby.iapi.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * <p>
1:  * A Visitor which handles nodes in Derby's abstract syntax trees. In addition
1:  * to this contract, it is expected that an ASTVisitor will have a 0-arg
1:  * constructor. You use an ASTVisitor like this:
1:  * </p>
1:  *
1:  * <blockquote><pre>
1:  * // initialize your visitor
1:  * MyASTVisitor myVisitor = new MyASTVisitor();
1:  * myVisitor.initializeVisitor();
1:  * languageConnectionContext.setASTVisitor( myVisitor );
1:  *
1:  * // then run your queries.
1:  * ...
1:  *
1:  * // when you're done inspecting query trees, release resources and
1:  * // remove your visitor
1:  * languageConnectionContext.setASTVisitor( null );
1:  * myVisitor.teardownVisitor();
1:  * </pre></blockquote>
1:  *
1:  */
1: public interface ASTVisitor extends Visitor
1: {
1:     // Compilation phases for tree handling
1: 
1:     public static final int AFTER_PARSE = 0;
1:     public static final int AFTER_BIND = 1;
1:     public static final int AFTER_OPTIMIZE = 2;
1: 
1:     /**
1:      * Initialize the Visitor before processing any trees. User-written code
1:      * calls this method before poking the Visitor into the
1:      * LanguageConnectionContext. For example, an
1:      * implementation of this method might open a trace file.
1:      */
1:     public void initializeVisitor() throws StandardException;
1: 
1:     /**
1:      * Final call to the Visitor. User-written code calls this method when it is
1:      * done inspecting query trees. For instance, an implementation of this method
1:      * might release resources, closing files it has opened.
1:      */
1:     public void teardownVisitor() throws StandardException;
1: 
1:     /**
1:      * The compiler calls this method just before walking a query tree.
1:      *
1:      * @param statementText Text used to create the tree.
1:      * @param phase of compilation (AFTER_PARSE, AFTER_BIND, or AFTER_OPTIMIZE).
1:      */
1:     public void begin( String statementText, int phase ) throws StandardException;
1:     
1:     /**
1:      * The compiler calls this method when it's done walking a tree.
1:      *
1:      * @param phase of compilation (AFTER_PARSE, AFTER_BIND, or AFTER_OPTIMIZE).
1:      */
1:     public void end( int phase ) throws StandardException;
1:     
1: }	
============================================================================