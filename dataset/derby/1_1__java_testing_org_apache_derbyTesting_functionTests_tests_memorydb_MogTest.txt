1:0d2840c: /*
1:0d2840c:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.MogTest
1:0d2840c: 
1:0d2840c:    Licensed to the Apache Software Foundation (ASF) under one
1:0d2840c:    or more contributor license agreements.  See the NOTICE file
1:0d2840c:    distributed with this work for additional information
1:0d2840c:    regarding copyright ownership.  The ASF licenses this file
1:0d2840c:    to you under the Apache License, Version 2.0 (the
1:0d2840c:    "License"); you may not use this file except in compliance
1:0d2840c:    with the License.  You may obtain a copy of the License at
1:0d2840c: 
1:0d2840c:      http://www.apache.org/licenses/LICENSE-2.0
1:0d2840c: 
1:0d2840c:    Unless required by applicable law or agreed to in writing,
1:0d2840c:    software distributed under the License is distributed on an
1:0d2840c:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0d2840c:    KIND, either express or implied.  See the License for the
1:0d2840c:    specific language governing permissions and limitations
1:0d2840c:    under the License.
1:0d2840c:  */
1:0d2840c: 
1:0d2840c: package org.apache.derbyTesting.functionTests.tests.memorydb;
1:0d2840c: 
1:0d2840c: import junit.framework.Test;
1:0d2840c: import java.sql.Connection;
1:0d2840c: import java.sql.DriverManager;
1:0d2840c: import java.sql.SQLException;
1:0d2840c: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:0d2840c: import org.apache.derbyTesting.junit.TestConfiguration;
1:0d2840c: 
1:0d2840c: /**
1:0d2840c:  * Test consistency among (GenMog), (SampMog), and (ClusMog).
1:0d2840c:  */
1:0d2840c: public class MogTest extends BaseJDBCTestCase {
1:0d2840c: 
1:0d2840c:   public MogTest(String name) { super(name); }
1:0d2840c: 	
1:0d2840c:   public static Test suite() {
1:0d2840c:     return TestConfiguration.defaultSuite(MogTest.class);
2:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Dispose of objects after testing. */
1:0d2840c:   protected void tearDown() throws Exception
1:0d2840c:   {
1:0d2840c:     super.tearDown();
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Calculates by using the default directory/disk storage back end.
1:0d2840c:    *
1:0d2840c:    * @throws SQLException if the test fails
1:0d2840c:    */
1:0d2840c:   public void testClusMogOnDisk()
1:0d2840c:           throws SQLException {
1:0d2840c:       long start = System.currentTimeMillis();
1:0d2840c:       doTestClusMog(getConnection());
1:0d2840c:       println("duration-on-disk: " + (System.currentTimeMillis() - start));
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Calculates by using the in-memory storage back end.
1:0d2840c:    *
1:0d2840c:    * @throws SQLException if the test fails
1:0d2840c:    */
1:0d2840c:   public void testClusMogInMemory()
1:0d2840c:           throws SQLException {
1:0d2840c:       long start = System.currentTimeMillis();
1:0d2840c:       // Close the connection explicitly here, since the test framework won't
1:0d2840c:       // do it for us when we create it manually.
1:0d2840c:       Connection conn = obtainConnection();
1:0d2840c:       try {
1:0d2840c:           doTestClusMog(conn);
1:0d2840c:       } finally {
1:0d2840c:           try {
1:0d2840c:               conn.rollback();
1:0d2840c:               conn.close();
1:0d2840c:           } catch (SQLException sqle) {
1:0d2840c:               // Ignore exceptions during close.
1:0d2840c:           }
1:c406220:           dropInMemoryDb();
1:0d2840c:       }
1:0d2840c:       println("duration-in-memory: " + (System.currentTimeMillis() - start));
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Test consistency between (ClusMog) and (ClusMogSQL).
1:0d2840c:    * @throws SQLException if something goes wrong
1:0d2840c:    */
1:0d2840c:   public void doTestClusMog(Connection conn)
1:0d2840c:           throws SQLException {
1:0d2840c: 
1:0d2840c:     // Initialize test objects.
1:c0c5770:     // NOTE: Due to instability in the test, the seed has been fixed.
1:c0c5770:     //       See DERBY-4209 (and DERBY-4085).
1:c0c5770:     //final long _seed = System.currentTimeMillis();
1:c0c5770:     final long _seed = 1241411544935L;
1:0d2840c:     java.util.Random rng = new java.util.Random(_seed);
1:0d2840c:     /** MOG generator being tested */
1:0d2840c:     GenMog genMog = new GenMog(rng);
1:0d2840c:     /** MOG sampler being tested */
1:0d2840c:     SampMog sampMog = new SampMog(rng);
1:0d2840c:     /** clustering object being tested */
1:0d2840c:     ClusMog clusMog = new ClusMog();
1:0d2840c:     /** clustering object being tested */
1:0d2840c:     ClusMogSQL clusMogSql = new ClusMogSQL(conn);
1:0d2840c:     clusMogSql.setUnique(rng.nextInt());
1:0d2840c: 
1:0d2840c:     println(getName() + " using random seed: " + _seed);
1:0d2840c:     final int max_ns = 10 * ClusMog.min_sample_size_per_cluster * GenMog.max_n;
1:0d2840c:     final double sample[] = new double[max_ns];
1:0d2840c:     final double center[] = new double[GenMog.max_n];
1:0d2840c:     final int niter = 1;
1:0d2840c:     for (int i=niter; i>0; --i) {
1:0d2840c:       // Generate a MOG configuration.
1:0d2840c:       genMog.generate();
1:0d2840c:       // Compute a sample size.
1:0d2840c:       final int min_ns = ClusMog.min_sample_size_per_cluster * genMog.n;
1:0d2840c:       final int ns = min_ns + rng.nextInt(max_ns - min_ns);
1:0d2840c:       println("ns = " + ns);
1:0d2840c:       // Generate samples from the MOG distribution.
1:0d2840c:       sampMog.set(genMog.n, genMog.weight, genMog.mean, genMog.var);
1:0d2840c:       sampMog.generate(ns, sample);
1:0d2840c: 
1:0d2840c:       // Produce an initial cluster center configuration.
1:0d2840c:       ClusMog.uniform(genMog.n, center, ns, sample);
1:0d2840c:       // Cluster the samples to recover the MOG configuration.
1:0d2840c:       clusMog.cluster(genMog.n, center, ns, sample);
1:0d2840c:       // Cluster the samples again, using SQL.
1:0d2840c:       clusMogSql.clusterSQL(genMog.n, center, ns, sample);
1:0d2840c:       // Compare the computed MOG configurations.
1:52c2139:       assertEquals("MOG configurations differ, seed=" + _seed,
1:52c2139:               clusMog.n, clusMogSql.n);
1:52c2139:       compare(clusMog.n, clusMog.weight, clusMogSql.weight, _seed);
1:52c2139:       compare(clusMog.n, clusMog.mean, clusMogSql.mean, _seed);
1:52c2139:       compare(clusMog.n, clusMog.var, clusMogSql.var, _seed);
1:0d2840c: 
1:0d2840c:       // Produce another initial cluster center configuration.
1:0d2840c:       ClusMog.random(genMog.n, center, ns, sample, rng);
1:0d2840c:       // Cluster the samples to recover the MOG configuration.
1:0d2840c:       clusMog.cluster(genMog.n, center, ns, sample);
1:0d2840c:       // Cluster the samples again, using SQL.
1:0d2840c:       clusMogSql.clusterSQL(genMog.n, center, ns, sample);
1:0d2840c:       // Compare the computed MOG configurations.
1:52c2139:       assertEquals("MOG configurations differ, seed=" + _seed,
1:52c2139:               clusMog.n, clusMogSql.n);
1:52c2139:       compare(clusMog.n, clusMog.weight, clusMogSql.weight, _seed);
1:52c2139:       compare(clusMog.n, clusMog.mean, clusMogSql.mean, _seed);
1:52c2139:       compare(clusMog.n, clusMog.var, clusMogSql.var, _seed);
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /** Compare two floating-point arrays, with tolerance. */
1:52c2139:   private void compare(int n, double ones[], double oths[], final long seed)
1:0d2840c:   {
1:0d2840c:     final double thresh = 1.0e-6;
1:0d2840c:     for (int i=0; i<n; ++i) {
1:0d2840c:       final double one = ones[i];
1:0d2840c:       final double oth = oths[i];
1:0d2840c:       final double dif = Math.abs(one - oth);
1:0d2840c:       final double err = dif / (1.0 + Math.abs(one));
1:253a598:       // Use if to avoid unnecessary string concatenation.
1:253a598:       if (err >= thresh) {
1:52c2139:         fail("Error too big;" + err + " >= " + thresh + ", seed=" + seed);
1:253a598:       }
1:0d2840c:     }
1:0d2840c:   }
1:0d2840c: 
1:0d2840c:   /**
1:0d2840c:    * Obtains a connection to an in-memory database.
1:0d2840c:    *
1:0d2840c:    * @return A connection to an in-memory database.
1:0d2840c:    * @throws SQLException if obtaining the connection fails
1:0d2840c:    */
1:0d2840c:   private Connection obtainConnection()
1:0d2840c:         throws SQLException {
1:0d2840c:     try {
1:0d2840c:         if (usingDerbyNetClient()) {
1:0d2840c:             Class.forName("org.apache.derby.jdbc.ClientDriver");
2:0d2840c:         } else {
1:0d2840c:             Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:0d2840c:         }
1:0d2840c:     } catch (Exception e) {
1:0d2840c:         SQLException sqle =  new SQLException(e.getMessage());
1:0d2840c:         sqle.initCause(e);
1:0d2840c:         throw sqle;
1:0d2840c:     }
1:88e75e5:     StringBuffer sb = constructUrl().append(";create=true");
1:0d2840c:     return DriverManager.getConnection(sb.toString());
1:0d2840c:   }
1:88e75e5: 
1:88e75e5:   /**
1:88e75e5:    * Drops the database used by the test.
1:88e75e5:    *
1:88e75e5:    * @throws SQLException if dropping the database fails
1:88e75e5:    */
1:88e75e5:     private void dropInMemoryDb()
1:88e75e5:             throws SQLException {
1:88e75e5:         StringBuffer sb = constructUrl().append(";drop=true");
1:88e75e5:         try {
1:88e75e5:             DriverManager.getConnection(sb.toString());
1:88e75e5:             fail("Dropping database should have raised exception.");
1:88e75e5:         } catch (SQLException sqle) {
1:88e75e5:             assertSQLState("08006", sqle);
1:88e75e5:         }
1:88e75e5:     }
1:88e75e5: 
1:88e75e5:     /**
1:88e75e5:      * Constructs the default URL for the in-memory test database.
1:88e75e5:      *
1:88e75e5:      * @return A database URL (without any connection attributes).
1:88e75e5:      */
1:88e75e5:     private StringBuffer constructUrl() {
1:88e75e5:         StringBuffer sb = new StringBuffer("jdbc:derby:");
1:88e75e5:         if (usingEmbedded()) {
1:88e75e5:             sb.append("memory:");
1:88e75e5:         } else {
1:88e75e5:             // This is a hack. Change this when proper support for the in-memory
1:88e75e5:             // back end has been implemented.
1:88e75e5:             sb.append("//");
1:88e75e5:             sb.append(TestConfiguration.getCurrent().getHostName());
1:88e75e5:             sb.append(':');
1:88e75e5:             sb.append(TestConfiguration.getCurrent().getPort());
1:88e75e5:             sb.append('/');
1:88e75e5:             sb.append("memory:");
1:88e75e5:         }
1:88e75e5:         sb.append("MogTestDb");
1:88e75e5:         return sb;
1:88e75e5:     }
1:0d2840c: }
============================================================================
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:c406220
/////////////////////////////////////////////////////////////////////////
1:           dropInMemoryDb();
commit:88e75e5
/////////////////////////////////////////////////////////////////////////
0:           // DISABLED because the feature isn't implemented yet (see DERBY-4428)
0:           //dropInMemoryDb();
/////////////////////////////////////////////////////////////////////////
1:     StringBuffer sb = constructUrl().append(";create=true");
1: 
1:   /**
1:    * Drops the database used by the test.
1:    *
1:    * @throws SQLException if dropping the database fails
1:    */
1:     private void dropInMemoryDb()
1:             throws SQLException {
1:         StringBuffer sb = constructUrl().append(";drop=true");
1:         try {
1:             DriverManager.getConnection(sb.toString());
1:             fail("Dropping database should have raised exception.");
1:         } catch (SQLException sqle) {
1:             assertSQLState("08006", sqle);
1:         }
1:     }
1: 
1:     /**
1:      * Constructs the default URL for the in-memory test database.
1:      *
1:      * @return A database URL (without any connection attributes).
1:      */
1:     private StringBuffer constructUrl() {
1:         StringBuffer sb = new StringBuffer("jdbc:derby:");
1:         if (usingEmbedded()) {
1:             sb.append("memory:");
1:         } else {
1:             // This is a hack. Change this when proper support for the in-memory
1:             // back end has been implemented.
1:             sb.append("//");
1:             sb.append(TestConfiguration.getCurrent().getHostName());
1:             sb.append(':');
1:             sb.append(TestConfiguration.getCurrent().getPort());
1:             sb.append('/');
1:             sb.append("memory:");
1:         }
1:         sb.append("MogTestDb");
1:         return sb;
1:     }
commit:c0c5770
/////////////////////////////////////////////////////////////////////////
1:     // NOTE: Due to instability in the test, the seed has been fixed.
1:     //       See DERBY-4209 (and DERBY-4085).
1:     //final long _seed = System.currentTimeMillis();
1:     final long _seed = 1241411544935L;
commit:52c2139
/////////////////////////////////////////////////////////////////////////
0:     final long _seed = System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:       assertEquals("MOG configurations differ, seed=" + _seed,
1:               clusMog.n, clusMogSql.n);
1:       compare(clusMog.n, clusMog.weight, clusMogSql.weight, _seed);
1:       compare(clusMog.n, clusMog.mean, clusMogSql.mean, _seed);
1:       compare(clusMog.n, clusMog.var, clusMogSql.var, _seed);
/////////////////////////////////////////////////////////////////////////
1:       assertEquals("MOG configurations differ, seed=" + _seed,
1:               clusMog.n, clusMogSql.n);
1:       compare(clusMog.n, clusMog.weight, clusMogSql.weight, _seed);
1:       compare(clusMog.n, clusMog.mean, clusMogSql.mean, _seed);
1:       compare(clusMog.n, clusMog.var, clusMogSql.var, _seed);
1:   private void compare(int n, double ones[], double oths[], final long seed)
/////////////////////////////////////////////////////////////////////////
1:         fail("Error too big;" + err + " >= " + thresh + ", seed=" + seed);
commit:253a598
/////////////////////////////////////////////////////////////////////////
1:       // Use if to avoid unnecessary string concatenation.
1:       if (err >= thresh) {
0:         fail("Error too big;" + err + " >= " + thresh);
1:       }
commit:0d2840c
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.memorydb.MogTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one
1:    or more contributor license agreements.  See the NOTICE file
1:    distributed with this work for additional information
1:    regarding copyright ownership.  The ASF licenses this file
1:    to you under the Apache License, Version 2.0 (the
1:    "License"); you may not use this file except in compliance
1:    with the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing,
1:    software distributed under the License is distributed on an
1:    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:    KIND, either express or implied.  See the License for the
1:    specific language governing permissions and limitations
1:    under the License.
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.memorydb;
1: 
1: import junit.framework.Test;
1: import java.sql.Connection;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: /**
1:  * Test consistency among (GenMog), (SampMog), and (ClusMog).
1:  */
1: public class MogTest extends BaseJDBCTestCase {
1: 
1:   public MogTest(String name) { super(name); }
1: 	
1:   public static Test suite() {
1:     return TestConfiguration.defaultSuite(MogTest.class);
1:   }
1: 
1:   /** Dispose of objects after testing. */
1:   protected void tearDown() throws Exception
1:   {
1:     super.tearDown();
1:   }
1: 
1:   /**
1:    * Calculates by using the default directory/disk storage back end.
1:    *
1:    * @throws SQLException if the test fails
1:    */
1:   public void testClusMogOnDisk()
1:           throws SQLException {
1:       long start = System.currentTimeMillis();
1:       doTestClusMog(getConnection());
1:       println("duration-on-disk: " + (System.currentTimeMillis() - start));
1:   }
1: 
1:   /**
1:    * Calculates by using the in-memory storage back end.
1:    *
1:    * @throws SQLException if the test fails
1:    */
1:   public void testClusMogInMemory()
1:           throws SQLException {
1:       long start = System.currentTimeMillis();
1:       // Close the connection explicitly here, since the test framework won't
1:       // do it for us when we create it manually.
1:       Connection conn = obtainConnection();
1:       try {
1:           doTestClusMog(conn);
1:       } finally {
1:           try {
1:               conn.rollback();
1:               conn.close();
1:           } catch (SQLException sqle) {
1:               // Ignore exceptions during close.
1:           }
1:       }
1:       println("duration-in-memory: " + (System.currentTimeMillis() - start));
1:   }
1: 
1:   /**
1:    * Test consistency between (ClusMog) and (ClusMogSQL).
1:    * @throws SQLException if something goes wrong
1:    */
1:   public void doTestClusMog(Connection conn)
1:           throws SQLException {
1: 
1:     // Initialize test objects.
0:     long _seed = System.currentTimeMillis();
1:     java.util.Random rng = new java.util.Random(_seed);
1:     /** MOG generator being tested */
1:     GenMog genMog = new GenMog(rng);
1:     /** MOG sampler being tested */
1:     SampMog sampMog = new SampMog(rng);
1:     /** clustering object being tested */
1:     ClusMog clusMog = new ClusMog();
1:     /** clustering object being tested */
1:     ClusMogSQL clusMogSql = new ClusMogSQL(conn);
1:     clusMogSql.setUnique(rng.nextInt());
1: 
1:     println(getName() + " using random seed: " + _seed);
1:     final int max_ns = 10 * ClusMog.min_sample_size_per_cluster * GenMog.max_n;
1:     final double sample[] = new double[max_ns];
1:     final double center[] = new double[GenMog.max_n];
1:     final int niter = 1;
1:     for (int i=niter; i>0; --i) {
1:       // Generate a MOG configuration.
1:       genMog.generate();
1:       // Compute a sample size.
1:       final int min_ns = ClusMog.min_sample_size_per_cluster * genMog.n;
1:       final int ns = min_ns + rng.nextInt(max_ns - min_ns);
1:       println("ns = " + ns);
1:       // Generate samples from the MOG distribution.
1:       sampMog.set(genMog.n, genMog.weight, genMog.mean, genMog.var);
1:       sampMog.generate(ns, sample);
1: 
1:       // Produce an initial cluster center configuration.
1:       ClusMog.uniform(genMog.n, center, ns, sample);
1:       // Cluster the samples to recover the MOG configuration.
1:       clusMog.cluster(genMog.n, center, ns, sample);
1:       // Cluster the samples again, using SQL.
1:       clusMogSql.clusterSQL(genMog.n, center, ns, sample);
1:       // Compare the computed MOG configurations.
0:       assertEquals(clusMog.n, clusMogSql.n);
0:       compare(clusMog.n, clusMog.weight, clusMogSql.weight);
0:       compare(clusMog.n, clusMog.mean, clusMogSql.mean);
0:       compare(clusMog.n, clusMog.var, clusMogSql.var);
1: 
1:       // Produce another initial cluster center configuration.
1:       ClusMog.random(genMog.n, center, ns, sample, rng);
1:       // Cluster the samples to recover the MOG configuration.
1:       clusMog.cluster(genMog.n, center, ns, sample);
1:       // Cluster the samples again, using SQL.
1:       clusMogSql.clusterSQL(genMog.n, center, ns, sample);
1:       // Compare the computed MOG configurations.
0:       assertEquals(clusMog.n, clusMogSql.n);
0:       compare(clusMog.n, clusMog.weight, clusMogSql.weight);
0:       compare(clusMog.n, clusMog.mean, clusMogSql.mean);
0:       compare(clusMog.n, clusMog.var, clusMogSql.var);
1:     }
1:   }
1: 
1:   /** Compare two floating-point arrays, with tolerance. */
0:   private void compare(int n, double ones[], double oths[])
1:   {
1:     final double thresh = 1.0e-6;
1:     for (int i=0; i<n; ++i) {
1:       final double one = ones[i];
1:       final double oth = oths[i];
1:       final double dif = Math.abs(one - oth);
1:       final double err = dif / (1.0 + Math.abs(one));
0:       assertTrue(err < thresh);
1:     }
1:   }
1: 
1:   /**
1:    * Obtains a connection to an in-memory database.
1:    *
1:    * @return A connection to an in-memory database.
1:    * @throws SQLException if obtaining the connection fails
1:    */
1:   private Connection obtainConnection()
1:         throws SQLException {
1:     try {
1:         if (usingDerbyNetClient()) {
1:             Class.forName("org.apache.derby.jdbc.ClientDriver");
1:         } else {
1:             Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
1:         }
1:     } catch (Exception e) {
1:         SQLException sqle =  new SQLException(e.getMessage());
1:         sqle.initCause(e);
1:         throw sqle;
1:     }
0:     StringBuffer sb = new StringBuffer("jdbc:derby:");
0:     if (usingEmbedded()) {
0:         sb.append("memory:");
1:     } else {
0:         // This is a hack. Change this when proper support for the in-memory
0:         // back end has been implemented.
0:         sb.append("//");
0:         sb.append(TestConfiguration.getCurrent().getHostName());
0:         sb.append(':');
0:         sb.append(TestConfiguration.getCurrent().getPort());
0:         sb.append('/');
0:         sb.append("memory:");
1:     }
0:     sb.append("MogTestDb;create=true");
1:     return DriverManager.getConnection(sb.toString());
1:   }
1: }
============================================================================