1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.execute.OnceResultSet
1:345de35: 
1:f6123ee:    Licensed to the Apache Software Foundation (ASF) under one or more
1:f6123ee:    contributor license agreements.  See the NOTICE file distributed with
1:f6123ee:    this work for additional information regarding copyright ownership.
1:f6123ee:    The ASF licenses this file to you under the Apache License, Version 2.0
1:f6123ee:    (the "License"); you may not use this file except in compliance with
1:f6123ee:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:eac0369: 
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1:eac0369: import org.apache.derby.iapi.services.stream.InfoStreams;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.conn.StatementContext;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.execute.ExecRow;
1:eac0369: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.types.DataValueDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.reference.SQLState;
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * Takes an expression subquery's result set and verifies that only
1:eac0369:  * a single scalar value is being returned.
1:eac0369:  * NOTE: A row with a single column containing null will be returned from
1:eac0369:  * getNextRow() if the underlying subquery ResultSet is empty.
1:eac0369:  *
1:eac0369:  */
1:eac0369: public class OnceResultSet extends NoPutResultSetImpl
1:eac0369: {
1:eac0369: 	/* Statics for cardinality check */
1:eac0369: 	public static final int DO_CARDINALITY_CHECK		= 1;
1:eac0369: 	public static final int NO_CARDINALITY_CHECK		= 2;
1:eac0369: 	public static final int UNIQUE_CARDINALITY_CHECK	= 3;
1:eac0369: 
1:eac0369: 	/* Used to cache row with nulls for case when subquery result set
1:eac0369: 	 * is empty.
1:eac0369: 	 */
1:eac0369: 	private ExecRow rowWithNulls;
1:eac0369: 
1:eac0369: 	/* Used to cache the StatementContext */
1:eac0369: 	private StatementContext statementContext;
1:eac0369: 
1:eac0369:     // set in constructor and not altered during
1:eac0369:     // life of object.
1:eac0369:     public NoPutResultSet source;
1:eac0369: 	private GeneratedMethod emptyRowFun;
1:eac0369: 	private int cardinalityCheck;
1:eac0369: 	public int subqueryNumber;
1:eac0369: 	public int pointOfAttachment;
1:eac0369: 
1:eac0369:     //
1:eac0369:     // class interface
1:eac0369:     //
1:eac0369:     public OnceResultSet(NoPutResultSet s, Activation a, GeneratedMethod emptyRowFun,
1:eac0369: 						 int cardinalityCheck, int resultSetNumber,
1:eac0369: 						 int subqueryNumber, int pointOfAttachment,
1:eac0369: 						 double optimizerEstimatedRowCount,
1:eac0369: 						 double optimizerEstimatedCost)
1:eac0369: 	{
1:eac0369: 		super(a, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
1:eac0369:         source = s;
1:eac0369: 		this.emptyRowFun = emptyRowFun;
1:eac0369: 		this.cardinalityCheck = cardinalityCheck;
1:eac0369: 		this.subqueryNumber = subqueryNumber;
1:eac0369: 		this.pointOfAttachment = pointOfAttachment;
1:7008b63: 		recordConstructorTime();
1:eac0369:     }
1:eac0369: 
1:eac0369: 	//
1:eac0369: 	// ResultSet interface (leftover from NoPutResultSet)
1:eac0369: 	//
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * open a scan on the table. scan parameters are evaluated
1:eac0369:      * at each open, so there is probably some way of altering
1:eac0369:      * their values...
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369:      */
1:eac0369: 	public void	openCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		/* NOTE: We can't get code generation
1:eac0369: 		 * to generate calls to reopenCore() for
1:eac0369: 		 * subsequent probes, so we just handle
1:eac0369: 		 * it here.
1:eac0369: 		 */
1:eac0369: 		if (isOpen)
1:eac0369: 		{
1:eac0369: 			reopenCore();
1:eac0369: 			return;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 
1:eac0369:         source.openCore();
1:eac0369: 
1:eac0369: 		/* Notify StatementContext about ourself so that we can
1:eac0369: 		 * get closed down, if necessary, on an exception.
1:eac0369: 		 */
1:eac0369: 		if (statementContext == null)
1:eac0369: 		{
1:eac0369: 			statementContext = getLanguageConnectionContext().getStatementContext();
1:eac0369: 		}
1:eac0369: 		statementContext.setSubqueryResultSet(subqueryNumber, this, 
1:eac0369: 											  activation.getNumSubqueries());
1:eac0369: 
1:eac0369: 		numOpens++;
1:eac0369: 	    isOpen = true;
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * reopen a scan on the table. scan parameters are evaluated
1:eac0369: 	 * at each open, so there is probably some way of altering
1:eac0369: 	 * their values...
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown if cursor finished.
1:eac0369: 	 */
1:eac0369: 	public void	reopenCore() throws StandardException 
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 	    	SanityManager.ASSERT(isOpen, "OnceResultSet already open");
1:eac0369: 
1:eac0369:         source.reopenCore();
1:eac0369: 		numOpens++;
1:eac0369: 
1:eac0369: 		openTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369:      * Return the requested value computed from the next row.  
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on failure.
1:eac0369: 	 *			  StandardException ScalarSubqueryCardinalityViolation
1:eac0369: 	 *						Thrown if scalar subquery returns more than 1 row.
1:eac0369: 	 */
1:eac0369: 	public ExecRow	getNextRowCore() throws StandardException 
1:eac0369: 	{
1:2a4654b: 		if( isXplainOnlyMode() )
1:2a4654b: 			return null;
1:2a4654b: 
1:eac0369: 	    ExecRow candidateRow = null;
1:eac0369: 		ExecRow secondRow = null;
1:eac0369: 	    ExecRow result = null;
1:eac0369: 
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 		// This is an ASSERT and not a real error because this is never
1:eac0369: 		// outermost in the tree and so a next call when closed will not occur.
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369:         	SanityManager.ASSERT( isOpen, "OpenResultSet not open");
1:eac0369: 
1:eac0369: 	    if ( isOpen ) 
1:eac0369: 		{
1:eac0369: 			candidateRow = source.getNextRowCore();
1:eac0369: 
1:eac0369: 			if (candidateRow != null)
1:eac0369: 			{
1:eac0369: 				switch (cardinalityCheck)
1:eac0369: 				{
1:eac0369: 					case DO_CARDINALITY_CHECK:
1:eac0369: 					case NO_CARDINALITY_CHECK:
1:eac0369: 						candidateRow = candidateRow.getClone();
1:eac0369: 						if (cardinalityCheck == DO_CARDINALITY_CHECK)
1:eac0369: 						{
1:eac0369: 							/* Raise an error if the subquery returns > 1 row 
1:eac0369: 							 * We need to make a copy of the current candidateRow since
1:eac0369: 							 * the getNextRow() for this check will wipe out the underlying
1:eac0369: 							 * row.
1:eac0369: 							 */
1:eac0369: 							secondRow = source.getNextRowCore();
1:eac0369: 							if (secondRow != null)
1:eac0369: 							{
1:eac0369: 								close();
1:eac0369: 								StandardException se = StandardException.newException(SQLState.LANG_SCALAR_SUBQUERY_CARDINALITY_VIOLATION);
1:eac0369: 								throw se;
1:eac0369: 							}
1:eac0369: 						}
1:eac0369: 						result = candidateRow;
1:eac0369: 						break;
1:eac0369: 
1:eac0369: 					case UNIQUE_CARDINALITY_CHECK:
1:eac0369: 						candidateRow = candidateRow.getClone();
1:eac0369: 						secondRow = source.getNextRowCore();
1:eac0369: 						DataValueDescriptor orderable1 = candidateRow.getColumn(1);
1:eac0369: 						while (secondRow != null)
1:eac0369: 						{
1:eac0369: 							DataValueDescriptor orderable2 = secondRow.getColumn(1);
1:eac0369: 							if (! (orderable1.compare(DataValueDescriptor.ORDER_OP_EQUALS, orderable2, true, true)))
1:eac0369: 							{
1:eac0369: 								close();
1:eac0369: 								StandardException se = StandardException.newException(SQLState.LANG_SCALAR_SUBQUERY_CARDINALITY_VIOLATION);
1:eac0369: 								throw se;
1:eac0369: 							}
1:eac0369: 							secondRow = source.getNextRowCore();
1:eac0369: 						}
1:eac0369: 						result = candidateRow;
1:eac0369: 						break;
1:eac0369: 
1:eac0369: 					default:
1:eac0369: 						if (SanityManager.DEBUG)
1:eac0369: 						{
1:eac0369: 							SanityManager.THROWASSERT(
1:eac0369: 								"cardinalityCheck not unexpected to be " +
1:eac0369: 								cardinalityCheck);
1:eac0369: 						}
1:eac0369: 						break;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 			else if (rowWithNulls == null)
1:eac0369: 			{
1:eac0369: 				rowWithNulls = (ExecRow) emptyRowFun.invoke(activation);
1:eac0369: 				result = rowWithNulls;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:eac0369: 				result = rowWithNulls;
1:eac0369: 			}
1:eac0369: 	    }
1:eac0369: 
1:eac0369: 		setCurrentRow(result);
1:eac0369: 		rowsSeen++;
1:eac0369: 
1:eac0369: 		nextTime += getElapsedMillis(beginTime);
1:eac0369: 	    return result;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * If the result set has been opened,
1:eac0369: 	 * close the open scan.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException thrown on error
1:eac0369: 	 */
1:eac0369: 	public void	close() throws StandardException
1:eac0369: 	{
1:eac0369: 		beginTime = getCurrentTimeMillis();
1:eac0369: 	    if ( isOpen ) 
1:eac0369: 		{
1:eac0369: 			// we don't want to keep around a pointer to the
1:eac0369: 			// row ... so it can be thrown away.
1:eac0369: 			// REVISIT: does this need to be in a finally
1:eac0369: 			// block, to ensure that it is executed?
1:eac0369: 		    clearCurrentRow();
1:eac0369: 
1:eac0369: 	        source.close();
1:eac0369: 
1:eac0369: 			super.close();
1:eac0369: 	    }
1:eac0369: 		else
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 				SanityManager.DEBUG("CloseRepeatInfo","Close of OnceResultSet repeated");
1:eac0369: 
1:eac0369: 		closeTime += getElapsedMillis(beginTime);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see NoPutResultSet#getPointOfAttachment
1:eac0369: 	 */
1:eac0369: 	public int getPointOfAttachment()
1:eac0369: 	{
1:eac0369: 		return pointOfAttachment;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Return the total amount of time spent in this ResultSet
1:eac0369: 	 *
1:eac0369: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1:eac0369: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1:eac0369: 	 *
1:eac0369: 	 * @return long		The total amount of time spent (in milliseconds).
1:eac0369: 	 */
1:eac0369: 	public long getTimeSpent(int type)
1:eac0369: 	{
1:eac0369: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1:eac0369: 
1:eac0369: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1:eac0369: 		{
1:eac0369: 			return	totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
1:eac0369: 		}
1:eac0369: 		else
1:eac0369: 		{
1:eac0369: 			return totTime;
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
commit:2a4654b
/////////////////////////////////////////////////////////////////////////
1: 		if( isXplainOnlyMode() )
1: 			return null;
1: 
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:4e784bb
/////////////////////////////////////////////////////////////////////////
commit:7008b63
/////////////////////////////////////////////////////////////////////////
1: 		recordConstructorTime();
commit:f77f36d
/////////////////////////////////////////////////////////////////////////
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.execute.OnceResultSet
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:9e5097f
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.execute;
1: 
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
1: import org.apache.derby.iapi.services.stream.InfoStreams;
1: 
1: import org.apache.derby.iapi.sql.conn.StatementContext;
1: 
1: import org.apache.derby.iapi.sql.execute.ExecRow;
1: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
1: 
1: import org.apache.derby.iapi.types.DataValueDescriptor;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultSet;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Takes an expression subquery's result set and verifies that only
1:  * a single scalar value is being returned.
1:  * NOTE: A row with a single column containing null will be returned from
1:  * getNextRow() if the underlying subquery ResultSet is empty.
1:  *
0:  * @author jerry
1:  */
1: public class OnceResultSet extends NoPutResultSetImpl
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/* Statics for cardinality check */
1: 	public static final int DO_CARDINALITY_CHECK		= 1;
1: 	public static final int NO_CARDINALITY_CHECK		= 2;
1: 	public static final int UNIQUE_CARDINALITY_CHECK	= 3;
1: 
1: 	/* Used to cache row with nulls for case when subquery result set
1: 	 * is empty.
1: 	 */
1: 	private ExecRow rowWithNulls;
1: 
1: 	/* Used to cache the StatementContext */
1: 	private StatementContext statementContext;
1: 
1:     // set in constructor and not altered during
1:     // life of object.
1:     public NoPutResultSet source;
1: 	private GeneratedMethod emptyRowFun;
1: 	private int cardinalityCheck;
1: 	public int subqueryNumber;
1: 	public int pointOfAttachment;
1: 
1:     //
1:     // class interface
1:     //
1:     public OnceResultSet(NoPutResultSet s, Activation a, GeneratedMethod emptyRowFun,
1: 						 int cardinalityCheck, int resultSetNumber,
1: 						 int subqueryNumber, int pointOfAttachment,
1: 						 double optimizerEstimatedRowCount,
1: 						 double optimizerEstimatedCost)
1: 	{
1: 		super(a, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
1:         source = s;
1: 		this.emptyRowFun = emptyRowFun;
1: 		this.cardinalityCheck = cardinalityCheck;
1: 		this.subqueryNumber = subqueryNumber;
1: 		this.pointOfAttachment = pointOfAttachment;
0: 		constructorTime += getElapsedMillis(beginTime);
1:     }
1: 
1: 	//
1: 	// ResultSet interface (leftover from NoPutResultSet)
1: 	//
1: 
1: 	/**
1:      * open a scan on the table. scan parameters are evaluated
1:      * at each open, so there is probably some way of altering
1:      * their values...
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1:      */
1: 	public void	openCore() throws StandardException 
1: 	{
1: 		/* NOTE: We can't get code generation
1: 		 * to generate calls to reopenCore() for
1: 		 * subsequent probes, so we just handle
1: 		 * it here.
1: 		 */
1: 		if (isOpen)
1: 		{
1: 			reopenCore();
1: 			return;
1: 		}
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 
1:         source.openCore();
1: 
1: 		/* Notify StatementContext about ourself so that we can
1: 		 * get closed down, if necessary, on an exception.
1: 		 */
1: 		if (statementContext == null)
1: 		{
1: 			statementContext = getLanguageConnectionContext().getStatementContext();
1: 		}
1: 		statementContext.setSubqueryResultSet(subqueryNumber, this, 
1: 											  activation.getNumSubqueries());
1: 
1: 		numOpens++;
1: 	    isOpen = true;
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1: 	 * reopen a scan on the table. scan parameters are evaluated
1: 	 * at each open, so there is probably some way of altering
1: 	 * their values...
1: 	 *
1: 	 * @exception StandardException thrown if cursor finished.
1: 	 */
1: 	public void	reopenCore() throws StandardException 
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 		if (SanityManager.DEBUG)
1: 	    	SanityManager.ASSERT(isOpen, "OnceResultSet already open");
1: 
1:         source.reopenCore();
1: 		numOpens++;
1: 
1: 		openTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1:      * Return the requested value computed from the next row.  
1: 	 *
1: 	 * @exception StandardException thrown on failure.
1: 	 *			  StandardException ScalarSubqueryCardinalityViolation
1: 	 *						Thrown if scalar subquery returns more than 1 row.
1: 	 */
1: 	public ExecRow	getNextRowCore() throws StandardException 
1: 	{
1: 	    ExecRow candidateRow = null;
1: 		ExecRow secondRow = null;
1: 	    ExecRow result = null;
1: 
1: 		beginTime = getCurrentTimeMillis();
1: 		// This is an ASSERT and not a real error because this is never
1: 		// outermost in the tree and so a next call when closed will not occur.
1: 		if (SanityManager.DEBUG)
1:         	SanityManager.ASSERT( isOpen, "OpenResultSet not open");
1: 
1: 	    if ( isOpen ) 
1: 		{
1: 			candidateRow = source.getNextRowCore();
1: 
1: 			if (candidateRow != null)
1: 			{
1: 				switch (cardinalityCheck)
1: 				{
1: 					case DO_CARDINALITY_CHECK:
1: 					case NO_CARDINALITY_CHECK:
1: 						candidateRow = candidateRow.getClone();
1: 						if (cardinalityCheck == DO_CARDINALITY_CHECK)
1: 						{
1: 							/* Raise an error if the subquery returns > 1 row 
1: 							 * We need to make a copy of the current candidateRow since
1: 							 * the getNextRow() for this check will wipe out the underlying
1: 							 * row.
1: 							 */
1: 							secondRow = source.getNextRowCore();
1: 							if (secondRow != null)
1: 							{
1: 								close();
1: 								StandardException se = StandardException.newException(SQLState.LANG_SCALAR_SUBQUERY_CARDINALITY_VIOLATION);
1: 								throw se;
1: 							}
1: 						}
1: 						result = candidateRow;
1: 						break;
1: 
1: 					case UNIQUE_CARDINALITY_CHECK:
1: 						candidateRow = candidateRow.getClone();
1: 						secondRow = source.getNextRowCore();
1: 						DataValueDescriptor orderable1 = candidateRow.getColumn(1);
1: 						while (secondRow != null)
1: 						{
1: 							DataValueDescriptor orderable2 = secondRow.getColumn(1);
1: 							if (! (orderable1.compare(DataValueDescriptor.ORDER_OP_EQUALS, orderable2, true, true)))
1: 							{
1: 								close();
1: 								StandardException se = StandardException.newException(SQLState.LANG_SCALAR_SUBQUERY_CARDINALITY_VIOLATION);
1: 								throw se;
1: 							}
1: 							secondRow = source.getNextRowCore();
1: 						}
1: 						result = candidateRow;
1: 						break;
1: 
1: 					default:
1: 						if (SanityManager.DEBUG)
1: 						{
1: 							SanityManager.THROWASSERT(
1: 								"cardinalityCheck not unexpected to be " +
1: 								cardinalityCheck);
1: 						}
1: 						break;
1: 				}
1: 			}
1: 			else if (rowWithNulls == null)
1: 			{
1: 				rowWithNulls = (ExecRow) emptyRowFun.invoke(activation);
1: 				result = rowWithNulls;
1: 			}
1: 			else
1: 			{
1: 				result = rowWithNulls;
1: 			}
1: 	    }
1: 
0: 		currentRow = result;
1: 		setCurrentRow(result);
1: 		rowsSeen++;
1: 
1: 		nextTime += getElapsedMillis(beginTime);
1: 	    return result;
1: 	}
1: 
1: 	/**
1: 	 * If the result set has been opened,
1: 	 * close the open scan.
1: 	 *
1: 	 * @exception StandardException thrown on error
1: 	 */
1: 	public void	close() throws StandardException
1: 	{
1: 		beginTime = getCurrentTimeMillis();
1: 	    if ( isOpen ) 
1: 		{
1: 			// we don't want to keep around a pointer to the
1: 			// row ... so it can be thrown away.
1: 			// REVISIT: does this need to be in a finally
1: 			// block, to ensure that it is executed?
1: 		    clearCurrentRow();
1: 
0: 			currentRow = null;
1: 	        source.close();
1: 
1: 			super.close();
1: 	    }
1: 		else
1: 			if (SanityManager.DEBUG)
1: 				SanityManager.DEBUG("CloseRepeatInfo","Close of OnceResultSet repeated");
1: 
1: 		closeTime += getElapsedMillis(beginTime);
1: 	}
1: 
1: 	/**
1: 	 * @see NoPutResultSet#getPointOfAttachment
1: 	 */
1: 	public int getPointOfAttachment()
1: 	{
1: 		return pointOfAttachment;
1: 	}
1: 
1: 	/**
1: 	 * Return the total amount of time spent in this ResultSet
1: 	 *
1: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
1: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
1: 	 *
1: 	 * @return long		The total amount of time spent (in milliseconds).
1: 	 */
1: 	public long getTimeSpent(int type)
1: 	{
1: 		long totTime = constructorTime + openTime + nextTime + closeTime;
1: 
1: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
1: 		{
1: 			return	totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
1: 		}
1: 		else
1: 		{
1: 			return totTime;
1: 		}
1: 	}
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:f6123ee
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.execute;
0: 
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
0: import org.apache.derby.iapi.services.stream.InfoStreams;
0: 
0: import org.apache.derby.iapi.sql.conn.StatementContext;
0: 
0: import org.apache.derby.iapi.sql.execute.ExecRow;
0: import org.apache.derby.iapi.sql.execute.NoPutResultSet;
0: 
0: import org.apache.derby.iapi.types.DataValueDescriptor;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultSet;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.reference.SQLState;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: /**
0:  * Takes an expression subquery's result set and verifies that only
0:  * a single scalar value is being returned.
0:  * NOTE: A row with a single column containing null will be returned from
0:  * getNextRow() if the underlying subquery ResultSet is empty.
0:  *
0:  * @author jerry
0:  */
0: public class OnceResultSet extends NoPutResultSetImpl
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/* Statics for cardinality check */
0: 	public static final int DO_CARDINALITY_CHECK		= 1;
0: 	public static final int NO_CARDINALITY_CHECK		= 2;
0: 	public static final int UNIQUE_CARDINALITY_CHECK	= 3;
0: 
0: 	/* Used to cache row with nulls for case when subquery result set
0: 	 * is empty.
0: 	 */
0: 	private ExecRow rowWithNulls;
0: 
0: 	/* Used to cache the StatementContext */
0: 	private StatementContext statementContext;
0: 
0:     // set in constructor and not altered during
0:     // life of object.
0:     public NoPutResultSet source;
0: 	private GeneratedMethod emptyRowFun;
0: 	private int cardinalityCheck;
0: 	public int subqueryNumber;
0: 	public int pointOfAttachment;
0: 
0:     //
0:     // class interface
0:     //
0:     public OnceResultSet(NoPutResultSet s, Activation a, GeneratedMethod emptyRowFun,
0: 						 int cardinalityCheck, int resultSetNumber,
0: 						 int subqueryNumber, int pointOfAttachment,
0: 						 double optimizerEstimatedRowCount,
0: 						 double optimizerEstimatedCost)
0: 	{
0: 		super(a, resultSetNumber, optimizerEstimatedRowCount, optimizerEstimatedCost);
0:         source = s;
0: 		this.emptyRowFun = emptyRowFun;
0: 		this.cardinalityCheck = cardinalityCheck;
0: 		this.subqueryNumber = subqueryNumber;
0: 		this.pointOfAttachment = pointOfAttachment;
0: 		constructorTime += getElapsedMillis(beginTime);
0:     }
0: 
0: 	//
0: 	// ResultSet interface (leftover from NoPutResultSet)
0: 	//
0: 
0: 	/**
0:      * open a scan on the table. scan parameters are evaluated
0:      * at each open, so there is probably some way of altering
0:      * their values...
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0:      */
0: 	public void	openCore() throws StandardException 
0: 	{
0: 		/* NOTE: We can't get code generation
0: 		 * to generate calls to reopenCore() for
0: 		 * subsequent probes, so we just handle
0: 		 * it here.
0: 		 */
0: 		if (isOpen)
0: 		{
0: 			reopenCore();
0: 			return;
0: 		}
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 
0:         source.openCore();
0: 
0: 		/* Notify StatementContext about ourself so that we can
0: 		 * get closed down, if necessary, on an exception.
0: 		 */
0: 		if (statementContext == null)
0: 		{
0: 			statementContext = getLanguageConnectionContext().getStatementContext();
0: 		}
0: 		statementContext.setSubqueryResultSet(subqueryNumber, this, 
0: 											  activation.getNumSubqueries());
0: 
0: 		numOpens++;
0: 	    isOpen = true;
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * reopen a scan on the table. scan parameters are evaluated
0: 	 * at each open, so there is probably some way of altering
0: 	 * their values...
0: 	 *
0: 	 * @exception StandardException thrown if cursor finished.
0: 	 */
0: 	public void	reopenCore() throws StandardException 
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 		if (SanityManager.DEBUG)
0: 	    	SanityManager.ASSERT(isOpen, "OnceResultSet already open");
0: 
0:         source.reopenCore();
0: 		numOpens++;
0: 
0: 		openTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0:      * Return the requested value computed from the next row.  
0: 	 *
0: 	 * @exception StandardException thrown on failure.
0: 	 *			  StandardException ScalarSubqueryCardinalityViolation
0: 	 *						Thrown if scalar subquery returns more than 1 row.
0: 	 */
0: 	public ExecRow	getNextRowCore() throws StandardException 
0: 	{
0: 	    ExecRow candidateRow = null;
0: 		ExecRow secondRow = null;
0: 	    ExecRow result = null;
0: 
0: 		beginTime = getCurrentTimeMillis();
0: 		// This is an ASSERT and not a real error because this is never
0: 		// outermost in the tree and so a next call when closed will not occur.
0: 		if (SanityManager.DEBUG)
0:         	SanityManager.ASSERT( isOpen, "OpenResultSet not open");
0: 
0: 	    if ( isOpen ) 
0: 		{
0: 			candidateRow = source.getNextRowCore();
0: 
0: 			if (candidateRow != null)
0: 			{
0: 				switch (cardinalityCheck)
0: 				{
0: 					case DO_CARDINALITY_CHECK:
0: 					case NO_CARDINALITY_CHECK:
0: 						candidateRow = candidateRow.getClone();
0: 						if (cardinalityCheck == DO_CARDINALITY_CHECK)
0: 						{
0: 							/* Raise an error if the subquery returns > 1 row 
0: 							 * We need to make a copy of the current candidateRow since
0: 							 * the getNextRow() for this check will wipe out the underlying
0: 							 * row.
0: 							 */
0: 							secondRow = source.getNextRowCore();
0: 							if (secondRow != null)
0: 							{
0: 								close();
0: 								StandardException se = StandardException.newException(SQLState.LANG_SCALAR_SUBQUERY_CARDINALITY_VIOLATION);
0: 								throw se;
0: 							}
0: 						}
0: 						result = candidateRow;
0: 						break;
0: 
0: 					case UNIQUE_CARDINALITY_CHECK:
0: 						candidateRow = candidateRow.getClone();
0: 						secondRow = source.getNextRowCore();
0: 						DataValueDescriptor orderable1 = candidateRow.getColumn(1);
0: 						while (secondRow != null)
0: 						{
0: 							DataValueDescriptor orderable2 = secondRow.getColumn(1);
0: 							if (! (orderable1.compare(DataValueDescriptor.ORDER_OP_EQUALS, orderable2, true, true)))
0: 							{
0: 								close();
0: 								StandardException se = StandardException.newException(SQLState.LANG_SCALAR_SUBQUERY_CARDINALITY_VIOLATION);
0: 								throw se;
0: 							}
0: 							secondRow = source.getNextRowCore();
0: 						}
0: 						result = candidateRow;
0: 						break;
0: 
0: 					default:
0: 						if (SanityManager.DEBUG)
0: 						{
0: 							SanityManager.THROWASSERT(
0: 								"cardinalityCheck not unexpected to be " +
0: 								cardinalityCheck);
0: 						}
0: 						break;
0: 				}
0: 			}
0: 			else if (rowWithNulls == null)
0: 			{
0: 				rowWithNulls = (ExecRow) emptyRowFun.invoke(activation);
0: 				result = rowWithNulls;
0: 			}
0: 			else
0: 			{
0: 				result = rowWithNulls;
0: 			}
0: 	    }
0: 
0: 		currentRow = result;
0: 		setCurrentRow(result);
0: 		rowsSeen++;
0: 
0: 		nextTime += getElapsedMillis(beginTime);
0: 	    return result;
0: 	}
0: 
0: 	/**
0: 	 * If the result set has been opened,
0: 	 * close the open scan.
0: 	 *
0: 	 * @exception StandardException thrown on error
0: 	 */
0: 	public void	close() throws StandardException
0: 	{
0: 		beginTime = getCurrentTimeMillis();
0: 	    if ( isOpen ) 
0: 		{
0: 			// we don't want to keep around a pointer to the
0: 			// row ... so it can be thrown away.
0: 			// REVISIT: does this need to be in a finally
0: 			// block, to ensure that it is executed?
0: 		    clearCurrentRow();
0: 
0: 			currentRow = null;
0: 	        source.close();
0: 
0: 			super.close();
0: 	    }
0: 		else
0: 			if (SanityManager.DEBUG)
0: 				SanityManager.DEBUG("CloseRepeatInfo","Close of OnceResultSet repeated");
0: 
0: 		closeTime += getElapsedMillis(beginTime);
0: 	}
0: 
0: 	/**
0: 	 * @see NoPutResultSet#getPointOfAttachment
0: 	 */
0: 	public int getPointOfAttachment()
0: 	{
0: 		return pointOfAttachment;
0: 	}
0: 
0: 	/**
0: 	 * Return the total amount of time spent in this ResultSet
0: 	 *
0: 	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
0: 	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
0: 	 *
0: 	 * @return long		The total amount of time spent (in milliseconds).
0: 	 */
0: 	public long getTimeSpent(int type)
0: 	{
0: 		long totTime = constructorTime + openTime + nextTime + closeTime;
0: 
0: 		if (type == NoPutResultSet.CURRENT_RESULTSET_ONLY)
0: 		{
0: 			return	totTime - source.getTimeSpent(ENTIRE_RESULTSET_TREE);
0: 		}
0: 		else
0: 		{
0: 			return totTime;
0: 		}
0: 	}
0: }
============================================================================