1:431cefd: /*
5:431cefd: 
1:431cefd:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest
1:431cefd: 
1:431cefd:    Licensed to the Apache Software Foundation (ASF) under one or more
1:431cefd:    contributor license agreements.  See the NOTICE file distributed with
1:431cefd:    this work for additional information regarding copyright ownership.
1:431cefd:    The ASF licenses this file to you under the Apache License, Version 2.0
1:431cefd:    (the "License"); you may not use this file except in compliance with
1:431cefd:    the License.  You may obtain a copy of the License at
1:431cefd: 
1:431cefd:      http://www.apache.org/licenses/LICENSE-2.0
1:431cefd: 
1:431cefd:    Unless required by applicable law or agreed to in writing, software
1:431cefd:    distributed under the License is distributed on an "AS IS" BASIS,
1:431cefd:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:431cefd:    See the License for the specific language governing permissions and
1:431cefd:    limitations under the License.
1:431cefd: 
1:431cefd:  */
1:431cefd: 
1:431cefd: package org.apache.derbyTesting.functionTests.tests.lang;
1:431cefd: 
1:bf32514: import java.sql.CallableStatement;
1:431cefd: import java.sql.Connection;
1:bf32514: import java.sql.SQLException;
1:431cefd: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:431cefd: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1:431cefd: import org.apache.derbyTesting.junit.SupportFilesSetup;
1:431cefd: import org.apache.derbyTesting.junit.TestConfiguration;
1:431cefd: 
1:bf32514: import org.apache.derby.catalog.SystemProcedures;
1:bf32514: 
1:431cefd: /**
1:431cefd:  * Tests that certain operations can only be performed by the DBO.
1:431cefd:  */
1:431cefd: public class DBOAccessTest extends GeneratedColumnsHelper
1:431cefd: {
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd:     //
1:431cefd:     // CONSTANTS
1:431cefd:     //
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd: 
1:431cefd:     private static  final   String      TEST_DBO = "TEST_DBO";
1:431cefd:     private static  final   String      JANET = "JANET";
1:431cefd:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, JANET };
1:431cefd: 
1:431cefd:     // Name of the log file to use when testing VTIs that expect one.
1:431cefd:     private static final String TEST_LOG_FILE = "sys_vti_test_derby.tstlog";
1:431cefd: 
1:aa609d5:     private static  final   String      ONLY_DBO = "4251D";
1:aa609d5:     private static  final   String      HIDDEN_COLUMN = "4251E";
1:bf32514:     private static  final   String      NULL_BACKUP_DIRECTORY = "XSRS6";
1:bf32514:     private static  final   String      FIRST_CREDENTIALS = "4251K";
1:bf32514:     private static  final   String      MISSING_OBJECT = "X0X13";
1:bf32514:     private static  final   String      MISSING_TABLE = "42X05";
1:bf32514:     private static  final   String      NO_SUCH_TABLE = "XIE0M";
1:bf32514:     private static  final   String      UNKNOWN_USER = "XK001";
1:3be8464:     private static  final   String      SQLJ_INVALID_JAR = "46001";
1:bf32514: 
1:bf32514:     private static  final   String      SYSCS_SET_DATABASE_PROPERTY = "SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY";
1:bf32514:     private static  final   String      SYSCS_GET_DATABASE_PROPERTY = "SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY";
1:bf32514:     private static  final   String      SYSCS_FREEZE_DATABASE = "SYSCS_UTIL.SYSCS_FREEZE_DATABASE";
1:bf32514:     private static  final   String      SYSCS_UNFREEZE_DATABASE = "SYSCS_UTIL.SYSCS_UNFREEZE_DATABASE";
1:bf32514:     private static  final   String      SYSCS_CHECKPOINT_DATABASE = "SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE";
1:bf32514:     private static  final   String      SYSCS_BACKUP_DATABASE = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE";
1:bf32514:     private static  final   String      SYSCS_BACKUP_DATABASE_NOWAIT = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT";
1:bf32514:     private static  final   String      SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE";
1:bf32514:     private static  final   String      SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT";
1:bf32514:     private static  final   String      SYSCS_DISABLE_LOG_ARCHIVE_MODE = "SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE";
1:bf32514:     private static  final   String      SYSCS_CHECK_TABLE = "SYSCS_UTIL.SYSCS_CHECK_TABLE";
1:bf32514:     private static  final   String      INSTALL_JAR = "SQLJ.INSTALL_JAR";
1:bf32514:     private static  final   String      REPLACE_JAR = "SQLJ.REPLACE_JAR";
1:bf32514:     private static  final   String      REMOVE_JAR = "SQLJ.REMOVE_JAR";
1:bf32514:     private static  final   String      SYSCS_EXPORT_TABLE = "SYSCS_UTIL.SYSCS_EXPORT_TABLE";
1:bf32514:     private static  final   String      SYSCS_IMPORT_TABLE = "SYSCS_UTIL.SYSCS_IMPORT_TABLE";
1:bf32514:     private static  final   String      SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE = "SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE";
1:bf32514:     private static  final   String      SYSCS_IMPORT_DATA = "SYSCS_UTIL.SYSCS_IMPORT_DATA";
1:bf32514:     private static  final   String      SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE = "SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE";
1:bf32514:     private static  final   String      SYSCS_BULK_INSERT = "SYSCS_UTIL.SYSCS_BULK_INSERT";
1:bf32514:     private static  final   String      SYSCS_RELOAD_SECURITY_POLICY = "SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY";
1:bf32514:     private static  final   String      SYSCS_SET_USER_ACCESS = "SYSCS_UTIL.SYSCS_SET_USER_ACCESS";
1:bf32514:     private static  final   String      SYSCS_GET_USER_ACCESS = "SYSCS_UTIL.SYSCS_GET_USER_ACCESS";
1:bf32514:     private static  final   String      SYSCS_INVALIDATE_STORED_STATEMENTS = "SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS";
1:bf32514:     private static  final   String      SYSCS_EMPTY_STATEMENT_CACHE = "SYSCS_UTIL.SYSCS_EMPTY_STATEMENT_CACHE";
1:bf32514:     private static  final   String      SYSCS_SET_XPLAIN_MODE = "SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE";
1:bf32514:     private static  final   String      SYSCS_GET_XPLAIN_MODE = "SYSCS_UTIL.SYSCS_GET_XPLAIN_MODE";
1:bf32514:     private static  final   String      SYSCS_SET_XPLAIN_SCHEMA = "SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA";
1:bf32514:     private static  final   String      SYSCS_GET_XPLAIN_SCHEMA = "SYSCS_UTIL.SYSCS_GET_XPLAIN_SCHEMA";
1:bf32514:     private static  final   String      SYSCS_CREATE_USER = "SYSCS_UTIL.SYSCS_CREATE_USER";
1:bf32514:     private static  final   String      SYSCS_RESET_PASSWORD = "SYSCS_UTIL.SYSCS_RESET_PASSWORD";
1:bf32514:     private static  final   String      SYSCS_DROP_USER = "SYSCS_UTIL.SYSCS_DROP_USER";
1:aa609d5: 
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd:     //
1:431cefd:     // STATE
1:431cefd:     //
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd: 
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd:     //
1:431cefd:     // CONSTRUCTOR
1:431cefd:     //
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd: 
1:431cefd: 
1:431cefd:     /**
1:431cefd:      * Create a new instance.
1:431cefd:      */
1:431cefd: 
1:431cefd:     public DBOAccessTest( String name )
1:431cefd:     {
1:431cefd:         super( name );
1:431cefd:     }
1:431cefd: 
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd:     //
1:431cefd:     // OVERRIDABLE BEHAVIOR
1:431cefd:     //
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd: 
1:431cefd:     public  boolean authorizationIsOn() { return true; }
1:431cefd: 
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd:     //
1:431cefd:     // NESTED CLASSES
1:431cefd:     //
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd: 
1:431cefd:     public  static  final   class   NoAuthorization extends DBOAccessTest
1:431cefd:     {
1:431cefd:         public NoAuthorization( String name )
1:431cefd:         {
1:431cefd:             super( name );
1:431cefd:         }
1:431cefd: 
1:431cefd:         public  boolean authorizationIsOn() { return false; }
1:431cefd:     }
1:431cefd: 
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd:     //
1:431cefd:     // JUnit BEHAVIOR
1:431cefd:     //
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd: 
1:431cefd: 
1:bf32514:     /**
1:431cefd:      * Construct top level suite in this JUnit test
1:431cefd:      */
1:431cefd:     public static Test suite()
1:431cefd:     {
1:431cefd:         String[]    testFiles = new String[] { "functionTests/tests/lang/" + TEST_LOG_FILE };
1:431cefd:         
1:431cefd:         Test    authorizedRun = TestConfiguration.embeddedSuite( DBOAccessTest.class );
1:431cefd:         authorizedRun = DatabasePropertyTestSetup.builtinAuthentication
1:431cefd:             ( authorizedRun, LEGAL_USERS, "authorizationOnDBOAccessTest" );
1:431cefd:         authorizedRun = new SupportFilesSetup( authorizedRun, testFiles );
1:431cefd:         authorizedRun = TestConfiguration.sqlAuthorizationDecorator( authorizedRun );
1:431cefd: 
1:431cefd:         Test    unauthorizedRun = TestConfiguration.embeddedSuite( NoAuthorization.class );
1:431cefd:         unauthorizedRun = new SupportFilesSetup( unauthorizedRun, testFiles );
1:431cefd: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite();
1:431cefd:         suite.addTest( authorizedRun );
1:431cefd:         suite.addTest( unauthorizedRun );
1:431cefd: 
1:431cefd:         return suite;
1:431cefd:     }
1:431cefd: 
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd:     //
1:431cefd:     // TESTS
1:431cefd:     //
1:431cefd:     ///////////////////////////////////////////////////////////////////////////////////
1:431cefd: 
1:431cefd:     /**
1:bf32514:      * <p>
1:431cefd:      * Tests that only the DBO can run diagnostic VTIs which return sensitive information.
1:431cefd:      * See DERBY-5395.
1:431cefd:      * </p>
1:431cefd:      */
1:431cefd:     public  void    test_5395() throws Exception
1:431cefd:     {
1:431cefd:         println( "authorizationIsOn() = " + authorizationIsOn() );
1:431cefd:         
1:431cefd:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:431cefd:         Connection  janetConnection = openUserConnection( JANET );
1:431cefd: 
1:431cefd:         minion_5395( dboConnection, true );
1:431cefd:         minion_5395( janetConnection, !authorizationIsOn() );
1:431cefd:     }
1:431cefd:     private void    minion_5395( Connection conn, boolean shouldSucceed ) throws Exception
1:431cefd:     {
1:431cefd:         vet_5395( conn, shouldSucceed, "select * from syscs_diag.statement_cache" );
1:431cefd:         vet_5395( conn, shouldSucceed, "select * from syscs_diag.transaction_table" );
1:431cefd:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.error_log_reader( ) ) s" );
1:431cefd:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.statement_duration() ) s" );
1:431cefd:         
1:431cefd:         java.net.URL logURL = SupportFilesSetup.getReadOnlyURL( TEST_LOG_FILE );
1:431cefd:         String vtiArg = "'" + logURL.getFile() + "'";
1:431cefd: 
1:431cefd:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.error_log_reader( " + vtiArg + " ) ) s" );
1:431cefd:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.statement_duration( " + vtiArg + " ) ) s" );
1:431cefd:     }
1:431cefd:     private void    vet_5395( Connection conn, boolean shouldSucceed, String query ) throws Exception
1:431cefd:     {
1:431cefd:         if ( shouldSucceed ) { goodStatement( conn, query ); }
1:431cefd:         else
1:431cefd:         {
1:aa609d5:             expectCompilationError( conn, ONLY_DBO, query );
1:aa609d5:         }
1:aa609d5:     }
1:aa609d5: 
1:aa609d5:     /**
1:aa609d5:      * <p>
1:aa609d5:      * Tests that only the DBO can select from SYSUSERS and no-one can SELECT
1:aa609d5:      * SYSUSERS.PASSWORD.
1:aa609d5:      * </p>
1:aa609d5:      */
1:aa609d5:     public  void    testSYSUSERS() throws Exception
1:aa609d5:     {
1:aa609d5:         println( "testSYSUSERS authorizationIsOn() = " + authorizationIsOn() );
1:aa609d5:         
1:aa609d5:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:aa609d5:         Connection  janetConnection = openUserConnection( JANET );
1:aa609d5: 
1:aa609d5:         goodStatement( dboConnection, "create view v2 as select username, hashingscheme, lastmodified from sys.sysusers" );
1:aa609d5:         if ( authorizationIsOn() ) { goodStatement( dboConnection, "grant select on v2 to public" ); }
1:aa609d5: 
1:8eec7a9:         goodStatement( dboConnection, "create view v3 as select username, hashingscheme, lastmodified from sys.sysusers where password is null" );
1:8eec7a9:         if ( authorizationIsOn() ) { goodStatement( dboConnection, "grant select on v3 to public" ); }
1:8eec7a9: 
1:aa609d5:         vetDBO_OKProbes( dboConnection, true );
1:aa609d5:         vetDBO_OKProbes( janetConnection, !authorizationIsOn() );
1:aa609d5: 
1:aa609d5:         vetUnauthorizedProbes( dboConnection, !authorizationIsOn(), HIDDEN_COLUMN );
1:aa609d5:         vetUnauthorizedProbes( janetConnection, !authorizationIsOn(), ONLY_DBO );
1:aa609d5:     }
1:aa609d5:     // these statements should always succeed if the dbo is running
1:aa609d5:     // them or if authorization is not enabled
1:aa609d5:     private void    vetDBO_OKProbes( Connection conn, boolean shouldSucceed )
1:aa609d5:         throws Exception
1:aa609d5:     {
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select count(*) from sys.sysusers", ONLY_DBO );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select username, hashingscheme, lastmodified from sys.sysusers", ONLY_DBO );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select username from sys.sysusers", ONLY_DBO );
1:8eec7a9:         vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers", ONLY_DBO );
1:8eec7a9:         vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers where username = 'FRED'", ONLY_DBO );
1:aa609d5: 
1:aa609d5:         // can't use views to subvert authorization checks
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select count(*) from test_dbo.v2", ONLY_DBO );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select * from test_dbo.v2", ONLY_DBO );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select username, hashingscheme, lastmodified from test_dbo.v2", ONLY_DBO );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select username from test_dbo.v2", ONLY_DBO );
1:aa609d5:     }
1:aa609d5:     // these statements should always fail if authorization is enabled
1:aa609d5:     private void    vetUnauthorizedProbes( Connection conn, boolean shouldSucceed, String expectedSQLState )
1:aa609d5:         throws Exception
1:aa609d5:     {
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select * from sys.sysusers", expectedSQLState );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select * from sys.sysusers where username='foo'", expectedSQLState );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select password from sys.sysusers", expectedSQLState );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select username, password from sys.sysusers", expectedSQLState );
1:aa609d5:         vetUserProbes( conn, shouldSucceed, "select username from sys.sysusers where password = 'foo'", expectedSQLState );
1:8eec7a9:         vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers where password is not null", expectedSQLState );
1:8eec7a9:         vetUserProbes( conn, shouldSucceed, "select * from test_dbo.v3", expectedSQLState );
1:aa609d5:     }
1:aa609d5:     private void    vetUserProbes
1:aa609d5:         ( Connection conn, boolean shouldSucceed, String query, String expectedSQLState )
1:aa609d5:         throws Exception
1:aa609d5:     {
1:aa609d5:         if ( shouldSucceed ) { goodStatement( conn, query ); }
1:aa609d5:         else
1:aa609d5:         {
1:aa609d5:             expectCompilationError( conn, expectedSQLState, query );
1:431cefd:         }
1:431cefd:     }
1:431cefd: 
1:431cefd:     /**
1:431cefd:      * <p>
1:bf32514:      * Tests that you can't subvert sql authorization by directly calling
1:bf32514:      * the entry points in SystemProcedures.
1:bf32514:      * </p>
1:bf32514:      */
1:bf32514:     public  void    test_6616() throws Exception
1:bf32514:     {
1:bf32514:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:bf32514:         Connection  janetConnection = openUserConnection( JANET );
1:bf32514: 
1:bf32514:         goodStatement
1:bf32514:             (
1:bf32514:              dboConnection,
1:bf32514:              "create procedure runSystemRoutine( routineName varchar( 32672 ) )\n" +
1:bf32514:              "language java parameter style java modifies sql data\n" +
1:bf32514:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest.runSystemRoutine'\n"
1:bf32514:              );
1:bf32514:         if ( authorizationIsOn() )
1:bf32514:         {
1:bf32514:             goodStatement
1:bf32514:                 (
1:bf32514:                  dboConnection,
1:bf32514:                  "grant execute on procedure runSystemRoutine to public"
1:bf32514:                  );
1:bf32514:         }
1:bf32514: 
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_SET_DATABASE_PROPERTY, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_GET_DATABASE_PROPERTY, true );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_FREEZE_DATABASE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_UNFREEZE_DATABASE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_CHECKPOINT_DATABASE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE_NOWAIT, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_DISABLE_LOG_ARCHIVE_MODE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_CHECK_TABLE, true );
1:bf32514:         vet6616( dboConnection, janetConnection, INSTALL_JAR, false );
1:bf32514:         vet6616( dboConnection, janetConnection, REPLACE_JAR, false );
1:bf32514:         vet6616( dboConnection, janetConnection, REMOVE_JAR, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_EXPORT_TABLE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_TABLE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_DATA, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_BULK_INSERT, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_RELOAD_SECURITY_POLICY, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_SET_USER_ACCESS, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_GET_USER_ACCESS, true );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_INVALIDATE_STORED_STATEMENTS, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_EMPTY_STATEMENT_CACHE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_SET_XPLAIN_MODE, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_GET_XPLAIN_MODE, true );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_SET_XPLAIN_SCHEMA, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_GET_XPLAIN_SCHEMA, true );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_CREATE_USER, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_RESET_PASSWORD, false );
1:bf32514:         vet6616( dboConnection, janetConnection, SYSCS_DROP_USER, false );
1:bf32514:     }
1:bf32514:     private void    vet6616
1:bf32514:         ( Connection dboConnection, Connection janetConnection, String routineName, boolean isFunction )
1:bf32514:         throws Exception
1:bf32514:     {
1:bf32514:         vet6616( dboConnection, true, routineName );
1:bf32514:         vet6616( janetConnection, !authorizationIsOn(), routineName );
1:bf32514: 
1:bf32514:         if ( authorizationIsOn() )
1:bf32514:         {
1:bf32514:             boolean isFreeze = SYSCS_FREEZE_DATABASE.equals( routineName );
1:bf32514:             String  routineType = isFunction ? "function" : "procedure";
1:bf32514:             goodStatement( dboConnection, "grant execute on " + routineType + " " + routineName + " to public" );
1:bf32514: 
1:bf32514:             if ( isFreeze )
1:bf32514:             {
1:bf32514:                 goodStatement( dboConnection, "grant execute on " + routineType + " " + SYSCS_UNFREEZE_DATABASE + " to public" );
1:bf32514:             }
1:bf32514:         
1:bf32514:             vet6616( janetConnection, true, routineName );
1:bf32514:             
1:bf32514:             goodStatement( dboConnection, "revoke execute on " + routineType + " " + routineName + " from public restrict" );
1:bf32514: 
1:bf32514:             if ( isFreeze )
1:bf32514:             {
1:bf32514:                 goodStatement
1:bf32514:                     ( dboConnection, "revoke execute on " + routineType + " " + SYSCS_UNFREEZE_DATABASE + " from public restrict" );
1:bf32514:             }
1:bf32514:         }
1:bf32514:     }
1:bf32514:     private void    vet6616( Connection conn, boolean shouldSucceed, String routineName )
1:bf32514:         throws Exception
1:bf32514:     {
1:bf32514:         CallableStatement   cs = conn.prepareCall( "call test_dbo.runSystemRoutine( ? )" );
1:bf32514:         cs.setString( 1, routineName );
1:bf32514: 
1:bf32514:         try {
1:bf32514:             cs.execute();
1:bf32514:             if ( !shouldSucceed ) { fail( routineName + " should have failed!" ); }
1:bf32514:         }
1:bf32514:         catch (SQLException se)
1:bf32514:         {
1:3be8464:             if ( shouldSucceed )
1:3be8464:             {
1:3be8464:                 fail( routineName + " should have succeeded", se );
1:3be8464:             }
1:bf32514:             else
1:bf32514:             {
1:bf32514:                 assertSQLState( LACK_EXECUTE_PRIV, se );
1:bf32514:             }
1:bf32514:         }
1:bf32514:     }
1:bf32514: 
1:bf32514:     ///////////////////////////////////////////////////////////////////////////////////
1:bf32514:     //
1:bf32514:     // SQL ROUTINES
1:bf32514:     //
1:bf32514:     ///////////////////////////////////////////////////////////////////////////////////
1:bf32514: 
1:bf32514:     /** Run various system procedures and functions by calling them directly */
1:bf32514:     public  static  void    runSystemRoutine( String routineName )
1:bf32514:         throws Exception
1:bf32514:     {
1:bf32514:         if ( SYSCS_SET_DATABASE_PROPERTY.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_SET_DATABASE_PROPERTY( "foo.bar.wibble", "wibble.bar.foo" );
1:bf32514:         }
1:bf32514:         else if ( SYSCS_GET_DATABASE_PROPERTY.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_GET_DATABASE_PROPERTY( "la.dee.dah" );
1:bf32514:         }
1:bf32514:         else if ( SYSCS_FREEZE_DATABASE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_FREEZE_DATABASE();
1:bf32514: 
1:bf32514:             // if that succeeded, then unfreeze the database immediately
1:bf32514:             SystemProcedures.SYSCS_UNFREEZE_DATABASE();
1:bf32514:         }
1:bf32514:         else if ( SYSCS_UNFREEZE_DATABASE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_UNFREEZE_DATABASE();
1:bf32514:         }
1:bf32514:         else if ( SYSCS_CHECKPOINT_DATABASE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_CHECKPOINT_DATABASE();
1:bf32514:         }
1:bf32514:         else if ( SYSCS_BACKUP_DATABASE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_BACKUP_DATABASE( null );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_BACKUP_DATABASE_NOWAIT.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_BACKUP_DATABASE_NOWAIT( null );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:bf32514:         }
1:bf32514:         else if (SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE( null, (short) 0 );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:bf32514:         }
1:bf32514:         else if (SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT( null, (short) 0 );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_DISABLE_LOG_ARCHIVE_MODE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_DISABLE_LOG_ARCHIVE_MODE( (short) 0 );
1:bf32514:         }
1:bf32514:         else if ( SYSCS_CHECK_TABLE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_CHECK_TABLE( "SYS", "SYSTABLES" );
1:bf32514:         }
1:bf32514:         else if (INSTALL_JAR.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:3be8464:                 SystemProcedures.INSTALL_JAR( SupportFilesSetup.getReadOnlyFileName("foo"), "bar", 1 );
1:3be8464:                 fail();
1:bf32514:             }
1:3be8464:             catch (SQLException se) {
1:3be8464:                 vetError(SQLJ_INVALID_JAR, se);
1:3be8464:             }
1:bf32514:         }
1:bf32514:         else if (REPLACE_JAR.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:3be8464:                 SystemProcedures.REPLACE_JAR( SupportFilesSetup.getReadOnlyFileName("foo"), "bar" );
1:3be8464:                 fail();
1:3be8464:             }
1:3be8464:             catch (SQLException se) {
1:3be8464:                 vetError(SQLJ_INVALID_JAR, se);
1:bf32514:             }
1:bf32514:         }
1:bf32514:         else if (REMOVE_JAR.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.REMOVE_JAR( "test_dbo.foo", 0 );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( MISSING_OBJECT, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_EXPORT_TABLE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:3be8464:                 SystemProcedures.SYSCS_EXPORT_TABLE(
1:3be8464:                         "TEST_DBO", "BAR",
1:3be8464:                         SupportFilesSetup.getReadWriteFileName("WIBBLE"),
1:3be8464:                         null, null, null);
1:3be8464:                 fail();
1:bf32514:             }
1:3be8464:             catch (SQLException se) { vetError( MISSING_TABLE, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_IMPORT_TABLE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:3be8464:                 SystemProcedures.SYSCS_IMPORT_TABLE(
1:3be8464:                         "TEST_DBO", "BAR",
1:3be8464:                         SupportFilesSetup.getReadWriteFileName("WIBBLE"),
1:3be8464:                         null, null, null, (short) 1);
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE( "TEST_DBO", "BAR", "WIBBLE", null, null, null, (short) 1 );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_IMPORT_DATA.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_IMPORT_DATA
1:bf32514:                     ( "TEST_DBO", "BAR", null, "1,3,4", "WIBBLE", null, null, null, (short) 1 );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE
1:bf32514:                     ( "TEST_DBO", "BAR", null, "1,3,4", "WIBBLE", null, null, null, (short) 1 );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_BULK_INSERT.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_BULK_INSERT
1:bf32514:                     ( "TEST_DBO", "BAR", "WIBBLE", "wombat" );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( SYNTAX_ERROR, se ); }
1:bf32514:         }
1:bf32514:         else if ( SYSCS_RELOAD_SECURITY_POLICY.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_RELOAD_SECURITY_POLICY();
1:bf32514:         }
1:bf32514:         else if ( SYSCS_SET_USER_ACCESS.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_SET_USER_ACCESS( "FOO", "FULLACCESS" );
1:bf32514:         }
1:bf32514:         else if ( SYSCS_GET_USER_ACCESS.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_GET_USER_ACCESS( "FOO" );
1:bf32514:         }
1:bf32514:         else if ( SYSCS_INVALIDATE_STORED_STATEMENTS.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_INVALIDATE_STORED_STATEMENTS();
1:bf32514:         }
1:bf32514:         else if ( SYSCS_EMPTY_STATEMENT_CACHE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_EMPTY_STATEMENT_CACHE();
1:bf32514:         }
1:bf32514:         else if ( SYSCS_SET_XPLAIN_MODE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_SET_XPLAIN_MODE( 0 );
1:bf32514:         }
1:bf32514:         else if ( SYSCS_GET_XPLAIN_MODE.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_GET_XPLAIN_MODE();
1:bf32514:         }
1:bf32514:         else if ( SYSCS_SET_XPLAIN_SCHEMA.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_SET_XPLAIN_SCHEMA( "" );
1:bf32514:         }
1:bf32514:         else if ( SYSCS_GET_XPLAIN_SCHEMA.equals( routineName ) )
1:bf32514:         {
1:bf32514:             SystemProcedures.SYSCS_GET_XPLAIN_SCHEMA();
1:bf32514:         }
1:bf32514:         else if (SYSCS_CREATE_USER.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_CREATE_USER( "foo", "bar" );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( FIRST_CREDENTIALS, se ); }
1:bf32514:         }
1:bf32514:         else if (SYSCS_RESET_PASSWORD.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_RESET_PASSWORD( "foo", "bar" );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( UNKNOWN_USER, se ); }
1:bf32514:         }
1:bf32514:         else if (SYSCS_DROP_USER.equals( routineName ) )
1:bf32514:         {
1:bf32514:             try {
1:bf32514:                 SystemProcedures.SYSCS_DROP_USER( "foo" );
1:3be8464:                 fail();
1:bf32514:             }
1:bf32514:             catch (SQLException se) { vetError( UNKNOWN_USER, se ); }
1:bf32514:         }
1:bf32514:         else
1:bf32514:         {
1:bf32514:             throw new Exception( "Unknown routine name: " + routineName );
1:bf32514:         }
1:bf32514:     }
1:bf32514:     private static  void    vetError( String sqlState, SQLException se )
1:bf32514:         throws SQLException
1:bf32514:     {
1:bf32514:         if ( sqlState.equals( se.getSQLState() ) )
1:bf32514:         {
1:bf32514:             println( "Caught expected error: " + sqlState );
1:bf32514:         }
1:bf32514:         else { throw se; }
1:bf32514:     }
1:bf32514: 
1:431cefd: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:3be8464
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      SQLJ_INVALID_JAR = "46001";
/////////////////////////////////////////////////////////////////////////
1:             if ( shouldSucceed )
1:             {
1:                 fail( routineName + " should have succeeded", se );
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 SystemProcedures.INSTALL_JAR( SupportFilesSetup.getReadOnlyFileName("foo"), "bar", 1 );
1:                 fail();
1:             catch (SQLException se) {
1:                 vetError(SQLJ_INVALID_JAR, se);
1:             }
1:                 SystemProcedures.REPLACE_JAR( SupportFilesSetup.getReadOnlyFileName("foo"), "bar" );
1:                 fail();
1:             catch (SQLException se) {
1:                 vetError(SQLJ_INVALID_JAR, se);
1:             }
1:                 fail();
1:                 SystemProcedures.SYSCS_EXPORT_TABLE(
1:                         "TEST_DBO", "BAR",
1:                         SupportFilesSetup.getReadWriteFileName("WIBBLE"),
1:                         null, null, null);
1:                 fail();
1:             catch (SQLException se) { vetError( MISSING_TABLE, se ); }
1:                 SystemProcedures.SYSCS_IMPORT_TABLE(
1:                         "TEST_DBO", "BAR",
1:                         SupportFilesSetup.getReadWriteFileName("WIBBLE"),
1:                         null, null, null, (short) 1);
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
/////////////////////////////////////////////////////////////////////////
1:                 fail();
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:bf32514
/////////////////////////////////////////////////////////////////////////
0: import java.security.AccessControlException;
1: import java.sql.CallableStatement;
1: import java.sql.SQLException;
1: import org.apache.derby.catalog.SystemProcedures;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      NULL_BACKUP_DIRECTORY = "XSRS6";
1:     private static  final   String      FIRST_CREDENTIALS = "4251K";
1:     private static  final   String      MISSING_OBJECT = "X0X13";
1:     private static  final   String      MISSING_TABLE = "42X05";
1:     private static  final   String      NO_SUCH_TABLE = "XIE0M";
1:     private static  final   String      UNKNOWN_USER = "XK001";
1: 
1:     private static  final   String      SYSCS_SET_DATABASE_PROPERTY = "SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY";
1:     private static  final   String      SYSCS_GET_DATABASE_PROPERTY = "SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY";
1:     private static  final   String      SYSCS_FREEZE_DATABASE = "SYSCS_UTIL.SYSCS_FREEZE_DATABASE";
1:     private static  final   String      SYSCS_UNFREEZE_DATABASE = "SYSCS_UTIL.SYSCS_UNFREEZE_DATABASE";
1:     private static  final   String      SYSCS_CHECKPOINT_DATABASE = "SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE";
1:     private static  final   String      SYSCS_BACKUP_DATABASE = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE";
1:     private static  final   String      SYSCS_BACKUP_DATABASE_NOWAIT = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_NOWAIT";
1:     private static  final   String      SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE";
1:     private static  final   String      SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT = "SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT";
1:     private static  final   String      SYSCS_DISABLE_LOG_ARCHIVE_MODE = "SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE";
1:     private static  final   String      SYSCS_CHECK_TABLE = "SYSCS_UTIL.SYSCS_CHECK_TABLE";
1:     private static  final   String      INSTALL_JAR = "SQLJ.INSTALL_JAR";
1:     private static  final   String      REPLACE_JAR = "SQLJ.REPLACE_JAR";
1:     private static  final   String      REMOVE_JAR = "SQLJ.REMOVE_JAR";
1:     private static  final   String      SYSCS_EXPORT_TABLE = "SYSCS_UTIL.SYSCS_EXPORT_TABLE";
1:     private static  final   String      SYSCS_IMPORT_TABLE = "SYSCS_UTIL.SYSCS_IMPORT_TABLE";
1:     private static  final   String      SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE = "SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE";
1:     private static  final   String      SYSCS_IMPORT_DATA = "SYSCS_UTIL.SYSCS_IMPORT_DATA";
1:     private static  final   String      SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE = "SYSCS_UTIL.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE";
1:     private static  final   String      SYSCS_BULK_INSERT = "SYSCS_UTIL.SYSCS_BULK_INSERT";
1:     private static  final   String      SYSCS_RELOAD_SECURITY_POLICY = "SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY";
1:     private static  final   String      SYSCS_SET_USER_ACCESS = "SYSCS_UTIL.SYSCS_SET_USER_ACCESS";
1:     private static  final   String      SYSCS_GET_USER_ACCESS = "SYSCS_UTIL.SYSCS_GET_USER_ACCESS";
1:     private static  final   String      SYSCS_INVALIDATE_STORED_STATEMENTS = "SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS";
1:     private static  final   String      SYSCS_EMPTY_STATEMENT_CACHE = "SYSCS_UTIL.SYSCS_EMPTY_STATEMENT_CACHE";
1:     private static  final   String      SYSCS_SET_XPLAIN_MODE = "SYSCS_UTIL.SYSCS_SET_XPLAIN_MODE";
1:     private static  final   String      SYSCS_GET_XPLAIN_MODE = "SYSCS_UTIL.SYSCS_GET_XPLAIN_MODE";
1:     private static  final   String      SYSCS_SET_XPLAIN_SCHEMA = "SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA";
1:     private static  final   String      SYSCS_GET_XPLAIN_SCHEMA = "SYSCS_UTIL.SYSCS_GET_XPLAIN_SCHEMA";
1:     private static  final   String      SYSCS_CREATE_USER = "SYSCS_UTIL.SYSCS_CREATE_USER";
1:     private static  final   String      SYSCS_RESET_PASSWORD = "SYSCS_UTIL.SYSCS_RESET_PASSWORD";
1:     private static  final   String      SYSCS_DROP_USER = "SYSCS_UTIL.SYSCS_DROP_USER";
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * <p>
1:      * Tests that you can't subvert sql authorization by directly calling
1:      * the entry points in SystemProcedures.
1:      * </p>
1:      */
1:     public  void    test_6616() throws Exception
1:     {
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         goodStatement
1:             (
1:              dboConnection,
1:              "create procedure runSystemRoutine( routineName varchar( 32672 ) )\n" +
1:              "language java parameter style java modifies sql data\n" +
1:              "external name 'org.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest.runSystemRoutine'\n"
1:              );
1:         if ( authorizationIsOn() )
1:         {
1:             goodStatement
1:                 (
1:                  dboConnection,
1:                  "grant execute on procedure runSystemRoutine to public"
1:                  );
1:         }
1: 
1:         vet6616( dboConnection, janetConnection, SYSCS_SET_DATABASE_PROPERTY, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_GET_DATABASE_PROPERTY, true );
1:         vet6616( dboConnection, janetConnection, SYSCS_FREEZE_DATABASE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_UNFREEZE_DATABASE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_CHECKPOINT_DATABASE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE_NOWAIT, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_DISABLE_LOG_ARCHIVE_MODE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_CHECK_TABLE, true );
1:         vet6616( dboConnection, janetConnection, INSTALL_JAR, false );
1:         vet6616( dboConnection, janetConnection, REPLACE_JAR, false );
1:         vet6616( dboConnection, janetConnection, REMOVE_JAR, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_EXPORT_TABLE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_TABLE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_DATA, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_BULK_INSERT, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_RELOAD_SECURITY_POLICY, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_SET_USER_ACCESS, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_GET_USER_ACCESS, true );
1:         vet6616( dboConnection, janetConnection, SYSCS_INVALIDATE_STORED_STATEMENTS, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_EMPTY_STATEMENT_CACHE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_SET_XPLAIN_MODE, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_GET_XPLAIN_MODE, true );
1:         vet6616( dboConnection, janetConnection, SYSCS_SET_XPLAIN_SCHEMA, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_GET_XPLAIN_SCHEMA, true );
1:         vet6616( dboConnection, janetConnection, SYSCS_CREATE_USER, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_RESET_PASSWORD, false );
1:         vet6616( dboConnection, janetConnection, SYSCS_DROP_USER, false );
1:     }
1:     private void    vet6616
1:         ( Connection dboConnection, Connection janetConnection, String routineName, boolean isFunction )
1:         throws Exception
1:     {
1:         vet6616( dboConnection, true, routineName );
1:         vet6616( janetConnection, !authorizationIsOn(), routineName );
1: 
1:         if ( authorizationIsOn() )
1:         {
1:             boolean isFreeze = SYSCS_FREEZE_DATABASE.equals( routineName );
1:             String  routineType = isFunction ? "function" : "procedure";
1:             goodStatement( dboConnection, "grant execute on " + routineType + " " + routineName + " to public" );
1: 
1:             if ( isFreeze )
1:             {
1:                 goodStatement( dboConnection, "grant execute on " + routineType + " " + SYSCS_UNFREEZE_DATABASE + " to public" );
1:             }
1:         
1:             vet6616( janetConnection, true, routineName );
1:             
1:             goodStatement( dboConnection, "revoke execute on " + routineType + " " + routineName + " from public restrict" );
1: 
1:             if ( isFreeze )
1:             {
1:                 goodStatement
1:                     ( dboConnection, "revoke execute on " + routineType + " " + SYSCS_UNFREEZE_DATABASE + " from public restrict" );
1:             }
1:         }
1:     }
1:     private void    vet6616( Connection conn, boolean shouldSucceed, String routineName )
1:         throws Exception
1:     {
1:         CallableStatement   cs = conn.prepareCall( "call test_dbo.runSystemRoutine( ? )" );
1:         cs.setString( 1, routineName );
1: 
1:         try {
1:             cs.execute();
1:             if ( !shouldSucceed ) { fail( routineName + " should have failed!" ); }
1:         }
1:         catch (SQLException se)
1:         {
0:             if ( shouldSucceed ) { fail( routineName + " should have succeeded: " + se.getSQLState() + " " + se.getMessage() ); }
1:             else
1:             {
1:                 assertSQLState( LACK_EXECUTE_PRIV, se );
1:             }
1:         }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // SQL ROUTINES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /** Run various system procedures and functions by calling them directly */
1:     public  static  void    runSystemRoutine( String routineName )
1:         throws Exception
1:     {
1:         if ( SYSCS_SET_DATABASE_PROPERTY.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_SET_DATABASE_PROPERTY( "foo.bar.wibble", "wibble.bar.foo" );
1:         }
1:         else if ( SYSCS_GET_DATABASE_PROPERTY.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_GET_DATABASE_PROPERTY( "la.dee.dah" );
1:         }
1:         else if ( SYSCS_FREEZE_DATABASE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_FREEZE_DATABASE();
1: 
1:             // if that succeeded, then unfreeze the database immediately
1:             SystemProcedures.SYSCS_UNFREEZE_DATABASE();
1:         }
1:         else if ( SYSCS_UNFREEZE_DATABASE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_UNFREEZE_DATABASE();
1:         }
1:         else if ( SYSCS_CHECKPOINT_DATABASE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_CHECKPOINT_DATABASE();
1:         }
1:         else if ( SYSCS_BACKUP_DATABASE.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_BACKUP_DATABASE( null );
1:             }
1:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:         }
1:         else if ( SYSCS_BACKUP_DATABASE_NOWAIT.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_BACKUP_DATABASE_NOWAIT( null );
1:             }
1:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:         }
1:         else if (SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE( null, (short) 0 );
1:             }
1:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:         }
1:         else if (SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT( null, (short) 0 );
1:             }
1:             catch (SQLException se) { vetError( NULL_BACKUP_DIRECTORY, se ); }
1:         }
1:         else if ( SYSCS_DISABLE_LOG_ARCHIVE_MODE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_DISABLE_LOG_ARCHIVE_MODE( (short) 0 );
1:         }
1:         else if ( SYSCS_CHECK_TABLE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_CHECK_TABLE( "SYS", "SYSTABLES" );
1:         }
1:         else if (INSTALL_JAR.equals( routineName ) )
1:         {
1:             try {
0:                 SystemProcedures.INSTALL_JAR( "foo", "bar", 1 );
1:             }
0:             catch (AccessControlException se) { println( "Caught expected AccessControlException" ); }
1:         }
1:         else if (REPLACE_JAR.equals( routineName ) )
1:         {
1:             try {
0:                 SystemProcedures.REPLACE_JAR( "foo", "bar" );
1:             }
0:             catch (AccessControlException se) { println( "Caught expected AccessControlException" ); }
1:         }
1:         else if (REMOVE_JAR.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.REMOVE_JAR( "test_dbo.foo", 0 );
1:             }
1:             catch (SQLException se) { vetError( MISSING_OBJECT, se ); }
1:         }
1:         else if ( SYSCS_EXPORT_TABLE.equals( routineName ) )
1:         {
1:             try {
0:                 SystemProcedures.SYSCS_EXPORT_TABLE( "TEST_DBO", "BAR", "WIBBLE", null, null, null );
1:             }
0:             catch (SQLException se) { vetError( JAVA_EXCEPTION, se ); }
1:         }
1:         else if ( SYSCS_IMPORT_TABLE.equals( routineName ) )
1:         {
1:             try {
0:                 SystemProcedures.SYSCS_IMPORT_TABLE( "TEST_DBO", "BAR", "WIBBLE", null, null, null, (short) 1 );
1:             }
1:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:         }
1:         else if ( SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE( "TEST_DBO", "BAR", "WIBBLE", null, null, null, (short) 1 );
1:             }
1:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:         }
1:         else if ( SYSCS_IMPORT_DATA.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_IMPORT_DATA
1:                     ( "TEST_DBO", "BAR", null, "1,3,4", "WIBBLE", null, null, null, (short) 1 );
1:             }
1:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:         }
1:         else if ( SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE
1:                     ( "TEST_DBO", "BAR", null, "1,3,4", "WIBBLE", null, null, null, (short) 1 );
1:             }
1:             catch (SQLException se) { vetError( NO_SUCH_TABLE, se ); }
1:         }
1:         else if ( SYSCS_BULK_INSERT.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_BULK_INSERT
1:                     ( "TEST_DBO", "BAR", "WIBBLE", "wombat" );
1:             }
1:             catch (SQLException se) { vetError( SYNTAX_ERROR, se ); }
1:         }
1:         else if ( SYSCS_RELOAD_SECURITY_POLICY.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_RELOAD_SECURITY_POLICY();
1:         }
1:         else if ( SYSCS_SET_USER_ACCESS.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_SET_USER_ACCESS( "FOO", "FULLACCESS" );
1:         }
1:         else if ( SYSCS_GET_USER_ACCESS.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_GET_USER_ACCESS( "FOO" );
1:         }
1:         else if ( SYSCS_INVALIDATE_STORED_STATEMENTS.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_INVALIDATE_STORED_STATEMENTS();
1:         }
1:         else if ( SYSCS_EMPTY_STATEMENT_CACHE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_EMPTY_STATEMENT_CACHE();
1:         }
1:         else if ( SYSCS_SET_XPLAIN_MODE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_SET_XPLAIN_MODE( 0 );
1:         }
1:         else if ( SYSCS_GET_XPLAIN_MODE.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_GET_XPLAIN_MODE();
1:         }
1:         else if ( SYSCS_SET_XPLAIN_SCHEMA.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_SET_XPLAIN_SCHEMA( "" );
1:         }
1:         else if ( SYSCS_GET_XPLAIN_SCHEMA.equals( routineName ) )
1:         {
1:             SystemProcedures.SYSCS_GET_XPLAIN_SCHEMA();
1:         }
1:         else if (SYSCS_CREATE_USER.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_CREATE_USER( "foo", "bar" );
1:             }
1:             catch (SQLException se) { vetError( FIRST_CREDENTIALS, se ); }
1:         }
1:         else if (SYSCS_RESET_PASSWORD.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_RESET_PASSWORD( "foo", "bar" );
1:             }
1:             catch (SQLException se) { vetError( UNKNOWN_USER, se ); }
1:         }
1:         else if (SYSCS_DROP_USER.equals( routineName ) )
1:         {
1:             try {
1:                 SystemProcedures.SYSCS_DROP_USER( "foo" );
1:             }
1:             catch (SQLException se) { vetError( UNKNOWN_USER, se ); }
1:         }
1:         else
1:         {
1:             throw new Exception( "Unknown routine name: " + routineName );
1:         }
1:     }
1:     private static  void    vetError( String sqlState, SQLException se )
1:         throws SQLException
1:     {
1:         if ( sqlState.equals( se.getSQLState() ) )
1:         {
1:             println( "Caught expected error: " + sqlState );
1:         }
1:         else { throw se; }
1:     }
1: 
commit:8eec7a9
/////////////////////////////////////////////////////////////////////////
1:         goodStatement( dboConnection, "create view v3 as select username, hashingscheme, lastmodified from sys.sysusers where password is null" );
1:         if ( authorizationIsOn() ) { goodStatement( dboConnection, "grant select on v3 to public" ); }
1: 
/////////////////////////////////////////////////////////////////////////
1:         vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers", ONLY_DBO );
1:         vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers where username = 'FRED'", ONLY_DBO );
/////////////////////////////////////////////////////////////////////////
1:         vetUserProbes( conn, shouldSucceed, "select username, lastmodified from sys.sysusers where password is not null", expectedSQLState );
1:         vetUserProbes( conn, shouldSucceed, "select * from test_dbo.v3", expectedSQLState );
commit:aa609d5
/////////////////////////////////////////////////////////////////////////
1:     private static  final   String      ONLY_DBO = "4251D";
1:     private static  final   String      HIDDEN_COLUMN = "4251E";
1: 
/////////////////////////////////////////////////////////////////////////
1:             expectCompilationError( conn, ONLY_DBO, query );
1:         }
1:     }
1: 
1:     /**
1:      * <p>
1:      * Tests that only the DBO can select from SYSUSERS and no-one can SELECT
1:      * SYSUSERS.PASSWORD.
1:      * </p>
1:      */
1:     public  void    testSYSUSERS() throws Exception
1:     {
1:         println( "testSYSUSERS authorizationIsOn() = " + authorizationIsOn() );
1:         
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         goodStatement( dboConnection, "create view v2 as select username, hashingscheme, lastmodified from sys.sysusers" );
1:         if ( authorizationIsOn() ) { goodStatement( dboConnection, "grant select on v2 to public" ); }
1: 
1:         vetDBO_OKProbes( dboConnection, true );
1:         vetDBO_OKProbes( janetConnection, !authorizationIsOn() );
1: 
1:         vetUnauthorizedProbes( dboConnection, !authorizationIsOn(), HIDDEN_COLUMN );
1:         vetUnauthorizedProbes( janetConnection, !authorizationIsOn(), ONLY_DBO );
1:     }
1:     // these statements should always succeed if the dbo is running
1:     // them or if authorization is not enabled
1:     private void    vetDBO_OKProbes( Connection conn, boolean shouldSucceed )
1:         throws Exception
1:     {
1:         vetUserProbes( conn, shouldSucceed, "select count(*) from sys.sysusers", ONLY_DBO );
1:         vetUserProbes( conn, shouldSucceed, "select username, hashingscheme, lastmodified from sys.sysusers", ONLY_DBO );
1:         vetUserProbes( conn, shouldSucceed, "select username from sys.sysusers", ONLY_DBO );
1: 
1:         // can't use views to subvert authorization checks
1:         vetUserProbes( conn, shouldSucceed, "select count(*) from test_dbo.v2", ONLY_DBO );
1:         vetUserProbes( conn, shouldSucceed, "select * from test_dbo.v2", ONLY_DBO );
1:         vetUserProbes( conn, shouldSucceed, "select username, hashingscheme, lastmodified from test_dbo.v2", ONLY_DBO );
1:         vetUserProbes( conn, shouldSucceed, "select username from test_dbo.v2", ONLY_DBO );
1:     }
1:     // these statements should always fail if authorization is enabled
1:     private void    vetUnauthorizedProbes( Connection conn, boolean shouldSucceed, String expectedSQLState )
1:         throws Exception
1:     {
1:         vetUserProbes( conn, shouldSucceed, "select * from sys.sysusers", expectedSQLState );
1:         vetUserProbes( conn, shouldSucceed, "select * from sys.sysusers where username='foo'", expectedSQLState );
1:         vetUserProbes( conn, shouldSucceed, "select password from sys.sysusers", expectedSQLState );
1:         vetUserProbes( conn, shouldSucceed, "select username, password from sys.sysusers", expectedSQLState );
1:         vetUserProbes( conn, shouldSucceed, "select username from sys.sysusers where password = 'foo'", expectedSQLState );
1:     }
1:     private void    vetUserProbes
1:         ( Connection conn, boolean shouldSucceed, String query, String expectedSQLState )
1:         throws Exception
1:     {
1:         if ( shouldSucceed ) { goodStatement( conn, query ); }
1:         else
1:         {
1:             expectCompilationError( conn, expectedSQLState, query );
commit:431cefd
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:      http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.lang;
1: 
0: import java.net.URL;
1: import java.sql.Connection;
0: import java.sql.PreparedStatement;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: 
1: /**
1:  * Tests that certain operations can only be performed by the DBO.
1:  */
1: public class DBOAccessTest extends GeneratedColumnsHelper
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String      TEST_DBO = "TEST_DBO";
1:     private static  final   String      JANET = "JANET";
1:     private static  final   String[]    LEGAL_USERS = { TEST_DBO, JANET };
1: 
1:     // Name of the log file to use when testing VTIs that expect one.
1:     private static final String TEST_LOG_FILE = "sys_vti_test_derby.tstlog";
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Create a new instance.
1:      */
1: 
1:     public DBOAccessTest( String name )
1:     {
1:         super( name );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // OVERRIDABLE BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  boolean authorizationIsOn() { return true; }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // NESTED CLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     public  static  final   class   NoAuthorization extends DBOAccessTest
1:     {
1:         public NoAuthorization( String name )
1:         {
1:             super( name );
1:         }
1: 
1:         public  boolean authorizationIsOn() { return false; }
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // JUnit BEHAVIOR
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Construct top level suite in this JUnit test
1:      */
1:     public static Test suite()
1:     {
1:         String[]    testFiles = new String[] { "functionTests/tests/lang/" + TEST_LOG_FILE };
1:         
1:         Test    authorizedRun = TestConfiguration.embeddedSuite( DBOAccessTest.class );
1:         authorizedRun = DatabasePropertyTestSetup.builtinAuthentication
1:             ( authorizedRun, LEGAL_USERS, "authorizationOnDBOAccessTest" );
1:         authorizedRun = new SupportFilesSetup( authorizedRun, testFiles );
1:         authorizedRun = TestConfiguration.sqlAuthorizationDecorator( authorizedRun );
1: 
1:         Test    unauthorizedRun = TestConfiguration.embeddedSuite( NoAuthorization.class );
1:         unauthorizedRun = new SupportFilesSetup( unauthorizedRun, testFiles );
1: 
0:         TestSuite suite = new TestSuite();
1:         suite.addTest( authorizedRun );
1:         suite.addTest( unauthorizedRun );
1: 
1:         return suite;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TESTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Tests that only the DBO can run diagnostic VTIs which return sensitive information.
1:      * See DERBY-5395.
1:      * </p>
1:      */
1:     public  void    test_5395() throws Exception
1:     {
1:         println( "authorizationIsOn() = " + authorizationIsOn() );
1:         
1:         Connection  dboConnection = openUserConnection( TEST_DBO );
1:         Connection  janetConnection = openUserConnection( JANET );
1: 
1:         minion_5395( dboConnection, true );
1:         minion_5395( janetConnection, !authorizationIsOn() );
1:     }
1:     private void    minion_5395( Connection conn, boolean shouldSucceed ) throws Exception
1:     {
1:         vet_5395( conn, shouldSucceed, "select * from syscs_diag.statement_cache" );
1:         vet_5395( conn, shouldSucceed, "select * from syscs_diag.transaction_table" );
1:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.error_log_reader( ) ) s" );
1:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.statement_duration() ) s" );
1:         
1:         java.net.URL logURL = SupportFilesSetup.getReadOnlyURL( TEST_LOG_FILE );
1:         String vtiArg = "'" + logURL.getFile() + "'";
1: 
1:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.error_log_reader( " + vtiArg + " ) ) s" );
1:         vet_5395( conn, shouldSucceed, "select * from table( syscs_diag.statement_duration( " + vtiArg + " ) ) s" );
1:     }
1:     private void    vet_5395( Connection conn, boolean shouldSucceed, String query ) throws Exception
1:     {
1:         if ( shouldSucceed ) { goodStatement( conn, query ); }
1:         else
1:         {
0:             expectCompilationError( conn, "4251D", query );
1:         }
1:     }
1: 
1: }
1: 
1: 
1: 
1: 
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
0: import org.apache.derbyTesting.junit.TestConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite();
============================================================================