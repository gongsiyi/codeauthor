1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.services.diag.DiagnosticUtil
1:7ecc1f2: 
1:6baf18b:    Licensed to the Apache Software Foundation (ASF) under one or more
1:6baf18b:    contributor license agreements.  See the NOTICE file distributed with
1:6baf18b:    this work for additional information regarding copyright ownership.
1:6baf18b:    The ASF licenses this file to you under the Apache License, Version 2.0
1:6baf18b:    (the "License"); you may not use this file except in compliance with
1:6baf18b:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.services.diag;
1:eac0369: 
2:eac0369: /**
1:eac0369: 
1:eac0369: The Diagnostic framework is meant to provide a way to include as much
1:3fd26f3: diagnostic capability within the distributed release of the Derby
1:eac0369: product without adversely affecting the runtime speed or foot print of
1:eac0369: a running configuration that needs not use this information.
1:eac0369: 
1:eac0369: In order to decrease the class size of running objects diagnostic information
1:eac0369: should be put in "helper" classes.  So to provide diagnostic capabiility
1:eac0369: on the implementation of class Foo.java create a class D_Foo.java.  Class
1:eac0369: D_Foo must implement the Diagnosticable interface.  
1:eac0369: 
1:eac0369: This class provide utility functions to get at the information provided by
1:eac0369: the D_* helper class:
1:eac0369:     findDiagnostic() - given and object "obj", get an instance of D_obj. 
1:eac0369:     toDiagString()   - return the "best" diagnostic string available about
1:eac0369:                        a given object.
1:eac0369: 
1:eac0369: **/
1:eac0369: 
1:4469400: import java.lang.reflect.Constructor;
1:4469400: 
1:eac0369: public class DiagnosticUtil
1:eac0369: {
1:eac0369:     /* Constructors for This class: */
1:eac0369:     private DiagnosticUtil()
1:eac0369:     {
1:eac0369:     }
1:eac0369: 
1:eac0369:     /* Private/Protected methods of This class: */
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Given an object return instance of the diagnostic object for this class.
1:eac0369:      * <p>
1:eac0369:      * Given an object this routine will determine the classname of the object
1:eac0369:      * and then try to instantiate a new instance of the diagnostic object
1:eac0369:      * for this class by prepending on "D_" to the last element of theclassname.
1:eac0369: 	   If no matching class is found then the same lookup is made on the super-class
1:eac0369: 	   of the object, looking all the way up the hierachy until a diagnostic class
1:eac0369: 	   is found.
1:eac0369: 	 * <BR>
1:eac0369: 	   This routine will call "init(ref)" on the new instance and then return the new instance.
1:eac0369:      *
1:eac0369: 	 * @return A new instance of the diagnostic object for input object, or
1:eac0369:      *         null if one could not be found for some reason.
1:eac0369:      *
1:eac0369:      * @param ref   The object which to build the diagnostic object for.
1:eac0369:      **/
1:eac0369:     public static Diagnosticable findDiagnostic(Object ref)
1:eac0369:     {
1:eac0369:         Class refClass = ref.getClass();
1:eac0369: 
1:eac0369: 		for (;;) {
1:eac0369: 			try 
1:eac0369: 			{
1:eac0369: 				String className = refClass.getName();
1:eac0369: 				int lastDot = className.lastIndexOf('.') + 1;
1:eac0369: 				String          diagClassName = 
1:eac0369: 					className.substring(0, lastDot) + 
1:eac0369: 					"D_" + className.substring(lastDot);
1:eac0369: 
1:4469400: 				Class<?> diagClass;
1:eac0369: 				
1:eac0369: 				try {
1:eac0369: 					diagClass = Class.forName(diagClassName);
1:eac0369: 				} catch (ClassNotFoundException cnfe) {
1:eac0369: 
1:eac0369: 					// try the super-class of the object
1:eac0369: 					refClass = refClass.getSuperclass();
1:eac0369: 					if (refClass == null)
1:eac0369: 						return null;
1:eac0369: 
1:eac0369: 					continue;
1:eac0369: 				}
1:eac0369: 
1:eac0369: 
1:4469400:                 Constructor<?> constructor = diagClass.getConstructor();
1:4469400: 				Diagnosticable diag_obj = (Diagnosticable) diagClass.getConstructor().newInstance();
1:eac0369: 
1:eac0369: 				diag_obj.init(ref);
1:eac0369: 
1:eac0369: 				return diag_obj;
1:eac0369: 			}
1:eac0369: 			catch (Exception e)
1:eac0369: 			{
1:eac0369: 				return null;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 	}
1:eac0369: 
1:eac0369:     /**
1:eac0369:      * Return a diagnostic string associated with an object.
1:eac0369:      * <p>
1:eac0369:      * A utility interface to use if you just want to print a single string 
1:eac0369:      * that represents the object in question.  In following order this routine
1:eac0369:      * will deliver the string to use:
1:eac0369:      * 
1:eac0369:      *     1) find diagnostic help class, and use class.diag()
1:eac0369:      *     2) else just use class.toString()
1:eac0369:      *
1:eac0369:      * <p>
1:eac0369:      *
1:eac0369: 	 * @return The string describing the class input.
1:eac0369:      *
1:eac0369:      * @param obj The object to print out.
1:eac0369:      *
1:eac0369:      **/
1:eac0369:     public static String toDiagString(Object obj)
1:eac0369:     {
1:eac0369:         String ret_string = null;
1:eac0369: 
1:eac0369: 		if (obj == null) return "null";
1:eac0369:         
1:eac0369:         try 
1:eac0369:         {
1:eac0369:             Diagnosticable diag = DiagnosticUtil.findDiagnostic(obj);
1:eac0369:             if (diag != null)
1:eac0369:                 ret_string = diag.diag();
1:eac0369:         }
1:eac0369:         catch (Throwable t)
1:eac0369:         {
1:eac0369:             // do nothing, ret_string should still be null on error
1:eac0369:         }
1:eac0369: 
1:eac0369:         if (ret_string == null)
1:eac0369:         {
1:eac0369:             ret_string = obj.toString();
1:eac0369:         }
1:eac0369: 
1:eac0369:         return(ret_string);
1:eac0369:     }
1:eac0369: 
1:eac0369:     /* Public Methods of This class: */
1:eac0369:     /* Public Methods of XXXX class: */
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
1: 
/////////////////////////////////////////////////////////////////////////
1: 				Class<?> diagClass;
/////////////////////////////////////////////////////////////////////////
1:                 Constructor<?> constructor = diagClass.getConstructor();
1: 				Diagnosticable diag_obj = (Diagnosticable) diagClass.getConstructor().newInstance();
commit:6baf18b
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:3fd26f3
/////////////////////////////////////////////////////////////////////////
1: diagnostic capability within the distributed release of the Derby
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.services.diag.DiagnosticUtil
1: 
0:    Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.diag
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.services.diag;
1: 
1: /**
1: 
1: The Diagnostic framework is meant to provide a way to include as much
0: diagnostic capability within the distributed release of the cloudscape
1: product without adversely affecting the runtime speed or foot print of
1: a running configuration that needs not use this information.
1: 
1: In order to decrease the class size of running objects diagnostic information
1: should be put in "helper" classes.  So to provide diagnostic capabiility
1: on the implementation of class Foo.java create a class D_Foo.java.  Class
1: D_Foo must implement the Diagnosticable interface.  
1: 
1: This class provide utility functions to get at the information provided by
1: the D_* helper class:
1:     findDiagnostic() - given and object "obj", get an instance of D_obj. 
1:     toDiagString()   - return the "best" diagnostic string available about
1:                        a given object.
1: 
1: **/
1: 
1: public class DiagnosticUtil
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
1:     /* Constructors for This class: */
1:     private DiagnosticUtil()
1:     {
1:     }
1: 
1:     /* Private/Protected methods of This class: */
1: 
1:     /**
1:      * Given an object return instance of the diagnostic object for this class.
1:      * <p>
1:      * Given an object this routine will determine the classname of the object
1:      * and then try to instantiate a new instance of the diagnostic object
1:      * for this class by prepending on "D_" to the last element of theclassname.
1: 	   If no matching class is found then the same lookup is made on the super-class
1: 	   of the object, looking all the way up the hierachy until a diagnostic class
1: 	   is found.
1: 	 * <BR>
1: 	   This routine will call "init(ref)" on the new instance and then return the new instance.
1:      *
1: 	 * @return A new instance of the diagnostic object for input object, or
1:      *         null if one could not be found for some reason.
1:      *
1:      * @param ref   The object which to build the diagnostic object for.
1:      **/
1:     public static Diagnosticable findDiagnostic(Object ref)
1:     {
1:         Class refClass = ref.getClass();
1: 
1: 		for (;;) {
1: 			try 
1: 			{
1: 				String className = refClass.getName();
1: 				int lastDot = className.lastIndexOf('.') + 1;
1: 				String          diagClassName = 
1: 					className.substring(0, lastDot) + 
1: 					"D_" + className.substring(lastDot);
1: 
0: 				Class diagClass;
1: 				
1: 				try {
1: 					diagClass = Class.forName(diagClassName);
1: 				} catch (ClassNotFoundException cnfe) {
1: 
1: 					// try the super-class of the object
1: 					refClass = refClass.getSuperclass();
1: 					if (refClass == null)
1: 						return null;
1: 
1: 					continue;
1: 				}
1: 
1: 
0: 				Diagnosticable diag_obj = (Diagnosticable) diagClass.newInstance();
1: 
1: 				diag_obj.init(ref);
1: 
1: 				return diag_obj;
1: 			}
1: 			catch (Exception e)
1: 			{
1: 				return null;
1: 			}
1: 		}
1: 	}
1: 
1:     /**
1:      * Return a diagnostic string associated with an object.
1:      * <p>
1:      * A utility interface to use if you just want to print a single string 
1:      * that represents the object in question.  In following order this routine
1:      * will deliver the string to use:
1:      * 
1:      *     1) find diagnostic help class, and use class.diag()
1:      *     2) else just use class.toString()
1:      *
1:      * <p>
1:      *
1: 	 * @return The string describing the class input.
1:      *
1:      * @param obj The object to print out.
1:      *
1:      **/
1:     public static String toDiagString(Object obj)
1:     {
1:         String ret_string = null;
1: 
1: 		if (obj == null) return "null";
1:         
1:         try 
1:         {
1:             Diagnosticable diag = DiagnosticUtil.findDiagnostic(obj);
1:             if (diag != null)
1:                 ret_string = diag.diag();
1:         }
1:         catch (Throwable t)
1:         {
1:             // do nothing, ret_string should still be null on error
1:         }
1: 
1:         if (ret_string == null)
1:         {
1:             ret_string = obj.toString();
1:         }
1: 
1:         return(ret_string);
1:     }
1: 
1:     /* Public Methods of This class: */
1:     /* Public Methods of XXXX class: */
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.services.diag
0:    (C) Copyright IBM Corp. 1998, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.services.diag;
0: 
0: /**
0: 
0: The Diagnostic framework is meant to provide a way to include as much
0: diagnostic capability within the distributed release of the cloudscape
0: product without adversely affecting the runtime speed or foot print of
0: a running configuration that needs not use this information.
0: 
0: In order to decrease the class size of running objects diagnostic information
0: should be put in "helper" classes.  So to provide diagnostic capabiility
0: on the implementation of class Foo.java create a class D_Foo.java.  Class
0: D_Foo must implement the Diagnosticable interface.  
0: 
0: This class provide utility functions to get at the information provided by
0: the D_* helper class:
0:     findDiagnostic() - given and object "obj", get an instance of D_obj. 
0:     toDiagString()   - return the "best" diagnostic string available about
0:                        a given object.
0: 
0: **/
0: 
0: public class DiagnosticUtil
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1998_2004;
0:     /* Constructors for This class: */
0:     private DiagnosticUtil()
0:     {
0:     }
0: 
0:     /* Private/Protected methods of This class: */
0: 
0:     /**
0:      * Given an object return instance of the diagnostic object for this class.
0:      * <p>
0:      * Given an object this routine will determine the classname of the object
0:      * and then try to instantiate a new instance of the diagnostic object
0:      * for this class by prepending on "D_" to the last element of theclassname.
0: 	   If no matching class is found then the same lookup is made on the super-class
0: 	   of the object, looking all the way up the hierachy until a diagnostic class
0: 	   is found.
0: 	 * <BR>
0: 	   This routine will call "init(ref)" on the new instance and then return the new instance.
0:      *
0: 	 * @return A new instance of the diagnostic object for input object, or
0:      *         null if one could not be found for some reason.
0:      *
0:      * @param ref   The object which to build the diagnostic object for.
0:      **/
0:     public static Diagnosticable findDiagnostic(Object ref)
0:     {
0:         Class refClass = ref.getClass();
0: 
0: 		for (;;) {
0: 			try 
0: 			{
0: 				String className = refClass.getName();
0: 				int lastDot = className.lastIndexOf('.') + 1;
0: 				String          diagClassName = 
0: 					className.substring(0, lastDot) + 
0: 					"D_" + className.substring(lastDot);
0: 
0: 				Class diagClass;
0: 				
0: 				try {
0: 					diagClass = Class.forName(diagClassName);
0: 				} catch (ClassNotFoundException cnfe) {
0: 
0: 					// try the super-class of the object
0: 					refClass = refClass.getSuperclass();
0: 					if (refClass == null)
0: 						return null;
0: 
0: 					continue;
0: 				}
0: 
0: 
0: 				Diagnosticable diag_obj = (Diagnosticable) diagClass.newInstance();
0: 
0: 				diag_obj.init(ref);
0: 
0: 				return diag_obj;
0: 			}
0: 			catch (Exception e)
0: 			{
0: 				return null;
0: 			}
0: 		}
0: 	}
0: 
0:     /**
0:      * Return a diagnostic string associated with an object.
0:      * <p>
0:      * A utility interface to use if you just want to print a single string 
0:      * that represents the object in question.  In following order this routine
0:      * will deliver the string to use:
0:      * 
0:      *     1) find diagnostic help class, and use class.diag()
0:      *     2) else just use class.toString()
0:      *
0:      * <p>
0:      *
0: 	 * @return The string describing the class input.
0:      *
0:      * @param obj The object to print out.
0:      *
0:      **/
0:     public static String toDiagString(Object obj)
0:     {
0:         String ret_string = null;
0: 
0: 		if (obj == null) return "null";
0:         
0:         try 
0:         {
0:             Diagnosticable diag = DiagnosticUtil.findDiagnostic(obj);
0:             if (diag != null)
0:                 ret_string = diag.diag();
0:         }
0:         catch (Throwable t)
0:         {
0:             // do nothing, ret_string should still be null on error
0:         }
0: 
0:         if (ret_string == null)
0:         {
0:             ret_string = obj.toString();
0:         }
0: 
0:         return(ret_string);
0:     }
0: 
0:     /* Public Methods of This class: */
0:     /* Public Methods of XXXX class: */
0: }
============================================================================