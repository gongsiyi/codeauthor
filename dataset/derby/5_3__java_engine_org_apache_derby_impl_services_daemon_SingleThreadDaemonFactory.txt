1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.services.daemon.SingleThreadDaemonFactory
1:345de35: 
1:93fea34:    Licensed to the Apache Software Foundation (ASF) under one or more
1:93fea34:    contributor license agreements.  See the NOTICE file distributed with
1:93fea34:    this work for additional information regarding copyright ownership.
1:93fea34:    The ASF licenses this file to you under the Apache License, Version 2.0
1:93fea34:    (the "License"); you may not use this file except in compliance with
1:93fea34:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
2:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.impl.services.daemon;
1:eac0369: 
1:c34c8e0: import java.security.AccessController;
1:c34c8e0: import java.security.PrivilegedAction;
1:c34c8e0: 
1:eac0369: import org.apache.derby.iapi.services.context.ContextService;
1:eac0369: import org.apache.derby.iapi.services.daemon.DaemonFactory;
1:eac0369: import org.apache.derby.iapi.services.daemon.DaemonService;
1:eac0369: import org.apache.derby.impl.services.daemon.BasicDaemon;
1:eac0369: import org.apache.derby.iapi.services.monitor.Monitor;
1:c34c8e0: 
1:eac0369: 
1:eac0369: public class SingleThreadDaemonFactory implements DaemonFactory
1:eac0369: {
1:eac0369: 	private final ContextService contextService;
1:eac0369: 	
1:eac0369: 	public SingleThreadDaemonFactory()
1:eac0369: 	{
1:a0dbbd7: 		contextService = getContextService();
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/*
1:eac0369: 	 * Daemon factory method
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	/* make a daemon service with the default timer */
1:eac0369: 	public DaemonService createNewDaemon(String name)
1:eac0369: 	{
1:eac0369: 		BasicDaemon daemon = new BasicDaemon(contextService);
1:eac0369: 
1:56c1dc2: 		final Thread daemonThread = BasicDaemon.getMonitor().getDaemonThread(daemon, name, false);
1:9e91a06: 		// DERBY-3745.  setContextClassLoader for thread to null to avoid
1:9e91a06: 		// leaking class loaders.
1:c34c8e0: 		try {
1:c34c8e0:             AccessController.doPrivileged(
1:a15a470:              new PrivilegedAction<Object>() {
1:c34c8e0:                 public Object run()  {
1:c34c8e0:                     daemonThread.setContextClassLoader(null);
1:c34c8e0:                     return null;
1:c34c8e0:                 }
1:c34c8e0:             });
1:c34c8e0:         } catch (SecurityException se) {
1:c34c8e0:             // ignore security exception.  Earlier versions of Derby, before the 
1:c34c8e0:             // DERBY-3745 fix did not require setContextClassloader permissions.
1:c34c8e0:             // We may leak class loaders if we are not able to set this, but 
1:c34c8e0:             // cannot just fail.
1:c34c8e0:         }
1:9e91a06: 
1:9e91a06: 
1:eac0369: 		daemonThread.start();
1:eac0369: 		return daemon;
1:eac0369: 	}
1:a0dbbd7:     
1:a0dbbd7:     /**
1:a0dbbd7:      * Privileged lookup of the ContextService. Must be private so that user code
1:a0dbbd7:      * can't call this entry point.
1:a0dbbd7:      */
1:a0dbbd7:     private  static  ContextService    getContextService()
1:a0dbbd7:     {
1:a0dbbd7:         if ( System.getSecurityManager() == null )
1:a0dbbd7:         {
1:a0dbbd7:             return ContextService.getFactory();
1:a0dbbd7:         }
1:a0dbbd7:         else
1:a0dbbd7:         {
1:a0dbbd7:             return AccessController.doPrivileged
1:a0dbbd7:                 (
1:a0dbbd7:                  new PrivilegedAction<ContextService>()
1:a0dbbd7:                  {
1:a0dbbd7:                      public ContextService run()
1:a0dbbd7:                      {
1:a0dbbd7:                          return ContextService.getFactory();
1:a0dbbd7:                      }
1:a0dbbd7:                  }
1:a0dbbd7:                  );
1:a0dbbd7:         }
1:a0dbbd7:     }
1:eac0369: }
1:eac0369: 
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:56c1dc2
/////////////////////////////////////////////////////////////////////////
1: 		final Thread daemonThread = BasicDaemon.getMonitor().getDaemonThread(daemon, name, false);
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: 		contextService = getContextService();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Privileged lookup of the ContextService. Must be private so that user code
1:      * can't call this entry point.
1:      */
1:     private  static  ContextService    getContextService()
1:     {
1:         if ( System.getSecurityManager() == null )
1:         {
1:             return ContextService.getFactory();
1:         }
1:         else
1:         {
1:             return AccessController.doPrivileged
1:                 (
1:                  new PrivilegedAction<ContextService>()
1:                  {
1:                      public ContextService run()
1:                      {
1:                          return ContextService.getFactory();
1:                      }
1:                  }
1:                  );
1:         }
1:     }
commit:a15a470
/////////////////////////////////////////////////////////////////////////
1:              new PrivilegedAction<Object>() {
commit:93fea34
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:c34c8e0
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 		final Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);
1: 		try {
1:             AccessController.doPrivileged(
0:              new PrivilegedAction() {
1:                 public Object run()  {
1:                     daemonThread.setContextClassLoader(null);
1:                     return null;
1:                 }
1:             });
1:         } catch (SecurityException se) {
1:             // ignore security exception.  Earlier versions of Derby, before the 
1:             // DERBY-3745 fix did not require setContextClassloader permissions.
1:             // We may leak class loaders if we are not able to set this, but 
1:             // cannot just fail.
1:         }
commit:9e91a06
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.util.PrivilegedThreadOps;
/////////////////////////////////////////////////////////////////////////
1: 		// DERBY-3745.  setContextClassLoader for thread to null to avoid
1: 		// leaking class loaders.
0: 		PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
0: 							  daemonThread, null);
1: 
1: 
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.services.daemon.SingleThreadDaemonFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:1f9b9c4
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.services.daemon;
1: 
1: import org.apache.derby.iapi.services.context.ContextService;
1: import org.apache.derby.iapi.services.daemon.DaemonFactory;
1: import org.apache.derby.iapi.services.daemon.DaemonService;
1: import org.apache.derby.impl.services.daemon.BasicDaemon;
1: import org.apache.derby.iapi.services.monitor.Monitor;
1: 
1: public class SingleThreadDaemonFactory implements DaemonFactory
1: {
0: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	private final ContextService contextService;
1: 	
1: 	public SingleThreadDaemonFactory()
1: 	{
0: 		contextService = ContextService.getFactory();
1: 	}
1: 
1: 	/*
1: 	 * Daemon factory method
1: 	 */
1: 
1: 	/* make a daemon service with the default timer */
1: 	public DaemonService createNewDaemon(String name)
1: 	{
1: 		BasicDaemon daemon = new BasicDaemon(contextService);
1: 
0: 		Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);
1: 		daemonThread.start();
1: 		return daemon;
1: 	}
1: }
1: 
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.services.daemon
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.services.daemon;
0: 
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.daemon.DaemonFactory;
0: import org.apache.derby.iapi.services.daemon.DaemonService;
0: import org.apache.derby.impl.services.daemon.BasicDaemon;
0: import org.apache.derby.iapi.services.monitor.Monitor;
0: 
0: public class SingleThreadDaemonFactory implements DaemonFactory
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	private final ContextService contextService;
0: 	
0: 	public SingleThreadDaemonFactory()
0: 	{
0: 		contextService = ContextService.getFactory();
0: 	}
0: 
0: 	/*
0: 	 * Daemon factory method
0: 	 */
0: 
0: 	/* make a daemon service with the default timer */
0: 	public DaemonService createNewDaemon(String name)
0: 	{
0: 		BasicDaemon daemon = new BasicDaemon(contextService);
0: 
0: 		Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);
0: 		daemonThread.start();
0: 		return daemon;
0: 	}
0: }
0: 
============================================================================