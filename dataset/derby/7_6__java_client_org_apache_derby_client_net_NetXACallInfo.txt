1:33776ff: /*
11:33776ff: 
1:33776ff:    Derby - Class org.apache.derby.client.net.NetXACallInfo
1:33776ff: 
1:59bf37d:    Licensed to the Apache Software Foundation (ASF) under one or more
1:59bf37d:    contributor license agreements.  See the NOTICE file distributed with
1:59bf37d:    this work for additional information regarding copyright ownership.
1:59bf37d:    The ASF licenses this file to You under the Apache License, Version 2.0
1:59bf37d:    (the "License"); you may not use this file except in compliance with
1:59bf37d:    the License.  You may obtain a copy of the License at
1:33776ff: 
1:33776ff:       http://www.apache.org/licenses/LICENSE-2.0
1:33776ff: 
1:33776ff:    Unless required by applicable law or agreed to in writing, software
1:33776ff:    distributed under the License is distributed on an "AS IS" BASIS,
1:33776ff:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33776ff:    See the License for the specific language governing permissions and
1:33776ff:    limitations under the License.
1:33776ff: 
2:33776ff: */
1:33776ff: /**********************************************************************
1:33776ff:  *
1:33776ff:  *
1:33776ff:  *  Component Name =
1:33776ff:  *
1:33776ff:  *  Package Name = org.apache.derby.client.net
1:33776ff:  *
1:33776ff:  *  Descriptive Name = XACallInfo class
1:33776ff:  *
1:33776ff:  *  Function = Handle XA information
1:33776ff:  *
1:33776ff:  *  List of Classes
1:33776ff:  *              - NetXACallInfo
1:33776ff:  *
1:33776ff:  *  Restrictions : None
1:33776ff:  *
1:33776ff:  **********************************************************************/
1:33776ff: package org.apache.derby.client.net;
1:33776ff: 
1:69e3d06: import java.io.InputStream;
1:69e3d06: import java.io.OutputStream;
1:70f7692: import javax.transaction.xa.XAResource;
1:70f7692: import javax.transaction.xa.Xid;
1:70f7692: 
1:33776ff: 
1:0326967: class NetXACallInfo {
1:70f7692:     Xid xid_;                         // current xid
1:70f7692:     int xaFlags_;                     // current xaFlags
1:cccf5dd:     /** XA transaction timeout in milliseconds. The value less than 0 means
1:cccf5dd:       * that the time out is not specified. The value 0 means infinite timeout. */
1:cccf5dd:     long xaTimeoutMillis_;
1:70f7692:     // may not be needed!!!~~~
1:70f7692:     int xaFunction_;                  // queued XA function being performed
1:70f7692:     int xaRetVal_;                    // xaretval from server
1:70f7692:     //  rollback(), or prepare() on RDONLY
1:70f7692:     //  one or more times, overrides empty transaction
1:0326967: 
1:70f7692:     NetXAConnection actualConn_; // the actual connection object, not necessarily
1:70f7692:     // the user's connection object
1:70f7692:     /* only the first connection object is actually used. The other connection
1:70f7692:      * objects are used only for their TCP/IP variables to simulate
1:70f7692:      * suspend / resume
1:70f7692:      */
1:33776ff: 
1:69e3d06:     private InputStream in_;
1:69e3d06:     private OutputStream out_;
1:33776ff: 
1:70f7692:     public NetXACallInfo() {
1:70f7692:         xid_ = null;
1:70f7692:         xaFlags_ = XAResource.TMNOFLAGS;
1:cccf5dd:         xaTimeoutMillis_ = -1;
1:70f7692:         actualConn_ = null;
1:70f7692:         xaRetVal_ = 0;
5:70f7692:     }
1:33776ff: 
1:0326967:     NetXACallInfo(Xid xid, int flags, NetXAConnection actualConn) {
1:70f7692:         xid_ = xid;
1:70f7692:         xaFlags_ = flags;
1:cccf5dd:         xaTimeoutMillis_ = -1;
1:70f7692:         actualConn_ = actualConn;
1:70f7692:         xaRetVal_ = 0;
1:70f7692:     }
1:33776ff: 
1:0326967:     void saveConnectionVariables() {
1:dadd05a:         in_ = actualConn_.getNetConnection().getInputStream();
1:dadd05a:         out_ = actualConn_.getNetConnection().getOutputStream();
1:70f7692:     }
1:33776ff: 
1:69e3d06:     public InputStream getInputStream() {
1:70f7692:         return in_;
1:70f7692:     }
1:33776ff: 
1:69e3d06:     public OutputStream getOutputStream() {
1:70f7692:         return out_;
1:70f7692:     }
1:70f7692: }
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
1:33776ff: 
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:b565f41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0326967
/////////////////////////////////////////////////////////////////////////
1: class NetXACallInfo {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     NetXACallInfo(Xid xid, int flags, NetXAConnection actualConn) {
1:     void saveConnectionVariables() {
/////////////////////////////////////////////////////////////////////////
commit:69e3d06
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: import java.io.OutputStream;
0: import org.apache.derby.client.am.ClientConnection;
/////////////////////////////////////////////////////////////////////////
1:     private InputStream in_;
1:     private OutputStream out_;
/////////////////////////////////////////////////////////////////////////
1:     public InputStream getInputStream() {
1:     public OutputStream getOutputStream() {
commit:95049cf
/////////////////////////////////////////////////////////////////////////
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:cccf5dd
/////////////////////////////////////////////////////////////////////////
1:     /** XA transaction timeout in milliseconds. The value less than 0 means
1:       * that the time out is not specified. The value 0 means infinite timeout. */
1:     long xaTimeoutMillis_;
/////////////////////////////////////////////////////////////////////////
1:         xaTimeoutMillis_ = -1;
/////////////////////////////////////////////////////////////////////////
1:         xaTimeoutMillis_ = -1;
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:59bf37d
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dadd05a
/////////////////////////////////////////////////////////////////////////
1:         in_ = actualConn_.getNetConnection().getInputStream();
1:         out_ = actualConn_.getNetConnection().getOutputStream();
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:38083d6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public NetXACallInfo(Xid xid, int flags, NetXAResource xares, NetXAConnection actualConn) {
author:Jeremy Boynes
-------------------------------------------------------------------------------
commit:70f7692
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: public class NetXACallInfo {
1:     Xid xid_;                         // current xid
1:     int xaFlags_;                     // current xaFlags
0:     int xaState_;                     // used as a save area when switching connection
1:     // may not be needed!!!~~~
1:     int xaFunction_;                  // queued XA function being performed
1:     int xaRetVal_;                    // xaretval from server
0:     boolean xaInProgress_;            // set at start(), reset at commit(),
1:     //  rollback(), or prepare() on RDONLY
0:     boolean xaWasSuspended;           // used to indicate an XA tyrans was suspended
1:     //  one or more times, overrides empty transaction
0:     boolean currConnection_;          // set when actualConn_ is the current connection
0:     boolean freeEntry_;               // set when no actualConn_, entry is free / available
0:     boolean convReleased_;            // release coversation, reuse successfull = true
0:     NetXAResource xaResource_;         // NetXAResource containing this NetXACallInfo
1:     NetXAConnection actualConn_; // the actual connection object, not necessarily
1:     // the user's connection object
1:     /* only the first connection object is actually used. The other connection
1:      * objects are used only for their TCP/IP variables to simulate
1:      * suspend / resume
1:      */
0:     private byte[] crrtkn_;
0:     private java.io.InputStream in_;
0:     private java.io.OutputStream out_;
0:     private byte[] uowid_;  // Unit of Work ID
0:     private boolean readOnlyTransaction_;  // readOnlyTransaction Flag
1:     public NetXACallInfo() {
1:         xid_ = null;
1:         xaFlags_ = XAResource.TMNOFLAGS;
0:         xaState_ = Connection.XA_OPEN_IDLE;
0:         xaInProgress_ = false;
0:         currConnection_ = false;
0:         freeEntry_ = true;
0:         convReleased_ = false;
1:         actualConn_ = null;
0:         readOnlyTransaction_ = true;
0:         xaResource_ = null;
1:         xaRetVal_ = 0;
0:         xaWasSuspended = false;
1:     }
0:     public NetXACallInfo(Xid xid, int flags, int state,
0:                          NetXAResource xares, NetXAConnection actualConn) {
1:         xid_ = xid;
1:         xaFlags_ = flags;
0:         xaState_ = state;
0:         xaInProgress_ = false;
0:         currConnection_ = false;
0:         freeEntry_ = true;
1:         actualConn_ = actualConn;
0:         readOnlyTransaction_ = true;
0:         xaResource_ = xares;
1:         xaRetVal_ = 0;
0:         xaWasSuspended = false;
1:     }
0:     public void saveConnectionVariables() {
0:         in_ = actualConn_.getInputStream();
0:         out_ = actualConn_.getOutputStream();
0:         crrtkn_ = actualConn_.getCorrelatorToken();
1:     }
0:     public java.io.InputStream getInputStream() {
1:         return in_;
1:     }
0:     public java.io.OutputStream getOutputStream() {
1:         return out_;
1:     }
0:     public byte[] getCorrelatorToken() {
0:         return crrtkn_;
1:     }
0:     protected void setUOWID(byte[] uowid) {
0:         uowid_ = uowid;
1:     }
0:     protected byte[] getUOWID() {
0:         return uowid_;
1:     }
0:     protected void setReadOnlyTransactionFlag(boolean flag) {
0:         readOnlyTransaction_ = flag;
1:     }
0:     protected boolean getReadOnlyTransactionFlag() {
0:         return readOnlyTransaction_;
1:     }
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:33776ff
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derby.client.net.NetXACallInfo
1: 
0:    Copyright (c) 2002, 2005 The Apache Software Foundation or its licensors, where applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: /**********************************************************************
1:  *
1:  *
1:  *  Component Name =
1:  *
1:  *  Package Name = org.apache.derby.client.net
1:  *
1:  *  Descriptive Name = XACallInfo class
1:  *
1:  *  Function = Handle XA information
1:  *
1:  *  List of Classes
1:  *              - NetXACallInfo
1:  *
1:  *  Restrictions : None
1:  *
1:  **********************************************************************/
1: package org.apache.derby.client.net;
1: 
0: import javax.transaction.xa.*;
0: import org.apache.derby.client.am.Connection;
1: 
0: public class NetXACallInfo
0: {
0:   Xid xid_;                         // current xid
0:   int xaFlags_;                     // current xaFlags
0:   int xaState_;                     // used as a save area when switching connection
0:                                     // may not be needed!!!~~~
0:   int xaFunction_;                  // queued XA function being performed
0:   int xaRetVal_;                    // xaretval from server
0:   boolean xaInProgress_;            // set at start(), reset at commit(),
0:                                     //  rollback(), or prepare() on RDONLY
0:   boolean xaWasSuspended;           // used to indicate an XA tyrans was suspended
0:                                     //  one or more times, overrides empty transaction
0:   boolean currConnection_;          // set when actualConn_ is the current connection
0:   boolean freeEntry_;               // set when no actualConn_, entry is free / available
0:   boolean convReleased_;            // release coversation, reuse successfull = true
0:   NetXAResource xaResource_;         // NetXAResource containing this NetXACallInfo
0:   NetXAConnection actualConn_; // the actual connection object, not necessarily
0:                                     // the user's connection object
0:   /* only the first connection object is actually used. The other connection
0:    * objects are used only for their TCP/IP variables to simulate
0:    * suspend / resume
1:    */
1: 
0:   private byte[] crrtkn_;
0:   private java.io.InputStream in_;
0:   private java.io.OutputStream out_;
1: 
0:   private byte[] uowid_;  // Unit of Work ID
1: 
0:   private boolean readOnlyTransaction_;  // readOnlyTransaction Flag
1: 
0:   public NetXACallInfo()
0:   {
0:     xid_ = null;
0:     xaFlags_ = XAResource.TMNOFLAGS;
0:     xaState_ = Connection.XA_OPEN_IDLE;
0:     xaInProgress_ = false;
0:     currConnection_ = false;
0:     freeEntry_ = true;
0:     convReleased_ = false;
0:     actualConn_ = null;
0:     readOnlyTransaction_ = true;
0:     xaResource_ = null;
0:     xaRetVal_ = 0;
0:     xaWasSuspended = false;
0:   }
1: 
0:   public NetXACallInfo( Xid xid, int flags, int state,
0:                        NetXAResource xares, NetXAConnection actualConn )
0:   {
0:     xid_ = xid;
0:     xaFlags_ = flags;
0:     xaState_ = state;
0:     xaInProgress_ = false;
0:     currConnection_ = false;
0:     freeEntry_ = true;
0:     actualConn_ = actualConn;
0:     readOnlyTransaction_ = true;
0:     xaResource_ = xares;
0:     xaRetVal_ = 0;
0:     xaWasSuspended = false;
0:   }
1: 
0:   public void saveConnectionVariables()
0:   {
0:     in_ = actualConn_.getInputStream();
0:     out_ = actualConn_.getOutputStream();
0:     crrtkn_ = actualConn_.getCorrelatorToken();
0:   }
1: 
0:   public java.io.InputStream getInputStream()
0:   {
0:     return in_;
0:   }
1: 
0:   public java.io.OutputStream getOutputStream()
0:   {
0:     return out_;
0:   }
1: 
0:   public byte[] getCorrelatorToken()
0:   {
0:     return crrtkn_;
0:   }
1: 
0:   protected void setUOWID(byte[] uowid)
0:   {
0:     uowid_ = uowid;
0:   }
1: 
0:   protected byte[] getUOWID()
0:   {
0:     return uowid_;
0:   }
1: 
0:   protected void setReadOnlyTransactionFlag(boolean flag)
0:   {
0:     readOnlyTransaction_ = flag;
0:   }
1: 
0:   protected boolean getReadOnlyTransactionFlag()
0:   {
0:     return readOnlyTransaction_;
0:   }
1: 
1: 
0: }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
============================================================================