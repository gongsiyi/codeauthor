1:33467a5: /*
2:33467a5: 
1:33467a5:    Derby - Class org.apache.derbyTesting.unitTests.junit.PathUtilTest
1:33467a5: 
1:33467a5:    Licensed to the Apache Software Foundation (ASF) under one or more
1:33467a5:    contributor license agreements.  See the NOTICE file distributed with
1:33467a5:    this work for additional information regarding copyright ownership.
1:33467a5:    The ASF licenses this file to You under the Apache License, Version 2.0
1:33467a5:    (the "License"); you may not use this file except in compliance with
1:33467a5:    the License.  You may obtain a copy of the License at
1:33467a5: 
1:33467a5:       http://www.apache.org/licenses/LICENSE-2.0
1:33467a5: 
1:33467a5:    Unless required by applicable law or agreed to in writing, software
1:33467a5:    distributed under the License is distributed on an "AS IS" BASIS,
1:33467a5:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33467a5:    See the License for the specific language governing permissions and
1:33467a5:    limitations under the License.
1:33467a5: 
1:33467a5: */
1:33467a5: 
1:33467a5: package org.apache.derbyTesting.unitTests.junit;
1:33467a5: 
1:33467a5: import java.io.File;
1:33467a5: import junit.framework.Test;
1:33467a5: import org.apache.derby.impl.io.vfmem.PathUtil;
1:33467a5: import org.apache.derbyTesting.junit.BaseTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:33467a5: 
1:33467a5: /**
1:33467a5:  * Basic tests for the {@code PathUtil} class.
1:33467a5:  */
1:33467a5: public class PathUtilTest
1:33467a5:         extends BaseTestCase {
1:33467a5: 
1:33467a5:     private static final String SEP = File.separator;
1:33467a5: 
1:33467a5:     public PathUtilTest(String name) {
1:33467a5:         super(name);
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testGetParent() {
1:33467a5:         assertNull(PathUtil.getParent(""));
1:33467a5:         assertNull(PathUtil.getParent(File.separator));
1:33467a5:         assertEquals("seg0",
1:33467a5:                 PathUtil.getParent(join("seg0","c1.dat")));
1:33467a5:         assertEquals(abs("seg0"),
1:33467a5:                 PathUtil.getParent(joinAbs("seg0", "c1.dat")));
1:33467a5:         assertNull(PathUtil.getParent("seg0" + SEP));
1:33467a5:         assertEquals(SEP,
1:33467a5:                 PathUtil.getParent(abs("seg0" + SEP)));
1:33467a5:         assertEquals(joinAbs("dir1", "dir2"),
1:33467a5:                 PathUtil.getParent(joinAbs("dir1", "dir2", "myFile.txt")));
1:33467a5:     }
1:33467a5: 
1:33467a5:     public void testGetBase() {
1:33467a5:         assertEquals("seg0", PathUtil.getBaseName("seg0"));
1:33467a5:         assertEquals("c1.dat",
1:33467a5:                 PathUtil.getBaseName(join("seg0","c1.dat")));
1:33467a5:         assertEquals("c1.dat",
1:33467a5:                 PathUtil.getBaseName(joinAbs("seg0","c1.dat")));
1:33467a5:         assertEquals("c1.dat",
1:33467a5:                 PathUtil.getBaseName(join("aDir", "seg0","c1.dat")));
1:33467a5:         assertEquals("c1.dat",
1:33467a5:                 PathUtil.getBaseName(joinAbs("aDir", "seg0","c1.dat")));
1:33467a5:     }
1:33467a5: 
1:33467a5:     public static Test suite() {
1:1ae02c9:         return new BaseTestSuite(PathUtilTest.class, "PathUtilTest suite");
1:33467a5:     }
1:33467a5: 
1:33467a5:     // Simple utility methods to join / create paths.
1:33467a5: 
1:33467a5:     public static String abs(String e1) {
1:33467a5:         return SEP + e1;
1:33467a5:     }
1:33467a5:     public static String join(String e1, String e2) {
1:33467a5:         return e1 + SEP + e2;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public static String joinAbs(String e1, String e2) {
1:33467a5:         return SEP + join(e1, e2);
1:33467a5:     }
1:33467a5: 
1:33467a5:     public static String join(String e1, String e2, String e3) {
1:33467a5:         return e1 + SEP + e2 + SEP + e3;
1:33467a5:     }
1:33467a5: 
1:33467a5:     public static String joinAbs(String e1, String e2, String e3) {
1:33467a5:         return SEP + join(e1, e2, e3);
1:33467a5:     }
1:33467a5: 
1:33467a5:     public static String join(String[] elems) {
1:33467a5:         StringBuffer str = new StringBuffer();
1:33467a5:         for (int i=0; i < elems.length; i++) {
1:33467a5:             str.append(elems[i]);
1:33467a5:             str.append(SEP);
1:33467a5:         }
1:33467a5:         str.deleteCharAt(str.length() -1);
1:33467a5:         return str.toString();
1:33467a5:     }
1:33467a5: 
1:33467a5:     public static String joinAbs(String[] elems) {
1:33467a5:         return SEP + join(elems);
1:33467a5:     }
1:33467a5: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         return new BaseTestSuite(PathUtilTest.class, "PathUtilTest suite");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:33467a5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.unitTests.junit.PathUtilTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyTesting.unitTests.junit;
1: 
1: import java.io.File;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derby.impl.io.vfmem.PathUtil;
1: import org.apache.derbyTesting.junit.BaseTestCase;
1: 
1: /**
1:  * Basic tests for the {@code PathUtil} class.
1:  */
1: public class PathUtilTest
1:         extends BaseTestCase {
1: 
1:     private static final String SEP = File.separator;
1: 
1:     public PathUtilTest(String name) {
1:         super(name);
1:     }
1: 
1:     public void testGetParent() {
1:         assertNull(PathUtil.getParent(""));
1:         assertNull(PathUtil.getParent(File.separator));
1:         assertEquals("seg0",
1:                 PathUtil.getParent(join("seg0","c1.dat")));
1:         assertEquals(abs("seg0"),
1:                 PathUtil.getParent(joinAbs("seg0", "c1.dat")));
1:         assertNull(PathUtil.getParent("seg0" + SEP));
1:         assertEquals(SEP,
1:                 PathUtil.getParent(abs("seg0" + SEP)));
1:         assertEquals(joinAbs("dir1", "dir2"),
1:                 PathUtil.getParent(joinAbs("dir1", "dir2", "myFile.txt")));
1:     }
1: 
1:     public void testGetBase() {
1:         assertEquals("seg0", PathUtil.getBaseName("seg0"));
1:         assertEquals("c1.dat",
1:                 PathUtil.getBaseName(join("seg0","c1.dat")));
1:         assertEquals("c1.dat",
1:                 PathUtil.getBaseName(joinAbs("seg0","c1.dat")));
1:         assertEquals("c1.dat",
1:                 PathUtil.getBaseName(join("aDir", "seg0","c1.dat")));
1:         assertEquals("c1.dat",
1:                 PathUtil.getBaseName(joinAbs("aDir", "seg0","c1.dat")));
1:     }
1: 
1:     public static Test suite() {
0:         return new TestSuite(PathUtilTest.class, "PathUtilTest suite");
1:     }
1: 
1:     // Simple utility methods to join / create paths.
1: 
1:     public static String abs(String e1) {
1:         return SEP + e1;
1:     }
1:     public static String join(String e1, String e2) {
1:         return e1 + SEP + e2;
1:     }
1: 
1:     public static String joinAbs(String e1, String e2) {
1:         return SEP + join(e1, e2);
1:     }
1: 
1:     public static String join(String e1, String e2, String e3) {
1:         return e1 + SEP + e2 + SEP + e3;
1:     }
1: 
1:     public static String joinAbs(String e1, String e2, String e3) {
1:         return SEP + join(e1, e2, e3);
1:     }
1: 
1:     public static String join(String[] elems) {
1:         StringBuffer str = new StringBuffer();
1:         for (int i=0; i < elems.length; i++) {
1:             str.append(elems[i]);
1:             str.append(SEP);
1:         }
1:         str.deleteCharAt(str.length() -1);
1:         return str.toString();
1:     }
1: 
1:     public static String joinAbs(String[] elems) {
1:         return SEP + join(elems);
1:     }
1: }
============================================================================