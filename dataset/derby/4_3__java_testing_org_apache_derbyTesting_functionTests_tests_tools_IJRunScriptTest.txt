1:0c0db14: /*
2:0c0db14: 
1:0c0db14:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest
1:0c0db14: 
1:0c0db14:    Licensed to the Apache Software Foundation (ASF) under one or more
1:0c0db14:    contributor license agreements.  See the NOTICE file distributed with
1:0c0db14:    this work for additional information regarding copyright ownership.
1:0c0db14:    The ASF licenses this file to You under the Apache License, Version 2.0
1:0c0db14:    (the "License"); you may not use this file except in compliance with
1:0c0db14:    the License.  You may obtain a copy of the License at
1:0c0db14: 
1:0c0db14:       http://www.apache.org/licenses/LICENSE-2.0
1:0c0db14: 
1:0c0db14:    Unless required by applicable law or agreed to in writing, software
1:0c0db14:    distributed under the License is distributed on an "AS IS" BASIS,
1:0c0db14:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0c0db14:    See the License for the specific language governing permissions and
1:0c0db14:    limitations under the License.
1:0c0db14: 
1:0c0db14:  */
1:0c0db14: 
1:0c0db14: package org.apache.derbyTesting.functionTests.tests.tools;
1:0c0db14: 
1:0c0db14: import java.io.UnsupportedEncodingException;
1:0c0db14: import java.sql.Connection;
1:0c0db14: import java.sql.SQLException;
1:0c0db14: import java.sql.Statement;
1:0c0db14: import junit.framework.Test;
1:0c0db14: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:0c0db14: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1:ea8303d: import org.apache.derbyTesting.junit.Derby;
1:0c0db14: 
1:0c0db14: /**
1:0c0db14:  * Test the ij.runScript api method.
1:0c0db14:  *
1:0c0db14:  */
1:0c0db14: public class IJRunScriptTest extends BaseJDBCTestCase {
1:0c0db14:     
1:0c0db14:     public static Test suite()
1:0c0db14:     {
1:ea8303d:         if (Derby.hasTools()) {
1:1ae02c9:             BaseTestSuite suite = new BaseTestSuite("IJRunScriptTest");
1:0c0db14:             suite.addTestSuite(IJRunScriptTest.class);
1:0c0db14:             return new CleanDatabaseTestSetup(suite);
1:0c0db14:         }
1:0c0db14:         
1:1ae02c9:         return new BaseTestSuite("empty: no tools support");
1:ea8303d:     }
1:0c0db14:     
1:0c0db14:     public IJRunScriptTest(String name)
1:0c0db14:     {
1:0c0db14:         super(name);
1:0c0db14:     }
1:0c0db14:     
1:0c0db14:     /**
1:0c0db14:      * Test execution of scripts by executing them and
1:0c0db14:      * seeing if the object exists.
1:0c0db14:      * @throws SQLException
1:0c0db14:      * @throws UnsupportedEncodingException 
1:0c0db14:      */
1:0c0db14:     public void testScriptExecution()
1:0c0db14:         throws SQLException, UnsupportedEncodingException
1:0c0db14:     {       
1:0c0db14:         runTestingScript("CREATE TABLE T1(I INT);\nCREATE TABLE T2(I INT)", 0);
1:0c0db14:         
1:0c0db14:         // Check they exist by inserting rows.
1:0c0db14:         
1:0c0db14:         Statement s = createStatement();
1:0c0db14:         
1:0c0db14:         // Insert two rows into the first table
1:0c0db14:         assertEquals(2, s.executeUpdate("INSERT INTO T1 VALUES 1,2"));
1:0c0db14: 
1:0c0db14:         // Insert three rows into the second table
1:0c0db14:         assertEquals(3, s.executeUpdate("INSERT INTO T2 VALUES 1,2,4"));
1:0c0db14:         
1:0c0db14:         runTestingScript("DROP TABLE T1;DROP TABLE T2", 0);
1:0c0db14:                
1:0c0db14:         s.close();
1:0c0db14:     }
1:0c0db14: 
1:0c0db14:     /**
1:ad72a2b:      * Test support for nested bracketed comments.
1:ad72a2b:      * @throws SQLException
1:ad72a2b:      * @throws UnsupportedEncodingException
1:ad72a2b:      */
1:ad72a2b:     public void testBracketedComment()
1:ad72a2b:         throws SQLException, UnsupportedEncodingException
1:ad72a2b:     {
1:ad72a2b:         runTestingScript("VALUES /* comment /* nested comment */ 5; */ 1;", 0);
1:ad72a2b:         runTestingScript("/* just a comment */", 0);
1:ad72a2b:         runTestingScript("/* a /* nested */ comment */", 0);
1:ad72a2b:     }
1:ad72a2b: 
1:ad72a2b:     /**
1:0c0db14:      * Test execution an empty script.
1:0c0db14:      * @throws SQLException
1:0c0db14:      * @throws UnsupportedEncodingException 
1:0c0db14:      */
1:0c0db14:     public void testEmptyScript()
1:0c0db14:         throws SQLException, UnsupportedEncodingException
1:0c0db14:     {       
1:0c0db14:         runTestingScript("", 0);
1:0c0db14:     }   
1:0c0db14: 
1:0c0db14:     /**
1:0c0db14:      * Test execution of the IJ AUTOCOMMIT statement.
1:0c0db14:      * @throws SQLException
1:0c0db14:      * @throws UnsupportedEncodingException 
1:0c0db14:      */
1:0c0db14:     public void testAutoCommitCommand()
1:0c0db14:         throws SQLException, UnsupportedEncodingException
1:0c0db14:     {      
1:0c0db14:         Connection conn = getConnection();
1:0c0db14:         assertTrue(conn.getAutoCommit());
1:0c0db14:         runTestingScript("AUTOCOMMIT OFF;", 0);
1:0c0db14:         
1:0c0db14:         assertFalse(conn.isClosed());
1:0c0db14:         assertFalse(conn.getAutoCommit());
1:0c0db14:     }
1:0c0db14:     
1:0c0db14:     /**
1:0c0db14:      * Test error counting.
1:0c0db14:      * @throws SQLException
1:0c0db14:      * @throws UnsupportedEncodingException 
1:0c0db14:      */
1:0c0db14:     public void testErrorsCount()
1:0c0db14:         throws SQLException, UnsupportedEncodingException
1:0c0db14:     {      
1:0c0db14:        // just a single error
1:0c0db14:        runTestingScript("CREATE TAAABLE T (I INT);", 1);
1:0c0db14:        runTestingScript("INSERT INTO TIJ VALUES 1;", 1);
1:0c0db14: 
1:0c0db14:        // two errors
1:0c0db14:        runTestingScript("INSERT INTO TIJ VALUES 1;\nDELETE FROM SYS.SYSTABLES", 2);
1:0c0db14:        runTestingScript("INSERT INTO TIJ VALUES 1;DELETE FROM SYS.SYSTABLES", 2);
1:0c0db14:        
1:0c0db14:        // mixture of errors (two in all)
1:0c0db14:        runTestingScript("CREATX TABLE TIJME(I INT);CREATE TABLE TIJME(I INT);" +
1:0c0db14:                "INSERT INTO TIJME VALUES 1,3,4;" +
1:0c0db14:                "INSERT INTO TIJME VALUESS 1,3,4;" +
1:0c0db14:                "DROP TABLE TIJME"
1:0c0db14:                , 2);
1:0c0db14:        
1:0c0db14:    }
1:0c0db14:         
1:0c0db14: 
1:0c0db14:     /**
1:0c0db14:      * Run a test script using the passed in String as the source
1:0c0db14:      * for the script. Script is run using the UTF-8 encoding and
1:0c0db14:      * the output discarded.
1:0c0db14:      * @param script
1:0c0db14:      * @throws UnsupportedEncodingException
1:0c0db14:      * @throws SQLException
1:0c0db14:      */
1:0c0db14:     private void runTestingScript(String script, int expectedErrorCount)
1:0c0db14:         throws UnsupportedEncodingException, SQLException
1:0c0db14:     {       
1:0c0db14:         int errorCount = runSQLCommands(script);
1:0c0db14:         assertEquals("Error count on " + script,
1:0c0db14:                 expectedErrorCount, errorCount );
1:0c0db14:     }
1:0c0db14:     
1:0c0db14: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:             BaseTestSuite suite = new BaseTestSuite("IJRunScriptTest");
1:         return new BaseTestSuite("empty: no tools support");
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:ad72a2b
/////////////////////////////////////////////////////////////////////////
1:      * Test support for nested bracketed comments.
1:      * @throws SQLException
1:      * @throws UnsupportedEncodingException
1:      */
1:     public void testBracketedComment()
1:         throws SQLException, UnsupportedEncodingException
1:     {
1:         runTestingScript("VALUES /* comment /* nested comment */ 5; */ 1;", 0);
1:         runTestingScript("/* just a comment */", 0);
1:         runTestingScript("/* a /* nested */ comment */", 0);
1:     }
1: 
1:     /**
commit:0c0db14
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.tools;
1: 
1: import java.io.UnsupportedEncodingException;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: 
1: /**
1:  * Test the ij.runScript api method.
1:  *
1:  */
1: public class IJRunScriptTest extends BaseJDBCTestCase {
1:     
1:     public static Test suite()
1:     {
0:         TestSuite suite = new TestSuite("IJRunScriptTest");
1:         suite.addTestSuite(IJRunScriptTest.class);
1:         return new CleanDatabaseTestSetup(suite);
1:     }
1:     
1:     public IJRunScriptTest(String name)
1:     {
1:         super(name);
1:     }
1:     
1:     /**
1:      * Test execution of scripts by executing them and
1:      * seeing if the object exists.
1:      * @throws SQLException
1:      * @throws UnsupportedEncodingException 
1:      */
1:     public void testScriptExecution()
1:         throws SQLException, UnsupportedEncodingException
1:     {       
1:         runTestingScript("CREATE TABLE T1(I INT);\nCREATE TABLE T2(I INT)", 0);
1:         
1:         // Check they exist by inserting rows.
1:         
1:         Statement s = createStatement();
1:         
1:         // Insert two rows into the first table
1:         assertEquals(2, s.executeUpdate("INSERT INTO T1 VALUES 1,2"));
1: 
1:         // Insert three rows into the second table
1:         assertEquals(3, s.executeUpdate("INSERT INTO T2 VALUES 1,2,4"));
1:         
1:         runTestingScript("DROP TABLE T1;DROP TABLE T2", 0);
1:                
1:         s.close();
1:     }
1: 
1:     /**
1:      * Test execution an empty script.
1:      * @throws SQLException
1:      * @throws UnsupportedEncodingException 
1:      */
1:     public void testEmptyScript()
1:         throws SQLException, UnsupportedEncodingException
1:     {       
1:         runTestingScript("", 0);
1:     }   
1: 
1:     /**
1:      * Test execution of the IJ AUTOCOMMIT statement.
1:      * @throws SQLException
1:      * @throws UnsupportedEncodingException 
1:      */
1:     public void testAutoCommitCommand()
1:         throws SQLException, UnsupportedEncodingException
1:     {      
1:         Connection conn = getConnection();
1:         assertTrue(conn.getAutoCommit());
1:         runTestingScript("AUTOCOMMIT OFF;", 0);
1:         
1:         assertFalse(conn.isClosed());
1:         assertFalse(conn.getAutoCommit());
1:     }
1:     
1:     /**
1:      * Test error counting.
1:      * @throws SQLException
1:      * @throws UnsupportedEncodingException 
1:      */
1:     public void testErrorsCount()
1:         throws SQLException, UnsupportedEncodingException
1:     {      
1:        // just a single error
1:        runTestingScript("CREATE TAAABLE T (I INT);", 1);
1:        runTestingScript("INSERT INTO TIJ VALUES 1;", 1);
1: 
1:        // two errors
1:        runTestingScript("INSERT INTO TIJ VALUES 1;\nDELETE FROM SYS.SYSTABLES", 2);
1:        runTestingScript("INSERT INTO TIJ VALUES 1;DELETE FROM SYS.SYSTABLES", 2);
1:        
1:        // mixture of errors (two in all)
1:        runTestingScript("CREATX TABLE TIJME(I INT);CREATE TABLE TIJME(I INT);" +
1:                "INSERT INTO TIJME VALUES 1,3,4;" +
1:                "INSERT INTO TIJME VALUESS 1,3,4;" +
1:                "DROP TABLE TIJME"
1:                , 2);
1:        
1:    }
1:         
1: 
1:     /**
1:      * Run a test script using the passed in String as the source
1:      * for the script. Script is run using the UTF-8 encoding and
1:      * the output discarded.
1:      * @param script
0:      * @return error count from ij.runScript.
1:      * @throws UnsupportedEncodingException
1:      * @throws SQLException
1:      */
1:     private void runTestingScript(String script, int expectedErrorCount)
1:         throws UnsupportedEncodingException, SQLException
1:     {       
1:         int errorCount = runSQLCommands(script);
1:         assertEquals("Error count on " + script,
1:                 expectedErrorCount, errorCount );
1:     }
1:     
1: }
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:df4020d
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ea8303d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.Derby;
/////////////////////////////////////////////////////////////////////////
1:         if (Derby.hasTools()) {
0:             TestSuite suite = new TestSuite("IJRunScriptTest");
0:             suite.addTestSuite(IJRunScriptTest.class);
0:             return new CleanDatabaseTestSetup(suite);
1:         }
0:         
0:         return new TestSuite("empty: no tools support");
commit:2f625cd
/////////////////////////////////////////////////////////////////////////
0:         TestSuite suite = new TestSuite("IJRunScriptTest");
commit:03a99e2
/////////////////////////////////////////////////////////////////////////
0:         Connection conn = getConnection();
commit:95011a0
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest
0: 
0:    Licensed to the Apache Software Foundation (ASF) under one or more
0:    contributor license agreements.  See the NOTICE file distributed with
0:    this work for additional information regarding copyright ownership.
0:    The ASF licenses this file to You under the Apache License, Version 2.0
0:    (the "License"); you may not use this file except in compliance with
0:    the License.  You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.tools;
0: 
0: import java.io.UnsupportedEncodingException;
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import java.sql.Statement;
0: 
0: import junit.framework.Test;
0: import junit.framework.TestSuite;
0: 
0: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
0: 
0: /**
0:  * Test the ij.runScript api method.
0:  *
0:  */
0: public class IJRunScriptTest extends BaseJDBCTestCase {
0:     
0:     public static Test suite()
0:     {
0:         TestSuite suite = new TestSuite();
0:         suite.addTestSuite(IJRunScriptTest.class);
0:         return new CleanDatabaseTestSetup(suite);
0:     }
0:     
0:     public IJRunScriptTest(String name)
0:     {
0:         super(name);
0:     }
0:     
0:     /**
0:      * Test execution of scripts by executing them and
0:      * seeing if the object exists.
0:      * @throws SQLException
0:      * @throws UnsupportedEncodingException 
0:      */
0:     public void testScriptExecution()
0:         throws SQLException, UnsupportedEncodingException
0:     {       
0:         runTestingScript("CREATE TABLE T1(I INT);\nCREATE TABLE T2(I INT)", 0);
0:         
0:         // Check they exist by inserting rows.
0:         
0:         Statement s = createStatement();
0:         
0:         // Insert two rows into the first table
0:         assertEquals(2, s.executeUpdate("INSERT INTO T1 VALUES 1,2"));
0: 
0:         // Insert three rows into the second table
0:         assertEquals(3, s.executeUpdate("INSERT INTO T2 VALUES 1,2,4"));
0:         
0:         runTestingScript("DROP TABLE T1;DROP TABLE T2", 0);
0:                
0:         s.close();
0:     }
0: 
0:     /**
0:      * Test execution an empty script.
0:      * @throws SQLException
0:      * @throws UnsupportedEncodingException 
0:      */
0:     public void testEmptyScript()
0:         throws SQLException, UnsupportedEncodingException
0:     {       
0:         runTestingScript("", 0);
0:     }   
0: 
0:     /**
0:      * Test execution of the IJ AUTOCOMMIT statement.
0:      * @throws SQLException
0:      * @throws UnsupportedEncodingException 
0:      */
0:     public void testAutoCommitCommand()
0:         throws SQLException, UnsupportedEncodingException
0:     {      
0:         Connection conn = getXConnection();
0:         assertTrue(conn.getAutoCommit());
0:         runTestingScript("AUTOCOMMIT OFF;", 0);
0:         
0:         assertFalse(conn.isClosed());
0:         assertFalse(conn.getAutoCommit());
0:     }
0:     
0:     /**
0:      * Test error counting.
0:      * @throws SQLException
0:      * @throws UnsupportedEncodingException 
0:      */
0:     public void testErrorsCount()
0:         throws SQLException, UnsupportedEncodingException
0:     {      
0:        // just a single error
0:        runTestingScript("CREATE TAAABLE T (I INT);", 1);
0:        runTestingScript("INSERT INTO TIJ VALUES 1;", 1);
0: 
0:        // two errors
0:        runTestingScript("INSERT INTO TIJ VALUES 1;\nDELETE FROM SYS.SYSTABLES", 2);
0:        runTestingScript("INSERT INTO TIJ VALUES 1;DELETE FROM SYS.SYSTABLES", 2);
0:        
0:        // mixture of errors (two in all)
0:        runTestingScript("CREATX TABLE TIJME(I INT);CREATE TABLE TIJME(I INT);" +
0:                "INSERT INTO TIJME VALUES 1,3,4;" +
0:                "INSERT INTO TIJME VALUESS 1,3,4;" +
0:                "DROP TABLE TIJME"
0:                , 2);
0:        
0:    }
0:         
0: 
0:     /**
0:      * Run a test script using the passed in String as the source
0:      * for the script. Script is run using the UTF-8 encoding and
0:      * the output discarded.
0:      * @param script
0:      * @return error count from ij.runScript.
0:      * @throws UnsupportedEncodingException
0:      * @throws SQLException
0:      */
0:     private void runTestingScript(String script, int expectedErrorCount)
0:         throws UnsupportedEncodingException, SQLException
0:     {       
0:         int errorCount = runSQLCommands(script);
0:         assertEquals("Error count on " + script,
0:                 expectedErrorCount, errorCount );
0:     }
0:     
0: }
============================================================================