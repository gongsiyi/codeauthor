1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.catalog.IndexDescriptor
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
3:eac0369: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.catalog;
1:eac0369: 
3:eac0369: /**
1:eac0369:  *	
1:eac0369:  * This interface describes an index.
1:eac0369:  * 
1:eac0369:  * It is used in the column SYS.SYSCONGLOMERATES.DESCRIPTOR
1:eac0369:  * and describes everything about an index except the index name and 
1:eac0369:  * the table on which the index is defined.
1:eac0369:  * That information is available 
1:eac0369:  * in the columns NAME and TABLEID of the table SYS.SYSCONGLOMERATES.
1:0c5bc3a:  * <p>
1:0c5bc3a:  * Whereas non-deferrable constraints are backed by UNIQUE indexes,
1:0c5bc3a:  * deferrable constraints are backed by non-unique indexes. The duplicate
1:0c5bc3a:  * checking on inserts and updates for deferrable constraints are handled at
1:0c5bc3a:  * the language level, not by the store level. The following table shows
1:0c5bc3a:  * the correspondence between the constraint types and the index attributes
1:0c5bc3a:  * used:
1:0c5bc3a:  * <ul>
1:0c5bc3a:  *  <li>Non-deferrable PRIMARY KEY and UNIQUE NOT NULL on all constraint
1:0c5bc3a:  *     columns
1:0c5bc3a:  *  <pre>
1:0c5bc3a:  *                            \  Value  | Number of index columns | Check
1:0c5bc3a:  *   Attribute                 \        | in physical BTree key   | in
1:0c5bc3a:  *   --------------------------------------------------------------------
1:0c5bc3a:  *   unique                     | true  | N - 1 (row location     |
1:0c5bc3a:  *   isUniqueWithDuplicateNulls | false |        not part of key) | Store
1:0c5bc3a:  *   uniqueDeferrable           | false |                         | Btree
1:0c5bc3a:  *   hasDeferrableChecking      | false |                         | code
1:0c5bc3a:  *  </pre>
1:0c5bc3a:  *  <li>Non-deferrable UNIQUE, where at least one constraint column is
1:0c5bc3a:  *      nullable.
1:0c5bc3a:  *  <pre>
1:0c5bc3a:  *                            \  Value  | Number of index columns | Check
1:0c5bc3a:  *   Attribute                 \        | in physical BTree key   | in
1:0c5bc3a:  *   ------------------------------------------------------------ -------
1:0c5bc3a:  *   unique                     | false | N                       |
1:0c5bc3a:  *   isUniqueWithDuplicateNulls | true  |                         | Store
1:0c5bc3a:  *   uniqueDeferrable           | false |                         | Btree
1:0c5bc3a:  *   hasDeferrableChecking      | false |                         | code
1:0c5bc3a:  *  </pre>
1:0c5bc3a:  *  <li>Deferrable PRIMARY KEY and UNIQUE NOT NULL on all constraint
1:0c5bc3a:  *     columns
1:0c5bc3a:  *  <pre>
1:0c5bc3a:  *                            \  Value  | Number of index columns | Check
1:0c5bc3a:  *   Attribute                 \        | in physical BTree key   | in
1:0c5bc3a:  *   ------------------------------------------------------------ -------
1:0c5bc3a:  *   unique                     | false | N                       |
1:0c5bc3a:  *   isUniqueWithDuplicateNulls | false |                         | Lang.
1:0c5bc3a:  *   uniqueDeferrable           | true  |                         | code
1:0c5bc3a:  *   hasDeferrableChecking      | true  |                         |
1:0c5bc3a:  *  </pre>
1:0c5bc3a:  *  <li>Deferrable UNIQUE, where at least one constraint column is
1:0c5bc3a:  *      nullable.
1:0c5bc3a:  *  <pre>
1:0c5bc3a:  *                            \  Value  | Number of index columns | Check
1:0c5bc3a:  *   Attribute                 \        | in physical BTree key   | in
1:0c5bc3a:  *   ------------------------------------------------------------ -------
1:0c5bc3a:  *   unique                     | false | N                       |
1:0c5bc3a:  *   isUniqueWithDuplicateNulls | true  |                         | Lang.
1:0c5bc3a:  *   uniqueDeferrable           | false |                         | code
1:0c5bc3a:  *   hasDeferrableChecking      | true  |                         |
1:0c5bc3a:  *  </pre>
1:0c5bc3a:  *  </ul>
1:eac0369:  */
1:eac0369: public interface IndexDescriptor
1:eac0369: {
1:eac0369: 	/**
1:eac0369: 	 * Returns true if the index is unique.
1:eac0369: 	 */
1:eac0369: 	boolean			isUnique();
1:28e234d: 	/**
1:28e234d: 	 * Returns true if the index is duplicate keys only for null key parts. 
1:28e234d:      * This is effective only if isUnique is false.
1:28e234d: 	 */
1:28e234d: 	boolean			isUniqueWithDuplicateNulls();
1:eac0369: 
1:0c5bc3a:     /**
1:0c5bc3a:      * The index represents a PRIMARY KEY or a UNIQUE NOT NULL constraint which
1:0c5bc3a:      * is deferrable.
1:0c5bc3a:      * {@code true} implies {@code isUnique() == false} and
1:0c5bc3a:      * {@code isUniqueWithDuplicateNulls() == false} and
1:0c5bc3a:      * {@code hasDeferrableChecking() == true}.
1:0c5bc3a: 
1:0c5bc3a:      * @return {@code true} if the index represents such a constraint
1:0c5bc3a:      */
1:0c5bc3a:     boolean isUniqueDeferrable();
1:0c5bc3a: 
1:0c5bc3a:     /**
1:0c5bc3a:      * Returns true if the index is used to support a deferrable constraint.
1:0c5bc3a:      */
1:0c5bc3a:     boolean hasDeferrableChecking();
1:0c5bc3a: 
1:eac0369: 	/**
1:eac0369: 	 * Returns an array of column positions in the base table.  Each index
1:eac0369: 	 * column corresponds to a column position in the base table, except
1:eac0369: 	 * the column representing the location of the row in the base table.
1:eac0369: 	 * The returned array holds the column positions in the
1:eac0369: 	 * base table, so, if entry 2 is the number 4, the second
1:eac0369: 	 * column in the index is the fourth column in the table.
1:eac0369: 	 */
1:eac0369: 	public int[]	baseColumnPositions();
1:eac0369: 
1:eac0369: 	/**
2:1cd0a14:      * Returns the postion of a column.
1:1cd0a14:      * <p>
2:eac0369: 	 * Returns the position of a column within the key (1-based).
1:eac0369: 	 * 0 means that the column is not in the key.  Same as the above
1:eac0369: 	 * method, but it uses int instead of Integer.
1:eac0369: 	 */
1:eac0369: 	public int getKeyColumnPosition(int heapColumnPosition);
1:eac0369: 
1:eac0369: 	/**
1:1cd0a14: 	 * Returns the number of ordered columns.  
1:1cd0a14:      * <p>
1:1cd0a14: 	 * In the future, it will be
1:eac0369: 	 * possible to store non-ordered columns in an index.  These will be
1:eac0369: 	 * useful for covered queries.  The ordered columns will be at the
1:eac0369: 	 * beginning of the index row, and they will be followed by the
1:eac0369: 	 * non-ordered columns.
1:eac0369: 	 *
1:eac0369: 	 * For now, all columns in an index must be ordered.
1:eac0369: 	 */
1:eac0369: 	int				numberOfOrderedColumns();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns the type of the index.  For now, we only support B-Trees,
1:eac0369: 	 * so the value "BTREE" is returned.
1:eac0369: 	 */
1:eac0369: 	String			indexType();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns array of boolean telling asc/desc info for each index
1:eac0369: 	 * key column for convenience of using together with baseColumnPositions
1:eac0369: 	 * method.  Both methods return an array with subscript starting from 0.
1:eac0369: 	 */
1:eac0369: 	public boolean[]	isAscending();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns true if the specified column is ascending in the index
1:eac0369: 	 * (1-based).
1:eac0369: 	 */
1:eac0369: 	boolean			isAscending(Integer keyColumnPosition);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Returns true if the specified column is descending in the index
1:eac0369: 	 * (1-based).  In the current release, only ascending columns are
1:eac0369: 	 * supported.
1:eac0369: 	 */
1:eac0369: 	boolean			isDescending(Integer keyColumnPosition);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * set the baseColumnPositions field of the index descriptor.  This
1:eac0369: 	 * is for updating the field in operations such as "alter table drop
1:eac0369: 	 * column" where baseColumnPositions is changed.
1:eac0369: 	 */
1:eac0369: 	public void     setBaseColumnPositions(int[] baseColumnPositions);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * set the isAscending field of the index descriptor.  This
1:eac0369: 	 * is for updating the field in operations such as "alter table drop
1:eac0369: 	 * column" where isAscending is changed.
1:eac0369: 	 */
1:eac0369: 	public void     setIsAscending(boolean[] isAscending);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * set the numberOfOrderedColumns field of the index descriptor.  This
1:eac0369: 	 * is for updating the field in operations such as "alter table drop
1:eac0369: 	 * column" where numberOfOrderedColumns is changed.
1:eac0369: 	 */
1:eac0369: 	public void     setNumberOfOrderedColumns(int numberOfOrderedColumns);
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:0c5bc3a
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * Whereas non-deferrable constraints are backed by UNIQUE indexes,
1:  * deferrable constraints are backed by non-unique indexes. The duplicate
1:  * checking on inserts and updates for deferrable constraints are handled at
1:  * the language level, not by the store level. The following table shows
1:  * the correspondence between the constraint types and the index attributes
1:  * used:
1:  * <ul>
1:  *  <li>Non-deferrable PRIMARY KEY and UNIQUE NOT NULL on all constraint
1:  *     columns
1:  *  <pre>
1:  *                            \  Value  | Number of index columns | Check
1:  *   Attribute                 \        | in physical BTree key   | in
1:  *   --------------------------------------------------------------------
1:  *   unique                     | true  | N - 1 (row location     |
1:  *   isUniqueWithDuplicateNulls | false |        not part of key) | Store
1:  *   uniqueDeferrable           | false |                         | Btree
1:  *   hasDeferrableChecking      | false |                         | code
1:  *  </pre>
1:  *  <li>Non-deferrable UNIQUE, where at least one constraint column is
1:  *      nullable.
1:  *  <pre>
1:  *                            \  Value  | Number of index columns | Check
1:  *   Attribute                 \        | in physical BTree key   | in
1:  *   ------------------------------------------------------------ -------
1:  *   unique                     | false | N                       |
1:  *   isUniqueWithDuplicateNulls | true  |                         | Store
1:  *   uniqueDeferrable           | false |                         | Btree
1:  *   hasDeferrableChecking      | false |                         | code
1:  *  </pre>
1:  *  <li>Deferrable PRIMARY KEY and UNIQUE NOT NULL on all constraint
1:  *     columns
1:  *  <pre>
1:  *                            \  Value  | Number of index columns | Check
1:  *   Attribute                 \        | in physical BTree key   | in
1:  *   ------------------------------------------------------------ -------
1:  *   unique                     | false | N                       |
1:  *   isUniqueWithDuplicateNulls | false |                         | Lang.
1:  *   uniqueDeferrable           | true  |                         | code
1:  *   hasDeferrableChecking      | true  |                         |
1:  *  </pre>
1:  *  <li>Deferrable UNIQUE, where at least one constraint column is
1:  *      nullable.
1:  *  <pre>
1:  *                            \  Value  | Number of index columns | Check
1:  *   Attribute                 \        | in physical BTree key   | in
1:  *   ------------------------------------------------------------ -------
1:  *   unique                     | false | N                       |
1:  *   isUniqueWithDuplicateNulls | true  |                         | Lang.
1:  *   uniqueDeferrable           | false |                         | code
1:  *   hasDeferrableChecking      | true  |                         |
1:  *  </pre>
1:  *  </ul>
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The index represents a PRIMARY KEY or a UNIQUE NOT NULL constraint which
1:      * is deferrable.
1:      * {@code true} implies {@code isUnique() == false} and
1:      * {@code isUniqueWithDuplicateNulls() == false} and
1:      * {@code hasDeferrableChecking() == true}.
1: 
1:      * @return {@code true} if the index represents such a constraint
1:      */
1:     boolean isUniqueDeferrable();
1: 
1:     /**
1:      * Returns true if the index is used to support a deferrable constraint.
1:      */
1:     boolean hasDeferrableChecking();
1: 
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:5c04fbc
/////////////////////////////////////////////////////////////////////////
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:28e234d
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Returns true if the index is duplicate keys only for null key parts. 
1:      * This is effective only if isUnique is false.
1: 	 */
1: 	boolean			isUniqueWithDuplicateNulls();
commit:1cd0a14
/////////////////////////////////////////////////////////////////////////
1:      * Returns the postion of a column.
1:      * <p>
1:      * Returns the postion of a column.
1:      * <p>
/////////////////////////////////////////////////////////////////////////
1: 	 * Returns the number of ordered columns.  
0:      * <p>
1: 	 * In the future, it will be
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.catalog.IndexDescriptor
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.catalog;
1: 
1: /**
1:  *	
1:  * This interface describes an index.
1:  * 
1:  * It is used in the column SYS.SYSCONGLOMERATES.DESCRIPTOR
1:  * and describes everything about an index except the index name and 
1:  * the table on which the index is defined.
1:  * That information is available 
1:  * in the columns NAME and TABLEID of the table SYS.SYSCONGLOMERATES.
1:  */
1: public interface IndexDescriptor
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Returns true if the index is unique.
1: 	 */
1: 	boolean			isUnique();
1: 
1: 	/**
1: 	 * Returns an array of column positions in the base table.  Each index
1: 	 * column corresponds to a column position in the base table, except
1: 	 * the column representing the location of the row in the base table.
1: 	 * The returned array holds the column positions in the
1: 	 * base table, so, if entry 2 is the number 4, the second
1: 	 * column in the index is the fourth column in the table.
1: 	 */
1: 	public int[]	baseColumnPositions();
1: 
1: 	/**
1: 	 * Returns the position of a column within the key (1-based).
0: 	 * 0 means that the column is not in the key.
1: 	 */
0: 	public Integer getKeyColumnPosition(Integer heapColumnPosition);
1: 
1: 	/**
1: 	 * Returns the position of a column within the key (1-based).
1: 	 * 0 means that the column is not in the key.  Same as the above
1: 	 * method, but it uses int instead of Integer.
1: 	 */
1: 	public int getKeyColumnPosition(int heapColumnPosition);
1: 
1: 	/**
0: 	 * Returns the number of ordered columns.  In the future, it will be
1: 	 * possible to store non-ordered columns in an index.  These will be
1: 	 * useful for covered queries.  The ordered columns will be at the
1: 	 * beginning of the index row, and they will be followed by the
1: 	 * non-ordered columns.
1: 	 *
1: 	 * For now, all columns in an index must be ordered.
1: 	 */
1: 	int				numberOfOrderedColumns();
1: 
1: 	/**
1: 	 * Returns the type of the index.  For now, we only support B-Trees,
1: 	 * so the value "BTREE" is returned.
1: 	 */
1: 	String			indexType();
1: 
1: 	/**
1: 	 * Returns array of boolean telling asc/desc info for each index
1: 	 * key column for convenience of using together with baseColumnPositions
1: 	 * method.  Both methods return an array with subscript starting from 0.
1: 	 */
1: 	public boolean[]	isAscending();
1: 
1: 	/**
1: 	 * Returns true if the specified column is ascending in the index
1: 	 * (1-based).
1: 	 */
1: 	boolean			isAscending(Integer keyColumnPosition);
1: 
1: 	/**
1: 	 * Returns true if the specified column is descending in the index
1: 	 * (1-based).  In the current release, only ascending columns are
1: 	 * supported.
1: 	 */
1: 	boolean			isDescending(Integer keyColumnPosition);
1: 
1: 	/**
1: 	 * set the baseColumnPositions field of the index descriptor.  This
1: 	 * is for updating the field in operations such as "alter table drop
1: 	 * column" where baseColumnPositions is changed.
1: 	 */
1: 	public void     setBaseColumnPositions(int[] baseColumnPositions);
1: 
1: 	/**
1: 	 * set the isAscending field of the index descriptor.  This
1: 	 * is for updating the field in operations such as "alter table drop
1: 	 * column" where isAscending is changed.
1: 	 */
1: 	public void     setIsAscending(boolean[] isAscending);
1: 
1: 	/**
1: 	 * set the numberOfOrderedColumns field of the index descriptor.  This
1: 	 * is for updating the field in operations such as "alter table drop
1: 	 * column" where numberOfOrderedColumns is changed.
1: 	 */
1: 	public void     setNumberOfOrderedColumns(int numberOfOrderedColumns);
1: }
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.catalog
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.catalog;
0: 
0: /**
0:  *	
0:  * This interface describes an index.
0:  * 
0:  * It is used in the column SYS.SYSCONGLOMERATES.DESCRIPTOR
0:  * and describes everything about an index except the index name and 
0:  * the table on which the index is defined.
0:  * That information is available 
0:  * in the columns NAME and TABLEID of the table SYS.SYSCONGLOMERATES.
0:  */
0: public interface IndexDescriptor
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Returns true if the index is unique.
0: 	 */
0: 	boolean			isUnique();
0: 
0: 	/**
0: 	 * Returns an array of column positions in the base table.  Each index
0: 	 * column corresponds to a column position in the base table, except
0: 	 * the column representing the location of the row in the base table.
0: 	 * The returned array holds the column positions in the
0: 	 * base table, so, if entry 2 is the number 4, the second
0: 	 * column in the index is the fourth column in the table.
0: 	 */
0: 	public int[]	baseColumnPositions();
0: 
0: 	/**
0: 	 * Returns the position of a column within the key (1-based).
0: 	 * 0 means that the column is not in the key.
0: 	 */
0: 	public Integer getKeyColumnPosition(Integer heapColumnPosition);
0: 
0: 	/**
0: 	 * Returns the position of a column within the key (1-based).
0: 	 * 0 means that the column is not in the key.  Same as the above
0: 	 * method, but it uses int instead of Integer.
0: 	 */
0: 	public int getKeyColumnPosition(int heapColumnPosition);
0: 
0: 	/**
0: 	 * Returns the number of ordered columns.  In the future, it will be
0: 	 * possible to store non-ordered columns in an index.  These will be
0: 	 * useful for covered queries.  The ordered columns will be at the
0: 	 * beginning of the index row, and they will be followed by the
0: 	 * non-ordered columns.
0: 	 *
0: 	 * For now, all columns in an index must be ordered.
0: 	 */
0: 	int				numberOfOrderedColumns();
0: 
0: 	/**
0: 	 * Returns the type of the index.  For now, we only support B-Trees,
0: 	 * so the value "BTREE" is returned.
0: 	 */
0: 	String			indexType();
0: 
0: 	/**
0: 	 * Returns array of boolean telling asc/desc info for each index
0: 	 * key column for convenience of using together with baseColumnPositions
0: 	 * method.  Both methods return an array with subscript starting from 0.
0: 	 */
0: 	public boolean[]	isAscending();
0: 
0: 	/**
0: 	 * Returns true if the specified column is ascending in the index
0: 	 * (1-based).
0: 	 */
0: 	boolean			isAscending(Integer keyColumnPosition);
0: 
0: 	/**
0: 	 * Returns true if the specified column is descending in the index
0: 	 * (1-based).  In the current release, only ascending columns are
0: 	 * supported.
0: 	 */
0: 	boolean			isDescending(Integer keyColumnPosition);
0: 
0: 	/**
0: 	 * set the baseColumnPositions field of the index descriptor.  This
0: 	 * is for updating the field in operations such as "alter table drop
0: 	 * column" where baseColumnPositions is changed.
0: 	 */
0: 	public void     setBaseColumnPositions(int[] baseColumnPositions);
0: 
0: 	/**
0: 	 * set the isAscending field of the index descriptor.  This
0: 	 * is for updating the field in operations such as "alter table drop
0: 	 * column" where isAscending is changed.
0: 	 */
0: 	public void     setIsAscending(boolean[] isAscending);
0: 
0: 	/**
0: 	 * set the numberOfOrderedColumns field of the index descriptor.  This
0: 	 * is for updating the field in operations such as "alter table drop
0: 	 * column" where numberOfOrderedColumns is changed.
0: 	 */
0: 	public void     setNumberOfOrderedColumns(int numberOfOrderedColumns);
0: }
============================================================================