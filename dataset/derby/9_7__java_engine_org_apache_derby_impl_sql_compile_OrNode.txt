1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.OrNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:eac0369: 
2:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:eac0369: 
1:3bb140c: class OrNode extends BinaryLogicalOperatorNode
1:eac0369: {
1:eac0369: 	/* Is this the 1st OR in the OR chain? */
1:eac0369: 	private boolean firstOr;
1:eac0369: 
2:eac0369: 	/**
1:3bb140c:      * Constructor for an OrNode
3:eac0369: 	 *
1:eac0369: 	 * @param leftOperand	The left operand of the OR
1:eac0369: 	 * @param rightOperand	The right operand of the OR
1:3bb140c:      * @param cm            The context manager
1:eac0369: 	 */
1:eac0369: 
1:3bb140c:     OrNode(ValueNode leftOperand, ValueNode rightOperand, ContextManager cm)
1:eac0369: 	{
1:3bb140c:         super(leftOperand, rightOperand, "or", cm);
1:4549ad4: 		this.shortCircuitValue = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Mark this OrNode as the 1st OR in the OR chain.
1:eac0369: 	 * We will consider converting the chain to an IN list
1:eac0369: 	 * during preprocess() if all entries are of the form:
1:eac0369: 	 *		ColumnReference = expression
1:eac0369: 	 */
1:eac0369: 	void setFirstOr()
1:eac0369: 	{
1:eac0369: 		firstOr = true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this logical operator.  All that has to be done for binding
1:eac0369: 	 * a logical operator is to bind the operands, check that both operands
1:eac0369: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         super.bindExpression(fromList, subqueryList, aggregates);
1:eac0369: 		postBindFixup();
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 	
1:eac0369: 	/**
1:eac0369: 	 * Preprocess an expression tree.  We do a number of transformations
1:eac0369: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1:eac0369: 	 * subquery flattening.
1:eac0369: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1:eac0369: 	 *
1:eac0369: 	 * @param	numTables			Number of tables in the DML Statement
1:eac0369: 	 * @param	outerFromList		FromList from outer query block
1:eac0369: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1:eac0369: 	 * @param	outerPredicateList	PredicateList from outer query block
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode preprocess(int numTables,
1:eac0369: 								FromList outerFromList,
1:eac0369: 								SubqueryList outerSubqueryList,
1:eac0369: 								PredicateList outerPredicateList) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		super.preprocess(numTables,
1:eac0369: 						 outerFromList, outerSubqueryList, 
1:eac0369: 						 outerPredicateList);
1:eac0369: 
1:eac0369: 		/* If this is the first OR in the OR chain then we will
1:eac0369: 		 * consider converting it to an IN list and then performing
1:eac0369: 		 * whatever IN list conversions/optimizations are available.
1:eac0369: 		 * An OR can be converted to an IN list if all of the entries
1:eac0369: 		 * in the chain are of the form:
1:eac0369: 		 *		ColumnReference = x
1:eac0369: 		 *	or:
1:eac0369: 		 *		x = ColumnReference
1:eac0369: 		 * where all ColumnReferences are from the same table.
1:2335e5c:          *
1:2335e5c:          * We only convert the OR chain to an IN list if it has been
1:2335e5c:          * normalized to conjunctive normal form (CNF) first. That is, the
1:2335e5c:          * shape of the chain must be something like this:
1:2335e5c:          *
1:2335e5c:          *               OR
1:2335e5c:          *              /  \
1:2335e5c:          *             =    OR
1:2335e5c:          *                 /  \
1:2335e5c:          *                =   OR
1:2335e5c:          *                    / \
1:2335e5c:          *                   =   FALSE
1:2335e5c:          *
1:2335e5c:          * Predicates in WHERE, HAVING and ON clauses will have been
1:2335e5c:          * normalized by the time we get here. Boolean expressions other
1:2335e5c:          * places in the query are not necessarily normalized, but they
1:2335e5c:          * won't benefit from IN list conversion anyway, since they cannot
1:2335e5c:          * be used as qualifiers in a multi-probe scan, so simply skip the
1:2335e5c:          * conversion in those cases.
1:eac0369: 		 */
1:eac0369: 		if (firstOr)
1:eac0369: 		{
1:eac0369: 			boolean			convert = true;
1:eac0369: 			ColumnReference	cr = null;
1:eac0369: 			int				columnNumber = -1;
1:eac0369: 			int				tableNumber = -1;
1:2335e5c:             ValueNode       vn;
1:eac0369: 
1:2335e5c:             for (vn = this;
1:2335e5c:                     vn instanceof OrNode;
1:2335e5c:                     vn = ((OrNode) vn).getRightOperand())
1:eac0369: 			{
1:eac0369: 				OrNode on = (OrNode) vn;
1:eac0369: 				ValueNode left = on.getLeftOperand();
1:eac0369: 
1:eac0369: 				// Is the operator an =
1:eac0369: 				if (!left.isRelationalOperator())
1:eac0369: 				{
1:7777c5d: 					/* If the operator is an IN-list disguised as a relational
1:7777c5d: 					 * operator then we can still convert it--we'll just
1:7777c5d: 					 * combine the existing IN-list ("left") with the new IN-
1:7777c5d: 					 * list values.  So check for that case now.
1:7777c5d: 					 */ 
1:7777c5d: 
1:7777c5d: 					if (SanityManager.DEBUG)
1:7777c5d: 					{
1:7777c5d: 						/* At the time of writing the only way a call to
1:7777c5d: 						 * left.isRelationalOperator() would return false for
1:7777c5d: 						 * a BinaryRelationalOperatorNode was if that node
1:7777c5d: 						 * was for an IN-list probe predicate.  That's why we
1:7777c5d: 						 * we can get by with the simple "instanceof" check
1:7777c5d: 						 * below.  But if we're running in SANE mode, do a
1:7777c5d: 						 * quick check to make sure that's still valid.
1:7777c5d: 					 	 */
1:7777c5d: 						if (left instanceof BinaryRelationalOperatorNode)
1:7777c5d: 						{
1:3bb140c:                             BinaryRelationalOperatorNode bron =
1:3bb140c:                                     (BinaryRelationalOperatorNode)left;
1:32edb61: 							if (!bron.isInListProbeNode())
1:7777c5d: 							{
1:7777c5d: 								SanityManager.THROWASSERT(
1:7777c5d: 								"isRelationalOperator() unexpectedly returned "
1:7777c5d: 								+ "false for a BinaryRelationalOperatorNode.");
1:7777c5d: 							}
1:7777c5d: 						}
1:7777c5d: 					}
1:7777c5d: 
1:7777c5d: 					convert = (left instanceof BinaryRelationalOperatorNode);
1:7777c5d: 					if (!convert)
1:7777c5d: 						break;
1:eac0369: 				}
1:eac0369: 
1:eac0369: 				if (!(((RelationalOperator)left).getOperator() == RelationalOperator.EQUALS_RELOP))
1:eac0369: 				{
2:eac0369: 					convert = false;
2:eac0369: 					break;
1:eac0369: 				}
1:eac0369: 
1:7777c5d: 				BinaryRelationalOperatorNode bron = (BinaryRelationalOperatorNode)left;
1:eac0369: 
1:7777c5d: 				if (bron.getLeftOperand() instanceof ColumnReference)
1:eac0369: 				{
1:7777c5d: 					cr = (ColumnReference) bron.getLeftOperand();
1:eac0369: 					if (tableNumber == -1)
1:eac0369: 					{
1:eac0369: 						tableNumber = cr.getTableNumber();
1:eac0369: 						columnNumber = cr.getColumnNumber();
1:eac0369: 					}
1:eac0369: 					else if (tableNumber != cr.getTableNumber() ||
1:eac0369: 							 columnNumber != cr.getColumnNumber())
1:eac0369: 					{
1:eac0369: 						convert = false;
1:eac0369: 						break;
1:eac0369: 					}
1:eac0369: 				}
1:7777c5d: 				else if (bron.getRightOperand() instanceof ColumnReference)
1:eac0369: 				{
1:7777c5d: 					cr = (ColumnReference) bron.getRightOperand();
1:eac0369: 					if (tableNumber == -1)
1:eac0369: 					{
1:eac0369: 						tableNumber = cr.getTableNumber();
1:eac0369: 						columnNumber = cr.getColumnNumber();
1:eac0369: 					}
1:eac0369: 					else if (tableNumber != cr.getTableNumber() ||
1:eac0369: 							 columnNumber != cr.getColumnNumber())
1:eac0369: 					{
1:eac0369: 						convert = false;
1:eac0369: 						break;
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 				else
1:eac0369: 				{
1:eac0369: 					convert = false;
1:eac0369: 					break;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 
1:2335e5c:             // DERBY-6363: An OR chain on conjunctive normal form should be
1:2335e5c:             // terminated by a false BooleanConstantNode. If it is terminated
1:2335e5c:             // by some other kind of node, it is not on CNF, and it should
1:2335e5c:             // not be converted to an IN list.
1:2335e5c:             convert = convert && vn.isBooleanFalse();
1:2335e5c: 
1:eac0369: 			/* So, can we convert the OR chain? */
1:eac0369: 			if (convert)
1:eac0369: 			{
1:3bb140c:                 ValueNodeList vnl = new ValueNodeList(getContextManager());
1:eac0369: 				// Build the IN list 
1:2335e5c:                 for (vn = this;
1:2335e5c:                         vn instanceof OrNode;
1:2335e5c:                         vn = ((OrNode) vn).getRightOperand())
1:eac0369: 				{
1:eac0369: 					OrNode on = (OrNode) vn;
1:7777c5d: 					BinaryRelationalOperatorNode bron =
1:7777c5d: 						(BinaryRelationalOperatorNode) on.getLeftOperand();
1:32edb61: 					if (bron.isInListProbeNode())
1:eac0369: 					{
1:7777c5d: 						/* If we have an OR between multiple IN-lists on the same
1:7777c5d: 						 * column then just combine them into a single IN-list.
1:7777c5d: 						 * Ex.
1:7777c5d: 						 *
1:7777c5d: 						 *   select ... from T1 where i in (2, 3) or i in (7, 10)
1:7777c5d: 						 *
1:7777c5d: 						 * effectively becomes:
1:7777c5d: 						 *
1:7777c5d: 						 *   select ... from T1 where i in (2, 3, 7, 10).
1:7777c5d: 						 */
1:7777c5d: 						vnl.destructiveAppend(
1:7777c5d: 							bron.getInListOp().getRightOperandList());
1:7777c5d: 					}
1:7777c5d: 					else if (bron.getLeftOperand() instanceof ColumnReference)
1:7777c5d: 					{
1:7777c5d: 						vnl.addValueNode(bron.getRightOperand());
1:eac0369: 					}
1:eac0369: 					else
1:eac0369: 					{
1:7777c5d: 						vnl.addValueNode(bron.getLeftOperand());
1:eac0369: 					}
1:eac0369: 				}
1:eac0369: 
1:3bb140c:                 InListOperatorNode ilon =
1:3bb140c:                         new InListOperatorNode(cr, vnl, getContextManager());
1:eac0369: 
1:eac0369: 				// Transfer the result type info to the IN list
1:eac0369: 				ilon.setType(getTypeServices());
1:eac0369: 
1:eac0369: 				/* We return the result of preprocess() on the
1:eac0369: 				 * IN list so that any compilation time transformations
1:eac0369: 				 * will be done.
1:eac0369: 				 */
1:eac0369: 				return ilon.preprocess(numTables,
1:eac0369: 						 outerFromList, outerSubqueryList, 
1:eac0369: 						 outerPredicateList);
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1:eac0369: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1:eac0369: 	 * ComparisonOperators and boolean expressions.  We invert 
1:eac0369: 	 * ComparisonOperators and replace boolean expressions with 
1:eac0369: 	 * boolean expression = false.
1:eac0369: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1:eac0369: 	 * still could be NotNodes left in the tree.
1:eac0369: 	 *
1:eac0369: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	ValueNode eliminateNots(boolean underNotNode) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		leftOperand = leftOperand.eliminateNots(underNotNode);
1:eac0369: 		rightOperand = rightOperand.eliminateNots(underNotNode);
1:eac0369: 		if (! underNotNode)
1:eac0369: 		{
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Convert the OrNode to an AndNode */
1:3bb140c:        AndNode andNode =
1:3bb140c:                 new AndNode(leftOperand, rightOperand, getContextManager());
1:ef158f2: 		andNode.setType(getTypeServices());
1:eac0369: 		return andNode;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Finish putting an expression into conjunctive normal
1:eac0369: 	 * form.  An expression tree in conjunctive normal form meets
1:eac0369: 	 * the following criteria:
1:eac0369: 	 *		o  If the expression tree is not null,
1:eac0369: 	 *		   the top level will be a chain of AndNodes terminating
1:eac0369: 	 *		   in a true BooleanConstantNode.
1:eac0369: 	 *		o  The left child of an AndNode will never be an AndNode.
1:eac0369: 	 *		o  Any right-linked chain that includes an AndNode will
1:eac0369: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
1:eac0369: 	 *		o  The left child of an OrNode will never be an OrNode.
1:eac0369: 	 *		o  Any right-linked chain that includes an OrNode will
1:eac0369: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
1:eac0369: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
1:eac0369: 	 *		   leaf nodes for purposes of expression normalization.
1:eac0369: 	 *		   In other words, we won't do any normalization under
1:eac0369: 	 *		   those nodes.
1:eac0369: 	 *
1:eac0369: 	 * In addition, we track whether or not we are under a top level AndNode.  
1:eac0369: 	 * SubqueryNodes need to know this for subquery flattening.
1:eac0369: 	 *
1:eac0369: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     ValueNode changeToCNF(boolean underTopAndNode)
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		OrNode curOr = this;
1:eac0369: 
1:eac0369: 		/* If rightOperand is an AndNode, then we must generate an 
1:eac0369: 		 * OrNode above it.
1:eac0369: 		 */
1:eac0369: 		if (rightOperand instanceof AndNode)
1:eac0369: 		{
1:3bb140c:            BooleanConstantNode falseNode =
1:3bb140c:                     new BooleanConstantNode(false, getContextManager());
1:3bb140c:             rightOperand =
1:3bb140c:                     new OrNode(rightOperand, falseNode, getContextManager());
1:eac0369: 			((OrNode) rightOperand).postBindFixup();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* We need to ensure that the right chain is terminated by
1:eac0369: 		 * a false BooleanConstantNode.
1:eac0369: 		 */
1:eac0369: 		while (curOr.getRightOperand() instanceof OrNode)
1:eac0369: 		{
1:eac0369: 			curOr = (OrNode) curOr.getRightOperand();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Add the false BooleanConstantNode if not there yet */
1:eac0369: 		if (!(curOr.getRightOperand().isBooleanFalse()))
1:eac0369: 		{
1:3bb140c:            BooleanConstantNode falseNode =
1:3bb140c:                     new BooleanConstantNode(false, getContextManager());
1:3bb140c:             curOr.setRightOperand(new OrNode(
1:3bb140c:                     curOr.getRightOperand(), falseNode, getContextManager()));
1:eac0369: 			((OrNode) curOr.getRightOperand()).postBindFixup();
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* If leftOperand is an OrNode, then we modify the tree from:
1:eac0369: 		 *
1:eac0369: 		 *				this
1:eac0369: 		 *			   /	\
1:eac0369: 		 *			Or2		Nodex
1:eac0369: 		 *		   /	\		...
1:eac0369: 		 *		left2	right2
1:eac0369: 		 *
1:eac0369: 		 *	to:
1:eac0369: 		 *
1:eac0369: 		 *						this
1:eac0369: 		 *					   /	\
1:eac0369: 		 *	left2.changeToCNF()		 Or2
1:eac0369: 		 *							/	\
1:eac0369: 		 *		right2.changeToCNF()	 Nodex.changeToCNF()
1:eac0369: 		 *
1:eac0369: 		 *	NOTE: We could easily switch places between left2.changeToCNF() and 
1:eac0369: 		 *  right2.changeToCNF().
1:eac0369: 		 */
1:eac0369: 
1:eac0369: 		while (leftOperand instanceof OrNode)
1:eac0369: 		{
1:eac0369: 			ValueNode newLeft;
1:eac0369: 			OrNode	  oldLeft;
1:eac0369: 			OrNode	  newRight;
1:eac0369: 			ValueNode oldRight;
1:eac0369: 
1:eac0369: 			/* For "clarity", we first get the new and old operands */
1:eac0369: 			newLeft = ((OrNode) leftOperand).getLeftOperand();
1:eac0369: 			oldLeft = (OrNode) leftOperand;
1:eac0369: 			newRight = (OrNode) leftOperand;
1:eac0369: 			oldRight = rightOperand;
1:eac0369: 
1:eac0369: 			/* We then twiddle the tree to match the above diagram */
1:eac0369: 			leftOperand = newLeft;
1:eac0369: 			rightOperand = newRight;
1:eac0369: 			newRight.setLeftOperand(oldLeft.getRightOperand());
1:eac0369: 			newRight.setRightOperand(oldRight);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Finally, we continue to normalize the left and right subtrees. */
1:eac0369: 		leftOperand = leftOperand.changeToCNF(false);
1:eac0369: 		rightOperand = rightOperand.changeToCNF(false);
1:eac0369: 
1:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
1:eac0369: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
1:eac0369: 	 *				      leftOperand is not instanceof AndNode
1:eac0369: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
1:eac0369: 	 *					  leftOperand is not instanceof OrNode
1:eac0369: 	 *
1:eac0369: 	 * @return		Boolean which reflects validity of the tree.
1:eac0369: 	 */
1:3bb140c:     @Override
1:3bb140c:     boolean verifyChangeToCNF()
1:eac0369: 	{
1:eac0369: 		boolean isValid = true;
1:eac0369: 
1:eac0369: 		if (SanityManager.ASSERT)
1:eac0369: 		{
1:eac0369: 			isValid = ((rightOperand instanceof OrNode) ||
1:eac0369: 					   (rightOperand.isBooleanFalse()));
1:eac0369: 			if (rightOperand instanceof OrNode)
1:eac0369: 			{
1:eac0369: 				isValid = rightOperand.verifyChangeToCNF();
1:eac0369: 			}
1:eac0369: 			if (leftOperand instanceof OrNode)
1:eac0369: 			{
1:eac0369: 				isValid = false;
1:eac0369: 			}
1:eac0369: 			else
1:eac0369: 			{
1:2335e5c: 				isValid = isValid && leftOperand.verifyChangeToCNF();
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return isValid;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Do bind() by hand for an AndNode that was generated after bind(),
1:eac0369: 	 * eg by putAndsOnTop(). (Set the data type and nullability info.)
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:eac0369: 	void postBindFixup()
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		setType(resolveLogicalBinaryOperator(
1:eac0369: 							leftOperand.getTypeServices(),
1:eac0369: 							rightOperand.getTypeServices()
1:eac0369: 											)
1:eac0369: 				);
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:2335e5c
/////////////////////////////////////////////////////////////////////////
1:          *
1:          * We only convert the OR chain to an IN list if it has been
1:          * normalized to conjunctive normal form (CNF) first. That is, the
1:          * shape of the chain must be something like this:
1:          *
1:          *               OR
1:          *              /  \
1:          *             =    OR
1:          *                 /  \
1:          *                =   OR
1:          *                    / \
1:          *                   =   FALSE
1:          *
1:          * Predicates in WHERE, HAVING and ON clauses will have been
1:          * normalized by the time we get here. Boolean expressions other
1:          * places in the query are not necessarily normalized, but they
1:          * won't benefit from IN list conversion anyway, since they cannot
1:          * be used as qualifiers in a multi-probe scan, so simply skip the
1:          * conversion in those cases.
/////////////////////////////////////////////////////////////////////////
1:             ValueNode       vn;
1:             for (vn = this;
1:                     vn instanceof OrNode;
1:                     vn = ((OrNode) vn).getRightOperand())
/////////////////////////////////////////////////////////////////////////
1:             // DERBY-6363: An OR chain on conjunctive normal form should be
1:             // terminated by a false BooleanConstantNode. If it is terminated
1:             // by some other kind of node, it is not on CNF, and it should
1:             // not be converted to an IN list.
1:             convert = convert && vn.isBooleanFalse();
1: 
1:                 for (vn = this;
1:                         vn instanceof OrNode;
1:                         vn = ((OrNode) vn).getRightOperand())
/////////////////////////////////////////////////////////////////////////
1: 				isValid = isValid && leftOperand.verifyChangeToCNF();
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         super.bindExpression(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:2706d1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: class OrNode extends BinaryLogicalOperatorNode
1:      * Constructor for an OrNode
1:      * @param cm            The context manager
1:     OrNode(ValueNode leftOperand, ValueNode rightOperand, ContextManager cm)
1:         super(leftOperand, rightOperand, "or", cm);
0:         setNodeType(C_NodeTypes.OR_NODE);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode preprocess(int numTables,
/////////////////////////////////////////////////////////////////////////
1:                             BinaryRelationalOperatorNode bron =
1:                                     (BinaryRelationalOperatorNode)left;
/////////////////////////////////////////////////////////////////////////
1:                 ValueNodeList vnl = new ValueNodeList(getContextManager());
/////////////////////////////////////////////////////////////////////////
1:                 InListOperatorNode ilon =
1:                         new InListOperatorNode(cr, vnl, getContextManager());
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:        AndNode andNode =
1:                 new AndNode(leftOperand, rightOperand, getContextManager());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     ValueNode changeToCNF(boolean underTopAndNode)
/////////////////////////////////////////////////////////////////////////
1:            BooleanConstantNode falseNode =
1:                     new BooleanConstantNode(false, getContextManager());
1:             rightOperand =
1:                     new OrNode(rightOperand, falseNode, getContextManager());
/////////////////////////////////////////////////////////////////////////
1:            BooleanConstantNode falseNode =
1:                     new BooleanConstantNode(false, getContextManager());
1:             curOr.setRightOperand(new OrNode(
1:                     curOr.getRightOperand(), falseNode, getContextManager()));
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     boolean verifyChangeToCNF()
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Army
-------------------------------------------------------------------------------
commit:32edb61
/////////////////////////////////////////////////////////////////////////
1: 							if (!bron.isInListProbeNode())
/////////////////////////////////////////////////////////////////////////
1: 					if (bron.isInListProbeNode())
commit:7777c5d
/////////////////////////////////////////////////////////////////////////
1: 					/* If the operator is an IN-list disguised as a relational
1: 					 * operator then we can still convert it--we'll just
1: 					 * combine the existing IN-list ("left") with the new IN-
1: 					 * list values.  So check for that case now.
1: 					 */ 
1: 
1: 					if (SanityManager.DEBUG)
1: 					{
1: 						/* At the time of writing the only way a call to
1: 						 * left.isRelationalOperator() would return false for
1: 						 * a BinaryRelationalOperatorNode was if that node
1: 						 * was for an IN-list probe predicate.  That's why we
1: 						 * we can get by with the simple "instanceof" check
1: 						 * below.  But if we're running in SANE mode, do a
1: 						 * quick check to make sure that's still valid.
1: 					 	 */
0: 						BinaryRelationalOperatorNode bron = null;
1: 						if (left instanceof BinaryRelationalOperatorNode)
1: 						{
0:  							bron = (BinaryRelationalOperatorNode)left;
0: 							if (bron.getInListOp() == null)
1: 							{
1: 								SanityManager.THROWASSERT(
1: 								"isRelationalOperator() unexpectedly returned "
1: 								+ "false for a BinaryRelationalOperatorNode.");
1: 							}
1: 						}
1: 					}
1: 
1: 					convert = (left instanceof BinaryRelationalOperatorNode);
1: 					if (!convert)
1: 						break;
/////////////////////////////////////////////////////////////////////////
1: 				BinaryRelationalOperatorNode bron = (BinaryRelationalOperatorNode)left;
1: 				if (bron.getLeftOperand() instanceof ColumnReference)
1: 					cr = (ColumnReference) bron.getLeftOperand();
/////////////////////////////////////////////////////////////////////////
1: 				else if (bron.getRightOperand() instanceof ColumnReference)
1: 					cr = (ColumnReference) bron.getRightOperand();
/////////////////////////////////////////////////////////////////////////
1: 					BinaryRelationalOperatorNode bron =
1: 						(BinaryRelationalOperatorNode) on.getLeftOperand();
0: 					if (bron.getInListOp() != null)
1: 						/* If we have an OR between multiple IN-lists on the same
1: 						 * column then just combine them into a single IN-list.
1: 						 * Ex.
1: 						 *
1: 						 *   select ... from T1 where i in (2, 3) or i in (7, 10)
1: 						 *
1: 						 * effectively becomes:
1: 						 *
1: 						 *   select ... from T1 where i in (2, 3, 7, 10).
1: 						 */
1: 						vnl.destructiveAppend(
1: 							bron.getInListOp().getRightOperandList());
1: 					}
1: 					else if (bron.getLeftOperand() instanceof ColumnReference)
1: 					{
1: 						vnl.addValueNode(bron.getRightOperand());
1: 						vnl.addValueNode(bron.getLeftOperand());
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:ef158f2
/////////////////////////////////////////////////////////////////////////
1: 		andNode.setType(getTypeServices());
commit:4549ad4
/////////////////////////////////////////////////////////////////////////
0: 		super.init(leftOperand, rightOperand, "or");
1: 		this.shortCircuitValue = true;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.OrNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import java.util.Vector;
1: 
0: public class OrNode extends BinaryLogicalOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/* Is this the 1st OR in the OR chain? */
1: 	private boolean firstOr;
1: 
1: 	/**
0: 	 * Initializer for an OrNode
1: 	 *
1: 	 * @param leftOperand	The left operand of the OR
1: 	 * @param rightOperand	The right operand of the OR
1: 	 */
1: 
0: 	public void init(Object leftOperand, Object rightOperand)
1: 	{
0: 		super.init(leftOperand, rightOperand, Boolean.TRUE, "or");
1: 	}
1: 
1: 	/**
1: 	 * Mark this OrNode as the 1st OR in the OR chain.
1: 	 * We will consider converting the chain to an IN list
1: 	 * during preprocess() if all entries are of the form:
1: 	 *		ColumnReference = expression
1: 	 *
0: 	 * @return Nothing.
1: 	 */
1: 	void setFirstOr()
1: 	{
1: 		firstOr = true;
1: 	}
1: 
1: 	/**
1: 	 * Bind this logical operator.  All that has to be done for binding
1: 	 * a logical operator is to bind the operands, check that both operands
1: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException
1: 	{
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
1: 		postBindFixup();
1: 		return this;
1: 	}
1: 	
1: 	/**
1: 	 * Preprocess an expression tree.  We do a number of transformations
1: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
1: 	 * subquery flattening.
1: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
1: 	 *
1: 	 * @param	numTables			Number of tables in the DML Statement
1: 	 * @param	outerFromList		FromList from outer query block
1: 	 * @param	outerSubqueryList	SubqueryList from outer query block
1: 	 * @param	outerPredicateList	PredicateList from outer query block
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode preprocess(int numTables,
1: 								FromList outerFromList,
1: 								SubqueryList outerSubqueryList,
1: 								PredicateList outerPredicateList) 
1: 					throws StandardException
1: 	{
1: 		super.preprocess(numTables,
1: 						 outerFromList, outerSubqueryList, 
1: 						 outerPredicateList);
1: 
1: 		/* If this is the first OR in the OR chain then we will
1: 		 * consider converting it to an IN list and then performing
1: 		 * whatever IN list conversions/optimizations are available.
1: 		 * An OR can be converted to an IN list if all of the entries
1: 		 * in the chain are of the form:
1: 		 *		ColumnReference = x
1: 		 *	or:
1: 		 *		x = ColumnReference
1: 		 * where all ColumnReferences are from the same table.
1: 		 */
1: 		if (firstOr)
1: 		{
1: 			boolean			convert = true;
1: 			ColumnReference	cr = null;
1: 			int				columnNumber = -1;
1: 			int				tableNumber = -1;
1: 
0: 			for (ValueNode vn = this; vn instanceof OrNode; vn = ((OrNode) vn).getRightOperand())
1: 			{
1: 				OrNode on = (OrNode) vn;
1: 				ValueNode left = on.getLeftOperand();
1: 
1: 				// Is the operator an =
1: 				if (!left.isRelationalOperator())
1: 				{
1: 					convert = false;
1: 					break;
1: 				}
1: 
1: 				if (!(((RelationalOperator)left).getOperator() == RelationalOperator.EQUALS_RELOP))
1: 				{
1: 					convert = false;
1: 					break;
1: 				}
1: 
0: 				BinaryRelationalOperatorNode beon = (BinaryRelationalOperatorNode)left;
1: 
0: 				if (beon.getLeftOperand() instanceof ColumnReference)
1: 				{
0: 					cr = (ColumnReference) beon.getLeftOperand();
1: 					if (tableNumber == -1)
1: 					{
1: 						tableNumber = cr.getTableNumber();
1: 						columnNumber = cr.getColumnNumber();
1: 					}
1: 					else if (tableNumber != cr.getTableNumber() ||
1: 							 columnNumber != cr.getColumnNumber())
1: 					{
1: 						convert = false;
1: 						break;
1: 					}
1: 				}
0: 				else if (beon.getRightOperand() instanceof ColumnReference)
1: 				{
0: 					cr = (ColumnReference) beon.getRightOperand();
1: 					if (tableNumber == -1)
1: 					{
1: 						tableNumber = cr.getTableNumber();
1: 						columnNumber = cr.getColumnNumber();
1: 					}
1: 					else if (tableNumber != cr.getTableNumber() ||
1: 							 columnNumber != cr.getColumnNumber())
1: 					{
1: 						convert = false;
1: 						break;
1: 					}
1: 				}
1: 				else
1: 				{
1: 					convert = false;
1: 					break;
1: 				}
1: 			}
1: 
1: 			/* So, can we convert the OR chain? */
1: 			if (convert)
1: 			{
0: 				ValueNodeList vnl = (ValueNodeList) getNodeFactory().getNode(
0: 													C_NodeTypes.VALUE_NODE_LIST,
0: 													getContextManager());
1: 				// Build the IN list 
0: 				for (ValueNode vn = this; vn instanceof OrNode; vn = ((OrNode) vn).getRightOperand())
1: 				{
1: 					OrNode on = (OrNode) vn;
0: 					BinaryRelationalOperatorNode beon = (BinaryRelationalOperatorNode) on.getLeftOperand();
0: 					if (beon.getLeftOperand() instanceof ColumnReference)
1: 					{
0: 						vnl.addValueNode(beon.getRightOperand());
1: 					}
1: 					else
1: 					{
0: 						vnl.addValueNode(beon.getLeftOperand());
1: 					}
1: 				}
1: 
0: 				InListOperatorNode ilon =
0: 							(InListOperatorNode) getNodeFactory().getNode(
0: 											C_NodeTypes.IN_LIST_OPERATOR_NODE,
0: 											cr,
0: 											vnl,
0: 											getContextManager());
1: 
1: 				// Transfer the result type info to the IN list
1: 				ilon.setType(getTypeServices());
1: 
1: 				/* We return the result of preprocess() on the
1: 				 * IN list so that any compilation time transformations
1: 				 * will be done.
1: 				 */
1: 				return ilon.preprocess(numTables,
1: 						 outerFromList, outerSubqueryList, 
1: 						 outerPredicateList);
1: 			}
1: 		}
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1: 	 * ComparisonOperators and boolean expressions.  We invert 
1: 	 * ComparisonOperators and replace boolean expressions with 
1: 	 * boolean expression = false.
1: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1: 	 * still could be NotNodes left in the tree.
1: 	 *
1: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	ValueNode eliminateNots(boolean underNotNode) 
1: 					throws StandardException
1: 	{
1: 		leftOperand = leftOperand.eliminateNots(underNotNode);
1: 		rightOperand = rightOperand.eliminateNots(underNotNode);
1: 		if (! underNotNode)
1: 		{
1: 			return this;
1: 		}
1: 
1: 		/* Convert the OrNode to an AndNode */
0: 		AndNode	andNode;
1: 
0: 		andNode = (AndNode) getNodeFactory().getNode(
0: 													C_NodeTypes.AND_NODE,
0: 													leftOperand,
0: 													rightOperand,
0: 													getContextManager());
0: 		andNode.setType(dataTypeServices);
1: 		return andNode;
1: 	}
1: 
1: 	/**
1: 	 * Finish putting an expression into conjunctive normal
1: 	 * form.  An expression tree in conjunctive normal form meets
1: 	 * the following criteria:
1: 	 *		o  If the expression tree is not null,
1: 	 *		   the top level will be a chain of AndNodes terminating
1: 	 *		   in a true BooleanConstantNode.
1: 	 *		o  The left child of an AndNode will never be an AndNode.
1: 	 *		o  Any right-linked chain that includes an AndNode will
1: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
1: 	 *		o  The left child of an OrNode will never be an OrNode.
1: 	 *		o  Any right-linked chain that includes an OrNode will
1: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
1: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
1: 	 *		   leaf nodes for purposes of expression normalization.
1: 	 *		   In other words, we won't do any normalization under
1: 	 *		   those nodes.
1: 	 *
1: 	 * In addition, we track whether or not we are under a top level AndNode.  
1: 	 * SubqueryNodes need to know this for subquery flattening.
1: 	 *
1: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public ValueNode changeToCNF(boolean underTopAndNode) 
1: 					throws StandardException
1: 	{
1: 		OrNode curOr = this;
1: 
1: 		/* If rightOperand is an AndNode, then we must generate an 
1: 		 * OrNode above it.
1: 		 */
1: 		if (rightOperand instanceof AndNode)
1: 		{
0: 			BooleanConstantNode	falseNode;
1: 
0: 			falseNode = (BooleanConstantNode) getNodeFactory().getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.FALSE,
0: 											getContextManager());
0: 			rightOperand = (ValueNode) getNodeFactory().getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												rightOperand,
0: 												falseNode,
0: 												getContextManager());
1: 			((OrNode) rightOperand).postBindFixup();
1: 		}
1: 
1: 		/* We need to ensure that the right chain is terminated by
1: 		 * a false BooleanConstantNode.
1: 		 */
1: 		while (curOr.getRightOperand() instanceof OrNode)
1: 		{
1: 			curOr = (OrNode) curOr.getRightOperand();
1: 		}
1: 
1: 		/* Add the false BooleanConstantNode if not there yet */
1: 		if (!(curOr.getRightOperand().isBooleanFalse()))
1: 		{
0: 			BooleanConstantNode	falseNode;
1: 
0: 			falseNode = (BooleanConstantNode) getNodeFactory().getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.FALSE,
0: 											getContextManager());
0: 			curOr.setRightOperand(
0: 					(ValueNode) getNodeFactory().getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												curOr.getRightOperand(),
0: 												falseNode,
0: 												getContextManager()));
1: 			((OrNode) curOr.getRightOperand()).postBindFixup();
1: 		}
1: 
1: 		/* If leftOperand is an OrNode, then we modify the tree from:
1: 		 *
1: 		 *				this
1: 		 *			   /	\
1: 		 *			Or2		Nodex
1: 		 *		   /	\		...
1: 		 *		left2	right2
1: 		 *
1: 		 *	to:
1: 		 *
1: 		 *						this
1: 		 *					   /	\
1: 		 *	left2.changeToCNF()		 Or2
1: 		 *							/	\
1: 		 *		right2.changeToCNF()	 Nodex.changeToCNF()
1: 		 *
1: 		 *	NOTE: We could easily switch places between left2.changeToCNF() and 
1: 		 *  right2.changeToCNF().
1: 		 */
1: 
1: 		while (leftOperand instanceof OrNode)
1: 		{
1: 			ValueNode newLeft;
1: 			OrNode	  oldLeft;
1: 			OrNode	  newRight;
1: 			ValueNode oldRight;
1: 
1: 			/* For "clarity", we first get the new and old operands */
1: 			newLeft = ((OrNode) leftOperand).getLeftOperand();
1: 			oldLeft = (OrNode) leftOperand;
1: 			newRight = (OrNode) leftOperand;
1: 			oldRight = rightOperand;
1: 
1: 			/* We then twiddle the tree to match the above diagram */
1: 			leftOperand = newLeft;
1: 			rightOperand = newRight;
1: 			newRight.setLeftOperand(oldLeft.getRightOperand());
1: 			newRight.setRightOperand(oldRight);
1: 		}
1: 
1: 		/* Finally, we continue to normalize the left and right subtrees. */
1: 		leftOperand = leftOperand.changeToCNF(false);
1: 		rightOperand = rightOperand.changeToCNF(false);
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
1: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
1: 	 *				      leftOperand is not instanceof AndNode
1: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
1: 	 *					  leftOperand is not instanceof OrNode
1: 	 *
1: 	 * @return		Boolean which reflects validity of the tree.
1: 	 */
0: 	public boolean verifyChangeToCNF()
1: 	{
1: 		boolean isValid = true;
1: 
1: 		if (SanityManager.ASSERT)
1: 		{
1: 			isValid = ((rightOperand instanceof OrNode) ||
1: 					   (rightOperand.isBooleanFalse()));
1: 			if (rightOperand instanceof OrNode)
1: 			{
1: 				isValid = rightOperand.verifyChangeToCNF();
1: 			}
1: 			if (leftOperand instanceof OrNode)
1: 			{
1: 				isValid = false;
1: 			}
1: 			else
1: 			{
0: 				isValid = leftOperand.verifyChangeToCNF();
1: 			}
1: 		}
1: 
1: 		return isValid;
1: 	}
1: 
1: 	/**
1: 	 * Do bind() by hand for an AndNode that was generated after bind(),
1: 	 * eg by putAndsOnTop(). (Set the data type and nullability info.)
1: 	 *
0: 	 * @return	None.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	void postBindFixup()
1: 					throws StandardException
1: 	{
1: 		setType(resolveLogicalBinaryOperator(
1: 							leftOperand.getTypeServices(),
1: 							rightOperand.getTypeServices()
1: 											)
1: 				);
1: 	}
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import java.util.Vector;
0: 
0: public class OrNode extends BinaryLogicalOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/* Is this the 1st OR in the OR chain? */
0: 	private boolean firstOr;
0: 
0: 	/**
0: 	 * Initializer for an OrNode
0: 	 *
0: 	 * @param leftOperand	The left operand of the OR
0: 	 * @param rightOperand	The right operand of the OR
0: 	 */
0: 
0: 	public void init(Object leftOperand, Object rightOperand)
0: 	{
0: 		super.init(leftOperand, rightOperand, Boolean.TRUE, "or");
0: 	}
0: 
0: 	/**
0: 	 * Mark this OrNode as the 1st OR in the OR chain.
0: 	 * We will consider converting the chain to an IN list
0: 	 * during preprocess() if all entries are of the form:
0: 	 *		ColumnReference = expression
0: 	 *
0: 	 * @return Nothing.
0: 	 */
0: 	void setFirstOr()
0: 	{
0: 		firstOr = true;
0: 	}
0: 
0: 	/**
0: 	 * Bind this logical operator.  All that has to be done for binding
0: 	 * a logical operator is to bind the operands, check that both operands
0: 	 * are BooleanDataValue, and set the result type to BooleanDataValue.
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException
0: 	{
0: 		super.bindExpression(fromList, subqueryList, aggregateVector);
0: 		postBindFixup();
0: 		return this;
0: 	}
0: 	
0: 	/**
0: 	 * Preprocess an expression tree.  We do a number of transformations
0: 	 * here (including subqueries, IN lists, LIKE and BETWEEN) plus
0: 	 * subquery flattening.
0: 	 * NOTE: This is done before the outer ResultSetNode is preprocessed.
0: 	 *
0: 	 * @param	numTables			Number of tables in the DML Statement
0: 	 * @param	outerFromList		FromList from outer query block
0: 	 * @param	outerSubqueryList	SubqueryList from outer query block
0: 	 * @param	outerPredicateList	PredicateList from outer query block
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode preprocess(int numTables,
0: 								FromList outerFromList,
0: 								SubqueryList outerSubqueryList,
0: 								PredicateList outerPredicateList) 
0: 					throws StandardException
0: 	{
0: 		super.preprocess(numTables,
0: 						 outerFromList, outerSubqueryList, 
0: 						 outerPredicateList);
0: 
0: 		/* If this is the first OR in the OR chain then we will
0: 		 * consider converting it to an IN list and then performing
0: 		 * whatever IN list conversions/optimizations are available.
0: 		 * An OR can be converted to an IN list if all of the entries
0: 		 * in the chain are of the form:
0: 		 *		ColumnReference = x
0: 		 *	or:
0: 		 *		x = ColumnReference
0: 		 * where all ColumnReferences are from the same table.
0: 		 */
0: 		if (firstOr)
0: 		{
0: 			boolean			convert = true;
0: 			ColumnReference	cr = null;
0: 			int				columnNumber = -1;
0: 			int				tableNumber = -1;
0: 
0: 			for (ValueNode vn = this; vn instanceof OrNode; vn = ((OrNode) vn).getRightOperand())
0: 			{
0: 				OrNode on = (OrNode) vn;
0: 				ValueNode left = on.getLeftOperand();
0: 
0: 				// Is the operator an =
0: 				if (!left.isRelationalOperator())
0: 				{
0: 					convert = false;
0: 					break;
0: 				}
0: 
0: 				if (!(((RelationalOperator)left).getOperator() == RelationalOperator.EQUALS_RELOP))
0: 				{
0: 					convert = false;
0: 					break;
0: 				}
0: 
0: 				BinaryRelationalOperatorNode beon = (BinaryRelationalOperatorNode)left;
0: 
0: 				if (beon.getLeftOperand() instanceof ColumnReference)
0: 				{
0: 					cr = (ColumnReference) beon.getLeftOperand();
0: 					if (tableNumber == -1)
0: 					{
0: 						tableNumber = cr.getTableNumber();
0: 						columnNumber = cr.getColumnNumber();
0: 					}
0: 					else if (tableNumber != cr.getTableNumber() ||
0: 							 columnNumber != cr.getColumnNumber())
0: 					{
0: 						convert = false;
0: 						break;
0: 					}
0: 				}
0: 				else if (beon.getRightOperand() instanceof ColumnReference)
0: 				{
0: 					cr = (ColumnReference) beon.getRightOperand();
0: 					if (tableNumber == -1)
0: 					{
0: 						tableNumber = cr.getTableNumber();
0: 						columnNumber = cr.getColumnNumber();
0: 					}
0: 					else if (tableNumber != cr.getTableNumber() ||
0: 							 columnNumber != cr.getColumnNumber())
0: 					{
0: 						convert = false;
0: 						break;
0: 					}
0: 				}
0: 				else
0: 				{
0: 					convert = false;
0: 					break;
0: 				}
0: 			}
0: 
0: 			/* So, can we convert the OR chain? */
0: 			if (convert)
0: 			{
0: 				ValueNodeList vnl = (ValueNodeList) getNodeFactory().getNode(
0: 													C_NodeTypes.VALUE_NODE_LIST,
0: 													getContextManager());
0: 				// Build the IN list 
0: 				for (ValueNode vn = this; vn instanceof OrNode; vn = ((OrNode) vn).getRightOperand())
0: 				{
0: 					OrNode on = (OrNode) vn;
0: 					BinaryRelationalOperatorNode beon = (BinaryRelationalOperatorNode) on.getLeftOperand();
0: 					if (beon.getLeftOperand() instanceof ColumnReference)
0: 					{
0: 						vnl.addValueNode(beon.getRightOperand());
0: 					}
0: 					else
0: 					{
0: 						vnl.addValueNode(beon.getLeftOperand());
0: 					}
0: 				}
0: 
0: 				InListOperatorNode ilon =
0: 							(InListOperatorNode) getNodeFactory().getNode(
0: 											C_NodeTypes.IN_LIST_OPERATOR_NODE,
0: 											cr,
0: 											vnl,
0: 											getContextManager());
0: 
0: 				// Transfer the result type info to the IN list
0: 				ilon.setType(getTypeServices());
0: 
0: 				/* We return the result of preprocess() on the
0: 				 * IN list so that any compilation time transformations
0: 				 * will be done.
0: 				 */
0: 				return ilon.preprocess(numTables,
0: 						 outerFromList, outerSubqueryList, 
0: 						 outerPredicateList);
0: 			}
0: 		}
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
0: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
0: 	 * ComparisonOperators and boolean expressions.  We invert 
0: 	 * ComparisonOperators and replace boolean expressions with 
0: 	 * boolean expression = false.
0: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
0: 	 * still could be NotNodes left in the tree.
0: 	 *
0: 	 * @param	underNotNode		Whether or not we are under a NotNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ValueNode eliminateNots(boolean underNotNode) 
0: 					throws StandardException
0: 	{
0: 		leftOperand = leftOperand.eliminateNots(underNotNode);
0: 		rightOperand = rightOperand.eliminateNots(underNotNode);
0: 		if (! underNotNode)
0: 		{
0: 			return this;
0: 		}
0: 
0: 		/* Convert the OrNode to an AndNode */
0: 		AndNode	andNode;
0: 
0: 		andNode = (AndNode) getNodeFactory().getNode(
0: 													C_NodeTypes.AND_NODE,
0: 													leftOperand,
0: 													rightOperand,
0: 													getContextManager());
0: 		andNode.setType(dataTypeServices);
0: 		return andNode;
0: 	}
0: 
0: 	/**
0: 	 * Finish putting an expression into conjunctive normal
0: 	 * form.  An expression tree in conjunctive normal form meets
0: 	 * the following criteria:
0: 	 *		o  If the expression tree is not null,
0: 	 *		   the top level will be a chain of AndNodes terminating
0: 	 *		   in a true BooleanConstantNode.
0: 	 *		o  The left child of an AndNode will never be an AndNode.
0: 	 *		o  Any right-linked chain that includes an AndNode will
0: 	 *		   be entirely composed of AndNodes terminated by a true BooleanConstantNode.
0: 	 *		o  The left child of an OrNode will never be an OrNode.
0: 	 *		o  Any right-linked chain that includes an OrNode will
0: 	 *		   be entirely composed of OrNodes terminated by a false BooleanConstantNode.
0: 	 *		o  ValueNodes other than AndNodes and OrNodes are considered
0: 	 *		   leaf nodes for purposes of expression normalization.
0: 	 *		   In other words, we won't do any normalization under
0: 	 *		   those nodes.
0: 	 *
0: 	 * In addition, we track whether or not we are under a top level AndNode.  
0: 	 * SubqueryNodes need to know this for subquery flattening.
0: 	 *
0: 	 * @param	underTopAndNode		Whether or not we are under a top level AndNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public ValueNode changeToCNF(boolean underTopAndNode) 
0: 					throws StandardException
0: 	{
0: 		OrNode curOr = this;
0: 
0: 		/* If rightOperand is an AndNode, then we must generate an 
0: 		 * OrNode above it.
0: 		 */
0: 		if (rightOperand instanceof AndNode)
0: 		{
0: 			BooleanConstantNode	falseNode;
0: 
0: 			falseNode = (BooleanConstantNode) getNodeFactory().getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.FALSE,
0: 											getContextManager());
0: 			rightOperand = (ValueNode) getNodeFactory().getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												rightOperand,
0: 												falseNode,
0: 												getContextManager());
0: 			((OrNode) rightOperand).postBindFixup();
0: 		}
0: 
0: 		/* We need to ensure that the right chain is terminated by
0: 		 * a false BooleanConstantNode.
0: 		 */
0: 		while (curOr.getRightOperand() instanceof OrNode)
0: 		{
0: 			curOr = (OrNode) curOr.getRightOperand();
0: 		}
0: 
0: 		/* Add the false BooleanConstantNode if not there yet */
0: 		if (!(curOr.getRightOperand().isBooleanFalse()))
0: 		{
0: 			BooleanConstantNode	falseNode;
0: 
0: 			falseNode = (BooleanConstantNode) getNodeFactory().getNode(
0: 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
0: 											Boolean.FALSE,
0: 											getContextManager());
0: 			curOr.setRightOperand(
0: 					(ValueNode) getNodeFactory().getNode(
0: 												C_NodeTypes.OR_NODE,
0: 												curOr.getRightOperand(),
0: 												falseNode,
0: 												getContextManager()));
0: 			((OrNode) curOr.getRightOperand()).postBindFixup();
0: 		}
0: 
0: 		/* If leftOperand is an OrNode, then we modify the tree from:
0: 		 *
0: 		 *				this
0: 		 *			   /	\
0: 		 *			Or2		Nodex
0: 		 *		   /	\		...
0: 		 *		left2	right2
0: 		 *
0: 		 *	to:
0: 		 *
0: 		 *						this
0: 		 *					   /	\
0: 		 *	left2.changeToCNF()		 Or2
0: 		 *							/	\
0: 		 *		right2.changeToCNF()	 Nodex.changeToCNF()
0: 		 *
0: 		 *	NOTE: We could easily switch places between left2.changeToCNF() and 
0: 		 *  right2.changeToCNF().
0: 		 */
0: 
0: 		while (leftOperand instanceof OrNode)
0: 		{
0: 			ValueNode newLeft;
0: 			OrNode	  oldLeft;
0: 			OrNode	  newRight;
0: 			ValueNode oldRight;
0: 
0: 			/* For "clarity", we first get the new and old operands */
0: 			newLeft = ((OrNode) leftOperand).getLeftOperand();
0: 			oldLeft = (OrNode) leftOperand;
0: 			newRight = (OrNode) leftOperand;
0: 			oldRight = rightOperand;
0: 
0: 			/* We then twiddle the tree to match the above diagram */
0: 			leftOperand = newLeft;
0: 			rightOperand = newRight;
0: 			newRight.setLeftOperand(oldLeft.getRightOperand());
0: 			newRight.setRightOperand(oldRight);
0: 		}
0: 
0: 		/* Finally, we continue to normalize the left and right subtrees. */
0: 		leftOperand = leftOperand.changeToCNF(false);
0: 		rightOperand = rightOperand.changeToCNF(false);
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Verify that changeToCNF() did its job correctly.  Verify that:
0: 	 *		o  AndNode  - rightOperand is not instanceof OrNode
0: 	 *				      leftOperand is not instanceof AndNode
0: 	 *		o  OrNode	- rightOperand is not instanceof AndNode
0: 	 *					  leftOperand is not instanceof OrNode
0: 	 *
0: 	 * @return		Boolean which reflects validity of the tree.
0: 	 */
0: 	public boolean verifyChangeToCNF()
0: 	{
0: 		boolean isValid = true;
0: 
0: 		if (SanityManager.ASSERT)
0: 		{
0: 			isValid = ((rightOperand instanceof OrNode) ||
0: 					   (rightOperand.isBooleanFalse()));
0: 			if (rightOperand instanceof OrNode)
0: 			{
0: 				isValid = rightOperand.verifyChangeToCNF();
0: 			}
0: 			if (leftOperand instanceof OrNode)
0: 			{
0: 				isValid = false;
0: 			}
0: 			else
0: 			{
0: 				isValid = leftOperand.verifyChangeToCNF();
0: 			}
0: 		}
0: 
0: 		return isValid;
0: 	}
0: 
0: 	/**
0: 	 * Do bind() by hand for an AndNode that was generated after bind(),
0: 	 * eg by putAndsOnTop(). (Set the data type and nullability info.)
0: 	 *
0: 	 * @return	None.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	void postBindFixup()
0: 					throws StandardException
0: 	{
0: 		setType(resolveLogicalBinaryOperator(
0: 							leftOperand.getTypeServices(),
0: 							rightOperand.getTypeServices()
0: 											)
0: 				);
0: 	}
0: }
============================================================================