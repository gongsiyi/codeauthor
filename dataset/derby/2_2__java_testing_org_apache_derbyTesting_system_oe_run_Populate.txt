1:6e8ab1f: /*
13:6e8ab1f:  * 
1:6e8ab1f:  * Derby - Class org.apache.derbyTesting.system.oe.run.Populate
1:6e8ab1f:  * 
1:6e8ab1f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e8ab1f:  * contributor license agreements. See the NOTICE file distributed with this
1:6e8ab1f:  * work for additional information regarding copyright ownership. The ASF
1:6e8ab1f:  * licenses this file to You under the Apache License, Version 2.0 (the
1:6e8ab1f:  * "License"); you may not use this file except in compliance with the License.
1:6e8ab1f:  * You may obtain a copy of the License at
1:6e8ab1f:  * 
1:6e8ab1f:  * http://www.apache.org/licenses/LICENSE-2.0
1:6e8ab1f:  * 
1:6e8ab1f:  * Unless required by applicable law or agreed to in writing, software
1:6e8ab1f:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:6e8ab1f:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:6e8ab1f:  * License for the specific language governing permissions and limitations under
1:6e8ab1f:  * the License.
20:6e8ab1f:  */
1:6e8ab1f: package org.apache.derbyTesting.system.oe.run;
1:76c452e: 
1:6e8ab1f: import java.sql.SQLException;
1:76c452e: import javax.sql.DataSource;
1:6e8ab1f: import junit.framework.Test;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:76c452e: import org.apache.derbyTesting.junit.JDBCDataSource;
1:6e8ab1f: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
1:6e8ab1f: import org.apache.derbyTesting.system.oe.client.Load;
1:76c452e: import org.apache.derbyTesting.system.oe.load.ThreadInsert;
30:6e8ab1f: 
20:6e8ab1f: /**
1:6e8ab1f:  * Driver to do the load phase for the Order Entry benchmark.
1:6e8ab1f:  * 
1:6e8ab1f:  * This class takes in following arguments currently:
1:6e8ab1f:  * Usage: java org.apache.derbyTesting.system.oe.run.Populate options
1:6e8ab1f:  * Options:
1:6e8ab1f:  * <OL>
1:6e8ab1f:  * <LI>-scale warehouse scaling factor. Takes a short value. If not specified defaults to 1
1:6e8ab1f:  * <LI>-createConstraintsBeforeLoad create constraints before initial load of data, takes a boolean value. If not specified, defaults to true
1:6e8ab1f:  * <LI>-doChecks check consistency of data, takes a boolean value. If not specified, defaults to true
1:76c452e:  * <LI>-loaderThreads Number of threads to populate tables, defaults to number of cores
1:6e8ab1f:  * <LI>-help prints usage
1:6e8ab1f:  * </OL>
1:6e8ab1f:  * 
1:6e8ab1f:  * To load database with scale of 2, to load constraints after the population, 
1:6e8ab1f:  * and to not do any checks, the command to run the test is as follows:
1:6e8ab1f:  * <BR>
1:6e8ab1f:  * java org.apache.derbyTesting.system.oe.run.Populate -scale 2 -doChecks false -createConstraintsBeforeLoad false
1:6e8ab1f:  * <BR>
1:6e8ab1f:  * This class uses the junit performance framework in Derby and 
1:6e8ab1f:  * the tests the performance of the following operations. 
1:6e8ab1f:  * 
1:6e8ab1f:  * <OL>
1:6e8ab1f:  * <LI> create schema with or without constraints (configurable)
1:6e8ab1f:  * <LI> populate the schema
1:6e8ab1f:  * <LI> Check the cardinality of the tables.
1:6e8ab1f:  * </OL>
1:6e8ab1f:  */
1:6e8ab1f: public class Populate extends JDBCPerfTestCase {
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Warehouse scale factor
1:6e8ab1f:      */
1:fbc46af:     static short scale = 1;
1:76c452e:     
1:76c452e:     /**
1:76c452e:      * Number of threads to load the data.
1:76c452e:      */
1:76c452e:     static int loaderThreads;
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * flag to indicate if we should create constraints before loading data
1:6e8ab1f:      */
1:6e8ab1f:     private static boolean createConstraintsBeforeLoad = true;
1:6e8ab1f:     
1:6e8ab1f:     /**
1:6e8ab1f:      * flag to indicate if we should perform consistency, cardinality checks
1:6e8ab1f:      * after the load
1:6e8ab1f:      */
1:6e8ab1f:     private static boolean doChecks = true;
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Create a test case with the given name.
1:6e8ab1f:      * 
1:6e8ab1f:      * @param name
1:6e8ab1f:      *            of the test case.
1:6e8ab1f:      */
1:6e8ab1f:     public Populate(String name) {
1:6e8ab1f:         super(name);
20:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * Run OE load
1:6e8ab1f:      * @param args supply arguments for benchmark.
12:6e8ab1f:      * @throws Exception
1:6e8ab1f:      */
1:6e8ab1f:     public static void main(String[] args) throws Exception
1:6e8ab1f:     {
1:6e8ab1f:         parseArgs(args);
1:6e8ab1f:         String[] tmp= {"org.apache.derbyTesting.system.oe.run.Populate"};
1:6e8ab1f:         
1:6e8ab1f:         // run the tests.
1:6e8ab1f:         junit.textui.TestRunner.main(tmp);
1:6e8ab1f:     }
1:6e8ab1f:     
1:6e8ab1f:     /**
1:6e8ab1f:      * parse arguments.
1:6e8ab1f:      * @param args arguments to parse
1:6e8ab1f:      */
1:fbc46af:     static void parseArgs(String[] args) {
1:6e8ab1f:         for (int i = 0; i < args.length; i++) {
1:6e8ab1f:             String arg = args[i];
1:6e8ab1f:             if (arg.equals("-scale")) {
1:6e8ab1f:                 scale = Short.parseShort(args[++i]);
1:6e8ab1f:             } else if (arg.equals("-createConstraintsBeforeLoad")) {
1:6e8ab1f:                 createConstraintsBeforeLoad = (args[++i].equals("false")? false:true);
1:6e8ab1f:             } else if (arg.equals("-doChecks")) {
1:6e8ab1f:                 doChecks = (args[++i].equals("false")? false:true);
1:76c452e:             } else if (arg.equals("-loaderThreads")) {
1:76c452e:                 loaderThreads = Integer.parseInt(args[++i]);
1:6e8ab1f:             } else if (arg.equals("-help")) {
1:6e8ab1f:                 printUsage();
1:6e8ab1f:                 System.exit(0);
1:6e8ab1f:             } else {
1:6e8ab1f:                 System.err.println("Invalid option: " + args[i]);
1:6e8ab1f:                 System.exit(1);
1:6e8ab1f:             }
1:6e8ab1f:         }
1:6e8ab1f:         
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     private static void printUsage() {
1:6e8ab1f:         System.out.println("Usage: java org.apache.derbyTesting.system.oe.run.Populate options");
1:6e8ab1f:         System.out.println();
1:6e8ab1f:         System.out.println("Options:");
1:6e8ab1f:         System.out.println("  -scale warehouse scaling factor. Takes a short value. If not specified defaults to 1");
1:6e8ab1f:         System.out.println("  -createConstraintsBeforeLoad create constraints before initial load of data, takes a boolean value. If not specified, defaults to true)");
1:6e8ab1f:         System.out.println("  -doChecks check consistency of data, takes a boolean value. If not specified, defaults to true)");
1:76c452e:         System.out.println("  -loaderThreads number of threads used to populate database, defaults to number of cpu cores)");
1:6e8ab1f:         System.out.println("  -help prints usage");
1:6e8ab1f:         System.out.println();
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * junit tests to do the OE load.
1:6e8ab1f:      * 
1:6e8ab1f:      * @return the tests to run
1:6e8ab1f:      */
1:fbc46af:     public static Test suite() {
1:76c452e: 
1:1ae02c9:         BaseTestSuite suite = new BaseTestSuite("Order Entry");
1:76c452e:         
1:76c452e:         suite.addTest(new Populate("testCreateDB"));
1:fbc46af: 
1:6e8ab1f:         // Create Schema
1:8404f5d:         Schema.addBaseSchema(suite);
1:6e8ab1f:         if (createConstraintsBeforeLoad)
1:7a0c00a:             Schema.addConstraints(suite);
1:7a0c00a:         
1:6e8ab1f:         // this will populate db
1:76c452e:         suite.addTest(new Populate("testLoad"));
1:6e8ab1f: 
1:6e8ab1f:         if (!createConstraintsBeforeLoad)
1:7a0c00a:             Schema.addConstraints(suite);
1:6e8ab1f: 
1:6e8ab1f:         if (doChecks)
1:6e8ab1f:         {
1:6e8ab1f:             //check if cardinality of rows are OK after
1:6e8ab1f:             //population phase.
1:7a0c00a:             suite.addTest(Checks.checkAllRowCounts(scale));
1:7a0c00a:             // consistency checks.
1:7a0c00a:             suite.addTest(Checks.consistencyChecks());
1:fbc46af:         }
1:6e8ab1f:         
1:6e8ab1f:         return suite;
1:6e8ab1f:     }
1:6e8ab1f: 
1:76c452e:     public void testCreateDB() throws SQLException
1:76c452e:     {
1:76c452e:         DataSource ds = JDBCDataSource.getDataSource();
1:76c452e:         
1:76c452e:         JDBCDataSource.setBeanProperty(ds,
1:76c452e:                 "createDatabase", "create");
1:76c452e:  
1:76c452e:         ds.getConnection().close();
1:76c452e: 
1:76c452e:     }
1:6e8ab1f: 
1:6e8ab1f:     /**
1:6e8ab1f:      * test the initial database load
1:6e8ab1f:      * 
1:6e8ab1f:      * @throws Exception
1:6e8ab1f:      */
1:6e8ab1f:     public void testLoad() throws Exception {
1:76c452e:         
1:76c452e:         // Use simple insert statements to insert data.
1:76c452e:         // currently only this form of load is present, once we have 
1:76c452e:         // different implementations, the loading mechanism will need
1:76c452e:         // to be configurable taking an option from the command line
1:76c452e:         // arguments.
1:76c452e:         DataSource ds = JDBCDataSource.getDataSource();
1:76c452e:        
1:76c452e:         Load loader = new ThreadInsert(ds);
1:76c452e:         loader.setupLoad(getConnection(), scale);
1:76c452e:         if (loaderThreads > 0)
1:76c452e:             loader.setThreadCount(loaderThreads);
1:76c452e:         
1:6e8ab1f:         loader.populateAllTables();
1:6e8ab1f: 
1:6e8ab1f:         // Way to populate data is extensible. Any other implementation
1:6e8ab1f:         // of org.apache.derbyTesting.system.oe.client.Load can be used
1:6e8ab1f:         // to load data. configurable using the oe.load.insert property
1:6e8ab1f:         // that is defined in oe.properties
1:6e8ab1f:         // One extension would be to have an implementation that 
1:6e8ab1f:         // uses bulkinsert vti to load data.
1:6e8ab1f:     }
1:6e8ab1f: 
1:6e8ab1f: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1:         BaseTestSuite suite = new BaseTestSuite("Order Entry");
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:76c452e
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
1: 
1: import org.apache.derbyTesting.junit.JDBCDataSource;
1: import org.apache.derbyTesting.system.oe.load.ThreadInsert;
/////////////////////////////////////////////////////////////////////////
1:  * <LI>-loaderThreads Number of threads to populate tables, defaults to number of cores
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Number of threads to load the data.
1:      */
1:     static int loaderThreads;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             } else if (arg.equals("-loaderThreads")) {
1:                 loaderThreads = Integer.parseInt(args[++i]);
/////////////////////////////////////////////////////////////////////////
1:         System.out.println("  -loaderThreads number of threads used to populate database, defaults to number of cpu cores)");
/////////////////////////////////////////////////////////////////////////
1: 
1:         
1:         suite.addTest(new Populate("testCreateDB"));
/////////////////////////////////////////////////////////////////////////
1:         suite.addTest(new Populate("testLoad"));
/////////////////////////////////////////////////////////////////////////
1:     public void testCreateDB() throws SQLException
1:     {
1:         DataSource ds = JDBCDataSource.getDataSource();
1:         
1:         JDBCDataSource.setBeanProperty(ds,
1:                 "createDatabase", "create");
1:  
1:         ds.getConnection().close();
1: 
1:     }
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Use simple insert statements to insert data.
1:         // currently only this form of load is present, once we have 
1:         // different implementations, the loading mechanism will need
1:         // to be configurable taking an option from the command line
1:         // arguments.
1:         DataSource ds = JDBCDataSource.getDataSource();
1:        
1:         Load loader = new ThreadInsert(ds);
1:         loader.setupLoad(getConnection(), scale);
1:         if (loaderThreads > 0)
1:             loader.setThreadCount(loaderThreads);
1:         
commit:88809ad
/////////////////////////////////////////////////////////////////////////
0:     protected void setUp() throws Exception {
commit:fbc46af
/////////////////////////////////////////////////////////////////////////
1:     static short scale = 1;
/////////////////////////////////////////////////////////////////////////
0:     Load loader;
/////////////////////////////////////////////////////////////////////////
1:     static void parseArgs(String[] args) {
/////////////////////////////////////////////////////////////////////////
1:     public static Test suite() {
0:         return loaderSuite(Populate.class);
1:     }
1:     
0:     static Test loaderSuite(Class loader) {
/////////////////////////////////////////////////////////////////////////
0:         suite.addTestSuite(loader);
commit:8404f5d
/////////////////////////////////////////////////////////////////////////
1:         Schema.addBaseSchema(suite);
commit:7a0c00a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derbyTesting.system.oe.run.Checks;
0: import org.apache.derbyTesting.system.oe.run.Schema;
/////////////////////////////////////////////////////////////////////////
0:        loader = new SimpleInsert();
0:        loader.setupLoad(getConnection(), scale);
/////////////////////////////////////////////////////////////////////////
0:         suite.addTest(new Schema("testSchema"));
1:             Schema.addConstraints(suite);
1:         
1:             Schema.addConstraints(suite);
1:             suite.addTest(Checks.checkAllRowCounts(scale));
1:             // consistency checks.
1:             suite.addTest(Checks.consistencyChecks());
/////////////////////////////////////////////////////////////////////////
commit:6e8ab1f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Derby - Class org.apache.derbyTesting.system.oe.run.Populate
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  */
1: package org.apache.derbyTesting.system.oe.run;
1: 
0: import java.io.IOException;
0: import java.io.UnsupportedEncodingException;
0: import java.security.PrivilegedActionException;
1: import java.sql.SQLException;
1: 
0: import junit.framework.Assert;
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.JDBCPerfTestCase;
0: import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
1: import org.apache.derbyTesting.system.oe.client.Load;
0: import org.apache.derbyTesting.system.oe.load.SimpleInsert;
1: 
1: 
1: /**
1:  * Driver to do the load phase for the Order Entry benchmark.
1:  * 
1:  * This class takes in following arguments currently:
1:  * Usage: java org.apache.derbyTesting.system.oe.run.Populate options
1:  * Options:
1:  * <OL>
1:  * <LI>-scale warehouse scaling factor. Takes a short value. If not specified defaults to 1
1:  * <LI>-createConstraintsBeforeLoad create constraints before initial load of data, takes a boolean value. If not specified, defaults to true
1:  * <LI>-doChecks check consistency of data, takes a boolean value. If not specified, defaults to true
1:  * <LI>-help prints usage
1:  * </OL>
1:  * 
1:  * To load database with scale of 2, to load constraints after the population, 
1:  * and to not do any checks, the command to run the test is as follows:
1:  * <BR>
1:  * java org.apache.derbyTesting.system.oe.run.Populate -scale 2 -doChecks false -createConstraintsBeforeLoad false
1:  * <BR>
1:  * This class uses the junit performance framework in Derby and 
1:  * the tests the performance of the following operations. 
1:  * 
1:  * <OL>
1:  * <LI> create schema with or without constraints (configurable)
1:  * <LI> populate the schema
1:  * <LI> Check the cardinality of the tables.
1:  * </OL>
1:  */
1: public class Populate extends JDBCPerfTestCase {
1: 
1:     /**
1:      * Warehouse scale factor
1:      */
0:     private static short scale = 1;
1: 
1:     /**
1:      * flag to indicate if we should create constraints before loading data
1:      */
1:     private static boolean createConstraintsBeforeLoad = true;
1:     
1:     /**
1:      * flag to indicate if we should perform consistency, cardinality checks
1:      * after the load
1:      */
1:     private static boolean doChecks = true;
1:     
1:     /**
0:      * Load implementation used to populate the database
1:      */
0:     private Load loader;
1: 
1:     /**
1:      * Create a test case with the given name.
1:      * 
1:      * @param name
1:      *            of the test case.
1:      */
1:     public Populate(String name) {
1:         super(name);
1:     }
1: 
1: 
1:     /**
0:      * Do the initial setup required Initialize the appropriate implementation
0:      * for the Load phase.
1:      */
0:     public void setUp() throws Exception {
0:         // Use simple insert statements to insert data.
0:         // currently only this form of load is present, once we have 
0:         // different implementations, the loading mechanism will need
0:         // to be configurable taking an option from the command line
0:         // arguments.
0:        loader = new SimpleInsert(getConnection(), scale);
1:     }
1: 
1:     /**
1:      * Run OE load
1:      * @param args supply arguments for benchmark.
1:      * @throws Exception
1:      */
1:     public static void main(String[] args) throws Exception
1:     {
1:         parseArgs(args);
1:         String[] tmp= {"org.apache.derbyTesting.system.oe.run.Populate"};
1:         
1:         // run the tests.
1:         junit.textui.TestRunner.main(tmp);
1:     }
1:     
1:     /**
1:      * parse arguments.
1:      * @param args arguments to parse
1:      */
0:     private static void parseArgs(String[] args) {
1:         for (int i = 0; i < args.length; i++) {
1:             String arg = args[i];
1:             if (arg.equals("-scale")) {
1:                 scale = Short.parseShort(args[++i]);
1:             } else if (arg.equals("-createConstraintsBeforeLoad")) {
1:                 createConstraintsBeforeLoad = (args[++i].equals("false")? false:true);
1:             } else if (arg.equals("-doChecks")) {
1:                 doChecks = (args[++i].equals("false")? false:true);
1:             } else if (arg.equals("-help")) {
1:                 printUsage();
1:                 System.exit(0);
1:             } else {
1:                 System.err.println("Invalid option: " + args[i]);
1:                 System.exit(1);
1:             }
1:         }
1:         
1:     }
1: 
1:     private static void printUsage() {
1:         System.out.println("Usage: java org.apache.derbyTesting.system.oe.run.Populate options");
1:         System.out.println();
1:         System.out.println("Options:");
1:         System.out.println("  -scale warehouse scaling factor. Takes a short value. If not specified defaults to 1");
1:         System.out.println("  -createConstraintsBeforeLoad create constraints before initial load of data, takes a boolean value. If not specified, defaults to true)");
1:         System.out.println("  -doChecks check consistency of data, takes a boolean value. If not specified, defaults to true)");
1:         System.out.println("  -help prints usage");
1:         System.out.println();
1:     }
1: 
1:     /**
1:      * junit tests to do the OE load.
1:      * 
1:      * @return the tests to run
1:      */
0:     public static Test suite() throws Exception {
0:         TestSuite suite = new TestSuite("Order Entry");
1: 
1:         // Create Schema
0:         suite.addTest(new Populate("testSchema"));
1:         if (createConstraintsBeforeLoad)
0:             addConstraints(suite);
1:         // this will populate db
0:         suite.addTest(new Populate("testLoad"));
1: 
1:         if (!createConstraintsBeforeLoad)
0:             addConstraints(suite);
1: 
1:         if (doChecks)
1:         {
1:             //check if cardinality of rows are OK after
1:             //population phase.
0:             suite.addTest(new Populate("testWarehouseRows"));
0:             suite.addTest(new Populate("testStockRows"));
0:             suite.addTest(new Populate("testItemRows"));
0:             suite.addTest(new Populate("testCustomerRows"));
0:             suite.addTest(new Populate("testDistrictRows"));
0:             suite.addTest(new Populate("testOrdersRows"));
0:             suite.addTest(new Populate("testNewOrdersRows"));
0:             suite.addTest(new Populate("testOrderLineRows"));
0:             suite.addTest(new Populate("testHistoryRows"));
1:         }
1:         
1:         return suite;
1:     }
1: 
1:     /**
0:      * Add constraint tests to suite.
1:      * 
0:      * @param suite
1:      */
0:     private static void addConstraints(TestSuite suite) {
0:         suite.addTest(new Populate("testPrimaryKey"));
0:         suite.addTest(new Populate("testForeignKey"));
0:         suite.addTest(new Populate("testIndex"));
1: 
1:     }
1: 
1:     /**
0:      * Test setting up the base tables.
1:      */
0:     public void testSchema() throws UnsupportedEncodingException, SQLException,
0:     PrivilegedActionException, IOException {
0:         script("schema.sql");
1:     }
1: 
1:     /**
0:      * Test setting up the primary keys.
1:      */
0:     public void testPrimaryKey() throws UnsupportedEncodingException,
0:     SQLException, PrivilegedActionException, IOException {
0:         script("primarykey.sql");
1:     }
1: 
1:     /**
0:      * Test setting up the foreign keys.
1:      */
0:     public void testForeignKey() throws UnsupportedEncodingException,
0:     SQLException, PrivilegedActionException, IOException {
0:         script("foreignkey.sql");
1:     }
1: 
1:     /**
0:      * Test setting up the remaining indexes.
1:      */
0:     public void testIndex() throws UnsupportedEncodingException, SQLException,
0:     PrivilegedActionException, IOException {
0:         script("index.sql");
1:     }
1: 
1:     /**
1:      * test the initial database load
1:      * 
1:      * @throws Exception
1:      */
1:     public void testLoad() throws Exception {
1:         loader.populateAllTables();
1: 
1:         // Way to populate data is extensible. Any other implementation
1:         // of org.apache.derbyTesting.system.oe.client.Load can be used
1:         // to load data. configurable using the oe.load.insert property
1:         // that is defined in oe.properties
1:         // One extension would be to have an implementation that 
1:         // uses bulkinsert vti to load data.
1: 
1:     }
1: 
1:     /**
0:      * Test cardinality of WAREHOUSE table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testWarehouseRows() throws Exception {
0:         checkCountStar("WAREHOUSE", loader.getScale());
1:     }
1: 
1:     /**
0:      * Test cardinality of STOCK table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testStockRows() throws Exception {
0:         checkCountStar("STOCK", Load.STOCK_COUNT_W * loader.getScale());
1:     }
1: 
1:     /**
0:      * Test cardinality of ORDERS table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testOrdersRows() throws Exception {
0:         checkCountStar("ORDERS", Load.ORDERS_COUNT_W * loader.getScale());
1:     }
1: 
1:     /**
0:      * Test cardinality of DISTRICT table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testDistrictRows() throws Exception {
0:         checkCountStar("DISTRICT", Load.DISTRICT_COUNT_W * loader.getScale());
1:     }
1: 
1:     /**
0:      * Test cardinality of CUSTOMER table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testCustomerRows() throws Exception {
0:         checkCountStar("CUSTOMER", Load.CUSTOMER_COUNT_W * loader.getScale());
1:     }
1: 
1:     /**
0:      * Test cardinality of ITEM table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testItemRows() throws Exception {
0:         checkCountStar("ITEM", Load.ITEM_COUNT);
1:     }
1: 
1:     /**
0:      * Test cardinality of NEWORDERS table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testNewOrdersRows() throws Exception {
0:         checkCountStar("NEWORDERS", Load.NEWORDERS_COUNT_W * loader.getScale());
1:     }
1: 
1:     /**
0:      * Test cardinality of HISTORY table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testHistoryRows() throws Exception {
0:         checkCountStar("HISTORY", Load.HISTORY_COUNT_W * loader.getScale());
1:     }
1: 
1:     /**
0:      * Test cardinality of ORDERLINE table
1:      * 
1:      * @throws Exception
1:      */
0:     public void testOrderLineRows() throws Exception {
0:         checkWithinOnePercent("ORDERLINE", Load.ORDERLINE_COUNT_WV
0:                 * loader.getScale());
1:     }
1: 
1:     /**
0:      * Check if number of rows in table is as expected
1:      * 
0:      * @param table -
0:      *            table on which to execute the query
0:      * @param expected -
0:      *            expected number of rows
1:      * @throws Exception
1:      */
0:     private void checkCountStar(String table, int expected) throws Exception {
0:         Assert.assertEquals("Number of rows loaded for " + table
0:                 + " not correct", expected, loader.rowsInTable(table));
1:     }
1: 
1:     /**
0:      * Check if number of rows in table is within one percent of expected value
1:      * 
0:      * @param table -
0:      *            table on which to execute the query
0:      * @param expected -
0:      *            expected number of rows
1:      * @throws Exception
1:      */
0:     private void checkWithinOnePercent(String tableName, int expected)
0:     throws Exception {
1: 
0:         double count = loader.rowsInTable(tableName);
1: 
0:         double low = ((double) expected) * 0.99;
0:         double high = ((double) expected) * 1.01;
1: 
0:         Assert.assertEquals("Initial rows" + count + " in " + tableName
0:                 + " is out of range.[" + low + "-" + high + "]", false,
0:                 ((count < low) || (count > high)));
1: 
1:     }
1: 
1:     /**
0:      * Run a Order Entry script.
1:      */
0:     private void script(String name) throws UnsupportedEncodingException,
0:     SQLException, PrivilegedActionException, IOException {
1: 
0:         String script = "org/apache/derbyTesting/system/oe/schema/" + name;
0:         int errorCount = runScript(script, "US-ASCII");
0:         assertEquals("Errors in script ", 0, errorCount);
1:     }
1: }
============================================================================