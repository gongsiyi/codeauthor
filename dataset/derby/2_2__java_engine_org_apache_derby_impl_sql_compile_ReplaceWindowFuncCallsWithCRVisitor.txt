1:7a9ce7e: /*
1:7a9ce7e:    Derby - Class org.apache.derby.impl.sql.compile.ReplaceWindowFuncCallsWithCRVisitor
1:7a9ce7e: 
1:7a9ce7e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9ce7e:    contributor license agreements.  See the NOTICE file distributed with
1:7a9ce7e:    this work for additional information regarding copyright ownership.
1:7a9ce7e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a9ce7e:    (the "License"); you may not use this file except in compliance with
1:7a9ce7e:    the License.  You may obtain a copy of the License at
1:7a9ce7e: 
1:7a9ce7e:       http://www.apache.org/licenses/LICENSE-2.0
1:7a9ce7e: 
1:7a9ce7e:    Unless required by applicable law or agreed to in writing, software
1:7a9ce7e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a9ce7e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9ce7e:    See the License for the specific language governing permissions and
1:7a9ce7e:    limitations under the License.
1:7a9ce7e: 
1:7a9ce7e:  */
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e: package	org.apache.derby.impl.sql.compile;
1:7a9ce7e: 
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:7a9ce7e: import org.apache.derby.iapi.sql.compile.Visitable;
1:7a9ce7e: import org.apache.derby.iapi.sql.compile.Visitor;
1:7a9ce7e: 
1:7a9ce7e: /**
1:7a9ce7e:  * Replace all window function calls with result columns.
1:7a9ce7e:  *
1:7a9ce7e:  */
1:3bb140c: class ReplaceWindowFuncCallsWithCRVisitor implements Visitor
1:7a9ce7e: {
1:7a9ce7e: 	private ResultColumnList rcl;
1:e1f49ca:     private Class<?> skipOverClass;
1:7a9ce7e: 	private int tableNumber;
1:7a9ce7e: 
1:7a9ce7e: 	/**
1:7a9ce7e: 	 * Replace all window function calls with column references.  Add
1:7a9ce7e: 	 * the reference to the RCL.  Delegates most work to
1:7a9ce7e: 	 * WindowFunctionNode.replaceCallsWithColumnReferences(rcl, tableNumber).
1:7a9ce7e: 	 *
1:7a9ce7e: 	 * @param rcl the result column list
1:7a9ce7e: 	 * @param tableNumber	The tableNumber for the new CRs
1:7a9ce7e: 	 * @param skipOverClass Don't go past this
1:7a9ce7e: 	 */
1:3bb140c:     ReplaceWindowFuncCallsWithCRVisitor(ResultColumnList rcl,
1:7a9ce7e: 											int tableNumber,
1:e1f49ca:                                             Class<?> skipOverClass)
1:7a9ce7e: 	{
1:7a9ce7e: 		this.rcl = rcl;
1:7a9ce7e: 		this.tableNumber = tableNumber;
1:7a9ce7e: 		this.skipOverClass = skipOverClass;
1:7a9ce7e: 	}
1:7a9ce7e: 
1:7a9ce7e: 	////////////////////////////////////////////////
1:7a9ce7e: 	//
1:7a9ce7e: 	// VISITOR INTERFACE
1:7a9ce7e: 	//
1:7a9ce7e: 	////////////////////////////////////////////////
1:7a9ce7e: 
1:7a9ce7e: 	/**
1:7a9ce7e: 	 * Don't do anything unless we have a window function node
1:3bb140c:      * node. Visitor override.
1:7a9ce7e: 	 * @see Visitor#visit
1:7a9ce7e: 	 *
1:7a9ce7e: 	 */
1:7a9ce7e: 	public Visitable visit(Visitable node)
1:7a9ce7e: 		throws StandardException
1:7a9ce7e: 	{
1:7a9ce7e: 		if (node instanceof WindowFunctionNode)
1:7a9ce7e: 		{
1:7a9ce7e: 			/*
1:7a9ce7e: 			** Let windowFunctionNode replace itself.
1:7a9ce7e: 			*/
1:7a9ce7e: 			node = ((WindowFunctionNode)node).
1:7a9ce7e: 				replaceCallsWithColumnReferences(rcl, tableNumber);
1:7a9ce7e: 		}
1:7a9ce7e: 
1:7a9ce7e: 		return node;
1:7a9ce7e: 	}
1:7a9ce7e: 
1:7a9ce7e: 	/**
1:3bb140c:      * Don't visit children under the skipOverClass
1:3bb140c:      * node, if it isn't null. Visitor override.
1:7a9ce7e: 	 * @see Visitor#skipChildren
1:7a9ce7e: 	 */
1:7a9ce7e: 	public boolean skipChildren(Visitable node)
1:7a9ce7e: 	{
1:7a9ce7e: 		return (skipOverClass == null) ?
1:7a9ce7e: 				false:
1:7a9ce7e: 				skipOverClass.isInstance(node);
1:7a9ce7e: 	}
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e: 	/**
1:3bb140c:      * Visitor override.
1:7a9ce7e: 	 * @return false
1:dd2f5a8: 	 * @see Visitor#visitChildrenFirst
1:7a9ce7e: 	 */
1:dd2f5a8: 	public boolean visitChildrenFirst(Visitable node)
1:dd2f5a8: 	{
1:dd2f5a8: 		return false;
1:7a9ce7e: 	}
1:7a9ce7e: 
1:dd2f5a8: 	/**
1:3bb140c:      * Visitor override.
1:dd2f5a8: 	 * @return false
1:7a9ce7e: 	 * @see Visitor#skipChildren
1:dd2f5a8: 	 */
1:7a9ce7e: 	public boolean stopTraversal()
1:7a9ce7e: 	{
1:7a9ce7e: 		return false;
1:7a9ce7e: 	}
1:dd2f5a8: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:     private Class<?> skipOverClass;
/////////////////////////////////////////////////////////////////////////
1:                                             Class<?> skipOverClass)
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: class ReplaceWindowFuncCallsWithCRVisitor implements Visitor
/////////////////////////////////////////////////////////////////////////
1:     ReplaceWindowFuncCallsWithCRVisitor(ResultColumnList rcl,
/////////////////////////////////////////////////////////////////////////
1:      * node. Visitor override.
/////////////////////////////////////////////////////////////////////////
1:      * Don't visit children under the skipOverClass
1:      * node, if it isn't null. Visitor override.
/////////////////////////////////////////////////////////////////////////
1:      * Visitor override.
/////////////////////////////////////////////////////////////////////////
1:      * Visitor override.
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.compile.ReplaceWindowFuncCallsWithCRVisitor
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.Visitable;
1: import org.apache.derby.iapi.sql.compile.Visitor;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
1: /**
1:  * Replace all window function calls with result columns.
1:  *
1:  */
0: public class ReplaceWindowFuncCallsWithCRVisitor implements Visitor
1: {
1: 	private ResultColumnList rcl;
0: 	private Class skipOverClass;
1: 	private int tableNumber;
1: 
1: 	/**
1: 	 * Replace all window function calls with column references.  Add
1: 	 * the reference to the RCL.  Delegates most work to
1: 	 * WindowFunctionNode.replaceCallsWithColumnReferences(rcl, tableNumber).
1: 	 *
1: 	 * @param rcl the result column list
1: 	 * @param tableNumber	The tableNumber for the new CRs
1: 	 * @param skipOverClass Don't go past this
1: 	 */
0: 	public ReplaceWindowFuncCallsWithCRVisitor(ResultColumnList rcl,
1: 											int tableNumber,
0: 											Class skipOverClass)
1: 	{
1: 		this.rcl = rcl;
1: 		this.tableNumber = tableNumber;
1: 		this.skipOverClass = skipOverClass;
1: 	}
1: 
1: 	////////////////////////////////////////////////
1: 	//
1: 	// VISITOR INTERFACE
1: 	//
1: 	////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Don't do anything unless we have a window function node
0: 	 * node. Vistor override.
1: 	 * @see Visitor#visit
1: 	 *
1: 	 */
1: 	public Visitable visit(Visitable node)
1: 		throws StandardException
1: 	{
1: 		if (node instanceof WindowFunctionNode)
1: 		{
1: 			/*
1: 			** Let windowFunctionNode replace itself.
1: 			*/
1: 			node = ((WindowFunctionNode)node).
1: 				replaceCallsWithColumnReferences(rcl, tableNumber);
1: 		}
1: 
1: 		return node;
1: 	}
1: 
1: 	/**
0: 	 * Don't visit childen under the skipOverClass
0: 	 * node, if it isn't null. Vistor override.
1: 	 * @see Visitor#skipChildren
1: 	 */
1: 	public boolean skipChildren(Visitable node)
1: 	{
1: 		return (skipOverClass == null) ?
1: 				false:
1: 				skipOverClass.isInstance(node);
1: 	}
1: 
1: 
1: 	/**
0: 	 * Vistor override.
1: 	 * @return false
1: 	 * @see Visitor#skipChildren
1: 	 */
1: 	public boolean stopTraversal()
1: 	{
1: 		return false;
1: 	}
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:dd2f5a8
/////////////////////////////////////////////////////////////////////////
1: 	 * @see Visitor#visitChildrenFirst
1: 	 */
1: 	public boolean visitChildrenFirst(Visitable node)
1: 	{
1: 		return false;
1: 	}
0: 
1: 	/**
0: 	 * Vistor override.
1: 	 * @return false
============================================================================