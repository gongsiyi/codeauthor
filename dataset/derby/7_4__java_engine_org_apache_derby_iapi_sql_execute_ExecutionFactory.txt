1:eac0369: /*
1:7ecc1f2: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.execute.ExecutionFactory
1:7ecc1f2: 
1:2dd2d11:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd2d11:    contributor license agreements.  See the NOTICE file distributed with
1:2dd2d11:    this work for additional information regarding copyright ownership.
1:2dd2d11:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2dd2d11:    (the "License"); you may not use this file except in compliance with
1:2dd2d11:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
8:eac0369: 
5:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.execute;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1:eac0369: import org.apache.derby.iapi.sql.Activation;
1:eac0369: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1:eac0369: import org.apache.derby.iapi.sql.ResultDescription;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.Qualifier;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1:48a9884: import org.apache.derby.iapi.sql.execute.xplain.XPLAINFactoryIF;
1:eac0369: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1:eac0369: import org.apache.derby.iapi.store.access.TransactionController;
1:eac0369: import java.util.Properties;
1:eac0369: import org.apache.derby.iapi.services.io.FormatableBitSet;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1:eac0369: import org.apache.derby.iapi.services.context.ContextManager;
1:eac0369: 
1:eac0369: import org.apache.derby.catalog.TypeDescriptor;
1:eac0369: import org.apache.derby.catalog.UUID;
1:eac0369: 
5:eac0369: /**
1:eac0369: 	This is the factory for creating a factories needed by
1:eac0369: 	execution per connection, and the context to hold them.
1:eac0369: 	<p>
1:eac0369: 	There is expected to be one of these configured per database.
1:eac0369: 	<p>
1:eac0369: 	If a factory is needed outside of execution (say,
1:eac0369: 	data dictionary or compilation), then it belongs in the
1:eac0369: 	LanguageConnectionContext.
1:eac0369: 
1:eac0369: 	@see org.apache.derby.iapi.sql.conn.LanguageConnectionContext
1:eac0369:  */
1:eac0369: public interface ExecutionFactory {
1:eac0369: 
1:eac0369: 		/**
1:eac0369: 		Module name for the monitor's module locating system.
1:eac0369: 	 */
1:eac0369: 	String MODULE = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Only one result set factory is needed for a database
1:eac0369: 		in the system.
1:eac0369: 		We require that an execution factory be configured for
1:eac0369: 		each database. Each execution factory then needs to
1:eac0369: 		know about the result set factory it is maintaining
1:eac0369: 		for its database, so that it can provide it through
1:eac0369: 		calls to this method.
1:eac0369: 		So, we reuse the result set factory by making it 
1:eac0369: 		available to each connection
1:eac0369: 		in that connection's execution context.
1:eac0369: 
1:eac0369: 		@return the result set factory for this database.
1:eac0369: 	 */
1:eac0369: 	ResultSetFactory getResultSetFactory();
1:53ce71e:     
1:53ce71e:     /**
1:53ce71e:      * Get the ResultSetStatisticsFactory from this ExecutionFactory.
1:53ce71e:      *
1:53ce71e:      * @return  The result set statistics factory associated with this
1:53ce71e:      *      ExecutionFactory
1:53ce71e:      *
1:53ce71e:      * @exception StandardException     Thrown on error
1:53ce71e:      */
1:53ce71e:     public ResultSetStatisticsFactory getResultSetStatisticsFactory()
1:53ce71e:         throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:48a9884: 	 * Get the XPLAINFactory from this ExecutionFactory.
1:48a9884: 	 *
1:48a9884: 	 * @return  The xplain factory associated with this
1:48a9884: 	 *      ExecutionContext
1:48a9884: 	 *
1:48a9884: 	 * @exception StandardException     Thrown on error
1:48a9884: 	 */
1:48a9884: 	XPLAINFactoryIF getXPLAINFactory()
1:48a9884:                                 throws StandardException;
1:48a9884: 	
1:48a9884: 	
1:48a9884:   	/**
1:48a9884:   	 * Get the ExecutionFactory from this ExecutionContext.
1:48a9884:   	 *
1:eac0369: 		We want an execution context so that we can push it onto
1:eac0369: 		the stack.  We could instead require the implementation
1:eac0369: 		push it onto the stack for us, but this way we know
1:eac0369: 		which context object exactly was pushed onto the stack.
1:eac0369: 
1:eac0369: 		@param cm  the context manager
1:eac0369: 	 */
1:eac0369: 	ExecutionContext newExecutionContext(ContextManager cm);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create an execution time ResultColumnDescriptor from a 
1:eac0369: 	 * compile time RCD.
1:eac0369: 	 *
1:eac0369: 	 * @param compileRCD	The compile time RCD.
1:eac0369: 	 *
1:eac0369: 	 * @return The execution time ResultColumnDescriptor
1:eac0369: 	 */
1:eac0369: 	ResultColumnDescriptor getResultColumnDescriptor(ResultColumnDescriptor compileRCD);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Create a result description given parameters for it.
1:eac0369: 	 */
1:eac0369: 	ResultDescription getResultDescription(ResultColumnDescriptor[] columns,
1:eac0369: 		String statementType);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get an array of ScanQualifiers for a scan.  ScanQualifiers are used
1:eac0369: 	 * with the DataDictionary.
1:eac0369: 	 *
1:eac0369: 	 * @param numQualifiers	The number of ScanQualifiers to get.
1:eac0369: 	 */
1:eac0369: 	ScanQualifier[][] getScanQualifier(int numQualifiers);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Release a ScanQualifier[] (back to the pool or free it).
1:eac0369: 	 */
1:eac0369: 
1:eac0369: 	void releaseScanQualifier(ScanQualifier[][] scanQualifiers);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get a Qualifier to use with a scan of a conglomerate.
1:eac0369: 	 *
1:eac0369: 	 * @param columnId	The store id of the column to qualify
1:eac0369: 	 * @param operator	One of Orderable.ORDER_OP_EQUALS,
1:eac0369: 	 *					Orderable.ORDER_OP_LESSTHAN,
1:eac0369: 	 *					or Orderable.ORDER_OP_LESSOREQUALS
1:eac0369: 	 * @param orderableGetter	A generated method that returns the
1:eac0369: 	 *							Orderable to be compared with the column
1:eac0369: 	 * @param activation	The Activation that acts as the receiver for the
1:eac0369: 	 *						generated method
1:eac0369: 	 * @param orderedNulls	True means that null == null for the sake of
1:eac0369: 	 *						this Qualifier
1:eac0369: 	 * @param unknownRV	The value to return if the comparison between
1:eac0369: 	 *					the column and the Orderable value returns the
1:eac0369: 	 *					unknown truth value
1:6b50965: 	 * @param negateCompareResult	True means to negate the result of the comparison.
1:dbed020: 	 *					So, for example, to do a &gt; comparison, you would
1:eac0369: 	 *					pass ORDER_OP_LESSOREQUALS and set negate to true.
1:eac0369: 	 * @param variantType	The variantType for the qualifier's orderable.
1:eac0369: 	 *						(Determines whether or not to cache the value.)
1:eac0369: 	 *
1:eac0369: 	 * @return	A new Qualifier
1:eac0369: 	 */
1:eac0369: 	Qualifier getQualifier(int columnId,
1:eac0369: 						   int operator,
1:eac0369: 						   GeneratedMethod orderableGetter,
1:eac0369: 						   Activation activation,
1:eac0369: 						   boolean orderedNulls,
1:eac0369: 						   boolean unknownRV,
1:eac0369: 						   boolean negateCompareResult,
1:eac0369: 						   int variantType);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Create a new RowChanger for performing update and delete
1:eac0369: 	  operations based on full before and after rows.
1:eac0369: 
1:eac0369: 	  @param heapConglom	Conglomerate # for the heap
1:eac0369: 	  @param heapSCOCI The SCOCI for the heap.
1:eac0369: 	  @param heapDCOCI The DCOCI for the heap.
1:eac0369: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
1:eac0369: 	    positions in this array as local id's for indexes. To support updates,
1:eac0369: 	    only indexes that change need be included.
1:eac0369: 	  @param indexCIDS the conglomerateids for the table's idexes. 
1:eac0369: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
1:eac0369: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
1:eac0369: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param numberOfColumns Number of columns in a full row.
1:eac0369: 	  @param tc the transaction controller
2:eac0369: 	  @param streamStorableHeapColIds Column ids of stream storable
1:eac0369: 	         columns. (0 based, Only needed for sync. null if none or
1:eac0369: 			 not needed).
1:eac0369: 	  @param activation	The Activation.
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public RowChanger
1:eac0369: 	getRowChanger(long heapConglom,
1:eac0369: 				  StaticCompiledOpenConglomInfo heapSCOCI,
1:eac0369: 				  DynamicCompiledOpenConglomInfo heapDCOCI,
1:eac0369: 				  IndexRowGenerator[] irgs,
1:eac0369: 				  long[] indexCIDS,
1:eac0369: 				  StaticCompiledOpenConglomInfo[] indexSCOCIs,
1:eac0369: 				  DynamicCompiledOpenConglomInfo[] indexDCOCIs,
1:eac0369: 				  int numberOfColumns,
1:eac0369: 				  TransactionController tc,
1:eac0369: 				  int[] changedColumnIds,
1:eac0369: 				  int[] streamStorableHeapColIds,
1:eac0369: 				  Activation activation) throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	  Create a new RowChanger for doing insert update and delete
1:eac0369: 	  operations based on partial before and after. 
1:eac0369: 
1:eac0369: 	  @param heapConglom	Conglomerate # for the heap
1:eac0369: 	  @param heapSCOCI The SCOCI for the heap.
1:eac0369: 	  @param heapDCOCI The DCOCI for the heap.
1:eac0369: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
1:eac0369: 	    positions in this array as local id's for indexes. To support updates,
1:eac0369: 	    only indexes that change need be included.
1:eac0369: 	  @param indexCIDS the conglomerateids for the table's idexes. 
1:eac0369: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
1:eac0369: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
1:eac0369: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
1:eac0369: 	  @param numberOfColumns Number of columns in partial row.
1:eac0369: 	  @param tc the transaction controller 
1:eac0369: 	  @param changedColumnIds array of 1 based ints of columns
1:eac0369: 		to be updated.  Used by update only.
1:eac0369: 	  @param baseRowReadList the columns in the base row that were
1:eac0369: 		read (1 based)
1:dbed020: 	  @param baseRowReadMap baseRowReadMap[heapColId]-&gt;readRowColId
1:eac0369: 	         (0 based)
1:6b50965: 	  @param streamStorableColIds Column ids of stream storable
1:eac0369: 	         columns. (0 based, Only needed for sync. null if none or
1:eac0369: 			 not needed).
1:eac0369: 	  @param activation	The Activation.
1:eac0369: 
1:eac0369: 	  @exception StandardException		Thrown on error
1:eac0369: 	  */
1:eac0369: 	public RowChanger
1:eac0369: 	getRowChanger(long heapConglom,
1:eac0369: 				  StaticCompiledOpenConglomInfo heapSCOCI,
1:eac0369: 				  DynamicCompiledOpenConglomInfo heapDCOCI,
1:eac0369: 				  IndexRowGenerator[] irgs,
1:eac0369: 				  long[] indexCIDS,
1:eac0369: 				  StaticCompiledOpenConglomInfo[] indexSCOCIs,
1:eac0369: 				  DynamicCompiledOpenConglomInfo[] indexDCOCIs,
1:eac0369: 				  int numberOfColumns,
1:eac0369: 				  TransactionController tc,
1:eac0369: 				  int[] changedColumnIds,
1:eac0369: 				  FormatableBitSet	baseRowReadList,
1:eac0369: 				  int[] baseRowReadMap,
1:eac0369: 				  int[] streamStorableColIds,
1:eac0369: 				  Activation activation) throws StandardException;
1:eac0369: 
1:eac0369: 
1:eac0369: 	// Methods from old RowFactory interface
1:eac0369: 	/**
1:eac0369: 		This returns a new row that is storable but not indexable 
1:eac0369: 	 */
1:eac0369: 	public ExecRow getValueRow(int numColumns);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		This returns an indexable row
1:eac0369: 	 */
1:eac0369: 	public ExecIndexRow	getIndexableRow(int numColumns);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		This returns the value row as an indexable row 
1:eac0369: 	 */
1:eac0369: 	public ExecIndexRow	getIndexableRow(ExecRow valueRow);
1:eac0369: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:dbed020
/////////////////////////////////////////////////////////////////////////
1: 	 *					So, for example, to do a &gt; comparison, you would
/////////////////////////////////////////////////////////////////////////
1: 	  @param baseRowReadMap baseRowReadMap[heapColId]-&gt;readRowColId
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:48a9884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.execute.xplain.XPLAINFactoryIF;
/////////////////////////////////////////////////////////////////////////
1: 	 * Get the XPLAINFactory from this ExecutionFactory.
1: 	 *
1: 	 * @return  The xplain factory associated with this
1: 	 *      ExecutionContext
1: 	 *
1: 	 * @exception StandardException     Thrown on error
1: 	 */
1: 	XPLAINFactoryIF getXPLAINFactory()
1:                                 throws StandardException;
1: 	
1: 	
1:   	/**
1:   	 * Get the ExecutionFactory from this ExecutionContext.
1:   	 *
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:53ce71e
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Get the ResultSetStatisticsFactory from this ExecutionFactory.
1:      *
1:      * @return  The result set statistics factory associated with this
1:      *      ExecutionFactory
1:      *
1:      * @exception StandardException     Thrown on error
1:      */
1:     public ResultSetStatisticsFactory getResultSetStatisticsFactory()
1:         throws StandardException;
commit:624d867
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.execute.ExecutionFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:76addbc
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.execute;
1: 
1: import org.apache.derby.iapi.sql.Activation;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
1: import org.apache.derby.iapi.sql.Activation;
1: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
1: import org.apache.derby.iapi.sql.ResultDescription;
1: 
1: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.Qualifier;
1: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
1: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import java.util.Properties;
1: import org.apache.derby.iapi.services.io.FormatableBitSet;
1: 
1: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: 
1: import org.apache.derby.catalog.TypeDescriptor;
1: import org.apache.derby.catalog.UUID;
1: 
1: /**
1: 	This is the factory for creating a factories needed by
1: 	execution per connection, and the context to hold them.
1: 	<p>
1: 	There is expected to be one of these configured per database.
1: 	<p>
1: 	If a factory is needed outside of execution (say,
1: 	data dictionary or compilation), then it belongs in the
1: 	LanguageConnectionContext.
1: 
1: 	@see org.apache.derby.iapi.sql.conn.LanguageConnectionContext
0: 	@author ames
1:  */
1: public interface ExecutionFactory {
1: 
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 
1: 		/**
1: 		Module name for the monitor's module locating system.
1: 	 */
1: 	String MODULE = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
1: 
1: 	/**
1: 		Only one result set factory is needed for a database
1: 		in the system.
1: 		We require that an execution factory be configured for
1: 		each database. Each execution factory then needs to
1: 		know about the result set factory it is maintaining
1: 		for its database, so that it can provide it through
1: 		calls to this method.
1: 		So, we reuse the result set factory by making it 
1: 		available to each connection
1: 		in that connection's execution context.
1: 
1: 		@return the result set factory for this database.
1: 	 */
1: 	ResultSetFactory getResultSetFactory();
1: 
1: 	/**
1: 		We want an execution context so that we can push it onto
1: 		the stack.  We could instead require the implementation
1: 		push it onto the stack for us, but this way we know
1: 		which context object exactly was pushed onto the stack.
1: 
1: 		@param cm  the context manager
1: 	 */
1: 	ExecutionContext newExecutionContext(ContextManager cm);
1: 
1: 	/**
1: 	 * Create an execution time ResultColumnDescriptor from a 
1: 	 * compile time RCD.
1: 	 *
1: 	 * @param compileRCD	The compile time RCD.
1: 	 *
1: 	 * @return The execution time ResultColumnDescriptor
1: 	 */
1: 	ResultColumnDescriptor getResultColumnDescriptor(ResultColumnDescriptor compileRCD);
1: 
1: 	/**
1: 	 * Create a result description given parameters for it.
1: 	 */
1: 	ResultDescription getResultDescription(ResultColumnDescriptor[] columns,
1: 		String statementType);
1: 
1: 	/**
1: 	 * Get an array of ScanQualifiers for a scan.  ScanQualifiers are used
1: 	 * with the DataDictionary.
1: 	 *
1: 	 * @param numQualifiers	The number of ScanQualifiers to get.
1: 	 */
1: 	ScanQualifier[][] getScanQualifier(int numQualifiers);
1: 
1: 	/**
1: 	 * Release a ScanQualifier[] (back to the pool or free it).
1: 	 */
1: 
1: 	void releaseScanQualifier(ScanQualifier[][] scanQualifiers);
1: 
1: 	/**
1: 	 * Get a Qualifier to use with a scan of a conglomerate.
1: 	 *
1: 	 * @param columnId	The store id of the column to qualify
1: 	 * @param operator	One of Orderable.ORDER_OP_EQUALS,
1: 	 *					Orderable.ORDER_OP_LESSTHAN,
1: 	 *					or Orderable.ORDER_OP_LESSOREQUALS
1: 	 * @param orderableGetter	A generated method that returns the
1: 	 *							Orderable to be compared with the column
1: 	 * @param activation	The Activation that acts as the receiver for the
1: 	 *						generated method
1: 	 * @param orderedNulls	True means that null == null for the sake of
1: 	 *						this Qualifier
1: 	 * @param unknownRV	The value to return if the comparison between
1: 	 *					the column and the Orderable value returns the
1: 	 *					unknown truth value
0: 	 * @param negate	True means to negate the result of the comparison.
0: 	 *					So, for example, to do a > comparison, you would
1: 	 *					pass ORDER_OP_LESSOREQUALS and set negate to true.
1: 	 * @param variantType	The variantType for the qualifier's orderable.
1: 	 *						(Determines whether or not to cache the value.)
1: 	 *
1: 	 * @return	A new Qualifier
1: 	 */
1: 	Qualifier getQualifier(int columnId,
1: 						   int operator,
1: 						   GeneratedMethod orderableGetter,
1: 						   Activation activation,
1: 						   boolean orderedNulls,
1: 						   boolean unknownRV,
1: 						   boolean negateCompareResult,
1: 						   int variantType);
1: 
1: 	/**
1: 	  Create a new RowChanger for performing update and delete
1: 	  operations based on full before and after rows.
1: 
1: 	  @param heapConglom	Conglomerate # for the heap
1: 	  @param heapSCOCI The SCOCI for the heap.
1: 	  @param heapDCOCI The DCOCI for the heap.
1: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
1: 	    positions in this array as local id's for indexes. To support updates,
1: 	    only indexes that change need be included.
1: 	  @param indexCIDS the conglomerateids for the table's idexes. 
1: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
1: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
1: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
1: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
1: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
1: 	  @param numberOfColumns Number of columns in a full row.
1: 	  @param tc the transaction controller
1: 	  @param streamStorableHeapColIds Column ids of stream storable
1: 	         columns. (0 based, Only needed for sync. null if none or
1: 			 not needed).
1: 	  @param activation	The Activation.
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public RowChanger
1: 	getRowChanger(long heapConglom,
1: 				  StaticCompiledOpenConglomInfo heapSCOCI,
1: 				  DynamicCompiledOpenConglomInfo heapDCOCI,
1: 				  IndexRowGenerator[] irgs,
1: 				  long[] indexCIDS,
1: 				  StaticCompiledOpenConglomInfo[] indexSCOCIs,
1: 				  DynamicCompiledOpenConglomInfo[] indexDCOCIs,
1: 				  int numberOfColumns,
1: 				  TransactionController tc,
1: 				  int[] changedColumnIds,
1: 				  int[] streamStorableHeapColIds,
1: 				  Activation activation) throws StandardException;
1: 
1: 	/**
1: 	  Create a new RowChanger for doing insert update and delete
1: 	  operations based on partial before and after. 
1: 
1: 	  @param heapConglom	Conglomerate # for the heap
1: 	  @param heapSCOCI The SCOCI for the heap.
1: 	  @param heapDCOCI The DCOCI for the heap.
1: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
1: 	    positions in this array as local id's for indexes. To support updates,
1: 	    only indexes that change need be included.
1: 	  @param indexCIDS the conglomerateids for the table's idexes. 
1: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
1: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
1: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
1: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
1: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
1: 	  @param numberOfColumns Number of columns in partial row.
1: 	  @param tc the transaction controller 
1: 	  @param changedColumnIds array of 1 based ints of columns
1: 		to be updated.  Used by update only.
1: 	  @param baseRowReadList the columns in the base row that were
1: 		read (1 based)
0: 	  @param baseRowReadMap baseRowReadMap[heapColId]->readRowColId
1: 	         (0 based)
1: 	  @param streamStorableHeapColIds Column ids of stream storable
1: 	         columns. (0 based, Only needed for sync. null if none or
1: 			 not needed).
1: 	  @param activation	The Activation.
1: 
1: 	  @exception StandardException		Thrown on error
1: 	  */
1: 	public RowChanger
1: 	getRowChanger(long heapConglom,
1: 				  StaticCompiledOpenConglomInfo heapSCOCI,
1: 				  DynamicCompiledOpenConglomInfo heapDCOCI,
1: 				  IndexRowGenerator[] irgs,
1: 				  long[] indexCIDS,
1: 				  StaticCompiledOpenConglomInfo[] indexSCOCIs,
1: 				  DynamicCompiledOpenConglomInfo[] indexDCOCIs,
1: 				  int numberOfColumns,
1: 				  TransactionController tc,
1: 				  int[] changedColumnIds,
1: 				  FormatableBitSet	baseRowReadList,
1: 				  int[] baseRowReadMap,
1: 				  int[] streamStorableColIds,
1: 				  Activation activation) throws StandardException;
1: 
1: 
1: 	// Methods from old RowFactory interface
1: 	/**
1: 		This returns a new row that is storable but not indexable 
1: 	 */
1: 	public ExecRow getValueRow(int numColumns);
1: 
1: 	/**
1: 		This returns an indexable row
1: 	 */
1: 	public ExecIndexRow	getIndexableRow(int numColumns);
1: 
1: 	/**
1: 		This returns the value row as an indexable row 
1: 	 */
1: 	public ExecIndexRow	getIndexableRow(ExecRow valueRow);
1: 
1: 	/**
0: 		This returns the value row as an indexable row, reusing the passed
0: 		in ExecIndexRow if non-null.
1: 	 */
0: 	//public ExecIndexRow	getIndexableRow(ExecRow valueRow, ExecIndexRow sourceExecIndexRow);
1: 
1: 
1:    /**
0: 	 Packages up a clump of constants which the Plugin uses at execute()
0: 	 time for COPY PUBLICATION.
1:     */
0:     public	Object	getJdbcCopyConstants
0: 	(
0: 		int[][]				paramReferences,
0: 		TypeDescriptor[][]	columnTypes,
0: 		int[][]				publishedTableSchemaCounts
0:     );
1: 
1:    /**
0: 	 Packages up a clump of constants which the Plugin uses at execute()
0: 	 time for CREATE PUBLICATION.
1:     */
0:     public	Object	getJdbcCreateConstants
0: 	(
0: 		UUID[]				publishedJarFileIDs,
0: 		Object				publishedItems,
0: 		int[][]				tableSchemaCounts
0:     );
1: 
1: }
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2dd2d11
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param negateCompareResult	True means to negate the result of the comparison.
/////////////////////////////////////////////////////////////////////////
1: 	  @param streamStorableColIds Column ids of stream storable
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.execute
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.execute;
0: 
0: import org.apache.derby.iapi.sql.Activation;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.ResultColumnDescriptor;
0: import org.apache.derby.iapi.sql.ResultDescription;
0: 
0: import org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.Qualifier;
0: import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
0: import org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import java.util.Properties;
0: import org.apache.derby.iapi.services.io.FormatableBitSet;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: 
0: import org.apache.derby.catalog.TypeDescriptor;
0: import org.apache.derby.catalog.UUID;
0: 
0: /**
0: 	This is the factory for creating a factories needed by
0: 	execution per connection, and the context to hold them.
0: 	<p>
0: 	There is expected to be one of these configured per database.
0: 	<p>
0: 	If a factory is needed outside of execution (say,
0: 	data dictionary or compilation), then it belongs in the
0: 	LanguageConnectionContext.
0: 
0: 	@see org.apache.derby.iapi.sql.conn.LanguageConnectionContext
0: 	@author ames
0:  */
0: public interface ExecutionFactory {
0: 
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 
0: 		/**
0: 		Module name for the monitor's module locating system.
0: 	 */
0: 	String MODULE = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
0: 
0: 	/**
0: 		Only one result set factory is needed for a database
0: 		in the system.
0: 		We require that an execution factory be configured for
0: 		each database. Each execution factory then needs to
0: 		know about the result set factory it is maintaining
0: 		for its database, so that it can provide it through
0: 		calls to this method.
0: 		So, we reuse the result set factory by making it 
0: 		available to each connection
0: 		in that connection's execution context.
0: 
0: 		@return the result set factory for this database.
0: 	 */
0: 	ResultSetFactory getResultSetFactory();
0: 
0: 	/**
0: 		We want an execution context so that we can push it onto
0: 		the stack.  We could instead require the implementation
0: 		push it onto the stack for us, but this way we know
0: 		which context object exactly was pushed onto the stack.
0: 
0: 		@param cm  the context manager
0: 	 */
0: 	ExecutionContext newExecutionContext(ContextManager cm);
0: 
0: 	/**
0: 	 * Create an execution time ResultColumnDescriptor from a 
0: 	 * compile time RCD.
0: 	 *
0: 	 * @param compileRCD	The compile time RCD.
0: 	 *
0: 	 * @return The execution time ResultColumnDescriptor
0: 	 */
0: 	ResultColumnDescriptor getResultColumnDescriptor(ResultColumnDescriptor compileRCD);
0: 
0: 	/**
0: 	 * Create a result description given parameters for it.
0: 	 */
0: 	ResultDescription getResultDescription(ResultColumnDescriptor[] columns,
0: 		String statementType);
0: 
0: 	/**
0: 	 * Get an array of ScanQualifiers for a scan.  ScanQualifiers are used
0: 	 * with the DataDictionary.
0: 	 *
0: 	 * @param numQualifiers	The number of ScanQualifiers to get.
0: 	 */
0: 	ScanQualifier[][] getScanQualifier(int numQualifiers);
0: 
0: 	/**
0: 	 * Release a ScanQualifier[] (back to the pool or free it).
0: 	 */
0: 
0: 	void releaseScanQualifier(ScanQualifier[][] scanQualifiers);
0: 
0: 	/**
0: 	 * Get a Qualifier to use with a scan of a conglomerate.
0: 	 *
0: 	 * @param columnId	The store id of the column to qualify
0: 	 * @param operator	One of Orderable.ORDER_OP_EQUALS,
0: 	 *					Orderable.ORDER_OP_LESSTHAN,
0: 	 *					or Orderable.ORDER_OP_LESSOREQUALS
0: 	 * @param orderableGetter	A generated method that returns the
0: 	 *							Orderable to be compared with the column
0: 	 * @param activation	The Activation that acts as the receiver for the
0: 	 *						generated method
0: 	 * @param orderedNulls	True means that null == null for the sake of
0: 	 *						this Qualifier
0: 	 * @param unknownRV	The value to return if the comparison between
0: 	 *					the column and the Orderable value returns the
0: 	 *					unknown truth value
0: 	 * @param negate	True means to negate the result of the comparison.
0: 	 *					So, for example, to do a > comparison, you would
0: 	 *					pass ORDER_OP_LESSOREQUALS and set negate to true.
0: 	 * @param variantType	The variantType for the qualifier's orderable.
0: 	 *						(Determines whether or not to cache the value.)
0: 	 *
0: 	 * @return	A new Qualifier
0: 	 */
0: 	Qualifier getQualifier(int columnId,
0: 						   int operator,
0: 						   GeneratedMethod orderableGetter,
0: 						   Activation activation,
0: 						   boolean orderedNulls,
0: 						   boolean unknownRV,
0: 						   boolean negateCompareResult,
0: 						   int variantType);
0: 
0: 	/**
0: 	  Create a new RowChanger for performing update and delete
0: 	  operations based on full before and after rows.
0: 
0: 	  @param heapConglom	Conglomerate # for the heap
0: 	  @param heapSCOCI The SCOCI for the heap.
0: 	  @param heapDCOCI The DCOCI for the heap.
0: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
0: 	    positions in this array as local id's for indexes. To support updates,
0: 	    only indexes that change need be included.
0: 	  @param indexCIDS the conglomerateids for the table's idexes. 
0: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
0: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
0: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
0: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
0: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
0: 	  @param numberOfColumns Number of columns in a full row.
0: 	  @param tc the transaction controller
0: 	  @param streamStorableHeapColIds Column ids of stream storable
0: 	         columns. (0 based, Only needed for sync. null if none or
0: 			 not needed).
0: 	  @param activation	The Activation.
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public RowChanger
0: 	getRowChanger(long heapConglom,
0: 				  StaticCompiledOpenConglomInfo heapSCOCI,
0: 				  DynamicCompiledOpenConglomInfo heapDCOCI,
0: 				  IndexRowGenerator[] irgs,
0: 				  long[] indexCIDS,
0: 				  StaticCompiledOpenConglomInfo[] indexSCOCIs,
0: 				  DynamicCompiledOpenConglomInfo[] indexDCOCIs,
0: 				  int numberOfColumns,
0: 				  TransactionController tc,
0: 				  int[] changedColumnIds,
0: 				  int[] streamStorableHeapColIds,
0: 				  Activation activation) throws StandardException;
0: 
0: 	/**
0: 	  Create a new RowChanger for doing insert update and delete
0: 	  operations based on partial before and after. 
0: 
0: 	  @param heapConglom	Conglomerate # for the heap
0: 	  @param heapSCOCI The SCOCI for the heap.
0: 	  @param heapDCOCI The DCOCI for the heap.
0: 	  @param irgs the IndexRowGenerators for the table's indexes. We use
0: 	    positions in this array as local id's for indexes. To support updates,
0: 	    only indexes that change need be included.
0: 	  @param indexCIDS the conglomerateids for the table's idexes. 
0: 	  	indexCIDS[ix] corresponds to the same index as irgs[ix].
0: 	  @param indexSCOCIs the SCOCIs for the table's idexes. 
0: 	  	indexSCOCIs[ix] corresponds to the same index as irgs[ix].
0: 	  @param indexDCOCIs the DCOCIs for the table's idexes. 
0: 	  	indexDCOCIs[ix] corresponds to the same index as irgs[ix].
0: 	  @param numberOfColumns Number of columns in partial row.
0: 	  @param tc the transaction controller 
0: 	  @param changedColumnIds array of 1 based ints of columns
0: 		to be updated.  Used by update only.
0: 	  @param baseRowReadList the columns in the base row that were
0: 		read (1 based)
0: 	  @param baseRowReadMap baseRowReadMap[heapColId]->readRowColId
0: 	         (0 based)
0: 	  @param streamStorableHeapColIds Column ids of stream storable
0: 	         columns. (0 based, Only needed for sync. null if none or
0: 			 not needed).
0: 	  @param activation	The Activation.
0: 
0: 	  @exception StandardException		Thrown on error
0: 	  */
0: 	public RowChanger
0: 	getRowChanger(long heapConglom,
0: 				  StaticCompiledOpenConglomInfo heapSCOCI,
0: 				  DynamicCompiledOpenConglomInfo heapDCOCI,
0: 				  IndexRowGenerator[] irgs,
0: 				  long[] indexCIDS,
0: 				  StaticCompiledOpenConglomInfo[] indexSCOCIs,
0: 				  DynamicCompiledOpenConglomInfo[] indexDCOCIs,
0: 				  int numberOfColumns,
0: 				  TransactionController tc,
0: 				  int[] changedColumnIds,
0: 				  FormatableBitSet	baseRowReadList,
0: 				  int[] baseRowReadMap,
0: 				  int[] streamStorableColIds,
0: 				  Activation activation) throws StandardException;
0: 
0: 
0: 	// Methods from old RowFactory interface
0: 	/**
0: 		This returns a new row that is storable but not indexable 
0: 	 */
0: 	public ExecRow getValueRow(int numColumns);
0: 
0: 	/**
0: 		This returns an indexable row
0: 	 */
0: 	public ExecIndexRow	getIndexableRow(int numColumns);
0: 
0: 	/**
0: 		This returns the value row as an indexable row 
0: 	 */
0: 	public ExecIndexRow	getIndexableRow(ExecRow valueRow);
0: 
0: 	/**
0: 		This returns the value row as an indexable row, reusing the passed
0: 		in ExecIndexRow if non-null.
0: 	 */
0: 	//public ExecIndexRow	getIndexableRow(ExecRow valueRow, ExecIndexRow sourceExecIndexRow);
0: 
0: 
0:    /**
0: 	 Packages up a clump of constants which the Plugin uses at execute()
0: 	 time for COPY PUBLICATION.
0:     */
0:     public	Object	getJdbcCopyConstants
0: 	(
0: 		int[][]				paramReferences,
0: 		TypeDescriptor[][]	columnTypes,
0: 		int[][]				publishedTableSchemaCounts
0:     );
0: 
0:    /**
0: 	 Packages up a clump of constants which the Plugin uses at execute()
0: 	 time for CREATE PUBLICATION.
0:     */
0:     public	Object	getJdbcCreateConstants
0: 	(
0: 		UUID[]				publishedJarFileIDs,
0: 		Object				publishedItems,
0: 		int[][]				tableSchemaCounts
0:     );
0: 
0: }
============================================================================