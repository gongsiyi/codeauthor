1:aaea357: /*
3:aaea357: 
1:aaea357:    Derby - Class org.apache.derbyTesting.functionTests.store.MaxLogNumber
1:aaea357: 
1:dff95a1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:dff95a1:    contributor license agreements.  See the NOTICE file distributed with
1:dff95a1:    this work for additional information regarding copyright ownership.
1:dff95a1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:dff95a1:    (the "License"); you may not use this file except in compliance with
1:dff95a1:    the License.  You may obtain a copy of the License at
1:aaea357: 
1:aaea357:       http://www.apache.org/licenses/LICENSE-2.0
1:aaea357: 
1:aaea357:    Unless required by applicable law or agreed to in writing, software
1:aaea357:    distributed under the License is distributed on an "AS IS" BASIS,
1:aaea357:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aaea357:    See the License for the specific language governing permissions and
1:aaea357:    limitations under the License.
1:aaea357: 
1:aaea357:  */
1:aaea357: 
1:aaea357: package org.apache.derbyTesting.functionTests.tests.store;
1:4c5c16b: import java.security.AccessController;
1:aaea357: import java.sql.Connection;
1:aaea357: import java.sql.SQLException;
1:aaea357: import org.apache.derby.tools.ij;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:aaea357: 
1:aaea357: /*
1:aaea357:  * This class  tests recovery logic with large log file id's and  the error
1:aaea357:  * handling logic when Max possible log file limit is reached. MaxLogNumber.java
1:aaea357:  * test does the setup, so it should be run before this test. 
1:aaea357:  * In Non debug mode, this tests just acts as a plain log recovery test.
1:aaea357:  *
1:aaea357:  * @version 1.0
1:aaea357:  * @see MaxLogNumber
1:aaea357:  */
1:aaea357: 
1:aaea357: public class MaxLogNumberRecovery extends MaxLogNumber {
1:aaea357: 
1:aaea357: 	MaxLogNumberRecovery() {
1:aaea357: 		super();
1:aaea357: 	}
1:aaea357: 	
1:aaea357: 	private void runTest(Connection conn) throws SQLException {
1:aaea357: 		logMessage("Begin MaxLogNumberRecovery Test");
1:aaea357: 		verifyData(conn, 100);
1:aaea357: 		boolean hitMaxLogLimitError = false;
1:aaea357: 		try{
1:aaea357: 			insert(conn, 110, COMMIT, 11);
1:aaea357: 			update(conn, 110, ROLLBACK, 5);
1:aaea357: 			update(conn, 110, NOACTION, 5);
1:aaea357: 			verifyData(conn, 210);
1:aaea357: 			if (SanityManager.DEBUG)
1:aaea357: 			{
1:aaea357: 				// do lot of inserts in debug mode , 
1:aaea357: 				// so that actuall reach the max log file number 
1:aaea357: 				// limit
1:aaea357: 				insert(conn, 11000, COMMIT, 5);
1:aaea357: 			}
1:aaea357: 		} catch(SQLException se) {
1:aaea357: 			
1:aaea357: 			SQLException ose = se;
1:aaea357: 			while (se != null) {
1:aaea357:       			if ("XSLAK".equals(se.getSQLState())) {
1:aaea357: 					hitMaxLogLimitError = true;
1:aaea357: 					break;
1:aaea357: 				}
1:aaea357: 				se = se.getNextException();
1:aaea357: 			}
1:aaea357: 			if(!hitMaxLogLimitError)
1:aaea357: 				throw ose;
1:aaea357: 		}
1:aaea357: 
1:aaea357: 		if (SanityManager.DEBUG)
1:aaea357: 		{
1:aaea357: 			// In the debug build mode , this test should hit the max log limit while
1:aaea357: 			// doing above DML. 
1:aaea357: 			if(!hitMaxLogLimitError)
1:aaea357: 				logMessage("Expected: ERROR XSLAK:" +
1:aaea357: 						   "Database has exceeded largest log file" +
1:aaea357: 						   "number 8,589,934,591.");
1:aaea357:         }
1:aaea357: 
1:aaea357: 		logMessage("End MaxLogNumberRecovery Test");
1:aaea357: 	}
1:4c5c16b: 
1:aaea357: 
1:4c5c16b:     /**
1:4c5c16b:      * Set system property
1:4c5c16b:      *
1:4c5c16b:      * @param name name of the property
1:4c5c16b:      * @param value value of the property
1:4c5c16b:      */
1:4c5c16b:     private static void setSystemProperty(final String name, 
1:4c5c16b:                         final String value)
1:4c5c16b:     {
1:4c5c16b:     
1:4c5c16b:     AccessController.doPrivileged
1:c393694:         (new java.security.PrivilegedAction<Void>(){
1:4c5c16b:             
1:c393694:             public Void run(){
1:4c5c16b:             System.setProperty( name, value);
1:4c5c16b:             return null;
1:4c5c16b:             
1:4c5c16b:             }
1:4c5c16b:             
1:4c5c16b:         }
1:4c5c16b:          );
1:4c5c16b:     
1:4c5c16b:     }
1:aaea357: 	public static void main(String[] argv) throws Throwable {
1:aaea357: 		
1:aaea357:         MaxLogNumberRecovery test = new MaxLogNumberRecovery();
1:aaea357:    		ij.getPropertyArg(argv); 
1:4c5c16b:         //DERBY -4856 will cause XSLAK create diagnostic information set the
1:4c5c16b:         //extenedDiagSeverityLevel higher so no thread dump or diagnostic info
1:4c5c16b:         setSystemProperty("derby.stream.error.extendedDiagSeverityLevel","50000");
1:aaea357:         Connection conn = ij.startJBMS();
1:aaea357:         conn.setAutoCommit(false);
1:aaea357: 
1:aaea357:         try {
1:aaea357:             test.runTest(conn);
1:aaea357:         }
1:aaea357:         catch (SQLException sqle) {
1:aaea357: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:aaea357:                 System.out, sqle);
1:aaea357: 			sqle.printStackTrace(System.out);
1:aaea357: 		}
1:aaea357:     }
1:aaea357: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:c393694
/////////////////////////////////////////////////////////////////////////
1:         (new java.security.PrivilegedAction<Void>(){
1:             public Void run(){
author:Lily Wei
-------------------------------------------------------------------------------
commit:4c5c16b
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Set system property
1:      *
1:      * @param name name of the property
1:      * @param value value of the property
1:      */
1:     private static void setSystemProperty(final String name, 
1:                         final String value)
1:     {
1:     
1:     AccessController.doPrivileged
0:         (new java.security.PrivilegedAction(){
1:             
0:             public Object run(){
1:             System.setProperty( name, value);
1:             return null;
1:             
1:             }
1:             
1:         }
1:          );
1:     
1:     }
1:         //DERBY -4856 will cause XSLAK create diagnostic information set the
1:         //extenedDiagSeverityLevel higher so no thread dump or diagnostic info
1:         setSystemProperty("derby.stream.error.extendedDiagSeverityLevel","50000");
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:dff95a1
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyTesting.functionTests.store.MaxLogNumber
1: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyTesting.functionTests.tests.store;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import org.apache.derby.tools.ij;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
1: /*
1:  * This class  tests recovery logic with large log file id's and  the error
1:  * handling logic when Max possible log file limit is reached. MaxLogNumber.java
1:  * test does the setup, so it should be run before this test. 
1:  * In Non debug mode, this tests just acts as a plain log recovery test.
1:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
1:  * @version 1.0
1:  * @see MaxLogNumber
1:  */
1: 
1: public class MaxLogNumberRecovery extends MaxLogNumber {
1: 
1: 	MaxLogNumberRecovery() {
1: 		super();
1: 	}
1: 	
1: 	private void runTest(Connection conn) throws SQLException {
1: 		logMessage("Begin MaxLogNumberRecovery Test");
1: 		verifyData(conn, 100);
1: 		boolean hitMaxLogLimitError = false;
1: 		try{
1: 			insert(conn, 110, COMMIT, 11);
1: 			update(conn, 110, ROLLBACK, 5);
1: 			update(conn, 110, NOACTION, 5);
1: 			verifyData(conn, 210);
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				// do lot of inserts in debug mode , 
1: 				// so that actuall reach the max log file number 
1: 				// limit
1: 				insert(conn, 11000, COMMIT, 5);
1: 			}
1: 		} catch(SQLException se) {
1: 			
1: 			SQLException ose = se;
1: 			while (se != null) {
1:       			if ("XSLAK".equals(se.getSQLState())) {
1: 					hitMaxLogLimitError = true;
1: 					break;
1: 				}
1: 				se = se.getNextException();
1: 			}
1: 			if(!hitMaxLogLimitError)
1: 				throw ose;
1: 		}
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			// In the debug build mode , this test should hit the max log limit while
1: 			// doing above DML. 
1: 			if(!hitMaxLogLimitError)
1: 				logMessage("Expected: ERROR XSLAK:" +
1: 						   "Database has exceeded largest log file" +
1: 						   "number 8,589,934,591.");
1:         }
1: 
1: 		logMessage("End MaxLogNumberRecovery Test");
1: 	}
1: 
1: 	
1: 	public static void main(String[] argv) throws Throwable {
1: 		
1:         MaxLogNumberRecovery test = new MaxLogNumberRecovery();
1:    		ij.getPropertyArg(argv); 
1:         Connection conn = ij.startJBMS();
1:         conn.setAutoCommit(false);
1: 
1:         try {
1:             test.runTest(conn);
1:         }
1:         catch (SQLException sqle) {
1: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
1:                 System.out, sqle);
1: 			sqle.printStackTrace(System.out);
1: 		}
1:     }
1: }
author:Mike Matrigali
-------------------------------------------------------------------------------
commit:8fbfcc4
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Derby - Class org.apache.derbyTesting.functionTests.store.MaxLogNumber
0: 
0:    Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
0: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
0: 
0:       http://www.apache.org/licenses/LICENSE-2.0
0: 
0:    Unless required by applicable law or agreed to in writing, software
0:    distributed under the License is distributed on an "AS IS" BASIS,
0:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:    See the License for the specific language governing permissions and
0:    limitations under the License.
0: 
0:  */
0: 
0: package org.apache.derbyTesting.functionTests.tests.store;
0: import java.sql.Connection;
0: import java.sql.SQLException;
0: import org.apache.derby.tools.ij;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: /*
0:  * This class  tests recovery logic with large log file id's and  the error
0:  * handling logic when Max possible log file limit is reached. MaxLogNumber.java
0:  * test does the setup, so it should be run before this test. 
0:  * In Non debug mode, this tests just acts as a plain log recovery test.
0:  *
0:  * @author <a href="mailto:suresh.thalamati@gmail.com">Suresh Thalamati</a>
0:  * @version 1.0
0:  * @see MaxLogNumber
0:  */
0: 
0: public class MaxLogNumberRecovery extends MaxLogNumber {
0: 
0: 	MaxLogNumberRecovery() {
0: 		super();
0: 	}
0: 	
0: 	private void runTest(Connection conn) throws SQLException {
0: 		logMessage("Begin MaxLogNumberRecovery Test");
0: 		verifyData(conn, 100);
0: 		boolean hitMaxLogLimitError = false;
0: 		try{
0: 			insert(conn, 110, COMMIT, 11);
0: 			update(conn, 110, ROLLBACK, 5);
0: 			update(conn, 110, NOACTION, 5);
0: 			verifyData(conn, 210);
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				// do lot of inserts in debug mode , 
0: 				// so that actuall reach the max log file number 
0: 				// limit
0: 				insert(conn, 11000, COMMIT, 5);
0: 			}
0: 		} catch(SQLException se) {
0: 			
0: 			SQLException ose = se;
0: 			while (se != null) {
0:       			if ("XSLAK".equals(se.getSQLState())) {
0: 					hitMaxLogLimitError = true;
0: 					break;
0: 				}
0: 				se = se.getNextException();
0: 			}
0: 			if(!hitMaxLogLimitError)
0: 				throw ose;
0: 		}
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			// In the debug build mode , this test should hit the max log limit while
0: 			// doing above DML. 
0: 			if(!hitMaxLogLimitError)
0: 				logMessage("Expected: ERROR XSLAK:" +
0: 						   "Database has exceeded largest log file" +
0: 						   "number 8,589,934,591.");
0:         }
0: 
0: 		logMessage("End MaxLogNumberRecovery Test");
0: 	}
0: 
0: 	
0: 	public static void main(String[] argv) throws Throwable {
0: 		
0:         MaxLogNumberRecovery test = new MaxLogNumberRecovery();
0:    		ij.getPropertyArg(argv); 
0:         Connection conn = ij.startJBMS();
0:         conn.setAutoCommit(false);
0: 
0:         try {
0:             test.runTest(conn);
0:         }
0:         catch (SQLException sqle) {
0: 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(
0:                 System.out, sqle);
0: 			sqle.printStackTrace(System.out);
0: 		}
0:     }
0: }
============================================================================