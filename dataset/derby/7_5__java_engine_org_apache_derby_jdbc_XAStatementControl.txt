1:eac0369: /*
4:eac0369: 
1:345de35:    Derby - Class org.apache.derby.jdbc.XAStatementControl
1:345de35: 
1:2f36947:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2f36947:    contributor license agreements.  See the NOTICE file distributed with
1:2f36947:    this work for additional information regarding copyright ownership.
1:2f36947:    The ASF licenses this file to You under the Apache License, Version 2.0
1:2f36947:    (the "License"); you may not use this file except in compliance with
1:2f36947:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
1:345de35: 
3:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.jdbc;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.jdbc.BrokeredConnection;
1:eac0369: import org.apache.derby.iapi.jdbc.BrokeredStatementControl;
1:eac0369: import org.apache.derby.iapi.jdbc.BrokeredStatement;
1:eac0369: import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
1:eac0369: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
1:63d26f5: import org.apache.derby.impl.jdbc.EmbedConnection;
1:e65be5b: import org.apache.derby.impl.jdbc.EmbedResultSet;
1:eac0369: import org.apache.derby.impl.jdbc.EmbedStatement;
1:eac0369: import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
1:eac0369: 
1:eac0369: import java.sql.*;
1:eac0369: 
1:5b78c4e: /**
1:eac0369: 	The Statement returned by an Connection returned by a XAConnection
1:eac0369: 	needs to float across the underlying real connections. We do this by implementing
1:eac0369: 	a wrapper statement.
1:e65be5b: */
1:eac0369: final class XAStatementControl implements BrokeredStatementControl {
1:eac0369: 
3:eac0369: 	/**
1:eac0369: 	*/
1:e916164: 	private final EmbedXAConnection	xaConnection;
1:eac0369: 	private final BrokeredConnection	applicationConnection;
1:eac0369: 	BrokeredStatement		applicationStatement;
1:63d26f5: 	private EmbedConnection	realConnection;
1:eac0369: 	private Statement			realStatement;
1:eac0369: 	private PreparedStatement	realPreparedStatement;
1:eac0369: 	private CallableStatement	realCallableStatement;
1:eac0369: 
1:e916164: 	private XAStatementControl(EmbedXAConnection xaConnection) {
1:eac0369: 		this.xaConnection = xaConnection;
1:eac0369: 		this.realConnection = xaConnection.realConnection;
1:eac0369: 		this.applicationConnection = xaConnection.currentConnectionHandle;
3:eac0369: 	}
1:ec60014: 
1:e916164: 	XAStatementControl(EmbedXAConnection xaConnection, 
1:3e67fd5:                                 Statement realStatement) throws SQLException {
1:eac0369: 		this(xaConnection);
1:eac0369: 		this.realStatement = realStatement;
1:eac0369: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this);
1:175a740:         
1:175a740:         ((EmbedStatement) realStatement).setApplicationStatement(
1:175a740:                 applicationStatement);
1:eac0369: 	}
1:e916164: 	XAStatementControl(EmbedXAConnection xaConnection, 
1:3e67fd5:                 PreparedStatement realPreparedStatement, 
1:3e67fd5:                 String sql, Object generatedKeys) throws SQLException {            
1:eac0369: 		this(xaConnection);
1:eac0369: 		this.realPreparedStatement = realPreparedStatement;
1:eac0369: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this, sql, generatedKeys);
1:175a740:         ((EmbedStatement) realPreparedStatement).setApplicationStatement(
1:175a740:                 applicationStatement);
1:eac0369: 	}
1:e916164: 	XAStatementControl(EmbedXAConnection xaConnection, 
1:3e67fd5:                 CallableStatement realCallableStatement, 
1:3e67fd5:                 String sql) throws SQLException {
1:eac0369: 		this(xaConnection);
1:eac0369: 		this.realCallableStatement = realCallableStatement;
1:eac0369: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this, sql);
1:175a740:         ((EmbedStatement) realCallableStatement).setApplicationStatement(
1:175a740:                 applicationStatement);
1:eac0369: 	}
1:eac0369: 
1:ec60014: 	/**
1:5b78c4e: 	 * Close the realStatement within this control. 
1:ec60014: 	 */
1:5b78c4e: 	public void closeRealStatement() throws SQLException {
1:5b78c4e: 		realStatement.close();
1:5b78c4e: 	}
1:5b78c4e: 	
1:5b78c4e: 	/**
1:5b78c4e: 	 * Close the realCallableStatement within this control. 
1:5b78c4e: 	 */
1:5b78c4e: 	public void closeRealCallableStatement() throws SQLException {
1:5b78c4e: 		realCallableStatement.close();
1:5b78c4e: 	}
1:5b78c4e: 	
1:5b78c4e: 	/**
1:5b78c4e: 	 * Close the realPreparedStatement within this control. 
1:5b78c4e: 	 */
1:5b78c4e: 	public void closeRealPreparedStatement() throws SQLException {
1:5b78c4e: 		realPreparedStatement.close();
1:5b78c4e: 	}
1:5b78c4e: 	
1:eac0369: 	public Statement getRealStatement() throws SQLException {
1:eac0369: 
1:eac0369: 		// 
1:eac0369: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
1:eac0369: 
1:eac0369: 			// Application connection is the same.
1:eac0369: 			if (realConnection == xaConnection.realConnection)
1:eac0369: 				return realStatement;
1:eac0369: 
1:eac0369: 			// If we switched back to a local connection, and the first access is through
1:eac0369: 			// a non-connection object (e.g. statement then realConnection will be null)
1:eac0369: 			if (xaConnection.realConnection == null) {
1:eac0369: 				// force the connection
1:eac0369: 				xaConnection.getRealConnection();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// underlying connection has changed.
1:eac0369: 			// create new Statement
1:eac0369: 			Statement newStatement = applicationStatement.createDuplicateStatement(xaConnection.realConnection, realStatement);
1:eac0369: 			((EmbedStatement) realStatement).transferBatch((EmbedStatement) newStatement);
1:175a740:  
1:eac0369: 			try {
1:eac0369: 				realStatement.close();
1:eac0369: 			} catch (SQLException sqle) {
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			realStatement = newStatement;
1:eac0369: 			realConnection = xaConnection.realConnection;
1:175a740:             ((EmbedStatement) realStatement).setApplicationStatement(
1:175a740:                     applicationStatement);
1:eac0369: 		}
1:eac0369: 		else {
1:eac0369: 			// application connection is different, therefore the outer application
1:eac0369: 			// statement is closed, so just return the realStatement. It should be
1:eac0369: 			// closed by virtue of its application connection being closed.
1:eac0369: 		}
1:eac0369: 		return realStatement;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public PreparedStatement getRealPreparedStatement() throws SQLException {
1:eac0369: 		// 
1:eac0369: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
1:eac0369: 			// Application connection is the same.
1:eac0369: 			if (realConnection == xaConnection.realConnection)
1:eac0369: 				return realPreparedStatement;
1:eac0369: 
1:eac0369: 			// If we switched back to a local connection, and the first access is through
1:eac0369: 			// a non-connection object (e.g. statement then realConnection will be null)
1:eac0369: 			if (xaConnection.realConnection == null) {
1:eac0369: 				// force the connection
1:eac0369: 				xaConnection.getRealConnection();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// underlying connection has changed.
1:eac0369: 			// create new PreparedStatement
1:eac0369: 			PreparedStatement newPreparedStatement =
1:eac0369: 				((BrokeredPreparedStatement) applicationStatement).createDuplicateStatement(xaConnection.realConnection, realPreparedStatement);
1:eac0369: 
1:eac0369: 
1:eac0369: 			// ((EmbedStatement) realPreparedStatement).transferBatch((EmbedStatement) newPreparedStatement);
1:eac0369: 			((EmbedPreparedStatement) realPreparedStatement).transferParameters((EmbedPreparedStatement) newPreparedStatement);
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				realPreparedStatement.close();
1:eac0369: 			} catch (SQLException sqle) {
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			realPreparedStatement = newPreparedStatement;
1:eac0369: 			realConnection = xaConnection.realConnection;
1:175a740:             ((EmbedStatement) realPreparedStatement).setApplicationStatement(
1:175a740:                         applicationStatement);
1:eac0369: 		}
1:eac0369: 		else {
1:eac0369: 			// application connection is different, therefore the outer application
1:eac0369: 			// statement is closed, so just return the realStatement. It should be
1:eac0369: 			// closed by virtue of its application connection being closed.
1:eac0369: 		}
1:eac0369: 		return realPreparedStatement;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	public CallableStatement getRealCallableStatement() throws SQLException {
1:eac0369: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
1:eac0369: 			// Application connection is the same.
1:eac0369: 			if (realConnection == xaConnection.realConnection)
1:eac0369: 				return realCallableStatement;
1:eac0369: 
1:eac0369: 			// If we switched back to a local connection, and the first access is through
1:eac0369: 			// a non-connection object (e.g. statement then realConnection will be null)
1:eac0369: 			if (xaConnection.realConnection == null) {
1:eac0369: 				// force the connection
1:eac0369: 				xaConnection.getRealConnection();
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			// underlying connection has changed.
1:eac0369: 			// create new PreparedStatement
1:eac0369: 			CallableStatement newCallableStatement =
1:eac0369: 				((BrokeredCallableStatement) applicationStatement).createDuplicateStatement(xaConnection.realConnection, realCallableStatement);
1:eac0369: 
1:eac0369: 			((EmbedStatement) realCallableStatement).transferBatch((EmbedStatement) newCallableStatement);
1:eac0369: 
1:eac0369: 			try {
1:eac0369: 				realCallableStatement.close();
1:eac0369: 			} catch (SQLException sqle) {
1:eac0369: 			}
1:eac0369: 
1:eac0369: 			realCallableStatement = newCallableStatement;
1:eac0369: 			realConnection = xaConnection.realConnection;
1:175a740:             ((EmbedStatement) realCallableStatement).setApplicationStatement(
1:175a740:                     applicationStatement);
1:eac0369: 		}
1:eac0369: 		else {
1:eac0369: 			// application connection is different, therefore the outer application
1:eac0369: 			// statement is closed, so just return the realStatement. It should be
1:eac0369: 			// closed by virtue of its application connection being closed.
1:eac0369: 		}
1:eac0369: 		return realCallableStatement;
1:eac0369: 	}
1:eac0369: 
1:e65be5b:     /**
1:e65be5b:      * Don't need to wrap the ResultSet but do need to update its
1:e65be5b:      * application Statement reference to be the one the application
1:e65be5b:      * used to create the ResultSet.
1:5b78c4e:      */
1:e65be5b: 	public ResultSet wrapResultSet(Statement s, ResultSet rs) {
1:e65be5b:         if (rs != null)
1:e65be5b:             ((EmbedResultSet) rs).setApplicationStatement(s);
1:eac0369: 		return rs;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Can cursors be held across commits.
1:eac0369: 	*/
1:ce9d214: 	public int checkHoldCursors(int holdability) throws SQLException {
1:562671e: 		return xaConnection.checkHoldCursors(holdability, true);
1:ec60014:  	}
1:ce9d214: }
============================================================================
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:aa5c5de
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ec60014
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.jdbc.ExceptionFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Return the exception factory for the underlying connection.
1:      */
0:     public ExceptionFactory getExceptionFactory() {
0:         return applicationConnection.getExceptionFactory();
1:     }
author:Katherine Marsden
-------------------------------------------------------------------------------
commit:5b78c4e
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Close the realStatement within this control. 
1: 	 */
1: 	public void closeRealStatement() throws SQLException {
1: 		realStatement.close();
1: 	}
1: 	
1: 	/**
1: 	 * Close the realCallableStatement within this control. 
1: 	 */
1: 	public void closeRealCallableStatement() throws SQLException {
1: 		realCallableStatement.close();
1: 	}
1: 	
1: 	/**
1: 	 * Close the realPreparedStatement within this control. 
1: 	 */
1: 	public void closeRealPreparedStatement() throws SQLException {
1: 		realPreparedStatement.close();
1: 	}
1: 	
author:Samuel Andrew McIntyre
-------------------------------------------------------------------------------
commit:2f36947
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:e916164
/////////////////////////////////////////////////////////////////////////
1: 	private final EmbedXAConnection	xaConnection;
/////////////////////////////////////////////////////////////////////////
1: 	private XAStatementControl(EmbedXAConnection xaConnection) {
1: 	XAStatementControl(EmbedXAConnection xaConnection, 
/////////////////////////////////////////////////////////////////////////
1: 	XAStatementControl(EmbedXAConnection xaConnection, 
/////////////////////////////////////////////////////////////////////////
1: 	XAStatementControl(EmbedXAConnection xaConnection, 
commit:3e67fd5
/////////////////////////////////////////////////////////////////////////
0: 	private final EmbedPooledConnection	xaConnection;
/////////////////////////////////////////////////////////////////////////
0: 	private XAStatementControl(EmbedPooledConnection xaConnection) {
0: 	XAStatementControl(EmbedPooledConnection xaConnection, 
1:                                 Statement realStatement) throws SQLException {
0: 	XAStatementControl(EmbedPooledConnection xaConnection, 
1:                 PreparedStatement realPreparedStatement, 
1:                 String sql, Object generatedKeys) throws SQLException {            
0: 	XAStatementControl(EmbedPooledConnection xaConnection, 
1:                 CallableStatement realCallableStatement, 
1:                 String sql) throws SQLException {
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:175a740
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.jdbc.EngineStatement;
/////////////////////////////////////////////////////////////////////////
1:         
1:         ((EmbedStatement) realStatement).setApplicationStatement(
1:                 applicationStatement);
/////////////////////////////////////////////////////////////////////////
1:         ((EmbedStatement) realPreparedStatement).setApplicationStatement(
1:                 applicationStatement);
/////////////////////////////////////////////////////////////////////////
1:         ((EmbedStatement) realCallableStatement).setApplicationStatement(
1:                 applicationStatement);
/////////////////////////////////////////////////////////////////////////
1:  
/////////////////////////////////////////////////////////////////////////
1:             ((EmbedStatement) realStatement).setApplicationStatement(
1:                     applicationStatement);
/////////////////////////////////////////////////////////////////////////
1:             ((EmbedStatement) realPreparedStatement).setApplicationStatement(
1:                         applicationStatement);
/////////////////////////////////////////////////////////////////////////
1:             ((EmbedStatement) realCallableStatement).setApplicationStatement(
1:                     applicationStatement);
commit:562671e
/////////////////////////////////////////////////////////////////////////
1: 		return xaConnection.checkHoldCursors(holdability, true);
commit:ce9d214
/////////////////////////////////////////////////////////////////////////
1: 	public int checkHoldCursors(int holdability) throws SQLException {
0: 		return xaConnection.checkHoldCursors(holdability, false);
1:  	}
commit:e65be5b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.jdbc.EmbedResultSet;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Don't need to wrap the ResultSet but do need to update its
1:      * application Statement reference to be the one the application
1:      * used to create the ResultSet.
1:      */
1: 	public ResultSet wrapResultSet(Statement s, ResultSet rs) {
1:         if (rs != null)
1:             ((EmbedResultSet) rs).setApplicationStatement(s);
commit:63d26f5
/////////////////////////////////////////////////////////////////////////
0:    Copyright 2003, 2005 The Apache Software Foundation or its licensors, as applicable.
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.impl.jdbc.EmbedConnection;
/////////////////////////////////////////////////////////////////////////
1: 	private EmbedConnection	realConnection;
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.jdbc.XAStatementControl
1: 
0:    Copyright 2003, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:4dede3b
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.jdbc;
1: 
1: import org.apache.derby.iapi.jdbc.BrokeredConnection;
1: import org.apache.derby.iapi.jdbc.BrokeredStatementControl;
1: import org.apache.derby.iapi.jdbc.BrokeredStatement;
1: import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
1: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
0: import org.apache.derby.impl.jdbc.EmbedConnection20;
1: import org.apache.derby.impl.jdbc.EmbedStatement;
1: import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
1: 
1: import java.sql.*;
1: 
1: /**
1: 	The Statement returned by an Connection returned by a XAConnection
1: 	needs to float across the underlying real connections. We do this by implementing
1: 	a wrapper statement.
1: */
1: final class XAStatementControl implements BrokeredStatementControl {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
1: 
1: 	/**
1: 	*/
0: 	private final EmbedXAConnection	xaConnection;
1: 	private final BrokeredConnection	applicationConnection;
1: 	BrokeredStatement		applicationStatement;
0: 	private EmbedConnection20	realConnection;
1: 	private Statement			realStatement;
1: 	private PreparedStatement	realPreparedStatement;
1: 	private CallableStatement	realCallableStatement;
1: 
0: 	private XAStatementControl(EmbedXAConnection xaConnection) {
1: 		this.xaConnection = xaConnection;
1: 		this.realConnection = xaConnection.realConnection;
1: 		this.applicationConnection = xaConnection.currentConnectionHandle;
1: 	}
1: 
0: 	XAStatementControl(EmbedXAConnection xaConnection, Statement realStatement) throws SQLException {
1: 		this(xaConnection);
1: 		this.realStatement = realStatement;
1: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this);
1: 	}
0: 	XAStatementControl(EmbedXAConnection xaConnection, PreparedStatement realPreparedStatement, String sql, Object generatedKeys) throws SQLException {
1: 		this(xaConnection);
1: 		this.realPreparedStatement = realPreparedStatement;
1: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this, sql, generatedKeys);
1: 	}
0: 	XAStatementControl(EmbedXAConnection xaConnection, CallableStatement realCallableStatement, String sql) throws SQLException {
1: 		this(xaConnection);
1: 		this.realCallableStatement = realCallableStatement;
1: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this, sql);
1: 	}
1: 
1: 	public Statement getRealStatement() throws SQLException {
1: 
1: 		// 
1: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
1: 
1: 			// Application connection is the same.
1: 			if (realConnection == xaConnection.realConnection)
1: 				return realStatement;
1: 
1: 			// If we switched back to a local connection, and the first access is through
1: 			// a non-connection object (e.g. statement then realConnection will be null)
1: 			if (xaConnection.realConnection == null) {
1: 				// force the connection
1: 				xaConnection.getRealConnection();
1: 			}
1: 
1: 			// underlying connection has changed.
1: 			// create new Statement
1: 			Statement newStatement = applicationStatement.createDuplicateStatement(xaConnection.realConnection, realStatement);
1: 			((EmbedStatement) realStatement).transferBatch((EmbedStatement) newStatement);
1: 
1: 			try {
1: 				realStatement.close();
1: 			} catch (SQLException sqle) {
1: 			}
1: 
1: 			realStatement = newStatement;
1: 			realConnection = xaConnection.realConnection;
1: 		}
1: 		else {
1: 			// application connection is different, therefore the outer application
1: 			// statement is closed, so just return the realStatement. It should be
1: 			// closed by virtue of its application connection being closed.
1: 		}
1: 		return realStatement;
1: 	}
1: 
1: 	public PreparedStatement getRealPreparedStatement() throws SQLException {
1: 		// 
1: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
1: 			// Application connection is the same.
1: 			if (realConnection == xaConnection.realConnection)
1: 				return realPreparedStatement;
1: 
1: 			// If we switched back to a local connection, and the first access is through
1: 			// a non-connection object (e.g. statement then realConnection will be null)
1: 			if (xaConnection.realConnection == null) {
1: 				// force the connection
1: 				xaConnection.getRealConnection();
1: 			}
1: 
1: 			// underlying connection has changed.
1: 			// create new PreparedStatement
1: 			PreparedStatement newPreparedStatement =
1: 				((BrokeredPreparedStatement) applicationStatement).createDuplicateStatement(xaConnection.realConnection, realPreparedStatement);
1: 
1: 
1: 			// ((EmbedStatement) realPreparedStatement).transferBatch((EmbedStatement) newPreparedStatement);
1: 			((EmbedPreparedStatement) realPreparedStatement).transferParameters((EmbedPreparedStatement) newPreparedStatement);
1: 
1: 			try {
1: 				realPreparedStatement.close();
1: 			} catch (SQLException sqle) {
1: 			}
1: 
1: 			realPreparedStatement = newPreparedStatement;
1: 			realConnection = xaConnection.realConnection;
1: 		}
1: 		else {
1: 			// application connection is different, therefore the outer application
1: 			// statement is closed, so just return the realStatement. It should be
1: 			// closed by virtue of its application connection being closed.
1: 		}
1: 		return realPreparedStatement;
1: 	}
1: 
1: 	public CallableStatement getRealCallableStatement() throws SQLException {
1: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
1: 			// Application connection is the same.
1: 			if (realConnection == xaConnection.realConnection)
1: 				return realCallableStatement;
1: 
1: 			// If we switched back to a local connection, and the first access is through
1: 			// a non-connection object (e.g. statement then realConnection will be null)
1: 			if (xaConnection.realConnection == null) {
1: 				// force the connection
1: 				xaConnection.getRealConnection();
1: 			}
1: 
1: 			// underlying connection has changed.
1: 			// create new PreparedStatement
1: 			CallableStatement newCallableStatement =
1: 				((BrokeredCallableStatement) applicationStatement).createDuplicateStatement(xaConnection.realConnection, realCallableStatement);
1: 
1: 			((EmbedStatement) realCallableStatement).transferBatch((EmbedStatement) newCallableStatement);
1: 
1: 			try {
1: 				realCallableStatement.close();
1: 			} catch (SQLException sqle) {
1: 			}
1: 
1: 			realCallableStatement = newCallableStatement;
1: 			realConnection = xaConnection.realConnection;
1: 		}
1: 		else {
1: 			// application connection is different, therefore the outer application
1: 			// statement is closed, so just return the realStatement. It should be
1: 			// closed by virtue of its application connection being closed.
1: 		}
1: 		return realCallableStatement;
1: 	}
1: 
0: 	public ResultSet wrapResultSet(ResultSet rs) {
1: 		return rs;
1: 	}
1: 
1: 	/**
1: 		Can cursors be held across commits.
1: 	*/
0: 	public void checkHoldCursors(int holdability) throws SQLException {
0: 		xaConnection.checkHoldCursors(holdability);
1: 	}
1: }
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.jdbc
0:    (C) Copyright IBM Corp. 2003, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.jdbc;
0: 
0: import org.apache.derby.iapi.jdbc.BrokeredConnection;
0: import org.apache.derby.iapi.jdbc.BrokeredStatementControl;
0: import org.apache.derby.iapi.jdbc.BrokeredStatement;
0: import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
0: import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
0: import org.apache.derby.impl.jdbc.EmbedConnection20;
0: import org.apache.derby.impl.jdbc.EmbedStatement;
0: import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
0: 
0: import java.sql.*;
0: 
0: /**
0: 	The Statement returned by an Connection returned by a XAConnection
0: 	needs to float across the underlying real connections. We do this by implementing
0: 	a wrapper statement.
0: */
0: final class XAStatementControl implements BrokeredStatementControl {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2003_2004;
0: 
0: 	/**
0: 	*/
0: 	private final EmbedXAConnection	xaConnection;
0: 	private final BrokeredConnection	applicationConnection;
0: 	BrokeredStatement		applicationStatement;
0: 	private EmbedConnection20	realConnection;
0: 	private Statement			realStatement;
0: 	private PreparedStatement	realPreparedStatement;
0: 	private CallableStatement	realCallableStatement;
0: 
0: 	private XAStatementControl(EmbedXAConnection xaConnection) {
0: 		this.xaConnection = xaConnection;
0: 		this.realConnection = xaConnection.realConnection;
0: 		this.applicationConnection = xaConnection.currentConnectionHandle;
0: 	}
0: 
0: 	XAStatementControl(EmbedXAConnection xaConnection, Statement realStatement) throws SQLException {
0: 		this(xaConnection);
0: 		this.realStatement = realStatement;
0: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this);
0: 	}
0: 	XAStatementControl(EmbedXAConnection xaConnection, PreparedStatement realPreparedStatement, String sql, Object generatedKeys) throws SQLException {
0: 		this(xaConnection);
0: 		this.realPreparedStatement = realPreparedStatement;
0: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this, sql, generatedKeys);
0: 	}
0: 	XAStatementControl(EmbedXAConnection xaConnection, CallableStatement realCallableStatement, String sql) throws SQLException {
0: 		this(xaConnection);
0: 		this.realCallableStatement = realCallableStatement;
0: 		this.applicationStatement = applicationConnection.newBrokeredStatement(this, sql);
0: 	}
0: 
0: 	public Statement getRealStatement() throws SQLException {
0: 
0: 		// 
0: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
0: 
0: 			// Application connection is the same.
0: 			if (realConnection == xaConnection.realConnection)
0: 				return realStatement;
0: 
0: 			// If we switched back to a local connection, and the first access is through
0: 			// a non-connection object (e.g. statement then realConnection will be null)
0: 			if (xaConnection.realConnection == null) {
0: 				// force the connection
0: 				xaConnection.getRealConnection();
0: 			}
0: 
0: 			// underlying connection has changed.
0: 			// create new Statement
0: 			Statement newStatement = applicationStatement.createDuplicateStatement(xaConnection.realConnection, realStatement);
0: 			((EmbedStatement) realStatement).transferBatch((EmbedStatement) newStatement);
0: 
0: 			try {
0: 				realStatement.close();
0: 			} catch (SQLException sqle) {
0: 			}
0: 
0: 			realStatement = newStatement;
0: 			realConnection = xaConnection.realConnection;
0: 		}
0: 		else {
0: 			// application connection is different, therefore the outer application
0: 			// statement is closed, so just return the realStatement. It should be
0: 			// closed by virtue of its application connection being closed.
0: 		}
0: 		return realStatement;
0: 	}
0: 
0: 	public PreparedStatement getRealPreparedStatement() throws SQLException {
0: 		// 
0: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
0: 			// Application connection is the same.
0: 			if (realConnection == xaConnection.realConnection)
0: 				return realPreparedStatement;
0: 
0: 			// If we switched back to a local connection, and the first access is through
0: 			// a non-connection object (e.g. statement then realConnection will be null)
0: 			if (xaConnection.realConnection == null) {
0: 				// force the connection
0: 				xaConnection.getRealConnection();
0: 			}
0: 
0: 			// underlying connection has changed.
0: 			// create new PreparedStatement
0: 			PreparedStatement newPreparedStatement =
0: 				((BrokeredPreparedStatement) applicationStatement).createDuplicateStatement(xaConnection.realConnection, realPreparedStatement);
0: 
0: 
0: 			// ((EmbedStatement) realPreparedStatement).transferBatch((EmbedStatement) newPreparedStatement);
0: 			((EmbedPreparedStatement) realPreparedStatement).transferParameters((EmbedPreparedStatement) newPreparedStatement);
0: 
0: 			try {
0: 				realPreparedStatement.close();
0: 			} catch (SQLException sqle) {
0: 			}
0: 
0: 			realPreparedStatement = newPreparedStatement;
0: 			realConnection = xaConnection.realConnection;
0: 		}
0: 		else {
0: 			// application connection is different, therefore the outer application
0: 			// statement is closed, so just return the realStatement. It should be
0: 			// closed by virtue of its application connection being closed.
0: 		}
0: 		return realPreparedStatement;
0: 	}
0: 
0: 	public CallableStatement getRealCallableStatement() throws SQLException {
0: 		if (applicationConnection == xaConnection.currentConnectionHandle) {
0: 			// Application connection is the same.
0: 			if (realConnection == xaConnection.realConnection)
0: 				return realCallableStatement;
0: 
0: 			// If we switched back to a local connection, and the first access is through
0: 			// a non-connection object (e.g. statement then realConnection will be null)
0: 			if (xaConnection.realConnection == null) {
0: 				// force the connection
0: 				xaConnection.getRealConnection();
0: 			}
0: 
0: 			// underlying connection has changed.
0: 			// create new PreparedStatement
0: 			CallableStatement newCallableStatement =
0: 				((BrokeredCallableStatement) applicationStatement).createDuplicateStatement(xaConnection.realConnection, realCallableStatement);
0: 
0: 			((EmbedStatement) realCallableStatement).transferBatch((EmbedStatement) newCallableStatement);
0: 
0: 			try {
0: 				realCallableStatement.close();
0: 			} catch (SQLException sqle) {
0: 			}
0: 
0: 			realCallableStatement = newCallableStatement;
0: 			realConnection = xaConnection.realConnection;
0: 		}
0: 		else {
0: 			// application connection is different, therefore the outer application
0: 			// statement is closed, so just return the realStatement. It should be
0: 			// closed by virtue of its application connection being closed.
0: 		}
0: 		return realCallableStatement;
0: 	}
0: 
0: 	public ResultSet wrapResultSet(ResultSet rs) {
0: 		return rs;
0: 	}
0: 
0: 	/**
0: 		Can cursors be held across commits.
0: 	*/
0: 	public void checkHoldCursors(int holdability) throws SQLException {
0: 		xaConnection.checkHoldCursors(holdability);
0: 	}
0: }
============================================================================