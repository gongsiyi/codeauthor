1:ff22a62: /*
2:ff22a62: 
1:ff22a62:    Derby - Class org.apache.derbyDemo.scores.data.Database
1:ff22a62: 
1:ff22a62:    Licensed to the Apache Software Foundation (ASF) under one or more
1:ff22a62:    contributor license agreements.  See the NOTICE file distributed with
1:ff22a62:    this work for additional information regarding copyright ownership.
1:ff22a62:    The ASF licenses this file to You under the Apache License, Version 2.0
1:ff22a62:    (the "License"); you may not use this file except in compliance with
1:ff22a62:    the License.  You may obtain a copy of the License at
1:ff22a62: 
1:ff22a62:       http://www.apache.org/licenses/LICENSE-2.0
1:ff22a62: 
1:ff22a62:    Unless required by applicable law or agreed to in writing, software
1:ff22a62:    distributed under the License is distributed on an "AS IS" BASIS,
1:ff22a62:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff22a62:    See the License for the specific language governing permissions and
1:ff22a62:    limitations under the License.
1:ff22a62: 
1:ff22a62:  */
1:ff22a62: 
1:ff22a62: package org.apache.derbyDemo.scores.data;
1:ff22a62: 
1:ff22a62: import java.sql.*;
1:ff22a62: 
1:ff22a62: import org.apache.derby.tools.JDBCDisplayUtil;
1:ff22a62: 
1:ff22a62: import org.apache.derbyDemo.scores.util.*;
1:ff22a62: 
1:ff22a62: /**
1:ff22a62:  * <p>
1:ff22a62:  * Top level object for accessing a SQL database. Implemented against
1:ff22a62:  * embedded Derby. Could be extended for use against another server.
1:ff22a62:  * </p>
1:ff22a62:  *
1:ff22a62:  */
1:ff22a62: public  class   Database
2:ff22a62: {
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTANTS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     public  static  final   String  DATABASE_NAME = "ScoresDB";
1:ff22a62: 
1:ff22a62:     private static  final   String  DERBY_EMBEDDED_DRIVER =
1:ff22a62:         "org.apache.derby.jdbc.EmbeddedDriver";
1:ff22a62:     private static  final   String  DERBY_PROTOCOL = "jdbc:derby:";
1:ff22a62:     private static  final   String  CREATE_ME = ";create=true";
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATE
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     private Data            _data;
1:ff22a62:     private Connection      _conn;
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // CONSTRUCTOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Construct out of thin air.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     private Database()
1:ff22a62:     {
3:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // STATIC BEHAVIOR
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Recode this method to return some subclass of Database if you
1:ff22a62:      * want to use a different data store than Derby. This method
1:ff22a62:      * creates the database if it does not already exist.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  Database    getDatabase
1:ff22a62:         ( String serverJar, String mathJar )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Database    db = new Database();
1:ff22a62:         Logger      log = Logger.getLogger();
1:ff22a62: 
1:ff22a62:         db._data = new Data();
1:ff22a62: 
1:ff22a62:         //
1:ff22a62:         // This creates an empty database if it doesn't already exist.
1:ff22a62:         //
1:ff22a62:         Connection  conn = db.getConnection();
1:ff22a62: 
1:ff22a62:         //
1:ff22a62:         // If the database is empty, populate it.
1:ff22a62:         //
1:ff22a62:         if ( !db.schemaExists( conn ) )
1:ff22a62:         {
1:ff22a62:             db.createSchema( conn, serverJar, mathJar );
1:ff22a62: 
1:ff22a62:             // populate tables with initial slug of data
1:ff22a62:             db._data.initialize( db );
1:ff22a62: 
1:ff22a62:             log.logBanner( "Show schools, students, and tests..." );
1:ff22a62: 
1:ff22a62:             db.prettyPrintSchool( conn );
1:ff22a62:             db.prettyPrintStudent( conn );
1:ff22a62:             db.prettyPrintTest( conn );
1:ff22a62:             //db.prettyPrintQuestion( conn );
1:ff22a62:         }
1:ff22a62: 
1:ff22a62:         Utils.commit( conn );
1:ff22a62: 
1:ff22a62:         return db;
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // OVERRIDABLE PUBLIC BEHAVIOR. OVERRIDE THESE METHODS
1:ff22a62:     // IF YOU WANT TO USE A DIFFERENT DATA STORE. THIS IMPLEMENTATION
1:ff22a62:     // WORKS AGAINST DERBY.
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Get a connection to the database.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  Connection  getConnection()
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         if ( _conn != null ) { return _conn; }
1:ff22a62: 
1:ff22a62:         String      connectionURL =
1:ff22a62:             DERBY_PROTOCOL + DATABASE_NAME + CREATE_ME;
1:ff22a62: 
1:ff22a62:         _conn = DriverManager.getConnection( connectionURL );
1:ff22a62: 
1:ff22a62:         _conn.setAutoCommit( false );
1:ff22a62: 
1:ff22a62:         return _conn;
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /////////
1:ff22a62:     //
1:ff22a62:     // SCHEMA
1:ff22a62:     //
1:ff22a62:     /////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Return true if the schema exists.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     protected   boolean schemaExists( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         String              heartbeat =
1:ff22a62:             "select count(*) from sys.systables where tablename = 'SCHOOL'";
1:ff22a62: 
1:ff22a62:         PreparedStatement   ps = Utils.prepare( conn, heartbeat );
1:ff22a62:         ResultSet           rs = ps.executeQuery();
1:ff22a62: 
1:ff22a62:         rs.next();
1:ff22a62:         
1:ff22a62:         int                 count = rs.getInt( 1 );
1:ff22a62: 
1:ff22a62:         Utils.close( rs );
1:ff22a62:         Utils.close( ps );
1:ff22a62: 
1:ff22a62:         return ( count > 0 );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Create all schema objects.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     protected   void    createSchema
1:ff22a62:         ( Connection conn, String serverJar, String mathJar )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Logger      log = Logger.getLogger();
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             (
1:ff22a62:              "Loading jar files into database and " +
1:ff22a62:              "wiring-up the database classpath..." );
1:ff22a62: 
1:ff22a62:         Utils.executeCall
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "call sqlj.install_jar\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    '" + serverJar + "',\n" +
1:ff22a62:              "    'APP.SCORES_SERVER',\n" +
1:ff22a62:              "    0\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeCall
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "call sqlj.install_jar\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    '" + mathJar +"',\n" +
1:ff22a62:              "    'APP.APACHE_COMMONS_MATH',\n" +
1:ff22a62:              "    0\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeCall
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "call syscs_util.syscs_set_database_property\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    'derby.database.classpath',\n" +
1:ff22a62:              "    'APP.SCORES_SERVER:APP.APACHE_COMMONS_MATH'\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             ( "Creating functions..." );
1:ff22a62: 
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create function formatPercent\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    score double\n" +
1:ff22a62:              ")\n" +
1:ff22a62:              "returns varchar( 7 )\n" +
1:ff22a62:              "language java\n" +
1:ff22a62:              "parameter style java\n" +
1:ff22a62:              "no sql\n" +
1:ff22a62:              "external name 'org.apache.derbyDemo.scores.proc.Functions.formatPercent'\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create function weighQuestion\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    difficulty int\n" +
1:ff22a62:              ")\n" +
1:ff22a62:              "returns double\n" +
1:ff22a62:              "language java\n" +
1:ff22a62:              "parameter style java\n" +
1:ff22a62:              "no sql\n" +
1:ff22a62:              "external name 'org.apache.derbyDemo.scores.proc.Functions.weighQuestion'\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create function scoreAnswer\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    difficulty      int,\n" +
1:ff22a62:              "    numberOfChoices int,\n" +
1:ff22a62:              "    correctChoice   int,\n" +
1:ff22a62:              "    actualChoice    int\n" +
1:ff22a62:              ")\n" +
1:ff22a62:              "returns double\n" +
1:ff22a62:              "language java\n" +
1:ff22a62:              "parameter style java\n" +
1:ff22a62:              "no sql\n" +
1:ff22a62:              "external name 'org.apache.derbyDemo.scores.proc.Functions.scoreAnswer'\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create function computeAge\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    birthday date\n" +
1:ff22a62:              ")\n" +
1:ff22a62:              "returns int\n" +
1:ff22a62:              "language java\n" +
1:ff22a62:              "parameter style java\n" +
1:ff22a62:              "no sql\n" +
1:ff22a62:              "external name 'org.apache.derbyDemo.scores.proc.Functions.computeAge'\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create function getMedianTestScore\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    testID int\n" +
1:ff22a62:              ")\n" +
1:ff22a62:              "returns double\n" +
1:ff22a62:              "language java\n" +
1:ff22a62:              "parameter style java\n" +
1:ff22a62:              "reads sql data\n" +
1:ff22a62:              "external name " +
1:ff22a62:              "'org.apache.derbyDemo.scores.proc.Functions.getMedianTestScore'\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create function vetChoice\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    actualChoice int,\n" +
1:ff22a62:              "    questionID   int\n" +
1:ff22a62:              ")\n" +
1:ff22a62:              "returns int\n" +
1:ff22a62:              "language java\n" +
1:ff22a62:              "parameter style java\n" +
1:ff22a62:              "reads sql data\n" +
1:ff22a62:              "external name 'org.apache.derbyDemo.scores.proc.Functions.vetChoice'\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             ( "Creating procedures..." );
1:ff22a62: 
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create procedure ScoreTestTaking\n" +
1:ff22a62:              "( in takingID int )\n" +
1:ff22a62:              "language java\n" +
1:ff22a62:              "parameter style java\n" +
1:ff22a62:              "modifies sql data\n" +
1:ff22a62:              "external name 'org.apache.derbyDemo.scores.proc.Procedures.ScoreTestTaking'\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             (
1:ff22a62:              "Creating tables. Note the function " +
1:ff22a62:              "in the check constraint on QuestionTaking..." );
1:ff22a62: 
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create table School\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              " schoolID   int primary key generated always as identity,\n" +
1:ff22a62:              " schoolName varchar( 20 ) not null,\n" +
1:ff22a62:              "\n" +
1:ff22a62:              " unique( schoolName )\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create table Student\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              " studentID int primary key generated always as identity,\n" +
1:ff22a62:              " schoolID  int not null references School( schoolID ),\n" +
1:ff22a62:              " lastName  varchar( 10 ) not null,\n" +
1:ff22a62:              " firstName varchar( 10 ) not null,\n" +
1:ff22a62:              " birthday  date not null,\n" +
1:ff22a62:              "\n" +
1:ff22a62:              " unique( lastName, firstName )\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create table Test\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              " testID   int primary key generated always as identity,\n" +
1:ff22a62:              " testName varchar( 20 ) not null,\n" +
1:ff22a62:              "\n" +
1:ff22a62:              " unique( testName )\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create table TestTaking\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              " takingID   int primary key generated always as identity,\n" +
1:ff22a62:              " studentID  int not null references Student( studentID ),\n" +
1:ff22a62:              " testID     int not null references Test( testID ),\n" +
1:ff22a62:              " takingDate date,\n" +
1:ff22a62:              " score      double not null\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create table Question\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              " questionID      int primary key " +
1:ff22a62:              "   generated always as identity,\n" +
1:ff22a62:              " testID          int not null references Test( testID ),\n" +
1:ff22a62:              " questionName    varchar( 10 ) not null unique,\n" +
1:ff22a62:              " difficulty      int not null,\n" +
1:ff22a62:              " numberOfChoices int not null,\n" +
1:ff22a62:              " correctChoice   int not null,\n" +
1:ff22a62:              "\n" +
1:ff22a62:              " check ( ( correctChoice > -1 ) " +
1:ff22a62:              " and ( correctChoice < numberOfChoices ) )\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create table QuestionTaking\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              " questionID   int not null" +
1:ff22a62:              "  references Question( questionID ),\n" +
1:ff22a62:              " takingID     int not null" +
1:ff22a62:              "  references TestTaking( takingID ),\n" +
1:ff22a62:              " actualChoice int not null,\n" +
1:ff22a62:              "\n" +
1:ff22a62:              " unique( questionID, takingID ),\n" +
1:ff22a62:              " check ( vetChoice( actualChoice, questionID ) > 0 )\n" +
1:ff22a62:              ")\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         log.logBanner( "Creating views..." );
1:ff22a62: 
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create view LastTaking\n" +
1:ff22a62:              "(\n" +
1:ff22a62:              "    takingID,\n" +
1:ff22a62:              "    studentID,\n" +
1:ff22a62:              "    testID\n" +
1:ff22a62:              ")\n" +
1:ff22a62:              "as select max( takingID ), studentID, testID\n" +
1:ff22a62:              "from TestTaking\n" +
1:ff22a62:              "group by studentID, testID\n"
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         log.logBanner
1:ff22a62:             (
1:ff22a62:              "Creating triggers. Note that the trigger " +
1:ff22a62:              "invokes a procedure..."
1:ff22a62:              );
1:ff22a62: 
1:ff22a62:         Utils.executeDDL
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "create trigger ScoreTestWhenDone\n" +
1:ff22a62:              "after update of takingDate\n" +
1:ff22a62:              "on TestTaking\n" +
1:ff22a62:              "referencing new as testTakingRow\n" +
1:ff22a62:              "for each row mode db2sql\n" +
1:ff22a62:              "call ScoreTestTaking( testTakingRow.takingID )\n"
1:ff22a62:              );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // PRETTY PRINITING
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /** <p>Pretty print the School table.</p> */
1:ff22a62:     public  void    prettyPrintSchool( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         prettyPrint( conn, "select * from School order by schoolName\n" );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /** <p>Pretty print the Student table.</p> */
1:ff22a62:     public  void    prettyPrintStudent( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         prettyPrint
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "select st.studentID, sc.schoolName," +
1:ff22a62:              " st.lastName, st.firstName, st.birthday\n" +
1:ff22a62:              "from Student st, School sc\n" +
1:ff22a62:              "where st.schoolID = sc.schoolID\n" +
1:ff22a62:              "order by st.lastName, st.firstName\n"
1:ff22a62:              );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /** <p>Pretty print the Test table.</p> */
1:ff22a62:     public  void    prettyPrintTest( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         prettyPrint( conn, "select * from Test order by testName\n" );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /** <p>Pretty print the Question table.</p> */
1:ff22a62:     public  void    prettyPrintQuestion( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         prettyPrint
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "select * from Question order by testID, questionID\n"
1:ff22a62:              );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /** <p>Pretty print the QuestionTaking table.</p> */
1:ff22a62:     public  void    prettyPrintQuestionTaking( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         prettyPrint
1:ff22a62:             (
1:ff22a62:              conn,
1:ff22a62:              "select * from QuestionTaking order by takingID, questionID\n"
1:ff22a62:              );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /** <p>Pretty print the TestTaking table.</p> */
1:ff22a62:     public  void    prettyPrintTestTaking( Connection conn )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         prettyPrint( conn, "select * from TestTaking order by takingID\n" );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Pretty print the results of a query, given its text.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    prettyPrint( Connection conn, String text )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         PreparedStatement   ps = Utils.prepare( conn, text );
1:ff22a62:         ResultSet           rs = ps.executeQuery();
1:ff22a62: 
1:ff22a62:         prettyPrint( conn, rs );
1:ff22a62: 
1:ff22a62:         Utils.close( rs );
1:ff22a62:         Utils.close( ps );
1:ff22a62:     }
1:ff22a62:     
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Print a ResultSet, using Derby's pretty-printing tool.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  static  void    prettyPrint( Connection conn, ResultSet rs )
1:ff22a62:         throws SQLException
1:ff22a62:     {
1:ff22a62:         Logger      log = Logger.getLogger();
1:ff22a62: 
1:ff22a62:         JDBCDisplayUtil.DisplayResults
1:ff22a62:             ( log.getPrintStream(), rs, conn );
1:ff22a62: 
1:ff22a62:         log.log( "\n" );
1:ff22a62:     }
1:ff22a62: 
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62:     //
1:ff22a62:     // OTHER MINIONS
1:ff22a62:     //
1:ff22a62:     ////////////////////////////////////////////////////////
1:ff22a62: 
1:ff22a62:     /**
1:ff22a62:      * <p>
1:ff22a62:      * Get the Data populating tool.
1:ff22a62:      * </p>
1:ff22a62:      */
1:ff22a62:     public  Data    getData() { return _data; }
1:ff22a62:     
1:ff22a62: }
============================================================================
author:Camilla Haase
-------------------------------------------------------------------------------
commit:1695a5d
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:ff22a62
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1:    Derby - Class org.apache.derbyDemo.scores.data.Database
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derbyDemo.scores.data;
1: 
1: import java.sql.*;
1: 
1: import org.apache.derby.tools.JDBCDisplayUtil;
1: 
1: import org.apache.derbyDemo.scores.util.*;
1: 
1: /**
1:  * <p>
1:  * Top level object for accessing a SQL database. Implemented against
1:  * embedded Derby. Could be extended for use against another server.
1:  * </p>
1:  *
0:  * @author Rick Hillegas
1:  */
1: public  class   Database
1: {
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     public  static  final   String  DATABASE_NAME = "ScoresDB";
1: 
1:     private static  final   String  DERBY_EMBEDDED_DRIVER =
1:         "org.apache.derby.jdbc.EmbeddedDriver";
1:     private static  final   String  DERBY_PROTOCOL = "jdbc:derby:";
1:     private static  final   String  CREATE_ME = ";create=true";
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     private Data            _data;
1:     private Connection      _conn;
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Construct out of thin air.
1:      * </p>
1:      */
1:     private Database()
1:     {
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // STATIC BEHAVIOR
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Recode this method to return some subclass of Database if you
1:      * want to use a different data store than Derby. This method
1:      * creates the database if it does not already exist.
1:      * </p>
1:      */
1:     public  static  Database    getDatabase
1:         ( String serverJar, String mathJar )
1:         throws SQLException
1:     {
1:         Database    db = new Database();
1:         Logger      log = Logger.getLogger();
1: 
1:         db._data = new Data();
1: 
1:         //
1:         // This creates an empty database if it doesn't already exist.
1:         //
1:         Connection  conn = db.getConnection();
1: 
1:         //
1:         // If the database is empty, populate it.
1:         //
1:         if ( !db.schemaExists( conn ) )
1:         {
1:             db.createSchema( conn, serverJar, mathJar );
1: 
1:             // populate tables with initial slug of data
1:             db._data.initialize( db );
1: 
1:             log.logBanner( "Show schools, students, and tests..." );
1: 
1:             db.prettyPrintSchool( conn );
1:             db.prettyPrintStudent( conn );
1:             db.prettyPrintTest( conn );
1:             //db.prettyPrintQuestion( conn );
1:         }
1: 
1:         Utils.commit( conn );
1: 
1:         return db;
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // OVERRIDABLE PUBLIC BEHAVIOR. OVERRIDE THESE METHODS
1:     // IF YOU WANT TO USE A DIFFERENT DATA STORE. THIS IMPLEMENTATION
1:     // WORKS AGAINST DERBY.
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get a connection to the database.
1:      * </p>
1:      */
1:     public  Connection  getConnection()
1:         throws SQLException
1:     {
1:         if ( _conn != null ) { return _conn; }
1:         
0:         try {
0:             Class.forName( DERBY_EMBEDDED_DRIVER );
1:         }
0:         catch (ClassNotFoundException e)
1:         {
0:             throw new SQLException
0:                 ( "Could not locate " + DERBY_EMBEDDED_DRIVER );
1:         }
1: 
1:         String      connectionURL =
1:             DERBY_PROTOCOL + DATABASE_NAME + CREATE_ME;
1: 
1:         _conn = DriverManager.getConnection( connectionURL );
1: 
1:         _conn.setAutoCommit( false );
1: 
1:         return _conn;
1:     }
1: 
1:     /////////
1:     //
1:     // SCHEMA
1:     //
1:     /////////
1: 
1:     /**
1:      * <p>
1:      * Return true if the schema exists.
1:      * </p>
1:      */
1:     protected   boolean schemaExists( Connection conn )
1:         throws SQLException
1:     {
1:         String              heartbeat =
1:             "select count(*) from sys.systables where tablename = 'SCHOOL'";
1: 
1:         PreparedStatement   ps = Utils.prepare( conn, heartbeat );
1:         ResultSet           rs = ps.executeQuery();
1: 
1:         rs.next();
1:         
1:         int                 count = rs.getInt( 1 );
1: 
1:         Utils.close( rs );
1:         Utils.close( ps );
1: 
1:         return ( count > 0 );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Create all schema objects.
1:      * </p>
1:      */
1:     protected   void    createSchema
1:         ( Connection conn, String serverJar, String mathJar )
1:         throws SQLException
1:     {
1:         Logger      log = Logger.getLogger();
1: 
1:         log.logBanner
1:             (
1:              "Loading jar files into database and " +
1:              "wiring-up the database classpath..." );
1: 
1:         Utils.executeCall
1:             (
1:              conn,
1:              "call sqlj.install_jar\n" +
1:              "(\n" +
1:              "    '" + serverJar + "',\n" +
1:              "    'APP.SCORES_SERVER',\n" +
1:              "    0\n" +
1:              ")\n"
1:              );
1:         Utils.executeCall
1:             (
1:              conn,
1:              "call sqlj.install_jar\n" +
1:              "(\n" +
1:              "    '" + mathJar +"',\n" +
1:              "    'APP.APACHE_COMMONS_MATH',\n" +
1:              "    0\n" +
1:              ")\n"
1:              );
1:         Utils.executeCall
1:             (
1:              conn,
1:              "call syscs_util.syscs_set_database_property\n" +
1:              "(\n" +
1:              "    'derby.database.classpath',\n" +
1:              "    'APP.SCORES_SERVER:APP.APACHE_COMMONS_MATH'\n" +
1:              ")\n"
1:              );
1: 
1:         log.logBanner
1:             ( "Creating functions..." );
1: 
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create function formatPercent\n" +
1:              "(\n" +
1:              "    score double\n" +
1:              ")\n" +
1:              "returns varchar( 7 )\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyDemo.scores.proc.Functions.formatPercent'\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create function weighQuestion\n" +
1:              "(\n" +
1:              "    difficulty int\n" +
1:              ")\n" +
1:              "returns double\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyDemo.scores.proc.Functions.weighQuestion'\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create function scoreAnswer\n" +
1:              "(\n" +
1:              "    difficulty      int,\n" +
1:              "    numberOfChoices int,\n" +
1:              "    correctChoice   int,\n" +
1:              "    actualChoice    int\n" +
1:              ")\n" +
1:              "returns double\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyDemo.scores.proc.Functions.scoreAnswer'\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create function computeAge\n" +
1:              "(\n" +
1:              "    birthday date\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "no sql\n" +
1:              "external name 'org.apache.derbyDemo.scores.proc.Functions.computeAge'\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create function getMedianTestScore\n" +
1:              "(\n" +
1:              "    testID int\n" +
1:              ")\n" +
1:              "returns double\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "reads sql data\n" +
1:              "external name " +
1:              "'org.apache.derbyDemo.scores.proc.Functions.getMedianTestScore'\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create function vetChoice\n" +
1:              "(\n" +
1:              "    actualChoice int,\n" +
1:              "    questionID   int\n" +
1:              ")\n" +
1:              "returns int\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "reads sql data\n" +
1:              "external name 'org.apache.derbyDemo.scores.proc.Functions.vetChoice'\n"
1:              );
1: 
1:         log.logBanner
1:             ( "Creating procedures..." );
1: 
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create procedure ScoreTestTaking\n" +
1:              "( in takingID int )\n" +
1:              "language java\n" +
1:              "parameter style java\n" +
1:              "modifies sql data\n" +
1:              "external name 'org.apache.derbyDemo.scores.proc.Procedures.ScoreTestTaking'\n"
1:              );
1: 
1:         log.logBanner
1:             (
1:              "Creating tables. Note the function " +
1:              "in the check constraint on QuestionTaking..." );
1: 
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create table School\n" +
1:              "(\n" +
1:              " schoolID   int primary key generated always as identity,\n" +
1:              " schoolName varchar( 20 ) not null,\n" +
1:              "\n" +
1:              " unique( schoolName )\n" +
1:              ")\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create table Student\n" +
1:              "(\n" +
1:              " studentID int primary key generated always as identity,\n" +
1:              " schoolID  int not null references School( schoolID ),\n" +
1:              " lastName  varchar( 10 ) not null,\n" +
1:              " firstName varchar( 10 ) not null,\n" +
1:              " birthday  date not null,\n" +
1:              "\n" +
1:              " unique( lastName, firstName )\n" +
1:              ")\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create table Test\n" +
1:              "(\n" +
1:              " testID   int primary key generated always as identity,\n" +
1:              " testName varchar( 20 ) not null,\n" +
1:              "\n" +
1:              " unique( testName )\n" +
1:              ")\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create table TestTaking\n" +
1:              "(\n" +
1:              " takingID   int primary key generated always as identity,\n" +
1:              " studentID  int not null references Student( studentID ),\n" +
1:              " testID     int not null references Test( testID ),\n" +
1:              " takingDate date,\n" +
1:              " score      double not null\n" +
1:              ")\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create table Question\n" +
1:              "(\n" +
1:              " questionID      int primary key " +
1:              "   generated always as identity,\n" +
1:              " testID          int not null references Test( testID ),\n" +
1:              " questionName    varchar( 10 ) not null unique,\n" +
1:              " difficulty      int not null,\n" +
1:              " numberOfChoices int not null,\n" +
1:              " correctChoice   int not null,\n" +
1:              "\n" +
1:              " check ( ( correctChoice > -1 ) " +
1:              " and ( correctChoice < numberOfChoices ) )\n" +
1:              ")\n"
1:              );
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create table QuestionTaking\n" +
1:              "(\n" +
1:              " questionID   int not null" +
1:              "  references Question( questionID ),\n" +
1:              " takingID     int not null" +
1:              "  references TestTaking( takingID ),\n" +
1:              " actualChoice int not null,\n" +
1:              "\n" +
1:              " unique( questionID, takingID ),\n" +
1:              " check ( vetChoice( actualChoice, questionID ) > 0 )\n" +
1:              ")\n"
1:              );
1: 
1:         log.logBanner( "Creating views..." );
1: 
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create view LastTaking\n" +
1:              "(\n" +
1:              "    takingID,\n" +
1:              "    studentID,\n" +
1:              "    testID\n" +
1:              ")\n" +
1:              "as select max( takingID ), studentID, testID\n" +
1:              "from TestTaking\n" +
1:              "group by studentID, testID\n"
1:              );
1: 
1:         log.logBanner
1:             (
1:              "Creating triggers. Note that the trigger " +
1:              "invokes a procedure..."
1:              );
1: 
1:         Utils.executeDDL
1:             (
1:              conn,
1:              "create trigger ScoreTestWhenDone\n" +
1:              "after update of takingDate\n" +
1:              "on TestTaking\n" +
1:              "referencing new as testTakingRow\n" +
1:              "for each row mode db2sql\n" +
1:              "call ScoreTestTaking( testTakingRow.takingID )\n"
1:              );
1:     }
1: 
1:     
1:     ////////////////////////////////////////////////////////
1:     //
1:     // PRETTY PRINITING
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /** <p>Pretty print the School table.</p> */
1:     public  void    prettyPrintSchool( Connection conn )
1:         throws SQLException
1:     {
1:         prettyPrint( conn, "select * from School order by schoolName\n" );
1:     }
1: 
1:     /** <p>Pretty print the Student table.</p> */
1:     public  void    prettyPrintStudent( Connection conn )
1:         throws SQLException
1:     {
1:         prettyPrint
1:             (
1:              conn,
1:              "select st.studentID, sc.schoolName," +
1:              " st.lastName, st.firstName, st.birthday\n" +
1:              "from Student st, School sc\n" +
1:              "where st.schoolID = sc.schoolID\n" +
1:              "order by st.lastName, st.firstName\n"
1:              );
1:     }
1: 
1:     /** <p>Pretty print the Test table.</p> */
1:     public  void    prettyPrintTest( Connection conn )
1:         throws SQLException
1:     {
1:         prettyPrint( conn, "select * from Test order by testName\n" );
1:     }
1: 
1:     /** <p>Pretty print the Question table.</p> */
1:     public  void    prettyPrintQuestion( Connection conn )
1:         throws SQLException
1:     {
1:         prettyPrint
1:             (
1:              conn,
1:              "select * from Question order by testID, questionID\n"
1:              );
1:     }
1: 
1:     /** <p>Pretty print the QuestionTaking table.</p> */
1:     public  void    prettyPrintQuestionTaking( Connection conn )
1:         throws SQLException
1:     {
1:         prettyPrint
1:             (
1:              conn,
1:              "select * from QuestionTaking order by takingID, questionID\n"
1:              );
1:     }
1: 
1:     /** <p>Pretty print the TestTaking table.</p> */
1:     public  void    prettyPrintTestTaking( Connection conn )
1:         throws SQLException
1:     {
1:         prettyPrint( conn, "select * from TestTaking order by takingID\n" );
1:     }
1: 
1:     /**
1:      * <p>
1:      * Pretty print the results of a query, given its text.
1:      * </p>
1:      */
1:     public  static  void    prettyPrint( Connection conn, String text )
1:         throws SQLException
1:     {
1:         PreparedStatement   ps = Utils.prepare( conn, text );
1:         ResultSet           rs = ps.executeQuery();
1: 
1:         prettyPrint( conn, rs );
1: 
1:         Utils.close( rs );
1:         Utils.close( ps );
1:     }
1:     
1:     /**
1:      * <p>
1:      * Print a ResultSet, using Derby's pretty-printing tool.
1:      * </p>
1:      */
1:     public  static  void    prettyPrint( Connection conn, ResultSet rs )
1:         throws SQLException
1:     {
1:         Logger      log = Logger.getLogger();
1: 
1:         JDBCDisplayUtil.DisplayResults
1:             ( log.getPrintStream(), rs, conn );
1: 
1:         log.log( "\n" );
1:     }
1: 
1:     ////////////////////////////////////////////////////////
1:     //
1:     // OTHER MINIONS
1:     //
1:     ////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Get the Data populating tool.
1:      * </p>
1:      */
1:     public  Data    getData() { return _data; }
1:     
1: }
============================================================================