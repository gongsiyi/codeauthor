1:637c1f9: /*
8:049ad6e: 
1:637c1f9: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest
1:049ad6e: 
1:637c1f9: Licensed to the Apache Software Foundation (ASF) under one or more
1:637c1f9: contributor license agreements.  See the NOTICE file distributed with
1:637c1f9: this work for additional information regarding copyright ownership.
1:637c1f9: The ASF licenses this file to You under the Apache License, Version 2.0
1:637c1f9: (the "License"); you may not use this file except in compliance with
1:637c1f9: the License.  You may obtain a copy of the License at
1:049ad6e: 
1:637c1f9: http://www.apache.org/licenses/LICENSE-2.0
1:049ad6e: 
1:637c1f9: Unless required by applicable law or agreed to in writing, software
1:637c1f9: distributed under the License is distributed on an "AS IS" BASIS,
1:637c1f9: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:637c1f9: See the License for the specific language governing permissions and
1:637c1f9: limitations under the License.
1:049ad6e: 
1:049ad6e: */
1:049ad6e:     
1:049ad6e: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1:049ad6e: 
1:049ad6e: import java.lang.reflect.Method;
1:049ad6e: import java.util.ArrayList;
1:049ad6e: import java.util.Hashtable;
1:049ad6e: import javax.naming.Context;
1:049ad6e: import javax.naming.NamingException;
1:049ad6e: import javax.naming.directory.InitialDirContext;
1:049ad6e: import javax.sql.XADataSource;
1:049ad6e: import junit.framework.Test;
1:049ad6e: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1:1ae02c9: import org.apache.derbyTesting.junit.BaseTestSuite;
1:049ad6e: import org.apache.derbyTesting.junit.J2EEDataSource;
1:049ad6e: import org.apache.derbyTesting.junit.JDBC;
1:049ad6e: import org.apache.derbyTesting.junit.JDBCDataSource;
1:049ad6e: import org.apache.derbyTesting.junit.TestConfiguration;
1:049ad6e: 
1:049ad6e: public class XAJNDITest extends BaseJDBCTestCase {
1:049ad6e:     private static String ldapServer;
1:049ad6e:     private static String ldapPort;
1:049ad6e:     private static String dnString;
1:049ad6e:     private InitialDirContext ic = getInitialDirContext();
1:049ad6e: 
1:049ad6e:     public XAJNDITest(String name) {
1:049ad6e:         super(name);
13:049ad6e:     }
1:049ad6e: 
1:049ad6e:     public static Test suite() {
1:049ad6e:         // the test requires XADataSource to run, so check for JDBC3 support
1:049ad6e:         if (JDBC.vmSupportsJDBC3()) {
1:049ad6e:             ldapServer=getSystemProperty("derbyTesting.ldapServer");
1:1ae02c9: 
1:1ae02c9:             if (ldapServer == null || ldapServer.length() < 1) {
1:1ae02c9:                 return new BaseTestSuite(
1:1ae02c9:                     "XAJNDITest requires property derbyTesting.ldapServer " +
1:1ae02c9:                     "set, eg: -DderbyTesting.ldapServer=myldapserver." +
1:1ae02c9:                     "myorg.org");
1:1ae02c9:             }
1:1ae02c9: 
1:049ad6e:             ldapPort=getSystemProperty("derbyTesting.ldapPort");
1:1ae02c9: 
1:1ae02c9:             if (ldapPort == null || ldapPort.length() < 1) {
1:1ae02c9:                 return new BaseTestSuite(
1:1ae02c9:                     "XAJNDITest requires property derbyTesting.ldapPort " +
1:1ae02c9:                     "set, eg: -DderbyTesting.ldapPort=333");
1:1ae02c9:             }
1:1ae02c9: 
1:049ad6e:             dnString=getSystemProperty("derbyTesting.dnString");
1:1ae02c9: 
1:1ae02c9:             if (dnString == null || dnString.length() < 1) {
1:1ae02c9:                 return new BaseTestSuite(
1:1ae02c9:                     "XAJNDITest requires property derbyTesting.dnString " +
1:1ae02c9:                     "for setting o=, eg: -DderbyTesting.dnString=myJNDIstring");
1:1ae02c9:             }
1:1ae02c9: 
1:2327361:             return TestConfiguration.defaultSuite(XAJNDITest.class);
1:049ad6e:         }
1:1ae02c9:         return new BaseTestSuite("XAJNDITest cannot run without XA support");
1:049ad6e:     }
1:049ad6e:     
1:049ad6e:     public void tearDown() throws Exception {
1:049ad6e:         ldapServer=null;
1:049ad6e:         ldapPort=null;
1:049ad6e:         // need to hold on to dnString value and ic as the fixture runs
1:049ad6e:         // twice (embedded & networkserver) and they're used inside it
1:049ad6e:         super.tearDown();
1:049ad6e:     }
1:049ad6e: 
1:049ad6e:     private InitialDirContext getInitialDirContext()
7:049ad6e:     {
2:049ad6e:         try {
1:e18f54b:             Hashtable<String, String> env = new Hashtable<String, String>();
1:7b9c4ca:             // using properties - these will have been passed in.
1:7b9c4ca:             String ldapContextFactory=getSystemProperty("derbyTesting.ldapContextFactory");
1:7b9c4ca:             if (ldapContextFactory == null || ldapContextFactory.length() < 1)
1:7b9c4ca:                 env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
1:7b9c4ca:             else
1:7b9c4ca:                 env.put(Context.INITIAL_CONTEXT_FACTORY, ldapContextFactory);
1:049ad6e:             env.put(Context.PROVIDER_URL, "ldap://" + ldapServer + ":" + ldapPort);
1:049ad6e:             env.put(Context.SECURITY_AUTHENTICATION, "simple");
1:049ad6e:             return new InitialDirContext(env);
1:049ad6e:         } catch (NamingException ne) {
1:049ad6e:             fail("naming exception ");
2:049ad6e:             return null;
1:049ad6e:         }
1:049ad6e:     }
1:049ad6e:     
1:049ad6e:     public void testCompareXADataSourcewithJNDIDataSource()
1:049ad6e:     throws Exception
1:049ad6e:     {
1:049ad6e:             XADataSource xads = J2EEDataSource.getXADataSource();
1:049ad6e:             String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:049ad6e:             JDBCDataSource.setBeanProperty(xads, "databaseName", dbName);
1:049ad6e:             JDBCDataSource.setBeanProperty(xads, "createDatabase", "create");
1:049ad6e:             JDBCDataSource.setBeanProperty(xads, "description", "XA DataSource");
1:049ad6e:             
1:049ad6e:             ic.rebind("cn=compareDS, o=" + dnString, xads);
1:049ad6e:             javax.sql.XADataSource ads =
1:049ad6e:                 (javax.sql.XADataSource)ic.lookup("cn=compareDS, o=" + dnString);
1:6a5890f: 
1:6a5890f:             // Embedded data sources implement equals(), so use it to check
1:6a5890f:             // that the two data sources are equal.
1:049ad6e:             if (usingEmbedded())
1:049ad6e:             {
1:049ad6e:                 assertEquals(xads, ads);
1:049ad6e:             }
1:6a5890f: 
1:6a5890f:             // Client data sources don't implement equals(), so compare each
1:6a5890f:             // property manually. And by the way, we don't trust that equals()
1:6a5890f:             // in embedded data sources checks all the properties, so do a
1:6a5890f:             // full check for embedded as well.
1:6a5890f:             String[] orgprops = getPropertyBeanList(xads);
1:6a5890f:             String[] bindprops = getPropertyBeanList(ads);
1:6a5890f:             assertEquals(orgprops.length, bindprops.length);
1:6a5890f: 
1:6a5890f:             // Check that all properties are equal.
1:6a5890f:             for (int i=0;i<orgprops.length;i++){
1:6a5890f:                 assertEquals(orgprops[i], bindprops[i]);
1:6a5890f:                 assertEquals(
1:6a5890f:                         JDBCDataSource.getBeanProperty(xads, orgprops[i]),
1:6a5890f:                         JDBCDataSource.getBeanProperty(ads, bindprops[i]));
1:049ad6e:             }
1:6a5890f: 
1:049ad6e:             // modify something essential of the original XADataSource
1:049ad6e:             JDBCDataSource.clearStringBeanProperty(xads, "createDatabase");
1:049ad6e:             
1:049ad6e:             // Now the ads is no longer the same
1:049ad6e:             assertFalse(xads.equals(ads));
1:049ad6e:     }
1:049ad6e: 
2:049ad6e:     /**
1:049ad6e:      * Obtains a list of bean properties through reflection.
1:049ad6e:      * 
1:049ad6e:      *
1:049ad6e:      * @param ds the data source to investigate
1:049ad6e:      * @return A list of bean property names.
1:049ad6e:      */
1:049ad6e:     private static String[] getPropertyBeanList(Object ds) {
1:049ad6e:         Method[] allMethods = ds.getClass().getMethods();
1:e18f54b:         ArrayList<String> properties = new ArrayList<String>();
1:049ad6e: 
1:049ad6e:         for (int i = 0; i < allMethods.length; i++) {
1:049ad6e:             Method method = allMethods[i];
1:049ad6e:             String methodName = method.getName();
1:049ad6e:             // Need at least getXX
1:049ad6e:             if (methodName.length() < 5 || !methodName.startsWith("get") ||
1:049ad6e:                     method.getParameterTypes().length != 0) {
1:049ad6e:                 continue;
1:049ad6e:             }
1:049ad6e: 
1:049ad6e:             Class rt = method.getReturnType();
1:049ad6e:             if (rt.equals(Integer.TYPE) || rt.equals(String.class) ||
1:049ad6e:                     rt.equals(Boolean.TYPE) || rt.equals(Short.TYPE) ||
1:049ad6e:                     rt.equals(Long.TYPE)) {
1:049ad6e:                 // Valid Java Bean property.
1:049ad6e:                 // Convert name:
1:049ad6e:                 //    getPassword -> password
1:049ad6e:                 //    getRetrieveMessageText -> retrieveMessageText
1:049ad6e:                 String beanName = methodName.substring(3,4).toLowerCase()
1:049ad6e:                         + methodName.substring(4);
1:049ad6e: 
1:049ad6e:                 properties.add(beanName);
1:049ad6e:             } else {
1:049ad6e:                 assertFalse("Method '" + methodName + "' with primitive " +
1:049ad6e:                     "return type not supported - update test!!",
1:049ad6e:                     rt.isPrimitive());
1:049ad6e:             }
1:049ad6e:         }
1:e18f54b: 
1:e18f54b:         return properties.toArray(new String[properties.size()]);
1:1ae02c9:     }
1:049ad6e: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:1ae02c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derbyTesting.junit.BaseTestSuite;
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (ldapServer == null || ldapServer.length() < 1) {
1:                 return new BaseTestSuite(
1:                     "XAJNDITest requires property derbyTesting.ldapServer " +
1:                     "set, eg: -DderbyTesting.ldapServer=myldapserver." +
1:                     "myorg.org");
1:             }
1: 
1: 
1:             if (ldapPort == null || ldapPort.length() < 1) {
1:                 return new BaseTestSuite(
1:                     "XAJNDITest requires property derbyTesting.ldapPort " +
1:                     "set, eg: -DderbyTesting.ldapPort=333");
1:             }
1: 
1: 
1:             if (dnString == null || dnString.length() < 1) {
1:                 return new BaseTestSuite(
1:                     "XAJNDITest requires property derbyTesting.dnString " +
1:                     "for setting o=, eg: -DderbyTesting.dnString=myJNDIstring");
1:             }
1: 
1:         return new BaseTestSuite("XAJNDITest cannot run without XA support");
/////////////////////////////////////////////////////////////////////////
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e18f54b
/////////////////////////////////////////////////////////////////////////
1:             Hashtable<String, String> env = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> properties = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1: 
1:         return properties.toArray(new String[properties.size()]);
commit:6a5890f
/////////////////////////////////////////////////////////////////////////
1: 
1:             // Embedded data sources implement equals(), so use it to check
1:             // that the two data sources are equal.
1: 
1:             // Client data sources don't implement equals(), so compare each
1:             // property manually. And by the way, we don't trust that equals()
1:             // in embedded data sources checks all the properties, so do a
1:             // full check for embedded as well.
1:             String[] orgprops = getPropertyBeanList(xads);
1:             String[] bindprops = getPropertyBeanList(ads);
1:             assertEquals(orgprops.length, bindprops.length);
1: 
1:             // Check that all properties are equal.
1:             for (int i=0;i<orgprops.length;i++){
1:                 assertEquals(orgprops[i], bindprops[i]);
1:                 assertEquals(
1:                         JDBCDataSource.getBeanProperty(xads, orgprops[i]),
1:                         JDBCDataSource.getBeanProperty(ads, bindprops[i]));
1: 
/////////////////////////////////////////////////////////////////////////
author:Myrna van Lunteren
-------------------------------------------------------------------------------
commit:7b9c4ca
/////////////////////////////////////////////////////////////////////////
1:             // using properties - these will have been passed in.
1:             String ldapContextFactory=getSystemProperty("derbyTesting.ldapContextFactory");
1:             if (ldapContextFactory == null || ldapContextFactory.length() < 1)
1:                 env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
1:             else
1:                 env.put(Context.INITIAL_CONTEXT_FACTORY, ldapContextFactory);
commit:2327361
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return TestConfiguration.defaultSuite(XAJNDITest.class);
commit:049ad6e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.derbyTesting.functionTests.tests.jdbcapi;
1: 
0: import java.io.File;
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.directory.InitialDirContext;
1: import javax.sql.XADataSource;
1: 
1: import junit.framework.Test;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.derbyTesting.junit.BaseJDBCTestCase;
1: import org.apache.derbyTesting.junit.J2EEDataSource;
1: import org.apache.derbyTesting.junit.JDBC;
1: import org.apache.derbyTesting.junit.JDBCDataSource;
0: import org.apache.derbyTesting.junit.SecurityManagerSetup;
0: import org.apache.derbyTesting.junit.SupportFilesSetup;
1: import org.apache.derbyTesting.junit.TestConfiguration;
1: 
1: public class XAJNDITest extends BaseJDBCTestCase {
1:     private static String ldapServer;
1:     private static String ldapPort;
1:     private static String dnString;
1:     private InitialDirContext ic = getInitialDirContext();
1: 
1: 
0:     //to create own policy file
0:     private static String POLICY_FILE_NAME = 
0:         "functionTests/tests/jdbcapi/XAJNDITest.policy";
0:     private static String TARGET_POLICY_FILE_NAME = "derby_tests.policy";
1: 
1:     public XAJNDITest(String name) {
1:         super(name);
1:     }
1: 
1:     public static Test suite() {
1:         // the test requires XADataSource to run, so check for JDBC3 support
1:         if (JDBC.vmSupportsJDBC3()) {
1:             ldapServer=getSystemProperty("derbyTesting.ldapServer");
0:             if (ldapServer == null || ldapServer.length() < 1)
0:                 return new TestSuite("XAJNDITest requires property derbyTesting.ldapServer set, eg: -DderbyTesting.ldapServer=myldapserver.myorg.org");
1:             ldapPort=getSystemProperty("derbyTesting.ldapPort");
0:             if (ldapPort == null || ldapPort.length() < 1)
0:                 return new TestSuite("XAJNDITest requires property derbyTesting.ldapPort set, eg: -DderbyTesting.ldapPort=333");
1:             dnString=getSystemProperty("derbyTesting.dnString");
0:             if (dnString == null || dnString.length() < 1)
0:                 return new TestSuite("XAJNDITest requires property derbyTesting.dnString for setting o=, eg: -DderbyTesting.dnString=myJNDIstring");
1:             
0:             Test test = decorateWithPolicy
0:             (TestConfiguration.defaultSuite(XAJNDITest.class));
0:             return test;            
1:         }
0:         return new TestSuite("XAJNDITest cannot run without XA support");
1:     }
1:     
0:     // grant ALL FILES execute, and getPolicy permissions, as well
0:     // as resolve/connect for the ldap server identified with the property
0:     private static Test decorateWithPolicy(Test test) {
0:         String ldapPolicyName = new XAJNDITest("test").makeServerPolicyName();
0:         //
0:         // Install a security manager using the initial policy file.
0:         //
0:         test = new SecurityManagerSetup(test,ldapPolicyName );
0:         // Copy over the policy file we want to use.
0:         //
0:         test = new SupportFilesSetup(
0:             test, null, new String[] {POLICY_FILE_NAME},
0:             null, new String[] {TARGET_POLICY_FILE_NAME}
0:         );
0:         return test;
1:     }
1: 
1: 
1:     /**
0:      * Construct the name of the server policy file.
1:      */
0:     private String makeServerPolicyName()
1:     {
1:         try {
0:             String  userDir = getSystemProperty( "user.dir" );
0:             String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
0:             File      file = new File( fileName );
0:             String  urlString = file.toURL().toExternalForm();
1: 
0:             return urlString;
1:         }
0:         catch (Exception e)
1:         {
0:             System.out.println( "Unexpected exception caught by makeServerPolicyName(): " + e );
1: 
1:             return null;
1:         }
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         ldapServer=null;
1:         ldapPort=null;
1:         // need to hold on to dnString value and ic as the fixture runs
1:         // twice (embedded & networkserver) and they're used inside it
0:         POLICY_FILE_NAME=null;
0:         TARGET_POLICY_FILE_NAME=null;
1:         super.tearDown();
1:     }
1: 
1:     private InitialDirContext getInitialDirContext()
1:     {
1:         try {
0:             Hashtable env = new Hashtable();
0:             env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
0:             // using a property - these will have to be passed in somehow.
1:             env.put(Context.PROVIDER_URL, "ldap://" + ldapServer + ":" + ldapPort);
1:             env.put(Context.SECURITY_AUTHENTICATION, "simple");
1:             return new InitialDirContext(env);
1:         } catch (NamingException ne) {
1:             fail("naming exception ");
1:             return null;
1:         }
1:     }
1:     
1:     public void testCompareXADataSourcewithJNDIDataSource()
1:     throws Exception
1:     {
1:             XADataSource xads = J2EEDataSource.getXADataSource();
1:             String dbName = TestConfiguration.getCurrent().getDefaultDatabaseName();
1:             JDBCDataSource.setBeanProperty(xads, "databaseName", dbName);
1:             JDBCDataSource.setBeanProperty(xads, "createDatabase", "create");
1:             JDBCDataSource.setBeanProperty(xads, "description", "XA DataSource");
1:             
1:             ic.rebind("cn=compareDS, o=" + dnString, xads);
1:             javax.sql.XADataSource ads =
1:                 (javax.sql.XADataSource)ic.lookup("cn=compareDS, o=" + dnString);
0:             // At this point, the directly created xads should be matching the looked up one.
1:             if (usingEmbedded())
1:             {
1:                 assertEquals(xads, ads);
1:             }
0:             else
1:             {
0:                 // DERBY-3669; with DerbyNetClient, the original and looked-up
0:                 // xadatasource are not the same...So, compare piece by piece:
0:                 // When fixed, rest of else can be replaced by uncommenting 
0:                 // next line
0:                 //assertEquals(xads,ads);
0:                 String[] orgprops = getPropertyBeanList(xads);
0:                 String[] bindprops = getPropertyBeanList(ads);
0:                 assertEquals(orgprops.length, bindprops.length);
0:                 // following is actually checked in DataSourceReferenceTest
0:                 for (int i=0;i<orgprops.length;i++){
0:                     assertEquals(orgprops[i], bindprops[i]);
1:                 }
0:                 // We have the same properties, now compare the values
0:                 assertEqualPropValues(xads,ads, orgprops);
1:             }
1:             
1:             // modify something essential of the original XADataSource
1:             JDBCDataSource.clearStringBeanProperty(xads, "createDatabase");
1:             
1:             // Now the ads is no longer the same
1:             assertFalse(xads.equals(ads));
1:     }
1: 
0:     public void assertEqualPropValues(
0:             XADataSource orgds, XADataSource lookedupds, String[] props)
0:     throws Exception {
0:         for (int i=0;i<props.length;i++){
0:             if (JDBCDataSource.getBeanProperty(orgds, props[i]) != null && 
0:                     JDBCDataSource.getBeanProperty(lookedupds, props[i]) != null)
1:             {
0:                 assertEquals(
0:                         JDBCDataSource.getBeanProperty(orgds, props[i]),
0:                         JDBCDataSource.getBeanProperty(lookedupds, props[i])
0:                 );
1:             }
0:             else {
0:                 if (JDBCDataSource.getBeanProperty(lookedupds,props[i]) != null)
1:                 {
0:                     assertNull(JDBCDataSource.getBeanProperty(orgds,props[i]));
1:                 }
0:                 else
1:                 {
0:                     assertNull(JDBCDataSource.getBeanProperty(orgds,props[i]));
0:                     assertNull(JDBCDataSource.getBeanProperty(lookedupds,props[i]));
1:                 }
1:             }
1:         }
1:     }
1:     
1:     /**
1:      * Obtains a list of bean properties through reflection.
1:      * 
1:      *
1:      * @param ds the data source to investigate
1:      * @return A list of bean property names.
1:      */
1:     private static String[] getPropertyBeanList(Object ds) {
1:         Method[] allMethods = ds.getClass().getMethods();
0:         ArrayList properties = new ArrayList();
1: 
1:         for (int i = 0; i < allMethods.length; i++) {
1:             Method method = allMethods[i];
1:             String methodName = method.getName();
1:             // Need at least getXX
1:             if (methodName.length() < 5 || !methodName.startsWith("get") ||
1:                     method.getParameterTypes().length != 0) {
1:                 continue;
1:             }
1: 
1:             Class rt = method.getReturnType();
1:             if (rt.equals(Integer.TYPE) || rt.equals(String.class) ||
1:                     rt.equals(Boolean.TYPE) || rt.equals(Short.TYPE) ||
1:                     rt.equals(Long.TYPE)) {
1:                 // Valid Java Bean property.
1:                 // Convert name:
1:                 //    getPassword -> password
1:                 //    getRetrieveMessageText -> retrieveMessageText
1:                 String beanName = methodName.substring(3,4).toLowerCase()
1:                         + methodName.substring(4);
1: 
1:                 properties.add(beanName);
1:             } else {
1:                 assertFalse("Method '" + methodName + "' with primitive " +
1:                     "return type not supported - update test!!",
1:                     rt.isPrimitive());
1:             }
1:         }
0:         return (String[])properties.toArray(new String[properties.size()]);
1:     }
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:637c1f9
/////////////////////////////////////////////////////////////////////////
1: /*
0: 
1: Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest
0: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
0: 
1: http://www.apache.org/licenses/LICENSE-2.0
0: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
0: 
0: */
0:     
============================================================================