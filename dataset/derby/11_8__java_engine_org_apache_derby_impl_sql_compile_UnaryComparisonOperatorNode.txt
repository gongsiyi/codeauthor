1:eac0369: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
13:eac0369: 
1:eac0369:  */
1:eac0369: 
1:eac0369: package	org.apache.derby.impl.sql.compile;
1:eac0369: 
1:f33fbaf: import java.util.List;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:05623b6: import org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface;
1:eac0369: import org.apache.derby.iapi.sql.compile.Optimizable;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1:eac0369: import org.apache.derby.iapi.store.access.ScanController;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:eac0369: import org.apache.derby.iapi.util.JBitSet;
1:eac0369: 
2:eac0369: /**
1:eac0369:  * This node is the superclass  for all unary comparison operators, such as is null
1:eac0369:  * and is not null.
2:eac0369:  *
1:eac0369:  */
1:eac0369: 
1:e7e328d: public abstract class UnaryComparisonOperatorNode extends UnaryOperatorNode
1:eac0369: {
1:3bb140c:     UnaryComparisonOperatorNode(ValueNode operator, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(operator, cm);
1:3bb140c:     }
1:3bb140c: 
1:eac0369: 	/**
1:eac0369: 	 * Bind this comparison operator.  All that has to be done for binding
1:eac0369: 	 * a comparison operator is to bind the operand and set the result type 
1:eac0369: 	 * to SQLBoolean.
1:eac0369: 	 *
1:eac0369: 	 * @param fromList			The query's FROM list
1:eac0369: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
1:09c2697:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:eac0369: 	 *
1:eac0369: 	 * @return	The new top of the expression tree.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
2:eac0369: 			throws StandardException
1:eac0369: 	{
1:09c2697:         bindOperand(fromList, subqueryList, aggregates);
1:eac0369: 
1:eac0369: 		/* Set type info for this node */
1:eac0369: 		bindComparisonOperator();
1:eac0369: 
2:eac0369: 		return this;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Set the type info for this node.  This method is useful both during 
1:eac0369: 	 * binding and when we generate nodes within the language module outside 
1:eac0369: 	 * of the parser.
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     void bindComparisonOperator()
1:eac0369: 			throws StandardException
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** Set the result type of this comparison operator based on the
1:eac0369: 		** operand.  The result type is always SQLBoolean and always
1:eac0369: 		** non-nullable.
1:eac0369: 		*/
1:eac0369: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, false));
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1:eac0369: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1:eac0369: 	 * ComparisonOperators and boolean expressions.  We invert 
1:eac0369: 	 * ComparisonOperators and replace boolean expressions with 
1:eac0369: 	 * boolean expression = false.
1:eac0369: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1:eac0369: 	 * still could be NotNodes left in the tree.
1:eac0369: 	 *
1:eac0369: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1:eac0369: 	 *							
1:eac0369: 	 *
1:eac0369: 	 * @return		The modified expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:3bb140c:     @Override
1:eac0369: 	ValueNode eliminateNots(boolean underNotNode) 
1:eac0369: 					throws StandardException
1:eac0369: 	{
1:eac0369: 		if (! underNotNode)
1:eac0369: 		{
1:eac0369: 			return this;
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Convert the BinaryComparison operator to its negation */
1:eac0369: 		return getNegation(operand);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Negate the comparison.
1:eac0369: 	 *
1:eac0369: 	 * @param operand	The operand of the comparison operator
1:eac0369: 	 *
1:eac0369: 	 * @return BinaryOperatorNode	The negated expression
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:e7e328d: 	abstract UnaryOperatorNode getNegation(ValueNode operand)
1:e7e328d: 				throws StandardException;
1:eac0369: 
1:eac0369: 	/* RelationalOperator interface */
1:eac0369: 
2:eac0369: 	/** @see RelationalOperator#getColumnOperand */
2:eac0369: 	public ColumnReference getColumnOperand(
1:eac0369: 								Optimizable optTable,
2:eac0369: 								int columnPosition)
1:eac0369: 	{
1:eac0369: 		FromBaseTable	ft;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(optTable instanceof FromBaseTable);
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		ft = (FromBaseTable) optTable;
1:eac0369: 		ColumnReference	cr;
1:eac0369: 		if (operand instanceof ColumnReference)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** The operand is a column reference.
1:eac0369: 			** Is it the correct column?
1:eac0369: 			*/
1:eac0369: 			cr = (ColumnReference) operand;
1:0be2d6e: 			if (cr.getTableNumber() == ft.getTableNumber())
1:eac0369: 			{
1:eac0369: 				/* The table is correct, how about the column position? */
1:eac0369: 				if (cr.getSource().getColumnPosition() == columnPosition)
1:eac0369: 				{
1:eac0369: 					/* We've found the correct column - return it */
1:eac0369: 					return cr;
1:eac0369: 				}
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Neither side is the column we're looking for */
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#getColumnOperand */
1:eac0369: 	public ColumnReference getColumnOperand(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		ColumnReference	cr;
1:eac0369: 
1:eac0369: 		if (operand instanceof ColumnReference)
1:eac0369: 		{
1:eac0369: 			/*
1:eac0369: 			** The operand is a column reference.
1:eac0369: 			** Is it the correct column?
1:eac0369: 			*/
1:eac0369: 			cr = (ColumnReference) operand;
1:eac0369: 			if (cr.getTableNumber() == optTable.getTableNumber())
1:eac0369: 			{
1:eac0369: 				/* We've found the correct column - return it */
1:eac0369: 				return cr;
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* Not the column we're looking for */
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:0be2d6e: 	/** @see RelationalOperator#getOperand */
1:0be2d6e: 	public ValueNode getOperand(ColumnReference cRef, int refSetSize,
1:0be2d6e: 		boolean otherSide)
1:eac0369: 	{
1:0be2d6e: 		if (otherSide)
1:0be2d6e: 		// there is no "other" side for Unary, so just return null.
1:0be2d6e: 			return null;
1:eac0369: 
1:0be2d6e: 		ColumnReference	cr;
1:0be2d6e: 		if (operand instanceof ColumnReference)
1:eac0369: 		{
1:0be2d6e: 			/*
1:0be2d6e: 			** The operand is a column reference.
1:0be2d6e: 			** Is it the correct column?
1:eac0369: 			*/
1:0be2d6e: 			JBitSet cRefTables = new JBitSet(refSetSize);
1:0be2d6e: 			JBitSet crTables = new JBitSet(refSetSize);
1:0be2d6e: 			BaseTableNumbersVisitor btnVis =
1:0be2d6e: 				new BaseTableNumbersVisitor(crTables);
1:eac0369: 
1:0be2d6e: 			cr = (ColumnReference) operand;
1:0be2d6e: 			try {
1:0be2d6e: 				cr.accept(btnVis);
1:0be2d6e: 				btnVis.setTableMap(cRefTables);
1:0be2d6e: 				cRef.accept(btnVis);
1:0be2d6e: 			} catch (StandardException se) {
1:eac0369:             	if (SanityManager.DEBUG)
3:0be2d6e:             	{
1:0be2d6e:             	    SanityManager.THROWASSERT("Failed when trying to " +
1:e7d2a42:             	        "find base table number for column reference check:",
1:e7d2a42: 						se);
1:eac0369:             	}
1:eac0369: 			}
1:0be2d6e: 			crTables.and(cRefTables);
1:0be2d6e: 			if (crTables.getFirstSetBit() != -1)
1:0be2d6e: 			{
1:0be2d6e: 				/*
1:0be2d6e: 				** The table is correct, how about the column position?
1:eac0369: 				*/
1:0be2d6e: 				if (cr.getSource().getColumnPosition() ==
1:0be2d6e: 					cRef.getColumnNumber())
1:0be2d6e: 				{
1:0be2d6e: 					/* We've found the correct column - return it. */
1:0be2d6e: 					return operand;
3:0be2d6e: 				}
1:0be2d6e: 			}
1:0be2d6e: 		}
1:eac0369: 
1:0be2d6e: 		/* Not the column we're looking for */
1:0be2d6e: 		return null;
1:0be2d6e: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#selfComparison */
1:eac0369: 	public boolean selfComparison(ColumnReference cr)
1:eac0369: 	{
1:eac0369: 		ValueNode	otherSide;
1:eac0369: 		JBitSet		tablesReferenced;
1:eac0369: 
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.ASSERT(cr == operand,
1:eac0369: 				"ColumnReference not found in IsNullNode.");
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		/* An IsNullNode is not a comparison with any other column */
1:eac0369: 		return false;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see RelationalOperator#getExpressionOperand
1:eac0369: 	 */
1:eac0369: 	public ValueNode getExpressionOperand(int tableNumber,
1:0be2d6e: 										  int columnNumber,
1:05623b6: 										  Optimizable ft)
1:eac0369: 	{
1:eac0369: 		return null;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see RelationalOperator#generateExpressionOperand
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:05623b6:     public void generateExpressionOperand(Optimizable optTable,
1:05623b6:                                           int columnPosition,
1:05623b6:                                           ExpressionClassBuilderInterface acbi,
1:05623b6:                                           MethodBuilder mb)
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:05623b6:         ExpressionClassBuilder acb = (ExpressionClassBuilder) acbi;
1:ba7683c: 		acb.generateNull(mb, operand.getTypeCompiler(), 
1:ba7683c: 				operand.getTypeServices().getCollationType());
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#getStartOperator */
1:eac0369: 	public int getStartOperator(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.THROWASSERT(
1:eac0369: 							"getStartOperator not expected to be called for " +
1:eac0369: 							this.getClass().getName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return ScanController.GE;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#getStopOperator */
1:eac0369: 	public int getStopOperator(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		if (SanityManager.DEBUG)
1:eac0369: 		{
1:eac0369: 			SanityManager.THROWASSERT(
1:eac0369: 							"getStopOperator not expected to be called for " +
1:eac0369: 							this.getClass().getName());
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		return ScanController.GT;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#generateOrderedNulls */
1:eac0369: 	public void generateOrderedNulls(MethodBuilder mb)
1:eac0369: 	{
1:eac0369: 		mb.push(true);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * @see RelationalOperator#generateQualMethod
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException		Thrown on error
1:eac0369: 	 */
1:05623b6:     public void generateQualMethod(ExpressionClassBuilderInterface acbi,
1:eac0369: 										MethodBuilder mb,
1:eac0369: 										Optimizable optTable)
1:eac0369: 						throws StandardException
1:eac0369: 	{
1:05623b6:         ExpressionClassBuilder acb = (ExpressionClassBuilder) acbi;
1:eac0369: 		MethodBuilder qualMethod = acb.newUserExprFun();
1:eac0369: 
1:eac0369: 		/* Generate a method that returns that expression */
1:ba7683c: 		acb.generateNull(qualMethod, operand.getTypeCompiler(),
1:ba7683c: 				operand.getTypeServices().getCollationType());
1:eac0369: 		qualMethod.methodReturn();
1:eac0369: 		qualMethod.complete();
1:eac0369: 
1:eac0369: 		/* Return an expression that evaluates to the GeneratedMethod */
1:eac0369: 		acb.pushMethodReference(mb, qualMethod);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#generateAbsoluteColumnId */
1:eac0369: 	public void generateAbsoluteColumnId(MethodBuilder mb,
1:eac0369: 										Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		// Get the absolute 0-based column position for the column
1:eac0369: 		int columnPosition = getAbsoluteColumnPosition(optTable);
1:eac0369: 
1:eac0369: 		mb.push(columnPosition);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#generateRelativeColumnId */
1:eac0369: 	public void generateRelativeColumnId(MethodBuilder mb,
1:eac0369: 											   Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		// Get the absolute 0-based column position for the column
1:eac0369: 		int columnPosition = getAbsoluteColumnPosition(optTable);
1:eac0369: 		// Convert the absolute to the relative 0-based column position
1:eac0369: 		columnPosition = optTable.convertAbsoluteToRelativeColumnPosition(
1:eac0369: 								columnPosition);
1:eac0369: 
1:eac0369: 		mb.push(columnPosition);
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 	 * Get the absolute 0-based column position of the ColumnReference from 
1:eac0369: 	 * the conglomerate for this Optimizable.
1:eac0369: 	 *
1:eac0369: 	 * @param optTable	The Optimizable
1:eac0369: 	 *
1:eac0369: 	 * @return The absolute 0-based column position of the ColumnReference
1:eac0369: 	 */
1:eac0369: 	private int getAbsoluteColumnPosition(Optimizable optTable)
1:eac0369: 	{
1:eac0369: 		ColumnReference	cr = (ColumnReference) operand;
1:eac0369: 		int columnPosition;
1:eac0369: 		ConglomerateDescriptor bestCD;
1:eac0369: 
1:eac0369: 		/* Column positions are one-based, store is zero-based */
1:eac0369: 		columnPosition = cr.getSource().getColumnPosition();
1:eac0369: 
1:eac0369: 		bestCD =
1:eac0369: 			optTable.getTrulyTheBestAccessPath().getConglomerateDescriptor();
1:eac0369: 
1:eac0369: 		/*
1:eac0369: 		** If it's an index, find the base column position in the index
1:eac0369: 		** and translate it to an index column position.
1:eac0369: 		*/
1:eac0369: 		if (bestCD.isIndex())
1:eac0369: 		{
1:eac0369: 			columnPosition = bestCD.getIndexDescriptor().
1:5c04fbc: 			  getKeyColumnPosition(columnPosition);
1:eac0369: 
1:eac0369: 			if (SanityManager.DEBUG)
1:eac0369: 			{
1:eac0369: 				SanityManager.ASSERT(columnPosition > 0,
1:eac0369: 					"Base column not found in index");
1:eac0369: 			}
1:eac0369: 		}
1:eac0369: 
1:eac0369: 		// return the 0-based column position
1:eac0369: 		return columnPosition - 1;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#orderedNulls */
1:eac0369: 	public boolean orderedNulls()
1:eac0369: 	{
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** @see RelationalOperator#isQualifier */
1:0be2d6e: 	public boolean isQualifier(Optimizable optTable, boolean forPush)
1:eac0369: 	{
1:eac0369: 		/*
1:eac0369: 		** It's a Qualifier if the operand is a ColumnReference referring
1:eac0369: 		** to a column in the given Optimizable table.
1:eac0369: 		*/
1:eac0369: 		if ( ! (operand instanceof ColumnReference))
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		ColumnReference cr = (ColumnReference) operand;
1:eac0369: 		FromTable ft = (FromTable) optTable;
1:eac0369: 
1:eac0369: 		if (cr.getTableNumber() != ft.getTableNumber())
1:eac0369: 			return false;
1:eac0369: 
1:eac0369: 		return true;
1:eac0369: 	}
1:eac0369: 
1:eac0369: 	/** 
1:eac0369: 	 * @see RelationalOperator#getOrderableVariantType 
1:eac0369: 	 *
1:eac0369: 	 * @exception StandardException	thrown on error
1:eac0369: 	 */
1:eac0369: 	public int getOrderableVariantType(Optimizable optTable) 
1:eac0369: 		throws StandardException
1:eac0369: 	{
1:eac0369: 		return operand.getOrderableVariantType();
1:eac0369: 	}
1:eac0369: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
/////////////////////////////////////////////////////////////////////////
1:     UnaryComparisonOperatorNode(ValueNode operator, ContextManager cm)
1:             throws StandardException {
1:         super(operator, cm);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     void bindComparisonOperator()
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:         FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
commit:5c04fbc
/////////////////////////////////////////////////////////////////////////
1: 			  getKeyColumnPosition(columnPosition);
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:05623b6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface;
/////////////////////////////////////////////////////////////////////////
1: 										  Optimizable ft)
/////////////////////////////////////////////////////////////////////////
1:     public void generateExpressionOperand(Optimizable optTable,
1:                                           int columnPosition,
1:                                           ExpressionClassBuilderInterface acbi,
1:                                           MethodBuilder mb)
1:         ExpressionClassBuilder acb = (ExpressionClassBuilder) acbi;
/////////////////////////////////////////////////////////////////////////
1:     public void generateQualMethod(ExpressionClassBuilderInterface acbi,
1:         ExpressionClassBuilder acb = (ExpressionClassBuilder) acbi;
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:      * @param aggregates        The aggregate list being built as we find AggregateNodes
1:     ValueNode bindExpression(
0:         FromList fromList, SubqueryList subqueryList, List aggregates)
1:         bindOperand(fromList, subqueryList, aggregates);
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		List aggregateVector)
commit:e7e328d
/////////////////////////////////////////////////////////////////////////
1: public abstract class UnaryComparisonOperatorNode extends UnaryOperatorNode
/////////////////////////////////////////////////////////////////////////
1: 	abstract UnaryOperatorNode getNegation(ValueNode operand)
1: 				throws StandardException;
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1:             	        "find base table number for column reference check:",
1: 						se);
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:3233189
/////////////////////////////////////////////////////////////////////////
0: 		bindOperand(fromList, subqueryList, 
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package	org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.sql.compile.Optimizable;
1: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
1: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
1: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
1: import org.apache.derby.iapi.store.access.ScanController;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
1: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
1: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
1: 
1: import org.apache.derby.iapi.util.JBitSet;
1: 
0: import java.sql.Types;
1: 
0: import java.util.Vector;
1: 
1: /**
1:  * This node is the superclass  for all unary comparison operators, such as is null
1:  * and is not null.
1:  *
0:  * @author Jerry Brenner
1:  */
1: 
0: public class UnaryComparisonOperatorNode extends UnaryOperatorNode
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 	 * Bind this comparison operator.  All that has to be done for binding
1: 	 * a comparison operator is to bind the operand and set the result type 
1: 	 * to SQLBoolean.
1: 	 *
1: 	 * @param fromList			The query's FROM list
1: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
1: 	 *
1: 	 * @return	The new top of the expression tree.
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
1: 			throws StandardException
1: 	{
0: 		super.bindExpression(fromList, subqueryList, 
0: 							 aggregateVector);
1: 
1: 		/* Set type info for this node */
1: 		bindComparisonOperator();
1: 
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Set the type info for this node.  This method is useful both during 
1: 	 * binding and when we generate nodes within the language module outside 
1: 	 * of the parser.
1: 	 *
0: 	 * @return	Nothing
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void bindComparisonOperator()
1: 			throws StandardException
1: 	{
1: 		/*
1: 		** Set the result type of this comparison operator based on the
1: 		** operand.  The result type is always SQLBoolean and always
1: 		** non-nullable.
1: 		*/
1: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, false));
1: 	}
1: 
1: 	/**
1: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
1: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
1: 	 * ComparisonOperators and boolean expressions.  We invert 
1: 	 * ComparisonOperators and replace boolean expressions with 
1: 	 * boolean expression = false.
1: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
1: 	 * still could be NotNodes left in the tree.
1: 	 *
1: 	 * @param	underNotNode		Whether or not we are under a NotNode.
1: 	 *							
1: 	 *
1: 	 * @return		The modified expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
1: 	ValueNode eliminateNots(boolean underNotNode) 
1: 					throws StandardException
1: 	{
1: 		if (! underNotNode)
1: 		{
1: 			return this;
1: 		}
1: 
1: 		/* Convert the BinaryComparison operator to its negation */
1: 		return getNegation(operand);
1: 	}
1: 
1: 	/**
1: 	 * Negate the comparison.
1: 	 *
1: 	 * @param operand	The operand of the comparison operator
1: 	 *
1: 	 * @return BinaryOperatorNode	The negated expression
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	UnaryOperatorNode getNegation(ValueNode operand)
1: 				throws StandardException
1: 	{
0: 		/* Keep the compiler happy - this method should never be called.
0: 		 * We should always be calling the method in a sub-class.
1: 		 */
1: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(false,
0: 					"expected to call getNegation() for subclass " +
0: 					getClass().toString());
1: 		return this;
1: 	}
1: 
1: 	/* RelationalOperator interface */
1: 
1: 	/** @see RelationalOperator#getColumnOperand */
1: 	public ColumnReference getColumnOperand(
1: 								Optimizable optTable,
1: 								int columnPosition)
1: 	{
1: 		FromBaseTable	ft;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(optTable instanceof FromBaseTable);
1: 		}
1: 
1: 		ft = (FromBaseTable) optTable;
1: 
0: 		return getColumnOperand(ft.getTableNumber(), columnPosition);
1: 	}
1: 
1: 	/** @see RelationalOperator#getColumnOperand */
1: 	public ColumnReference getColumnOperand(
0: 								int tableNumber,
1: 								int columnPosition)
1: 	{
1: 		ColumnReference	cr;
1: 
1: 		if (operand instanceof ColumnReference)
1: 		{
1: 			/*
1: 			** The operand is a column reference.
1: 			** Is it the correct column?
1: 			*/
1: 			cr = (ColumnReference) operand;
0: 			if (cr.getTableNumber() == tableNumber)
1: 			{
1: 				/* The table is correct, how about the column position? */
1: 				if (cr.getSource().getColumnPosition() == columnPosition)
1: 				{
1: 					/* We've found the correct column - return it */
1: 					return cr;
1: 				}
1: 			}
1: 		}
1: 
1: 		/* Neither side is the column we're looking for */
1: 		return null;
1: 	}
1: 
1: 	/** @see RelationalOperator#getColumnOperand */
1: 	public ColumnReference getColumnOperand(Optimizable optTable)
1: 	{
1: 		ColumnReference	cr;
1: 
1: 		if (operand instanceof ColumnReference)
1: 		{
1: 			/*
1: 			** The operand is a column reference.
1: 			** Is it the correct column?
1: 			*/
1: 			cr = (ColumnReference) operand;
1: 			if (cr.getTableNumber() == optTable.getTableNumber())
1: 			{
1: 				/* We've found the correct column - return it */
1: 				return cr;
1: 			}
1: 		}
1: 
1: 		/* Not the column we're looking for */
1: 		return null;
1: 	}
1: 
1: 	/** @see RelationalOperator#selfComparison */
1: 	public boolean selfComparison(ColumnReference cr)
1: 	{
1: 		ValueNode	otherSide;
1: 		JBitSet		tablesReferenced;
1: 
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.ASSERT(cr == operand,
1: 				"ColumnReference not found in IsNullNode.");
1: 		}
1: 
1: 		/* An IsNullNode is not a comparison with any other column */
1: 		return false;
1: 	}
1: 
1: 	/**
1: 	 * @see RelationalOperator#getExpressionOperand
1: 	 */
1: 	public ValueNode getExpressionOperand(int tableNumber,
0: 										  int columnNumber)
1: 	{
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * @see RelationalOperator#generateExpressionOperand
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateExpressionOperand(Optimizable optTable,
0: 												int columnPosition,
0: 												ExpressionClassBuilder acb,
0: 												MethodBuilder mb)
1: 						throws StandardException
1: 	{
0: 		acb.generateNull(mb, operand.getTypeCompiler());
1: 	}
1: 
1: 	/** @see RelationalOperator#getStartOperator */
1: 	public int getStartOperator(Optimizable optTable)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.THROWASSERT(
1: 							"getStartOperator not expected to be called for " +
1: 							this.getClass().getName());
1: 		}
1: 
1: 		return ScanController.GE;
1: 	}
1: 
1: 	/** @see RelationalOperator#getStopOperator */
1: 	public int getStopOperator(Optimizable optTable)
1: 	{
1: 		if (SanityManager.DEBUG)
1: 		{
1: 			SanityManager.THROWASSERT(
1: 							"getStopOperator not expected to be called for " +
1: 							this.getClass().getName());
1: 		}
1: 
1: 		return ScanController.GT;
1: 	}
1: 
1: 	/** @see RelationalOperator#generateOrderedNulls */
1: 	public void generateOrderedNulls(MethodBuilder mb)
1: 	{
1: 		mb.push(true);
1: 	}
1: 
1: 	/**
1: 	 * @see RelationalOperator#generateQualMethod
1: 	 *
1: 	 * @exception StandardException		Thrown on error
1: 	 */
0: 	public void generateQualMethod(ExpressionClassBuilder acb,
1: 										MethodBuilder mb,
1: 										Optimizable optTable)
1: 						throws StandardException
1: 	{
1: 		MethodBuilder qualMethod = acb.newUserExprFun();
1: 
1: 		/* Generate a method that returns that expression */
0: 		acb.generateNull(qualMethod, operand.getTypeCompiler());
1: 		qualMethod.methodReturn();
1: 		qualMethod.complete();
1: 
1: 		/* Return an expression that evaluates to the GeneratedMethod */
1: 		acb.pushMethodReference(mb, qualMethod);
1: 	}
1: 
1: 	/** @see RelationalOperator#generateAbsoluteColumnId */
1: 	public void generateAbsoluteColumnId(MethodBuilder mb,
1: 										Optimizable optTable)
1: 	{
1: 		// Get the absolute 0-based column position for the column
1: 		int columnPosition = getAbsoluteColumnPosition(optTable);
1: 
1: 		mb.push(columnPosition);
1: 	}
1: 
1: 	/** @see RelationalOperator#generateRelativeColumnId */
1: 	public void generateRelativeColumnId(MethodBuilder mb,
1: 											   Optimizable optTable)
1: 	{
1: 		// Get the absolute 0-based column position for the column
1: 		int columnPosition = getAbsoluteColumnPosition(optTable);
1: 		// Convert the absolute to the relative 0-based column position
1: 		columnPosition = optTable.convertAbsoluteToRelativeColumnPosition(
1: 								columnPosition);
1: 
1: 		mb.push(columnPosition);
1: 	}
1: 
1: 	/**
1: 	 * Get the absolute 0-based column position of the ColumnReference from 
1: 	 * the conglomerate for this Optimizable.
1: 	 *
1: 	 * @param optTable	The Optimizable
1: 	 *
1: 	 * @return The absolute 0-based column position of the ColumnReference
1: 	 */
1: 	private int getAbsoluteColumnPosition(Optimizable optTable)
1: 	{
1: 		ColumnReference	cr = (ColumnReference) operand;
1: 		int columnPosition;
1: 		ConglomerateDescriptor bestCD;
1: 
1: 		/* Column positions are one-based, store is zero-based */
1: 		columnPosition = cr.getSource().getColumnPosition();
1: 
1: 		bestCD =
1: 			optTable.getTrulyTheBestAccessPath().getConglomerateDescriptor();
1: 
1: 		/*
1: 		** If it's an index, find the base column position in the index
1: 		** and translate it to an index column position.
1: 		*/
1: 		if (bestCD.isIndex())
1: 		{
1: 			columnPosition = bestCD.getIndexDescriptor().
0: 			  getKeyColumnPosition(new Integer(columnPosition)).intValue();
1: 
1: 			if (SanityManager.DEBUG)
1: 			{
1: 				SanityManager.ASSERT(columnPosition > 0,
1: 					"Base column not found in index");
1: 			}
1: 		}
1: 
1: 		// return the 0-based column position
1: 		return columnPosition - 1;
1: 	}
1: 
1: 	/** @see RelationalOperator#orderedNulls */
1: 	public boolean orderedNulls()
1: 	{
1: 		return true;
1: 	}
1: 
1: 	/** @see RelationalOperator#isQualifier */
0: 	public boolean isQualifier(Optimizable optTable)
1: 	{
1: 		/*
1: 		** It's a Qualifier if the operand is a ColumnReference referring
1: 		** to a column in the given Optimizable table.
1: 		*/
1: 		if ( ! (operand instanceof ColumnReference))
1: 			return false;
1: 
1: 		ColumnReference cr = (ColumnReference) operand;
1: 		FromTable ft = (FromTable) optTable;
1: 
1: 		if (cr.getTableNumber() != ft.getTableNumber())
1: 			return false;
1: 
1: 		return true;
1: 	}
1: 
1: 	/** 
1: 	 * @see RelationalOperator#getOrderableVariantType 
1: 	 *
1: 	 * @exception StandardException	thrown on error
1: 	 */
1: 	public int getOrderableVariantType(Optimizable optTable) 
1: 		throws StandardException
1: 	{
1: 		return operand.getOrderableVariantType();
1: 	}
1: }
author:Mamta Satoor
-------------------------------------------------------------------------------
commit:ba7683c
/////////////////////////////////////////////////////////////////////////
1: 		acb.generateNull(mb, operand.getTypeCompiler(), 
1: 				operand.getTypeServices().getCollationType());
/////////////////////////////////////////////////////////////////////////
1: 		acb.generateNull(qualMethod, operand.getTypeCompiler(),
1: 				operand.getTypeServices().getCollationType());
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
author:Satheesh E. Bandaram
-------------------------------------------------------------------------------
commit:0be2d6e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			if (cr.getTableNumber() == ft.getTableNumber())
/////////////////////////////////////////////////////////////////////////
1: 	/** @see RelationalOperator#getOperand */
1: 	public ValueNode getOperand(ColumnReference cRef, int refSetSize,
1: 		boolean otherSide)
1: 	{
1: 		if (otherSide)
1: 		// there is no "other" side for Unary, so just return null.
1: 			return null;
0: 
1: 		ColumnReference	cr;
1: 		if (operand instanceof ColumnReference)
1: 		{
1: 			/*
1: 			** The operand is a column reference.
1: 			** Is it the correct column?
0: 			*/
1: 			JBitSet cRefTables = new JBitSet(refSetSize);
1: 			JBitSet crTables = new JBitSet(refSetSize);
1: 			BaseTableNumbersVisitor btnVis =
1: 				new BaseTableNumbersVisitor(crTables);
0: 
1: 			cr = (ColumnReference) operand;
1: 			try {
1: 				cr.accept(btnVis);
1: 				btnVis.setTableMap(cRefTables);
1: 				cRef.accept(btnVis);
1: 			} catch (StandardException se) {
0:             	if (SanityManager.DEBUG)
1:             	{
1:             	    SanityManager.THROWASSERT("Failed when trying to " +
0:             	        "find base table number for column reference check:\n" +
0:             	        se.getMessage());
1:             	}
1: 			}
1: 			crTables.and(cRefTables);
1: 			if (crTables.getFirstSetBit() != -1)
1: 			{
1: 				/*
1: 				** The table is correct, how about the column position?
0: 				*/
1: 				if (cr.getSource().getColumnPosition() ==
1: 					cRef.getColumnNumber())
1: 				{
1: 					/* We've found the correct column - return it. */
1: 					return operand;
1: 				}
1: 			}
1: 		}
0: 
1: 		/* Not the column we're looking for */
1: 		return null;
1: 	}
0: 
/////////////////////////////////////////////////////////////////////////
1: 										  int columnNumber,
0: 										  FromTable ft)
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isQualifier(Optimizable optTable, boolean forPush)
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package	org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.compile.Optimizable;
0: 
0: import org.apache.derby.iapi.sql.dictionary.DataDictionary;
0: import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
0: 
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.store.access.ScanController;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: 
0: import org.apache.derby.iapi.services.loader.GeneratedMethod;
0: 
0: import org.apache.derby.iapi.services.compiler.MethodBuilder;
0: 
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
0: 
0: import org.apache.derby.iapi.util.JBitSet;
0: 
0: import java.sql.Types;
0: 
0: import java.util.Vector;
0: 
0: /**
0:  * This node is the superclass  for all unary comparison operators, such as is null
0:  * and is not null.
0:  *
0:  * @author Jerry Brenner
0:  */
0: 
0: public class UnaryComparisonOperatorNode extends UnaryOperatorNode
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 	 * Bind this comparison operator.  All that has to be done for binding
0: 	 * a comparison operator is to bind the operand and set the result type 
0: 	 * to SQLBoolean.
0: 	 *
0: 	 * @param fromList			The query's FROM list
0: 	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
0: 	 * @param aggregateVector	The aggregate vector being built as we find AggregateNodes
0: 	 *
0: 	 * @return	The new top of the expression tree.
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 
0: 	public ValueNode bindExpression(
0: 		FromList fromList, SubqueryList subqueryList,
0: 		Vector	aggregateVector)
0: 			throws StandardException
0: 	{
0: 		super.bindExpression(fromList, subqueryList, 
0: 							 aggregateVector);
0: 
0: 		/* Set type info for this node */
0: 		bindComparisonOperator();
0: 
0: 		return this;
0: 	}
0: 
0: 	/**
0: 	 * Set the type info for this node.  This method is useful both during 
0: 	 * binding and when we generate nodes within the language module outside 
0: 	 * of the parser.
0: 	 *
0: 	 * @return	Nothing
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void bindComparisonOperator()
0: 			throws StandardException
0: 	{
0: 		/*
0: 		** Set the result type of this comparison operator based on the
0: 		** operand.  The result type is always SQLBoolean and always
0: 		** non-nullable.
0: 		*/
0: 		setType(new DataTypeDescriptor(TypeId.BOOLEAN_ID, false));
0: 	}
0: 
0: 	/**
0: 	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
0: 	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
0: 	 * ComparisonOperators and boolean expressions.  We invert 
0: 	 * ComparisonOperators and replace boolean expressions with 
0: 	 * boolean expression = false.
0: 	 * NOTE: Since we do not recurse under ComparisonOperators, there
0: 	 * still could be NotNodes left in the tree.
0: 	 *
0: 	 * @param	underNotNode		Whether or not we are under a NotNode.
0: 	 *							
0: 	 *
0: 	 * @return		The modified expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	ValueNode eliminateNots(boolean underNotNode) 
0: 					throws StandardException
0: 	{
0: 		if (! underNotNode)
0: 		{
0: 			return this;
0: 		}
0: 
0: 		/* Convert the BinaryComparison operator to its negation */
0: 		return getNegation(operand);
0: 	}
0: 
0: 	/**
0: 	 * Negate the comparison.
0: 	 *
0: 	 * @param operand	The operand of the comparison operator
0: 	 *
0: 	 * @return BinaryOperatorNode	The negated expression
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	UnaryOperatorNode getNegation(ValueNode operand)
0: 				throws StandardException
0: 	{
0: 		/* Keep the compiler happy - this method should never be called.
0: 		 * We should always be calling the method in a sub-class.
0: 		 */
0: 		if (SanityManager.DEBUG)
0: 		SanityManager.ASSERT(false,
0: 					"expected to call getNegation() for subclass " +
0: 					getClass().toString());
0: 		return this;
0: 	}
0: 
0: 	/* RelationalOperator interface */
0: 
0: 	/** @see RelationalOperator#getColumnOperand */
0: 	public ColumnReference getColumnOperand(
0: 								Optimizable optTable,
0: 								int columnPosition)
0: 	{
0: 		FromBaseTable	ft;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(optTable instanceof FromBaseTable);
0: 		}
0: 
0: 		ft = (FromBaseTable) optTable;
0: 
0: 		return getColumnOperand(ft.getTableNumber(), columnPosition);
0: 	}
0: 
0: 	/** @see RelationalOperator#getColumnOperand */
0: 	public ColumnReference getColumnOperand(
0: 								int tableNumber,
0: 								int columnPosition)
0: 	{
0: 		ColumnReference	cr;
0: 
0: 		if (operand instanceof ColumnReference)
0: 		{
0: 			/*
0: 			** The operand is a column reference.
0: 			** Is it the correct column?
0: 			*/
0: 			cr = (ColumnReference) operand;
0: 			if (cr.getTableNumber() == tableNumber)
0: 			{
0: 				/* The table is correct, how about the column position? */
0: 				if (cr.getSource().getColumnPosition() == columnPosition)
0: 				{
0: 					/* We've found the correct column - return it */
0: 					return cr;
0: 				}
0: 			}
0: 		}
0: 
0: 		/* Neither side is the column we're looking for */
0: 		return null;
0: 	}
0: 
0: 	/** @see RelationalOperator#getColumnOperand */
0: 	public ColumnReference getColumnOperand(Optimizable optTable)
0: 	{
0: 		ColumnReference	cr;
0: 
0: 		if (operand instanceof ColumnReference)
0: 		{
0: 			/*
0: 			** The operand is a column reference.
0: 			** Is it the correct column?
0: 			*/
0: 			cr = (ColumnReference) operand;
0: 			if (cr.getTableNumber() == optTable.getTableNumber())
0: 			{
0: 				/* We've found the correct column - return it */
0: 				return cr;
0: 			}
0: 		}
0: 
0: 		/* Not the column we're looking for */
0: 		return null;
0: 	}
0: 
0: 	/** @see RelationalOperator#selfComparison */
0: 	public boolean selfComparison(ColumnReference cr)
0: 	{
0: 		ValueNode	otherSide;
0: 		JBitSet		tablesReferenced;
0: 
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.ASSERT(cr == operand,
0: 				"ColumnReference not found in IsNullNode.");
0: 		}
0: 
0: 		/* An IsNullNode is not a comparison with any other column */
0: 		return false;
0: 	}
0: 
0: 	/**
0: 	 * @see RelationalOperator#getExpressionOperand
0: 	 */
0: 	public ValueNode getExpressionOperand(int tableNumber,
0: 										  int columnNumber)
0: 	{
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * @see RelationalOperator#generateExpressionOperand
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generateExpressionOperand(Optimizable optTable,
0: 												int columnPosition,
0: 												ExpressionClassBuilder acb,
0: 												MethodBuilder mb)
0: 						throws StandardException
0: 	{
0: 		acb.generateNull(mb, operand.getTypeCompiler());
0: 	}
0: 
0: 	/** @see RelationalOperator#getStartOperator */
0: 	public int getStartOperator(Optimizable optTable)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.THROWASSERT(
0: 							"getStartOperator not expected to be called for " +
0: 							this.getClass().getName());
0: 		}
0: 
0: 		return ScanController.GE;
0: 	}
0: 
0: 	/** @see RelationalOperator#getStopOperator */
0: 	public int getStopOperator(Optimizable optTable)
0: 	{
0: 		if (SanityManager.DEBUG)
0: 		{
0: 			SanityManager.THROWASSERT(
0: 							"getStopOperator not expected to be called for " +
0: 							this.getClass().getName());
0: 		}
0: 
0: 		return ScanController.GT;
0: 	}
0: 
0: 	/** @see RelationalOperator#generateOrderedNulls */
0: 	public void generateOrderedNulls(MethodBuilder mb)
0: 	{
0: 		mb.push(true);
0: 	}
0: 
0: 	/**
0: 	 * @see RelationalOperator#generateQualMethod
0: 	 *
0: 	 * @exception StandardException		Thrown on error
0: 	 */
0: 	public void generateQualMethod(ExpressionClassBuilder acb,
0: 										MethodBuilder mb,
0: 										Optimizable optTable)
0: 						throws StandardException
0: 	{
0: 		MethodBuilder qualMethod = acb.newUserExprFun();
0: 
0: 		/* Generate a method that returns that expression */
0: 		acb.generateNull(qualMethod, operand.getTypeCompiler());
0: 		qualMethod.methodReturn();
0: 		qualMethod.complete();
0: 
0: 		/* Return an expression that evaluates to the GeneratedMethod */
0: 		acb.pushMethodReference(mb, qualMethod);
0: 	}
0: 
0: 	/** @see RelationalOperator#generateAbsoluteColumnId */
0: 	public void generateAbsoluteColumnId(MethodBuilder mb,
0: 										Optimizable optTable)
0: 	{
0: 		// Get the absolute 0-based column position for the column
0: 		int columnPosition = getAbsoluteColumnPosition(optTable);
0: 
0: 		mb.push(columnPosition);
0: 	}
0: 
0: 	/** @see RelationalOperator#generateRelativeColumnId */
0: 	public void generateRelativeColumnId(MethodBuilder mb,
0: 											   Optimizable optTable)
0: 	{
0: 		// Get the absolute 0-based column position for the column
0: 		int columnPosition = getAbsoluteColumnPosition(optTable);
0: 		// Convert the absolute to the relative 0-based column position
0: 		columnPosition = optTable.convertAbsoluteToRelativeColumnPosition(
0: 								columnPosition);
0: 
0: 		mb.push(columnPosition);
0: 	}
0: 
0: 	/**
0: 	 * Get the absolute 0-based column position of the ColumnReference from 
0: 	 * the conglomerate for this Optimizable.
0: 	 *
0: 	 * @param optTable	The Optimizable
0: 	 *
0: 	 * @return The absolute 0-based column position of the ColumnReference
0: 	 */
0: 	private int getAbsoluteColumnPosition(Optimizable optTable)
0: 	{
0: 		ColumnReference	cr = (ColumnReference) operand;
0: 		int columnPosition;
0: 		ConglomerateDescriptor bestCD;
0: 
0: 		/* Column positions are one-based, store is zero-based */
0: 		columnPosition = cr.getSource().getColumnPosition();
0: 
0: 		bestCD =
0: 			optTable.getTrulyTheBestAccessPath().getConglomerateDescriptor();
0: 
0: 		/*
0: 		** If it's an index, find the base column position in the index
0: 		** and translate it to an index column position.
0: 		*/
0: 		if (bestCD.isIndex())
0: 		{
0: 			columnPosition = bestCD.getIndexDescriptor().
0: 			  getKeyColumnPosition(new Integer(columnPosition)).intValue();
0: 
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				SanityManager.ASSERT(columnPosition > 0,
0: 					"Base column not found in index");
0: 			}
0: 		}
0: 
0: 		// return the 0-based column position
0: 		return columnPosition - 1;
0: 	}
0: 
0: 	/** @see RelationalOperator#orderedNulls */
0: 	public boolean orderedNulls()
0: 	{
0: 		return true;
0: 	}
0: 
0: 	/** @see RelationalOperator#isQualifier */
0: 	public boolean isQualifier(Optimizable optTable)
0: 	{
0: 		/*
0: 		** It's a Qualifier if the operand is a ColumnReference referring
0: 		** to a column in the given Optimizable table.
0: 		*/
0: 		if ( ! (operand instanceof ColumnReference))
0: 			return false;
0: 
0: 		ColumnReference cr = (ColumnReference) operand;
0: 		FromTable ft = (FromTable) optTable;
0: 
0: 		if (cr.getTableNumber() != ft.getTableNumber())
0: 			return false;
0: 
0: 		return true;
0: 	}
0: 
0: 	/** 
0: 	 * @see RelationalOperator#getOrderableVariantType 
0: 	 *
0: 	 * @exception StandardException	thrown on error
0: 	 */
0: 	public int getOrderableVariantType(Optimizable optTable) 
0: 		throws StandardException
0: 	{
0: 		return operand.getOrderableVariantType();
0: 	}
0: }
============================================================================