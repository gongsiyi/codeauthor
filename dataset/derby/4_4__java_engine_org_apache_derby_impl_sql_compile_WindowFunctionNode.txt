1:7a9ce7e: /*
1:7a9ce7e:    Derby - Class org.apache.derby.impl.sql.compile.WindowFunctionNode
5:7a9ce7e: 
1:7a9ce7e:    Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9ce7e:    contributor license agreements.  See the NOTICE file distributed with
1:7a9ce7e:    this work for additional information regarding copyright ownership.
1:7a9ce7e:    The ASF licenses this file to you under the Apache License, Version 2.0
1:7a9ce7e:    (the "License"); you may not use this file except in compliance with
1:7a9ce7e:    the License.  You may obtain a copy of the License at
1:7a9ce7e: 
1:7a9ce7e:       http://www.apache.org/licenses/LICENSE-2.0
1:7a9ce7e: 
1:7a9ce7e:    Unless required by applicable law or agreed to in writing, software
1:7a9ce7e:    distributed under the License is distributed on an "AS IS" BASIS,
1:7a9ce7e:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9ce7e:    See the License for the specific language governing permissions and
1:7a9ce7e:    limitations under the License.
1:7a9ce7e: 
1:7a9ce7e:  */
1:7a9ce7e: 
1:7a9ce7e: package org.apache.derby.impl.sql.compile;
1:7a9ce7e: 
1:f33fbaf: import java.util.List;
1:7a9ce7e: import org.apache.derby.iapi.error.StandardException;
1:3bb140c: import org.apache.derby.iapi.reference.SQLState;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:7a9ce7e: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:7a9ce7e: 
1:7a9ce7e: /**
1:7a9ce7e:  * Superclass of any window function call.
1:7a9ce7e:  */
1:7a9ce7e: public abstract class WindowFunctionNode extends UnaryOperatorNode
2:7a9ce7e: {
1:7a9ce7e: 
1:7a9ce7e:     private WindowNode window; // definition or reference
1:7a9ce7e: 
1:7a9ce7e:     /*
1:7a9ce7e:     ** We wind up pushing all window function calls into a different
1:7a9ce7e:     ** resultColumnList.  When we do this (in replaceCallsWithColumnReference),
1:7a9ce7e:     ** we return a column reference and create a new result column.  This is
1:7a9ce7e:     ** used to store that result column.
1:7a9ce7e:     */
1:7a9ce7e:     private ResultColumn            generatedRC;
1:7a9ce7e:     private ColumnReference         generatedRef;
1:7a9ce7e: 
1:7a9ce7e:     /**
1:3bb140c:      * @param op operand (null for now)
1:3bb140c:      * @param functionName operator
1:3bb140c:      * @param w window node (definition or reference)
1:3bb140c:      * @param cm context manager
1:3bb140c:      * @throws StandardException
1:7a9ce7e:      */
1:3bb140c:     WindowFunctionNode(
1:3bb140c:             ValueNode op, String functionName, WindowNode w, ContextManager cm)
1:3bb140c:             throws StandardException {
1:3bb140c:         super(op, functionName, (String)null, cm);
1:3bb140c:         this.window = w;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * ValueNode override.
1:7a9ce7e:      * @see ValueNode#isConstantExpression
1:7a9ce7e:      */
1:3bb140c:     @Override
1:7a9ce7e:     public boolean isConstantExpression()
1:7a9ce7e:     {
1:7a9ce7e:         return false;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * ValueNode override.
1:7a9ce7e:      * @see ValueNode#isConstantExpression
1:7a9ce7e:      */
1:3bb140c:     @Override
1:e1f49ca:     boolean constantExpression(PredicateList whereClause)
1:7a9ce7e:     {
1:7a9ce7e:         // Without this, an ORDER by on ROW_NUMBER could get optimised away
1:7a9ce7e:         // if there is a restriction, e.g.
1:7a9ce7e:         //
1:7a9ce7e:         // SELECT -ABS(i) a, ROW_NUMBER() OVER () c FROM t
1:7a9ce7e:         //     WHERE i > 1 ORDER BY c DESC
1:7a9ce7e:         return false;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * @return window associated with this window function
1:7a9ce7e:      */
1:e1f49ca:     WindowNode getWindow() {
1:7a9ce7e:         return window;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Set window associated with this window function call.
1:7a9ce7e:      * @param wdn window definition
1:7a9ce7e:      */
1:e1f49ca:     void setWindow(WindowDefinitionNode wdn) {
1:7a9ce7e:         this.window = wdn;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * ValueNode override.
1:7a9ce7e:      * @see ValueNode#bindExpression
1:7a9ce7e:      */
1:3bb140c:     @Override
1:09c2697:     ValueNode bindExpression(
1:71c8e86:             FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
1:7a9ce7e:         throws StandardException
1:7a9ce7e:     {
1:7a9ce7e:         if (window instanceof WindowReferenceNode) {
1:7a9ce7e: 
1:7a9ce7e:             WindowDefinitionNode found =
1:7a9ce7e:                 definedWindow(fromList.getWindows(), window.getName());
1:7a9ce7e: 
1:7a9ce7e:             if (found != null) {
1:7a9ce7e:                 window = found;
1:7a9ce7e:             } else {
1:7a9ce7e:                 throw StandardException.
1:7a9ce7e:                     newException(SQLState.LANG_NO_SUCH_WINDOW,
1:7a9ce7e:                                  window.getName());
1:7a9ce7e:             }
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         return this;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * @return if name matches a defined window (in windows), return the
1:7a9ce7e:      * definition of that window, else null.
1:7a9ce7e:      */
1:7a9ce7e:     private WindowDefinitionNode definedWindow(WindowList windows,
1:7a9ce7e:                                                String name) {
1:e1f49ca:         for (WindowDefinitionNode wdn : windows) {
1:7a9ce7e:             if (wdn.getName().equals(name)) {
1:7a9ce7e:                 return wdn;
1:7a9ce7e:             }
1:7a9ce7e:         }
1:7a9ce7e:         return null;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * QueryTreeNode override.
1:7a9ce7e:      * @see QueryTreeNode#printSubNodes
1:7a9ce7e:      */
1:3bb140c:     @Override
1:7a9ce7e:     public void printSubNodes(int depth)
1:7a9ce7e:     {
1:7a9ce7e:         if (SanityManager.DEBUG)
1:7a9ce7e:         {
1:7a9ce7e:             super.printSubNodes(depth);
1:7a9ce7e: 
1:7a9ce7e:             printLabel(depth, "window: ");
1:7a9ce7e:             window.treePrint(depth + 1);
1:7a9ce7e:         }
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Replace window function calls in the expression tree with a
1:7a9ce7e:      * ColumnReference to that window function, append the aggregate to the
1:7a9ce7e:      * supplied RCL (assumed to be from the child ResultSetNode) and return the
1:7a9ce7e:      * ColumnReference.
1:7a9ce7e:      *
1:7a9ce7e:      * @param rcl   The RCL to append to.
1:7a9ce7e:      * @param tableNumber   The tableNumber for the new ColumnReference
1:7a9ce7e:      *
1:7a9ce7e:      * @return ValueNode    The (potentially) modified tree.
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException         Thrown on error
1:7a9ce7e:      */
1:e1f49ca:     ValueNode replaceCallsWithColumnReferences(ResultColumnList rcl,
1:7a9ce7e:                                                       int tableNumber)
1:7a9ce7e:         throws StandardException
1:7a9ce7e:     {
1:7a9ce7e:         /*
1:7a9ce7e:          * This call is idempotent.  Do the right thing if we have already
1:7a9ce7e:          * replaced ourselves.
1:7a9ce7e:          */
1:7a9ce7e:         if (generatedRef == null)
1:7a9ce7e:         {
1:7a9ce7e:             String                  generatedColName;
1:7a9ce7e:             CompilerContext         cc = getCompilerContext();
1:7a9ce7e:             generatedColName ="SQLCol" + cc.getNextColumnNumber();
1:3bb140c:             generatedRC = new ResultColumn(
1:3bb140c:                     generatedColName, this, getContextManager());
1:7a9ce7e:             generatedRC.markGenerated();
1:7a9ce7e: 
1:7a9ce7e:             // Parse time.
1:7a9ce7e:             //
1:3bb140c:             generatedRef = new ColumnReference(
1:3bb140c:                     generatedRC.getName(), null, getContextManager());
1:7a9ce7e: 
1:7a9ce7e:             // RESOLVE - unknown nesting level, but not correlated, so nesting
1:7a9ce7e:             // levels must be 0
1:7a9ce7e:             generatedRef.setSource(generatedRC);
1:7a9ce7e:             generatedRef.setNestingLevel(0);
1:7a9ce7e:             generatedRef.setSourceLevel(0);
1:7a9ce7e: 
1:7a9ce7e:             if (tableNumber != -1)
1:7a9ce7e:             {
1:7a9ce7e:                 generatedRef.setTableNumber(tableNumber);
1:7a9ce7e:             }
1:7a9ce7e: 
1:7a9ce7e:             rcl.addResultColumn(generatedRC);
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:             // Mark the ColumnReference as being generated to replace a call to
1:7a9ce7e:             // a window function
1:7a9ce7e: 
1:7a9ce7e:             generatedRef.markGeneratedToReplaceWindowFunctionCall();
1:7a9ce7e:         }
1:7a9ce7e:         else
1:7a9ce7e:         {
1:7a9ce7e:             rcl.addResultColumn(generatedRC);
1:7a9ce7e:         }
1:7a9ce7e: 
1:7a9ce7e:         return generatedRef;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Get the generated ColumnReference to this window function after the
1:7a9ce7e:      * parent called replaceCallsWithColumnReferences().
1:7a9ce7e:      * <p/>
1:7a9ce7e:      * There are cases where this will not have been done because the tree has
1:7a9ce7e:      * been re-written to eliminate the window function, e.g. for this query:
1:7a9ce7e:      * <p/><pre>
1:7a9ce7e:      *     {@code SELECT * FROM t WHERE EXISTS
1:7a9ce7e:      *           (SELECT ROW_NUMBER() OVER () FROM t)}
1:7a9ce7e:      * </pre><p/>
1:7a9ce7e:      * in which case the top PRN of the subquery sitting over a
1:7a9ce7e:      * WindowResultSetNode just contains a RC which is boolean constant {@code
1:7a9ce7e:      * true}. This means that the replaceCallsWithColumnReferences will not
1:7a9ce7e:      * have been called for {@code this}, so the returned {@code generatedRef}
1:7a9ce7e:      * is null.
1:7a9ce7e:      *
1:7a9ce7e:      * @return the column reference
1:7a9ce7e:      */
1:e1f49ca:     ColumnReference getGeneratedRef()
1:7a9ce7e:     {
1:7a9ce7e:         return generatedRef;
1:7a9ce7e:     }
1:7a9ce7e: 
1:7a9ce7e: 
1:7a9ce7e:     /**
1:7a9ce7e:      * Get the null result expression column.
1:7a9ce7e:      *
1:7a9ce7e:      * @return the value node
1:7a9ce7e:      *
1:7a9ce7e:      * @exception StandardException on error
1:7a9ce7e:      */
1:e1f49ca:     ValueNode getNewNullResultExpression()
1:7a9ce7e:         throws StandardException
1:7a9ce7e:     {
1:7a9ce7e:         //
1:7a9ce7e:         // Create a result column with the aggregate operand
1:7a9ce7e:         // it.
1:7a9ce7e:         //
1:7a9ce7e:         return getNullNode(getTypeServices());
1:7a9ce7e:     }
1:7a9ce7e: }
============================================================================
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:e1f49ca
/////////////////////////////////////////////////////////////////////////
1:     boolean constantExpression(PredicateList whereClause)
/////////////////////////////////////////////////////////////////////////
1:     WindowNode getWindow() {
/////////////////////////////////////////////////////////////////////////
1:     void setWindow(WindowDefinitionNode wdn) {
/////////////////////////////////////////////////////////////////////////
1:         for (WindowDefinitionNode wdn : windows) {
/////////////////////////////////////////////////////////////////////////
1:     ValueNode replaceCallsWithColumnReferences(ResultColumnList rcl,
/////////////////////////////////////////////////////////////////////////
1:     ColumnReference getGeneratedRef()
/////////////////////////////////////////////////////////////////////////
1:     ValueNode getNewNullResultExpression()
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.reference.SQLState;
1: import org.apache.derby.iapi.services.context.ContextManager;
/////////////////////////////////////////////////////////////////////////
1:      * @param op operand (null for now)
1:      * @param functionName operator
1:      * @param w window node (definition or reference)
1:      * @param cm context manager
1:      * @throws StandardException
1:     WindowFunctionNode(
1:             ValueNode op, String functionName, WindowNode w, ContextManager cm)
1:             throws StandardException {
1:         super(op, functionName, (String)null, cm);
1:         this.window = w;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             generatedRC = new ResultColumn(
1:                     generatedColName, this, getContextManager());
1:             generatedRef = new ColumnReference(
1:                     generatedRC.getName(), null, getContextManager());
commit:7a9ce7e
/////////////////////////////////////////////////////////////////////////
1: /*
1:    Derby - Class org.apache.derby.impl.sql.compile.WindowFunctionNode
1: 
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
1: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: import org.apache.derby.iapi.sql.compile.C_NodeTypes;
0: import org.apache.derby.iapi.reference.SQLState;
1: 
0: import java.sql.Types;
0: import java.util.Vector;
1: 
1: 
1: /**
1:  * Superclass of any window function call.
1:  */
1: public abstract class WindowFunctionNode extends UnaryOperatorNode
1: {
1: 
1:     private WindowNode window; // definition or reference
1: 
1:     /*
1:     ** We wind up pushing all window function calls into a different
1:     ** resultColumnList.  When we do this (in replaceCallsWithColumnReference),
1:     ** we return a column reference and create a new result column.  This is
1:     ** used to store that result column.
1:     */
1:     private ResultColumn            generatedRC;
1:     private ColumnReference         generatedRef;
1: 
1:     /**
0:      * Initializer for a WindowFunctionNode
0:      * @param arg1 null (operand)
0:      * @param arg2 function mame (operator)
0:      * @param arg3 window node (definition or reference)
0:      * @exception StandardException
1:      */
0:     public void init(Object arg1, Object arg2, Object arg3)
1:     {
0:         super.init(arg1, arg2, null);
0:         this.window = (WindowNode)arg3;
1:     }
1: 
1:     /**
1:      * ValueNode override.
1:      * @see ValueNode#isConstantExpression
1:      */
1:     public boolean isConstantExpression()
1:     {
1:         return false;
1:     }
1: 
1:     /**
1:      * ValueNode override.
1:      * @see ValueNode#isConstantExpression
1:      */
0:     public boolean constantExpression(PredicateList whereClause)
1:     {
1:         // Without this, an ORDER by on ROW_NUMBER could get optimised away
1:         // if there is a restriction, e.g.
1:         //
1:         // SELECT -ABS(i) a, ROW_NUMBER() OVER () c FROM t
1:         //     WHERE i > 1 ORDER BY c DESC
1:         return false;
1:     }
1: 
1: 
1:     /**
1:      * @return window associated with this window function
1:      */
0:     public WindowNode getWindow() {
1:         return window;
1:     }
1: 
1: 
1:     /**
1:      * Set window associated with this window function call.
1:      * @param wdn window definition
1:      */
0:     public void setWindow(WindowDefinitionNode wdn) {
1:         this.window = wdn;
1:     }
1: 
1: 
1:     /**
1:      * ValueNode override.
1:      * @see ValueNode#bindExpression
1:      */
0:     public ValueNode bindExpression(
0:             FromList fromList,
0:             SubqueryList subqueryList,
0:             Vector  aggregateVector)
1:         throws StandardException
1:     {
1:         if (window instanceof WindowReferenceNode) {
1: 
1:             WindowDefinitionNode found =
1:                 definedWindow(fromList.getWindows(), window.getName());
1: 
1:             if (found != null) {
1:                 window = found;
1:             } else {
1:                 throw StandardException.
1:                     newException(SQLState.LANG_NO_SUCH_WINDOW,
1:                                  window.getName());
1:             }
1:         }
1: 
1:         return this;
1:     }
1: 
1: 
1:     /**
1:      * @return if name matches a defined window (in windows), return the
1:      * definition of that window, else null.
1:      */
1:     private WindowDefinitionNode definedWindow(WindowList windows,
1:                                                String name) {
0:         for (int i=0; i < windows.size(); i++) {
0:             WindowDefinitionNode wdn =
0:                 (WindowDefinitionNode)windows.elementAt(i);
1: 
1:             if (wdn.getName().equals(name)) {
1:                 return wdn;
1:             }
1:         }
1:         return null;
1:     }
1: 
1: 
1:     /**
1:      * QueryTreeNode override.
1:      * @see QueryTreeNode#printSubNodes
1:      */
1: 
1:     public void printSubNodes(int depth)
1:     {
1:         if (SanityManager.DEBUG)
1:         {
1:             super.printSubNodes(depth);
1: 
1:             printLabel(depth, "window: ");
1:             window.treePrint(depth + 1);
1:         }
1:     }
1: 
1:     /**
1:      * Replace window function calls in the expression tree with a
1:      * ColumnReference to that window function, append the aggregate to the
1:      * supplied RCL (assumed to be from the child ResultSetNode) and return the
1:      * ColumnReference.
1:      *
1:      * @param rcl   The RCL to append to.
1:      * @param tableNumber   The tableNumber for the new ColumnReference
1:      *
1:      * @return ValueNode    The (potentially) modified tree.
1:      *
1:      * @exception StandardException         Thrown on error
1:      */
0:     public ValueNode replaceCallsWithColumnReferences(ResultColumnList rcl,
1:                                                       int tableNumber)
1:         throws StandardException
1:     {
1:         /*
1:          * This call is idempotent.  Do the right thing if we have already
1:          * replaced ourselves.
1:          */
1:         if (generatedRef == null)
1:         {
1:             String                  generatedColName;
1:             CompilerContext         cc = getCompilerContext();
1:             generatedColName ="SQLCol" + cc.getNextColumnNumber();
0:             generatedRC = (ResultColumn) getNodeFactory().getNode(
0:                                             C_NodeTypes.RESULT_COLUMN,
0:                                             generatedColName,
0:                                             this,
0:                                             getContextManager());
1:             generatedRC.markGenerated();
1: 
1:             // Parse time.
1:             //
0:             generatedRef = (ColumnReference) getNodeFactory().getNode(
0:                                                 C_NodeTypes.COLUMN_REFERENCE,
0:                                                 generatedRC.getName(),
0:                                                 null,
0:                                                 getContextManager());
1: 
1:             // RESOLVE - unknown nesting level, but not correlated, so nesting
1:             // levels must be 0
1:             generatedRef.setSource(generatedRC);
1:             generatedRef.setNestingLevel(0);
1:             generatedRef.setSourceLevel(0);
1: 
1:             if (tableNumber != -1)
1:             {
1:                 generatedRef.setTableNumber(tableNumber);
1:             }
1: 
1:             rcl.addResultColumn(generatedRC);
1: 
1: 
1:             // Mark the ColumnReference as being generated to replace a call to
1:             // a window function
1: 
1:             generatedRef.markGeneratedToReplaceWindowFunctionCall();
1:         }
1:         else
1:         {
1:             rcl.addResultColumn(generatedRC);
1:         }
1: 
1:         return generatedRef;
1:     }
1: 
1:     /**
1:      * Get the generated ColumnReference to this window function after the
1:      * parent called replaceCallsWithColumnReferences().
1:      * <p/>
1:      * There are cases where this will not have been done because the tree has
1:      * been re-written to eliminate the window function, e.g. for this query:
1:      * <p/><pre>
1:      *     {@code SELECT * FROM t WHERE EXISTS
1:      *           (SELECT ROW_NUMBER() OVER () FROM t)}
1:      * </pre><p/>
1:      * in which case the top PRN of the subquery sitting over a
1:      * WindowResultSetNode just contains a RC which is boolean constant {@code
1:      * true}. This means that the replaceCallsWithColumnReferences will not
1:      * have been called for {@code this}, so the returned {@code generatedRef}
1:      * is null.
1:      *
1:      * @return the column reference
1:      */
0:     public ColumnReference getGeneratedRef()
1:     {
1:         return generatedRef;
1:     }
1: 
1: 
1:     /**
1:      * Get the null result expression column.
1:      *
1:      * @return the value node
1:      *
1:      * @exception StandardException on error
1:      */
0:     public ValueNode    getNewNullResultExpression()
1:         throws StandardException
1:     {
1:         //
1:         // Create a result column with the aggregate operand
1:         // it.
1:         //
1:         return getNullNode(getTypeServices());
1:     }
1: }
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:71c8e86
/////////////////////////////////////////////////////////////////////////
1:             FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:09c2697
/////////////////////////////////////////////////////////////////////////
1:     ValueNode bindExpression(
0:             FromList fromList, SubqueryList subqueryList, List aggregates)
commit:f33fbaf
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:             List aggregateVector)
============================================================================