1:b7ecfd9: /*
1:b7ecfd9: 
1:b7ecfd9: Derby - Class org.apache.derbyDemo.vtis.example.PropertyFileVTI
1:b7ecfd9: 
1:b7ecfd9: Licensed to the Apache Software Foundation (ASF) under one or more
1:b7ecfd9: contributor license agreements.  See the NOTICE file distributed with
1:b7ecfd9: this work for additional information regarding copyright ownership.
1:b7ecfd9: The ASF licenses this file to You under the Apache License, Version 2.0
1:b7ecfd9: (the "License"); you may not use this file except in compliance with
1:b7ecfd9: the License.  You may obtain a copy of the License at
1:b7ecfd9: 
1:b7ecfd9: http://www.apache.org/licenses/LICENSE-2.0
1:b7ecfd9: 
1:b7ecfd9: Unless required by applicable law or agreed to in writing, software
1:b7ecfd9: distributed under the License is distributed on an "AS IS" BASIS,
1:b7ecfd9: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7ecfd9: See the License for the specific language governing permissions and
1:b7ecfd9: limitations under the License.
1:b7ecfd9: 
1:b7ecfd9: */
1:b7ecfd9: 
1:b7ecfd9: package org.apache.derbyDemo.vtis.example;
1:b7ecfd9: 
1:b7ecfd9: import java.io.*;
1:b7ecfd9: import java.sql.*;
1:b7ecfd9: import java.text.SimpleDateFormat;
1:b7ecfd9: 
1:b7ecfd9: import org.apache.derbyDemo.vtis.core.*;
1:b7ecfd9: 
1:b7ecfd9: /**
1:b7ecfd9:  * <p>
1:b7ecfd9:  * This VTI makes a table out of a property file.
1:b7ecfd9:  * </p>
1:b7ecfd9:  */
1:b7ecfd9: public    class   PropertyFileVTI  extends FlatFileVTI
1:b7ecfd9: {
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTANTS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     private static  final   String[]    COLUMN_NAMES =
1:b7ecfd9:     {
1:b7ecfd9:         "propKey", "propValue"
1:b7ecfd9:     };
1:b7ecfd9: 
1:b7ecfd9:     private static  final   int PROPERTY_KEY = 0;
1:b7ecfd9:     private static  final   int PROPERTY_VALUE = PROPERTY_KEY + 1;
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // STATE
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // CONSTRUCTORS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Build a PropertyFileVTI given the name of a Derby message file in the
1:b7ecfd9:      * source tree.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public  PropertyFileVTI( String propertyFileName )
1:b7ecfd9:     {
1:b7ecfd9:         super( COLUMN_NAMES, propertyFileName );
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // TABLE FUNCTION METHOD
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * This is the method which is registered as a table function.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     public  static  ResultSet   propertyFileVTI( String propertyFileName )
1:b7ecfd9:         throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         return new PropertyFileVTI( propertyFileName );
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     /**
1:b7ecfd9:      * <p>
1:b7ecfd9:      * Parse the next chunk of text, using readLine(), and return the next row.
1:b7ecfd9:      * Returns null if the file is exhausted.
1:b7ecfd9:      * </p>
1:b7ecfd9:      */
1:b7ecfd9:     protected  String[]  parseRow( ) throws SQLException
1:b7ecfd9:     {
1:b7ecfd9:         String[]    newRow = new String[ COLUMN_NAMES.length ];
1:b7ecfd9:         String      nextLine = null;
1:036b3ed:         String      oldLine = "";
1:b7ecfd9: 
1:b7ecfd9:         while( true )
1:b7ecfd9:         {
1:036b3ed:             boolean     isContinuationLine = ( oldLine.length() != 0 );
1:036b3ed:             
1:b7ecfd9:             nextLine = readLine();
1:b7ecfd9: 
1:b7ecfd9:             // if at EOF, get out of here
1:036b3ed:             if ( nextLine == null )
1:036b3ed:             {
1:036b3ed:                 if ( !isContinuationLine ) { return null; }
1:036b3ed:                 else { nextLine = oldLine; }
1:036b3ed:             }
1:b7ecfd9: 
1:b7ecfd9:             nextLine = nextLine.trim();
1:b7ecfd9: 
1:b7ecfd9:             // skip blank lines and lines which start with the comment character
1:b7ecfd9:             if ( nextLine.startsWith( "#" ) ) { continue; }
1:036b3ed:             else if ( nextLine.length() == 0 )
1:036b3ed:             {
1:036b3ed:                 if ( !isContinuationLine ) { continue; }
1:036b3ed:             }
1:036b3ed: 
1:036b3ed:             // handle continuation lines
1:036b3ed:             nextLine = oldLine + nextLine;
1:036b3ed: 
1:036b3ed:             if ( nextLine.endsWith( "\\" ) )
1:036b3ed:             {
1:036b3ed:                 oldLine = nextLine.substring( 0, nextLine.length() - 1 );
1:036b3ed:                 continue;
1:036b3ed:             }
1:036b3ed: 
1:036b3ed:             break;
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         int         equalsIdx = nextLine.indexOf( '=' );
1:b7ecfd9: 
1:b7ecfd9:         try {
1:8e2a812:             if ( equalsIdx >= 0 )
1:8e2a812:             {
1:8e2a812:                 newRow[ PROPERTY_KEY ] = nextLine.substring( 0, equalsIdx );
1:036b3ed:                 newRow[ PROPERTY_VALUE ] = nextLine.substring( equalsIdx + 1, nextLine.length() );
1:8e2a812:             }
1:8e2a812:             else
1:8e2a812:             {
1:8e2a812:                 newRow[ PROPERTY_KEY ] = nextLine;
1:8e2a812:                 newRow[ PROPERTY_VALUE ] = "";
1:8e2a812:             }
1:b7ecfd9:         }
1:b7ecfd9:         catch (Throwable t)
1:b7ecfd9:         {
1:b7ecfd9:             SQLException    se = new SQLException
1:b7ecfd9:                 (
1:b7ecfd9:                  "Unparseable line number " + getLineNumber() + " in file " + getTextFileName() + ": " + nextLine
1:b7ecfd9:                  );
1:b7ecfd9:             se.initCause( t );
1:b7ecfd9: 
1:b7ecfd9:             throw se;
1:b7ecfd9:         }
1:b7ecfd9: 
1:b7ecfd9:         return newRow;
1:b7ecfd9:     }
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // ResultSet METHODS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9:     //
1:b7ecfd9:     // MINIONS
1:b7ecfd9:     //
1:b7ecfd9:     ///////////////////////////////////////////////////////////////////////////////////
1:b7ecfd9: 
1:b7ecfd9: 
1:b7ecfd9: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:036b3ed
/////////////////////////////////////////////////////////////////////////
1:         String      oldLine = "";
1:             boolean     isContinuationLine = ( oldLine.length() != 0 );
1:             
1:             if ( nextLine == null )
1:             {
1:                 if ( !isContinuationLine ) { return null; }
1:                 else { nextLine = oldLine; }
1:             }
1:             else if ( nextLine.length() == 0 )
1:             {
1:                 if ( !isContinuationLine ) { continue; }
1:             }
1: 
1:             // handle continuation lines
1:             nextLine = oldLine + nextLine;
1: 
1:             if ( nextLine.endsWith( "\\" ) )
1:             {
1:                 oldLine = nextLine.substring( 0, nextLine.length() - 1 );
1:                 continue;
1:             }
1: 
1:             break;
/////////////////////////////////////////////////////////////////////////
1:                 newRow[ PROPERTY_VALUE ] = nextLine.substring( equalsIdx + 1, nextLine.length() );
commit:8e2a812
/////////////////////////////////////////////////////////////////////////
1:             if ( equalsIdx >= 0 )
1:             {
1:                 newRow[ PROPERTY_KEY ] = nextLine.substring( 0, equalsIdx );
0:                 newRow[ PROPERTY_VALUE ] = nextLine.substring( equalsIdx, nextLine.length() );
1:             }
1:             else
1:             {
1:                 newRow[ PROPERTY_KEY ] = nextLine;
1:                 newRow[ PROPERTY_VALUE ] = "";
1:             }
commit:b7ecfd9
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
1: Derby - Class org.apache.derbyDemo.vtis.example.PropertyFileVTI
1: 
1: Licensed to the Apache Software Foundation (ASF) under one or more
1: contributor license agreements.  See the NOTICE file distributed with
1: this work for additional information regarding copyright ownership.
1: The ASF licenses this file to You under the Apache License, Version 2.0
1: (the "License"); you may not use this file except in compliance with
1: the License.  You may obtain a copy of the License at
1: 
1: http://www.apache.org/licenses/LICENSE-2.0
1: 
1: Unless required by applicable law or agreed to in writing, software
1: distributed under the License is distributed on an "AS IS" BASIS,
1: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: See the License for the specific language governing permissions and
1: limitations under the License.
1: 
1: */
1: 
1: package org.apache.derbyDemo.vtis.example;
1: 
1: import java.io.*;
1: import java.sql.*;
1: import java.text.SimpleDateFormat;
1: 
1: import org.apache.derbyDemo.vtis.core.*;
1: 
1: /**
1:  * <p>
1:  * This VTI makes a table out of a property file.
1:  * </p>
1:  */
1: public    class   PropertyFileVTI  extends FlatFileVTI
1: {
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTANTS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     private static  final   String[]    COLUMN_NAMES =
1:     {
1:         "propKey", "propValue"
1:     };
1: 
1:     private static  final   int PROPERTY_KEY = 0;
1:     private static  final   int PROPERTY_VALUE = PROPERTY_KEY + 1;
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // STATE
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // CONSTRUCTORS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Build a PropertyFileVTI given the name of a Derby message file in the
1:      * source tree.
1:      * </p>
1:      */
1:     public  PropertyFileVTI( String propertyFileName )
1:     {
1:         super( COLUMN_NAMES, propertyFileName );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // TABLE FUNCTION METHOD
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * <p>
1:      * This is the method which is registered as a table function.
1:      * </p>
1:      */
1:     public  static  ResultSet   propertyFileVTI( String propertyFileName )
1:         throws SQLException
1:     {
1:         return new PropertyFileVTI( propertyFileName );
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // FlatFileVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * <p>
1:      * Parse the next chunk of text, using readLine(), and return the next row.
1:      * Returns null if the file is exhausted.
1:      * </p>
1:      */
1:     protected  String[]  parseRow( ) throws SQLException
1:     {
1:         String[]    newRow = new String[ COLUMN_NAMES.length ];
1:         String      nextLine = null;
1: 
1:         while( true )
1:         {
1:             nextLine = readLine();
1: 
1:             // if at EOF, get out of here
0:             if ( nextLine == null ) { return null; }
1: 
1:             nextLine = nextLine.trim();
1: 
1:             // skip blank lines and lines which start with the comment character
1:             if ( nextLine.startsWith( "#" ) ) { continue; }
0:             else if ( nextLine.length() == 0 ) { continue; }
0:             else { break; }
1:         }
1: 
1:         int         equalsIdx = nextLine.indexOf( '=' );
1: 
1:         try {
0:             newRow[ PROPERTY_KEY ] = nextLine.substring( 0, equalsIdx );
0:             newRow[ PROPERTY_VALUE ] = nextLine.substring( equalsIdx, nextLine.length() );
1:         }
1:         catch (Throwable t)
1:         {
1:             SQLException    se = new SQLException
1:                 (
1:                  "Unparseable line number " + getLineNumber() + " in file " + getTextFileName() + ": " + nextLine
1:                  );
1:             se.initCause( t );
1: 
1:             throw se;
1:         }
1: 
1:         return newRow;
1:     }
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // ResultSet METHODS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1:     ///////////////////////////////////////////////////////////////////////////////////
1:     //
1:     // MINIONS
1:     //
1:     ///////////////////////////////////////////////////////////////////////////////////
1: 
1: 
1: }
============================================================================