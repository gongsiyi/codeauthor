1:eac0369: /*
11:eac0369: 
1:7ecc1f2:    Derby - Class org.apache.derby.iapi.sql.conn.LanguageConnectionFactory
1:7ecc1f2: 
1:75588ca:    Licensed to the Apache Software Foundation (ASF) under one or more
1:75588ca:    contributor license agreements.  See the NOTICE file distributed with
1:75588ca:    this work for additional information regarding copyright ownership.
1:75588ca:    The ASF licenses this file to you under the Apache License, Version 2.0
1:75588ca:    (the "License"); you may not use this file except in compliance with
1:75588ca:    the License.  You may obtain a copy of the License at
1:7ecc1f2: 
1:7ecc1f2:       http://www.apache.org/licenses/LICENSE-2.0
1:7ecc1f2: 
1:7ecc1f2:    Unless required by applicable law or agreed to in writing, software
1:7ecc1f2:    distributed under the License is distributed on an "AS IS" BASIS,
1:7ecc1f2:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ecc1f2:    See the License for the specific language governing permissions and
1:7ecc1f2:    limitations under the License.
1:7ecc1f2: 
4:eac0369:  */
1:eac0369: 
1:eac0369: package org.apache.derby.iapi.sql.conn;
1:eac0369: 
1:eac0369: import org.apache.derby.iapi.db.Database;
1:3bb140c: import org.apache.derby.iapi.error.StandardException;
1:eac0369: import org.apache.derby.iapi.services.cache.CacheManager;
1:3bb140c: import org.apache.derby.iapi.services.compiler.JavaFactory;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextManager;
1:3bb140c: import org.apache.derby.iapi.services.loader.ClassFactory;
1:3bb140c: import org.apache.derby.iapi.services.property.PropertyFactory;
1:3bb140c: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1:eac0369: import org.apache.derby.iapi.sql.LanguageFactory;
1:3bb140c: import org.apache.derby.iapi.sql.Statement;
1:3bb140c: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:3bb140c: import org.apache.derby.iapi.sql.compile.OptimizerFactory;
1:3bb140c: import org.apache.derby.iapi.sql.compile.Parser;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
1:eac0369: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1:3bb140c: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1:3bb140c: import org.apache.derby.iapi.store.access.TransactionController;
1:3bb140c: import org.apache.derby.iapi.types.DataValueFactory;
1:eac0369: 
4:eac0369: /**
1:eac0369:  * Factory interface for items specific to a connection in the language system.
1:eac0369:  * This is expected to be used internally, and so is not in Language.Interface.
1:eac0369:  * <p>
1:eac0369:  * This Factory provides pointers to other language factories; the
1:eac0369:  * LanguageConnectionContext holds more dynamic information, such as
1:eac0369:  * prepared statements and whether a commit has occurred or not.
1:eac0369:  * <p>
1:eac0369:  * This Factory is for internal items used throughout language during a
1:eac0369:  * connection. Things that users need for the Database API are in
1:eac0369:  * LanguageFactory in Language.Interface.
1:eac0369:  * <p>
1:eac0369:  * This factory returns (and thus starts) all the other per-database
1:eac0369:  * language factories. So there might someday be properties as to which
1:eac0369:  * ones to start (attributes, say, like level of optimization).
1:eac0369:  * If the request is relative to a specific connection, the connection
1:eac0369:  * is passed in. Otherwise, they are assumed to be database-wide services.
1:eac0369:  *
1:eac0369:  * @see org.apache.derby.iapi.sql.LanguageFactory
1:eac0369:  *
1:eac0369:  */
1:eac0369: public interface LanguageConnectionFactory {
1:eac0369: 	/**
1:eac0369: 		Used to locate this factory by the Monitor basic service.
1:eac0369: 		There needs to be a language factory per database.
1:eac0369: 	 */
1:eac0369: 	String MODULE = "org.apache.derby.iapi.sql.conn.LanguageConnectionFactory";
1:eac0369: 
1:eac0369: 
1:eac0369: 	/**
1:5087be8: 		Get a Statement
1:5087be8: 		@param compilationSchema schema
1:eac0369: 		@param statementText the text for the statement
1:5087be8: 		@param forReadOnly true if concurrency mode is CONCUR_READ_ONLY
1:eac0369: 		@return	The Statement
1:eac0369: 	 */
1:5087be8: 	Statement getStatement(SchemaDescriptor compilationSchema, String statementText, boolean forReadOnly);
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get a new LanguageConnectionContext. this holds things
1:eac0369: 		we want to remember about activity in the language system,
1:eac0369: 		where this factory holds things that are pretty stable,
1:eac0369: 		like other factories.
1:eac0369: 		<p>
1:eac0369: 		The returned LanguageConnectionContext is intended for use
1:eac0369: 		only by the connection that requested it.
1:eac0369: 
1:eac0369: 		@return a language connection context for the context stack.
1:eac0369: 		@exception StandardException the usual
1:eac0369: 	 */
1:eac0369: 	LanguageConnectionContext
1:eac0369: 	newLanguageConnectionContext(ContextManager cm,
1:eac0369: 								TransactionController tc,
1:eac0369: 								LanguageFactory lf,
1:eac0369: 								Database db,
1:eac0369: 								String userName,
1:eac0369: 								String drdaID,
1:eac0369: 								String dbname)
1:eac0369: 
1:eac0369: 		throws StandardException;
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the UUIDFactory to use with this language connection
1:eac0369: 	 */
1:eac0369: 	UUIDFactory	getUUIDFactory();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the ClassFactory to use with this language connection
1:eac0369: 	 */
1:eac0369: 	ClassFactory	getClassFactory();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the JavaFactory to use with this language connection
1:eac0369: 	 */
1:eac0369: 	JavaFactory	getJavaFactory();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the ExecutionFactory to use with this language connection
1:eac0369: 	 */
1:eac0369: 	ExecutionFactory	getExecutionFactory();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the PropertyFactory to use with this language connection
1:eac0369: 	 */
1:eac0369: 	PropertyFactory	getPropertyFactory();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the OptimizerFactory to use with this language connection
1:eac0369: 	 */
1:eac0369: 	OptimizerFactory	getOptimizerFactory();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the TypeCompilerFactory to use with this language connection
1:eac0369: 	 */
1:eac0369: 	TypeCompilerFactory getTypeCompilerFactory();
1:eac0369: 
1:eac0369: 	/**
1:eac0369: 		Get the DataValueFactory to use with this language connection
1:eac0369: 		This is expected to get stuffed into the language connection
1:eac0369: 		context and accessed from there.
1:eac0369: 
1:eac0369: 	 */
1:eac0369: 	DataValueFactory		getDataValueFactory(); 
1:eac0369: 
1:eac0369: 	public CacheManager getStatementCache();
1:eac0369: 
1:eac0369:     public Parser newParser(CompilerContext cc);
1:eac0369: }
============================================================================
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.services.compiler.JavaFactory;
1: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.loader.ClassFactory;
1: import org.apache.derby.iapi.services.property.PropertyFactory;
1: import org.apache.derby.iapi.services.uuid.UUIDFactory;
1: import org.apache.derby.iapi.sql.Statement;
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.compile.OptimizerFactory;
1: import org.apache.derby.iapi.sql.compile.Parser;
1: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
1: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
1: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.types.DataValueFactory;
/////////////////////////////////////////////////////////////////////////
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:1985a18
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7ecc1f2
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.iapi.sql.conn.LanguageConnectionFactory
1: 
0:    Copyright 1997, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:5d24b1a
/////////////////////////////////////////////////////////////////////////
commit:eac0369
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.conn
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.iapi.sql.conn;
1: 
0: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.db.Database;
1: 
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.services.property.PropertyFactory;
1: 
0: import org.apache.derby.iapi.sql.compile.OptimizerFactory;
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.Statement;
0: import org.apache.derby.iapi.sql.compile.Parser;
1: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.services.compiler.JavaFactory;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.context.ContextManager;
1: import org.apache.derby.iapi.services.cache.CacheManager;
1: 
1: import org.apache.derby.iapi.sql.LanguageFactory;
0: import org.apache.derby.iapi.store.access.TransactionController;
1: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
1: 
0: import java.io.InputStream;
1: 
0: import java.util.Locale;
1: 
1: /**
1:  * Factory interface for items specific to a connection in the language system.
1:  * This is expected to be used internally, and so is not in Language.Interface.
1:  * <p>
1:  * This Factory provides pointers to other language factories; the
1:  * LanguageConnectionContext holds more dynamic information, such as
1:  * prepared statements and whether a commit has occurred or not.
1:  * <p>
1:  * This Factory is for internal items used throughout language during a
1:  * connection. Things that users need for the Database API are in
1:  * LanguageFactory in Language.Interface.
1:  * <p>
1:  * This factory returns (and thus starts) all the other per-database
1:  * language factories. So there might someday be properties as to which
1:  * ones to start (attributes, say, like level of optimization).
1:  * If the request is relative to a specific connection, the connection
1:  * is passed in. Otherwise, they are assumed to be database-wide services.
1:  *
1:  * @see org.apache.derby.iapi.sql.LanguageFactory
1:  *
0:  * @author ames
1:  */
1: public interface LanguageConnectionFactory {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
1: 	/**
1: 		Used to locate this factory by the Monitor basic service.
1: 		There needs to be a language factory per database.
1: 	 */
1: 	String MODULE = "org.apache.derby.iapi.sql.conn.LanguageConnectionFactory";
1: 
1: 	/**
0: 		Get a Statement.
1: 		
1: 		@param statementText the text for the statement
1: 		@return	The Statement
1: 	 */
0: 	Statement getStatement(SchemaDescriptor compilationSchema, String statementText);
1: 
1: 	/**
1: 		Get a new LanguageConnectionContext. this holds things
1: 		we want to remember about activity in the language system,
1: 		where this factory holds things that are pretty stable,
1: 		like other factories.
1: 		<p>
1: 		The returned LanguageConnectionContext is intended for use
1: 		only by the connection that requested it.
1: 
1: 		@return a language connection context for the context stack.
1: 		@exception StandardException the usual
1: 	 */
1: 	LanguageConnectionContext
1: 	newLanguageConnectionContext(ContextManager cm,
1: 								TransactionController tc,
1: 								LanguageFactory lf,
1: 								Database db,
1: 								String userName,
1: 								String drdaID,
1: 								String dbname)
1: 
1: 		throws StandardException;
1: 
1: 	/**
1: 		Get the UUIDFactory to use with this language connection
1: 	 */
1: 	UUIDFactory	getUUIDFactory();
1: 
1: 	/**
1: 		Get the ClassFactory to use with this language connection
1: 	 */
1: 	ClassFactory	getClassFactory();
1: 
1: 	/**
1: 		Get the JavaFactory to use with this language connection
1: 	 */
1: 	JavaFactory	getJavaFactory();
1: 
1: 	/**
0: 		Get the NodeFactory to use with this language connection
1: 	 */
0: 	NodeFactory	getNodeFactory();
1: 
1: 	/**
1: 		Get the ExecutionFactory to use with this language connection
1: 	 */
1: 	ExecutionFactory	getExecutionFactory();
1: 
1: 	/**
1: 		Get the PropertyFactory to use with this language connection
1: 	 */
1: 	PropertyFactory	getPropertyFactory();
1: 
1: 	/**
0: 		Get the AccessFactory to use with this language connection
1: 	 */
0: 	AccessFactory	getAccessFactory();
1: 
1: 	/**
1: 		Get the OptimizerFactory to use with this language connection
1: 	 */
1: 	OptimizerFactory	getOptimizerFactory();
1: 
1: 	/**
1: 		Get the TypeCompilerFactory to use with this language connection
1: 	 */
1: 	TypeCompilerFactory getTypeCompilerFactory();
1: 
1: 	/**
1: 		Get the DataValueFactory to use with this language connection
1: 		This is expected to get stuffed into the language connection
1: 		context and accessed from there.
1: 
1: 	 */
1: 	DataValueFactory		getDataValueFactory(); 
1: 
1: 	public CacheManager getStatementCache();
1: 
1:     public Parser newParser(CompilerContext cc);
1: }
author:David Van Couvering
-------------------------------------------------------------------------------
commit:75588ca
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
author:Bernt Johnsen
-------------------------------------------------------------------------------
commit:5087be8
/////////////////////////////////////////////////////////////////////////
0: 
1: 		Get a Statement
1: 		@param compilationSchema schema
1: 		@param forReadOnly true if concurrency mode is CONCUR_READ_ONLY
1: 	Statement getStatement(SchemaDescriptor compilationSchema, String statementText, boolean forReadOnly);
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.iapi.sql.conn
0:    (C) Copyright IBM Corp. 1997, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.iapi.sql.conn;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.db.Database;
0: 
0: import org.apache.derby.iapi.store.access.AccessFactory;
0: import org.apache.derby.iapi.services.property.PropertyFactory;
0: 
0: import org.apache.derby.iapi.sql.compile.OptimizerFactory;
0: import org.apache.derby.iapi.sql.compile.NodeFactory;
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.types.DataValueFactory;
0: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
0: import org.apache.derby.iapi.sql.execute.ExecutionFactory;
0: import org.apache.derby.iapi.sql.Activation;
0: import org.apache.derby.iapi.sql.Statement;
0: import org.apache.derby.iapi.sql.compile.Parser;
0: 
0: import org.apache.derby.iapi.services.uuid.UUIDFactory;
0: import org.apache.derby.iapi.services.compiler.JavaFactory;
0: import org.apache.derby.iapi.services.loader.ClassFactory;
0: import org.apache.derby.iapi.services.context.ContextManager;
0: import org.apache.derby.iapi.services.cache.CacheManager;
0: 
0: import org.apache.derby.iapi.sql.LanguageFactory;
0: import org.apache.derby.iapi.store.access.TransactionController;
0: import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
0: 
0: import java.io.InputStream;
0: 
0: import java.util.Locale;
0: 
0: /**
0:  * Factory interface for items specific to a connection in the language system.
0:  * This is expected to be used internally, and so is not in Language.Interface.
0:  * <p>
0:  * This Factory provides pointers to other language factories; the
0:  * LanguageConnectionContext holds more dynamic information, such as
0:  * prepared statements and whether a commit has occurred or not.
0:  * <p>
0:  * This Factory is for internal items used throughout language during a
0:  * connection. Things that users need for the Database API are in
0:  * LanguageFactory in Language.Interface.
0:  * <p>
0:  * This factory returns (and thus starts) all the other per-database
0:  * language factories. So there might someday be properties as to which
0:  * ones to start (attributes, say, like level of optimization).
0:  * If the request is relative to a specific connection, the connection
0:  * is passed in. Otherwise, they are assumed to be database-wide services.
0:  *
0:  * @see org.apache.derby.iapi.sql.LanguageFactory
0:  *
0:  * @author ames
0:  */
0: public interface LanguageConnectionFactory {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_1997_2004;
0: 	/**
0: 		Used to locate this factory by the Monitor basic service.
0: 		There needs to be a language factory per database.
0: 	 */
0: 	String MODULE = "org.apache.derby.iapi.sql.conn.LanguageConnectionFactory";
0: 
0: 	/**
0: 		Get a Statement.
0: 		
0: 		@param statementText the text for the statement
0: 		@return	The Statement
0: 	 */
0: 	Statement getStatement(SchemaDescriptor compilationSchema, String statementText);
0: 
0: 	/**
0: 		Get a new LanguageConnectionContext. this holds things
0: 		we want to remember about activity in the language system,
0: 		where this factory holds things that are pretty stable,
0: 		like other factories.
0: 		<p>
0: 		The returned LanguageConnectionContext is intended for use
0: 		only by the connection that requested it.
0: 
0: 		@return a language connection context for the context stack.
0: 		@exception StandardException the usual
0: 	 */
0: 	LanguageConnectionContext
0: 	newLanguageConnectionContext(ContextManager cm,
0: 								TransactionController tc,
0: 								LanguageFactory lf,
0: 								Database db,
0: 								String userName,
0: 								String drdaID,
0: 								String dbname)
0: 
0: 		throws StandardException;
0: 
0: 	/**
0: 		Get the UUIDFactory to use with this language connection
0: 	 */
0: 	UUIDFactory	getUUIDFactory();
0: 
0: 	/**
0: 		Get the ClassFactory to use with this language connection
0: 	 */
0: 	ClassFactory	getClassFactory();
0: 
0: 	/**
0: 		Get the JavaFactory to use with this language connection
0: 	 */
0: 	JavaFactory	getJavaFactory();
0: 
0: 	/**
0: 		Get the NodeFactory to use with this language connection
0: 	 */
0: 	NodeFactory	getNodeFactory();
0: 
0: 	/**
0: 		Get the ExecutionFactory to use with this language connection
0: 	 */
0: 	ExecutionFactory	getExecutionFactory();
0: 
0: 	/**
0: 		Get the PropertyFactory to use with this language connection
0: 	 */
0: 	PropertyFactory	getPropertyFactory();
0: 
0: 	/**
0: 		Get the AccessFactory to use with this language connection
0: 	 */
0: 	AccessFactory	getAccessFactory();
0: 
0: 	/**
0: 		Get the OptimizerFactory to use with this language connection
0: 	 */
0: 	OptimizerFactory	getOptimizerFactory();
0: 
0: 	/**
0: 		Get the TypeCompilerFactory to use with this language connection
0: 	 */
0: 	TypeCompilerFactory getTypeCompilerFactory();
0: 
0: 	/**
0: 		Get the DataValueFactory to use with this language connection
0: 		This is expected to get stuffed into the language connection
0: 		context and accessed from there.
0: 
0: 	 */
0: 	DataValueFactory		getDataValueFactory(); 
0: 
0: 	public CacheManager getStatementCache();
0: 
0:     public Parser newParser(CompilerContext cc);
0: }
============================================================================