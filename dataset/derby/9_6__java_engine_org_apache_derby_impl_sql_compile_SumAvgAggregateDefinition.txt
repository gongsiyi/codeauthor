1:fe77ca5: /*
1:345de35: 
1:345de35:    Derby - Class org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition
1:345de35: 
1:2d37fd6:    Licensed to the Apache Software Foundation (ASF) under one or more
1:2d37fd6:    contributor license agreements.  See the NOTICE file distributed with
1:2d37fd6:    this work for additional information regarding copyright ownership.
1:2d37fd6:    The ASF licenses this file to you under the Apache License, Version 2.0
1:2d37fd6:    (the "License"); you may not use this file except in compliance with
1:2d37fd6:    the License.  You may obtain a copy of the License at
1:345de35: 
1:345de35:       http://www.apache.org/licenses/LICENSE-2.0
1:345de35: 
1:345de35:    Unless required by applicable law or agreed to in writing, software
1:345de35:    distributed under the License is distributed on an "AS IS" BASIS,
1:345de35:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:345de35:    See the License for the specific language governing permissions and
1:345de35:    limitations under the License.
8:fe77ca5: 
2:fe77ca5:  */
1:fe77ca5: 
1:fe77ca5: package org.apache.derby.impl.sql.compile;
1:fe77ca5: 
1:fe77ca5: import org.apache.derby.iapi.error.StandardException;
1:fe77ca5: import org.apache.derby.iapi.reference.ClassName;
1:3bb140c: import org.apache.derby.iapi.services.context.ContextService;
1:7e51e9d: import org.apache.derby.shared.common.sanity.SanityManager;
1:3bb140c: import org.apache.derby.iapi.sql.compile.CompilerContext;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1:3bb140c: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
1:3bb140c: import org.apache.derby.iapi.types.DataTypeDescriptor;
1:3bb140c: import org.apache.derby.iapi.types.TypeId;
1:fe77ca5: 
2:fe77ca5: /**
1:3bb140c:  * Definition for the SUM()/AVG() aggregates.
1:fe77ca5:  *
1:fe77ca5:  */
1:3bb140c: class SumAvgAggregateDefinition
1:fe77ca5: 		implements AggregateDefinition 
1:fe77ca5: {
1:fe77ca5: 	private boolean isSum;
1:fe77ca5: 	/**
1:fe77ca5: 	 * Niladic constructor.  Does nothing.  For ease
1:fe77ca5: 	 * Of use, only.
1:fe77ca5: 	 */
1:4469400:     public SumAvgAggregateDefinition() { super(); }
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Determines the result datatype.  Accept NumberDataValues
1:fe77ca5: 	 * only.  
1:fe77ca5: 	 * <P>
1:fe77ca5: 	 * <I>Note</I>: In the future you should be able to do
1:fe77ca5: 	 * a sum user data types.  One option would be to run
1:fe77ca5: 	 * sum on anything that implements plus().  In which
1:fe77ca5: 	 * case avg() would need divide().
1:fe77ca5: 	 *
1:6b50965: 	 * @param inputType	the input type, either a user type or a java.lang object
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return the output Class (null if cannot operate on
1:fe77ca5: 	 *	value expression of this type.
1:fe77ca5: 	 */
1:85ddc17: 	public final DataTypeDescriptor	getAggregator(DataTypeDescriptor inputType, 
1:fe77ca5: 				StringBuffer aggregatorClass) 
1:fe77ca5: 	{
1:fe77ca5: 		try
1:fe77ca5: 		{
1:85ddc17: 			TypeId compType = inputType.getTypeId();
1:fe77ca5: 		
1:fe77ca5: 			CompilerContext cc = (CompilerContext)
1:a0dbbd7: 				QueryTreeNode.getContext(CompilerContext.CONTEXT_ID);
1:fe77ca5: 			TypeCompilerFactory tcf = cc.getTypeCompilerFactory();
1:fe77ca5: 			TypeCompiler tc = tcf.getTypeCompiler(compType);
1:fe77ca5: 		
1:fe77ca5: 			/*
1:fe77ca5: 			** If the class implements NumberDataValue, then we
1:fe77ca5: 			** are in business.  Return type is same as input
1:fe77ca5: 			** type.
1:fe77ca5: 			*/
1:fe77ca5: 			if (compType.isNumericTypeId())
1:fe77ca5: 			{
1:fe77ca5: 				aggregatorClass.append(getAggregatorClassName());
1:fe77ca5: 
1:fe77ca5: 				DataTypeDescriptor outDts = tc.resolveArithmeticOperation( 
1:85ddc17:                         inputType, inputType, getOperator());
1:fe77ca5: 				/*
1:fe77ca5: 				** SUM and AVG may return null
1:fe77ca5: 				*/
1:85ddc17: 				return outDts.getNullabilityType(true);
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 		catch (StandardException e)
1:fe77ca5: 		{
1:fe77ca5: 			if (SanityManager.DEBUG)
1:fe77ca5: 			{
1:e7d2a42: 				SanityManager.THROWASSERT("Unexpected exception", e);
1:fe77ca5: 			}
1:fe77ca5: 		}
1:fe77ca5: 
1:fe77ca5: 		return null;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return the aggregator class.  
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return SumAggregator.CLASS_NAME/AvgAggregator.CLASS_NAME
1:fe77ca5: 	 */
1:fe77ca5: 	private String getAggregatorClassName()
1:fe77ca5: 	{
1:fe77ca5: 		if ( isSum )
1:fe77ca5: 				return ClassName.SumAggregator;
1:fe77ca5: 		else
1:fe77ca5: 				return ClassName.AvgAggregator;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * Return the arithmetic operator corresponding
1:fe77ca5: 	 * to this operation.
1:fe77ca5: 	 *
1:fe77ca5: 	 * @return TypeCompiler.SUM_OP /TypeCompiler.AVG_OP
1:fe77ca5: 	 */
1:fe77ca5: 	protected String getOperator()
1:fe77ca5: 	{
1:fe77ca5: 		if ( isSum )
1:fe77ca5: 				return TypeCompiler.SUM_OP;
1:fe77ca5: 		else
1:fe77ca5: 				return TypeCompiler.AVG_OP;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: 	/**
1:fe77ca5: 	 * This is set by the parser.
1:fe77ca5: 	 */
1:3bb140c:     final void setSumOrAvg(boolean isSum)
1:fe77ca5: 	{
1:fe77ca5: 		this.isSum = isSum;
1:fe77ca5: 	}
1:fe77ca5: 
1:fe77ca5: }
============================================================================
author:Richard N. Hillegas
-------------------------------------------------------------------------------
commit:4469400
/////////////////////////////////////////////////////////////////////////
1:     public SumAvgAggregateDefinition() { super(); }
commit:a0dbbd7
/////////////////////////////////////////////////////////////////////////
1: 				QueryTreeNode.getContext(CompilerContext.CONTEXT_ID);
author:Bryan Pendleton
-------------------------------------------------------------------------------
commit:7e51e9d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.shared.common.sanity.SanityManager;
author:Dag H. Wanvik
-------------------------------------------------------------------------------
commit:3bb140c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: import org.apache.derby.iapi.sql.compile.TypeCompiler;
1: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
1: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: import org.apache.derby.iapi.types.TypeId;
1:  * Definition for the SUM()/AVG() aggregates.
1: class SumAvgAggregateDefinition
/////////////////////////////////////////////////////////////////////////
0:     SumAvgAggregateDefinition() { super(); }
/////////////////////////////////////////////////////////////////////////
1:     final void setSumOrAvg(boolean isSum)
author:Daniel John Debrunner
-------------------------------------------------------------------------------
commit:85ddc17
/////////////////////////////////////////////////////////////////////////
1: 	public final DataTypeDescriptor	getAggregator(DataTypeDescriptor inputType, 
1: 			TypeId compType = inputType.getTypeId();
/////////////////////////////////////////////////////////////////////////
1:                         inputType, inputType, getOperator());
1: 				return outDts.getNullabilityType(true);
commit:345de35
/////////////////////////////////////////////////////////////////////////
1:    Derby - Class org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition
1: 
0:    Copyright 2001, 2004 The Apache Software Foundation or its licensors, as applicable.
1: 
0:    Licensed under the Apache License, Version 2.0 (the "License");
0:    you may not use this file except in compliance with the License.
0:    You may obtain a copy of the License at
1: 
1:       http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
commit:61070a6
/////////////////////////////////////////////////////////////////////////
commit:fe77ca5
/////////////////////////////////////////////////////////////////////////
1: /*
1: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
1: 
1:  */
1: 
1: package org.apache.derby.impl.sql.compile;
1: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
1: 
0: import org.apache.derby.impl.sql.execute.SumAggregator;
0: import org.apache.derby.impl.sql.execute.AvgAggregator;
1: 
0: import org.apache.derby.catalog.TypeDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
1: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
1: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
1: 
1: import org.apache.derby.iapi.error.StandardException;
1: import org.apache.derby.iapi.reference.ClassName;
1: 
1: /**
0:  * Defintion for the SUM()/AVG() aggregates.
1:  *
0:  * @author jamie
1:  */
0: public class SumAvgAggregateDefinition
1: 		implements AggregateDefinition 
1: {
1: 	/**
0: 		IBM Copyright &copy notice.
1: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
1: 	private boolean isSum;
1: 	/**
1: 	 * Niladic constructor.  Does nothing.  For ease
1: 	 * Of use, only.
1: 	 */
0: 	public SumAvgAggregateDefinition() { super(); }
1: 
1: 	/**
1: 	 * Determines the result datatype.  Accept NumberDataValues
1: 	 * only.  
1: 	 * <P>
1: 	 * <I>Note</I>: In the future you should be able to do
1: 	 * a sum user data types.  One option would be to run
1: 	 * sum on anything that implements plus().  In which
1: 	 * case avg() would need divide().
1: 	 *
0: 	 * @param the input type, either a user type or a java.lang object
0: 	 * @param implementsInterface	the interface it implements
1: 	 *
1: 	 * @return the output Class (null if cannot operate on
1: 	 *	value expression of this type.
1: 	 */
0: 	public final TypeDescriptor	getAggregator(TypeDescriptor inputType, 
1: 				StringBuffer aggregatorClass) 
1: 	{
1: 		try
1: 		{
0: 			LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 				ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);
1: 
0: 			DataTypeDescriptor dts = new DataTypeDescriptor( (DataTypeDescriptor)inputType, inputType.isNullable());
0: 			TypeId compType = dts.getTypeId();
1: 		
1: 			CompilerContext cc = (CompilerContext)
0: 				ContextService.getContext(CompilerContext.CONTEXT_ID);
1: 			TypeCompilerFactory tcf = cc.getTypeCompilerFactory();
1: 			TypeCompiler tc = tcf.getTypeCompiler(compType);
1: 		
1: 			/*
1: 			** If the class implements NumberDataValue, then we
1: 			** are in business.  Return type is same as input
1: 			** type.
1: 			*/
1: 			if (compType.isNumericTypeId())
1: 			{
1: 				aggregatorClass.append(getAggregatorClassName());
1: 
1: 				DataTypeDescriptor outDts = tc.resolveArithmeticOperation( 
0: 															dts, dts, getOperator());
1: 				/*
1: 				** SUM and AVG may return null
1: 				*/
0: 				outDts.setNullability(true);
0: 				return outDts;
1: 			}
1: 		}
1: 		catch (StandardException e)
1: 		{
1: 			if (SanityManager.DEBUG)
1: 			{
0: 				SanityManager.THROWASSERT("Unexpected exception " + e);
1: 			}
1: 		}
1: 
1: 		return null;
1: 	}
1: 
1: 	/**
1: 	 * Return the aggregator class.  
1: 	 *
1: 	 * @return SumAggregator.CLASS_NAME/AvgAggregator.CLASS_NAME
1: 	 */
1: 	private String getAggregatorClassName()
1: 	{
1: 		if ( isSum )
1: 				return ClassName.SumAggregator;
1: 		else
1: 				return ClassName.AvgAggregator;
1: 	}
1: 
1: 	/**
1: 	 * Return the arithmetic operator corresponding
1: 	 * to this operation.
1: 	 *
1: 	 * @return TypeCompiler.SUM_OP /TypeCompiler.AVG_OP
1: 	 */
1: 	protected String getOperator()
1: 	{
1: 		if ( isSum )
1: 				return TypeCompiler.SUM_OP;
1: 		else
1: 				return TypeCompiler.AVG_OP;
1: 	}
1: 
1: 	/**
1: 	 * This is set by the parser.
1: 	 */
0: 	public final void setSumOrAvg(boolean isSum)
1: 	{
1: 		this.isSum = isSum;
1: 	}
1: 
1: }
author:Knut Anders Hatlen
-------------------------------------------------------------------------------
commit:e7d2a42
/////////////////////////////////////////////////////////////////////////
1: 				SanityManager.THROWASSERT("Unexpected exception", e);
author:Kristian Waagan
-------------------------------------------------------------------------------
commit:6c9dac8
/////////////////////////////////////////////////////////////////////////
author:David Van Couvering
-------------------------------------------------------------------------------
commit:2d37fd6
/////////////////////////////////////////////////////////////////////////
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to you under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
commit:6b50965
/////////////////////////////////////////////////////////////////////////
1: 	 * @param inputType	the input type, either a user type or a java.lang object
author:Oyvind Bakksjo
-------------------------------------------------------------------------------
commit:aaea357
author:Ken Coar
-------------------------------------------------------------------------------
commit:95e7b46
/////////////////////////////////////////////////////////////////////////
0: /*
0: 
0:    Licensed Materials - Property of IBM
0:    Cloudscape - Package org.apache.derby.impl.sql.compile
0:    (C) Copyright IBM Corp. 2001, 2004. All Rights Reserved.
0:    US Government Users Restricted Rights - Use, duplication or
0:    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
0: 
0:  */
0: 
0: package org.apache.derby.impl.sql.compile;
0: 
0: import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
0: import org.apache.derby.iapi.services.context.ContextService;
0: import org.apache.derby.iapi.services.sanity.SanityManager;
0: 
0: import org.apache.derby.impl.sql.execute.SumAggregator;
0: import org.apache.derby.impl.sql.execute.AvgAggregator;
0: 
0: import org.apache.derby.catalog.TypeDescriptor;
0: import org.apache.derby.iapi.types.TypeId;
0: import org.apache.derby.iapi.types.DataTypeDescriptor;
0: 
0: import org.apache.derby.iapi.sql.compile.TypeCompiler;
0: import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
0: 
0: import org.apache.derby.iapi.sql.compile.CompilerContext;
0: 
0: import org.apache.derby.iapi.error.StandardException;
0: import org.apache.derby.iapi.reference.ClassName;
0: 
0: /**
0:  * Defintion for the SUM()/AVG() aggregates.
0:  *
0:  * @author jamie
0:  */
0: public class SumAvgAggregateDefinition
0: 		implements AggregateDefinition 
0: {
0: 	/**
0: 		IBM Copyright &copy notice.
0: 	*/
0: 	public static final String copyrightNotice = org.apache.derby.iapi.reference.Copyright.SHORT_2001_2004;
0: 	private boolean isSum;
0: 	/**
0: 	 * Niladic constructor.  Does nothing.  For ease
0: 	 * Of use, only.
0: 	 */
0: 	public SumAvgAggregateDefinition() { super(); }
0: 
0: 	/**
0: 	 * Determines the result datatype.  Accept NumberDataValues
0: 	 * only.  
0: 	 * <P>
0: 	 * <I>Note</I>: In the future you should be able to do
0: 	 * a sum user data types.  One option would be to run
0: 	 * sum on anything that implements plus().  In which
0: 	 * case avg() would need divide().
0: 	 *
0: 	 * @param the input type, either a user type or a java.lang object
0: 	 * @param implementsInterface	the interface it implements
0: 	 *
0: 	 * @return the output Class (null if cannot operate on
0: 	 *	value expression of this type.
0: 	 */
0: 	public final TypeDescriptor	getAggregator(TypeDescriptor inputType, 
0: 				StringBuffer aggregatorClass) 
0: 	{
0: 		try
0: 		{
0: 			LanguageConnectionContext lcc = (LanguageConnectionContext)
0: 				ContextService.getContext(LanguageConnectionContext.CONTEXT_ID);
0: 
0: 			DataTypeDescriptor dts = new DataTypeDescriptor( (DataTypeDescriptor)inputType, inputType.isNullable());
0: 			TypeId compType = dts.getTypeId();
0: 		
0: 			CompilerContext cc = (CompilerContext)
0: 				ContextService.getContext(CompilerContext.CONTEXT_ID);
0: 			TypeCompilerFactory tcf = cc.getTypeCompilerFactory();
0: 			TypeCompiler tc = tcf.getTypeCompiler(compType);
0: 		
0: 			/*
0: 			** If the class implements NumberDataValue, then we
0: 			** are in business.  Return type is same as input
0: 			** type.
0: 			*/
0: 			if (compType.isNumericTypeId())
0: 			{
0: 				aggregatorClass.append(getAggregatorClassName());
0: 
0: 				DataTypeDescriptor outDts = tc.resolveArithmeticOperation( 
0: 															dts, dts, getOperator());
0: 				/*
0: 				** SUM and AVG may return null
0: 				*/
0: 				outDts.setNullability(true);
0: 				return outDts;
0: 			}
0: 		}
0: 		catch (StandardException e)
0: 		{
0: 			if (SanityManager.DEBUG)
0: 			{
0: 				SanityManager.THROWASSERT("Unexpected exception " + e);
0: 			}
0: 		}
0: 
0: 		return null;
0: 	}
0: 
0: 	/**
0: 	 * Return the aggregator class.  
0: 	 *
0: 	 * @return SumAggregator.CLASS_NAME/AvgAggregator.CLASS_NAME
0: 	 */
0: 	private String getAggregatorClassName()
0: 	{
0: 		if ( isSum )
0: 				return ClassName.SumAggregator;
0: 		else
0: 				return ClassName.AvgAggregator;
0: 	}
0: 
0: 	/**
0: 	 * Return the arithmetic operator corresponding
0: 	 * to this operation.
0: 	 *
0: 	 * @return TypeCompiler.SUM_OP /TypeCompiler.AVG_OP
0: 	 */
0: 	protected String getOperator()
0: 	{
0: 		if ( isSum )
0: 				return TypeCompiler.SUM_OP;
0: 		else
0: 				return TypeCompiler.AVG_OP;
0: 	}
0: 
0: 	/**
0: 	 * This is set by the parser.
0: 	 */
0: 	public final void setSumOrAvg(boolean isSum)
0: 	{
0: 		this.isSum = isSum;
0: 	}
0: 
0: }
============================================================================